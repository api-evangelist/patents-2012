---

title: Migrated application performance comparisons using log mapping
abstract: Mechanisms are provided for comparing the performance of applications. An application log record associated with a first application is identified. Mappings between the application logs and underlying log record of environments are made for both the source and the target environments. Performance measurements are made based on both the application logs in the source and target environments are made and compared to each other by way of the mappings. A result of the comparison is output to thereby compare performance of the first application in the source environment with performance of a second application in the target environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09021484&OS=09021484&RS=09021484
owner: International Business Machines Corporation
number: 09021484
owner_city: Armonk
owner_country: US
publication_date: 20120621
---
The present application relates generally to an improved data processing apparatus and method and more specifically to mechanisms for evaluating the performance of migrated applications by mapping logs of application performance both prior to and post migration.

In one illustrative embodiment a method in a data processing system is provided for comparing the performance of applications. The method comprises identifying at least one first application log record associated with a first application and having performance information of interest and performing a first mapping of the at least one first application log record to at least one alternative log record associated with events of an underlying first environment in which the first application is executed. The method further comprises performing a second mapping of the at least one alternative log record to at least one second application log record associated with a second application executing in an underlying second environment and generating first performance measurements of the first application based on the at least one first application log record. The method also comprises generating second performance measurements of the second application based on the at least one second application log record and comparing the first performance measurements and the second performance measurements based on the first mapping and the second mapping. The method further comprises outputting a result of the comparison to thereby compare performance of the first application in the first environment with performance of the second application in the second environment.

In other illustrative embodiments a computer program product comprising a computer useable or readable medium having a computer readable program is provided. The computer readable program when executed on a computing device causes the computing device to perform various ones of and combinations of the operations outlined above with regard to the method illustrative embodiment.

In yet another illustrative embodiment a system apparatus is provided. The system apparatus may comprise one or more processors and a memory coupled to the one or more processors. The memory may comprise instructions which when executed by the one or more processors cause the one or more processors to perform various ones of and combinations of the operations outlined above with regard to the method illustrative embodiment.

These and other features and advantages of the present invention will be described in or will become apparent to those of ordinary skill in the art in view of the following detailed description of the example embodiments of the present invention.

Migrating an information technology infrastructure between different environments often requires a performance baselining and comparison process. In such a case the performance of one or more computer processes is analyzed in a pre migration environment. The same process performances are later analyzed in a post migration environment and compared. One way of carrying out performance analysis and comparison is using time stamped records in log data structures produced by the activities of a computer process. This way of performance analysis may be preferred since analyzing logs does not disrupt the activities of the process. However one must know what types of records to obtain from such logs in order to be able to perform the performance analysis. The same records in log data structures associated with both pre and post migration environments should be used to perform such performance analysis in order for the performance comparison to be accurate. However when a computer process is migrated to a new environment the software implementing the process may in fact change e.g. a new version or vendor of software is selected to perform the processes. Hence the challenge is to identify log records in log data structures associated with the execution of the process in the new environment that map to the same type of log records in the log data structures generated by execution of the process in the old environment so that accurate performance analysis may be performed.

The illustrative embodiments provide a mechanism for computer process performance analysis between different information technology IT environments using a set of policies for mapping a set of log records in one IT environment to another set of records in another IT environment. More specifically the invention uses an available alternate log source whose format will not or is less likely to change between environments and whose data is also associated with the computer process of interest. One might ask why this log source cannot be used directly for performance analysis in the first place. Many times in log based performance analysis there is a preferred log that a human can more easily analyze to understand how to interpret the performance of the process. These types of logs should be used in both pre and post migration settings as it may be harder to use another log whose data is not as easily interpretable by a human.

To summarize the general approach of the illustrative embodiments log records from a preferred pre migration log are mapped to log records of an alternate log in a pre migration environment. Then a mapping between alternate log records in pre and post migration environments is established. Finally a mapping between the alternate log records and preferred records in the post migration environment is established. This chain of mappings supports mapping the log records in the pre migration environment to corresponding log records in a post migration environment using the alternate log records to facilitate this mapping.

One advantage of this approach is that one can now use logs for performance baselining and analysis in scenarios of Information Technology IT infrastructure migrations e.g. data center relocations cloud computing migrations and the like while taking into account differences in log structures in the various IT environments from which and to which processes are migrated. Again this provides a non invasive approach to performance analysis unlike the use of monitoring instrumentation e.g. probes agents etc. that might require hard to obtain security credentials and themselves may impact the performance of the processes in the pre and post migration environments. Thus with the mechanisms of the illustrative embodiments performance comparisons are facilitated to provide information as to differences in the performance e.g. the relative improvement or reduction in performance of a process when it is migrated from one IT environment to another.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in any one or more computer readable medium s having computer usable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in a baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Computer code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable radio frequency RF etc. or any suitable combination thereof.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to the illustrative embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions that implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The illustrative embodiments may be utilized in many different types of data processing environments including distributed data processing environments stand alone computing device environments and the like. However since the present invention is directed to the mapping of log records between pre and post migration environments it is especially well suited for use in a distributed data processing system cloud computing system or the like in which a pre and post migration environment are provided. In order to provide a context for the description of the specific elements and functionality of the illustrative embodiments are provided hereafter as example environments in which aspects of the illustrative embodiments may be implemented. It should be appreciated that are only examples and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the present invention may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.

In the depicted example server and server are connected to network along with storage unit . In addition clients and are also connected to network . These clients and may be for example personal computers network computers or the like. In the depicted example server provides data such as boot files operating system images and applications to the clients and . Clients and are clients to server in the depicted example. Distributed data processing system may include additional servers clients and other devices not shown.

In the depicted example distributed data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course the distributed data processing system may also be implemented to include a number of different types of networks such as for example an intranet a local area network LAN a wide area network WAN or the like. As stated above is intended as an example not as an architectural limitation for different embodiments of the present invention and therefore the particular elements shown in should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.

In the depicted example data processing system employs a hub architecture including north bridge and memory controller hub NB MCH and south bridge and input output I O controller hub SB ICH . Processing unit main memory and graphics processor are connected to NB MCH . Graphics processor may be connected to NB MCH through an accelerated graphics port AGP .

In the depicted example local area network LAN adapter connects to SB ICH . Audio adapter keyboard and mouse adapter modem read only memory ROM hard disk drive HDD CD ROM drive universal serial bus USB ports and other communication ports and PCI PCIe devices connect to SB ICH through bus and bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash basic input output system BIOS .

HDD and CD ROM drive connect to SB ICH through bus . HDD and CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. Super I O SIO device may be connected to SB ICH .

An operating system runs on processing unit . The operating system coordinates and provides control of various components within the data processing system in . As a client the operating system may be a commercially available operating system such as Microsoft Windows 7 . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system .

As a server data processing system may be for example an IBM eServer System p computer system running the Advanced Interactive Executive AIX operating system or the LINUX operating system. Data processing system may be a symmetric multiprocessor SMP system including a plurality of processors in processing unit . Alternatively a single processor system may be employed.

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as HDD and may be loaded into main memory for execution by processing unit . The processes for illustrative embodiments of the present invention may be performed by processing unit using computer usable program code which may be located in a memory such as for example main memory ROM or in one or more peripheral devices and for example.

A bus system such as bus or bus as shown in may be comprised of one or more buses. Of course the bus system may be implemented using any type of communication fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communication unit such as modem or network adapter of may include one or more devices used to transmit and receive data. A memory may be for example main memory ROM or a cache such as found in NB MCH in .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system other than the SMP system mentioned previously without departing from the spirit and scope of the present invention.

Moreover the data processing system may take the form of any of a number of different data processing systems including client computing devices server computing devices a tablet computer laptop computer telephone or other communication device a personal digital assistant PDA or the like. In some illustrative examples data processing system may be a portable computing device that is configured with flash memory to provide non volatile memory for storing operating system files and or user generated data for example. Essentially data processing system may be any known or later developed data processing system without architectural limitation.

As noted above one of the problems associated with log based performance baselining and comparison in order to identify changes is performance of processes when they are migrated from one operating environment or IT environment to another is that it may often be difficult to identify corresponding log records in the pre and post migration environments. That is the processes may be transformed as part of the migration operation and as a result the log records generated in the pre and post migration environments may not directly match each other so that comparison is straight forward. For example log record formats may change due to different software packages versions providers or the like facilitating the same transaction in the two different environments i.e. pre and post migration environments.

Within the first environment the first application may operate to handle various operations performed within the first environment such as servicing client requests and the like. For example in the depicted example the application may operate to process messages sent from a handheld client communication device such as a smart phone personal digital assistant PDA portable hand held computer or game machine or the like. As a result of a user of a client computing device sending a message via the application a log record for logging the operations performed by the application to handle the sending of the message from the client computing device. For example the log record in the first environment may be of the type User 1 sends message from handheld. 

At some point in time the application may need to be migrated to a new environment such as the second environment . For example the migration may be due to a need to offload the application to another computing device and thus the second environment due to a need to upgrade the environment to add additional hardware software resources or any of a number of reasons for a need to change the environment in which the application operates.

As part of the migration of the application from the first environment to the second environment the application may need to be updated replaced or otherwise modified for proper operation within the second environment . The updated replaced application may be a different version of the application or even a completely different software package that performs the same or similar functionality of the application but in the second environment for example. As a result of the updating replacement of the application the updated replaced application may perform the same functionality but may operate in a different manner and may be configured such that a different type of log record is generated for the processes of the updated replaced application . For example for handling the very same sending of the message from the client computing device as handled by the application in the first environment a different log record having a different log record format may be generated in the second environment to log the operation of the updated replaced application . As shown in in one illustrative embodiment the log record may have the format of User 1 Event message send Device handheld Attachments none. 

In order to evaluate the change in performance if any of the application when it is migrated to the new environment i.e. the second environment as replaced updated application the same logged operations in both environments and need to be able to be compared. However as is evident from the example shown in the formats and contents of the log records may make it so that it is not immediately recognizable which log records correspond to each other in these different environments and there is not a direct correlation of the formats of the log records and thus not a direct equivalence able to be identified. As a result it may be difficult to perform a comparison of log records and in order to identify any differences in performance of the application in the two environments and .

The illustrative embodiments provide a mechanism for mapping the log record in the first environment to corresponding log records in the second environment to which the application is migrated. The illustrative embodiments provide an intermediate mapping mechanism for mapping the log record in the first environment to an alternate log record in the first environment mapping the alternate log record in the first environment to an alternate log record in the second environment which should be identical or significantly similar since the nature of the alternate log record format is that it seldom changes if at all between environments and then mapping the alternate log record to the log record of the second environment . Alternatively the alternate log record in the first environment may be used to map directly to the log record in the second environment .

In this way the performance information maintained in the log record in the first environment may be compared with the performance information in a corresponding log record in the second environment so as to facilitate determinations as to how performance has been modified by the migration of the application from the first environment to the second environment . Such performance information may include for example time and date based properties timestamp information sequences of operations and the like. Policies for correlating the log record in the first environment to one or more alternate log record representations and correlating the one or more alternate log record representations to one or more corresponding log records in the second environment may be established to perform the matching of log records for comparison of performance information.

As shown in the application performance comparator engine comprises a controller an intra environment event sequence comparator an intra environment log mapping policies repository intra environment log mapping data structure an inter environment event sequence comparator inter environment log mapping policies repository inter environment log mapping data structure log profile repository an output engine and a network interface . These elements of the application performance comparator engine receive as inputs the preferred log data structures and alternate log data structures of the various environments for which performance comparisons of an application are to be performed. The application performance comparator engine may generate various outputs e.g. data structures visual outputs on display devices electronic communications such as electronic mail messages instant messages or the like etc. indicating changes or differences in performance of an application processes within an application or other processes of interest within the various environments based on the operation of the comparators and operating on the log records in the log data structures and .

The preferred log data structures are log data structures in a preferred format which is to mean that they are in a format for use by end users such as system administrators or the like. The preferred format is a more user friendly and user readable format than other machine based formats for logging as previously discussed above. The preferred log data structures may comprise logs from applications middleware web server logs database logs business process execution software logs and the like.

The controller controls the overall operation of the application performance comparator engine and orchestrates the operation of the other elements. The network interface provides a mechanism for communicating with other computing devices storage devices or the like via one or more data networks such as for obtaining access to log data structures providing outputs of performance calculations or performance comparisons or the like.

The intra environment event sequence comparator performs probabilistic mapping of event sequences from a preferred log data structure to event sequences of an alternate log data structure within the same IT environment e.g. within a pre migration environment hereafter referred to as the source environment . That is within the source environment at least two different types of log data structures are generated and maintained. The first log data structure is a preferred log data structure which stores log records representing events generated by the operation of processes within an application middleware or the like executing within the source environment. The second log data structure is an alternate log data structure which stores log records representing events generated by the IT environment e.g. the source environment as the application is executing within the source environment. Such alternate log data structure events may include for example OS kernel events database events network socket events and other events of the underlying environment other than the events generated by the application processes directly e.g. events that occur as a result of supporting the processes of the application executing in the source environment. The nature of the alternate log data structure record format is that it should not change between pre and post migration environments or such changes should be relatively infrequent such that the alternate log data structure record format can be considered essentially the same in both the pre and post migration environments i.e. the source environment and the target environment.

To further illustrate the different types of log data structures consider a networked Java application. In such an example communication events may be logged by the author of the application in the Java application. Such events may be logged in the preferred log data structure . The Java Virtual Machine JVM may also log certain events since it supplies libraries to support the communication processes the author built into the Java application. The actual operating system might also log certain communication events that are being executed by the JVM. The events associated with the JVM may be stored in the alternative log data structure .

As another example consider a situation in which an author creates application x e.g. a stock purchasing application which depends on application y e.g. a government regulated middleware service to execute trades. The author s software generates preferred logs that are stored in the preferred log data structure . The regulated middleware service generates the alternate log data structures .

The intra environment event sequence comparator based on established mapping policies in the intra environment log mapping policies repository maps events or sequences of events in the preferred log data structure to corresponding events or sequences of events in the alternate log data structure . As one example a mapping policy may take the form of specifying that a high frequency i.e. above a predefined threshold value of events sharing the same timestamp or timestamp values within a predefined window of time in both the preferred log data structure and the alternate log data structure may be considered to map to each other. Thus for example if a first event A or pattern of events A in the preferred log data structure has a timestamp that is within a predefined window of time of a timestamp associated with a second event B or pattern of events B in the alternate log data structure then according to the mapping policy these events A and B or patterns of events A and B may be correlated as mapping to one another. This correlation may be maintained in an intra environment mapping data structure to specify that event A or pattern of events A maps to event B or pattern of events B.

As another example the mapping policy may take the form of specifying that a high frequency of patterns of events occurring in the same sequence with similar temporal distributions among events may be determined to be related to each other. For example the mapping policy may specify a pattern of application X is defined as a b c f a b f b c where . is the sequence of events a b c and f . is a function defining statistics of time intervals between two events e.g. a and b b and c etc. If the same pattern of events occur repeatedly and have a same temporal relationship with another pattern of events then the two patterns of events may be considered related such that a mapping between the two patterns may be established and stored in the intra environment mapping data structure .

The intra environment event sequence comparator may utilize probability functions to determine if a first event or pattern of events in the preferred log data structure correlates to a second event or pattern of events in the alternate log data structure . For example a mapping probability may be defined as a function of one or more of the mapping policies described above. For example a probability function p a b f freq diff timestamp a timestamp b 

The probabilities indicate the probability that event a correlates to event b or sequence x correlates to sequence y. Based on these probabilities the mapping of events or sequences of events in the log data structures and may be determined and stored in the intra environment mapping data structure . For example a probability threshold may be predetermined against which the probabilities are compared. If the probability meets or exceeds this probability threshold then a correlation between events and or sequences of events is determined to exist and may be used to generate a mapping rule.

The intra environment event sequence comparator may perform the mapping between events in preferred log data structures and alternate log data structures for a plurality of pairs of preferred log data structures and alternate log data structures . Thus for example a mapping between events in a preferred log data structure and a corresponding alternate log data structure in a source environment and another mapping between events in a preferred log data structure and a corresponding alternate log data structure for a target environment may be generated.

A similar functionality is performed by the inter environment event sequence comparator . However the inter environment event sequence comparator operates to map events or sequences of events in an alternate log data structure of one environment e.g. a source environment to events or sequences of events in an alternate log data structure of a second environment e.g. target environment. The mappings between alternate log data structures of the various environments may be stored in the inter environment log mapping data structure . As mentioned above it is desirable that the records in the alternate log data structure have a format that does not vary often between environments. As a result the mapping between one alternate log data structure of one environment and that of another environment should for the most part be a straight mapping. However since there may be some discrepancies between the underlying environment resources that support the execution of the applications in the environment such that there may be some differences in format of the log records in the alternate log data structure the additional inter environment log mapping data structure may be provided to facilitate the mapping. However if it is known that both the source environment environment from which an application is being migrated and target environment environment to which the application is migrated utilize the same alternate log record format then a direct mapping between the alternate log data structure of the source environment to the preferred log data structure of the target environment may be utilized.

The generation of the mappings stored in the inter environment log mapping data structure may be performed in a similar manner as discussed above with regard to the intra environment log mapping data structure . That is mapping policies and probability functions may be defined for determining mappings between log records.

As an additional operation the system may choose to compare keywords belonging to records of different environments to make a decision as to whether to map the records or not. Consider the case where the aforementioned policies are used to calculate a mapping probability but it doesn t quite meet the threshold value. As an additional operation the system might take those records in question and see if they contain for example 70 of the same words. Alternatively the system might look for a high percentage of occurrences of key or pre defined special words between the records. In a simple case the probability would simply be the percentage of matching words and if this probability crosses a threshold then the system will establish the mapping. The general idea is that records sharing highly similar content probably represent the same event.

The log profile repository stores rules for identifying log records that can be used for performance analysis purposes. For example a rule may define a regular expression or similar type of pattern that describes a log record of interest. Thus when analyzing the preferred log data structure of an environment for log records indicative of performance information for evaluating performance the log profile repository may be used to match expressions patterns or other values determined to be indicative of performance information. These log records having been identified may then be analyzed to determine the performance characteristics of a corresponding application within the selected environment. The same can be done for the application in other environments in which the application is deployed. Using the mechanisms of the illustrative embodiments the mapping of log records from application log records to alternate log records within the same IT environment and then from one alternate log record to another between IT environments and finally from the alternate log record in the other IT environment to the application log record in the other IT environment permits a comparison of performance information for the application in two different environments. This may be extrapolated to any number of different environments.

With reference again to and with continued reference to with the mechanisms of the illustrative embodiments the log profile repository may be used to identify a log record or pattern of log records in the log record data structure of the source environment that contains information useful in determining one or more performance characteristics of the application in the source environment . As a result in the depicted example the pattern of log records x1 x2 and x3 are identified in the preferred log data structure as having performance information. The calculation of one or more performance characteristics for the operation of the application in the source environment may then be calculated based on the information in the identified pattern of log records x1 x2 and x3 such as an amount of time required to service a client request for obtaining an image from an image database.

In addition using the mechanisms of the illustrative embodiments the identified pattern of log records in the preferred log data structure may be mapped to a corresponding pattern of log records in an alternative log data structure associated with the source environment . That is a mapping of the pattern of log records in the preferred log data structure to a corresponding pattern of log records in the alternate log data structure may be already maintained by the application performance comparator engine and thus the correlation can be made using the existing mappings. If a mapping does not exist for this pattern of log records one or more log records then the mechanisms of the intra environment event sequence comparator of may be utilized to generate the mapping based on mapping policies and probability functions as described above.

Similarly the application performance comparator engine may map the log records in the alternate log data structure which themselves map to the identified pattern of log records in the preferred log data structure to log records in the alternate log data structure in the target environment . As noted above in many cases the format of log records in the alternate log data structure is the same as the format of log records in the alternate log data structure and thus the mapping is simple. This is because the alternate log data structures and store log records for portions of their respective environments and that are common between the environments or do not change often of by much over time. However in some cases a mapping data structure may be maintained for defining the mappings between alternate log data structure records.

At this point the identified log record pattern in the preferred log data structure has been mapped to log records in the alternate log data structure of the target environment . Having established this mapping in order to be able to compare the performance of the application in the source environment to the migrated application performance in the target environment a mapping from the alternate log data structure records of the alternate log data structure to corresponding log records in the preferred log data structure is utilized. This mapping may be already established and stored in the application performance comparator or may be generated by the intra environment event sequence comparator using the mapping policies and probability functions described above.

In this way a mapping from the identified log records in the preferred log data structure and the preferred log data structure is established. Performance calculations may likewise be performed on the corresponding log records in the preferred log data structure and thus the performance of the application as determined from the log records of the preferred log data structure may be compared to the performance of the migrated application as determined from the log records of the preferred log data structure that correspond map to the log records of the preferred log data structure as determined by the mappings to the alternate log data structures and . That is the mappings made possible by the mechanisms of the illustrative embodiments map the pattern of log records x1 x2 and x3 in the preferred log data structure to the alternate log records y1 y2 and y3 in the alternate log data structure . The alternate log records y1 y2 and y3 in the alternate log data structure are mapped to alternate log records y 2 and y 3 in the alternate log data structure of the target environment if such a mapping is necessary and the alternate log data structures and are not known to utilize the same log record format . Thereafter the alternate log records y 1 y 2 and y 3 are mapped to the log records x 2 x 3 in the preferred log data structure of the target environment . As a result the performance of the application in the source environment as determined from analysis of information in log records x1 x2 and x3 may be compared to the performance of the migrated application in the target environment as determined from analysis of information in log records x 1 x 2 and x 3 in the preferred log data structure .

The results of this performance comparison between the application in the source environment and the migrated application in the target environment may be used as a basis for generating one or more performance reports by the output engine . The output engine may generate an output such as a display a data structure an electronic message or the like that indicates the difference if any in performance between the application and the migrated application . The output generated by the output engine may be transmitted to a computing device storage device or the like via the network interface for example. In this way the mechanisms of the illustrative embodiments facilitate the comparison of performance of applications between computing or IT environments.

It should be noted that while the illustrative embodiments are described herein as being applicable to the migration of an application from one environment to another the illustrative embodiments are not limited to such. For example the mechanisms of the illustrative embodiments may be used to compare the performance of an application to any other application. Thus the applications need not be so related as to be the original application and a migrated version of the same application. Furthermore the illustrative embodiments may even be utilized to compare the performance of two different applications within the same environment by mapping the log records associated with these different applications to similar underlying environment log records in the alternative log data structure.

As shown in the operation starts by collecting application and alternate log data structures for the particular environment step . A determination is made as to whether an application profile is available in the log profile repository to identify those log records of interest for performance measurements step . If not then a user is prompted to create a new profile and update the log profile repository to identify the types of log records that are of interest for performance measurement purposes step . After the user creates the appropriate profile in the log profile repository or if one already exists the performance related log records in the preferred log data structure are identified based on the log profile for the application in question step . Performance measurements or statistics for the identified log records in the preferred log data structure are calculated obtained step . The mapping policies and probability functions are used to identify underlying log events in the alternate log data structure that correspond with the performance related log records in the preferred log data structure step . The performance measurements or statistics and corresponding application and underlying log records associated with these performance measurements or statistics are then stored in association with each other step . The operation then ends.

As shown in the operation starts by obtaining the alternate log records of interest after having performed the intra environment mapping in the manner described in above step . A determination is made as to whether a mapping between the alternative log data structure of the source environment and an alternative log data structure of the target environment is present or needed step . If so then the alternate log records are mapped from the alternative log data structure of the source environment to the alternative log data structure of the target environment step . Thereafter or if no mapping is required then a determination is made as to whether a mapping between the alternative log records of the target environment and application log records of a preferred log data structure of the target environment exists step . If not then the intra environment mapping operation outlined in may be performed to obtain the intra environment mapping between the alternative log records and the application log records of the target environment as well as corresponding performance measurements or statistics step .

Thereafter or if the intra environment mapping already exists the mapping is used to identify the application log records and their associated performance measurements or statistics corresponding to the alternative log records of the target environment which in turn correspond to the alternative log records of the source environment and ultimately the application log records of interest in the source environment step . A comparison between the performance measurements or statistics associated with the application log records in the source environment and the performance measurements or statistics associated with the application log records in the target environment is then performed and performance difference results are generated step . These performance differences may then be used to generate a report for output and use in determining a difference in the performance of an application in the source environment and an application in the target environment step . The operation then terminates.

As noted above it should be appreciated that the illustrative embodiments may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In one example embodiment the mechanisms of the illustrative embodiments are implemented in software or program code which includes but is not limited to firmware resident software microcode etc.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

