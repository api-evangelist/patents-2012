---

title: Apparatus and method for managing application context
abstract: An apparatus and method for managing application context is provided. A first one of a plurality of terminals, each including at least one application, collects and transmits context information of the application to a migration server so that it is stored and managed in the migration server. The migration server transmits the stored and managed context information to a second terminal corresponding to the first terminal in response to a request of the second terminal. The second terminal restores context based on the context information received from the migration server. This can reproduce the same application and desktop environments as those previously set to be suitable for each work situation, thereby increasing user convenience.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=RE045729&OS=RE045729&RS=RE045729
owner: ELECTRONICS AND TELECOMMUNICATIONS RESEARCH INSTITUTE
number: RE045729
owner_city: Daejeon
owner_country: KR
publication_date: 20120215
---
The present application is based on and claims priorities from Korean Application Number 2005 121814 filed Dec. 12 2005 and Korean Application Number 2006 41680 filed May 9 2006 the disclosure of which is incorporated by reference herein in its entirety.

The present invention relates to an apparatus and method for managing application context and more particularly to an apparatus and method for managing context which allows a user of a terminal to selectively collect and restore work environments i.e. context information of applications installed and used on the terminal.

A method for collecting and restoring context information of office applications used for general purposes has not yet been standardized. This method also depends on internal interfaces provided by each application. Thus it is difficult to simultaneously collect and restore context information from a variety of applications so that it is difficult to manage the application context information. Conventionally since application context information is not classified and unmanageable methods which requires a user to store and restore a variety of context information of running applications personally by using a storage device are used to migrate context information even when only one application is running.

That is since application context to be migrated is not classified and unmanageable the user cannot selectively collect and restore context. For example in conventional context information collection and restoration methods application context information of MS Office is collected using a COM object on the MS Windows operating system but the method may not be used for other applications on the same operating system and also application context information of Linux Open Office is collected using a system call in the Linux operating system but the method may not be used for other applications on the same operating system. Since these methods depend on each application it is difficult for these methods to simultaneously collect context of a variety of applications on one operating system. Also these conventional methods cannot selectively store and restore context desired by the user since context information of each office application cannot be classified to be collected. Thus to store and restore context information the user must personally migrate all context information including undesired context information or migrate only data of each application.

Using the conventional methods to collect transmit and restore all context information makes it impossible to individually select and restore context suitable for each work situation and is also very inefficient while causing security problems. Thus there is a need to provide an apparatus and method which simultaneously supports a variety of applications and also allows selective collection and restoration of application context information desired by the user.

Therefore the present invention has been made in view of the above problems and it is an object of the present invention to provide an apparatus and method for managing application context wherein context information of office applications used for general purposes is classified and context information selected by a user is collected and transmitted to a server and then the context information transmitted to the server is stored and managed therein while being classified according to users context types and work situations so that it is possible to restore a work environment suitable for each work situation.

It is another object of the present invention to provide an apparatus and method for managing application context which allows the user to select and download their own context information stored in a server after passing through an authentication process with a current terminal or with another terminal after moving to another place thereby providing a convenient continuous work service to the user.

It is yet another object of the present invention to provide an apparatus and method for managing application context wherein information which the user desires to migrate from among information of desktop environments and application work environments such as the position of a toolbar of an MS or Linux office program the position and size of a window a file with which the user is currently working a current URL of the Internet Explorer a moving image file which is being played by a Media Player and its playback position and a music file which is being played by an MP3 player and its playback position is selectively collected and stored and application context information suitable for a situation and time desired by the user is selectively restored so that the same environment as the previous environment which the user set to be suitable for each situation and in which the user was working is restored thereby allowing the user to do a continuous work.

In accordance with one aspect of the present invention the above and other objects can be accomplished by the provision of an apparatus for managing application context the apparatus comprising a plurality of terminals each of which includes at least one application collects context information of the application and restores context using the collected context information and a migration server that receives and stores collected context information from a first one of the plurality of terminals and transmits the context information to a second one of the plurality of terminals.

Preferably each of the plurality of terminals includes an application context information of which is to be collected an connection Application Programming Interface API that receives a list of context from the migration server receives selection information of context information to be migrated from a user and collects the selected context information and a migration client that transmits the context information collected by the connection API to the migration server so that the collected context information is stored in the migration server requests the stored context information from the migration server and restores context using the context information received from the migration server in response to the request.

Preferably the migration server includes a user manager that manages and authenticates terminal users an application manager that manages a list of applications that can be migrated and a list of context that is collectable from the applications and manages application context information received from the first terminal a storage that stores the application list the collectable context list and the application context information received from the first terminal and a desktop manager that manages a list of desktop related context information.

In accordance with another aspect of the present invention there is provided a method for managing application context in an application context management apparatus including a plurality of terminals and a migration server that cooperates with the plurality of terminals through a communication network the method comprising collecting and transmitting by a first terminal including at least one application context information of the application to the migration server storing the context information in the migration server transmitting the stored context information from the migration server to a second terminal corresponding to the first terminal in response to a request of the second terminal and restoring by the second terminal context based on the context information received from the migration server.

Preferably collecting and transmitting by the first terminal the context information of the application to the migration server includes receiving a migratable list from the migration server extracting a list of migratable context from the received migratable list outputting the extracted context list and allowing a user to select context information to be migrated and collecting and transmitting the selected context information to the migration server.

Preferably restoring by the second terminal the context based on the context information received from the migration server includes transmitting a context information list request signal to the migration server receiving a context information list from the migration server allowing a user to select context information to be restored based on the context information list and receiving the selected context information and restoring application context.

More preferably restoring by the second terminal the context based on the context information received from the migration server further includes transmitting an authentication request signal to the migration server and receiving an authentication response signal front the migration server.

Preferred embodiments of the present invention will now be described in detail with reference to the accompanying drawings. In the drawings the same or similar elements are denoted by the same reference numerals even though they are depicted in different drawings. In the following description of the present invention a detailed description of known functions and configurations incorporated herein will be omitted when it may obscure the subject matter of the present invention.

As shown in the application context management apparatus according to the present invention includes terminals A and B a communication network and a migration server .

The terminals A and B are coupled to the migration server through the communication network . Each of the terminals A and B includes a PC a PDA a tablet PC or a notebook computer that includes hardware a device driver and an operating system. The communication network includes the wired and wireless Internet and includes any communication line and network capable of communicating with the migration server .

Each of the terminals A and B includes at least one application. The user works using applications on the first terminal A while changing a variety of work environments to be suitable for each work situation. If migration is automatically activated as the user moves to another place or migration is manually activated after the user selects and sets a plurality of context to be migrated from a list of migratable context then the plurality of selected context information is collectively collected from each application and temporarily stored in the first terminal A and is then transmitted to the migration server through the communication network so that it is stored in the migration server .

Thereafter when the user works using another terminal i.e. the second terminal B or returns to the first terminal A to work the user can restore the previous work environment by connecting to the migration server through the communication network using the terminal B or A and then selectively downloading context information stored in the migration server after being authenticated.

The first and second terminals A and B can exchange context information with the migration server through a communication protocol. For example a simple object access protocol SOAP can be used as the communication protocol. Although the embodiments of the present invention will be exemplified by the SOAP other communication protocols can be used. Details of the SOAP will be explained later in the description of .

As shown in the migration server according to the present invention may be included in a portable storage device such as a portable memory device and a mobile hard drive and can be coupled to a variety of ports such as a USB port supported by the terminals A and B. The user of the terminal A or B selects context information which they desire to migrate among context of an application that is running on the terminal A or B and transmits the selected context information to the migration server coupled to the terminals A and B through the USB port so that it is stored in the migration server . Thereafter when the user works on another terminal the user couples the terminal to the migration server through a USB port and downloads desired context information from the migration server so that the user can work in the same environment as that in which the user was working on the previous terminal.

As shown in each of the terminals A and B includes legacy applications connection application programming interfaces APIs a new application a control API and a migration client .

The legacy applications are applications which were developed in the past and each of which is a target of the context collection. The legacy applications include a Windows application a Linux application etc. Context information of the legacy applications can be collected by the connection APIs . It is necessary to provide a connection API for each operating system or application. For example a connection API for collecting context information using a COM object is required for the Windows application such as Windows Office and a connection API for collecting context information using a system call or the like is required for the Linux application such as Linux Open Office. The new application is an application that was newly developed to include a connection API .

The migration client is a client program that performs overall control of the function to migrate context information of the applications and . Specifically the migration client functions to collect context information of the applications and through the connection APIs and and then to transmit the collected context information to the migration server or functions to receive and restore context information stored in the migration server . The migration client collects the context information of the applications through the standardized control API . The control API is an interface that collectively collects and restores context information selected by the user from the applications through the context APIs and and that controls a function to terminate and start each of the applications to provide the context migration service.

The migration client includes an application agent a desktop agent a user preference manager and a migration agent . The application agent has a function to extract and restore application context information through the standardized control API and the desktop agent has a function to extract and restore desktop environment context information. The user preference manager has a function to store and restore selection information of context which the user desires the migration client to collect and preference information of the migration client . The migration agent performs overall control of the context information collection and restoration of the migration client .

Although not illustrated each of the terminals A and B may include a memory at least one central processing unit CPU that is coupled to the memory to perform high speed operations and an input unit. The CPU includes an arithmetic logic unit ALU that performs calculation a register that temporarily stores data and commands and a controller that controls the operation of the terminal. The CPU may be a processor with one of a variety of architectures such as an Alpha processor of Digital MIPS processors of MIPS Technology NEC IDT and Siemens x86 processors of Intel Cyrix AMD Nexgen and others and PowerPC processors of IBM and Motorola. The input device includes a keyboard and a mouse. For example the mouse may include a physical transducer such as a microphone or a touch screen.

As shown in the migration server performs a function to store and manage context information received from the migration client of the terminal and thereafter to transmit the context information to the terminal when receiving a context information request from the terminal. The migration server includes a user manager an application manager a desktop manager and a storage for example a DBMS . The migration server may be included in a portable storage device as described above with reference to .

The user manager in the migration server functions to manage and authenticate users who use the application context management apparatus. The application manager manages a list of migratable applications and a list of context information that can be collected from the applications. The application manager functions to collect a list of migratable context from information of environments of the terminals and the applications installed on the terminals and then to provide the collected context list to the user. The application manager also functions to manage a list of application context information transmitted from each terminal. The desktop manager functions to manage a list of desktop related context information. All the context information is converted into a database which is then stored and managed in the DBMS in the migration server .

As shown in at step the application agent in the first terminal A collects a list of migratable context from applications installed on the terminal through the control API and the connection APIs in the first terminal and the application manager of the migration server . Thereafter at step the application agent in the first terminal A presents the migratable context list to the user.

At step the user executes an application suitable for a work situation. While the user works with the application the application agent of the first terminal A receives selection information of context information which the user desires to migrate from the user through a user interface UI of the migration client . At step the migration client in the first terminal A collectively collects and temporarily stores the selected context information. Thereafter at step the migration client in the first terminal A terminates the application with which the user is working and transmits the collected context information to the migration server through a communication network.

At step if another context to be stored is present the procedure proceeds to step and if any other context to be stored is not present the procedure proceeds to step . In this manner the user can configure application work environments suitable for a variety of work situations and collect and store context of the work environments.

Thereafter at step when the user moves to another place and accesses another terminal the second terminal B in this example to work the second terminal B connects to the migration server and performs an authentication process in order to restore the context stored in the migration server . After the authentication process the second terminal B collects at step a list of context which can be migrated to the second terminal through the application manager of the migration server and the control API and the connection APIs of the second terminal. At step when the user selects a desired work situation from the list the migration client of the second terminal B receives context information corresponding to the selected work situation from the migration server . At step based on the received context information the migration client of the second terminal B restores the same data and UI environments as those of applications with which the user was working on the previous terminal in the second terminal B.

As shown in at step the first terminal A transmits a request signal which requests a list of applications supporting the migration and a list of context of the applications to the migration server . At step the migration server transmits a migratable list to the first terminal A. Based on the migratable list received from the migration client the migration client of the first terminal A presents a list of context which can be migrated from the first terminal A and allows the user to select desired context information.

After the user performs a work suitable for each situation and selects context information to be migrated at step the migration client of the first terminal A collectively collects the selected context information and temporarily stores it in the first terminal A at step . At step the migration client of the first terminal A transmits the collected context information to the migration server . At step the migration server stores the context information received from the first terminal A in the DBMS.

Thereafter at step the second terminal B connects to the migration server and transmits an authentication request signal to the migration server in order to restore context information stored in the migration server. Although the second terminal B may be different from the first terminal A it may also be the same as the first terminal A when it is necessary to restore the previous work environment of the first terminal A since it has been formatted or it has lost some data or for other reasons.

When the user authentication is completed the migration server transmits at step an authentication response signal to the second terminal B. At step the second terminal B then transmits a stored context list request signal to the migration server .

At step the migration server transmits the stored context list to the second terminal B. Then at step based on the context list received from the migration server the migration client of the second terminal B presents a list of context which can be restored by the second terminal B to the user and then requests context information selected by the user from the server .

Thereafter at step the migration server extracts and transmits the requested context information to the second terminal B. At step the migration client of the second terminal B restores a corresponding work environment of the application based on the context information received from the migration server .

As shown in context is managed while being classified into user context application context and desktop context .

The user context includes information regarding optional items which the user has set for migration a personal schedule for automatic restoration of context information migration information and a personal folder to be migrated. The application context includes the position of a toolbar of each application arrangement of icons the size and position of a window on which the user is working a data file with which the user is working an opened page of the data file a currently connected URL environment setting information i.e. configuration information a multimedia file that is being played and a playback position of the multimedia file. The desktop context includes OS background image information window theme information shortcuts toolbar setting information and the like.

For example at a certain moment while the user works on a document with MS Office a Power Point a web browser and an MP3 player running the user selects a work environment required to be migrated from work environments of that moment so that context information of the selected work environment is collected and stored through the migration client. Thereafter while doing a different work with Microsoft Paint Hangul and Excel programs running the user stores a corresponding work environment in the migration server. After moving to another place the user selects a desired environment from the stored environments to restore corresponding context such as work data including a previously set window size and the like the same page as that of a document with which the user was working and a music data position at which music was being played thereby reproducing the desired one of the stored environments in which the user was working. Simply put if the user moves to another place and goes through an authentication process using another terminal after context information items which the user has selected to be migrated are automatically stored then it is possible to immediately reproduce the last work environment that has been automatically stored.

The SOAP is a lightweight protocol for exchanging structured information in a distributed environment. The SOAP uses XML to define an extensible message framework and provides a message structure that allows data to be exchanged using a variety of lower level protocols. This framework is designed so as to be independent of specific programming models or implementation methods. The SOAP is an object access protocol which can provide a variety of definitions for referring to remotely located objects.

The SOAP can be used for any application since it is based on XML which is an industry standard. As most firewalls permit only the web port Port SOAP messaging is mostly performed depending on the HTTP. According to the SOAP specifications not only the migration server but also the terminal can analyze SOAP messages since SOAP messages are two way messages rather than one way messages.

As shown in a SOAP message mainly includes a SOAP envelope a SOAP header a SOAP body and a SOAP fault . The SOAP envelop is the highest level element of the SOAP message to envelop the SOAP message and includes the header and the body .

The SOAP header serves to add a function to the SOAP message although the SOAP header is not essential in the message. The SOAP header includes a plurality of blocks for containing a variety of information and is the first element following the envelope tag. The SOAP header is used for administrative purposes such as encoding authentication and transaction.

The SOAP body is filled with data to be transmitted through the SOAP. The SOAP body may include a plurality of blocks which are filled with a requested web service name and associated parameters when the SOAP message is a request message and which are filled with result information when it is a response message.

The SOAP fault is an area in which information of a messaging error occurring after SOAP processing is filled. To describe details of the error the SOAP fault supports elements such as faultcode faultstring faultfactor and detail .

The faultcode element uses a code to identify the type of the error. By viewing this code web service consumers can determine which type of error has occurred. While the code contains machinery information the faultstring element provides error information that can be read and understood by human beings. The faultfactor element is used to inform where an error has occurred during a messaging process. As error data associated with the SOAP body the detail element is used when SOAP messaging has failed. If no detail element is present even when an error has occurred it is determined that no error has occurred at a portion associated with the body .

As described above according to the present invention while the user works using an application in a work environment suitable for each work situation corresponding application context and desktop context can be collected to be stored and managed in the migration server.

In addition any terminal which has passed through user authentication can select and download context information suitable for each work situation from the migration server and then can restore the same application and desktop environments as those previously set to be suitable for each work situation. After the user moves to another place the same application and UI environments as previous ones suitable for each work situation such as work data an application window size and position a toolbar setting and a multimedia file playback position are provided to allow the user to utilize context information suitable for each situation of the user in any place thereby increasing user convenience.

Further the present invention allows development of an applied application product that supports related services. Applying the present invention also makes it possible to develop a product that supports a mobile work environment service using a storage device such as a USB memory rather than the context migration server.

The method according to the present invention can be implemented as a program and then be stored in a computer readable recording medium such as a CD ROM a RAM a ROM a floppy disk a hard disk and a magneto optic disc. This process can be easily carried out by those having ordinary skill in the art and thus a more detailed description thereof is omitted.

As is apparent from the above description the present invention provides an apparatus and method for managing application context wherein a plurality of application work data and environment information which the user has selected to be migrated is collected together and collectively stored in a server and thereafter the user selects the stored application context information to be restored thereby reproducing the same application and desktop environments as those previously set to be suitable for each work situation thereby increasing user convenience.

Although the preferred embodiments of the present invention have been disclosed for illustrative purposes those skilled in the art will appreciate that various modifications additions and substitutions are possible without departing from the scope and spirit of the invention as disclosed in the accompanying claims.

