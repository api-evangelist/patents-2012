---

title: Applying a custom security type label to multi-tenant applications of a node in a platform-as-a-service environment
abstract: A mechanism for applying security category labels to multi-tenant applications of a node in a PaaS environment is disclosed. A method of embodiments includes receiving, by a virtual machine (VM) executing on a computing device, a custom security type label (STL) and a custom security policy associated with the custom STL, the custom STL and associated custom security policy applied to one or more multi-tenant applications executed by the VM. The method further include receiving a request to initialize an application on the VM, the request identifying the custom STL as an STL to apply to the application, assigning a local UID maintained by the VM to the application, recording a mapping of the assigned local UID to the custom STL, assigning the custom STL to files of the application, and assigning the custom STL to a running process of the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09047107&OS=09047107&RS=09047107
owner: Red Hat, Inc.
number: 09047107
owner_city: Raleigh
owner_country: US
publication_date: 20120229
---
The present application is related to co filed U.S. patent application Ser. No. 13 408 001 entitled Mechanism for System Resource Sharing in a Multi Tenant Platform as a Service PaaS Environment in a Cloud Computing System co filed U.S. patent application Ser. No. 13 408 754 entitled Mechanism for Creating and Maintaining Multi Tenant Applications in a Platform as a Service PaaS Environment of a Cloud Computing System and co filed U.S. patent application Ser. No. 13 408 729 entitled Mechanism for Applying Security Category Labels to Multi Tenant Applications of a Node in a Platform as a Service PaaS Environment which are all assigned to the assignee of the present application.

The embodiments of the invention relate generally to platform as a service PaaS environments and more specifically relate to a mechanism for applying a custom security type label to multi tenant applications of a node in a PaaS environment.

Cloud computing is a computing paradigm in which a customer pays a cloud provider to execute a program on computer hardware owned and or controlled by the cloud provider. It is common for cloud providers to make virtual machines hosted on its computer hardware available to customers for this purpose. The cloud provider typically provides an interface that a customer can use to requisition virtual machines and associated resources such as processors storage and network services etc. as well as an interface a customer can use to install and execute the customer s program on the virtual machines that the customer requisitions together with additional software on which the customer s program depends. For some such programs this additional software can include such software components as a kernel and an operating system. Customers installing and executing their programs in the cloud typically communicate with the executing program from remote geographic locations using Internet protocols.

For programs that are web applications the additional software can further include such software components as middleware and a framework. Web applications are programs that receive and act on requests in web or other Internet protocols such as HTTP. It is common for a user to use a web application by using a browser executing on the user s client computer system to send requests in a web protocol via the Internet to a server computer system on which the web application is executing. It is also common for automatic user agents to interact with web applications in web protocols in the same fashion.

While many web applications are suitable for execution in the cloud it often requires significant expertise and effort in order to install execute and manage a web application in the cloud. For example an administrator typically should identify all of the software components that a web application needs in order to execute and what versions of those software components are acceptable. In addition the administrator typically should obtain install and appropriately configure each such software component as well as the application itself. Where this high level of expertise and effort has been invested in order to get a web application running on a particular hypervisor and in a particular provider s cloud a similarly high level of expertise and effort usually should be subsequently invested to execute the web application instead or in addition on a different hypervisor and or in a different particular provider s cloud. Also it can be difficult to obtain useful information about how the application is performing and otherwise behaving when executing in the cloud.

Accordingly software and or hardware facilities for facilitating the execution of web applications in the cloud have been introduced and are known as Platform as a Service PaaS offerings. PaaS offerings typically facilitate deployment of applications without the cost and complexity of buying and managing the underlying hardware and software and provisioning hosting capabilities providing all of the facilities required to support the complete life cycle of building and delivering web application and service entirely available from the Internet. Typically these facilities operate as one or more virtual machines VMs running on top of a hypervisor in a host server.

In present PaaS offerings a first customer s deployed applications do not co exist with any other customer s deployed applications on the VMs that are hosting the first customer s deployed applications. However such an arrangement can be inefficient to the PaaS provider offering the platform services. This is because the applications being deployed in the PaaS are generally quite small packages and the size of the VM does not correspond to the size of the application. It can be costly to initialize a new VM for each application deployment and it may also be a waste of resources that are not being utilized. In a public cloud environment a PaaS provider pays for deploying a VM whether the VM lies idle or not. In a private cloud environment there is still a strain on resources for running VMs that are not completely utilized.

Embodiments of the invention provide a mechanism for applying security category labels to multi tenant applications of a node in a PaaS environment. A method of embodiments of the invention includes receiving by a virtual machine VM executing on a computing device a custom security type label STL and a custom security policy associated with the custom STL the custom STL and associated custom security policy applied to one or more multi tenant applications executed by the VM. The method further include receiving a request to initialize an application on the VM the request identifying the custom STL as an STL to apply to the application assigning a local UID maintained by the VM to the application recording a mapping of the assigned local UID to the custom STL assigning the custom STL to files of the application and assigning the custom STL to a running process of the application.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as sending receiving attaching forwarding caching executing applying identifying configuring establishing or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

The present invention may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to the present invention. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. etc.

Embodiments of the invention provide a mechanism for applying security category labels to multi tenant applications of a node in a PaaS environment. In the multi tenant PaaS environment each node i.e. virtual machine VM in the PaaS environment runs multiple applications and as such should provide security and separation to protect each of the multi tenant applications from each other and to protect the underlying node VM from the multi tenant applications. In one embodiment a custom security type label is assigned to each application including assigning the label to the files of the application and the running process of the application. The node then utilizes the custom security type label to enforce a security policy against multi tenant applications running on the node. The enforced security policy prevents the multi tenant applications from accessing and or modifying resources of the underlying system of the node in a harmful way.

Clients and are connected to hosts and the cloud provider system via a network which may be may be a private network e.g. a local area network LAN a wide area network WAN intranet or other similar private networks or a public network e.g. the Internet . Each client may be a mobile device a PDA a laptop a desktop computer or any other computing device. Each host may be a server computer system a desktop computer or any other computing device. The cloud provider system may include one or more machines such as server computers desktop computers etc.

In one embodiment the cloud provider system is coupled to a cloud controller via the network . The cloud controller may reside on one or more machines e.g. server computers desktop computers etc. and may manage the execution of applications in the cloud . In some embodiments cloud controller receives commands from PaaS provider controller . Based on these commands the cloud controller provides data e.g. such as pre generated images associated with different applications to the cloud provider system . In some embodiments the data may be provided to the cloud provider and stored in an image repository in an image repository not shown located on each host or in an image repository not shown located on each VM .

Upon receiving a command identifying specific data e.g. application data and files used to initialize an application on the cloud the cloud provider retrieves the corresponding data from the image repository creates an instance of it and loads it to the host to run on top of a hypervisor not shown as a VM or within a VM . In addition a command may identify specific data to be executed on one or more of the VMs . The command may be received from the cloud controller from a PaaS Provider Controller or a user e.g. a system administrator via a console computer or a client machine. The image repository may be local or remote and may represent a single data structure or multiple data structures databases repositories files etc. residing on one or more mass storage devices such as magnetic or optical storage based disks solid state drives SSDs or hard drives.

In one embodiment the PaaS provider controller is operated by a PaaS provider that enables customers to create and run applications on nodes e.g. VMs managed by the PaaS provider. In one embodiment the nodes VMs are hosted on computer hardware managed by the cloud provider system . In some embodiments the VMs of the PaaS provider support multi tenancy of applications running on the VMs . This means that each VM can run multiple applications that may be owned or managed by different customers. Embodiments of the invention provide for security between these multi tenant applications hosted on a VM as well as between the applications and the VM by setting up each VM to utilize a security type label feature of an operating system OS of the VM . The security type label feature creates a custom security type applied to all applications running on the VM . This custom security type results in a custom security policy applied to the applications that maintains a separation between the applications on the VM and the underlying system of the VM for security purposes.

While various embodiments are described in terms of the environment described above those skilled in the art will appreciate that the facility may be implemented in a variety of other environments including a single monolithic computer system as well as various other combinations of computer systems or similar devices connected in various ways.

In one embodiment the client layer resides on a client machine such as a workstation of a software developer and provides an interface to a user of the client machine to the broker layer of the PaaS system . For example the broker layer may facilitate the creation and deployment on the cloud via node layer of software applications being developed by an end user at client layer .

The client layer includes a source code management system sometimes referred to as SCM or revision control system. One example of such an SCM or revision control system is Git available as open source software. Git and other such distributed SCM systems usually include a working directory for making changes and a local software repository for storing the changes. The packaged software application can then be pushed from the local Git repository to a remote Git repository. From the remote repository the code may be edited by others with access or the application may be executed by a machine. Other SCM systems work in a similar manner.

The client layer in one embodiment also includes a set of command tools that a user can utilize to create launch and manage applications. In one embodiment the command tools can be downloaded and installed on the user s client machine and can be accessed via a command line interface or a graphical user interface or some other type of interface. In one embodiment the command tools expose an application programming interface API of the broker layer and perform other applications management tasks in an automated fashion using other interfaces as will be described in more detail further below in accordance with some embodiments.

In one embodiment the broker layer acts as middleware between the client layer and the node layer . The node layer includes the nodes on which software applications are provisioned and executed. In one embodiment each node is a VM provisioned by an Infrastructure as a Service IaaS provider such as Amazon Web Services. In other embodiments the nodes may be physical machines or VMs residing on a single physical machine. In one embodiment the broker layer is implemented on one or more machines such as server computers desktop computers etc. In some embodiments the broker layer may be implemented on one or more machines separate from machines implementing each of the client layer and the node layer or may implemented together with the client layer and or the node layer on one or more machines or some combination of the above.

In one embodiment the broker layer includes a broker that coordinates requests from the client layer with actions to be performed at the node layer . One such request is new application creation. In one embodiment when a user using the command tools at client layer requests the creation of a new application or some other action to manage the application the broker first authenticates the user using an authentication service . In one embodiment the authentication service may comprise Streamline or may comprise some other authentication tool. Once the user has been authenticated and allowed access to the system by authentication service the broker uses a server orchestration system to collect information and configuration information about the nodes .

In one embodiment the broker uses the Marionette Collective MCollective framework available from Puppet Labs as the server orchestration system but other server orchestration systems may also be used. The server orchestration system in one embodiment functions to coordinate server client interaction between multiple sometimes a large number of servers. In one embodiment the servers being orchestrated are nodes which are acting as application servers and web servers.

For example if the broker wanted to shut down all applications on all even numbered nodes out of 100 000 nodes the broker would only need to provide one command to the server orchestration system . Then the server orchestration system would generate a separate message to all nodes to shut down all applications if the node is even and distribute the messages to the nodes using a messaging and queuing system. Thus in one embodiment the broker manages the business logic and model representing the nodes and the applications residing on the nodes and acts as a controller that generates the actions requested by users via an API of the client tools . The server orchestration system then takes those actions generated by the broker and orchestrates their execution on the many nodes managed by the system.

In one embodiment the information collected about the nodes can be stored in a data store . In one embodiment the data store can be a locally hosted database or file store or it can be a cloud based storage service provided by a Storage as a Service SaaS storage provider such as Amazon S3 Simple Storage Service . The broker uses the information about the nodes and their applications to model the application hosting service and to maintain records about the nodes. In one embodiment node data is stored in the form of a JavaScript Object Notation JSON blob or string that maintains key value pairs to associate a unique identifier a hostname a list of applications and other such attributes with the node.

In embodiments of the invention the PaaS system architecture of is a multi tenant PaaS environment. In a multi tenant PaaS environment each node runs multiple applications that may be owned or managed by different users and or organizations. As such a first customer s deployed applications may co exist with any other customer s deployed applications on the same node VM that is hosting the first customer s deployed applications . This deployment of multiple applications of multiple customers on a single node VM is a cost efficient solution for PaaS providers. However deploying a multi tenant PaaS solution raises a variety of concerns including for example security. Specifically security concerns exist in terms of separating multi tenant applications from each other as well as separating multi tenant applications from the node itself.

Embodiments of the invention provide for security between multi tenant applications hosted on node and the underlying system of the node by assigning a custom security type label STL to each application created on the node . The custom STL type of embodiments provides a way to group the applications based on their similarity from a security perspective and apply a single security policy to the applications that protects the underlying node system resources from the applications . One embodiment of the interaction between the server orchestration system and a node to implement applying a custom security type label to multi tenant applications on a node in a PaaS environment is now described in more detail with reference to .

The node also include a server orchestration system agent configured to track and collect information about the node and to perform actions on the node . Thus in one embodiment using MCollective as the server orchestration system the server orchestration system agent can be implemented as a MCollective server. The server orchestration system would then be the MCollective client that can send requests queries and commands to the MCollective server on node .

In one embodiment server orchestration system agent interacts with OS to apply a custom STL to multi tenant applications that run on node . Specifically a custom STL feature of the OS is utilized to provide security and secure separation of each multi tenant application from the underlying system resources of the node . The custom STL of embodiments groups one or more applications based on a security perspective. Then the node applies a single custom security policy associated with the custom STL to the applications . This custom STL and custom security policy protect the node s underlying system resources from the applications by applying a set of rules e.g. permissions to the resources in terms of which processes e.g. applications are allowed to perform what actions on the resources. In one embodiment the custom STL is not related to any unique purpose of each application or to the specific content of files of the application. Instead the custom STL imposes a custom security policy on the applications that are assigned the custom STL so that the applications cannot access the node s underlying system resources in a harmful way.

In some embodiments the custom STL and associated custom security policy are created and configured at the server orchestration system e.g. by a system administrator of the server orchestration system and then provided to the node for later use with multi tenant applications that will be running on the node . The custom security policy associated with the custom STL e.g. a mapping between the STL and security policy may be maintained in a datastore of the OS enforces rules that prevent the application associated with the custom STL from harming the node s underlying system. The custom security policy can be configured for example by a user such as a system administrator of the PaaS system to implement any rules that may prevent a process from harming e.g. compromising security of the node s underlying system. For example the custom security policy may prevent a process associated with the custom STL from running certain commands such as overwriting a shadow file of the node and or overwriting a password file of the node . The custom security policy may define the ports of the node that the process may bind to may dictate what files the process is allowed to search read write and execute may define the outbound access the process is allowed may force the process to utilize specific applications to read other files may prevent the process from writing to specific portions of the underlying node file system and so on. Any rule that prevents harm to the underlying system of the node may be included in the custom security policy associated with the custom STL of embodiments.

In one embodiment the custom STL is a customization of the SELinux security context type. SELinux is a security architecture integrated into the Linux OS kernel. SELinux provides a flexible Mandatory Access Control MAC system built into the Linux kernel. A security context in SELinux is a state given to a resource that uniquely identifies the permissions that are applicable to the resource. When a resource has no security context assigned to it SELinux gives the resource a default security context which generally has little permissions to perform any actions. The security context may be displayed using three to five definitions depending on the type of policy being run by SELinux . The definitions may include a user a role a type a sensitivity and a category. The types definition of the security context is an enhancement to SELinux and allows users to label files with categories where these categories are each associated with specific permissions e.g. security policies . In some embodiments other security category labeling features from other OS vendors may also be utilized.

In one embodiment a STL module of OS coordinates applying the custom STL to applications of node . In one embodiment STL module receives from the server orchestration system agent configuration information such as the specific name of the custom STL and an associated security policy for the custom STL. In one embodiment the custom STL is a label attached to files and processes. In some embodiment the label may include an arbitrary name selected by a system administrator. In one embodiment all applications created on node are assigned the same custom STL. However in other embodiments different applications may be assigned different custom STLs.

The server orchestration system configures the custom STL and associated security policy that is applied to applications . In the case of more than one custom STL option the server orchestration system considers the specific configuration aspects of underlying application platforms when determining the custom STL and associated security policy to apply to an application . For example an application using an Apache platform may entail one type of custom STL security policy based on the specific configurations and commands of the Apache platform while an application using a JBoss platform may require a different type of custom STL security policy based on the specific configurations and commands of the JBoss platform. If more than one custom STL is to be applied by a node e.g. the node hosts applications having different underlying platforms involving different security concerns with respect to the node then server orchestration system agent receives identification of the potential custom STLs security policies that the node may have to apply and enforce and passes this information on to STL module . The custom STL s and associated security policy ies may be stored in a security policy data store by STL module .

When the node is ready to initialize and run applications then server orchestration system begins sending requests to start applications to server orchestration system agent of node . In one embodiment a request to start an application may include information identifying the custom STL to apply to the application . When the request to start an application is received server orchestration system agent begins a configuration and initialization process for the application .

As part of the configuration and initialization process a local user ID UID of the node is assigned to the application . Then the received information identifying the custom STL for the application is passed to STL module and STL module records a mapping of the local UID of the application to the identified custom STL in a UID STL datastore of OS . After the UID STL mapping is recorded the custom STL is applied to the files associated with the application on the node . In one embodiment a security context such as the security context of SELinux described above associated with each application file in a home directory of the UID of the application is changed to include the custom STL type. For example in one embodiment a CHCON command may be used to update the security context of each application file with the custom STL.

After the application is configured and initialized the application may then be started on the node . When starting the application the custom STL is assigned to the running process of the application. Similar to assigning the custom STL to the application s files a CHCON command may be utilized to update a security context of the application s process to include the custom STL.

Once the application is running on node OS enforces the security policy associated with the custom STL against application . The custom STL security policy prevents the application from negatively affecting underlying system resources of the node . The security policy consists of custom tailored rules which apply to processes having the custom STL type which dictate actions that the processes may or may not perform. In addition the security policy applies to allow or prevent actions with respect to the application files identified with the custom STL regardless of the security context of the process trying to access or manipulate the application files.

Method begins at block where a custom STL and its associated security policy are received at a node of a PaaS system. The custom STL and its associated security policy are specially tailored for a multi tenant application that the node hosts. In one embodiment the custom STL and its associated security policy are created and configured by a server orchestration system operating on a broker layer of the PaaS system. In one embodiment a user such as a system administrator of the PaaS system creates and configures the custom STL and security policies to be applied to multi tenant applications in the PaaS system. At block the custom STL and its associated security policy are stored to a datastore of the node. In one embodiment the datastore is a security policy datastore of SELinux .

Then at block a request to initialize an application on the node is received. In one embodiment the request is received at a server orchestration system agent of the node and includes identifying information of the custom STL to assign to the application. At block the application is assigned a unique local UID from the node. Then at block a mapping between the assigned local UID of the application and the custom STL of the application is recorded on the node. In one embodiment the mapping is recorded in a UID STL datastore maintained by the node.

At block a security context of files of the application is updated with the custom STL. In one embodiment the files of the application are found in a home directory of the local UID of the application. In another embodiment the security context is updated by performing a CHCON command to assign update a type of the security context with the custom STL. Then at block when the application is started to run a security context of the running process is updated with the custom STL of the application. In one embodiment the security context of the running process is updated after the application starts running but prior to the running process executing any instructions. In another embodiment the CHCON command is used to assign update the custom STL of the application to the type portion of the security context of the running process.

Method begins at block where a request to access one or more resources is received from a requesting process. In one embodiment the requesting process is a running process of a multi tenant application executing on the node. In another embodiment the one or more requested resources are application files of a multi tenant application. In some embodiments both of the requested process and the one or more requested resources are associated with one or more multi tenant application s executing on the node. The kernel of an OS of the node may receive the request to access the one or more resources. In another embodiment an STL module of the OS such as STL module of receives the request.

At block an STL of the requesting process is determined. In one embodiment the STL may be part of a security context of the requesting process maintained by the OS. Then at block an STL of the one or more requested resources is determined. In one embodiment the STL of the one or more requested resources is part of a security context of the resources maintained by the OS.

Then at decision block it is determined whether the determined STLs of the requesting process and or the requested one or more resources are a custom STL for multi tenant applications on the node. If either of the STLs is a custom STL associated with a multi tenant application of the node then method proceeds to block where a custom security policy of the custom STL is applied to either or both of the requesting process and or the one or more requested resources with the custom STL. The custom security policy applies a plurality of rules tailored to prevent the running process or resources e.g. files of the multi tenant application with the custom STL from harming the underlying system of the node.

For example the custom security policy may prevent the requesting process if associated with the custom STL from running certain commands such as overwriting a shadow file of the node and or overwriting a password file of the node. The custom security policy may define the ports of the node that the requesting process may or may not bind to may dictate what files the requesting process is allowed to search read write and execute may dictate whether the one or more requested files if associated with the custom STL may be searched read written to or executed may define the outbound access the requesting process is allowed may force the requesting process to utilize specific applications to read other files may force any processes requesting the one or more requested files to use a specific application to read or modify those files may prevent the requesting process from writing to specific portions of the underlying node file system and so on. Any rule that prevents harm to the underlying system of the node may be included in the custom security policy associated with the custom STL.

If at decision block neither STL of the requesting process and one or more requested resources is not a custom STL for a multi tenant application of the node then method proceeds to block . At block a default security policy is applied to the requesting process and the one or more requested resources. In one embodiment the default security policy may be the default security policy of the OS which provides few permissions to perform actions on the requested resources.

The exemplary computer system includes a processing device processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processor is configured to execute instructions for performing the operations and steps discussed herein illustrated in by depicting instructions within processor .

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD a cathode ray tube CRT or a touchscreen an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine readable storage medium also known as a computer readable storage medium on which is stored software e.g. one or more sets of instructions software etc. embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory e.g. instructions and or within the processor e.g. processing logic during execution thereof by the computer system the main memory and the processor also constituting machine readable storage media. The software may further be transmitted or received over a network via the network interface device .

In one embodiment the software include instructions for a STL module which may correspond to STL module of and or a software library containing methods that call the STL module for applying security type labels to multi tenant applications in a PaaS cloud computing environment. While the machine readable storage medium is shown in an exemplary embodiment to be a single medium the term machine readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine readable storage medium shall accordingly be taken to include but not be limited to solid state memories optical media and magnetic media.

In the foregoing description numerous details are set forth. It will be apparent however to one of ordinary skill in the art having the benefit of this disclosure that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed description have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as segmenting analyzing determining enabling identifying modifying or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions.

Reference throughout this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. Thus the appearances of the phrase in one embodiment or in an embodiment in various places throughout this specification are not necessarily all referring to the same embodiment. In addition the term or is intended to mean an inclusive or rather than an exclusive or. 

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

