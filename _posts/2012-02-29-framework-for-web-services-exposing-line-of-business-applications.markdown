---

title: Framework for web services exposing line of business applications
abstract: Functionality from a line of business application can be exposed as a web service. User input is received that requests information about objects exposed by a line of business application. Metadata is also gathered about a first set of objects exposed by the line of business application. The metadata is returned to the user. User input is received selecting a second set of objects from among the first set of objects to be exposed as a web service. A web service model is constructed that exposes the second set of objects. The web service model includes a service description, metadata map, and configuration information. The web service model is published to allow for web service clients to access the second set of objects by accessing the web service model. The web service can then be used to translate messages between a line of business application and one or more web service clients.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08386420&OS=08386420&RS=08386420
owner: Microsoft Corporation
number: 08386420
owner_city: Redmond
owner_country: US
publication_date: 20120229
---
This application is a continuation of U.S. patent application Ser. No. 12 332 981 filed on Dec. 11 2008 and entitled FRAMEWORK FOR WEB SERVICES EXPOSING LINE OF BUSINESS APPLICATIONS which application is hereby expressly incorporated herein in its entirety.

Computers and computing systems have affected nearly every aspect of modern living. Computers are generally involved in work recreation healthcare transportation entertainment household management etc.

Further computing system functionality can be enhanced by a computing systems ability to be interconnected to other computing systems via network connections. Network connections may include but are not limited to connections via wired or wireless Ethernet cellular connections or even computer to computer connections through serial parallel USB or other connections. The connections allow a computing system to access services at other computing systems and to quickly and efficiently receive application data from other computing system.

Integration with line of business application systems becomes challenging due to issues like non standard metadata large metadata differences in connection management and management of these line of business integration services.

The subject matter claimed herein is not limited to embodiments that solve any disadvantages or that operate only in environments such as those described above. Rather this background is only provided to illustrate one exemplary technology area where some embodiments described herein may be practiced.

One embodiment described herein includes a computer implemented method of exposing functionality from a line of business application as a web service. The method includes receiving user input requesting information about objects exposed by a line of business application. Metadata is gathered about a first set of one or more objects exposed by the line of business application according to the user input requesting information. The metadata is returned to the user. User input is received selecting a second set of one or more objects from among the first set of one or more objects to be exposed as a web service. A web service model is constructed that exposes the second set of one or more objects. The web service model includes a service description a metadata map and configuration information. The web service model is published in a computer implemented repository to allow for web service clients to access the second set of objects by accessing the web service model.

Another embodiment includes a computer implemented method of allowing access to a line of business application through a web service interface. The method includes accessing a web service model at a computer implemented repository. The web service model exposes one or more objects of a line of business application. The web service model includes a service description a metadata map and configuration information. The web service model is exposed to one or more web service clients. Communications between the line of business application and one or more web service clients are translated.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Additional features and advantages will be set forth in the description which follows and in part will be obvious from the description or may be learned by the practice of the teachings herein. Features and advantages of the invention may be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. Features of the present invention will become more fully apparent from the following description and appended claims or may be learned by the practice of the invention as set forth hereinafter.

Some embodiments include functionality implementing a framework that facilitates line of business applications being accessed by web service clients. The framework provides a design time application programming interface API for creation of a web service from a line of business application. The web service can then be stored and later accessed to expose the line of business functionality. The web service can then be used to translate incoming and outgoing line of business messages. In particular a runtime API can be used to receive messages from web service clients and to translate them to line of business messages that can be sent to the line of business application. Similarly line of business notifications can be translated to web service notifications and transmitted to a web services client.

Embodiments may include functionality to standardize the way an end user finds a line of business artifact or object. This includes ability to browse the target system for all artifacts and search for specific artifacts. This browsing and searching may reveal metadata representations of line of business artifacts. These metadata representations of line of business artifacts is a step towards opening up closed line of business to external applications. However even after standardizing the metadata representation line of business metadata may still use user unfriendly cryptic object names in metadata.

Embodiments may be implemented with functionality to represent artifacts objects residing in a line of business application in standard a web service contract format such as the Windows Communication Foundation WCF contract format available for use with .NET technologies available from Microsoft Corporation of Redmond Wash.

Illustrating further typically line of business systems have thousands of artifacts objects. One of the challenges with exposing these systems to external system is to represent line of business artifacts object in standard manner. Once line of business artifacts get represented in standard format it becomes much easier to invoke interact with them.

As noted above exposing line of business objects to external applications may involve addressing browsability searchability and definability. Browsabilty represent the ability to see all objects present in line of business. Thus some embodiments include functionality for browsing of line of business objects. Searchability includes the ability to locate matching objects based on some search criteria. Thus some embodiments implement search functionality for line of business objects. Definability includes the ability to define line of business objects in standard format such as by using Web Services Definition Language WSDL .

Some embodiments categorize line of business objects either as Category or Operation . This can be analogized to a file system where there are directories and files. A category can contain one or more categories or operations inside it while an operation is a leaf node and can t contain anything inside it. Some embodiments use a single Type to describe both categories and operations. The reason for taking this approach is that line of business applications generally take a hierarchical approach to category objects present inside.

Referring now to an example of the design time API is illustrated. illustrates various software modules that may be implemented by executing code stored in a computer readable medium on one or more processors to implement the design time API . The design time API includes a metadata browse search module which provides search and or browse capabilities for searching line of business metadata or navigating through line of business metadata stored at a line of business application . The browse functionality allows end users to get a list of line of business objects for the entire line of business application or at a given category. The search functionality allows end users to get a matching list of line of business objects for the entire line of business application or at given category based on user specified search criteria.

Once one finds and selects the line of business objects to be exposed on the desired web service another API illustrated in as the Service Description Builder module can be invoked which obtains the detailed metadata for the chosen objects and creates a service contract for a web service. Resolve functionality of some embodiments allows end users to get the definition of line of business objects in standard format. As the adapters facilitate the creation of web services from chosen line of business operations some embodiments represent line of business object as common language runtime CLR types. Based on how end users invoke the web services these objects can end up represented in WSDL on non web service platforms.

When defining a line of business objects several factors are taken into account. For example embodiments may determine if an object in the line of business application is an object callable e.g. subroutine procedure function as an operation from outside the line of business application. Further embodiments determine how an object gets invoked. Additionally multiple line of business operations could be exposed to end users as a single web service user operation and whenever it gets invoked by the user all these operations must be invoked in the right order. Additionally in some situations before invoking a line of business operation the line of business may require that proper context is set on the line of business connection. Information addressing each of these factors may be preserved in metadata such as in a metadata map that is included in an adapter which maps line of business object metadata to web service object metadata.

Other factors that may be taken into account include factors related to input parameters and output parameters for the previously described operations. For example information may be obtained by examining line of business metadata to determine how these parameters are taken in or given out by a line of business. For example a line of business may use a fixed buffer for taking in binary data with each parameter of fixed length and mapping to a fixed offset in the buffer. Information about input parameters and output parameters may also be stored as metadata in the metadata map.

Additionally the web service definition may include information related to parameter types such as if parameters are primitive types such as int bool etc or a collection of primitive types such as struct. Information is further included in the web service definition defining the mapping between business types being used in operation with CLR types and may include information related to whether or not there is a one to one mapping between line of business types being used in operation with CLR types. If there is a one to one mapping between line of business type and CLR type information about whether one of them is more restrictive may be included so that mapping can be handled appropriately. In situations where there is no mapping the web service definition may define custom types aggregating business types.

The web service may be specified completely declaratively including declaring datacontracts message contracts and mapping information for mapping web service metadata to line of business metadata. The web service generated includes a contract and mapping information as well as a configuration piece which can be used to provision the web service as per integration need. The web service and configuration together can either be compiled and saved in some file can be deployed on some host or can simply be saved in some repository for later provision and deployment. As illustrated in a Publish module may be utilized which can publish the web service to a repository . From the repository the web service can be later deployed on a host system.

The runtime of the framework is illustrated in . In particular illustrates outbound architecture of the runtime i.e. messages from web service clients to the line of business application while illustrates inbound architecture of the runtime i.e. messages from the line of business application to web service clients . The runtime of the framework first loads the web service and its configuration information and sets up the host environment with all the relevant contract and mapping information.

As illustrated in it may also sets up an optional connection pool for use by web service sessions. In particular often when a line of business application is licensed to an enterprise it is licensed with limit on the number of connections that can be made to the line of business application at any given time. Thus line of business connections are costly resources both in terms of connections being created against a target line of business as well as time taken to setup the connection.

As such in some embodiments the framework runtime provides an API for getting a connection. A connection may be affinitized with an active instance and may stay with it for the duration of a message or for a duration longer than the duration of a message. Typical examples where this affinity is useful is when all messages in a session must be using the same line of business connection for reasons like consistency and transactionality of those messages with respect to the line of business. The framework associates a newly created connection with a service instance with which the connection can stay associated if affinity so demands. The service instance may be used by multiple messages correlated by instance context which may be session or other application level correlation context.

Some embodiments provide extensive and flexible connection management for managing connections of different types and capabilities as required by outbound and inbound processing for a line of business system.

Line of business connections may be used for actual communication interaction with the line of business application . Connections are used in many contexts like during metadata browse search retrieval or invocation of actual line of business operations. Typically line of business connections can support sessions. Also line of business connections may be transaction aware. Transactions could be both of distributed type as well as local transaction whose scope is limited to a single line of business application. Line of business connections may be highly be contextual. That is a line of business application could have different types of connections for doing different things like metadata handling inbound request outbound request sessions transactions etc. Additionally before these connections can be used line of business applications in most cases must authenticate the user for proper credentials.

To address the preceding characteristics regarding connections embodiments may include various characteristics. In particular in some embodiments framework connections are sharable across various client sessions of same credentials. Additionally a connection object s lifetime may be more than the client session in which it was created.

In some embodiments the framework allows the adapter to provide a credential comparer to allow the framework to pool connections whose credentials cannot be interpreted by the framework. In some embodiments by default the framework pools only connections whose credentials are either a system credential or a username password pair.

Some embodiments of the framework support and manage context sensitive connections. For example an adapter developer could choose to use connection type A for doing distributed transaction operations connection type B for doing local transactions and connection type C for doing metadata related work. An adapter developer can map the actual line of business connection capabilities onto these web service connection types.

Some embodiments of the framework also give flexibility to adapter developers to ask for a connection which has nothing to do with the context call it is executing in. For example while doing client request processing the adapter may need to figure out extra information from a target line of business application. An adapter could have set some context onto the connection associated with a current call that it cannot be used.

With respect to adapter development various contexts exist in which connections are used. As noted previously connections can be used for doing metadata related operation on a target line of business application executing outbound operations against a target line of business application a target line of business making an inbound call into an adapter etc. As noted connection handling will also depend on session and transaction requirements. Additionally another dimension of connection management is the way these line of business connections handle concurrent requests coming from multiple threads.

To allow various valid permutations and combinations some embodiments of the framework allow an adapter to define different types to handle each requirement. For example a metadata handling type may be used to handle metadata operations that do not have any transaction or session requirements. An outbound operation invocation on line of business type may include information on how to handle operations executing as part of single session how to handle operations which are part of distributed transactions started and or participated in by a client and or how to handle operations which are invoked in a local transaction context. An Inbound operations type for a line of business calling into an adapter may provide for a line of business application that might want session full behaviour while invoking adapter and or a line of business that could have invoked the adapter as part of some distributed transaction context.

Connection types for above scenarios can be associated with a session lifetime. For example if the adapter requested a connection during outbound request this connection on being released to framework would be kept in an active list. The next time the adapter asks for a connection for client request coming as part of same session the adapter would be given this connection. When the session is terminated this connection is returned to the connection pool and becomes available for some other client session.

In some embodiments the framework has two levels of connection caching including caching for active connections and caching for the connection pool. As such in some embodiments a connection could be present in the connection pool in an active connection list with either distributed transaction affinity local transaction affinity or session affinity or it could be actively used by the adapter.

Connections in the connection pool are clean connections. That is they do not have any association with a session or a transaction. Requests coming for a connection with matching credentials and type are served with a connection from the connection pool.

As noted appropriate authorization may be required to use a line of business application connection. Thus some embodiments include functionality for providing appropriate credentials. One aspect of one embodiment is to support claims based authorization. Authorization can be done in a number of different ways. For example in one embodiment the line of business application may authorize access. This is the mechanism in which the security credentials and claims generated thereof are used to authorize the requests directly by the line of business systems. This mechanism covers different mechanism of generating claims for line of business authorization including but not limited to passing line of business credentials from client or mapping client credentials to line of business credentials by mechanisms like federated identity enterprise single sign on etc.

In another embodiment authorization may be accomplished by using service level authorization. Authorization is done by web service authorization mechanism on the security credentials. One typical mechanism for configuring service authorization is with the help of an authorization manager service.

Returning once again to outbound interaction with a line of business application is illustrated. This type of interaction happens when an end user is interested in invoking some operation in a line of business application. Outbound direction is with respect to the adapter user who is initiating the request to the line of business application . Outbound operation could be one way or two way. In the case of one way operation the invoked operation does not return anything while in case of two way operation the invoked operation returns a response message.

The outbound interface is responsible for processing a message directed from a client to the web service. Some embodiments provide an API for implementation of outbound message transformations to line of business invocations as well as access to a metadata map for performing this transformation by the adapter.

For example illustrates a service client . The service client may send a message to a line of business web service . The line of business web service includes a service model that can be used to transform message transformations to line of business invocations. The line of business web service also include a metadata analyzer that can be used analyze metadata from the service client as mapped to metadata for the line of business application so as to appropriately perform the transform of the message from the service client .

Also as noted the line of business web service may include a connection pool to facilitate using licensed connections for the line of business application .

Referring now to aspects of the line of business web service directed to inbound interaction with the line of business application are illustrated. The inbound direction is with respect to the adapter but could be considered outbound with respect to line of business application . Typically the line of business application is the entity that initiates the communication with adapter . The adapter on arrival of such messages redirects them to an end user. The inbound interface of the line of business web service is responsible for surfacing notification messages generated from line of business application . In case of inbound communication a listener may be triggered by a control message from a web service client . Once the listener is started notification messages may be received from the line of business application and delivered to a receiver. The receiver may or may not be the same client that triggered the listener. Some embodiments provide an API for implementation of a listener by the adapter as well as mechanism for triggering the listener and delivering notification to an appropriate receiving channel.

Some embodiments provide access to a metadata map so that the adapter can transform line of business specific messages to web services message to be received by a web services channel. In case of outbound operations it is the user who is making request to line of business application while in case of inbound operations line of business application asynchronously invokes the user. Users typically register with line of business application for events. These line of business application events could be periodic events e.g. triggered by a timer or result of some outbound operation. Once the events get triggered the listener registered by a user gets trigger.

From an adapter development perspective the adapter acts as bridge between a line of business application and an end user. The adapter registers for line of business application events with the line of business application and starts listening for line of business application events. On invocation from the line of business application the adapter invokes the user s callback handler with event data.

For inbound operations the adapter client application becomes the service listening on an inbound contract while a line of business application service becomes the client of the inbound contract. Once line of business application event notification data is available it is sent over to the client application. If the inbound operation is two way operation then a response from client is handed over to line of business application.

Attention is directed once again to the concept of connections. As noted while writing adapters to Line Of Business systems one design issue a developer may need to address is how to manage connections to an underlying line of business system in a consistent manner. In some instances these connections can be sessionful participate in distributed transaction operation and or handle local transaction operations. Additionally attention may need to be given to concurrency behavior. That is attention may be given to determining if multiple threads can simultaneously invoke operations on the same connection instance and handling such instances.

Some embodiments include functionality for allowing adapter developers to use line of business connections in consistent manner to handle sessionful communication participation in distributed transactions managing local transactions handling concurrency and providing throttling control.

Connections allow an external entity to access internal data or execute some code inside line of business systems. As noted typically before anyone can open connection to a line of business system they need to be authenticated. Once authentication is done users can get a connection which can be used to do required work on the line of business system.

Line of business connections have various types of capabilities based on their usage scenario as well as underlying a given line of business system s capability. For example some line of business applications allow users to be able use a connection for chatty conversation. That is each call has some context which was set by prior call to line of business. These kind of connections are sessionful connections. In some instances each call on the same connection does not have any relation to a previous call. These kind of connections are non sessionful. Some line of business applications allow a set of operations executed on a connection to be treated as an atomic block. That is either all of them succeed or all fail. Thus these line of business applications support local transactions. Sometimes a user might open connections with multiple line of business systems which could be of the same type or different types and want to execute a block of operations against each of them and expect the block of operations to finish atomically. This defines distributed transaction behavior.

Along with above capabilities line of business applications often have some limitations. For example on a single line of business connection users may not be able to invoke simultaneous multiple operations in parallel threads. While for some other line of business this will be supported. This is often referred to as concurrency behavior. Some line of business applications have a hard limit on the number of simultaneous connections. In this context connections are costly resources in terms of time taken to establish a connection computing resources needed as well monetary costs for licensing and other factors.

Some embodiments of the framework expose adapters as a web service. Web service clients can connect to the web service and send requests for getting something done. It is the adapter s responsibility to convert the client s request into a line of business request and send it over to a target line of business applications. For returned messages from the line of business application the adapter picks up the response and converts it to a web service response format and gives it back to to caller or another web service client. Some embodiments of the framework streamline the process of communication between a web service application and a line of business application by providing easy to use APIs for adapter development.

Some embodiments of the framework allow line of business connections to be used in session mode as well as sessionless mode. Further in some embodiments a line of business connection created under one client s session is available to another client session provided both clients share the authentication information. This is an example of connection pooling.

Additionally some embodiments are able to map web service based transactions seamlessly to line of business connections if the line of business connections supports transactions. This can be accomplished by using easy to use callbacks.

If some line of business application uses credentials which are not supported by the framework for example custom tokens specified via SAML then embodiments may include functionality for implementing an adapter that has flexibility to extend the connection pool in a way that the adapter can determine if two credentials are equal or not. This way such connections can also be pooled.

For client requests coming to same client session if the underlying line of business connection is concurrent then some embodiments of the framework let the adapter execute simultaneous calls on same connection. In cases where the underlying line of business connection does not support a concurrent connection embodiments may include functionality for serializing access to the connection.

For a concurrent distributed transaction request coming in the same client session some embodiments of the framework allows an adapter to let each request execute on different instances of a line of business connection. This allows true parallelism if line of business application supports it.

The choice of type of connection can be controlled by the adapter depending on the intent. For example an adapter may obtain a connection based on the connection being used in a local transaction a distributed transaction a non transacted session or any other parameter that makes sense for the particular line of business system.

In some embodiments the use of a connection pool enforces a configurable limit on number of open connections and effectively allows reuse of connections. This allows for improved performance as well as efficient utilization of available connections.

The following discussion now refers to a number of methods and method acts that may be performed. It should be noted that although the method acts may be discussed in a certain order or illustrated in a flow chart as occurring in a particular order no particular ordering is necessarily required unless specifically stated or required because an act is dependent on another act being completed prior to the act being performed.

One embodiment include a method including acts for exposing functionality from a line of business application as a web service. The method includes receiving user input requesting information about objects exposed by a line of business application act . For example a user may access the line of business service design tool and request information about objects at the line of business application .

The method further includes gathering metadata about a first set of one or more objects exposed the line of business application act according to the user input requesting information. For example as illustrated in metadata browse and search functionality may be implemented by a metadata browse and search module for gathering information from the line of business application . The method further includes returning the metadata to the user act . User input is received selecting a second set of one or more objects from among the first set of one or more objects to be exposed as a web service act . A web service model may be constructed that exposes the second set of one or more objects act . The web service model includes a service description a metadata map and configuration information. As illustrated in the service description builder module may include functionality for building a web service model.

Gathering the metadata about the first set of one or more objects can involve multiple calls to the adapter which might or might not propagate to the line of business application. In one embodiment this a first set of operations is exposed as a tree. At the first step only the top most nodes are displayed. The user might then selectively expand some nodes. The nodes under those are then requested from the adapter which may need to contact the LOB to obtain them. This tree browsing can be arbitrarily deep with different depths in different branches

The method further includes publishing the web service model in a computer implemented repository act . This allows for web service clients to access the second set of objects by accessing the web service model.

The method may be practiced where receiving user input requesting information about objects of a line of business application includes receiving a query. Gathering metadata about a first set of one or more objects of the line of business application according to the user input requesting information in this embodiment includes filtering metadata based on the query.

In an alternative embodiment receiving user input requesting information about objects of a line of business application includes receiving a browse request for a given category of objects exposed by the line of business. Gathering metadata about a first set of one or more objects of the line of business application according to the user input requesting information in this embodiment includes providing metadata for all objects in the given category.

In some embodiments of the method constructing a web service model that exposes the second set of one or more objects includes mapping unfriendly line of business object names to user friendly web services object names.

Referring now to a method including acts for allowing access to a line of business application through a web service interface is illustrated. The method includes accessing a web service model at a computer implemented repository wherein the web service model exposes one or more objects of a line of business application act . The web service model may include a service description a metadata map and configuration information. The method further includes exposing the web service model to one or more web service clients act . The method further includes translating communications between the line of business application and one or more web service clients. As illustrated in an adapter may be implemented as a web service that can translate messages between a web service client and a line of business application .

For example in one embodiment of the method translating communications between the line of business application and one or more web service clients includes processing a message directed from a client to the web service by transforming web service messages to line of business invocations. In some embodiments to perform this transformation the method may further include accessing the metadata map for performing the transformation.

As described previously some embodiments allow for the use of connection pools. Thus the method may further including setting up a connection pool for use by web service clients so as to efficiently utilize licensed connections for the line of business application. For example when connections are allocated for a single message the method may further include receiving a message from a web service client allocating a licensed connection from the connection pool for the message sending the message to the line of business application through the connection and as a result of the message being sent closing the connection and returning the connection to the connection pool for use for other messages.

When connections from the connection pool need to be allocated for longer than a single message such as to complete a transaction or session the method may further include receiving a message from a web service client determining that a connection for the message should keeping open for a period of time longer than the duration of the message allocating a licensed connection from the connection pool for the message sending the message to the line of business application through the connection and keeping open the connection after the message has been sent. This embodiment may further include keeping open the connection including keeping open the connection until a transaction to which the message belongs is complete and thereafter closing the connection and returning the connection to the connection pool for use for other messages. Alternatively keeping open the connection may include keeping open the connection until a session to which the message belongs is complete and thereafter closing the connection and returning the connection to the connection pool for use for other messages. In yet another alternative keeping open the connection may include keeping open the connection until an application context to which the message belongs is complete and thereafter closing the connection and returning the connection to the connection pool for use for other messages.

In inbound embodiment the method may be performed where translating communications between the line of business application and one or more web service clients includes translating notification messages generated from the line of business application to a web service notification. The method may further including sending the web service notification to a web service. In some embodiments this may be facilitated by starting a listener module as a result of receiving a control message from a web service client. Once the listener is started notification messages may be received from the line of business application and delivered to a receiver. The receiver may be the same web service client as the one which sent the control message in a duplex connection or may be a different web service.

Embodiments of the method may also include authentication functionality. For example the method may include authorizing access from the web service client to the line of business application by mapping web service client credentials to line of business application credentials. In alternative embodiments the method may include authorizing access from the web service client to the line of business application by passing line of business credentials from the web service client.

Embodiments of the present invention may comprise or utilize a special purpose or general purpose computer including computer hardware as discussed in greater detail below. Embodiments within the scope of the present invention also include physical and other computer readable media for carrying or storing computer executable instructions and or data structures. Such computer readable media can be any available media that can be accessed by a general purpose or special purpose computer system. Computer readable media that store computer executable instructions are physical storage media. Computer readable media that carry computer executable instructions are transmission media. Thus by way of example and not limitation embodiments of the invention can comprise at least two distinctly different kinds of computer readable media physical storage media and transmission media.

Physical storage media includes RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium which can be used to store desired program code means in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer.

A network is defined as one or more data links that enable the transport of electronic data between computer systems and or modules and or other electronic devices. When information is transferred or provided over a network or another communications connection either hardwired wireless or a combination of hardwired or wireless to a computer the computer properly views the connection as a transmission medium. Transmissions media can include a network and or data links which can be used to carry or desired program code means in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. Combinations of the above should also be included within the scope of computer readable media.

Further upon reaching various computer system components program code means in the form of computer executable instructions or data structures can be transferred automatically from transmission media to physical storage media or vice versa . For example computer executable instructions or data structures received over a network or data link can be buffered in RAM within a network interface module e.g. a NIC and then eventually transferred to computer system RAM and or to less volatile physical storage media at a computer system. Thus it should be understood that physical storage media can be included in computer system components that also or even primarily utilize transmission media.

Computer executable instructions comprise for example instructions and data which cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. The computer executable instructions may be for example binaries intermediate format instructions such as assembly language or even source code. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the described features or acts described above. Rather the described features and acts are disclosed as example forms of implementing the claims.

Those skilled in the art will appreciate that the invention may be practiced in network computing environments with many types of computer system configurations including personal computers desktop computers laptop computers message processors hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers mobile telephones PDAs pagers routers switches and the like. The invention may also be practiced in distributed system environments where local and remote computer systems which are linked either by hardwired data links wireless data links or by a combination of hardwired and wireless data links through a network both perform tasks. In a distributed system environment program modules may be located in both local and remote memory storage devices.

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

