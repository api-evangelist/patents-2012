---

title: Preserving restful web service structure in a client consuming the restful web service
abstract: A computer system identifies a uniform resource identifier (URI) that corresponds to a resource of a RESTful web service. The URI contains elements. The computer system identifies a relationship between the elements of the URI and creates programming code for a method of a software development kit (SDK) client. The method reflects the relationships between the elements of the URI to facilitate communication with the resource of the RESTful web service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09465587&OS=09465587&RS=09465587
owner: Red Hat Israel, Ltd.
number: 09465587
owner_city: Raanana
owner_country: IL
publication_date: 20121130
---
The present disclosure relates to RESTful web services and more particularly to preserving RESTful web service structure in a client consuming the RESTful web service.

Web services are client and server applications that communicate over the World Wide Web s WWW Hypertext Transfer Protocol HTTP . A web service is a software component provided through a network accessible endpoint and can be called from other applications. For example a financial company may have a web service that provides up to the minute stock quotes for customers who do their trading with that financial company. The information provided by the web service can be read from a web page and displayed or read from a stand alone application on a customer s desktop computer.

REpresentational State Transfer REST is a style of software architecture for distributed systems such as the World Wide Web. REST style architectures include clients and servers. Clients can initiate requests to the servers which can process the requests and return appropriate responses. In REST requests and responses are built around the transfer of representations of resources. A representation of a resource is typically a document that captures the current or intended state of the resource. For example the resource may be stock quotes.

A RESTful web service is a web service that is implemented using HTTP and the principals of REST. For example a RESTful web service may be a customer data management web service and may have three resources 1 a resource that is a list of all customers 2 a resource that is data for a specific customer and 3 a resource for adding a customer to the customer data. The RESTful resources can each have a uniform resource identifier URI which client applications can use to consume the resource.

A software developer may be familiar with a particular programming language for example Python or Java but may not be familiar with HTTP which the RESTful web service is based on. Typically software developers spend an extensive amount of time to research manual write and adapt a HTTP based layer to consume a HTTP based RESTful web service. The software developer usually has to manually and continually maintain the HTTP based layer which can be a time consuming process.

Described herein are a method and apparatus for preserving the RESTful nature of the web service in a software development kit SDK client that is consuming the RESTful web service according to various implementations. A RESTful web service is a web service that is implemented using HTTP hypertext transfer protocol and the principals of REST. A RESTful web service may include a URI for each resource. For example there may be a virtual infrastructure management RESTful web service for managing virtual machines. The RESTful web service may have resources to get data for a particular virtual machine VM identifier ID delete a particular VM identifier get the status of a particular VM identifier etc. For example the URI http localhost 8080 example services api vms 12345 may be for getting the data for the virtual machine identifier 12345.

A SDK client is a tool to allow applications to consume resources of RESTful web services. Implementations keep resources logically related in the SDK client as the resources are defined on the server side to enable convenience on future development. Implementations provide a self description of the nature of the RESTful web service to the SDK client. Implementations can use RESTful service description language RSDL as a guide to propagate the relationships between the resources in the RESTful web service at the server to the SDK client.

An application can consume a RESTful web service resource. For example an application may use the RESTful web service to get information for a virtual machine. The RESTful web service is HTTP based and a user such as a software developer may not have familiarity with HTTP. The software development kit SDK client is a development tool that receives user input for example from a software developer to allow the application to communicate with the RESTful web service via the RESTful SDK client. The SDK clients can be provided by the RESTful web service provider. The SDK clients can be provided for any number of programming languages e.g. Python Java etc. . A software developer user for example can select a SDK client in a programming language that corresponds to the application. For example if the application is a Python based application a Python SDK client for the RESTful web service can receive user input for example from a software developer to configure the Python based application to communicate with the RESTful web service.

Implementations describe a computer system that identifies a uniform resource identifier URI that corresponds to a resource of a RESTful Representational State Transfer web service. The URI contains a number of elements e.g. strings slash delimiters etc. . For example the URI may be api datacenters add and the elements may include the slash delimiters and the strings api datacenters and add. The elements can indicate one or more relationships of the resource. For example the elements api may indicate a RESTful web service entry point of api. An entry point is the root resource class into a RESTful web service. In another example the elements datacenters may indicate a collection of datacenters in the entry point api. A collection is a container of resources. In another example the elements add may indicate and add resource for the RESTful web service is in the collection datacenters. 

Implementations can automatically identify the relationships between the elements that are defined in the URI and replicate the relationships in programming code for a RESTful web service SDK client that is to consume the resource. For example implementations create programming code for a method of an SDK client. The method reflects the relationships between the elements of the URI to facilitate communication with the resource of the RESTful web service. Implementations also create programming code for example and not limited to code for a class for the entry point of the RESTful web service code for a class for the collection code for a class for a sub collection and code for an instance of a resource. A class is a construct that can be used to create instances of the class. A method is a function which is a block of organized reusable code that can be used to perform a single related action. For example an add method in Python for a URI that uses a HTTP POST method can be created.

For example the computer system creates programming code for an entry point class for a client application using a name of the entry point in the URI creates programming code for a collection class for the collection using a name of the collection in the URI and adds a collection pointer that points to the collection class in the entry point class programming code. The computer system creates programming code for a method that corresponds to an operation in the URI for the resource. The computer system can create a method pointer based on the relationship in the URI. For example the computer system may add a method pointer that points to the method in the collection class programming code. The computer system may iteratively continue to resources sub collections sub resources etc. The entry point class programming code the collection class programming code the collection pointer and the method pointer create the relationship that is defined in the URI in the SDK client.

In one implementation the classes and methods are added as part of a SDK client. A SDK client can include for example the entry point class that corresponds to the URI the collection class and or sub collection class that corresponds to the URI a file describing the server side methods for resources of the RESTful web service a file containing sample code a file containing documentation etc. The SDK client can receive user input for example from a software developer to allow an application that is written in a particular programming language to communicate with the RESTful web service. For example a Python SDK client can call methods e.g. Python methods Java methods etc. on a server computer system.

A machine can include a server . The server can include one or more RESTful web services . REpresentational State Transfer REST is an architecture style for accessing information on the web. In REST information on the server side is considered a resource which developers can access in a uniform way using URIs and HTTP. A RESTful web service can be defined based on input of an entity. An entity as referred to herein can represent any person a business organization such as a corporation an educational institution such as a college and university etc. The RESTful web service can have one or more resources which can be accessed for example by an application hosted on a client machine via a RESTful SDK client . The client machine may be a computing device such as a server computer a desktop computer a set top box a gaming console a television a portable computing device such as and not limited to mobile telephones personal digital assistants PDAs portable media players netbooks laptop computers and the like.

For example a RESTful web service may be defined for the entity s customer data. The RESTful web service may have a resource that is a list of all of the entity s customers a resource that is data for a specific customer a resource for adding a customer to the customer data etc. The RESTful web service can have URIs A C that correspond to the resources of the RESTful web service . For example URI A can be for the list of all of the entity s customers URI B can be for data for a specific customer identifier ID and URI C can be used to add a customer.

An application can use the URIs A C via a RESTful SDK client to consume the resources. For example the application can obtain a list of the entity s customers via the RESTful SDK client . The client machines can host one or more applications . An application can be any type of application including for example a web application a desktop application a browser application etc.

The server can include a web service interface development tool for allowing applications to consume resources of a RESTful web server via a RESTful SDK client . In one implementation the web service interface development tool can include a RESTful service description language RSDL module a SDK client creation module and a preservation module . Note that in alternative implementations the functionality of one or more of the modules may be combined or divided. The RSDL module to describe the URIs e.g. URIs A C for the RESTful web services in a generic format. A generic format is a format that can be used by a number of different programming languages. The RSDL module can publish a description of the URIs A C as server side metadata . The server side metadata can expose the structure of the URIs A C for the RESTful web service and can include metadata A C for the corresponding URIs A C. The server side metadata can be a RSDL file that describes the URIs A C. The server side metadata can be an XML formatted document that includes information about each URI A C for the RESTful web service including for example and not limited to operations e.g. add delete get etc. that can be called on the RESTful web service input parameters that can be passed for the operations return values from an operation etc. In one implementation the RSDL module uses the source code A C for the URIs A C for the RESTful web service to create the server side metadata . The URI source code A C can be stored in the server . In another implementation the RSDL module receives user input to create the server side metadata for the URIs A C. The server side metadata can be stored in a data store that is coupled to the server .

The SDK client creation module can automatically generate methods A B for the URIs A C without user interaction in various programming languages. For example the SDK client creation module may automatically generate Python methods A that correspond to the URIs A C and Java methods B that correspond to the URIs A C. For example if the server side HTTP based RESTful web service resource uses a POST HTTP method the Java methods B may include a Java based add method for the resource which a RESTful client can call. The SDK client creation module can automatically create SDK clients A B without user interaction for various programming languages e.g. Python Java based on the methods A B. For example SDK client A may be for Python and client SDK B may be for Java.

The preservation module can replicate the relationships of the resources for the URIs A C of the RESTful web service at the client machine . For example the preservation module can identify the relationships between elements in a URI which can represent the relationships for example between an entry point for the RESTful web service a collection for URI a sub collection for URI an operation for the resource and or an instance of the resource. The preservation module can identify the relationships from the URI and or from a description e.g. metadata A for the URI e.g. URI A . The preservation module can create programming code for an entry point class a collection class a sub collection class and a method based on the relationship. The classes A B e.g. entry point class a collection class a sub collection class can be stored on a data store that is coupled to the server . For example the preservation module may add the method to the collection class by adding a method pointer that points to the method in the programming code for the collection class. In another example the preservation module may add the collection to the entry point class by adding a collection pointer that points to the collection in the programming code for the entry point class. The programming code for the entry point class the collection the sub collection class and the method can create the same relationship that is defined in description e.g. metadata A of the URI e.g. URI A . In one implementation the preservation module uses the methods A B that are created by the SDK client creation module . One implementation of creating programming code to replicate the relationships of the resource is described in greater detail below in conjunction with .

A RESTful web service client can be defined using a software development kit SDK A B that specializes in a particular language e.g. Python Java . A software development kit A B may be a set of software development tools that allows for the creation of applications for a certain software framework for example to consume a RESTful web service. The SDK client A B can be provided by the RESTful web service provider. A SDK client A B which can include the entry point classes collection classes and or sub collection classes for the resource of the RESTful web service and data describing the server side methods A B that can be called for the RESTful web service may be installed on a client machine e.g. downloaded to the client machine by a user as a RESTful SDK client . The installed RESTful SDK client . A RESTful SDK client can be in a particular programming language and can allow an application which may be written in the same programming language to consume the RESTful web service. For example the classes in the SDK client can be used to provide user access for example via a user interface e.g. graphical user interface to the collections in the entry point and to facilitate a selection of a collection. In another example the classes in the SDK client can be used to provide user access via the user interface to the methods in the collection and to facilitate a selection of a method to call.

A preservation module e.g preservation module in can identify relationships between elements of a URI which represent for example relationships between an entry point a collection a sub collection an operation and a resource. The preservation module can identify relationships using the URIs and or URI descriptions . A resource can include a sub collection. For example the URI description indicates an entry point of api E a collection of clusters an operation add a instance of a cluster and a sub collection of permissions . The URI descriptions can include the same entry point A E. Some of the URI descriptions may include the same collections. For example the URI descriptions may include the same datacenters A B collection and the URI descriptions may include the same hosts A B collection

The identification sub module can identify a URI that correspond to a resource of a RESTful web service. In one implementation the identification sub module identifies a RESTful service description language RSDL describing URIs for a RESTful web service. The RSDL for the RESTful web service can be a RSDL file that is stored in a data store that is coupled to the preservation module . The data store can store a RSDL file for any number of RESTful web services. The identification sub module can receive user input via a user interface that is coupled to the identification sub module identifying which RSDL file to use. The user interface can be a graphical user interface a command line interface etc.

The identification sub module can identify the URI descriptions in the RSDL file . For example the identification sub module may identify five URI descriptions e.g. URI descriptions in in a RSDL file for a particular RESTful web service. The identification sub module can use configuration data that is stored in the data store to determine which search terms to use to identify the URI descriptions for the resources of the RESTful web service. For example the configuration data may specify the identification sub module is to search for href in the RSDL file .

The identification sub module can identify the relationships between elements in a URI which can represent the relationships for example between an entry point for the RESTful web service a collection for URI a sub collection for URI an operation for the resource and or an instance of the resource. The identification sub module can identify an entry point for the RESTful web service in a URI description. The identification sub module can use the configuration data to determine which search terms to use to locate the entry points in the URI descriptions. For example the configuration data may specify the identification sub module to search for href and a first slash delimiter in the URI descriptions and to identify the string between the first slash delimiter and a second slash delimiter as a name of the entry point.

The identification sub module can identify a collection for the RESTful web service in a URI description. The identification sub module can use the configuration data to determine which search terms to use to locate the collections in the URI descriptions. For example the configuration data may specify the identification sub module to search for href and a second slash delimiter in the URI descriptions and to identify the string after the second slash delimiter as a name of a collection.

The identification sub module can identify a sub collection for the RESTful web service in a URI description. The identification sub module can use the configuration data to determine which search terms to use to locate the sub collections in the URI descriptions. For example the configuration data may specify the identification sub module to search for href and a third slash delimiter in the URI descriptions and to identify any string which does not represent an instance identifier e.g. host instance identifier cluster instance identifier datacenter instance identifier virtual machine instance identifier etc. to be a name of a sub collection. For example the URI description may be and api is the name of the entry point hosts is the name of a collection 12235124 is an identifier of an instance of a host and approve is a sub collection.

The identification sub module can identify an operation for the resource in a URI description. The identification sub module can use the configuration data to determine which search terms to use to locate the operation in the URI descriptions. For example the configuration data may specify the identification sub module to search for rel in the URI descriptions and to identify the string after rel as a name of the operation.

The class sub module can create a class for the entry point for the URI. The class sub module can create programming code for the entry point class. The class sub module can use a code template that is stored in the data store to create the programming code for the entry point class. The class sub module can use the name of the entry point as identified in the URI to create the entry point class programming code. The class sub module can store the entry point class programming code as part of the classes code in the data store . The class sub module can add a collection pointer that points to the collection class in the entry point class programming code.

The class sub module can create executable code for the classes e.g. entry point classes collection classes etc. by compiling the classes code . The class sub module can store the executable code as classes executable code in the data store .

The method sub module can create and or locate methods for operation that has been identified in the URIs. In one implementation the method sub module locates a method that corresponds to the URI description in the data store . For example another module e.g. SDK client creation module in may have created a method that corresponds to the URI description. In another implementation the method sub module creates the method for the URI operation. The method sub module can extract the identified metadata or a portion of the identified metadata from the RSDL file and or other files in the data store to create a method for an operation in the URI description. For example the operation in the URI description may be get and the method sub module creates a list method for the get operation using the metadata for the URI description. The method sub module can use mapping data that is stored in the data store to determine which metadata to use to create the method. For example the method sub module may extract a POST method from the RSDL file and may use the mapping data to determine that a POST method corresponds to an add method in Python. The method sub module can add a method pointer that points to the method in the collection class programming code.

The method sub module can store the created and or located methods for the URIs for the RESTful web service on a server. The server can be the server that is providing the RESTful web service. The method sub module can store one or more files for the methods in a data store that is coupled to the server. The server side methods can be called for example by RESTful web service SDK clients e.g. RESTful SDK client in to consume the RESTful web service resource that corresponds to the method . The server may receive a call from a SDK client to execute one for the stored methods execute the method and return a value to the SDK client.

The data store can be a persistent storage unit. A persistent storage unit can be a local storage unit or a remote storage unit. Persistent storage units can be a magnetic storage unit optical storage unit solid state storage unit electronic storage units main memory or similar storage unit. Persistent storage units can be a monolithic device or a distributed set of devices. A set as used herein refers to any positive whole number of items.

At block processing logic identifies a URI that corresponds to a resource of a RESTful web service. Processing logic may identify the URI in a URI description. For example processing logic can identify a RESTful service description language RSDL describing URIs for the RESTful web service. Processing logic can receive user input identifying the RSDL for the RESTful web service. For example processing logic may receive user input of the location of a RSDL file. Processing logic can use configuration data to search for terms in the description. For example processing logic may search for href in the RSDL file to identify the URI description of a resource. The URI contains elements e.g. strings slash delimiters etc. which can indicate a relationship between the elements. The relationship between the elements in the URI can represent the relationships between the entry point the collection sub collection resource instance and or operation for the resource.

At block processing logic identifies an entry point a collection a sub collection a resource instance and or an operation for the URI from the elements e.g. strings slash delimiters etc. in the URI. Processing logic an identify the relationships between the elements of the URI. At block processing logic identifies a relationship between the entry point the collection sub collection resource instance and or operation from the elements of the URI. For example processing logic may determine that there is a sub collection permissions in a collection clusters and that there is an add operation in the sub collection permissions. 

At block processing logic determines whether the entry point in the URI description matches an entry point in a previously identified URI description. URI descriptions may include the same entry point. Processing logic can search the entry point class programming code in a data store that is coupled to the preservation module to determine if an entry point class has the same name as the entry point in the URI description. If there is not an entry point class that has the same name processing logic can create programming code for an entry point class using the entry point name in the URI description at block . For example the entry point in the URI description is api and processing logic creates a class named api. 

At block processing logic determines whether the collection in the URI description matches a collection in a previously identified URI description. URI descriptions may include the same collection. Processing logic can search the collection class programming code in the data store to determine if a collection class has the same name as the collection in the URI description. If there is not a collection class that has the same name processing logic can create programming code for a collection class using the collection name in the URI description at block . For example the collection in the URI description is datacenters and processing logic creates a class named datacenters. At block processing logic creates a collection pointer which points to the collection class in the programming code for the entry point class.

If processing logic identifies a sub collection from the URI description processing logic can also determine whether the sub collection in the URI description matches a sub collection in a previously identified URI description. URI descriptions may include the same sub collection. Processing logic can search the sub collection class programming code in the data store to determine if a sub collection class has the same name as the sub collection in the URI description. If there is not a sub collection class that has the same name processing logic can create programming code for a sub collection class using the sub collection name in the URI description at block . For example the collection in the URI description is permissions and processing logic creates a class named permissions. At block processing logic creates a sub collection pointer which points to the sub collection class in the programming code for the collection class.

At block processing logic creates a method of an SDK client. The method reflects the relationships between the elements of the URI to facilitate communication with the resource of the RESTful web service. The method corresponds to an operation in the URI for the resource. In one implementation processing creates a method by locating a method that may have already been created for the resource for example by a SDK client creation module e.g. SDK client creation module in . In another implementation processing logic uses metadata that corresponds to the URI description in the RSDL file to create the method. Processing logic can also use a template to create the method. At block processing logic creates a method pointer which points to the method based on the relationship of the operation in the URI that corresponds to the method. For example the method may be in the collection and processing logic creates a method pointer in the programming code for the collection class. In another example the method may be in a sub collection and processing logic creates a method pointer in the programming code for the sub collection class.

At block processing logic stores the classes e.g. entry point class collection class sub collection class and the methods for the RESTful web service as part of a SDK client according to one implementation. For example processing logic may store the classes methods and or data describing the methods as part of a SDK client which may be downloaded to a client machine. In another implementation processing logicstores the classes e.g. entry point class collection class sub collection class and the methods for the RESTful web service on a server. The server can be the server that is providing the RESTful web service. Processing logic can store one or more files for the methods in a data store that is coupled to the server. The server may receive a call from a SDK client to execute one for the methods execute the method and return a value to the SDK client.

At block processing logic determines whether there is another URI description in the RSDL. If there is another URI description processing logic can return to block to identify the URI description.

The machine may be a personal computer PC a tablet PC a set top box STB a Personal Digital Assistant PDA a cellular telephone a web appliance a server a network router a switch or bridge or any machine capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine. Further while a single machine is illustrated the term machine shall also be taken to include any collection of machines that individually or jointly execute a set or multiple sets of instructions to perform any one or more of the methodologies discussed herein.

The example computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor a central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute instructions for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine readable storage medium also known as a computer readable medium on which is stored one or more sets of instructions or software embodying any one or more of the methodologies or functions described herein. The instructions may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine readable storage media.

In one implementation the instructions include instructions for a preservation module e.g. preservation module of and or a software library containing methods that call modules in a preservation module. While the machine readable storage medium is shown in an example implementation to be a single medium the term machine readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable storage medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present disclosure. The term machine readable storage medium shall accordingly be taken to include but not be limited to solid state memories optical media and magnetic media.

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as or identifying or creating or sending or adding or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage devices.

The present disclosure also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the intended purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct a more specialized apparatus to perform the method. The structure for a variety of these systems will appear as set forth in the description below. In addition the present disclosure is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the disclosure as described herein.

The present disclosure may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to the present disclosure. A machine readable medium includes any mechanism for storing information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium such as a read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc.

In the foregoing specification implementations of the disclosure have been described with reference to specific example implementations thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of implementations of the disclosure as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

