---

title: Third party verification using override IP addresses
abstract: Techniques for third party verification using override IP addresses is described, including detecting a request header from an endpoint, the request header being associated with a request for a media file, initiating a download of the media file to the endpoint, evaluating the request header to identify an address associated with the endpoint, generating a notification comprising the address, the notification being configured to indicate the address overrides a source address identified by a field in a packet associated with the request header, and sending the notification to report data associated with the media file, wherein the address overrides the source address to identify a source of the request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08671193&OS=08671193&RS=08671193
owner: Limelight Networks, Inc.
number: 08671193
owner_city: Tempe
owner_country: US
publication_date: 20121026
---
This application is a continuation of U.S. patent application Ser. No. 13 215 373 filed Aug. 23 2011 entitled THIRD PARTY VERIFICATION USING OVERRIDE IP ADDRESSES which is a continuation of U.S. patent application Ser. No. 11 904 327 filed on Sep. 25 2007 entitled THIRD PARTY VERIFICATION USING OVERRIDE IP ADDRESSES . Each of these references is hereby incorporated by reference in its entirety for all purposes.

The present invention relates generally to computer programs and software. More specifically techniques for third party verification using override IP addresses are described.

Measuring parameters associated with the performance of a website is a valuable function for determining various characteristics associated with the content. Content may include media files e.g. audio video images graphics or a combination thereof which may be delivered to an executable environment such as a web browser or web browsing application. However conventional techniques for measuring web analytics are problematic and limited.

In conventional web browsing environments performance characteristics e.g. number of downloads when a download starts ends length of download type of content file name date time and others are typically measured using a program written in JavaScript enabling a ping or callback which involves sending a small amount of data typically sent as a set of data packets back to the source i.e. server of a downloaded file. Characteristics such as an Internet Protocol IP address user agent software version operating system OS version number of views downloads and other information about an end user i.e. client or destination environment can be measured or gathered using conventional techniques. In conventional web browsing environments when a web page is requested a JavaScript program reports characteristics or metrics metrics about a requested file. However other applications e.g. media players can run offline i.e. not connected to a data network such as the Internet which prevents data from being sent back to a server for purposes of callbacks and gathering metrics. Further while some conventional techniques allow reporting from media playing environments when a data connection is re established metrics are not reported in real time. Still further conventional programming techniques such as JavaScript cannot be used to develop programs for monitoring gathering or reporting on metrics outside of a web browsing environment. For example the number of times a media file is played cannot be tracked when played in a media player that does not have a data connection over which it can report metrics back to a server.

Other problems associated with conventional techniques for gathering metrics on media files involve inaccurate reporting. For example hypertext transfer protocol HTTP requests are often inaccurate because HTTP request headers often include a source address that provides the address of a server and not the actual end user. Conventional techniques often report a network address that is not the actual end user i.e. client address. Thus conventional reporting and analytics software may erroneously report the source of a media file i.e. server as the destination and fail to identify the actual location or destination of a media file download.

Thus a solution for verifying media file metrics without the limitations of conventional techniques is needed.

Various embodiments or examples may be implemented in numerous ways including as a system a process an apparatus or a series of program instructions on a computer readable medium such as a computer readable storage medium or a computer network where the program instructions are sent over optical electronic or wireless communication links. In general operations of disclosed processes may be performed in an arbitrary order unless otherwise provided in the claims.

A detailed description of one or more examples is provided below along with accompanying figures. The detailed description is provided in connection with such examples but is not limited to any particular example. The scope is limited only by the claims and numerous alternatives modifications and equivalents are encompassed. Numerous specific details are set forth in the following description in order to provide a thorough understanding. These details are provided as examples and the described techniques may be practiced according to the claims without some or all of the accompanying details. For clarity technical material that is known in the technical fields related to the embodiments has not been described in detail to avoid unnecessarily obscuring the description.

In some examples the described techniques may be implemented as a computer program or application application or as a module or sub component of another application. The described techniques may be implemented as software hardware firmware circuitry or a combination thereof. If implemented as software the described techniques may be implemented using various types of programming development scripting or formatting languages frameworks syntax applications protocols objects or techniques including C Objective C C C Flex Java Javascript Ajax COBOL Fortran ADA binary XML HTML DHTML XHTML HTTP XSL XSLT XMPP WSDL and others. Design publishing visual effects and other types of applications such as Dreamweaver Shockwave Flash Fireworks and others may also be used to implement the described techniques. The described techniques may be varied and are not limited to the examples or descriptions provided.

Techniques for third party verification using override IP addresses are described. In some examples downloads of media files e.g. music audio video images pictures photos and others may be tracked for reporting performance traffic and other analytical purposes using third party verification by using pre set rules or parameters to determine when to trigger

Here system may be implemented to enable media clients to request media files for download streaming or access from media servers or server . For example a wireless mobile device e.g. media clients or may request a podcast to be streamed or downloaded from one or more of media servers . When requested a callback i.e. a message including one or more data packets structured according to any type of data transmission protocol e.g. TCP IP UDP HTTP and others and having information such as IP address host address HTTP information and other information beyond that of a traffic log may be sent from one or more of media servers to verification service implemented on server . As an example verification service may be a process or set of processes implemented in a standalone or distributed architecture that enables a server client or peer to verify i.e. determine one or more characteristics associated with a media file. In other words processes sub processes modules applications routines or the like may be implemented on a single processor e.g. server or multiple processors or machines. In this example verification service is installed on server which is in data communication with server . Further server may also be in data communication with server across network . Direct or indirection connections or couplings may be used to place media clients and media servers in data communication with each other. Verification service in some examples may be used to verify i.e. determine various characteristics or parameters associated with serving media files from media servers to media clients . For example when a media file is accessed a callback i.e. a data call made to verification service on server when a media file is requested downloaded or otherwise accessed from media server may be made to verification service which stores or records data for traffic and performance analysis purposes. Further stored data may be retrieved or accessed by a system administrator subscriber or other user of verification service . In some examples reports may also be generated by verification service about various characteristics or parameters associated with a media file. Examples of types of characteristics or parameters parameters that may be gathered by verification service and reported are number of downloads addresses associated with download requests via HTTP request headers request headers source addresses destination addresses length of download download file name download size date time of download and any other information or data associated with a media file. As an example HTTP headers e.g. HTTP request headers request headers may be modified to send override IP address indicated as an IP address but in an HTTP message or packet format. In some examples IP addresses may be read or retrieved from a layer i.e. IP layer of a protocol stack in order to retrieve the actual end user IP address i.e. override IP address for a given media client. Any type of protocol e.g. HTTP TCP IP UDP and others format may be used to send HTTP header information with override IP addresses. The above described elements may be varied in number function design layout configuration or implementation and are not limited to the examples shown and described.

When a media file is requested in some examples by media client media server sends the requested media file if available to media client . Verification module also sends a notification to verification service to report the request and or download of a media file. Verification module may be a program application routine process or a set thereof that is used to gather parameters associated with a media file from media server . In other example verification module may be a distributed feature of verification services . In still other examples functionality provided by verification module may be incorporated integrated or otherwise included with verification service . Parameters gathered by verification service may be reported out to system administrators subscribers applications or other users of verification service and information and analysis provided by it.

Here when a media file is requested for download from media server verification service may be notified i.e. by receiving a notification from verification module of various information e.g. media file name location address size date time of request date time of download initiation date time of download completion and others . When a request from media client is received verification service and or verification module may evaluate a request header associated with a data packet structured according to HTTP. During the evaluation an address for media client may be determined and instead of reporting the IP address of media server to verification service the actual end user IP address of media client may be reported. When sending a message to verification service the actual end user i.e. media client IP address may be included i.e. supplemented in data packets that are provided by media client to media server . Various techniques for adding the actual end user IP address may be used and are not limited to any specific example. For example the actual end user IP address may be added to the payload or user data portion of a data packet. As another example optional fields may be used to add the actual end user IP address. Further the actual end user IP address may be added to any field in a data packet formatted using HTTP or any other data communication protocol using special flags operators or other indicators. The type of special flag operator or other indicator is not a limiting feature of the techniques described herein and may be varied accordingly.

When a data packet having the actual end user IP address is sent from verification module to verification service logic described below in connection with implemented on verification service is configured to interpret the special flag operator or other indicator to identify the actual end user IP address. Once identified the actual end user IP address is used to store file or otherwise record data associated with the media file sent from media server to media client . Thus a source i.e. network IP address in a data packet or stream sent from media server to verification service may be overridden by the actual end user IP address by logic included in API verification module or verification service . In other examples verification module may be eliminated and instead implemented as functionality included in verification service . By identifying the actual end user IP address sending the HTTP request header to media server verification service can accurately associate data metrics parameters and analysis with media files requested and downloaded instead of using a network e.g. IP address for media server which can be inaccurate. The above described elements may be varied in number function design layout configuration or implementation and are not limited to the examples shown and described.

In some examples data is sent or received by verification application using API which may be implemented to provide routines that specify how data should be received or sent between verification application and for example media server . When an HTTP request header is detected verification module notifies verification service and includes the actual end user IP address in a notification message using techniques such as those described above. Packet encoding module may be configured to add the actual end user IP address in a message along with an indicator to override a default source or network address found in a field of the HTTP request header. Notification messages or data sent to verification service are encoded decoded or evaluated by packet encoding module to determine whether an actual end user IP address has been included by verification module which may be implemented on media server . If an actual end user IP address has been included in a notification sent by verification module i.e. media server to verification service then the actual end user IP address may be used to override the network or source address of the request from media client . Thus data associated with the actual end user IP address and the requested media file not shown may be recorded or stored stored in database which may be implemented as an individual data repository or as multiple data repositories. By recording data related to an actual end user IP address as opposed to the default source i.e. network address found in a network packet parameters associated with a media file are more accurately reported for analysis and verification purposes. In some examples database may be a storage area network redundant array of independent disks RAID hard drive non volatile memory repository or any other type of storage array or facility. The above described elements may be varied in number function design layout configuration or implementation and are not limited to the examples shown and described.

Referring back to a determination is made as to whether the media file transmission was terminated by media client . In some examples termination of a media file download may be caused by a user stopping the playing or download of a given file. In other examples termination of a media file download may be caused by the loss of a data network connection. In still other examples termination of a media file download prior to completion may occur for other reasons than those stated above. Further a notification to a verification service may be sent when a download aborted or if a download request came from a malicious IP address i.e. known or otherwise . Still further rules may be specified to determine when third party verification service is activated i.e. initiates recording of data associated with the request or download of a media file . If the transmission i.e. download of the download is terminated by the media client e.g. a user stops the download then the process ends. If the transmission is not terminated by the media client then the transmission continues to the media client until the download is completed . Once completed a notification may be sent to verification service using an override IP address i.e. an actual end user IP address that is indicated as superseding or replacing the source address identified in a network packet request header as described above . The above described process may be varied in order steps function or implementation and are not limited to the examples shown and described.

According to some examples computer system performs specific operations by processor executing one or more sequences of one or more instructions stored in system memory . Such instructions may be read into system memory from another computer readable medium such as static storage device or disk drive . In some examples hard wired circuitry may be used in place of or in combination with software instructions for implementation.

The term computer readable medium refers to any medium that participates in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as disk drive . Volatile media includes dynamic memory such as system memory . Transmission media includes coaxial cables copper wire and fiber optics including wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infrared data communications.

Common forms of computer readable media includes for example floppy disk flexible disk hard disk magnetic tape any other magnetic medium CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes RAM PROM EPROM FLASH EPROM any other memory chip or cartridge carrier wave or any other medium from which a computer can read.

In some examples execution of the sequences of instructions may be performed by a single computer system . According to some examples two or more computer systems coupled by communication link e.g. LAN PSTN or wireless network may perform the sequence of instructions in coordination with one another. Computer system may transmit and receive messages data and instructions including program i.e. application code through communication link and communication interface . Received program code may be executed by processor as it is received and or stored in disk drive or other non volatile storage for later execution.

The foregoing examples have been described in some detail for purposes of clarity of understanding but are not limited to the details provided. There are many alternative ways and techniques for implementation. The disclosed examples are illustrative and not restrictive.

