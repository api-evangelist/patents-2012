---

title: Systems and methods for file-level replication
abstract: A computer-implemented method for file-level replication may include 1) identifying a selection of at least one source file to replicate from a primary volume to a secondary volume, 2) identifying extent information that indicates a volume location of the source file within the primary volume, 3) identifying a volume offset within the primary volume of a write operation performed on the source file within the primary volume, 4) converting the volume offset to a file offset within the source file using the extent information, and 5) replicating the write operation and the file offset to the secondary volume. Various other methods and systems are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09251020&OS=09251020&RS=09251020
owner: Symantec Corporation
number: 09251020
owner_city: Mountain View
owner_country: US
publication_date: 20121008
---
Many organizations rely upon data replication to improve the reliability fault tolerance and or accessibility of their applications and or data. Data replication typically involves replicating data from a primary site or device e.g. a production volume to a secondary e.g. backup and or disaster recovery site or device.

Many traditional replication systems may replicate data at the volume level e.g. replicate a specified volume from a primary site to a secondary site . However in some cases a replication administrator may wish to only replicate certain files within a volume e.g. selected virtual hard disk files within a virtualization environment . While some traditional replication systems may replicate data at the file level these replication systems may lack features robustness performance quality of service and or ease of use of existing volume level replication systems. Unfortunately replication administrators who would prefer to perform file specific replication may therefore face an undesirable dilemma of choosing between a powerful and robust volume level replication system and a file level replication system. Accordingly the instant disclosure identifies and addresses a need for additional and improved systems and methods for file level replication.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for file level replication by filtering file operations for specified files on primary volumes converting these operations to specify file offsets e.g. from volume offsets and replicating the converted operations to secondary volumes. In one example a computer implemented method for file level replication may include 1 identifying a selection of at least one source file to replicate from a primary volume to a secondary volume 2 identifying extent information that indicates a volume location of the source file within the primary volume 3 identifying a volume offset within the primary volume of a write operation performed on the source file within the primary volume 4 converting the volume offset to a file offset within the source file using the extent information and 5 replicating the write operation and the file offset to the secondary volume.

In some examples identifying the selection of the source file may include configuring a file system filter driver to identify future file operations performed on the source file.

In some embodiments identifying the extent information may include receiving the extent information from a file system driver. In one example the computer implemented method may also include 1 identifying new extent information that indicates a change in a size of the source file on the primary volume and 2 transmitting the new extent information to the secondary volume.

In one embodiment the computer implemented method may also include 1 identifying an additional write operation performed on the primary volume 2 comparing the additional write operation to the extent information and determining based on the extent information that the additional write operation does not apply to the source file and 3 preventing replication of the additional write operation to the secondary volume based on determining that the additional write operation does not apply to the source file.

In some examples an additional method for file level replication may include 1 identifying a target file on a secondary volume as a replicated version of a source file on a primary volume 2 receiving a replicated write operation to apply to the target file on the secondary volume 3 identifying extent information that indicates a volume location of the target file within the secondary volume 4 identifying a file offset of the replicated write operation 5 converting the file offset to a volume offset of the replicated write operation within the secondary volume using the extent information and 6 applying the replicated write operation on the secondary volume using the volume offset.

In some embodiments the secondary volume may be mounted to allow read operations and write operations for replication. In one example the additional computer implemented method may also include 1 receiving new extent information that indicates a change in the size of the source file on the primary volume and 2 modifying the target file on the secondary volume to match the source file on the primary volume based on the new extent information. In one embodiment receiving the new extent information may include configuring a file system filter driver to receive the new extent information for modifying the target file.

In some embodiments the additional computer implemented method may also include 1 identifying a failover of the primary volume to the secondary volume and 2 reconfiguring the file system filter driver to intercept file operations that change metadata of the target file to replicate to a new secondary volume in response to identifying the failover.

In one embodiment a system for implementing the above described method may include 1 an identification module programmed to identify a selection of at least one source file to replicate from a primary volume to a secondary volume 2 a location module programmed to identify extent information that indicates a volume location of the source file within the primary volume 3 an offset module programmed to identify a volume offset within the primary volume of a write operation performed on the source file within the primary volume 4 a conversion module programmed to convert the volume offset to a file offset within the source file using the extent information and 5 a replication module programmed to replicate the write operation and the file offset to the secondary volume. The system may also include at least one processor configured to execute the identification module the location module the offset module the conversion module and the replication module.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The present disclosure is generally directed to systems and methods for file level replication. As will be explained in greater detail below by filtering file operations for specified files on primary volumes converting these operations to specify file offsets e.g. from volume offsets and replicating the converted operations to secondary volumes the system and methods described herein may achieve file level replication using existing volume level replication technologies. For example existing volume level replication systems may be adapted with minimal change for file level replication thereby allowing file level replication with volume level replication systems that may provide features robustness performance quality of service and or ease of use that may be unavailable with some traditional dedicated file level replication systems.

The following will provide with reference to and detailed descriptions of exemplary systems for file level replication. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

In addition and as will be described in greater detail below exemplary system may include an offset module programmed to identify a volume offset within the primary volume of a write operation performed on the source file within the primary volume. Exemplary system may also include a conversion module programmed to convert the volume offset to a file offset within the source file using the extent information. Exemplary module may additionally include a replication module programmed to replicate the write operation and the file offset to the secondary volume. Although illustrated as separate elements one or more of modules in may represent portions of a single module or application.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example and as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as the devices illustrated in e.g. primary system and or secondary system the devices illustrated in e.g. primary system and or secondary system the devices illustrated in e.g. primary system secondary system and or tertiary system computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

Exemplary system in may be implemented in a variety of ways. For example all or a portion of exemplary system may represent portions of exemplary system in . As shown in system may include a primary system in communication with a secondary system via a network . Primary system may be programmed with one or more of modules . Additionally or alternatively secondary system may be programmed with one or more of modules .

In one embodiment one or more of modules from may when executed by at least one processor of primary system and or secondary system facilitate primary system and or secondary system in file level replication. In one example primary system may be configured to replicate one or more files from a primary volume to a secondary volume of secondary system . For example and as will be described in greater detail below one or more of modules may cause primary system and or secondary system to 1 identify a selection of one or more files including a file to replicate from primary volume to secondary volume 2 identify extent information that indicates the volume location of file within primary volume 3 identify a volume offset within primary volume of a write operation performed on file within primary volume 4 convert volume offset to a file offset within file using extent information and 5 replicate write operation and file offset to secondary volume e.g. to a file that is a replica of file .

Primary system generally represents any type or form of computing device capable of reading computer executable instructions. Examples of primary system include without limitation laptops tablets desktops servers cellular phones personal digital assistants PDAs multimedia players embedded systems combinations of one or more of the same exemplary computing system in or any other suitable computing device. In some examples primary system may represent a computing device configured to replicate data.

As illustrated in exemplary system may also include primary volume . Primary volume may be configured to store any information that may be replicated. In one example primary volume may store virtual disk files. Primary volume may represent portions of a single storage device or a plurality of storage devices. For example primary volume may represent a portion of primary system in computing system in and or portions of exemplary network architecture in . Alternatively primary volume in may represent at least a portion one or more physically separate devices capable of being accessed by a computing device such as primary system in computing system in and or portions of exemplary network architecture in .

Secondary system generally represents any type or form of computing device capable of reading computer executable instructions. Examples of secondary system include without limitation laptops tablets desktops servers cellular phones personal digital assistants PDAs multimedia players embedded systems combinations of one or more of the same exemplary computing system in or any other suitable computing device. In some examples secondary system may represent a computing device configured to receive manage and or access replicated data.

As illustrated in exemplary system may also include secondary volume . In some examples secondary volume may be configured to store replicated data. In one example secondary volume may store replicated virtual disk files. Secondary volume may represent portions of a single storage device or a plurality of storage devices. For example secondary volume may represent a portion of secondary system in computing system in and or portions of exemplary network architecture in . Alternatively secondary volume in may represent at least a portion one or more physically separate devices capable of being accessed by a computing device such as secondary system in computing system in and or portions of exemplary network architecture in .

Network generally represents any medium or architecture capable of facilitating communication or data transfer. Examples of network include without limitation an intranet a wide area network WAN a local area network LAN a personal area network PAN the Internet power line communications PLC a cellular network e.g. a GSM Network exemplary network architecture in FIG. or the like. Network may facilitate communication or data transfer using wireless or wired connections. In one embodiment network may facilitate communication between primary system and secondary system .

As illustrated in at step one or more of the systems described herein may identify a selection of at least one source file to replicate from a primary volume to a secondary volume. For example at step identification module may as part of primary system in identify selection of one or more files including file to replicate from primary volume to secondary volume .

As used herein the term file may refer to any unit of data including without limitation files directories data objects records database entries and documents. In one example the source file may include a virtual disk file. As used herein the term volume may refer to any distinctly identifiable collection of data. In some examples the volume may correspond to a logical storage unit used by a file system to store one or more files. In some examples the term volume may refer to an addressable storage space capable of storing files. By way of example the term volume may refer to a volume managed by a logical volume manager such as LOGICAL DISK MANAGER or VERITAS VOLUME MANAGER.

As used herein the term replication may refer to any scheme for maintaining an up to date copy of a collection of data. In some examples one or more of the systems described herein may perform continuous replication. As used herein the phrase continuous replication may refer to any service for providing continuous and or real time backup services e.g. by replicating each transaction and or operation synchronously and or near synchronously . Accordingly as used herein the phrase primary volume may refer to any volume from which data is replicated and the phrase secondary volume may refer to any volume to which data is replicated. Likewise the phrase source file may refer to any file to be replicated and the phrase target file may refer to any replica file.

Identification module may identify the selection in any suitable manner. For example identification module may identify the selection by reading a configuration file e.g. created by a replication administrator specifying the files of a volume to be replicated. Additionally or alternatively identification module may identify one or more rules defining the selection and identify one or more files on the primary volume meeting the specified rules.

In some examples one or more of the systems described herein may operate as a part of a volume manager driver. For example one or more of the systems described herein may when installed as a part of a volume manager driver may modify the operation of a volume level replication system to perform file level replication. In one example identification module may configure a volume manager driver to identify future file operations performed on the source file e.g. upon identifying the source file within the selection .

In some examples one or more of the systems described herein may operate as a part of a file system driver. As used herein the phrase file system driver may refer to any driver used to provide functionality for a file system. In some examples the phrase file system driver may refer to a file system filter driver. As used herein the phrase filter driver may refer to any driver configured to add functionality for a device and or system without replacing a primary driver for the device and or system. Accordingly the phrase file system filter driver may refer to any driver configured to add functionality to a file system. In some examples one or more of the systems described herein may as part of a file system driver intercept file operations configured to change the size of a file. For example these file operations may include resizing operations allocation operations deallocation operations deletion operations etc.

Returning to at step one or more of the systems described herein may identify extent information that indicates a volume location of the source file within the primary volume. For example at step location module may as part of primary system in identify extent information that indicates the volume location of file within primary volume .

As used herein the phrase extent information may refer to any information useful for locating a file within a volume. For example the phrase extent information may refer to information identifying one or more contiguous portions of storage allocated for a file within a volume. As used herein the phrase volume location may refer to any information describing the location of a file within a volume including e.g. a starting location of the file within the volume a starting location of one or more extents of the file within the volume and or a size of one or more extents of the file within the volume etc. .

Location module may identify the extent information in any suitable manner. In some examples location module may receive the extent information from a file system filter driver. Additionally or alternatively location module may identify the extent information as a part of a file system filter driver.

In some examples the extent information of the source file may change. For example the source file may be resized. Accordingly in some examples location module may identify new extent information that indicates a change in the size of the source file on the primary volume. In these examples location module may also transmit the new extent information to the secondary volume e.g. replicating the new extent information to be applied to a replica of the source file on the secondary volume .

Returning to at step one or more of the systems described herein may identify a volume offset within the primary volume of a write operation performed on the source file within the primary volume. For example at step offset module may as part of primary system in identify volume offset within primary volume of a write operation performed on file within primary volume .

As used herein the phrase volume offset may refer to any offset and or location relative to a volume e.g. an address and or location within a volume . Offset module may identify the volume offset of the write operation in any suitable manner. For example offset module may identify the volume offset of the write operation by intercepting the write operation as a part of a volume manager and identifying the location within the volume to which the write operation is to apply.

In some examples one or more of the systems described herein may identify other write operations not to be replicated. For example offset module may identify an additional write operation performed on the primary volume and compare the additional write operation to the extent information. Offset module may then determine based on the extent information that the additional write operation does not apply to the source file. Likewise offset module may compare the additional write operation to extent information of other files within the selection of files set for replication and or to a data structure combining such extent information to determine that the additional write operation does not apply to any file set for replication.

Returning to at step one or more of the systems described herein may convert the volume offset to a file offset within the source file using the extent information. For example at step conversion module may as part of primary system in convert volume offset to file offset within file using extent information .

As used herein the phrase file offset may refer to any offset and or location relative to a file e.g. a location and or offset within a file . Conversion module may convert the volume offset to the file offset using the extent information in any suitable manner. For example conversion module may identify an extent map e.g. retrieved by conversion module from a file system that maps volume offsets e.g. Logical Cluster Numbers to file offsets e.g. Virtual Cluster Numbers . In this example conversion module may convert the volume offset using the extent map. As another example conversion module may subtract the volume offset of the write operation from a volume location of an extent to which the write operation applies to determine an offset within the extent and then in some examples add a file offset of the extent to the determined offset of the extent to identify the file offset. Additionally or alternatively where the source file includes a single extent conversion module may simply subtract the volume location of the beginning of the single extent from the volume offset of the write operation to determine the file offset.

Returning to at step one or more of the systems described herein may replicate the write operation and the file offset to the secondary volume. For example at step replication module may as part of primary system in replicate write operation and file offset to secondary volume e.g. to file that is a replica of file .

Replication module may replicate the write operation in any suitable manner. In some examples replication module may replicate the write operation by providing the write operation e.g. with information identifying the source file and the file offset to a volume level replication system to replicate. As will be explained in greater detail below at the secondary site one or more of the systems described herein may convert the replicated write operation to a volume based operation for the volume level replication system to handle at the secondary site.

As mentioned earlier in some examples one or more of the systems described herein may have identified an additional write operation performed on the primary volume that does not apply to the source file or any other file within the selection of files to replicate . In these examples replication module may prevent replication of the additional write operation to the secondary volume based on determining that the additional write operation does not apply to the source file.

As illustrated in at step one or more of the systems described herein may identify a target file on a secondary volume as a replicated version of a source file on a primary volume. For example at step target identification module may as part of secondary system in identify file on secondary volume as a replicated version of file on primary volume .

Target identification module may identify the target file as the replicated version of the source file in any suitable manner. For example target identification module may identify a file name of the target file matching and or corresponding to a file name of the source file. Additionally or alternatively target identification module may look up the target file based on an identifier of the source file.

In some examples the secondary volume may be mounted to allow read operations and write operations for replication. For example target identification module may mount the secondary volume as read write. Target identification module may configure the secondary volume to be writable for replication operations e.g. including replicated file metadata such as file size information . In at least one example the target file may be opened in exclusive mode and or non cached mode. For example target identification module may open the target file in exclusive mode and non cached mode e.g. to avoid data inconsistency and or adversely affecting cache coherency .

Returning to at step one or more of the systems described herein may receive a replicated write operation to apply to the target file on the secondary volume. For example at step target receiving module may as part of secondary system in receive a replicated write operation to apply to file on secondary volume .

Target receiving module may receive the replicated write operation in any suitable manner. In some examples target receiving module may receive the replicated write operation through and or as a part of a volume replication agent. As will be explained in greater detail below in some examples the replicated write operation may not be performed via a file system but instead be performed as a volume level operation e.g. via a volume level replication agent .

Returning to at step one or more of the systems described herein may identify extent information that indicates a volume location of the target file within the secondary volume. For example at step target location module may as part of secondary system in identify extent information that indicates a volume location of file within secondary volume .

Target location module may identify the extent information for the target file in any suitable manner. For example target location module may identify the extent information of the target file by receiving the extent information from a file system driver. Additionally or alternatively target location module may identify the extent information as a part of a file system filter driver.

As mentioned earlier one or more of the systems described herein may transmit extent information for the source file including e.g. any changes to the extent information of the source file from the primary site to the secondary site. Accordingly target location module may receive new extent information that indicates a change in a size of the source file on the primary volume. Target location module may then modify the target file on the secondary volume to match the source file on the primary volume based on the new extent information. For example target location module may use a file system application programming interface to update metadata for the target file e.g. to grow or truncate the target file .

Returning to at step one or more of the systems described herein may identify a file offset of the replicated write operation. For example at step target offset module may as part of secondary system in identify a file offset of write operation .

Target offset module may identify the file offset of the replicated write operation in any suitable manner. For example target offset module may identify the file offset of the replicated write operation within the replicated write operation.

Returning to at step one or more of the systems described herein may convert the file offset to a volume offset of the replicated write operation within the secondary volume using the extent information. For example at step target conversion module may as part of secondary system in convert file offset to a volume offset of write operation within secondary volume using extent information .

Target conversion module may convert the file offset to the volume offset using the extent information in any suitable manner. For example conversion module may add the file offset to a volume offset of the extent of the target file. Additionally or alternatively where the file includes multiple extents conversion module may subtract the size of each extent from the file offset until reaching an extent larger than the remaining file offset and add the remaining file offset to the volume offset of the extent.

Returning to at step one or more of the systems described herein may apply the replicated write operation on the secondary volume using the volume offset. For example at step target application module may as part of secondary system in apply write operation on secondary volume using volume offset .

Target application module may apply the write operation using the volume offset in any suitable manner. For example target application module may apply the write operation at the volume level e.g. instead of via a file system operation . In some examples target application module may apply the write operation by providing the write operation to a volume level replicator as input.

In some examples the secondary volume may be configured as a failover volume and the primary volume may fail. For example illustrates an exemplary system for file level replication. As shown in exemplary system may include a primary system a secondary system and a tertiary system in communication via a network . Using as an example primary system may be configured to replicate a selection of files from a primary volume e.g. including a file to a secondary volume e.g. to a replica file . In this example a volume manager driver may intercept a write operation destined for file to prepare write operation for replication to file . Volume manager driver may modify write operation to include file level information and then allow volume replication agent to replicate write operation to secondary system as a replicated write operation . A volume manager replication agent may intercept replicated write operation based on replicated write operation applying to file . Volume manager replication agent may then convert the file level information in replicated write operation to a volume location within secondary volume e.g. based on extent information for replica file and forward the converted replicated write operation to a volume manager driver to apply directly to secondary volume e.g. instead of via a file system . However in one example primary system and or primary volume may fail. In this example a failover module may configure secondary system to act as a new primary system including reconfiguring volume manager replication agent on secondary system to perform the functions previously performed by volume manager replication agent on primary system e.g. intercepting write operations and preparing file level information to forward to a new secondary system . Tertiary system may then act as a new secondary system receiving replications from secondary system now acting as a primary system.

As explained above by filtering file operations for specified files on primary volumes converting these operations to specify file offsets e.g. from volume offsets and replicating the converted operations to secondary volumes the system and methods described herein may achieve file level replication using existing volume level replication technologies. For example existing volume level replication systems may be adapted with minimal change for file level replication thereby allowing file level replication with volume level replication systems that may provide features robustness performance quality of service and or ease of use that may be unavailable with some traditional dedicated file level replication systems.

Computing system broadly represents any single or multi processor computing device or system capable of executing computer readable instructions. Examples of computing system include without limitation workstations laptops client side terminals servers distributed computing systems handheld devices or any other computing system or device. In its most basic configuration computing system may include at least one processor and a system memory .

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation random access memory RAM read only memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an ISA PCI PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure .

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation SCSI host adapters USB host adapters IEEE 1394 host adapters SATA and eSATA host adapters ATA and PATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a solid state drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable storage medium. The phrase computer readable storage medium generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable storage media include without limitation transmission type media such as carrier waves and non transitory type media such as magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. CD or DVD ROMs electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable storage medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable storage medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an application specific integrated circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Client systems and generally represent any type or form of computing device or system such as exemplary computing system in . Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a wide area network WAN a local area network LAN a personal area network PAN or the Internet. In one example client systems and or and or servers and or may include all or a portion of system from .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent network attached storage NAS devices configured to communicate with servers and using various protocols such as NFS SMB or CIFS.

Servers and may also be connected to a storage area network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network .

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for file level replication.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

In some examples all or a portion of exemplary system in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

In various embodiments all or a portion of exemplary system in may facilitate multi tenancy within a cloud based computing environment. In other words the software modules described herein may configure a computing system e.g. a server to facilitate multi tenancy for one or more of the functions described herein. For example one or more of the software modules described herein may program a server to enable two or more clients e.g. customers to share an application that is running on the server. A server programmed in this manner may share an application operating system processing system and or storage system among multiple customers i.e. tenants . One or more of the modules described herein may also partition data and or configuration information of a multi tenant application for each customer such that one customer cannot access data and or configuration information of another customer.

According to various embodiments all or a portion of exemplary system in may be implemented within a virtual environment. For example modules and or data described herein may reside and or execute within a virtual machine. As used herein the phrase virtual machine generally refers to any operating system environment that is abstracted from computing hardware by a virtual machine manager e.g. a hypervisor . Additionally or alternatively the modules and or data described herein may reside and or execute within a virtualization layer. As used herein the phrase virtualization layer generally refers to any data layer and or application layer that overlays and or is abstracted from an operating system environment. A virtualization layer may be managed by a software virtualization solution e.g. a file system filter that presents the virtualization layer as though it were part of an underlying base operating system. For example a software virtualization solution may redirect calls that are initially directed to locations within a base file system and or registry to locations within a virtualization layer.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable storage media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules recited herein may receive a volume level write location to be transformed transform the write location to a file level write location output a result of the transformation to a secondary system use the result of the transformation to replicate a write operation to a secondary volume and store the result of the write operation to the secondary volume. Additionally or alternatively one or more of the modules recited herein may transform a processor volatile memory non volatile memory and or any other portion of a physical computing device from one form to another by executing on the computing device storing data on the computing device and or otherwise interacting with the computing device.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of. In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

