---

title: Graphics hardware mode controls
abstract: In one embodiment, a system controls a duty cycle of a processor (e.g. a graphics processing unit (GPU)) to manage power. The GPU may include a snoop indicator that may control whether or not the GPU captures and/or responds to communications from another processor (e.g. a central processing unit (CPU) that executes a driver associate with the GPU). A snooze indicator may control whether or not the GPU is automatically repowered at the start of the next frame, or is repowered only if the communication indicating additional work has been received. In an embodiment, the GPU mode controls discussed above may permit the GPU firmware executed with the GPU itself to control duty cycle power down, independent of the driver executing on the CPU.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09390461&OS=09390461&RS=09390461
owner: Apple Inc.
number: 09390461
owner_city: Cupertino
owner_country: US
publication_date: 20120508
---
This invention is related to power management in integrated circuits and systems employing integrated circuits.

As the number of transistors included on an integrated circuit chip continues to increase power management in the integrated circuits continues to increase in importance. Power management can be critical to integrated circuits that are included in mobile devices such as personal digital assistants PDAs cell phones smart phones laptop computers net top computers etc. These mobile devices often rely on battery power and reducing power consumption in the integrated circuits can increase the life of the battery. Additionally reducing power consumption can reduce the heat generated by the integrated circuit which can reduce cooling requirements in the device that includes the integrated circuit whether or not it is relying on battery power .

Clock gating is often used to reduce dynamic power consumption in an integrated circuit disabling the clock to idle circuitry and thus preventing switching in the idle circuitry. Additionally some integrated circuits have implemented power gating to reduce static power consumption e.g. consumption due to leakage currents . With power gating the power to ground path of the idle circuitry is interrupted reducing the leakage current to near zero.

Power gating can be an effective power conservation mechanism. On the other hand power gating reduces performance because the power gated circuitry cannot be used until power is restored and the circuitry is initialized for use. The tradeoff between performance especially perceived performance from the user perspective and power conservation is complex and difficult to manage.

In one embodiment a system includes a power management controller that controls a duty cycle of a processor to manage power. The duty cycle may be the amount of time that the processor is powered on as a percentage of the total time to complete a task. By frequently powering up and powering down the processor during a period of time the power consumption of the processor may be controlled while providing the perception that the processor is continuously available. For example the processor may be a graphics processing unit GPU and the period of time over which the duty cycle is managed may be a frame to be displayed on the display screen viewed by a user of the system.

Additionally the processor may support mode controls that may permit additional power savings in some embodiments. For example in an embodiment the processor may be a GPU. The GPU may be powered down based on the duty cycle during a given frame time and the hardware may support a counter to ensure that the desired off time is met before the GPU is powered back up in an embodiment. The GPU may include a first mode control e.g. a snoop indicator that controls hardware within the GPU that remains powered while the GPU main processing units are powered down. More particularly the snoop indicator may control whether or not the GPU captures and or responds to communications from another processor e.g. a central processing unit CPU that executes a driver associated with the GPU while the GPU main processing units are powered down. Particularly a communication from the CPU indicating additional work has been queued for the GPU may be captured and or responded to. A second mode control e.g. a snooze indicator may control whether or not the GPU is automatically repowered at the start of the next frame or is repowered only if the communication indicating additional work has been received.

In an embodiment the GPU mode controls discussed above may permit the GPU firmware executed with the GPU itself to control duty cycle power down independent of the driver executing on the CPU. That is the driver may not be aware of the power down by the GPU. The localization of the duty cycle control to the GPU firmware may reduce software complexity in some embodiments.

While the invention is susceptible to various modifications and alternative forms specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood however that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to.

Various units circuits or other components may be described as configured to perform a task or tasks. In such contexts configured to is a broad recitation of structure generally meaning having circuitry that performs the task or tasks during operation. As such the unit circuit component can be configured to perform the task even when the unit circuit component is not currently powered on because it includes the circuitry that implements the task. In general the circuitry that forms the structure corresponding to the task may include hardware circuits and or memory. The memory may store program instructions that are executable to implement the operation. The memory can include volatile memory such as static or dynamic random access memory. Additionally or in the alternative the memory may include nonvolatile memory such as optical or magnetic disk storage flash memory programmable read only memories etc. Similarly various units circuits components may be described as performing a task or tasks for convenience in the description. Such descriptions should be interpreted as including the phrase configured to. Reciting a unit circuit component that is configured to perform one or more tasks is expressly intended not to invoke 35 U.S.C. 112 paragraph six interpretation for that unit circuit component.

In one embodiment a GPU power management controller described below may be configured to manage the duty cycle of a processor to control its power consumption. The GPU power management controller may be configured to permit the processor to temporarily exceed a power budget for the processor as long as the average power consumed remains within budget. The GPU power management controller may implement a negative feedback loop based on the actual power consumed and the target power and may use the error between the actual power and target power to control the duty cycle. The error in the case that the actual power is lower than the target power may be used for bursts of high power consumption when the workload of the GPU increases.

Additionally the GPU power management controller may include graphics power controller hardware that may be programmed with a variety of mode controls. The mode controls may control the wake up power up behavior of the GPU in response to powering down for duty cycle control. For example if there is no additional work to be performed at the time that the GPU is powered down the mode controls may be programmed to prevent power up until the GPU driver executing on the CPU transmits a kick command indicating that there is new work for the GPU to perform. If there is additional work to perform at the time of power down the mode controls may be programmed to cause power up at the end of the duty cycle or frame time. Another mode control may be used to control whether or not the graphics power controller hardware which may remain powered while other parts of the GPU are powered down for duty cycle control is to capture and or respond to communications from the GPU driver. Particularly the graphics power controller hardware may be configured to capture respond to kick commands.

Some of the embodiments below use a GPU as an example of the processor for which the power management techniques described herein are used. However other embodiments may implement the techniques with any processor e.g. a central processing unit CPU other special purpose processors such as input output processors IOPs digital signal processors DSPs embedded processors microcontrollers etc. . Still further other embodiments may implement the power management to control fixed function circuitry.

The PMU is configured to generate voltage requests to the power supply which is configured to supply the requested voltages on one or more voltage inputs to the IC . More particularly the PMU may be configured to transmit a request for a desired voltage magnitude including a magnitude of zero when the corresponding circuitry is to be powered down in some embodiments . The number of independent voltage inputs supported by the IC may vary in various embodiments. In the illustrated embodiment the Vinput is supported for the GPU along with a Vinput for the CPU and a Vinput for the rest of the integrated circuit . Each voltage input may be provided to multiple input pins on the integrated circuit to support enough current flow and power supply voltage stability to the supplied circuitry. Other embodiments may power the CPU with a separate supply but the GPU may receive the Vsupply. Still other embodiments may include other non CPU voltage supplies besides the Vand Vinputs.

The supply voltage to power gated circuits such as the GPU may be controlled via voltage requests from the PMU but may also be controlled via power gate controls issued internally by the PMU e.g. the Power Gate control signals shown in . Gating the power internally may be performed more quickly than issuing voltage requests to the power supply and powering up may be performed more quickly as well . Accordingly voltage requests to the power supply may be used to vary the magnitude of the supply voltage to adjust an operating point of the GPU and the power gating during times that the GPU is sleeping or off may be controlled internal to the IC .

As mentioned above the GPU PMC may implement a negative feedback loop to control power consumption in the GPU . The GPU PMC may be configured to adjust the duty cycle of the GPU responsive to the error between a target power and the actual power. Generally the duty cycle may be viewed as a limit to the percentage of time that the GPU is on not power gated in a given period of time. The percentage of time that the GPU is actually on in a given period of time may be the utilization. For example the duty cycle and utilization may be measured over a frame time where a frame time is the period of time elapsing for the display of one frame on a display device such as monitor a touch screen display etc. Viewed in another way the utilization may be the ratio of the GPU s powered up time to an overall time for the display of multiple frames. In other embodiments that control other processors or fixed function circuitry the utilization may similarly be defined as the on time of the controlled circuitry to the total time.

The target power may be determined in a variety of fashions. For example the target power may be programmed in a register in the GPU PMC . Alternatively the target power may be based on the operating temperature in the system e.g. as measured by the temperature sensors A B . In yet another example for a portable system that operates on a limited power supply such as a battery the target power may be based on the remaining battery life. Combinations of the above factors and or other factors may be used to determine the target power.

The actual power consumed may be measured e.g. by the power measurement circuit or by a similar circuit internal to the IC . Alternatively the actual power may be estimated as a function of the activity in the GPU and a profile of the power consumption of various parts of the GPU . The profile may be based on simulation of the GPU design and or based on measurements of the GPU in operation.

The PMU the GPU PMC and or various components thereof such as shown in in an embodiment may be implemented as any combination of hardware circuitry and or instructions executed on one or more processors such as the CPU and or the GPU . The instructions may be stored on a computer accessible storage medium such as that shown in . Accordingly a power management unit power control unit or power management controller may be any combination of hardware and or processor execution of software stored on computer accessible storage media in various embodiments.

The power measurement circuit may e.g. be configured to measure the current flow on the Vsupply. Based on the requested voltage the power consumed in the GPU may be determined either by the power measurement circuit or the PMU . The power measurement circuit may e.g. be readable by software to determine the current power measurement or may supply the current power measurement on an input to the IC .

The clock generator may supply clocks to the CPU CPU Clk in the GPU GPU Clk in the PMU and any other circuitry in the IC . The clock generator may include any clock generation circuitry e.g. one or more phase lock loops PLLs digital delay lock loops DLLs clock dividers etc. . The clock generator may be programmed by the PMU to set the desired clock frequencies for the CPU clock the GPU clock and other clocks.

Together the supply voltage and clock frequency of a circuit in the IC may be referred to as an operating point for the circuit. The operating point may directly affect the power consumed in the circuit since the dynamic power is proportional to the frequency and to the square of the voltage. Accordingly the reduced power consumption in the circuit when both the frequency and the voltage are reduced may be a cubic effect. However operating point adjustments which change only the frequency or only the voltage may be made also as long as the circuitry operates correctly at the selected frequency with the selected voltage .

The CPU may be any type of processor and may implement an instruction set architecture. Particularly the CPU may implement any general purpose instruction set architecture. The CPU may have any microarchitecture including in order or out of order speculative or non speculative scalar or superscalar pipelined multithreaded etc.

The GPU may implement any graphics application programming interface API architecture. The graphics API architecture may define an abstract interface that is specially purposed to accelerate graphics operations. The GPU may further support various languages for general purpose computation e.g. OpenCL etc.

The temperature sensors A B may be any type of temperature sensing circuitry. When more than one temperature sensor is implemented the temperature sensors may be physically distributed over the surface of the IC . In a discrete implementation the temperature sensors may be physically distributed over a circuit board to which the discrete components are attached. In some embodiments a combination of integrated sensors within the IC and external discrete sensors may be used.

It is noted that while the illustrated embodiment includes components integrated onto an IC other embodiments may include two or more ICs and any level of integration or discrete components.

Turning next to a block diagram of one embodiment of the PMU and the GPU power management controller is shown in greater detail. The GPU is shown as well. In the illustrated embodiment the GPU PMC may include a summator which may receive the actual GPU power from a GPU power measurement unit through a low pass filter LPF in the illustrated embodiment . The output of the summator may be the difference between the actual GPU power and a target GPU power as illustrated by the plus and minus signs on the inputs and may be an error in the power tracking. The difference may be input to a GPU power tracking controller . In the illustrated embodiment the GPU power tracking controller may include a proportional controller PControl an integral controller IControl a limiter a summator and a Max block . Thus in the illustrated embodiment the GPU power tracking controller may be a proportional integral PI controller. More particularly in the illustrated embodiment the difference output from the summator may be input to the PControl and the IControl . The output of the IControl may be passed through a limiter to a summator which also receives the output of the PControl the output of which may passed through a Max block to ensure that it is greater than zero. The output of the Max block may be added to an application specified off time in the summator to produce a desired duty cycle or off time . A duty cycle power controller may receive the duty cycle and may be configured to control the on off state of the GPU for the frame time responsive to the duty cycle. The duty cycle power controller may communicate with a GPU control unit in the PMU which may power gate the GPU and or change the GPU to a different operating point in response to duty cycle control. The available operating points may be stored in a GPU state table . The GPU control unit in the PMU may include hardware to control the power up power down state of the GPU and the duty cycle power controller may be configured to communicate with the PMU hardware to power up power down the GPU . It is noted that the GPU PMC may include hardware components that may be part of the GPU . Some of the GPU components may remain powered up when the GPU is powered down for duty cycle control.

The target GPU power input to the GPU PMC may be determined in any desired fashion. As mentioned previously the target power may be programmed into a register in the GPU . The target power may be determined responsive to the temperature measurement from the temperature sensors A B for example. The measured temperature may be compared to a target temperature. The resulting temperature difference may be provided to a temperature control unit which may output a target GPU power. In an embodiment the temperature comparison and target GPU power generation may be implemented in a GPU driver that executes on the CPU during use. Other embodiments may determine the target power in other fashions e.g. based on battery life whether or not the system is plugged into a power outlet etc.

The summator may be the beginning of the negative feedback loop that is configured to track the power error and is configured to attempt to minimize the error of the actual power exceeding the target power. In this embodiment the actual power may be less than the target power by any amount. Other embodiments may also limit the difference between the actual power and the target power below a lower threshold for example to improve performance. In the illustrated embodiment a proportional integral PI control may be implemented in the GPU power tracking controller . The proportional component of the control may be configured to react to the current error while the integral component may be configured to react to the error integrated over time. More particularly the integral component may be configured to eliminate the steady state error and control the rate at which the target GPU power is reached. The amount of integral control may be limited through the limiter in some embodiments as desired. Generally the gains of both the proportional controller and integral controller may be programmable as may the limiter .

The summator may be configured to sum the outputs of the proportional controller and the limiter generating a value that may be inversely proportional to the duty cycle. The block may ensure that the output is positive effectively ignoring the case where the actual power is less than the target power. The duty cycle power controller may convert the value to the duty cycle and may control power down of the GPU in response or the portion of the GPU that is powered down when duty cycle control is active which may exclude some hardware that is part of the GPU PMC itself . In the illustrated embodiment the duty cycle power controller may communicate the power down request to the hardware in the GPU control unit to power down the GPU while keeping the GPU PMC hardware powered up.

In some embodiments there may also be a GPU idle state controlled by the GPU driver executing on the CPU . This state may power down the entire GPU including the duty cycle power control hardware. The duty cycle power down power up cycles may be implemented independent of the GPU driver. That is the GPU driver may not be aware that the GPU has been powered down for the remainder of the frame time due to duty cycle control.

In the illustrated embodiment the operation of the feedback loop may be exposed to applications. Some applications may attempt to control GPU power consumption at a higher level of abstraction and the applications efforts may interfere with the operation of the GPU PMC . By providing exposure to the application the GPU PMC may permit the application to have an effect on loop operation and thus the application developer may no longer include application level efforts to control GPU power. In other embodiments application input may not be provided and the summator may be eliminated. In the illustrated embodiment the application may specify an off time for the GPU during a given frame time.

While PI control is shown in for the GPU power tracking controller other embodiments may implement other control units such as including derivative control PID or any other subcombination of proportional integral and derivative control. Still further any other control design may be used e.g. table based .

The GPU control unit may be configured to adjust the operating point of the GPU based on the utilization of the GPU . The utilization of the GPU may be viewed as the percentage of a frame time that the GPU is powered up and operating. The duty cycle indicated by the duty cycle power controller may serve as a limit to the utilization in order to meet thermal requirements battery life requirements etc. However the actual utilization may be smaller e.g. if the GPU is performing relatively simple operations each frame time the actual utilization may be lower than the duty cycle . If the utilization is lower than the duty cycle it may still be desirable to reduce the operating point of the GPU to reduce power consumption increasing the utilization. The duty cycle may vary between 100 no throttling by the duty cycle power controller and a lower limit within the range of duty cycles. For example the lower limit may be about 70 of the frame time. If the utilization is lower than a threshold amount the GPU control unit may reduce the operating point to a lower power state e.g. lower voltage and or frequency to lengthen the utilization but reduce the power consumption. That is if the utilization is low then it appears to the control unit that the GPU is finishing it s tasks for the frame rapidly and is sleeping for long periods of time. The GPU may therefore operate at a reduced operating point and may run for longer periods. Similarly if the utilization is high then more performance may be needed from the GPU . Accordingly the GPU control unit may increase the operating point up to the limit set by the duty cycle controller.

In the GPU control unit is shown coupled to the GPU . The GPU control unit may actually be coupled to the clock generator to change GPU clock frequency and the power supply to request a different supply voltage magnitude . Additionally the GPU control unit may control the power gating internal to the IC . The GPU control unit may be configured to record the current operating point of the GPU and when the GPU control unit determines that the operating point is to be changed the GPU control unit may be configured to read the new operating point from the GPU state table . That is the GPU state table may store the permissible operating points for the GPU and the GPU control unit may be configured to select the desired operating point from the operating points listed in the GPU state table .

The GPU power measurement unit may be configured to measure the GPU power consumption. In some embodiments the GPU power measurement unit may receive data from the power measurement circuit to measure the GPU power. In other embodiments the GPU power measurement unit may estimate the power consumption based on the activity in the GPU . For example the GPU power measurement unit may be configured to read a variety of performance counters in the GPU . The values in the performance counters along with factors derived from simulations of the GPU or direct measurements on an implementation of the GPU may be used to estimate the power consumption. The factors may be programmable in the GPU power measurement unit fixed in hardware or any combination of programmable and fixed factors.

Turning next to a block diagram of one embodiment of the GPU is shown. In the illustrated embodiment the GPU includes a fabric interface unit a processor a GPU firmware computer accessible storage medium and a set of GPU execution engines A N. The GPU execution engines A N and the processor are coupled to the fabric interface unit . The processor is also coupled to the GPU firmware computer accessible storage medium . The fabric interface unit is coupled to a fabric interface arrow to communicate with other portions of the IC such as the CPU the IC PMU etc.

The fabric interface unit is configured to receive transactions from the fabric interface for the GPU . The transactions may include commands from the CPU such as the kick command indicating that there is a new task or tasks for the GPU to perform. The transactions may also include responses to read requests transmitted by the GPU to read the task descriptors from memory and or to read data to be operated upon by the GPU . The fabric interface unit may also be configured to transmit the read requests as well as write requests to write results generated by the GPU to memory. More particularly the transaction queue may store received transactions to be processed within the GPU .

The fabric interface unit may also include a graphics power controller coupled to one or more control registers . The graphics power controller may be hardware that implements a portion of the duty cycle power controller . The remainder of the duty cycle power controller may be implemented in the firmware stored in the GPU firmware computer accessible storage medium and executed in the processor . The graphics power controller may monitor the off portion of the duty cycle determining when the duty cycle ends and may control when the GPU is powered up again responsive to mode controls stored in the registers . The mode controls may be written by the firmware executed by the processor for example.

In the illustrated embodiment the mode controls include a count Cnt a snoop indicator Snp and a snooze indicator Snz . The count may be generated responsive to the duty cycle and may be a measure of the amount of off time for the GPU . The count may be measured in clock cycles of the GPU for example and may be the number of clock cycles in the off time calculated by the GPU power tracking controller . Thus the count may be modified on a frame time by frame time basis as the duty cycle is determined. In other embodiments the count may be measured in terms of any clock that may be available to the graphics power controller during times that the GPU is powered down. The graphics power controller may update the count and monitor the count for expiration to determine that the duty cycle frame time has ended.

The snoop indicator may control whether or not the graphics power controller is to detect record kick commands. As mentioned previously kick commands may be used by the GPU driver executing on the CPU to communicate that work is available for the GPU. If the snoop indicator is in a first state the graphics power controller may record the commands. In a second state the graphics power controller may not record the commands. The first state may be the set state of a bit and the second state may be the clear state in an embodiment. Alternatively the opposite meanings may be assigned to the set clear states or multiple bit indications may be used. For example the snoop indicator may include encodings to record the commands as well as encodings indicating whether or not an address communicated with the commands is to be recorded e.g. an address at which a descriptor describing the work is stored . The kick commands may be recorded e.g. in the kick indicator in the registers . The kick indicator may be a bit that may be set to indicate that a command has been received and clear to indicate that no command has received or vice versa. Alternatively the kick indicator may be a count indicating the number of commands.

In some embodiments there may be a response expected from the GPU for a kick command. The graphics power controller may be configured to generate the response and the fabric interface unit maybe configured to transmit the response on the communication fabric.

The snooze indicator may control whether or not the graphics power controller is to power up or wake the GPU at the expiration of the count e.g. the end of the duty cycle frame time if there have been no kick commands detected during the off time. For example if there was still work remaining when the GPU was powered down the snooze indicator may be set for automatic wake. If there was no work remaining when the GPU was powered down the snooze indicator may be set for wake only if kick command s have been detected. In an embodiment the snooze indicator may be a bit indicating wake if kick when set or automatic wake when clear. Other embodiments may use the opposite meanings of the set and clear states or multi bit indicators.

In an embodiment the fabric interface unit may remain powered while the remainder of the GPU is powered down for duty cycle power down events. Thus the processor and the GPU execution engines A N may be powered down. The combination of the GPU firmware and the graphics power controller may implement the GPU PMC of .

The processor may be configured to execute the firmware from the GPU firmware computer accessible storage medium . The computer accessible storage medium may be any type of storage medium including the types described below with respect to . Particularly in an embodiment the computer accessible storage medium may be any type of non volatile memory including Flash memory various programmable read only memories etc. Volatile memory e.g. random access memory may also be used if the firmware is loaded into the memory at the time the system is booted and the memory is powered during duty cycle power down events. In another embodiment the firmware may be executed by the GPU execution engines A N.

In an embodiment the processor may be a microcontroller. A microcontroller may be a processor that also includes specific interfaces to more easily embed within a device such as the GPU . For example in the embodiment of the microcontroller may include a non volatile memory interface e.g. a Flash memory interface and an interface to the fabric interface unit . CPUs by way of contrast typically include a general bus interface rather than specific interfaces for a specific implementation.

The GPU execution engines A N may be execution hardware configured to perform various graphics processing operations. For example the execution engines A N may include unified shaders vertex and pixel pixel shaders vertex shaders texture processing units rasterizers etc. The GPU execution engines A N may also execute compute programs e.g. compute kernels . There also may be various caches not shown in which may be powered down when the GPU execution engines A N are powered down.

Turning next to a block diagram illustrating communication between the GPU driver executed by the CPU and the GPU firmware executed by the processor is shown for one embodiment. The GPU driver may generate one or more GPU work descriptors . The work descriptors may be data structures in memory and may describe the tasks to be performed by the GPU . For example the data structures may include pointers to objects in memory that are to be rendered into a frame buffer for display on a display screen. The GPU driver may complete one or more work descriptors and may generate a kick command to the GPU to indicate that the work descriptors are available. In response to the kick command the GPU firmware may read the GPU work descriptors from memory and may cause the GPU to perform the desired processing. In some embodiments the kick command may include the address of the work descriptors . In other embodiments the work descriptors may be stored at a predefined address that the GPU firmware may read. In other embodiments the work descriptors may be encoded as part of the kick command itself.

The memory storing the GPU work descriptors and the GPU driver may be internal or external to the IC in various embodiments. In one implementation the memory may be external to the IC e.g. one or more dynamic random access memories DRAMs and there may be an memory controller internal or external to the IC to communicate with the external memory on behalf of the GPU the CPU and any other devices components included in the IC that use memory.

Turning now to a flowchart is shown illustrating operation of one embodiment of the GPU firmware executed on the processor to power down the GPU for duty cycle control independent of the GPU driver . While the blocks are shown in a particular order for ease of understanding other orders may be used. The GPU firmware may include instructions which when executed by the processor may cause the GPU to implement the operation shown in .

The GPU firmware may calculate the count based on the duty cycle determined by the GPU power tracking controller which may also be implemented in the GPU firmware in one embodiment the frame time and the frequency of the clock used to update the count. The GPU firmware may write the control registers with the count and may set the snoop indicator to cause the graphics power controller to capture record the kick commands during the power down time block .

If there is still work pending for the GPU to complete e.g. one or more work descriptors include a task or tasks which remain to be completed or have not yet been started decision block yes leg the GPU firmware may clear the snooze indicator block . In this embodiment the snooze indicator being clear indicates that the GPU is to wake up automatically at the expiration of the count. The GPU firmware may perform a local power down block . The local power down may be performed without communication to the GPU driver . For example the local power down may include communicating with the IC PMU hardware to power gate the GPU except for the fabric interface unit .

On the other hand if there is no work pending for the GPU to complete decision block no leg the GPU firmware may set the snooze indicator block . In this embodiment the snooze indicator being set may indicate that the GPU is to wake up at the expiration of the count only if one or more kick commands have been detected during the power down time indicating that new work has been prepared for the GPU . The GPU firmware may perform the local power down block .

If the count is not expired decision no leg the graphics power controller may decrement the count block . The count may expire at zero in this embodiment. Other embodiments may increment a counter and compare the counter to the count value to detect an expired count. In some embodiments the GPU firmware may implement a power down state in response to completing all outstanding work by initializing the count to zero and setting the snooze indication. Such a configuration will cause the GPU to remain powered down until a kick command is received indicating that new work is available.

If the count is expired decision block yes leg and the snooze indicator is clear decision block no leg the graphics power controller may be configured to initiate power up of the GPU block . Initiating power up may include requesting a power up state from the IC PMU for the portion of the GPU that is powered down e.g. processor and the GPU execution engines A N in . If the count is expired decision block yes leg the snooze indicator is set decision block yes leg and at least one kick command has been recorded e.g. kick indicator is set decision block yes leg the graphics power controller may also be configured to initiate power up of the GPU block . If the count is expired decision block yes leg the snooze indicator is set decision block yes leg and no kick commands have been recorded e.g. kick indicator is clear decision block no leg the graphics power controller may continue to await a kick command before initiating power up.

In parallel the graphics power controller may continue to monitor for the kick command decision block . If a kick command is detected and the snoop bit is set decision block yes leg the graphics power controller may record the kick command e.g. setting the kick indicator block . In some embodiments the graphics power controller may also record an address provided by the kick command or may record the address provided by the initial kick command if additional commands are received . In some embodiments the graphics power controller may be configured to generate a response to the kick command to be transmitted by the fabric interface unit on the communication fabric.

Turning next to a flowchart is shown illustrating operation of one embodiment of the GPU firmware in response to the GPU powering up. While the blocks are shown in a particular order for ease of understanding other orders may be used. The GPU firmware may include instructions which when executed by the processor may cause the GPU to implement the operation shown in .

The GPU firmware may initialize the GPU block . The required initialization may be implementation dependent but may generally include resetting the GPU execution engines A N preparing caches and other memories for use programming configurable settings etc. The GPU firmware may also set the snoop indicator to zero so that the graphics power controller ceases recording responding to kick commands and may set the kick indicator to zero as well block .

Turning next to a flowchart is shown illustrating operation of one embodiment of the duty cycle controller e.g. the combination of the summators and the PControl the IControl the limiter block and the duty cycle power controller in . While the blocks are shown in a particular order for ease of understanding any order may be used.

If the actual power exceeds the target power decision block yes leg the duty cycle controller may decrease the duty cycle i.e. increase the off time block . The determination of the actual power exceeding the target power may be more than a simple mathematical comparison on the current actual power and the target power. For example the low pass filter may have captured the lack of power consumption during a time such as the area in and the actual power may be able to exceed the target power for a period of time to use the unused power from the previous low power consumption.

In some embodiments if the target power is greater than the actual power the duty cycle controller may not limit the utilization by controlling the duty cycle e.g. the duty cycle may be increased up to 100 or the off time may be zero decision block yes leg and block .

Turning next to a flowchart is shown illustrating operation of one embodiment of the GPU control unit . While the blocks are shown in a particular order for ease of understanding any order may be used. The operation of may be repeated continuously during use to update the power state of the GPU as it s workload changes over time.

If the utilization of the GPU is less than a low threshold e.g. 70 in one example decision block yes leg the GPU control unit may transition the GPU to a lower power state block . If the utilization of the GPU is greater than a high threshold e.g. 90 in one example and the duty cycle is 100 e.g. no throttling due to thermal limits decision block yes leg the GPU control unit may transition the GPU to a higher power state block .

Turning now to a block diagram of a computer accessible storage medium is shown. Generally speaking a computer accessible storage medium may include any storage media accessible by a computer during use to provide instructions and or data to the computer. For example a computer accessible storage medium may include storage media such as magnetic or optical media e.g. disk fixed or removable tape CD ROM DVD ROM CD R CD RW DVD R DVD RW or Blu Ray. Storage media may further include volatile or non volatile memory media such as RAM e.g. synchronous dynamic RAM SDRAM Rambus DRAM RDRAM static RAM SRAM etc. ROM or Flash memory. Storage media may also include non volatile memory e.g. Flash memory accessible via a peripheral interface such as the Universal Serial Bus USB interface a flash memory interface FMI a serial peripheral interface SPI etc. Storage media may include microelectromechanical systems MEMS as well as storage media accessible via a communication medium such as a network and or a wireless link.

The computer accessible storage medium in may store an operating system OS the GPU driver and the GPU firmware . Each of the operating system the GPU driver and the GPU firmware may include instructions which when executed in the system may implement the operation described above. In an embodiment the OS and the GPU driver may be executed on the CPU and the GPU firmware may be executed on the GPU e.g. on the processor . A carrier medium may include computer accessible storage media as well as transmission media such as wired or wireless transmission.

Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.

