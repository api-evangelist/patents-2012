---

title: Dynamic consolidation of virtual machines
abstract: A method and apparatus are disclosed of monitoring a number of virtual machines operating in an enterprise network. One example method of operation may include identifying a number of virtual machines currently operating in an enterprise network and determining performance metrics for each of the virtual machines. The method may also include identifying at least one candidate virtual machine from the virtual machines to optimize its active application load and modifying the candidate virtual machine to change its active application load.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09043785&OS=09043785&RS=09043785
owner: Open Invention Network, LLC
number: 09043785
owner_city: Durham
owner_country: US
publication_date: 20120523
---
This application claims benefit to provisional application 61 488 911 entitled SYSTEM AND METHOD FOR THE DYNAMIC CONSOLIDATION OF VIRTUAL MACHINES IN AN OPERATING ENVIRONMENT filed on May 23 2011 the entire contents of which are hereby incorporated by reference.

The present invention is generally related to a dynamic virtual machine analysis and modification procedure and more particularly to an application used to monitor virtual machine activity and perform inferences used to augment the virtual machine operation to accommodate drift in the system configuration.

Currently traditional enterprise networks may include various nodes that contribute to an overall business process. The network nodes may include both physical and virtual machines. Enterprise networks may include virtual machines and physical hosts which are required to provide an allocation of resources. In the past the first wave of x86 virtualization included the consolidation of physical hosts into virtual machines VMs . As with physical hosts the manner in which the VMs operate is directly subject to the configuration that is instantiated on that machine. Traditional configuration management solutions are subject to changes or drift to a pre existing VM configuration. Dynamic enterprise network environments include varying resources and may require frequent modifications or updates to the configuration of VMs. A proactive approach to accommodating such dynamic enterprise networks may include determining virtual machine requirements by a business application flow. In response the VMs may be dynamically modified based on feedback from the observations made by a virtual management infrastructure and the utilization of an inference engine.

An example embodiment of the present invention may include a method of identifying a plurality of virtual machines currently operating in an enterprise network and determining a plurality of performance metrics for each of the plurality of virtual machines. The method may include identifying at least one candidate virtual machine from the plurality of virtual machines to optimize its active application load and modifying the at least one candidate virtual machine to change its active application load.

Another example embodiment of the present invention may include an apparatus including a processor configured to identify a plurality of virtual machines currently operating in an enterprise network and determine a plurality of performance metrics for each of the plurality of virtual machines. The processor may also be configured to identify at least one candidate virtual machine from the plurality of virtual machines to optimize its active application load and modify the at least one candidate virtual machine to change its active application load. The apparatus may also include a transmitter configured to transmit modification information to the at least one candidate virtual machine.

will be readily understood that the components of the present invention as generally described and illustrated in the figures herein may be arranged and designed in a wide variety of different configurations. Thus the following detailed description of the embodiments of a method apparatus and system as represented in the attached figures is not intended to limit the scope of the invention as claimed but is merely representative of selected embodiments of the invention.

The features structures or characteristics of the invention described throughout this specification may be combined in any suitable manner in one or more embodiments. For example the usage of the phrases example embodiments some embodiments or other similar language throughout this specification refers to the fact that a particular feature structure or characteristic described in connection with the embodiment may be included in at least one embodiment of the present invention. Thus appearances of the phrases example embodiments in some embodiments in other embodiments or other similar language throughout this specification do not necessarily all refer to the same group of embodiments and the described features structures or characteristics may be combined in any suitable manner in one or more embodiments.

In addition while the term message has been used in the description of embodiments of the present invention the invention may be applied to many types of network data such as packet frame datagram etc. For purposes of this invention the term message also includes packet frame datagram and any equivalents thereof. Furthermore while certain types of messages and signaling are depicted in exemplary embodiments of the invention the invention is not limited to a certain type of message and the invention is not limited to a certain type of signaling.

Example embodiments of the present disclosure provide a system apparatus method and or non transitory computer program product configured to dynamically consolidate virtual machines in an enterprise communication and or networking environment. Similar to the consolidation of physical machines it is also optimal to dynamically consolidate the configuration and or functionality of virtual machines VMs. One example may provide automatically determining a proactive change in one or more VM s configuration by observing corresponding applications and configuration settings of the VM.

The VM observation application according to example embodiments may be operated by a VM application that gathers information by performing signal intelligence or intelligence gathering by interception of signals based on signal interception SIGINT traffic analysis. By employing SIGINT information gathering and analysis the observing application may determine optimum virtual machine operating metric s and make corresponding changes to optimize VM operations.

Employing SIGINT functionality permits the VM observation system and corresponding application to determine the configuration mix required and further orchestrate a change in presently operating applications and settings. The observing application will first detect the connectivity between a virtual machine and a storage device via a virtual management vendor s application programming interface s APIs . The connectivity will then be monitored for a pre determined period. The virtual machine s usage and communication signaling may result in changes in state provided by the virtual management vendor s APIs in combination with the data received from within the virtual machine s OS. As a result of obtaining such VM specific information the application and or processing system will process this information using the SIGINT algorithm to determine the most optimal interaction between the VM and the corresponding virtual storage. Additional factors are considered by the process such as the speed of the storage capacity recovery from fault tolerances and other variables provided by the virtual storage combination of vendors.

The hypervisor API may provide certain basic and fundamental VM information via the API interface . Such information may include a host identifier ID a host name a host Internet protocol IP address a host media access control address MAC a host memory resource and corresponding allocation and a host storage resource and corresponding allocation. Other information may include a VM ID a VM name a VM IP address a VM MAC address a VM memory resource and utilization a VM storage resource and utilization and a VM storage resource and utilization. Other information obtained may include a VM network type resource and status.

The basic API information for console API console may include a host memory resource and corresponding allocation a host storage resource and corresponding allocation a host storage resource and corresponding allocation a host business logic assignment to one or more of a VM ID a VM name a VM IP address a VM MAC address a VM memory resource and present utilization and a VM business logic assignment etc.

The virtual machine OS API may include a machine name a machine IP address a machine MAC a present machine NETSTAT connection list a machine application list a machine performance statistics a present machine processes list a machine services list etc. The storage device API contains a device type a device bandwidth device connections a device state a device status a device ID a device IP address a device MAC address and a route.

A NETSTAT report may be generated by an operating system level application invoked by a direct command script or API call to provide the requestor with information about what applications are communicating with what other machines in an operating environment. For example the NETSTAT command is used to display the TCP IP network protocol statistics and related communication information and may be an external command available in most MICROSOFT operating systems.

Monitoring virtual machine connectivity or activity may be performed by using a network statistic application i.e. NETSTAT . For example NETSTAT may be a command line tool that displays network connections for both incoming and outgoing connections routing tables and other network interface statistics e.g. access attempts packets received packets transmitted lost packets errors etc. . NETSTAT may be operated on a Unix Unix compatible and Windows based operating systems.

A NETSTAT report provided by the VMs OS API may include a local address a foreign address a state a protocol a process ID received packets received bytes and or sent bytes. The WSDL may seek to identify certain VM information including a VM IP address an application source a destination IP address an application process list performance statistics Perfmon a standard OS configuration files list state statistics from the OS etc.

Applications required to accomplish a dynamic configuration may include a standard OS process communication monitoring program such as NETSTAT a dynamic configuration inference engine a relational database repository and a virtualization orchestration application component . The retrieved VM data received may be formatted into a tabular limited format. Each line in the record is processed by the dynamic configuration inference engine utilizing a SIGINT based frequency algorithm that devises the optimum record observed for the sampling cycle. The frequency algorithm may be configured to identify certain patterns in VM performance by measuring different types of command executions over predefined intervals e.g. how many WRITE operations are performed by a particular VM to a particular storage having a particular size and were performed successfully without error .

The participating VMs as assigned by the configuration console are queried for state performance communication application connectivity and process lists. A list is created by the inference engine to determine which VMs can continue to operate but are additionally eligible to increase their application mix mix up i.e. increase processing load increase number of applications currently being processed increase number of active connections etc . An application mix up may be any number of applications being utilized by the VM s . Example applications may include a web server application database applications business applications custom applications etc. The VMs may be identified individually and their respective application pool may be identified to determine if the amount of current resources e.g. CPU usage memory usage storage usage etc. may be further optimized lessened and or re allocated to yield a similar output. The VMs may be linked to a virtual storage for storage related applications.

The participating VMs as assigned by the configuration console are queried for state performance communication application connectivity and process lists on an ongoing basis. As a result the virtual infrastructure APIs are queried for state performance communication application connectivity and process lists. A VM that is active in the network communicating with other VM s as part of a business application process would be considered participating. VMs that are not working in concert with others would be considered a non participating VM. An active VM would be considered any VM that is utilizing resources from the hypervisor or host. An example of state of performance connectivity and process lists may include on or off for a state communicating yes no for connectivity and a result may include information such as protocol TCP local address hope www.computerhope.com telnet and state established. Another example may include protocol TCP local address hope multicity.com 90 and state close wait.

The candidate VMs are analyzed by the inference engine based on the utilization of the input they receive from the WSDL . The configuration assembly engine clones the candidate VMs utilizing the VM vendors APIs and inserts the new application mix and associated configuration settings associated with those applications . The new application mix may add and or subtract an application from the VMs present application mix up pool. The total number of applications currently being operated by a particular VM may increase or decrease on any given VM. The configuration mix may also change for any particular VM which may include the allocation of resources provided by the virtualization infrastructure such as the hypervisor orchestration component . The hypervisor APIs may list the resources to be reallocated via a list or configuration list file that is transmitted to the VM s . The configuration list file may include reallocation of any or more of memory usage RAM storage usage GBs CPU usage GHz etc. The configuration mix may actually be specified by a particular association mix of memory CPU storage used to perform a particular task or application. In other words each application currently operating on the VMs may have its own configuration mix of resources to identify and determine which application s can survive and operate nominally with a different configuration mix. The questions may then be answered whether certain VMs can operate certain applications with less resources or a reduced configuration mix. If so a reallocation of resources may be performed to release previously allocated resources on the VMs .

A copy of the newly loaded VM application profile of the VM is sent via the VM infrastructure physical device router to a physical host for testing and analysis. The router may also be coupled to a virtual network that provides communication and routing information. The VM application profile may include a configuration file that includes the names of the active applications the corresponding resource allocation of the configuration mix and other pertinent information used to identify the VM. The configuration file may only include the names of applications that are being added or subtracted from a previous configuration file deltas . The VM migration engine requests VM specific information from the WSDL and as a result the VMs are queried for state performance and or process lists to determine its viability for migration into the production environment. If the candidate VMs perform at or exceed the acceptable threshold level of migration as assigned by the dynamic configuration console then the migration engine will send the VM identification information to the orchestration component of the virtualization infrastructure. The above noted process may be iterated through multiple times until all VMs are analyzed for dynamic configuration candidates. The process is continually monitored by the dynamic configuration console .

The network connectivity may indicate that a VM may or may not have to modify its network stack if its application does not need to communicate with other machines. If the candidate VMs perform at or exceed the acceptable threshold level of migration then they still work without requiring additional resource allocation from the hypervisor. So if a VM is a candidate to have its number of applications increased decreased and other potential changes then the baseline of the VM may be identified by a VMs current allocation. This is determined by querying the virtual infrastructure APIs such as a VMWARE VSPHERE API to determine a VMs current operating status.

The physical virtual host may include a physical computer that is able to execute several virtual machine images to support the VM configuration of the VM system . The host distributes its resources among the virtual machines that execute on the host. The host may be coupled to a storage device s for additional database functionality and or storage capabilities. This physical computer may be referred to as a hypervisor in the virtualization field. The host may be a server or a group of servers configured to manage the various resources designated to the VMs . The VMs provide the same functions to the network as their physical counterparts. For example a virtual administrator utilizing a virtual infrastructure management application such as VMWARE s VCENTER or MICROSOFT HYPER V Server 2008 either assigns names or names are created by a virtualization infrastructure management application according to a predefined scheme.

The active application load of the candidate VM may be optimized by increasing a number of active applications currently being operated by the at least one candidate virtual machine. The active application load may instead by optimized by decreasing a number of active applications currently being operated by the at least one candidate virtual machine. The plurality of performance metrics may include at least one of a number of active applications an amount of processor utilization or allocation an amount of memory utilization or allocated and an amount of data storage currently utilized or allocated. After the VM is modified the various performance metrics for each of the virtual machines may be periodically audited to determine additional optimization modifications of the virtual machines.

According to one example the modifications and optimization efforts may include generating a new application pool for the candidate virtual machine which includes at least one change in a present application pool that is currently being utilized by the candidate virtual machine i.e. increase or decrease in the number of active applications . The new application pool information may be stored in a configuration file which is transferred to the candidate virtual machine. The configuration file may include specific application information of the applications to be used by the candidate VM and may also include a reallocation baseline of any or more of a memory usage storage usage and a CPU usage used by the candidate virtual machine.

Example embodiments are preferably realized in a hardware device such as a computer cellular phone or other mobile terminal device etc. In other embodiments the present invention may be realized in hardware software firmware or a combination of hardware software and or firmware. The above example embodiments may also be implemented in software code and may be stored on a computer readable medium such as for example non volatile memory devices e.g. RAM ROM hard disk etc. . The software code may be accessed from the computer readable medium and may be executed by a processor. The executed program may provide one or more of the features of the example embodiments.

The operations of a method or algorithm described in connection with the embodiments disclosed herein may be embodied directly in hardware in a computer program executed by a processor or in a combination of the two. A computer program may be embodied on a computer readable medium such as a storage medium. For example a computer program may reside in random access memory RAM flash memory read only memory ROM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM registers hard disk a removable disk a compact disk read only memory CD ROM or any other form of storage medium known in the art.

An exemplary storage medium may be coupled to the processor such that the processor may read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an application specific integrated circuit ASIC . In the alternative the processor and the storage medium may reside as discrete components. For example illustrates an example network element which may represent any of the above described network components of the other figures.

As illustrated in a memory and a processor may be discrete components of the network entity that are used to execute an application or set of operations. The application may be coded in software in a computer language understood by the processor and stored in a computer readable medium such as the memory . The computer readable medium may be a non transitory computer readable medium that includes tangible hardware components in addition to software stored in memory. Furthermore a software module may be another discrete entity that is part of the network entity and which contains software instructions that may be executed by the processor . In addition to the above noted components of the network entity the network entity may also have a transmitter and receiver pair configured to receive and transmit communication signals not shown .

Although an exemplary embodiment of the system method apparatus and computer readable medium of the present invention has been illustrated in the accompanied drawings and described in the foregoing detailed description it will be understood that the invention is not limited to the embodiments disclosed but is capable of numerous rearrangements modifications and substitutions without departing from the spirit or scope of the invention as set forth and defined by the following claims. For example the capabilities of the systems and can be performed by one or more of the modules or components described herein or in a distributed architecture. For example all or part of the functionality performed by the individual modules may be performed by one or more of these modules. Further the functionality described herein may be performed at various times and in relation to various events internal or external to the modules or components. Also the information sent between various modules can be sent between the modules via at least one of a data network the Internet a voice network an Internet Protocol network a wireless device a wired device and or via plurality of protocols. Also the messages sent or received by any of the modules may be sent or received directly and or via one or more of the other modules.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. Although the present invention has been described with reference to specific exemplary embodiments it will be recognized that the invention is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

