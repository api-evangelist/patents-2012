---

title: Synchronizing access to resources in a hybrid computing environment
abstract: Synchronizing access to resources in a hybrid computing environment that includes a host computer, a plurality of accelerators, the host computer and the accelerators adapted to one another for data communications by a system level message passing module, where synchronizing access to resources includes providing in a registry, to processes executing on the accelerators and the host computer, a key associated with a resource, the key having a value; attempting, by a process, to access the resource including determining whether a current value of the key represents an unlocked state for the resource; if the current value represents an unlocked state, attempting to lock access to the resource including setting the value to a unique identification of the process; determining whether the current value is the unique identification of the process; if the current value is the unique identification accessing the resource by the process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09158594&OS=09158594&RS=09158594
owner: International Business Machines Corporation
number: 09158594
owner_city: Armonk
owner_country: US
publication_date: 20120608
---
This application is a continuation application of and claims priority from U.S. patent application Ser. No. 12 360 930 filed on Jan. 28 2009.

The field of the invention is data processing or more specifically methods apparatus and products for synchronizing access to resources in a hybrid computing environment.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output I O devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

Computer systems today have advanced such that some computing environments now include core components of different architectures which operate together to complete data processing tasks. Such computing environments are described in this specification as hybrid environments denoting that such environments include host computers and accelerators having different architectures. Although hybrid computing environments are more computationally powerful and efficient in data processing than many non hybrid computing environments such hybrid computing environments still present substantial challenges to the science of automated computing machinery.

Methods apparatus and products for synchronizing access to resources in a hybrid computing environment the hybrid computing environment including a host computer having a host computer architecture a plurality of accelerators having an accelerator architecture the accelerator architecture optimized with respect to the host computer architecture for speed of execution of a particular class of computing functions the host computer and the accelerators adapted to one another for data communications by a system level message passing module. Synchronizing access to resources in such a hybrid computing environment according to embodiments of the present invention includes providing in a registry by the system level messaging passing module to processes executing on the accelerators and the host computer a key associated with a resource accessible by each of the processes the key having a value that represents access permissions for the resource attempting by a process to access the resource including determining whether a current value of the key in the registry represents an unlocked state for the resource if the current value of the key in the registry represents an unlocked state for the resource attempting by the process to lock access to the resource including setting the value of the key to a unique identification of the process attempting to access the resource determining by the process whether the current value of the key is the unique identification of the process attempting to access the resource if the current value of the key is the unique identification of the process attempting to access the resource accessing the resource by the process and if the current value of the key is not the unique identification of the process attempting to access the resource the process is not currently authorized to access the resource.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and products for synchronizing access to resources in a hybrid computing environment according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . sets forth a diagram of an example hybrid computing environment useful for synchronizing access to resources according to embodiments of the present invention. A hybrid computing environment as the term is used in this specification is a computing environment in that it includes computer processors operatively coupled to computer memory so as to implement data processing in the form of execution of computer program instructions stored in the memory and executed on the processors. In addition the hybrid computing environment in the example of includes at least one host computer having a host architecture that operates in cooperation with an accelerator having an accelerator architecture where the host architecture and accelerator architecture are different architectures. The host and accelerator architectures in this example are characterized by architectural registers registers that are accessible by computer program instructions that execute on each architecture registers such as for example an instruction register a program counter memory index registers stack pointers and the like.

That is the number type structure and relations among the architectural registers of the two architectures are different so different that computer program instructions compiled for execution on the host computer of a hybrid computing environment typically cannot be executed natively by any associated accelerator of the hybrid computing environment.

Examples of hybrid computing environments include a data processing system that in turn includes one or more host computers each having an x86 processor and accelerators whose architectural registers implement the PowerPC instruction set. Computer program instructions compiled for execution on the x86 processors in the host computers cannot be executed natively by the PowerPC processors in the accelerators. Readers will recognize in addition that some of the example hybrid computing environments described in this specification are based upon the Los Alamos National Laboratory LANL supercomputer architecture developed in the LANL Roadrunner project named for the state bird of New Mexico the supercomputer architecture that famously first generated a petaflop a million billion floating point operations per second. The LANL supercomputer architecture includes many host computers with dual core AMD Opteron processors coupled to many accelerators with IBM Cell processors the Opteron processors and the Cell processors having different architectures.

The example hybrid computing environment of includes a plurality of compute nodes I O nodes and a service node . The compute nodes are coupled through network for data communications with one another and with the I O nodes and the service node . The data communications network may be implemented as an Ethernet Internet Protocol In PCIe Infiniband Fibre Channel or other network as will occur to readers of skill in the art.

In the example hybrid computing environment of the compute nodes carry out principal user level computer program execution accepting administrative services such as initial program loads and the like from the service application executing on the service node and gaining access to data storage and I O functionality through the I O nodes . In the example of the I O nodes are connected for data communications to I O devices through a local area network LAN implemented using high speed Ethernet or a data communications fabric of another fabric type as will occur to those of skill in the art. I O devices in the example hybrid computing environment of include non volatile memory for the computing environment in the form of data storage device an output device for the hybrid computing environment in the form of printer and a user I O device in the form of computer terminal that executes a service application interface that provides to a user an interface for configuring compute nodes in the hybrid computing environment and initiating execution by the compute nodes of principal user level computer program instructions.

In the example of each compute node includes a host computer having a host computer architecture and one or more accelerators having an accelerator architecture. A host computer is a host in the sense that it is the host computer that carries out interface functions between a compute node and other components of the hybrid computing environment external to any particular compute node. That is it is the host computer that executes initial boot procedures power on self tests basic I O functions accepts user level program loads from service nodes and so on. An accelerator is an accelerator in that each accelerator has an accelerator architecture that is optimized with respect to the host computer architecture for speed of execution of a particular class of computing functions. Such accelerated computing functions include for example vector processing floating point operations and others as will occur to those of skill in the art.

Because each of the compute nodes in the example of includes a host computer and an accelerator readers of skill in the art will recognize that each compute node represents a smaller separate hybrid computing environment within the larger hybrid computing environment of . That is not only may the combination of the compute nodes form a hybrid computing environment but it is also the case that each individual compute node may also be viewed as a separate smaller hybrid computing environment. The hybrid computing environment in the example of then may be viewed as composed of nine separate smaller hybrid computing environments one for each compute node which taken together form the hybrid computing environment of . Within each compute node of a host computer and one or more accelerators are adapted to one another for data communications by a system level message passing module SLMPM and by two or more data communications fabrics of at least two different fabric types. An SLMPM is a module or library of computer program instructions that exposes an application programming interface API to user level applications for carrying out message based data communications between the host computer and the accelerator . Examples of message based data communications libraries that may be improved for use as an SLMPM according to embodiments of the present invention include 

A data communications fabric is a configuration of data communications hardware and software that implements a data communications coupling between a host computer and an accelerator. Examples of data communications fabric types include Peripheral Component Interconnect PCI PCI express PCIe Ethernet Infiniband Fibre Channel Small Computer System Interface SCSI External Serial Advanced Technology Attachment eSATA Universal Serial Bus USB and so on as will occur to those of skill in the art.

The hybrid computing environments in the example of are configured for synchronizing access to resources according to embodiments of the present invention by providing in a registry by the system level messaging passing module to processes executing on the accelerators and the host computer a key associated with a resource accessible by each of the processes the key having a value that represents access permissions for the resource attempting by a process to access the resource including determining whether a current value of the key in the registry represents an unlocked state for the resource if the current value of the key in the registry represents an unlocked state for the resource attempting by the process to lock access to the resource including setting the value of the key to a unique identification of the process attempting to access the resource determining by the process whether the current value of the key is the unique identification of the process attempting to access the resource if the current value of the key is the unique identification of the process attempting to access the resource accessing the resource by the process and if the current value of the key is not the unique identification of the process attempting to access the resource the process is not currently authorized to access the resource .

The arrangement of compute nodes data communications fabrics networks I O devices service nodes I O nodes and so on making up the hybrid computing environment as illustrated in are for explanation only not for limitation of the present invention. Hybrid computing environments capable of synchronizing access to resources according to embodiments of the present invention may include additional nodes networks devices and architectures not shown in as will occur to those of skill in the art. Although the hybrid computing environment in the example of includes only nine compute nodes readers will note that hybrid computing environments according to embodiments of the present invention may include any number of compute nodes. The LANL supercomputer taken as an example of a hybrid computing environment with multiple compute nodes contains as of this writing more than 12 000 compute nodes. Networks and data communications fabrics in such hybrid computing environments may support many data communications protocols including for example TCP Transmission Control Protocol IP Internet Protocol and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

For further explanation sets forth a block diagram of an exemplary hybrid computing environment useful for synchronizing access to resources according to embodiments of the present invention. The hybrid computing environment of includes four compute nodes. Similar to the compute nodes of each of the compute nodes in the example of may represent a small separate hybrid computing environment which taken together make up a larger hybrid computing environment. One compute node in the example of is illustrated in an expanded view to aid a more detailed explanation of such a hybrid computing environment . As shown in the expanded view of compute node each of the compute nodes in the example of includes a host computer . The host computer includes a computer processor operatively coupled to computer memory Random Access Memory RAM through a high speed memory bus . The processor in each host computer has a set of architectural registers that defines the host computer architecture.

Each of the compute nodes also includes one or more accelerators . Each accelerator includes a computer processor operatively coupled to RAM through a high speed memory bus . Stored in RAM of the host computer and the accelerators is an operating system . Operating systems useful in host computers and accelerators of hybrid computing environments according to embodiments of the present invention include UNIX Linux Microsoft XP Microsoft Vista Microsoft NT AIX IBM s i5 OS and others as will occur to those of skill in the art. There is no requirement that the operating system in the host computers should be the same operating system used on the accelerators.

The processor of each accelerator has a set of architectural registers that defines the accelerator architecture. The architectural registers of the processor of each accelerator are different from the architectural registers of the processor in the host computer . With differing architectures it would be uncommon although possible for a host computer and an accelerator to support the same instruction sets. As such computer program instructions compiled for execution on the processor of an accelerator generally would not be expected to execute natively on the processor of the host computer and vice versa. Moreover because of the typical differences in hardware architectures between host processors and accelerators computer program instructions compiled for execution on the processor of a host computer generally would not be expected to execute natively on the processor of an accelerator even if the accelerator supported the instruction set of the host. The accelerator architecture in example of is optimized with respect to the host computer architecture for speed of execution of a particular class of computing functions. That is for the function or functions for which the accelerator is optimized execution of those functions will proceed faster on the accelerator than if they were executed on the processor of the host computer.

In the example of the host computer and the accelerators are adapted to one another for data communications by a system level message passing module SLMPM and two data communications fabrics of at least two different fabric types. In this example to support message based data communications between the host computer and the accelerator both the host computer and the accelerator have an SLMPM so that message based communications can both originate and be received on both sides of any coupling for data communications. Also in the example of the host computer and the accelerators are adapted to one another for data communications by a PCIe fabric through PCIe communications adapters and an Ethernet fabric through Ethernet communications adapters . The use of PCIe and Ethernet is for explanation not for limitation of the invention. Readers of skill in the art will immediately recognize that hybrid computing environments according to embodiments of the present invention may include fabrics of other fabric types such as for example PCI Infiniband Fibre Channel SCSI eSATA USB and so on.

The SLMPM in this example operates generally for data processing in a hybrid computing environment by monitoring data communications performance for a plurality of data communications modes between the host computer and the accelerators receiving a request to transmit data according to a data communications mode from the host computer to an accelerator determining whether to transmit the data according to the requested data communications mode and if the data is not to be transmitted according to the requested data communications mode selecting another data communications mode and transmitting the data according to the selected data communications mode. In the example of the monitored performance is illustrated as monitored performance data stored by the SLMPM in RAM of the host computer during operation of the compute node .

A data communications mode specifies a data communications fabric type a data communications link and a data communications protocol . A data communications link is data communications connection between a host computer and an accelerator. In the example of a link between the host computer and the accelerator may include the PCIe connection or the Ethernet connection through the Ethernet network . A link between the host computer and the accelerator in the example of may include the PCIe connection or the Ethernet connection through the Ethernet network . Although only one link for each fabric type is illustrated between the host computer and the accelerator in the example of readers of skill in the art will immediately recognize that there may any number of links for each fabric type.

A data communications protocol is a set of standard rules for data representation signaling authentication and error detection required to send information from a host computer to an accelerator . In the example of the SLMPM may select one of several protocols for data communications between the host computer and the accelerator. Examples of such protocols include shared memory transfers SMT executed with a send and receive operations and direct memory access DMA executed with PUT and GET operations .

Shared memory transfer is a data communications protocol for passing data between a host computer and an accelerator into shared memory space allocated for such a purpose such that only one instance of the data resides in memory at any time. Consider the following as an example shared memory transfer between the host computer and the accelerator of . An application requests a transmission of data from the host computer to the accelerator in accordance with the SMT protocol. Such a request may include a memory address allocated for such shared memory. In this example the shared memory segment is illustrated in a memory location on the accelerator but readers will recognize that shared memory segments may be located on the accelerator on the host computer on both the host computer and the accelerator or even off the local compute node entirely so long as the segment is accessible as needed by the host and the accelerator. To carry out a shared memory transfer the SLMPM on the host computer establishes a data communications connection with the SLMPM executing on the accelerator by a handshaking procedure similar to that in the TCP protocol. The SLMPM then creates a message that includes a header and a payload data and inserts the message into a message transmit queue for a particular link of a particular fabric. In creating the message the SLMPM inserts in the header of the message an identification of the accelerator and an identification of a process executing on the accelerator. The SLMPM also inserts the memory address from the request into the message either in the header or as part of the payload data. The SLMPM also inserts the data to be transmitted in the message as part of the message payload data. The message is then transmitted by a communications adapter across a fabric to the SLMPM executing on the accelerator where the SLMPM stores the payload data the data that was transmitted in shared memory space in RAM in accordance with the memory address in the message.

Direct memory access DMA is a data communications protocol for passing data between a host computer and an accelerator with reduced operational burden on the computer processor . A DMA transfer essentially effects a copy of a block of memory from one location to another typically from a host computer to an accelerator or vice versa. Either or both a host computer and accelerator may include DMA engine an aggregation of computer hardware and software for direct memory access. Direct memory access includes reading and writing to memory of accelerators and host computers with reduced operational burden on their processors.

A DMA engine of an accelerator for example may write to or read from memory allocated for DMA purposes while the processor of the accelerator executes computer program instructions or otherwise continues to operate. That is a computer processor may issue an instruction to execute a DMA transfer but the DMA engine not the processor carries out the transfer.

In the example of only the accelerator includes a DMA engine while the host computer does not. In this embodiment the processor on the host computer initiates a DMA transfer of data from the host to the accelerator by sending a message according to the SMT protocol to the accelerator instructing the accelerator to perform a remote GET operation. The configuration illustrated in the example of in which the accelerator is the only device containing a DMA engine is for explanation only not for limitation. Readers of skill in the art will immediately recognize that in many embodiments both a host computer and an accelerator may include a DMA engine while in yet other embodiments only a host computer includes a DMA engine.

To implement a DMA protocol in the hybrid computing environment of some memory region is allocated for access by the DMA engine. Allocating such memory may be carried out independently from other accelerators or host computers or may be initiated by and completed in cooperation with another accelerator or host computer. Shared memory regions allocated according to the SMA protocol for example may be memory regions made available to a DMA engine. That is the initial setup and implementation of DMA data communications in the hybrid computing environment of may be carried out at least in part through shared memory transfers or another out of band data communications protocol out of band with respect to a DMA engine. Allocation of memory to implement DMA transfers is relatively high in latency but once allocated the DMA protocol provides for high bandwidth data communications that requires less processor utilization than many other data communications protocols.

A direct PUT operation is a mode of transmitting data from a DMA engine on an origin device to a DMA engine on a target device. A direct PUT operation allows data to be transmitted and stored on the target device with little involvement from the target device s processor. To effect minimal involvement from the target device s processor in the direct PUT operation the origin DMA engine transfers the data to be stored on the target device along with a specific identification of a storage location on the target device. The origin DMA knows the specific storage location on the target device because the specific storage location for storing the data on the target device has been previously provided by the target DMA engine to the origin DMA engine.

A remote GET operation sometimes denominated an rGET is another mode of transmitting data from a DMA engine on an origin device to a DMA engine on a target device. A remote GET operation allows data to be transmitted and stored on the target device with little involvement from the origin device s processor. To effect minimal involvement from the origin device s processor in the remote GET operation the origin DMA engine stores the data in an storage location accessible by the target DMA engine notifies the target DMA engine directly or out of band through a shared memory transmission of the storage location and the size of the data ready to be transmitted and the target DMA engine retrieves the data from storage location.

Monitoring data communications performance for a plurality of data communications modes may include monitoring a number of requests in a message transmit request queue for a data communications link . In the example of each message transmit request queue is associated with one particular data communications link . Each queue includes entries for messages that include data to be transmitted by the communications adapters along a data communications link associated with queue.

Monitoring data communications performance for a plurality of data communications modes may also include monitoring utilization of a shared memory space . In the example of shared memory space is allocated in RAM of the accelerator. Utilization is the proportion of the allocated shared memory space to which data has been stored for sending to a target device and has not yet been read or received by the target device monitored by tracking the writes and reads to and from the allocated shared memory. In the hybrid computing environment of shared memory space any memory in fact is limited. As such a shared memory space may be filled during execution of an application program such that transmission of data from the host computer to an accelerator may be slowed or even stopped due to space limitations in the shared memory space.

In some embodiments of the present invention the hybrid computing environment of may be configured to operate as a parallel computing environment in which two or more instances the application program executes on two or more host computers in the parallel computing environment. In such embodiments monitoring data communications performance across data communications modes may also include aggregating data communications performance information across a plurality of instances of the application program executing on two or more host computers in a parallel computing environment. The aggregated performance information may be used to calculate average communications latencies for data communications modes average number of requests in data communications links of a particular fabric type average shared memory utilization among the plurality of host computers and accelerators in the parallel computing environment and so on as will occur to those of skill in the art. Any combination of such measures may be used by the SLMPM for both determining whether to transmit the data according to requested data communications mode and selecting another data communications mode for transmitting the data if the data is not to be transmitted according to the requested data communications mode.

The SLMPM of receives from an application program on the host computer a request to transmit data according to a data communications mode from the host computer to the accelerator . Such data may include computer program instructions compiled for execution by the accelerator work piece data for an application program executing on the accelerator or some combination of computer program instructions and work piece data. Receiving a request to transmit data according to a data communications mode may include receiving a request to transmit data by a specified fabric type receiving a request to transmit data through a specified data communications link from the host computer to the accelerator or receiving a request to transmit data from the host computer to the accelerator according to a protocol.

A request to transmit data according to a data communications mode may be implemented as a user level application function call through an API to the SLMPM a call that expressly specifies a data communications mode according to protocol fabric type and link. A request implemented as a function call may specify a protocol according to the operation of the function call itself. A dacs put function call for example may represent a call through an API exposed by an SLMPM implemented as a DACS library to transmit data in the default mode of a DMA PUT operation. Such a call from the perspective of the calling application and the programmer who wrote the calling application represents a request to the SLMPM library to transmit data according to the default mode known to the programmer to be default mode associated with the express API call. The called function in this example dacs put may be coded according to embodiments of the present invention to make its own determination whether to transmit the data according to the requested data communications mode that is according to the default mode of the called function. In a further example a dacs send instruction may represent a call through an API exposed by an SLMPM implemented as a DACS library to transmit data in the default mode of an SMT send operation where the called function dacs send is again coded according to embodiments of the present invention to make its own determination whether to transmit the data according to the requested mode.

An identification of a particular accelerator in a function call may effectively specify a fabric type. Such a function call may include as a call parameters an identification of a particular accelerator. An identification of a particular accelerator by use of a PCIe ID for example effectively specifies a PCI fabric type. In another similar example an identification of a particular accelerator by use of a media access control MAC address of an Ethernet adapter effectively specifies the Ethernet fabric type. Instead of implementing the accelerator ID of the function call from an application executing on the host in such a way as to specify a fabric type the function call may only include a globally unique identification of the particular accelerator as a parameter of the call thereby specifying only a link from the host computer to the accelerator not a fabric type. In this case the function called may implement a default fabric type for use with a particular protocol. If the function called in the SLMPM is configured with PCIe as a default fabric type for use with the DMA protocol for example and the SLMPM receives a request to transmit data to the accelerator according to the DMA protocol a DMA PUT or DMA remote GET operation the function called explicitly specifies the default fabric type for DMA the PCIe fabric type.

In hybrid computing environments in which only one link of each fabric type adapts a single host computer to a single accelerator the identification of a particular accelerator in a parameter of a function call may also effectively specify a link. In hybrid computing environments where more than one link of each fabric type adapts a host computer and an accelerator such as two PCIe links connecting the host computer to the accelerator the SLMPM function called may implement a default link for the accelerator identified in the parameter of the function call for the fabric type specified by the identification of the accelerator.

The SLMPM in the example of also determines in dependence upon the monitored performance whether to transmit the data according to the requested data communications mode. Determining whether to transmit the data according to the requested data communications mode may include determining whether to transmit data by a requested fabric type whether to transmit data through a requested data communications link or whether to transmit data according to a requested protocol.

In hybrid computing environments where monitoring data communications performance across data communications modes includes monitoring a number of requests in a message transmit request queue for a data communications link determining whether to transmit the data according to the requested data communications mode may be carried out by determining whether the number of requests in the message transmit request queue exceeds a predetermined threshold. In hybrid computing environments where monitoring data communications performance for a plurality of data communications modes includes monitoring utilization of a shared memory space determining whether to transmit the data according to the requested data communications mode may be carried out by determining whether the utilization of the shared memory space exceeds a predetermined threshold.

If the data is not to be transmitted according to the requested data communications mode the SLMPM selects in dependence upon the monitored performance another data communications mode for transmitting the data and transmits the data according to the selected data communications mode. Selecting another data communications mode for transmitting the data may include selecting in dependence upon the monitored performance another data communications fabric type by which to transmit the data selecting a data communications link through which to transmit the data and selecting another data communications protocol. Consider as an example that the requested data communications mode is a DMA transmission using a PUT operation through link of the PCIe fabric to the accelerator . If the monitored data performance indicates that the number of requests in transmit message request queue associated with the link exceeds a predetermined threshold the SLMPM may select another fabric type the Ethernet fabric and link through which to transmit the data . Also consider that the monitored performance indicates that current utilization of the shared memory space is less than a predetermined threshold while the number of outstanding DMA transmissions in the queue exceeds a predetermined threshold. In such a case the SLMPM may also select another protocol such as a shared memory transfer by which to transmit the data .

Selecting by the SLMPM another data communications mode for transmitting the data may also include selecting a data communications protocol in dependence upon data communications message size . Selecting a data communications protocol in dependence upon data communications message size may be carried out by determining whether a size of a message exceeds a predetermined threshold. For larger messages the DMA protocol may be a preferred protocol as processor utilization in making a DMA transfer of a larger message is typically less than the processor utilization in making a shared memory transfer of a message of the same size.

As mentioned above the SLMPM may also transmit the data according to the selected data communications mode. Transmit the data according to the selected data communications mode may include transmitting the data by the selected data communications fabric type transmitting the data through the selected data communications link or transmitting the data according to the selected protocol. The SLMPM may effect a transmission of the data according to the selected data communications mode by instructing through a device driver the communications adapter for the data communications fabric type of the selected data communications mode to transmit the message according to a protocol of the selected data communications mode where the message includes in a message header an identification of the accelerator and in the message payload the data to be transmitted.

The example hybrid computing environment of is configured for synchronous access to resources in accordance with embodiments of the present invention. Such resources may include I O resources data communications resources logic resources computer memory resources computer processor resources host computer hardware accelerator hardware processes executing on such host computer and accelerator and so on as will occur to those of skill in the art. In some hybrid computing environments such resources may be scarce. A small amount of computer memory even a particular memory region for example may used during operation of the hybrid computing environment by many processes executing on many different accelerators and host computers. As such synchronized access of such resources increases optimization and efficiency of use of the resources. Such synchronization of access to a resource may also provide some amount of data integrity in a memory region where the data stored in the memory region may be accessed and manipulated by many different processes executing a host computer or accelerator.

In the example hybrid computing environment of each of the accelerators is executing a process and the host computer is also executing a process for a host application program . From time to time in the example hybrid computing environment of two or more of the processes may require access to the same resource simultaneously that is at nearly the same time. Consider as one example the resource depicted in the hybrid computing environment of a memory region. When the process executing on the accelerator and the process executing on the host computer both attempt to access the resource simultaneously to modify data in the memory region for example race conditions may occur and the data may become corrupt.

To minimize the effects of such race conditions between multiple processes executing in the example hybrid computing environment of among other effects that will occur to those of skill in the art the system level message passing module of may be configured to provide in a registry to processes executing on the accelerators and the host computer a key associated with a resource accessible by each of the processes . A registry as the term is used in this specification may be any data structure a table an array a list or the like that associates a resource or resource identity with a key that has a value. A key as the term is used in this specification is a variable known to processes executing in the hybrid computing environment associated with a particular resource and used by processes in determining whether access to the resource is locked. Consider as an example of such a key associated with a resource the character string MemRsrcKey associated in the registry with a memory region. When a process inquires regarding the current state of access permissions for the memory region associated with the key the processes uses as part of the inquiry the key MemRsrcKey. In the example hybrid computing environment of the key has a value that represents access permissions for the resource that is the value is used to control access to the resource . Consider for example that a key having a value of zero may represent that access to the resource is unlocked that is any process may lock the resource then access the resource. Such a key having a value other than zero may represent that access to the resource locked. Access to a resource may be locked to all but one process by setting the value of the key equivalent to a unique identification ID of that one process.

Providing a registry in the example of may be carried out by the SLMPM responsive to receiving from a process one or more calls through an API to one or more functions provided by the SLMPM including as an argument of the calls the key to use and an identification of the resource. Consider as an example of a call to a function provided by an SLMPM implemented as a DACS like library dacs mutex init MemRsrcKey 0x100 0x1000 . Such a call is a request from a process to initialize a mutex in a registry with a key MemRsrcKey associated with a memory region beginning at address 0x100 and ending at address 0x1000. The term mutex is an abbreviated form of the term mutual exclusion. Mutual exclusion functionality according to embodiments of the present invention is provided through the SLMPM and avoids simultaneous use of a common resource. The SLMPM after initializing the registry may then provide the key through data communications messages to each process executing in the hybrid computing environment responsive to a call from the process through an API to a function provided by the SLMPM . Upon receiving the key each process may send an acknowledgement of the receipt to the SLMPM using a call through and API to another function provided by the SLMPM . Consider as an example of call to a function that causes the SLMPM to provide the key to each process in the hybrid computing environment the DACS like function call dacs mutex share MemRsrcKey where the key MemRsrcKey is then sent by data communications messages to each process. Consider as an acknowledgement of receipt of the key the DACS like call dacs mutex accept . Such a call may include arguments that identify the process calling the function such as an accelerator or host computer identity for the accelerator upon which the calling process is running a process identifier for the process a process identifier for the SLMPM executing on the host computer or accelerator upon which the calling process is running and so on as will occur to those of skill in the art.

Synchronizing access to the resource in the example hybrid computing environment of according to embodiments of the present invention may include attempting by a process to access the resource including determining whether a current value for the key in the registry represents an unlocked state for the resource. If the current value for the key in the registry represents an unlocked state for the resource attempting by the process to lock access to the resource including setting the value for the key to a unique identification of the process attempting to access the resource . Synchronizing access to the resource may also include determining whether the current value is the unique identification of the process attempting to access the resource . If the value is the unique identification of the process attempting to access the resource the processes accesses the resource and if the value is not the unique identification of the process attempting to access the resource the process is not currently authorized to access the resource and must wait for the resource to be unlocked.

Attempting by a process to access the resource in the example of may include determining whether a current value for the key in the registry represents an unlocked state for the resource. Determining whether a current value for the key in the registry represents an unlocked state for the resource may be carried out by a call from the process through an API to a function provided by the SLMPM where the call includes as an argument the key. Consider as an example of a call to a DACS like library to identify the current value of the key the function call dacs mutex trylock MemRsrKey . Upon receiving such a call from a process the SLMPM may lookup the value of the key in the registry using as an index into the registry the key itself. The SLMPM may then send the value in a data communications message to the process as a return to the function call. As mentioned above in some hybrid computing environments according to embodiments of the present invention a value equal to zero represents an unlocked state for the resource. In such an embodiment determining whether current value represents an unlocked state is carried out by determining that the current value of the key is zero. Otherwise the value is locked that is the process attempting to access the resource cannot access the resource at the current time.

If the current value for the key in the registry does represent an unlocked state for the resource the process attempts to lock access to the resource that is preclude other processes from accessing the resource. Attempting to lock access to the resource may be carried out by setting by the process the value for the key to a unique identification of the process attempting to access the resource . A unique identification of a process may be implemented in many ways such as for example a combination of a process identifier PID of the process and a accelerator or host identification a user specified value an identification generated by the SLMPM in dependence upon the PID of the process and the PID of the instance of the SLMPM executing on the host or accelerator with the process and so on as will occur to those of skill in the art. Setting the value to a unique identification of the process attempting to access the resource may be carried out by calling by the process through an API a function provided by the SLMPM including as arguments of the function call the key and the value to set the unique identification of the process. Consider as an example of such a DACS like library call through an API to a function provided by an SLMPM dacs registry set MemRsrcKey UniqueID001 . Responsive to such a call the SLMPM updates the registry to include the value UniqueID001 for the key MemRsrcKey. 

In some embodiments a race to lock and access a currently unlocked resource may occur when two or more processes determine simultaneously or at nearly the same time that the value of the key represents an unlocked state of the resource. Consider an example in which two processes process and process simultaneously determined that the value of the key associated with a resource represents that the resource is unlocked. Consider also that process is first to set the value of the key to the unique ID but directly thereafter the process sets the value of key to the unique ID . In such a race between to lock and access the resource the process to set the value last in this example the process effectively wins the race locking all other processes from accessing the resource because no process will access the resource without again determining that the value of the key is in fact that process s unique identification. In this example although process was the first process to lock access to the resource the process will determine that the value of key is in fact the unique ID of the process . Determining whether the current value of the key is the unique identification of the process attempting to access the resource may be carried out by again looking up the value of the key in the registry using a call by the process through an API to a function provided by the SLMPM such as dacs registry get MemRsrcKey .

If the value is the unique identification of the process attempting to access the resource the process may access the resource in many ways in dependence upon the resource type such as for example storing data to or reading data from a resource that is a memory region. If the value is not the unique identification of the process attempting to access the resource the process is not currently authorized to access the resource and the process must wait until the resource is unlocked.

For further explanation sets forth a block diagram of a further exemplary hybrid computing environment useful for synchronizing access to resources according to embodiments of the present invention. The hybrid computing environment of is similar the hybrid computing environment of including as it does four compute nodes each of which includes a host computer having a host computer architecture and an accelerator having an accelerator architecture where the accelerator architecture is optimized with respect to the host computer architecture for speed of execution of a particular class of computing functions. The host computer and the accelerator are adapted to one another for data communications by a system level message passing module and two or more data communications fabrics of at least two different fabric types. In the example of the host computer is adapted to accelerator by an Ethernet fabric and a PCIe fabric .

The host computer as illustrated in the expanded view of the compute node includes an x86 processor. An x86 processor is a processor whose architecture is based upon the architectural register set of the Intel x86 series of microprocessors the 386 the 486 the 586 or Pentium and so on. Examples of x86 processors include the Advanced Micro Devices AMD Opteron the AMD Phenom the AMD Athlon XP the AMD Athlon 64 Intel Nehalam Intel Pentium 4 Intel Core 2 Duo Intel Atom and so on as will occur to those of skill in the art. The x86 processor in the example of Figure illustrates a set of a typical architectural registers found in many x86 processors including for example an accumulator register AX a base register BX a counter register CX a data register DX a source index register for string operations SI a destination index for string operations DI a stack pointer SP a stack base pointer for holding the address of the current stack frame BP and an instruction pointer that holds the current instruction address IP .

The accelerator in the example of is illustrated as a Cell Broadband Engine CBE having a Cell Broadband Engine Architecture CBEA . A CBEA is a microprocessor architecture jointly developed by Sony Computer Entertainment Toshiba and IBM an alliance known as STI. Microprocessors implemented according to the CBEA are sometimes referred to as Cell processors or simply as CBEs. The CBEA combines a general purpose POWER architecture core a Power Processing Element PPE of modest performance with streamlined co processing elements called Synergistic Processing Elements SPEs which greatly accelerate multimedia and vector processing applications as well as many other forms of dedicated computation. The CBE architecture emphasizes efficiency watt prioritizes bandwidth over latency and favors peak computational throughput over simplicity of program code.

The accelerator of implemented as a CBE includes a main processor that in this example is a Power Processing Element PPE eight fully functional co processors called SPEs and a high bandwidth circular data bus connecting the PPE and the SPEs called the Element Interconnect Bus EIB . The PPE is a POWER architecture processor with a two way multithreaded core acting as a controller for the eight SPEs . The term POWER architecture here refers to IBM s different generations of processor architectures a broad term including all products based on POWER PowerPC and Cell architectures. The architectural registers of the PPE of the CBE accelerator therefore are different from those of the x86 processor of the host computer . The PPE of includes an example set of architectural registers of the POWER architecture including 32 general purpose registers GPRs floating point registers FPRs a fixed point exception register XER a count register CTR a Condition register CR an instruction address register IAR a link register LR and a processor version register PVR .

The SPEs handle most of the computational workload of the CBE . While the SPEs are optimized for vectorized floating point code execution the SPEs also may execute operating systems such as for example a lightweight modified version of Linux with the operating system stored in local memory on the SPE. Each SPE in the example of includes a Synergistic Processing Unit SPU and a Memory Flow Controller MFC . An SPU is a Reduced Instruction Set Computing RISC processor with 128 bit single instruction multiple data SIMD organization for single and double precision instructions. In some implementations an SPU may contain a 256 KB embedded Static RAM for instructions and data called local storage which is visible to the PPE and can be addressed directly by software. Each SPU can support up to 4 Gigabyte GB of local store memory. The local store does not operate like a conventional CPU cache because the local store is neither transparent to software nor does it contain hardware structures that predict which data to load. The SPUs also implement architectural registers different from those of the PPE which include a 128 bit 128 entry register file . An SPU can operate on 16 8 bit integers 8 16 bit integers 4 32 bit integers or 4 single precision floating point numbers in a single clock cycle as well as execute a memory operation.

The MFC integrates the SPUs in the CBE . The MFC provides an SPU with data transfer and synchronization capabilities and implements the SPU interface to the EIB which serves as the transportation hub for the CBE . The MFC also implements the communication interface between the SPE and PPE and serves as a data transfer engine that performs bulk data transfers between the local storage of an SPU and CBE system memory RAM through DMA. By offloading data transfer from the SPUs onto dedicated data transfer engines data processing and data transfer proceeds in parallel supporting advanced programming methods such as software pipelining and double buffering. Providing the ability to perform high performance data transfer asynchronously and in parallel with data processing on the PPE and SPEs the MFC eliminates the need to explicitly interleave data processing and transfer at the application level.

The SLMPM in the example of processes data in the hybrid computing environment according to embodiments of the present invention by monitoring data communications performance for a plurality of data communications modes between the host computer and the accelerator receiving from an application program on the host computer a request to transmit data according to a data communications mode from the host computer to the accelerator determining in dependence upon the monitored performance whether to transmit the data according to the requested data communications mode and if the data is not to be transmitted according to the requested data communications mode selecting in dependence upon the monitored performance another data communications mode for transmitting the data and transmitting the data according to the selected data communications mode.

The hybrid computing environment in the example of includes only one accelerator adapted to a host computer for clarity of explanation not limitation. As mentioned above hybrid computing environments configured for synchronizing access to resources according to embodiments of the present invention may include any number of accelerators adapted to a host computer . In a hybrid computing environment that includes multiple accelerators configured otherwise as the example hybrid computing environment of synchronizing access to resources according to embodiments of the present invention may include providing in a registry by the system level messaging passing module to processes executing on the accelerators and the host computer a key associated with a resource accessible by each of the processes the key having a value that represents access permissions for the resource attempting by a process to access the resource including determining whether a current value of the key in the registry represents an unlocked state for the resource if the current value of the key in the registry represents an unlocked state for the resource attempting by the process to lock access to the resource including setting the value of the key to a unique identification of the process attempting to access the resource determining by the process whether the current value of the key is the unique identification of the process attempting to access the resource if the current value of the key is the unique identification of the process attempting to access the resource accessing the resource by the process and if the current value of the key is not the unique identification of the process attempting to access the resource the process is not currently authorized to access the resource.

For further explanation sets forth a block diagram of a further exemplary hybrid computing environment useful for synchronizing access to resources according to embodiments of the present invention. The hybrid computing environment of is similar the hybrid computing environment of including as it does four compute nodes each of which includes a host computer having a host computer architecture and one or more accelerators each having an accelerator architecture where the accelerator architecture is optimized with respect to the host computer architecture for speed of execution of a particular class of computing functions. The host computer and the accelerator in the example of are adapted to one another for data communications by a system level message passing module and two or more data communications fabrics of at least two different fabric types. In the example of the host computer is adapted to accelerator by an Ethernet fabric and a PCIe fabric .

Each x86 processor core in the example of is adapted through an Ethernet and PCIe fabric to a separate accelerator implemented as a CBE as described above with respect to . Each core of each AMD Opteron processor in the host computer in this example is connected to at least one CBE. Although in this example the ratio of cores of the Opteron processors to CBEs is one to one readers of skill in the art will recognize that other example embodiments may implement different ratios of processor cores to accelerators such as for example one to two one to three and so on.

Each instance of the SLMPM executing on each x86 processor core in the example of processes data in the hybrid computing environment according to embodiments of the present invention by monitoring data communications performance across data communications modes between the host computer and the accelerator connected to the processor core receiving from the instance of the application program executing on the processor core of the host computer a request to transmit data according to a data communications mode from the host computer to the accelerator connected to the processor core determining in dependence upon the monitored performance whether to transmit the data according to the requested data communications mode and if the data is not to be transmitted according to the requested data communications mode selecting in dependence upon the monitored performance another data communications mode for transmitting the data and transmitting the data according to the selected data communications mode.

In the example hybrid computing environment of synchronizing access to resources according to embodiments of the present invention may include providing in a registry by the system level messaging passing module to processes executing on the accelerators and the host computer a key associated with a resource accessible by each of the processes the key having a value that represents access permissions for the resource attempting by a process to access the resource including determining whether a current value of the key in the registry represents an unlocked state for the resource if the current value of the key in the registry represents an unlocked state for the resource attempting by the process to lock access to the resource including setting the value of the key to a unique identification of the process attempting to access the resource determining by the process whether the current value of the key is the unique identification of the process attempting to access the resource if the current value of the key is the unique identification of the process attempting to access the resource accessing the resource by the process and if the current value of the key is not the unique identification of the process attempting to access the resource the process is not currently authorized to access the resource.

For further explanation sets forth a flow chart illustrating an exemplary method for synchronizing access to resources in a hybrid computing environment according to embodiments of the present invention. The method of is carried out in a hybrid computing environment similar to the hybrid computing environments described above in this specification. Such a hybrid computing environment includes a host computer on having a host computer architecture and a plurality of accelerators on having an accelerator architecture the accelerator architecture optimized with respect to the host computer architecture for speed of execution of a particular class of computing functions the host computer on and the accelerators on adapted to one another for data communications by an SLMPM and optionally by two or more data communications fabrics on of at least two different fabric types. The method of includes providing in a registry by the system level messaging passing module to processes executing on the accelerators and the host computer a key associated with a resource accessible by each of the processes . In the example of the key has a value that represents access permissions for the resource . The method of also includes attempting by a process to access the resource . In the method of attempting by a process to access the resource is carried out by determining whether a current value of the key in the registry represents an unlocked state for the resource . If the current value of the key in the registry does not represent an unlocked state for the resource the method of continues by attempting again by the resource after waiting a predefined amount of time. If the current value of the key in the registry doe represent an unlocked state for the resource the method of continues by attempting by the process to lock access to the resource including setting the value of the key to a unique identification of the process attempting to access the resource . The method of includes determining by the process whether the current value of the key is the unique identification of the process attempting to access the resource . If the current value of the key is the unique identification of the process attempting to access the resource the method of continues by accessing the resource by the process . If the current value of the key is not the unique identification of the process attempting to access the resource the process is not currently authorized to access the resource .

For further explanation sets forth a flow chart illustrating a further exemplary method for synchronizing access to resources in a hybrid computing environment according to embodiments of the present invention. The method of like the method of is carried out in a hybrid computing environment similar to the hybrid computing environments described above in this specification. Such a hybrid computing environment includes a host computer on having a host computer architecture and a plurality of accelerators on having an accelerator architecture the accelerator architecture optimized with respect to the host computer architecture for speed of execution of a particular class of computing functions the host computer on and the accelerator on adapted to one another for data communications by a system level message passing module and optionally by two or more data communications fabrics on of at least two different fabric types. The method of is similar to the method of including as it does providing a key associated with a resource the key having a value that represents access permissions for the resource attempting by a process to access the resource including determining whether a current value of the key in the registry represents an unlocked state for the resource if the current value of the key in the registry represents an unlocked state for the resource attempting by the process to lock access to the resource including setting the value of the key to a unique identification of the process attempting to access the resource determining by the process whether the current value of the key is the unique identification of the process attempting to access the resource if the current value of the key is the unique identification of the process attempting to access the resource accessing the resource by the process and if the current value of the key is not the unique identification of the process attempting to access the resource the process is not currently authorized to access the resource . The method of differs from the method of however in that upon completing access of the resource by the process the method of includes unlocking by the process access to the resource . In the method of unlocking access to the resource includes setting the value of the key to represent an unlocked state for the resource.

For further explanation sets forth a flow chart illustrating a further exemplary method for synchronizing access to resources in a hybrid computing environment according to embodiments of the present invention. The method of like the method of is carried out in a hybrid computing environment similar to the hybrid computing environments described above in this specification. Such a hybrid computing environment includes a host computer on having a host computer architecture and a plurality of accelerators on having an accelerator architecture the accelerator architecture optimized with respect to the host computer architecture for speed of execution of a particular class of computing functions the host computer on and the accelerator on adapted to one another for data communications by a system level message passing module and optionally by two or more data communications fabrics on of at least two different fabric types. The method of is similar to the method of including as it does providing a key associated with a resource the key having a value that represents access permissions for the resource attempting by a process to access the resource including determining whether a current value of the key in the registry represents an unlocked state for the resource if the current value of the key in the registry represents an unlocked state for the resource attempting by the process to lock access to the resource including setting the value of the key to a unique identification of the process attempting to access the resource determining by the process whether the current value of the key is the unique identification of the process attempting to access the resource if the current value of the key is the unique identification of the process attempting to access the resource accessing the resource by the process and if the current value of the key is not the unique identification of the process attempting to access the resource the process is not currently authorized to access the resource . The method of differs from the method of however in that the method of includes locking by the system level message passing module all access to the resource . In the method of Figure locking all access to the resource is carried out by setting by the system level message passing module the value of the key to a value other than a unique identification of any of the processes or an unlocked state.

Exemplary embodiments of the present invention are described largely in the context of synchronizing access to resources in a fully functional hybrid computing environment. Readers of skill in the art will recognize however that method aspects of the present invention also may be embodied in a computer program product disposed on signal bearing media for use with any suitable data processing system. Such signal bearing media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

