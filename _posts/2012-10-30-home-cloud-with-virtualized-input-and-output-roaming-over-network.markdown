---

title: Home cloud with virtualized input and output roaming over network
abstract: A home cloud computing system employs a virtualization system to virtualize data of a device and adaptively transform type or format of the virtualized data for one or more other devices, thus leveraging resources of the device for the one or more other devices. Through data virtualization and adaptive transformation, devices of heterogeneous types are seamlessly connected to one another and can act as input or output devices for each other to create a home cloud network of devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09264478&OS=09264478&RS=09264478
owner: Microsoft Technology Licensing, LLC
number: 09264478
owner_city: Redmond
owner_country: US
publication_date: 20121030
---
The development of new computing technologies brings unprecedented experience to people s daily lives. Among the newly developed technologies new human computer interaction HCI technologies have become a driving force and a determining factor of success for today s home entertainment. Different from conventional user interfaces which include physical keyboards and mice more natural user interfaces NUI such as user touch gesture voice etc. are proposed and developed for user interaction with a variety of computing devices which include televisions game consoles desktop computers tablets smart phones to name a few. Although significant developments have been made so far computing capabilities and NUI functions are still confined to respective devices platforms or applications and cannot be shared with other devices platforms or applications due to diverse and incompatible input and output data formats of different computing devices for example.

This summary introduces simplified concepts of home cloud computing which are further described below in the Detailed Description. This summary is not intended to identify essential features of the claimed subject matter nor is it intended for use in limiting the scope of the claimed subject matter.

This application describes example embodiments of home cloud computing. In one embodiment a first device may virtualize data such as input and output data thereof and redirect part or all of the virtualized data to one or more other devices to leverage resources of the first device for the one or more other devices.

In one embodiment the first device may detect a presence of a second device in a proximity of the first device. In response to detecting the presence of the second device the first device may establish a network or data connection with the second device. Additionally the first device may further determine functional capabilities such as data processing capabilities display capabilities etc. of the second device.

In some embodiments the first device may negotiate with the second device with respect to one or more responsibilities. For example the first device may negotiate with the second device regarding an extent of data transformation that is to be performed by the first device for the second device and an extent of data transformation that is to be performed by the second device for the first device based on the functional capabilities of the second device and functional capabilities of the first device.

The first device may virtualize its data input and or output data into virtualized data. Upon virtualizing the data the first device may transform the virtualized data into a virtualized data stream e.g. in a virtualization interconnection layer that is on top of a data network layer based on a result of the negotiation between the first device and the second device. The first device may send the virtualized data stream to the second device thus leveraging resources of the first device for the second device.

As noted above existing computing capabilities and NUI functions are confined to respective devices platforms or applications and cannot be shared with other devices platforms or applications due to for example diverse and incompatible input and output data formats and complexities of different computing devices.

This disclosure describes a home cloud computing system. The home cloud computing system employs a virtualization system to leverage resources of a plurality of devices by virtualizing respective inputs and outputs and enables communication and interpretation of the inputs and the outputs among and across the plurality of devices regardless of input and or output capabilities types formats and or complexities of the plurality of devices. Furthermore the virtualization system allows composing all or parts of different inputs and or outputs from different devices to form a combined input or output that may be manipulated and or presented in one or more devices.

In one embodiment the virtualization system may be included or installed in a device that interacts with a user i.e. a device that receives inputs from the user and or presents outputs to the user. The virtualization system enables the device to share or redirect resources thereof such as data processing and display capabilities without specifying a particular device beforehand. The virtualization system also allows the device to adapt to a particular device during and or after establishing a network connection with that particular device. The virtualization system leverages resources by virtualizing input and or output data of the device. Examples of virtualization may include but are not limited to generating output data e.g. screen data with or without presenting the output data locally at the device capturing input data through a user interface of the device with or without processing the input data and or providing a response with respect to the input data locally etc.

After virtualizing the data of the device in some embodiments the virtualization system may redirect part or all of the input data and or the output data of the device to one or more other devices through a network for data presentation and or processing.

In other embodiments due to the heterogeneous nature of data types formats and or complexities of different devices for example the virtualization system may pre process the data of the device prior to sending the data to the one or more other devices. For instance a virtualization system of a first device may have negotiated with a second device or a virtualization system of the second device an extent of data transformation for example data pre processing encoding etc. that the first device may perform for the second device and or an extent of data transformation that the second device may perform for the first device when establishing a network or data connection between the first device and the second device. The first device may pre process and encode the data in accordance with a result of the negotiation and send the pre processed encoded data to the second device thereafter.

The described home cloud computing system enables interaction among a plurality of devices that may have diverse input and output capabilities types and formats and leverages resources of the plurality of devices through input and output virtualization.

In some of the examples described herein the virtualization system virtualizes input and output data of a device establishes or facilitates a network connection with another device for the device negotiates respective degrees of data transformation to be done by each device transforms the data of the device and sends the data to the other device and or receive data from the other device. However in other embodiments these functions may be performed by multiple separate systems or services. For example in one embodiment a virtualization service may virtualize data of the device while a separate service may establish a network connection with other device and negotiate respective degrees of data transformation to be performed by each device and yet another service may transform the data of the device and send the data to the other device and or receive data from the other device.

Furthermore although in the examples described herein the virtualization system may be implemented as software and or hardware installed in a device in other embodiments the virtualization system may be implemented as a separate entity or device that is peripheral or attached to the device. Furthermore in some embodiments the virtualization system may be implemented as software and or hardware included in one or more other devices forming a network through which each device of the plurality of devices connects to one another e.g. a local server or router etc. . Additionally or alternatively the virtualization system may be implemented as a service provided in one or more servers over the network and or in a cloud computing architecture.

The application describes multiple and varied implementations and embodiments. The following section describes an example environment that is suitable for practicing various implementations. Next the application describes example systems devices and processes for implementing a home cloud computing system.

Although in this example each client device is described to install or attach with a respective virtualization system in some embodiments some or all of the functions of the virtualization system may be included in one or more entities other than the client devices . For example some or all of the functions of the virtualization system may be included and distributed in the client device and a separate device that is peripheral to the client device e.g. a peripheral device a set top box etc. . Additionally or alternatively some or all of the functions of the virtualization system may be included and distributed among the client device and one or more servers that are connected to the network . For example the client device may include part of the functions of the virtualization system while other functions of the virtualization system may be included in one or more other servers . Furthermore in some embodiments the virtualization system may be included in one or more third party servers e.g. other servers that may or may not be a part of a cloud computing system or architecture.

The client device may be implemented as any of a variety of conventional computing devices including for example a mainframe computer a server a notebook or portable computer a handheld device a netbook an Internet appliance a tablet or slate computer a mobile device e.g. a mobile phone a personal digital assistant a smart phone etc. a game console a set top box etc. or a combination thereof.

Additionally or alternatively the client device may be implemented as any of a variety of conventional consumer devices including for example a television a digital picture frame an audio player a video player an eReader a digital camera etc. or a combination thereof. In one embodiment the virtualization system may be configured to provide networking and computing capabilities for these consumer devices having no or limited networking and computing capabilities.

The network may be a wireless or a wired network or a combination thereof. The network may be a collection of individual networks interconnected with each other and functioning as a single large network e.g. the Internet or an intranet . Examples of such individual networks include but are not limited to telephone networks cable networks Local Area Networks LANs Wide Area Networks WANs and Metropolitan Area Networks MANs . Further the individual networks may be wireless or wired networks or a combination thereof.

In one embodiment the client device may include one or more processors coupled to memory . The memory includes one or more applications or services e.g. web applications or services video applications or services etc. and other program data . The memory may be coupled to associated with and or accessible to other devices such as network servers routers and or the other servers . Additionally or alternatively in some embodiments the client device may include an input interface such as a touch screen a touch pad a remote controller a mouse a keyboard a camera a microphone etc. and an output interface e.g. a screen a loudspeaker etc. .

In one embodiment a user may use the plurality of client devices for home entertainment. The user may read a web page on a mobile phone e.g. client device and note a video on the web page. The user may want to watch the video on a television e.g. client device and use the mobile phone as a remote controller of the television. The user may further want to read textual information of the web page using a tablet e.g. client device . The user may perform these operations using the plurality of client devices that include the virtualization systems .

The memory may include computer readable media in the form of volatile memory such as Random Access Memory RAM and or non volatile memory such as read only memory ROM or flash RAM. The memory is an example of computer readable media. Computer readable media includes at least two types of computer readable media namely computer storage media and communications media.

Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to phase change memory PRAM static random access memory SRAM dynamic random access memory DRAM other types of random access memory RAM read only memory ROM electrically erasable programmable read only memory EEPROM flash memory or other memory technology compact disk read only memory CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other non transmission medium that can be used to store information for access by a computing device.

In contrast communication media may embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transmission mechanism. As defined herein computer storage media does not include communication media.

The memory may include program modules and program data . In one embodiment the virtualization system may include a virtualization module . The virtualization module captures inputs and or outputs of associated client device and or separates the inputs and or outputs from the client device . Examples of inputs may include but are not limited to data captured from a user interface such as mouse movement and click keyboard s keystrokes images from touch surfaces visual and depth information from cameras or motion sensors control signals from game controllers data from accelerometers and or gyros data from contextual or ambient sensors such as location information from GPS Global Positioning System WiFi and other positioning sensors orientation data from a compass sensor data from a light sensor and or any other possible sensors attached to the client device . Examples of the outputs may include for example screen contents audio contents feedback of haptic devices and any other results that may be presented to the user .

In one embodiment the virtualization module may generate data virtually inside the client device to obtain virtualized data e.g. virtualized input VI or virtualized output VO . For example the virtualization module may virtually render a screen image with or without displaying the screen image in a local display of the client device and or pre process or pre interpret real input raw data into a high level input signal e.g. interpreting an image from a touch surface to a high level touch gesture etc. . Additionally or alternatively the virtualization module may generate data virtually inside the client device by intercepting physical data directly from a physical device such as a camera or motion sensor attached to the client device that generates the physical data through a piece of software e.g. an application programming interface API for screen capture etc. or a piece of hardware such as a splitter connected to a display port of the client device for example .

In some embodiments the virtualization system may further include a virtualization interconnection layer . The virtualization interconnection layer may be added and attached to the client device on top of existing data network layers and may serve as a higher level abstraction layer to interconnect the client device with other client devices . The virtualization interconnection layer facilitates data roaming or migration i.e. moving the virtualized data from the client device that generates the data to one or more other client devices .

Due to a large number of different varieties of input and output devices and data types or formats in one embodiment the virtualization interconnection layer may be made to be independent of the virtualization module or the virtualization process that is done by the virtualization module . The virtualization system may enable this separation of the virtualization interconnection layer from the virtualization module or process by defining a programming model and corresponding application programming interface API that is independent of what is performed by the virtualization module or process . For example the virtualization system may employ a driver model that may rely on respective software virtualization drivers for corresponding input and output devices.

By separating the virtualization interconnection layer from the virtualization process the virtualization interconnection layer may be implemented in a dedicated cost effective hardware or a piece of software that provides minimal functions for the data roaming without involving sophisticated computation. Furthermore this separation enables separating input and output functions from main computing tasks of the applications associated with the client device and thus releases developers of the applications and or the client device from considering which one or more output devices that the outputs may go to and or which one or more input devices that the inputs may come from. Moreover the separation allows the virtualization interconnection layer to interpret or translate data differently for different client devices for example enabling translation of gestures captured by cameras or motion sensors into mouse signals that are applicable to computer applications.

Depending on application scenarios the virtualization interconnection layer of the client device may include a sending virtualization interconnection node which may be referred to as SVIN and or a receiving virtualization interconnection node which may be referred to as RVIN . For example if only a screen content of a computer is needed to be projected to a television the computer may only need to have the sending virtualization interconnection node while the television may only need the receiving virtualization interconnection node on the television or a computing device that is attached to the television for example. Without loss of generality the virtualization interconnection layer associated with the client device is described hereinafter to have both the sending virtualization interconnection node and the receiving virtualization interconnection node .

In one embodiment the sending virtualization interconnection node may be interfaced with the virtualization module and receive virtualized data i.e. virtualized input VI and or virtualized output VO from the virtualization module . Upon receiving the virtualized data from the virtualization module the sending virtualization interconnection node may pre process and or encode the virtualized data and transmit the processed encoded virtualized data to one or more other client devices via the network . In one embodiment the sending virtualization interconnection node may include a pre processing module an encoding module and a sending module .

On the other hand the receiving virtualization interconnection node may receive virtualized data from one or more other client devices via the network and decode reconstruct or process the received virtualized data into a form that is acceptable by a device to which the receiving virtualization interconnection node i.e. the client device in this example. In one embodiment the receiving virtualization interconnection node may include a receiving module a decoding module and a post processing module . illustrates data flow between two client devices through respective virtualization interconnection layers .

Upon receiving the virtualized data from the virtualization module the sending virtualization interconnection node or the pre processing module may pre process and prepare the virtualized data for further encoding using the pre processing module . The pre processing module may perform one or more operations on the virtualized data. Examples of the one or more operations include but are not limited to analyzing converting recognizing enhancing filtering extracting combining synchronizing interpolating subsampling cleaning and denoising the virtualized data. For example the pre processing module may analyze output content of the virtualized data such as classifying screen contents into different types e.g. text regions image regions video regions object regions etc. . Additionally or alternatively the pre processing module may convert raw input data into a format more easily to encode and transmit such as converting raw images from sensors of a touch surface into high level gestures or converting raw depth information from camera or motion sensors into high level body gestures such as direction and amount of movement etc. etc.

In one embodiment an extent of data processing performed by the pre processing module may be determined by one or more factors. For example the one or more factors may include but are not limited to processing power memory storage capacity network bandwidth flexibility delay criterion etc. associated with the client device and or the virtualization system of the virtualization system . Additionally or alternatively the one or more factors may include relative processing power memory storage capacity network bandwidth flexibility delay criterion etc. between the client device and or the virtualization system of the client device and another client device and or a virtualization system of the other client device to which the virtualized data is to be sent. For example if the sending virtualization interconnection node either embedded or standalone has very relatively limited processing power the pre processing module may pass the virtualized data transparently to the encoding module depending on the receiving virtualization interconnection node of the receiving client device to process the virtualized data. Specifically what to be pre processed and or an extent of which the pre processing to be done by the pre processing module depend s on one or more factors as described above and other system considerations including for example a balance between different factors to achieve an overall optimized system performance.

Upon pre processing the virtualized data the pre processing module sends the pre processed virtualized data to the encoding module for further processing. In one embodiment the encoding module may further compress and or encode the pre processed virtualized data into a compressed virtualized data stream. For example the encoding module may apply a generic lossless compression algorithm to compress the pre processed virtualized data to a predetermined level for example for sending to the receiving client device . In some embodiments in order to balance a resultant quality and or data rate of the compressed encoded virtualized data the encoding module may apply a content aware encoding and or compression scheme i.e. applying different encoding and or compression algorithms for different types or formats of the virtualized data. Furthermore in some embodiments the encoding module may apply different and adaptive encoding and or compression algorithms based on characteristics of the data at different regions and times even with the same data type. Examples of applications of different encoding or compression algorithms for different types or formats of virtualized data will be described in more detail hereinafter.

After encoding and or compressing the pre processed virtualized data the sending module may transmit or put the compressed virtualized data into the network for other client devices connected to the network to share and utilize. Furthermore the sending module may serve as a system coordinator to coordinate operations and or behaviors of the other modules e.g. the pre processing module and the encoding module in the virtualization interconnection layer of the client device . Additionally or alternatively the sending module may negotiate with the virtualization interconnection layer of another client device . Examples of negotiation may include but are not limited to an extent of data transformation or processing that the other client device may perform for the client device of the sending module and or an extent of data transformation or processing that the client device of the sending module may perform for the other client device etc.

Additionally or alternatively the sending module may monitor network conditions of the network including for example bandwidth and delay. The sending module may adaptively guide the pre processing module and the encoding module to adapt to changes in the network conditions and or changes in capabilities such as memory storage workload etc. of the client device and or one or more client devices that receive the virtualized data stream. In some embodiments the sending module may encrypt sensitive data included in the compressed virtualized data stream prior to sending the data stream to the network .

In one embodiment the sending module may further broadcast a presence of the client device in a proximity or neighborhood of the client device . Additionally or alternatively the sending module may broadcast the presence of the client device via the network . For example the sending module may send a broadcast message using a network protocol such as Simple Service Discovery Protocol SSDP to the network allowing other client devices to discover the presence of the client device . Additionally the sending module may further broadcast one or more capabilities e.g. abilities to display video and image play audio receive user input through a user interface such as a touchscreen etc. data qualities such as display resolution audio quality etc. acceptable data formats and or types etc. The sending module may broadcast or advertise the virtualization interconnection layer and or corresponding client device as a service to other client devices of the same home cloud system or network .

Additionally or alternatively the sending module may detect or discover one or more client devices by receiving a broadcast message from the one or more client devices in a proximity or neighborhood of the client device and or through the network . In some embodiments depending on content on the client device that the user is currently or actively interacting with the sending module may adaptively or proactively discover or recommend one or more client devices that may provide a better experience to the user with respect to the content that the user is consuming. For example if the user is watching a video on the client device the sending module of the client device may detect or determine whether one or more other client devices may be used for providing a better display resolution or size for the video for example. The sending module may provide a prompt to the user that he she may switch to watch the video on another client device found.

Additionally or alternatively in some embodiments the sending module may further be configured to authenticate and verify one or more client devices that attempt to connect to the client device of the sending module before finally establishing the connections with the one or more client devices . Furthermore in one embodiment the sending module may encrypt sensitive data present in the virtualized data stream to avoid other unrelated or unauthenticated devices from intercepting or tampering the sensitive data. Moreover the sending module may support error resilience due to a loss of data or data packets in the virtualized data stream during data transmission in the network .

Upon discovering authenticating and or connecting the one or more other client devices the sending module may switch to real time and low delay transmission of the virtualized data stream from the sending client device to the receiving client device . In some embodiments the sending module may render a low delay having a predetermined time threshold as a criterion for smooth and natural user interaction for the user . This is because the virtualized data VI and VO for example needs to go through a network layer where a transmission delay may be introduced in addition to delays due to data pre processing encoding decoding and or post processing etc. In order to facilitate provision of a low delay in one embodiment a streaming sending buffer and a streaming receiving buffer may be deployed with the sending module and the receiving module respectively.

Additionally or alternatively the sending module may guide the encoding module to adaptively implement a rate control algorithm according to available channel bandwidth in the network . Additionally or alternatively in some embodiments the sending module may identify which region and or object in the virtualized data stream may be the focus of attention of the user e.g. a button pressed in an application etc. and prioritize a sending order of regions and or objects in the virtualized data stream having some regions and or objects having a higher priority to be updated or sent faster or more frequently than others having a lower priority. Additionally or alternatively the virtualized data and locally rendered data which represents most actively changed portions may be combined so that delay for this type of content may no longer be an issue.

In one embodiment the sending module may further detect and signal to other modules e.g. the pre processing module and the encoding module of its associated client device and the other modules of the client device that receives the virtualized data stream etc. that a channel error such as a packet loss or error has occurred to allow the other modules to take proper actions to recover or compensate for the error at the sending client device or the receiving client device .

Since the home cloud system adopts a network based service model in some embodiments the home cloud system may not know in advance what kinds of client devices are connected thereto and or in what kind of network conditions the home cloud system is connected. In one embodiment the sending module may facilitate adaptation of one or more services of the client device for one or more other client devices that are connected to the network and the network conditions. By way of example and not limitation the sending module may perform negotiation with another client device at the time when a connection is established with the other client device . Additionally or alternatively the sending module may perform adaptation with the other client device continuously or regularly when transmitting the virtualized data stream to the other client device .

For example at the time of establishing a connection the sending module of the client device and the receiving module of another client device may exchange information regarding capabilities such as screen resolutions pre processing post processing capabilities encoding decoding capabilities acceptable data types or formats input or output capabilities etc. etc. The sending module may coordinate with other modules e.g. the pre processing module and the encoding module in the virtualization interconnection layer to select a suitable configuration to meet the needs of the other client device .

After establishing the connection the sending module of the client device may constantly monitor network conditions such as network bandwidth network delay rate of packet loss etc. and data transmission health conditions etc. within a predetermined time interval. Additionally or alternatively the sending module may detect changes that may occur in one or more client devices to which the client device of the sending module is connected. Based on the above collected information the sending module may direct other modules e.g. the pre processing module and the encoding module to change one or more operations e.g. performing additional pre processing operations etc. to adapt to the current situation. For example if a bandwidth change is detected the sending module may inform the encoding module to change a bit rate of the virtualized data stream to adapt to this bandwidth change.

In some embodiments the client device may receive a virtualized data stream from another client device through the virtualization system via the network . For example the client device may receive the virtualized data stream from another client device through the receiving module of the receiving virtualization interconnection node of the virtualization system . In one embodiment the receiving module may perform one or more operations similar to or complementary to the sending module . For example the receiving module may identify or verify identity of the other client device and or the virtualized data stream and determine the authenticity of the other client device or a source of the virtualized data stream.

Additionally or alternatively the receiving module may decrypt a certain part of data included in the received virtualized data stream if the certain part of data is encrypted. Additionally or alternatively the receiving module may facilitate adaptation of the home cloud computing system in response to changes e.g. changes in network conditions capabilities of one or more client devices etc. by exchanging information regarding capabilities of the client device and other client devices with the sending modules of the other client devices .

In one embodiment after receiving the virtualized data stream and performing one or more operations such as identity verification decryption etc. on the received virtualized data stream the receiving module may forward the received virtualized data stream to the decoding module for decoding and or decompression. In one embodiment the decoding module may decode and or decompress the received virtualized data stream in an opposite way that the encoding module of the other client device has done on the received virtualized data stream. For example as described in the foregoing embodiments the two client devices or the virtualization system of the two client devices may have negotiated and established respective responsibilities for data to be transmitted therebetween when a connection between the client devices is established and may renegotiate again after the connection when a change e.g. changes in capabilities of the client devices network conditions etc. . Based on a result of the negotiation the decoding module may know what encoding and or compression algorithm the encoding module of the other client device has applied on the received virtualized data stream and therefore select an appropriate or an agreed upon decoding and or decompression algorithm to decode and or decompress the received virtualized data stream.

Upon decoding and or decompressing the received virtualized data stream the post processing module of the receiving virtualization interconnection node of the client device may process the decoded decompressed virtualized data stream. In one embodiment the post processing module may perform the same or similar operations that the pre processing module may perform. Additionally or alternatively in some embodiments the post processing module may perform other operations including but not limited to post filtering to remove compression artifacts due to lossy compression for example error resilience hiding when data losses or errors occur interpolation extrapolation recovery of data that may have been intentionally dropped at the encoding module of the other client device due to for example poor network condition or low processing power etc.

In one embodiment the number and or types of operations to be performed by the post processing module associated with the client device may depend on the number and or types of operations that have been done by the pre processing module associated with the other client device . This dependence may be one of the information to be established within the negotiation between the two client devices as described in the foregoing embodiments. For example in some embodiments so long as an output from the post processing module is an acceptable input to the client device how to partition workload or operations between the post processing module associated with the client device and the pre processing module associated with the other client device to achieve a modality transformation or conversion is flexible. In some embodiments a partition between workloads or operations of two client devices or virtualization systems associated with the two client devices may depend on factors such as compression efficiency bandwidth processing capability power consumption etc. associated with the two client devices . A modality transform refers to a transformation from an input to a pre processing module associated with one client device to an output to a post processing module associated with another client device .

In one embodiment the virtualization system may further include other program data . The other program data may include log data that records information of one or more other client devices to which the virtualization system of the client device have connected. The record information may include for example device identification of the one or more previously connected client devices capabilities input output computing storage etc. of the one or more previously connected client devices etc. Additionally or alternatively the log data may include information about user preference for example which one or more client devices the user most likely or often uses when watching a video which one or more client devices the user most likely or often uses when reading a text e.g. a web page etc. Additionally or alternatively the log data may include information about which one or more client devices are most often or likely used by the user during a particular time period.

In one embodiment the virtualization system may employ this information to establish connections among these client devices beforehand while leaving other client devices in a waiting or disconnected state for connection to avoid the client device from establishing too many network connections with other client devices that are not needed and hence saving the resources of the client device from wasting. Additionally or alternatively the virtualization system may use the log data to re establish and or authenticate future connections and data communication with other previously connected client devices .

In one embodiment the home cloud computing system may further provide a unified programming model. The programming model may allow developers of software applications e.g. the applications etc. and or the client devices to build applications that may be adapted to other output e.g. display and or input e.g. user interface UI devices e.g. personal computers televisions slate computers mobile devices etc. which separate functionality of user interaction from main computing functions. The programming model may automatically or semi automatically i.e. with human intervention or input determine a way for user interaction both inputs and outputs adaptation.

Given the virtualization interconnection layer inputs and outputs of associated client device may be arbitrarily redirected to another client device as if the inputs and the outputs are physically attached or connected to the other client device . Given the programming model and the virtualization interconnection layer existing applications in the client device may not need to be updated for this redirection and the virtualization interconnection layer may be responsible for converting one mode or type format version etc. of virtualized input or output to another mode or type format version etc. that may be acceptable to the other client device . For example a touch input on a slate computer may be converted into a mouse input for a desktop computer while a screen output of a desktop computer may be scaled to be displayed in a screen of a mobile device etc.

Furthermore given the programming model new applications may have more flexibility to aggregate new input and or output capabilities that may or may not be physically attached or connected to a computing or client device . The home cloud computing system leverage natural UI devices such as touch Kinect camera on one or more client devices to control behaviors and or operations of one or more other client devices and or new applications on the one or more other client devices . Additionally or alternatively the home cloud computing system may leverage rendering processing and or other computing operations or resources on multiple client devices and combine inputs and or outputs of these client devices with input and or output of another client device to form a computing platform for special applications. For example a delay sensitive object e.g. a graphical UI button a fillable form a pull down menu a foreground active game character etc. may be rendered on a client device locally while computationally intensive but delay tolerant tasks may be offloaded to other computing or client devices . The other client devices may then pass back only outputs or results of these computationally intensive but delay tolerant tasks to the client device in which the delay sensitive object is locally rendered to form a final result for display to the user . No additional hardware and or software other than the virtualization interconnection layer may be needed for these operations.

Although the foregoing embodiments describe a home computing environment the foregoing embodiments may be readily applicable to cloud computing and mobile computing. For example if the user moves outside his her home the user may still enjoy the benefits of the home cloud computing system with his her mobile device and cloud devices as the plurality of client devices of the home cloud computing system.

As described in the foregoing embodiments the encoding module may apply different encoding or compression algorithms for different types or formats of data in the virtualized data forwarded by the pre processing module . By way of example and not limitation three encoding compression algorithms for different types of data namely frame based screen data encoding object based screen data encoding and UI control data encoding are described herein. It should be noted however that these encoding compression algorithms are described herein for illustration purpose. The present disclosure is not limited to these encoding compression algorithms and these types of data.

In one embodiment the virtualized captured screen from the client device may be represented as a sequence of display images organized in a temporal order. The virtualized screen may include pictorial graphical and textual contents that may be different from normal natural video. In one embodiment the encoding module may employ a specific screen codec for frame based screen coding. An example of the specific screen codec is described in the U.S. Pat. No. 8 180 165 issued on May 15 2012 titled Accelerated Screen Codec the entirety of which is incorporated by reference herein. Additionally in some screen virtualization scenarios the encoding module may obtain additional information besides a time series of frame based screen images. For example given an OS operating system or application support such as objects in a web browser application that may be obtained through parsing a web page the encoding module may obtain original compressed bitstreams of image or video objects. In this scenario the encoding module may simply redirect the original compressed bitstreams of the screen image or video objects to a receiving client device that receives the virtualized data stream instead of compressing the sequence of frame based screen images. In this case the virtualized screen may be a composition of the sequence of frame based images and or image and video objects. Furthermore in an event that the receiving client device has a display that is able to display part of the virtualized screen the encoding module may only encode or compress the part to be displayed and send the encoded part to the receiving client device through the sending module in order to save both computing power and network bandwidth.

Additionally or alternatively in some embodiments the encoding module may decompose virtualized screen data into objects for predetermined screen types i.e. applying object based screen data encoding. For example for virtualized display of some specific applications such as a web browser application an entire web page may be rendered as an image with object and metadata information at the sending client device . The encoding module may encode web regions that are visible on a display of the receiving client device . In one embodiment the decomposed screen data may include for example object metadata redirectable media objects unredirectable media objects and background image data etc. The object metadata include object information such as hyperlink input text box etc. The encoding module may encode object type position and or shape for example using conventional lossless coding scheme such as ZIP coding scheme.

The redirectable media objects correspond to media objects that may be handled by the receiving client device or the virtualization system of the receiving client device . The redirectable media objects may include for example GIF animations video objects with specific formats etc. By redirecting these redirectable media objects to the receiving client device repeated encoding and transmission of the redirectable media objects may be avoided thus improving bandwidth usage and transmission delay.

The unredirectable media objects correspond to media objects that may be extracted from a web browser engine and may be handled or decoded by the receiving client device or the virtualization system of the receiving client device . In this case the encoding module may transcode these media objects into a media format that is accepted or supported by the receiving client device . For example if the receiving client device supports WMV Windows Media Video format but not Flash format the encoding module may transcode the Flash formatted video into the WMV formatted video before sending the video to the receiving client device .

The background image data correspond to the remaining content on the rendered web page that may be taken as a time series of background images. The background image data may include dynamically changed regions e.g. an unextractable video or animation. The encoding module may apply a specific screen codec e.g. the screen codec that is described in the above referenced US patent to encode or compress the background image data. Furthermore in order to improve a compression ratio a buffer may be deployed at or with the encoding module of the sending client device and another buffer at or with the decoding module of the receiving client device to cache or store the background image data. For encoding visible regions of a current web page that are to be sent to the receiving client device the encoding module may compute differences between the visible regions of the current web page and corresponding regions that are cached or stored in the buffer for example in terms of temporal and or spatial predictions. The encoding module may encode only the differences which may then be sent to the receiving client device .

In some embodiments the encoding module may encode the redirectable media objects as background image using the same screen codec as described in the referenced US patent. For example if only a small part of a picture having a high resolution in a web page or a downsized portion thereof is to be shown in a display of the receiving client device the encoding module may re encode the picture as a part of the background image data and redirect a full resolution image to the receiving client device or the virtualization system of the receiving client device . Depending on specific situations of the home cloud computing system and or current screen content the encoding module may flexibly adapt to different situations to select and provide an efficient composition and compression scheme to improve the performance of the home cloud computing system.

In general the object based web page image coding scheme as described above is extendable to encode virtualized data streams from other applications if for example similar metadata and data objects can be extracted from their virtualized data and associated side information. Using the object based screen data coding new features including for example data object redirection mixed composition UI customization enabled object caching and selective transmission etc. may be obtained. In one embodiment the data object redirection is referred to as capturing certain virtualized data objects in a compressed format directly passing the captured objects to the virtualization interconnection layer of the receiving client device and decoding or rendering the captured objects in the receiving client device based on its native acceptable data format.

The mixed composition feature corresponds to mixing locally captured or rendered data objects in a client device with virtualized data objects from another client device to form or compose a final data input or output for one or more client devices e.g. the client device where the data objects are locally captured or rendered . This may avoid a round trip delay to respond to certain user interactions otherwise needed in a completely virtualized remote solution e.g. text input box graphical control button pull down menu etc. Furthermore the mixed composition feature provides a flexible solution for both local and remote client devices to collaborate for delivery of better user experience through mixed inputs or mixed outputs.

The UI customization corresponds to flexible combination of virtualized UI control modalities e.g. game controller keyboard mouse Kinect touch surface voice audio and video etc. to fit specific user scenarios. Moreover within each modality UI control data objects e.g. extracted gesture data from Kinect data may be extracted from part or all of the virtualized data and sent to the virtualization interconnection layer of the receiving client device either alone or along with virtualized raw or compressed data e.g. virtualized raw or compressed Kinect data . Furthermore the object based screen data coding may enable prioritized processing encoding and transmission of regions or objects such as UI control for example that have stringent latency requirements from the sending client device to the receiving client device .

Additionally by using the buffer at or with the encoding module and the decoding module repeated objects may be cached for reuse and or manipulation in the receiving client device without re transmission. Furthermore the encoding module may selectively encode only relevant data objects for sending to the receiving client device through the sending module .

In some embodiments because of virtualization of input data that is put in the virtualization interconnection layer of the virtualization system different UI modalities on the plurality of client devices may be shared and leveraged for enhanced user experience. For human computer interaction a variety of types of UI and sensor input data may be generated. These UI and sensor data may be transferred from one client device to another client device and vice versa through respectively virtualization interconnection layers to bring new UI controls without locally attaching the UI controls to the client devices . For example touch control data of a client device e.g. a mobile phone may be transferred to another client device e.g. a tablet to control the latter. On the other hand gesture control data generated from a Kinect camera that is attached to a client device e.g. Xbox may also be delivered to another client device e.g. a desktop computer to control an application in the other client device .

Depending on a transfer rate for transferring UI sensor input data from one client device to another client device the UI sensor input data may be divided into a plurality of categories. By way of example and not limitation a first category may include a low rate raw input data with raw data rate generated by a corresponding UI device or sensor is less than a first predetermined rate threshold. These raw data may be directly interpreted by a client device . Examples of UI devices or sensors may include for example a keyboard a mouse a joystick a game controller etc. Although the bit rate for this type of raw data is low this type of data is normally sensitive to errors or losses which may cause the client device to behave differently. For this type of data the encoding module may transmit the raw data uncompressed if a corresponding bit rate is less than a predetermined threshold or use a simple or generic lossless compression algorithm such as ZIP or LZW algorithm to compress the raw data before sending if an extra but rate saving is desirable at a system level.

A second category may include moderate to high rate i.e. data rate is between the first rate threshold and a second rate threshold for example raw input data which may become low rate processed data after pre processing by the pre processing module at the sending client device . Examples of this second type of raw data include but are not limited to two dimensional images from a touch surface audio input data visual data from a camera visual and depth information from a Kinect sensor time series of data from an accelerometer and or a gyroscope data from a contextual or ambient sensor such as satellite data received by GPS orientation data from a compass sensor data from a light sensor and other possible sensors attached to the client device .

Although its raw data rate is moderate to high in many cases these raw data may be first pre processed by the pre processing module or the client device to which corresponding UI sensor devices are attached through hardware or software solutions. In some cases the pre processing functions may be collocated with the UI sensor devices for improved efficiency. After the pre processing the processed data rate may be significantly reduced for example from raw 2D images to high level touch gestures from raw Kinect visual and depth data to body gestures from audio input to recognized texts or commands from visual data to identified object extracted features from received satellite data to location coordinates etc. This kind of processed data becomes high level UI inputs which have low data rate but are more sensitive to errors or losses. In one embodiment the encoding module may transmit the raw data uncompressed if a corresponding bit rate is less than a predetermined threshold or use a simple or generic lossless compression algorithm such as ZIP or LZW algorithm to compress the raw data before sending if an extra but rate saving is desirable at a system level.

A third category may include raw input data that have moderate to high data rate generated by NUI or sensor devices and the sending client device does not have enough pre processing capabilities or the raw data need to be sent to the receiving client device for further data processing or manipulation. In one embodiment the encoding module need to compress this type or kind of raw input data to a much lower data rate than its original raw data rate to fit into the network for making the home cloud computing system feasible. Furthermore the encoding module may select a compression algorithm for this kind of raw input data based on one or more other factors such as a low latency criterion for enabling a natural and smooth user experience. Depending on the nature and or characteristics of the raw input data the encoding module may select a compression algorithm that may be specific to the data type of the raw input data. In some embodiments the encoding module may select a lossy compression algorithm in order to achieve a desired data compression ratio for this kind of raw input data while enabling high level UI controls that are extracted at the receiving client device as close to those that are extracted at the sending client device locally as much as possible. For example the encoding module may select and employ compression algorithms or schemes that are tuned to respective data characteristics of the raw input data having a low latency criterion. For example for data types such as voice audio image and video the encoding module may apply existing standard coding schemes to compress them e.g. MPS for audio data H.264 for video data JPEG for image data etc.

Method is described in the general context of computer executable instructions. Generally computer executable instructions can include routines programs objects components data structures procedures modules functions and the like that perform particular functions or implement particular abstract data types. The method can also be practiced in a distributed computing environment where functions are performed by remote processing devices that are linked through a communication network. In a distributed computing environment computer executable instructions may be located in local and or remote computer storage media including memory storage devices.

The exemplary method is illustrated as a collection of blocks in a logical flow graph representing a sequence of operations that can be implemented in hardware software firmware or a combination thereof. The order in which the method is described is not intended to be construed as a limitation and any number of the described method blocks can be combined in any order to implement the method or alternate methods. Additionally individual blocks may be omitted from the method without departing from the spirit and scope of the subject matter described herein. In the context of software the blocks represent computer instructions that when executed by one or more processors perform the recited operations. In the context of hardware some or all of the blocks may represent application specific integrated circuits ASICs or other physical components that perform the recited operations.

Referring back to at block a first device equipped with a virtualization system detects a presence of a second device in a proximity or neighborhood of the first device.

At block the virtualization system of the first device establishes or initiates a network connection with the virtualization system of the second device .

At block the virtualization system of the first device determines or receives information of functional capabilities of the second device .

At block the virtualization system of the first device negotiates with the virtualization system of the second device with respect to one or more responsibilities on data communicated therebetween. For example the virtualization system of the first device negotiates with the virtualization system of the second device on an extent of data transformation to be performed by the first device for the second device and an extent of data transformation to be performed by the second device for the first device based on the functional capabilities of the second device and functional capabilities of the first device .

At block the virtualization system of the first device virtualizes of the first device as virtualized data. In one embodiment the virtualization system of the first device virtualizes the data of the first device by generating output data at the first device without locally presenting the output data in a display of the first device and or capturing input data through a user interface of the first device without locally processing the input data at the first device .

At block the virtualization system of the first device transforms the virtualized data into a virtualized data stream in a virtualization interconnection layer based on a result of the negotiation between the first device and the second device . In one embodiment the virtualization system of the first device may pre process the virtualized data to a predetermined extent that has been agreed upon between the first device and the second device based on the result of the negotiation. Additionally or alternatively the virtualization system of the first device may encode the pre processed virtualized data using different algorithms for different types of data included in the virtualized data.

At block the virtualization system of the first device sends the compressed or encoded virtualized data stream from the first device to the second device to leverage resources of the first device and the second device .

Although the above acts are described to be performed by the virtualization system one or more acts that are performed by the virtualization system may be performed by the client device or other software or hardware of the client device and or any other computing device e.g. the server . For example a sending client device may virtualize data thereof and send the virtualized data to the server via the network . The server may pre process and encode the virtualized data based on a data type or format that is acceptable to a receiving client device a client device that receives the virtualized data and send the processed and encoded virtualized data to the receiving client device . The sending client device and or the server may constantly monitor network conditions and or computing conditions of the receiving client device and perform adaptation to data pre processing and data transmission accordingly in response to detecting or determining that a change in the network conditions and or computing conditions of the receiving client device occurs.

Any of the acts of any of the methods described herein may be implemented at least partially by a processor or other electronic device based on instructions stored on one or more computer readable media. By way of example and not limitation any of the acts of any of the methods described herein may be implemented under control of one or more processors configured with executable instructions that may be stored on one or more computer readable media such as one or more computer storage media.

Although embodiments have been described in language specific to structural features and or methodological acts it is to be understood that the claims are not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as exemplary forms of implementing the claimed subject matter.

