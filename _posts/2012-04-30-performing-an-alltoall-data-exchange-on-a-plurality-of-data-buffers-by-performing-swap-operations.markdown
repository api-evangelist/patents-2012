---

title: Performing an all-to-all data exchange on a plurality of data buffers by performing swap operations
abstract: Methods, apparatus, and products are disclosed for performing an all-to-all exchange on n number of data buffers using XOR swap operations. Each data buffer has n number of data elements. Performing an all-to-all exchange on n number of data buffers using XOR swap operations includes for each rank value of i and j where i is greater than j and where i is less than or equal to n: selecting data element i in data buffer j; selecting data element j in data buffer i; and exchanging contents of data element i in data buffer j with contents of data element j in data buffer i using an XOR swap operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08775698&OS=08775698&RS=08775698
owner: International Business Machines Corporation
number: 08775698
owner_city: Armonk
owner_country: US
publication_date: 20120430
---
This application is a continuation application of and claims priority from U.S. patent application Ser. No. 12 176 816 filed on Jul. 21 2008.

The field of the invention is data processing or more specifically methods apparatus and products for performing an all to all exchange on n number of data buffers using XOR swap operations.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

Parallel computing is an area of computer technology that has experienced advances. Parallel computing is the simultaneous execution of the same task split up and specially adapted on multiple processors in order to obtain results faster. Parallel computing is based on the fact that the process of solving a problem usually can be divided into smaller tasks which may be carried out simultaneously with some coordination.

Parallel computers execute parallel algorithms. A parallel algorithm can be split up to be executed a piece at a time on many different processing devices and then put back together again at the end to get a data processing result. Some algorithms are easy to divide up into pieces. Splitting up the job of checking all of the numbers from one to a hundred thousand to see which are primes could be done for example by assigning a subset of the numbers to each available processor and then putting the list of positive results back together. In this specification the multiple processing devices that execute the individual pieces of a parallel program are referred to as compute nodes. A parallel computer is composed of compute nodes and other processing nodes as well including for example input output I O nodes and service nodes.

Parallel algorithms are valuable because it is faster to perform some kinds of large computing tasks via a parallel algorithm than it is via a serial non parallel algorithm because of the way modern processors work. It is far more difficult to construct a computer with a single fast processor than one with many slow processors with the same throughput. There are also certain theoretical limits to the potential speed of serial processors. On the other hand every parallel algorithm has a serial part and so parallel algorithms have a saturation point. After that point adding more processors does not yield any more throughput but only increases the overhead and cost.

Parallel algorithms are designed also to optimize one more resource the data communications requirements among the nodes of a parallel computer. There are two ways parallel processors communicate shared memory or message passing. Shared memory processing needs additional locking for the data and imposes the overhead of additional processor and bus cycles and also serializes some portion of the algorithm. Message passing processing uses high speed data communications networks and message buffers but this communication adds transfer overhead on the data communications networks as well as additional memory need for message buffers and latency in the data communications among nodes. Designs of parallel computers use specially designed data communications links so that the communication overhead will be small but it is the parallel algorithm that decides the volume of the traffic.

Many data communications network architectures are used for message passing among nodes in parallel computers. Compute nodes may be organized in a network as a torus or mesh for example. Also compute nodes may be organized in a network as a tree. A torus network connects the nodes in a three dimensional mesh with wrap around links. Every node is connected to its six neighbors through this torus network and each node is addressed by its x y z coordinate in the mesh. In a tree network the nodes typically are connected into a binary tree each node has a parent and two children although some nodes may only have zero children or one child depending on the hardware configuration . In computers that use a torus and a tree network the two networks typically are implemented independently of one another with separate routing circuits separate physical links and separate message buffers.

While a torus network lends itself to point to point operations a tree network typically is inefficient in point to point communication. A tree network however does provide high bandwidth and low latency for certain collective operations message passing operations where all compute nodes participate simultaneously such as for example an all to all operation. An all to all operation is a collective operation on an operational group of compute nodes that sends data from ranked segments of send buffers of all compute nodes into receive buffers in all compute nodes in rank order. The size of each ranked segment of the send buffer may be fixed or vary. Each compute node transmits the contents of each ranked segment of its send buffer only to a correspondingly ranked compute node. The contents of ranked segment 0 go to compute node of rank 0. The contents of ranked segment 1 go to compute node of rank 1 and so on. Each compute node upon receiving the data places it in rank order in a ranked segment of its receive buffer according to the rank of the sending compute node. Data from compute node of rank 0 goes in ranked segment 0. Data from compute node of rank 1 goes in ranked segment 1 and so on. Upon conclusion of an all to all operation each compute node s receive buffer contains in rank order all the data from correspondingly ranked segments of the send buffers of all compute nodes in the operational group. The effect of an all to all operation is that all receive buffers in all compute nodes of an operational group contain different data a matrix inversion of the data sent from the send buffers.

The drawback to current implementations of an all to all operation is that such implementations typically involves two sets of buffers one set of buffers containing the data before the all to all operation and another set of buffers for storing the result of the all to all operation. Because the size of buffers typically involved in an all to all operation is often quite large and the amount of computer memory on each node is limited utilizing two sets of buffers on the compute nodes consumes valuable memory resources that could otherwise be freed for additional storage needs.

Methods apparatus and products are disclosed for performing an all to all exchange on n number of data buffers using XOR swap operations. Each data buffer has n number of data elements. Performing an all to all exchange on n number of data buffers using XOR swap operations includes for each rank value of i and j where i is greater than j and where i is less than or equal to n selecting data element i in data buffer j selecting data element j in data buffer i and exchanging contents of data element i in data buffer j with contents of data element j in data buffer i using an XOR swap operation.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and computer program products for performing an all to all exchange on n number of data buffers using XOR swap operations according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . illustrates an exemplary parallel computer for performing an all to all exchange on n number of data buffers using XOR swap operations according to embodiments of the present invention. The system of includes a parallel computer non volatile memory for the computer in the form of data storage device an output device for the computer in the form of printer and an input output device for the computer in the form of computer terminal . Parallel computer in the example of includes a plurality of compute nodes for executing an application that processes application data.

Each compute node of may include a plurality of processors for use in executing an application on the parallel computer according to embodiments of the present invention. The processors of each compute node in are operatively coupled to computer memory such as for example random access memory RAM . Each compute node may operate in several distinct modes that affect the relationship among the processors and the memory on that node such as for example serial processing mode or parallel processing mode. The mode in which the compute nodes operate is generally set during the node s boot processes and does not change until the node reboots.

In serial processing mode often referred to a virtual node mode the processors of a compute node operate independently of one another and each processor has access to a partition of the node s total memory that is exclusively dedicated to that processor. For example if a compute node has four processors and two Gigabytes GB of RAM when operating in serial processing mode each processor may process a thread independently of the other processors on that node and each processor may access a 512 Megabyte MB portion of that node s total 2 GB of RAM.

In parallel processing mode often referred to as symmetric multi processing mode one of the processors acts as a master and the remaining processors serve as slaves to the master processor. Each processor has access to the full range of computer memory on the compute node. Continuing with the exemplary node above having four processors and 2 GB of RAM for example each slave processor may cooperatively process threads spawned from the master processor and all of the processors have access to the node s entire 2 GB of RAM.

The compute nodes are coupled for data communications by several independent data communications networks including a Joint Test Action Group JTAG network a global combining network which is optimized for collective operations and a point to point network which is optimized point to point operations. The global combining network is a data communications network that includes data communications links connected to the compute nodes so as to organize the compute nodes in a tree topology. Each data communications network is implemented with network links among the compute nodes . Each network link includes a physical transmission pathway between two adjacent compute nodes in network topology. That is a network link directly connects two adjacent compute nodes in the network topology without the use of any intervening nodes. The network links provide data communications for parallel operations among the compute nodes of the parallel computer. The links between compute nodes are bi directional links that are typically implemented using two separate directional data communications paths.

In addition the compute nodes of parallel computer are organized into at least one operational group of compute nodes for collective parallel operations on parallel computer . An operational group of compute nodes is the set of compute nodes upon which a collective parallel operation executes. Collective operations are implemented with data communications among the compute nodes of an operational group. Collective operations are those functions that involve all the compute nodes of an operational group. A collective operation is an operation a message passing computer program instruction that is executed simultaneously that is at approximately the same time by all the compute nodes in an operational group of compute nodes. Such an operational group may include all the compute nodes in a parallel computer or a subset all the compute nodes. Collective operations are often built around point to point operations. A collective operation requires that all processes on all compute nodes within an operational group call the same collective operation with matching arguments. A broadcast is an example of a collective operation for moving data among compute nodes of an operational group. A reduce operation is an example of a collective operation that executes arithmetic or logical functions on data distributed among the compute nodes of an operational group. An operational group may be implemented as for example an MPI communicator. 

 MPI refers to Message Passing Interface a prior art parallel communications library a module of computer program instructions for data communications on parallel computers. Examples of prior art parallel communications libraries that may be improved for use with systems according to embodiments of the present invention include MPI and the Parallel Virtual Machine PVM library. PVM was developed by the University of Tennessee The Oak Ridge National Laboratory and Emory University. MPI is promulgated by the MPI Forum an open group with representatives from many organizations that define and maintain the MPI standard. MPI at the time of this writing is a de facto standard for communication among compute nodes running a parallel program on a distributed memory parallel computer. This specification sometimes uses MPI terminology for ease of explanation although the use of MPI as such is not a requirement or limitation of the present invention.

Some collective operations have a single originating or receiving process running on a particular compute node in an operational group. For example in a broadcast collective operation the process on the compute node that distributes the data to all the other compute nodes is an originating process. In a gather operation for example the process on the compute node that received all the data from the other compute nodes is a receiving process. The compute node on which such an originating or receiving process runs is referred to as a logical root.

Most collective operations are variations or combinations of four basic operations broadcast gather scatter and reduce. The interfaces for these collective operations are defined in the MPI standards promulgated by the MPI Forum. Algorithms for executing collective operations however are not defined in the MPI standards. In a broadcast operation all processes specify the same root process whose buffer contents will be sent. Processes other than the root specify receive buffers. After the operation all buffers contain the message from the root process.

In a scatter operation the logical root divides data on the root into segments and distributes a different segment to each compute node in the operational group. In scatter operation all processes typically specify the same receive count. The send arguments are only significant to the root process whose buffer actually contains sendcount n elements of a given data type where n is the number of processes in the given group of compute nodes. The send buffer is divided and dispersed to all processes including the process on the logical root . Each compute node is assigned a sequential identifier termed a rank. After the operation the root has sent sendcount data elements to each process in increasing rank order. Rank 0 receives the first sendcount data elements from the send buffer. Rank 1 receives the second sendcount data elements from the send buffer and so on.

A gather operation is a many to one collective operation that is a complete reverse of the description of the scatter operation. That is a gather is a many to one collective operation in which elements of a datatype are gathered from the ranked compute nodes into a receive buffer in a root node.

A reduce operation is also a many to one collective operation that includes an arithmetic or logical function performed on two data elements. All processes specify the same count and the same arithmetic or logical function. After the reduction all processes have sent count data elements from computer node send buffers to the root process. In a reduction operation data elements from corresponding send buffer locations are combined pair wise by arithmetic or logical operations to yield a single corresponding element in the root process s receive buffer. Application specific reduction operations can be defined at runtime. Parallel communications libraries may support predefined operations. MPI for example provides the following pre defined reduction operations 

In addition to compute nodes the parallel computer includes input output I O nodes coupled to compute nodes through the global combining network . The compute nodes in the parallel computer are partitioned into processing sets such that each compute node in a processing set is connected for data communications to the same I O node. Each processing set therefore is composed of one I O node and a subset of compute nodes . The ratio between the number of compute nodes to the number of I O nodes in the entire system typically depends on the hardware configuration for the parallel computer. For example in some configurations each processing set may be composed of eight compute nodes and one I O node. In some other configurations each processing set may be composed of sixty four compute nodes and one I O node. Such example are for explanation only however and not for limitation. Each I O nodes provide I O services between compute nodes of its processing set and a set of I O devices. In the example of the I O nodes are connected for data communications I O devices through local area network LAN implemented using high speed Ethernet.

The parallel computer of also includes a service node coupled to the compute nodes through one of the networks . Service node provides services common to pluralities of compute nodes administering the configuration of compute nodes loading programs into the compute nodes starting program execution on the compute nodes retrieving results of program operations on the computer nodes and so on. Service node runs a service application and communicates with users through a service application interface that runs on computer terminal .

As described in more detail below in this specification the parallel computer in includes computer program instructions for performing an all to all exchange on n number of data buffers using XOR swap operations according to embodiments of the present invention. Each data buffer has n number of data elements. For each rank value of i and j where i is greater than j and where i is less than or equal to n the parallel computer in operate generally for performing an all to all exchange on n number of data buffers using XOR swap operations according to embodiments of the present invention by selecting data element i in data buffer j selecting data element j in data buffer i and exchanging contents of data element i in data buffer j with contents of data element j in data buffer i using an XOR swap operation.

An all to all exchange is an operation in which a portion of the contents of each data buffer is exchanged with a portion of the contents of each of the other buffers. The contents of the buffers are exchanged based on the rank value of each data buffer and the rank value of the data element containing the contents in each buffer. The term rank value in reference to data elements and data buffers refers to a non negative integer used to uniquely identify a particular data buffer or a particular data element of a data buffer. Consider rank values i and j. In an all to all exchange the contents of data element i in data buffer j are exchanged with the contents of data element j in data buffer i. For example the contents of the data element having a rank of 2 in a data buffer having a rank of 1 are exchanged with the contents of the data element having a rank of 1 in a data buffer having a rank of 2. The contents of the data element having a rank of 3 in a data buffer having a rank of 1 are exchanged with the contents of the data element having a rank of 1 in a data buffer having a rank of 3. The contents of the data element having a rank of 3 in a data buffer having a rank of 1 are exchanged with the contents of the data element having a rank of 1 in a data buffer having a rank of 3 and so on.

Applications executing on parallel computers such as for example the parallel computer of often utilize an all to all data exchange as part of a matrix transpose operation. Each buffer stored on each compute node of the parallel computer represents one of the rows of a matrix. For example the data buffer having a rank value of one represents the first row of the matrix. The data buffer having a rank value of two represents the second row of the matrix and so on. The data elements in each data buffer correspond to columns of the matrix. For example the data element of each buffer having a rank value of one corresponds to the first column of the matrix. The data element of each buffer having a rank value of two corresponds to the second column of the matrix and so on. Because each data buffer represents a row of the matrix and each data element corresponds to a column of the matrix performing an all to all data exchange on the buffers essentially transposes the matrix.

Matrix transposition operations are useful in a wide variety of computational algorithms. For example Fast Fourier Transform algorithms use matrix transpose operations to transform data specified in one domain to another domain. Fast Fourier Transform algorithms are useful because computations on data may be extremely difficult in one domain but relatively easy in another domain. Consider a Fast Fourier Transform algorithm that transforms radio signal data from the frequency domain to the time domain. Performing certain signal processing computations may be difficult in the frequency domain but the same signal processing may be accomplished using relatively simple calculations in the time domain. Further consider a Fast Fourier Transform algorithm that transforms image data from the frequency domain to the time. Creating a low pass filter algorithm requires an extremely difficult convolution operation in the frequency domain but may be performed in the time domain as a mere multiplication operation.

As mentioned above the all to all exchange is performed on a plurality of data buffers using an XOR swap operations. An XOR swap operation is an algorithm that uses a bitwise XOR operation to swap contents of two variables without using a temporary storage variable. The XOR swap operation differs from other swapping algorithms because these other swapping algorithms require the use of a temporary storage variable. The XOR swap operation is performed using three bitwise XOR operations in the following manner 

The XOR swap operation combines the contents of variable x with the contents of variable y using a bitwise XOR operation and stores the result in variable x. The XOR swap operation then combines the contents of variable x with the contents of variable y using a bitwise XOR operation and stores the result in variable y. Then the XOR swap operation combines the contents of variable x with the contents of variable y using a bitwise XOR operation and stores the result in variable x. After the XOR swap operation the contents initially stored in variable x are stored in variable y and the content initially stored in variable y are stored in variable x. Readers will note that the XOR operator is often depicted as circle around x . 

Performing an all to all data exchange on a plurality of data buffers using XOR swap operations according to embodiments of the present invention advantageously performs an all to all data exchange without requiring temporary storage space for storing interim results during the all to all exchange. Rather the computer memory required to perform the all to all exchange according to embodiments of the present invention is the computer memory used by the data buffers themselves. Reducing the computer memory required to perform an all to all data exchange advantageously allows each compute node to maximize utilization of its memory resources which in turn often enhances overall compute node performance.

The arrangement of nodes networks and I O devices making up the exemplary system illustrated in are for explanation only not for limitation of the present invention. Data processing systems capable of performing an all to all exchange on n number of data buffers using XOR swap operations according to embodiments of the present invention may include additional nodes networks devices and architectures not shown in as will occur to those of skill in the art. Although the parallel computer in the example of includes sixteen compute nodes readers will note that parallel computers capable of determining when a set of compute nodes participating in a barrier operation are ready to exit the barrier operation according to embodiments of the present invention may include any number of compute nodes. In addition to Ethernet and JTAG networks in such data processing systems may support many data communications protocols including for example TCP Transmission Control Protocol IP Internet Protocol and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Performing an all to all exchange on n number of data buffers using XOR swap operations according to embodiments of the present invention may be generally implemented on a parallel computer that includes a plurality of compute nodes. In fact such computers may include thousands of such compute nodes. Each compute node is in turn itself a kind of computer composed of one or more computer processors or processing cores its own computer memory and its own input output adapters. For further explanation therefore sets forth a block diagram of an exemplary compute node useful in a parallel computer capable of performing an all to all exchange on n number of data buffers using XOR swap operations according to embodiments of the present invention. The compute node of includes one or more processing cores as well as random access memory RAM . The processing cores are connected to RAM through a high speed memory bus and through a bus adapter and an extension bus to other components of the compute node .

Stored in RAM of is an application a module of computer program instructions that carries out parallel user level data processing using parallel algorithms. The application of includes computer program instructions invoking an all to all exchange for n number of data buffers using XOR swap operations according to embodiments of the present invention. The application may invoke the all to all exchange using a function of an application programming interface API exposed by a messaging module for inter node communications.

Also stored in RAM is a messaging module a library of computer program instructions that carry out parallel communications among compute nodes including point to point operations as well as collective operations. Application program executes collective operations by calling software routines in the messaging module . A library of parallel communications routines may be developed from scratch for use in systems according to embodiments of the present invention using a traditional programming language such as the C programming language and using traditional programming methods to write parallel communications routines that send and receive data among nodes on two independent data communications networks. Alternatively existing prior art libraries may be improved to operate according to embodiments of the present invention. Examples of prior art parallel communications libraries include the Message Passing Interface MPI library and the Parallel Virtual Machine PVM library.

The messaging module of together with messaging modules installed on other compute nodes includes computer program instructions for performing an all to all exchange on n number of data buffers using XOR swap operations according to embodiments of the present invention. Each data buffer has n number of data elements and is stored on a distinct compute node of the parallel computer. For each rank value of i and j where i is greater than j and where i is less than or equal to n the parallel computer in operate generally for performing an all to all exchange on n number of data buffers using XOR swap operations according to embodiments of the present invention by selecting data element i in data buffer j selecting data element j in data buffer i and exchanging contents of data element i in data buffer j with contents of data element j in data buffer i using an XOR swap operation.

The messaging modules may exchange contents of data element i in data buffer j with contents of data element j in data buffer i using an XOR swap operation by performing a series of bitwise XOR allreduce operations through the global combining network in which the compute node storing data buffer j contributes the contents of data element i and the compute node storing data buffer i contributes the contents of data element j. For each exchange the messaging modules typically perform three bitwise XOR allreduce operations to realize the XOR swap operation. Because only the compute nodes storing data buffer i and data buffer j are exchanging data during the XOR swap operation the messaging modules of the compute nodes other than the compute nodes storing data buffer i and data buffer j may contribute the identity value to the series of bitwise XOR allreduce operations. The identity value for a bitwise XOR allreduce operation is zero for each bit involved in the operation.

To reduce the time involved in performing the series of bitwise XOR allreduce operations the messaging modules may offload performance of each bitwise XOR allreduce operation to network hardware of each compute node. The network hardware of each compute node is specialized hardware components that serve as an interface between a compute node s main processing cores and the network. The network hardware may include network adapters or auxiliary network adapter components such as for example dedicated network arithmetic logic units ALUs . The network hardware of together with the network hardware of the other compute nodes may perform the series of bitwise XOR allreduce operations by combining contributions of the compute nodes participating in the bitwise XOR allreduce operation using a bitwise XOR operator.

Also stored in RAM is an operating system a module of computer program instructions and routines for an application program s access to other resources of the compute node. It is typical for an application program and parallel communications library in a compute node of a parallel computer to run a single thread of execution with no user login and no security issues because the thread is entitled to complete access to all resources of the node. The quantity and complexity of tasks to be performed by an operating system on a compute node in a parallel computer therefore are smaller and less complex than those of an operating system on a serial computer with many threads running simultaneously. In addition there is no video I O on the compute node of another factor that decreases the demands on the operating system. The operating system may therefore be quite lightweight by comparison with operating systems of general purpose computers a pared down version as it were or an operating system developed specifically for operations on a particular parallel computer. Operating systems that may usefully be improved simplified for use in a compute node include UNIX Linux Microsoft XP AIX IBM s i5 OS and others as will occur to those of skill in the art.

The exemplary compute node of includes several communications adapters for implementing data communications with other nodes of a parallel computer. Such data communications may be carried out serially through RS 232 connections through external buses such as Universal Serial Bus USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful in systems for performing an all to all exchange on n number of data buffers using XOR swap operations according to embodiments of the present invention include modems for wired communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

The data communications adapters in the example of include a Gigabit Ethernet adapter that couples example compute node for data communications to a Gigabit Ethernet . Gigabit Ethernet is a network transmission standard defined in the IEEE 802.3 standard that provides a data rate of 1 billion bits per second one gigabit . Gigabit Ethernet is a variant of Ethernet that operates over multimode fiber optic cable single mode fiber optic cable or unshielded twisted pair.

The data communications adapters in the example of includes a JTAG Slave circuit that couples example compute node for data communications to a JTAG Master circuit . JTAG is the usual name used for the IEEE 1149.1 standard entitled Standard Test Access Port and Boundary Scan Architecture for test access ports used for testing printed circuit boards using boundary scan. JTAG is so widely adapted that at this time boundary scan is more or less synonymous with JTAG. JTAG is used not only for printed circuit boards but also for conducting boundary scans of integrated circuits and is also useful as a mechanism for debugging embedded systems providing a convenient back door into the system. The example compute node of may be all three of these It typically includes one or more integrated circuits installed on a printed circuit board and may be implemented as an embedded system having its own processor its own memory and its own I O capability. JTAG boundary scans through JTAG Slave may efficiently configure processor registers and memory in compute node for use in performing an all to all exchange on n number of data buffers using XOR swap operations according to embodiments of the present invention.

The data communications adapters in the example of includes a Point To Point Adapter that couples example compute node for data communications to a network that is optimal for point to point message passing operations such as for example a network configured as a three dimensional torus or mesh. Point To Point Adapter provides data communications in six directions on three communications axes x y and z through six bidirectional links x x y y z and z .

The data communications adapters in the example of includes a Global Combining Network Adapter that couples example compute node for data communications to a network that is optimal for collective message passing operations on a global combining network configured for example as a binary tree. The Global Combining Network Adapter provides data communications through three bidirectional links two to children nodes and one to a parent node .

Example compute node includes two arithmetic logic units ALUs . ALU is a component of each processing core and a separate ALU is dedicated to the exclusive use of Global Combining Network Adapter for use in performing the arithmetic and logical functions of reduction operations. Computer program instructions of a reduction routine in parallel communications library may latch an instruction for an arithmetic or logical function into instruction register . When the arithmetic or logical function of a reduction operation is a sum or a logical or for example Global Combining Network Adapter may execute the arithmetic or logical operation by use of ALU in processor or typically much faster by use dedicated ALU .

The example compute node of includes a direct memory access DMA controller which is computer hardware for direct memory access and a DMA engine which is computer software for direct memory access. In the example of the DMA engine is configured in computer memory of the DMA controller . Direct memory access includes reading and writing to memory of compute nodes with reduced operational burden on the central processing units . A DMA transfer essentially copies a block of memory from one location to another typically from one compute node to another. While the CPU may initiate the DMA transfer the CPU does not execute it.

For further explanation illustrates an exemplary Point To Point Adapter useful in a parallel computer capable of performing an all to all exchange on n number of data buffers using XOR swap operations according to embodiments of the present invention. Point To Point Adapter is designed for use in a data communications network optimized for point to point operations a network that organizes compute nodes in a three dimensional torus or mesh. Point To Point Adapter in the example of provides data communication along an x axis through four unidirectional data communications links to and from the next node in the x direction and to and from the next node in the x direction . Point To Point Adapter also provides data communication along a y axis through four unidirectional data communications links to and from the next node in the y direction and to and from the next node in the y direction . Point To Point Adapter in also provides data communication along a z axis through four unidirectional data communications links to and from the next node in the z direction and to and from the next node in the z direction .

For further explanation illustrates an exemplary Global Combining Network Adapter useful in a parallel computer capable of performing an all to all exchange on n number of data buffers using XOR swap operations according to embodiments of the present invention. Global Combining Network Adapter is designed for use in a network optimized for collective operations a network that organizes compute nodes of a parallel computer in a binary tree. Global Combining Network Adapter in the example of provides data communication to and from two children nodes through two links. Each link to each child node is formed from two unidirectional data communications paths. Global Combining Network Adapter also provides data communication to and from a parent node through a link form from two unidirectional data communications paths.

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for point to point operations useful in a parallel computer capable of performing an all to all exchange on n number of data buffers using XOR swap operations in accordance with embodiments of the present invention. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent network links between compute nodes. The network links are implemented with point to point data communications adapters similar to the one illustrated for example in with network links on three axes x y and z and to and from in six directions x x y y z and z . The links and compute nodes are organized by this data communications network optimized for point to point operations into a three dimensional mesh . The mesh has wrap around links on each axis that connect the outermost compute nodes in the mesh on opposite sides of the mesh . These wrap around links form part of a torus . Each compute node in the torus has a location in the torus that is uniquely specified by a set of x y z coordinates. Readers will note that the wrap around links in the y and z directions have been omitted for clarity but are configured in a similar manner to the wrap around link illustrated in the x direction. For clarity of explanation the data communications network of is illustrated with only 27 compute nodes but readers will recognize that a data communications network optimized for point to point operations for use in performing an all to all exchange on n number of data buffers using XOR swap operations in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for collective operations useful in a parallel computer capable of performing an all to all exchange on n number of data buffers using XOR swap operations in accordance with embodiments of the present invention. The example data communications network of includes network links connected to the compute nodes so as to organize the compute nodes as a tree. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent network links between compute nodes. The network links are implemented with global combining network adapters similar to the one illustrated for example in with each node typically providing data communications to and from two children nodes and data communications to and from a parent node with some exceptions. Nodes in a binary tree may be characterized as a physical root node branch nodes and leaf nodes . The root node has two children but no parent. The leaf nodes each has a parent but leaf nodes have no children. The branch nodes each has both a parent and two children. The links and compute nodes are thereby organized by this data communications network optimized for collective operations into a binary tree . For clarity of explanation the data communications network of is illustrated with only 31 compute nodes but readers will recognize that a data communications network optimized for collective operations for use in a parallel computer for performing an all to all exchange on n number of data buffers using XOR swap operations in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

In the example of each node in the tree is assigned a unit identifier referred to as a rank . A node s rank uniquely identifies the node s location in the tree network for use in both point to point and collective operations in the tree network. The ranks in this example are assigned as integers beginning with 0 assigned to the root node assigned to the first node in the second layer of the tree 2 assigned to the second node in the second layer of the tree 3 assigned to the first node in the third layer of the tree 4 assigned to the second node in the third layer of the tree and so on. For ease of illustration only the ranks of the first three layers of the tree are shown here but all compute nodes in the tree network are assigned a unique rank.

For further explanation sets forth a line drawing illustrating four exemplary data buffers before performing an all to all exchange on n number of data buffers using XOR swap operations according to embodiments the present invention. In the example of n has a value of four because includes four data buffers data buffer data buffer data buffer and data buffer . Each data buffer has four data elements data element data element data element and data element . Data buffer stores a value of A in data element a value of B in data element a value of C in data element and a value of D in data element . Data buffer stores a value of E in data element a value of F in data element a value of G in data element and a value of H in data element . Data buffer stores a value of I in data element a value of J in data element a value of K in data element and a value of L in data element . Data buffer stores a value of M in data element a value of N in data element a value of O in data element and a value of P in data element .

Turning now to sets forth a line drawing that illustrates the four exemplary data buffers of after performing an all to all exchange on the four exemplary data buffers of using XOR swap operations according to embodiments the present invention when rank values of i and j are two and one respectively. In the example of the data elements having the same contents as illustrated in are depicted with a grey background. The content of data element in data buffer and the contents in data element in data buffer however are exchanged while performing an all to all exchange on the four exemplary data buffers of using XOR swap operations according to embodiments the present invention when rank values of i and j are two and one respectively.

As mentioned above the compute nodes may exchange the contents of data elements using an XOR swap operation. Readers will recall that an XOR swap operation is performed using three bitwise XOR operations in the following manner 

When the data buffers are stored on distinct compute nodes the compute nodes may perform the XOR swap operation as a series of three bitwise XOR allreduce operations through the global combining network. In some embodiments each compute node contributes a value to each bitwise XOR allreduce. The compute nodes which store the data buffers participating in a particular exchange contribute the contents of the data elements being exchanged. The compute nodes which store the buffers not participating in the exchange contribute an identity value that is zero.

For further explanation of the contributions of each compute node and how the contents of the data buffers change during the series of bitwise XOR allreduce operations consider the series of bitwise XOR allreduce operations performed to exchange the contents of data element in data buffer with the contents of data element in data buffer using the exemplary data buffers of . sets forth a line drawing that illustrates exemplary contributions by each compute node for the first bitwise XOR allreduce operation performed to exchange the contents of data element in data buffer with the contents of data element in data buffer of the exemplary data buffers of . The exemplary data buffers illustrated in are distributed among distinct compute nodes connected together for data communications using a global combining network . Data buffer is stored on compute node data buffer is stored on compute node data buffer is stored on compute node and data buffer is stored on compute node . illustrates each compute node as a circle with a black background.

In the example of compute node contributes the contents B of data element in data buffer to the first bitwise XOR allreduce operation used in the XOR swap operation to exchange the contents of data element in data buffer with data element in data buffer . Compute node contributes the contents E of data element in data buffer to the first bitwise XOR allreduce operation used in the XOR swap operation. illustrates the contributions of compute nodes and in the boxes adjacent to the compute nodes. Because the compute node does not contribute the contents of data elements and in data buffer and because the compute node does not contribute the contents of data elements and in data buffer depicts those elements with a grey background.

Because only data buffer and data buffer are involved in the exchange the compute nodes and contribute the identity value zero to the bitwise XOR allreduce operation. That is compute nodes and do not contribute any of the contents of the data elements in data buffers and to the first bitwise XOR allreduce operation used in the XOR swap operation to exchange the contents of data element in data buffer with data element in data buffer . illustrates the contributions of compute nodes and in the boxes adjacent to the compute nodes. Because the compute nodes and do not contribute the contents of data elements in data buffers and depicts those elements with a grey background.

In the example of the network hardware for the compute nodes combines the contributions of the compute nodes participating in the first bitwise XOR allreduce operation of the XOR swap using a bitwise XOR operator. Specifically network hardware of compute nodes and passes the identity value of zero to compute node . Compute node then combines the contributions of the compute nodes and using a bitwise XOR operator according to the expression Ecircle around x 0circle around x 0 which simply results in E. Compute node then passes the result of E to compute node . Compute node then combines its contributions with the result received from compute node using a bitwise XOR operator according to the expression Bcircle around x E. 

According to the XOR swap operation algorithm above for exchanging the contents of two variables without using a temporary variable the results of the first XOR operation are stored as contents in one of the two variables participating in the XOR swap operation. sets forth a line drawing that illustrates contents of the exemplary data buffers after the first bitwise XOR allreduce operation is performed using the contributions illustrated in . Readers will recall from above that the result of the first bitwise XOR allreduce operation performed using the contributions illustrated in is Bcircle around x E. illustrates that compute node stores this result in data element in data buffer . Because only the contents of data element in data buffer are altered during the first bitwise XOR allreduce operation depicts the remaining elements with a grey background.

After performing the first bitwise XOR allreduce operation to exchange the contents of data element in data buffer with the contents of data element in data buffer of the exemplary data buffers of the compute nodes perform the second bitwise XOR allreduce operation as specified in the XOR swap operation algorithm above. sets forth a line drawing that illustrates exemplary contributions by each compute node for the second bitwise XOR allreduce operation performed to exchange the contents of data element in data buffer with the contents of data element in data buffer of the exemplary data buffers of .

In the example of compute node contributes the contents of data element in data buffer to the second bitwise XOR allreduce operation used in the XOR swap operation that is compute node contributes Bcircle around x E. Compute node contributes the contents of data element in data buffer to the second bitwise XOR allreduce operation used in the XOR swap operation that is compute node contributes E. illustrates the contributions of compute nodes and in the boxes adjacent to the compute nodes. Because the compute node does not contribute the contents of data elements and in data buffer and because the compute node does not contribute the contents of data elements and in data buffer depicts those elements with a grey background.

Because only data buffer and data buffer are involved in the exchange the compute nodes and contribute the identity value zero to the bitwise XOR allreduce operation. That is compute nodes and do not contribute any of the contents of the data elements in data buffers and to the second bitwise XOR allreduce operation used in the XOR swap operation to exchange the contents of data element in data buffer with data element in data buffer . illustrates the contributions of compute nodes and in the boxes adjacent to the compute nodes. Because the compute nodes and do not contribute the contents of data elements in data buffers and depicts those elements with a grey background.

In the example of the network hardware for the compute nodes combines the contributions of the compute nodes participating in the second bitwise XOR allreduce operation of the XOR swap using a bitwise XOR operator. Specifically network hardware of compute nodes and passes the identity value of zero to compute node . Compute node then combines the contributions of the compute nodes and using a bitwise XOR operator according to the expression Ecircle around x 0circle around x 0 which simply results in E. Compute node then passes the result of E to compute node . Compute node then combines its contributions with the result received from compute node using a bitwise XOR operator according to the expression Bcircle around x Ecircle around x E which simply results in B because Ecircle around x E is zero and Bcircle around x 0 is merely B. 

According to the XOR swap operation algorithm above for exchanging the contents of two variables without using a temporary variable the results of the second XOR operation are stored as contents in variable of the two variables participating in the XOR swap operation that did not store the results of the first XOR operation. sets forth a line drawing that illustrates contents of the exemplary data buffers after the second bitwise XOR allreduce operation is performed using the contributions illustrated in . Readers will recall from above that the result of the second bitwise XOR allreduce operation performed using the contributions illustrated in is B. illustrates that compute node stores this result in data element in data buffer . Because only the contents of data element in data buffer are altered during the second bitwise XOR allreduce operation depicts the remaining elements with a grey background.

After performing the second bitwise XOR allreduce operation to exchange the contents of data element in data buffer with the contents of data element in data buffer of the exemplary data buffers of the compute nodes perform the third bitwise XOR allreduce operation as specified in the XOR swap operation algorithm above. sets forth a line drawing that illustrates exemplary contributions by each compute node for the third bitwise XOR allreduce operation performed to exchange the contents of data element in data buffer with the contents of data element in data buffer of the exemplary data buffers of .

In the example of compute node contributes the contents of data element in data buffer to the third bitwise XOR allreduce operation used in the XOR swap operation that is compute node contributes Bcircle around x E. Compute node contributes the contents of data element in data buffer to the third bitwise XOR allreduce operation used in the XOR swap operation that is compute node contributes B. illustrates the contributions of compute nodes and in the boxes adjacent to the compute nodes. Because the compute node does not contribute the contents of data elements and in data buffer and because the compute node does not contribute the contents of data elements and in data buffer depicts those elements with a grey background.

Because only data buffer and data buffer are involved in the exchange the compute nodes and contribute the identity value zero to the bitwise XOR allreduce operation. That is compute nodes and do not contribute any of the contents of the data elements in data buffers and to the third bitwise XOR allreduce operation used in the XOR swap operation to exchange the contents of data element in data buffer with data element in data buffer . illustrates the contributions of compute nodes and in the boxes adjacent to the compute nodes. Because the compute nodes and do not contribute the contents of data elements in data buffers and depicts those elements with a grey background.

In the example of the network hardware for the compute nodes combines the contributions of the compute nodes participating in the third bitwise XOR allreduce operation of the XOR swap using a bitwise XOR operator. Specifically network hardware of compute nodes and passes the identity value of zero to compute node . Compute node then combines the contributions of the compute nodes and using a bitwise XOR operator according to the expression Bcircle around x 0circle around x 0 which simply results in B. Compute node then passes the result of B to compute node . Compute node then combines its contributions with the result received from compute node using a bitwise XOR operator according to the expression Bcircle around x Bcircle around x E which simply results in E because Bcircle around x B is zero and Ecircle around x 0 is merely E. 

According to the XOR swap operation algorithm above for exchanging the contents of two variables without using a temporary variable the results of the third XOR operation are stored as contents in variable of the two variables participating in the XOR swap operation that stored the results of the first XOR operation. sets forth a line drawing that illustrates contents of the exemplary data buffers after the third bitwise XOR allreduce operation is performed using the contributions illustrated in . Readers will recall from above that the result of the third bitwise XOR allreduce operation performed using the contributions illustrated in is E. illustrates that compute node stores this result in data element in data buffer . Because only the contents of data element in data buffer are altered during the third bitwise XOR allreduce operation depicts the remaining elements with a grey background.

For further explanation sets forth a flow chart illustrating an exemplary method for performing an all to all exchange on n number of data buffers using XOR swap operations according to embodiments the present invention. Each data buffer has n number of data elements and each data buffer described with reference to is stored on a distinct compute node of a parallel computer. The compute nodes are connected together using a global combining network optimized for collective operations.

The data buffers and data elements involved in performing an all to all exchange according to the method of are specified using rank values of i and j. As mentioned above the term rank value refers to a non negative integer used to uniquely identify a particular data buffer or a particular data element of a data buffer. The method of performs an all to all exchange on n number of data buffers using rank values of i and j where i is greater than j and where i is less than or equal to n.

For each rank value of i and j where i is greater than j and where i is less than or equal to n the method of includes 

In the method of exchanging contents of data element i in data buffer j with contents of data element j in data buffer i using an XOR swap operation includes performing a series of bitwise XOR allreduce operations through the global combining network in which the compute node storing data buffer j contributes the contents of data element i and the compute node storing data buffer i contributes the contents of data element j . Because an XOR swap operation requires at least three XOR operations the minimum number of bitwise XOR allreduce operations performed in the series of bitwise XOR allreduce operations is typically three as well. Although readers will recognize that other numbers of bitwise XOR allreduce operations may be performed in a series of bitwise XOR allreduce operations used to exchange the contents of data element i in data buffer j with contents of data element j in data buffer i using an XOR swap operation.

Performing a series of bitwise XOR allreduce operations according to the method of includes contributing by the compute nodes other than the compute nodes storing data buffer i and data buffer j the identity value to the series of bitwise XOR allreduce operations. As mentioned above the identity value for an XOR operation is zero because xcircle around x 0 is merely x. 

In the method of performing a series of bitwise XOR allreduce operations may be carried out using network hardware that combines the contributions of the compute nodes participating in the bitwise XOR allreduce operation using a bitwise XOR operator. Using network hardware to perform a bitwise XOR allreduce operation generally refers to the network hardware s ability to combine multiple contributions from compute nodes using an XOR operation without utilizing the compute nodes main processing cores. That is once the processing cores inject each compute nodes contribution into its respective network hardware the network hardware of the compute nodes then combines the multiple contributions using an XOR operation without involving the processing cores. To avoid involving the processing cores during each bitwise XOR allreduce operation the network hardware of each compute node typically includes an arithmetic logic unit distinct from the node s processing core. This arithmetic logic unit is capable of combining contributions using XOR operation without involving the node s processing core. Using network hardware to performing each bitwise XOR allreduce operation with out involving the node s processing core typically enhances the overall performance of an all to all exchange on n number of data buffers using XOR swap operations according to embodiments of the present invention.

Exemplary embodiments of the present invention are described largely in the context of a fully functional parallel computer system for performing an all to all exchange on n number of data buffers using XOR swap operations. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on computer readable media for use with any suitable data processing system. Such computer readable media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

