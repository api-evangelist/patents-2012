---

title: Software application recreation
abstract: A software application recreation in a computing environment is provided. One embodiment involves analyzing program execution trace data of a software application, and using the analysis results in recreating an executable version of the software application from data traced at significant points during the software application execution. Recreating an executable version of the software application involves creating white space code to simulate the software application execution timing by replacing business logic code of the software application with white space code in the recreated executable version. The recreated executable version of the software application programmatically behaves essentially similarly to the software application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08584083&OS=08584083&RS=08584083
owner: International Business Machines Corporation
number: 08584083
owner_city: Armonk
owner_country: US
publication_date: 20120412
---
This patent application is a continuation patent application of U.S. patent application Ser. No. 12 538 366 filed on Aug. 10 2009 the disclosure of which is incorporated herein its entirety by reference.

The invention relates generally to software service and in particular to software application recreation.

In software service and software testing a typical problem faced by a product service team involves recreating a customer problem scenario. In one case a user encounters a failing scenario e.g. an undocumented or incorrect behavior in a software application. The user raises a problem and gathers documentation that may help a service team in diagnosis of the failing scenario. The service team examines the documentation to diagnose the problem. If the service team can diagnose the problem then the service team can repair the problem in the software application and retest for the failing scenario.

If the service team cannot diagnose the problem the service team may ask the user to execute the software application with additional diagnostic aids active in order to gather additional information if the failing scenario recurs. Once the additional information is gathered then the service team can repair the problem and retest for the failing scenario.

A common issue is properly retesting for the failing scenario. One option involves obtaining the failing software application from the user for testing. Another option involves asking the customer to perform testing using the repaired version of the software application. Yet another option involves creating a test program that simulates the behavior of the failing user software application. Such options may be problematic however when dealing with users running complex software applications.

In another case a product service team attempts to test a new version of a software application against well known user software application failing scenarios. The service team needs to understand the implementation and behavior of user software applications in order to verify test scenarios. This may involve highly experienced professionals in the area being tested who may study and manually produce a test version of the user application may obtain the user application for use in their test environment or may use tooling to assemble a realistic model of the user application. Such options remain problematic in terms of creating a realistic simulation of the actual user application.

The invention provides for software application recreation. An embodiment of the invention comprises a software application recreation process in a computing environment including analyzing program execution trace data of a software application and using the analysis results in recreating a simulated executable version of the original software application from data traced at significant points during the software application execution wherein the simulated executable version of the software application programmatically behaves essentially similar to the original software application.

The process may further include generating program execution diagnostic trace data for a software application wherein analyzing program execution trace of the software application further includes programmatically analyzing program execution trace of the first software application for significant operations. The process may further include detecting the actual time difference or processor consumption between the significant traced operations from the trace data. Recreating an executable version of the software application may include creating white space code to simulate the software application execution timing within the recreated version of the software application. Creating white space code to simulate the software application execution timing may include replacing business logic code of the software application with white space code in the executable version based on the diagnostic trace analysis.

The process may further include generating program execution diagnostic trace data for multiple software applications running essentially in parallel analyzing program execution trace data of the software applications and using the analysis results in recreating an executable version of each of the software application from data traced at significant points during execution of each software application.

These and other features aspects and advantages of the present invention will become understood with reference to the following description appended claims and accompanying figures.

The following description is made for the purpose of illustrating the general principles of the invention and is not meant to limit the inventive concepts claimed herein. Further particular features described herein can be used in combination with other described features in each of the various possible combinations and permutations. Unless otherwise specifically defined herein all terms are to be given their broadest possible interpretation including meanings implied from the specification as well as meanings understood by those skilled in the art and or as defined in dictionaries treatises etc.

The invention provides for analyzing trace information execution points data for an original application in order to recreate an application a set of instructions that programmatically behave as closely similarly as possible to the original application. One embodiment involves programmatically analyzing a trace and recreating an executable version of the original application user software application from data traced at selected points during the execution of the original application and recreating an application a skeleton set of instructions that programmatically behave as closely as possible to the original application. The selected points may comprise for example significant operations points including predefined operations points and or selected operations points types. The significant operations points may be determined by an operator and or machine. In the following examples significant points are used as selected points.

One implementation involves recreating a program source code representing all the major interactions from an original software application user software application by reverse engineering the trace data. The recreation process involves recreation of the original software application from trace data by replacement of business logic code with white space code soaker code and creation of a skeleton application based on diagnostic trace information. The temporal behavior of the original software application often has critical effects on the system and must be accurately reflected in the simulated application. Using operating system dispatcher and timing functions to simulate the delays between the significant events in the application may not always be an accurate enough reflection of behavior of the original system. A more accurate simulation is to employ instructions that consume CPU and memory resources in a similar fashion to the original software application. Such instructions are termed white space code since the code occupies the white space between the known trace points in the software application and can be tuned to more accurately simulate the original software application e.g. simply read memory and perform arithmetic or write large amounts of data to memory etc. .

A representation of the original software application is recreated by examining diagnostic trace information of the original software application. Business logic code is generally used to describe the functional algorithms which handle information exchange between a database and a user interface. Business logic code is distinguished from input output data validation and product logic code. Business logic code is specific to a specific customer user application and fundamentally separates e.g. company A from company B in information technology IT terms. Business logic may have features to differentiate a company from others that provide similar services.

When the software application executes there are typically options to trace significant execution logic such that a service team can diagnose or understand the behavior of the application in the event of failure or other issues with the application. The trace captures information when an application calls functions of a software provider. Such information may include the type of call the data involved the parameters the user identification etc. Sufficient information is gathered to recreate a function call. If this were performed against a large amount of trace for the application then all major interactions from the application can be recreated by reverse engineering the trace data.

A representation of the user application is determined by examination of diagnostic trace information. Performing the above process for a large number of traces for the user application allows recreation of essentially all major interactions from the application by reverse engineering the trace data. The invention provides the application code that executes between the significant execution points for recreating the application. Recreating the main execution points allows detecting the white space code where less or none interesting significant application logic executes. Identifying certain properties of the code running between the trace points allows creating a representation of the white space code as well.

The white space code can be varied in size to imitate the application behavior when there is only an instance of one application running or when there are multiple instances of the application running In a typical computing environment the application generally executes more rapidly if there is one instance versus multiple instances executing in parallel. White space code substitutes for actual business logic code but has no real purpose. White space code executes and takes actual execution time that is comparable to the time the actual business logic code would have taken to execute. While space code may comprise e.g. simple loops that have a known time duration that can be executed many times in order to consume elapsed time or processor e.g. CPU cycles.

The main functions of the application are recorded at these trace points which may be reverse engineered to recreate the significant parts of the application. A representation of the white space code may be recreated by analyzing information about the application captured at the trace points such as 

When the application is recreated the above information can be used to rebuild the non significant white space code. When the application is reverse engineered and recreated the above information may be used to generate appropriate white space logic code to either consume the amount of CPU resources that were used in white space reproduce application with CPU as a consideration or simply issue a wait for the elapsed wall clock time taken by white space code reproduce application with time as a consideration . Either of these behaviors is appropriate for a more accurate recreation of an application.

It should be noted that the intent is not to reproduce the original code but to recreate alternative code that executes for an amount of time elapsed or cpu comparable to the original application. The recreation of the application with the ability to vary the length of execution time of the white space code execution provides flexibility for running test reconstructions of the application. The white space code behavior can be parameter driven to allow variations in the behavior.

In one embodiment the invention is useful with software applications which provide application programming interfaces APIs such as e.g. transaction servers e.g. IBM CICS transaction server or messaging applications for distributed platforms providing connectivity e.g. IBM WebSphere MQ . In one example involving the IBM WebSphere MQ WMQ software application an application tracing function is enabled to have a target destination of a generalized trace facility GTF . This means that the trace data is written to an external trace file. The software application executes trace active hence capturing trace data which shows the execution flow of the software application. Then a code recreation system according to an embodiment of the invention e.g. system in is executed against the WebSphere MQ trace data to convert all the significant trace data back into the corresponding WMQ API requests reverse engineering . In WebSphere MQ terms this would be the trace entries that best represented the WebSphere MQ verbs e.g. MQOPEN MQPUT MQGET MQCLOSE etc. . The code recreation system provides an executable application comprising a recreated version of the original software application. The recreated application has all the WMQ verbs but none of the business logic which would be desirable for creating test programs that exercised the WMQ logic in logical sequence as indicated by the original application. For tracing WMQ trace can be used. Another option would be to augment WebSphere MQ or other software applications to write out the exact format of a given API command as a part of the tracing process. If this was written at the time of application execution then this new data may be written to a new file potentially with a new file for each application being traced hence separating the data at execution time.

The trace data can include diagnostic trace data from execution of multiple software applications allowing recreating of multiple software application by analyzing the corresponding diagnostic trace data. In one example diagnostic trace may include trace information relating to execution of multiple software applications that are running in parallel e.g. multi threading parallel processing . When the trace is analyzed the multiple applications can be recreated from a single scan of the trace data. This is useful in cases for example where in a problem determination or service scenario it is desired to recreate the circumstances in which an application failure occurred. For example if a failure occurs for application A but it only occurs when application B is running in parallel then recreating versions of application A and application B from the same trace allows more comprehensive diagnosis of application A. When attempting to recreate the failure the recreated versions of both applications A and B can be executed in the same way that they were originally. The recreated applications may be restarted in the correct sequence in order to try and mirror any errors due to timing between their interactions.

As is known to those skilled in the art the aforementioned example architectures described above according to the invention can be implemented in many ways such as program instructions for execution by a processor as software modules microcode as computer program product on computer readable media as logic circuits as application specific integrated circuits as firmware etc. Further embodiments of the invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. Though the invention has been described with reference to certain versions thereof however other versions are possible. Therefore the spirit and scope of the appended claims should not be limited to the description of the preferred versions contained herein.

The server may be coupled via the bus to a display for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to the bus for communicating information and command selections to the processor . Another type or user input device comprises cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to the processor and for controlling cursor movement on the display .

According to one embodiment of the invention the functions of the system are performed by the server in response to the processor executing one or more sequences of one or more instructions contained in the main memory . Such instructions may be read into the main memory from another computer readable medium such as the storage device . Execution of the sequences of instructions contained in the main memory causes the processor to perform the process steps described herein. One or more processors in a multi processing arrangement may also be employed to execute the sequences of instructions contained in the main memory . In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The terms computer program medium computer usable medium computer readable medium and computer program product are used to generally refer to media such as main memory secondary memory removable storage drive a hard disk installed in hard disk drive and signals. These computer program products are means for providing software to the computer system. The computer readable medium allows the computer system to read data instructions messages or message packets and other computer readable information from the computer readable medium. The computer readable medium for example may include non volatile memory such as a floppy disk ROM flash memory disk drive memory a CD ROM and other permanent storage. It is useful for example for transporting information such as data and computer instructions between computer systems. Furthermore the computer readable medium may comprise computer readable information in a non transitory state medium such as a network link and or a network interface including a wired network that allows a computer to read such computer readable information. Computer programs also called computer control logic are stored in main memory and or secondary memory. Computer programs may also be received via a communications interface. Such computer programs when executed enable the computer system to perform the features of the present invention as discussed herein. In particular the computer programs when executed enable the processor multi core processor to perform the features of the computer system. Accordingly such computer programs represent controllers of the computer system.

Generally the term computer readable medium as used herein refers to any medium that participated in providing instructions to the processor for execution. Such a medium may take many forms including but not limited to non volatile media and volatile media. Non volatile media includes for example optical or magnetic disks such as the storage device . Volatile media includes dynamic memory such as the main memory .

Common forms of computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium a CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes a RAM a PROM an EPROM a FLASH EPROM any other memory chip or cartridge a carrier wave as described hereinafter or any other medium from which a computer can read.

Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to the processor for execution. For example the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to the server can receive the data on the telephone line and use an infrared transmitter to convert the data to an infrared signal. An infrared detector coupled to the bus can receive the data carried in the infrared signal and place the data on the bus . The bus carries the data to the main memory from which the processor retrieves and executes the instructions. The instructions received from the main memory may optionally be stored on the storage device either before or after execution by the processor .

The server also includes a communication interface coupled to the bus . The communication interface provides a two way data communication coupling to a network link that is connected to the world wide packet data communication network now commonly referred to as the Internet . The Internet uses electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on the network link and through the communication interface which carry the digital data to and from the server are exemplary forms or carrier waves transporting the information.

In another embodiment of the server interface is connected to a local network via a communication link . For example the communication interface may be an integrated services digital network ISDN card or a modem to provide a data communication connection to a corresponding type of telephone line which can comprise part of the network link . As another example the communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation the communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

The network link typically provides data communication through one or more networks to other data devices. For example the network link may provide a connection through the local network to a host computer or to data equipment operated by an Internet Service Provider ISP . The ISP in turn provides data communication services through the Internet . The local network and the Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on the network link and through the communication interface which carry the digital data to and from the server are exemplary forms or carrier waves transporting the information.

The server can send receive messages and data including e mail program code through the network the network link and the communication interface . Further the communication interface can comprise a USB Tuner and the network link may be an antenna or cable for connecting the server to a cable provider satellite provider or other terrestrial transmission system for receiving messages data and program code from another source.

The example versions of the invention described herein are implemented as logical operations in a distributed processing system such as the system including the servers . The logical operations of the present invention can be implemented as a sequence of steps executing in the server and as interconnected machine modules within the system . The implementation is a matter of choice and can depend on performance of the system implementing the invention. As such the logical operations constituting said example versions of the invention are referred to for e.g. as operations steps or modules.

Similar to a server described above a client device can include a processor memory storage device display input device and communication interface e.g. e mail interface for connecting the client device to the Internet the ISP or LAN for communication with the servers .

The system can further include computers e.g. personal computers computing nodes operating the same manner as client devices wherein a user can utilize one or more computers to manage data in the server .

Those skilled in the art will appreciate that various adaptations and modifications of the just described preferred embodiments can be configured without departing from the scope and spirit of the invention. Therefore it is to be understood that within the scope of the appended claims the invention may be practiced other than as specifically described herein.

