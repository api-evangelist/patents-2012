---

title: Modeling recurring events in a data store
abstract: Time-related properties may be modeled independent of a base object. Rather than storing time properties with the object, they may be stored independently. A given object may be stored once, even if it has a recurrent time property. The description of a “meeting,” for example, may be stored once. Each occurrence of that object over time may be stored in a “timeslot” (object <foo> occurs at time ‘t’ on day ‘d’). If it is a recurring property, recurrence information may be stored independently. “Exception” information may be stored independently as well.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09262368&OS=09262368&RS=09262368
owner: Microsoft Technology Licensing, LLC
number: 09262368
owner_city: Redmond
owner_country: US
publication_date: 20121022
---
This application is a continuation of and claims the benefit to U.S. Pat. No. 8 321 416 entitled MODELING RECURRING EVENTS IN A DATA STORE filed on Oct. 12 2011 which is a continuation of and claims the benefit to U.S. Pat. No. 8 065 282 entitled MODELING RECURRING EVENTS IN A DATA STORE filed on Feb. 5 2009 which is continuation of and claims benefit to U.S. Pat. No. 7 499 942 entitled MODELING RECURRING EVENTS IN A DATA STORE filed Dec. 28 2005 each of which are hereby incorporated by reference in their entirety.

In a data storage system many of the objects stored may be related to time. Examples of data storage systems include message data storage systems such as Microsoft Exchange for example databases such as SQL Server for example and the like. Events such as meetings appointments and tasks for example have a very clear time relationship. Even less obvious events such as movies baseball games and the Tour de France for example can have time relationships. An object such as a message may have several time relationships e.g. time sent time received time forwarded time read etc. . Modeling simple time relationships such as time sent for example may be simple. All that may be needed is to add a property of type time to the object.

The problem however gets much more complicated when the relationship between the object and time is not 1 to 1 a single time at which a meeting occurs or a single time at which a message was received but rather 1 to many. Examples of such relationships are recurring events such as a meeting that repeats every week or a task that must be performed quarterly. It is not beyond the realm of possibility that eventually a message store may even need to track all the different times a message was read for example for regulatory reasons .

In the past the solution has been to model time based relationships for each object type separately. Such a solution however makes the task of providing a unified view of time related objects such as a calendar of not only meetings but also other objects very difficult to implement support and extend. For example it is common for a meeting to repeat every week except on holidays. If each time based relationship were modeled separately then an exception would need to be added to each and added consistently with the same rules what holidays exist On what day do they fall etc. . To resolve these issues it would be desirable to have a unified scheme to model recurring time relationships regardless of the underlying object e.g. message meeting appointment etc. .

In known systems there may be grammar for recurrence but no grammar for exceptions. An example of an exception might be the 28occurrence of this meeting which usually falls on Monday should fall on Tuesday. A typical calendaring program however may fail to detect that the Tuesday on which the 28occurrence of the meeting is to be held is a holiday. Typically such a system is implemented via an object e.g. calendar entry with annotations that describe the recurrence requirements and the exceptions. However there is typically no way for the end user to see the exceptions.

As disclosed herein time related properties may be modeled independent of a base object. Rather than storing time properties with the object they may be stored independently. A given object may be stored once even if it has a recurrent time property. The description of a meeting for example may be stored once. Each occurrence of that object over time may be stored in a timeslot e.g. object occurs at time t on day d . If it is a recurring property recurrence information may be stored independently. Exception information may be stored independently as well.

Thus a methodology is disclosed for consistent representation of recurrence patterns and exceptions on any object. An object independent model may be developed for representing recurring time based properties with exceptions. A process for developing such an object model and a computing system having such an object model developed on it are also disclosed.

If sub items are allowed such as sub tasks then a Parent Child Relationship table may link them together. The table links the parent object to one or more child objects . pk is a typical shorthand for primary key which is a unique identifier for an object in a data store. fk is a typical shorthand for foreign key which is a reference to a unique identifier in the data store.

Using this model an application can quickly build a unified calendar or similar time relationship application using timeslot and object the time object and relationship are recorded. The recurrence and exception information are more rationale why timeslot contains the data it does and so that any changes to the object or relationship can be made with full knowledge of the reasons behind the relationships that were created. For example if a meeting is rescheduled from every Thursday to every Monday it is possible that exceptions may be added for example an occurrence of the meeting may now fall on Labor Day or removed it now avoids Thanksgiving Day .

Thus such a model may include three concepts that are independent of the object itself a time slot which may be defined by a start time and end time pair a recurrence pattern which indicates how often the item is to occur and an exception relationship which identifies two discrete objects that are identical except for the exception. Consequently an object does not have to know anything about time recurrence or exceptions. Any object could be turned into a recurring object without changing the object itself.

Suppose now that the meeting is to recur every Thursday at the location beginning at the start time and ending at the end time. A Recurrence table can be created with recurrence information that indicates that the meeting is to recur accordingly. The Recurrence table may refer to the Timeslot ID of the Timeslot table . At this point i.e. without exceptions a calendar entry for each attendee could be entered for a meeting at the location beginning at the start time and ending at the end time every Thursday.

Suppose now that an exception to the recurrence exists on a holiday that falls on a Thursday. An Exception table can be created to indicate that an exception to the recurring condition exists. The Exception table may include an Exception table ID e.g. that uniquely identifies the Exception table a Master ID e.g. that identifies the object to which the exception is taken e.g. meeting every Thursday and an Exception ID e.g. that identifies the object with which the object associated with the Master ID has an exception relationship.

A Timeslot object can be created to identify by start and end time the time slot during which the excepted meeting would have occurred but for the exception. The Timeslot object may refer to the ObjectId of the exception .

An excepted meeting object may be created to define the excepted meeting. The meeting object may have a unique Item ID e.g. . The meeting object may be identical to the meeting object or it may differ. For example the excepted meeting may be held at the same location and include the same attendees as the usual recurring meeting . On the other hand the excepted meeting might occur at a different location and or include different attendees.

A Timeslot object can be created to identify by start and end time the time slot during which the excepted meeting is to occur. The Timeslot object may refer to the ObjectId e.g. of the excepted meeting object . The start and end times defined by the Timeslot object may be the same as the start and end times defined by the Timeslot object if for example meetings held on holidays are held at the same time but in a different location e.g. in a local bar rather than in a company conference room . On the other hand the start and end times might differ from those defined by the Timeslot object if for example the excepted meeting is to be rescheduled to the preceding Wednesday .

If the exception itself is recurrent e.g. meetings are typically held on Mondays are held on Tuesdays in the summer months the CEO is an attendee only during the first quarter meetings that are typically held in a small shabby conference room are held in the Board room during the first quarter because the CEO is an attendee a Recurrence object can be set up to cause the exception to recur accordingly. The Recurrence object may refer to the timeslot object that defines when the excepted meeting is to occur.

Although not required the invention can be implemented via an application programming interface API for use by a developer or tester and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers e.g. client workstations servers or other devices . Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers and the like. An embodiment of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an example system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology compact disc read only memory CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data . RAM may contain other data and or program modules.

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the example operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One of ordinary skill in the art can appreciate that a computer or other client devices can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. An embodiment of the present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

