---

title: Programmable cryptographic integrated circuit
abstract: A cryptographic integrated circuit including a programmable main processor for executing cryptographic functions, an internal memory, and a data transmission bus to which the main processor and the internal memory are electrically connected. The cryptographic integrated circuit also includes a programmable arithmetic coprocessor that has specific hardware arithmetic units each being designed to carry out a predetermined arithmetical operation. The programmable arithmetic coprocessor is separate from the main processor and is also electrically connected to the data transmission bus.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08891757&OS=08891757&RS=08891757
owner: Bull SAS
number: 08891757
owner_city: Les Clayes-sous-Bois
owner_country: FR
publication_date: 20120217
---
This invention relates to a cryptographic integrated circuit. More specifically it focuses on an integrated circuit comprising a programmable main processor for executing cryptographic functions an internal memory and a data transmission bus to which the main processor and the internal memory are electrically connected.

It particularly applies to the secure generation or transmission of data using hardware security modules HSMs or virtual private networks VPNs secured by encryption. In these fields integrated circuits with embedded asymmetric cryptographic functions based on modular arithmetic calculations are commonly used.

They are implemented by security protocols such as the Secure Sockets Layer SSL or Internet Key Exchange IKE protocol.

Regarding this third characteristic to be optimized the circuit preferably integrates a specific implementation of cryptographic algorithms generally described as counter measure implementation which is implemented at the expense of performance.

A first solution for at least partly optimizing these characteristics involves designing integrated circuits with specialized hardware called application specific integrated circuits ASICs . These circuits are custom designed. They have the advantage of a reduced product cost full control of implemented functions and high performance because the functions they support are wired into the circuit. However this results in a long and costly development that can be recovered only in a market that is capable of absorbing large quantities of integrated circuit products such as the U.S. market.

By contrast in Europe because there is less volume produced and fewer means of investment a second solution is adopted based on a technology of programmable integrated circuits such as field programmable gate array FPGA technology which implements a programmable main processor with an internal memory. This second solution associates the programmable main processor of the FPGA circuit to specific integrated circuits and redirects some cryptographic functions that are normally performed by the main processor such as modular multiplication exponentiation or even scalar multiplication to these integrated circuits that are physically dedicated to such functions. These dedicated circuits are called hardware accelerators. Although this solution can increase the performance of the FPGA circuit the hardware accelerators must be replaced when it is needed to perform a counter measure. Also place and route of the integrated circuit becomes necessary whenever there is a change to the microcode executed by the main processor. Place and route means the process during which the various parts of an integrated circuit are automatically positioned and connected.

Using FPGA technology it would also be impossible to have a pure software solution that involves programming the main processor because the processors in FPGA circuits are usually 32 bit processors that operate at frequencies below 200 MHz making such a solution especially slow. Moreover although possible in theory running multiple processors in parallel in a single FPGA circuit would quickly become limited due to insufficient internal memory. It would then be necessary to use external random access memory RAM .

It may therefore be desirable to provide a cryptographic integrated circuit that can overcome at least some of the above mentioned problems and constraints.

The invention therefore relates to a cryptographic integrated circuit comprising a programmable main processor for executing cryptographic functions an internal memory and a data transmission bus to which the main processor and the internal memory are electrically connected characterized in that it further comprises also electrically connected to the data transmission bus and being separate from the main processor a programmable arithmetic coprocessor comprising specific hardware arithmetic units each of these specific hardware arithmetic units being designed to carry out a predetermined arithmetical operation.

Therefore the arithmetical operations behind all of the cryptographic functions implemented by the main processor of the programmable integrated circuit are accelerated due to the presence of these hardware arithmetic units and some of the programmable calculations involving these arithmetical operations can be redirected from the main processor to the arithmetic coprocessor which is also programmable. It is then possible to actually offload the main processor of the integrated circuit while also increasing the speed of calculations and allowing implementation flexibility. Specifically it becomes possible to customize the implementation of each cryptographic algorithm to prevent SPA DPA or other attacks without requiring a place and route of the integrated circuit with each implementation change. Finally there is less load on the internal memory of the integrated circuit and it is no longer necessary to provide external RAM.

Optionally the hardware architecture of each specific hardware arithmetic unit in the arithmetic coprocessor is designed to carry out operations on numbers that are binary coded in words of at least 128 bits called large numbers .

Also optionally the programmable arithmetic coprocessor comprises at least one hardware arithmetic unit for modular addition one hardware arithmetic unit for modular multiplication using Montgomery reduction and one hardware arithmetic unit for a modular logic operation.

Also optionally the hardware architecture of at least one of the specific hardware arithmetic units such as the hardware arithmetic unit for modular addition or the hardware arithmetic unit for modular multiplication using Montgomery reduction is designed to carry out modular arithmetical operations in a pipeline mode and to return on the one hand several possible values from a requested single arithmetical operation and on the other hand a parameter for selecting a single value from said several possible values.

Also optionally the programmable arithmetic coprocessor comprises an output status register comprising a storage space of said selection parameter.

Also optionally the hardware architecture of each additional arithmetic unit integrated into the programmable sequencer is designed to carry out operations on numbers that are binary coded in words of at most 64 bits.

Also optionally the programmable sequencer further comprises a controller for executing microprograms a microcode memory and multiple registers including an input command register that is writable by the command scheduler and an output status register that is readable by the command scheduler.

Also optionally the microcode memory comprises program instructions for carrying out at least one of the operations from the set consisting of a modular multiplication a modular exponentiation a modular inverse calculation a modular division and an elliptic curve scalar multiplication using the specific hardware arithmetic units and the additional arithmetic units.

Also optionally the programmable main processor and the programmable arithmetic coprocessor are designed to communicate according to a programming interface providing at least a portion of a set of arithmetic calculation commands sent to the programmable arithmetic coprocessor by the main processor containing a field to indicate whether the modularity parameter for a modular arithmetical calculation is maintained from a previous calculation.

With this option some calculations preceding some arithmetical operations that are dependent on this modularity parameter can be avoided when said parameter does not vary from one calculation to another.

The cryptographic integrated circuit illustrated in comprises a programmable main processor for executing cryptographic functions an internal memory and a data transmission bus to which the main processor and the internal memory are electrically connected.

It further comprises a programmable arithmetic coprocessor which is separate from the main processor and also electrically connected to the data transmission bus .

The main processor and the programmable arithmetic coprocessor exchange data by means of an application programming interface API consisting of commands and statuses implemented in the internal memory which can be for example a shared memory such as a dual ported random access memory DPRAM . In order to offload the main processor the commands it issues for the programmable coprocessor are arithmetical macro instructions to be applied to integer operands that are binary coded in words of at least 128 bits such as from 128 to 4096 bits. These operands are called large numbers . There are two possible types of commands 

As such the programmable arithmetic coprocessor comprises a processing core and an input output interface for connecting the processing core to the bus . The interface thus comprises a two channel DMA controller for simultaneously transferring data to and from memory that resides outside of the processing core such as internal memory . It further comprises two first in first out FIFO buffer memories one for transmitting data from the processing core to outside the programmable arithmetic processor and the other for transmitting data in the opposite direction.

The processing core comprises multiple specific hardware arithmetic units and designed to carry out predetermined arithmetical operations. Each of these is a wired integrated circuit whose hardware architecture is designed to always perform the same basic operation. For example the hardware arithmetic unit is a modular addition unit for large numbers that carries out modular addition subtraction on operands that are binary coded in words ranging from 128 bits to 8192 bits. The hardware arithmetic unit is a modular multiplication unit for large numbers that carries out modular multiplication using Montgomery reduction on operands that are binary coded in words ranging from 128 bits to 4096 bits. Finally the hardware arithmetic unit is a modular logical operation unit for large numbers that carries out modular logical operations shifts comparisons etc. on operands that are binary coded in words ranging from 128 bits to 4096 bits.

Note that it is possible for the modular addition unit for large numbers to be capable of processing words that are twice as long as those processed by the modular multiplication unit for large numbers because when modular multiplications using Montgomery reduction are carried out on N bits this implies necessarily the execution of some addition and subtraction operations on 2N bits.

The processing core further comprises a programmable sequencer that is electrically connected to each of the specific hardware arithmetic units by wire to wire connections. It can itself include additional hardware arithmetic units as it will be seen later with reference to the hardware architecture of each additional arithmetic unit integrated into the programmable sequencer being possibly designed to carry out operations on numbers that are binary coded in words of up to 64 bits in addition to the arithmetical operations carried out by the specific hardware arithmetic units and . The programmable sequencer processes commands or macro instructions issued by the main processor and provides its results and statuses through a set of instructions for instance programmed in assembly language and meant to be compiled. These are traditional instructions that will not be detailed. They can be modified and recompiled without having to place and route the main processor in the integrated circuit .

The processing core further comprises a command scheduler that interfaces between the two buffer memories of the input output interface and the programmable sequencer . The command scheduler accepts and synchronizes commands issued by the main processor . It also transmits the results and statuses provided by the programmable sequencer .

Finally the processing core comprises a local memory that is electrically connected to the command scheduler to the programmable sequencer and to each of the specific hardware arithmetic units and . This local memory which can be in the form of RAM stores large numbers operands organized in variables and parameters. The number of variables that can be stored in this local memory depends of course on the size of the memory and the variables. As will be detailed later with reference to a local memory that can store for example two 4096 bit variables or twenty two 521 bit variables may be sufficient. The operand parameters can be the modulo elliptic curve or scalar multiplication parameters an exponentiation coefficient modular multiplication parameters using Montgomery reduction etc.

Commands received by the programmable arithmetic coprocessor as macro instructions and implemented in the form of microprograms in the programmable sequencer using the aforementioned set of instructions may include the following 

The input output interface of the programmable arithmetic coprocessor then executes the following tasks 

The operation of the programmable sequencer will now be detailed based on a description of its constituent elements that are illustrated schematically in .

It first comprises a controller for executing microprograms a program counter such as a 9 bit counter and a microcode memory such as containing 256 words of 32 bits .

It further comprises additional hardware arithmetic units and designed to carry out operations on numbers that are binary coded in words of at most 64 bits. Each of these is a dedicated wired integrated circuit whose hardware architecture is designed to always perform the same basic operation. Thus for example the hardware arithmetic unit is an addition unit carrying out additions subtractions or increments decrements on operands that are binary coded in words of up to 64 bits. Each of these operations is carried out in a clock cycle. The hardware arithmetic unit is a multiplication unit that carries out for example multiplications on operands that are binary coded in words of up to 32 bits. Each of these multiplications is carried out in a clock cycle. Finally the hardware arithmetic unit is a logical operation unit that carries out logical operations shifts to the left or right parity tests negations comparisons or equality tests on operands that are binary coded in words of up to 64 bits. Each of these operations is carried out in a clock cycle.

It further comprises a first set of 64 bit registers intended to temporarily store operands and the intermediary results of calculations commanded by the execution controller . This set comprises for example two 64 bit operand registers common to all of the additional hardware arithmetic units and an 8 bit operand register specific to the logical operation unit used to indicate the shift value when this unit performs a shift to the left or right two 64 bit result registers for addition and multiplication 50 units and a 128 bit result register for the logical operation unit .

It further comprises a second set of n 64 bit registers for storing operands and global results respectively from and to the local memory of the programmable arithmetic coprocessor . This second set is for example implemented as DPRAM memory with n 64 bit words for storing or reading in Burst mode n being configurable from 2 to 128.

It further comprises an input command register that is writable by the command scheduler more specifically intended to receive a macro instruction placed by the command scheduler and an output status register that is writable by the execution controller and readable by the command scheduler to indicate when a macro instruction was executed.

Finally the execution controller the microcode memory the additional hardware arithmetic units and the registers are connected to an input output unit to the local memory of the programmable arithmetic coprocessor . This input output unit carries out read and write cycles for 32 and 64 bit words in simple or Burst mode from sets of registers and .

The hardware unit for the modular addition of large numbers is designed to carry out four types of operations between two large numbers A and B possibly involving a modular parameter p including a simple addition between A and B a simple subtraction between A and B a modulo p addition between A and B and a modulo p subtraction between A and B. The choice between a simple operation and a modulo p operation can be done based on the binary value taken by a mod parameter specified by the programmable sequencer .

Judiciously the addition and subtraction operations can be carried out in a pipeline mode i.e. using a mechanism in which because the operations on large numbers are done by blocks of 64 bits the reads addition subtraction operations and stores are carried out on these blocks during each clock cycle. This mechanism increases the speed at which instructions are executed in the programmable sequencer . The programmable sequencer starts indeed a new macro instruction before having finished the previous one. There can therefore be simultaneously multiple executing macro instructions per 64 bit block. The execution time per macro instruction is not reduced but the throughput from the programmable sequencer meaning the number of macro instructions executed per time unit increases.

The hardware architecture of the modular addition unit is for example designed to carry out the following sequence of instructions when an addition is requested 

In this sequence of instructions that comprises a loop on an index i the function size returns the size in bits of the word passed as a parameter and the function carry returns the value of the carry digit in the addition. In practice carry C2 s 0 if C1 p and carry C2 s 0 if C1

The hardware architecture of the modular addition unit is for example also designed to carry out the following sequence of instructions when a subtraction is requested 

In this case the programmable sequencer gradually provides both possible results C1 and C2 of the subtraction in parallel with the correct result selected only at the end of the loop using the carry test. According to this embodiment the programmable sequencer therefore gradually provides the local memory with the two results C1 C2 and at the end of the loop it provides a status bit that indicates which of the two results is correct based on the requested operation. At the cost of consuming more memory the subtraction calculation is judiciously accelerated.

The hardware unit for a modular logic operation on large numbers is designed to carry out two types of operations between two large numbers A and B and two types of operations on one large number A. These are a comparison between A and B that returns a binary parameter whose value is based on the comparison an equality test between A and B that returns a binary parameter whose value is based on this test and a shift to the right of A bits.

The hardware architecture of the modular logic operation unit is designed in a manner known per se to carry out these four types of logical operations.

The hardware unit for a modular multiplication on large numbers is designed to carry out a modulo p multiplication by Montgomery reduction between two large numbers A and B. Its hardware architecture is thus designed to carry out the following sequence of instructions denoted as Montpro A B 

In this sequence of instructions the multiplications A i B and M p are carried out on 32 bits. The result is Montpro A B A B 2modulo p. In addition N 1 p 0 modulo 2and must be calculated in advance by a microprogram whenever there is a change to the parameter p. This calculation N is known and will not be detailed.

Also judiciously the multiplication operation by Montgomery reduction can be carried out in a pipeline mode. In this case the programmable sequencer gradually provides two possible results C1 and C2 of the multiplication by Montgomery reduction in parallel with the correct result selected only at the end of the loop using a carry test. According to this embodiment the programmable sequencer therefore gradually provides the local memory with the two results C1 C2 and at the end of the loop it provides a status bit that indicates which of the two results is correct. At the cost of consuming more memory the multiplication calculation by Montgomery reduction is also accelerated.

Using the specific hardware arithmetic units and detailed above and the additional hardware arithmetic units other more complicated operations can be carried out by a microprogram. They are executed by the execution controller with the corresponding microprogram instructions being stored in the microcode memory .

A modular multiplication of A by B can be calculated by a microprogram using the hardware unit for modular multiplication on large numbers by executing the following sequence of instructions 

In this sequence of instructions R2P 2modulo p and should be calculated in advance by a microprogram whenever there is a change to the parameter p. This calculation of R2P is known and will not be detailed.

In view of the above some commands sent by the main processor to the arithmetic coprocessor and processed by the programmable sequencer such as any modular multiplication command may have a field such as a bit indicating whether the modular parameter p is maintained from a previous command. Therefore if the parameter p is maintained N and R2P do not need to be calculated in advance because these parameters can be maintained in local memory . If the parameter p changes it can be loaded by the programmable sequencer before the other data from the given command for the advance calculation of the parameters N and R2P.

Also for example a modular exponentiation calculation can be carried out by a microprogram based on the hardware unit for a modular multiplication on large numbers. There are several possible implementations which will not be detailed because they are well known to one skilled in the art.

Also for example a modular inverse calculation can be carried out by a microprogram based on the set of specific hardware arithmetic units and for large numbers. Its implementation is also well known and will not be detailed.

Also for example a modular division calculation can be carried out by a microprogram based on the hardware unit for a modular multiplication on large numbers and on the aforementioned modular inverse calculation. Its implementation is also well known and will not be detailed.

Also for example an elliptic curve scalar multiplication calculation can be carried out by a microprogram based on the hardware unit for modular addition on large numbers and the hardware unit for modular multiplication on large numbers. Its possible implementations are also well known and therefore will not be detailed. They specifically depend on the selection of coordinates used to situate the points on the given elliptic curve. However the selection of a system of coordinates is governed by performance criteria and by a resistance to SPA DPA attacks. The advantage of carrying out the scalar multiplication calculation with a microprogram is therefore to be able to change the implementation without affecting the hardware architecture of the cryptographic integrated circuit or its place and route because the change in implementation is done by a simple read of the microcode memory .

An example of a general structure of the local memory of the arithmetic coprocessor is illustrated schematically in .

The local memory dedicated notably to storing large number operands organized into variables and parameters comprises two main storage modules. A first module is reserved for storing n variables. A second module is reserved for storing parameters such as elliptic curve or scalar multiplication parameters the aforementioned parameters N or R2P being involved in the modular multiplication by Montgomery reduction an exponentiation exponent the modulo parameter p etc.

The first module is divided into two mirrored submodules and needed to simultaneously read the variables from the specific hardware arithmetic units and . Moreover because the result provided by such an arithmetic unit can have two possible forms C1 and C2 each submodule it itself divided into two distinct blocks not shown which are simultaneously writable. As indicated above the correct result is selected using the status parameter provided by the arithmetic unit used at the end of the calculation and stored by the programmable sequencer in its output status register . To maximize performance the size of the above mentioned four blocks is 64 bits.

In terms of the total size needed for the local memory the microprogram s execution of a scalar multiplication requires a storage space of about 20 words of up to 521 bits or up to 20 words of 9 64 bits or 180 words of 64 bits. For the execution of the aforementioned modular multiplication there must be up to 1 word of 8193 bits for the R2P calculation or 129 words of 64 bits. This storage space is also needed for the modular reduction which requires a simultaneous storage of two 4096 bit words each. Storage space for one 4096 bit variable must be added to this or 64 words of 64 bits which gives a total of 193 words of 64 bits.

The size of each block is therefore set to a minimum of 256 words of 64 bits or 2 kB. The first module is therefore sized to 8 kB for example for storing two 4096 bit variables or twenty two 521 bit variables.

For the second module it is necessary to have enough space to store the parameter p the exponentiation exponent the aforementioned parameters N or R2P and the value 1 on 4096 bits used for a conversion between the Montgomery format and the real format in the Montgomery reduction for a total of four 4096 bit words and one 32 bit word. However knowing that the parameter N and the value 1 on 4096 bits can successively share the same memory space it is necessary to provide 4 64 words of 64 bits or 2 kB for the second module .

As illustrated in the second module and each submodule of the first module is readable and or writable by the input output interface the specific hardware arithmetic units and the programmable sequencer and the command scheduler . Traditionally this access is handled using multiplexers.

Also as illustrated in access from each specific hardware arithmetic unit and to the input output interface the programmable sequencer and the local memory is also done using multiple links managed by multiplexers the hardware unit for addition of large numbers having to accept two operands A and B and a parameter p for providing two possible results C1 and C2 the hardware unit for multiplication of large numbers having to accept two operands A and B and a parameter p for providing a result C or two possible results C1 and C2 and the hardware unit for a logical operation on large numbers having to accept two operands A and B for providing a result C.

Clearly a cryptographic integrated circuit such as that described above can accelerate the operation of its main processor by offloading at least some of its cryptographic calculations while maintaining the implementation flexibility required for counter measure and for the development of this circuit at a limited cost.

Also note that the invention is not limited to the embodiment described previously. As is known to those skilled in the art there are various modifications that can be made to the embodiment described above with respect to the instruction that has been disclosed. In the following claims the terms used should not be interpreted as limiting the claims to the embodiments presented in this description but should be interpreted to include all of the equivalents that the claims intend to cover by their formulation and whose projection is within reach of those skilled in the art by applying their general knowledge to the instruction that has just been disclosed.

