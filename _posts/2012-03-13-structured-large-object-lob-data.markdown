---

title: Structured large object (LOB) data
abstract: Provided are techniques for processing structured content within Large Object (LOB) data that is stored in a column of a database table. Structural metadata describing structures that each define a different format of the structured content is stored. A request for data in the database table is received. The structural metadata is used to create an empty result set with columns defined by at least two of the structures. For each row of data in the database table that includes LOB data, control data is used to identify one of the structures to be applied to the structured content within the LOB data stored in that row of data, and the structured content within the LOB data in that row of data is mapped to the columns in the result set based on the identified one of the structures. The result set is returned.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08676788&OS=08676788&RS=08676788
owner: International Business Machines Corporation
number: 08676788
owner_city: Armonk
owner_country: US
publication_date: 20120313
---
Embodiments of the invention relate to creating searching for retrieving and nulling structured LOB data.

Database Management System DBMS software may use a database query language to store and retrieve data in a database. The database query language that may be but is not limited to a Structured Query Language SQL interface. A database is organized into tables that consist of rows and columns of data. The rows may be called tuples or records or rows.

A table in a database can be accessed using an index. An index is an ordered set of references e.g. pointers to the records in the table. The index is used to access each record in the table using a key i.e. one of the fields or attributes of the record which corresponds to a column . The term key may also be referred to as index key . An index is based on one or more columns of the table.

A query may be described as a request for information from a database based on specific conditions. A query typically includes one or more predicates. A predicate may be described as an element of a search condition that expresses or implies a comparison operation e.g. A 3 .

Large object LOB data may be described as a collection of binary data stored in a single column or field in a table in a DBMS.

In DBMS and database Application Programming Interfaces APIs the interpretation of Large Object LOB data columns is left to a database application after retrieving the LOB data. Database applications retrieve raw LOB data from the database and use application logic to post process the LOB data.

Often LOB data contains multimedia audio or image data which is unstructured. Sometimes however the LOB data can also contain structured content i.e. in the form of fields . For example the structured content may include tags for fields such as artist and title fields embedded within the multimedia LOB data. In order to search for specific fields in the LOB data the DBMS materializes the LOB data and sends the LOB data back to the requesting application. The requesting application programmatically inspects the contents of the LOB data looking for the specific value of a specific field. Some DBMSs may allow searching on a subset of the LOB data but they first internally materialize the LOB data in order to accomplish this. Materializing the LOB data may be described as loading the LOB data into memory through an Input Output I O operation.

A Variable length LOB VLOB is a type of LOB and may be defined as having a certain number of fields but different records i.e. instances of the VLOB may have different fields that are valid or null i.e. invalid . Thus the VLOB may be described as having a varying number of valid fields.

Provided are a computer implemented method computer program product and system for processing structured content within Large Object LOB data that is stored in a column of a database table. Structural metadata describing structures that each define a different format of the structured content is stored. A request for data in the database table is received. The structural metadata is used to create an empty result set with columns defined by at least two of the structures. For each row of data in the database table that includes LOB data control data is used to identify one of the structures to be applied to the structured content within the LOB data stored in that row of data and the structured content within the LOB data in that row of data is mapped to the columns in the result set based on the identified one of the structures. The result set is returned.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

The structured LOB system provides dynamic runtime mapping of binary data with applied structured content in for example a Database Management System DBMS to generate structured LOB data.

Because each row stored in the database table can be one of two structures the structured LOB system stores structural metadata describing each of the structures associated with the LOB data to assist in processing the LOB data. The structural metadata describes a mapping between LOB data and a particular structure e.g. structure or to enable mapping the LOB data to the columns for that particular structure.

In addition to storing structural metadata about the structures for the LOB data the structured LOB system stores for each row inserted into the database control data e.g. a control flag or a control field . This control data may be stored directly in the LOB data or as a separate column outside of the LOB data. In the policy type is stored in the first part of the structured LOB data and the policy type is control data that is used to indicate which type of policy the LOB data is for. This information is used by the structured LOB system to determine how to effectively deliver the LOB data based on the corresponding structure. In particular the structured LOB system uses the structural metadata to map the LOB data to a particular structure based on the control data.

When issuing Query 1 a result set may be returned e.g. to an end user containing the PolicyData BLOB as raw binary data. Query 1 may use an index. illustrates in a block diagram a result set that shows un interpreted raw binary data in accordance with certain embodiments. In such cases an index outside of the BLOB is used. Since result set only contains BLOB data the BLOB is indexed as a whole. In such cases an application resolves the BLOB into sub fields.

When a request is received for the LOB data stored in a column of a database table the structured LOB system uses the structural metadata to generate queries to retrieve the LOB data and insert the LOB data into a result set which is another database table . For example the structured LOB system uses the structural metadata to generate Query 2 Query 3 Query 4 Query 6 Query 7 and Query 8 below.

The combination of structural metadata and control data allows the structured LOB system to provide end users with structured LOB data. In certain embodiments the structured LOB system generates a result set having columns of the format of each type of LOB data that may be included in the result set. In certain embodiments the structured LOB system uses the value of the control data e.g. the value of the policy type in to determine which columns in the result set may have data and which may not for each row.

When the structured LOB system presents the values for one type of LOB data e.g. the motor insurance policy in a row of the result set the structured LOB system fills in the values for the columns specific to that type of LOB data and the structured LOB system presents the columns specific to other types of LOB data e.g. the home owners insurance policy as null or not valid for the current row of data.

With the structured LOB system the DBMS has the ability to processes finitely structured LOB data directly. This makes LOB data processing transparent to the end user and provides an extensible mechanism for accessing pieces of data within the structured LOB data including reading from inserting into updating and indexing finitely structured LOB data.

In block the structured LOB system selects a next row of data from a database table that includes LOB data starting with a first row of data. In block the structured LOB system uses control data to identify one of the structures to be applied to the structured content within the LOB data stored in that row of data. From block processing continues to block .

In block the structured LOB system maps the structured content within the LOB data in that row of data to the columns in the result set based on the identified one of the structures. In certain embodiments the mapping is done by creating queries. For example the structured LOB system creates a first query using the structural metadata to retrieve a field value from the structured content and creates a second query using the structural metadata to insert the field value into a column of the result set.

In block the structured LOB system determines whether all rows of data have been selected. If so processing continues to block otherwise processing loops back to block to select another row of data .

In block the structured LOB system returns the result set. The structured content within the LOB data is presented in columns of the result set.

The user may query the structural metadata in the catalog to identify which records are for which policy type.

Thus embodiments simplify the interaction and interpretation of LOB data in cases in which the LOB data has a finite number of structured structures. Embodiments store and query variable data whose structure can vary from one record to the next. Embodiments manage multiple different record types in a single table using structured LOB data.

The structural metadata allows Database Administrators DBAs or others to define a layered and flexible structure for LOB data. Layered may be described as deeply nested fields. With a nested field LOB data may contain a field that itself contains other LOB data. Flexible may be described as having no constraint on data types within these layers even user defined types which do not need to be made up of pre existing DBMS types can be introduced. Given this structural metadata embodiments apply structure to previously unstructured raw LOB data and offer the capability to leverage a database query language e.g. SQL to read and write into these LOB fields no matter how deeply nested.

Certain embodiments process the varied structures stored within the LOB column of a database. Structural metadata describing the varied structures used within the LOB data is stored. When a request for the LOB data is received the structural metadata associated with the LOB data is used to define a query that can map into the LOB data. For each row of data for which the LOB data is returned control data is used to identify which of the underlying varied structures applies to that LOB data and the LOB data is mapped to the columns in the corresponding result set.

With embodiments the structured LOB system offers the ability to natively search and index specific fields in the structured content where these fields are at a known offset in the LOB data. The structured LOB system allows indexing capability on these fields for retrieval of LOB data using an index .

The structured LOB system offers the ability for a DBMS to dynamically search or index structured content within the LOB data without needing to materialize the LOB data or portions of the LOB data. The structured content in the LOB data is at a known location i.e. offset within the LOB data. The structured LOB system also offers the ability for a DBMS to create indexes on these structured fields of the LOB data for retrieval of the entire LOB data without the DBMS having to extract and duplicate the target data from the LOB data and store the target data in another column when the LOB data is first inserted and without the DBMS having to materialize portions of the LOB data. The DBMS may directly access any portion or subset of the LOB data regardless of whether or not the LOB data contains structured content. The DBMS does not need to know ahead of time that the LOB data has structured fields. The searching of the LOB data is done dynamically on an as needed basis. Thus no additional database metadata needs to be defined to the DBMS . With embodiments the structured LOB system searches on a subset of LOB data that has been stored e.g. for decades .

The structured LOB system offers application programs the ability to author queries with search predicates that qualify on any subset of LOB data. For example the query can search for each LOB data that contains a specific artist name in a tag contained within that LOB data. Application programs can also choose to retrieve only the artist information from the LOB data. The structured LOB system extracts this information directly from the LOB data without needing to materialize the LOB data internally in order to extract the information.

Embodiments are applicable to any type of data where there is a consistent way of measuring offset and length e.g. binary data .

The structured LOB system searches for or retrieves data based on the name of a column within a table . This allows any subset of columns or a tuple to be searched by the structured LOB system . In turn this allows structured content within a column to be searched without needing to first materialize the content of the column to look for a data value.

In certain embodiments the structured content is indexed on offset and length which is provided by the structural metadata within the catalog .

Embodiments provide the ability to index and search fields in LOB data without needing to first materialize the LOB data looking for the fields. The structured LOB system provides direct access to the fields.

In certain embodiments the structured LOB system allows the offset and length to be provided in addition to or even instead of the column name. The offset may be relative to the start of the table or to the start of the column within the table . The following is a sample Query 5 providing the offset and length 

A user may retrieve or update a specific field in the LOB data. The following sample Query 6 Query 7 and Query 8 access structured content with known column names for the fields within the structured content 

With embodiments the unstructured LOB data has a subset of data that is structured e.g. tagging for multimedia where the tagging portion is part of the LOB data but has structured information inside of it . Embodiments search a subset of this single column without needing to start at the beginning and materialize the column up to the point where the information resides. Also on insert of this column the DBMS does not need to extract that section of the information and store it redundantly elsewhere for query capability.

Embodiments null out dynamic content that exist at the end of a VLOB record and that do not fit within the physical space allocated to the VLOB record. Embodiments maintain a length field i.e. a size field of a VLOB record and the structured LOB system nulls any fields that are mapped in an area outside of the length of the given VLOB record. In certain embodiments the length field is defined at the beginning of the VLOB and identifies the actual size of the VLOB record. From this length value the structured LOB system knows based on the structural metadata which of the nested or inner fields of that VLOB record are invalid because they lie beyond the physical size allocated to the VLOB record.

A VLOB can have multiple fields mapped within its maximum possible length. In the record in which the VLOB record is smaller than the maximum possible length of the VLOB there will be mapped fields at the end of the VLOB metadata that lie outside of the VLOB record data thereby making them non existent fields.

The structured LOB system provides a granular level of nullability within a VLOB s structured content. With embodiments the specific fields in the metadata that do not exist for a given VLOB record marked null and the remaining fields remain valid and can be retrieved directly by the structured LOB system . The structured LOB system is able to interpret any valid structured content from a VLOB.

As another example if a VLOB has fields F F F F and F and a length field is defined for the VLOB that only covers up to field F then the structured LOB system nulls fields F F F and F. Separately if F is already null i.e. is a nullable field that has no data then field F continues to be treated as null.

The users may qualify queries based on whether a field defined in a VLOB is valid or invalid. The structured LOB system looks at the length of a particular VLOB record to see whether the field is within the VLOB s area to determine whether the field exists in the physical database.

The structured LOB system processes Query 9 by performing a lookup for records where the VLOB is of length big enough to contain field B. In this manner embodiments provide a solution for handling the nullability of structured content within a VLOB in a granular way. Also embodiments allow the database query language to qualify on whether the nested fields in a VLOB are null or not null.

based on the length of the VLOB. In block the structured LOB system processes a query against the VLOB record.

The structured LOB system is sensitive to CREATE READ and UPDATE operations issued against a VLOB. For each of these operations the structured LOB system either inspects and or updates the value of the length field of the VLOB record. The DELETE operation remains unchanged as that would just delete the entire VLOB record.

For a CREATE INSERT operation the structured LOB system determines the last field defined by the INSERT statement in the VLOB and sets the length field to the appropriate value to contain that field. For example based on the metadata in to insert the first record of the user can issue the following sample Query 10 

The structured LOB system determines that EMAIL is the last field being inserted and that the length size needed to contain the field EMAIL is 112 bytes. Then the structured LOB system inserts a LENGTH value of 112.

The structured LOB system determines that ADDRESS is the last field being inserted and that the length size needed to contain the field ADDRESS is 82 bytes. Then the structured LOB system inserts a LENGTH value of 82.

For an UPDATE operation the structured LOB system determines the last updated field defined by the UPDATE statement and grows the length of the VLOB record to accommodate the newer size as needed. If the VLOB record already has a length that can accommodate the updated field then no change is made to the length field. This prevents unwanted truncation of the VLOB record size and accidental nullification of valid data.

For a READ SELECT operation the structured LOB system checks the size of the length field and determines whether the fields being retrieved fall within the defined length of the VLOB record. For the fields that are outside the length of the VLOB record a value of null is returned.

The structured LOB system internally realizes that EMAIL is part of a VLOB and converts query 12 to an equivalent Query 13 that can be easily processed 

This provides a solution for the structured LOB system to handle the nullability of structured content within a VLOB in a granular way as well as a way for the Data Query Language to qualify on whether the nested fields in a VLOB is null or not null.

Embodiments rely on the structural metadata to provide structure to a VLOB column. There are no null indicators present for the structured fields in the VLOB instead there is a single length field at the head of the VLOB that indicates the overall length of the VLOB record. Embodiments provide the ability for the structured LOB system to detect that areas in a VLOB are not present and therefore represent them as null entities. Internally the structured LOB system manages this length field and updates the length field appropriately when VLOB records are inserted or updated via the database query language.

With embodiments the VLOB is broken up into well defined fields and the structured LOB system applies the concept of nullability correctly to those fields based on whether they exist or not which is based on the length of the VLOB.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device solid state memory magnetic tape or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package 

partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the embodiments of the invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational processing e.g. operations or steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The code implementing the described operations may further be implemented in hardware logic or circuitry e.g. an integrated circuit chip Programmable Gate Array PGA Application Specific Integrated Circuit ASIC etc. The hardware logic may be coupled to a processor to perform operations.

Devices that are in communication with each other need not be in continuous communication with each other unless expressly specified otherwise. In addition devices that are in communication with each other may communicate directly or indirectly through one or more intermediaries.

A description of an embodiment with several components in communication with each other does not imply that all such components are required. On the contrary a variety of optional components are described to illustrate the wide variety of possible embodiments of the present invention.

Further although process steps method steps algorithms or the like may be described in a sequential order such processes methods and algorithms may be configured to work in alternate orders. In other words any sequence or order of steps that may be described does not necessarily indicate a requirement that the steps be performed in that order. The steps of processes described herein may be performed in any order practical. Further some steps may be performed simultaneously.

When a single device or article is described herein it will be readily apparent that more than one device article whether or not they cooperate may be used in place of a single device article. Similarly where more than one device or article is described herein whether or not they cooperate it will be readily apparent that a single device article may be used in place of the more than one device or article or a different number of devices articles may be used instead of the shown number of devices or programs. The functionality and or the features of a device may be alternatively embodied by one or more other devices which are not explicitly described as having such functionality features. Thus other embodiments of the present invention need not include the device itself.

The illustrated operations of the flow diagrams show certain events occurring in a certain order. In alternative embodiments certain operations may be performed in a different order modified or removed. Moreover operations may be added to the above described logic and still conform to the described embodiments. Further operations described herein may occur sequentially or certain operations may be processed in parallel. Yet further operations may be performed by a single processing unit or by distributed processing units.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The terms an embodiment embodiment embodiments the embodiment the embodiments one or more embodiments some embodiments and one embodiment mean one or more but not all embodiments of the present invention s unless expressly specified otherwise.

The terms including comprising having and variations thereof mean including but not limited to unless expressly specified otherwise.

The enumerated listing of items does not imply that any or all of the items are mutually exclusive unless expressly specified otherwise.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of embodiments of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiments were chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

Input Output I O devices including but not limited to keyboards displays pointing devices etc. may be coupled to the system either directly or through intervening I O controllers .

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters .

The computer architecture may be coupled to storage e.g. any type of storage device a non volatile storage area such as magnetic disk drives optical disk drives a tape drive etc. . The storage may comprise an internal storage device or an attached or network accessible storage. Computer programs in storage may be loaded into the memory elements and executed by a processor in a manner known in the art.

The computer architecture may include fewer components than illustrated additional components not illustrated herein or some combination of the components illustrated and additional components. The computer architecture may comprise any computing device known in the art such as a mainframe server personal computer workstation laptop handheld computer telephony device network appliance virtualization device storage controller etc.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The foregoing description of embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the embodiments to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the embodiments be limited not by this detailed description but rather by the claims appended hereto. The above specification examples and data provide a complete description of the manufacture and use of the composition of the embodiments. Since many embodiments may be made without departing from the spirit and scope of the invention the embodiments reside in the claims hereinafter appended or any subsequently filed claims and their equivalents.

