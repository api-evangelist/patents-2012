---

title: Method to customize native operating system views using web technologies in mobile devices
abstract: Systems, methods, routines and/or techniques for customizing native operating system views using web technologies in mobile devices are described. A messaging system may be used to allow and/or facilitate communication between two or more native views, for example, via one or more software development kits (SDKs). A method may include executing, in a first native operating system view, messaging code to communicate one or more messages from the first native operating system view to a second native operating system view. The method may include executing the software development kit code to receive and/or handle the one or more messages from the first native operating system view and route and/or transmit the one or more first messages to the second native operating system view. In some embodiments, the first native operating system view is a WebView and the second native operating system view is a VideoView.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08887178&OS=08887178&RS=08887178
owner: Google Inc.
number: 08887178
owner_city: Mountain View
owner_country: US
publication_date: 20121026
---
This application claims priority from U.S. Provisional Patent Application No. 61 717 287 filed on Oct. 23 2012. The disclosure of this provisional application is incorporated by reference herein in its entirety.

The present disclosure relates to native operating system code on mobile devices and more particularly to one or more systems methods routines and or techniques for customizing native operating system views using web technologies in mobile devices.

Mobile devices such as smartphones have become more advanced. Some smartphones incorporate a processor that runs computer code including code that implements an operating system OS . Computer code run by a smartphone may include both native code i.e. code written by the creator of the smartphone and or the operating system and code developed by third parties e.g. third party applications . To aid third parties in developing applications the creator of the smartphone and or the operating system may offer application developers a software development kit SDK and or an application programming interface API that can be integrated into applications the developers are creating. An SDK may include a library of native code components samples and documentation.

Further limitations and disadvantages of conventional and traditional approaches will become apparent to one of skill in the art through comparison of such systems with some aspects of the present invention as set forth in the remainder of the present application and with reference to the drawings.

The present disclosure describes one or more systems methods routines and or techniques for customizing native operating system views using web technologies in mobile devices. The systems methods routines and or techniques of the present disclosure may include and or utilize a messaging system to allow customization of native views. The messaging system may be designed and or adapted to allow and or facilitate communication between two or more native views for example via one or more software development kits SDKs .

These and other advantages aspects and novel features of the present disclosure as well as details of an illustrated embodiment thereof will be more fully understood from the following description and drawings. It is to be understood that the foregoing general descriptions are exemplary and explanatory only and are not restrictive of the disclosure as claimed.

The present disclosure describes one or more systems methods routines and or techniques for customizing native operating system views using web technologies in mobile devices. The systems methods routines and or techniques of the present disclosure may include and or utilize a messaging system to allow customization of native views. The messaging system may be designed and or adapted to allow and or facilitate communication between two or more native views for example via one or more software development kits SDKs .

The term native view or native operating system view may refer to a native function or native code i.e. code written by the creator of the smartphone and or the operating system that is run on a mobile device or smartphone. Native views may serve as a way to interface with core functionalities of a mobile device or smart phone for example rendering HTML to display a webpage playing or streaming a video operating a camera that is incorporated into the smartphone or other core functionalities. A software development kit SDK for example provided to application developers may include one or more application programming interfaces APIs to these native views. It should be understood that references to various native views e.g. WebView in this disclosure may be used in a flexible manner to refer to either the native function code the core functionality or the resulting windows frames sounds videos and the like e.g. the webpage window that gets displayed on the screen of a mobile device or smart phone .

In order to provide a clear description of the various embodiments of the present disclosure the descriptions provided herein may focus on one or more embodiments that relate to a native WebView and a native VideoView. However it should be understood that the systems methods routines and or techniques described herein may be applied to various other native views for example a MapView that displays interactive maps a GameView that displays interactive games a PhotoView that displays local and or remote photos a CameraView that displays scenes or pictures as captured by one or more cameras on a mobile device and or any other native view. The one or more messaging systems described herein may be adapted to allow and or facilitate communication between two or more of these native views or other native views.

One or more embodiments of the present disclosure describe one or more systems methods routines and or techniques for customizing native operating system views for example a native WebView and a native VideoView. A WebView may refer to a native function or native code that may interface with one or more core functionalities of a mobile device or smartphone. For example a WebView may be designed and or adapted to render HTML JavaScript and the like and may cause a webpage to display on a smartphone. As one example a WebView may be used by an application developer to create a sort of mini web browser within an application. A VideoView may refer to a native function or native code that may interface with one or more core functionalities of a mobile device or smartphone. For example a VideoView may be designed and or adapted to cause a video to be streamed and or played on the display of a smartphone. The VideoView may be adapted to handle local video files i.e. video files stored on local storage in a smartphone or remote video files i.e. video files that are retrieved from a remote server or device . The systems methods routines and or techniques of these embodiments may include and or utilize a messaging system to allow and or facilitate communication between a WebView and a VideoView. In one example implementation a messaging system may allow and or facilitate communication between a WebView that generates a webpage for example with one or more transparent frames and a VideoView that generates a video for example where the video is playing behind the webpage and is visible through the transparent frame s .

Regarding the one or more embodiments of the present disclosure that relate to a native WebView and a native VideoView it may be beneficial to describe an example challenge that a developer and or the creator of the smartphone and or the operating system may face. HyperText Markup Language HTML may refer to a markup language for displaying web pages and other information that can be displayed in a web browser or web client. Newer versions of the HTML language e.g. HTML5 have attempted to offer additional or enhanced multimedia functionality for example by offering a tag that may embed a video within a webpage. Various versions of operating systems that run on various versions of mobile devices may not be programmed and or adapted to handling these tags in a manner such that the video plays in line i.e. within the webpage . Instead the video tag may cause the operating system s native media application to play the video often in full screen mode making it difficult to wrap or overlay the video with content for example buttons advertisements or other elements for example HTML elements. Various mobile devices users may not have access to an updated operating system that may be adapted to handle tags for example because mobile device vendors may control when updates to operating systems are released and or distributed.

One or more embodiments of the present disclosure describe one or more systems methods routines and or techniques to customize a native WebView and a native VideoView for example such that HTML tags may be handled in a manner such that it appears to a user that the video is playing in line. Various methods routines and or techniques described herein may allow an application developer to incorporate interesting content with in line video on a webpage and the application may display as intended even if a user s phone has an older version of an operating system that may not support HTML tags. The content may include advertisements buttons or any other elements for example HTML elements. Various embodiments of the present disclosure may provide solutions to one or more of the disadvantages discussed above for example by implemented solutions in an updated software development kit SDK and perhaps additional code. In these embodiments application developers and or content developers may be able to implement solutions for example the handling of tags even if a device user does not have access to an updated operating system. Various embodiments of the present disclosure may handle tags by replacing them with custom messaging code for example JavaScript code that implements models or mimics newer HTML tag specifications.

Content SDK may adapt application to be able to communicate with one or more pieces of code or functions in the native OS layer for example WebView and VideoView . WebView may be adapted to render HTML JavaScript and the like and may cause a webpage to display on the mobile device . As one example a WebView may be used by an application developer to create a sort of mini web browser within an application. VideoView may be adapted to cause a video to be streamed and or played on the display of the mobile device . The VideoView may be adapted to handle local video files i.e. video files stored on local storage in a smartphone or remote video files i.e. video files that are retrieved from a remote server or device .

Content SDK may allow and or facilitate communications or messages between one or more native views for example WebView and VideoView . Content SDK may transmit or communicate messaging code e.g. JavaScript code to one or more native views where the messaging code may be executed to transmit and or receive messages. The messaging code executed by one or more native views SDK code that is executed in order to facilitate communications or messages between native views and optionally other related code may be referred to as a messaging system . In one specific example content SDK may transmit or communicate messaging code e.g. JavaScript code to the WebView . WebView may execute the messaging code to transmit a message to the content SDK and the content SDK may route or transmit the message to the VideoView . WebView may also execute the messaging code to listen for and or receive messages from the content SDK for example messages that originated from the Video View . In this respect the WebView and the VideoView may communicate with each other via messaging code executed by the WebView and the content SDK .

Referring again to as one example of one or more embodiments in operation mobile device may download i.e. request and receive an application and a content SDK from an application server . The mobile device for example via an included processor may execute application . At some point mobile device may execute application code that utilizes the content SDK for example code that requests the initiation of a customized e.g. a specific location and or dimension WebView . Content SDK may receive and or retrieve HTML code JavaScript code and or other code and or components that may be rendered inside the WebView. For example the content SDK may download the HTML and or JavaScript from a remote server e.g. a content server. As another example the application may include the HTML and or JavaScript and may pass it to the SDK when it requests that a WebView be initiated. SDK may then communicate with WebView to create a web browser window for example indicating a particular location and or dimensions for the window. SDK may transmit the HTML code and or JavaScript code to the WebView such that the WebView can render the HTML and display the associated web page. The HTML code may include code intended to place a video within the web browser window e.g. using an HTML tag . SDK may transmit messaging code e.g. JavaScript code to the WebView that may adapt the WebView to send messages to the content SDK and in turn to other native views. For example the messaging code may be part of the HTML and or JavaScript code that was received by the SDK e.g. downloaded from a server and transmitted by the SDK to the WebView.

The messaging code may be transmitted to the WebView in a number of ways. For example the HTML and or JavaScript e.g. downloaded by the SDK from a server may have been modified to include the messaging code before the HTML and or JavaScript was downloaded by the mobile device . In this example the modification may have occurred on a remote server and or computer prior to downloading. The modification may include detecting tags in the HTML and replacing the tags with messaging code such as JavaScript and optionally additional code. As another example modification code e.g. JavaScript code may be transmitted to the mobile device and or SDK e.g. when application is downloaded or when the SDK download the HTML and or JavaScript and the modification code may be transmitted to the WebView when the HTML and or JavaScript is communicated to the WebView. In this example when the WebView renders the HTML it will execute the modification code which may modify the HTML to include the messaging code. The modification code may determine whether the mobile device is running an older OS version for example by communicating with a user agent. If necessary the modification code may detect tags in the HTML and replace the tags with messaging code such as JavaScript and optionally additional code. As another example modification code e.g. JavaScript code may be stored on the mobile device for example as part of one or more SDKs and the modification code may be transmitted to the WebView when the HTML is communicated to the WebView. In this example when the WebView renders the HTML it will execute the modification code which may modify the HTML to include the messaging code.

The messaging code may take various forms and or may be coded in various ways for example such that the WebView can transmit and receive messages to from the content SDK . In some embodiments the messaging code may create a JavaScript object that imitates the behavior e.g. creating event listeners etc. of an HTML video object. In some embodiments to send a message the messaging code may include one or more pieces of JavaScript code that instruct the WebView to navigate to a special URL. In this example the URL may not resolve to any known address on the internet. The URL may be encoded with one or more messages flags tags and the like. The WebView may be designed to notify the content SDK when it attempts to navigate to a URL and the content SDK may be designed to listen for parse and handle these special URLs that are encoded with messages and the like. The SDK may stop the WebView from attempting to navigate to the URL and the SDK may interpret the message encoded in the URL. As another example to receive a message the messaging code may include one or more pieces of JavaScript code that instruct the WebView to navigate to a different special URL. The WebView may be designed to receive updates from the content SDK regarding navigation to a URL and the content SDK may be designed to provide such updates in effect creating a listener in the WebView. The SDK may stop the WebView from attempting to navigate to the URL and the SDK may transmit messages to the WebView via the listener. In some embodiments messages may be communicated by inserting one or more iframe objects in the HTML code and setting the source of the iframe to a special URL where the special URL operates similarly to the URLs explained above.

As another example of how the messaging code may communicate with the SDK in some embodiments once the messaging code e.g. JavaScript has been transmitted to the WebView the SDK may make calls to the messaging code. For example the SDK may indicate to the WebView that it should navigate to a particular URL for example a special URL using a javascript scheme. When the WebView attempts navigate to the URL it will instead execute the messaging code. In this respect the SDK may communicate with the messaging code inside the WebView to send and receive messages.

Once the WebView renders the HTML code it may execute or read the HTML code including the messaging code and other JavaScript code. The WebView may perform various routines and or functions according to its purpose for example it may create a window that displays on the screen of mobile device to display the webpage associated with the rendered HTML. At some point the WebView may execute the messaging code for example messaging code that relates to a video. This messaging code may be messaging code that was inserted in place of a tag. In other words the WebView may determine that a video should be played. By executing the messaging code the WebView may be adapted to transmit and receive messages to from the content SDK . The WebView may communicate a message to the content SDK instructing the content SDK to initiate a VideoView for example a video window with a particular size and screen location. The content SDK may communicate with the VideoView such that the VideoView causes a video window to display on the mobile device . At this point a WebView and a VideoView may be displayed on mobile device at the same time. The VideoView may start to download the video from one or more sources for example as indicated in the message transmitted from the WebView.

VideoView may be adapted to communicate with the content SDK with or without using special messaging code transmitted to the VideoView from the content SDK . VideoView may transmit various messages to the content SDK which may be routed to the WebView . For example VideoView may transmit a message that indicates that it has downloaded a sufficient portion of the video such that playback can likely occur without interruption. As another example VideoView may transmit a message that indicates that the video has finished playing. As another example VideoView may transmit one or more messages that indicate the playback progress of the video that is playing.

WebView may transmit various messages to the content SDK using the messaging code which may be routed to the VideoView . For example WebView may transmit messages that indicate that a video should be downloaded played paused stopped and the like. The WebView may cause video controls e.g. see part to display in the webpage window. The video controls may include one or more buttons or playback functions that allow a user to interact with the WebView and that cause the WebView to generate messages. HTML and or JavaScript code executed by the WebView may be designed to create one or more button objects where the button object gets displayed on the webpage window and listens for and handles interaction from a user. The video controls may be associated with the messaging code such that user interaction with the one or more buttons may cause the WebView to communicate one or more messages to the content SDK and in turn to the VideoView. As one example the user may touch a play button on the screen of the mobile device and that may cause the WebView to transmit a message that indicates that a video should be played.

In one particular implementation the WebView and the VideoView may be oriented and or customized such that they appear to a user to be integrated. For example the VideoView may appear to display within a WebView e.g. see . This implementation may be used to address one or more of the issues discussed above regarding playing inline HTML tags. The HTML code rendered by the WebView may include a tag for example that was intended to cause a video window to open within the webpage. WebView may render the HTML code to replacing the tag with messaging code such as JavaScript and optionally additional code. The messaging code and or the additional code may include an iframe or div HTML object or other transparent HTML object . An iframe or div object or other transparent HTML object allows a webpage to show a window or frame within a webpage. The iframe or div object or other transparent HTML object may be programmed to create a window or frame that is about the same size as the video window that was intended by the original tag. The iframe or other transparent HTML object or div object may be programmed to be transparent or invisible such that content displayed on the mobile device behind the WebView may show through the transparent frame. Additionally the body of the HTML webpage and the background of the WebView may be programed to be transparent as well for example in an area that aligns or overlaps with the transparent frame created by the iframe or div object. For example in order from back to front the WebView may be rendered with a transparent background and then the HTML may be rendered with a transparent body and then inside the HTML body the transparent iframe may rendered. In this respect the VideoView and or related video window may display through the WebView background the HTML body and the transparent iframe or div object.

Referring to as one example WebView may execute the rendered HTML code including the iframe or div and messaging code to display a webpage window with a transparent frame . As one example when an iframe loads e.g. the iframe object that creates the transparent frame the WebView may read the source field of the iframe. The source field may generally tell the web browser where e.g. a URL to a website it can find the content to fill the iframe. In some embodiments the source field may contain a special URL as explained above that may be encoded with a message for example a message indicating that a VideoView should be initiated. In other embodiments other messaging code may indicate that a VideoView should be initiated. The WebView may communicate a message to the content SDK instructing the content SDK to initiate a VideoView for example a video window with a particular size and screen location. The VideoView may create a video window without any borders controls or the like. In other words the video window may be a bare video window. The VideoView may cause the video window to display behind i.e. layered behind the webpage window compare to . As can be seen in the video window may show through the transparent frame such that it appears to a user that the video is embedded in or integrated into the webpage. Once the WebView and the VideoView have been initiated and customized the messaging system see part may be used to allow and or facilitate communications between the WebView and the messaging code running therein and the VideoView via the content SDK . In this respect and referring to the webpage window may communicate with the video window behind it.

In some embodiments of the present disclosure the video window may be displayed or overlayed in front of the webpage window instead of behind it. In this case the messaging code that is executed by the WebView may be programmed to communicate the appropriate messages to the VideoView to create this overlayed video window. In these embodiments a transparent iframe or div object or other transparent HTML object may or may not be used. Overlayed video windows may be useful for a variety of purposes for example branded video.

Referring to the WebView may cause video controls to display in the webpage window . The video controls may include one or more buttons sliders or other playback functions that allow a user to interact with the WebView . User interaction with the video controls may cause the WebView to generate messages that get sent to the content SDK and in turn to the VideoView . HTML and or JavaScript code executed by the WebView may be designed to create one or more button objects where the button object gets displayed on the webpage window and listens for and handles interaction from a user. As one example the user may touch a play button on the screen of the mobile device and that may cause the WebView to transmit a message that indicates that a video should be played. The video controls may also provide feedback to a user for example feedback as a result of one or more messages sent by the VideoView and received by the WebView. As one example the VideoView may communicate one or more messages to the content SDK that indicate the progress of the video that is playing. The content SDK may route these messages to the WebView and the WebView may cause a slider progress bar or the like to update for example updating the video controls that display on the webpage window .

WebView may include one or more customized elements that appear to be integrated with the video window. For example WebView may include one or more advertisements around the video window. In this example the WebView may communicate for example indirectly with one or more content severs e.g. content server of or advertising servers to download content to display in the one or more customized elements. As one specific example WebView may download an advertisement from an advertising server and display the advertisement in a banner or border near or around the video window. Even though the previous example explains an advertising situation it should be understood that this disclosure contemplates various ways of customizing native views with HTML and optionally other code like JavaScript and various types of content. The content SDK may provide developers with the appropriate functions to create content requests e.g. URLs and GUI components in their application code. The content requests and or GUI components may be programmed to display banners text and or multimedia content at the appropriate location in the webpage window and at a time appropriate for content integration.

It should be understood that the systems methods routines and or techniques described herein may be applied to various other numbers and types of native views beyond just a WebView and a VideoView. For example a WebView may interact with multiple VideoViews. Other types of native views may include a MapView that displays interactive map s a GameView that displays interactive game s a PhotoView that displays local and or remote photo s a CameraView that displays scenes or pictures as captured by one or more cameras on a mobile device and or any other native view. A messaging system similar to the messaging system described in detail herein may be adapted to allow and or facilitate communication between one or more of these native views and or other native views. The techniques described herein may be used to customize one or more of these native views and or may be used to integrate two or more of these native views. As one specific example a WebView may communicate a message to an SDK to create a CameraView and the CameraView may be integrated into the WebView such that it appears that a camera window exists within a webpage window. Additionally the WebView may be customize the webpage window to enhance the integration and or appearance of the integrated native views. For example a webpage window could include a human head with a transparent frame in the middle and a camera window may show through the transparent frame such that it appears that a user s face is displayed within the human head. As another example a webpage window could include an interactive drawing function with a transparent frame in the middle and a camera window may show through the transparent frame such that it appears that a landscape that a user is capturing displays in the webpage window and the user can draw over top of it. Various other examples of integration between one or more native views will be readily apparent after referencing this disclosure. Various techniques disclosed herein with regard to messaging between native views integrating and customizing native views and adding content to native views may be used to implement these various examples.

Certain embodiments of the present disclosure may be found in one or more methods to customize native operating system views using web technologies in mobile devices. With respect to the various methods described herein and depicted in associated figures it should be understood that in some embodiments one or more of the steps described and or depicted may be performed in a different order. Additionally in some embodiments a method may include more or fewer steps than are described and or depicted.

At step the first native view may perform various routines and or functions according to its purpose for example a WebView may create a webpage window that displays on the screen of the mobile device. Also at step the first native view may execute the messaging code for example messaging code that relates to a video. By executing the messaging code the first native view may be adapted to transmit and receive messages to from the content SDK for example messaging related to initiating a second native view. At step the first native view may communicate a message to the content SDK instructing the content SDK to initiate a second native view for example a VideoView. At step the content SDK may communicate with a second native view such that the second native view causes a function to occur for example a VideoView may cause a video window with a particular size and screen location to display on the mobile device. At step the second native view is initiated for example a video window is displayed on the mobile device. The second native view may also perform one or more functions for example a VideoView may start to download a video.

Various embodiments of the present disclosure describe one or more systems methods routines and or techniques for customizing native operating system views using web technologies in mobile devices. In one or more embodiments a method may be executed on a computer mobile device smartphone or the like. The method may include executing software development kit code to communicate messaging code to a first native operating system view and executing in the first native operating system view the messaging code to communicate one or more first messages from the first native operating system view to a second native operating system view. The software development kit code may be executed to receive and or handle the one or more first messages from the first native operating system view and route and or transmit the one or more first messages to the second native operating system view. The method may include executing the software development kit code to initiate the first native operating system view and executing the software development kit code to initiate the second native operating system view in response to one of the one or more first messages communicated from the first native operating system view. The method may include executing the software development kit code to listen for and or receive one or more second messages communicated from the second native operating system view. The method may include executing in the first native operating system view the messaging code to listen for and or receive the at least one of the one or more second messages from the second native operating system view.

In some embodiments the first native operating system view is a WebView and the second native operating system view is a VideoView. The method may include executing the software development kit code to communicate HTML code and JavaScript code to the first native operating system view. The method may include rendering and executing in the first native operating system view the HTML code and the JavaScript code to cause a webpage window to display on the computer or mobile device. The method may include executing in the first native operating system view modification code that replaces one or more tags in the HTML code with the messaging code. In some embodiments one of the one or more tags are HTML5 tags. In some embodiments the webpage window may contain a transparent frame and the second native operating system view may cause a video window to display on the computer or mobile device behind the webpage window such that the video window displays through the transparent frame. In some embodiments the webpage window may contain video controls that include one or more buttons and or sliders. The one or more buttons and or sliders may be adapted to allow a user to interact. The video controls may be associated with the messaging code such that user interaction with the one or more buttons and or sliders causes the first native operating system view to communicate one or more messages to the second native operating system view.

In one or more embodiments of the present disclosure a method may be executed on a computer mobile device smartphone or the like. The method may include executing in a first native operating system view messaging code to communicate a first message from the first native operating system view to software development kit code. The method may include executing the software development kit code to listen for and or receive the first message and executing the software development kit code to communicate the first message to a second native operating system view. The method may include executing code in the second native operating system view to receive the first message and executing code in the second native operating system view to perform a first native function associated with the first message. The method may include executing code in the second native operating system view to communicate a second message to the software development kit code. The method may include executing the software development kit code to listen for and or receive the second message and executing the software development kit code to communicate the second message to the first native operating system view. The method may include executing in a first native operating system view messaging code to listen for and or receive the second message and executing code in the first native operating system view to perform a second native function associated with the second message.

In some embodiments the first native operating system view is a WebView and the second native operating system view is a VideoView. In some embodiments the first message may indicate to the second native operating system view that it should perform one or more of the following functions related to a video download the video play the video pause the video or stop the video. In some embodiments the second message may indicate to the first native operating system view one of the following status updates related to a video the video is downloaded enough to play without interruption the video has finished playing or an update related to the playback progress of the video.

In one or more embodiments of the present disclosure a method may be executed on a computer mobile device smartphone or the like. The method may include executing code to initiate a first native operating system view. The first native operating system view may cause a webpage window to display on the computer or mobile device and the webpage window may contain a transparent frame. The method may include executing code to initiate a second native operating system view. The second native operating system view may cause a video window to display on the computer or mobile device and the video window may be positioned or layered behind the webpage window and display through the transparent frame. The method may include executing code in the first native operating system view to request and receive content from a content server and executing code in the first native operating system view that causes the content to display in the webpage window near the transparent frame. The method may include executing messaging code to facilitate communications between the first native operating system view and the second native operating system view.

In some embodiments the content is advertising content and the content server is an advertising server. The advertising content may be displayed as a banner around at least a portion of the transparent frame and the video window may appear to a user to be embedded in the webpage window and the advertising content may appear to a user to be displayed around the video window. The method may include executing code in the first native operating system view that causes video controls to display in the webpage window near the transparent frame. The method may include executing code in the first native operating system view that receives information from the video controls and executing the messaging code to send a message from the first native operating system view to the second native operating system view. The message may relate to the information received from the video controls e.g. play a video . The message may include executing code in the second native operating system view to perform a function e.g. play a video in response to the message. In this respect the function may relate to the information received from the video controls.

The methods routines and solutions of the present disclosure including the example methods and routines illustrated in the flowcharts and block diagrams of the different depicted embodiments may be implemented as software executed by a data processing system that is programmed such that the data processing system is adapted to perform and or execute the methods routines techniques and solutions described herein. Each block or symbol in a block diagram or flowchart diagram referenced herein may represent a module segment or portion of computer usable or readable program code which comprises one or more executable instructions for implementing by one or more data processing systems the specified function or functions. In some alternative implementations of the present disclosure the function or functions illustrated in the blocks or symbols of a block diagram or flowchart may occur out of the order noted in the figures. For example in some cases two blocks or symbols shown in succession may be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. Part or all of the computer code may be loaded into the memory of a data processing system before the data processing system executes the code.

Processor unit may serve to execute instructions for example a software program an application SDK code native OS code and the like that may be loaded into the data processing system for example into memory . Processor unit may be a set of one or more processors or may be a multiprocessor core depending on the particular implementation. Processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory may be for example a random access memory or any other suitable volatile or nonvolatile storage device. Memory may include one or more layers of cache memory. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a solid state drive a flash memory or some combination of the above.

Instructions for an operating system may be located on persistent storage . In one specific embodiment the operating system may be some version of a number of known operating systems for mobile devices or smartphones e.g Android iOS etc. . Instructions for applications and or programs may also be located on persistent storage . These instructions may be loaded into memory for execution by processor unit . For example the methods and or processes of the different embodiments described in this disclosure may be performed by processor unit using computer implemented instructions which may be loaded into a memory such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit .

Display may provide a mechanism to display information to a user for example via a LCD or LED screen or monitor or other type of display. It should be understood throughout this disclosure that the term display may be used in a flexible manner to refer to either a physical display such as a physical screen or to the image that a user sees on the screen of a physical device. Input output I O unit allows for input and output of data with other devices that may be connected to data processing system . Input output devices can be coupled to the system either directly or through intervening I O controllers.

Communications unit may provide for communications with other data processing systems or devices for example via one or more networks. Communications unit may be a network interface card. Communications unit may provide communications through the use of wired and or wireless communications links. In some embodiments the communications unit may include circuitry that is designed and or adapted to communicate according to various wireless communication standards for example cellular standards WiFi standards Bluetooth standards and the like.

The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown.

The description of the different advantageous embodiments has been presented for purposes of illustration and the description and is not intended to be exhaustive or limited to the embodiments in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. Further different advantageous embodiments may provide different advantages as compared to other advantageous embodiments. The embodiment or embodiments selected are chosen and described in order to best explain the principles of the embodiments of the practical application and to enable others of ordinary skill in the art to understand the disclosure for various embodiments with various modifications as are suited to the particular use contemplated.

