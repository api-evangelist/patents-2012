---

title: Access of resources by way of hypertext transfer protocol
abstract: In an embodiment, a method is provided for accessing a resource. In this method, a HTTP request that defines an operation to be performed on an identified resource is received. The HTTP request is then parsed to extract an operation parameter from a header of the HTTP request. The HTTP request is executed based on the operation parameter to generate a result, and the result of the execution of the HTTP request is returned in an HTTP response.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08725834&OS=08725834&RS=08725834
owner: SAP AG
number: 08725834
owner_city: Walldorf
owner_country: DE
publication_date: 20120316
---
The present disclosure relates generally to data access. In an embodiment the disclosure relates to access of resources by way of Hypertext Transfer Protocol.

In general Hypertext Transfer Protocol HTTP is used to request and transmit resources e.g. Webpages and Webpage components over the Internet or other computer networks. For example resources can be retrieved by invoking a GET method that retrieves whatever resources identified by an HTTP request. In another example resources can be stored by invoking a PUT method that requests the storage of resources included in an HTTP request.

HTTP is a popularly used protocol because HTTP has many useful built in features such as automatic authentication and is platform independent. However with use of HTTP to access resources the access features built into HTTP can be rather limited.

The description that follows includes illustrative systems methods techniques instruction sequences and computing machine program products that embody illustrative embodiments. In the following description for purposes of explanation numerous specific details are set forth in order to provide an understanding of various embodiments of the inventive subject matter. It will be evident however to those skilled in the art that embodiments of the inventive subject matter may be practiced without these specific details. In general well known instruction instances protocols structures and techniques have not been shown in detail.

In this example the Web server module is in communication with the repository module that is configured to access resources stored in one or more storage devices. In particular the client computing device initially opens an HTTP connection to the server computing device and transmits an HTTP request to the server computing device . An HTTP request such as the HTTP request refers to an HTTP message requesting information or operation to be performed. Examples of such an HTTP request include GET PUT DELETE or other requests. It should also be appreciated that HTTP refers to all variants of HTTP such as HTTP with Secure Sockets Layer HTTPS .

Upon receipt of the HTTP request the repository module executes the HTTP request and returns the result of the execution to the client computing device in an HTTP response . An HTTP response e.g. HTTP response refers to an HTTP message generated in response to the HTTP request . The HTTP response may include the resource that was requested by the HTTP request . As explained in detail below the repository module executes the HTTP request based on a particular operation parameter that is encapsulated in the HTTP request .

It should be appreciated that the server computing device may include fewer more or different modules apart from those shown in . For example in another embodiment the repository module may be integrated in the Web server module . In yet another embodiment the server computing device can also host an application server module not shown in . An application server module is an application server that delivers applications to client computing device . The application server module may handle for example business logic and data access of the applications hosted on the client computing device . Examples of the application server module include a JAVA application server an Apache server and an Advanced Business Application Programming ABAP Application Server.

In reference to this embodiment of the repository module includes an HTTP messaging module and execution engine module . The HTTP messaging module generally handles communication to and from other computing devices and or modules by way of HTTP. For example in a Netweaver ABAP Application Server the HTTP messaging module can be a part of a communication layer that provides server side communication on top of the HTTP HTTPS protocol. The HTTP messaging module may also for example provide a standard interface for communication with other request response based protocols. Additionally the HTTP messaging module can parse HTTP messages to extract operation parameters as explained in detail below.

The execution engine module is configured to execute the HTTP request to generate a result. That is the execution engine module executes various HTTP methods. For example the execution engine module can execute a GET method which retrieves whatever resource that is identified by the HTTP request. In another example the execution engine module can execute a DELETE method which requests that the server computing device delete the resource identified by the HTTP request. In an embodiment the execution engine module can execute the HTTP methods based on operation parameters extracted from HTTP messages as explained in more detail below.

It should be appreciated that in other embodiments the repository module may include fewer or more modules apart from those shown in . For example in an alternate embodiment the HTTP messaging module can be excluded from the repository module . The modules and may be in the form of software that is processed by a processor. In another example as explained in more detail below the modules and may be in the form of firmware that is processed by application specific integrated circuits ASIC which may be integrated into a circuit board. Alternatively the modules and may be in the form of one or more logic blocks included in a programmable logic device for example a field programmable gate array . The described modules and may be adapted and or additional structures may be provided to provide alternative or additional functionalities beyond those specifically discussed in reference to . Examples of such alternative or additional functionalities will be discussed in reference to the flow diagrams discussed below.

Upon receipt of the HTTP request the repository module at parses the HTTP request to extract an operation parameter. As used herein an operation parameter refers to a value that is separate from the input instances for an HTTP method invocation but which affects how those input instances are processed. The operation parameter can affect the execution of various HTTP methods such as GET method DELETE method PUT method and other HTTP methods. For example an operation parameter can define a format discussed below to package files in a GET method.

In one embodiment the operation parameter is stored in the HTTP header of the HTTP request and the repository module extracts the operation parameter from the HTTP header. An HTTP header field is one or more components of the message header of an HTTP request or HTTP response. The HTTP header field is transmitted after the request or response line the first line of a message. The HTTP header field is a colon separated name value pair in clear text string format terminated by a carriage return CR and line feed LF character sequence. The end of the header fields is indicated by an empty field resulting in the transmission of two consecutive CR LF pairs.

After the operation parameter is extracted the repository module executes at the HTTP request based on the extracted operation parameter. A result is generated as a result of the execution and the repository module then returns the result in an HTTP response at .

Additionally example embodiments also support the use of the GET method to retrieve folders. For example the HTTP request can be instead HTTP f1 f2 that requests all files stored in folder f1. That is the HTTP request is requesting a resource in the form of a folder which includes files. In the HTTP response the repository module returns a list of files from folder f1. in a particular format. In this embodiment the operation parameter extracted from the HTTP request header defines a format to package the files. Examples of formats used to package the files include JavaScript Object Notation JSON Extensible Markup Language XML and Election Markup Language EML . Accordingly the use of operation parameters in HTTP messages allows access of files in HTTP similar to file system operations the features of which are not available in existing conventional RESTful web services. For example example embodiments allow the retrieval of folders but conventional HTTP requests can only retrieve individual files not folders.

In another embodiment the HTTP header of the HTTP response can also store a different operation parameter that defines a format to compress the folder. Examples of such formats include ZIP TAR 7 ZIP 7z GNU ZIP GZIP and Roshal Archive RAR . For example the operation parameter BatchCommand zip will export requested folder as a zip file. With the operation parameter extracted the repository module can compress the files in the folder according to the format defined in the operation parameter and return the folder with compressed files by way of an HTTP response.

The following Table A lists more example details of the use of GET methods in context of example embodiments 

In addition the repository module can also process DELETE methods. Here in one embodiment if some files cannot be deleted the repository module puts all the file names in the body of the HTTP response. The following Table B lists more example details of the use of DELETE methods in context of example embodiments.

In addition to GET and DELETE methods the repository module can also process PUT methods. It should be noted that the PUT method requests that an enclosed resource e.g. file in an HTTP request to be stored. In one embodiment the operation parameter extracted from the header of the HTTP request can define a command to decompress a compressed file included in the body of the HTTP request. In another embodiment the operation parameter can also define an option to overwrite an existing file with the compressed file that is located in the same directory path. In yet another embodiment the operation parameter can define an option to create a directory path to store the compressed file if the directory path is absent. For example a PUT method creates a file with path taken from URL HTTP folder1 file1 will create folder folder 1 and file file 1 if such a directory path is absent.

The following Table C lists more example details of the use of PUT methods in context of example embodiments.

The machine is capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine. Further while only a single machine is illustrated the term machine shall also be taken to include any collection of machines that individually or jointly execute a set or multiple sets of instructions to perform any one or more of the methodologies discussed herein.

The example of the processing system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU or both a main memory e.g. random access memory and static memory e.g. static random access memory which communicate with each other via bus . The processing system may further include video display unit e.g. a plasma display a liquid crystal display LCD or a cathode ray tube CRT . The processing system also includes an alphanumeric input device e.g. a keyboard a user interface UI navigation device e.g. a mouse a disk drive unit a signal generation device e.g. a speaker and a network interface device .

The disk drive unit a type of non volatile memory storage includes a machine readable medium on which is stored one or more sets of data structures and instructions e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. The data structures and instructions may also reside completely or at least partially within the main memory and or within the processor during execution thereof by processing system with the main memory and processor also constituting machine readable tangible media.

The data structures and instructions may further be transmitted or received over a computer network via network interface device utilizing any one of a number of well known transfer protocols e.g. HyperText Transfer Protocol HTTP .

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable medium or in a transmission signal or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. the processing system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In various embodiments a hardware module may be implemented mechanically or electronically. For example a hardware module may comprise dedicated circuitry or logic that is permanently configured e.g. as a special purpose processor such as a field programmable gate array FPGA or an application specific integrated circuit ASIC to perform certain operations. A hardware module may also comprise programmable logic or circuitry e.g. as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the term hardware module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner and or to perform certain operations described herein. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where the hardware modules comprise a general purpose processor configured using software the general purpose processor may be configured as respective different hardware modules at different times. Software may accordingly configure a processor for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Modules can provide information to and receive information from other modules. For example the described modules may be regarded as being communicatively coupled. Where multiples of such hardware modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses that connect the modules. In embodiments in which multiple modules are configured or instantiated at different times communications between such modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple modules have access. For example one module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further module may then at a later time access the memory device to retrieve and process the stored output. Modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments comprise processor implemented modules.

Similarly the methods described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or more processors or processor implemented modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processors may be located in a single location e.g. within a home environment an office environment or as a server farm while in other embodiments the processors may be distributed across a number of locations.

While the embodiment s is are described with reference to various implementations and exploitations it will be understood that these embodiments are illustrative and that the scope of the embodiment s is not limited to them. In general techniques for access of resources by way of HTTP may be implemented with facilities consistent with any hardware system or hardware systems defined herein. Many variations modifications additions and improvements are possible.

Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the embodiment s . In general structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the embodiment s .

