---

title: Meta-app to depict cloud environment dependencies to faciliate a service environment rebuild
abstract: In some examples, a method for rebuilding a source provider service environment in a target provider environment is described. The method may include identifying, using a service meta-app describing a service in a source provider environment, an internal direct dependency of the service. The method may also include accessing a dependency meta-app describing the internal direct dependency. The method may also include building the internal direct dependency according to the dependency meta-app in a target provider environment. The method may also include fetching an image of the service. The method may also include installing the image of the service in the target provider environment. The method may also include configuring the installed image of the service to depend from the internal direct dependency according to the service meta-app.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09118677&OS=09118677&RS=09118677
owner: Empire Technology Development LLC
number: 09118677
owner_city: Wilmington
owner_country: US
publication_date: 20120510
---
This Application is the National Stage filing under 35 U.S.C. 371 of PCT Application Ser. No. PCT CN12 75284 filed on May 10 2012. The disclosure of the PCT Application is hereby incorporated herein by reference in its entirety.

Unless otherwise indicated herein the materials described herein are not prior art to the claims in the present application and are not admitted to be prior art by inclusion in this section.

Cloud computing has become popular in recent years. Cloud computing generally involves executing applications on general purpose servers in a computing environment that is remote from corresponding users of the applications.

There are various cloud computing providers. Different providers often have different provider environments including different Application Programming Interfaces APIs and or infrastructures. For some applications one provider environment may be incompatible with another provider environment.

Some users may wish to migrate an application from a source provider environment of a source cloud to a different target provider environment of a target cloud. The differences between the source provider environment and the target provider environment may be so substantial that a user may have to substantially rebuild a corresponding application in the target provider environment to migrate the application to the target provider environment. Difficulties associated with rebuilding the application or otherwise migrating the application due to compatibility issues between the source and target provider environments may dissuade the user from migrating the application to the target provider environment even though it might otherwise be beneficial e.g. in terms of cost and or performance to the user to migrate the application to the target provider environment.

Technologies described herein generally relate to migrating services between potentially incompatible source and target provider environments.

In some examples a method for rebuilding a source provider service environment in a target provider environment is described. The method may include identifying using a service meta app describing a service in a source provider environment an internal direct dependency of the service. The method may also include accessing a dependency meta app describing the internal direct dependency. The method may also include building the internal direct dependency according to the dependency meta app in a target provider environment. The method may also include fetching an image of the service. The method may also include installing the image of the service in the target provider environment. The method may also include configuring the installed image of the service to depend from the internal direct dependency according to the service meta app.

In some examples a computer readable storage medium having computer readable instructions stored thereon that are executable by a computing device to perform operations is described. The operations may include identifying using a service meta app describing a service in a source provider environment an internal direct dependency of the service. The operations may also include accessing a dependency meta app describing the internal direct dependency. The operations may also include building the internal direct dependency according to the dependency meta app in a target provider environment. The operations may also include fetching an image of the service. The operations may also include installing the image of the service in the target provider environment. The operations may also include configuring the installed image of the service to depend from the internal direct dependency according to the service meta app.

In some examples a system includes a processing device and a computer readable storage medium having a rebuild agent stored thereon. The rebuild agent includes computer readable instructions that are executable by the processing device to perform operations. The operations may include identifying using a service meta app describing a service in a source provider environment an internal direct dependency of the service. The operations may also include accessing a dependency meta app describing the internal direct dependency. The operations may also include building the internal direct dependency according to the dependency meta app in a target provider environment. The operations may also include fetching an image of the service. The operations may also include installing the image of the service in the target provider environment. The operations may also include configuring the installed image of the service to depend from the internal direct dependency according to the service meta app.

The foregoing summary is illustrative only and is not intended to be in any way limiting. In addition to the illustrative aspects embodiments and features described above further aspects embodiments and features will become apparent by reference to the drawings and the following detailed description.

In the following detailed description reference is made to the accompanying drawings which form a part hereof. In the drawings similar symbols typically identify similar components unless context dictates otherwise. The illustrative embodiments described in the detailed description drawings and claims are not meant to be limiting. Other embodiments may be utilized and other changes may be made without departing from the spirit or scope of the subject matter presented herein. It will be readily understood that the aspects of the present disclosure as generally described herein and illustrated in the Figures can be arranged substituted combined separated and designed in a wide variety of different configurations all of which are explicitly contemplated herein.

Some embodiments described herein generally relate to migrating services between potentially incompatible source and target provider environments. A service meta app describing a service may be provided in advance of migrating the service. For example the service meta app may identify one or more internal direct dependencies of the service and or an environmental context and configuration of the service. Dependency meta apps describing the internal direct dependencies of the service may also be provided in advance of the migration.

A rebuild agent in or associated with the target provider environment may use the service meta app to identify the internal direct dependencies and the environmental context and configuration of the service to fetch dependency meta apps corresponding to the identified internal direct dependencies and to fetch an image of the service. The rebuild agent may then build the internal direct dependencies according to the dependency meta apps and configure the image of the service according to the service meta app.

In general the network may include one or more wide area networks WANs and or local area networks LANs that enable communication between the source provider environment the target provider environment the meta app library and or the image library . In some embodiments the network includes the Internet including a global internetwork formed by logical and physical connections between multiple WANs and or LANs. Alternately or additionally the network may include one or more cellular RF networks and or one or more wired and or wireless networks such as but not limited to 802.xx networks Bluetooth access points wireless access points IP based networks or the like. The network may also include servers that enable one type of network to interface with another type of network.

The source provider environment may include a cloud computing environment including resources A and one or more services A owned by users of or associated with the users of the source provider environment .

By way of example and not limitation the resources A may include processing resources such as one or more central processing units CPUs storage resources such as one or more storage devices other resources such as network interface controllers NICs or other communication interface devices and or other suitable computer resources.

The service A may be run on the resources A of the source provider environment . In some embodiments the service A may include a specific version of particular software. The service A may include but is not limited to a web server an application server or a database instance. More specific examples of the service A may include but are not limited to a C based application a PHP Hypertext Preprocessor PHP based application a My Structured Query Language MySQL server database or the like or any combination thereof. The service A may be configured to serve requests from client devices not shown configured to communicate with the service via the network .

The service A may have within the source provider environment a service environment including for instance one or more internal direct dependencies and or an environmental context and configuration. The service environment of the service A within the source provider environment may be referred to herein as the source provider service environment. 

The owner or other user associated with the service A may desire to migrate the service A from the source provider environment to another provider environment such as the target provider environment . For instance if the target provider environment provides similar or better offerings for about the same or less money than the source provider environment or for any other reason the owner or other user associated with the service A may desire to migrate the service A to the target provider environment as denoted at .

Similar to the source provider environment the target provider environment may include a cloud computing environment including resources B. The resources B may include processing resources storage resources and or other suitable computer resources.

The target provider environment may additionally include a service B. The service B may include an instance in the target provider environment of the service A from the source provider environment . Although the target provider environment includes a single service B in the illustrated embodiment more generally the target provider environment may include any number of services some of which may have been migrated to the target provider environment from other provider environments such as the source provider environment .

The target provider environment may additionally include or may have associated therewith a rebuild agent . The rebuild agent may generally be configured to rebuild the source provider service environment of the service A for the service B within the target provider environment according to information included in a meta app of the service A. In some embodiments the rebuild agent may be stored on a computer readable storage medium of the resources B as computer readable instructions that are executable by a processing device of the resources B to rebuild the source provider service environment and or perform other operations described herein.

Optionally the target provider environment may further include a meta app parser . The meta app parser may be configured to parse meta apps to extract information therefrom which may be used by the rebuild agent to rebuild source provider service environments of services within the target provider environment .

The meta app library may include one or more meta apps A B hereinafter collectively meta apps . In general each of the meta apps may describe a service or a dependency of a service. Each of the meta apps that describes a corresponding service may be referred to herein as a service meta app A while each of the meta apps that describes a corresponding dependency of a service may be referred to herein as a dependency meta app B. While illustrates the meta app library as including a single service meta app A and a single dependency meta app B the meta app library may more generally include any number of service meta apps A and any number of dependency meta apps B.

Each of the meta apps in the meta app library may include a pointer such as a Uniform Resource Locator URL Uniform Resource Identifier URI or suitable other pointer to a location of a corresponding image in the image library or other location. Alternately or additionally each of the service meta apps A may include a pointer to a location of a corresponding dependency meta app B in the meta app library or other location.

The image library may include one or more images A B hereinafter collectively images . Each of the images may include an image of a service or an image of a dependency of a service. Each of the images that includes an image of a service may be referred to herein as a service image A while each of the images that includes an image of a dependency of a service may be referred to herein as a dependency image B. While illustrates the image library as including a single service image A and a single dependency image B the image library may more generally include any number of service images A and any number of dependency images B.

In some embodiments one or both of the meta app library and or the image library may be included in or may be associated with the source provider environment . Alternately or additionally one or both of the meta app library and or the image library may be included in or may be associated with the target provider environment . Alternately or additionally one or both of the meta app library and or the image library may be included in or may be associated with a third party provider.

In operation and prior to migration of the service A to the target provider environment a service meta app describing the service A may be built and stored in the meta app library as the service meta app A. The service meta app A may be built for example by the owner or other user associated with the service A. Alternately or additionally the service meta app A may be built at least in part by an automated discovery process or by some other user whether associated with the service A or not.

The service meta app A may include a pointer to an image of the service A which may be stored in the image library as the service image A.

The service A may include at least one internal direct dependency in the source provider environment . For instance the service A may include a C based application in which case the service A may include at least one internal direct dependency including a C library or multiple C libraries. As another example the service A may include a web server including a PHP based application and or a MySQL server database in which case the service A may include multiple internal direct dependencies including a Zend PUP framework an Apache web services framework or a PHP engine. Thus the service A may include at least one internal direct dependency including but not limited to a C library an operating system a Zend PHP framework an Apache web services framework or a PHP engine.

A dependency meta app describing the dependency may be built and stored in the meta app library as the dependency meta app B. Similar to the service meta app A the dependency meta app B may be built in whole or in part by the owner or other user associated with the service A or by an automated discovery process or some other user.

The service meta app A may include a pointer to the dependency meta app B. The dependency meta app B may include a pointer to an image of the dependency which may be stored in the image library as the dependency image B.

After the owner or other user associated with the service A is ready to migrate the service A to the target provider environment the service meta app A may be provided to the target provider environment or more particularly to the rebuild agent . In some embodiments providing the service meta app A to the rebuild agent may include providing a pointer to the service meta app A in the meta app library to the rebuild agent . In response to receiving the pointer the rebuild agent may retrieve the service meta app A from the indicated location.

The rebuild agent may use the service meta app A to rebuild the source provider service environment in the target provider environment . For example in these and other embodiments the rebuild agent may generally analyze the service meta app A to identify internal dependencies and configurations and environmental context and configurations of the service A. The identified information may then be used by the rebuild agent to fetch the service image A any of the dependency images B corresponding to internal dependencies of the service A and to provide the service image A with the identified environmental context and configuration. The configured service image A may then be started up in the target provider environment as the service B.

Some service migration procedures may implement a time and or resource intensive graph matching algorithm to find a best match image having a structure that is close to the structure of an image of the service A in the source provider environment . In contrast some embodiments described herein can identify and locate a particular image of the service A e.g. the service image A using the pointer in the corresponding service meta app A without performing a time and or resource intensive matching algorithm.

Additionally some services such as C based applications may experience compilation errors or execution errors if not configured in a target provider environment with the same internal direct dependencies such as C libraries as in a source provider environment. Whereas some service migration procedures implement approximate image matching e.g. for the service and or its internal direct dependencies such service migration procedures may be unsuitable where proper compilation and or execution of the service depends on a substantially identical match. Some embodiments described herein however include configuring the service image A with the same internal direct dependencies in the target provider environment as in the source provider environment . Some embodiments described herein can dispense with approximate image matching as pointers to particular images can be provided. In particular pointers in the service meta app A and any corresponding dependency meta apps may allow configuring the service image A and thus the service B with substantially identical internal direct dependencies in the target provider environment as in the service provider environment .

As previously mentioned each of the internal direct dependencies may include but is not limited to a C library an operating system a Zend PHP framework an Apache web services framework or a PHP engine.

The environmental context and configuration may generally include configurations for launching the service A. In more detail the environmental context and configuration may include but is not limited to a runtime database source configuration an external server dependency an external network dependency configuration files a deploy shell of an image of the service A a startup shell of the image of the service A or a system environment of the service A.

An internal direct dependency of a service may include a source provider dependency environment similar to the source provider service environment of . For example the source provider dependency environment of a particular internal direct dependency may include one or more internal direct dependencies and an environmental context and configuration of the particular internal direct dependency.

In the illustrated embodiment the meta app includes a self reference component an environment component and a dependencies component .

The self reference component generally includes information about the meta app . For example the self reference component may identify a version of the meta app and or may include plain text identifying an owner of the meta app and or a modification history of the meta app . Alternately or additionally the self reference component may specify a location of the meta app itself and or an image of a corresponding service or internal direct dependency described by the meta app by e.g. including a pointer to the meta app itself and or a pointer to the image. The specified location of the image may include a location in an image library such as the image library of and or the specified location of the meta app may include a location in a meta app library such as the meta app library of .

The environment component may include parameters corresponding to configurations for launching the service or internal direct dependency described by the meta app . For example if the service described by the meta app includes the service A the environment component may include parameters of the environmental context and configuration of . In operation an installed image of a service or internal direct dependency described by the meta app may be configured according to the parameters in the environment component describing configurations of the service or internal direct dependency. The configurations of the service or internal direct dependency may specify at least one of a runtime database source configuration an external server dependency an external network dependency a deploy shell of an image of the service or internal direct dependency a startup shell of the image or a system environment of the service or internal direct dependency.

The dependencies component may include a list of or may otherwise identify one or more internal direct dependencies of the corresponding service or internal direct dependency described by the meta app . For example if the service described by the meta app includes the service A the dependencies component may include a list of the one or more internal direct dependencies of the service A of . Alternately or additionally the dependencies component may specify for each of the internal direct dependencies identified in the dependencies component a location of a dependency meta app describing the corresponding internal direct dependency. For instance the dependencies component may include one or more pointers to one or more corresponding dependency meta apps in a meta app library such as the meta app library of .

In some embodiments the meta app may be defined in an eXtensible Markup Language XML format or other suitable format.

The self reference component A may include a pointer to an image of the service . The pointer may specify a location of the image of the service and or may be used by a rebuild agent to fetch the image of the service while rebuilding a corresponding source provider service environment.

The self reference component A may additionally include a pointer to the service meta app A itself. The pointer may specify a location of the service meta app A in a meta app library such as the meta app library of .

The environment component A may include various parameters describing an external context and configurations of the service that may be used for launching the service in a target provider environment.

In some embodiments the dependencies component A may include a name of or may otherwise identify a particular internal direct dependency of the service . Although a single internal direct dependency is illustrated in more generally the service meta app A may include one or more internal direct dependencies . Alternately or additionally the dependencies component A may include a pointer to a dependent meta app corresponding to the internal direct dependency . The pointer may specify a location of the dependency meta app in a meta app library such as the meta app library of .

The self reference component B may include a pointer to an image of the internal direct dependency . The pointer may specify a location of the image of the internal direct dependency and or may be used by a rebuild agent to fetch the image of the internal direct dependency while rebuilding a corresponding source provider service environment of a service that depends from the internal direct dependency .

The self reference component B may additionally include a pointer to the dependency meta app B itself. The pointer may specify a location of the dependency meta app B in a meta app library such as the meta app library of .

The environment component B may include various parameters describing an external context and configurations of the internal direct dependency that may be used for launching the internal direct dependency in a target provider environment.

In some embodiments the dependencies component B may include a name of or may otherwise identify a particular internal direct dependency of the internal direct dependency . Although a single internal direct dependency is illustrated in more generally the dependency meta app B may include one or more internal direct dependencies . Alternately or additionally the dependencies component B may include a pointer to a dependent meta app corresponding to the internal direct dependency . The pointer may specify a location of the dependency meta app in a meta app library such as the meta app library of .

Table 1 includes a pseudocode representation of a rebuilding algorithm that may be implemented in a target provider environment such as the target provider environment of to rebuild a source provider service environment when migrating a service from a source provider environment to a target provider environment and that may generally be consistent with the preceding description.

According to some embodiments and as represented by Table 1 the rebuilding algorithm may include identifying dependencies of the service from a corresponding service meta app fetching corresponding dependency meta apps to build the dependencies fetching an image of the service and configuring the image of the service according to the service meta app.

In block Identify Using A Service Meta App Describing A Service An Internal Direct Dependency Of The Service an internal direct dependency of a service may be identified. The internal direct dependency of the service may be identified using a service meta app describing the service in a source provider environment. Block may be followed by block .

In block Access A Dependency Meta App Describing The Internal Direct Dependency a dependent meta app describing the internal direct dependency may be accessed. Accessing the dependency meta app may include fetching the dependency meta app from a location in a library of meta apps such as a location in the meta app library of . The location may be specified in a dependencies component of the service meta app. Block may be followed by block .

In block Build The Internal Direct Dependency According To The Dependency Meta App In A Target Provider Environment the internal direct dependency may be built according to the dependency meta app in a target provider environment such as the target provider environment of .

Building the internal direct dependency according to the dependency meta app in the target provider environment may include fetching an image of the internal direct dependency installing the image of the internal direct dependency and configuring the installed image of the internal direct dependency according to the dependency meta app. For instance the dependency meta app may include a pointer to the image of the internal direct dependency in a particular location such as a location of the image library of . The pointer may be used to fetch the image from the location and the image may then be installed in the target provider environment. The installed image may be configured according to a dependencies component and or an environment component of the dependency meta app for example. Block may be followed by block .

In block Fetch An Image Of The Service an image of the service may be fetched. Fetching an image of the service may include fetching the image of the service from a location in a library of images such as the image library of . The location may be specified in a self reference component of the service meta app. Block may be followed by block .

In block Install The Image Of The Service In The Target Provider Environment the image of the service may be installed in the target provider environment. Block may be followed by block .

In block Configure The Installed Image Of The Service To Depend From The Internal Direct Dependency According To The Service Meta App the installed image of the service may be configured to depend from the internal direct dependency according to the service meta app describing the service in the source provider environment.

One skilled in the art will appreciate that for this and other processes and methods disclosed herein the functions performed in the processes and methods may be implemented in differing order. Furthermore the outlined steps and operations are only provided as examples and some of the steps and operations may be optional combined into fewer steps and operations or expanded into additional steps and operations without detracting from the essence of the disclosed embodiments.

For example the method may include receiving the service meta app from an owner of the service. Alternately or additionally a pointer to the service meta app in a library of meta apps such as the meta app library of may be received from the owner and the pointer may be used to fetch the service meta app. In these and other embodiments the service meta app may be built by at least one of the owner of the service a user otherwise associated with the service or a user not associated with the service. Alternately or additionally the service meta app may be built at least in part by an automated discovery process.

Alternately or additionally the method may include configuring the installed image of the service according to one or more parameters in an environment component of the service meta app. The environment component may describe configurations of the service. The configurations of the service may specify at least one of a runtime database source configuration an external server dependency an external network dependency a deploy shell of the image of the service a startup shell of the image of the service or a system environment of the service.

In some embodiments the method may include prior to identifying the internal direct dependency of the service parsing the service meta app to extract therefrom internal dependencies and configurations of the service. For instance the meta app parser of may perform the parsing and may extract the internal dependencies and configurations of the service from respectively a dependencies component and an environment component of the service.

Although not required the dependencies component of the service meta app may specify multiple internal direct dependencies of the service and the installed image of the service may be configured to depend from all of the internal direct dependencies. In these and other embodiments the method may include iterating as follows for each of the internal direct dependencies. A dependency meta app describing the internal direct dependency may be accessed by fetching the dependency meta app from a meta app library when the internal direct dependency is not stored locally to a rebuild agent performing the iteration. The internal direct dependency may then be built based on the dependency meta app which may include fetching an image of the internal direct dependency from a location specified in the dependency meta app and installing the image of the internal direct dependency in the target provider environment.

Alternately or additionally the method may include starting the service in the target provider environment from the installed and configured image of the service.

Some embodiments disclosed herein include a computer readable storage medium having computer readable instructions stored thereon that are executable by a computing device to perform operations included in the method of such as the operations illustrated by one or more of blocks in and or variations thereof. The computer readable storage medium may be included in the resources B of . Alternately or additionally the computing device that performs the operations may be included in the resources B of .

Depending on the desired configuration the processor may be of any type including but not limited to a microprocessor P a microcontroller C a digital signal processor DSP or any combination thereof. The processor may include one or more levels of caching such as a level one cache and a level two cache a processor core and registers . An example processor core may include an arithmetic logic unit ALU a floating point unit FPU a digital signal processing core DSP Core or any combination thereof. An example memory controller may also be used with the processor or in some implementations the memory controller may be an internal part of the processor .

Depending on the desired configuration the system memory may be of any type including but not limited to volatile memory such as RAM non volatile memory such as ROM flash memory etc. or any combination thereof. The system memory may include an OS one or more applications and program data . The application may include are build algorithm that is arranged to perform the functions as described herein including those described with respect to the method of . The application may correspond to one or more of the rebuild agent and or the meta app parser of for example. The program data may include one or more meta apps that may be useful for rebuilding a source provider service environment in a target provider environment as is described herein. For instance the one or more meta apps may include a service meta app that can be used to rebuild a source provider service environment of a particular service in a target provider environment. In some embodiments the application may be arranged to operate with the program data on the OS such that methods for rebuilding a source provider service environment in a target provider environment such as the method of may be provided as described herein. This described basic configuration is illustrated in by those components within the inner dashed line.

The computing device may have additional features or functionality and additional interfaces to facilitate communications between the basic configuration and any required devices and interfaces. For example a bus interface controller may be used to facilitate communications between the basic configuration and one or more data storage devices via a storage interface bus . The data storage devices may be removable storage devices non removable storage devices or a combination thereof. Examples of removable storage and non removable storage devices include magnetic disk devices such as flexible disk drives and hard disk drives HDD optical disk drives such as compact disk CD drives or digital versatile disk DVD drives solid state drives SSD and tape drives to name a few. Example computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data.

The system memory removable storage devices and non removable storage devices are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which may be used to store the desired information and which may be accessed by the computing device . Any such computer storage media may be part of the computing device .

The computing device may also include an interface bus for facilitating communication from various interface devices e.g. output devices peripheral interfaces and communication devices to the basic configuration via the bus interface controller . Example output devices include a graphics processing unit and an audio processing unit which may be configured to communicate to various external devices such as a display or speakers via one or more A V ports . Example peripheral interfaces include a serial interface controller or a parallel interface controller which may be configured to communicate with external devices such as input devices e.g. keyboard mouse pen voice input device touch input device etc. or other peripheral devices e.g. printer scanner etc. via one or more I O ports . An example communication device includes a network controller which may be arranged to facilitate communications with one or more other computing devices over a network communication link via one or more communication ports .

The network communication link may be one example of a communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and may include any information delivery media. A modulated data signal may be a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media may include wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF microwave infrared IR and other wireless media. The term computer readable media as used herein may include both storage media and communication media.

The computing device may be implemented as a portion of a small form factor portable or mobile electronic device such as a cell phone a personal data assistant PDA a personal media player device a wireless web watch device a personal headset device an application specific device or a hybrid device that include any of the above functions. The computing device may also be implemented as a personal computer including both laptop computer and non laptop computer configurations.

The present disclosure is not to be limited in terms of the particular embodiments described herein which are intended as illustrations of various aspects. Many modifications and variations can be made without departing from its spirit and scope as will be apparent to those skilled in the art. Functionally equivalent methods and apparatuses within the scope of the disclosure in addition to those enumerated herein will be apparent to those skilled in the art from the foregoing descriptions. Such modifications and variations are intended to fall within the scope of the appended claims. The present disclosure is to be limited only by the terms of the appended claims along with the full scope of equivalents to which such claims are entitled. It is to be understood that the present disclosure is not limited to particular methods reagents compounds compositions or biological systems which can of course vary. It is also to be understood that the terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting.

With respect to the use of substantially any plural and or singular terms herein those having skill in the art can translate from the plural to the singular and or from the singular to the plural as is appropriate to the context and or application. The various singular plural permutations may be expressly set forth herein for sake of clarity.

It will be understood by those within the art that in general terms used herein and especially in the appended claims e.g. bodies of the appended claims are generally intended as open terms e.g. the term including should be interpreted as including but not limited to the term having should be interpreted as having at least the term includes should be interpreted as includes but is not limited to etc. . It will be further understood by those within the art that if a specific number of an introduced claim recitation is intended such an intent will be explicitly recited in the claim and in the absence of such recitation no such intent is present. For example as an aid to understanding the following appended claims may contain usage of the introductory phrases at least one and one or more to introduce claim recitations. However the use of such phrases should not be construed to imply that the introduction of a claim recitation by the indefinite articles a or an limits any particular claim containing such introduced claim recitation to embodiments containing only one such recitation even when the same claim includes the introductory phrases one or more or at least one and indefinite articles such as a or an e.g. a and or an should be interpreted to mean at least one or one or more the same holds true for the use of definite articles used to introduce claim recitations. In addition even if a specific number of an introduced claim recitation is explicitly recited those skilled in the art will recognize that such recitation should be interpreted to mean at least the recited number e.g. the bare recitation of two recitations without other modifiers means at least two recitations or two or more recitations . Furthermore in those instances where a convention analogous to at least one of A B and C etc. is used in general such a construction is intended in the sense one having skill in the art would understand the convention e.g. a system having at least one of A B and C would include but not be limited to systems that have A alone B alone C alone A and B together A and C together B and C together and or A B and C together etc. . In those instances where a convention analogous to at least one of A B or C etc. is used in general such a construction is intended in the sense one having skill in the art would understand the convention e.g. a system having at least one of A B or C would include but not be limited to systems that have A alone B alone C alone A and B together A and C together B and C together and or A B and C together etc. . It will be further understood by those within the art that virtually any disjunctive word and or phrase presenting two or more alternative terms whether in the description claims or drawings should be understood to contemplate the possibilities of including one of the terms either of the terms or both terms. For example the phrase A or B will be understood to include the possibilities of A or B or A and B. 

In addition where features or aspects of the disclosure are described in terms of Markush groups those skilled in the art will recognize that the disclosure is also thereby described in terms of any individual member or subgroup of members of the Markush group.

As will be understood by one skilled in the art for any and all purposes such as in terms of providing a written description all ranges disclosed herein also encompass any and all possible sub ranges and combinations of sub ranges thereof. Any listed range can be easily recognized as sufficiently describing and enabling the same range being broken down into at least equal halves thirds quarters fifths tenths etc. As a non limiting example each range discussed herein can be readily broken down into a lower third middle third and upper third etc. As will also be understood by one skilled in the art all language such as up to at least and the like include the number recited and refer to ranges which can be subsequently broken down into sub ranges as discussed above. Finally as will be understood by one skilled in the art a range includes each individual member. Thus for example a group having 1 3 cells refers to groups having 1 2 or 3 cells. Similarly a group having 1 5 cells refers to groups having 1 2 3 4 or 5 cells and so forth.

From the foregoing it will be appreciated that various embodiments of the present disclosure have been described herein for purposes of illustration and that various modifications may be made without departing from the scope and spirit of the present disclosure. Accordingly the various embodiments disclosed herein are not intended to be limiting with the true scope and spirit being indicated by the following claims.

