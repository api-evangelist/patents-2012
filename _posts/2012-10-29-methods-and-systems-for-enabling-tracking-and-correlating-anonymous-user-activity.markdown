---

title: Methods and systems for enabling, tracking, and correlating anonymous user activity
abstract: Methods are disclosed for identity key management in networked application execution. In one embodiment, an identifier request is transmitted from a client system to a server system, in which an identity key value in the identifier request is blank. Upon detecting the blank identity key value at the server system, the server system operates to generate a new identity key value and an identifier for the new identity key value. The new identity key value and the identifier for the new identity key value are transmitted from the server system to the client system. The new identity key value is stored in a local store of the client system. The local store of the client system is secured by a passcode and persists data through power cycling of the client system. The identifier is used to track execution of a networked application in an anonymous execution mode.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09104851&OS=09104851&RS=09104851
owner: Zynga Inc.
number: 09104851
owner_city: San Francisco
owner_country: US
publication_date: 20121029
---
This application claims priority under 35 U.S.C. 119 e to U.S. Provisional Patent Application No. 61 554 959 filed Nov. 2 2011 entitled Methods and Systems for Enabling Tracking and Correlating Anonymous User Activity the disclosure of which is incorporated herein by reference in its entirety.

In modern on line game play an on line game requires a user i.e. player to register with a corresponding game server to enable storage of the user s game state in an identified manner and to enable retrieval and provision of a stored game state based on the user s identity. For example registration of a user of a given on line game can be implemented through a registration interface sourced by the corresponding game server in which the user is required to provide a username and password to enable saving of the user s current game state. With the provided username and password the game server can store the user s game state for later retrieval and continued game play. Although registration of a user is generally advantageous for both the game developer and the user there are instances when credentialed registration of a user for a given game is not of interest to the user. It is within this context that the present invention arises.

In one embodiment a method is disclosed for identity key management in networked application execution. The method includes transmitting an identifier request from a client system to a server system wherein an identity key value in the identifier request is blank. Upon detecting the blank identity key value at the server system the method includes operating the server system to generate a new identity key value and an identifier for the new identity key value. The new identity key value and the identifier for the new identity key value are transmitted from the server system to the client system. The method further includes storing the new identity key value in a local store of the client system. The local store of the client system is secured by a passcode. The new identity key value remains stored in the local store of the client system through power cycling of the client system. The identifier is used to track execution of a networked application.

In one embodiment a method is disclosed for identity key management in networked application execution. The method includes obtaining an identity key value from a local store of a client system. The local store of the client system is secured by a passcode. The identity key value remains stored in the local store of the client system through power cycling of the client system. The method also includes transmitting an identifier request from the client system to a server system. The identity request includes the identity key value obtained from the local store of the client system. Upon detecting the identity key value at the server system the method includes operating the server system to obtain an identifier corresponding to the identity key value from an identifier storage. The method further includes transmitting the identity key and the corresponding identifier from the server system to the client system. The identifier is used to track execution of a networked application.

In one embodiment a method is disclosed for identity key management in networked application execution. The method includes executing a networked application on a client system in an anonymous execution mode. The method also includes tracking execution of the networked application through a first identifier associated with the anonymous execution mode on the client system. The method further includes connecting to a social network on the client system whereby a second identifier associated with the social network is generated. The method also includes tracking execution of the networked application through both the first identifier associated with the anonymous execution mode on the client system and the second identifier associated with the social network.

Other aspects and advantages of the invention will become more apparent from the following detailed description taken in conjunction with the accompanying drawings illustrating by way of example the present invention.

In the following description numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without some or all of these specific details. In other instances well known process operations have not been described in detail in order not to unnecessarily obscure the present invention.

Computer implemented games are a popular form of entertainment. Some games are desktop based that may be run on individual computing devices as standalone applications. Some games are network based. A network based game typically includes one or more server components that are run on a server system and one or more client components that are run on a client system associated with a player of the game.

In particular embodiments a player of the network based game may control the game s progress at the client system by inputting commands to the game at the client system. The client components may be responsible for receiving inputs from the player executing game logic changing the state of one or more world or player state parameters of the game transmitting user inputs or other events to the server components running on the server system receiving instructions from the server components and displaying outputs of the game on the client device. For example each time a player provides an input to the game through the client components at the client device e.g. the player types on the keyboard or clicks the mouse of the client device the client components of the game may need to transmit the player s input to the server components running on the server system.

The server components may provide backend support for the client components and may be responsible for maintaining application data of the game processing the inputs from the player updating and or synchronizing the game state based on the game logic and each input from the player and transmitting instructions to the client components. Therefore it should be appreciated that a network based game may require its server and client components to communicate with each other frequently in order to coordinate their respective functionalities.

In particular embodiments multiple players using corresponding client systems may connect to and communicate through a network . Client systems may be any device capable of connecting to the network such as for example and without limitation a personal computer a smart phone a mobile phone a net book a handheld gaming device among others. The network can be defined as any type of electronic communication network including but not limited to a wireless network a wired network or a combination of wireless and wired networks such as the Internet a cellular network a wide area network and or a local area network among others.

The client systems are defined and connected to communicate through the network with a number of social network servers through N. The client systems are also defined and connected to communicate through the network with a number of multi player game servers through N. It should be understood that any number of social network servers N and any number of multi player game servers N can be connected to the network .

In some embodiments one or more of the social network servers through N can include an internal multi player game server. Also in some embodiments one or more of the multi player game servers through N can include an internal social network server. Additionally in some embodiments the social network servers through N and multi player game servers through N are defined and connected to communicate with each other through the network . In some embodiments one or more of the multi player game servers through N can include a PHP Hypertext Preprocessor server. Also each of the multi player game servers through N can include a game engine for any and all multi player games hosted or operated thereon.

Any given multi player game server through N can include computer readable code stored on a computer readable medium configured to be executed on a processor of the given multi player game server so as to implement one or more multi player games including various features described herein. The multi player game servers through N can load computer readable code for individual games from the computer readable medium into a computer memory and then execute the games from the code stored in the computer memory. Additionally one or more of the multi player game servers through N can be defined to simultaneously execute i.e. run a plurality of multi player games. In some embodiments a given multi player game server through N can be configured to access social graphs for players stored on one or more of the social network servers through N . In some embodiments information extracted from such social graphs e.g. a player s social contacts may be incorporated in the game logic of specific games and may be used to determine the current state of a game. Also in some embodiments different multi player game servers through N can be configured to access social graphs for players stored on each other.

Players can use the client systems to access send data to and receive data from the social network servers through N and or the multi player game servers through N over the network . In some embodiments the client systems may download and store game data from the various multi player game servers through N . In some embodiments the game data downloaded to the client systems can include information to enable various levels of off line game play.

In particular embodiments a computed implemented game may be a text based or turn based game implemented as a series of web pages that are generated after a player selects one or more actions to perform. The web pages may be displayed in a web browser executed on the player s client system . In one such embodiment a client application downloaded to a client system may operate to serve a set of web pages to the web browser executed on the player s client system . In some embodiments a computer implemented game may be an animated or rendered game executable as a stand alone application or within the context of a web page or other structured document. In some embodiments a computer implemented game may be implemented using ADOBE FLASH based technologies. For example a game may be fully or partially implemented as a SWF object that is embedded in a web page and executable by a FLASH media player plug in to the player s web browser. In various example embodiments one or more described web pages may be associated with a networking system or networking service. However other embodiments may include applications which retrieve and render structured documents hosted by any type of network addressable resource or web site.

An on line game may provide for registration of a user i.e. player with a corresponding game server to enable storage of the user s game state in an identified manner and to enable retrieval and provision of a stored game state based on the user s registered identity. However in some instances registration of a user for a given game is not of interest to the user and creates friction for game play by the user. Methods for anonymous play are disclosed herein by which a user can play a given on line game in an anonymous manner and be provided with the benefits of having a stored and retrievable game state.

In one embodiment provision of game services and game reporting requires that each user have a ZID. Therefore to enable anonymous play it is necessary to generate a ZID for an anonymous user. The ZID for anonymous play is referred to hereafter as AnonZID. The methods for anonymous play as disclosed herein provide for generation and utilization of an AnonZID so as to enable the following features 

For mobile client systems such as smartphones each game application has an application identifier assigned by the client system manufacturer. For example in the case of iOS games for the IPHONE client system by APPLE INC. an application identifier for a given game has two parts 1 a seed identifier generated by APPLE INC. and 2 an application identifier defined by the developer of the given game. In one embodiment the seed identifier can be used by a developer to access a portion of a local store on the mobile client system that is assigned to the developer. The local store is a persistent storage medium i.e. memory present on the mobile client system in which data can be stored and maintained in an unaltered state through power cycling until the mobile client system is reset.

As used herein the term local store refers to a memory area on a client system in which data is data is stored and maintained through power cycling of the client system until the reset operation is performed on the client system. Also as used herein the term seed identifier refers to an identifier used to access the local store of the client system to enable storing of data in the local store modifying data in the local store deleting data from the local store and reading data from the local store. It should understood that the seed identifier provides the developer with access to their portion of the local store but does not provide access to other portions of the local store that are not associated with the developer.

In one embodiment an instance of a given game can be persistently stored as a set of game state parameters that characterize the state of various game objects such as player character state parameters non player character parameters and world state parameters. In one embodiment game state is maintained in a database as a serialized unstructured string of text data as a so called Binary Large Object BLOB . When a player accesses a game server to play a game the BLOB containing the game state for the instance corresponding to the user is transmitted to the client system for use by a client side executable game. In one embodiment the client side executable game may be a FLASH r based game which can de serialize the game state data in the BLOB.

As the user plays the game the game logic executed at the client is defined to maintain and modify the various game state parameters locally. In one embodiment the client side game logic may also batch game events such as mouse clicks and transmit these events to a remote game server. The remote game server can operate to retrieve a copy of the BLOB from a database or an intermediate memory cache memcache layer. The remote game server can also de serialize the BLOB to resolve the game state parameters and execute its own game logic based on the events in the batch file of events transmitted by the client to synchronize the game state on the server side. The remote game server may then re serialize the game state now modified into a BLOB and pass this to a memory cache layer for subsequent updating to a persistent database.

In particular embodiments when a user plays a network based game on a client system associated with the user a game server hosting the game may serialize all the game related data including for example and without limitation game states game events user inputs for this particular user and this particular game into a BLOB and store the BLOB in a database associated with the game server. The BLOB may be associated with an identifier that indicates that the BLOB contains the serialized game related data for this particular user and this particular game. In particular embodiments while the user is not playing the game the corresponding BLOB may be stored in the database. This enables the user to stop playing the game at any time without losing the current state of the game associated with the user s play. When the user resumes playing the game next time the game server may retrieve the corresponding BLOB from the database to determine the most recent values of the game related data. In particular embodiments while the user is playing the game the game server may also load the corresponding BLOB into a memory cache so that the game server may have faster access to the BLOB and the game related data contained therein thus improving the performance of the game since accessing data stored in a memory cache is much faster than accessing data stored in a database.

The method continues with an operation in which the game installed on the client system is operated to request a ZID from the game server. If the global identity key was present in the developer s portion of the local store the ZID request would include that global identity key. However because there is no global identity key available in the local store of the client system the ZID request in operation includes a blank value for the global identity key. In an operation the game server receives the ZID request from the game installed on the client system and recognizes that there is no global identity key present in the ZID request. Based on the absence of the global identity key in the ZID request operation further includes operating the game server to generate anew global identity key and obtain a ZID for the new global identity key.

More specifically in one embodiment of operation the game server is operated to generate a random string as the new global identity key. The game server then requests a direct application programming interface DAPI to return a ZID corresponding to the new global identity key. The DAPI performs a lookup for the new global identity key in a ZID database and does not find a ZID based on the new global identity key. It should be understood that the new global identity key in this instance is considered an identity key for an anonymous social network. Therefore the ZID for the new global identity key is a function of the new global identity key and a SNID of the anonymous social network. For example if the new global identity key was generated as a random string equal to GT73K89UI and the SNID of the anonymous social network equals 24 then the ZID for the new global identity key is a function of global identity key GT73K89UI and SNID 24. Because DAPI does not find a ZID based on the new global identity key DAPI functions to generate a new ZID based on a hash of the new global identity key and SNID 24 of the anonymous social network. This new ZID for the anonymous social network is referred to as AnonZID. The DAPI then returns the AnonZID to the game server.

From operation the method continues with an operation in which the game server transmits the new global identity key and the corresponding AnonZID to the game on the client system. Then in an operation the game on the client system is operated to store the new global identity key in the developer s portion of the local store on the client system. In this manner the global identity key corresponding to the AnonZID can be used by the game next time it is loaded on the client system for anonymous play. Also the global identity key corresponding to the AnonZID can be used by other applications when they are installed on the client system. The game uses the AnonZID to obtain a saved game state from the game server and make tracking calls.

Then the game server requests a ZID for the new global identity key from the DAPI as indicated by arrow 3. The DAPI functions to lookup the ZID for the new global identity key in the ZID database. Upon determining that the ZID database does not include a ZID for the new global identity key the DAPI functions to generate a new ZID for the new global identity key. The DAPI stores the new ZID and new global identity key in the ZID database and returns the new ZID to the game server as indicated by arrow 4. Then in accordance with operation the game server transmits the new global identity key and corresponding ZID to the game on the client system as indicated by arrow 5. Upon receiving the new global identity key and corresponding ZID the game on the client system stores the new global identity key in the game developer s portion of the local store in accordance with operation as indicated by arrow 6.

It should be understood that in the anonymous play embodiments disclosed herein the ZID is a function of an identity key that is generated on the game server. The identity key is written to the local store of the client system which is only readable by applications that have access to the seed identifier assigned to the particular application developer. Use of the game server generated identity key as stored in the developer s portion of the local store on the client system is more secure than use of a publicly accessible client system identifier such as a unique device identifier UDID . For example a UDID is available in the settings of the client system and can be read by any application. If an application were to use a publicly accessible client system identifier such as the UDID the application would be vulnerable to a malicious developer using the UDID to hijack the application. Therefore it should be appreciated that use of the game server generated identity key for the client system in conjunction with storage of the identity key in the local store of the client system provides for enhanced security of the application.

The method continues with an operation in which the game installed on the client system is operated to request a ZID from the game server that corresponds to the global identity key obtained from the local store of the client system. In an operation the game server receives the ZID request from the game installed on the client system and obtains the ZID corresponding to the global identity key. More specifically in one embodiment of operation the game server is operated to request the DAPI to return the ZID corresponding to the global identity key included in the ZID request. The DAPI performs a lookup for the global identity key in the ZID database and returns the ZID corresponding to the global identity key to the game server. It should be understood that the global identity key in this instance is associated with the anonymous social network. Therefore the ZID for the global identity key is a function of the global identity key and the SNID of the anonymous social network and is referred to as an AnonZID. From operation the method continues with an operation in which the game server transmits the global identity key and the corresponding AnonZID to the game on the client system. The game uses the AnonZID to obtain a saved game state from the game server and make tracking calls.

Upon receiving the ZID request the game server proceeds with operation in which a request for the ZID corresponding to the global identity key is made to the DAPI as indicated by arrow 3. The DAPI functions to lookup the ZID for the global identity key in the ZID database and return the ZID to the game server as indicated by arrow 4. Then in accordance with operation the game server transmits the global identity key and corresponding ZID to the new game on the client system as indicated by arrow 5. Upon receiving the global identity key and corresponding ZID the new game can use the ZID i.e. AnonZID to obtain a saved game state from the game server and make tracking calls.

In view of the foregoing it should be understood that multiple games on a given client system can use the same AnonZID corresponding to the global identity key. Each game by the same developer on the client system has access via the assigned seed identifier to the local store of the client system that is assigned to the developer. Therefore each game by the same developer can obtain the global identity key of the client system from the local store and can in turn obtain the AnonZID corresponding to the global identity key from the game server.

A two layer identity key system is provided to enable multiple games on a single client system to support different user accounts. shows an example diagram of the two layer identity key system in accordance with one embodiment of the present invention. A first identity key layer Layer 1 includes the global identity key of the client system. Because the global identity key is generated once for a given developer upon installation of a first application by the given developer on the client system there is a one to one correspondence between the global identity key and the client system. Any application by the given developer will use the global identity key upon its installation on the client system. In the example diagram of the global identity key for all applications by the given developer on the particular client system is represented as X. The global identity key X is used for first time installation of any applications by the given developer on the particular client system.

A second layer Layer 2 of the two layer identity key system is a game specific identity key. In most cases the game specific identity key is the same as the global identity key. For example in Game is installed on the client system and the user is a first time player of Game . Therefore the identity key for Game is the same as the global identity key X.

In one embodiment the identity key for a game can differ from the global identity key of the client system when multiple users are playing games on the same client system. For example the identity key for a game can differ from the global identity key of the client system when a second social network connected user is playing the game on the same client system. For instance with regard to a Game identity key Y is different from the global identity key X when the player of Game is connected to a social network on the client system.

Also in one embodiment the identity key for a game can differ from the global identity key of the client system when a user is playing a game on multiple client systems. For example the identity key for a game can differ from the global identity key of the client system when a user has loaded their game state from one client system onto another client system. For instance with regard to a player has loaded a saved game state for Game from another device such that the Game identity key Y is the same as the global identity key of the other device.

The User A then connects to a social network SN such as FACEBOOK by way of example on the Client System which triggers a state transition to a Client System state . In state User A continues to play Game on Client System under the social network credentials of User A. Upon connection of User A to the social network a ZIDfor User A in the social network SN is either created by the DAPI or obtained by the DAPI from the ZID database and is provided to the Client System via the game server. In this instance the ZIDfor User A in the social network SN is mapped to the User BLOB X. Also a reference is established from ZIDto ZID. Therefore both the ZIDfor the anonymous play of User A on Client System and the ZIDfor the social network SN connected play of User A on Client System are mapped to the same User BLOB X for User A.

The diagram of also shows a state in which the User A is playing Game anonymously on a Client System . The global identity key for Client System is Y. The identity key for Game on Client System is also Y. Therefore User A is playing Game under ZIDwhich corresponds to identity key Y and the anonymous social network and which points to User BLOB Y. The Game play of User A on Client System is tracked and stored in User BLOB Y.

The User A then connects to the social network SN on the Client System which triggers a state transition to a Client System state . In state the game server obtains the ZIDfor User A through the DAPI and detects that the ZIDfor User A is already mapped to User BLOB X by way of the Game play of User A on Client System . Therefore in state User A is prompted to choose whether the Game play of User A on Client System should be tracked by User BLOB X corresponding to the previous Game play of User A on Client System Option 1 or by User BLOB Y corresponding to the anonymous play of User A on Client System Option 2 . shows an example dialog that may be presented to User A upon entering state in accordance with one embodiment of the present invention.

The User A then connects to a social network SN such as FACEBOOK by way of example on the Client System which triggers a state transition to a Client System state . In state User A continues to play Game on Client System under the social network credentials of User A. Upon connection of User A to the social network a ZIDfor User A in the social network SN is either created by the DAPI or obtained by the DAPI from the ZID database and is provided to the Client System via the game server. In this instance the ZIDfor User A in the social network SN is mapped to the User BLOB X. Also a reference is established from ZIDto ZID. Therefore both the ZIDfor the anonymous play of User A on Client System and the ZIDfor the social network SN connected play of User A on Client System are mapped to the same User BLOB X for User A.

The User A then logs out of the social network SN on the Client System which triggers a state transition to a Client System state . In state Game on Client System continues to be associated with User BLOB X by way of ZID. Also in state the ZIDis changed to an inactive state. It should be understood that in this embodiment the game server maintains a record of the ZIDfor User A having been connected to User BLOB X even after User A has logged out of the social network SN.

A new User B then connects to the social network SN on the Client System which triggers a state transition to a Client System state . In state a ZID request for the social network SN identity of User B is transmitted from the game on Client System to the game server. At this point the game server detects that there are two different SN accounts trying to access the same User BLOB X. Because User B is a new player there is no User BLOB associated with the social network SN account of User B. At this point the game server prompts the User B to select whether or not a new Game is to be created for User B.

The new identity key Z and corresponding ZIDis transmitted from the game server to the Client System . The Client System then stores the new identity key Z in a Game identity key field of the local store on the Client System . The Game play of User B on Client System is then tracked and maintained within User BLOB Z. Both ZIDcorresponding to the anonymous play of User B on Client System and ZIDcorresponding to the social network SN connected play of User B on Client System are mapped to User BLOB Z. Also the previous User BLOB X corresponding to the anonymous play of User A on Client System is archived.

The User B then logs out of the social network SN on the Client System which triggers a state transition to a Client System state . In state Game on Client System continues to be associated with User BLOB Z by way of ZID. Also in state the ZIDis changed to an inactive state. However the game server maintains a record of the ZIDfor User B having been connected to User BLOB Z even after User B has logged out of the social network SN. Thus the User B can logout of the social network SN and continue to play Game anonymously on Client System through reference to the User BLOB Z.

The User A then reassumes control of the Client System and connects to the social network SN on the Client System which triggers a state transition to a Client System state . In state once the User A connects to the social network SN the Game identity key in the local store is overwritten with the identity key X associated with both User A and Client System . Upon connection of User A to the social network the ZIDfor User A in the social network SN is obtained by the DAPI from the ZID database and is provided to the Client System via the game server. In this instance the ZIDfor User A in the social network SN is mapped to the User BLOB X. Also a reference is established from ZIDto ZID. Therefore both the ZIDfor the anonymous play of User A on Client System and the ZIDfor the social network SN connected play of User A on Client System are mapped to the same User BLOB X for User A. Also the previous User BLOB Z corresponding to the play of User B on Client System is archived.

The identity key Z and corresponding ZIDis transmitted from the game server to the Client System . The Client System then stores the identity key Z in the Game identity key field of the local store on the Client System . The Game play of User B on Client System is then tracked and maintained within User BLOB Z. Both ZIDcorresponding to the anonymous play of User B on Client System and ZIDcorresponding to the social network SN connected play of User B on Client System are mapped to User BLOB Z. Also the previous User BLOB X corresponding to the anonymous play of User A on Client System is archived. Then states and in proceed as described above with regard to .

In the event that a user s application becomes non functional the user may contact the application developer s customer support service to recover a previously saved application state. In this case the customer support service will need an identifier in order to retrieve the user s information and saved application state. Because the user s ZID is based on an identity key written to the local store of the user s client system which is not accessible by the user the customer support service will require another identifier in order to retrieve the user s information and saved application state.

In one embodiment a unique device identifier UDID of the client system can be used by the customer support service to retrieve the user s saved User BLOB. In this embodiment the User BLOB should store an array of UDIDs associated with the User BLOB. Also an administration tool is provided to the customer support service to enable retrieval of the user s account information and User BLOB.

In another embodiment an email based solution is implemented to enable retrieval of the user s information and saved application state. In this embodiment the user is prompted to enter their email address to save their game state in case of problems. In one embodiment this user prompt may be displayed after the user has progressed through a few levels of the application. Also in one embodiment an option to add an email address is provided in a settings menu of the application. In one embodiment when a user specifies an email address a verification email is transmitted to the user s email address to confirm that the user s email address is correct. Upon verification that the user s email address is correct the user s email address can be used as another key to retrieve the user s account information and User BLOB.

If operation determines that the global identity key is not present in the local store of the client system the method proceeds with an operation in which a ZID request is transmitted from the client system to a game server. However in the operation the ZID request includes a blank value for the global identity key and does not include a social network identity for the user. From each of operations and the method proceeds with an operation is .

In operation of a determination is made as to whether or not the global identity key is present in the ZID request received at the game server from the client system. If a non blank value is present for the global identity key it is determined that the global identity key does exist. If a blank value is present for the global identity key it is determined that the global identity key does not exist. If the global identity key does not exist in the ZID request a condition C exists and the method proceeds with an operation . The condition C corresponds to a user installing a first application by the developer on the client system in an anonymous play mode. In the operation a determination is made as to whether or not a local store exists on the client system. If a local store does not exist on the client system the method proceeds with an operation to display a message to the user on the client system that anonymous play is not supported by the client system because there is no local store available to store the global identity key for the client system.

If operation determines that a local store does exist on the client system the method proceeds with an operation to generate a new global identity key for the client system. In one embodiment generation of the new global identity key is done in the same manner as previously described with regard to . From the operation the method proceeds with an operation in which the global identity key is mapped to a new AnonZID. Then in an operation a User BLOB is created for the global identity key.

With reference back to operation if it is determined that the global identity key is present in the ZID request the method proceeds with an operation to map the global identity key to its corresponding AnonZID. Then an operation is performed to determine whether or not a User BLOB exists for the AnonZID to which the global identity key is mapped. If operation determines that the User BLOB for the AnonZID does not exist a condition C exists and the method proceeds with an operation . The condition C corresponds to a user installing a second or later application by the developer on the client system in the anonymous play mode. The operation includes mapping the global identity key to its corresponding AnonZID. An operation is then performed to create a User BLOB for the global identity key and the newly installed application.

With reference back to operation if it is determined that the User BLOB for the AnonZID does exist the method proceeds with an operation to determine whether or not the User BLOB includes an identity key. If it is determined that the User BLOB for the AnonZID does not include an identity key a condition C exists and the method proceeds with an operation . The condition C corresponds to an error condition in which it is recognized by the game server that the User BLOB is missing an identity key that should be present. In the operation the global identity key is mapped to its corresponding AnonZID. Then an operation is performed to obtain the User BLOB referenced by the AnonZID that is mapped to the global identity key. Then in an operation the global identity key from the AnonZID request is inserted i.e. stored in the User BLOB referenced by the AnonZID that is mapped to the global identity key. It should be understood the operations through resolve the condition C.

With reference back to operation if it is determined that the User BLOB for the AnonZID does include an identity key the method proceeds with an operation to determine whether or not the identity key in the User BLOB matches the global identity key in the ZID request. If operation determines that the identity key in the User BLOB does not match the global identity key in the ZID request a condition C exists and the method proceeds with an operation . The condition C corresponds to an error condition in which it is recognized by the game server that an identity key mismatch exists between the User BLOB for the AnonZID and the global identity key in the ZID request that was mapped to the AnonZID. In the operation a message is displayed to the user on the client system that the identity key mismatch has occurred.

With reference back to operation if it is determined that the identity key in the User BLOB does match the global identity key in the ZID request a condition C exists and the method proceeds with an operation . The condition C corresponds to a properly completed authentication for anonymous play mode on the client system. In the operation the global identity key is mapped to its corresponding AnonZID. Then an operation is performed to obtain the User BLOB referenced by the AnonZID that is mapped to the global identity key.

With reference back to operation of if the user is connected to i.e. logged in to a social network on the client system the method proceeds with an operation for determining whether or not a global identity key is present in a local store of the client system. If the global identity key is present in the local store of the client system the method proceeds with an operation in which a ZID request is transmitted from the client system to a game server. In the operation the ZID request includes the global identity key from the local store of the client system and includes the social network identity for the user.

If operation determines that the global identity key is not present in the local store of the client system the method proceeds with an operation in which a ZID request is transmitted from the client system to a game server. However in the operation the ZID request includes a blank value for the global identity key but does include the social network identity for the user. From each of operations and the method proceeds with an operation is .

In operation the social network identity for the user as included in the ZID request is mapped to a social network ZID on the game server. The method then proceeds with an operation for determining whether or not the social network ZID references an AnonZID. If operation determines that the social network ZID does not reference an AnonZID the method proceeds with an operation for determining whether or not a global identity key is present in the ZID request. If a non blank value is present for the global identity key it is determined in operation that the global identity key does exist. If a blank value is present for the global identity key it is determined in operation that the global identity key does not exist. If the global identity key does not exist in the ZID request a condition C exists and the method proceeds with an operation . The condition C corresponds to a user installing a first application by the developer on the client system in a social network connected play mode. In the operation a determination is made as to whether or not a local store exists on the client system. If a local store does not exist on the client system the method proceed with an operation to display a message to the user on the client system that anonymous play is not supported by the client system because there is no local store available to store the global identity key for the client system.

If operation determines that a local store does exist on the client system the method proceeds with an operation to generate a new global identity key for the client system. In one embodiment generation of the new global identity key is done in the same manner as previously described with regard to . From the operation the method proceeds with an operation in which the global identity key is mapped to a new AnonZID. Then in an operation a User BLOB is created for the global identity key. The method also includes an operation for creating a reference from the social network ZID to the AnonZID.

With reference back to operation if it is determined that the global identity key is present in the ZID request the method proceeds with an operation to map the global identity key to its corresponding AnonZID. Then an operation is performed to determine whether or not a User BLOB exists for the AnonZID to which the global identity key is mapped. If operation determines that the User BLOB for the AnonZID does not exist a condition C exists and the method proceeds with an operation . The condition C corresponds to a user installing a second or later application by the developer on the client system in the social network connected play mode. The operation includes mapping the global identity key to its corresponding AnonZID. An operation is then performed to create a User BLOB for the global identity key and the newly installed application. An operation is also performed to create a reference from the social network ZID to the AnonZID.

With reference back to operation if it is determined that the User BLOB for the AnonZID does exist the method proceeds with an operation to determine whether or not the User BLOB for the AnonZID includes a social network ZID. If operation determines that the User BLOB for the AnonZID does not include a social network ZID a condition C exists and the method proceeds with an operation . The condition C corresponds to the user on the client system connecting to the social network for the first time to enter the social network connected play mode of the game. The operation includes mapping the global identity key to its corresponding AnonZID. An operation is then performed to update the User BLOB for the AnonZID to include the social network ZID to which the social network identity of the user is mapped in operation . An operation is also performed to create a reference from the social network ZIP to the AnonZID.

With reference back to operation if it is determined that the User BLOB for the AnonZID does include a social network ZID the method proceeds with an operation to determine whether or not the social network ZID in the User BLOB corresponds to the social network identity included in the ZID request. If operation determines that the social network ZID in the User BLOB does correspond to the social network identity included in the ZID request a condition C exists and the method proceeds with an operation . The condition C corresponds to an error condition in which the social network ZID does not reference an AnonZID although it should. The operation includes mapping the global identity key to its corresponding AnonZID. An operation is also performed to create a reference from the social network ZID to the AnonZID thereby resolving condition C.

With reference back to operation if it is determined that the social network ZID in the User BLOB does not correspond to the social network identity included in the ZID request a condition C exists and the method proceeds with an operation . The condition C corresponds to anew user on an existing client system connecting to the social network to enter the social network connected play mode of the game. In the operation a new identity key is generated for the new user on the existing client system. In one embodiment generation of the new identity key is done in the same manner as previously described with regard to . From the operation the method proceeds with an operation in which the new identity key is mapped to anew AnonZID. Then in an operation a User BLOB is created for the new identity key. The method also includes an operation for creating a reference from the social network ZID as mapped to in operation to the new AnonZID.

With reference back to operation if it is determined that the social network ZID as mapped to in operation does not reference an AnonZID the method proceeds with an operation in . In operation a determination is made as to whether or not a User BLOB exists for the AnonZID to which the global identity key is mapped. If operation determines that the User BLOB for the AnonZID does not exist a condition C exists and the method proceeds with an operation . The condition C corresponds to an error condition in which the User BLOB for the AnonZID is missing but should exist. The operation includes deleting the reference from the social network ZID to the AnonZID Then in an operation the client system is instructed to resend the ZID request such that appropriate operation of the present method can be performed to create the missing User BLOB of the AnonZID.

With reference back to operation if it is determined that the User BLOB for the AnonZID does exist the method proceeds with an operation to determine whether or not the identity key in the User BLOB matches the global identity key in the ZID request. If operation determines that the identity key in the User BLOB does match the global identity key in the ZID request a condition C exists and the method proceeds with an operation . The condition C corresponds to a properly completed authentication for social network connected play mode on the client system. In the operation the User BLOB referenced by the social network ZID is obtained to track the game play on the client system.

With reference back to operation if it is determined that the identity key in the User BLOB does not match the global identity key in the ZID request the method proceeds with an operation to determine whether or not the User BLOB for the AnonZID includes a social network ZID. If operation determines that the User BLOB for the AnonZID does not include a social network ZID a condition C exists and the method proceeds with an operation . The condition C corresponds to a condition in which the user on the client system has multiple saved game states available. The operation includes mapping the global identity key to its corresponding AnonZID. An operation is then performed to obtain the User BLOB for the AnonZID to which the global identity key maps. An operation is also performed to obtain the User BLOB corresponding to the social network ZID to which the social network identity of the user is mapped in operation . An operation is then performed to prompt the user on the client system to select which saved game state is to be used going forward i.e. either the game state stored in the User BLOB for the AnonZID or the game state stored in the User BLOB for the social network ZID.

With reference back to operation if it is determined that the User BLOB for the AnonZID does include a social network ZID the method proceeds with an operation to determine whether or not the social network ZID in the User BLOB corresponds to the social network identity included in the ZID request. If operation determines that the social network ZID in the User BLOB does correspond to the social network identity included in the ZID request a condition C exists and the method proceeds with an operation . The condition C corresponds to a known social network connected user playing on a second client system. The operation includes obtaining the User BLOB referenced by the social network ZID and using this User BLOB to track the game play on the client system.

With reference back to operation if it is determined that the social network ZID in the User BLOB does not correspond to the social network identity included in the ZID request a condition C exists and the method proceeds with an operation . The condition C corresponds to a guest user on an existing client system connecting to the social network to enter the social network connected play mode of the game. The operation includes obtaining the User BLOB referenced by the social network ZID and using this User BLOB to track the game play on the client system.

It should be understood that the methods for anonymous play as disclosed herein support restoration of a game state following deletion of the corresponding game application from the client system and reinstallation of the corresponding game application on the client system. This is because the local store of the client system remains unaffected when the game application is deleted from the client system. In one embodiment the local store of the client system is only cleaned i.e. erased when the client system is subjected to a master reset process. If a master reset is performed on the client system a new user of the client system can start anew game on the client system under anew global identity key.

Additionally in view of the foregoing it should be understood that the method for integrated identity key management disclosed herein provides for seamless transition between anonymous play mode and social network connected play mode in both directions. As discussed above if a user is playing a game on a client system in anonymous play mode and then connects to a social network a new social network ZID is created that points to the same User BLOB that was tracking the user s game play in the anonymous play mode. Also if the user connects to multiple social networks a new social network ZID is created for each of the multiple social networks and each new social network ZID is made to reference the same User BLOB that also corresponds to the user s game play in the anonymous play mode on their client system.

When the user disconnects from a social network the reference to the User BLOB from the social network ZID for the disconnected social network is changed to an inactive state. It should be appreciated that because each social network ZID for a given user resolves down to the same User BLOB for the given user a saved game state that is stored in the User BLOB can be retrieved through any of the social network identifiers for the given user. Thus a user s game state can be maintained when the user plays on multiple client systems provided that the user connects to a social network on each client system. Also in the method for integrated identity key management disclosed herein cross game reporting is enabled because each game shares the same AnonZID.

Anonymous play embodiments disclosed herein may be implemented in a network environment. shows an example of such a network environment in accordance with one embodiment of the present invention. The network environment includes a network coupling one or more servers and one or more clients to each other. In various embodiments network is an intranet an extranet a virtual private network VPN a local area network LAN a wireless LAN WLAN a wide area network WAN a metropolitan area network MAN a portion of the Internet or another network or a combination of two or more such networks . The present disclosure contemplates any suitable network .

One or more links couple a server or a client to network . In various embodiments each of the one or more links include one or more wireline wireless or optical links. In various embodiments each of the one or more links include an intranet an extranet a VPN a LAN a WLAN a WAN a MAN a portion of the Internet or another link or a combination of two or more such links . The present disclosure contemplates any suitable links coupling servers and clients to network .

In various embodiments each server may be a unitary server or may be a distributed server spanning multiple computers or multiple datacenters. Servers may be of various types such as for example and without limitation web server news server mail server message server advertising server file server application server exchange server database server or proxy server. In various embodiments each server may include hardware software or embedded logic components or a combination of two or more such components for carrying out the appropriate functionalities implemented or supported by server . For example a web server is generally capable of hosting websites containing web pages or particular elements of web pages. More specifically a web server may host HTML files or other file types or may dynamically create or constitute files upon a request and communicate those files to clients in response to HTTP or other requests from clients . A mail server is generally capable of providing electronic mail services to various clients . A database server is generally capable of providing an interface for managing data stored in one or more data stores.

In various embodiments one or more data storage devices may be communicatively linked to one or more servers via one or more links . In various embodiments data storage devices may be used to store various types of information. In various embodiments the information stored in data storage devices may be organized according to specific data structures. In one embodiment each data storage device may be a relational database. Some embodiments may provide interfaces that enable servers or clients to manage e.g. retrieve modify add or delete the information stored in data storage devices .

In various embodiments each client may be an electronic device including hardware software or embedded logic components or a combination of two or more such components and capable of carrying out the appropriate functionalities implemented or supported by the client . For example and without limitation a client may be a desktop computer system a notebook computer system a netbook computer system a handheld electronic device or a mobile telephone. The present disclosure contemplates any suitable clients . A client may enable a network user at client to access network . A client may enable its user to communicate with other users at other clients .

A client may have a web browser such as MICROSOFT INTERNET EXPLORER GOOGLE CHROME or MOZILLA FIREFOX and may have one or more add ons plug ins or other extensions such as TOOLBAR or YAHOO TOOLBAR. A user at client may enter a Uniform Resource Locator URL or other address directing the web browser to a server and the web browser may generate a Hyper Text Transfer Protocol HTTP request and communicate the HTTP request to server . Server may accept the HTTP request and communicate to client one or more Hyper Text Markup Language HTML files responsive to the HTTP request. The web browser may render a web page based on the HTML files from server for presentation to the user. The present disclosure contemplates any suitable web page files. For example and without limitation web pages may render from HTML files Extensible Hyper Text Markup Language XHTML files or Extensible Markup Language XML files according to particular needs. Such pages may also execute scripts such as for example and without limitation those written in JAVASCRIPT JAVA MICROSOFT SILVERLIGHT combinations of markup language and scripts such as AJAX Asynchronous JAVASCRIPT and XML and the like. Herein reference to a web page encompasses one or more corresponding web page files which a browser may use to render the web page and vice versa where appropriate.

Particular embodiments may be implemented on one or more computer systems. shows an example computer system in accordance with one embodiment of the present invention. In various embodiments one or more computer systems perform one or more operations of one or more methods described or illustrated herein. In various embodiments one or more computer systems provide functionality described or illustrated herein. In various embodiments software running on one or more computer systems performs one or more operations of one or more methods described or illustrated herein or provides functionality described or illustrated herein. Also some embodiments include one or more portions of one or more computer systems .

This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system taking any suitable physical form. For example and without limitation computer system may be an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server or a combination of two or more of these. Where appropriate computer system may include one or more computer systems be unitary or distributed span multiple locations span multiple machines or reside in a cloud which may include one or more cloud components in one or more networks. Where appropriate one or more computer systems may perform without substantial spatial or temporal limitation one or more operations of one or more methods described or illustrated herein. For example and without limitation one or more computer systems may perform in real time or in batch mode one or more operations of one or more methods described or illustrated herein. One or more computer systems may perform at different times or at different locations one or more operations of one or more methods described or illustrated herein where appropriate.

In various embodiments computer system includes a processor memory storage an input output I O interface a communication interface and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement this disclosure contemplates any suitable computer system having any suitable number of components of any required type in any suitable arrangement.

In various embodiments processor includes hardware for executing instructions such as those making up a computer program. For example and without limitation to execute instructions processor may retrieve or fetch the instructions from an internal register an internal cache memory or storage decode and execute them and then write one or more results to an internal register an internal cache memory or storage . In various embodiments processor may include one or more internal caches for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal caches where appropriate. For example and without limitation processor may include one or more instruction caches one or more data caches and one or more translation lookaside buffers TLBs . Instructions in the instruction caches may be copies of instructions in memory or storage and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory or storage for instructions executing at processor to operate on the results of previous instructions executed at processor for access by subsequent instructions executing at processor or for writing to memory or storage or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual address translation for processor . In particular embodiments processor may include one or more internal registers for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal registers where appropriate. Also where appropriate processor may include one or more arithmetic logic units ALUs be a multi core processor or include one or more processors . Although this disclosure describes and illustrates a particular processor this disclosure contemplates any suitable processor.

In particular embodiments memory includes main memory for storing instructions for processor to execute or data for processor to operate on. For example and without limitation computer system may load instructions from storage or another source such as for example another computer system to memory . Processor may then load the instructions from memory to an internal register or internal cache. To execute the instructions processor may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions processor may write one or more results which may be intermediate or final results to the internal register or internal cache. Processor may then write one or more of those results to memory . In various embodiments processor executes only instructions in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere and operates only on data in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere . One or more memory buses which may each include an address bus and a data bus may couple processor to memory . Bus may include one or more memory buses as described below. In particular embodiments one or more memory management units MMUs reside between processor and memory and facilitate accesses to memory requested by processor . In particular embodiments memory includes random access memory RAM . This RAM may be volatile memory where appropriate. Also where appropriate this RAM may be dynamic RAM DRAM or static RAM SRAM . Moreover where appropriate this RAM may be single ported or multi ported RAM. The present disclosure contemplates any suitable RAM. Memory may include one or more memories where appropriate. Although this disclosure describes and illustrates particular memory this disclosure contemplates any suitable memory.

In particular embodiments storage includes mass storage for data or instructions. For example and without limitation storage may include an HDD a floppy disk drive flash memory an optical disc a magneto optical disc magnetic tape or a Universal Serial Bus USB drive or a combination of two or more of these. Storage may include removable or non removable or fixed media where appropriate. Storage may be internal or external to computer system where appropriate. In various embodiments storage is non volatile solid state memory. In various embodiments storage includes read only memory ROM . Where appropriate this ROM may be mask programmed ROM programmable ROM PROM erasable PROM EPROM electrically erasable PROM EEPROM electrically alterable ROM EAROM or flash memory or a combination of two or more of these. This disclosure contemplates mass storage taking any suitable physical form. Storage may include one or more storage control units facilitating communication between processor and storage where appropriate. Also where appropriate storage may include one or more storage components. Although this disclosure describes and illustrates particular storage this disclosure contemplates any suitable storage.

In particular embodiments I O interface includes hardware software or both providing one or more interfaces for communication between computer system and one or more I O devices. Computer system may include one or more of these I O devices where appropriate. One or more of these I O devices may enable communication between a person and computer system . For example and without limitation an I O device may include a keyboard keypad microphone monitor mouse printer scanner speaker still camera stylus tablet touch screen trackball video camera another suitable I O device or a combination of two or more of these. An I O device may include one or more sensors. This disclosure contemplates any suitable I O devices and any suitable I O interfaces for them. Where appropriate I O interface may include one or more device or software drivers enabling processor to drive one or more of these I O devices. I O interface may include one or more I O interfaces where appropriate. Although this disclosure describes and illustrates a particular I O interface this disclosure contemplates any suitable I O interface.

In particular embodiments communication interface includes hardware software or both providing one or more interfaces for communication such as for example packet based communication between computer system and one or more other computer systems or one or more networks. As an example and not by way of limitation communication interface may include a network interface controller NIC or network adapter for communicating with an Ethernet or other wire based network or a wireless NIC WNIC or wireless adapter for communicating with a wireless network such as a WI FI network. This disclosure contemplates any suitable network and any suitable communication interface for it. For example and without limitation computer system may communicate with an ad hoc network a personal area network PAN a local area network LAN a wide area network WAN a metropolitan area network MAN or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example computer system may communicate with a wireless PAN WPAN such as for example a BLUETOOTH WPAN a WI FI network a WI MAX network a cellular telephone network such as for example a Global System for Mobile Communications GSM network or other suitable wireless network or a combination of two or more of these. Computer system may include any suitable communication interface for any of these networks where appropriate. Communication interface may include one or more communication interfaces where appropriate. Although this disclosure describes and illustrates a particular communication interface this disclosure contemplates any suitable communication interface.

In various embodiments bus includes hardware software or both coupling components of computer system to each other. As an example and not by way of limitation bus may include an Accelerated Graphics Port AGP or other graphics bus an Enhanced Industry Standard Architecture EISA bus a front side bus FSB a HYPERTRANSPORT HT interconnect an Industry Standard Architecture ISA bus an INFINIBAND interconnect a low pin count LPC bus a memory bus a Micro Channel Architecture MCA bus a Peripheral Component Interconnect PCI bus a PCI Express PCI X bus a serial advanced technology attachment SATA bus a Video Electronics Standards Association local VLB bus or another suitable bus or a combination of two or more of these. Bus may include one or more buses where appropriate. Although this disclosure describes and illustrates a particular bus this disclosure contemplates any suitable bus or interconnect.

As referred to herein a computer readable storage medium encompasses one or more non transitory tangible computer readable storage media possessing structure s . As an example and not by way of limitation a computer readable storage medium may include a semiconductor based or other integrated circuit IC such as for example a field programmable gate array FPGA or an application specific IC ASIC a hard disk an HDD a hybrid hard drive HHD an optical disc an optical disc drive ODD a magneto optical disc a magneto optical drive a floppy disk a floppy disk drive FDD magnetic tape a holographic storage medium a solid state drive SSD a RAM drive a SECURE DIGITAL card a SECURE DIGITAL drive or another suitable computer readable storage medium or a combination of two or more of these where appropriate.

This disclosure contemplates one or more computer readable storage media implementing any suitable storage. In particular embodiments a computer readable storage medium implements one or more portions of processor such as for example one or more internal registers or caches one or more portions of memory one or more portions of storage or a combination of these where appropriate. In various embodiments a computer readable storage medium implements RAM or ROM. In various embodiments a computer readable storage medium implements volatile or persistent memory. In various embodiments one or more computer readable storage media embody software. Herein reference to software may encompass one or more applications bytecode one or more computer programs one or more executables one or more instructions logic machine code one or more scripts or source code and vice versa where appropriate. In various embodiments software includes one or more application programming interfaces APIs . This disclosure contemplates any suitable software written or otherwise expressed in any suitable programming language or combination of programming languages. In various embodiments software is expressed as source code or object code. In various embodiments software is expressed in a higher level programming language such as for example C Perl or a suitable extension thereof. In various embodiments software is expressed in a lower level programming language such as assembly language or machine code . In various embodiments software is expressed in JAVA. In various embodiments software is expressed in Hyper Text Markup Language HTML Extensible Markup Language XML or other suitable markup language.

While this invention has been described in terms of several embodiments it will be appreciated that those skilled in the art upon reading the preceding specifications and studying the drawings will realize various alterations additions permutations and equivalents thereof. Therefore it is intended that the present invention includes all such alterations additions permutations and equivalents as fall within the true spirit and scope of the invention.

