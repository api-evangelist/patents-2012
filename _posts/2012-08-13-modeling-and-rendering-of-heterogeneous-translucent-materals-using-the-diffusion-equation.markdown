---

title: Modeling and rendering of heterogeneous translucent materals using the diffusion equation
abstract: An exemplary method includes providing image data for an illuminated physical sample of a heterogeneous translucent material, determining one or more material properties of the material based in part on a diffusion equation where one of the material properties is a diffusion coefficient for diffusion of radiation in the material and where the determining includes a regularization term for the diffusion coefficient, mapping the one or more material properties to a virtual object volume, assigning virtual illumination conditions to the virtual object volume, and rendering the virtual object volume using the virtual illumination conditions as a boundary condition for a system of diffusion equations of the virtual object volume. Other methods, devices and systems are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08730240&OS=08730240&RS=08730240
owner: Microsoft Corporation
number: 08730240
owner_city: Redmond
owner_country: US
publication_date: 20120813
---
This patent application is a divisional application of co pending commonly owned U.S. patent application Ser. No. 12 072 925 filed on Feb. 29 2008 which application is incorporated herein by reference in its entirety.

Many materials in the real world exhibit a complex appearance that arises from subsurface scattering of light. For heterogeneous translucent objects the light transport within the material volume is determined by its geometry the optical properties of its constituent elements and the spatial distribution of these elements in the volume. Because of the complex effects of these various factors on subsurface scattering models of these materials have been challenging to acquire from real objects and to render in real time. Furthermore computational costs and or modeling deficiencies have made interactive editing of material properties a difficult problem. As described herein various exemplary systems methods etc. provide for modeling and or rendering of heterogeneous translucent material.

An exemplary method includes providing image data for an illuminated physical sample of a heterogeneous translucent material determining one or more material properties of the material based in part on a diffusion equation where one of the material properties is a diffusion coefficient for diffusion of radiation in the material and where the determining includes a regularization term for the diffusion coefficient mapping the one or more material properties to a virtual object volume assigning virtual illumination conditions to the virtual object volume and rendering the virtual object volume using the virtual illumination conditions as a boundary condition for a system of diffusion equations of the virtual object volume. Other methods devices and systems are also disclosed.

Various exemplary methods devices systems etc. described herein pertain to creating artificial visual objects and or scenes. An exemplary method includes acquiring data from an illuminated physical sample determining material properties of the physical sample based on the acquired data mapping the material properties to at least a portion of an object and rendering the object to provide for a visual display of the object where the object exhibits characteristics of the physical sample.

As described herein various exemplary techniques pertain to modeling and rendering of heterogeneous translucent materials that enable acquisition from measured samples interactive editing of material attributes and real time rendering. In various examples the materials are assumed to be optically dense such that multiple scattering can be approximated by a diffusion process described by the diffusion equation.

An exemplary process for modeling heterogeneous materials includes an algorithm for acquiring material properties from appearance measurements by solving an inverse diffusion problem. As such an inverse problem can be ill conditioned the process optionally incorporates a regularizer i.e. to handle ill conditioned situations an adjoint method to dramatically reduce computational cost and or a hierarchical graphics processor unit GPU implementation to reduce computational cost.

To display an object with known material properties an exemplary algorithm allows for rendering by solving the diffusion equation with a boundary condition defined by a given illumination environment. In various examples the exemplary algorithm is centered around object representation by a polygrid a grid with regular connectivity and an irregular shape which facilitates the solution of the diffusion equation in arbitrary volumes. Because of the regular connectivity the exemplary rendering algorithm can be implemented on a GPU for real time performance. Various examples demonstrate exemplary methods for capturing materials from physical samples and performing real time rendering and editing with these materials.

As mentioned various techniques pertain to modeling and rendering of heterogeneous translucent materials. Examples demonstrate acquisition of data from physical samples interactive editing of material attributes and real time rendering. For rendering material can be represented as a discretized volume e.g. volume elements or voxels in which spatially variant absorption and diffusion coefficients are associated with each voxel. In various examples multiple scattering is accounted for where the material is assumed to be optically dense such that subsurface scattering becomes isotropic and can be approximated by a diffusion process.

For modeling heterogeneous materials an exemplary algorithm allows for recovering a material model from appearance measurements by solving an inverse diffusion problem. For a given distribution of spatially variant absorption and diffusion coefficients the corresponding diffusion process that generates the material appearance can be expressed as a partial differential equation defined over the volumetric elements with a boundary condition given by a lighting environment.

A process of acquiring a volumetric model from a material sample involves an inverse diffusion problem in which a search for a distribution of spatially variant absorption and diffusion coefficients such that a corresponding diffusion process generates the material appearance that is consistent with the measured surface appearance in captured images. Through an optimization or solution the process aims to generate the material appearance that is most consistent.

As described herein in various examples images record an actual material sample where a solution to the inverse diffusion problem is assumed with a high degree of certainty to exist. However such inverse problems are known to be ill posed since a range of different volumetric models may have indistinguishable surface appearances. In other words different interiors can produce visually indistinguishable surface appearance for an object. Consequently the diffusion equations and image measurements define for a material sample a group of solutions. Since all solutions correspond to the same visual appearance any solution from this group provides a valid volumetric appearance model of the given material.

Finding a solution to the inverse diffusion problem is challenging due to the nature of the inverse problem and the large number of variables involved. The inverse diffusion problem is usually solved with an iterative optimization procedure in which each iteration requires an expensive gradient evaluation. For a volume with elements on an ngrid this gradient evaluation involves n M light diffusion computations where M is the number of image measurements. The inverse diffusion problem is also ill conditioned numerically which presents convergence problems for the iterative solver.

As described herein to ensure stable convergence an exemplary method incorporates a regularizer on the diffusion coefficients and includes an effective initialization that assigns uniform diffusion coefficients among the voxels. In various examples an adjoint method widely used in optimal control for gradient computation is used to dramatically reduce the cost of the gradient evaluation down to 2M light diffusion computations. With such schemes and a GPU implementation of the diffusion computation various examples demonstrate that finding a solution of the inverse diffusion problem becomes feasible for volumes of moderate size.

Also described herein is an exemplary algorithm for rendering a volumetric model with known material properties that includes solving a diffusion equation whose boundary condition is defined by some stated illumination conditions which may be varied e.g. spatially over time etc. .

With respect to solving a formulated set of equations e.g. diffusion equation and associated boundary condition or conditions for 3D volumes of arbitrary shape an exemplary technique includes a polygrid and an finite difference method FDM . Such an algorithm is centered around the polygrid representation which facilitates the solution of the light diffusion equation in arbitrary volumes. A polygrid is a grid with regular connectivity and an irregular shape for a close geometric fit without fine sampling. Regular connectivity allows for development of a hierarchical GPU implementation of an exemplary rendering algorithm for real time performance.

Construction of a polygrid on an arbitrary 3D object is described below along with a technique for evaluating diffusion equations defined among irregular intervals of polygrid nodes. With such a technique models of various materials can be readily captured and interactively transformed with adjustments of scattering properties. An exemplary system allows for flexible use of real appearance data provides designers a valuable tool for creating realistic objects with the visual features of heterogeneous translucent materials. As described herein an exemplary system supports real time rendering and editing of such volumes.

According to the method a model acquisition step forms a model of the material sample based at least in part on the captured data . In the example of the model acquisition step determines volumetric material properties e.g. the properties and .

Once one or more materials properties are known a material mapping step can map the material to a virtual object as indicated by the band on the virtual rabbit object . In the example of the band may be a volumetric slice an annulus etc. in the virtual object . In other words the band can have any dimension or thickness in the virtual object . Indeed the band may be an interior band that resides below the surface of the virtual object .

After mapping a rendering step renders the material per the one or more properties to generate a visual representation of the virtual object that includes a visual representation of the material . The rendering step normally relies on illumination. The illumination may be visible or other radiation that can permeate the material. The illumination may be from a single source multiple sources multiple wavelengths etc.

In the example of the GUI includes various commands in a command field a drawing field a command buttons field a geometric parameters field e.g. with slider controls a translucency control e.g. with a slider control a paint fill material field and a stamp pattern field .

A user can navigate a cursor in the drawing field . For example a user can position the cursor on the virtual rabbit object to paint a material using a stamp pattern where the stamp pattern maps certain material properties to the virtual rabbit object . As indicated a user may change the stamp pattern using controls in the stamp pattern field and select a material using controls in the paint fill material field . The geometric parameters field can be used to control strength of the mapped material size of the mapped material and depth of the mapped material.

As the object and or scene that appears in the drawing field is virtual parameters such as translucency can be adjusted e.g. per the translucency control . For example white quartz from a specific site in Nevada may be selected as the material. However once mapped to the virtual object the user may desire a more translucent version of this white quartz. Such a desire may be met using the control of the translucency field .

A more detailed description of various exemplary techniques follows along with some examples. shows an exemplary technique that includes a physical model for diffusion of light in a material a forward problem for a diffusion process and an inverse problem for a diffusion process for determining one or more material properties .

As indicated in the physical model subsurface scattering of light in a heterogeneous material can be quite complex and stochastic and determined by object geometry material properties and distribution of the light in the object volume. In the forward problem let the object interior be volume V and the object surface be A. The outgoing radiance L x at a surface point xin direction may be computed by integrating the incoming radiance L x from all incident directions and points xon surface A 

where n is the surface normal at xand S x x is the BSSRDF. The outgoing radiance can be divided into single and multiple scattering components .

The single scattering component L x accounts for light that interacts exactly once with the medium before exiting the volume and may be evaluated by integrating the incident radiance along the refracted outgoing ray. An exemplary technique focuses on multiple scattering and uses a highly simplified single scattering term that assumes scattering to be isotropic and occurring only at surface points x 

where is the scattering coefficient and F Ft x Ft x is the product of incoming and outgoing Fresnel transmission terms with being the refractive index. The multiple scattering component L x consists of light that interacts multiple times within the object volume. For highly scattering non emissive materials multiple scattering may be approximated by a diffusion process described by the following equation 0 with boundary condition defined on the object surface A 

is the diffusion coefficient x is the absorption coefficient and x 1 g is the reduced scattering coefficient with g being the mean cosine of the scattering angle. The exemplary technique can define C 1 F 1 F where Fis the diffuse Fresnel reflectance. The diffuse incoming light at a surface point x is given by q x . With the diffusion approximation the multiple scattering component of the outgoing radiance is calculated as 

As described herein an exemplary method performs modeling and rendering multiple scattering in a heterogeneous material using the diffusion approximation. For rendering an object with known x and x throughout the object volume V we solve the diffusion problem with a given illumination condition q x on the object surface A per the forward problem of . Once the solution x is found the multiple scattering component of the outgoing radiance can be evaluated using the equation for L noting that the diffusion equation assumes scattering to be frequent enough to be considered isotropic and independent of the phase function.

In acquiring the material properties from measured appearance computation of the absorption coefficients x and diffusion coefficients x occurs based on measured outgoing radiances 0 1 . . . from the object surface due to multiple scattering under M different illumination conditions 0 1 . . . on the object surface. For this purpose an inverse diffusion problem is solved per block of to find x and x such that the corresponding diffusion problem produces the outgoing radiance L x that is most consistent to the measured outgoing radiance L x under the same illumination conditions L x . The inverse diffusion problem is thus formulated as finding the values of x and x throughout the volume that minimize the objective function 

To obtain multiple scattering components from image measurements a cross polarization may be employed. An exemplary method utilizes an image acquisition scheme described below that minimizes the presence of single scattering and surface reflections in the image data.

As mentioned with respect to the capture block of to acquire the volumetric material model of a real object an exemplary method obtains images of the object under different illumination conditions and then solves the inverse problem of light diffusion on the multiple scattering components. In solving the inverse diffusion problem a search is performed for the volumetric model x x whose forward diffusion solution is most consistent with the acquired images.

In various examples data capture was performed using a Canon 30D digital camera with a 17 45 mm lens to record images of a material sample that is illuminated by an Optoma DLP projector with a 4500 1 contrast ratio. In these trials the material samples were all block shaped and represented as a regular grid with n m l sample points n m l on the grid nodes. Depending on sample thickness two setups were used. In both setups the sample was positioned so that one of the n m faces was perpendicular to the optical axis of the projector.

For thin material samples n m l the camera was placed facing the sample from the opposite side such that the sample is imaged with back lighting. For thick material samples with little transmission of light through the volume the camera was positioned beside the projector. For sake of explanation the side of the sample facing the camera is referred to as the front face.

The camera and projector were calibrated prior to image acquisition. Geometric calibration of both the camera and projector was accomplished with a technique where the projector projected a chessboard pattern onto different planes. The white balance of the camera was calibrated with respect to the projector based on the projection of a white image onto a Macbeth Color Checker chart with known albedos. The color chart was also used in measuring the black level of the projector.

To avoid interference effects from the projector s color wheel exposure times of at least 1 30 second were used. In illuminating the sample the face that received direct lighting was subdivided into 4 4 regions and light was separately projected onto each region while capturing an image sequence of the complete sample with a fixed aperture and variable exposure times ranging from 1 30 to 8 seconds. Construction of an HDR image from the image sequence for each illumination condition was performed. Vignetting effects from the projector were minimized by illuminating the sample using only the center of the projector images.

With this capture process images of multiple scattering data were obtained. In a thin sample setup the back lighting was assumed to scatter multiple times before exiting from the front face such that captured images contain only multiple scattering. In the setup for thick samples image data were for only those surface points that were not directly illuminated by the projector as the appearance of these points is considered to result only from multiple scattering. Since the projector and camera were aligned perpendicularly to the material sample in both configurations the Fresnel transmittance effects on the measured multiple scattering were disregarded and the dependence on wo in the inverse diffusion problem equation was dropped. For various examples the following were set C 2.1489 with h 1.3.

To capture the approximate single scattering term in the equation for L the front lighting setup was used and a technique that records one image of the sample under uniform lighting and the single scattering term was obtained by subtracting the multiple scattering contribution.

In model acquisition per step of the method of for each captured image and corresponding lighting condition a data mapping was performed to map onto each grid node on the front and back faces its incoming light intensity and measured outgoing radiance. The material model was then acquired by solving for the scattering parameters and of each node in the volume that would result in image appearances most consistent with the measured data. With the M measured images of the material sample the method aims to minimize the following objective function 

measures the consistency between the measured outgoing radiance L x from all frontal surface points x and the outgoing radiance L x that is computed from the estimated scattering parameters with the illumination condition of image m. Note that in fthe dependence on is dropped because of the selected imaging configuration in the trials. The vectors right arrow over and right arrow over represent the set of diffusion and absorption coefficients defined over all the grid nodes. Since model acquisition is ill conditioned with respect to an exemplary method adds a regularization term x to the objective function where is set to 1ein for the trials.

To initialize the scattering parameters in the optimization the volumetric material model was solved under the assumption that it was homogeneous i.e. all the grid nodes have the same material properties. Since only two unknowns exist in this case they can be quickly computed using the conjugate gradient procedure with user specified initial values.

A step in conjugate gradient optimization is the computation of the fgradient relative to the unknown and values at each grid node. Since the diffusion equation has no analytic solution gradients were computed numerically. A straightforward approach for gradient computation is to perturb each of the variables and obtain the resultant change in objective function value. One forward diffusion simulation would then be necessary to compute each gradient. Although this method is feasible for a system with few parameters e.g. a homogeneous volume it is impractical for arbitrary heterogeneous volumes which have a large number of unknowns. Specifically model acquisition for an n m l grid with M measurements would require 2 n m l M forward diffusion simulations for each of the iterations which can be a signification expense.

To significantly expedite gradient computation an exemplary method uses the adjoint method. To use the adjoint method to provide a solution first define the adjoint equation of the original diffusion equation as 0 with a boundary condition on the surface A defined as 

where L x L x is the difference between the measured outgoing radiance L x from all frontal sample points x and the outgoing radiance L x that is computed from the diffusion equation with the illumination condition qof image m. Given the gradient of fwith respect to and at each grid point is computed by

In contrast to the original diffusion equation the adjoint method utilizes virtual illumination to define the boundary condition. This virtual illumination 2C L x L x which may be negative and are computed from the diffusion equation using the actual illumination condition. With the virtual illumination an exemplary method solves the adjoint equation for and then determines the gradient of frelative to and using the foregoing equations. Using the adjoint method only 2M forward diffusion simulations are needed for gradient computation.

Various exemplary methods described herein may be implemented using one or more graphics processing units GPUs . A GPU is typically used for computing 3D functions such as lighting effects object transformations and 3D motion.

Referring to the model acquisition step of the method of and the forward problem of forward diffusion simulations can be used not only in gradient computation but also for evaluating the objective function in the golden section search which is presented as step of the technique of . An exemplary approach to solving the diffusion equation on a 3D regular grid includes discretizing the diffusion equation over the grid nodes and numerically solving the resulting system of equations using a multigrid finite difference method FDM scheme.

Such a FDM technique involves considerable computation and can be the bottleneck in model acquisition. As described herein for efficient processing an exemplary GPU based multi resolution scheme that simulates forward diffusion in the pixel shader on grid values of and q packed into separate 2D textures. This GPU based scheme can be regarded as a regular grid version of the rendering algorithm discussed further below.

In solving the diffusion equation on a GPU configured for 3D computations relevant data is uploaded from main memory to texture memory and then the radiant fluence results are output from a frame buffer back to main memory. The remaining optimization computations are all executed on a general CPU. Despite some overhead for data transfer an appreciable overall reduction in computation costs is obtained through GPU acceleration.

In theory the diffuse bidirectional surface scattering reflection distribution function BSSRDF should be densely sampled to ensure that the acquired material volume generates accurate surface appearances for arbitrary illumination conditions. However because of the redundancy in BSSRDF data various trials demonstrate that models acquired from sparsely sampled images provide acceptable results in practice noting that each image here corresponds to a 2D slice of a 4D BSSRDF.

To examine the relationship between the number of measurements and model quality an exemplary model acquisition algorithm was applied on a synthetic volume which was modeled using a 72 72 10 grid. The front surface was divided into n n regions that were each separately illuminated. For different n images were generated using the diffusion equation and then these images were used as input to the algorithm. Normalized errors were then computed as 

where Ris the diffuse BSSRDF computed from the original volume and R is that computed from the acquired material volume. The trials were performed with both front lighting and back lighting setups. In an error analysis for n 1 2 . . . 8 the analysis indicated that for 16 or more images the error is comparable to that reported for the factorized BSSRDF representation in a prior study. In various trials 16 images were used under different illumination settings for model acquisition which provided an acceptable level of rendering quality.

As explained with respect to the steps and of after acquiring a material model from a real sample of a material which may be a composite material per the step of a virtual volume of arbitrary shape can be formed with this material using material mapping techniques. A mapping approach map the material properties into a shell layer at the object surface and construct the inner core volume by synthesizing a user specified material texture or interpolating from the inner boundary of the shell layer using mean value coordinates.

In a computation block computation of the incoming radiance on the object surface occurs e.g. based on shadow map visibility for directional or point lighting or from precomputed radiance transfer techniques for environment lighting . As already explained a 3D diffusion equation a partial differential equation for a 3D space is used to describe light diffusion phenomenon in a volume given an appropriate boundary condition. In the method of the boundary condition on the surface of the object volume is computed as the incoming radiance.

In a rendering block rendering of multiple scattering effects occurs by simulating light diffusion inside the object volume with the incident radiance on the surface as the boundary condition. In another computation block computation of the single scattering term and surface reflectance from the incoming illumination occurs. To render the final result another rendering block obtains the final rendering result by adding the scattering and surface reflectance components.

To efficiently solve for light diffusion using a GPU the aforementioned FDM scheme is extended on regular volumetric grids to handle a polygrid defined in or as the object volume. An exemplary polygrid is a grid with regular 6 connections among evenly distributed nodes inside the volume and that has boundary nodes that are aligned with the object surface and where each is connected to one interior node along the inward normal direction. With the polygrid representation of an object volume it is possible to discretize the light diffusion equation and its boundary condition into a system of linear equations 

where vdenotes one of six nodes directly connected to interior node vwith a weight wfor the Laplacian operator. The parameter drepresents the distance between a boundary node v and the closest interior node v along the inward normal direction and q v denotes the incoming radiance at surface node v .

Discussed below are techniques to construct a polygrid of an object volume and to solve the diffusion equation e.g. using a GPU . An exemplary hierarchical scheme is also presented for accelerating GPU evaluation of light diffusion on a polygrid.

In a generating step within each of the cubes regular grids of equal resolution are formed and the grids are connected between adjacent cubes. As indicated in the grid includes boundary nodes and interior nodes. Interior nodes are directly linked to boundary nodes on the edges or corners of a cube and have connectivity to multiple boundary nodes which may lead to artifacts in the light diffusion computation. To address this artifact problem a modifying step modifies certain nodes and links. As shown certain nodes are removed and links adjusted to obtain single connections to boundary nodes.

With respect to corners shows a corner scheme and a corner scheme . These schemes were used to examine axis aligned 2D slices of the grid. An exemplary method for a polygrid can utilize one or more different grid adjustment schemes for example depending on the grid convexity in a slice. By applying the schemes and one arrives at a polygrid defined in the polycube.

To proceed a projecting step determines a projection of the polycube surface onto the object surface using a PolyCubeMap or other mesh cross parameterization method. A mapping step relies on the projecting to maps the polygrid to the object volume. The mapping step maps the boundary nodes of the polygrid to the object surface which may be adjusted to obtain an even distribution.

After the mapping step a computing step acts such that the interior nodes directly connected to the boundary nodes are placed within the object volume at a distance d along the inward normal directions where d is appropriately set e.g. one tenth the average distance between connected boundary nodes on the object surface . Close placement of these nodes to the boundary nodes is intended for accurate handling of the boundary condition. In other words the boundary condition determines the volumetric solution hence the polygrid should be appropriately spaced at the interior adjacent the boundary of the object to accurately account for the effect of the boundary condition on the entire volumetric solution. Further gradients can often be the largest at the boundary. For other interior nodes i.e. the remaining interior nodes these are then positioned within the volume in an appropriate manner. In the example of the manner for positioning the remaining interior nodes minimizes the variance of distances between connected nodes min Var 

where Var denotes the variance of a set of scalars vis the 3D position of node i and ji indicates that node j is connected to node i. In principle a conformal mapping can be used to preserve the orthogonality of the original grid connections and minimize distortion. However various trials demonstrate that the aforementioned variance minimization scheme yields acceptable solutions.

The technique of maintains regular connectivity of nodes and produces locally uniform distributions of interior grid nodes in the object volume. When applied to a volume the interior grid nodes of a polygrid are 6 connected and each boundary node is connected to exactly one interior node. In various trials connectivity between the boundary grid nodes is not used in rendering and can be ignored in the diffusion computation.

As mentioned with the constructed polygrid a system of linear equations for light diffusion can be generated. The material properties for each grid node are sampled from the object volume and the incoming illumination is computed for boundary nodes. Although a general purpose GPU based linear system solver could be used for computation various trials include use of an exemplary GPU based that is efficient GPU and specific to diffusion computation on a polygrid.

In this exemplary method the polygrid material parameters are packed into a set of 2D textures for computation on a GPU. For efficient rendering the textures are packed such that the connected neighbors of each node are easily accessible. Towards this end each texture is organized according to the positions of the polygrid nodes within the original polycube. The cubes in the polycube are transferred in scanline order and the grid of each cube is flattened. The grid in each cube is divided into 2D x y slices which are each treated as a texture block and ordered in the texture by increasing z value. In packing the texture empty positions of grid nodes are retained that were previously removed so that the cubes have slices of equal size. Two 2D textures Tand T are created for the corresponding scattering parameters and for the iterative computation two swap radiance buffers IA and IB are maintained that are organized in the same manner as Tand T. In addition precompute of the weights for the Laplacian operator occurs then this data is similarly packed into two textures Tand T. The incoming radiance is also packed into a 2D texture Taccording to access order as described further below.

After texture packing the diffusion equations are solved on the polygrid using a relaxation scheme. Starting from the initial radiant fluence values f the scheme iteratively update the radiant fluence values in the two radiance buffers until convergence. With the radiant fluence at each node corresponding to one pixel in the radiance buffer this computation can be executed in the pixel shader with parameters accessed from the textures. To reduce texture fetches in the pixel shader f is stored in the radiance buffer. In each step the radiant fluence values are updated as follows 

where right hand side operators of the form f involve a texture access and the radiance buffer for f is used as the texture while the other radiance buffer is used as rendering target for f .

In the foregoing exemplary scheme there exist three types of nodes pixels in the radiance buffer each with different texture access patterns for reaching connected nodes. These nodes pixels are referred to as type A type B and type C. Each type of node is rendered using a different geometric primitive. For a node that lies in the interior of a texture block type A node four of its connected neighbors in the polygrid are also adjacent neighbors in the 2D texture while the other two neighbors can be found with the same offset value in other texture blocks. The values of these nodes are updated by rendering a quadrilateral with the texture offsets of the two non adjacent neighbors as vertex attributes. After rasterization this offset information can be interpolated from the vertices to each pixel in the quad. In a similar manner nodes on each texture block edge type B nodes are rendered with a line where three neighbors are adjacent in the texture and the texture offsets of the other three are stored as line vertex attributes. The nodes of each texture block corner type C nodes are rendered with points with the texture offsets of all six neighbors stored as vertex attributes.

Slices that contain removed nodes can also be rendered using these three primitives types A B and C . All of these geometric primitives and their vertex attributes can be precomputed and loaded into graphics memory before rendering. Since the surface boundary nodes and the interior nodes are processed differently their corresponding geometric primitives can be rendered in two separate passes with different pixel shaders. After completing such a computation the output radiance can be calculated on the surface by updating the boundary nodes in the radiance buffer as 2 These boundary node values are then used as a texture for surface vertices in the final pass.

With the foregoing exemplary packing and rendering scheme the radiant fluence values are updated with 10 texture fetches for interior nodes and 5 texture fetches for surface nodes. Such a scheme avoids extra texture storage for node connectivity information and dependent texture accesses in rendering. Alternative schemes for packing and rendering are possible nevertheless the foregoing exemplary scheme obtains good performance.

For greater efficiency in computing light diffusion an exemplary hierarchical scheme is employed to accelerate rendering with a polygrid. In this hierarchical scheme a multiresolution polygrid in the object volume is constructed. Starting from the original polygrid the positions and material properties of nodes at successively coarser levels are determined by averaging the positions and material properties of its eight children at the next finer level. For nodes whose children contain removed nodes the result is normalize by the number of existing children. Before rendering the material properties at each resolution are packed and texture pyramids generated for T T Tand T.

Pyramids need not be generated for the radiance buffers IA and IB which can simply be reused for computation at each level. During rendering a process first solves the diffusion equations at the coarsest grid level and then uses the computed radiant fluence at each node as initializations for its children nodes at the next finer level. This process iterates until a solution at the original polygrid resolution is obtained.

The hierarchical algorithm can be accelerated by employing an adaptive scheme in which light diffusion is computed to different resolutions at different depths in the volume. Since material variations deeper inside the object volume have more subtle effects on surface appearance it is sufficient to approximate light diffusion at deeper nodes with coarser resolution solutions.

According to such a coarser resolution approach to deeper nodes after obtaining the solution at a coarse resolution and copying it to a finer resolution the radiant fluence values at nodes below a certain depth are fixed while the nodes closer to boundary are updated. In such an implementation of this adaptive scheme the computed resolution at different depth levels can be given by a user. Texture blocks whose nodes are not used in computation at a given level can be removed to save on texture storage.

Various examples are implemented without using the V cycle multigrid algorithm to speed up light diffusion computation as a cost exists for incorporating the multigrid algorithm into the foregoing adaptive scheme. Also V cycle multi grid algorithms require extra texture storage for residual and temporary radiant fluence values in each level. If all grid nodes are used in light diffusion the foregoing exemplary technique may be considered as a simplified N cycle multigrid scheme without V cycles for each resolution.

A favorable property of the light diffusion algorithm is that the coherence between frames can be exploited to facilitate rendering. For applications in which the lighting or material changes gradually the rendering result of the last frame provides an excellent initialization for the current frame. With good initial values the number of iteration steps can be significantly reduced.

An exemplary hierarchical method for rendering a virtual object volume includes constructing a multiresolution polygrid in the virtual object volume generating texture pyramids for material properties of the virtual object volume and rendering the virtual object volume by solving diffusion equations at a coarse grid level and computing radiant fluence at a finer grid level. Such a method my include accelerating the rendering using an adaptive scheme that computes light diffusion at different resolutions at different depths in the virtual object volume.

An exemplary real time rendering system allows for an acquired volumetric material model to be interactively edited with real time feedback on the modified appearance. In a trial that illustrates this capability the exemplary GUI of was used. In addition to painting new values for x and x various ways to modify existing x and x can be supported. The user can directly adjust x and x by multiplying them with or adding them to user supplied constants strength control of the field . Alternatively the user can modulate the and values within a pattern mask using a texture the paint fill field and the stamp pattern field . With volumetric representation users can also modify a material at specific depth levels depth control of the field .

In an exemplary system all editing operations can be executed as pixel operations on a GPU. Such a system can maintain extra buffers T and T of the and textures as rendering targets for editing. In each frame T and T can be modified by user specified operations and then swapped to Tand Tfor rendering. To support editing operations on local regions positions of grid nodes can be stored in a texture T. Then when a user selects a region on the screen for editing computation of the screen projection of each grid node based on its position in the editing shader can occur and execution of the editing operations only for the nodes within the user specified local region can occur.

In the foregoing example of material editing the adaptive scheme is not implemented instead the illustrative trial takes advantage of the coherence between frames to reduce rendering computation which allows for more complex material editing operations to be executed on a GPU.

As mentioned various trials were performed to illustrate various exemplary techniques and their results. An exemplary trial implemented material acquisition and rendering system on a PC configured with an INTEL Core2Duo 2.13 GHZ CPU 4 GB memory and a NVIDIA Geforce 8800GTX graphics card with 768 MB graphics memory. The exemplary GPU based light diffusion and rendering algorithm was implemented in the OpenGL shading language. For the GPU based light diffusion computation used in model acquisition all parameters and computation results were represented as 32 bit floating point values for high precision. For light diffusion computations on the polygrid each channel of and was quantized into 8 bits and stored together in 24 bit textures. The trials used 16 bit floatingpoint values in rendering computations which provided sufficient precision in appearance.

For various samples the grid resolutions lighting configurations and computation times are listed in Table 1 below. With GPU acceleration the reconstruction algorithm gains a fifty fold increase in speed over a CPU based implementation on the same platform.

Table 2 below lists the polygrid resolution at the finest level the texture size and rendering performance for various trial examples. In Table 2 for the rendering times tindicates the time for the ith rendering pass. The final speed is measured both without frame coherence and with frame coherence in parentheses .

The polygrid resolution is the product of the number of cubes in the polycube and the grid resolution in each cube. The texture size includes all textures used for light diffusion computation. In Table 2 the rendering times are broken down into the three passes for incident light computation t e.g. the step of the method light diffusion t e.g. the step of the method and final rendering t e.g. steps and of the method .

For the overall rendering speed the first number reports the frame rate without frame coherence i.e. radiances initialized to zero while the second number in parentheses gives the speed with frame coherence. In rendering ambient occlusion was used to determine visibility for environment lighting and the shadow buffer was used for visibility of local lighting. A three level polygrid with the adaptive scheme is used in the measurements for Table 2.

With respect to convergence speed of the different rendering methods the error of a result L is computed as 

where Lis the converged result precomputed without hierarchical and adaptive acceleration. A multi resolution polygrid with three levels was used in trial hierarchical schemes. The polycube for the aforementioned hole model of Table 1 included 36 cubes where the grid resolution in each cube at the finest level was 12 12 12. For the hierarchical method without the adaptive scheme all grid nodes were used in the light diffusion computation. In the adaptive scheme the depth of nodes that were involved in computing each resolution were manually specified such that the final error was less than 0.5 . Results indicate that the hierarchical scheme can substantially improve light diffusion performance on a polygrid. Specifically hierarchical and adaptive schemes had error less than 0.5 after processing of about 90 000 000 nodes or less whereas for a single resolution scheme error approached 0.5 only after about 450 000 000 nodes. More specifically with the adaptive scheme the computation is further accelerated a two fold speedup in this case to generate a result with an error below a user specified threshold.

In a bust model whose volumetric material properties were acquired from a marble sample and a hole model e.g. an object with a hole generated with acquired wax material complex surface appearances from subsurface scattering and volumetric material variations were well preserved using exemplary techniques for volumetric appearance modeling.

In a bird model is rendered with an artificial stone material. Results are shown from different viewing directions and . The heterogeneity beneath the surface is well handled in the modeling and rendering technique. In the view white ovals indicate portions of the model where thickness plays a role in translucency. At both the end of the bird tail and top of the bird head the thinner portions of the bird allow more light to pass through.

In various other trials local scattering properties of the material and their distributions were modified. With the volumetric material model editing of physical attributes can be done in an intuitive manner see e.g. the GUI of 

Described herein are various exemplary techniques for diffusion equation modeling and rendering of heterogeneous translucent materials. An exemplary scheme is presented for acquiring volumetric appearance models from real material samples and for rendering the appearance effects of multiple scattering in real time. With such a scheme a user can easily edit translucent materials and their volumetric variations with real time feedback. Images show how such an approach effectively acquires a detailed appearance model of subsurface scattering.

In rendering an exemplary polygrid representation leads to an approximate FDM solution for arbitrary shaped object volumes. With this approximation realistic rendering results can be obtained and with real time performance.

System memory typically includes an operating system one or more program modules and may include program data . The operating system include a component based framework that supports components including properties and events objects inheritance polymorphism reflection and provides an object oriented component based application programming interface API such as that of the .NET Framework manufactured by Microsoft Corporation Redmond Wash. The device is of a very basic configuration demarcated by a dashed line . Again a terminal may have fewer components but will interact with a computing device that may have such a basic configuration.

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. These devices are well know in the art and need not be discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other computing devices such as over a network. Communication connections are one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data forms. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

