---

title: Reducing input processing latency for remotely executed applications
abstract: Disclosed are various embodiments for reducing input processing latency for remotely executed applications. An application is executed in a hosted environment, and a video signal generated by the application is encoded into a media stream. The media stream is sent to a client by way of a network. Unprocessed user input data for the application is obtained from the client computing device by way of the network. The unprocessed user input data is processed at a first processing rate that is above a second processing rate associated with a normal processing of the unprocessed user input data in the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09111080&OS=09111080&RS=09111080
owner: Amazon Technologies, Inc.
number: 09111080
owner_city: Seattle
owner_country: US
publication_date: 20120229
---
Many forms of input devices exist to facilitate user input for an application that has a user interface. Various types of input devices may include joysticks keyboards mice pointing sticks touch pads touch screens light guns game controllers microphones and so on. Such devices are typically directly connected to the computing device on which the application is executed either through a wired connection or a wireless connection.

The present disclosure relates to reducing input processing latency in remotely executed applications. Mobile devices such as smartphones tablet computing devices electronic book readers and so on often employ touch screens as a primary input device for interacting with applications. Although a user may in some cases simply tap the screen to select a button or another control other cases of touch screen input may be significantly more complex. As a non limiting example a user may swipe a finger across the screen to indicate a particular action or command. Such actions may be referred to as gestures. The location velocity and direction of the swipe may be significant in distinguishing the intended gesture from non intended gestures. User input from accelerometers and or other input devices may also be used to define gestures.

Gesture identification may employ significant processing resources in a mobile device and may introduce latency. This latency may diminish the user experience particularly when interactive applications are executed remotely over a network. Although remote execution offers many advantages additional latency results from data transmission to the remote server.

Various embodiments of the present disclosure compensate for network caused latency with remote execution by moving the user input processing and gesture recognition from the client side to the server side. Server side input processing may leverage more powerful computing resources in comparison to the mobile device resulting in reduced input processing latency. In addition the server side input processing may employ techniques such as forward prediction and interpolation in order to overcome latency resulting from lost or delayed user input data. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes one or more computing devices in data communication with one or more clients by way of a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing device may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of computing devices together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience the computing device is referred to herein in the singular. Even though the computing device is referred to in the singular it is understood that a plurality of computing devices may be employed in the various arrangements as described above.

Various applications and or other functionality may be executed in the computing device according to various embodiments. Also various data is stored in a data store that is accessible to the computing device . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing device for example include a server application an input processing service a plurality of wrappers . . . N a plurality of applications . . . N a plurality of media encoders . . . N and other applications services processes systems engines or functionality not discussed in detail herein. The server application may correspond to a game server application or another type of application session server. The server application is executed to launch applications which are executed within the wrappers . The server application is also executed to obtain application input data from the clients and provide the application input data to the respective wrapper .

The server application is also executed to send application output data that is captured from the application to the clients . The server application may communicate with the client over various protocols such as for example hypertext transfer protocol HTTP simple object access protocol SOAP representational state transfer REST real time transport protocol RTP real time streaming protocol RTSP real time messaging protocol RTMP user datagram protocol UDP transmission control protocol TCP and or other protocols for communicating data over the network . The server application may be configured to maintain state information and input queues associated with the executing applications .

The input processing service is executed in conjunction with the server application to process the application input data obtained from the client . Such processing may involve performing gesture recognition on raw gesture data captured for example by a touch screen of the client . The raw gesture data may also include user input data captured from other input devices of the client . The client may be configured to perform this processing in the normal case in which an application is locally executed by the client .

In various scenarios the processing may include applying a high pass filter applying a low pass filter performing an interpolation and or performing other signal processing techniques. Further the input processing service may perform forward prediction to estimate missing or delayed user input data. The input processing service may also correct or adjust previous predictions in response to additional user input data being obtained. Once the user input data is processed e.g. to identify a gesture the processed result is provided to the respective application for example by way of an application programming interface API or other interface.

The application may correspond for example to a game or other types of applications. As non limiting examples the application may correspond to a first person shooter game an action game an adventure game a party game a role playing game a simulation game a strategy game a vehicle simulation game and or other types of games. The application may be a game originally designed for execution in a general purpose computing device or in a specialized video game device such as for example a video game console a handheld game device an arcade game device etc. The applications may also correspond to mobile phone applications computer aided design CAD applications computer aided manufacturing CAM applications photo manipulation applications video editing applications office productivity applications operating systems and associated applications emulators for operating systems architectures and capabilities not present on a consumer device and other applications and combinations of applications.

The application may expect to access one or more resources of the device on which it is executed. Such resources may correspond to display devices input devices or other devices. In some cases the application may request exclusive access to one or more of the resources whereby no other applications may have access to the particular resources.

The wrapper corresponds to an application that provides a hosted environment for execution of the application . In various embodiments the wrapper may be configured to provide a virtualized environment for the application by virtualizing one or more of the resources that the application expects to access. Such resources may include a keyboard a mouse a joystick a video device a sound device etc. In this way the wrapper is able to provide input commands to the application as if the wrapper emulates a keyboard a mouse an accelerometer a touch screen or another type of input device.

Further the wrapper is able to obtain a video signal generated by the application as if the wrapper emulates a display device an audio device or another type of output device. The wrapper is able to encode the video signal and or audio signal by way of a media encoder into a media stream. To this end the wrapper may include various types of media encoders such as for example Moving Pictures Experts Group MPEG encoders H.264 encoders Flash media encoders etc. Such media encoders may be selected according to factors such as for example data reduction encoding quality latency etc. In some embodiments the wrappers may communicate directly with the clients to obtain the application input data and to serve up the application output data .

Different types of wrappers may be provided for different applications or classes of applications . As non limiting examples different wrappers may be provided for applications using different application programming interfaces APIs such as OpenGL DirectX the Graphics Device Interface GDI and so on. Where the application is configured for execution in a specialized video game device or another type of computing device the wrapper may include an emulation application that emulates the device. In some embodiments the output of the application may be captured by the wrapper at a device level. For example the application may be executed in a physical game console and the video output may be captured by way of a video graphics array VGA connection a high definition multimedia interface HDMI connection a component video connection a national television system committee NTSC television connection and or other connections.

The state information that is maintained by the server application includes various data relating to application sessions that are currently active. For example the state information may track the users that are currently participating in the application session status information associated with the users security permissions associated with the application session e.g. who can or cannot join and so on. In some embodiments some or all of the state information may be discarded when an application session ends. The optional input queues collect input data or commands from the application input data for a given application . The input data may be reordered to a correct sequence and delays may be inserted between commands to ensure that they are interpreted correctly when presented to the corresponding application . In some embodiments the input queues may be absent in order to reduce latency.

The data stored in the data store includes for example applications media encoders wrappers saved state data user data input processing rules device interfaces and potentially other data. The applications correspond to a library of different applications that are available to be launched as applications . The applications may correspond to executable code within the computing device . Alternatively the applications may correspond to code that is executable within another type of device but is not executable within the computing device . Such applications may be referred to as binaries read only memory images ROMs and other terms. A particular application may be executed as multiple instances of the applications for multiple application sessions.

The media encoders correspond to the various types of media encoders that may be employed in the computing device . Some media encoders may correspond to specific formats such as for example H.264 MPEG 4 MPEG 2 and or other formats. The wrappers correspond to the executable code that implements the various types of wrappers . The wrappers are executable in the computing device and may be executed as multiple instances of the wrappers for multiple application sessions.

The saved state data corresponds to application states that have been saved by the applications . Because the applications may be executed in a virtualized environment the applications may write state information to a virtual location which is then mapped for storage in the data store as the saved state data . The saved state data may correspond to data saved normally by the application or may correspond to a memory image of the application that may be resumed at any time. The user data includes various data related to the users of the applications such as for example security credentials application preferences billing information a listing of other users that are permitted to join application sessions started by the user and so on.

The input processing rules include rules to configure processing of the application input data by the input processing service . The input processing rules may configure when high pass filtering is applied when low pass filtering is applied when interpolation is performed when forward prediction is employed when prediction correction is employed and or other processing functions. The input processing rules may also configure gesture identification using the processed application input data .

The client is representative of a plurality of client devices that may be coupled to the network . The clients may be geographically diverse. The client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability.

The client may include a display . The display may comprise for example one or more devices such as cathode ray tubes CRTs liquid crystal display LCD screens gas plasma based flat panel displays LCD projectors or other types of display devices etc. The client may include one or more input devices . The input devices may comprise for example devices such as keyboards mice joysticks accelerometers light guns game controllers touch pads touch sticks touch screens push buttons optical sensors microphones webcams and or any other devices that can provide user input. Additionally various input devices may incorporate haptic technologies in order to provide feedback to the user. The output devices may correspond to the output sections of haptic input devices vibration devices buzzing devices audio devices indicator lights seven segment display devices and so on.

The client may be configured to execute various applications such as a client application and or other applications. The client application is executed to allow a user to launch join play or otherwise interact with an application executed in the computing device . To this end the client application is configured to capture input data provided by the user through one or more of the input devices and send this input over the network to the computing device as application input data . Normal processing of the application input data by the client may be bypassed in favor of server side processing in various embodiments.

The client application is also configured to obtain application output data over the network from the computing device and render a screen on the display . To this end the client application may include one or more video and audio players to play out a media stream generated by an application . In one embodiment the client application comprises a plug in within a browser application. The client may be configured to execute applications beyond the client application such as for example browser applications email applications instant message applications and or other applications. In some embodiments multiple clients may be employed for one or more users to interact with the application . As non limiting examples some clients may be specialized in display output while other clients may be specialized in obtaining user input. It is noted that different clients may be associated with different latency requirements which may affect a delay employed before providing input commands to the application .

Next a general description of the operation of the various components of the networked environment is provided. To begin a user at a client sends a request to launch an application to the server application . The server application obtains the corresponding application media encoder and wrapper from the data store . The server application then launches the application in the corresponding wrapper . The server application tracks the status of the application within the state information .

The wrapper provides a hosted environment for execution of the application . In some embodiments the hosted environment may include a virtualized environment for the application that virtualizes one or more resources of the computing device . Such resources may include exclusive resources i.e. resources for which the application requests exclusive access. For example the application may request full screen access from a video device which is an exclusive resource because normally only one application can have full screen access. Furthermore the wrapper may virtualize input devices such as for example keyboards mice etc. which may not actually be present in the computing device . In various embodiments the wrapper may correspond to a virtual machine and or the wrapper may be executed within a virtual machine.

The user at the client enters input commands for the application by use of the input devices of the client . As a non limiting example the user may depress a left mouse button. Accordingly the client application functions to encode the input command into a format that may be transmitted over the network within the application input data . The server application receives the input data processes it using the input processing service adds it the processed input command or gesture to the input queue for the application and ultimately passes the processed input command or gesture to the wrapper .

Meanwhile the graphical output of the application is captured by the wrapper and encoded into a media stream. Additionally the audio output of the application may be captured and multiplexed into the media stream. The graphical output and or audio output of the application may be captured by hardware devices of the computing device in some embodiments. The media stream is transmitted by the server application to the client over the network as the application output data . The client application obtains the application output data and renders a screen on the display .

Where the input devices incorporate haptic technologies and devices force feedback may be provided to the input devices within the application output data . As a non limiting example a simulated automobile steering wheel may be programmed by force feedback to give the user a feel of the road. As a user makes a turn or accelerates the steering wheel may resist the turn or slip out of control. As another non limiting example the temperature of the input device may be configured to change according to force feedback. In one embodiment force feedback generated from the application input data of one client may be included in the application output data sent to another client . Force feedback or other output data may be mapped to different output devices of the client . For example a vibration device of a virtualized smartphone may be mapped to an audio sample to be played out on another type of client without a vibration device.

Because the client is decoupled from the hardware requirements of the application the application may be used remotely through a diverse variety of clients that are capable of streaming video with acceptable bandwidth and latency over a network . For example a game application may be played on a client that is a smartphone. Thus the client need not include expensive graphics hardware to perform the complex three dimensional rendering that may be necessary to execute the application . By contrast the hardware of the computing device may be upgraded as needed to meet the hardware requirements of the latest and most computationally intensive applications . In various embodiments the video signal in the media stream sent by the server application may be scaled according to the bitrate and or other characteristics of the connection between the computing device and the client over the network .

Turning now to shown is one example of a client employed in the networked environment . In the non limiting example of the client is a smartphone. The display of the client is a touch screen. Rendered upon the touch screen by the client application is a screen corresponding to the visual output of an application . Also shown in as being a part of the client are input devices and that are buttons. The input devices correspond to volume controls for the client . An audio device of the client may be configured to play out an audio signal generated by the application .

The application corresponds to a racing game application that is native to a smartphone platform. Rather than being executed in the client the application is executed in the hosted environment of a wrapper that emulates a smartphone device. The wrapper is further configured to virtualize various input and or output devices of smartphone device for the application . In this particular racing game application the user is able to steer a vehicle shown on the screen by making a finger stroke on the touch screen to define a gesture . The starting location trajectory velocity and or other factors associated with the gesture may be interpreted by the application to perform the steering action. Instead of performing processing on the raw gesture input data from the touch screen by the client the client application merely packages up the raw gesture input data and sends it to the computing device for further processing.

Referring next to shown are three examples of timelines and that illustrate various phases of input processing. represents input processing for applications which are locally executed by the client . In timeline input processing is divided into three exemplary phases input acquisition input processing and gesture provided . In input acquisition the raw user input is acquired from the various input devices of the client . In input processing the raw user input is cleaned up and signal processing may be performed as part of recognizing and identifying a gesture. The phase of input processing may take a relatively long time due to the available processing resources of the client which may be limited. Under gesture provided the processed user input data corresponding to a gesture is provided to a locally executed application on the client .

It is noted that the total duration of the timeline may be less than that of the timeline and may be equal to or even less than the duration of the timeline . That is to say by shifting the input processing to the server side the total input processing latency may be reduced perhaps even as much as to compensate for the latency introduced by the data transmission . Additionally the gesture provided phase may begin before data transmission is completed due to forward prediction or estimation in some embodiments.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the server application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the server application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning with box the server application executes an application in a wrapper . In box the server application encodes a video signal and or audio signal generated by the application into a media stream by way of a media encoder . In box the server application sends the media stream to a client over the network in the application output data .

In box the server application obtains unprocessed user input data from the client over the network in the application input data . In box the server application uses the input processing service to process the user input data. The input processing service may be configured to process the unprocessed user input data at a first processing rate that is above a second processing rate associated with a normal processing of the unprocessed user input data in the client . The first processing rate may be selected so as to compensate for a latency introduced by the network .

In box the server application determines whether additional input data is provided. If additional input data is provided the server application returns to box and obtains the additional input data from the client . If no other input data is provided the server application transitions instead from box to box . In box the server application determines whether the application session is to be ended. If the session is not to be ended the server application returns to box and continues encoding the media stream. Otherwise if the session is to be ended the portion of the server application ends.

Continuing on to shown is a flowchart that provides one example of the operation of a portion of the input processing service according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the input processing service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning with box the input processing service obtains unprocessed user input data from the client by way of the network . In box the input processing service applies signal processing techniques to the user input data. For example the signal processing techniques may include applying a high pass filter applying a low pass filter performing an interpolation and so on. In box the input processing service determines whether input data for identifying a gesture is missing from the stream of user input data. Such data may be lost or delayed by the network . If data is missing the input processing service predicts the missing user input data in the stream of user input data in box using dead reckoning and or other approaches. The input processing service then continues to box . If no data is missing the input processing service moves from box to box .

In box the input processing service determines whether previous predictions are to be adjusted or corrected in some way according to currently received input data. If a previous prediction is to be corrected the input processing service moves to box and updates one or more previous predictions regarding missing input data. The input processing service proceeds to box . If a previous prediction is not to be corrected the input processing service proceeds directly from box to box .

In box the input processing service identifies one or more gestures from the processed user input data. In box the input processing service provides the gesture s to the application by way of an application programming interface API a virtualized input device or another approach. Thereafter the portion of the input processing service ends.

Turning now to shown is a flowchart that provides one example of the operation of a portion of the client application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the client application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the client according to one or more embodiments.

Beginning with box the client application begins a session of an application executed by a wrapper in the computing device . In box the client application obtains the media stream over the network from the server application in the application output data . In box the client application renders the media stream. For example the client application may render a video signal of the media stream on a display as a screen . Also the client application may render an audio signal of the media stream through an audio output device of the client . In box the client application may render an interface for obtaining user input for the application through an input device of the client .

In box the client application obtains user input either directly or through the interface . In box the client application sends the raw user input to the server application over the network in the application input data without performing normal processing on the data. In box the client application determines whether more user input is to be obtained. If more user input is to be obtained the client application returns to box and obtains additional user input. If more user input is not to be obtained the client application instead proceeds to box .

In box the client application determines whether feedback or other output data is obtained from the server application . If feedback or other output data is obtained then in box the client application renders the feedback or other output data through one or more client output devices . The client application continues to box . If feedback or other output data is not obtained the client application instead transitions from box to box . In box the client application determines whether the session of the application has ended. If the session has not ended the client application returns to box and continues obtaining the media stream from the server application . Otherwise the portion of the client application ends.

With reference to shown is a schematic block diagram of the computing device according to an embodiment of the present disclosure. The computing device includes at least one processor circuit for example having a processor a memory and one or more graphics devices all of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated. The graphics devices may correspond to high performance graphics hardware including one or more graphics processors . The graphics devices are configured to render graphics corresponding to the applications executed in the computing device .

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the server application the input processing service the wrappers the applications the media encoders and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processors as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the server application the input processing service the wrappers the applications the media encoders the client application and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the client application the input processing service and the server application . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the server application the input processing service the wrappers the applications the media encoders and the client application that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

