---

title: Dynamic entities for a model of a graphical modeling environment
abstract: A device receives a dynamic system model for a graphical modeling environment, and associates an entity with the dynamic system model, the entity including an entity model. The device defines at least one of a parameter, a configuration, or a solver setting for the entity model, and performs a simulation of the dynamic system model. The device generates a system event during the simulation of the dynamic system model, and modifies at least one of the parameter, the configuration, or the solver setting for the entity model based on the system event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09152393&OS=09152393&RS=09152393
owner: The MathWorks, Inc.
number: 09152393
owner_city: Natick
owner_country: US
publication_date: 20121204
---
This application claims priority under 35 U.S.C. 119 based on U.S. Provisional Patent Application No. 61 567 456 filed Dec. 6 2011 the disclosure of which is incorporated by reference herein in its entirety.

The accompanying drawings which are incorporated in and constitute a part of this specification illustrate one or more implementations and together with the description explain these implementations. In the drawings 

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

A technical computing environment TCE may provide a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that requires the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In one example a TCE may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations.

The TCE may provide a graphical programming or modeling environment e.g. a block diagram environment that generates a dynamic system model. The dynamic system model may include multiple entities. For example if the dynamic system model simulates an automobile factory entities may be created for the parts used to manufacture automobiles. However such entities are static objects with data e.g. attributes that cannot be modified.

Systems and or methods described herein may provide dynamic entities for a dynamic system model of a graphical modeling environment e.g. a TCE . In one example the dynamic system model may include blocks that represent an overall dynamic system to be simulated e.g. an airport a factory floor etc. . The dynamic entities may include individual objects e.g. an aircraft a part a robot etc. that may flow through the overall dynamic system. The dynamic entities may include models with parameters configurations solver settings etc. that may be modified by a user of the TCE and or based on system events e.g. an airport runway may shut down generated by the dynamic system model. Alternatively or additionally the dynamic entities may generate entity events e.g. an aircraft may arrive at an airport that may modify a behavior of the dynamic system model.

The entity generator block may generate one or more dynamic entities e.g. entity through entity N for the dynamic system model. The entities may include individual objects e.g. an aircraft a part a robot etc. that may flow through the dynamic system model. Each of the entities may include an entity model of a particular type e.g. model type 1 through model type N . For example the entity model may include a tool used to model systems via state machines and flow charts a tool to model simulate and analyze dynamic systems a tool to model and simulate physical systems etc. The entity generator block may provide setup information to each of the entities such as model parameters model configurations model solver settings etc. The entity generator block may provide the entities to the queue block.

The queue block may receive the entities and may place the entities in a queue. For example if the dynamic system model is an airport the queue block may place information associated with an aircraft in a queue for awaiting takeoff from the airport. An entity may remain in the queue until the dynamic system model determines that the entity is to be further utilized by the dynamic system model. The queue block may provide one or more of the entities to the event generator block when requested by the dynamic system model.

The event generator block may receive the entities and may generate system events based on information associated with the entities and or based on simulation of the dynamic system model. A system event may include an event that affects the dynamic system model. For example if the dynamic system model is a factory floor the system event may include a new machine coming online for the factory floor. The event generator block may provide the system events to one or more of the entities. The entities receiving the system events may modify the setup information e.g. the parameters configurations solver settings etc. for the entity models based on the system events. The event generator block may provide the entities and or the system events to the server block.

The server block may receive the entities and or the system events from the event generator block and may receive entity events generated by the entities. An entity event may modify behavior of the dynamic system model and may include an event that is generated based on changing conditions in an entity model e.g. an aircraft may unload passengers . The server block may generate simulation results based on the entities the system events and or the entity events. In one example the simulation results may include code generated from the dynamic system model.

The terms code and program code as used herein are to be used interchangeably and are to be broadly interpreted to include text based code that may not require further processing to execute e.g. C code Hardware Description Language HDL code very high speed integrated circuits VHSIC HDL VHDL code Verilog Java and or other types of hardware or software based code that may be compiled and or synthesized binary code that may be executed e.g. executable files that may directly be executed by an operating system bitstream files that can be used to configure a field programmable gate array FPGA Java byte code object files combined together with linker directives source code makefiles etc. text files that may be executed in conjunction with other executables e.g. Python text files a collection of dynamic link library DLL files with text based combining configuration information that connects pre compiled modules an extensible markup language XML file describing module linkage etc. etc. In one example code may include different combinations of the above identified classes e.g. text based code binary code text files etc. . Alternatively or additionally code may include code generated using a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations. Alternatively or additionally code may be of any type such as function script object etc. and a portion of code may include one or more characters lines etc. of the code.

Client device may include one or more devices that are capable of communicating with server device via network . For example client device may include a laptop computer a personal computer a tablet computer a desktop computer a workstation computer a smart phone a personal digital assistant PDA and or other computation and communication devices.

Server device may include one or more server devices or other types of computation and communication devices that gather process and or provide information in a manner described herein. Server device may include a device that is capable of communicating with client device e.g. via network . In one example server device may include one or more laptop computers personal computers workstation computers servers central processing units CPUs graphical processing units GPUs application specific integrated circuits ASICs field programmable gate arrays FPGAs etc. and or software e.g. a simulator executing on the aforementioned devices. In one example server device may include TCE and may perform some or all of the functionality described herein for client device . Alternatively server device may be omitted and client device may perform all of the functionality described herein for client device .

Network may include a network such as a local area network LAN a wide area network WAN a metropolitan area network MAN a telephone network such as the Public Switched Telephone Network PSTN an intranet the Internet or a combination of networks.

TCE may be provided within a computer readable medium of client device . Alternatively or additionally TCE may be provided in another device e.g. server device that is accessible by client device . TCE may include hardware or a combination of hardware and software that provides a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that required the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In one implementation TCE may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations.

For example TCE may use an array as a basic element where the array may not require dimensioning. These arrays may be used to support array based programming where an operation may apply to an entire set of values included in the arrays. Array based programming may allow array based operations to be treated as high level programming that may allow for example operations to be performed on entire aggregations of data without having to resort to explicit loops of individual non array operations. In addition TCE may be adapted to perform matrix and or vector formulations that can be used for data analysis data visualization application development simulation modeling algorithm development etc. These matrix and or vector formulations may be used in many areas such as statistics image processing signal processing control design life sciences modeling discrete event analysis and or design state based analysis and or design etc.

TCE may further provide mathematical functions and or graphical tools e.g. for creating plots surfaces images volumetric representations etc. . In one implementation TCE may provide these functions and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . Alternatively or additionally TCE may provide these functions as block sets or in another way such as via a library etc.

TCE may be implemented as a text based environment e.g. MATLAB software Octave Python Comsol Script MATRIXx from National Instruments Mathematica from Wolfram Research Inc. Mathcad from Mathsoft Engineering Education Inc. Maple from Maplesoft Extend from Imagine That Inc. Scilab from The French Institution for Research in Computer Science and Control INRIA Virtuoso from Cadence Modelica or Dymola from Dynasim etc. a graphically based environment e.g. Simulink software Stateflow software SimEvents software Simscape software etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments Dymola by Dynasim SoftWIRE by Measurement Computing WiT by DALSA Coreco VEE Pro or SystemVue by Agilent Vision Program Manager from PPT Vision Khoros from Khoral Research Gedae by Gedae Inc. Scicos from INRIA Virtuoso from Cadence Rational Rose from IBM Rhopsody or Tau from Telelogic Ptolemy from the University of California at Berkeley aspects of a Unified Modeling Language UML or SysML environment etc. or another type of environment such as a hybrid environment that includes one or more of the above referenced text based environments and one or more of the above referenced graphically based environments.

TCE may include a programming language e.g. the MATLAB language that may be used to express problems and or solutions in mathematical notations. The programming language may be dynamically typed and or array based. In a dynamically typed array based computing language data may be contained in arrays and data types of the data may be determined e.g. assigned at program execution time.

For example suppose a program written in a dynamically typed array based computing language includes the following statements 

Now suppose the program is executed for example in a TCE such as TCE . During run time when the statement A hello is executed the data type of variable A may be a string data type. Later when the statement A int32 1 2 is executed the data type of variable A may be a 1 by 2 array containing elements whose data type are 32 bit integers. Later when the statement A 1.1 2.2 3.3 is executed since the language is dynamically typed the data type of variable A may be changed from the above 1 by 2 array to a 1 by 3 array containing elements whose data types are floating point. As can be seen by this example data in a program written in a dynamically typed array based computing language may be contained in an array. Moreover the data type of the data may be determined during execution of the program. Thus in a dynamically type array based computing language data may be represented by arrays and data types of data may be determined at run time.

TCE may provide mathematical routines and a high level programming language suitable for non professional programmers and may provide graphical tools that may be used for creating plots surfaces images volumetric representations or other representations. TCE may provide these routines and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . TCE may also provide these routines in other ways such as for example via a library local or remote database e.g. a database operating in a computing cloud remote procedure calls RPCs and or an application programming interface API . TCE may be configured to improve runtime performance when performing computing operations. For example TCE may include a just in time JIT compiler.

Although shows example components of environment in other implementations environment may include fewer components different components differently arranged components and or additional components than those depicted in . Alternatively or additionally one or more components of environment may perform one or more other tasks described as being performed by one or more other components of environment .

Processing unit may include one or more processors microprocessors or other types of processing units that may interpret and execute instructions. Main memory may include one or more random access memories RAMs or other types of dynamic storage devices that may store information and or instructions for execution by processing unit . ROM may include one or more ROM devices or other types of static storage devices that may store static information and or instructions for use by processing unit . Storage device may include a magnetic and or optical recording medium and its corresponding drive.

Input device may include a mechanism that permits a user to input information to device such as a keyboard a camera an accelerometer a gyroscope a mouse a pen a microphone voice recognition and or biometric mechanisms a remote control a touch screen a neural interface etc. Output device may include a mechanism that outputs information to the user including a display a printer a speaker etc. Communication interface may include any transceiver like mechanism that enables device to communicate with other devices networks and or systems. For example communication interface may include mechanisms for communicating with another device or system via a network.

As described herein device may perform certain operations in response to processing unit executing software instructions contained in a computer readable medium such as main memory . A computer readable medium may be defined as a non transitory memory device. A memory device may include space within a single physical memory device or spread across multiple physical memory devices. The software instructions may be read into main memory from another computer readable medium such as storage device or from another device via communication interface . The software instructions contained in main memory may cause processing unit to perform processes described herein. Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

Although shows example components of device in other implementations device may include fewer components different components differently arranged components and or additional components than depicted in . Alternatively or additionally one or more components of device may perform one or more other tasks described as being performed by one or more other components of device .

Block diagram editor may include hardware or a combination of hardware and software that may be used to graphically specify models of dynamic systems. In one implementation block diagram editor may permit a user to perform actions such as construct edit display annotate save and or print a graphical model e.g. a block diagram that visually and or pictorially represents a dynamic system . In another implementation block diagram editor may permit a user to create and or store data relating to graphical entities .

A textual interface may be provided to permit interaction with block diagram editor . A user may write scripts that perform automatic editing operations on a model using the textual interface. For example the textual interface may provide a set of windows that may act as a canvas for the model and may permit user interaction with the model. A model may include one or more windows depending on whether the model is partitioned into multiple hierarchical levels.

Graphical entities may include hardware or a combination of hardware and software that may provide entities e.g. signal lines buses etc. that represent how data may be communicated between functional and or non functional units and blocks of a model. Blocks may include fundamental mathematical elements of a block diagram model.

Execution engine may include hardware or a combination of hardware and software that may process a graphical model to produce simulation results may convert the graphical model into executable code and or may perform other analyses and or related tasks. In one implementation for a block diagram graphical model execution engine may translate the block diagram into executable entities e.g. units of execution following the layout of the block diagram. The executable entities may be compiled and or executed on a device e.g. client device to implement the functionality specified by the model.

Graphical models may include entities with relationships between the entities and the relationships and or the entities may have attributes associated with them. The entities may include model elements such as blocks and ports. The relationships may include model elements such as lines e.g. connector lines and references. The attributes may include model elements such as value information and meta information for the model element associated with the attributes. Graphical models may be associated with configuration information. The configuration information may include information for the graphical model such as model execution information e.g. numerical integration schemes fundamental execution period etc. model diagnostic information e.g. whether an algebraic loop should be considered an error or result in a warning model optimization information e.g. whether model elements should share memory during execution model processing information e.g. whether common functionality should be shared in code that is generated for a model etc.

Additionally or alternatively a graphical model may have executable semantics and or may be executable. An executable graphical model may be a time based block diagram. A time based block diagram may consist for example of blocks e.g. blocks connected by lines e.g. connector lines . The blocks may consist of elemental dynamic systems such as a differential equation system e.g. to specify continuous time behavior a difference equation system e.g. to specify discrete time behavior an algebraic equation system e.g. to specify constraints a state transition system e.g. to specify finite state machine behavior an event based system e.g. to specify discrete event behavior etc. The lines may represent signals e.g. to specify input output relations between blocks or to specify execution dependencies between blocks variables e.g. to specify information shared between blocks physical connections e.g. to specify electrical wires pipes with volume flow rigid mechanical connections etc. etc. The attributes may consist of meta information such as sample times dimensions complexity whether there is an imaginary component to a value data type etc. associated with the model elements.

In a time based block diagram ports may be associated with blocks e.g. blocks . A relationship between two ports may be created by connecting a line e.g. a connector line between the two ports. Lines may also or alternatively be connected to other lines for example by creating branch points. For instance three or more ports can be connected by connecting a line to each of the ports and by connecting each of the lines to a common branch point for all of the lines. A common branch point for the lines that represent physical connections may be a dynamic system e.g. by summing all variables of a certain type to 0 or by equating all variables of a certain type . A port may be an input port an output port an enable port a trigger port a function call port a publish port a subscribe port an exception port an error port a physics port an entity flow port a data flow port a control flow port etc.

Relationships between blocks e.g. blocks may be causal and or non causal. For example a model may include a block that represents a continuous time integration block that may be causally related to a data logging block by using a line e.g. a connector line to connect an output port of the continuous time integration block to an input port of the data logging block. Further during execution of the model the value stored by the continuous time integrator may change as the current time of the execution progresses. The value of the state of the continuous time integrator may be available on the output port and the connection with the input port of the data logging block may make this value available to the data logging block.

A sample time may be associated with the elements of a graphical model. For example a graphical model may include a block e.g. block with a continuous sample time such as a continuous time integration block that may integrate an input value as a time of execution progresses. This integration may be specified by a differential equation. During execution the continuous time behavior may be approximated by a numerical integration scheme that is part of a numerical solver. The numerical solver may take discrete steps to advance the execution time and these discrete steps may be constant during an execution e.g. fixed step integration or may be variable during an execution e.g. variable step integration .

Alternatively or additionally a graphical model may include a block e.g. block with a discrete sample time such as a unit delay block that may output values of a corresponding input after a specific delay. This delay may be a time interval and this interval may determine a sample time of the block. During execution the unit delay block may be evaluated each time the execution time has reached a point in time where an output of the unit delay block may change. These points in time may be statically determined based on a scheduling analysis of the graphical model before starting execution.

Alternatively or additionally a graphical model may include a block e.g. block with an asynchronous sample time such as a function call generator block that may schedule a connected block to be evaluated at a non periodic time. During execution a function call generator block may evaluate an input and when the input attains a specific value when the execution time has reached a point in time the function call generator block may schedule a connected block to be evaluated at this point in time and before advancing execution time.

Further the values of attributes of a graphical model may be inferred from other elements of the graphical model or attributes of the graphical model. For example the graphical model may include a block e.g. block such as a unit delay block that may have an attribute that specifies a sample time of the block. When a graphical model has an execution attribute that specifies a fundamental execution period the sample time of the unit delay block may be inferred from this fundamental execution period.

As another example the graphical model may include two unit delay blocks e.g. blocks where an output of the first of the two unit delay blocks is connected to an input of the second of the two unit delay block. The sample time of the first unit delay block may be inferred from the sample time of the second unit delay block. This inference may be performed by propagation of model element attributes such that after evaluating a sample time attribute of the second unit delay block a graph search proceeds by evaluating a sample time attribute of the first unit delay block since the first unit delay block is directly connected to the second unit delay block.

The values of attributes of a graphical model may be set to characteristics settings such as one or more inherited settings one or more default settings etc. For example the data type of a variable that is associated with a block e.g. block may be set to a default such as a double. Because of the default setting an alternate data type e.g. a single an integer a fixed point etc. may be inferred based on attributes of elements that the graphical model comprises e.g. the data type of a variable associated with a connected block and or attributes of the graphical model. As another example the sample time of a block may be set to be inherited. In the case of an inherited sample time a specific sample time may be inferred based on attributes of elements that the graphical model comprises and or attributes of the graphical model e.g. a fundamental execution period .

Although shows example functional components of TCE in other implementations TCE may include fewer functional components different functional components differently arranged functional components and or additional functional components than depicted in . Alternatively or additionally one or more functional components of TCE may perform one or more other tasks described as being performed by one or more other functional components of TCE .

As further shown in TCE may generate a dynamic system model . Dynamic system model may include a block diagram model with one or more model elements e.g. blocks one or more inputs and one or more outputs. Each of the model elements may include a representation e.g. a block of a hardware device a system a subsystem etc. of a system being modeled by TCE . In one example dynamic system model may include an entity generator block a queue block an event generator block and a server block .

Entity generator block may generate one or more dynamic entities through N collectively referred to herein as entities and in some instances singularly as entity for dynamic system model . Entities may include a representation of individual objects e.g. representations of an aircraft a part a robot etc. that may flow through dynamic system model . Each of entities may include an entity model of a particular type e.g. model type 1 through model type N . The entity model types may be the same or different for one or more of entities . In one example the entity model may include a tool used to model systems via state machines and flow charts a tool to model simulate and analyze dynamic systems a tool to model and simulate physical systems etc.

Entity generator block may provide setup information to each of entities . In one example one or more of entities may receive the same or different setup information . Setup information may be received from or defined by a user of TCE . Setup information may include parameters configurations solver settings etc. for the models of entities . The parameters may include information used to describe the models of entities. For example the parameters may include a parameter to enable block reduction optimization a parameter to enable Boolean mode a parameter to specify initial state name or values etc. The configurations may include information specifying settings to determine a type of solver used by the model import and export settings and other values that determine how the model executes. The solver settings may include information enabling selection of a variable step solver or a fixed step solver selection from explicit and implicit solvers selection of a discrete solver or a continuous solver etc. As further shown in entity generator block may provide entities to queue block .

Queue block may receive entities and may place entities in a queue. For example if dynamic system model is a television assembly plant queue block may place information regarding television components in a queue until the components are needed in the assembly process. An entity may remain in the queue until dynamic system model determines that entity is to be further utilized by dynamic system model . Queue block may provide one or more of the entities to event generator block when requested by dynamic system model .

Event generator block may receive entities and may generate system events based on information associated with entities and or based on simulation of dynamic system model . System event may include an event that affects dynamic system model . For example if dynamic system model is an interstate highway system event may include construction closing down one lane of the highway. Alternatively or additionally a user of TCE may define system events for event generator block . Event generator block may provide system events to one or more entities . Entities receiving system events may modify setup information e.g. the parameters configurations solver settings etc. for the entity models based on system events . Event generator block may provide entities and or system events to server block .

Server block may receive entities and or system events from event generator block and may receive entity events generated by entities . In one example implementation entity events may be defined by a user of TCE . Entity event may include an event that is generated based on changing conditions in an entity model e.g. an aircraft may load passengers . Entity event may modify behavior of dynamic system model . For example if dynamic system model is an airport and entity event includes a particular aircraft taking off from the airport entity event may modify dynamic system model by removing entity associated with the particular aircraft.

Server block may generate simulation results based on entities system events and or entity events . Server block may output e.g. provide for display and or store simulation results . In one example simulation results may include code generated from dynamic system model . The code may execute multiple simulations of dynamic system model using multiple cores of a single processor using a local cluster of computing devices using a remote cluster of computing devices e.g. a cloud network etc. Alternatively or additionally the code may execute hardware in the loop simulations of dynamic system model . For example some entities may be connected to dynamic system model as physical hardware e.g. a control system in a vehicle while other entities may be connected to dynamic system model as simulation entities. Alternatively all of entities may be connected to dynamic system model as simulation entities.

In one example implementation TCE may associate dynamic system model with each entity generated and or modified during simulation of dynamic system model . One or more instances of each entity may be provided for dynamic system model . For example entity may be created for a particular aircraft and an airport may include several instances of the particular aircraft. TCE may enable a user to graphically inspect each instance of an associated entity and to step through a simulation of dynamic system model e.g. in a backward or forward direction .

Although shows example operations capable of being performed by TCE in other implementations TCE may perform fewer operations different operations and or additional operations than depicted in . Alternatively or additionally one or more components of may perform one or more other tasks described as being performed by one or more other components of .

As shown in event generator block may provide one or more system events to one or more entities . As described above entities receiving system events may modify setup information e.g. the parameters configurations solver settings etc. for the entity models based on system events . In one example implementation entities receiving system events may modify one or more variants associated with entities . The variants may enable an individual portion e.g. a block an element a component a module etc. of a model e.g. of entity to have multiple implementations that may be swapped in and out by a user of TCE . Within the model a block e.g. a subsystem a model reference etc. may have multiple variants that are programmatically controlled. For example a first entity may modify variants associated with the model of first entity to create modified variants . A second entity may modify variants associated with the model of second entity to create modified variants . An Nth entity N may modify variants associated with the model of Nth entity N to create modified variants .

Although shows example operations capable of being performed by TCE in other implementations TCE may perform fewer operations different operations and or additional operations than depicted in . Alternatively or additionally one or more components of may perform one or more other tasks described as being performed by one or more other components of .

As shown in user interface may include a variety of information associated with dynamic system model . For example user interface may include dynamic system model that simulates an airport management system for an airport. Dynamic system model may include a takeoff controller block a gate block a taxiway block a runway block and information regarding one or more aircraft entities .

Takeoff controller block may include a block that simulates an aircraft takeoff management system for the airport. The aircraft takeoff management system may control arrivals and departures of aircraft from the airport. For example the aircraft takeoff management system may issue a takeoff permit to an aircraft entity located at gate block . Takeoff controller block may model aircraft traffic flow as entities e.g. aircraft entity .

Gate block may include a block that simulates a gate at the airport. Aircraft entity may wait at gate block until takeoff controller block issues a takeoff permit for aircraft entity . For example gate block may receive a takeoff permit from takeoff controller block and aircraft entity may exit gate block and move to taxiway block when the takeoff permit is received.

Taxiway block may include a block that simulates a taxiway at the airport. Aircraft entity may enter taxiway block when aircraft entity exits gate block . In one example a topology for taxiway block may be defined using fundamental building blocks. A scheduler may route aircraft entities in taxiway block based on priorities assigned to aircraft entities . Aircraft entity may exit taxiway block and enter runway block when runway block is clear for aircraft entity .

Runway block may include a block that simulates a runway of the airport. Aircraft entity may enter runway block when aircraft entity exits taxiway block . In one example aircraft entity may enter runway block when aircraft entity is cleared for takeoff from runway block . After aircraft entity takes off from the runway runway block may provide to takeoff controller block an indication that aircraft entity has departed.

Aircraft entity may include a representation of an individual object e.g. an aircraft that may flow through dynamic system model e.g. the airport management system . Aircraft entity may include an entity model of a particular type. For example aircraft entity may include an aircraft system model . In one implementation aircraft system model may include a model for aircraft dynamics with pilot behavior e.g. as described below in connection with a model for a collision detection system e.g. as described below in connection with etc.

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

In one example a user may access user interface by selecting a menu option by selecting aircraft system model etc. As shown in user interface may include a variety of information associated with a model e.g. a Simulink model for aircraft dynamics with pilot behavior. In one example the model for aircraft dynamics may include a switch case block a logical operator block a gate dynamics block a taxiway dynamics block a runway dynamics block a merge block and a bus block .

Switch case block may include a block that switches between gate dynamics block taxiway dynamics block and runway dynamics block based on a previous attribute e.g. a location associated with an aircraft. If the previous attribute indicates that the aircraft is located at a gate e.g. gate block switch case block may proceed to gate dynamics block . If the previous attribute indicates that the aircraft is located at a taxiway e.g. taxiway block switch case block may proceed to taxiway dynamics block . If the previous attribute indicates that the aircraft is located at a runway e.g. runway block switch case block may proceed to runway dynamics block .

Logical block may include an OR block that receives a collision warning for the aircraft and provides the collision warning to gate dynamics block taxiway dynamics block or runway dynamics block based on where the aircraft is located. If the aircraft is located at the gate e.g. gate block logical block may provide the collision warning to gate dynamics block . If the aircraft is located at the taxiway e.g. taxiway block logical block may provide the collision warning to taxiway dynamics block . If the aircraft is located at the runway e.g. runway block logical block may provide the collision warning to runway dynamics block .

Gate dynamics block may include a block that simulates aircraft dynamics at the gate. Gate dynamics block may receive the collision warning from logical operator and may receive a previous attribute e.g. previous coordinates associated with the aircraft. Gate dynamics block may generate current coordinates for the aircraft e.g. coordinates that avoid a collision based on the collision warning and the previous coordinates and may provide the current coordinates to merge block .

Taxiway dynamics block may include a block that simulates aircraft dynamics at the taxiway. Taxiway dynamics block may receive the collision warning from logical operator and may receive a previous attribute e.g. previous coordinates associated with the aircraft. Taxiway dynamics block may generate current coordinates for the aircraft e.g. coordinates that avoid a collision based on the collision warning and the previous coordinates and may provide the current coordinates to merge block .

Runway dynamics block may include a block that simulates aircraft dynamics at the runway. Runway dynamics block may receive the collision warning from logical operator and may receive a previous attribute e.g. previous coordinates associated with the aircraft. Runway dynamics block may generate current coordinates for the aircraft e.g. coordinates that avoid a collision based on the collision warning and the previous coordinates and may provide the current coordinates to merge block .

Merge block may include a block that receives the current coordinates of the aircraft from gate dynamics block taxiway dynamics block or runway dynamics block . Merge block may merge the current coordinates together and may provide the merged current coordinates to bus block .

Bus block may include a block that receives a previous attribute e.g. a location associated with the aircraft and receives the merged current coordinates from merge block . Bus block may generate a current attribute e.g. a current location associated with the aircraft based on the previous attribute and the merged current coordinates.

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

In one example a user may access user interface by selecting a menu option by selecting aircraft system model etc. As shown in user interface may include a variety of information associated with a model e.g. a Stateflow model for a collision detection system of an aircraft. In one example the model for the collision detection system may include a gate block a taxiway block and a runway block .

As further shown in a location associated with the aircraft may be determined by the model. For example the location may indicate that the aircraft is located at a gate e.g. gate block at a taxiway e.g. taxiway block or at a runway e.g. runway block . If the aircraft is located at the gate the flow may proceed to gate block . If the aircraft is located at the taxiway the flow may proceed to taxiway block . If the aircraft is located at the runway the flow may proceed to runway block .

Gate block may include a block that simulates aircraft behavior at the gate. Based on the location of the aircraft at the gate and the locations of other aircraft gate block may determine whether the aircraft may potentially collide with any of the other aircraft. If there is no potential for a collision i.e. the aircraft is safe gate block may do nothing. If there is potential for a collision i.e. the aircraft is too close to another aircraft gate block may generate coordinates for the aircraft e.g. coordinates that avoid a collision .

Taxiway block may include a block that simulates aircraft behavior at the taxiway. Based on the location of the aircraft at the taxiway and the locations of other aircraft taxiway block may determine whether the aircraft may potentially collide with any of the other aircraft. If there is no potential for a collision i.e. the aircraft is safe taxiway block may do nothing. If there is potential for a collision i.e. the aircraft is too close to another aircraft taxiway block may generate coordinates for the aircraft e.g. coordinates that avoid a collision .

Runway block may include a block that simulates aircraft behavior at the runway. Based on the location of the aircraft at the runway and the locations of other aircraft runway block may determine whether the aircraft may potentially collide with any of the other aircraft. If there is no potential for a collision i.e. the aircraft is safe runway block may do nothing. If there is potential for a collision i.e. the aircraft is too close to another aircraft runway block may generate coordinates for the aircraft e.g. coordinates that avoid a collision .

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

If a user of dynamic system model selects taxiway block user interface may be displayed to the user. As shown in user interface may include a variety of information associated with taxiway block such as a model e.g. a SimEvents model for implementing aircraft dynamics at the taxiway. For example taxiway block may include a taxiway ticket pool block a start timer block an obtain taxiway usage block an update takeoff stage block a get aircraft ID block an update aircraft location block a taxiway entry block a server block a release based on taxiway location block a get taxiway location block a server block a read aircraft coordinate block a set taxiway location block a release taxiway usage block and a read timer block .

Taxiway ticket pool block may include a block that includes a pool of tickets for aircraft entities . The tickets may permit aircraft entities to enter taxiway block .

Start timer block may include a block that starts a timer associated with when a particular aircraft entity enters taxiway block . The timer may be used to determine how long the particular aircraft entity has to wait at taxiway block before entering runway block .

Obtain taxiway usage block may include a block that receives a ticket from taxiway ticket pool block . When obtain taxiway usage block receives the ticket obtain taxiway usage block may instruct the particular aircraft entity to enter taxiway block .

Update takeoff stage block may include a block that updates a takeoff stage for the particular aircraft entity . For example update takeoff stage block may place the particular aircraft entity in a queue e.g. a takeoff stage with other awaiting aircraft entities .

Get aircraft ID block may include a block that obtains an identification of the particular aircraft entity . The identification may include for example a flight number a serial number or some other identifier associated with the particular aircraft entity .

Update aircraft location block may include a block that updates a location of the particular aircraft entity based on the takeoff stage received from update takeoff stage block .

Taxiway entry block may include a block that permits the particular aircraft entity to enter taxiway block . In one example the particular aircraft entity may be provided in a queue associated with taxiway block .

Server block may include a block that serves the particular aircraft entity . For example server block may move the particular aircraft entity through the queue associated with taxiway block .

Release based on taxiway location block may include a block that permits the particular aircraft entity to exit taxiway block . For example the particular aircraft entity may exit taxiway block and enter runway block .

Get taxiway location block may include a block that obtains a location of the particular aircraft entity in taxiway block . For example the particular aircraft entity may be located in a particular position of the queue associated with taxiway block .

Server block may include a block that updates the location of the particular aircraft entity in taxiway block .

Read aircraft coordinate block may include a block that reads current coordinates associated with the particular aircraft entity . Read aircraft coordinate block may provide the current coordinates to set taxiway location block .

Set taxiway location block may include a block that sets a location of the particular aircraft entity in taxiway block based on the current coordinates received from read aircraft coordinate block . For example set taxiway location block may set the particular aircraft entity in a particular position of the queue associated with taxiway block . Information associated with set taxiway location block may be provided to taxiway entry block .

Release taxiway usage block may include a block that releases usage of taxiway block by the particular aircraft entity . For example release taxiway usage block may enable the particular aircraft entity to exit taxiway block .

Read timer block may include a block that stops the timer started by start timer block and reads the timer. The timer may be used to determine how long the particular aircraft entity waited at taxiway block before entering runway block .

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

A user of dynamic system model may dynamically create and delete aircraft entities using a function e.g. a MATLAB S function and three dimensional animation e.g. Simulink three dimensional animation via user interface of . As shown in user interface may include a variety of information associated with dynamic system model . For example user interface may include a function section a code section and an animation section .

Function section may enable a user of dynamic system model to create a user definable block e.g. aircraft entities using a function application programming interface API . Function section may enable the user to specify a name and a list of one or more parameters for the user definable block.

Code section may display code associated with the user definable block created in function section . In one example the code may be created by TCE and may be used to create information associated with one or more aircraft entities for dynamic system model .

Animation section may display a three dimensional 3D animation associated with the user definable block created in function section . As shown in animation section may display the user definable block e.g. a matrix block and information associated with a database read by the user definable block to create the three dimensional animation.

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

As shown in process may include receiving and or creating a dynamic system model for a graphical model environment block associating an entity that includes a model with the dynamic system model block and defining parameters a configuration and or solver settings for the entity model block . For example in an implementation described above in connection with TCE may generate dynamic system model . Dynamic system model may include a block diagram model with one or more model elements e.g. blocks one or more inputs and one or more outputs. In one example dynamic system model may include entity generator block queue block event generator block and server block . Entity generator block may generate one or more dynamic entities for dynamic system model . Each of entities may include an entity model of a particular type e.g. model type 1 through model type N . Entity generator block may provide setup information to each of entities . Setup information may include parameters configurations solver settings etc. for the models of entities . A user may instruct TCE to perform a simulation of dynamic system model or TCE may automatically perform a simulation of dynamic system model .

As further shown in process may include performing simulation of the dynamic system model block generating a system event during simulation of the dynamic system model block and modifying the parameters the configuration and or the solver setting for the entity model based on the system event block . For example in an implementation described above in connection with event generator block may receive entities and may generate system events based on information associated with entities and or based on simulation of dynamic system model . System event may include an event that affects dynamic system model . Event generator block may provide system events to one or more entities . Entities receiving system events may modify setup information e.g. the parameters configurations solver settings etc. for the entity models based on system events .

Returning to process may include generating an entity event during simulation of the dynamic system model block modifying the dynamic system model based on the entity event block and generating code from the dynamic system model block . For example in an implementation described above in connection with server block may receive entities and or system events from event generator block and may receive entity events generated by entities . Entity event may include an event that is generated based on changing conditions in an entity model e.g. an aircraft may unload passengers . Entity event may modify behavior of dynamic system model . In one example if dynamic system model is an airport and entity event includes information regarding a particular aircraft taking off from the airport entity event may modify dynamic system model by removing entity associated with the particular aircraft. Server block may generate simulation results based on entities system events and or entity events . In one example simulation results may include code generated from dynamic system model .

Process block may include the process blocks depicted in . As shown in process block may include one of generating the code to execute multiple simulations of the dynamic system model on multiple cores a local cluster and or a remote cluster block or generating the code to execute hardware in the loop simulations of the dynamic system model block . For example in an implementation described above in connection with the code generated by server block may execute multiple simulations of dynamic system model using multiple cores of a single processor using a local cluster of computing devices using a remote cluster of computing devices e.g. a cloud network etc. Alternatively or additionally the code may execute hardware in the loop simulations of dynamic system model . In one example some entities may be connected to dynamic system model as physical hardware e.g. a control system in a vehicle while other entities may be connected to dynamic system model as simulation entities. Alternatively all of entities may be connected to dynamic system model as simulation entities.

Systems and or methods described herein may provide dynamic entities for a dynamic system model of a graphical modeling environment e.g. a TCE . In one example the dynamic system model may include blocks that represent an overall dynamic system to be simulated e.g. an airport a factory floor etc. . The dynamic entities may include information regarding individual objects e.g. an aircraft a part a robot etc. that may flow through the overall dynamic system. The dynamic entities may include models with parameters configurations solver settings etc. that may be modified by a user of the TCE and or based on system events e.g. an airport runway may shut down generated by the dynamic system model. Alternatively or additionally the dynamic entities may generate entity events e.g. an aircraft may arrive at an airport that may modify a behavior of the dynamic system model.

The foregoing description of implementations provides illustration and description but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the implementations.

For example while series of blocks have been described with regard to the blocks and or the order of the blocks may be modified in other implementations. Further non dependent blocks may be performed in parallel.

It will be apparent that example aspects as described above may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement these aspects should not be construed as limiting. Thus the operation and behavior of the aspects were described without reference to the specific software code it being understood that software and control hardware could be designed to implement the aspects based on the description herein.

Further certain portions of the implementations may be implemented as a component that performs one or more functions. This component may include hardware such as a processor an application specific integrated circuit ASIC or a field programmable gate array FPGA or a combination of hardware and software.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the disclosure of the specification. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification. Although each dependent claim listed below may directly depend on only one other claim the disclosure of the specification includes each dependent claim in combination with every other claim in the claim set.

No element act or instruction used in the present application should be construed as critical or essential unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

