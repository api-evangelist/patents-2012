---

title: Log structured volume encryption for virtual machines
abstract: Methods, systems, and apparatus, including a method for providing data. The method comprises receiving a first request from a first virtual machine (VM) to store data, obtaining the data and an access control list (ACL) of authorized users, obtaining a data key that has a data key identifier, encrypting the data key and the ACL using a wrapping key to generate a wrapped blob, encrypting the data, storing the wrapped blob and the encrypted data, and providing the data key identifier to users on the ACL. The method further comprises receiving a second request from a second VM to obtain a data snapshot, obtaining an unwrapped blob, obtaining the data key and the ACL from the unwrapped blob, authenticating a user associated with the second request, authorizing the user against the ACL, decrypting the data using the data key, and providing a snapshot of the data to the second VM.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08996887&OS=08996887&RS=08996887
owner: Google Inc.
number: 08996887
owner_city: Mountain View
owner_country: US
publication_date: 20120224
---
This specification relates to secure data storage and particularly to secure data storage for virtual machines.

Cloud computing is network based computing in which typically large collections of servers housed in data centers or server farms provides computational resources and data storage as needed to remote end users. Some cloud computing services allow end users to run user provided server software applications e.g. e commerce server applications web servers or file servers in the cloud. Some other cloud computing services provide access to software applications such as word processors and other commonly used applications to end users who utilize the applications through web browsers or other client side software. Users electronic data files are usually stored in the server farm rather than on the users personal computing devices.

In general one aspect of the subject matter described in this document can be embodied in methods implemented by one or more data processing apparatuses that include a method for data encryption. The method comprises receiving a first request from a first virtual machine to store data in a log structured volume. The method further comprises based on the first request obtaining the data and an access control list of one or more users authorized to access the data. The method further comprises obtaining a data key that has a data key identifier. The method further comprises encrypting using the one or more data processing apparatuses the data key and the access control list using a wrapping key to generate a wrapped blob. The method further comprises encrypting using the one or more data processing apparatuses the data using the data key to generate encrypted data. The method further comprises storing the wrapped blob and the encrypted data in the log structured volume. The method further comprises providing the data key identifier to one or more users on the access control list. The method further comprises receiving a second request from a second virtual machine to obtain a snapshot of the data. The method further comprises based on the second request obtaining an unwrapped blob containing the data key and the access control list. The method further comprises obtaining the data key and the access control list from the unwrapped blob. The method further comprises authenticating a user associated with the second request and authorizing the user against the access control list. The method further comprises upon a determination that the user is authenticated and authorized decrypting using the one or more data processing apparatuses the data using the data key. The method further comprises providing a snapshot of the data to the second virtual machine.

Implementations can include one or more of the following features. The method further comprises determining that a threshold condition associated with storage of the data on the log structured volume has occurred. The method further comprises obtaining a new data key identified by a new data key identifier decrypting the data using the data key encrypting the new data key and the access control list using the wrapping key to generate a new wrapped blob encrypting the data using the new data key to generate encrypted data storing the new wrapped blob and the encrypted data in the log structured volume providing the new data key identifier to the one or more users on the access control list and preventing subsequent use of the data key. The threshold condition includes an amount of data protected by the data key. The amount of data protected by the data key is a cumulative amount. The amount of data protected by the data key is a current amount. The threshold condition includes a time duration that the data key has been in use. The method further comprises auditing access of the data and determining that the data has been accessed by a user that is not on the access control list and that the data key has been compromised. The method further comprises obtaining a new data key identified by a new data key identifier decrypting the data using the data key encrypting the new data key and the access control list using the wrapping key to generate a new wrapped blob encrypting the data using the new data key to generate encrypted data storing the new wrapped blob and the encrypted data in the log structured volume providing the new data key identifier to the one or more users on the access control list and preventing subsequent use of the data key. Storing the encrypted data includes compacting the encrypted data.

In another aspect a system can comprise one or more data processing apparatuses programmed to perform operations. The operations comprise receiving a first request from a first virtual machine to store data in a log structured volume. The operations further comprise based on the first request obtaining the data and an access control list of one or more users authorized to access the data. The operations further comprise obtaining a data key that has a data key identifier. The operations further comprise encrypting the data key and the access control list using a wrapping key to generate a wrapped blob. The operations further comprise encrypting the data using the data key to generate encrypted data. The operations further comprise storing the wrapped blob and the encrypted data in the log structured volume. The operations further comprise providing the data key identifier to one or more users on the access control list. The operations further comprise receiving a second request from a second virtual machine to obtain a snapshot of the data. The operations further comprise based on the second request obtaining an unwrapped blob containing the data key and the access control list. The operations further comprise obtaining the data key and the access control list from the unwrapped blob. The operations further comprise authenticating a user associated with the second request and authorizing the user against the access control list. The operations further comprise upon a determination that the user is authenticated and authorized decrypting the data using the data key. The operations further comprise providing a snapshot of the data to the second virtual machine.

Implementations can include one or more of the following features. The operations further comprise determining that a threshold condition associated with storage of the data on the log structured volume has occurred. The operations further comprise obtaining a new data key identified by a new data key identifier decrypting the data using the data key encrypting the new data key and the access control list using the wrapping key to generate a new wrapped blob encrypting the data using the new data key to generate encrypted data storing the new wrapped blob and the encrypted data in the log structured volume providing the new data key identifier to the one or more users on the access control list and preventing subsequent use of the data key. The threshold condition includes an amount of data protected by the data key. The amount of data protected by the data key is a cumulative amount. The amount of data protected by the data key is a current amount. The threshold condition includes a time duration that the data key has been in use. The operations further comprise auditing access of the data and determining that the data has been accessed by a user that is not on the access control list and that the data key has been compromised. The operations further comprise obtaining a new data key identified by a new data key identifier decrypting the data using the data key encrypting the new data key and the access control list using the wrapping key to generate a new wrapped blob encrypting the data using the new data key to generate encrypted data storing the new wrapped blob and the encrypted data in the log structured volume providing the new data key identifier to the one or more users on the access control list and subsequent use of the data key. Storing the encrypted data includes compacting the encrypted data.

In another aspect a storage medium has instructions stored thereon that when executed cause data processing apparatus to perform operations. The operations comprise receiving a first request from a first virtual machine to store data in a log structured volume and based on the first request obtaining the data and an access control list of one or more users authorized to access the data. The operations further comprise obtaining a data key that has a data key identifier. The operations further comprise encrypting the data key and the access control list using a wrapping key to generate a wrapped blob. The operations further comprise encrypting the data using the data key to generate encrypted data. The operations further comprise storing the wrapped blob and the encrypted data in the log structured volume. The operations further comprise providing the data key identifier to one or more users on the access control list. The operations further comprise receiving a second request from a second virtual machine to obtain a snapshot of the data and based on the second request obtaining an unwrapped blob containing the data key and the access control list. The operations further comprise obtaining the data key and the access control list from the unwrapped blob. The operations further comprise authenticating a user associated with the second request and authorizing the user against the access control list and upon a determination that the user is authenticated and authorized decrypting the data using the data key. The operations further comprise providing a snapshot of the data to the second virtual machine.

Implementations can include one or more of the following features. The operations further comprise determining that a threshold condition associated with storage of the data on the log structured volume has occurred. The operations further comprise obtaining a new data key identified by a new data key identifier decrypting the data using the data key encrypting the new data key and the access control list using the wrapping key to generate a new wrapped blob encrypting the data using the new data key to generate encrypted data storing the new wrapped blob and the encrypted data in the log structured volume providing the new data key identifier to the one or more users on the access control list and preventing subsequent use of the data key. The threshold condition includes an amount of data protected by the data key. The amount of data protected by the data key is a cumulative amount. The amount of data protected by the data key is a current amount. The threshold condition includes a time duration that the data key has been in use. The operations further comprise auditing access of the data and determining that the data has been accessed by a user that is not on the access control list and that the data key has been compromised. The operations further comprise obtaining a new data key identified by a new data key identifier decrypting the data using the data key encrypting the new data key and the access control list using the wrapping key to generate a new wrapped blob encrypting the data using the new data key to generate encrypted data storing the new wrapped blob and the encrypted data in the log structured volume providing the new data key identifier to the one or more users on the access control list and preventing subsequent use of the data key. Storing the encrypted data includes compacting the encrypted data.

Particular embodiments of the subject matter described in this document can be implemented so as to realize one or more of the following advantages. In some implementations base volume keys can be used to encrypt persistent data on a base volume basis. Each set of snapshots associated with the persistent data in some implementations can have a snapshot group key associated with it. These types of keys including base volume keys and snapshot group keys e.g. symmetric keys used to access content in persistent disks can be referred to as persistent disk keys or herein data keys. In some implementations access to any data key can be predicated upon two authentications the first authentication for cloud cluster access and the second authentication for user level access e.g. for a user or principal identified in an access control list ACL associated with the data and the data key. In some implementations these authentication features can be in effect by default for all disks and the features cannot be disabled e.g. by a user who may attempt unauthorized or unaudited access to data.

In some implementations ephemeral data e.g. data which is not guaranteed to be preserved between reboots can be protected using a single randomly generated key that is used to protect data on all block devices for any given VM host. For example data keys can be needed for ephemeral data used for the VM state stored during save and restore operations. The keys may exist only in memory and may not be written to disk e.g. during a swap . In some implementations kernel level processes can wipe the memory containing key material. For example whenever a key is no longer in use or no longer needed e.g. at VM process shutdown kernel level processes can wipe clean any key information that is in process memory at the time of process termination. In some implementations these features can be in effect by default and cannot be disabled.

In some implementations encryption can occur for memory contents written to disk during a VM save state operation. For example any key material used to protect encrypted data written to disk can be wrapped by a key management system e.g. by a key store component . The key management system can further manage key wrap and unwrap operations when performing operations that involve storing VM state information.

In some implementations unique sets of data keys can be generated for each set of images managed on the log structured volume. For example each key can be wrapped with an access control list ACL for each user or principal having access to the data and the data keys can be released only to those users. In some implementations each snapshot of data protected by encryption can include a block e.g. the first block that contains metadata that includes a wrapped data key wrapper and the associated ACLs. Some implementations can further employ a master key that processes of the cloud cluster authorization services use to access encrypted data.

In some implementations the key management system can handle key sharing. For example a single data key can be used concurrently by the VMs associated with several users identified by the ACL as having access to the protected data. In some implementations the key management system can perform other operations such as key rotation retirement and revocation processes for which are described below with reference to .

The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

This document describes systems methods and apparatus for encrypting data used in a virtual machine VM environment e.g. in cloud based or cloud cluster computing where multiple VMs exist. For example encryption techniques described herein can be used for encrypting persistent data e.g. data that is stored in the cloud ephemeral data e.g. snapshots of the persistent data used in VMs and data that exists in memory. For example persistent storage can include storage that persists beyond the life of a VM while ephemeral storage can include storage that disappears when the VM terminates. In some implementations the encryption techniques described herein can be used for log structured volume LSV file systems which are file systems designed for high write throughput and in which updates to data and metadata are written sequentially to a continuous stream e.g. a log .

In some implementations other storage systems can be used instead of or in addition to LSV systems. For example storage systems can be used that treat a back end storage system as a black box. Other storage systems are possible.

In further implementations requests can be received from sources other than virtual machines. For example implementations can provide a secure barrier between user applications and key data management systems e.g. a system where storage is attached to a client via a network e.g. using Internet Small Computer Systems Interface iSCSI protocols or other means like tradition storage area networks SANs . In this example client and server components can be separated by a network barrier but the use of virtual machines is not required.

In some implementations the distributed system can provide a virtual network to the virtual machines for Internet Protocol IP based communications. The VMs are assigned network addresses e.g. an IPv4 address or IPv6 address that are routable on the virtual network. In some implementations the virtual network includes a private subnet e.g. 192.168.0.0 16 10.0.0.0 8 .

Host machines included in a distributed system can contain one or more data processing apparatuses such as rack mounted servers or other computing devices. Host machines can have different capabilities and computer architectures and can be located in the same or in different geographic locations. Host machines can communicate with each other through a network such as a private network e.g. dedicated or leased optical fiber or copper wires . Host machines can also communicate with devices on external networks such as the Internet through one or more gateways which are data processing apparatus responsible for routing data communication traffic between the private network and the Internet . Other types of external networks are possible.

The private network can include one or more wired e.g. Ethernet or wireless e.g. WI FI networks for example. In some implementations the private network includes physical communication assets such as optical fiber or copper wire that connect two data centers. In some implementations the private network is implemented over an external network such as the Internet . In some implementations data centers have respective local area networks LANs that are aggregated together to form a private network . IP traffic between data centers can be routed for example by using Multiprotocol Label Switching MPLS . Other types of routing are possible.

Each host machine executes a host operating system e.g. host operating systems and . Each host operating system manages host machine resources. In this example host operating systems run software that virtualizes the underlying host machine hardware and manages concurrent execution of one or more VMs. For example the host operating system manages two VMs VM and VM while a different host operating system manages a single VM . A host machine can in general manage larger quantities of virtual machines however the quantity may be limited based on physical resources of the host machine.

The VMs use a simulated version of an underlying host machine hardware which can be referred to as virtual hardware e.g. virtual hardware and . Software that is executed by the virtual hardware can be referred to as guest software. In some implementations guest software cannot determine if it is being executed by virtual hardware or by a physical host machine. If guest software executing in a VM or the VM itself malfunctions or aborts other VMs executing on the host machine will not be affected. A host machine s microprocessor s can include processor level mechanisms to enable virtual hardware to execute software applications efficiently by allowing guest software instructions to be executed directly on the host machine s microprocessor without requiring code rewriting recompilation or instruction emulation.

Each VM e.g. VMs and is allocated a set of virtual memory pages from the virtual memory of the underlying host operating system and is allocated virtual disk blocks from one or more virtual disk drives for use by the guest software executing on the VM. For example host operating system allocates memory pages and disk blocks to VM and VM and host operating system does the same for VM . In some implementations a given VM cannot access the virtual memory pages assigned to other VMs. For example VM cannot access memory pages that have been assigned to VM . A virtual disk drive can be persistent across VM restarts. In some implementations virtual disk blocks are allocated on physical disk drives coupled to host machines. VMs can be allocated network addresses through which their respective processes can communicate with other processes via a virtual network. For example guest software executing on VM can communicate with guest software executing on VM or VM via the virtual network using the allocated network addresses.

A VM s guest software can include a guest operating system e.g. guest operating systems and which is software that controls the execution of respective guest software applications e.g. guest applications and within the VM and provides services to those applications. For example a guest operating system can be an operating system such as a variant of the UNIX operating system. Other operating systems are possible. Each VM can execute the same guest operating system or different guest operating systems. Booting a VM can include using a virtual boot disk to load a kernel image associated with a guest operating system into memory. A guest operating system s access to resources such as networks and virtual disk storage is controlled by the underlying host operating system.

By way of illustration and with reference to virtual machine when the guest application or guest operating system attempts to perform an input output operation on a virtual disk initiate network communication or perform a privileged operation for example the virtual hardware is interrupted so that the host operating system can perform the action on behalf of the virtual machine . The host operating system can perform these actions with a process that executes in kernel process space user process space or both.

The kernel process space is virtual memory reserved for the host operating system s kernel which can include kernel extensions and device drivers for instance. The kernel process space has elevated privileges sometimes referred to as supervisor mode that is the kernel can perform certain privileged operations that are off limits to processes running in the user process space . Examples of privileged operations include access to different address spaces access to special functional processor units in the host machine such as memory management units and so on. The user process space is a separate portion of virtual memory reserved for user mode processes. User mode processes cannot perform privileged operations directly.

In various implementations a portion of VM network communication functionality is implemented in a communication process e.g. communication process . In some implementations the communication process executes in the user process space e.g. user process space of a host operating system e.g. host operating system . In other implementations the communication process can execute in the kernel process space e.g. kernel process space of the host operating system. There can be a single communication process for all VMs executing on a host machine or multiple communication processes one for each VM executing on a host machine. In yet further implementations some portion of the communication process executes in the user process space and another portion executes in the kernel process space. In some implementations the communication process can use a hardware level encapsulation mechanism.

A communication process can communicate with a VM registry service to establish a virtual network pair VNP between two VMs. In a virtual network a VNP can be used to route traffic between two endpoints using one or more virtual connections or links Network traffic associated with the VNP can be carried via a local loop e.g. if both VMs are on the same host machine or carried via one or more networks such as a private network Internet or a combination thereof. For example a VNP between virtual machine and virtual machine can be used to route packets sent between VNP endpoints managed respectively by first and second communication processes over the private network . In some implementations a server such as a VM registry server implements the functionality of the VM registry service. The VM registry service can manage assignments of network addresses e.g. IP addresses to VMs and maintain mappings between VM network addresses on a virtual network and the respective network addresses of the host machines running the VMs.

In some implementations the virtual machine manager for a virtual machine can use libraries to interact with the LSV subsystem e.g. that execute in a third ring or unprivileged application domain of the host. For example the code can act to provide the role of the server system .

In general a data key identifier uniquely identifies a key. Data key identifiers can be generated in various ways. In some implementations a method of the key management system can generate a key identifier using a hash of the key material and based on the key type. In some implementations other ways of generating a key identifier can be used.

In some implementations a first request is received by the server system from a first VM e.g. VM A to store data in a log structured volume. Based on the request the server system generates a data key and requests that the data key be wrapped against an access control list ACL of one or more users authorized to access the data. For example the ACL can be provided by a user authorization system e.g. a single sign on system . In some implementations the key management system provides the server system with a wrapped blob that includes the wrapped ley. The server system uses the data key to encrypt the data and stores the encrypted data and the wrapped blob in the log structured volume. The server system provides the data key identifier to one or more users on the access control list e.g. users associated with VM A and VM B .

The server system receives a second request from a second virtual machine e.g. VM B to obtain a snapshot of the data. Based on the second request the server system sends the wrapped blob to the key management system along with credentials. The key management system uses its wrapping key e.g. a master key to decrypt the blob retrieves the keys and their associated ACLs and provides the unwrapped blob to the server system . If the credentials authenticate against an identity in the associated ACL for the requested key then the key management system returns that key to the server system which decrypts the data using the data key and provides a snapshot of the data to the second virtual machine e.g. VM B .

The operations can be performed for example in an environment that includes a user an application programming interface API and a user authorization used by the user to sign onto the VM e.g. using the API . In some implementations a key generator generates and wraps data keys that are stored in a key store .

Referring to the sequence shown in upon the creation of data e.g. persistent data by the user the API receives an access token e.g. from a remote device. The data can be included for example with a request from a VM to store the data in a log structured volume. The access token is forwarded to the user authorization which generates user credentials that are passed back to the API . The user credentials include for example an access control list ACL that identifies one or more users authorized to access the data. The key generator receives the user credentials and generates a user key which is used to encrypt the data before the data is stored in the log structured volume. The key is then wrapped to produce a wrapped key . A key resource is produced that includes a data key identifier and a data key wrapper e.g. the wrapped key . The data key wrapper contains a data key identified by the data key identifier. The data key wrapper further contains the ACL that identifies the user s authorized to access the data.

Referring to the sequence includes unwrapping with user key for accessing the protected data within the cloud. For example upon creation of a VM e.g. by the same or a different user the API receives an access token e.g. from a remote device. In this example the access token is associated with a request by the user to access a snapshot of the data. The access token is forwarded to the user authorization which provides user credentials . The user credentials and key resource including the wrapped key are passed to the key generator . Upon verification that the user is authorized to access the data the wrapped key is un wrapped e.g. at the key store producing the user key . Cloud based credentials and a cloud based key are provided to the key store which creates a wrapped key .

Referring to the sequence includes using the cloud based wrapped key to gain access to the protected data in the cloud. For example the wrapped key and cloud based credentials are provided to the reconciler . If the user requesting access to the protected data is authorized to access the data then the wrapped key is un wrapped e.g. by the key store to provide the un wrapped key . In some implementations a key using process uses the un wrapped key to decrypt the data for access by the user on the VM.

In some implementations the reconciler includes processes that maintain long lived authorization access tokens that correspond to a user s access to data on the VM. The reconciler can request access tokens as necessary to un wrap keys. For example the reconciler can use its authorization services role credentials to have the key store unwrap a data key that is wrapped against the cloud cluster role.

In some implementations key store uses the authorization services credentials to gate access to master keys. For example master keys can be used to decrypt a wrapped key to locally reveal the ACLs associated with the keys. Key store can then verify that the identity corresponding with an access token e.g. access token has an entry in the ACL to allow access to its corresponding key. At that point the key store can return the key to a replicator process which will associate the key with the storage devices so long as the VM is active. The replicator can continue to use the same access token as it requires access to new keys in the course accessing the persistent disk. When the access token expires the replicator can request a new access token. Any processes holding keys or tokens can then wipe the containing memory as soon as the keys or tokens are no longer required.

In some implementations the log structured volume LSV determines whether to decrypt the data on reads e.g. if it has already been decrypted and always encrypts data on writes. In some implementations the LSV maintains within the block of metadata information about the encryption state of each block. LSV management tools further handle ACL or other cryptographic property changes on snapshot boundaries. For example when snapshot cryptographic properties change the changes are automatically updated in the new snapshot. In some implementations the cryptographic metadata associated with any given snapshot resides in a snapshot metadata segment that is stored within the data block. For snapshots that involve modifications to a data key e.g. for key rotation retirement etc. key management tools generate a new wrapped key. In some implementations the wrapped key set from the previous snapshot is copied to the metadata for the current snapshot.

Some implementations pass secret key material using secure calls and or transactions that are not logged. For example using secure calls can prevent secret key material from appearing in logs monitoring tools or other resources associated with standard calls and transactions. Further for processes that associate and maintain key information e.g. key state buffers with disks the key information does not include secret key material but rather only provides metadata about the key including the key type and the key identifier.

In some implementations key state objects that include secret key material are maintained in an internally managed cache. For example when a new VM instance is launched all of the secret key material is first passed as a VM specification in a cache using a secure call. A system process then adds key state objects scrubbed of their secret key material to the disks that constitute the VM. When the system process sends the VM specification as part of a VM creation the previously received secret key material is injected into the VM specification using the key identifiers to match up the key materials.

At a first request is received from a first virtual machine to store data in a log structured volume. As an example the server system can receive the request from a first VM e.g. VM A . The request can be to store data such as a newly created data file e.g. an accounting spreadsheet that the user e.g. User A created on the VM A .

At based on the request the data and an access control list ACL of one or more users authorized to access the data are obtained. For example the server system can receive the data to be stored e.g. the accounting spreadsheet from the user device that is accessing the VM. At the same time the server system can receive the ACL that identifies the users who are authorized to access the data e.g. Users A B and C 

At a data key is obtained that is identified by a data key identifier. For example the key management system can generate a data key e.g. an encryption key that is identified by a data key identifier assigned by the key management system .

At the data key and the access control list are encrypted using a wrapping key to generate a wrapped blob. At the data is encrypted using the data key to generate encrypted data. At the wrapped blob and the encrypted data are stored in the log structured volume. As an example the server system can store each on the LSV.

At the data key identifier is provided to one or more users on the access control list. For example the server system can provide the data key provided to all users who are authorized to access the data e.g. all users on the ACL associated with the data.

At a second request is received from a second virtual machine to obtain a snapshot of the data. As an example the same user e.g. User A or a different user e.g. User B can send a request to obtain a copy of the accounting spreadsheet. The request can include the data key identifier and an identification of the user making the request.

At based on the second request an unwrapped blob containing the data key and the access control list are obtained. At the data key and the access control list are obtained from the unwrapped blob. For example using the data key identifier the server system can request and receive the data key wrapper from the key management system .

At a user associated with the second request is authenticated the user is authorized against the access control list and it is determined whether the user is authenticated and authorized. As an example the server system can check the user credentials e.g. user identification associated with the request against the ACL to verify that the user e.g. User B is authorized to access the accounting spreadsheet.

At upon a determination that the user is authenticated and authorized the data is decrypted using the data key. For example if User B is identified as being on the ACL then the server system can use the data key to decrypt the accounting spreadsheet.

At a snapshot of the data is provided to the second virtual machine. As an example the server system can provide the accounting spreadsheet to User B for use on User B s VM.

Encryption and decryption that are performed by the process can occur on an individual block basis in addition to the encryption decryption of key material. In some implementations encryption decryption can be implemented using a multi threaded engine that cryptographically transforms chunks of data in parallel.

In some implementations a fixed pool of threads can be used for parallel block encryption and decryption. For example a default number of threads can be equal to the number of detected CPUs on the host e.g. the server system . In some implementations I O threads can use fixed segments of memory as shadow buffers. Then when it comes time to cryptographically transform the data the segments can be divided into chunks for individual threads in the cryptographic transform thread pool. In some implementations the default chunk size can be 512 KB or some other configurable size.

In some implementations bitmaps can be used to track encryption of disks on a delta disk basis. For example the blocks can include unencrypted blocks that do not contain any data sparse or blocks from an unencrypted base image. When the blocks are written and encrypted the bitmap can be updated. The bitmap mechanism can be used for example for temporary images only so that delta raw disk components of delta disks are encrypted while read only base raw disk components of delta disks are not. In some implementations opening an unencrypted raw disk base image for read write with encryption enabled can result in corrupting the base image for subsequent opens for other VMs.

At a threshold condition is established that is associated with storage of the data on the log structured volume where the threshold condition is usable for rotation of the data key. In some implementations the threshold condition includes an amount of data protected by the data key such as a number of blocks of data a number of files or some other measure of the amount of data protected by the data key at the current time. In some implementations the amount of data protected by the key is a cumulative amount such as the total amount of data protected over time using the same data key. In some implementations the threshold condition includes a time duration that the data key has been in use. For example maximum time durations for using a data key can be set to any number of hours days weeks etc.

At a determination is made that the threshold condition has occurred and the time has arrived to rotate the data key as described in the following steps. At a new data key identified by a new data key identifier is obtained. In some implementations the new data key can be received from the key management system .

At the data is decrypted using the data key i.e. the data key to be retired. This is the last use of the data key before its retirement.

At the new data key and the access control list are encrypted using the wrapping key to generate a new wrapped blob. At the data is encrypted using the new data key to generate encrypted data. At the new wrapped blob and the encrypted data are stored in the log structured volume. At the new data key identifier is provided to the one or more users on the access control list.

At the to be retired data key is destroyed. In some implementations destruction of the data key occurs by over writing the data key s storage location with arbitrary non key data.

At a threshold condition is established that is associated with storage of the data on the log structured volume where the threshold condition is usable for retirement of the data key. In some implementations the threshold condition includes a time duration that the data key has been in use e.g. to retire data keys that reach 120 days old.

At a determination that the threshold condition has occurred and retirement of the data key is initiated. The determination can occur for example by the occurrence of an alarm or by comparing the current date with the creation date of the data key to determine if the difference is enough to trigger the threshold condition.

At a new data key identified by a new data key identifier is obtained. For example the key management system can generate the new key and provide the key identifier for the new key.

At the new data key and the access control list are encrypted using the wrapping key to generate a new wrapped blob. At the data is encrypted using the new data key to generate encrypted data. At the new wrapped blob and the encrypted data are stored in the log structured volume. At the new data key identifier is provided to the one or more users on the access control list.

At the to be retired data key is destroyed. In some implementations destruction of the data key occurs by over writing the data key s storage location with null values clearing values ones or zeroes.

At access of the data is audited. In some implementations auditing the date occurs by tracking processes and users who access the data. At it is determined that the data has been accessed by a user not on the access control list and the data key has been compromised.

At action to replace the compromised data key is initiated. At a new data key identified by a new data key identifier is obtained.

At the new data key and the access control list are encrypted using the wrapping key to generate a new wrapped blob. At the data is encrypted using the new data key to generate encrypted data. At the new wrapped blob and the encrypted data are stored in the log structured volume. At the new data key identifier is provided to the one or more users on the access control list.

At the old data key is destroyed. In some implementations destruction of the data key occurs by over writing the data key s storage location with null values clearing values ones or zeroes.

In some implementations when a data key is rolled if the data key is in active use by a VM the conversion occurs in a non disruptive manner. For example the roll occurs without interrupting the VM s ability to use the disk as it normally would.

The host machines can connect to the Internet via respective local area networks LANs . In some implementations host machines are assigned IP addresses e.g. 134.130.78.11 224.10.202.6 that are visible on the Internet . Traffic on an inter host machine IP tunnel e.g. IP tunnel packets can be routed from the host machine on a first LAN to a host machine on a second LAN via the Internet tunnel carries traffic between VM and VM . Traffic on an intra host machine IP tunnel can be routed completely inside a host machine

The VM gateway can route traffic between the Internet and the virtual network by changing source or destination address information in packet headers so that the address space of the virtual network is hidden behind the IP address of the gateway . In particular packets arriving at the gateway from the Internet and bound for the virtual network have their IP datagram destination address changed from that of the gateway e.g. 134.130.78.1 or 224.10.202.1 to the IP address of a destination VM e.g. 192.168.1.10 . Packets arriving at the gateway from the virtual network and bound for the Internet have their IP source address changed from that of a VM e.g. 192.168.1.10 to the IP address of the VM gateway visible on the Internet e.g. 134.130.78.1 224.10.202.1 . Based on the virtual network using a private subnet the VM gateways can perform network address translation NAT to translate between private subnet addresses and public addresses.

Virtual machines running on the host machines can run processes such as webserver processes that interact with browser software running on clients . A client can be a data processing apparatus such as for example a server a personal computer a laptop computer a smart phone a television with one or more processors embedded therein or coupled thereto an embedded device e.g. a smart power meter or a tablet computer. In this example client communicates with a VM e.g. VM by sending IP packets to a VM gateway . In turn the VM gateway encapsulates the packets from the client and sends the encapsulated packets to the host machine running VM via an IP tunnel . The host machine running VM can de encapsulate the packets and deliver the packets to VM 

IP traffic on the virtual network can be carried by IP tunnels. Host machines can perform IP encapsulation and de encapsulation for IP traffic to and from each VM . Encapsulated IP traffic from one VM can be sent to another VM via IP tunneling. An IP tunnel can provide a transport layer. For example IP tunneling can include sending an IP tunnel packet that includes an encapsulated packet. The encapsulated packet can be an IP packet. Other types of encapsulated packets are possible. In some cases an IP tunnel can both originate and terminate on the same host machine e.g. source and destination VMs are on the same host machine . In some cases an IP tunnel can originate at one host machine and terminate at a different host machine e.g. source and destination VMs are on different host machines . IP tunnel traffic between the host machines can be carried over a virtual private network VPN via a network such as the Internet.

Host machines can use a virtual network routing table to retrieve the endpoint locations of the IP tunnels. In some implementations based on an input VM identifier or VM IP address a virtual network routing table can provide a routable IP address on network that corresponds to the host machine that runs the VM associated with the input VM identifier or VM IP address.

Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on computer storage medium for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be or be included in a computer readable storage device a computer readable storage substrate a random or serial access memory array or device or a combination of one or more of them. Moreover while a computer storage medium is not a propagated signal a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium can also be or be included in one or more separate physical components or media e.g. multiple CDs disks or other storage devices .

The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer readable storage devices or received from other sources.

The term data processing apparatus encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer a system on a chip or multiple ones or combinations of the foregoing The apparatus can include special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit . The apparatus can also include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system a cross platform runtime environment a virtual machine or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures such as web services distributed computing and grid computing infrastructures.

A computer program also known as a program software software application script or code can be written in any form of programming language including compiled or interpreted languages declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine object or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor can receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally a computer can also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a television with one or more processors embedded therein or coupled thereto a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few. Devices suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN an inter network e.g. the Internet and peer to peer networks e.g. ad hoc peer to peer networks .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other. In some embodiments a server transmits data e.g. an HTML page to a client device e.g. for purposes of displaying data to and receiving user input from a user interacting with the client device . Data generated at the client device e.g. a result of the user interaction can be received from the client device at the server.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any inventions or of what may be claimed but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Thus particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous.

