---

title: Smart error recovery for database applications
abstract: A database server includes logic that is operable to monitor and analyze at least events occurring within an environment of the database server and/or execution errors generated by the database server in order to detect whether a problem condition exists. The database server further includes logic that is operable to send one or more commands to a database driver of a client that is communicatively connected to the database server, the one or more commands specifying one or more actions to be taken by the database driver in response to the existence of the problem condition. The database driver includes logic that is operable to receive the one or more commands from the database server and logic that is operable to cause the one or more commands to be executed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09235464&OS=09235464&RS=09235464
owner: Microsoft Technology Licensing, LLC
number: 09235464
owner_city: Redmond
owner_country: US
publication_date: 20121016
---
A database server is a software product that provides database services to software applications sometimes referred to as database applications in response to requests received therefrom. Such database services may include but are not limited to storing retrieving analyzing or manipulating database data. Depending upon the implementation the database applications may be running on the same machine on which the database server is running or may be running on other machines that are connected to the machine on which the database server is running via one or more networks. To send requests to the database server a database application opens a connection to the database server and establishes therewith what is referred to as a session. A session represents an ongoing interactive information exchange between the database application and the database server. Typically a session is set up or established at a certain point in time and then torn down at a later point in time. An established session often involves the sending of more than one message from the database application to the database server and from the database server to the database application.

A database application that has connected to a remote database server in the manner set forth above may experience errors due to failures or other problems occurring at the database server or in the environment of the database server sometimes referred to as the back end . Such errors may cause the database application and even the database server to simply stop working. To address this issue logic may be included in the database application that is configured to receive error messages from the database server and to perform operations in response to receiving those error messages. However including such logic in the database application makes it more difficult to develop such application and causes such application to be more complex. Furthermore it is possible that the database application cannot be programmed to anticipate all possible error codes or messages generated by the database server.

Furthermore when a database application experiences errors due to a back end problem or due to a problem with the application itself information technology IT professionals database administrators DBAs and developers are mobilized to understand the nature of the problem. However troubleshooting production environments can be challenging due to time constraints lack of tools and other limitations. For example troubleshooting a large number of instances of a database application can be challenging in a large scale deployment when local interaction with each database application is required to perform such troubleshooting.

Systems and methods are described herein that facilitate the performance of smart error recovery operations for database applications. As will be discussed herein smart error recovery is achieved by a database driver that is configured to perform database operations on behalf of a database application wherein both the database application and database driver are installed on a client. The database driver is further configured to perform operations to intelligently recover from a database server failure. Such intelligent recovery may involve for example restoring the database application and or database server to a good state after a database server failure. The smart error recovery operations performed by the database driver may be performed based on intelligence located within the database driver itself as well as additional information passed from the database server to the database driver.

In accordance with certain embodiments described herein a database server includes logic that is operable to monitor and analyze at least events occurring within an environment of the database server and or execution errors generated by the database server in order to detect whether a problem condition exists. The database server further includes logic that is operable to send one or more commands to a database driver of a client that is communicatively connected to the database server the one or more commands specifying one or more actions to be taken by the database driver in response to the existence of the problem condition.

In one embodiment the database server is operable to send the one or more commands to the database driver within a context of a session established between the database server and the client as part of an application layer request response protocol such as a Tabular Data Stream MS TDS protocol. In further accordance with such an embodiment the database server may be operable to add the one or more commands to a response that is to be transmitted from the database server to the database driver. In an alternate embodiment a gateway device that is communicatively connected between the database server and the client may also be operable to send the one or more commands to the database driver.

In a further embodiment the problem condition that is detected is a failover from the database server to an alternate database server. In further accordance with such an embodiment the one or more commands that are sent to the database driver may include at least one command that indicates a time period during which the database driver should not try to reconnect to the database server. In a still further embodiment the one or more commands that are sent to the database driver include at least one command that is configured to cause the database driver to collect information such as one or more performance related or usage related parameters.

In further accordance with certain embodiments described herein a client that is communicatively connected to a database server includes a database driver that is operable to receive one or more commands from the database server the one or more commands specifying one or more actions to be taken by the database driver in response to a problem condition identified by the database server. The database driver further includes logic that is operable to cause the one or more commands to be executed.

In one embodiment the database driver is operable to receive the one or more commands within a context of a session established between the database server and the client as part of an application layer request response protocol such as an MS TDS protocol. In further accordance with such an embodiment the database driver may be operable to extract the one or more commands from a response received from the database server within the context of the session.

In a further embodiment the client database driver operable to execute the one or more commands by preventing attempts to reconnect to the database server from occurring during a predetermined time period. In another embodiment the database driver is operable to execute the one or more commands by causing information such as one or more performance related or usage related parameters to be tracked. In further accordance with such an embodiment the database driver may also be operable to cause the collected information to be sent to a remote entity.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Moreover it is noted that the claimed subject matter is not limited to the specific embodiments described in the Detailed Description and or other sections of this document. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit s in the corresponding reference number.

The following detailed description refers to the accompanying drawings that illustrate exemplary embodiments of the present invention. However the scope of the present invention is not limited to these embodiments but is instead defined by the appended claims. Thus embodiments beyond those shown in the accompanying drawings such as modified versions of the illustrated embodiments may nevertheless be encompassed by the present invention.

References in the specification to one embodiment an embodiment an example embodiment or the like indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Furthermore when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of persons skilled in the relevant art s to implement such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

Generally speaking embodiments described herein may be used to cause a client executing a database application to perform certain desired actions or avoid certain undesired actions in response to the detection of trouble conditions occurring at or in the environment of a database server to which the client is communicatively connected. For example in accordance with certain embodiments described herein the client may be prohibited from attempting to reconnect to the database server for a predetermined time period if it is determined that the database server is failing over to an alternate database server. As another example in accordance with certain embodiments described herein the client may be instructed to start collecting certain performance related data usage related data or other information that may be helpful in troubleshooting a problem condition. Such collected information may subsequently be uploaded or otherwise transmitted from the client to the database server or some other entity to be analyzed alone in or in conjunction with other information collected from other clients.

As will be described herein to detect whether a problem condition exists a database server in accordance with an embodiment includes logic that is operable to monitor and analyze events occurring within an environment of the database server and or execution errors generated by the database server. In further accordance with such an embodiment the database server further includes logic that is operable to send one or more commands to a database driver of the client in response to the detection of a problem condition the one or more commands specifying one or more actions to be taken by the database driver in response to the existence of the problem condition. As also will be described herein a database driver in accordance with an embodiment includes logic that is operable to receive the one or more commands from the database server and logic that is operable to cause the one or more commands to be executed.

In one embodiment the database server is operable to send the one or more commands to the database driver within a context of a session established between the database server and the client as part of an application layer request response protocol such as a Tabular Data Stream MS TDS protocol. In further accordance with such an embodiment the database server may be operable to add the one or more commands to a response that is to be transmitted from the database server to the database driver. In this manner an existing request response protocol can be leveraged to carry the one or more commands. In an alternate embodiment a gateway device that is communicatively connected between the database server and the client may also be operable to send the one or more commands to the database driver.

The components described above can advantageously be utilized to perform smart error recovery operations for database applications. For example in accordance with the foregoing description the database driver can be configured to perform operations to intelligently recover from a database server failure. Such intelligent recovery may involve for example restoring a database application and or a database server to a good state after a database server failure. The smart error recovery operations performed by the database driver may be performed based on intelligence located within the database driver itself as well as additional information passed from the database server to the database driver. In accordance with certain implementations the one or more commands transmitted from the database server to the database driver may include code such as methods algorithms or dynamic scripts which can be executed by or on behalf of the database driver. Alternatively or additionally processing of the one or more commands by the database driver may cause certain code resident in the database driver to be activated.

By enabling various operations to be performed by the database driver in response to commands received from the database server certain embodiments described herein enable users of database applications to reap the benefits of fine grained database server control over the database application without having to implement additional logic in the application layer.

Although the embodiments described herein are implemented in systems that include database servers and clients persons skilled in the relevant art s will readily appreciate that the concepts described herein can easily be extended to any system in which a session or other ongoing interactive information exchange is established between a first entity and a second entity. Such systems may include but are not limited to any of a wide variety of client server systems peer to peer systems or the like.

As shown in system includes a database server and a client that is communicatively connected thereto via a communication channel . Database server is intended to represent an entity that performs operations with respect to data stored in one or more databases that are accessible thereto in response to receiving commands generated by clients such as client via communication channel . The operations performed by database server may include for example storing retrieving analyzing and or manipulating database data. Database server may be implemented as software executing on a single machine or across multiple machines. As will be appreciated by persons skilled in the relevant art s such machines may comprise physical machines or virtual machines. In one embodiment database server comprises an instance of MICROSOFT SQL SERVER published by Microsoft Corporation of Redmond Wash. However this is an example only and is not intended to be limiting.

In one embodiment database server comprises a standalone database server configured to execute commands received from one or more clients such as client . In an alternate embodiment database server comprises one of a plurality of database server instances running on a cluster of machines and employed to service requests from a plurality of clients such as client in a manner that allows for failover and high availability. In a further embodiment database server comprises one of a plurality of database server instances used to implement a cloud database service such as but not limited to MICROSOFT SQL AZURE offered by Microsoft Corporation of Redmond Wash.

Client is intended to represent an entity that generates and sends commands to database server for execution thereby. Such commands may include for example commands to store retrieve analyze and or manipulate database data. Like database server client may be implemented as software executing on one or more machines.

Client and database server may each be executed by different machines that are connected to each other via a particular communication infrastructure. In further accordance with such an implementation communication channel may be established in a manner that corresponds to the particular communication infrastructure. For example in an embodiment in which the communication infrastructure comprises a network such as a local area network LAN or wide area network WAN well known networking protocols may be used to establish communication channel between the two machines. As another example in an embodiment in which database server comprises part of a cloud database service communication channel may be established via a gateway machine that acts as an intermediary between the machine on which client is running and the machine on which database server is running Still other communication infrastructures and associated methods for establishing communication channel are possible.

It is also possible that client and database server may be executing on the same machine. In accordance with such an implementation communication channel may comprise one or more interfaces that are internal to the machine upon which both entities are executing.

Generally speaking communication channel is used to transport commands generated by client to database server so that database server may execute such commands Database server may also return requested data error messages or other information to client via communication channel . In accordance with certain embodiments the manner in which information is exchanged between client and database server is governed by a standard application layer request response protocol that is supported by both entities. For example in a particular embodiment the application layer protocol comprises the Tabular Data Stream MS TDS protocol as defined in Version 20120328 of the Tabular Data Stream Protocol Specification published by Microsoft Corporation of Redmond Wash. However this is only an example and other protocols may be used.

In one embodiment to interact with database server for the purpose of invoking the database services thereof client connects to database server and establishes a session therewith. In further accordance with such an embodiment database server authenticates client and or a user thereof as part of establishing the session.

As shown in database server includes an environment reader and a problem detection engine . Environment reader comprises logic that is operable to identify and monitor events occurring in an environment of database server and to pass information about such events to problem detection engine . Monitoring events occurring in the environment of database server may comprise for example monitoring information generated by or otherwise related to one or more processes devices systems or interfaces used to implement database server or to which database server may be connected either directly or indirectly. Such monitoring may comprise for example monitoring changes in the resource utilization or operational state of any such process device system or interface. However this example is not intended to be limiting.

Environment reader may be configured to pass only certain types of event information to problem detection engine . For example environment reader may be configured to only pass information to problem detection engine about events that could impact the performance of database server . For example in one embodiment environmental reader is configured to only pass information to problem detection engine about events that could cause database server to fail or that would tend to indicate that database server will fail including for example a fail over to an alternate database server . However this is only and example and information about other types of events may also be selectively passed from environment reader to problem detection engine .

Problem detection engine comprises logic that is operable to process the event information received from environment reader to determine whether or not a problem condition exists that would necessitate communication with client . Problem detection engine may also include logic that is operable to analyze execution errors generated by database server to determine if such a problem condition exists. Problem detection engine further includes logic that sends one or more commands to client via communication channel in response to determining that such a problem condition exists. The one or more commands may specify one or more actions to be taken by client in response to the problem condition.

In one embodiment problem detection engine is configured to send the one or more commands to client within a context of a session established between database server and client as part of an application layer request response protocol such as but not limited to the aforementioned MS TDS protocol. In further accordance with such an embodiment problem detection engine may be configured to add the one or more commands to a response that is to be transmitted from database server to client . By piggy backing the one or commands onto the response in this manner the request response protocol can be leveraged to carry the one or more commands.

In an alternate embodiment problem detection engine is configured to send the one or more commands to client out of band with respect to a session that has been established between database server and client . Such out of band communication may be carried out for example by establishing a separate session between database server and client for the purpose of carrying the one or more commands. Still other communication channels may be established between database server and client for carrying the one or more commands there between.

In accordance with certain embodiments problem detection engine is further configured to execute actions that are intended to prevent database server from failing in response to detecting the problem condition.

As further shown in client includes a command reader and a command processor . Command reader comprises logic that is operable to receive the one or more commands sent from database server over communication channel . In one embodiment command reader comprises a subset of logic within client that operates to parse packetized data received from database server in accordance with MS TDS or some other application layer protocol and to extract information therefrom. In the case of command reader the extracted information includes the one or more commands. As noted above such commands may comprise part of a response that was sent from database server in accordance with the application layer protocol.

Command processor comprises logic that is operable to execute the one or more commands received by smart error reader . Execution of the one or more commands may enable client to recover from certain error situations. In one example embodiment command processor executes the one or more commands by preventing client from attempting to reconnect to database server during a predetermined time period. Such behavior may be appropriate for example when database server is failing over to an alternate database server and attempts to reconnect thereto would be futile and consume resources unnecessarily. In certain embodiments rather than simply receiving and executing a command that prevents reconnection attempts for a predetermined time period command processor may be configured to automatically select between waiting to reconnect to database server or causing a database application executing on client to fail based upon the duration of the predetermined time period.

In a further example embodiment command processor executes the one or more commands by causing information to be collected by client . Such collected information may include for example one or more performance related or usage related parameters. The collected information may be helpful in troubleshooting a problem condition. Such collected information may subsequently be uploaded or otherwise transmitted from client to database server or some other entity to be analyzed alone in or in conjunction with other information collected from other clients.

In a still further example embodiment command processor executes the one or more commands by causing a database application executing on client to simply retry sending a command to database server .

In certain embodiments command processor is configured to perform only a limited number of actions in response to execution of the one or more commands. Limiting the number of actions that can be performed by command processor in this manner can help to reduce the risks associated with arbitrary remote code execution.

More information regarding the structure function and operation of the components of system in accordance with various implementations will now be provided in regard to .

In particular is a block diagram that illustrates various elements of client in accordance with one example embodiment. As shown in in the example embodiment client comprises a database application and a database driver . Database application comprises a software program that enables a user thereof to perform various functions at least some of which require database operations to be performed. In order to facilitate the performance of such database operations database application is programmed to interact with database driver . Database driver comprises a software component that operates to establish a connection between database application or any of a variety of other applications and a database server and to utilize such connection for the purpose of obtaining services from the database server.

In one embodiment database driver provides an application programming interface API that can be used by any of a variety of database applications to invoke the functionality thereof. As further shown in database driver also includes a command processor a parser and a protocol layer . Command processor is intended to represent one implementation of command processor described above in reference to system of and thus performs the functions attributed herein to that component. Parser is a software component that is configured to encode commands to be sent to a database server and to interpret information received therefrom in accordance with a particular application layer protocol such as but not limited to MS TDS. As shown in parser includes a command reader which is intended to represent one implementation of command reader described above in reference to system of and thus performs the functions attributed herein to that component. Protocol layer is intended to represent one or more software component s utilized by database driver to carry encoded commands produced by parser to a database server and to receive encoded information therefrom.

In accordance with the embodiment shown in the functions performed by command reader and command processor in relation to receiving and executing commands from a database server are performed at the level of database driver rather than at the level of database application . This is advantageous in that it allows database applications that are designed to invoke database driver such as database application to reap the benefits of these functions e.g. the ability to recover from and or appropriately react to problem conditions detected by a database server that is connected to client while relieving programmers of such database applications from having to program the database applications to support such functions. Additionally by incorporating such functionality at the database driver level rather than the database application level embodiments described herein can advantageously reduce the complexity of such database applications.

As shown in the method of flowchart begins at step in which a database server such as database server monitors at least one of events occurring in an environment of a database server and execution errors generated by the database server. As discussed above the monitoring of events occurring in an environment of the database server may be performed by environment reader of or environment reader of . As also discussed above the monitoring of execution errors generated by the database server may be performed by problem detection engine of or problem detection engine of .

At step the database server detects a problem condition based upon an analysis of at least one of the monitored events and the monitored execution errors. As discussed above the detection of the problem condition based upon the analysis of the at least one of the monitored events and the monitored execution errors may be performed by problem detection engine of or problem detection engine of .

In one embodiment step comprises detecting that a failover from the database server to an alternate database server is going to occur. However this is only one example and persons skilled in the relevant art s will appreciate that a wide variety of different problem conditions may be detected.

At step in response to detecting the problem condition the database server sends one or more commands to a database driver of a client that is communicatively connected to the database server such as client . The one or more commands specify one or more actions to be taken by the database driver in response to the problem condition. As discussed above the sending of the one or more commands to the database driver may be performed by problem detection engine of or problem detection engine of .

In one embodiment step comprises sending the one or more commands to the database driver within a context of a session established between the database server and the client as part of an application layer request response protocol such as but not limited to the aforementioned MS TDS protocol. In accordance with such an embodiment step may further comprise generating a response to a request received from the database driver adding the one or more commands to the response and transmitting the modified response to the database driver. As noted above by piggy backing the one or commands onto the response in this manner the request response protocol can be leveraged to carry the one or more commands.

In a further embodiment step comprises sending at least one command to the database driver that indicates a time period during which the database driver should not try to reconnect to the database server. As discussed above by preventing the database driver from trying to reconnect during certain time periods e.g. when a failover is occurring from the database server to an alternate database server the unnecessary consumption of resources associated with failed reconnect attempts can be mitigated or avoided entirely.

In a still further embodiment step may comprise sending at least one command to the database driver that is configured to cause the database driver to collect information such as one or more parameters relating to the performance or usage of the client the performance or usage of a database application executing on the client the performance or usage of a query being executed by the database application or the like. As discussed above the information that is collected may be helpful in troubleshooting the problem condition detected by the database server or some other problem condition. Such collected information may subsequently be uploaded or otherwise transmitted from the client to the database server or some other entity to be analyzed alone in or in conjunction with other information collected from other clients.

The one or more commands that are sent to the database driver may also cause the database driver to perform other useful operations or may be used to provide the database driver with useful information. For example the one or more commands may instruct the database driver concerning how to react to certain classes of errors may cause the database driver to switch a connection from one database server to an alternate database server in a manner that is transparent to a client database application to gather performance or usage data from the client perspective and transmit such data to a database server or other remote entity to gather error data from the client perspective and transmit such data to a database server or other remote entity to control a rate at which database operations are transmitted to a database server to update the database driver to a new version to flush client side caches of server information and force them to be refreshed to cause the client to refresh a cached view or even portions of a cached view of some database server data to transmit a new set of mappings to the client for fan out or partitioned query support to update or manage the client connection strings or logical mappings between a logic name and a data source. These are merely a few examples of how such commands may be used. Such examples are not intended to be limiting.

In accordance with certain implementations the one or more commands transmitted from the database server to the database driver may include code such as methods algorithms or dynamic scripts which can be executed by or on behalf of the database driver. Alternatively or additionally processing of the one or more commands by the database driver may cause certain code resident in the database driver to be activated.

In accordance with the method of flowchart the one or more commands that are sent to the database driver are sent automatically in response to the detection of a problem condition. In accordance with a further embodiment the database server or a device or system communicatively connected thereto provides an interface by which an information technology IT professional database administrator DBA or other authorized person can also cause such commands to be sent to the database driver via the database server. For example in one implementation an IT professional DBA or other authorized person can interact with the interface to cause one or more commands to be sent to the database driver that will cause the database driver to begin collecting information that is useful for troubleshooting a problem condition. Such an interface advantageously enables the IT professional DBA or other authorized person to leverage an existing connection between the database server and the client to perform telemetry tasks useful for troubleshooting problem conditions. Such an interface also advantageously enables such troubleshooting to be initiated remotely and from a central location as opposed to requiring direct and local interaction with each and every client that is involved in performing the troubleshooting analysis. The interface can further be used to remotely instruct clients to turn off tracking.

Although the steps of flowchart are described above as being performed by a database server it is to be understood that in alternate implementations other devices and systems may perform these steps. For example in one embodiment a device or system that is connected to the database server may perform step while the database server performs steps and . In another embodiment a device or system that is connected to the database server may perform steps and while the database server performs step .

As another example in one embodiment a gateway device that is communicatively connected between a database server and a client may operate to perform any one or all of the steps of flowchart . Such an implementation may be used for example where the database server is one of a plurality of database server instances used to implement a cloud database service such as but not limited to MICROSOFT SQL AZURE offered by Microsoft Corporation of Redmond Wash. and wherein such database server instances are accessed by clients via one or more gateway devices.

As shown in the method of flowchart begins at step in which a client such as client receives one or more commands from a database server. The one or more commands specify one or more actions to be taken by the client in response to a problem condition identified by a database server such as database server . As discussed above the receiving of the one or more commands may be performed by command reader of or command reader of .

In one embodiment step comprises receiving the one or more commands within a context of a session established between the database server and the client as part of an application layer request response protocol such as but not limited to the aforementioned MS TDS protocol. In further accordance with such an embodiment step may comprise extracting the one or more commands from a response received from the database server within the context of the session.

At step the client executes the one or more commands that were received during step . As discussed above the executing of the one or more commands may be performed by command processor of or command processor of .

In one embodiment step comprises preventing attempts to reconnect to the database server from occurring during a predetermined time period. As discussed above by preventing the client from trying to reconnect during certain time periods e.g. when a failover is occurring from the database server to an alternate database server the unnecessary consumption of resources associated with failed reconnect attempts can be mitigated or avoided entirely.

In a further embodiment step comprises causing information to be collected by the client. The information that may be collected may include parameters relating to the performance or usage of the client the performance or usage of a database application executing on the client the performance or usage of a query being executed by the database application or the like. As discussed above the information that is collected may be helpful in troubleshooting the problem condition detected by the database server or some other problem condition. In further accordance with such an embodiment step may further comprise subsequently uploading or otherwise transmitting the collected information from the client to the database server or some other remote entity to be analyzed alone in or in conjunction with other data collected from other clients.

In certain other embodiments step may comprise performing other useful operations or receiving useful information. For example step may comprise receiving information concerning how to react to certain classes of errors switching a connection from one database server to an alternate database server in a manner that is transparent to a client database application gathering performance or usage data from the client perspective and transmitting such data to a database server or other remote entity gathering error data from the client perspective and transmitting such data to a database server or other remote entity controlling a rate at which database operations are transmitted to a database server updating a database driver to a new version flushing client side caches of server information and forcing them to be refreshed causing the client to refresh a cached view or even portions of a cached view of some database server data providing a new set of mappings to the client for fan out or partitioned query support updating or managing client connection strings or logical mappings between a logic name and a data source. However these are merely a few non limiting examples.

In accordance with certain implementations step may comprise executing code received from the database server during step such as methods algorithms or dynamic scripts. Alternatively or additionally step may comprise causing certain code resident in the client such as in a database driver of the client to be activated.

As shown in system includes a processing unit a system memory and a bus that couples various system components including system memory to processing unit . Processing unit may comprise one or more processors or processing cores. Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. System memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS is stored in ROM .

System also has one or more of the following drives a hard disk drive for reading from and writing to a hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM DVD ROM BLU RAY disk or other optical media. Hard disk drive magnetic disk drive and optical disk drive are connected to bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the computer. Although a hard disk a removable magnetic disk and a removable optical disk are described other types of computer readable media can be used to store data such as flash memory cards digital video disks random access memories RAMs read only memories ROM and the like.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM. These program modules include an operating system one or more application programs other program modules and program data . In accordance with various embodiments the program modules may include computer program logic that is executable by processing unit to perform any or all of the functions and features of client or database server as described above in reference to as well as various sub components thereof as described elsewhere herein. The program modules may also include computer program logic that when executed by processing unit performs any of the steps or operations shown or described in reference to the flowcharts of .

A user may enter commands and information into system through input devices such as a keyboard and a pointing device . Other input devices not shown may include a microphone joystick game controller scanner or the like. In one embodiment a touch screen is provided in conjunction with a display to allow a user to provide user input via the application of a touch as by a finger or stylus for example to one or more points on the touch screen. These and other input devices are often connected to processing unit through a serial port interface that is coupled to bus but may be connected by other interfaces such as a parallel port game port or a universal serial bus USB .

A display is also connected to bus via an interface such as a video adapter . In addition to display system may include other peripheral output devices not shown such as speakers and printers.

System is connected to a network e.g. a local area network or wide area network such as the Internet through a network interface or adapter a modem or other suitable means for establishing communications over the network. Modem which may be internal or external is connected to bus via serial port interface .

As used herein the terms computer program medium and computer readable medium are used to generally refer to non transitory media such as ROM and RAM used to implement system memory the hard disk associated with hard disk drive removable magnetic disk removable optical disk as well as other media such as flash memory cards digital video disks and the like.

As noted above computer programs and modules including application programs and other program modules may be stored on ROM RAM the hard disk associated with hard disk drive the removable magnetic disk or the removable optical disk . Such computer programs may also be received via network interface or serial port interface . Such computer programs when executed by processing unit enable system to implement features of embodiments discussed herein. Accordingly such computer programs represent controllers of system .

Embodiments are also directed to computer program products comprising software stored on any computer readable medium. Such software when executed in one or more data processing devices causes a data processing device s to operate as described herein. Embodiments may employ any computer useable or computer readable medium known now or in the future. Examples of computer readable mediums include but are not limited to storage devices such as ROM RAM hard drives floppy disks CD ROMs DVD ROMs zip disks tapes magnetic storage devices optical storage devices MEMS based storage devices nanotechnology based storage devices and the like.

In alternative implementations each of client and database server as described above in reference to as well as various sub components thereof may be implemented as hardware logic electrical circuitry or firmware. In accordance with further embodiments one or more of these components may be implemented in a system on chip SoC . The SoC may include an integrated circuit chip that includes one or more of a processor e.g. a microcontroller microprocessor digital signal processor DSP etc. memory one or more communication interfaces and or further circuits and or embedded firmware to perform its functions.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. It will be apparent to persons skilled in the relevant art s that various changes in form and details can be made therein without departing from the spirit and scope of the invention. Thus the breadth and scope of the present invention should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

