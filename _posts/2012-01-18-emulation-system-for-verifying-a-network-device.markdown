---

title: Emulation system for verifying a network device
abstract: Various embodiments of the present invention are generally directed to a method and system for functionally verifying a network device design programmed into a hardware logic verification system. The method and system encapsulates and de-encapsulates test patterns generated by a tester application into and out of network packets, which are further encapsulated into and de-encapsulated from enclosing data packets for fast and efficient delivery to the network device. Such method and system decreases functional verification times for a network device DUT while requiring little to no modification of existing tester applications and functional verification hardware.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08743735&OS=08743735&RS=08743735
owner: Cadence Design Systems, Inc.
number: 08743735
owner_city: San Jose
owner_country: US
publication_date: 20120118
---
The present patent document relates generally to the functional verification of networking devices. In particular the present patent document relates to a method and system for delivering test patterns including network packets between a network tester application and a networking device design under test in a processor based simulation acceleration emulation system.

Networking devices are frequently tested using a network tester application that creates test patterns to flood a network device with packets. A typical test setup includes a tester application running on a workstation that has network ports connected to the network device. A typical packet contains digital data organized with a pre determined pattern and includes header information as well as a payload. The tester application manages the outgoing and incoming test patterns commonly including Ethernet frames or internet protocol IP datagrams monitoring the performance of the network device under various test conditions. The tester application can then create reports and statistics for the network device enabling manufacturers to understand and improve upon the performance of the network device. Exemplary tester applications are commercially available from Spirent Corporation and IXIA Corporation.

Prior to manufacture hardware designers frequently employ simulators and or emulators to verify the functional behavior of the electronic devices and systems fabricated in accordance with their designs. One type of verification system for a hardware device under test DUT is a processor based simulation acceleration emulation system hereafter emulator in communication with one or more workstations that send stimuli to and from a DUT. Such stimuli can include digital test vectors or real signals from a logic system in which the DUT is intended for installation sometimes referred to as a target system . For the specific case of a network DUT a network tester application running on the workstation transmits test patterns i.e. a collection of digital signals to the emulator and also receives test patterns back from the network DUT residing on the emulator. The test patterns sent to the emulator for the network DUT of course depend on the nature of the network DUT. A network DUT that will operate as an IP router once manufactured will need to receive IP datagrams as that is the protocol that it would encounter in real world use. In the case of multiple tester applications sending and receiving test patterns and test patterns to and from the network DUT multiple ingress and egress channels to the emulator are required. These channels may connect the emulator with a single workstation or multiple workstations at the choosing of the user of the system. In general the delay caused by sending stimuli over the communication channels between a workstation and an emulator are substantial resulting in relatively long functional verification times.

One way to increase the speed of the communication channel between a workstation and an emulator is through the use of a speedbridge. A speedbridge is a hardware devices that connects an emulated DUT to a workstation running a network tester application where the workstation outputs stimuli in the format of a standard network communications protocol for example transmission control protocol TCP IP or Ethernet. A speedbridge is capable of buffering data received on its network side and reproducing the same data on its emulator side. A speedbridge can map the network communications protocol into a protocol recognized by the DUT of the emulator for example the commonly used media independent interface MII including 10 gigabit MII XGMII . Use of a speedbridge presents several downsides most notably that a speedbridge represents additional hardware adding to the cost and complexity of the functional verification process. If a single speedbridge supports a single channel a thirty two channel network DUT requires the use of thirty two speedbridges. These additional hardware components are costly and take up additional physical space. The introduction of further hardware components also decreases the overall reliability of the system by introducing additional sources of potential failure. Furthermore the ability to verify a network DUT using a particular network protocol is limited to the available speedbridges that support that protocol. For example a speedbridge supporting Ethernet may be available but any number of other networking protocols may have no speedbridge available.

An alternative method to increase the speed of functional verification in a system is to employ acceleration techniques including a technique known as transaction based acceleration TBA . In general TBA operates by partitioning test bench functionality between a workstation and an emulator and minimizing the volume of information transferred between the two across their connecting communication channel. When properly implemented TBA may substantially decrease functional verification time by a substantial reduction of delay across the communication channel.

Network tester applications used to test network devices are available from various suppliers and it is desirable to use these tester applications during functional verification of a design under test in an emulator. These tester applications in addition to supplying the network device with test patterns monitor protocol compliance by the network DUT characterize its performance in response to testing stimuli provide a graphical user interface for the user of the functional verification system and generate reports based on the results of the network tests. As such tester applications are used for functional verification of an emulated network DUT. However the use of acceleration techniques frequently requires that a tester application for a network DUT be modified rewritten or written entirely from scratch increasing the time and cost of functional verification of a network DUT.

A method and system for delivering test patterns including network packets between a network tester application and a networking device design under test in a processor based simulation acceleration emulation system is disclosed.

A first aspect of the method comprises programming the network device design into a hardware logic verification system comprised of a plurality of emulation resources establishing a network tunnel between a client endpoint and a server application of the hardware logic verification system wherein the network tunnel feeds a plurality of first data packets to a socket of the server application of the hardware logic verification system de encapsulating a second data packet generated by a tester application from within a first data packet of the plurality of first data packets wherein the second data packet comprises test patterns generated by the tester application and one or more second headers and wherein the first data packet includes one or more first headers in addition to the second data packet and receiving the test patterns at the programmed network device.

In another aspect of the method the tester application runs on a tester host and the programmed network device resides on a host different from the tester host.

In another aspect of the method the first data packet comprises a transaction of a transaction based acceleration methodology.

In another aspect of the method the steps of the method are performed in a particular order first programming the network device design into a hardware logic verification system comprised of a plurality of emulation resources second establishing a network tunnel between a client endpoint and a server application of the hardware logic verification system wherein the network tunnel feeds a plurality of first data packets to a socket of the server application of the hardware logic verification system third de encapsulating a second data packet generated by a tester application from within a first data packet of the plurality of first data packets wherein the second data packet comprises test patterns generated by the tester application and one or more second headers and wherein the first data packet includes one or more first headers in addition to the second data packet and fourth receiving the test patterns at the programmed network device.

Another aspect of the system comprises a hardware logic verification system comprised of a plurality of emulation resources and configured for performing a process comprising programming network device design into the hardware logic verification system establishing a network tunnel between a client endpoint and a server application of the hardware logic verification system wherein the network tunnel feeds a plurality of first data packets to a socket of the server application of the hardware logic verification system de encapsulating a second data packet generated by a tester application from within a first data packet of the plurality of first data packets wherein the second data packet comprises test patterns generated by the tester application and one or more second headers and wherein the first data packet includes one or more first headers in addition to the second data packet and receiving the test patterns at the programmed network device.

In another aspect of the system the second data packet comprises a transaction of a transaction based acceleration methodology.

In another aspect of the system the second data packet comprises a transaction of a transaction based acceleration methodology.

In another aspect of the system the hardware logic verification system comprised of a plurality of emulation resources is configured to perform the process steps in a particular order first programming network device design into the hardware logic verification system second establishing a network tunnel between a client endpoint and a server application of the hardware logic verification system wherein the network tunnel feeds a plurality of first data packets to a socket of the server application of the hardware logic verification system third de encapsulating a second data packet generated by a tester application from within a first data packet of the plurality of first data packets wherein the second data packet comprises test patterns generated by the tester application and one or more second headers and wherein the first data packet includes one or more first headers in addition to the second data packet and fourth receiving the test patterns at the programmed network device.

Another aspect comprises a computer readable non transitory storage medium having stored thereon a plurality of instructions the plurality of instructions when executed by a computer cause the computer to perform programming a network device design into a hardware logic verification system comprised of a plurality of emulation resources establishing a network tunnel between a client endpoint and a server application of the hardware logic verification system wherein the network tunnel feeds a plurality of first data packets to a socket of the server application of the hardware logic verification system de encapsulating a second data packet generated by the tester application from within a first data packet of the plurality of first data packets wherein the second data packet comprises test patterns generated by the network tester application and one or more second headers and wherein the first data packet includes one or more first headers in addition to the second data packet and receiving the test patterns at the programmed network device.

In another aspect the tester application runs on a tester host and the programmed network device resides on a host different from the tester host.

In another aspect the first data packet comprises a transaction of a transaction based acceleration methodology.

In another aspect the plurality of instructions stored on the computer readable non transitory storage medium are configured to perform the process steps in a particular order first programming a network device design into a hardware logic verification system comprised of a plurality of emulation resources second establishing a network tunnel between a client endpoint and a server application of the hardware logic verification system wherein the network tunnel feeds a plurality of first data packets to a socket of the server application of the hardware logic verification system third de encapsulating a second data packet generated by the tester application from within a first data packet of the plurality of first data packets wherein the second data packet comprises test patterns generated by the network tester application and one or more second headers and wherein the first data packet includes one or more first headers in addition to the second data packet and fourth receiving the test patterns at the programmed network device.

Another aspect comprises a computer readable non transitory storage medium having stored thereon a plurality of instructions the plurality of instructions when executed by a computer cause the computer to perform establishing a network tunnel between a client endpoint and a network device design programmed into a hardware logic verification system wherein the hardware logic verification system is comprised of a plurality of emulation resources generating a test pattern for a network device design by a tester application wherein the tester application runs on a host having computing resources including at least a processor encapsulating the test pattern within a first data packet wherein the first data packet includes one or more first headers in addition to the test pattern encapsulating the first data packet within a second data packet wherein the second data packet includes one or more second headers in addition to the first data packet and transmitting the second data packet from the client endpoint to the network device design.

In another aspect the tester application runs on a tester host and the programmed network device resides on a host different from the tester host.

In another aspect the second data packet comprises a transaction of a transaction based acceleration methodology.

In another aspect the plurality of instructions stored on the computer readable non transitory storage medium are configured to perform the process steps in a particular order first establishing a network tunnel between a client endpoint and a network device design programmed into a hardware logic verification system wherein the hardware logic verification system is comprised of a plurality of emulation resources second generating a test pattern for a network device design by a tester application wherein the tester application runs on a host having computing resources including at least a processor third encapsulating the test pattern within a first data packet wherein the first data packet includes one or more first headers in addition to the test pattern fourth encapsulating the first data packet within a second data packet wherein the second data packet includes one or more second headers in addition to the first data packet and fifth transmitting the second data packet from the client endpoint to the network device design.

The above and other preferred features described herein including various novel details of implementation and combination of elements will now be more particularly described with reference to the accompanying drawings and pointed out in the claims. It will be understood that the particular methods and systems are shown by way of illustration only and not as limitations of the claims. As will be understood by those skilled in the art the principles and features of the teachings herein may be employed in various and numerous embodiments without departing from the scope of the claims.

The figures are not necessarily drawn to scale and are only intended to facilitate the description of the various embodiments described herein the figures do not describe every aspect of the teachings disclosed herein and do not limit the scope of the claims.

A method and system for communicating between a network tester application and a networking device design under test in a processor based simulation acceleration emulation system is disclosed. Each of the features and teachings disclosed herein can be utilized separately or in conjunction with other features and teachings. Representative examples utilizing many of these additional features and teachings both separately and in combination are described in further detail with reference to the attached drawings. This detailed description is merely intended to teach a person of skill in the art further details for practicing preferred aspects of the present teachings and is not intended to limit the scope of the claims. Therefore combinations of features disclosed in the following detailed description may not be necessary to practice the teachings in the broadest sense and are instead taught merely to describe particularly representative examples of the present teachings.

In the following description for purposes of explanation only specific nomenclature is set forth to provide a thorough understanding of the present invention. However it will be apparent to one skilled in the art that these specific details are not required to practice the present invention.

Some portions of the detailed descriptions that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like. It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct a more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

Moreover the various features of the representative examples and the dependent claims may be combined in ways that are not specifically and explicitly enumerated in order to provide additional useful embodiments of the present teachings. It is also expressly noted that all value ranges or indications of groups of entities disclose every possible intermediate value or intermediate entity for the purpose of original disclosure as well as for the purpose of restricting the claimed subject matter. It is also expressly noted that the dimensions and the shapes of the components shown in the figures are designed to help to understand how the present teachings are practiced but not intended to limit the dimensions and the shapes shown in the examples.

Referring to switch is an example of any of a number of network equipment hardware components including switches routers network interface cards and the like capable of transmitting or receiving data packets in a computer network through ports designed for that purpose. Such data packets may conform to any number of networking protocols including Ethernet IP and Fibrechannel. In switch has four ports . In the case where port is an ingress port switch is capable of receiving data packets at port from tester host via communication channel . In the case where port is an egress port switch is capable of transmitting data packets from port to tester host via communication channel . Port may be an ingress port an egress port or both. Each of ports and similarly communicate with tester hosts and via communication channels and respectively. Each of ports and may also be an ingress port an egress port or both. Each of tester hosts are comprised of hardware and software that generates consumes tester data and data packets that are transmitted to received from the DUT.

Referring now to there is illustrated the transmission and receipt of data packets through a conventional network device having two ports. As before source tester application of source tester host generates test patterns to be transmitted to a network device that pass through the TCP IP stack to generate Ethernet frames encapsulating the test patterns. The tester applications and open up communication sockets and on their respective ends of the communication channel between them. The test patterns are addressed from source IP address 172.21.1.110 to the destination IP address of tester host at 172.21.13.89. The Ethernet frames are transmitted from source Ethernet port . Network device receives the data packets and routes them to destination Ethernet port of tester host using the destination IP address. The data packets pass through the TCP IP stack and are then received by the destination tester application .

For a network DUT having a greater number of ports than the two shown more tester hosts may be used each hosting a tester application to test each of the ports of the network device. Tester hosts need not be embodied in separate workstations a single workstation may have multiple ports to test multiple ports of a network device.

In the embodiment depicted in the tester application may also receive communications from the DUT. This receiving process is essentially the reverse of the transmission process just described wherein the transactor proxy model receives transactions from the DUT which are de encapsulated into IP datagrams that are forwarded to TBA application . The IP datagrams are then forwarded over the socket connection to network tunnel that inject them into OS TCP IP stack . OS TCP IP stack then de encapsulates the IP datagrams and forwards the test patterns for consumption by tester application .

Network tunnel device of is one type of virtual kernel network device. In another embodiment network tunnel device is replaced with a network tap device. In this alternative embodiment OS TCP IP stack encapsulates test patterns received from the tester application into Ethernet frames rather than IP datagrams as with a network tunnel that are transmitted from the network tap device over socket connection to TBA application . Transactor proxy model then encapsulates the Ethernet frames into transactions for transmission to the network DUT the transactions containing the Ethernet frame. Likewise transactions received at transactor proxy model from SA card encapsulate Ethernet frames that are de encapsulated by the transactor proxy model and forwarded to the network tap by TBA application . OS TCP IP stack then de encapsulates the Ethernet frames and forwards the test patterns to be consumed by tester application .

SA host receives the transactions from tunnel routing them to a TBA port of DUT . The operation of DUT depends on its functionality but here is a network switch such that it receives Ethernet frames and routes them toward tester application . The Ethernet frames are transmitted from TBA port and routed over tunnel as transactions. SA host may be connected to multiple tester hosts each of which has a socket based tunnel to that tester host. After the transactions are received at the socket of TBA client endpoint of tester host they are de encapsulated and Ethernet frames are forwarded to the network tap device that injects the Ethernet frames into TCP IP stack . The test patterns are de encapsulated from the Ethernet frames and their private destination IP address is translated by the destination NAT back to the real destination IP address originally associated with the test patterns by tester application . Tester application then receives the test patterns via its socket API.

Tester applications and communicate via a virtual tester application protocol. This protocol is virtual in that from the point of view of the tester applications they are communicating using real IP addresses and are not aware that the communications pass through an emulated network DUT of a simulation acceleration system using private addressing.

Network tap of is a virtual kernel network device. In another embodiment network tap is replaced with a network tunnel. In this embodiment the TCP IP stack encapsulates the test patterns in IP datagrams that are transmitted by the network tunnel to TBA client endpoint where they are encapsulated for transmission over packet tunnel . On the other side of the network DUT another network tunnel replacing network tap receives IP datagrams that are de encapsulated by TCP IP stack .

For illustration in this embodiment the source tester host IP address is selected to be 172.21.1.110 and the destination tester host IP address is selected to be 172.21.13.89. Kernel NAT receives test patterns generated by the tester application via API socket opened by the tester application. Kernel NAT here is a destination NAT that operates on real destination IP address 172.21.13.89 associated with the test patterns to create a private destination IP address 192.168.13.89 for a network tunnel of the destination tester host . The test patterns then passes to the IP stack which has a network tunnel device for IP addresses 192.168.1.110 16 attached to it. The network tunnel simulates an Ethernet device creating a network bridge to the TBA client endpoint . TBA client endpoint is an application that runs on the tester host and routes transactions encapsulating the Ethernet frames to the SA host . TBA client endpoint application also advertises a network identification mask to the TBA server. The Ethernet frames are encapsulated into transactions for transmission from Ethernet port having IP address 172.21.1.110.

On the SA host side of the IP tunnel transactions are received at a socket of TBA server running a TBA server application. The TBA server is responsible for establishing a socket based IP tunnel for each of the one or more tester hosts here IP tunnel for the source tester host and IP tunnel for the destination tester host . The TBA server receives transactions from the IP tunnel at its socket intercepting all of the Ethernet frames sent by source tester application . TBA server further transmits transactions from its socket to the destination tester host using IP tunnel .

Destination tester host is similar to the source tester host comprising functionally equivalent hardware and software components. TBA client endpoint advertises a network identification mask to the TBA server here including IP address 172.21.13.89 of Ethernet port . TBA client endpoint has an established socket connection to the SA host via IP tunnel . Tester host receives transactions encapsulating Ethernet frames from SA host at Ethernet port . The Ethernet frames are de encapsulated from the received transactions after which TBA client endpoint passes the Ethernet frames to the destination network tap for IP addresses 192.168.13.89 16 which injects the Ethernet frame into IP network stack . Destination network tap receives Ethernet frames having private source IP address 192.168.1.110 and private destination IP address 192.168.13.8. The Ethernet frames ascend through the TCP IP network stack passing to kernel NAT the test patterns having associated source IP address 172.21.1.110 and destination IP address 192.168.13.89. Kernel NAT operates on the private destination IP address 192.168.13.89 for tester application associating real destination IP address 172.21.13.89 with the test patterns.

As a result in this embodiment tester application protocol is unmodified for tester applications and and tester applications and generate test patterns as they would for a standard network device under test i.e. a network DUT that was not modeled in a simulation acceleration emulation system using TBA.

Source tester application of the embodiment depicted in directs the creation of Ethernet frames for interception by the network DUT. In another embodiment source tester application directs the creation of IP datagrams for interception by the network DUT. In this embodiment network taps and are instead network tunnel devices. Like the network taps the network tunnel devices are virtual kernel network devices attached to TCP IP stacks and . However the network tunnel devices simulate a real network device transmitting and receiving IP datagrams rather than Ethernet frames.

Interfaces and are configured with a port path type IP address and media access control MAC address as well as an address resolution protocol ARP cache of client MAC addresses. Connections between a TBA client application of the tester host and the TBA server application of the simulation acceleration host are initiated by the TBA client application. The TBA client application advertises its IP address and its MAC address to the TBA server application the MAC address either associated with a network tap device or a network tunnel device depending on which device is attached the TCP IP stack of the tester host. The TBA server application responds to the advertisement with an ARP acknowledge back to the tester host using the MAC address found in its configuration. Ethernet frames are then sent over the connection the Ethernet frames mapping directly between the socket and the interface. The MAC address for Ethernet frames arriving out of the DUT interfaces are modified based on the ARP cache.

Though certain embodiments are described above as comprising physical networks with distinct physical hosts one of skill in the art will recognize that the elements of the above embodiments can also be implemented in a virtual network using known virtualization technology to create such virtual networks. In these embodiments all or some of the tester applications or other applications reside on the same physical host for example the SA host. Then a first tester application or other applications running on a first virtual host will appear to be at a separate and distinct network node from a second tester applications or other application running on a second virtual host while in fact each application resides on the same physical host. Embodiments implemented in such virtual networks will be obvious to one of skill in the art from the above description.

Experimental results demonstrate some of the performance benefits of the present invention using particular hardware and software configurations. A first experimental setup included a basic Ethernet switch as a DUT emulated in a Cadence Design Systems Inc. Palladium III system Palladium connected to a workstation running a tester application. The width of the workstation Palladium interface was one thousand two hundred eighty bits de multiplexed to the internal bus width of the Ethernet switch DUT. The below chart demonstrates increased throughput over prior art systems 

In a second experimental setup thirty two simultaneous tester host IP streams were sent to an emulated Ethernet switch DUT having thirty two ports in a Cadence Palladium III system. Each IP stream was represented by both a thirty two bit input word per clock cycle and a thirty two bit output word per clock cycle modeling the thirty two bit XGMII interface corresponding to each of the thirty two tester hosts. In this setup throughput here representing the total overall number of bits output through the DUT emulated in Palladium was measured to be one hundred fifteen megabits per second.

Although various embodiments have been described with respect to specific examples and subsystems it will be apparent to those of ordinary skill in the art that the concepts disclosed herein are not limited to these specific examples or subsystems but extends to other embodiments as well. Included within the scope of these concepts are all of these other embodiments as specified in the claims that follow.

