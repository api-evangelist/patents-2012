---

title: User interfaces for search systems using in-line contextual queries
abstract: Systems and methods, including user interfaces, are provided for implementing searches using contextual information associated with a Web page (or other document) that a user is viewing when a query is entered. The page includes a contextual search interface that has an associated context vector representing content of the page. When the user submits a search query via the contextual search interface, the query and the context vector are both provided to the query processor and used in responding to the query.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08301614&OS=08301614&RS=08301614
owner: Yahoo! Inc.
number: 08301614
owner_city: Sunnyvale
owner_country: US
publication_date: 20120107
---
This application claims benefit under 35 U.S.C. 120 as a Divisional of application Ser. No. 12 553 636 filed Sep. 3 2009 which is a Continuation of application Ser. No. 11 033 417 filed Jan. 10 2005 which is a Continuation in part of application Ser. No. 10 903 283 filed Jul. 29 2004 entitled Search Systems and Methods Using In Line Contextual Queries to each of which applications this application also claims priority under 35 U.S.C. 120. The entire contents of each of the above listed applications is hereby incorporated by reference for all purposes as if fully set forth herein. The applicants hereby rescind any disclaimer of claim scope in the parent applications or the prosecution history thereof and advise the USPTO that the claims in this application may be broader than any claim in the parent applications.

The present disclosure is related to the following commonly assigned co pending U.S. Patent Applications application Ser. No. 11 033 100 filed Jan. 10 2005 entitled Search Systems and Methods Using Enhanced Contextual Queries and application Ser. No. 11 033 101 filed Jan. 10 2005 entitled User Interface for Text Selection . The respective disclosures of these applications are incorporated herein by reference for all purposes.

The present invention relates in general to search systems and methods and in particular to search systems and methods using in line contextual queries.

The World Wide Web Web as its name suggests is a decentralized global collection of interlinked information generally in the form of pages that may contain text images and or media content related to virtually every topic imaginable. A user who knows or finds a uniform resource locator URL for a page can provide that URL to a Web client generally referred to as a browser and view the page almost instantly. Since Web pages typically include links also referred to as hyperlinks to other pages finding URLs is generally not difficult.

What is difficult for most users is finding URLs for pages that are of interest to them. The sheer volume of content available on the Web has turned the task of finding a page relevant to a particular interest into what may be the ultimate needle in a haystack problem. To address this problem an industry of search providers e.g. Yahoo MSN Google has evolved. A search provider typically maintains a database of Web pages in which the URL of each page is associated with information e.g. keywords category data etc. reflecting its content. The search provider also maintains a search server that hosts a search page or site on the Web. The search page provides a form into which a user can enter a query that usually includes one or more terms indicative of the user s interest. Once a query is entered the search server accesses the database and generates a list of hits typically URLs for pages whose content matches keywords derived from the user s query. This list is provided to the user. Since queries can often return hundreds thousands or in some cases millions of hits search providers have developed sophisticated algorithms for ranking the hits i.e. determining an order for displaying hits to the user such that the pages most relevant to a given query are likely to appear near the top of the list. Typical ranking algorithms take into account not only the keywords and their frequency of occurrence but also other information such as the number of other pages that link to the hit page popularity of the hit page among users and so on.

To further facilitate use of their services some search providers now offer search toolbar add ons for Web browser programs. A search toolbar typically provides a text box into which the user can type a query and a Submit button for submitting the query to the search provider s server. Once installed by the user the search toolbar is generally visible no matter what page the user is viewing enabling the user to enter a query at any time without first navigating to the search provider s Web site. Searches initiated via the toolbar are processed in the same way as searches initiated at the provider s site the only difference is that the user is spared the step of navigating to the search provider s site.

While automated search technologies can be very helpful they do have a number of limitations a primary one being that users struggle to convey enough contextual information to direct the search to relevant content. An overly broad query too little context can return a few needles of relevant content buried in a haystack of irrelevant hits an overly narrow query too much context may result in filtering out the needles along with the hay. Often a user has a fairly specific context in mind but this specific context may not be reflected in a query. For example a user who enters the query jaguar might be thinking of the automobile the animal the professional football team or something else entirely.

In principle contextual information might be gleaned from what the user was doing prior to entering the query. It is well known that users are often inspired to conduct searches when information they are currently reviewing raises a further question. For example a user who enters the query jaguar after or while viewing an automobile related page is most likely interested in the automobile while one who enters the same query after or while viewing a page about zoos is most likely interested in the animal. Existing search technologies do not provide reliable ways of gathering such contextual information or using it to respond to a query.

Therefore it would be desirable to provide a search server with contextual information that is usable for responding to queries.

Embodiments of the present invention provide systems and methods for implementing searches using contextual information associated with a page or other document that a user is viewing when a query is entered. In some embodiments the page or document includes a contextual search interface that has an associated context vector representing content of the page or document. When the user submits a search query via the contextual search interface the context vector is also provided to the query processor and used in responding to the query. Context vectors may also be used in other ways such as selecting additional content that may be of interest to a user.

According to one aspect of the present invention a method for performing a search is provided. A user interface is provided the user interface including a selection control element operable while a user is viewing a page containing content the selection control element configured to enable the user to select at least a portion of the content as a search context and a query entry area configured to accept entry of query terms by a user. Via the user interface a selected search context and one or more query terms are received. The one or more query terms and a representation of the selected search context are transmitted to a search engine configured to execute a search based on the one or more keywords and the selected search context. A search result is received from the search engine and displaying the search result is displayed to the user.

In some embodiments displaying the search result to the user includes displaying a user editable list of context terms derived from the representation of the selected search context. A user update to the user editable list of context terms may be received and the user update may be transmitted to the search engine which may be further configured to execute a modified search based on the user updated context terms and the one or more query terms.

In some embodiments the selection control element is configured such that the user selects an anchor point by clicking on a location within the page and expands a selected region around the anchor point by subsequently clicking one or more times further. For instance the selected region may be expanded radially outward from the anchor point for each subsequent click or the selected region may be expanded outward from the anchor point in semantic increments e.g. a sentence or paragraph for each subsequent click.

According to another aspect of the present invention a method for performing a search is provided. A page containing content is displayed with the page further including one or more contextual search icons each contextual search icon being associated with a portion of the content of the page. A user selection of one of the one or more contextual search icons is received. In response to the user selection an expanded contextual search interface corresponding to the selected contextual search icon is displayed the expanded contextual search interface including a query entry area configured to accept entry of one or more query terms by a user. A query is received from the user via the query entry area. The query and a representation of the associated portion of the content are transmitted to a search engine configured to execute a search based on the one or more query terms and the representation. A search result is received from the search engine and the search result is displayed to the user.

In some embodiments displaying the expanded contextual search interface includes displaying the query entry area as an element of the page. In other embodiments displaying the expanded contextual search interface includes displaying a pop up element containing the query entry area.

In some embodiments the expanded contextual search interface may also include augmented content such as one or more of a suggestion for a related search the suggestion determined based at least in part on the representation of the associated portion of the content a link to a related page the related page being selected based at least in part on the representation of the associated portion of the content a search result for a search query generated based at least in part on the representation of the associated portion of the content.

According to yet another aspect of the present invention method for performing a search is provided. A user interface is provided the interface including a query field and a context field. Via the user interface one or more query terms entered by the user in the query field and context data entered by the user in the context field are received. The query terms and a representation of the context data are transmitted to a search engine configured to execute a search based on the query terms and the representation of the context data. A search result is received from the search engine and the search result is displayed to the user.

According to a further aspect of the present invention a graphical user interface for a search engine includes a selection control element a query entry area and a submission control element. The selection control element which is operable while a user is viewing a page containing content is configured to enable the user to select at least a portion of the content as a search context. The query entry area is configured to accept entry of one or more query terms by a user. The submission control element is configured to submit a query including any query terms entered in the query entry area and a representation of the selected search context to the search engine in response to user operation of the submission control element. In response to submission of the query the search engine executes a contextual search operation using the entered query terms and the representation of the selected search context and returns a result of the contextual search operation to the user.

In some embodiments the graphical user interface appears in line in the page containing content. For example the page may initially display an icon corresponding to the selection control element and the query entry area and the submission control element may be displayed e.g. in line in the page or in a pop up element in response to selection of the icon by the user. The pop up element may be further configured to display additional information together with the query entry area such as a link to a page containing content related to the search context a suggestion for a query related to the search context and or a result of a search using a test query automatically generated from the search context.

In some embodiments the portion of the content is a predetermined portion. In other embodiments the portion of the content may be selectable by the user in the event that the user activates the submission control element without selecting the search context all of the content of the page might be selected as the search context. For example the selection control element may include a selection expander configured such that initial operation of the selection expander selects a small portion of the content e.g. a word and repeated operation of the selection expander selects increasingly larger portions of the content e.g. increasing the selected portion in units corresponding to one or more sentences or increasing the selected portion to correspond to a substantially circular region centered approximately on the word.

In some embodiments in the event that the user activates the submission control element without entering one or more query terms the search context is used to automatically generate one or more query terms for the search engine.

In some embodiments the query entry area the context selection element and the submission control element are accessible while the user is viewing any page. For example the graphical user interface may be configured as a toolbar for a document viewer. In another embodiment the query entry area the context selection element and the submission control element are accessible while the user is viewing a page that is not distributed via a network.

The following detailed description together with the accompanying drawings will provide a better understanding of the nature and advantages of the present invention.

Several elements in the system shown in include conventional well known elements that need not be explained in detail here. For example client system could include a desktop personal computer workstation laptop personal digital assistant PDA cell phone or any WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet. Client system typically runs a browsing program such as Microsoft s Internet Explorer browser Netscape Navigator browser Mozilla browser Opera browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user of client system to access process and view information and pages available to it from server systems to N over Internet . Client system also typically includes one or more user interface devices such as a keyboard a mouse touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. monitor screen LCD display etc. in conjunction with pages forms and other information provided by server systems to N or other servers. The present invention is suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks can be used instead of or in addition to the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment client system and all of its components are operator configurable using an application including computer code run using a central processing unit such as an Intel Pentium processor AMD Athlon processor or the like or multiple processors. Computer code for operating and configuring client system to communicate process and display data and media content as described herein is preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as a compact disk CD medium a digital versatile disk DVD medium a floppy disk and the like. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source e.g. from one of server systems to N to client system over the Internet or transmitted over any other network connection e.g. extranet VPN LAN or other conventional networks using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet or other conventional media and protocols .

It should be appreciated that computer code for implementing aspects of the present invention can be C C HTML XML Java JavaScript etc. code or any other suitable scripting language e.g. VBScript or any other suitable programming language that can be executed on client system or compiled to execute on client system . In some embodiments no code is downloaded to client system and needed code is executed by a server or code already present at client system is executed.

According to one embodiment a client application represented as module executing on client system includes instructions for controlling client system and its components to communicate with server systems and and to process and display data content received therefrom. Client application may be transmitted and downloaded to client system from a software source such as a remote server system e.g. server systems server system or other remote server system or client application module may also be provided on any software storage medium floppy disk CD DVD etc. that is readable by client system as discussed above. For example in one aspect client application may be provided over Internet to client system in an HTML wrapper including various controls such as for example embedded JavaScript or Active X controls for manipulating data and rendering data in various objects frames and windows.

Client application module advantageously includes various software modules for processing data and media content. In one embodiment these modules include a specialized search module a user interface module and an application interface module . Specialized search module is configured for processing search requests also referred to herein as queries to be sent to search server and search result data received from search server . Specific aspects of specialized search module are described below.

User interface module is configured for rendering data and media content in text and data frames and active windows e.g. browser windows and dialog boxes. In some embodiments user interface module includes or communicates with a browser program which may be a default browser configured on client system or a different browser. Application interface module is configured to support interfacing and communicating between client application and various other applications executing on client such as e mail applications instant messaging IM applications browser applications document management applications and others.

User interface module advantageously provides user input interfaces allowing the user to enter queries for processing by search server system . For example where user interface module includes or communicates with a browser the user may be able to enter a URL or activate a control button to direct the browser to a Web search page or site from which the user can submit a query to search server system for processing. In addition or instead user interface module may include a search toolbar or other interface via which the user can enter and submit a query without first navigating to the search page. Queries entered using user interface module may be preprocessed by specialized search module prior to being sent to search server system e.g. to remove so called stop words the and etc. to correct spelling errors or the like.

In accordance with an embodiment of the present invention client application may include various features for adding context data referred to herein as a context vector to the user s queries. For example specialized search module may be configured to generate context vectors based on content the user is currently viewing at the time a query is entered. As another example in some embodiments of the present invention Web pages displayed in the browser may include one or more context vectors that can be used to supplement user entered queries. User interface module may be configured to detect such contextual vectors in a page being displayed and use context vector data to supplement a query entered by the user. These and other features are described further below.

According to one embodiment of the invention search server system is configured to provide search result data and media content to client system and content server system is configured to provide data and media content such as Web pages to client system for example in response to links selected by the user in search result pages provided by search server system . In some variations search server system returns content as well as or instead of links and or other references to content.

Search server system references various page indexes that are populated with e.g. pages links to pages data representing the content of indexed pages etc. Page indexes may be generated by various collection technologies such as an automatic Web crawler in addition manual or semi automatic classification algorithms and interfaces may be provided for classifying and ranking Web pages within a hierarchical category structure. Such technologies and algorithms may be of generally conventional design and a detailed description is omitted as not being critical to the present invention.

In one embodiment an entry in page index includes a search term a reference e.g. a URL or other encoded identifier to a page in which that term appears and a context identifier for the page. The context identifier may be used for grouping similar results for search terms that may have different meanings in different contexts. For example the search term jaguar may refer to the British automobile to an animal to a professional football team and so on. The context identifier for a page can be used to indicate which of these contexts is applicable. In one embodiment the context identifier includes a category for the page with the category being assigned from a predefined hierarchical taxonomy of content categories. A page reference may be associated with multiple context identifiers so the same page or a link thereto may be displayed in multiple contexts. In some embodiments context identifiers are automatically associated with page links by the system as users perform various searches the identifiers may also be modified and associated with links manually by a team of one or more index editors.

Search server system is configured to provide data responsive to various search requests received from a client system in particular from search module and or user interface module . For example search server system may include a query response module that is configured with search related algorithms for identifying and ranking Web pages relative to a given query e.g. based on a combination of logical relevance which may be measured by patterns of occurrence of search terms in the query context identifiers page sponsorship etc.

In accordance with an embodiment of the present invention query response module is also configured to receive and make use of context vector data that may be provided in association with a query in order to further enhance the response to queries. Use of context vector data in responding to queries is described further below. Query response module may also enhance search result information with additional information e.g. links and or advertising copy obtained from a sponsored content database . Sponsored content database may be implemented as part of page index by the inclusion of additional fields in each entry to identify page references that are sponsored and keywords for triggering the display of sponsored content or it may be implemented in a separate database.

In some embodiments search server also includes a context processing module that is configured with various algorithms for processing received content to generate a context vector representative of the received content. In general a context vector may include any data that represents all or part of the content. For example one embodiment of a context vector for text content may include keywords such as terms e.g. words or phrases that appear in the content and each such term may have an associated frequency count reflecting how many times that term occurs in the content. Other types of data may also be included e.g. URLs or other data identifying any links that may be included in the content the URL or other identifier of the page that contains the content category data associated with the content or with a page that contains the content and so on.

In some embodiments a content augmentation server is also provided. Content augmentation server communicates via Internet with client application to enhance the content of a Web page being displayed with special content that is advantageously selected based on context vector data associated with the displayed page. In circumstances where the user has indicated an interest in information related to a particular context examples are described below client application transmits a context vector to content augmentation server and content augmentation server responds with special content to be added to a Web page being displayed by client application .

In one embodiment content augmentation server and search server are under common control and content augmentation server advantageously selects special content from sponsored content database . In another embodiment content augmentation server may be independent of search server and may have its own database of special content from which selections can be made based on context vectors provided by client application .

It will be appreciated that the search system described herein is illustrative and that variations and modifications are possible. The content server search server and content augmentation server systems may be part of a single organization e.g. a distributed server system such as that provided to users by Yahoo Inc. or they may be part of disparate organizations. Each server system generally includes at least one server and an associated database system and may include multiple servers and associated database systems and although shown as a single block may be geographically distributed. For example all servers of a search server system may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . Thus as used herein a server system typically includes one or more logically and or physically connected servers distributed locally or across one or more geographic locations the terms server and server system are used interchangeably.

The search server system may be configured with one or more page indexes and algorithms for accessing the page index es and providing search results to users in response to search queries received from client systems. The search server system might generate the page indexes itself receive page indexes from another source e.g. a separate server system or receive page indexes from another source and perform further processing thereof e.g. addition or updating of the context identifiers .

As mentioned above user interface module of client application generally includes one or more interfaces enabling the user to submit queries to search server e.g. by navigating a browser to a search page hosted by search server or by providing a toolbar interface for query submission. Such interfaces may be implemented in a generally conventional fashion.

In accordance with an embodiment of the present invention in addition to or instead of such interfaces users may also enter contextual queries using a contextual search interface that may be implemented as a visible element on any hosting Web page. As used herein the term hosting Web page or hosting page is to be understood as referring to any page that includes at least one contextual search interface hosting pages might or might not be under common control with search server or content augmentation server . Each contextual search interface has a context vector associated with it. The context vector which need not be visible on the hosting page provides additional data reflecting the content of the hosting page or a portion thereof . This data can be used e.g. by query response module during query processing as described below.

An example of a contextual search interface will now be described. shows a hosting page that has some content as it might appear when displayed on client system of . Hosting page includes a contextual search interface that is advantageously placed near content . A user may initiate a contextual search by entering a query e.g. fuel consumption into a text field of interface and activating a submit control which may be e.g. a clickable button. The source code not shown for hosting page includes a context vector associated with contextual search interface . In this embodiment the context vector is not actually displayed in page although its data is included with the source code provided to client application when page is requested.

The context vector which may be implemented in various ways advantageously includes one or more terms and or category labels or any other data representative of the neighboring content . is an example of a context vector that might be provided for a search initiated from contextual search interface of . Context vector includes a list of terms cabrio golf etc. that appear in content and additional information associated with each term. In this example the additional information includes a term frequency a document frequency a weight and a term type . Term frequency reflects the number of times the term occurs in content . Document frequency reflects the number of documents in the search corpus that contain the term. Weight reflects an importance assigned to the term and may be computed from information such as whether the term occurs in text or in headings the term frequency and or the document frequency . Term type can be used to distinguish different types of data that may be included in the context vector e.g. terms from the text category data URL data and so on. It is to be understood that a context vector may also include more fewer or different elements from those shown in and the elements may be provided in any desired format. In one embodiment context vector is included in the source code for hosting page in association with the code for contextual search interface .

When a user using client application of to view hosting page initiates a search by entering a query into text field and activating submit control the query that is sent by client application to search server for processing advantageously includes not only the explicit user input from text field but also a representation of context vector . For example in one implementation of contextual search interface Web page includes program code for sending an HTTP hypertext transport protocol request to search server in response to submit control . This program code can include code for appending the user s query and a representation of the context vector as additional data to the URL used for the HTTP request.

In addition to the user s query from text field and context vector search server may also receive other metadata such as an identifier of the user if known the user s IP address the time of day and so on. This metadata which might or might not be specific to the hosting page or the contextual search interface may be obtained from client application or from other sources.

Upon receiving a query initiated through contextual search interface search server uses query response module to execute a search based on the user s query and the context vector and optionally any other available metadata . Query response module generates and ranks a list of hits. The resulting list of hits which generally depends at least in part on the context vector is returned to the user e.g. in the form of a search results page. In executing the search the context vector may be used in various ways. For instance in one embodiment the user s query e.g. the explicit input in text field in is modified by adding one or more keywords selected from the context vector in another embodiment the search is executed using the user s query as submitted with keywords and or category data from the context vector used in ranking the results. Additional embodiments are described below.

In some embodiments contextual search interfaces for a hosting page may be initially displayed in an inactive state in which only a relatively small icon appears on the page. An example of an inactive contextual search interface is illustrated in . Hosting page is generated from the same source code as hosting page of and has the same content . In page however only a small contextual search icon is displayed rather than the full contextual search interface shown in . Icon represents an inactive contextual search interface a user viewing page who desires to perform a contextual search related to content can activate the contextual search interface e.g. by clicking on or otherwise selecting icon . Selecting icon causes page of with the active contextual search interface to be displayed so that the user can perform a contextual search.

Any number of contextual search interfaces may be provided on a hosting page and each contextual search interface may have its own context vector that reflects the nearby content. For example shows a hosting page whose content includes several summaries of different news stories. Each summary has a respective contextual search icon placed near it. Each icon is the inactive state of a different contextual search interface each of which has its own context vector derived from the adjacent summary . Any one of these icons can be activated by a user and then used to initiate a contextual search e.g. in the same manner as described above with reference to icon and active contextual search interface . The context vector for a search initiated from icon is advantageously derived from summary while the context vector for a search initiated from icon is advantageously derived from summary and so on. Since icons and have different associated context vectors the search results the hits or their ranking or both will generally differ for searches initiated via icons and even if the same query is entered.

In one embodiment described further below the creator of a hosting page may determine how many contextual search interfaces to include on the page where they are to be located and which portion s of the page should be used to define the context for the search.

The following sections describe example embodiments for creation of contextual search interfaces and context vectors Section II use of context vectors in processing queries Section III and additional optional features for further enhancing contextual searches including additional examples of user interfaces Sections IV VI .

Contextual search interfaces and context vectors can be created in advance of a contextual search operation e.g. under control of a content developer or at the time of a contextual search operation e.g. under user control. In the embodiment of context processing module provides services for creating context vectors on demand in response to requests from various client programs including content development clients and or Web browser clients executing on client system .

Creation of contextual search interfaces will now be described with reference to a simplified block diagram of a context vector server system according to an embodiment of the present invention. A context module communicates with a context client e.g. via the Internet. Context module advantageously corresponds to context processing module of and may be implemented as a component of search server as shown in or in a separate computer system. Context client may be e.g. a content development program that is capable of adding contextual search interfaces to page content or a browser program that is capable of initiating a contextual search.

Context module communicates with a number of dictionaries that may be implemented in one or more databases or other data stores of generally conventional design. As used herein dictionary refers generally to any data store in which information related to a word or phrase is retrievable by a lookup operation using the word or phrase as an index a dictionary is not limited to any particular information content and might or might not provide an exhaustive list of words and or phrases.

In system four dictionaries are provided. Term dictionary includes a list of terms which may include single words and or phrases derived from a search corpus e.g. as represented in page index of . Each term in term dictionary is advantageously associated with a document frequency that reflects the number or fraction of documents in the search corpus that include at least one occurrence of that term.

Segment dictionary includes phrases segments extracted from documents in the search corpus. Each segment in dictionary represents a group of contiguous words found in the same arrangement in at least a minimum number or fraction of documents in the search corpus. A document frequency is advantageously stored in association with each segment in segment dictionary .

Concept network is a representation of units terms and relationships among units that may be used in some embodiments to generate enhanced context vectors e.g. by identifying terms related to terms that appear in the content from which the context vector is derived and or terms related to query terms provided by the user. Specific examples of concept network and its use in forming enhanced context vectors are described in above referenced application Ser. No. 11 033 100.

Stopword dictionary includes words that occur so frequently as to be meaningless for purposes of selecting documents. Examples include articles a the etc. conjunctions and but prepositions to on in and so on. As described below stopword dictionary is advantageously used to exclude words from a context vector.

It is to be understood that the specific combination of dictionaries described herein is illustrative and that other combinations may be used.

In operation context client transmits text and optionally one or more query terms to context module . Context module may use any combination of dictionaries or other dictionaries for generating context vectors specific examples of algorithms that can be employed are described below. Once the context vector is generated context module may return it to context client or provide it directly to search server for use in query processing.

In some embodiments one or more contextual search interfaces can be added to a Web page at the discretion of a content developer that creates the Web page. For example a search provider or other promulgator of contextual search technologies may publish an application program interface API for implementing contextual searches. The API includes a format for specifying contextual search requests so that such requests can be recognized and processed by search server . In one embodiment the API specifies a base URL for submitting contextual searches to search server and a format for enhancing the base URL with additional data representing the user s query and the context vector. The API may also specify formats for encoding the query and or context vector as appropriate to a particular implementation.

In some embodiments the API may also specify the appearance and or features of the contextual search interface. For example the API might specify whether the interface should initially be displayed as an inactive state icon what such an icon should look like and a standard phrase to be displayed with the icon to alert users to the opportunity for performing a contextual search. Other aspects of the API might specify features of the contextual search interface in its active state such as whether a text box and or other input fields are to be provided and what such fields should look like. While optional providing uniform specifications for the esthetic aspects of contextual search may assist in promoting user awareness and recognition of contextual search interfaces.

All or part of the API may be provided by making available images that can be inserted into the Web page or suitable code blocks in commonly used Web page coding languages such as HTML that content creators can simply insert into their pages.

The content provider can implement a contextual search interface by including appropriate code in the source code for the hosting page and supplementing this code with appropriate data for a context vector representing the actual content of the hosting page. Any code in any language may be used as long as execution of the code results in contextual search requests in the API compliant format being generated and submitted to search server in response to input to the contextual search interface.

In other embodiments the search provider or other promulgator of contextual search technologies further facilitates creation of contextual search interfaces by content providers e.g. by automating the generation of some or all of the contextual search code for a hosting page. As one example generation of context vectors from hosting page content may advantageously be automated using context module of . In this instance a content development client provides text to context module and receives properly formatted contextual search code including the context vector in response.

FIGS. and A B are flow diagrams illustrating a partially automated process for creating a contextual search interface with showing a process performed by the content developer using client of and showing alternative processes that may be performed by context module .

Process begins with the content developer creating or modifying content for a Web page step that is to include a conceptual search interface. The content may be created using any manual or automatic technique including the use of conventional Web development software. At some point the content developer determines that it would be desirable to have a contextual search interface associated with some portion or all of the hosting Web page s content. The content developer selects the content that is to be associated with the contextual search interface step and submits it to the context vector server step .

Submission of content to the context vector server may be done in a number of ways. In some embodiments the search provider offers a Web browser based context analysis interface for content providers. This interface may be e.g. an interface to context module shown in . The content developer may navigate his own browser to this interface and enter e.g. by copying and pasting appropriate content from the hosting page. In other embodiments the content developer may navigate a browser to the search provider s context analysis interface and submit a URL for the hosting Web page. In still other embodiments the search provider may distribute a software tool e.g. incorporating aspects of algorithms shown in that the content provider can use to select content and submit it to the search provider without using a Web browser. This tool may take various forms such as a desktop tool or a widget that can be integrated into various Web content development software programs.

Upon receiving content from a developer context module analyzes the content and generates a context vector. is a flow diagram of a process that may be implemented in context module . Process begins when content to be associated with a contextual search interface is received by context module step . The text may be received in or converted to a conventional encoding such as UTF 8.

At step the received content is tokenized. Tokenizing may be done using conventional techniques and may include e.g. detecting word boundaries which may be based on Unicode or other conventional techniques canonicalizing words e.g. removing suffixes correcting spelling errors or variants and the like eliminating various words that are too common to be helpful in searches e.g. the and and so on. At step the tokens are sorted according to suitable criteria such as frequency of occurrence of the term in the content and at step the most frequently occurring tokens are selected for inclusion in the context vector. The number of tokens selected may be limited e.g. to some integer K.

At step a context vector is created using the tokens. In one embodiment the context vector includes the selected tokens as well as their respective frequencies and other optional information. In some embodiments co occurrences and correlations between tokens are also used to identify phrases that can also be incorporated into the context vector. For instance in content of the phrase Golf Cabrio might be identified. In addition URLs or other identifiers of any linked to documents included in the content or a URL or other identifier for the content itself may also be included. More generally any information representative of the content or some aspect of the content may be included in a context vector.

At step the context vector is inserted into a block of generic code implementing a contextual search interface. In one embodiment the generic code block includes a template for an enhanced URL that is to be used for sending contextual queries to the search server and step includes inserting the context vector or an encoded representation thereof into this template. The generic code block may also include other code such as code for inserting the user s query into the enhanced URL before sending it to the search server code for displaying the contextual search interface in its active and or inactive states and so on. The resulting code block including the context vector is returned to the content developer at step .

At step the remaining tokens are matched to terms appearing in term dictionary . Any token that does not match a term in term dictionary is discarded.

At step a term weight for each remaining token is computed. The weight may be based on the inverse of the document frequency and or the term frequency of the token i.e. the number of times the term appears in the received text . In one embodiment the term weight is based on the product of the inverse document frequency and the term frequency the weight may be rescaled e.g. linearly logarithmically exponentially as desired. Other formulas for computing a term weight may be used.

At step a number of tokens are selected as elements of a term vector based on the respective term weights. In some embodiments the number of term vector elements is limited e.g. to 5 15 25 or 50 with terms having higher term weight receiving priority. A cutoff at a minimum term weight may also be applied with terms below the minimum weight being excluded from the term vector even if the result is a term vector with fewer than the maximum number of elements. Other selection techniques may also be used.

At step the term vector is inserted as a context vector into a generic contextual search code block and at step the code block is returned to the client. These steps may be generally similar to steps and of process described above.

Referring again to at step the content developer receives the code block from context processing module . At step the content developer inserts the code block into the hosting Web page at the desired point thereby adding the contextual search interface to the page.

It will be appreciated that the processes for creating contextual search interfaces described herein are illustrative and that variations and modifications are possible. Steps described as sequential may be executed in parallel order of steps may be varied and steps may be modified or combined. Various steps such as selection of content and insertion of the contextual search code block may be automated or performed manually. In one alternative embodiment the search provider may provide a context processing module that can be installed and run on the content provider s system so that information need not be sent to the search provider in order to create the context vector. In addition in some embodiments creation of contextual search interfaces may be automated e.g. so that a context vector is automatically updated when page content is updated. For instance if page of represents a news page where the top stories are frequently changed a process may be provided for automatically updating the context vector for one of the contextual search interfaces any time its associated story changes.

Other algorithms for generating context vectors may also be implemented. For example some algorithms may weight terms that appear in headings subheadings metatags or other selected fields higher than terms in the body text. Some algorithms may also take into account non textual content e.g. images or media content for which suitable content descriptors are available or can be determined. Terms in the context vector are not limited to single words a term may also be a phrase two or more words occurring adjacent to each other .

In some embodiments the context vector may be created based on information other than terms found in the content. For instance the content provider may be prompted to specify a category or other context identifier for the content and this information may be included in the context vector. In another embodiment the context vector may include information about links included in the content e.g. the URLs of such links page titles or category information for the linked to pages and so on . In still other embodiments the context vector may be enhanced by using a concept network to identify terms related to terms that appear in the text or the initial context vector e.g. as described in above referenced application Ser. No. 11 033 100.

In some embodiments the context vector may be included in the contextual search interface code block in an encoded form. For example hash functions or other suitable techniques may be used to represent various tokens in the context vector. As another example the complete context vector data might be stored in a table or database accessible to the search server and the code block might include a key or other code that the search server can use to look up the context vector data during query processing.

In another embodiment a user viewing any Web page can create a contextual search interface for that page or for a portion thereof . For example the search provider may provide a browser toolbar that has a contextual search widget enabling the user to select as context for a search query a portion of any Web page displayed in the browser window.

At step the user selects part or all of the displayed page e.g. by clicking and dragging a mouse cursor over a region of the displayed page. Selected text may be shown with highlighting e.g. modified colors or a box drawn around the content to provide visual feedback to the user. In some embodiments other content selection mechanisms may be provided in addition to or instead of click and drag techniques. For example a user may be able to select the entire page by pressing a predefined key to select a paragraph by clicking while the mouse cursor is positioned anywhere in the paragraph or to select a section by clicking while the mouse cursor is positioned in the section heading.

At step client application generates a context vector from the selected content. In one embodiment client application may submit the selected content to context processing module at search server for context vector generation in accordance with process described above. In another embodiment client application is configured to process content locally to generate a context vector e.g. via steps of process without transmitting information to the search server. Such processing capability may be implemented e.g. by including a context processing module as part of specialized search module of client application of .

At step the browser redisplays the current page adding a contextual search interface at or near the selected portion of the page. In this embodiment the newly added contextual search interface may appear initially in an active state so that the user can simply enter and submit a query without first activating the interface or it may appear in an inactive state. Once created a user created contextual search interface advantageously behaves similarly to contextual search interface described above specifically when the user enters a query through a user created contextual search interface the client application submits the query and the context vector associated with the user created contextual search interface to the search server.

It will be appreciated that process is illustrative and that variations and modifications are possible. Steps described as sequential may be executed in parallel order of steps may be varied and steps may be modified or combined. For instance the user may select the content first then activate a contextual search button in the search toolbar. Instead of adding a contextual search interface to the Web page a user created contextual search interface may be placed in the toolbar e.g. in place of a standard non contextual search interface or provided in a separate pop up menu.

In other embodiments rather than generating a context vector in advance of a query the client application may send the selected content together with the user s query to the search server and the search server may generate the context vector e.g. using context processing module as part of its query processing activity. This context vector may be sent back to the client application which may cache it for subsequent reuse.

Where selected content is submitted together with a query the query may also be used in selecting terms for the context vector. is a flow diagram of a process for generating a context vector from a combination of content and a query according to an embodiment of the present invention. Process may be implemented in the embodiment of with context client corresponding to a browser program that communicates with context module .

Process begins when content and a query for a contextual search are received by context module step . At step a term vector is generated from the received content e.g. in accordance with steps through of process described above.

At step the received text is parsed to identify each occurrence of a term from the received query. At step a window of text surrounding each occurrence of a query term is selected. In one embodiment each window includes a fixed number of words e.g. 2 3 5 10 preceding and following the query term. At step each selected window is matched against segment dictionary a match occurs if any segment in dictionary appears in the window.

At step a segment weight is computed for each matched segment. Segment weights may be defined similarly to term weights described above. At step the segments with the highest weights are chosen for a segment vector. As with the term vector a minimum threshold weight may be applied and the number of segments in the segment vector may be limited to a maximum value.

At step the segment vector is merged with the term vector generated at step creating a context vector. In one embodiment the vectors may simply be concatenated. In another embodiment terms from the term vector that also appear within a segment in the segment vector may be removed entirely or may have their term weights reduced. If desired the total number of entries may be limited to some maximum number.

At step the context vector is returned to the client. In an alternative embodiment the context vector may be forwarded together with the received query to a search server e.g. search server of for immediate query processing.

It will be appreciated that process is illustrative and that variations and modifications are possible. Steps described as sequential may be executed in parallel order of steps may be varied and steps may be modified or combined. In some embodiments the context vector may be further enhanced with information from a concept network as described below.

In another embodiment a user may be able to refine the context for a pre existing contextual search interface e.g. by selecting a portion of the accompanying text. Where such a selection is made the context vector associated with the contextual search interface can be modified e.g. to include only terms that appear in the selected text thereby providing users a further degree of control over how the context is defined.

In still another embodiment a client application might also include a module for creating contextual searches that is accessible via an icon on the user s desktop or in an operating system toolbar. Such a module may enable a user to create context vectors for performing contextual searches based on content other than Web pages including documents open in a word processing or file viewer application e mail messages instant messages and the like. The user may activate this icon at any time whether or not a browser is open and may select content for creating the context vector from any document on her desktop including any Web pages that happen to be displayed . The user created contextual search interface for the selected content appears e.g. in a pop up menu or dialog box located near the selected content or in any other suitable user interface element. When the search is executed and results are returned the client application advantageously opens a browser window for displaying the results and allowing the user to navigate to the hit pages or sites.

As described above when a contextual search interface such as interface of is active a user may initiate a contextual search by entering a query into text field and operating submit button . In response contextual information which can aid the search server in responding to the user s query is supplied via a context vector e.g. context vector of that is associated with the contextual search interface and automatically delivered to the search server with the user s query. A search server e.g. search server of receives a contextual search query which includes both the user s query and the context vector and executes the search e.g. using query response module . Algorithms for processing contextual search queries advantageously exploit the premise that the user s interest is likely to be related to the neighboring content accordingly the context vector which represents that content is advantageously used in generating search results. It should be noted that a user who does not want a search to be connected to surrounding content may use a different interface e.g. a search toolbar or the search provider s Web interface to perform a non contextual search and search server may be configured to process both contextual and non contextual queries.

Specific algorithms for processing contextual search queries will now be described. is a flow diagram of one such process in which search terms provided by the user are supplemented using one or more additional terms from the context vector.

At step a contextual query including at least one user supplied term and an associated context vector is received. At step one or more user keywords are extracted from the user supplied terms e.g. using conventional query parsing techniques which may include detecting word boundaries canonicalizing words e.g. removing suffixes correcting spelling errors or variants and the like eliminating words that are too common to be helpful in searches e.g. the and and so on.

At step one or more context keywords are extracted from the context vector to supplement the user keywords. In some embodiments context vectors include terms that have already been parsed and canonicalized e.g. as described for process above and so are already suitable for use as keywords. In other embodiments parsing and canonicalization may be performed for terms in the context vector as well. In addition step may include determining how many and which terms from the context vector should be used as context keywords. For instance in some embodiments only terms having at least a minimum frequency or weight might be selected or a limit might be placed on the number of terms that can be selected with the most frequent or highest weighted terms being selected first. The number of context keywords selected may also depend on the number of user keywords e.g. for queries with more user keywords fewer context keywords might be selected . Step may also include detecting and removing from the query any context keywords that are redundant with user keywords. Redundant keywords may include exact duplicates as well as known synonyms.

At step a search is executed using a query that includes the user keywords and the context keywords. Search execution may incorporate conventional techniques for identifying Web pages that contain one or more or in some embodiments all of the keywords such pages are referred to herein as hits or search hits . At step the search hits are ranked based on relevance as determined by a suitable ranking algorithm. Conventional algorithms for scoring each hit page based on frequency and or proximity of keywords in the hit page may be used with the user s keywords and or the contextual keywords being taken into account in the scoring. In addition any terms from the context vector that were not selected as keywords may be used in determining page scores or rankings. Other criteria including the number of pages linking to the hit user evaluations and preferences related to hit pages and or sponsorship of various hit pages may also be considered in determining the ranking.

At step the search results are returned to the user. In one embodiment the results are returned as a Web page displayable via the user s browser with links to the various hit pages or sites. The results page may be displayed e.g. by redirecting the browser from the hosting page to the results page or by opening a new browser window for the results page. Where many hits are to be returned multiple interlinked results pages may be generated. The results page may display both the user s original query and the context keywords that were added to the search query. In some embodiments this information is presented using an interactive form via which the user can modify her query or the context keywords or both and submit the modified contextual query to search server .

At step context keywords are extracted from the context vector this step may be similar to step of process described above. At step the hits are ranked using the context keywords in some embodiments the user keywords may also be used for ranking The ranking algorithms may be generally similar to those used in step of process . At step the results are returned to the user similarly to step of process . As in process the user s query and the context keywords may be presented using an interactive form via which the user can modify her query or the context keywords or both and submit the modified contextual query to search server .

It should be noted that processes and may result in lists of hits that differ as to content and or order of the hits. Other variations in these processes are also possible. For instance some terms from the context vector may be used as context keywords in the search query while other terms are used only for ranking the hits. In another variation only context keywords might be used for the search while user keywords are used only for ranking the search hits.

In some embodiments the query and context vector can be used to perform multiple searches in parallel and the final result can be obtained by aggregating page rankings across the searches. For example a first search might use just the user keywords with the context vector having no effect a second search might use the user keywords to identify hits and rank or score the hits using the context keywords e.g. in accordance with process of and a third search might use the user keywords and the context keywords together e.g. in accordance with process of . In this embodiment the hits are independently ranked or scored for each search then an aggregate rank or score for each hit is computed e.g. by conventional techniques such as averaging the ranks or scores across the multiple searches or selecting a median rank or score for the hit. If a hit does not occur in the results for one or more of the searches it may arbitrarily be assigned a rank or score e.g. a low rank or score or the aggregate rank or score for the hit might be computed using only searches that produced that hit. The list of results presented to the user in this embodiment is advantageously based on the aggregate ranks or scores of the hits.

In any event it should be understood that page rankings based on the user keywords and or context keywords may be further modified based on other page ranking algorithms using various metadata for the query. Examples include the use of user profile data if the user s identity is known for search personalization as well as various heuristics for resolving ambiguous terms inferring local intent etc. In addition to the list of hits the search results page may also include sponsored results or other content as determined by the search provider.

As described above a contextual search interface advantageously includes active and inactive states. In the inactive state a small icon may be displayed e.g. as shown in this can reduce visual clutter on the page while still informing the user that a contextual search option is available. In the active state a query form and submit control are displayed e.g. as shown in .

In some embodiments when the contextual search interface is active the query form may be augmented with additional content referred to herein as special content that may be of interest to the user. In general when a user chooses to activate an inactive contextual search icon it can be inferred that the user is likely to be interested in content related to that context. The content augmentation feature allows such content or links to such content to be presented as part of an active contextual search interface and not presented or hidden for inactive contextual search interfaces. Special content can be selected dynamically based on the context vector of the contextual search interface that is being activated.

In one embodiment the augmented content includes shopping related content referred to herein as Shop in Context in which opportunities to buy products related to the content are offered to the user. For example Web page of described above includes summaries of different news stories each with its own contextual search icon . A user may activate one of these icons e.g. icon by clicking on it thereby causing an active contextual search interface to be displayed and Shop in Context content to be added to the displayed page.

The Shop in Context content for a contextual search interface is advantageously selected based on the context vector so that activating a different contextual search interface on the same page will generally produce different Shop in Context content. For example also includes a contextual search interface associated with news story interface would appear when contextual search icon of is activated. Contextual search interface includes a text field and a submit button as well as Shop in Context content . Because story relates to a different subject from story Shop in Context content which relates to Venus Williams is different from content .

In some embodiments special content such as Shop in Context content is generated dynamically by sending a content request from client application to content augmentation server when a contextual search interface is activated by a user. This content request includes the context vector which content augmentation server uses to select appropriate special content. Content augmentation server may be operated by a search provider or by another promulgator of contextual search technologies.

At step content augmentation server generates or selects content to be added to the hosting page based on the context vector. For example content augmentation server may access sponsored content database shown in which advantageously associates specific items of sponsored content with various keywords. Content augmentation server can extract keywords from the received context vector and select one or more items of sponsored content from database based on the keywords. The number of items selected may be limited if desired e.g. in two items are selected for each contextual search interface . Where more than the maximum number of items match the keywords selection among the items can be based on various criteria e.g. the number or importance of the keywords matched by each item and or the terms of sponsorship agreements between a provider of content augmentation server and various sponsors of the content in database .

At step content augmentation server returns the special content to client application which redisplays the host page step including the special content. Any hosting page content following the insertion point of the contextual search interface may be moved down as needed to make room for the special content.

It will be appreciated that the process described herein is illustrative and that variations and modifications are possible. Steps described as sequential may be executed in parallel order of steps may be varied and steps may be modified or combined. In some embodiments the special content may be selected in advance e.g. when the contextual search interface is created or updated and incorporated into the source code for the hosting page so that a real time request to a content augmentation server is not required. It is to be understood that where a hosting page includes multiple contextual search interfaces special content can be displayed for any active interfaces without also being displayed for any inactive ones.

Special content is not limited to shopping or advertising information. Other types of special content might include links to news stories related to the content links to the most popular Web sites related to the content related images or media content or any other type of content. any type of special content can be selected based on the context vector e.g. by accessing an appropriate database using the context vector. For instance links to related news stories might be generated by querying one or more news servers or news sites using selected terms or all terms from the context vector. A list of the most popular related sites can be generated e.g. by obtaining a listing of most popular sites and identifying sites from that list that contain terms from the context vector. Related images can be located by accessing an image database.

More generally the context vector associated with a contextual search interface can be used in a variety of ways to identify related content. Using the content augmentation systems and methods described herein displaying of such content can be deferred until the user has indicated interest in such content by activating a contextual search interface. Thus the amount of information related to a particular topic that is displayed on the hosting page can be made dependent on the user s expressed interest in the topic.

In some embodiments context vectors may be used to implement a contextual search without an explicit user supplied query also referred to herein as a queryless search. For instance from an active contextual search interface e.g. interface of a user may simply activate the submit control without entering any query terms. If a contextual search with no user query terms is submitted the search server or the client application may construct and process a query based on the context vector or on selected terms from the context vector. For instance one or more of the most frequent terms in the context vector might be selected in lieu of user keywords while other terms might be used as context keywords and a process such as process or described above may be used to perform the contextual search.

The user interfaces shown and described above are illustrative and other interfaces are possible. In some embodiments the user interface provides additional features such as previews of contextual searches and or options for enabling the user to interact with the context vector. Additional examples of user interfaces will now be described.

When the user clicks on or otherwise activates interface a pop up menu appears as show in . In this embodiment pop up menu corresponds to the active state of contextual search interface . Pop up menu includes a text box and a related search button for that can be used to enter a query for a contextual search. If the user enters a query the context vector associated with interface would be submitted along with the query.

Pop up menu advantageously also provides augmented content based on the context vector. For example section identifies other pages relevant to the context. In this example the other pages are owned by the provider of page and provide stock market data related to companies mentioned in short report . Relevant pages are advantageously identified in a context dependent way. For instance if the context vector includes the name of a company links to stock market data or other information about that company might be provided. If the context vector includes the name of a product links to sites selling or reviewing the product might be provided.

Section suggests related searches that the user may want to try. Suggestions for related searches may be identified in a variety of ways. For example the search provider or other supplier of augmented content may keep records of user queries and may be able to provide a list of the most frequent queries containing a particular term. Terms from the context vector can be matched to a such list of queries to identify some number e.g. three five or ten of related queries. As another example it is described in U.S. Patent Application Publication No. 20040199498 published Oct. 7 2004 assigned to the assignee of the present application that a concept network may be constructed from a set of queries and that the concept network may be used to generate suggestions for related searches. Starting from terms in the context vector suggestions may be obtained using a concept network in accordance with methods described in the referenced Publication. Other techniques for generating suggestions for related searches may also be used.

Section includes the top three or some other number preview results of a queryless search in which the context vector is used to define a query as described above. The results include links that advantageously open the linked to page in a new browser window. A More . . . link invites the user to view the full list of results e.g. in a new browser window that is opened if the user selects link .

In one embodiment the preview queryless search is conducted by selecting some number e.g. three to five of highest weighted terms from the input context vector as search keywords and executing a conventional search with the search selecting a limited number e.g. 10 20 of most relevant hits. For each of these hits a context vector is generated e.g. using any of the processes described above and compared to the input context vector to generate a similarity score. A similarity score may be based on the number of terms in common the fraction of terms in common and or similarity of term weights assigned to particular terms. If the similarity score exceeds an upper bound the hit is rejected as being too duplicative of the current content if the similarity score is below a lower bound the hit is rejected as being irrelevant. Hits that are not rejected may be presented as the search results. Optionally if not enough search results are obtained a new query using fewer keywords or a different combination of keywords might be processed in a similar manner to locate further relevant hits.

It will be appreciated that the pop up interface described herein is illustrative and that variations and modifications are possible. The pop up interface may be implemented using a pop up menu a dialog box a new browser window or a new tab for browser clients that support multiple tabs for displaying different Web pages. The size and placement of the pop up interface can be adjusted as desired. Alternatively any or all of the information shown in pop up menu could be presented in line in page when the contextual search interface is activated.

In some embodiments the content of pop up interface may depend in part on whether the Web page is owned by the contextual search provider or not. For instance in the case of contextual search interfaces for third party pages section might be omitted. In other embodiments the Web page owner may be allowed to select types of augmented content for pop up interface .

Toolbar provides a conventional search interface. For instance the user can enter an arbitrary query into text box and activate Web search button to perform a non contextual search. In general the results of such a search would not depend on the Web page that was being displayed when the query was submitted.

In accordance with an embodiment of the present invention toolbar also provides a contextual search interface for performing contextual searches with context derived from the current Web page which may be any Web page. To perform a contextual search the user selects all or part of the text on page e.g. block enters query terms into text box and activates Related search button . The selected text is used to generate a context vector e.g. as described above with reference to . In the present example rather than modifying page the context vector is automatically used together with the query entered in text box to perform a contextual search. Results of the search are displayed either in window or in a separate window not shown that may be launched to display search results. For browsers that provide tabbed viewing of different pages the results page may be displayed under a separate tab.

Toolbar advantageously supports a variety of contextual search techniques using a combination of explicit user input and default behavior. For example if the user activates Related search button without entering a query into text box the default behavior may be to execute a queryless search as described above using the context vector generated from the selected text. As another example if the user enters a query into text box and activates Related search button without selecting any portion of page the default behavior may be to use the complete text of page to generate the context vector for a contextual search. Combining these examples if a user activates Related search button while viewing page without entering a query into text box or selecting any portion of page the default behavior may be to execute a queryless search using the complete text of page to generate a context vector.

Toolbar is illustrative and variations and modifications are possible. Toolbar may include other buttons or control elements in addition to or instead of those shown herein.

Various interfaces for selecting a portion of the current page may be implemented. For instance a user may simply click and drag to select any portion of the text of the current page. illustrate another example referred to herein as a term extractor. As shown in the term extractor initially appears as an anchor point icon on a Web page . In one embodiment the position of icon is predefined as part of the content of page . In another embodiment icon may be placed on page by the user. For example a suitable toolbar button or other interface element may be provided to enable the user create an anchor point. After activating this element the user moves a pointing device e.g. mouse to place a pointer at a desired location within page and operates a selection control e.g. a mouse button when the pointer is at the desired position. Icon appears at approximately that position.

After icon has appeared the user may click on icon to begin selecting content. As shown in when the user clicks on icon a relatively small portion of the surrounding text is selected. A pop up menu also appears inviting the user to initiate a search using the selected text link or to further expand the range of the selected text by clicking icon again. If the user clicks icon again as shown in a larger portion of the surrounding text is selected. Pop up menu remains. If the user decides against executing a search pop up menu can be closed using control .

Expansion of the selected text portion advantageously occurs with each click on extractor icon . In one embodiment the number of lines selected is incremented in fixed amounts for example three lines per click. In another embodiment the selection is based on semantic units such as sentences or paragraphs. For instance clicking once on icon may select the sentence or paragraph where the extractor icon appears clicking twice may add the preceding and following sentences or paragraphs to the selection and so on. In one embodiment repeated clicking can eventually result in selection of the entire page.

Another example of a text selection tool referred to herein as a term extrapolator is shown in . The term extrapolator may be based on a geometrically oriented text selection toll as described in above referenced co pending application Ser. No. 11 033 101. In the term extrapolator tool is invoked by the user activating a suitable button on a toolbar of a browser window . The user then clicks on a desired location e.g. a word of interest in a page that is being displayed in browser window . For example the user may click on the word Radio at . An approximately circular region around the selected word is highlighted and used to derive context. A pop up menu also appears offering various choices to the user such as related searches sponsored content and the like.

The content of pop up menu is advantageously generated from a context vector that is determined using the text contained in circular region e.g. in accordance with techniques described above. For instance in the embodiment shown pop up menu includes suggestions for related searches links to other pages with information about people and companies appearing in the context vector and sponsored content related to the subject of the article. Other information or combinations of information may also be supplied in pop up menu .

The user may click again to further expand region and pop up menu is updated accordingly. With this real time feedback the user can stop the expansion whenever pop up menu reflects the actual context of interest. It is to be understood that region is not limited to being circular. Ellipses ovals polygons or other shapes may be substituted.

These selection techniques can be combined. For instance referring again to the pop up menu for the term extractor could also include information similar to that shown in pop up menu . Text selection mechanisms can also include conventional click and drag techniques or other techniques. The term extrapolator and term extractor shown herein may be advantageously employed for browsers implemented in mobile devices where click and drag techniques are not readily available.

The toolbar interfaces described herein can be further extended to a deskbar interface. The deskbar interface may be available e.g. from a Windows desktop at any time when the user s computer is connected to a network e.g. the Internet regardless of whether the user is actively accessing network content at that time. The deskbar interface can advantageously be used to initiate a contextual search using any document the user happens to be viewing. As described above the user activates the deskbar interface selects text from any application e.g. word processing e mail etc. enters a query into the deskbar interface and activates a submit search control of the deskbar interface. The contextual search can be processed as described above the deskbar interface advantageously opens a browser window to display the results.

Any of the toolbar based techniques described above including context selection selecting the full document by default and queryless search capability may be incorporated into the deskbar interface.

In some embodiments the user may be able to customize an automatically generated context vector e.g. while viewing results of a contextual search. For example referring again to suppose that a user selects text types athens olympics into text box then activates Related search button to perform a contextual search.

A search results page that might be generated in response to this contextual query is shown in . Page includes conventional features of a results page such as a list of hits at a text box for editing the query and a Search button for submitting the new query.

Page also includes a context box that can be edited by the user. Context box identifies at the Web page e.g. page of that provided the context vector and provides a list of context vector terms that were used in the query e.g. 2004 games olympics greece etc. . Each term has an associated checkbox that the user can check or uncheck to change the context. After changing the selection of checked boxes and or editing the query as desired the user can execute a new contextual query by activating Search button . Only terms that are checked in box would be used in the context vector for the new search.

In this embodiment context box includes a control that allows the user to turn off the context vector and execute a non contextual search.

Context box can be used to support an iterative search process. For example if the list of hits at is not satisfactory the user can change the context vector and or the query and search again. The search results would be displayed on a page similar to page showing which checkboxes were checked or not and allowing the user to make further changes to the context vector and or the query. In this way the user can iteratively refocus the search to locate relevant content. For instance the user could begin with a queryless contextual search executed from some page containing information of interest then begin adding keywords and or modifying the context terms to refine the search. The user might also turn off the context vector using control or select one of the hits as a content source for a new contextual search e.g. by clicking through to one of the hits and executing a contextual search from a toolbar interface while viewing the hit page.

In some embodiments different context terms can be given different weights in ranking search results. The user may be allowed e.g. via an advanced search option to modify the weights in addition to or instead of using checkboxes .

Another user interface for contextual queries allows the user to provide an arbitrary block of text as a query. For example a search page may have a large box into which the user can freely type or cut and paste text describing what the user is interested in. illustrates one such interface . Query box is used to enter keywords e.g. mendocino that must be present in the results. In context box the user can enter a free text description of terms that provide context for identifying which hits are most likely to be relevant. Sentences phrases or single words may be provided. Search button submits the query and Clear button clears boxes and . In some embodiments query box or context box may be left blank by the user. If Search button is activated while query box is empty a queryless contextual search using context information from box may be executed similarly if search button is activated when context box is empty a conventional non contextual search may be executed. If both boxes are empty when Search button is activated no search would be executed. The user might be prompted to enter something in one or both boxes and try again.

Interface allows users to indicate their interests in a more natural way than conventional search queries permit. A user can insert any amount of descriptive material into context box and the search server can use that material to shape a response to the query as described above. Since context terms need not be used as search keywords the user can freely enter words phrases and or sentences describing the content sought without trying to exactly match terms that the content provider might or might not have used.

It will be appreciated that all of the foregoing user interfaces are illustrative and that other interfaces are also possible. Interface elements described herein may be modified or varied in appearance and or operation.

In some embodiments user interfaces similar to those described herein may be provided for handheld devices e.g. mobile phones or personal digital assistants . Such devices typically provide limited or comparatively slow interfaces for user data entry. For instance a mobile phone keypad typically has digits 0 9 pound and star keys as well as a small number of menu command keys. Typing text often requires relatively slow processes such as pressing a key multiple times to cycle through three or four letters associated with that key. Other handheld devices provide keyboards or handwriting recognition but the small size of keyboards and the limitations of handwriting recognition can slow the process of entering text for a search query.

User interfaces that allow queryless searching are well suited for such devices. For example in one embodiment while the user is viewing a page one of the input keys may be designated for initiating a queryless search using the entire page as context similarly to the effect of selecting Related search button without selecting text or entering a query as described above. Alternatively the user may be able to select text and execute a queryless search on the selected text. In some embodiments interfaces similar to the term extractor or term extrapolator described above might be used to facilitate text selection e.g. in devices that lack click and drag selection functions.

Contextual search capability and context vectors have a variety of other embodiments and applications. Some examples will now be described it is to be understood that these examples are illustrative and not limiting of the invention.

In some embodiments context vectors can be also be used to facilitate entry of queries by users. For example if a user begins to enter e.g. by typing a query into a search toolbar interface of a client application while viewing a hosting Web page the client application might use context vector s from that page to generate auto completion suggestions for the query. This can be done regardless of whether a particular contextual search interface is active or inactive. For example if at page of the user typed V E N into a search toolbar interface not shown in the client application might suggest Venus or Venus Williams as the intended text. The user could then hit the Enter or Tab key or any other designated key to accept the suggestion or just ignore the suggestion and keep typing. Similarly if the user begins to type a query into a contextual search interface the context vector for that interface may be used to generate auto completion suggestions for the user.

In some embodiments the search server may collect data related to contextual searches and use this data to improve the results of such searches. Data may be collected e.g. per context vector or per hosting page. The data may include log files containing queries that were received with a particular context vector or from a particular hosting page clickthrough statistics indicating which hits users who entered the logged queries actually investigated explicit user ratings of hit pages and the like. This data may be used in various ways to improve the results of contextual searches. For example when a query comes from a particular contextual search interface the search server might include with the search results one or more suggestions for related queries that the user might want to explore next. The related queries can be determined e.g. based on other queries that have frequently been received with the same context vector or from the same hosting page.

As another example clickthrough data and or explicit ratings data associated with hits resulting from searches using a given context vector or contextual search interface may be used to refine the scoring or ranking of search hits during processing of subsequent queries that include the same context vector or that originate from the same contextual search interface. For example hit pages or sites that have been frequently visited or highly rated by previous users having a particular context as represented by the context vector are relatively likely to be useful to subsequent users having the same context such hits may have their scores or rankings adjusted upward so that they receive more prominent placement. Conversely hits that have been generally ignored or that have received low user ratings within a particular context are less likely to be relevant and may have their scores or rankings adjusted downward.

In addition aggregated data about queries and or clickthroughs originating from a particular contextual search interface may be shared with the content provider responsible for the contextual search interface preferably without identifying individual users. The content provider can use such data to gain insight into the interests and behavior of users who visit the site which may help the content provider to improve the usefulness and popularity of the site.

Query and or clickthrough data may also be used for content augmentation. For instance when a user activates a contextual search interface the special content may include a list of the most frequent queries submitted via that interface or the sites most frequently visited by previous users of that interface. These queries or sites may be presented using active links so that the user can execute one of the queries or visit a site by clicking the link.

In some embodiments a search server or another server may collect data about existing contextual search interfaces and define relationships between them based on their respective context vectors. For example a similarity relationship might be defined between two interfaces that have a certain fraction of context vector terms in common a refinement relationship might be defined where one interface s context vector includes all of the terms of another interface s context vector plus at least one additional term. In this manner a graph with contextual search interfaces as nodes and the relationships as edges may be defined. A representation of the graph may be used during query processing. For instance suppose that a contextual search interface A is a refinement of a contextual search interface B. When a query is submitted via interface B terms from the context vector of interface A might be used in processing the query. Other relationships including indirect relationships e.g. if A is a refinement of B and B is a refinement of C then it can be inferred that A is a refinement of C may also be defined and used in query processing.

In still other embodiments a contextual search query can be submitted to any search server and different contextual searches can be submitted to search servers controlled by different entities e.g. by configuring the contextual search interface so that the URL for submitting queries directs them to the desired search server. For instance if a contextual search interface relating to automobiles is created and if a specialized server with search capability for automobile information is available on the Web the contextual search may be routed to that server by including an Internet address of that server in the URL. In this way contextual searches can provide users with access to search servers that are especially suited to their contexts without the users having to know in advance that such a server exists. The ability to automatically direct a query to an appropriate server in a context dependent manner may further enhance the appeal of contextual searches to users.

Selective routing of contextual queries may be implemented in various ways. For instance where contextual search interfaces are created by content developers the content developer may construct a query URL directed to the address of any server on the Web and may enhance the query URL with a query appropriately formatted for the targeted server. Such enhanced URLs advantageously include contextual terms e.g. a context vector as well as user supplied terms.

Similarly where contextual search interfaces are generated automatically a software module that generates such interfaces may be configured to select an appropriate search server and format for the query URL based on the context vector. It is to be understood that the selected search server need not have any organizational connection to a creator or promulgator of the interface generating software module provided that the software module is capable of generating code that will cause a request to be transmitted to the selected search server in a format that the selected search server is capable of processing.

Where the search query is to be directed to a specialized search server the active state of the contextual search interface may include special content as described above. This special content may be provided by the specialized search server or by a content augmentation server that may be controlled by a different entity. The special content may include information about the search server to which the search will be directed such as a link to the search server s Web site.

In yet another implementation the decision as to where to direct a contextual search query might be made at query execution time. For example all contextual search queries could be directed to a search server e.g. search server of and the search server could determine based on a combination of the user query and context vector information whether to redirect the query to a different server for processing. In this implementation the decision to redirect a query might be dependent in part on the user supplied element of the query. For instance suppose the content for a contextual search interface relates to a new album. If a user enters the query review via the contextual search interface that query could be redirected to a database of music reviews while if the user enters the query buy via the same interface that query might be processed by the search server without redirecting.

In some embodiments different contextual search queries may be directed to the same search server but limited to different portions of a search corpus. For example a search provider may divide Web pages into a number of potentially overlapping properties such as a news property a shopping property a sports property and so on. Each such property can be treated as a separate search corpus and based on the query and the context vector a search may be directed to any one or more of these properties. Where searches across multiple properties are performed the property that returned a particular result may also be used as a factor in ranking the results.

Other embodiments include user personalization features allowing data specific to the user as well as the context to inform the search results. For example the search provider may maintain a user profile for each registered user of its services. When a registered user who is logged in executes a search contextual or otherwise information about that search can be recorded and associated with the user. By analyzing patterns in a given user s queries a user vector may be developed. During a contextual search information from the user vector as well as the context vector may be used in performing the search and or ranking the results. In addition the user vector may also be used in dynamically generating augmented content when a user activates a contextual search interface as described above. Where the user who entered a query is identifiable any user specific information e.g. sites or pages a user has bookmarked explicit user ratings of sites or pages and so on may also be used in conjunction with a context vector to inform search results.

In even further embodiments users may be able to create bookmarks for contextual search interfaces or specific contextual queries that they have found useful so that they can easily return to these interfaces. It will be appreciated that because contextual search interfaces return context dependent results not all such interfaces are likely to be equally useful to a particular user. When a user finds one that is useful she may bookmark the page that contains it using conventional browser based bookmarks or bookmarking functionality supported by a search toolbar however it will be appreciated that if the content of the hosting page changes the context vector may change as well. Accordingly some embodiments of the present invention enable the user to bookmark the contextual search itself e.g. by saving the enhanced query URL that includes the context vector. When the user selects this bookmark she is prompted to enter a query and a contextual search is executed using the new query. Alternatively the user may be able to save the query as part of the bookmark so that selecting the bookmark at some later time re executes a particular contextual search regardless of the current content of the hosting page.

Users may also be able to share their bookmarked contextual searches with other users e.g. through various trust network mechanisms. In still other embodiments users may be able to annotate and label their bookmarked or otherwise saved contextual searches or interfaces.

While the invention has been described with respect to specific embodiments one skilled in the art will recognize that numerous modifications are possible. For instance where specific input devices e.g. computer mouse are referred to herein it is to be understood that different input devices e.g. keystrokes or voice commands can be substituted. Similarly clickable buttons and other graphical user interface control elements referred to herein may be replaced by any suitable alternative control elements.

The appearance of the contextual search interface in active and or inactive states may also vary from that shown herein. For instance the active interface may appear in the hosting page as shown in or in a separate pop up menu as shown in . In addition the look of the icon and or the active interface elements may be varied without limitation. Such variation may be controlled by a contextual search promulgator or a content provider. As just one example the look of the inactive icon may be varied to suggest the context thus a film reel might be included in an icon for entertainment related searches a football or baseball might be included in icons for sports related searches and so on. A consistent text string e.g. Search This as shown in Related Results as shown in symbol or other element may be included in all icons as a further indication that the icon represents a contextual search interface.

In another variation the inactive state of a contextual search interface may be implemented with hidden and visible modes. For example the contextual search icon may be hidden i.e. not displayed on the hosting page except when the user s mouse cursor is positioned or moved over the associated content. When the mouse cursor is so positioned the icon becomes visible and the user may click on it to activate it. Hidden and visible modes may be implemented e.g. using a language such as Java.

The embodiments described herein may make reference to Web sites pages links and other terminology specific to instances where the World Wide Web or a subset thereof serves as the search corpus. It should be understood that the systems and processes described herein can be adapted for use with a different search corpus such as an electronic database or document repository and that results may include content as well as links or references to locations where content may be found.

In addition the invention has been described with reference to computer systems having particular hardware and software elements. It is to be understood that other systems with different combinations of hardware and or software components could also be implemented.

Thus although the invention has been described with respect to specific embodiments it will be appreciated that the invention is intended to cover all modifications and equivalents within the scope of the following claims.

