---

title: Treatment of layer tree as video
abstract: In one embodiment, a computing device renders as a first frame of a video a graphical user interface (GUI) of a software application on the computing device based on a multi-layered-tree representation of the GUI. The computing device modifies the multi-layered-tree representation of the GUI in response to an input or output associated with the GUI. The computing device also renders as a second frame of the video of the GUI based on the multi-layered-tree representation of the GUI as modified.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09274766&OS=09274766&RS=09274766
owner: Facebook, Inc.
number: 09274766
owner_city: Menlo Park
owner_country: US
publication_date: 20121214
---
A mobile computing device such as a smartphone tablet computer or laptop computer may include functionality for determining its location direction or orientation such as a GPS receiver compass or gyroscope. Such a device may also include functionality for wireless communication such as BLUETOOTH communication near field communication NFC or infrared IR communication or communication with a wireless local area networks WLANs or cellular telephone network. Such a device may also include one or more cameras scanners touchscreens microphones or speakers. Mobile computing devices may also execute software applications such as games web browsers or social networking applications. With social networking applications users may connect communicate and share information with other users in their social networks.

A structured document such as a web page may include for example page layout information scripts page content such as text media data e.g. graphics photos video clips and executable code objects e.g. a game executable within a browser window or frame . Structured documents may be implemented with languages and technologies such as Hypertext Markup Language HTML Extensible Markup Language XML Extensible Hypertext Markup Language XHTML JavaScript WebGL Cascading Style Sheet CSS including CSS animations and transitions and frequently Java. A structured document may itself include references to multiple structured documents and contents. For example a web page may include one or more inline references by incorporating Uniform Resource Locations URLs and or script code e.g. JavaScript PHP AJAX that in response to a user event e.g. a mouse click a mouse hover over causes an application displaying the web page in a graphical user interface to dynamically retrieve content specified by an URL and the script code.

In particular embodiments user interface components of a graphical user interface of a software application on a computing device may be represented as layers while the graphical user interface may be represented as a multi layered tree. The computing device may render the graphical user interface as a video based on the multi layered tree. Each frame of the video may correspond to transforming adding or removing one or more layers in the multi layered tree. In particular embodiments the overall user interface of the computing device may be represented as a multi layered tree with each sub tree of the multi layered tree representing a graphical user interface of a software application on the computing device. The computing device may render a video for the overall user interface with a single animation system while a software application s user interface may be treated as an HTML element.

In particular embodiments an input event associated with a user interface of a software application on a computing device may be de coupled from its corresponding output. A first computing thread on the computing device may receive an input event identify a second computing thread on the computing device to process the input event and send the input event to the second computing thread. The second computing thread may process the input event to generate a corresponding output. Since the first computing thread is de coupled from the second computing thread the first computing thread may continue receiving and processing subsequent input events even if the second thread is non responsive to the first input event.

A graphical user interface of an application allows a user to interact with the application. A graphical user interface may include components such as text and media data e.g. an image an video clip conveying information to a user. A graphical user interface of an application may also include components such as menus selectable icons or text or other control or input elements that allow a user to execute commands associated with the application or navigate within the graphical user interface or to a user interface of another application .

Particular embodiments describe methods for rendering a graphical user interface as a video. Each frame of the video may correspond to a particular placement of user interface components within the graphical user interface while a new frame of the video may correspond to transforming adding or removing one or more components within the graphical user interface. Particular embodiments also describe methods for de coupling an input associated with a graphical user interface from a corresponding output. For example particular embodiments may de couple a touch input associated with a graphical user interface from rendering of the graphical user interface.

In particular embodiments two dimensional items of the graphical user interface may be represented as layers while the graphical user interface may be represented as a multi layered tree i.e. a tree structured with multiple levels of layers. The multi layered tree representation of the graphical user interface may comprise a root layer and one or more child layers. illustrates an example graphical user interface with a list of content items. For example the example graphical user interface may be a graphical user interface of a calendar application. The example graphical user interface may include a header e.g. displaying a text string Bob s Calendar a footer e.g. displaying a selectable icon New Appointment and a list of content items e.g. a list of appointment items such as 03 05 Tue 10 00 AM dentist 03 06 Wed 4 00 PM Sam soccer and so on . The example graphical user interface may be represented as a multi layered tree illustrated in . The example multi layered tree may comprise a root layer e.g. representing a background color of the example graphical user interface a child header layer representing the header illustrated in and a child footer layer representing the footer layer illustrated in . The example multi layered tree may also comprise a child structural layer including children layers that each represents a content item illustrated in . The structural layer may serve as a structural container of its children layers . The structural layer may not have its own content and may not be visible in the example graphical user interface .

In particular embodiments each child layer of a multi layered tree representing a graphical user interface may comprise a geometrical property in its size and its transformation relative to its parent layer. For example a content item layer illustrated in representing a particular content item illustrated in may have a geometrical property in a size of 300 pixels in width and 50 pixels in height and a transformation of 250 pixels in a vertical direction and 0 pixel in horizontal direction relative to the structural layer . Another content layer representing another content item immediately below the particular content item may have a geometrical property in a size of 300 pixels in width and 50 pixels in height and a transformation of 300 pixels in a vertical direction and 0 pixel in horizontal direction relative to the structural layer . In one embodiment a geometrical property of a layer in a multi layered tree may be represented by a four by four matrix. In particular embodiments the computing device may determine a placement of a content item within the graphical user interface by multiplying the transformation of the content item s corresponding layer in the multi layered tree by the transformation of the layer s parent layer in the multi layered tree. That is the computing device may calculate a placement of a particular layer within the graphical user interface by traversing the multi layered tree from the root layer to the particular layer and multiplying corresponding transformations.

In particular embodiments the computing device may render the first frame of the video by generating a raster image e.g. a bitmap image for each of one or more layers of the multi layered tree representing the graphical user interface and compositing or combining the raster images into a single frame i.e. a single image of the video to be displayed in a display on the computing device. The computing device may composite the raster images of the layers based on respective placements of the layers two dimensional items in the graphical user interface.

In particular embodiments at step the computing device may modify the multi layered tree representation of the graphical user interface in response to an input or output event associated with the graphical user interface of the software application. In particular embodiments at step the computing device may render as a second frame of the video the graphical user interface based on the multi layered tree representation of the graphical user interface as modified. In particular embodiments the software application may be an event driven software application. In particular embodiments the input or output event associated with the graphical user interface may comprise user input provided through the graphical user interface of the software application.

For example the example graphical user interface illustrated in may be displayed in a touchscreen of the computing device. A user may scroll up the list of content items of the example graphical user interface by performing a sliding touch gesture on the example graphical user interface as illustrated by the arrow in . In response to the input event associated with the example graphical user interface i.e. the user scrolling up touch gesture the computing device may modify the corresponding multi layered tree illustrated in . Instead of changing the transformation of each content layer the computing device may modify the transformation of the structural layer relative to the root layer e.g. changing by pixels in the upward vertical direction while maintaining the respective transformation for content layers relative to the structural layer . The computing device may render as a second frame of the video for displaying the example graphical user interface based on the multi layered tree representation as modified as illustrated in . For example the computing device may composite respective raster images for layers of the multi layered tree based on the modified transformation of the structured layer relative to the root layer as described above.

In particular embodiments the computing device may modify the multi layered tree representation for the graphical user interface in response to an input or output event associated with the graphical user interface by adding a layer of the multi layered tree representation. For example a user may perform a tap touch gesture on a particular content item of the example graphical user interface of a calendar application as illustrated in causing the calendar application to create a pop up window displaying details of the particular content item . For another example the calendar application may output a reminder of a particular content item e.g. based on a timer by creating a pop up window for the reminder. As illustrated in the computing device may add a layer corresponding to the pop up window attach the layer to the root layer as a child layer to the root layer of the example multi layered tree and determine a geometrical property size and transformation for the layer. The computing device may in response to the input event user tap gesture or the output event reminder render another frame of the video for the example graphical user interface based on the example multi layered tree as modified i.e. with the added layer as illustrated in . The computing device may rendered the another frame by generating a raster image for the added layer and composite raster images for the added layers and other layers of the example multi layered tree based on their respective placements.

In particular embodiments the computing device may modify the multi layered tree representation for the graphical user interface in response to an input or output event associated with the graphical user interface by removing a layer of the multi layered tree representation. For example the user may dismiss the pop up window described above e.g. by selecting a Dismiss icon displayed within the pop up window . The computing device may in response to the user s dismissal remove the layer corresponding to the pop up window from the example multi layered tree and render another frame of the video for the example graphical user interface with remaining layers of the example multi layered tree as modified i.e. without the layer .

In particular embodiments the overall user interface of the computing device e.g. a home screen or a graphical representation of an operating system shell of the computing device may be represented as a multi layered tree with each sub tree of the multi layered tree representing a graphical user interface of a software application on the computing device. A window manager comprising one or more software components may manage input output and placement and displaying of components of the overall user interface based on the multi layer tree.

In particular embodiments a root layer of the multi layered tree representing a graphical user interface of a software application on the computing device may be a child of a multi layered tree representation associated with a window manager of the computing device. Furthermore in particular embodiments each of a plurality of graphical user interfaces of a plurality of software applications on the computing device has a multi layered tree representation with a root that is a child of the multi layered tree representation associated with the window manager. That is every software application s graphical user interface may be represented by a multi layered tree that is a child structure of the multi layered tree representing the home screen of the computing device. In particular embodiments the window manager or another process executed by one or more processors of the computing device may render a frame of a video for the home screen of the computing device based on the multi layered tree representation of the home screen.

As described earlier with the method the window manager may render a frame of a video for the home screen based on the multi layered tree representing the home screen . For example the window manager may generate raster images for two dimensional items of the home screen e.g. the status bar the clock the calendar application s graphical user interface and so on and calculate a placement for each of the two dimensional items. The window manager may composite the raster images into a frame a single image of the video for the home screen based on respective placements of the two dimensional items within the home screen .

The window manager may modify the multi layered tree representing the home screen in response to an input or output event associated with the home screen . The window manager may modify the multi layered tree by modifying a transformation of a layer adding a layer to the multi layered tree or removing a layer from the multi layered tree . The window manager may render another frame of the video for the home screen based on the multi layered tree as modified. For example a user the computing device may dismiss the calendar application s graphical user interface by performing a flick touch gesture as indicated by the arrow illustrated in . In response to the user input event i.e. the flick touch gesture the window manager may remove children layers from the multi layered tree representing the calendar application s graphical user interface and attach to the root layer of the multi layered tree a child layer representing a selectable icon for the calendar application as illustrated in . The window manager may also modify a transformation for the root layer or the icon layer for a location to place the icon within the home screen . The window manager may render another frame of the video for the home screen based on the modified multi layered tree . illustrates the home screen rendered in response to the user s dismissal of the calendar s graphical user interface . The home screen illustrated in may include a selectable icon for the calendar application and other two dimensional items as rendered based on the modified multi layered tree illustrated in . As described above the overall user interface of the computing device e.g. a home screen may be represented as a multi layered tree associated with a window manager while each of graphical user interfaces of software applications on the computing device may be represented as a sub tree with its root being a child of the overall multi layered tree associated with the window manager. As the overall multi layered tree structure is recursive the window manager may treat each sub tree as a video itself in addition to treating the overall multi layered tree as another video e.g. for the home screen . That is the window manager may render a frame of a video for a software application s graphical user interface based on a change to a corresponding sub tree e.g. in response to an input or output event associated with the software application . The window manager may also render a frame of a video for the home screen based on a change to the overall multi layered tree.

In particular embodiments a multi layered tree representing a graphical user interface of a software application on the computing device or a home screen of the computing device may be constructed with one or more structured documents. The computing device may render a frame of a video for the graphical user interface based on the multi layered tree by using a layout engine. A layout engine or web browser engine is a software component or library for rendering structured documents in a graphical user interface. For example Google s Chrome web browser and Apple s Safari web browser use WebKit software to render web pages. WebKit includes a layout engine WebCore and a JavaScript engine JavaScriptCore for interpreting and executes JavaScript code . An application or an operating system running on the computing device may utilize a layout engine to render structured documents by incorporating modules in the layout engine via an application programming interface API to the layout engine. As illustrated in an entire graphical display e.g. the home screen of the computing device may be represented by a multi layered tree associated with a window manager of the display. Each of graphical user interfaces of software applications on the computing device may be represented as a sub multi layered tree with its root being a child of the multi layered tree associated with the window manager. That is the window manager or another process running on the computing device may treat a software application s graphical user interface as an ordinary HTML element e.g. as an HTML element . The window manager may also treat a software application s graphical user interface as a basic building block for a particular graphical user interface system being used e.g. View for Android operating system provided by Google Inc. UIView for iOS operating system provided by Apple Inc. NSView for OS X operating system provided by Apple Inc. window for Microsoft Windows operating system provided by Microsoft Corporation or QWidget for Qt application framework originally developed by Nokia Oyj . The window manager may create animations or videos for the entire graphical display using one animation system e.g. CSS . In another embodiment the computing device may render a graphical user interface of a software application on the computing device or a home screen of the computing device as frames of a MPEG video or a video in any suitable compression decompression format such as QuickTime format provided by Apple Inc. or Windows Media Video format provided by Microsoft Corporation .

Particular embodiments may repeat one or more steps of the method of where appropriate. Although this disclosure describes and illustrates particular steps of the method of as occurring in a particular order this disclosure contemplates any suitable steps of the method of occurring in any suitable order. Moreover although this disclosure describes and illustrates particular components devices or systems carrying out particular steps of the method of this disclosure contemplates any suitable combination of any suitable components devices or systems carrying out any suitable steps of the method of .

In particular embodiments at step the first thread of execution on the computing device may identify a second thread of execution on the computing device to process the user interface input. In particular embodiments at step the first thread of execution on the computing device may send the user interface input to the second thread of execution. In particular embodiments at step the second thread of execution on the computing device may process the user interface input to generate a user interface output associated with the user interface input. For example a user interface output may comprise a graphics output event e.g. rendering a web page network event keyboard request or navigation event. The second thread of execution may be associated with an event driven software application. In particular embodiments the second thread may be associated with the user interface. However the second thread may be de coupled from the first thread. That is the first thread may not have to wait for processing the user interface input by the second thread. The execution of the first thread may not be stopped if the second thread is non responsive e.g. in processing the user interface input . Furthermore in particular embodiments if the second thread is non responsive with respect to the user interface input the first thread or another process or computing thread may provide an indication through the user interface of the non responsiveness.

For example the first thread may be a computing thread of the window manager managing the home screen illustrated in described earlier. The window manager may receive a user interface input in a touch event indicated by the arrow illustrated in . As described earlier the touch event is a flick touch gesture by a user to dismiss the graphical user interface of an calendar application. The window manager may identify a second thread de coupled from the first thread to process the touch event. The second thread may be another computing thread of the window manager spun off by the first thread. The first thread may send the touch event to the second thread. The second thread may process the touch event by generating the home screen a user interface output illustrated in . The second thread may also cause the operating system of the computing device to stop execution of the calendar application or to execute the calendar application with a background process . If the second thread is not responsive to the touch event e.g. if the execution of the calendar application is hang or frozen the first thread may provide a visual indication such as dimming the graphical user interface of the calendar application as illustrated in . Here since the second thread is de coupled from the first thread the non responsiveness of the second thread may not block execution of the first thread or the window manager .

In particular embodiments the first thread of execution may send the user interface input to the second thread of execution by sending the user interface input to a buffer e.g. a software buffer associated with the second thread of execution. The buffer may be configured to store the user interface input for the second thread of execution while the second thread of execution processes other input or is non responsive . For example in the example of the touch event of a user s flick touch gesture illustrated in describer above the user may just added a new appointment before dismissing the calendar application. The first thread may send the second thread the touch event while the second thread is processing the new appointment e.g. instructing the calendar application to store the new appointment in a remote server . The first thread may send the touch event to a buffer associated with the second thread. After completing processing the new appointment the second thread may look up the buffer for a next task e.g. dismissing the calendar application and process the next task and clear the task from the buffer .

In particular embodiments the first thread of execution may assigns a sequence number to the user interface input identifying its position in a sequence of user interface inputs. For example in the example of the touch event of a user s flick touch gesture illustrated in describer above the flick touch gesture includes three touch inputs a touch down input a touch move input and a touch up input. The first thread may assign sequence numbers and to the touch down input the touch move input and the touch up input respectively. The first thread may send the three touch inputs with corresponding sequence numbers to a buffer associated with the second thread. The second thread may interpret a first user input with the earliest sequence number in the buffer e.g. the touch down input with the sequence number . The second thread may recognize the first user input e.g. as a tap touch gesture and process the first user input accordingly and clear the first user input from the buffer . The second thread may also clear out the second and third user inputs from the buffer as the second thread is not interested in them any more. That is not all user interface inputs stored in the buffer are consumed. The second thread may interpret the first user input with one or more additional user inputs stored in the buffer. For example the second thread may interpret the first three user inputs in the buffer e.g. the touch down input the touch move input and the touch up input . The second thread or the calendar application may recognize the first three inputs combined as a flick touch gesture and process the flick touch gesture accordingly e.g. dismissing the graphical user interface from the home screen . The second thread may also clear the first three input events from the buffer. In other embodiments the first thread e.g. the window manager may interpret user interface inputs with sequence numbers. For example the first thread may interpret the first input the touch down input described above as a tap touch gesture for the calendar application and send the tap touch gesture to the calendar application for processing. The first thread may also discard the second and third inputs and the touch move and the touch up inputs . Or the first thread may interpret the inputs and as a flick touch gesture for the calendar application and send the flick touch gesture to the calendar application for processing.

In particular embodiments the first thread the window manager may vary a size of the buffer associated with the second thread based on processing or acknowledgement latency associated with the second thread. For example the first thread may increase the buffer size if the buffer is full e.g. due to non responsiveness of the second thread . The first thread may also provide a visual indication such as dimming a corresponding graphical user interface illustrated in that the second thread an application associated with the second thread is not responsive. The first thread may also throttle the rate or quality at which the first thread send events to the second thread such that the overall latency for the entire user interface e.g. the home screen may be lessened.

The method and the method may provide a flexible implementation of a graphical user interface that is always responsive. For example a first computing thread of a software application or an operating system on a computing device may post a touchscreen keyboard a graphical user interface of a keyboard application in the computing device s touchscreen. The touchscreen keyboard may be represented by a child multi layered tree of a multi layered tree representation of a home screen of the computing device. Since the touchscreen keyboard may be represented as an ordinary HTML element not a window within another application s window the touchscreen keyboard may be placed anywhere within the home screen and may overlap with a graphical user interface of any other software application on the computing device. In response to a touch input by a user on the touchscreen keyboard the first thread may identify a second computing thread to process the user input e.g. a thread associated with another software application on the computing device . Since the second thread is de coupled from the first thread the touchscreen keyboard may be always responsive to additional user touch inputs even if the second thread is none responsive to a first user input.

Particular embodiments may repeat one or more steps of the method of where appropriate. Although this disclosure describes and illustrates particular steps of the method of as occurring in a particular order this disclosure contemplates any suitable steps of the method of occurring in any suitable order. Moreover although this disclosure describes and illustrates particular components devices or systems carrying out particular steps of the method of this disclosure contemplates any suitable combination of any suitable components devices or systems carrying out any suitable steps of the method of .

This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system taking any suitable physical form. As example and not by way of limitation computer system may be an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server a tablet computer system or a combination of two or more of these. Where appropriate computer system may include one or more computer systems be unitary or distributed span multiple locations span multiple machines span multiple data centers or reside in a cloud which may include one or more cloud components in one or more networks. Where appropriate one or more computer systems may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation one or more computer systems may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein where appropriate.

In particular embodiments computer system includes a processor memory storage an input output I O interface a communication interface and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement this disclosure contemplates any suitable computer system having any suitable number of any suitable components in any suitable arrangement.

In particular embodiments processor includes hardware for executing instructions such as those making up a computer program. As an example and not by way of limitation to execute instructions processor may retrieve or fetch the instructions from an internal register an internal cache memory or storage decode and execute them and then write one or more results to an internal register an internal cache memory or storage . In particular embodiments processor may include one or more internal caches for data instructions or addresses. This disclosure contemplates processor including any suitable number of any suitable internal caches where appropriate. As an example and not by way of limitation processor may include one or more instruction caches one or more data caches and one or more translation lookaside buffers TLBs . Instructions in the instruction caches may be copies of instructions in memory or storage and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory or storage for instructions executing at processor to operate on the results of previous instructions executed at processor for access by subsequent instructions executing at processor or for writing to memory or storage or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual address translation for processor . In particular embodiments processor may include one or more internal registers for data instructions or addresses. This disclosure contemplates processor including any suitable number of any suitable internal registers where appropriate. Where appropriate processor may include one or more arithmetic logic units ALUs be a multi core processor or include one or more processors . Although this disclosure describes and illustrates a particular processor this disclosure contemplates any suitable processor.

In particular embodiments memory includes main memory for storing instructions for processor to execute or data for processor to operate on. As an example and not by way of limitation computer system may load instructions from storage or another source such as for example another computer system to memory . Processor may then load the instructions from memory to an internal register or internal cache. To execute the instructions processor may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions processor may write one or more results which may be intermediate or final results to the internal register or internal cache. Processor may then write one or more of those results to memory . In particular embodiments processor executes only instructions in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere and operates only on data in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere . One or more memory buses which may each include an address bus and a data bus may couple processor to memory . Bus may include one or more memory buses as described below. In particular embodiments one or more memory management units MMUs reside between processor and memory and facilitate accesses to memory requested by processor . In particular embodiments memory includes random access memory RAM . This RAM may be volatile memory where appropriate Where appropriate this RAM may be dynamic RAM DRAM or static RAM SRAM . Moreover where appropriate this RAM may be single ported or multi ported RAM. This disclosure contemplates any suitable RAM. Memory may include one or more memories where appropriate. Although this disclosure describes and illustrates particular memory this disclosure contemplates any suitable memory.

In particular embodiments storage includes mass storage for data or instructions. As an example and not by way of limitation storage may include a hard disk drive HDD a floppy disk drive flash memory an optical disc a magneto optical disc magnetic tape or a Universal Serial Bus USB drive or a combination of two or more of these. Storage may include removable or non removable or fixed media where appropriate. Storage may be internal or external to computer system where appropriate. In particular embodiments storage is non volatile solid state memory. In particular embodiments storage includes read only memory ROM . Where appropriate this ROM may be mask programmed ROM programmable ROM PROM erasable PROM EPROM electrically erasable PROM EEPROM electrically alterable ROM EAROM or flash memory or a combination of two or more of these. This disclosure contemplates mass storage taking any suitable physical form. Storage may include one or more storage control units facilitating communication between processor and storage where appropriate. Where appropriate storage may include one or more storages . Although this disclosure describes and illustrates particular storage this disclosure contemplates any suitable storage.

In particular embodiments I O interface includes hardware software or both providing one or more interfaces for communication between computer system and one or more I O devices. Computer system may include one or more of these I O devices where appropriate. One or more of these I O devices may enable communication between a person and computer system . As an example and not by way of limitation an I O device may include a keyboard keypad microphone monitor mouse printer scanner speaker still camera stylus tablet touch screen trackball video camera another suitable I O device or a combination of two or more of these. An I O device may include one or more sensors. This disclosure contemplates any suitable I O devices and any suitable I O interfaces for them. Where appropriate I O interface may include one or more device or software drivers enabling processor to drive one or more of these I O devices. I O interface may include one or more I O interfaces where appropriate. Although this disclosure describes and illustrates a particular I O interface this disclosure contemplates any suitable I O interface.

In particular embodiments communication interface includes hardware software or both providing one or more interfaces for communication such as for example packet based communication between computer system and one or more other computer systems or one or more networks. As an example and not by way of limitation communication interface may include a network interface controller NIC or network adapter for communicating with an Ethernet or other wire based network or a wireless NIC WNIC or wireless adapter for communicating with a wireless network such as a WI FI network. This disclosure contemplates any suitable network and any suitable communication interface for it. As an example and not by way of limitation computer system may communicate with an ad hoc network a personal area network PAN a local area network LAN a wide area network WAN a metropolitan area network MAN or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example computer system may communicate with a wireless PAN WPAN such as for example a BLUETOOTH WPAN a WI FI network a WI MAX network a cellular telephone network such as for example a Global System for Mobile Communications GSM network or other suitable wireless network or a combination of two or more of these. Computer system may include any suitable communication interface for any of these networks where appropriate. Communication interface may include one or more communication interfaces where appropriate. Although this disclosure describes and illustrates a particular communication interface this disclosure contemplates any suitable communication interface.

In particular embodiments bus includes hardware software or both coupling components of computer system to each other. As an example and not by way of limitation bus may include an Accelerated Graphics Port AGP or other graphics bus an Enhanced Industry Standard Architecture EISA bus a front side bus FSB a HYPERTRANSPORT HT interconnect an Industry Standard Architecture ISA bus an INFINIBAND interconnect a low pin count LPC bus a memory bus a Micro Channel Architecture MCA bus a Peripheral Component Interconnect PCI bus a PCI Express PCIe bus a serial advanced technology attachment SATA bus a Video Electronics Standards Association local VLB bus or another suitable bus or a combination of two or more of these. Bus may include one or more buses where appropriate. Although this disclosure describes and illustrates a particular bus this disclosure contemplates any suitable bus or interconnect.

Herein a computer readable non transitory storage medium or media may include one or more semiconductor based or other integrated circuits ICs such as for example field programmable gate arrays FPGAs or application specific ICs ASICs hard disk drives HDDs hybrid hard drives HHDs optical discs optical disc drives ODDs magneto optical discs magneto optical drives floppy diskettes floppy disk drives FDDs magnetic tapes solid state drives SSDs RAM drives SECURE DIGITAL cards or drives any other suitable computer readable non transitory storage media or any suitable combination of two or more of these where appropriate. A computer readable non transitory storage medium may be volatile non volatile or a combination of volatile and non volatile where appropriate.

Herein or is inclusive and not exclusive unless expressly indicated otherwise or indicated otherwise by context. Therefore herein A or B means A B or both unless expressly indicated otherwise or indicated otherwise by context. Moreover and is both joint and several unless expressly indicated otherwise or indicated otherwise by context. Therefore herein A and B means A and B jointly or severally unless expressly indicated otherwise or indicated otherwise by context.

The scope of this disclosure encompasses all changes substitutions variations alterations and modifications to the example embodiments described or illustrated herein that a person having ordinary skill in the art would comprehend. The scope of this disclosure is not limited to the example embodiments described or illustrated herein. Moreover although this disclosure describes and illustrates respective embodiments herein as including particular components elements functions operations or steps any of these embodiments may include any combination or permutation of any of the components elements functions operations or steps described or illustrated anywhere herein that a person having ordinary skill in the art would comprehend. Furthermore reference in the appended claims to an apparatus or system or a component of an apparatus or system being adapted to arranged to capable of configured to enabled to operable to or operative to perform a particular function encompasses that apparatus system component whether or not it or that particular function is activated turned on or unlocked as long as that apparatus system or component is so adapted arranged capable configured enabled operable or operative.

