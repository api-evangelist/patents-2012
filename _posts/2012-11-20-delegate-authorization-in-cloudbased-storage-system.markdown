---

title: Delegate authorization in cloud-based storage system
abstract: At a hosted storage service, a resource and a request to store the resource are received. The request includes a location of an access control service. The access control service is separate from the hosted storage service and controls access permissions for the resource. A request to access the stored resource is received. The hosted storage service accesses metadata stored in association with the resource and determines that access permissions for the resource are controlled by the access control service. An access request is from the hosted storage service to the access control service, the access request identifying the resource and a user of the client system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09209973&OS=09209973&RS=09209973
owner: Google Inc.
number: 09209973
owner_city: Mountain View
owner_country: US
publication_date: 20121120
---
Hosted or cloud based storage refers to off site or remote data storage that is typically provided by a third party. The third party may implement the hosted storage in a data center and provide access to the hosted storage over a network such as the Internet.

In one aspect a method is performed by one or more processors. The method includes receiving at a hosted storage service a resource and a request to store the resource the request includes a location of an access control service. The access control service is separate from the hosted storage service and controls access permissions for the resource. The method further includes storing at the hosted storage service the resource in association with metadata that indicates the location of the access control service. The method further includes receiving at the hosted storage service and from a client system a request to access the stored resource. The method further includes accessing at the hosted storage service the metadata stored in association with the resource. The method further includes determining at the hosted storage service and based on the metadata that access permissions for the resource are controlled by the access control service. The method further includes in response to determining that access permissions for the resource are controlled by the access control service sending an access request from the hosted storage service to the access control service the access request identifying the resource and a user of the client system. The method further includes receiving at the hosted storage service and from the access control service an access response that indicates the user is permitted to access the resource. The method further includes in response to receiving the access response sending the resource from the hosted storage service to the client system.

Implementations can include any all or none of the following features. The access control service can maintain an access control list that defines who is authorized to perform actions on resources and the nature of the permitted actions. The access control service may be subject to a different administrative control than the hosted storage service. The resource may be encrypted by a content provider with a first key before the resource is received at the hosted storage service. The method may includs receiving at the hosted storage service the first key encrypted with a client key and sending by the hosted storage service and to the client system the first key encrypted with the client key for decryption by the client using the client key. The first key encrypted with a client key may be received from an access keystore that is subject to a different administrative control than the hosted storage service and subject to a different administrative control than the access control service. The first key may be provided to the client system from the content provider. The first key may be encrypted with a provider key and wherein the method further includes receiving at the hosted storage service the encrypted first key and storing at the hosted storage service and in association with the resource the encrypted first key. The method may include in response to receiving the access response sending the encrypted first key from the hosted storage service to the client system. The metadata stored in association with the resource may include an access control list. The access control list may identify a user and access permission for the associated resource for the user. The hosted storage service may store a second resource in association with a second access control list which identifies a second user and a second access permission for the associated second resource for the second user. The method may include receiving at the hosted storage service a validation of the access control service indicating that the access control service may be used for authorizing access to the resource. Receiving a request to access the stored resource may include receiving authentication information agreed upon by client system and the access control service and wherein sending an access request to the access control service may include sending the authentication information.

In one aspect a computer system includes a hosted storage service configured to receive a resource and a request to store the resource the request includes a location of an access control service. The access control service is separate from the hosted storage service and controls access permissions for the resource. The hosted storage service is further configured to store the resource in association with metadata that indicates the location of the access control service. The hosted storage service is further configured to receive a request to access the stored resource. The hosted storage service is further configured to access the metadata stored in association with the resource. The hosted storage service is further configured to determine based on the metadata that access permissions for the resource are controlled by the access control service. The hosted storage service is further configured to in response to determining that access permissions for the resource are controlled by the access control service send an access request to the access control service the access request identifying the resource and a user of the client system. The hosted storage service is further configured to receive from the access control service an access response that indicates the user is permitted to access the resource. The system further includes in response to receiving the access response send the resource from the hosted storage service to the client system. The system further includes a client system configured to send to the hosted storage service the request to access the stored resource. The client system is further configured to receive from the hosted storage service the resource. The system further includes an access control service configured to receive from the hosted storage service the access request. The access control service is further configured to send in response to receiving the access request the access response.

Implementations can include any all or none of the following features. The access control service can maintain an access control list that defines who is authorized to perform actions on resources and the nature of the permitted actions. The access control service may be subject to a different administrative control than the hosted storage service. The system may further include a content provider configured to encrypt the resource with a first key and send after encrypting the resource the resource to the hosted storage service. The system may be configured to encrypt the first key with a client key and send to the hosted storage service the first key encrypted with the client key the hosted storage service further configured to receive the first key encrypted with the client key and send to the client system the first key encrypted with the client key and the client system further configured to receive the first key encrypted with the client key. The system may further include an access keystore that is subject to a different administrative control than the hosted storage service and subject to a different administrative control than the access control service the access keystore configured to send to the hosted storage service the first key encrypted with a client key to the hosted storage system and the hosted storage service further configured to receive the first key encrypted with a client key. The system may be configured to send to the client system the first key and the client system is further configured to receive the first key. The first key may be encrypted with a provider key and wherein the hosted storage service is further configured to receive the encrypted first key and store the encrypted first key in association with the resource. The hosted storage service may be further configured to send the encrypted first key to the client system in response to receiving the access response. The metadata may be stored in association with the resource includes an access control list. The access control list may identify a user and access permission for the associated resource for the user. The system may be configured to store a second resource in association with a second access control list which identifies a second user and a second access permission for the associated second resource for the second user. The hosted storage service may be further configured to receive a validation of the access control service indicating that the access control service may be used for authorizing access to the resource. The system may be configured to receive authentication information agreed upon by client system and the access control service and wherein to send an access request to the access control service the hosted storage service is configured to send the authentication information.

Implementations may include one or more of the following advantages. Delegating authorization to another system can enable a hosted storage system to provide flexible and extensible data service models. By delegating authorization requests the hosted storage system can serve resources to users based on secret or unknown factors. That is a user s financial information does not need to be provided to the hosted storage system for a resource purchased by the user. Only a message from a resource owner that indicates the user is authorized to receive the resource may be needed. A third party authorization service can be used to ensure trusted data escrow. Encrypted resources and encryption keys can be used to ensure that a content provider and client have access to the resource in plaintext form but the hosted storage system does not.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages will be apparent from the description and drawings and from the claims.

A hosted storage system can specify a pre response callout for authentication and or authorization of an access request. Metadata associated with a resource can specify an access control service and a collection of parameters to be used to determine whether a user is authorized to access the resource. The access control service is separate from the hosted storage service and may be subject to a different administrative control than the hosted storage service. The access control service may determine authorization based on information or logic that is unavailable to the hosted storage service.

The system can provide scalable stores for storing data objects. The client device can upload data objects to the hosted storage service and specify access to the uploaded data objects. Access control can include a range of security levels from keeping data securely confidential to publishing it without restrictions. Data stored in hosted storage service can be secured from unauthorized access. The hosted storage service can use a simple and consistent application programming interface or API which can allow arbitrary quantities of structured or unstructured data to be kept private or shared between individuals organizations or with the world at large. The client device can store data in the hosted storage service for mutual business reasons e.g. submission of work product ordered by the owner of the hosted storage service or for use in data processing by other services e.g. images uploaded are used to automatically and dynamically create a photo gallery web page. 

The client device can be implemented using a computing device such as the computing device or the mobile device described with respect to . The client device can communicate with the hosted storage service via a network such as the Internet. The client device can communicate across the network using communication protocols such as for example one or more of Transmission Control Protocol Internet Protocol TCP IP Hypertext Transfer Protocol HTTP Secure Shell Remote Protocol SSH or Application Program Interfaces API . While only a single client device is shown there can be multiple client devices communicating across the network with the hosted storage service and or other services and devices.

The hosted storage service can be implemented such that client applications such as a client application can store retrieve or otherwise manipulate data objects in the hosted storage service . The hosted storage service can be implemented by one or more server devices which can be implemented using a computing device such as the computing device or mobile device described with respect to . For example the hosted storage service can be implemented by multiple server devices operating in the same or different data centers.

The hosted storage service generally includes an interface frontend an interface backend a storage backend metadata for objects stored in the storage backend and a keystore . In general the interface frontend may receive requests from and send responses to the client device . For instance the hosted storage service can be implemented as a Web Service with a corresponding set of Web Service Application Programming Interfaces APIs . The Web Service APIs may be implemented for example as a Representational State Transfer REST based HTTP interface or a Simple Object Access Protocol SOAP based interface.

An interface frontend can receive messages from the client and parse the request into a format usable by the hosted storage service such as a remote procedure call RPC to an interface backend . The interface frontend writes responses generated by the hosted storage service for transmission to the client . In some implementations multiple interface frontends are implemented for example to support multiple access protocols.

The interface frontend can include a graphical front end for example to display on a web browser for data access. The interface frontend can include a sub system to enable managed uploads and downloads of large files e.g. for functionality such as pause resume and recover from time out . The interface frontend can monitor load information and update logs for example to track and protect against denial of service DOS attacks.

As described above the Web Service API may be a REST based HTTP interface. In a REST based interface a data object is accessed as a resource uniquely named using a URI and the client application and service exchange representations of resource state using a defined set of operations. For example requested actions can be represented as verbs such as by HTTP GET PUT POST HEAD and DELETE verbs. The GET verb may be used to retrieve an object while the HEAD verb may be used to retrieve information about an object without retrieving the object itself. The DELETE verb may be used to delete an object from the hosted storage service . The PUT and POST verbs may be used to upload an object to the service . PUT requests can come from the client and contain authentication and authorization credentials and object metadata in a header such as an HTTP header. POST requests can be received when a client wants to upload from a web browser form. The form POST upload protocol for the hosted storage service can involve multiple required form fields to provide authentication authorization and object metadata. More generally any of the API requests may include credentials for authentication and authorization for example in a header of the request. For example an authorization header may be included in the REST requests which includes an access key to identify the entity sending the request.

Alternatively or additionally a user can be authenticated based on credentials stored in a browser cookie which gets appended to the API requests. If no valid cookie is present a redirect to an authentication frontend can be generated and the authentication frontend can be used to generate the browser cookie. The authentication frontend can be used by systems and services in addition to the hosted storage service e.g. if the organization operating the hosted storage service also operates other web services such as email service. A user can also or alternatively be authenticated based on authentication credentials from an external credentialing service or an external service that includes credentialing functionally. User or group identifier information can be calculated from the external service s credential information. Requests sent by the client to the interface frontend can be translated and forwarded to the external service for authentication.

In general objects stored in the hosted storage service can be referenced by object identifiers. The hosted storage service can define namespaces to which a valid object identifier must conform. For example the namespace may require that object identifiers be a sequence of Unicode characters whose UTF 8 encoding is at most 1024 bytes long. As another example the namespace may require that object identifiers be globally unique identifiers GUIDs which may be 128 bit integers.

Objects can be stored in hosted storage service in buckets. In some examples each bucket is uniquely named in the hosted storage service each object is uniquely named in a bucket and every bucket and object combination is unique. Objects may be uniquely identified by a URI that includes the bucket name and the object name and identifies the hosted storage service . For example an object named long song.mp3 in a bucket named music could be specified using a URI pattern such as http s. anyexampledomain .com music long song.mp3 or http music.s. anyexampledomain .com long song.mp3. Alternatively the user of the client can create a bucket named www. secondexampledomain publish a CNAME alias redirecting that to http music.s. anyexampledomain .com and address the object as http www. secondexampledomain long song.mp3. In some examples buckets do not nest.

The interface backend can handle or pass request authentication and authorization can manage data and metadata and can track activity such as for billing. The interface backend can provide functionality for independent frontend backend scaling for resource utilization and responsiveness under localized heavy loads. Data management can be encapsulated in the interface backend while communication serving can be encapsulated in the interface frontend . The interface backend can isolate security mechanisms from the client facing interface frontend .

The interface backend can expose an interface usable by both the interface frontend and other systems. In some examples some features of the interface backend are accessible only by an interface frontend not shown used by the owners of the hosted storage service internal users . Such features can include those needed for administrative tasks e.g. resolving an object reference to a low level disk address. The interface backend can handle request authentication e.g. ensuring a user s credentials are valid and authorization e.g. verifying that a requested operation is permitted or can pass authentication and or authorization to an access control service . The interface backend can also provide encryption and decryption services to prevent unauthorized access to data even by internal users.

A keystore can store encryption keys for data objects where the encryption keys have themselves been encrypted by the interface backend . The encrypted keys can carry associated metadata that is cryptographically bound to the key itself and are referred here to as wrapped keys. From the point of view of the interface backend the wrapped keys can be opaque objects. To obtain the cleartext key of a wrapped key for use e.g. to encrypt or decrypt a data object the interface backend can provide the wrapped key and client authentication credentials to the keystore . The keystore can verify based in part on the wrapped key s metadata that the provided authentication credential is sufficient to authorize release of the key and if so can return the unwrapped key to the interface backend . The interface backend can use the key to encrypt or decrypt the data object and then can discard the key.

In some examples the encryption key is a symmetric key that can be used to both encrypt and decrypt an object. In some examples a wrapped key can have associated metadata indicating multiple users or groups authorized to access the cleartext key. In some examples the keystore can copy a wrapped key and rewrap the key for a different principle e.g. containing different metadata .

The interface backend can manage metadata associated with data objects for example in a structured data format such as a database e.g. MySQL . User specified names labeling the buckets can be completely defined within the metadata and object metadata can map a resource name to one or more data shares storing the resource. The metadata can also contain bucket and object creation times object sizes hashes and access control lists ACL for both buckets and objects. The interface backend can log activity and track storage consumption to support accounting for billing and chargebacks. In some examples this includes quota monitoring in each dimension in which customers are charged e.g. reads writes network transfers total storage in use. 

The ACLs define who is authorized to perform actions on corresponding buckets or objects and the nature of the permitted actions. The ACLs can be an unordered list of scope role pairs plus Boolean flags. The scope may define a user or group of users and the role may define the access permissions for the user or group. In some examples the union of all scope role pairs can define access rights. In some examples more specific scope role pairs override more general ones. Table 1 Bucket Roles below shows a list of example roles that can be included in ACLs for buckets. Table 2 Object Roles below shows a list of example roles that can be included in ACLs for data objects.

Scopes can be defined to a single user or a group of users. In one implementation those users with a FULL CONTROL role and therefore able to modify the ACL for a given bucket or object may define a group of users and then provide a role for the group. For example a group of users may be managed by the hosted storage service or more generally by the service provider that provides the hosted storage service for reasons other than storage permissions for example for a message board or other service that employs groups and those groups may be identified by a single username or other identifier associated with the group of users an e mail address associated with the group of users which may or may not also correspond to an identifier of the group or a domain name associated with a group. This may allow a user to specify a preexisting group managed by the service provider that is already defined by the identifier e mail address or domain name. Similarly users may be able to specify a group of users for example by user id or e mail address and associate an access key with the group. This may allow for the formation of ad hoc groups for the management of storage permissions rather than groups already managed by the service provider.

In this way a group of users can be given a particular role simply by managing the role of the group. Similarly if the ACL is associated with a bucket containing a number of objects or the ACL is otherwise associated with multiple objects the role with respect to those objects can be easily changed by simply changing the role of the group.

Table 3 Scopes below shows a list of example scopes that can be included in ACLs for buckets and or data objects.

The FULL CONTROL role can represent all possible capabilities such as those assigned to an object or bucket owner connected to a financially responsible party. The bucket owner can be configured to always have FULL CONTROL for the bucket. In general the bucket and or object owner can create or modify scopes and roles in the corresponding ACLs but in some implementations the pair bucket owner FULL CONTROL may be prevented from being removed from the bucket ACL or the object ACL . To create an object a user can have write permission on the bucket which can be granted by WRITE and FULL CONTROL. WRITE permission on the bucket can imply permission to delete or overwrite an object in the bucket. Additional constraints can disallow certain modifications to ACLs . In some examples it is possible to create an object that the bucket owner cannot read.

Additionally or alternatively to the scope role format ACLs some ACLs can reference one or more access control services that can determine a user s authorization to perform actions on corresponding buckets or objects. These remote authorization ACLs can contain a reference such as a URI to an access control service . When the interface backend encounters a remote authorization ACL while attempting to authorize an access to a data object the interface backend can pass an authorization request to the access control service referenced in the remote authorization ACL . Parameters that need to be sent to the access control service for the service to perform authorization as well as the possible parameters that may be received in response can be specified in metadata associated with the requested object. In some cases these parameters may be included in the remote authorization ACLs . Listed below is one example set of parameters that can be stored in the metadata and or remote authorization ACLs .

The access control service can receive and examine the authorization request and return a message to the interface backend indicating permission or denial of the access attempt. Some access control services can maintain an ACL list that is formatted similar to the scope role ACLs .

The access control service can be implemented using a computing device such as the computing device or the mobile device described with respect to . The access control service can communicate with the hosted storage service via a network such as the Internet. The access control service can communicate across the network using communication protocols such as for example one or more of Transmission Control Protocol Internet Protocol TCP IP Hypertext Transfer Protocol HTTP Secure Shell Remote Protocol SSH or Application Program Interfaces API . While only a single access control service is shown there can be multiple access control service communicating across the network with the hosted storage service and or other services and devices.

The access control service is separate from the hosted storage service and may be subject to a different administrative control than the hosted storage service . For example the access control service may be owned and operated from an entity such as a company that is different than the one that owns and operates the hosted storage system . Alternatively the hosted storage system and access control service may be owned by the same entity but be controlled by two separate parts of the entity such as different business units such that the hosted storage system and access control service are under different administrative controls.

As one example the access control service may be associated with a content provider that generates data objects and uploads them to the hosted storage service . One example content provider is a musician or record label using an access control service to process sales and authorization of access to music files stored in the hosted storage service . While the access control service is shown here as a component of a content provider the access control service and the hosted storage service may be separate logically communicably and or administratively.

An access keystore can store encryption keys to be used in conjunction with the access authorization provided by the access control service . For example the access control keystore may store one or more data object encryption keys for use in decrypting data objects whose authorization has been granted by the access control service . In some cases the access keystore does not store any data object encryption keys but instead unwrapped data object encryption keys.

The access keystore can be implemented using a computing device such as the computing device or the mobile device described with respect to . The access keystore can communicate with the hosted storage service and or the access control service via a network such as the Internet. The access keystore can communicate across the network using communication protocols such as for example one or more of Transmission Control Protocol Internet Protocol TCP IP Hypertext Transfer Protocol HTTP Secure Shell Remote Protocol SSH or Application Program Interfaces API . While only a single access keystore is shown there can be multiple access keystores communicating across the network with the hosted storage service and or other services and devices.

Although shown as a component of the content provider along with the access control service the relationship between access keystore and access control service may take other forms. For example the access keystore may be a component of the access control service . In another example the access control service may be separate from the access keystore and may be subject to a different administrative control than the access keystore . This may be desirable for example to prevent access to the data objects in the event that one of the access control service or the access keystore is compromised.

The storage backend can contain multiple datastores . Although three datastores are shown more or fewer are possible. Each of the datastores can store data objects in a particular format. For example data store can store a data object as a Binary Large Object BLOB data store can store a data object in a distributed file system e.g. Network File System and data store can store a data object in a structured data format such as a database e.g. MySQL. 

A request is received by the interface frontend from the client application to store an object . The request can include a HTTP PUT or POST request an authentication credential that authenticates the principal entity making the request a data object and a target for the object consisting of a bucket and data object name. In some examples the authentication credentials can include an interoperable authentication header token or cookie. The interface frontend can make a RPC to the backend including the request headers.

The interface backend can examine and validate the authentication credentials . For example native credentials e.g. user ID token can be validated using internal validation features of the hosted storage service . External credentials e.g. user names and passwords for another system can be sent to the associated external system for validation.

The interface backend can query the request s target bucket s ACL to determine if the authenticated principal is permitted to create an object in the bucket . For example the principal or a group the principal is a member of can have the WRITE or FULL CONTROL role assigned in the bucket s ACL which would allow the principal to create an object in the bucket. If the principal is not authorized to create an object the request is denied.

Otherwise the interface backend uploads the object to the target bucket with the target data object name to a datastore . In some examples each bucket is associated with only a single datastore and specifying a target bucket specifies a datastore . In some examples the interface backend can examine the data object or use a parameter in the RPC from the interface frontend to determine which datastore to store the object in with associated metadata indicating the location of the object that is the particular datastore the object is stored in and the object s location in that datastore .

The interface backend re validates the principal s authentication and authorization . To support long running uploads expiry times of authentication credentials can be temporarily ignored.

The interface backend generates a new document key request to the keystore for a wrapped key for the newly uploaded object . The new wrapped key is tied to the authentication credentials of the principal of the request. The keystore can also supply an encryption key to encrypt the wrapped key. The interface backend encrypts the wrapped key .

The interface backend creates an ACL representing the access control list for the newly created object . In some example a default ACL is used or an ACL can be specified by the request from the client .

The interface backend generates a new document key request to the keystore for a wrapped key for every principal user or group in the ACL with permissions to read the object or modify the object s ACL . Each new wrapped key is tied to a single principal. The keystore can also supply an encryption key to encrypt the wrapped keys or the interface backend can reuse the encryption key from the step .

The interface backend stores the object s ACL and wrapped keys in the object s metadata . The encryption key or keys can be discarded by the interface backend .

A request is received by the interface frontend from the client application to download an object . The request can include a HTTP GET request an authentication credential that authenticates the principal entity making the request and a target consisting of a bucket and optionally data object name. In some examples the authentication credentials can include an interoperable authentication header token or cookie. The interface frontend can make a RPC to the backend including the request headers.

The interface backend examines and validates the authentication credentials included in the request . For example native credentials e.g. user ID token can be validated using internal validation features of the hosted storage service . External credentials e.g. user names and passwords for another system can be sent to the associated external system for validation.

The interface backend queries the request s bucket or object ACL to determine if the authenticated principal is permitted to read the target . For example the principal or a group the principal is a member of can have the READ WRITE or FULL CONTROL role assigned which would allow the principal to read or otherwise access the target. If the principal is not authorized to read or access the object the request is denied.

Otherwise the interface backend determines if the request is for a bucket or for an object . If the request is for a bucket the interface backend queries for a list of the bucket s contents and the listing is returned to the client application .

If the request is for an object the interface backend looks up the appropriate wrapped key for the given authenticated requestor from the object s metadata . The interface backend sends the wrapped key and the authentication credentials to the keystore which can return the decrypted object encryption key to the interface backend . The interface backend can fetch and decrypt the target object to be returned to the client application .

A bucket or object is created by the backend interface based on requests from the client application . The client request can include a bucket name an object name and or an ACL . The principal requesting the new bucket or object is authenticated and made the owner of the bucket or object.

If a local ACL is specified in the request the specified local ACL is associated with the bucket or object . If the specified ACL does not include a scope role pair specifying the principal having FULL CONTROL one such scope role pair can be added to the ACL . In one implementation an ACL may be specified in a request by enumerating each scope and role pair to be included in the ACL or may be specified by reference to the name of a pre specified or canned local ACL. A list of pre specified or canned local ACLs is shown in Table 4 Canned ACLs below. The canned local ACLs can be cataloged by the hosted storage system and referenced by the client application by name rather than requiring the request enumerate each scope and role pair.

If a remote ACL is specified in the request the specified remote ACL is associated with the bucket or object . In one implementation an ACL may be specified in a request by listing the network location of the access control service or may be specified by reference to the name of a pre specified or canned remote ACL. The canned remote ACLs may each contain the network location of access control services that are trusted canonical or otherwise known to many potential resource uploaders.

If an ACL is not specified in the request a default local ACL can be used . For example bucket and object creation can default to the private local canned ACL for authenticated users. For object creation by unauthenticated users such as for new objects created in a public read write bucket a default of bucket owner full control can be used.

An ACL can be served for example to a principal with READ WRITE or FULL CONTROL of the associated bucket or object or to a principal that has been authorized by the access control service . For example a client application can perform a HTTP GET to a target s URI with the query string acl to retrieve the ACL associated with the target. The ACL can be serialized and returned to the client application .

The serialization of a local ACL may be defined for example by the following extended Backus Naur form. Nonterminals appear in sans serif italics terminals appear in Courier Bold denote zero or more repetitions enclose optional entities separates alternatives and denote grouping. The terminal symbols canonical id email address and domain are defined in English below 

An ACL can be updated for example by a principal with FULL CONTROL of the associated bucket or object . In some examples a client must read modify and write an ACL in order to update an ACL . In this example the ACL is served as part of modification . In some implementations a client application can send ACL update requests to the hosted storage system .

The content provider can encrypt a data object with an encryption key . For example the content provider may generate purchase or otherwise acquire a data object that is to be shared rented or sold to users or customers. Data objects of this type can include but are not limited to media files scientific data sets personal communications medical records and business records.

In this example this encryption key will be referred to as the data object encryption key. The data object encryption key described here is a symmetric encryption key. That is a data object encrypted with the data object encryption key may be decrypted by anyone that knows the data object encryption key. However other encryption schemes are possible such as a public private key system where a public key is used to encrypt a data object but only a private can decrypt the data object.

The hosted storage system can receive from the content provider a request to store the data object . The request includes a location of an access control service that is separate from the hosted storage service and that controls access permissions for the data object. The location can specify for example a URI for the access control service a protocol to use when communicating with the control service and parameters to send to the access control service . These parameters can include information such as information about a user requesting access authorization e.g. user ID the state of the hosted storage service e.g. timestamp of last request and or other information that may be used to determine authorization. In this example the access keystore is either not used or is a component of the access control service . For clarity communications between the access control service and a keystore are not shown. Other examples in which the access control service and the access keystore are separate entities are discussed below.

The hosted storage service can store the data object in association with metadata that indicates the location of the access control service . The hosted storage service can store this data in metadata . An example scheme for this storage is discussed with respect to below.

The client can identify a data object in the hosted storage system to access . For example the client can receive information about the data object from the content provider . A web browser on the client may be browsing the content provider s website and select a link that has an embedded reference to the hosted data object. As a result the client can send a request to the hosted storage service to access the object.

The hosted storage service can receive from the client the request to access the stored data object . For example the client can send a HTTP GET or HEAD message referencing the data object to the hosted storage service as previously described. The hosted storage service can parse the request and identify the referenced data object.

The hosted storage service can access the metadata stored in association with the data object . The metadata can store among other information information about the authentication and or authorization scheme used for the associated data object. The hosted storage service can determine from the metadata that a remote access control service determines access authorization for the data object . The hosted storage service can also identify information in the metadata about the authorization request to send to the access control service including but not limited to the location of the access control service .

In some implementations the hosted storage service can receive a validation of the access control service that indicates that the access control service may be used for authorizing access to the data object. This validation may be received as part of determining the access control service or at some previous point. Some schemes for validation of the access control service are described later in this document.

In response to determining that the access permissions for the resource are controlled by the access control service the hosted storage service can send an access request to the access control service . The access request can include identifying information about the data object requested and about the user of the client that requested access. Some or all of this information may be specified by the parameters listed in the location information and or some or all of this information may be provided in all access requests generated by the hosted storage service .

In some implementations the information that identifies the user of the client may be an authentication token created by the hosted storage service or by a system used by the hosted storage service for user authentication. Here the user would have been authenticated and known by the hosted storage service prior to or as part of the request to access the data object. The authentication token or other data if a different authentication scheme is used is provided by the hosted storage service to the access control service as an indication that the request is originating a user that has been authenticated by the hosted storage service .

Alternatively the information that identifies the user of the client may be copied from the request to access the stored resource. For example the request to access the stored resource may include a header with authentication information e.g. user name and password used by the access control service . This authentication information may be hashed encrypted or otherwise obfuscated to be hidden from the hosted storage service .

The access control service can receive the access request from the hosted storage service and can authorize the access . In some implementations the authorization process used by the access control service may be unknown by the hosted storage service . That is the access control service need not report or register the logic or process used to determine authorization. This can permit for example the access control service to change extend add and or terminate authentication processes without reporting to the hosted storage service . In addition to the information contained in the access request the access control service may also use information for authorization that is not available to the hosted storage service . For example the access control service may process billing of the user for authorization without passing any user financial information through the hosted storage service .

In some implementations the access control service can receive a validation of the hosted storage service that indicates that the hosted storage service may be used for serving the data object to the client . This validation may be received as part of authorizing the access to the data object or at some previous point. Some schemes for validation of the hosted storage service are described later in this document.

The hosted storage service can receive from the access control service an access response that indicates that the user is permitted to access the resource . In some implementations the access response can include a bucket or object role as previously described with regards to ACL scope role pairs. The access response can include a duration and or access count that indicates that the user is authorized for a particular period of time and or number of access. An access response may authorize a user for one logical operation as determined by the access control service. For example an access response may authorize a user for one GET and one PUT message permitting one logical edit to the data object. In some implementations this duration or count may reduce the number of access request sent from the hosted storage service to the access control service .

In response to receiving the access response the hosted storage service can send the data object to the client . For example the hosted storage service may transmit the data object to the client as previously described. The client can receive the data object from the hosted storage service . Using the data object encryption key the client can decrypt the data object to access the data object s plaintext. Some schemes for key management where the client and the content provider have access to the data object encryption key are described later in this document.

Alternatively the hosted storage service can receive from the access control service an access response that indicates that the user is not permitted to access the resource. In some implementations this type of access response may include a text string or denial code indicating the reason that the access control service denied access e.g. unrecognized user failed billing attempt . The hosted storage service may use this information in future processes and or may pass this information back to the client . In other implementations the access response may not contain this type of information. For example the access control service may communicate a reason for denial directly to the client .

As described the content provider and the client may both have copies of the data object encryption key used to encrypt and decrypt the data object. A number of schemes for key management are possible that ensure that both the client and the content provider have access to the data object encryption key while the hosted storage service does not. A feature of such key management schemes is that the content provider and the client can use the hosted storage service for hosted storage without exposing the plain text of the data object to the hosted storage service . In some implementations such as where the data object is not secret or sensitive the encryption and key management need not be used. Described here are two key management schemes but others are possible.

In one scheme the content provider can send the data object encryption key to the client through a side channel that is through a communication channel that does not include the hosted storage service. For example the content provider may transmit the data object encryption key directly through the network through email parcel mail verbally in person or telephonically. This scheme may be useful for situations in which the content provider wishes to make all of its content or all content within a particular category available to the user of the client . One such example includes a personal accountant preparing reports and statements for a customer. The accountant is unlikely to charge per report instead wishing the customer to be able to access any of the customer s documents if the customer has paid for the accountant s services.

In another scheme the content provider can provide to the user of the client through a side channel a client encryption key. This key is a symmetric encryption key unique to the user. Later when the content provider receives the access request identifying the user the content provider can encrypt the data object encryption key with the client encryption key. In this encrypted state the data object encryption key cannot be used to decrypt the data object. In the access response from the access control service the access control service can include the encrypted data object encryption key. The hosted storage service can pass this encrypted data object encryption key to the client which can decrypt the encrypted data object encryption key with the client encryption key. This can allow the client access to the data object encryption key for use in decrypting the data object. This scheme may be useful for situation in which the content provider wishes to encrypt each data object with a different data object encryption key. That is the content provider does not wish to make all data objects available to the client . One such example includes a movie distributor selling access to movies to customers. A customer that purchases access to one movie in this scheme would not have access to the data object encryption keys for movies they did not purchase.

In the process the access keystore is either not used or is a component of the access control service . In other example processes the access keystore may be used and may be a separate entity from the access control service . In one example the client may request the data object encryption key from the access keystore after receiving the encrypted data object from the hosted storage service . In this case the user may be authenticated by the access keystore or a user s request may include information proving that the user was granted authorization to access the data object. This information may include for example a token provided to the client by the access control service or the hosted storage service a cryptographic hash of the encrypted data object and or any other sort of appropriate information.

In another example in which the access keystore may be used and may be a separate entity from the access control service the hosted storage system may request the data object encryption key from the access keystore . For example after receiving the authorization message from the access control service the hosted storage service can request the data object encryption key from the access keystore . The keystore may return the data object encryption key in encrypted form for example encrypted with the client key to the hosted storage service . When the hosted storage service serves the data object to the client the hosted storage service can also provide the encrypted data object encryption key.

In addition to these key management schemes there are key management schemes that support a stateless access control service or stateless access keystore . By configuring a component to be stateless the speed and scalability of the component can be improved compared to a stateful version of the component. In some of these stateless configurations the access control service or the access keystore may need to store only one encryption key for the content provider .

In this scheme the content provider can encrypt a data object with a data object encryption key before storing the data objects in the hosted storage service . When the content provider stores a data object in the hosted storage service the content provider can encrypt the data object encryption key with a provider key and store the encrypted data object encryption key with the encrypted data object. This provider key may be used by the content provider to encrypt all data object encryption keys or all data object encryption keys of a particular class e.g. one key per copyright holder for a movie distributor . The content provider can then provide the content key s to the access control service or the access keystore through a side channel that does not include the client or the hosted storage service . The hosted storage service can store the encrypted data object encryption key in association with the data object for example in the metadata .

Depending on the configuration of the system the access control service or the access keystore can be sent the encrypted data object encryption key by the hosted storage service the client or the access control service . Additional authorization or authentication information may also be provided to show that the requesting party authorized to access the data object in decrypted form. In response to a valid request the access control service or the access keystore can decrypt the data object encryption key and return it to the requestor. In addition to the features of a stateless access control service or the access keystore the scheme also permits the use of different data object encryption keys for every data object. As such access one data object of the content provider e.g. one movie need not permit or enable access to anther data object of the content provider e.g. a different movie .

Described here are schemes for validation of the hosted storage service and the access control services . These schemes may be used to ensure that only hosted storage services and access control services specified by the content provider and or client are used for storage and access control respectively. They may prevent for example use of a rogue access control service that is configured to grant any authorization request or denial of service attacks to the access control service .

In one scheme the content provider registers the hosted storage service with the access control service . This registration may include for example a listing or classification of data objects that the content provider will store in the hosted storage service . Then any request to the access control service will be compared with this validation information. If the hosted storage service and any other information of an access request matches the validation information the access control service can process the access authorization .

In another scheme the content provider can register the access control service with the hosted storage service . This registration may include for example a listing or classification of data objects that the access control service can authorize access to. If the access control service and any other information matches the access metadata of a data object being request the hosted storage service can send the access request .

In some cases of bi directional validation in which both the hosted storage service and the access control service have been validated with each other the validation process can include certificates that define the valid endpoints. For example the hosted storage service and or the access control service may require that communication be over SSL.

The registration of the hosted storage service by the client in the access control service may include the creation of a secret. This secret can be used by the client as authentication information when requesting a data object from the hosted storage service and the hosted storage service can pass this secret to the access control service with the authorization request to show that the authorization request is on behalf of the client . To create this secret the client can authenticate itself to the access control service using any appropriate client server authentication mechanisms e.g. user name and password client certificate one time password hardware tokens . Once authenticated the client and the access control service can create and agree on a symmetric encryption key that will be referred to as a session key. The client may then generate a tag sometimes called a message authentication code or MAC secret for a request sent to the hosted storage service for a data object that is authorized by the access control service. This tag may be created via a cryptographic hashing function that takes the session key and the message as input and returns the tag as output. The hosted storage service can include the tag in the authorization request to the access control service . The access control service which has a copy of the session key may verify that the request originated with the client . In some cases the access control service can use the session key or a key derived from the session key to encrypt the data object or data object encryption keys before they pass back through the hosted storage system to the client .

In some implementations the hosted storage service may be independently authenticated by access control service and or the access control service may be independently authenticated by the hosted storage service . That is the hosted storage service and the access control service may have an authentication relationship that is independent of the client . This may permit for example the hosted storage service and the access control service to expose their authorization endpoints to the Internet without accepting traffic from valid hosted storage services and access control services.

The process can be used to facilitate a number of uses. Described below are a number of example uses although others are possible.

The process can be used to assure compliance with a regulatory contractual or insurance mandate. For example a business may be required to maintain records for inspection by compliance officers. The business may store the records in the hosted storage service and assign a trusted access control service to permit access by the compliance officer and reject attempts by the business to alter the records.

An administrator of the data objects may use the process to facilitate fail safe auditing of access requests. That is the administrator may log in the access control server authorization requests to the data object. Using behavior heuristics the administrator may determine before granting access to the data object that a new access request is malicious or from an untrusted party e.g. from a computer system with a virus . The administrator may deny access or contact the user that apparently generated the access request as appropriate.

The process may be used when the hosted storage service does not or cannot have access to all information needed to authorize access to a data object. For example the access control service may be a component of another computer system such as a corporate network. This corporate network may use information to authorize access that is secret or constantly changing. For example the location of an employee as determined by key card swipes can be used to ensure that an employee is in the corporation s building before authorizing access to sensitive documents.

Some authentication processes require interactions between the client and the access control service during authorization. For example a request to access downloadable content by a video game client may require the user of the video game to process a real or in game financial transaction or to complete and in game challenge.

Collaborative software development projects can use the process for code management. In this example any user may be permitted to read a data object as defined by a role scope ACL for the project s bucket but any edits or uploads must be reviewed by a code maintenance team as defined by a remote authorization ACL .

Data object A is stored in this example in association with the ACL . The ACL is formatted as a scope role tuple that defines the authorization permission available to User for data object A. Although only a single user is shown in ACL other scope role ACLs can define permissions for multiple users user groups etc. When a user attempts to access the data object A the ACL is used for example by the interface backend to determine if the access is permitted or not.

Data object B is stored in this example with some or all of the ACLs and and the metadata . Although only a single user is shown in each of the ACLs and other ACLs can define permissions for multiple users user groups etc. The ACL is a scope role formatted ACL which defines the authorization permission available to User . The ACL is a remote access formatted ACL that lists an access control address. The access control address references a remote access control service such as the remote access control service which determines authorization access of data object B for User . The metadata can specify access parameters and the format of those access parameters in access request messages from the hosted storage service to the access control service. In some implementations a single ACL can have entries of both scope role format and remote access format. That is a single ACL may contain the ACLs and .

In some configurations of the hosted storage service the interface backend can check for scope role formatted ACLs first and fall back on remote access formatted ACLs . Here a user entry in the ACL would effectively supersede a user entry in the ACL . For example consider User ID and User ID as Service Group ID to which any particular user may or may not be a member. If a user requests access to the data object B and is a member of the User service group the permission field of the ACL is used to determine access authorization. If the user is not a member of the User service group but is a member of the User service group the ACL is used to determine access authorization.

In some other configurations the interface backend can check for remote access formatted ACLs first and fall back on scope role formatted ACLs . In these configurations a user entry in the ACL would effectively supersede a user entry in the ACL . In this confirmation if the user is a member of the User service group the ACL would be used even if the user is also a member of the User service group.

The hosted storage service can be configured to ensure that the owner of a data object or the owner of the bucket containing the data object is always given the FULL CONTROL role. For example this can ensure that even if an access control service is misconfigured and erroneously rejecting all access request or is off line the owner of the data object is able to access the data object.

The computing device includes a processor a memory a storage device a high speed interface connecting to the memory and multiple high speed expansion ports and a low speed interface connecting to a low speed expansion port and the storage device . Each of the processor the memory the storage device the high speed interface the high speed expansion ports and the low speed interface are interconnected using various busses and may be mounted on a common motherboard or in other manners as appropriate. The processor can process instructions for execution within the computing device including instructions stored in the memory or on the storage device to display graphical information for a GUI on an external input output device such as a display coupled to the high speed interface . In other implementations multiple processors and or multiple buses may be used as appropriate along with multiple memories and types of memory. Also multiple computing devices may be connected with each device providing portions of the necessary operations e.g. as a server bank a group of blade servers or a multi processor system .

The memory stores information within the computing device . In some implementations the memory is a volatile memory unit or units. In some implementations the memory is a non volatile memory unit or units. The memory may also be another form of computer readable medium such as a magnetic or optical disk.

The storage device is capable of providing mass storage for the computing device . In some implementations the storage device may be or contain a computer readable medium such as a floppy disk device a hard disk device an optical disk device or a tape device a flash memory or other similar solid state memory device or an array of devices including devices in a storage area network or other configurations. Instructions can be stored in an information carrier. The instructions when executed by one or more processing devices for example processor perform one or more methods such as those described above. The instructions can also be stored by one or more storage devices such as computer or machine readable mediums for example the memory the storage device or memory on the processor .

The high speed interface manages bandwidth intensive operations for the computing device while the low speed interface manages lower bandwidth intensive operations. Such allocation of functions is an example only. In some implementations the high speed interface is coupled to the memory the display e.g. through a graphics processor or accelerator and to the high speed expansion ports which may accept various expansion cards not shown . In the implementation the low speed interface is coupled to the storage device and the low speed expansion port . The low speed expansion port which may include various communication ports e.g. USB Bluetooth Ethernet wireless Ethernet may be coupled to one or more input output devices such as a keyboard a pointing device a scanner or a networking device such as a switch or router e.g. through a network adapter.

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a standard server or multiple times in a group of such servers. In addition it may be implemented in a personal computer such as a laptop computer . It may also be implemented as part of a rack server system . Alternatively components from the computing device may be combined with other components in a mobile device not shown such as a mobile computing device . Each of such devices may contain one or more of the computing device and the mobile computing device and an entire system may be made up of multiple computing devices communicating with each other.

The mobile computing device includes a processor a memory an input output device such as a display a communication interface and a transceiver among other components. The mobile computing device may also be provided with a storage device such as a micro drive or other device to provide additional storage. Each of the processor the memory the display the communication interface and the transceiver are interconnected using various buses and several of the components may be mounted on a common motherboard or in other manners as appropriate.

The processor can execute instructions within the mobile computing device including instructions stored in the memory . The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The processor may provide for example for coordination of the other components of the mobile computing device such as control of user interfaces applications run by the mobile computing device and wireless communication by the mobile computing device .

The processor may communicate with a user through a control interface and a display interface coupled to the display . The display may be for example a TFT Thin Film Transistor Liquid Crystal Display display or an OLED Organic Light Emitting Diode display or other appropriate display technology. The display interface may comprise appropriate circuitry for driving the display to present graphical and other information to a user. The control interface may receive commands from a user and convert them for submission to the processor . In addition an external interface may provide communication with the processor so as to enable near area communication of the mobile computing device with other devices. The external interface may provide for example for wired communication in some implementations or for wireless communication in other implementations and multiple interfaces may also be used.

The memory stores information within the mobile computing device . The memory can be implemented as one or more of a computer readable medium or media a volatile memory unit or units or a non volatile memory unit or units. An expansion memory may also be provided and connected to the mobile computing device through an expansion interface which may include for example a SIMM Single In Line Memory Module card interface. The expansion memory may provide extra storage space for the mobile computing device or may also store applications or other information for the mobile computing device . Specifically the expansion memory may include instructions to carry out or supplement the processes described above and may include secure information also. Thus for example the expansion memory may be provide as a security module for the mobile computing device and may be programmed with instructions that permit secure use of the mobile computing device . In addition secure applications may be provided via the SIMM cards along with additional information such as placing identifying information on the SIMM card in a non hackable manner.

The memory may include for example flash memory and or NVRAM memory non volatile random access memory as discussed below. In some implementations instructions are stored in an information carrier. that the instructions when executed by one or more processing devices for example processor perform one or more methods such as those described above. The instructions can also be stored by one or more storage devices such as one or more computer or machine readable mediums for example the memory the expansion memory or memory on the processor . In some implementations the instructions can be received in a propagated signal for example over the transceiver or the external interface .

The mobile computing device may communicate wirelessly through the communication interface which may include digital signal processing circuitry where necessary. The communication interface may provide for communications under various modes or protocols such as GSM voice calls Global System for Mobile communications SMS Short Message Service EMS Enhanced Messaging Service or MMS messaging Multimedia Messaging Service CDMA code division multiple access TDMA time division multiple access PDC Personal Digital Cellular WCDMA Wideband Code Division Multiple Access CDMA2000 or GPRS General Packet Radio Service among others. Such communication may occur for example through the transceiver using a radio frequency. In addition short range communication may occur such as using a Bluetooth WiFi or other such transceiver not shown . In addition a GPS Global Positioning System receiver module may provide additional navigation and location related wireless data to the mobile computing device which may be used as appropriate by applications running on the mobile computing device .

The mobile computing device may also communicate audibly using an audio codec which may receive spoken information from a user and convert it to usable digital information. The audio codec may likewise generate audible sound for a user such as through a speaker e.g. in a handset of the mobile computing device . Such sound may include sound from voice telephone calls may include recorded sound e.g. voice messages music files etc. and may also include sound generated by applications operating on the mobile computing device .

The mobile computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a cellular telephone . It may also be implemented as part of a smart phone personal digital assistant or other similar mobile device.

Various implementations of the systems and techniques described here can be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium and computer readable medium refer to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described here can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The systems and techniques described here can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN and the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

Although a few implementations have been described in detail above other modifications are possible. For example while a client application is described as accessing the delegate s in other implementations the delegate s may be employed by other applications implemented by one or more processors such as an application executing on one or more servers. In addition the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. In addition other actions may be provided or actions may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other implementations are within the scope of the following claims.

