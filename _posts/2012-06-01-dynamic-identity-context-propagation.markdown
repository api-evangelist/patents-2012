---

title: Dynamic identity context propagation
abstract: Techniques are provided for dynamically propagating identity context for a user in a Service-Oriented Architecture. Methods and apparatus are provided that include receiving a request to invoke a web service, retrieving first security claims from application identity context information pertaining to a user, generating second security claims at runtime, packaging the first and second security claims into an authentication token, and transmitting the authentication token to a second computer system in a service request. The second computer system can be configured to extract the first and second security claims from the authentication token, validate the extracted first and second security claims, generate identity context information based upon the extracted first and second security claims, and publish and propagate the identity content information in an identity context object. The second computer system can verify that the security claims conform to corresponding security claim schemas stored in a claims dictionary.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08966572&OS=08966572&RS=08966572
owner: Oracle International Corporation
number: 08966572
owner_city: Redwood Shores
owner_country: US
publication_date: 20120601
---
The present application claims the benefit and priority under 35 U.S.C. 119 e of U.S. Provisional Application No. 61 541 442 filed Sep. 30 2011 entitled DYNAMIC IDENTITY CONTEXT PROPAGATION AND IDENTITY SWITCHING the entire contents of which are incorporated herein by reference for all purposes.

The present application also incorporates by reference for all purposes the entire contents of the following commonly assigned application which is filed concurrently with the present application 

In an enterprise Web service and service oriented architecture SOA environment user identity e.g. user name and or ID is typically propagated across layers of different interconnected applications. When such user identity information is propagated from a Web service client to a Web service the information is usually protected via a security mechanism e.g. WS SecurityPolicy and is accompanied by an authentication token such as a Security Assertion Markup Language SAML token. With the SAML mechanism an individual originating a service request i.e. the subject is authenticated via a local authentication service that the Web service client trusts. Once the subject is authenticated the Web service client transmits the service request along with a user identity to the Web service. The request further includes an assertion in the form of a SAML token that the user identity is authentic. Generally speaking the user identity that is transmitted in the service request is the identity of the authenticated subject.

In one aspect in accordance with one or more embodiments user identity information can be propagated e.g. communicated from one web service application to another by including the user identity information in service requests sent between the two applications. This user identity information is referred to as an identity context and includes the user identity itself as well as additional information related to the user identity such as information about the user s computer system software and other aspects of the environment or user. Various service layers of web service frameworks and applications such as the application that receives the request can access the identity context for purposes such as authentication access control risk management and other purposes. Information is stored in the identity context in the form of attributes. An attribute is for example a name and an associated data value e.g. email user company.com. Identity related attributes can include information about the user s client machine information about the client s location and the like. The attributes can be identity claims which are asserted by trusted application components. Each identity claim is described by a claims schema and stored in a claims dictionary. Web service applications and or frameworks can create receive publish and access the identity context. One common use case involves a web service client propagating an identity context to a web service server e.g. via a communications network and the identity context being published on the server side for use by the web service or other components.

According to one set of embodiments techniques are provided for dynamically propagating identity context for a user among various components and layers of an SOA infrastructure. As described above identity context is an information object that can contain various identity related attributes also referred to herein as identity claims. In a particular embodiment identity context information can be received by a Web service client packaged into a SAML or other type of authentication token and transmitted as part of a service request to a Web service. The identity context information can include implicit claims and explicit claims. The implicit claims are created and stored in the identity context by upper layer components e.g. OESSO OAAM OAM . The explicit claims are collected and added to the identity context by lower layer components such as the OWSM component that performs web service security related operations.

The explicit claims can be determined at runtime e.g. based on a web services security policy on the client.

On the service side the Web service can extract the identity context information from the token filter the identity claims and then publish the claims in a new identity context so that it can be made available to downstream applications components. In this manner applications in the infrastructure can have visibility into the identity context in order to e.g. manage identity related risks via their security policies.

Embodiments of the present invention provide methods systems and machine readable media for dynamically propagating identity context information. In one embodiment a method of propagating identity context information is provided the method comprising receiving by a first computer system a request to invoke a web service retrieving by the first computer system first security claims from application identity context information pertaining to a user generating by the first computer system second security claims at runtime packaging by the first computer system the first and second security claims into an authentication token and transmitting by the first computer system the authentication token to a second computer system in a service request.

Embodiments may include one or more of the following features. The second computer system may be configured to extract the first and second security claims from the authentication token validate the extracted first and second security claims generate identity context information based upon the extracted first and second security claims and publish and propagate the identity content information in an identity context object. To validate the extracted first and second security claims the second computer system may be configured to verify that the first and second security claims conform to corresponding first and second claim schemas stored in a claims dictionary. The second security claims may be generated based upon a security policy associated with a web application executing on the first computer system. The second security claims may be based upon characteristics of a user the characteristics determined at runtime based upon the security policy. The second security claims may comprise static claims defined prior to runtime and received from a claims dictionary or defined by a security policy. The packaging may comprise retrieving by the first computer system a user identity from the identity context information and storing by the first computer system a subject in the authentication token the subject based upon the user identity. Packaging may further comprise storing by the first computer system first and second attributes in the authentication token the first attribute based upon at least one first claim from the first security claims and the second attribute based upon at least one second claim from the second security claims.

Receiving second security claims at runtime may comprises receiving by the first computer system the second security claims from a Security Token Service. The first security claims are based upon characteristics of the user characteristics of the user s environment or a combination thereof. The characteristics of the user s environment comprise characteristics of the user s machine including an indication of whether anti virus software is enabled a firewall is enabled or a combination thereof. The method may further comprise receiving by the second computer system the service request including the authentication token extracting by the second computer system the first and second security claims from the authentication token validating by the second computer system the extracted first and second security claims generating by the second computer system identity context information based upon the extracted first and second security claims and publishing by the second computer system the identity content information in an identity context object. Validating the identity context information may comprise verifying by the computer system that the first and second security claims conform to corresponding first and second claim schemas stored in a claims dictionary.

According to another embodiment a non transitory machine readable medium for a computer system is provided the non transitory machine readable medium having stored thereon a first series of instructions executable by a first processor of a first computer system to dynamically propagate identity context information the first series of instructions comprising instructions that cause the first processor to receive a request to invoke a web service instructions that cause the first processor to retrieve first security claims from application identity context information pertaining to a user instructions that cause the first processor to generate second security claims at runtime instructions that cause the first processor to package the first and second security claims into an authentication token and instructions that cause the first processor to transmit the authentication token to a second computer system in a service request.

According to another embodiment of the invention a system is provided for dynamically propagating identity context information the system comprising a first processor configured to receive a request to invoke a web service retrieve first security claims from application identity context information pertaining to a user generate second security claims at runtime package the first and second security claims into an authentication token and transmit the authentication token to a second computer system in a service request.

A further understanding of the nature and advantages of the embodiments disclosed herein can be realized by reference to the remaining portions of the specification and the attached drawings.

In the following description for the purposes of explanation numerous details are set forth in order to provide an understanding of embodiments of the present invention. It will be apparent however to one of ordinary skill in the art that certain embodiments can be practiced without some of these details.

In one set of embodiments a user can login and authenticate with web client via a single sign on service SSO access manager . For example user can provide a username and password or some other type of user credentials and SSO access manager can verify the provided information against a credentials database.

Once user is authenticated SSO access manager as well as other layers in the application stack can collect information regarding user and store that information in an identity context . As described above identity context is an information object that can contain various identity related attributes such as a user identity and security claims . The security claims can relate to a number of different characteristics of the authenticated user and or the user s environment such as characteristics of the user s machine e.g. is anti virus software enabled is a firewall enabled the user s location e.g. IP address geographic location etc. and the like.

Implicit security claims are included in an identity context information object . Explicit security claims are determined at runtime based on information in a claims dictionary information in a security policy or other information. Static claims can be determined prior to runtime e.g. at design time or when an application is being developed. The values of static claims do no ordinarily change at runtime. In a particular embodiment each of the security claims can be described by a claims schema which can belong to a unique claims namespace and can be stored in a claims dictionary .

If user initiates a transaction or task that requires web application to invoke web service using a service request agent can determine one or more security policies that may apply for protecting the service request. In one set of embodiments the one or more policies can include a SAML based authentication policy . In other embodiments the one or more policies can include different types of token based authentication policies .

In one set of embodiments the identity claims maintained by identity context object are referred to as implicit identity claims. Thus in one aspect when the web services client agent receives the identity context the implicit claims are the existing claims in the identity context which are created and passed to the web services client agent from upper layer components e.g. OESSO OAAM OAM which are described below . Implicit claims conform to associated claim schemas which can be stored and retrieved from a claim dictionary or other storage media. In one aspect the claim schemas are defined when an application is designed configured or deployed but are not ordinarily defined at runtime. The values of the implicit claims are ordinarily determined at runtime but can also be determined prior to runtime e.g. at design time.

Upon determining that a SAML based policy applies to the service request e.g. because the service is protected by the policy an identity claim propagator in the agent can collect the implicit identity claims from identity context object and include the implicit identity claims in a SAML assertion which can be stored in a security token for transmission to the service as part of a service request . In particular the identity claims related to user identity in identity context can be used to create the Subject in the SAML assertion and the implicit claims can be mapped to attributes in the SAML assertion .

In certain embodiments agent can also create or retrieve explicit identity claims at runtime that are not initially included in the identity context object when the object is received by the web services client agent and can include those explicit identity claims in addition to the implicit claims into the SAML assertion for transmission to Web service . In one aspect the explicit identity claims including their names and or data types are not necessarily defined or known until runtime. The explicit claims can be generated based upon information available at runtime i.e. when the application is executing such as information related to or based on the execution of the application e.g. the amount of memory used by the application the number of users of the application and so on.

The explicit identity claims can be retrieved from a variety of different sources at runtime. In one example the explicit claims can be defined by a web service manager security policy attached to application . Requirements for explicit claims and propagation can be controlled by the security policy and can be advertised using WS SecurityPolicy. The values of explicit claims can be collected by the web services agents and or through a Security Token Service STS or identity service as described below with reference to .

For example the following is a representation of a sample WS SecurityPolicy SAML Token policy assertion with two explicit claims that are named role and email 

In certain embodiments agent can also retrieve static identity claims from a source such as a data store and can include the static identity claims in addition to the implicit and or explicit claims into the SAML assertion. In one aspect the values of static claims are determined when the static claims are defined e.g. at the time the static claims are stored in the data store and the values of static claims do not change at runtime. The static claims can also be defined by a policy attached to application .

Once the SAML assertion has been generated the assertion can be sent with the service request in the form of a security token from web client to Web service . For example the following is a representation of a sample SAML token with attributes comprising a Subject and five identity claims which are named client firewallenabled client antivirusenabled session authnlevel risk Level and risk newdevice 

At service agent receives the service request message using an identity claim receiver . Agent can invoke a login module to authenticate the user to the service . Then agent can create a service side identity context by extracting the attributes from the received token and determining values for the identity claims of the service side identity context based on the corresponding attributes of the received token e.g. using a mapping between SAML attributes and identity claims similar to that used on the client to generate the security token . The SAML attribute representations of the claims are retrieved from the token . The claims can be validated differently according to their types e.g. implicit explicit or static . The client side identity context is re created on the server side as the server side identity context . In one example the claims received in the security token become implicit claims in the server side identity context for downstream applications and other components e.g. OES to consume. For the implicit identity claims agent can filter the claims against a claims dictionary . For the explicit and static identity claims agent can use an identity claim validator to validate and filter the claims against a service side policy. Claim validation is performed so that incorrect or invalid claims are identified and treated as errors. If validation fails e.g. because one or more of the claims does not conform to a claims dictionary or to a policy or a schema associated with the claims then the service agent discards the claims for which validation is unsuccessful. In another embodiment the service agent discards all claims in the assertion and or security token when validation fails for at least one of the claims in the assertion . Thus the service agent does not make invalid claims available for use. Filtering can be performed so that unexpected or unrecognized claims are ignored. Once the claims from the token are validated and filtered the agent can publish the claims that pass validation and filtering via an identity context object . Thus one or more of the implicit explicit and static claims can be included in the service side identity context . With this identity context object the identity claims can be made available to service and to other downstream applications and components.

In one or more embodiments the identity context can be accessed via an Identity Context application programming interface API which allows applications and security framework components to access and manage claims. The Identity Context API provides access to claims as well as to claims schema a claims dictionary and static claims all of which can be stored in a data store .

In one set of embodiments each claim in an identity context is identified by a canonical name that can have a namespace i.e. a scope . Claim names are of the form . e.g. oracle.idm.claims.client.firewallenabled for a claim that represents a firewall enabled status. A claims schema provides meta data i.e. a description of the claim s format or structure that is associated with each claim. An Identity Context dictionary defines a set of well known claims. The dictionary can be a static dictionary containing for example claims that are generated by Oracle s security solutions and or a dynamic dictionary that can be configured at runtime to define claims provided by external sources. In one embodiment the Identity Context dictionary defines four types of claims that represent session state and identity store state from the access manager client state from the enterprise single sign on system and risk state from the adaptive access manager. Each claim state is identified by a claim namespace and has a canonical name of the form claim namespace claim attribute e.g. oracle idm claims risk Level.

In one embodiment there are four predefined types of claims Session State Identity Store Risk State and Client state. The namespaces and the forms of attributes associated with these claim types are shown in Table 1 below.

In one or more embodiments the web service manager includes policies that have SAML assertions for identity propagation. These policies and the web service manager runtime are enhanced to support identity context propagation. For example a configuration option propagate identity context is provided on the policies on both the client and server sides to control the propagation and publishing of identity context. By default the configuration propagate identity context is set to false. If this option is set to true the identity context will be propagated across web service invocations e.g. as part of service request SOAP messages. In one or more embodiments identity context is propagated by existing web services manager security policies as part of the SAML token. SAML 1.1 and SAML 2.2 policies with assertions that can be used for dynamic identity context propagation as described herein include the following policies SAML sender vouches assertions without message protection WSS 10 SAML sender vouches with message protection WSS 11 SAML sender vouches with message protection SAML sender vouches with transport level protection WSS 10 SAML hook issued token with message protection SAML bearer over SSL ExactlyOne SAML sender vouches or username token without message protection ExactlyOne WSS 11 SAML or Username token with message protection and ExactlyOne SAML sender vouches or Username token with transport level protection.

In one or more embodiments a property named propagate.identity.context can be added to each policy to cause the identity context is to be propagated. If the value of the property is true on the client side and the Identity Context is available then the SAML assertion is created from the claims in the Identity Context . Otherwise the SAML assertion is created independently of the claims in the Identity Context . If this property is true on the server side the server creates and publishes the Identity Context from the SAML assertion after the SAML assertion is validated.

Block then identifies one or more of the implicit claims that represent the user ID e.g. a claim with a name such as User retrieves the value of the user ID from that attribute and stores the user ID value in a subject portion of the SAML assertion . Block retrieves other non user ID implicit claims from the identity context generates attributes based on the other implicit claims and stores the attributes in the SAML assertion e.g. by creating an attribute in the SAML assertion for each of the other implicit claims. The name and value of each non User ID claim of the implicit claims are used as the name and value of a corresponding attribute in the SAML assertion. Block generates explicit claims e.g. by retrieving the values of the explicit claims at runtime from the system environment and stores the name and value of each explicit claim in an attribute of the SAML assertion. Although not shown in static claims can be retrieved from memory or the claims dictionary or other source of data converted to attributes and stored in the SAML assertion . The static claims may be for example claims with values determined at design time or deployment time.

Block packages e.g. stores the SAML assertion into the authentication token so that the SAML assertion will be transmitted to the service as part of the service message in which the token is stored. Block can for example copy the value of the SAML assertion into the token or store a reference to the SAML assertion in the token . Block sends the service request message including the SAML assertion that has attributes based on the implicit explicit and or static claims to the service via a communications network or other communication protocol. The process then ends and the client waits for a response from the service . The service receives and processes the service request message as described below with reference to .

The Web service to be invoked by the client application is protected by a server side web services manager agent and secured with a SAML based policy . To satisfy the web service security requirements a client web services manager agent acquires the Identity Context published by the OAM creates a SAML assertion and packages the claims from the Identity Context into the SAML assertion . If the propagate.identity.context property is true the client agent calls the OPSS AppSecurityContext and AttributeService interfaces to retrieve the identity context and then retrieves the claims from the identity context . The user id and user id format claims from the Identity Context are used to create the Subject in the SAML assertion while each of the other claims in the Identity Context is mapped to an Attribute that is stored in the SAML assertion . In one embodiment claims identified as CLAIM NS NAMEID CLAIM NAMEID VALUE CLAIM NAMEID FORMAT and CLAIM NAMEID QUALIFIER in the Claims Dictionary are included in the Identity Context and are used for the NameID in the Subject in the SAML assertion . Each of the other claims becomes an Attribute in an Attribute Statement in the SAML assertion .

The client agent then stores the SAML assertion in a service request to be sent to the service . The service request is for example a SOAP request message. The service request which includes the SAML assertion is then sent to the web service via SOAP or another communication protocol. On the service side the web services manager server agent retrieves the SAML assertion from the service request and un packages the SAML assertion by retrieving the SAML subject and attributes and creating a service side Identity Context based on the data extracted from the SAML assertion . The server agent calls the OPSS SAML login module to login with the SAML assertion . The server agent or the login module validates the SAML assertion as part of creating the Identity Context . If the propagate.identity.context property is true and the identity context is created using the identity context API. The server agent then publishes the Identity Context thereby making the Identity Context available to applications and other components such as an entitlements server for authorization. To publish the Identity context the server agent creates a key e.g. a GUID for the identity context publishes the identity context to the OPSS AttributeService and calls the OPSS SubjectSecurity API to store the identity context key into the OPSS AppSecurityContext.

It should be appreciated that the description above is illustrative and not intended to limit embodiments of the present invention. For example dynamic identity context propagation can apply to a number of different types of authentication mechanisms other than SAML. One of ordinary skill in the art will recognize many variations modifications and alternatives.

Client computing devices can be general purpose personal computers e.g. personal computers and or laptop computers running various versions of Microsoft Windows and or Apple Macintosh operating systems cell phones or PDAs running software such as Microsoft Windows Mobile and being Internet e mail SMS Blackberry or other communication protocol enabled and or workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems . Alternatively client computing devices can be any other electronic device capable of communicating over a network such as network described below. Although system environment is shown with two client computing devices it should be appreciated that any number of client computing devices can be supported.

System environment can further include a network . Network can be any type of network familiar to those skilled in the art that can support data communications using a network protocol such as TCP IP SNA IPX AppleTalk and the like. Merely by way of example network can be a local area network LAN such as an Ethernet network a Token Ring network and or the like a wide area network a virtual network including without limitation a virtual private network VPN the Internet an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the IEEE 802.11 suite of protocols the Bluetooth protocol known in the art and or any other wireless protocol and or any combination of these and or other networks.

System environment can further include one or more server computers which can be general purpose computers specialized server computers including e.g. PC servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters or any other appropriate arrangement and or combination. Servers can run an operating system including any of those discussed above as well as any commercially available server operating system. Servers can also run any of a variety of server applications and or mid tier applications including web servers FTP servers CGI servers Java virtual machines and the like. In one set of embodiments servers can each run an application server that is configured to provide an execution environment for web application web service web service client and or web service of .

System environment can further include one or more databases . In one set of embodiments databases can include databases that are managed by one or more of servers . Databases can reside in a variety of locations. By way of example databases can reside on a storage medium local to and or resident in one or more of computers . Alternatively databases can be remote from any or all of computers and or in communication e.g. via network with one or more of these. In one set of embodiments databases can reside in a storage area network SAN familiar to those skilled in the art.

Computer system can additionally include a computer readable storage media reader a communications subsystem e.g. a modem a network card wireless or wired an infra red communication device etc. and working memory which can include RAM and ROM devices as described above. In some embodiments computer system can also include a processing acceleration unit which can include a digital signal processor DSP a special purpose processor and or the like.

Computer readable storage media reader can be connected to a computer readable storage medium together and optionally in combination with storage device s comprehensively representing remote local fixed and or removable storage devices plus storage media for temporarily and or more permanently containing computer readable information. Communications system can permit data to be exchanged with network and or any other computer described above with respect to system environment .

Computer system can also comprise software elements shown as being currently located within working memory including an operating system and or other code such as an application program which may be a client application Web browser middle tier server application etc. . It should be appreciated that alternative embodiments of computer system can have numerous variations from that described above. For example customized hardware can be used and particular elements can be implemented in hardware software or both. Further connection to other computing devices such as network input output devices can be employed.

Computer readable storage media for containing code or portions of code executable by computer system can include any appropriate media known or used in the art such as but not limited to volatile non volatile and removable non removable media. Examples of computer readable storage media include RAM ROM EEPROM flash memory CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices an any other medium that can be used to store data and or program code and that can be accessed by a computer.

Although specific embodiments of the invention have been described above various modifications alterations alternative constructions and equivalents are within the scope of the invention. For example although embodiments of the present invention have been described with respect to certain process flows and steps it should be apparent to those skilled in the art that the scope of the present invention is not limited to the described flows steps.

Yet further although embodiments of the present invention have been described using a particular combination of hardware and software it should be recognized that other combinations of hardware and software are also within the scope of the present invention.

The specification and drawings are accordingly to be regarded in an illustrative rather than restrictive sense. It will be evident that additions subtractions and other modifications may be made thereunto without departing from the broader spirit and scope of the invention.

