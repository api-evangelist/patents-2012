---

title: User interface for accessing messages
abstract: Described herein are systems and methods for providing a message UI engine for accessing messages on a message system. The message system may comprise a message storage system (that store messages of varying types and formats, such as fax, text, voice/audio, video, and picture messages) and a message access system. The message UI engine is configured by a Flash media UI file for accessing messages and associated message information by interacting with the message access system. The Flash media UI file does not comprise any markup language and comprises only FlashÂ® instructions. The Flash media UI file also comprises a plurality of embedded applications for presenting the plurality of different message types, each embedded application comprising only Flash instructions. The associated message information may be stored and transmitted in a non-markup language format, such as comma-delimited format. The messages and message information may be transmitted using a non-HTTP protocol.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08433797&OS=08433797&RS=08433797
owner: RingCentral, Inc.
number: 08433797
owner_city: San Mateo
owner_country: US
publication_date: 20120920
---
This patent application claims the benefit of priority and is a continuation in part of the U.S. patent application entitled Accessing User Messages at a Hosted Communications Provider having Ser. No. 13 084 519 filed on Apr. 11 2011 which claims the benefit of priority Under 35 U.S.C. 119 e of U.S. Provisional Application Ser. No. 61 322 659 filed on Apr. 9 2010. The disclosures of these prior applications are expressly incorporated herein by reference. This patent application also claims the benefit of priority under 35 U.S.C. 119 e of U.S. Provisional Application No. 61 537 532 filed Sep. 21 2011 entitled USER INTERFACE FOR ACCESSING MESSAGES which is expressly incorporated herein by reference.

Figures included in this patent document contain material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever. The following notice applies to all software data and user interfaces described below and in the drawings that form a part of this document Copyright 2011 RingCentral Inc. All Rights Reserved.

The present invention relates to message systems and more specifically to a systems methods and techniques for providing access to messages on message systems.

Message systems of the type with which the invention may find particular utility may be maintained by a business or other organization for use by its own personnel or by a communications services provider that provides its services on behalf of its customers and their personnel. The message system may receive store and provide access to messages through a network such as the Internet. Messages may be sent from a sending client device e.g. fax machine cell phone etc. through the Internet and or a Public Switched Telephone Network PSTN and eventually routed to the message system. The messages may then be converted to a digital message file in a particular format if not already in that format and stored by the message system. For example a facsimile message may be converted to portable document format pdf and stored as a .pdf file on the message system and a voice message may be converted to MP3 format and stored as an .mp3 file on the message system.

To provide access to the messages the message system may provide a website that provides remotely located and often geographically dispersed recipients access to a list of their messages and may include a server to furnish the message list as well as those messages stored in the message system that are selected by the intended recipients. The messages are typically furnished in a well known format such as in hyper text mark up language HTML .

The intended recipient of the messages may use a receiving client device to access his her messages stored on and assessable from the message system. The receiving client device may have a browser to provide a user interface UI to provide access to the messages through the Internet. Typically a UI formatted in hyper text mark up language HTML may be used to access facsimile or voice messages on the message system. For example the UI may display the list of messages described above and in response to selection by the recipient of a particular facsimile message may display the facsimile message through a separate document viewer program in a popup window or playback a voice message through a separate audio player program in a popup window.

However as different types of messages and formats increase the complexity of providing access to the messages also increases. In particular conventional UIs are limited in their capability of presenting messages and formats of widely varying types. Further conventional UIs are not able to meet user demand for a more seamless and easier way to access messages from the message system.

Described herein are systems and methods for enabling access by intended recipients to diverse types of messages on a message service system via user interfaces of client devices. The message service system comprises a message storage system and a message access system e.g. both located at a datacenter. The message storage system receives messages from sending client devices and stores messages in varying types and formats. The message access system provides access to the messages stored on the message storage system by intended recipients of the messages.

The message access system comprises different types of servers namely a program server and a message server. The program server stores a UI file in a suitable format such as an .swf file and transfers or serves the UI file to one or more client devices to enable each client device once the UI file is installed to access the messages. The UI file installed on a client device constitutes a UI engine that interacts with the message server to access messages. More specifically in response to the UI engine the message server obtains particular messages from the message storage system e.g. those selected by a user from a browser displayed message list and furnishes or serves those messages to the client device. In other embodiments a single server can perform the functions of both the program and message servers.

Preferably the UI file comprises only Adobe Flash programming instructions as specified by Adobe Systems Incorporated without any markup language. As such the UI file comprises a compilable file or files having only compilable and executable program instructions compatible with a Flash Player and thus can be referred to as Flash media UI file . Preferably the Flash media UI file is in the Small Web Format SWF format as an .swf file although data such as video in other formats may be embedded therein.

A client device may download a Flash media UI file over a network such as the Internet. Once downloaded and installed the client device may comprise a Flash UI engine having computer hardware configured by the Flash media UI file. To access the messages the client device includes a web browser that enables the Flash UI to interact with the message access system through a network such as the Internet. Preferably the web browser has a Flash Player and the Flash media UI file as a Flash plug in program.

The message storage system may store messages of various message types including facsimile text voice audio video picture messages or any combination thereof depending on the implementation. Each message type may be converted and or stored in one or more different format types. For example audio voice messages may be stored in a plurality of different audio formats such as MP3 Audio Interchange File Format AIFF Waveform Audio File Format WAV etc. The Flash UI is configured to present e.g. display or playback such messages of widely varying types and formats.

The Flash media UI file may include one or more different embedded applications each embedded application configured for decoding and presenting one or more different message types in one or more different formats. In some embodiments the Flash media UI file may include a first embedded application for presenting a first message type and a second embedded application for presenting a second message type. In other embodiments the Flash media UI file may include a single embedded application for presenting a plurality of different message types. For example the Flash media UI file may include an audio player for presenting audio messages and a video player for presenting video messages. Or the Flash media UI file may include an audio video player for presenting audio and video messages. An embedded application may be configured to present a plurality of different format types for a message type. For example the Flash UI may include a first embedded application for presenting video messages in a plurality of different formats. Alternatively the Flash UI may include additional embedded applications for presenting different format types of the same message type. For example the Flash UI may include a first embedded application for presenting video messages in a first format and a second embedded application for presenting video messages in a second format. The Flash UI may also comprise a plurality of embedded applications within the Flash UI for performing other message functions such as message forwarding message delete blocking sender calling sender adding a contact etc. Preferably each embedded application may comprise a Flash program comprising only Flash programming instructions.

The Flash UI preferable leverages the multimedia capabilities of Flash programs. As known in the art Flash programs provide superior capabilities in controlling and presenting multimedia files of different format types and may provide faster responses to user actions. Flash programs typically provide high quality of playback as well as fast loading and executing of multimedia files. Flash programs may also provide support for various types of media files and formats. When executed on the client device the Flash media UI file may present messages of varying types and formats in a seamless and integrated manner using Flash based programming.

In addition to the capabilities of Flash programs in controlling and presenting different multimedia files Flash programs also provide strong support and capabilities for media streaming. The Flash UI may leverage this support by streaming messages of different media types to the receiving client device upon receiving user selections for presenting the messages. For example upon receiving a request from the user to present an audio or video message the Flash UI may stream the audio or video message from the message service system and present the audio or video message on the receiving client device.

Further Flash programs also provide strong support and capabilities for local storing and caching of data. In an alternative embodiment the Flash UI may leverage this local caching support by downloading and storing prior to receiving any user selection for presenting any of the current messages all current messages for an intended recipient user to a local storage device on the receiving client device. Upon receiving a request from the user to present e.g. display or playback a particular message the message may be retrieved and presented from the local storage device without requiring the message to be downloaded received from the message service system. As such the receiving client device may be connected with the message service system e.g. via the Internet to receive and locally store all current messages all at one time without receiving any user selection for presenting any current message whereby the current messages have not yet been selected for presentation by a user . The receiving client device then no longer requires a connection with the message service system to present messages upon user request since any requested messages may now be retrieved and presented from local storage.

As noted above a message is converted and stored as a digital message file. The terms message and message file may be used interchangeably herein. A message file may have associated metadata describing the message file such as a size of the message e.g. time length of the message number of pages of the message identifier for the sending client device e.g. sender name and or phone number a user identifier for the intended recipient e.g. username and or phone number the message type the date and time the message was received etc. The associated metadata may be referred to herein as message information. The message information may be stored along with the associated message file in the message storage system and transmitted to various components along with the associated message file or may be separately transmitted to the various components. Preferably the message information is stored and transmitted in a non markup language format such as a comma delimited format.

The message files and associated message information comprise message data. Preferably message data is transmitted between the various components using a non HyperText Transfer Protocol non HTTP such as a custom protocol or a standard protocol e.g. File Transfer Protocol FTP that is a non HTTP protocol. For example message data transmitted between the receiving client device and any components of the message service system such as the message server and the message storage system may be transmitted using a non HTTP protocol. In further embodiments the Flash media UI file stored on the program server is transmitted to the receiving client device using a non HTTP protocol such as a custom protocol or standard protocol e.g. FTP that is a non HTTP protocol.

The disclosures of U.S. patent application Ser. No. 13 084 519 filed on Apr. 11 2011 entitled Accessing User Messages at a Hosted Communications Provider and U.S. Provisional Patent Application No. 61 322 659 filed on Apr. 9 2010 are hereby expressly incorporated herein by reference. Further U.S. Provisional Patent Application No. 61 537 532 filed Sep. 21 2011 entitled USER INTERFACE FOR ACCESSING MESSAGES is expressly incorporated herein by reference.

In the following description numerous details are set forth for purpose of explanation. However one of ordinary skill in the art will realize that the embodiments described herein may be practiced without the use of these specific details. In other instances well known structures and devices are shown in block diagram form in order to not obscure the description with unnecessary detail.

The description that follows is divided into four sections. Section I contains terms used herein. Section II describes accessing user messages at a hosted communications provider. Section III describes a message environment in which some embodiments operate a message service system and a Flash UI engine for accessing messages. Section IV describes screen shots and functions of the Flash UI engine.

Flash UI The Flash UI comprises a Flash UI engine having computer hardware configured by a compilable Flash media UI file comprising programming instructions without markup language to perform embodiments herein. The Flash UI engine comprises a message UI engine a settings UI engine and one or more embedded application engines each such engine comprising computer hardware configured by the Flash media UI file to perform embodiments herein. The Flash UI engine is compatible with a Flash Player. As used herein the terms message UI and message UI engine may be used interchangeably and the terms settings UI and settings UI engine may be used interchangeably.

Flash media UI file The Flash media UI file comprises a compilable file a file able to be compiled having only program instructions that are compilable into machine language that is executable by a computer processor. A compilable file may comprise a file that is directly compilable to machine language in one step or indirectly compilable to machine language through multiple compiling or interpreting steps e.g. a first step to produce assembly language and a second step to produce machine language . The Flash UI engine may include a computer processor that executes the compilable Flash media UI file to perform embodiments herein. The Flash media UI file may comprise programming instructions for a message UI a settings UI and one or more embedded applications for performing various functions described herein. Preferably the Flash media UI file is in the Small Web Format SWF format as a .swf file. The Flash media UI file does not comprise any markup language whereby the Flash media UI file comprises a file format other than markup language format. Preferably the Flash media UI file comprises only Flash programming instructions.

Message message file As used herein a message is received from a sending client device and converted and stored as a digital message file. Message files may comprise a plurality of different message types e.g. fax text audio video picture etc. or any combination thereof depending on the implementation converted to a plurality of different format types e.g. MP3 TIFF pdf etc. . Message files are presented e.g. displayed or played back to the user using an appropriate embedded application within the message UI. The embodiments below are described in relation to a file. In other embodiments any other type of storage object other than a file may be used. As used herein a storage object comprises any logically definable storage element stored or contained within a storage system such as a file logical unit volume aggregate storage device etc. . In these embodiments a storage object comprises any type of container for storing and or transferring data.

Message information A message file may have associated metadata describing the message file such as a size of the message e.g. time length of the message number of pages of the message identifier for the sending client device e.g. sender name and or phone number a user identifier for the intended recipient e.g. username and or phone number the message type the date and time the message was received etc. The associated metadata may be referred to herein as message information. Preferably the message information is formatted in a non markup language such as comma delimited format.

Message list A message list for a user may present message information about all of the messages associated with a user.

Message data The message files and associated message information may be referred to collectively as message data. 

Sending client device As used herein a sending client device is used by a sender of a message for producing and transmitting messages. Examples of a sending client device include a fax machine a cellular phone smartphone Voice Over IP VoIP phone a computer configured to run communications software applications a telephone etc.

Receiving client device As used herein a receiving client device is used by an intended recipient of messages referred to herein as a user to access messages on the message service system. The intended recipient is a current user subscriber of the message service system. Examples of a receiving client device include a computer desktop laptop cellular phone smartphone etc.

Message service system As used herein a message service system comprises a message storage system and a message access system. The message storage system may receive messages from sending client devices and store messages of varying types and formats. The message access system may provide access to the stored messages to receiving client devices. The message access system may comprise a program server for storing and transferring a message UI a message server for providing access to messages and message information and an account database for storing message information regarding the messages .

Networks that provide hosted voice messaging and data services to users may be provided by a virtual private branch exchange vP12 which handles communications using a Voice over Internet Protocol VoIP service. To callers outside the network the vP12 appears as a traditional P12 enabling small businesses and organizations to provide a consistent professional customer facing interfacing. VoIP provides a method to deliver voice communications over the Internet rather than through circuit switched networks. The communications may originate and terminate at VoIP devices or a gateway may be used to route calls from the Internet to a Public Switched Telephone Network PSTN . Some of the services offered by these networks or hosted communications providers include the ability to process telephony calls to transmit and receive voicemail to transmit and receive text and data messages and or to transmit and receive fax messages. User access the hosted communications to take advantage of these services. As user device types and message formats increase so too the complexity of the network increases.

A hosted Private Branch Exchange P12 system provides services through a network cloud which performs as a traditional P12. The cloud includes a configuration of servers coupling the system users to a large area network such as the Internet. A hosted P12 may provide unified communication systems and unified messaging systems integrate multiple services for a user making communication and messaging more flexible to the activities and devices of the user. Unified Communications UC generally integrates real time communication services such as instant messaging chat with non real time communication services such as e mail. Unified Messaging UM generally integrates non real time communications such as Voice Mail VM e mail texting Short Message Services SMS and fax. As users expand their mobility variety of devices and platforms the complexity of UC and UM systems increases.

A hosted communications provider provides a variety of services to a variety of users. This matrix of operating devices features and messaging introduces challenges and advantages. The challenges involve supporting a wide variety of services and enabling interoperability of devices. The advantages include the ability to deliver messages and content over a variety of channels including different delivery and messaging formats and a variety of routing strategies. For example a mobile to landline communication may be routed from the mobile to a cellular network to the Internet to the network and from network to the Internet to a PSTN to a landline phone. Similarly the users may send text messages while engaging in a conference call and receiving voice mail messages.

The example of communication system implements user partitioning. The communication system can be for example a hosted private branch exchange P12 system which may also be referred to as a vP12 a cloud based P12 an internet telephony system or an Internet Protocol IP P12. Unlike a premise based P12 which requires P12 equipment to be physically located on or near the user premises where the P12 services are to be provided a hosted P12 can provide P12 communication services over the Internet including services such as without limitation Voice over Internet VoI Voice over IP VoIP facsimile over IP FoIP call forwarding voicemail web based online account management and other similar P12 functions. The communication system may include data centers not shown wherein each data center may be a point of presence having one or more servers routers switches and or network connections necessary to support the communication system . Each data center may be located in a same or different geographical location or region.

Unified communication systems and unified messaging systems integrate multiple services for a user making communication and messaging more flexible to the activities and devices of the user. Unified Communications UC generally integrates real time communication services such as instant messaging chat with non real time communication services such as e mail. Unified Messaging UM generally integrates non real time communications such as Voice Mail VM e mail texting Short Message Services SMS and fax. As users expand their mobility variety of devices and platforms the complexity of UC and UM systems increases.

In some implementations a communication system for processing user accounts in a hosted P12 system can include vP12 system. Such systems may provide UC and UM systems that enable users to send a message in one medium and receive communications on another medium including when the message and communications are part of a communication string. The example of communication system implements user partitioning. The communication system may be for example a hosted P12 system a cloud based P12 an internet telephony system or an Internet Protocol IP P12. Unlike a premise based P12 which requires P12 equipment to be physically located on or near the user premises where the P12 services are to be provided a hosted P12 can provide P12 communication services over the Internet including services such as without limitation Voice over Internet VoI Voice over IP VoIP facsimile over IP FoIP call forwarding voicemail web based online account management and other similar P12 functions. The communication system may include data centers not shown wherein each data center may be a point of presence having one or more servers routers switches and or network connections necessary to support the communication system. Each data center may be located in a same or different geographical location or region.

In some implementations a communication system for processing user accounts in a hosted P12 system provides UC and UM systems that enable users to send a message in one medium and receive communications on another medium including when the message and communications are part of a communication string. In one example a unified messaging system integrates several different communications media to allow a user to send and retrieve voice fax data and other messages e.g. e mail text SMS from a single interface while allowing access to a variety of devices such as a telephone Land Line LL a fax device a cellular telephone a Personal Computer PC other types of wireless devices and so forth. The interface is a network which processes communications with multiple devices. Some of the devices support multiple messaging protocols such as plain text HTML and others. A hosted network or communication provider such as a vP12 may support some or all of these formats.

For example messages may be sent in a plain text format. A plain text message is a widely accepted form of messaging e mail message readers are generally able to display text messages in plain text format. A cross platform messaging format allows document interchange between systems which allows portability of files. One type of cross platform messaging format is the Rich Text Format RTF . Another format is the HTML format which allows display of rich content in a message. Using an HTML mail format the message is sent as an HTML page including tags to change the appearance of the text. The recipient s e mail client program then formats and displays the HTML.

It is possible to merge and or combine multiple formats such as to mix plain text with HTML. In this way a network is able to send messages to external domains as plain text and as HTML.

The Multipurpose Internet Mail Extensions MIME is an Internet standard that extends the format of e mail to support non text attachments multiple part message bodies American Standard Code for Information Interchange ASCII and non ASCII text and header information. User written Internet e mail as well as automated e mail is often transmitted via Simple Mail Transfer Protocol SMTP in MIME format. Internet e mail may be referred to as SMTP MIME e mail. The content types defined by MIME standards are applicable to a variety of communication protocols such as Hypertext Transfer Protocol HTTP for the World Wide Web WWW . HTTP specifies that data be transmitted in the context of e mail like messages although the data most often is not actually e mail.

The user to user encoding uuencode is a form of binary to text encoding which is used to convert data to fairly common characters which will be understood by multiple systems. The program uudecode reverses the effect of uuencode recreating the original binary file exactly. These formats uuencode decode became popular for sending binary files by e mail and posting to news groups. MIME may be combined with a uuencode which merges two different methods of sending binary attachments with messages. Message text word wrapping

The proliferation of wireless devices has added to the messaging formats available. Short Message Service SMS is a simple common type of text message supported by a large number of mobile phones. Proprietary messaging such as Smart Messaging by Nokia allow users to create messages with a variety of features. For example such messaging may allow pictures ring tones virtual business cards or other types of non text data all within a message that is often compatible with the SMS text standard. In other words although these messages may contain non text content they still use SMS text data stream to communicate the data.

The Multimedia Messaging Service MMS format also allows a user to create messages with text picture music and other content. MMS messages may consist of multiple pages each page with its own text picture music and so forth. MMS is currently employed by many mobile phones.

A network may support a variety of messaging formats and may further support a variety of services and applications for users. Such a unified messaging system includes a network which may be implemented as one or more servers including a data memory to store messages which may include messages of different types and of different communications media e.g. received messages sent messages voicemail messages fax messages etc. . Messages may be grouped into message clusters or mailboxes associated with one or more individual user or groups of users. In some embodiments an individual message includes but is not limited to a unique message index e.g. identifiers message content e.g. voice video data message properties e.g. date and time sender information and message status e.g. read unread . A particular combination of message indexes and message statuses of the messages in a given message cluster is referred to as the state of the messages in the given cluster.

The system may further include a variety of devices for communication each of the devices associated with or accessible by users. In some implementations the wireless devices support a Wireless Local Area Network WLAN over the air protocol such as those supporting Wi Fi or Bluetooth communications. The wireless devices may further support multiple wireless protocols.

A system may implement call processing techniques and methods which provide call routing to multiple of the devices. For example in one scenario a voice call to a user is processed by a default path first such as to a particular device and then may be routed to another device according to routing rules. Such routing rules may direct the call to a LL telephone first and then to a cellular telephone.

A user in such a hosted system or hosted communications provider has an associated account which is accessed through the system. In one example the network receives a communications message directed to a user of the hosted communications provider. The system stores the communications message in a local storage device such as a memory storage device or dedicated memory storage unit. As the system is configured to process digital communications according to and Internet Protocol IP the system is able to process web requests and has a web server module. A web server module receives an access request from a user the access request is to access the user s account and is sent by the user through a web browser module installed on a client device. The client device supports web interactions and displays a user interface allowing the user to request access to the account and to view the information associated with the user account which information is provided by the web server module of the system. In the present example the system responds to the access request by sending information to the user s client device wherein at least a portion of the user interface information is provided in a file format which does not include hypertext markup language HTML formatted data. The file format is intended for use by a display module working with the web browser module installed on the client device. The display module may be any of a variety of devices.

Users may access their stored messages from the hosted communications providers in several ways. For example users can access their messages by retrieving them over a phone mobile or landline by receiving messages in email attachments by receiving them over a fax machine or by using a web browser. When a web browser is used by a user to access messages the user typically uses a web browser installed on a local computer the client to connect to a web server belonging to the hosted communications provider and view the messages that have been stored in the user s account. The user may also have the option to download the messages from the web server to the local computer. Typically the user provides a password to log in to a webpage that displays information specific to the user s account which includes but is not limited to the messages available for viewing or retrieval information associated with the messages such as the time the message was received or the sender s identification information account settings and preferences etc.

There are many different web browsers that a user can use to log in to an online account. When a user logs in to the user s account the hosted communication provider s web server typically serves up a user interface for the user that is formatted using hypertext markup language HTML . However a user interface transmitted in html can look different depending on which web browser is used to view the user interface. This causes the user to have a different experience when logging in using one browser than with another even though the user s account settings and preferences may stay the same. HTML is also not as well suited for displaying multimedia files or interactive webpages. It would be desirable to provide a user with a uniform experience when viewing the user s account online regardless of which web browser is used.

The hosted communications provider is connected to the Internet . Transmissions to and from the hosted communications provider between the Internet and the PSTN pass through the PSTN VoIP gateway . The PSTN is also in communication with the cellular network .

The hosted communications provider provides messaging services to its users via its connection to the Internet . A user of the hosted communications provider can initiate or receive communications from any of the communication devices A F shown in . The VoIP phone A and the computer B can communicate using internet protocols they communicate with the hosted communications provider through the Internet . The fax machine C and the telephone D are connected to the PSTN their communications with the hosted communications provider pass through the PSTN VoIP gateway . The PSTN VoIP gateway converts packets it receives from the Internet into a format compatible for transmission across the PSTN such as time division multiplexing TDM . The PSTN VoIP gateway also converts signals received from the PSTN into IP packets for transmission over the Internet .

The cellular phone E is connected to the cellular network it communicates with the hosted communications provider via the cellular network to the PSTN to the PSTN VoIP gateway . The multi mode phone F can communicate with the hosted communications provider via either the cellular network or through its own connection to the Internet . The number and types of communication devices shown in are not exhaustive and other configurations are possible. For example a traditional analog telephone can be connected to the Internet e.g. in place of the PSTN by using an Analog Telephone Adapter ATA .

The hosted communications provider provides VoIP and other media services through its Internet connection. There are various protocols used to send real time multimedia including voice and video communications over the Internet . Session Initiation Protocol SIP is one protocol used to establish transfer and end sessions between communication devices and the hosted communications provider across the Internet . The SIP signaling protocol is described further in Request For Comments RFC 3261 entitled SIP Session Initiation Protocol by J. Rosenberg et al. June 2002 published by the Internet Engineering Task Force IETF . Real time Transport Protocol RTP is another protocol used to transport multimedia data packets across the Internet. The RTP protocol is described further in RFC 3550 entitled RTP A Transport Protocol for Real Time Applications by H. Schulzrinne et al. July 2003 published by the IETF. SIP and RTP are used herein as examples of protocols for illustrative purposes only but there are many other protocols that can be used in IP telephony including but not limited to the protocols defined by the International Telecommunication Union Telecommunication Standardization Sector ITU T H.323 standard and proprietary protocols such as those used by Skype VoIP Services of Silver Lake Partners.

A caller can use any of the communication devices shown in to leave a voice fax or text message with a user of the hosted communications provider . For example a caller can use the VoIP phone A to leave a voicemail message for the user. The caller may or may not be another user of the hosted communications provider . The caller initiates the call from the VoIP phone A dialing a number associated with the user. The call is received by the hosted communications provider which recognizes that the number belongs to one of its users. The caller leaves a voice message which is received and stored by the hosted communications provider for later access by the user. Similarly a caller can use the fax C to send a fax message to the user or cellular phone E to send a text message to the user. The voice fax or text message can all be received and stored by the hosted communications provider .

The message can reach the user in various ways. For example the hosted communications provider can email the message to the user as soon as it is received by attaching the message to the email e.g. as an audio file in the case of voicemail or as an image file in the case of a facsimile. The user can also use a local client computer to login to the user s account at the hosted communications provider to check for the availability of any messages and to download messages as desired to the user s local client computer. This latter method is discussed in further detail below.

As shown in the client computer the hosted communications provider and the VoIP phone A are connected to the Internet . As described in the previous example a caller can leave a message for the user by calling the user s number. The call is received by the telecom interface module in the hosted communications provider . The telecom interface module verifies with the account database that the number being called is associated with a valid account. After verification the message is stored in message storage device . As previously mentioned the message can include various formats such as voice facsimile text or data. For example a caller can use the fax machine C to send a fax message to the user or cellular phone E to send a text message to the user. Regardless of whether the message is voice fax text or data the message is received and stored in message storage device by the hosted communications provider . As illustrated the hosted communications provider includes a controller which acts to implement actions and respond to computer readable instructions stored in the account database web server telecom interface memory storage and other modules not shown .

Once the message is stored the user can use a local client computer to log in to the user s account online to check for the availability of any messages and to download messages as desired to the user s local client computer . The local client computer has a web browser module installed for browsing the Internet . The web browser module displays an application window on a monitor screen or other output display device not shown for the local client computer . To access the user s account online the user enters an address such as a Uniform Resource Locator or URL to the web browser module that points to the hosted communications provider s web server .

The first webpage returned by the web server is typically a login page where the user provides a user name and a password to authenticate the user. The web server checks that the user name and password belong to a valid account in the account database . Once the user is verified the web server sends a user interface to the client computer . The user interface displays account specific information to the user such as a list of the messages stored for the user the account settings and preferences and so forth. The user interface is provided in a file format specific to the display module . The user interface is interpreted by the display module . The display module interprets the user interface and displays it through the web browser module . Display module is not a general HTML interpreter and the user interface is not in HTML. The file format of the user interface is compatible with the display module but is generally not compatible with the web browser module as a stand alone application without the display module .

Display module works with the web browser module but may or may not be included in the same application as the web browser module . For example it can often be installed or downloaded as a separate component. Display module is sometimes referred to as a plug in to the web browser module that extends the capabilities of the web browser module .

The display module can be for example a version of the Adobe Flash Player software which is a cross platform browser based application runtime that enables viewing of expressive applications content and videos across screens and browsers. If the display module is an Adobe Flash Player software then the user interface would be a file compatible with Adobe Flash Player software such as a file in the shockwave flash referred to as swf file format. The format of the user interface provided by the web server should be compatible with the display module installed on the client computer . Other display modules and compatible file formats for the user interface may also be used.

In some implementations the display module is a proprietary module developed by the hosted communications provider and provided to its users. In some implementations the user interface is also provided in a proprietary format to be used by the display module . By developing its own proprietary display module and user interface file format the hosted communications provider retains greater control over the appearance and functionality of the user interface . When the user interface is designed and provided in a file format specifically intended for display module more control may be retained over the appearance of the user interface especially across various types of web browsers. In some implementations the display module is configured for a specified operation and the user interface is configured thereto.

In some implementations the user interface is provided in two formats an HTML format for the standard browser and a format specific to the display module. The HTML portion of the user interface is provided to maintain a basic level of compatibility with browsers without a display module installed but the display module format is the primary way of providing account information to the user and the primary way for the user to configure personalize and access the user s account.

The user interface provides access to messages for the user stored in the message storage device . This access can be in the form of links to the messages or other display items that can be selected by the user. When a user selects a message link in the user interface the display module sends a request back to the web server for the message.

The web server receives the request and retrieves the requested message from the message storage device . The web server then returns the requested message to the user. In some implementations the requested message can be displayed or played back directly by the display module in the web browser module . In some implementations the requested message is downloaded to the local client computer for play back or display through a separate application

A user accesses messages stored in the network by interfacing with the web browser module and accessing the URL associated with the user s account. The system may partition or organize users in a variety of ways and may assign a mailbox to each user. The network will often incorporate a user authentication process whereby the user will enter a user identifier and a password or some other security combination. The processing involves the user requesting information stored as part of the user s account and then the user receiving the requested information such as a message from another party in any of a variety of formats.

A variety of examples are disclosed herein which provide for a messaging system where a client device is configured to receive information for display in multiple formats including HTML and non HTML. Where the client device is part of a hosted communication network communications between the network and the client device are through an IP network such as the Internet. The network receives messages and data information for the user and stores this information in a memory storage device accessible on request from the user. When the network receives an access request the information is retrieved from the memory storage device and prepared for transmission to the client device. At least a portion of the information is prepared using a display format other than an HTML format. The information is received at the client device and displayed for the user on a display module that supports the display format.

To improve the performance of the hosted communication system multiple active POPs can be provided. illustrates an example of a system that includes several pairs of POPs that are both active units. Each pair of active POPs makes up a Part of Data POD module. POP A includes a unit in each of PODs and and POP B includes a unit in each of PODs and . In this way the unit and unit create a pair. To identify a particular unit of a POD each POP is referred to as a unit wherein POP A of POD may be referred to as P U and POP B of POD may be referred to as P U. The bi directional arrow s between PODs indicates that both are active and operational and the PODs share information during operation such as call log updates.

The configuration of system may be used in a system illustrated in which includes a hosted communication network . Various sources may communicate with the network through gateways such as PSTN IP gateway which each may be coupled to a different telephone company or other communication source. The gateways provide the digitized signals to the network . To process these digitized signals the network includes routers which can be SIP proxy units with added functionality to identify the POD associated with a user to a communication. The routers are based on a SIP proxy unit for processing telecommunication signals and is enhanced to provide routing capabilities based on user information stored in a Global User Data GUD data or memory storage unit. Unlike the use of the SIP proxy unit for traffic and load balancing the enhanced routers identify the location of the network user to a communication and the associated POD unit. The routers obtain this information from the GUD respectfully which each stores information mapping each user telephone number to the POD supporting the user.

In some implementations when a call is received at the routers the routers the GUDs information is used to identify the POD to which the calls are to be routed to reach the user. The GUDs may be any of a variety of memory storage devices. In some implementations the GUDs may include additional information relating to a user. The configuration allows for double or twin active routing paths where both routers are active. In this way if either of routers has an operational problem or it is desired or needed to stop operation for any period of time or to replace hardware the other active router is available so that any impact on user experience may be minimized.

In some implementations any number of duplicated router devices for various other configurations can be implemented. Also in some implementations other network components can be added between the gateway and the routers in other implementations. Each of the routers may be located in different geographical locations or may be co located in one place. The routers may be individual servers or may be partitions of a same server. Similarly each of routers may be configured using multiple servers such as in a server bank. In some implementations each router may be an individual server.

While shows a portion of the POD that includes unit in some implementations the unit of POD can be a duplicate of unit . In some implementations any number of TAS units also can be implemented. The SIP proxy module operates to balance traffic and is in the network. The SIP proxy module has access to the status of each TAS and therefore assigns a TAS to a communication based on the status information. Such implementations may process communications in a variety of ways. When a communication including voice calls and messages are received at the routers the network may provide various routing schemes.

As presented herein a hosted network expands coverage while guarding against server failures by providing duplicate POPs which defines a POD as having one unit in each POP. Such application enables a SIP proxy router in each POP to access GUD information so as to route calls appropriately. The duplication allows either POP to operate independently in case of a failure of the other unit.

Although the present invention has been described in detail with reference to particular embodiments persons possessing ordinary skill in the art to which this invention pertains will appreciate that various modifications and enhancements may be made.

Computing device includes a processor memory a storage device a high speed interface connecting to memory and high speed expansion ports and a low speed interface connecting to low speed bus and storage device . Each of the components and are interconnected using various busses and may be mounted on a common motherboard or in other manners as appropriate. The processor can process instructions for execution within the computing device including instructions stored in the memory or on the storage device to display graphical information for a GUI on an external input output device such as display coupled to high speed interface . In other implementations multiple processors and or multiple buses may be used as appropriate along with multiple memories and types of memory. Also multiple computing devices may be connected with each device providing portions of the necessary operations e.g. as a server bank a group of blade servers or a multi processor system .

The memory stores information within the computing device . In one implementation the memory is a computer readable medium. In one implementation the memory is a volatile memory unit or units. In another implementation the memory is a non volatile memory unit or units.

The storage device is capable of providing mass storage for the computing device . In one implementation the storage device is a computer readable medium. In various different implementations the storage device may be a floppy disk device a hard disk device an optical disk device or a tape device a flash memory or other similar solid state memory device or an array of devices including devices in a storage area network or other configurations. In one implementation a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory the storage device or memory on processor .

The high speed controller manages bandwidth intensive operations for the computing device while the low speed controller manages lower bandwidth intensive operations. Such allocation of duties is exemplary only. In one implementation the high speed controller is coupled to memory display e.g. through a graphics processor or accelerator and to high speed expansion ports which may accept various expansion cards not shown . In the implementation low speed controller is coupled to storage device and low speed expansion port . The low speed expansion port which may include various communication ports e.g. USB Bluetooth Ethernet wireless Ethernet may be coupled to one or more input output devices such as a keyboard a pointing device a scanner or a networking device such as a switch or router e.g. through a network adapter.

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a standard server or multiple times in a group of such servers. It may also be implemented as part of a rack server system . In addition it may be implemented in a personal computer such as a laptop computer . Alternatively components from computing device may be combined with other components in a mobile device not shown such as device . Each of such devices may contain one or more of computing device and an entire system may be made up of multiple computing devices communicating with each other.

Computing device includes a processor memory an input output device such as a display a communication interface and a transceiver among other components. The device may also be provided with a storage device such as a microdrive or other device to provide additional storage. Each of the components and are interconnected using various buses and several of the components may be mounted on a common motherboard or in other manners as appropriate.

The processor can process instructions for execution within the computing device including instructions stored in the memory . The processor may also include separate analog and digital processors. The processor may provide for example for coordination of the other components of the device such as control of user interfaces applications run by device and wireless communication by device .

Processor may communicate with a user through control interface and display interface coupled to a display . The display may be for example a TFT LCD display or an OLED display or other appropriate display technology. The display interface may comprise appropriate circuitry for driving the display to present graphical and other information to a user. The control interface may receive commands from a user and convert them for submission to the processor . In addition an external interface may be provide in communication with processor so as to enable near area communication of device with other devices. External interface may provide for example for wired communication e.g. via a docking procedure or for wireless communication e.g. via Bluetooth or other such technologies .

The memory stores information within the computing device . In one implementation the memory is a computer readable medium. In one implementation the memory is a volatile memory unit or units. In another implementation the memory is a non volatile memory unit or units. Expansion memory may also be provided and connected to device through expansion interface which may include for example a SIMM card interface. Such expansion memory may provide extra storage space for device or may also store applications or other information for device . Specifically expansion memory may include instructions to carry out or supplement the processes described above and may include secure information also. Thus for example expansion memory may be provide as a security module for device and may be programmed with instructions that permit secure use of device . In addition secure applications may be provided via the SIMM cards along with additional information such as placing identifying information on the SIMM card in a non hackable manner.

The memory may include for example flash memory and or MRAM memory as discussed below. In one implementation a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory expansion memory or memory on processor .

Device may communicate wirelessly through communication interface which may include digital signal processing circuitry where necessary. Communication interface may provide for communications under various modes or protocols such as GSM voice calls SMS EMS or MMS messaging CDMA TDMA PDC WCDMA CDMA2000 or GPRS among others. Such communication may occur for example through radio frequency transceiver . In addition short range communication may occur such as using a Bluetooth WiFi or other such transceiver not shown . In addition GPS receiver module may provide additional wireless data to device which may be used as appropriate by applications running on device .

Device may also communication audibly using audio codec which may receive spoken information from a user and convert it to usable digital information. Audio codex may likewise generate audible sound for a user such as through a speaker e.g. in a handset of device . Such sound may include sound from voice telephone calls may include recorded sound e.g. voice messages music files etc. and may also include sound generated by applications operating on device .

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a cellular telephone . It may also be implemented as part of a smartphone personal digital assistant or other similar mobile device.

Various implementations of the systems and techniques described here can be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium computer readable medium refers to any computer program product e.g. non transitory apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described here can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The systems and techniques described here can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN and the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any inventions or of what may be claimed but rather as descriptions of features specific to particular implementations of particular inventions. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the implementations described above should not be understood as requiring such separation in all implementations and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

As described herein is a method for a user of a hosted communications provider to access an account associated with the user comprising receiving a message intended for the user of the hosted communications provider storing the message in a storage device receiving a request from a web browser installed on a client device associated with the user to access the account providing a user interface to the client device having information associated with the user account the information including access to the message wherein the information is provided in a file format other than hyper text markup language HTML receiving a request from the client device for the message and providing the message to the client device.

Also described herein the above method wherein at least a portion of the user interface is provided in a format compatible with a flash player wherein the file format is for use by a display module working with the web browser installed on the client device and is incompatible with the web browser wherein the user interface is in a proprietary format developed by the hosted communications provider wherein the display module is a proprietary module developed by the hosted communications provider wherein the display module is a plug in to the web browser wherein the user interface includes one or more links to the user s messages in the storage device and wherein receiving a request from a web browser includes receiving the request from the web browser at a web server the method further comprising returning a requested message to the user for display by the display module.

As described herein is a hosted communications provider system comprising a controller for processing operations a memory storage device coupled to the controller the memory storage device storing messages for users of a hosted communication provider and an interface coupled to the controller and configured to process Internet Protocol IP communications and prepare messages in a display format other than an HTML format.

Also described herein the above hosted communications provider system further comprising a web server coupled to the controller and configured to process Internet Protocol communications wherein the web server is further configured to prepare messages in an HTML display format wherein the interface prepares and transmits a first message to a first user in response to an access request wherein the controller initiates retrieval of the first message from the memory storage device in response to the access request further comprising an account database wherein the account database stores information specific to the first user and the information is configured to authorize the access request wherein first message is received from a second user wherein the first message is a Short Message Service SMS message.

As described herein is a client communications system comprising a client controller for processing operations in coordination with a hosted communications provider a display module coupled to the client controller the display module configured to display information using a display format other than HTML and a web browser module coupled to the display module and for preparing information in an HTML display format.

Also described herein the above client communications system further comprising a display controller coupled to the display module and configured to initiate display of the information in the display format wherein the apparatus receives a message from the hosted communications provider and displays the message on the display module further comprising a memory storage unit configured to store computer readable instructions to send an access request to the hosted communications provider receive a message in response to the access request the message from the hosted communications provider and received via an Internet Protocol IP network identify the display format of the message and instruct the display controller to display the message using the display format on the display module.

As described herein is a hosted communications provider or network supports communications to multiple users each having associated accounts. The network includes memory storage device s for storing communications message s directed to one or more of the users. A web server module is configured to receive access requests for the user accounts such requests originating from a user device. The network provides the requested access and sends the information using a non HTML format for at least a portion of the information. The user device displays the requested information on a display device. In some implementations the information is sent to the user in a non HTML format. In some implementations at least a portion of the user interface is provided in a file format which does not include HTML.

The sending client devices may be coupled to the message service system through a connection system . Likewise the receiving client devices may be coupled to the message service system through a connection system . Each sending client device may send messages to intended recipients through the connection system . The messages may be routed through the connection system to the message service system .

The sending client device may comprise any variety of devices capable of sending a message. For example a sending client device may comprise any communication device shown in such as VoIP phone A a computer B configured to run communications software applications e.g. VoIP voice audio video facsimile or data applications a fax machine C a telephone D a cellular phone E and a multimode phone F. It should be noted that although computer B are shown in as a notebook computer it is not limited to being a notebook computer any computing device such as a desktop computer server computing tablet computing personal accessory etc. can be considered to be a computer B for the purposes of the description herein.

As shown in a sending client device may comprise various input devices for producing various types of messages. An input device may be of any type that allows the sender to provide input into the sending client device for producing a message. For example the input devices may include a fax scanner device for producing fax messages a keyboard and or mouse for producing text messages a voice audio capture device for producing voice audio messages a video capture device for producing video messages and a picture capture device camera for producing picture messages. An input device may also comprise a device for inputting user selections and text such as a mouse trackball keyboard etc.

Each sending client device may further comprise various computer hardware components configured for implementing embodiments described herein. For example a sending client device may comprise a computing device or a mobile computing device shown in . The sending client device may include the various computer hardware components e.g. processor memory storage device of the computing devices or that are configured for implementing embodiments described herein. These computer hardware components are described in relation to and are not discussed in detail here.

Each sending client device may send messages that sent through the connection system to the message service system . The connection system may comprise various computer networks telephone networks cellular networks and communication devices for connecting a sending client device to the message service system . For example the connection system may comprise the packet switched network such as the Internet the public switched telephone network PSTN the PSTN VoIP gateway and the cellular network shown in . These connection system components are described in relation to and are not discussed in detail here. For the purposes of illustrating the connection system between the sending client device and the message service system the sending client device may comprise any communication device shown in and the message service system may comprise the hosted communications provider shown in .

The messages from the sending client devices are received by the message service system and stored to the message storage system . Each received message may be stored as a digital message file in a particular format type. The message files may comprise a plurality of different message types converted to a plurality of different format types. In the example shown in the message storage system may store fax message files text message files voice audio message files video message files picture message files or any combination thereof.

Examples of different format types for fax message files include Portable Document Format PDF Flexible Image Transport System FITS Tagged Image File Format TIFF etc. Examples of different format types for text message files include Plain Text PDF .doc etc. Examples of different format types for voice audio message files include WAV MP3 MP4 AIFF IFF file format Extensible Music Format XMF etc. Examples of different format types for video message files include 3GP AVI Flash Video FLV F4V QuickTime File Format MP4 RealMedia RM etc. Examples of different format types for picture message files include Joint Photographic Experts Group JPEG TIFF Portable Network Graphics PNG etc.

With each message file the message service system may also produce and store message information describing the message file such as a size of the message e.g. time length of the message number of pages of the message identifier for the sending client device e.g. phone number and or sender name the message type fax text audio etc. the date and time the message was received etc. The message information may be stored along with the associated message file in the message storage system and transmitted to various components along with the associated message file or may be separately transmitted to various components. Preferably the message information is formatted in a non markup language such as comma delimited format.

As shown in the exemplary message environment also includes a plurality of receiving client devices coupled to the message service system through the connection system . A receiving client device is used by an intended recipient user of a message. A receiving client device may comprise any variety of devices capable of accessing messages. For example a receiving client device may comprise a computer or mobile device e.g. cellular phone E multimode phone F smartphone etc. .

The message access system of the message service system interacts with the receiving client devices to provide access to messages and associated message information stored on the message storage system . A receiving client device provides a Flash UI that interacts with the message access system to access messages and associated message information as described below in Section III.

A receiving client device may be connected to the program server load balancer device message server and message synchronization server through the connection system . The various components of the message access system and the message storage system may be interconnected through a computer network such as a point to point link shared local area network LAN wide area network WAN or virtual private network VPN implemented over a public network such as the Internet.

In some embodiments the message access system comprises two different servers a program server and a message server having different functions. In other embodiments the functions of the program server and message server are combined into a single server. Each server may comprise a computer system having hardware and software in a network that is shared by multiple users. The program server may store a Flash media UI file shown as Flash media UI file that is transmitted to a receiving client device . Each receiving client device may download receive and install the Flash media UI file from the program server . Once installed the Flash media UI file may provide a Flash UI engine on the receiving client device .

Preferably the Flash media UI file comprises only Flash programming instructions. The Flash media UI file may comprise Flash programming instructions for configuring a message UI and a settings UI and also comprises a one or more embedded applications for performing various functions when executed as described herein. Preferably the Flash media UI file is in the Small Web Format SWF format as a .swf file. The Flash UI engine executes the Flash media UI file to perform embodiments herein.

The Flash UI engine comprises a message UI engine and a settings UI engine. The message UI engine may be used by a user to access his her messages through the message service system . The settings UI engine may be used by an administrator to access messages of other users of the message service system and to perform various administrative functions such as changing configuration settings etc.

As shown in the Flash UI engine may comprise a plurality of different embedded application engines within the Flash UI for presenting e.g. displaying or playing back a plurality of different message file types in a plurality of different format types. Each embedded application may be configured for decoding and presenting one or more particular message file types in one or more different formats. In the example of the embedded applications include and thus the Flash UI Engine includes a fax viewer for viewing fax messages a text viewer for viewing text messages an audio player for playing back voice audio messages a video player for playing back video messages and a picture viewer for viewing picture messages.

In some embodiments each embedded application may be configured for decoding and presenting one or more particular message file types in a plurality of different formats. For example the audio player may be configured for playing back voice audio messages in a plurality of different formats e.g. MP3 AIFF WAV etc. . In other embodiments the Flash UI may include different embedded applications for different format types of the same message type. For example the Flash UI may include a first embedded application for audio messages in a first format and a second embedded application for audio messages in a second format. As such the Flash UI leverages the multimedia capabilities of Flash programs.

As shown in the receiving client device also comprises a local storage device such as a disk device solid state device etc. . In some embodiments message files and associated message information may be downloaded and stored to the local storage . In the example shown in the local storage device may store fax message files text message files voice audio message files video message files and picture message files and the message information associated with each message file. As known in the art Flash programs also provide strong support and capabilities for local storing and caching of data. In some embodiments the Flash UI leverages this local caching support by downloading and storing all current messages for an intended recipient user to the local storage device on the receiving client device . A local storing method is discussed below in relation to .

As shown in the receiving client device also comprises input device for providing user input and output devices for presenting the messages. The input devices may be of any type that allows an end user to provide input into a computer system. The input devices such as a keyboard mouse trackball etc. allows a user to provide user input and selections and interact with the Flash UI . The output devices may be of any type generally used by a computer system to provide information to an end user. The output devices may include for example a display e.g. television monitor etc. and audio devices e.g. headphone jack speakers etc. .

Each receiving client device may further comprise various computer hardware components configured for implementing embodiments described herein. For example a receiving client device may comprise a computing device or a mobile computing device shown in . The receiving client device may include the various computer hardware components e.g. processor memory storage device of the computing devices or that are configured for implementing embodiments described herein. These computer hardware components are described in relation to and are not discussed in detail here.

After the Flash media UI file is installed the receiving client device connects with a message server of the message access system . This may be performed for example by the receiving client device sending a connection request to the message access system by using the web browser to submit a web address associated with the message access system . The connection request may be received by a load balancer of the message access system . The load balancer may be configured to receive and distribute connection requests from receiving client devices to the message servers for processing. For example the load balancer may be configured to receive and route connection requests in rotating sequence to the message servers to evenly distribute connection requests among the plurality of message servers . Using the load balancer and the plurality of message servers in this manner also provides message server redundancy to avoid a single point of failure in the message access system . After a message server receives the connection request the receiving client device may be directly connected with the message server through the connection system .

The message server then processes the connection request by sending a login page to the receiving client device for requesting login information. Login information may comprise for example a user identifier e.g. username and or phone number and password. The receiving client device sends the login information and the message server may verify the login information. The login information for a plurality of users may be stored to the account database . After the message server verifies the login information on the account database the message server may send the receiving client device a homepage UI which is displayed on a display e.g. monitor or screen of the receiving client device .

The homepage UI may be formatted using a markup language e.g. HTML XML or a non markup language. The homepage UI does not display any message information. The homepage UI may display a plurality of selectable icons each icon for selecting and executing a particular UI having particular functions. The homepage UI comprises a message icon for selecting and executing the message UI and or a settings icon for selecting and executing the settings UI.

The homepage UI may receive a user selection through an input device such as a mouse trackball keyboard etc. of the message icon on the homepage UI. If so the receiving client device executes the message UI Flash UI . In some embodiments the receiving client device displays the message UI as a separate pop up window that overlays the homepage UI. In other embodiments the receiving client device displays the message UI as a separate pop up window from the window that displays the homepage UI. Closing the message UI closes the pop up window so the homepage UI is visible again.

Upon the message icon being selected the message UI automatically requests and displays a message list comprising a list of all current messages of the user. The message list may comprise message information for all current messages of the user as identified by the user identifier in the login information . Current messages may comprise new messages not yet displayed to the user as well as messages previously displayed but not yet deleted by the user. The message UI may send a request for the message list to the message server . In turn the message server may retrieve the message list for the user from the account database . The message server may comprise application programming interfaces APIs configured for interacting with the account database for retrieving message information from the account database .

The account database stores message information for all current messages for a plurality of users. shows a conceptual diagram of an exemplary account database . As shown in the example of the account database may comprise a plurality of entries each entry having a plurality of data fields . The account database may comprise an entry for each current user subscriber of the message service system . The data fields may include a user identifier e.g. username and or phone number password message information and message filepath . The field for message information may comprise message information for each current message corresponding to the user identifier. The field for message filepath may comprise a filepath for each current message the filepath being used to retrieve the current message that is stored on the message storage system .

As described above the message storage system stores message files and message information associated with each message file. The account database may periodically synchronize with the message storage system to update the data in the account database . In this manner the account database may contain up to date message information and filepaths for current messages for each user. Note that message information for each stored message comprises various information including a user identifier for the intended recipient e.g. username and or phone number . The user identifier in the message information may be used to determine which entry in the account database to store the message information by matching the user identifier in the message information with the user identifier in the entry .

After the message server retrieves the message list comprising message information for all current message for the user from the account database the message server sends the message list to the receiving client device via the connection system . The message UI on the receiving client device then displays the message list on an inbox page. The message UI may display the message information for all current messages by displaying for each current message for example an identifier for the sending client device e.g. the phone number of a caller who left a voicemail the message type the date and time the message was received etc. The message UI may also display a selectable presentation icon corresponding to each current message that may be selected for presenting viewing or playing back the current message.

The message UI may then receive from the user a selection of a presentation icon for a particular message. In response the message UI sends the message server a request for the message file corresponding to the selected message. The message server may retrieve the filepath for the selected message from the account database and use the filepath to retrieve the selected message file from the message storage system . The message server may comprise application programming interfaces APIs configured for interacting with the message storage system for retrieving message files from the message storage system .

As known in the art a filepath may represent a route to a file on a storage device that may be mapped to a physical address location on the storage device where the file is stored. In some embodiments the message server maps the filepath to the physical address location of the message file. In other embodiments the message storage system maps the filepath to the physical address location of the message file. Filepath mapping and alternative embodiments for the message storage system are discussed below in relation to .

After retrieving the requested message file the message server sends the requested message file to the receiving client device which then presents the requested message file. To present the message file the message UI may select and execute an embedded application appropriate for the message and format type of the message file. For example if the message file is an audio message file in a first format the message UI may select and execute an embedded application that is configured for playing audio files in the first format. In some embodiments after receiving the requested message file the receiving client device stores the requested message file to its local storage and then presents the message file from the local storage .

To present the selected message file the message UI may provide and display an embedded application UI for the embedded application. In some embodiments the message UI may provide a different embedded application UI for each embedded application. Each embedded application UI may comprise different features and selectable icons depending on the embedded application. For example the message UI may provide an audio UI for an audio player the audio UI having a selectable playback button and a volume control. In some embodiments an embedded application UI may be integrated in the same window as the message UI where the message information for one or more messages is also displayed . Integrated embedded application UIs may be provided for commonly used embedded applications. A non integrated embedded application UIs may be provided for not commonly used embedded applications.

In addition to presenting messages the message UI may also provide other selectable icons for other message functions such as message forwarding message deleting marking the message as read or unread blocking the sender calling the sender sending a fax to the sender etc. Upon receiving a user selection of a message function the message UI executes the message function in response. These additional message functions may also be provided by embedded applications configured for performing the message functions. For example an embedded application may comprise a softphone application for calling back a sender. These additional message functions are discussed below in Section IV.

The user may interact with the message UI by selecting the various message functions and then select to close the message UI. Upon receiving a selection to close the message UI the separate pop up window of the message UI closes and the underlying homepage UI is displayed. The homepage UI may receive a user selection of the settings icon on the homepage UI. If so the receiving client device executes the settings UI. In some embodiments the receiving client device displays the settings UI as a separate pop up window that overlays the homepage UI.

The settings UI may be used by an administrator to access messages of other users through the message access system and to perform various administrative functions such as changing configuration settings etc. The settings UI may provide message lists and message files of other users utilizing the devices and methods described herein. The settings UI is described further below in Section IV. An administrator user may interact with the settings UI to perform various administrative functions and then select to close the settings UI. Upon receiving a selection to close the settings UI the separate pop up window of the settings UI closes and the underlying homepage UI is displayed.

In some embodiments the message access system further comprises a message synchronization server for synchronizing messages and message information between the receiving client device and the message service system . Message synchronization may be needed for example when a user of a receiving client device receives deletes or reads messages and the message service system needs to be updated to reflect these message changes. The receiving client device may interact with the message synchronization server which may interact with a message server to synchronize messages and message information for the user of the receiving client device . In some embodiments a message synchronization method described in U.S. Pat. No. 7 702 669 issued on Apr. 20 2010 entitled Synchronization in Unified Messaging Systems is used. In other embodiments other message synchronization methods known in the art may be used.

The Flash media UI file comprises a compilable file a file able to be compiled having only compilable program instructions instructions able to be compiled preferably Flash program instructions. The Flash media UI file is compiled into machine language that is executable by a computer processor. The Flash UI engine may include a computer processor that executes the Flash media UI file to perform embodiments herein wherein the Flash UI engine is compatible with a Flash Player from Adobe Systems Incorporated . The Flash media UI file may comprise programming instructions for a message UI a settings UI and a plurality of embedded applications for performing various functions described herein. Preferably the Flash media UI file is in the Small Web Format SWF format as a .swf file. The receiving client device provides a web browser having the Adobe Flash Player and the Flash media UI file as a Flash plug in program. The Flash media UI file does not comprise any markup language that is the Flash media UI file comprises a file format other than markup language format. Preferably the Flash media UI file comprises only Flash programming instructions.

The message information is preferably formatted in a non markup language when stored in the message storage system the account database and the receiving client device . The message information is preferably also transmitted in a non markup language between the various components in accordance with embodiments herein. For example the message information may be transmitted in a non markup language between the message storage system account database message server and the receiving client device . In some embodiments the message information is stored and transmitted in comma delimited format or in another type of non markup language format.

As known in the art a markup language is a text encoding system that uses a set of markup tags to annotate text within a text document. Examples of markup languages include hyper text mark up language HTML and extensible markup language XML . As known in the art comma delimited format is an example of a non markup language format and may also be referred to as comma separated values CSV . Comma delimited format may comprise a data format whereby each piece of information is separated by a comma. For example message information for a message file may be formatted as a size of the message sender phone number sender name message type date and time message received. As known in the art comma delimited format is widely used and supported as most database systems and other data intensive applications such as spreadsheet applications are able to import and export comma delimited information.

Preferably message data is transmitted between the various components using a non HyperText Transfer Protocol non HTTP . For example the message data may be transmitted in a non HTTP protocol between the message storage system account database message server and the receiving client device . In these embodiments the message data may be transmitted using a custom protocol i.e. a protocol proprietary to this system or standard protocol e.g. File Transfer Protocol FTP or WebSocket that is a non HTTP protocol. In further embodiments the Flash media UI file stored on the program server is transmitted to the receiving client device using a non HTTP protocol such as a custom protocol or standard protocol e.g. FTP or WebSocket that is a non HTTP protocol.

As known in the art FTP comprises a network protocol for transferring files from one computer device to another computer device over a TCP IP based network such as the Internet. FTP may be used to transfer any variety of file types. As known in the art WebSocket comprises a network protocol for providing bi directional full duplex communications channels over a single Transmission Control Protocol TCP socket. WebSocket may be implemented in any client or server application including web browsers and web servers.

The method begins by the message service system receiving at messages from sending client devices through the connection system and storing the messages and message information for each message to the message storage system . The stored messages may comprise message files of a plurality of different message types in a plurality of different format types. The message information for a message may also be stored with the message.

The receiving client device downloads at the Flash media UI file from the program server and installs the Flash media UI file to provide a Flash UI engine on the receiving client device . The Flash UI engine may comprise a message UI engine and a settings UI engine and comprise a plurality of embedded application engines for presenting a plurality of different message and format types.

The receiving client device then sends at a connection request to the message access system . The load balancer of the message access system receives at the connection request and sends the request to one of the message servers . The message server receives and processes at the connection request by performing a login procedure with the receiving client device by receiving login information from the receiving client device. The message server may verify the login information using the account database that stores login information for current users subscribers of the message service system .

After the login procedure the message server may send at the receiving client device a homepage UI which is displayed on the receiving client device . The homepage UI may display a message icon for selecting and executing the message UI and a settings icon for selecting and executing the settings UI.

On the receiving client device the homepage UI may receive at a user selection of the message icon. In response the receiving client device may execute and display at the message UI and receive and process a series of user inputs through the message UI for accessing messages of the user. A method for providing a message UI for accessing messages is described below in relation to . An alternative method for providing a message UI for accessing messages by using local caching is described below in relation to . The receiving client device may receive at a user selection to close the message UI and then closes the message UI and displays the underlying homepage UI.

On the receiving client device the homepage UI may receive at a user selection of the settings icon. In response the receiving client device may execute and display at the settings UI and receive and process a series of user inputs through the settings UI for allowing an administrator user to access messages of other users and perform various administrative functions. The settings UI is described further below in Section IV. The receiving client device may receive at a user selection to close the settings UI and then closes the settings UI and displays the underlying homepage UI.

The method begins by the receiving client device executing and displaying at the message UI. Upon opening the message UI automatically sends at to the message server a request for a message list. The message list may comprise message information for all current messages of the user as identified by the user identifier in the login information .

The message server receives at the message list request and retrieves the message list for the user as identified by the user identifier from the account database . The message server then sends at the message list to the message UI on the receiving client device . The message UI then displays at the message list on an inbox page. The message UI may display the message information for all current messages as well as a selectable presentation icon for each current message for presenting viewing or playing back the current message.

The message UI then receives at a user selection of a presentation icon for a particular message. In response the message UI sends at the message server a request for the message file of the selected message. The message server may receive at the message request and retrieves the filepath for the selected message from the account database . The message server then retrieves at the selected message from the message storage system using the filepath and sends e.g. streams the selected message to the receiving client device .

The receiving client device receives at the selected message and presents at the selected message by selecting and executing an embedded application appropriate for the message and format type of the message file. To present the selected message file the message UI may provide and display an embedded application UI for the embedded application. In some embodiments an embedded application UI may be integrated in the same window as the message UI or be displayed in a separate window e.g. pop up window as the message UI.

In some embodiments e.g. for media messages the message server may stream at the selected message to the receiving client device . As known in the art Flash programs provide strong support and capabilities for media streaming. Streaming media may comprise a media message e.g. audio or video message that is constantly received and presented by the receiving client device in steps and while constantly being delivered by the message server in step until the message stream completes. As used herein streaming a message indicates receiving of message data that is presented upon being received by the receiving client device while the transmission of the message data by the message server is still continuing. In these embodiments the message may not be stored to the local storage of the receiving client device .

The user may continually select messages for presentation and steps to of the method may be repeated for every message the user selects for presentation. The message UI may also receive at and process user selections of other message functions such as message forwarding message delete blocking sender calling sender etc.

The method begins by the receiving client device executing and displaying at the message UI. Upon opening the message UI automatically sends at to the message server a request for a message list and message files for all current messages of the user. In some embodiments the message UI automatically sends the request for all current messages of the user without human initiation interaction or intervention. In these embodiments the message UI sends the request for all current messages of the user without receiving a selection of a current message from the user.

The message server receives at the request for the message list and all current message files. In response to the request for the message list the message server retrieves at the message list for the user from the account database . The message server then sends at the message list to the message UI on the receiving client device . The message UI then displays at the message list on an inbox page. The message UI may display the message information for all current messages as well as a selectable presentation icon for each current message for presenting the current message.

In response to the request for all current messages the message server retrieves at the filepaths for all current message from the account database . The message server then retrieves at all current messages from the message storage system using the respective filepaths and sends all current message to the receiving client device . Note that steps and may be performed concurrently with steps and and a different order of steps may be used. The receiving client device receives at all the current message files and stores all the current message files to its local storage .

The message UI then receives at a user selection of a presentation icon for a particular message. The message UI presents at the selected message file by selecting and executing an embedded application appropriate for the message and format type of the message file. The selected embedded application may present the selected message file that is already stored to the local storage .

The user may continually select messages for presentation and steps to of the method may be repeated for every message the user selects for presentation. The message UI may also receive at and process user selections of other message functions.

As shown in the local storage may store all the current message files for the user the current message files comprising a plurality of messages of one or more different message types in one or more different format types. The local storage may store at least one current message file without receiving a user selection for presenting the current message. A message file may be stored to the local storage prior to receiving a user selection for presenting the message file. In some embodiments upon receiving a user selection for presenting a message file the message UI does not send to the message server a request for the message file and does not receive the message file from the message server . In these embodiments the response of the message UI to the user selection is performed without sending to the message server a request for the message file and without receiving the message file from the message server .

Since all current messages are already stored in the local storage any current message selected for presentation may be retrieved directly from the local storage without requiring separate retrieval from the message service system . As such the message UI may receive and store all current message files at one time while the receiving client device is connected to the message server and then present selected messages from local storage with the receiving client device no longer connected to the message server . This may be advantageous if the receiving client device will not have continual access to the Internet to access the message server for example if the user is boarding a plane or is in a location without Internet access. As such the message UI may operate independent of whether the client device is able to access the Internet.

As discussed above the message storage system received messages and message information for each message. is a conceptual diagram showing an exemplary message storage system in which some embodiments operate. In some embodiments the message storage system comprises at least one load balancer device at least one retrieval server and at least one file storage server that are interconnected by a computer network .

The file storage server may store message files of a plurality of different messages and message information for each message file. The file storage server may comprise a storage system adapted to store and retrieve information data on a plurality of storage devices such as disk devices solid state devices etc. . The file storage server may comprise a storage operating system that implements a file system to organize logically the information as a hierarchical structure of directories and files on the storage devices.

The load balancer may receive requests for the retrieval of message files from the message servers . The load balancer may be configured to receive and distribute message requests to the retrieval servers for processing. For example the load balancer may be configured to receive and route message requests in rotating sequence to the retrieval servers to evenly distribute message requests among the plurality of retrieval servers . Using the load balancer and the plurality of retrieval servers in this manner also provides retrieval server redundancy to avoid a single point of failure in the message storage system .

The message request from a message server comprises the filepath of the requested message file. The retrieval server receives the message request and retrieves the requested message file from the file storage server using the filepath. The retrieval server may do so by mapping the filepath to a physical address location on a storage device of the file storage server where the message file is stored. After retrieving the requested message file the retrieval server may send the message file to the message server .

In other embodiments however the message storage system comprises only the file storage server . In these embodiments the message server retrieves requested message files directly from the file storage server . In these embodiments the message server may map the filepath to the physical address location on a storage device of the file storage server where the message file is stored.

In the embodiments described herein a receiving client device may comprise any variety of devices capable of accessing messages. For example a receiving client device may comprise a computing device e.g. notebook computer desktop computer server computing tablet computing personal accessory etc. or a mobile computing device e.g. cellular phone E multimode phone F smartphone etc. shown in . The receiving client device may include the various computer hardware components illustrated in e.g. processor memory storage device of the computing devices or that are configured for implementing embodiments described herein. A receiving client device comprising a computing device or a mobile computing device may execute the web browser application and the Flash UI for accessing messages on the message service system through the connection system as described herein.

In addition a mobile computing device may access messages on the message service system using an appropriate native application e.g. an iOS application running on an iPad or iPhone from Apple Inc. an Android application running on an Android based smartphone an application running on a Blackberry etc. . In some situations a native application may be needed if the receiving client device does not support Flash programming instructions such as IPhone OS iOS devices using Apple s iPhone operating system. As known in the art such native applications as well as softphone applications do not use any markup language to define their user interfaces and may be compiled into binaries in a native format for the applicable device whereby the binaries define the user interface.

Also for a receiving client device comprising a mobile computing device the message service system will push send notifications of new messages to the receiving client device automatically when any new message is received. As such notifications of new messages are typically sent immediately to the receiving client device as soon as a new message is received without requiring the user to login or request notifications from the message service system .

The mobile device environment also includes a receiving client device connected with the message synchronization server and the Apple infrastructure through the connection system . In some embodiments the receiving client device comprises a mobile computing device . In other embodiments however the receiving client device may comprise a computer device executing a softphone application. As known in the art a softphone application may be used for making telephone calls over the Internet using a general purpose computer rather than using dedicated hardware.

In some embodiments the receiving client device receives messages and message information through the message synchronization server which retrieves messages and message information from the message server . In these embodiments the receiving client device connects and interacts directly with the message synchronization server . The APnP iPhone N Push server may send new message notifications for the receiving client device to the Apple infrastructure which sends the new message notifications to the receiving client device .

In some embodiments the receiving client device receives message information and message notifications from the message synchronization server in a non markup language such as comma delimited format. In some embodiments messages message information and message notifications are transmitted from the message synchronization server to the receiving client device using a non HyperText Transfer Protocol non HTTP such as a custom protocol.

As described above is a block diagram of computing devices that may be used to implement the systems and methods described herein. For example the computing device or may comprise the sending client device receiving client device program server load balancer message server account database message synchronization server devices of the message storage system such as the load balancer retrieval server file storage server an APNP iPhone N Push server Apple server APF or Apple infrastructure .

As described above the message server may send the receiving client device a homepage UI which is displayed on the receiving client device . shows an exemplary screen page of a homepage UI in accordance with some embodiments. The homepage UI may be formatted using a markup language e.g. HTML XML or a non markup language. The homepage UI does not display any message information. The homepage UI may display a plurality of selectable icons each icon for selecting and executing a particular UI having particular functions. In some embodiments the homepage UI comprises a message icon for selecting and executing the message UI and a settings icon for selecting and executing the settings UI.

If the homepage UI receives a user selection of the message icon on the homepage UI the receiving client device executes the message UI. show exemplary screen pages of a message UI in accordance with some embodiments. As shown in in some embodiments the receiving client device may display the message UI as a separate pop up window that overlays the homepage UI .

As shown in the message UI may display message information for all current messages in list form on an inbox page. For each current message the message information may include for example a size of the message e.g. time length of the message number of pages of the message identifier for the sending client device e.g. sender name and or phone number the message type etc. The message UI may also display a selectable presentation icon corresponding to each current message that may be selected for presenting e.g. viewing or playing back the current message.

The message UI may provide one or more embedded application UIs for one or more embedded applications. In some embodiments the message UI may provide a different embedded application UI for each embedded application. Each embedded application UI may comprise different features and selectable icons depending on the embedded application. In the example of the message UI provides an audio UI for an audio player the audio UI having for example a selectable playback and pause button forward and rewind controls mute and volume controls. In other embodiments however the message UI may provide fax text UI for a fax text viewer a video UI for a video player or a picture UI for a picture viewer.

In some embodiments an embedded application UI may be integrated in the same window as the message UI as shown in the example of . In these embodiments an embedded application UI is displayed in a same window that also displays the message information of one or more current messages. Within the window of the message UI the integrated embedded application UI may have a first appearance e.g. darker color when it is inactive not presenting a message file and have a second appearance e.g. lighter color when it is active and presenting a message file wherein the first and second appearances are different. Integrated embedded application UIs may be provided for commonly used embedded applications. For example since voice messages are commonly received an audio UI for an audio player may be always displayed in the same window as the message UI. In other embodiments the integrated embedded application UI is another type of UI other than an audio UI. By configuring an embedded application UI in this manner the message UI may present messages in a seamless and integrated manner.

In other embodiments an embedded application UI may be displayed in a separate window e.g. pop up window as the message UI when selected. A non integrated embedded application UIs may be provided for non commonly used embedded applications. For example since video messages are less commonly received a video UI for a video player may be displayed in a pop up window when a video message is selected for presentation. In other embodiments however the video UI for the video player may be integrated similar to the audio UI as described above and displayed in the same window as the message UI.

In addition to presenting messages the message UI may also provide other selectable icons for additional message functions. As shown in the example of the additional message functions may include message forwarding message delete marking a message as read or unread blocking sender downloading and saving message to local storage calling sender sending a fax adding a new contact etc. Upon receiving a user selection of a message function the message UI executes the message function in response. These additional message functions may also be provided by embedded applications configured for performing the additional message functions.

The homepage UI may receive a user selection of the settings icon. If so the receiving client device executes the settings UI. show exemplary screen pages of a settings UI in accordance with some embodiments. In some embodiments the receiving client device may display the settings UI as a separate pop up window that overlays the homepage UI .

The settings UI may be used by an administrator to access messages of other users through the message access system and to perform various administrative functions. The settings UI may provide message lists and message files of other users utilizing the devices and methods described herein. The administrator may select for presentation viewing or playback any message of any user if the administrator enters the password for the user.

Some embodiments may be conveniently implemented using a conventional general purpose or a specialized digital computer or microprocessor programmed according to the teachings herein as will be apparent to those skilled in the computer art. Some embodiments may be implemented by a general purpose computer programmed to perform method or process steps described herein. Such programming may produce a new machine or special purpose computer for performing particular method or process steps and functions described herein pursuant to instructions from program software. Appropriate software coding may be prepared by programmers based on the teachings herein as will be apparent to those skilled in the software art. Some embodiments may also be implemented by the preparation of application specific integrated circuits or by interconnecting an appropriate network of conventional component circuits as will be readily apparent to those skilled in the art. Those of skill in the art would understand that information may be represented using any of a variety of different technologies and techniques.

Some embodiments include a computer program product comprising a computer readable medium media having instructions stored thereon in and when executed e.g. by a processor perform methods techniques or embodiments described herein the computer readable medium comprising instructions for performing various steps of the methods techniques or embodiments described herein. The computer readable medium may comprise a non transitory computer readable medium. The computer readable medium may comprise a storage medium having instructions stored thereon in which may be used to control or cause a computer to perform any of the processes of an embodiment. The storage medium may include without limitation any type of disk including floppy disks mini disks MDs optical disks DVDs CD ROMs micro drives and magneto optical disks ROMs RAMs EPROMs EEPROMs DRAMs VRAMs flash memory devices including flash cards magnetic or optical cards nanosystems including molecular memory ICs RAID devices remote data storage archive warehousing or any other type of media or device suitable for storing instructions and or data thereon in.

Stored on any one of the computer readable medium media some embodiments include software instructions for controlling both the hardware of the general purpose or specialized computer or microprocessor and for enabling the computer or microprocessor to interact with a human user and or other mechanism using the results of an embodiment. Such software may include without limitation device drivers operating systems and user applications. Ultimately such computer readable media further includes software instructions for performing embodiments described herein. Included in the programming software of the general purpose specialized computer or microprocessor are software modules for implementing some embodiments.

Those of skill would further appreciate that the various illustrative logical blocks circuits modules algorithms techniques processes or method steps of embodiments described herein may be implemented as computer electronic hardware computer software or combinations of both. To illustrate this interchangeability of hardware and software various illustrative components blocks modules circuits and steps have been described herein generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the embodiments described herein.

The various illustrative logical blocks modules and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

The modules algorithm techniques processes or methods described in connection with embodiments disclosed herein may be embodied directly in computer hardware configured to perform the embodiments disclosed herein in software executed by a processor or in a combination of the two. In some embodiments any software application program tool module or layer described herein may comprise an engine comprising hardware software or a combination of the two configured to perform embodiments described herein. In general functions of a software application program tool module or layer described herein may be embodied directly in hardware or embodied as software executed by a processor or embodied as a combination of the two.

A software application layer or module may reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of storage medium known in the art. An exemplary storage medium is coupled to the processor such that the processor can read data from and write data to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an ASIC. The ASIC may reside in a user device. In the alternative the processor and the storage medium may reside as discrete components in a user device.

While the embodiments described herein have been described with reference to numerous specific details one of ordinary skill in the art will recognize that the embodiments can be embodied in other specific forms without departing from the spirit of the embodiments. Thus one of ordinary skill in the art would understand that the embodiments described herein are not to be limited by the foregoing illustrative details but rather are to be defined by the appended claims.

