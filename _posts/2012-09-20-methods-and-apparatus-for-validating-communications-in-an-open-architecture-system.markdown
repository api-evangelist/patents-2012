---

title: Methods and apparatus for validating communications in an open architecture system
abstract: A system, methods, and apparatus for validating communications in an open architecture system are disclosed. In an example embodiment, a method includes selecting transactional information to transmit from a server to a communicatively coupled client device based on a request from the client device, selecting presentation information corresponding to the transactional information to transmit from the server to the client device, transmitting at least one message including the presentation and transactional information from the server to the client device, determining a prediction as to how the client device will render the transactional information based on the presentation information, receiving a response message from the client, and responsive to information in the response message not matching the prediction, providing an indication there is a malicious application affecting communications between the server and the client device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09122870&OS=09122870&RS=09122870
owner: Sunstone Information Defense Inc.
number: 09122870
owner_city: Carmel
owner_country: US
publication_date: 20120920
---
The present application claims priority to and the benefit of the following provisional patent applications U.S. Provisional Patent Application Ser. No. 61 557 733 filed on Nov. 9 2011 and U.S. Provisional Patent Application Ser. No. 61 537 380 filed on Sep. 21 2011 the entirety of which are incorporated herein by reference.

Traditional communication systems address certain reliability and performance issues that arise during the transfer of information from a sender to a receiver through a medium. In an idealized situation no errors are introduced as the information travels through the medium. As a result the receiver obtains with 100 fidelity a message identical to the one transmitted into the medium by the sender.

In actual practice however the medium is not error free. Environmental factors typically contribute haphazard information in the medium. This haphazard information is commonly referred to as noise . This noise can result from for example shot noise neighboring radio frequencies undesirable voltage and or current fluctuations in circuit components signal reflections from trees buildings solar flares etc.

In information warfare there exists a related concept of signal jamming. The idea is to increase the contribution of the noise to such an extent that it becomes practically impossible to find a set of codewords that are simultaneously robust and efficient. This type of noise is not haphazard but rather specifically crafted to render a specific medium too noisy to use. The targets of this type of purposefully crafted noise are unable to communicate.

An important purpose of traditional communication systems are to characterize a noise source and to create a set of primary codewords that are robust against that noise type. The primary codewords are designed to be efficient for communication of a wide variety of often used messages. As provided by traditional communication systems the transmission of information through the Internet occurs over a variety of medium including cable wireless satellite etc. Currently traditional communication systems play a significant role in engineering and assuring the reliability and efficiency of those transmissions against a variety of haphazard noise sources.

Traditional communication systems have reduced the effects of haphazard noise in the communication medium as well at the sender and the receiver. For example the sender or the receiver can include circuitry to reduce or eliminate the effects of haphazard noise. Additionally routing devices in the medium the sender and the receiver can also use quality of service data integrity and or error correction functions to correct for haphazard noise. These functions can be associated with for example network cards and associated stacks as received packets are queued and recombined into a complete data stream.

In addition to haphazard noise there also exists engineered malicious noise specifically created to affect alter or otherwise interfere with communications between a sender and a receiver. This malicious noise is an injected signal that alters codewords sent between senders and receivers in a manner that is generally not correctable by existing error correction methods of traditional communication systems. The malicious noise created by malicious applications are directed to interfere with communications anywhere along a communication channel through the Internet from a sender to a receiver including routers switches repeaters firewalls etc.

The malicious applications are configured to identify codeword sets and provide malicious noise that effectively switches one valid codeword for a second valid codeword. Traditional error correction schemes cannot detect this switch because they have no way of identifying that an error has occurred. The resulting altered signal is a viewed as a valid codeword from the point of view of the traditional communication system. Other types of noise that commonly occur in information warfare are also deliberate and engineered e.g. signal jamming but the phenomena does not result in a useable codeword set.

Unlike environmentally derived haphazard noise this malicious noise does not consist of haphazard content nor does it disallow effective communication as a jamming signal might. Instead this noise is specifically crafted to substitute the originally transmitted message for a second specific legitimate and understandable message which is then presented to a receiver as authentic intent of the sender. The crafted noise may also occur before selected information leaves a sender e.g. a server database and or directory structure for transmission to a receiver. This crafted noise is referred to herein as malicious noise. The crafter of the malicious noise of referred to here in as a malicious application.

Using malicious noise viruses and other types of malicious applications are able to direct a client device e.g. a receiver to perform actions that a communicatively coupled server e.g. a sender did not originally intend. Additionally the viruses and malicious applications are able to direct a server to perform actions that communicatively coupled client devices did not originally intend. Conventional virus detection algorithms often fail to detect the malicious nature of the noise because these algorithms are configured to detect the presence of the noise s source rather than the noise itself. The noise generation algorithm e.g. the code of the malicious application is relatively easily disguised and able to assume a wide variety of formats. There is accordingly a need to validate communications between servers and client devices in the presence of malicious noise.

The present disclosure provides a new and innovative system methods and apparatus for validating communications in an open architecture system. A security processor uses variations of soft information to specify how hard information managed by a server is to be displayed on a communicatively coupled client device. The security processor creates a prediction as to how the client device will render the hard information based on the variation of the selected soft information. The security processor then compares information in a response from the client device to the prediction to determine if a malicious application has affected or otherwise altered communications between the server and the client device.

In an example embodiment a method for validating communications includes selecting hard information to transmit from a server to a communicatively coupled client device based on a request from the client device and selecting soft information corresponding to the hard information to transmit from the server to the client device. The example method also includes transmitting at least one message including the soft and hard information from the server to the client device and determining a prediction as to how the client device will render the hard information based on the soft information. The example method further includes receiving a response message from the client and responsive to information in the response message not matching the prediction providing an indication there is a malicious application affecting communications between the server and the client device.

Additional features and advantages of the disclosed system methods and apparatus are described in and will be apparent from the following Detailed Description and the Figures.

The present disclosure relates in general to a method apparatus and system to validate communications in an open architecture system and in particular to predicting responses of client device to identify malicious applications attempting to interfere with communications between servers and the client devices.

Briefly in an example embodiment a system is provided that detects malicious errors in a communication channel between a server and a client device. Normally communication errors between a server and a client device are a result of random channel noise. For instance communications received by server client endpoints fall outside of a set of prior selected recognizable messages or codewords. Channel errors are usually corrected by existing error correction schemes and internet protocols. The end user is typically unaware that a transmission error has occurred and has been corrected.

Malicious applications typically evade error correcting schemes in two ways first by altering an original message into an alternative message and second by creating noise in a segment of a channel where traditional error correction schemes do not operate. In the first way a malicious application alters an original message into an alternative message that is already in a codeword set of an error correction mechanism. The malicious application may also provide additional messages that are included within the codeword set. As a result an error correction algorithm is unaware that an error has even taken place and thereby makes no attempt to correct for the error.

In the second way a malicious application creates noise in a segment of a channel where traditional error correction schemes do not operate. For example once a packet successfully traverses the Internet and arrives at a network interface of a receiving device a bit stream of the packet is processed by an application stack under an assumption that no further transmission noise sources will occur. As a result the application stack does not anticipate errors to occur in the bit stream after processing and thereby makes no attempt to correct for any errors from this channel noise.

Malicious applications create targeted malicious noise configured to interfere with communications between a client device and a server. This channel noise is guided by a deliberate purpose of the malicious application to alter access or hijack data and or content that is being communicated across a client server connection. Oftentimes the noise alters communications from original and authentic information to substitute authentic appearing information. The noise is often induced in a segment of the extended channel that is poorly defended or entirely undefended by error correction algorithms. As a result a malicious application is able to use channel noise to direct a server and or a client device to perform actions that the client device or server did not originally intend.

In an example a client device may be connected to an application server configured to facilitate banking transactions. During a transaction the server requests the client device to provide authentication information e.g. a username and a password to access an account. A malicious application detects the connection and inserts malicious noise that causes the client device to display a security question in addition to the username and password prompts e.g. client baiting . A user of the client believing the server provided the security question enters the answer to the security question with the username and password. The malicious application monitors the response from the client device so as to use malicious noise to remove the answer to the security question before the response reaches the server. The malicious application may then use the newly acquired security question to later illegally access the account associated with the client device to improperly withdrawal funds.

In this example the server is unable to detect the presence of the malicious application because the server receives a proper response to the authentication namely the username and password. The client device also cannot detect the malicious application because the client device believes the server provided the security question. As a result the malicious application is able to use channel noise to acquire sensitive information from the client device without being detected by the server or the client.

This client baiting is not the only method used by malicious applications. In other examples malicious applications may use channel noise to add data transactions between a client device and a server e.g. add banking transactions . For instance a client device may specify three bill payment transactions and a malicious application may insert a fourth transaction. In further examples malicious applications may use channel noise to remove substitute or acquire data transmitted between a server and a client modify data flow between a server and a client inject graphics or advertisements into webpages add data fields to forms or impersonate a client device or a server.

The example method apparatus and system disclosed herein overcome at least some of these issues caused by malicious noise by detecting malicious applications through estimated predicted or anticipated responses from a client device. The example method apparatus and system disclosed herein detect malicious applications by varying soft information describing how hard information is to be displayed by a client device. During any client server connection a server provides hard information and soft information. The hard information includes data text and other information that is important for carrying out a transaction with a client. The soft information specifies how the hard information is to be rendered and displayed by the client device.

A server uses hard and soft messaging to transmit the hard and soft information to a client device. In some instances the soft and hard information can be combined into messages before transmission. In other examples the soft and hard information can be transmitted to a client device in separate messages. As used herein soft messaging refers to the transmission of soft information to a client device in separate or combined soft hard messages and hard messaging refers to the transmission of hard information to a client device in separate or combined soft hard messages.

The example method apparatus and system disclosed herein use variations in soft information to form a best guess e.g. a prediction or estimation as to how hard information is displayed by a client device. The example method apparatus and system disclosed herein then compare a response from the client device to the best guess. If the information included within the response does not match or is not close enough to the prediction the example method apparatus and system disclosed herein determine that a malicious application is affecting communications between a server and a client or alternatively provide an indication that a malicious application is affecting communications. As a result of this detection the example method apparatus and system disclosed herein implement fail safe procedures to reduce the effects of the malicious application.

The example method apparatus and system disclosed herein uses soft information and messaging as a signaling language to detect malicious applications. In other words the example method apparatus and system disclosed herein create an extended set of codewords for use with a user of a client device to validate that a malicious application is not interfering with communications. The created codeword set installs or uses soft messaging techniques including dynamically linked and or static libraries frameworks browser helper objects protocol filters etc. The goal of these soft messaging techniques is to perturb the created communication channel such that the soft information cannot be reverse engineered by the malicious application but is known by the client device and the server.

For instance shows diagrams comparing messaging without the example method apparatus and system disclosed herein and messaging using the example method apparatus and system disclosed herein. Diagram shows that in the absence of the example method apparatus and system disclosed herein a set of legitimate codewords denoted by circles is fixed. Malicious applications know how these codewords are fixed and use malicious noise denoted by the arrow to transform a first valid codeword into a second valid codeword. The transformation is undetected by a receiving client device and the sending server.

In contrast diagram shows that the example method apparatus and system disclosed herein uses variability in soft information and messaging extends the dimensionality of the codeword set. This variability is unknown by the malicious application. Thus an error occurs when the malicious noise combines with an intended codeword. As shown in diagram the resulting altered codeword denoted by an X does not match the set of anticipated recognized codewords which enables the malicious noise to be detected. The example method apparatus and system disclosed herein are accordingly able to use this soft information and messaging variability to detect malicious noise.

As used herein hard messaging and hard information is transactional text and or data displayed by a client device. The transactional text data pictures and or images that can be instructional informational functional etc. in nature. The hard information also includes textual options that are selectable by a client. Hard information is accordingly principal information of a transaction or service provided by a server and presented to a client by a client device.

The hard information includes any type of text and or data needed by a server to perform a transaction or service on behalf of a client. For instance hard information of a webpage of an account log in screen includes text providing instructions to a client as to the nature of the webpage text for a username field and text for a password field. After a client has logged into the account the hard information includes transaction numbers transaction dates transaction details an account balance and account identifying information. Hard information may be financial e.g. on line banking material e.g. flow control of raw material in manufacturing processes or related to data management e.g. encryption decryption addition to or removal from shared storage copying deletion etc. .

As used herein soft messaging and soft information is presentation information describing how hard information is to be displayed by a client device. Soft information pertains to the installation and or system usage of dynamically linked and or static libraries frameworks browser helper objects protocol filters javascript plug ins etc. that are used to display hard information without interrupting the communication of the hard portion of the message between a client device and a server. The soft portion of the message includes information based on a server s selection of protocol formatting positioning encoding presentation and style of a fully rendered version of hard information to be displayed at the client device endpoint. The soft information can also include preferences e.g. character sets language font size etc. of clients as to how hard information is to be displayed. The precise details of the manner or method in which the direct client device initiated response information returns to the server is also a soft component of the communication and may be varied or manipulated without detracting from an ability of the server and client device to conduct e business e banking etc.

The hard part of the message is constrained for example by business utility e.g. there must be a mechanism for a client device to enter intended account and transaction information and return it to the server while the soft part of the message has fewer constraints. For example the order in which a client device enters an account number and a transaction amount usually is not important to the overall transaction. To achieve the business purpose a server only has to receive both pieces of information.

In the client baiting example described above the example method apparatus and system disclosed herein cause the server to transmit to the client device in one or more soft messages code that causes the client device to return coordinates of a mouse click of a submit button. These soft messages are included with the other soft messages describing how the authentication information is to be displayed by the client. The server also determines a prediction as to what the coordinates should be based on knowing how the particular client device will render and display the information.

When the malicious application uses malicious noise to insert the security question the malicious application has to move the submit button lower on a webpage. Otherwise the security question would appear out of place on the webpage in relation to the username and password fields. When a user of the client device uses a mouse to select the submit button the client device transmits the coordinates of the mouse click to the server. The server compares the received coordinates with the coordinates of the prediction and determines that the difference is greater than a standard deviation threshold which indicates the presence of a malicious application. In response to detecting the malicious application the server can initiate fail safe procedures to remedy the situation including for example requiring the client device to create new authentication information or restricting access to the account associated with the client device.

As can be appreciated from this example the example method apparatus and system disclosed herein provide server client communication channel validation. By knowing how a client device is to display information the example method apparatus and system disclosed herein enable a server to identify remotely located malicious applications that mask their activities in hard to detect channel noise. As a result servers are able to safeguard client data and transactions from some of the hardest to detect forms of malicious third party methods to acquire information and credentials. This allows service providers that use the example method apparatus and system disclosed herein to provide security assurances to customers and other users of their systems.

Throughout the disclosure reference is made to malicious applications e.g. malware which can include any computer virus counterfeit hardware component unauthorized third party access computer worm Trojan horse rootkit spyware adware or any other malicious or unwanted software that interferes with communications between client devices and servers. Malicious applications can interfere with communications of a live session between a server and a client device by for example acquiring credentials from a client device or server using a client device to instruct the server to move resources e.g. money to a location associated with the malicious application injecting information into a form injecting information into a webpage capturing data displayed to a client manipulating data flow between a client device and a server or impersonating a client device using stolen credentials to acquire client device resources.

Additionally throughout the disclosure reference is made to client devices which can include any cellphone smartphone personal digital assistant PDA mobile device tablet computer computer laptop server processor console gaming system multimedia receiver or any other computing device. While this disclosure refers to connection between a single client device and a server the example method apparatus and system disclosed herein can be applied to multiple client devices connected to one or more servers.

Examples in this disclosure describe client devices and servers performing banking transactions. However the example method apparatus and system disclosed herein can be applied to any type of transaction or controlled usage of resources between a server and a client device including but not limited to online purchases of goods or services point of sale purchases of goods or services e.g. using Near Field Communication medical applications e.g. intravenous medication as dispensed by an infusion pump under the control of a computer at a nurses station or medication as delivered to a home address specified in a webpage manufacturing processes e.g. remote manufacturing monitoring and control infrastructure components e.g. monitoring and control of the flow of electricity oil or flow of information in data networks transmission of information with a social network or transmission of sensitive and confidential information.

The present system may be readily realized in a network communications system. A high level block diagram of an example network communications system is illustrated in . The illustrated system includes one or more client devices one or more application servers and one or more database servers connected to one or more databases . Each of these devices may communicate with each other via a connection to one or more communication channels in a network . The network can include for example the Internet or some other data network including but not limited to any suitable wide area network or local area network. It should be appreciated that any of the devices described herein may be directly connected to each other and or connected through the network . The network may also support wireless communication with wireless client devices .

The client devices access data services media content and any other type of information located on the servers and . The client devices may include any type of operating system and perform any function capable of being performed by a processor. For instance the client devices may access read and or write information corresponding to services hosted by the servers and .

Typically servers and process one or more of a plurality of files programs data structures databases and or web pages in one or more memories for use by the client devices and or other servers and . The application servers may provide services accessible to the client devices while the database servers provide a framework for the client devices to access data stored in the database . The servers and may be configured according to their particular operating system applications memory hardware etc. and may provide various options for managing the execution of the programs and applications as well as various administrative tasks. A server may interact via one or more networks with one or more other servers and which may be operated independently.

The example servers and provide data and services to the client devices . The servers and may be managed by one or more service providers which control the information and types of services offered. These services providers also determine qualifications as to which client devices are authorized to access the servers and . The servers and can provide for example banking services online retain services social media content multimedia services government services educational services etc.

Additionally the servers and may provide control to processes within a facility such as a process control system. In these instances the servers and provide the client devices access to read write or subscribe to data and information associated with specific processes. For example the application servers may provide information and control to the client devices for an oil refinery or a manufacturing plant. In this example a user of the client device can access an application server to view statuses of equipment within the plant or to set controls for the equipment within the plant.

While the servers and are shown as individual entities each server and may be partitioned or distributed within a network. For instance each server and may be implemented within a cloud computing network with different processes and data stored at different servers or processors. Additionally multiple servers or processors located at different geographic locations may be grouped together as server and . In this instance network routers determine which client device connects to which processor within the application server .

In the illustrated example of each of the servers and includes a security processor . The security processor monitors communications between the client devices and the respective servers and for suspicious activity. The monitoring may include detecting errors in a communication channel between a client device and a server using hard and soft messages as described herein.

In some embodiments the security processor may be configured to only detect channel errors that are of strategic importance. This is because malicious applications generally only target communications that convey high value information e.g. banking information . As a result using the security processor for important communications helps reduce processing so that the security processor does not validate communications that are relatively insignificant e.g. browsing a webpage . These important communications can include authentication information refinements to types of requested services or details on desired allocation of resources under a client s control. These resources may be financial e.g. on line banking material e.g. flow control of raw material in manufacturing processes or related to data management e.g. encryption decryption addition to or removal from shared storage copying deletion etc. .

In an example embodiment a client device requests to access data or servers hosted by a server . In response the server determines hard information that corresponds to the request and identifies soft information compatible with the hard information. In some instances the server may use device characteristics or information of the client device to select the soft messaging. Upon selecting the soft and hard messages the security processor selects how the messages are combined into transmission packets and instructs the server to transmit the packets to the client device . To make the packets undecipherable by malicious applications the security processor may combine hard and soft information rearrange the order of information transmission or mix different layers of information.

The unperturbed location of any input boxes or buttons selected by the security processor for soft messaging may vary subtly from session to session without being observable by a client device or a malicious application. For example the absolute and relative positioning of page elements may be obscured by the incorporation of operating system browser and bugz and further obscured by seemingly routine use of byte code and javascript. The security processor may also use redundant measures for determining rendered page geometry and activity so that information returned from the client device may be further verified. For instance benign pop up windows featuring yes no button messages such as would you have time to take our brief customer survey may be made to appear or not appear depending on actual cursor or mouse locations when a submit button is pressed at the client device . Additionally the security processor may use generic geometrical and content related soft variations absolute and relative locations of input boxes and buttons the appearance or lack of appearance of benign pop up boxes buttons advertisements or images to validate communications with a client device . In other words the security processor may use soft information provided by client devices to also validate a communication channel.

After selecting which soft and hard information to send to the client device the security processor makes a prediction in this example as to a location of a Submit icon on a fully rendered webpage displayed on client device . This icon is part of a banking website provided by application server . The security processor may also use backscattered information received from routing components in the network to form the prediction. This backscattered information provides for example how the soft and hard information in the transmitted message s are processed routed and rendered.

The security processor then monitors a response by the client device to identify coordinates of a mouse click of the Submit icon. The security processor determines that a malicious application is affecting communications if the prediction does not match the reported coordinates of the mouse clink on the icon. In response to detecting a malicious application the security processor attempts to prevent the malicious application from further affecting communications with the affected client devices . In some embodiments the security processor instructs the servers and to alter normal operation and enter into a safe operations mode. In other embodiments the security processor restricts activities of the affected client devices or requests the client devices to re authenticate or establish a more secure connection. The security processor may also store a record of the incident for processing and analysis. In further embodiments the security processor may transmit an alert and or an alarm to the affected client devices personnel associated with the servers and and or operators of the security processor .

While each server and is shown as including a security processor in other embodiments the security processor may be remotely located from the servers and e.g. the security processor may be cloud based . In these embodiments the security processor is communicatively coupled to the servers and and remotely monitors for suspicious activity of malicious applications. For instance the security processor may provide soft information to the servers and . The security processor may also receive client device response messages from the servers and . In instances when the security processor detects a malicious application the security processor remotely instructs the servers and how to remedy the situation.

A detailed block diagram of electrical systems of an example computing device e.g. a client device an application server or a database server is illustrated in . In this example the computing device includes a main unit which preferably includes one or more processors communicatively coupled by an address data bus to one or more memory devices other computer circuitry and one or more interface circuits . The processor may be any suitable processor such as a microprocessor from the INTEL PENTIUM or CORE family of microprocessors. The memory preferably includes volatile memory and non volatile memory. Preferably the memory stores a software program that interacts with the other devices in the system as described below. This program may be executed by the processor in any suitable manner. In an example embodiment memory may be part of a cloud such that cloud computing may be utilized by computing devices . The memory may also store digital data indicative of documents files programs web pages etc. retrieved from computing device and or loaded via an input device .

The example memory devices store software instructions webpages user interface features permissions protocols configurations and or preference information . The memory devices also may store network or system interface features permissions protocols configuration and or preference information for use by the computing devices . It will be appreciated that many other data fields and records may be stored in the memory device to facilitate implementation of the methods and apparatus disclosed herein. In addition it will be appreciated that any type of suitable data structure e.g. a flat file data structure a relational database a tree data structure etc. may be used to facilitate implementation of the methods and apparatus disclosed herein.

The interface circuit may be implemented using any suitable interface standard such as an Ethernet interface and or a Universal Serial Bus USB interface. One or more input devices may be connected to the interface circuit for entering data and commands into the main unit . For example the input device may be a keyboard mouse touch screen track pad track ball isopoint image sensor character recognition barcode scanner microphone and or a speech or voice recognition system.

One or more displays printers speakers and or other output devices may also be connected to the main unit via the interface circuit . The display may be a cathode ray tube CRTs a liquid crystal display LCD or any other type of display. The display generates visual displays generated during operation of the computing device . For example the display may provide a user interface and may display one or more webpages received from a computing device . A user interface may include prompts for human input from a user of a client device device including links buttons tabs checkboxes thumbnails text fields drop down boxes etc. and may provide various outputs in response to the user inputs such as text still images videos audio and animations.

One or more storage devices may also be connected to the main unit via the interface circuit . For example a hard drive CD drive DVD drive and or other storage devices may be connected to the main unit . The storage devices may store any type of data such as pricing data transaction data operations data inventory data commission data manufacturing data marketing data distribution data consumer data mapping data image data video data audio data tagging data historical access or usage data statistical data security data etc. which may be used by the computing device .

The computing device may also exchange data with other network devices via a connection to the network or a wireless transceiver connected to the network . Network devices may include one or more servers e.g. the application servers or the database servers which may be used to store certain types of data and particularly large volumes of data which may be stored in one or more data repository. A server may include any kind of data including databases programs files libraries pricing data transaction data operations data inventory data commission data manufacturing data marketing data distribution data consumer data mapping data configuration data index or tagging data historical access or usage data statistical data security data etc. A server may store and operate various applications relating to receiving transmitting processing and storing the large volumes of data. It should be appreciated that various configurations of one or more servers may be used to support and maintain the system . For example servers may be operated by various different entities including sellers retailers manufacturers distributors service providers marketers information services etc. Also certain data may be stored in a client device device which is also stored on a server either temporarily or permanently for example in memory or storage device . The network connection may be any type of network connection such as an Ethernet connection digital subscriber line DSL telephone line coaxial cable wireless connection etc.

Access to a computing device can be controlled by appropriate security software or security measures. An individual users access can be defined by the computing device and limited to certain data and or actions. Accordingly users of the system may be required to register with one or more computing devices .

In the communication channel information transmitted by the server e.g. soft hard information included within soft hard messages is acted upon processed forwarded and rendered by the various intervening hardware and software channel components. The processing is performed by hardware and software components residing on both network and client device endpoints. The client device is the ultimate recipient of the fully realized completely processed version of the information transmitted by the server . The client device is stimulated by the received processed information into prompting a user for decision s and or performing one or more actions. Once a user inputs a decision the client device communicates a response message to the server through the channel .

While shows one communication channel other communication channels can include different components and corresponding behavioral characteristics that vary from one server client device connection to another. The behavioral characteristics identify ways in which information is acted upon processed forwarded and rendered by the hardware and software components of the channel . The security processor uses these behavioral characteristics to help form a prediction of a response from the client device .

Once a server client device connection is established across a channel and the primary intended function of that communication is initiated e.g. the type of transaction that is to occur across the channel secondary characteristics and observables are generated in the channel as a consequence. There are two types of secondary characteristics and observables global involving many or all channel components and local involving a single pair or triple of channel components .

The global channel s temporal secondary characteristics are applied across many or all hardware software components and layers in for example the network and include i number and size of discrete transmissions ii density of discrete transmissions iii frequency and other spectral content e.g. content obtained by discrete Fourier transform wavelet transform etc. of an observed time series and iv geo spatial density. These characteristics are derived from observables e.g. from observation of information flow between client device and server that include for example i delivery times ii delivery rates iii transmission requests as reports on errors or inefficiencies and iv sequencing or permutations in an order of information processing events. These observables are dependent on a number of factors including for example hardware type software type and current state e.g. traffic load internal queue lengths etc. of components that comprise the channel .

 Local observables may also be generated on a per client device basis or per layer basis in the channel of by server and or client device initiated stimuli. The variations between client devices or layers are a result of a client s or layer s internal device specific information processing prioritization rulesets protocols inter component signaling rulesets and or protocols that use hardware or software based signaling components. The local observables may indicate for example a browser type used by the client device an operating system of the client device or device coding schemes used by the client device .

In the example embodiment of the security processor structures the hard and soft messaging output by the server so that the secondary characteristics and observables function as a secondary means of communication between the client device and server . At the same time the security processor structures the hard and soft messaging output by the server in a manner consistent with the original purpose of the connection with the client device . As a result the secondary means of communication between the server and the client device over the channel is configured to not interfere with the primary intended function of the server client device interaction. As a result the security processor uses the channel to vary soft information without changing the nature of the intended transaction between the server and the client device .

In the channel is constructed for universal use e.g. an open architecture channel . That is the component and collections of component technologies of the channel are designed to enable a rich variety of server types client device types and purposeful communications between the different server and client device types. This enables the security processor to use a variety of different soft messaging methods to achieve the original intended purpose of the server client transaction. However each soft messaging method sets into motion a different set of global and local channel characteristic signals and observables. The security processor is accordingly able to establish a secondary communication language between the server and the client device across the channel using the association between variations in soft messaging methods global local and corresponding channel characteristic responses.

The communication session of also includes malicious applications which are configured to interfere with client server communications while allowing the primary intended function of the server client device interaction to occur. However in accomplishing and creating this perturbation of the primary intended communication between the server and the client device the malicious applications effectively become an additional component of the channel thereby unknowingly affecting the secondary communications. As shown in the malicious applications can insert information into the channel and or extract information from the channel using engineered channel noise. The example security processor detects these malicious applications by monitoring how generated malicious channel noise impacts the consistently crafted client server secondary communications.

The a priori knowledge of the information transmitted by the server the information and stimuli actually sent into the channel to the client device together with the global and local backscatter information from the components and layers of the channel permit the server or a trusted proxy to form a prediction as to the condition of the final post processing fully rendered version of the information displayed by the client device . Additionally direct client device initiated response messages to the server e.g. mouse clicks or user supplied account information constitute a means for the security processor to determine a prediction as to the fully rendered version of the information displayed by the client device . The information in the response from the client device can be entered by a user using a mouse keyboard touchscreen an infrared ID tag scanner etc. For example information of a returned mouse click informs the security processor that a selectable box was 1 rendered 2 selected and 3 the click was preformed at x y pixel coordinates.

The security processor determines discrepancies between the prediction and the direct client device initiated responses of the fully rendered information to detect and identify errors e.g. malicious applications in the channel . The detection and identification of channel error causes the security processor to alter normal operations of the server . In some embodiments the security processor may cause the server to enter a safe operations mode restrict authorized client device activities and or generate an alert and and or alarm.

As discussed above the security processor can use different types and variations of soft messaging and information to help identify malicious applications. This variation helps prevent malicious applications from reverse engineering the soft messaging and circumventing the approaches described herein. As described below the variation can include changes to font size changes to web page arrangement of hard information and graphics addition of characters to user inputs changes to function definitions requests for user prompts through banners and pop up windows or implementations of bugz. The variation can also include changing an order in which hard and soft information is sent from a server or a client device .

The order in which information arrives at a server or client device is not relevant for business purposes. The inclusion of additional information for example the pixel location of a mouse click cursor or scroll bar e.g. soft information in addition to account information e.g. hard information does not affect the business purpose. The method of encoding information and within reasonable bounds the amount of time information spent in transmission of channel have a generally neutral impact on business purposes. Soft choices consistent with the hard business purpose exist at many layers of the channel ranging from the choice s of physical method s used transmission encoding method s used on the physical layer s to aesthetic details of information presentation and user interactions with a presented webpage. The choice of soft messaging by the server or its trusted proxy corresponding to given hard information is a many to one mapping. In a similar way the local specialized function and contribution of each network and client device specific hardware and software channel component is decomposable into hard and soft elements consistent with achieving the overall global intent of the interaction of the server with the client device .

The security processor accordingly maintains hard functionality of the server client device connection e.g. the session while varying the soft information. Soft information variations are recorded a priori by the security processor or the server or its trusted proxy in a data structure to create a large set of composite hard and soft messages to be transmitted together. In other embodiments the server may transmit the hard messages separate from the soft messages. The soft variations are constrained by the fact the final presentation at the client device must be intelligible not garbled. Further the soft variations must be of sufficient complexity that the malicious applications are faced with a time consuming reverse engineering problem in deciphering the accumulated impact of the soft message changes throughout the channel .

As mentioned above the security processor may use implementations of bugz in soft information variation. Bugz are anomalous device software protocol and or physical communication medium specific interpretations of input instructions that produce consistent although unexpected output. Bugz are inherent in many components of the channel and are generally undetectable by malicious applications without significant processing and analysis. The use of bugz helps enhance the complexity of soft messaging by enabling the security processor to craft soft information so that the soft degrees of freedom within and between hardware and software based components of the channel are combined in a multiplicative fashion. While four examples of bugz are described below the security processor can implement any type of bugz in soft messaging.

One type of bugz is based on different operating systems of client devices processing the same incoming packet streams differently. As a result of this bugz the security processor can create soft messaging packet streams indented to induce certain known behaviors in an operating system to display hard information. Another type of bugz is based on different operating systems of client devices interpreting the same portion of Extensible Markup Language xml code differently. Prior to initializing its service to a client device a server or security processor selects from a variety of ways that a portion of xml code may be written and select from a variety of ways to order time delay and geographically position the way the packets containing that code are transmitted into the channel .

Yet another type of bugz is based on HyperText Markup Language html code and cascading style sheet instructions that can be written and combined in contrasting and confusing fashion by a server or the security processor . The server can also use different layers of the style sheet in opposition of each other. For example the security processor could instruct a server to randomize which portions of a webpage are sent in style sheet instructions at sequential times. As a result a malicious application is unable to easily determine which style sheet instruction corresponds to which portion of the webpage.

A further type of bugz is based on code libraries that are internally re arranged by the security processor so that functions that use the code libraries on client devices are contrasted with expected performance in accord with the usage conventions of the standard library. For example the security processor can use this type of bugz to swap the definitions of the add and multiply functions. As a result of this swap the client device performs the intended function while a malicious application incorrectly determines that a different function is being performed. As a result the security processor can determine if a malicious application attempts to change a result of the function or transaction.

Often the ultimate resolution of the purposefully mis engineered spaghetti code applied by the security processor in soft messaging depends on a browser type and version at the client device . Java script and bytecode for example may be similarly obfuscated by the security processor without negatively detracting from run time performance or the ability of the server and client device to conduct business. These effects of the examples described above may be enhanced by incorporating operating system and browser bugz into the instructions. The result of this incorporation is a soft formatting and presentation style at a client device endpoint that makes it difficult for malicious applications to predict and or automatically interpret the soft information. This makes the soft information difficult for the malicious applications to alter replace or counterfeit in real time. Although this encoding is difficult to interpret in real time it may be easily tested experimentally a priori by a server or its trusted proxy . It is this a priori knowledge of the unperturbed and fully implemented rendering of the instruction set at the client device that forms the basis of the prediction determination made by the security processor of the formatting at the client device endpoint. The example security processor creates the variation among the soft messages to increase the differences between the prediction and direct versions of the fully rendered information displayed by the client device .

In the server intends to communicate a deliberate per determined datagram to client device . Here the datagram is a webpage that prompts a user to provide a username and password. The pre determined datagram is represented as a binary form for transmission purposes shown in as the number 0 in data transmission . The final fully rendered intended client device intelligible and or useable form of the data transmission is known to the server or its proxy at and or before the time of the data transmission to the client device .

The pre determined intended data transmission progresses through and or is processed by the various hardware and or software based components layers and protocols of channel . The sequence of 0 s represents the original intent of the server and is represented in as a sequence of 0 s progressing through a sequence of rectangles in the direction of the dashed horizontal arrows . The upper arrow represents the sequence of processing events experienced by the hard portion of the data and the lower arrow represents the sequence of processing events experienced by the soft data. The soft and hard data transmission paths may or may not be the same and may or may not entail identical processing events.

As transmitted data progresses through and or is processed by the channel with the original intent of the server intact secondary information generated by the routing and processing of the data is scattered back through the channel to the server . The secondary information can include for example an operating system of the client device a browser type used by the client device a cascading style sheet type used to display the soft hard information java script information byte code data etc. In other instances the secondary information may be reported by the client device as device information after initiating the communication session with the server . The secondary information is generated for example from Transmission Control Protocol Internet Protocol TCP IP negotiation Hypertext Transfer Protocol HTTP requests and conformations and or rendering information. In other examples the secondary information can be generated through other channel backscattering routing and or processing.

During transmission of the data to the client device the malicious application creates channel noise which alters the data . The channel noise causes an intelligent modification of the data to be realized at the client device instead of the original pre determined datagram . This alteration is represented in as the number 1 and may incorporate hard and or soft information.

The client device receives the final fully rendered client device intelligible form of the data as altered by the malicious application and displays this data as datagram . Here the channel noise adds a security question to the webpage and moves the location of a submit button to accommodate the security question. As a result of this channel noise the server believes the client device is viewing datagram when in fact the client device is viewing altered datagram . Further a user of the client device has no reason to be suspicious of the datagram because the maliciously inserted security question appears to coincide with the remainder of the datagram .

When the client device returns a response message to the server the malicious application detects the response and uses channel noise to remove the answer to the security question. This is represented by transition of the data from 1 to 0 before the data reaches the server . As a result the server receives a response from the client device that only includes the username and password. The server never received an indication that the client device provided a response to a security question and accordingly never detects the presence of the malicious application . The malicious application remains hidden to carry out further stealthy compromises of account security.

During the communication session the propagations of the soft and hard information through channel cause secondary information to be generated. The secondary information is scattered back to the server and the security processor . The security processor uses the secondary information in conjunction with the soft information to form a datagram of the prediction. shows an enlarged image of the datagram including the request for the username and password. The server uses the datagram to predict how the client device will process render and display datagram . In other embodiments the security processor stores the secondary information in conjunction with the soft information in a data structure rather then rendering datagram .

Similar to the malicious application uses channel noise to alter the soft and or hard data which is shown in as the number 1. As before the alternation includes the addition of a security question and the movement of the submit button. The client device then receives processes renders and displays the altered data.

A rendered datagram as displayed by the client device is displayed in . This datagram shows a security question prompt below the prompts for the username and the password. In addition the submit button and corresponding text have been lowered in the datagram to make room for the security question. As a result the security question appears to be genuine to a user of the client device .

After displaying the datagram the client device transmits a response which also includes hard and soft information. Similar to the malicious application uses channel noise to remove the response to the security question which is shown in in the transition of the hard information from 1 to 0. However while the malicious application removed the hard information the malicious application is not concerned with the mouse click information and accordingly does not alter the soft information .

In the server and the security processor receive the response from the client device including the hard and soft information . The security processor compares the soft information to the prediction and is able to determine that the communication session has been compromised. In other words the security processor detects the malicious application by determining that the coordinates of the mouse click on the submit button do not match the coordinates of the submit button made during the prediction.

As shown in the geometry of the datagram is altered in particular the position of the submit button as a result of the space needed to reformat the page and accommodate the additional bogus security question. In addition to the location of the data fields the datagram includes soft information such as a position of a mouse click associated with the submit button. In this example the server requests that the client device report the mouse click as soft information for example by relying on a hidden in the clear communication protocol. In some examples the server or security processor may embed the authentication form in a trendy image so that the relative coordinates of the mouse clicks are returned as a matter of routine and not detected by the malicious application.

In this authentication page example by comparing the prediction position of the submit button with the directly reported position the security processor detects whether an error has occurred during communication session . Here the security processor detects that the datagram does not align with the datagram and accordingly determines that the malicious application is affecting communications.

In some embodiments the security processor may determine an allowable deviation or threshold for datagram . Thus as long as for example the submit button is located within the allowable deviation the security processor determines that communications are not being affected by malicious applications. The security processor may determine what an allowable deviation is for the datagram based on for example secondary information characteristics of the client device or history information of how the datagram has been displayed by other client devices.

As disclosed the security processor uses different types and variations of soft information and soft messaging to validate communication channels between servers and client devices . The types of soft information and messaging can include changes to font size changes to web page arrangement of hard information and graphics addition of characters to user inputs changes to function definitions requests for user prompts through banners and pop up windows or implementations of bugz. The following sections describe how the security processor uses different types of soft information and messaging.

For example in the datagram the security processor is subject to a ruleset based on the hard information that is required to be transmitted e.g. the prompt for a username and password . Here the security processor selects soft information or message variation such that for the fully processed and rendered information presented to the client device is structured so that the username transaction field is to be rendered by a client device in a font size of the first password field is to be rendered in a font size of and the second password field is to be rendered in a font size of . In other examples the security processor may also vary a font type font color font weight or any other text variation allowable for the corresponding hard information.

The variation among the font sizes is used by the security processor to form a prediction. For instance the name provided by the client device is to be in point font while the first password is to be in point font. If a malicious application uses channel noise to alter the username or password responses or add a second transaction the security processor is able to detect the modification by the malicious application if the returned font size does not match the prediction. If the malicious application is more sophisticated and processes the soft information returned from the client device to determine the font size the extra time spent processing the information provides an indication to the security processor that a malicious application is affecting communications. As a result the soft messaging makes it relatively difficult for a malicious application to go undetected by the security processor .

In another embodiment the code section may include code that instructs a client device to programmatically generate keystrokes based on keystrokes provided by a user. The security processor uses the algorithm for the programmatically generated keystrokes to form a prediction. The security processor transmits the algorithm for the programmatically generated keystrokes through xml code java code etc. The security processor may also use the programmatically generated keystrokes in Document Object Models DOMs of hidden form fields.

Upon receiving the code the client device applies the algorithm to the specified data fields. For example one algorithm may specify that the letter e is to be applied after a user types the letter b and the number 4 is applied after a user types the number 1. When the user submits the entered text the client device transmits the user provided text combined with the programmatically generated keystrokes in a response message. For instance in the result section of the client device may add keystrokes to the user provided username or password.

A malicious application that uses channel noise may attempt to alter text inject text or additional data fields into the response from the client device . However the security processor is able to identify which text was affected by the malicious application based upon which of the received text does not match the algorithm based keystroke prediction. As a result the security processor is able to detect the malicious application.

In a further embodiment the code section may include code that changes a library definition of one or more functions. For example the code section could specify that a function named add is to perform division and that a function named subtract is to perform addition. The security processor uses the library definitions to form a prediction of a response from a client device . The security processor transmits the library definition through for example xml code java code etc.

Upon receiving the code the client device applies the changed library definitions to the specified data fields in for example the result section of . In one instance the client device may prompt a user to enter a result of a mathematical equation as part of an authentication process or when entering a number of related transactions. A malicious application attempting to alter the authentication or inject additional transactions examines the response from the client device . The malicious application only sees at most the name of the function performed not the definition of the function. As a result the malicious application alters the data or applies transactions consistent with the name of the function. However the security processor is able to detect the malicious application because the received altered response would not be consistent with the functional definitions stored to the prediction.

Generally malicious applications use un rendered machine readable source code to perform functions instead of the rendered version of the code. The reason is that rendering the code takes additional time and resources that may expose the malicious application. In the example shown soft information applied to the source code by the security processor enables the introduction of title and tag variations redundancies substitutions embedded requests for data downloads from arbitrary locations logical obfuscations piecewise delivery of a final edition of machine readable source code transformations of the machine readable source code based on features of previous or currently rendered pages transformations of the machine readable source code based on intended client interactions with previous or currently rendered pages etc. in the machine source code version of the page.

The soft modifications applied by the security processor to the machine readable source code produce a consistent useable non varied rendered page to the intended user while producing a different varied page to the malicious application. In this manner the intended user interacts freely with the rendered page while the attempts of the malicious application to interact with the un rendered machine readable source results in a failure to interact with the source code. The un rendered information may also cause the malicious application to experience excessively long task completion times.

Any modifications or alterations performed by a malicious application result in the activation of placeholder source page elements which are processed and returned to the security processor as indications that the returned information is based on an edition of the machine source code that was not the final edition intended for the end user. Additionally the security processor is able to detect that a malicious application altered a response from the client device when the received information includes data with geographic locations or bogus data fields that correspond to the soft information of the un rendered information . For instance the security processor detects a malicious application if the response from the client device includes a payee after the Online Poker payee.

In addition to using data fields of un rendered information the security processor can also use behind the scenes un rendered machine readable source code used to generate communications. The security processor may also use decision process interfaces for the intended client device in technologies where the communications occur via physical medium and protocols other than HTTP traffic traveling through the network . Some of these communication examples include Short Message Service SMS messaging manufacturing control process signals and protocols e.g. Foundation Fieldbus Profibus or Hart Communication Protocol and or infrared or Bluetooth based communications. The soft messaging techniques may be used by the security processor when the delivery mechanism is not Internet HTTP based as a way to differentiate between end user presentation end user interface level and the machine source level of response and or interaction with delivered content or information.

In instances when a malicious application uses the interactions and or input of a legitimate user via a client device as a means to guide itself through the logical flow of the obfuscated machine readable source code the security processor may use soft information that includes the creation of additional user input events by the system. Examples of these user input events can include but are not limited to keyboard events user focus events mouse clicks mouse rollovers cursor movements etc. The specific details of the soft information or messaging generated user events are known prior to the security processor as the prediction and may be later removed by server or the security processor to recover the legitimate client device and or end users intent.

Additionally in instances when a malicious application exports machine readable source code to be rendered for processing and or navigation by a substitute recipient the security processor can use soft messaging variations among an operating system a layout engine a browser Cascading Style Sheets CSS java script bugz and or peculiarities acting individually or in combination so that the exported source code compiles and or renders differently for the substitute client than it does for the originally intended end user. The just in time nature of the delivery of the final edition of the machine readable source code to the intended client device also differentiates between page versions content versions compiled and or rendered at the communicating client device . The communicating client device may be the original intended client or a substitute of the malicious application. The substitute client device may be a computer program and or technology that replicates the intended end user s powers of observation recognition and or understanding.

To prevent such fraud the security processor uses graphical elements as soft information to verify the data transmitted by the client . The use of graphical elements enables the security processor to validate channel communications when a client device is the originator of hard and soft information. In other words the security processor uses graphical elements to confirm communications with the client device when the security processor may not be able to form a prediction because the client device is the originator soft and or hard information. The graphical elements may be presented to the user of the client device as for example a banner background image part of an advertisement or a video. In some examples the security processor can use variations in graphical elements as soft information in conjunction with other soft messaging techniques discussed above.

In the illustrated example of the security processor transmits the graphical element to the client device . The security processor embeds the balance information as code included within the graphic which helps prevent the malicious application from detecting and using channel noise to alter the balance to the amount provided originally by the client device . The client device accordingly displays the graphical element including the balance received by the server . The user can then compare the balances and provide feedback that the balances do not match by for instance selecting the graphical element . In response the security processor instructs the server to disregard the datagram .

In an alternative embodiment the security processor enables the client device to supply comparison information. For example a submit these transactions button may be presented by the client device as an active account balance indexed grid. A user of the device is expected to activate that portion of the button corresponding to the traditionally displayed account balance. As in the previous examples the details of this button may be session dependent.

In another example the client device may be enabled by the security processor to send a screen capture of the account information in the datagram to the server for automated comparison by the security processor . The background and other features of the screen capture may be session dependent to prevent counterfeiting. For example the security processor may specify in soft messaging whether the client device is to create and forward a snapshot of the top of an account balance or the lower of the account balance and or a blank image followed by the account balance.

Oftentimes many smartphones and tablet computers can display information based on how the device is orientated. However the orientation of the device is generally not reported back to a server through backscattered secondary information. As a result the server does not know the orientation of the device when the hard information is displayed. To compensate for this lack of information the security processor creates two different predictions. In some embodiments the security processor may generate by default multiple predictions regardless of a type of client device to account for different screen sizes orientations etc. In other embodiments the security processor may generate a second prediction only after receiving backscatter information that indicates the client device corresponds to a type of device that can have more than one orientation.

In the illustrated example of the security processor creates a first prediction as to how the hard information e.g. username password and submit button is displayed based on the received soft information. The security processor determines that coordinates of the features displayed by client device have to fit within the vertical orientation of the client device . Similarly the security processor creates a second prediction as to how the hard information will be displayed within the horizontal orientation . The differences between the orientations can include spacing between data fields sizes of the data fields location of the submit button and a location of the trademark.

The security processor then compares a response from the client device to each of the predictions to determine if a malicious application is affecting communications.

The example security processor uses the information in data structure to determine if a response from a client device is indicative of a malicious application affecting communications. The security processor creates the data structure by storing soft information used in soft messaging by a server . The security processor supplements the data structure with secondary information received as backscatter information. As mentioned before the soft information describes how hard information is displayed or presented while the secondary information provides indications how the soft and hard information are to be displayed on a client device .

In the illustrative example of the soft information includes font type font size and positioning of three text fields. The soft information also includes coordinates of a submit button including an allowable deviation or predetermined threshold. The soft information further includes programmed text to be generated automatically in the text fields and a location of a banner graphical element. In addition the soft information includes un rendered text at specified coordinates.

Also in the data structure of the secondary information includes a browser type and operating system of the client device . The secondary information also includes an indication that java script is enabled. The security processor uses the secondary information to modify the soft information as needed. For example upon receiving an indication that a client device is using an OPPS browser the security processor updates coordinates of the text fields and submit button to reflect how the OPPS browser is known to format and render text and graphics. In this manner the secondary information is used by the security processor to refine or alter the initial prediction made when the soft information was initially transmitted to the client device .

The example procedure operates on for example the client device of . The procedure begins when the client device transmits a connection request to a server block . The connection request can include a website address or IP address that is routed by the network to the appropriate server . The connection request can also include device information identifying secondary characteristics or information associated with the client device .

After receiving a connection response the client device requests to engage in a data transaction with the server block . The request can include a specification of information that the client device desires to read or write to information stored in a database or managed by the server . The request can also include one or more transactions that the client device desires to complete with the server .

Some time after transmitting the request the client device receives hard and soft information corresponding to the requested transaction block . The hard and soft information can be received in separate messages or combined together in one or more messages. The client device uses the soft information to determine how the hard information is to be rendered and displayed block . After displaying the hard information the client device transmits a response message provided by a user block . At this point the example procedure ends when the client device and server stop exchanging communications e.g. terminate a communication session . Additionally in some embodiments the client device may receive an indication from the server that a malicious application has affected at least the information in the response message . As a result the client device could re authenticate communications with the server or enter a failsafe mode.

The example procedure of operates on for example the application server of . The procedure begins when the server receives a connection request from a client device block . In instances that the connection request includes device information the server transmits the device information to a communicatively coupled security processor . The server then transmits a connection response to the client device thereby initiating a communication session block .

Some time later the server receives from the client device a request to process a data transaction block . The server then determines hard information associated with the requested data transaction block . For example a request to access an account causes the server to identify account log in information. In another example a request to perform a banking transaction cases the server to identify account information and available banking options for the account. The server then transmits the determined hard information to a security processor . In some embodiments the security processor may be instantiated within the server . In other embodiments the security processor may be remote from the server .

Responsive to receiving hard and soft information from the security processor the server formats and transmits the information to the client device block . In some embodiments the server receives messages with combined hard and soft information. In these embodiments the server formats the messages e.g. structures the messages into data packets for transmission. In other embodiments the server receives the hard and soft information. In these other embodiments the server combines the hard and soft information into one or more messages and formats these messages for transmission. The server accordingly provides the client device with hard and soft messaging.

After transmitting the hard and soft information the server of receives backscattered information from channel components used to process route and render the information block . The server transmits this backscattered information to the security processor . In some instances the server transmits the information as the information is received. In other instances the server transmits the information periodically or after receiving an indication that the soft and hard information has been received and processed by the client device .

The server then receives the response message from the client device including information responding to the hard information block . The server subsequently transmits the response message to the security processor . After the security processor has compared information in the response message to a prediction the server determines whether the communication session with the client device has been validated block . If the security processor does not provide an indication of a malicious application the server determines the communication session with the client device is validated. The server continues communications with the client device and continues to validate communications until the communication session is ended.

However responsive to the security processor providing an indication of a malicious application the server enters a failsafe mode block . The failsafe mode can include the server informing the client device of the malicious application requesting that the client device re authenticate restricting access to the data transactions associated with the client device transmitting an alarm or alert to appropriate personnel and or applying a routine or algorithm to remove or restrict further attempts by the malicious application to affect communications. Regardless of which failsafe operation is performed the example procedure ends when the communication session with the client device is terminated or when the effects of the malicious application have been remedied.

Returning to the example procedure operates on for example the security processor of . The procedure begins when the security processor receives device information from the server block . This step can be skipped in instances where a connection request does not include device information. The security processor then receives hard information from the server and identifies compatible soft information block . For instance hard information has a limited number of ways that it can be correctly displayed. The security processor uses this relationship to identify which soft information is compatible with the hard information.

After identifying the compatible soft information the security processor selects a variation of the soft information block . The security processor may select a different variation of soft information for each client device server connection. As described before this variation prevents malicious applications from reverse engineering the soft messaging used to validate communications. The security processor then combines the hard information and the selected soft information into one or more messages and transmits combined information to the server which then transmits the information to the client device block . The security processor also forms a prediction as to how the client device will render and display the hard information based on the soft information block .

In the security processor receives the backscattered information from the server and determines corresponding secondary information or characteristics block . The security processor then updates or modifies the prediction based on the secondary information block . Responsive to receiving the response message from the client device the security processor compares the information in the response to the prediction block . The comparison includes determining if soft information returned by the client device matches or is within an allowable deviation to corresponding soft information in the prediction e.g. matching coordinates of graphics or data fields matching programmatically entered characters or matching font information block .

Responsive to determining the information in the response matches the prediction the security processor validates the communication session between the server and the client device block . The security processor then continues to validate the communication session for additional communications between the server and the client device until the communication session is ended. Responsive to determining the information in the response deviates from the prediction the security processor provides an indication of a malicious application block . The security processor may also remedy the effects of the malicious application or take steps to prevent the malicious application from affecting further communications between the client device and the server . The security processor then continues to validate the communication session for additional communications between the server and the client device until the communication session is ended.

It will be appreciated that all of the disclosed methods and procedures described herein can be implemented using one or more computer programs or components.

These components may be provided as a series of computer instructions on any conventional computer readable medium including RAM ROM flash memory magnetic or optical disks optical memory or other storage media. The instructions may be configured to be executed by a processor which when executing the series of computer instructions performs or facilitates the performance of all or part of the disclosed methods and procedures.

It should be understood that various changes and modifications to the example embodiments described herein will be apparent to those skilled in the art. Such changes and modifications can be made without departing from the spirit and scope of the present subject matter and without diminishing its intended advantages. It is therefore intended that such changes and modifications be covered by the appended claims.

