---

title: Graphics processing unit and management method thereof
abstract: A graphics processing unit (GPU) and a management method of the GPU are provided. The GPU includes at least one graphics engine and an engine manager. The graphics engine performs a video decoding function or a graphics rendering function according to a graphics command from a driver software. The engine manager records a workload index of each graphics engine. The engine manager also adjusts the work ability of one of or more of the at least one graphics engine according to an adjustment command from the driver software. The driver software provides the adjustment command according to the workload index.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09147225&OS=09147225&RS=09147225
owner: VIA Technologies, Inc.
number: 09147225
owner_city: New Taipei
owner_country: TW
publication_date: 20121004
---
This application claims the priority benefit of Taiwan application Ser. No. 101120156 filed on Jun. 5 2012. The entirety of the above mentioned patent application is hereby incorporated by reference herein and made a part of this specification.

The invention relates to a graphics processing unit GPU and more particularly to a management method of a GPU.

Most of electronic devices widely used today such as smart phone personal digital assistant PDA tablet computer notebook computer or desktop personal computer are provided with power saving management function. In order to reduce power consumption or to reduce waste heat these electronic devices are capable of performing power saving management to important elements such as processor co processor and chipset. There are currently several power saving management techniques based on a hardware mechanism such as dynamical voltage frequency scaling DVFS and clock gating. Since these power saving management techniques are based on a hardware mechanism they are less flexible.

The invention provides a graphics processing unit GPU and a management method thereof whereby hardware mechanism and software policy of power saving management are separated and flexible power saving management to the GPU is performed according a workload of the GPU.

The invention proposes a graphics processing unit GPU comprising at least one graphics engine and an engine manager. The graphics engine performs a video decoding function or a graphics rendering function according to a graphics command from a driver software. The engine manager is coupled to each of the graphics engines records a workload index of each of the graphics engines and adjusts a work ability of one of or more of the at least one graphics engine according to an adjustment command from the driver software. The driver software provides the adjustment command according to the workload index.

The invention also proposes a management method of a GPU comprising the following steps. A notification signal from a GPU is received. A workload index of at least one graphics engine of the GPU is obtained according to the notification signal. An adjustment command is sent to the GPU according to the workload index of the at least one graphics engine so as to instruct the GPU to adjust a work ability of one of or more of the at least one graphics engine.

In order to make the aforementioned features and advantages of the invention more comprehensible embodiments accompanied with figures are described in detail below.

When an application program executed by the electronic device needs to render graphics the application program calls an application programming interface API provided by an operating system of the electronic device such that the driver software sends a graphics command which is from the application program to the GPU . The command engine in the GPU receives the graphics command sent by the driver software so as to analyze the type of the graphics command . The command engine assigns the graphics command to one of the graphics engines according to the type of the graphics command . The corresponding graphics engine performs a video decoding function or a graphics rendering function of the GPU according to the graphics command .

The memory interface is coupled to the graphics engine and a memory not illustrated . The memory may be either inside or outside the GPU . When the memory is inside the GPU the memory may be a graphic memory of the GPU . When the memory is outside the GPU the memory may be a system memory in the electronic device and the system memory may be shared by a processor not illustrated in the electronic device and by the GPU . Graphics data obtained by decoding or rendering by the graphics engine may be stored in the memory via the memory interface . The display engine is coupled to the memory interface obtaining the graphics data via the memory interface and outputting the graphics data according to a standard display interface such as a high definition multimedia interface HDMI or a digital visual interface DVI .

The engine manager is coupled to each graphics engine and records a workload index of each graphics engine . In an embodiment the workload index is in direct proportion to a workload of the graphics engine . The higher the workload index the heavier the workload of the graphics engine is. The workload index may be a received workload a completed workload a remaining workload or a number of idle clock cycles of the graphics engine within a unit time or a total data volume of the memory coupled to the memory interface and accessed by the graphics engine within a unit time.

The received workload refers to a workload of the graphics engine given by the graphics command and the remaining workload is obtained by subtracting the completed workload from the received workload.

As for the number of idle clock cycles please refer to the following explanation. After receiving the graphics command assigned by the command engine the graphics engine performs a video decoding function or a graphics rendering function corresponding to the graphics command . According to a work ability e.g. a work frequency or a work voltage of the graphics engine the graphics engine may complete a work corresponding to the graphics command within a specific period. However during the specific period the graphics engine is not always in a working state. For example with a duty cycle of 100 the graphics engine may be in the working state for merely 60 clock cycles and be in an idle state for 40 clock cycles. The distribution ratio between a working state and an idle state is relevant to the graphics engine and thus the number of idle clock cycles may serve as a workload index of the graphics engine .

As previously mentioned after performing the video decoding function or the graphics rendering function the graphics engine stores graphics data obtained by decoding or rendering in the memory via the memory interface so that the graphics data may be read by the display engine . Therefore a total data volume of the memory accessed by the graphics engine within a unit time is relevant to a workload of the graphics engine . The total data volume of the memory accessed by the graphics engine within a unit time may be regarded as a workload index of the graphics engine . In practice every time the graphics engine decodes or renders graphics data a specific address of the memory is assigned to store the graphics data decoded or rendered by the graphics engine and the graphics data waits to be read by the display engine . Therefore a total accessed data volume of the specific address in the memory within a unit time may be regarded as a workload index of the graphics engine . The total accessed data volume of the memory is calculated by adding up a read data volume of the memory and a written data volume of the memory.

The driver software provides an adjustment command to the engine manager according to a workload index of any of the graphics engines recorded by the engine manager so as to inform the engine manager to adjust the work ability of the graphics engine . The engine manager adjusts the work ability of one of or more of the graphics engines according to the adjustment command . In one embodiment the engine manager adjusts the work ability of a graphics engine by adjusting a work voltage and or a work frequency of the graphics engine . In general the higher the work voltage and or work frequency is adjusted to the higher the work ability of the graphics engine is however a power consumption of the graphics engine will increase as well.

As illustrated in a workload index of a graphics engine may be a received workload a completed workload a remaining workload or a number of idle clock cycles of the graphics engine within a unit time or a total data volume of the memory accessed by the memory interface within a unit time. The workload of different types of the graphics engines may have different definitions. For example a workload of the video engine in is a number of video macroblocks requiring decoding assigned by the graphics command . A workload of the three dimensional engine in is a total area of a triangle requiring rendering assigned by the graphics command . A workload of the two dimensional engine in is a total area of a rectangle requiring rendering assigned by the graphics command .

A workload of a graphics engine may also be calculated by the engine manager via specific formulas according to at least a received workload a completed workload a remaining workload or a number of idle clock cycles of the graphics engine within a unit time or a total data volume of a memory accessed by the graphic engine within a unit time. The total data volume of the memory is accessed by the graphic engine via the memory interface coupled to the memory.

Referring back to the engine manager comprises at least one set of registers each set of registers corresponds to one of the graphics engines so as to store a workload index of the corresponding graphics engine . The driver software provides the adjustment command according to the workload index stored in the registers and the details thereof will be described later. In another embodiment each set of registers further stores one or more threshold values and the driver software provides the adjustment command according to the workload index and the threshold value stored in the registers the details thereof will be described later as well.

The engine manager periodically sends a notification signal to the driver software according to an interval set by the driver software . For example the engine manager sends out the notification signal by interrupting. When receiving the notification signal the driver software retrieves a workload index of the graphics engine from the registers so as to provide the adjustment command according to the retrieved workload index.

Besides the embodiment of periodically sending out the notification signal in another embodiment the engine manager sends the notification signal to the driver software when a workload index of one of the graphics engines exceeds one of the threshold values corresponding to the graphics engine . When receiving the notification signal the driver software provides the adjustment command according to the workload index which exceeds the threshold value. The details thereof will be described later.

In an embodiment the driver software sends the adjustment command to the engine manager of the GPU according to a workload index of the graphics engine and a current management policy of the driver software . Regarding the management policy please refer to which is a schematic drawing of a driver software of an embodiment of the invention. The driver software comprises a plurality of predetermined management policies and a current management policy . The driver software selects one of the plurality of predetermined management policies as the current management policy . Each management policy and comprises at least one threshold value of each graphics engine several sets of work ability corresponding to different workload index of each graphics engine and an adjustment rule of the work ability of each graphics engine . One or more threshold values of each graphics engine divide a range of a workload index of the graphics engine into a plurality of sections. If a workload index of the graphics engine falls in one of the sections a corresponding adjustment rule is applied to the work ability of the graphics engine . Each management policy and may have a different number of and different values of threshold values and also a different adjustment rule. In the same management policy there may be different numbers of and different values of threshold values and also different adjustment rules with respect to different graphics engines. How to adjust a work voltage and or a work frequency of each graphics engine according to a workload index of the graphics engine is determined by an adjustment rule of the current management policy and is informed of the engine manager by the adjustment command .

In one embodiment the drive may automatically select one management policy as the current management policy according to a workload index of the graphics engine obtained from the engine manager in advance. For example the predetermined management policies are respectively a video mode management policy a three dimensional mode management policy and a two dimensional mode management policy . The three management policies correspond to the video engine the three dimensional engine and the two dimensional engine in respectively. The driver software analyzes workload indexes of the video engine the three dimensional engine and the two dimensional engine and automatically selects the management policy corresponding to a graphics engine having a highest workload index as the current management policy . In the video mode management policy the video engine is classified as a main type and the other two graphics engines the three dimensional engine and the two dimensional engine are classified as a secondary type. In the three dimensional mode management policy the three dimensional engine is classified as a main type and the other two graphics engines the video engine and the two dimensional engine are classified as a secondary type. In the two dimensional mode management policy the two dimensional engine is classified as a main type and the other two graphics engines the video engine and the three dimensional engine are classified as a secondary type. The above three management policies set the work ability of the graphics engine s classified as the main type higher than the work ability of the graphics engine s classified as the secondary type allowing the graphics engine s classified as the main type to use more power to serve its their purpose.

The driver software may select the current management policy according to a type of an application program executed by the electronic device . For example when the electronic device executes a video playing software the driver software selects the video mode management policy . When the electronic device executes a game software the driver software selects the three dimensional mode management policy . When the electronic device executes a text editing software the driver software selects the two dimensional mode management policy .

The driver software may select the current management policy according to an application state of the electronic device . For example when the electronic device is connected to a time limited power supply such as a battery the driver software selects a power limited mode management policy of the predetermined management policies as the current management policy . When the electronic device is connected to a permanent power supply such as a mains power system the driver software selects a power unlimited mode management policy of the predetermined management policies as the current management policy . In the power limited mode management policy each graphics engine is set to have a first work ability. In the power unlimited mode management policy each graphics engine is set to have a second work ability. Here the first work ability of each graphics engine is lower than the second work ability of the same graphics engine so as to save power of the time limited power supply.

In addition the driver software allows a user of the electronic device to select the current management policy . For example the predetermined management policies may be open for the user to select one as the current management policy via a utility program or an API.

The following discusses how the driver software sends out the adjustment command according to a workload index of the graphics engine and the current management policy .

In an embodiment the driver software periodically receives the notification signal from the GPU . As for how to set a sending interval of the periodical notification signal in an embodiment the driver software in advance sends a predetermined interval corresponding to the current management policy to the engine manager such that the engine manager periodically sends out the notification signal according to the predetermined interval. The predetermined interval may be a part of a management policy and there may be different predetermined intervals in different management policies. When receiving such notification signal the driver software collects a workload index of at least one graphics engine from the engine manager of the GPU and performs statistics or prediction of the workload index of the graphics engine . The driver software sends the adjustment command to the engine manager of the GPU according to the statistics or the prediction so as to instruct the engine manager how to adjust the work ability of the graphics engine . In an embodiment the driver software performs a statistics according to the collected workload index of the at least one graphics engine . For example the workload index may be compared to at least one threshold value corresponding to the graphics engine in the current management policy . If the workload index exceeds a threshold value the driver software provides the adjustment command to the engine manager so as to instruct the engine manager to adjust the work ability of the graphics engine correspondingly. The details thereof will be given later. In another embodiment the driver software predicts a trend of workload index in a short term period by using for example a linear extrapolation. For example in a case a workload index of the graphics engine read by the driver software at the first time is 10 and the workload index of the graphics engine read by the driver software at the second time is 30. The driver software may predict that the workload index to be read at the next time is 50 by using a linear extrapolation and may enhance the work ability of the graphics engine in advance via the adjustment command . In addition the driver software may switch the current management policy to another predetermined management policy according to the statistics or predicted workload index of the graphics engine . For example when the current management policy corresponds to the two dimensional mode management policy and a workload index of the three dimensional engine keeps increasing the driver software may switch the current management policy to the three dimensional mode management policy .

In an embodiment where the engine manager sends out the notification signal when a workload index of a graphics engine exceeds a threshold value the driver software in advance sends at least one threshold value of the current management policy to the engine manager of the GPU . Then when a workload index of one of the graphics engines exceeds one of the threshold values of the graphics engine the driver software receives the notification signal from the engine manager of the GPU . Every time such notification signal is received the driver software provides the adjustment command to the engine manager of the GPU according to the workload index which exceeds the threshold value so as to instruct the engine manager how to adjust the work ability of the graphics engine .

In both of the embodiment where the engine manager sends out the notification signal when a workload index of a graphics engine exceeds a threshold value and the embodiment where the engine manager periodically sends out the notification signal the driver software collects a workload index of at least one graphics engine from the engine manager of the GPU according to the received notification signal . As for how the driver software provides the adjustment command according to a workload index of the graphics engine is described as following. In one embodiment the current management policy divides the work ability of the graphics engine into a plurality of levels. A threshold value of the graphics engine comprises an upper threshold value and a lower threshold value and the value of the upper threshold value is greater than the value of the lower threshold value. When the driver software receives the notification signal and a workload index of the graphics engine exceeds a threshold value in a manner of rising to above the upper threshold value the adjustment command instructs the engine manager to adjust the work ability of the graphics engine up one level. As previously mentioned a workload index of a graphics engine is a received workload a completed workload a remaining workload or a number of idle clock cycles of the graphics engine within a unit time or a total data volume of a memory accessed by the graphics engine within a unit time. Taking the workload index of the graphics engine being the number of idle clock cycles as an example the work ability of the graphics engine is increased after being adjusted up one level which may lead to a decrease of the workload index. Therefore after increasing the work ability of the graphics engine appropriately the workload index of the graphics engine may fall back to a section smaller than the upper threshold value. By contrast when the driver software receives the notification signal and a workload index of the graphics engine exceeds a threshold value in a manner of descending to below the lower threshold value the adjustment command instructs the engine manager to adjust the work ability of the graphics engine down one level. After such adjustment the work ability of the graphics engine decreases which may lead to an increase of the workload index such as a number of idle clock cycles of the graphics engine . Therefore after decreasing the work ability of the graphics engine appropriately the workload index of the graphics engine may fall back to a section greater than the lower threshold value. If the workload index of the graphics engine exceeds the upper threshold value or the lower threshold value again the adjustment command may adjust the work ability of the graphics engine up or down one level correspondingly. If a workload index of the graphics engine no longer exceeds the upper threshold value or the lower threshold value the work ability of the graphics engine may remain unchanged without being adjusted again.

To take another example the current management policy sets a plurality of threshold values for a graphics engine and these threshold values divide the work ability of the graphics engine into a plurality of levels. When the driver software receives the notification signal which informs that a workload index of the graphics engine exceeds one of the threshold values the adjustment command instructs the engine manager to set the work ability of the graphics engine at a level where the workload index which exceeds the threshold value is. is a schematic drawing of threshold value and work ability of an embodiment of the invention. As shown in the figure the current management policy sets four threshold values T T Tand Tfor a graphics engine the four threshold values being sorted as T T T and Tin decreasing order of value. The four threshold values divide the work ability of the graphics engine into five levels L L L Land L.

When a workload index of the graphics engine is greater than the threshold value T the work ability of the graphics engine falls at level L when a workload index of the graphics engine falls between the threshold values Tand T the work ability of the graphics engine falls at level L when a workload index of the graphics engine falls between the threshold values Tand T the work ability of the graphics engine falls at level L when a workload index of the graphics engine falls between the threshold values Tand T the work ability of the graphics engine falls at level L when a workload index of the graphics engine is smaller than the threshold value T the work ability of the graphics engine falls at level L. The work ability of the graphics engine corresponding to level Lis greater than that corresponding to level L the work ability of the graphics engine corresponding to level Lis greater than that corresponding to level L the work ability of the graphics engine corresponding to level Lis greater than that corresponding to level L the work ability of the graphics engine corresponding to level Lis greater than that corresponding to level L.

The following exemplifies a case where the current management policy adjusts the work ability of the graphics engine according to a relationship between a workload index of the graphics engine and a threshold value. Initially a workload index of the graphics engine is greater than Tand smaller than T. Then when the GPU performs a video decoding function or a graphics rendering function the workload index of the graphics engine increases to greater than Tand smaller than T. Due to the workload index exceeding the threshold value T the engine manager sends out the notification signal . After receiving the notification signal the driver software sends out a corresponding adjustment command to instruct the engine manager to change the setting of the work ability of the graphics engine from level Lto level L. If the workload index of the graphics engine increases from smaller than Tto greater than T as the workload index exceeds the threshold values Tand T the engine manager sends out the notification signal . After receiving the notification signal the driver software sends out a corresponding adjustment command to instruct the engine manager to directly set the work ability of the graphics engine as level L.

In other embodiments of the invention a threshold value of the current management policy is adjustable. The driver software may adjust part of or all of the threshold values of at least one graphics engine of the current management policy according to an adjustment rule of the current management policy and a workload index of at least one graphics engine . The adjusted threshold value is sent to the GPU so as to update a threshold value stored in the registers of the engine manager . For example when a workload index of a graphics engine increases rapidly the driver software may adjust one of or more of the threshold values of the graphics engine up. The driver software according to a user s selection or operation stores a management policy wherein the threshold value has been adjusted in the above mentioned manner as another management policy for future retrieval.

In summary of the above the invention provides a graphics processing unit GPU and a management method thereof wherein independent or united power saving management is performed on each graphics engine of the GPU according to how heavy a workload of each graphics engine is. The invention separates hardware mechanism and software policy of power saving management allowing for independent designs of both hardware mechanism and software policy. Therefore the invention is extremely flexible.

Although the invention has been described with reference to the above embodiments it will be apparent to one of the ordinary skill in the art that modifications to the described embodiment may be made without departing from the spirit of the invention. Accordingly the scope of the invention will be defined by the attached claims not by the above detailed descriptions.

