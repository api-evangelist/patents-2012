---

title: System and methods for providing live streaming content using digital rights management-based key management
abstract: In the present disclosure, a DRM (in this case IPRM) system may be used to deliver media content keys to a player device in a live streaming environment and take advantage of all DRM related functionalities that come with it, such as proximity control, copy protection enforcement and rights verification. A playlist may be used to deliver a key identifier for encrypted live streaming content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08949592&OS=08949592&RS=08949592
owner: Google Technology Holdings
number: 08949592
owner_city: Mountain View
owner_country: US
publication_date: 20120323
---
This application claims the benefit of U.S. Provisional Patent Application Ser. No. 61 466 630 filed Mar. 23 2011 which is incorporated herein in its entirety.

HyperText Transfer Protocol HTTP Live Streaming also known as HLS is an HTTP based media streaming communications protocol. It works by breaking the overall stream into a sequence of small HTTP based file downloads each download loading one short chunk of an overall potentially unbounded transport stream. As the stream is played the client may select from a number of different alternate streams containing the same material encoded at a variety of data rates allowing the streaming session to adapt to the available data rate. At the start of the streaming session it downloads an extended M3U playlist containing the metadata for the various sub streams which are available.

In a typical live streaming scheme the content key that is used to decrypt the media content on the player device is delivered over secure HTTP HTTPS which is a combination of HTTP with Secure Sockets Layer SSL a cryptographic protocol that provides communication security over the internet.

Most Digital Rights Management DRM systems provide services such as proximity checking or copy protection enforcement that go beyond what is provided by SSL. HTTPS is deemed not to be effective enough to implement live streaming in a DRM based system. Therefore the above problem calls for a DRM based system to securely deliver media content keys to player devices.

Disclosed is a method for providing live streaming content using DRM based key management via a server device. In one embodiment live streaming content is encrypted using a key established by DRM based key management. The encrypted content is segmented. A uniform resource identifier URI of a DRM based live streaming content key is created. The URI indicates usage of a DRM key management protocol. The URI is sent to a client device in a playlist. The encrypted content is sent to the client device.

The playlist is sent to an application of the client device. When Advanced Encryption Standard 128 bit Cypher Block Chaining AES 128 CBC encryption is used the encrypted content is sent to a media player of the client device. When Advanced Encryption Standard 128 bit Electronic Code Book AES 128 ECB MPEG 2 Transport Stream MP2TS encryption is used the encrypted content is sent to the application of the client device.

In one embodiment a channel change request from a client device is received and processed. A new DRM based live streaming content key is derived. The live streaming content is transcoded and encrypted using the DRM based live streaming content key.

A channel change request from the client is received and processed. Content copy control information CCI is monitored to listen for changes. New CCI data is obtained. A new key is generated based in part on the change in CCI. Live streaming content is transcoded and encrypted using the new DRM based live streaming content key.

In one embodiment deriving the DRM based live streaming content key further involves creating a rights data file and storing a subkey used to derive the DRM based live streaming content key. In one embodiment the URI provides a reference to the DRM based live streaming content key.

In one embodiment a change in a detected parameter is determined while currently tuned to a channel and using the DRM based live streaming content key. A new DRM based live streaming content key is derived is response to the detected parameter. Live streaming content is transcoded and encrypted using the new DRM based live streaming content key. The encrypted content is segmented. A playlist is created. The playlist may have at least a URI of the new DRM based live streaming content key an encryption method and a list of a plurality of the encrypted segments. The URI indicates usage of a DRM key management protocol. In one embodiment the detected parameter comprises changes in copy control information. In one embodiment the detected parameter comprises an amount of time the previous key has been used. In one embodiment the detected parameter comprises a program boundary.

Disclosed is a method for providing live streaming using DRM based key management via a client device. In one embodiment a request for a playlist is sent from a media player of the client device. A playlist from a server is received at an application of the client device. The playlist has at least a Uniform Resource Identifier URI of a DRM based live streaming content key an encryption method and a list of a plurality of encrypted content segments. The URI indicates usage of a DRM key management protocol. The DRM key management protocol is used to establish the DRM based live streaming content key.

In one embodiment the DRM based live streaming content key is sent from the application of the client device to a media player of the client device using Secure Socket Layer SSL encryption over Secure HyperText Transfer Protocol HTTPS . The plurality of encrypted segments is decrypted decoded and presented by the media player.

In one embodiment the application decrypts the plurality of encrypted segments using the DRM based live streaming content key to produce un encrypted content segments. The un encrypted content segments are sent from the application to a media player of the client device.

In one embodiment a tune channel command is sent from a client application of the client device to a server. The tune channel command may include a channel identifier. A playlist URI is received from the server. After establishing the DRM based live streaming content key a temporary Rights Data File that includes a subkey used to derive the content decryption key is stored. The playlist is parsed to determine an applied encryption type.

In one embodiment the plurality of encrypted content segments is decrypted. A new playlist is generated for the media player with an encryption method set to none and having no key URI. The new playlist is presented to the media player.

In one embodiment a format of the DRM based live streaming content key is changed to match a media player of the client device. A new playlist is generated for the media player. The new playlist may include the applied encryption type with a key uniform resource locator URI pointed to a local Secure HyperText Transfer Protocol HTTPS server embedded within the client application. The new playlist is presented to the media player.

In one embodiment a playlist is received from a server in response to the server changing the content encryption key. The playlist may have at least a URI of a new DRM based live streaming content key an encryption method and a list of a plurality of encrypted content segments. The URI indicates usage of a DRM key management protocol. A key exchange protocol is performed with the server under the indicated DRM key management system to establish the new key. A temporary Rights Data File that includes a subkey used to derive the new decryption key is stored. The playlist is parsed to determine an applied encryption type.

The following disclosure describes DRM e.g. Internet Protocol Rights Management IPRM media protection and key change mechanism as it applies to HLS. This disclosure explores how different protection modes are supported and how key change occurs as content travels from a streamer to client devices.

In the present disclosure the main idea is to use a DRM e.g. IPRM system to deliver media content keys to the player device in the live streaming environment and take advantage of all DRM related functionalities that come with it such as proximity control copy protection enforcement and rights verification. With IPRM a content key seed is securely delivered to the player with additional data to locally derive a content decryption key while preserving and binding copy control information CCI and other rights data with the content decryption key.

IPRM key change is signaled by HLS key File URI changes in the Playlist. Every time IPRM detects a rule change that results in deriving a new encryption key a new key file URI is created in the playlist so that the HLS client device gets the correct key. There are at least two key change events One at any channel change event and another one when CCI rights data of incoming streams change during viewing of a channel. The key URI in this case is constructed as follows 

where KeyID represents an Odd Even key tag or sequential numeric key tag. Key tags such as KeyID are used so that the client device knows which key to request for which content chunk e.g. segment. There may also be a home server name e.g. home gateway device or over the top server name prefixed to the uniform resource locator URL . A key URI may in this instance be constructed as follows URI iprm channel keyID.txt where key segments are signaled by different keyIDs.

The encryption method that is used by live streaming can also be configured and signaled to the player device and is not limited to the Advanced Encryption Standard 128 bit Cypher Block Chaining AES 128 CBC described in the Internet Engineering Task Force IETF draft HLS specification. If the media content is for example already encrypted using AES 128 Electronic Code Book ECB and encapsulated inside a Motion Picture Experts Group Phase 2 MPEG 2 transport stream there is no need for re encryption to AES 128 CBC of the entire content stream. Rather the live streaming playlist file e.g. a manifest file can signal an Advanced Encryption Standard 128 bit Electronic Code Book MPEG 2 Transport Stream AES 128 ECB MP2TS method via its key tag. The IPRM system at the client device side determines an encryption type and using DRM based methods acquires keys using information received from the server in a uniform resource identifier URI . Using AES 128 ECB MP2TS encryption in this manner allows for the support of existing DVR boxes and home media server devices where MPEG 2 transport is commonly used.

Use of the key URI to indicate Odd Even key usage or sequential numeric key usage is signaled by the key tag in the URI. As keys and rights do not change very quickly use of only two key URIs at any given time e.g. in any given playlist file is sufficient to indicate Odd and Even key usage. In one embodiment the key URI or a small portion of it with key tag inside the IPRM protocol Digital Object Identifier DOI object is sent as part of key request message from a client device to a server device.

A playlist is created by streamer of server . The playlist has at least a URI of a DRM based live streaming content key an encryption method and a list of a plurality of the encrypted content segments. The URI also indicates usage of a DRM key management protocol. As described earlier a URI form can be shown as 

The playlist is sent to client device . In one embodiment the playlist is sent to an application of the client device. Application may be a client Software Development Kit SDK .

The encrypted content is sent to client device . The encrypted content may be sent to different elements of the client device depending on the type of encryption used to deliver the content key. When AES 128 CBC encryption is used the encrypted content is sent to a media player of the client device.

A request for a playlist may be sent from media player of client device . In response to the request a playlist from the server e.g. server is received at an application of the client device. The playlist has at least a URI of the DRM based live streaming content key an encryption method and a list of a plurality of encrypted content segments. The URI also indicates usage of a DRM key management protocol.

Client application generates a new or modified playlist. This modified playlist is used to provide at least encryption and key URI information to media player of client device . When AES 128 CBC encryption is used client application generates a playlist for the locally native HLS player e.g. media player that lists AES 128 CBC as the encryption method and the key URI pointed to a local HTTPS server embedded within the client application e.g. client SDK . The DRM based live streaming content key URI is sent from application to media player using SSL encryption over HTTPS. In this embodiment the plurality of encrypted segments is received from streamer of server by media player of client device .

A playlist is created by streamer of server . The playlist has at least a URI of a DRM based live streaming content key an encryption method and a list of a plurality of the encrypted content segments. The URI also indicates usage of a DRM key management protocol. The playlist is sent to client device . In one embodiment the playlist is sent to an application of the client device. Application may be a client SDK.

The encrypted content is sent to client device . The encrypted content may be sent to different elements of the client device depending on the type of encryption used to deliver the content key. When AES 128 ECB MP2TS encryption is used the encrypted content is sent to application of the client device.

A request for a playlist may be sent from media player of client device . A playlist from the server e.g. server is received at application . The playlist has at least a URI of the DRM based live streaming content key an encryption method and a list of a plurality of encrypted content segments. The URI also indicates usage of a DRM key management protocol.

Client application generates a new or modified playlist. This modified playlist is used to provide at least encryption and key URI information to media player of client device .

When AES 128 ECB MP2TS encryption is used client application generates a playlist for the locally native HLS player e.g. media player . The playlist lists NONE as the encryption method and has no key URI. In this embodiment the plurality of encrypted segments is received from streamer of server by client application . Application decodes the plurality of encrypted segments using the DRM based live streaming content key to produce un encoded content segments. The un encoded content segments are sent from application to media player of client device .

At block a URI of a DRM based live streaming content key is created. The URI indicates usage of a DRM key management protocol. At block the URI is sent to client device in a playlist. The playlist has at least a uniform resource identifier URI of a DRM based live streaming content key an encryption method and a list of a plurality of the encrypted content segments. In one embodiment the playlist is sent to an application of client device . Application may be a client SDK. The URI does not point to the actual key. The URI is an identifier the DRM system uses to find out what key is required.

At block the encrypted content is sent to the client . The encrypted content may be sent to different elements of client device depending on the type of encryption used to deliver the content key. When AES 128 CBC encryption is used the encrypted content is sent to a media player of the client device. When AES 128 ECB MP2TS encryption is used the encrypted content is sent to application of the client device.

At block a new DRM based e.g. IPRM live streaming content key is derived. A rights data file is created and a subkey used to derive the new DRM based live streaming content key is stored. When using IPRM or any DRM system the content key is derived on the client device side on the fly rather than signaling the actual key through a URI as is done in present HLS systems. Therefore the live streaming content key is never exposed during server client communication. At block the live streaming content is transcoded and encrypted using the new DRM based live streaming content key.

The encrypted content is segmented e.g. by streamer . A URI of a DRM based live streaming content key is created. The URI indicates usage of a DRM key management protocol. The key URI provides a reference to the DRM based live streaming content key. In one embodiment the URI provides a reference to this key. A playlist is also created. The playlist has at least the URI of the DRM based live streaming content key an encryption method and a list of a plurality of the encrypted content segments. The playlist and the encrypted content are sent to a client device e.g. client device . The Playlist file is created and the key URI is inserted as follows 

In one embodiment the detected parameter is changes in CCI. In one embodiment the detected parameter is an amount of time the previous key has been used. In one embodiment the detected parameter is a program boundary.

The key change e.g. key rotation may happen while tuned to a channel but each program within the same channel has different key or CCI data therefore has to be encrypted with different key. All media content of the same channel may be encrypted using the same key or new keys may be required at intervals or special events such as CCI changes. According to HLS specification the theoretical limit is one key per media file but because each media key adds a file request and transfer to the overhead for presenting the following media segments changing to a new key periodically is less likely to impact system performance than changing keys for each segment.

The key change signal in HLS is similar to a key URI change in a playlist file. The key change trigger point for streamer is when an incoming live stream has new CCI data detected by Cable Card or ECM. The sequence of operations shown for key change at the channel change event in the previous section is also applicable here with the following extra steps of detecting CCI changes in the middle of channel and by creating playlist with new key URIs every time that happens 

When AES 128 CBC encryption is used client application generates a playlist for the locally native HLS player e.g. media player that lists AES 128 CBC as the encryption method and the key URI pointed to a local HTTPS server embedded within the client application e.g. client SDK . The DRM based live streaming content key is sent from application to media player using SSL encryption over HTTPS. In this embodiment the plurality of encrypted segments is received from streamer of server by media player of client device . The plurality of encrypted segments is decrypted decoded and presented by the media player.

When AES 128 ECB MP2TS encryption is used client application generates a playlist for the locally native HLS player e.g. media player . The playlist lists NONE as the encryption method and has no key URI. In this embodiment the plurality of encrypted segments is received from streamer of server by client application . Application decrypts the plurality of encrypted segments using the DRM based live streaming content key to produce un encrypted content segments. The un encrypted content segments are sent to media player by application .

The IPRM application e.g. client SDK on the client device performs key exchange using the channel name or channel ID with the IPRM application on the streamer . At block a temporary Rights Data File that includes a subkey used to derive the content decryption key is stored by the IPRM application after establishing the DRM based live streaming content key.

At block the playlist is parsed to determine an applied encryption type. The behavior of the client SDK depends on the content encryption method type indicated in the HLS playlist.

AES 128 EBC MP2TS encryption is specific to IPRM and is not currently supported by any standard HLS server or player. Therefore the decryption has to happen outside the HLS player and within the client SDK. The clear media content e.g. un encrypted media content is sent from the client SDK to the media player. The HLS player in this case treats the incoming stream as clear without a key URI in the playlist.

When AES 128 EBC MP2TS is the applied encryption type the client SDK decrypts the plurality of encrypted content segments. IPRM decrypts the content and provides a clear buffer to client SDK . Client SDK sends the buffer to media player e.g. a native HLS player of client device . A new playlist is generated for the media player with an encryption method set to none and having no key URI. The new playlist is presented by the client SDK to the HLS player .

AES 128 CBC mode decryption is supported by a native HLS player e.g. media player as long as the key URI is securely presented to the native HLS player. When AES 128 CBC encryption is the applied encryption type a format of the DRM based live streaming content key is changed to match the media player of the client device. The HLS key provided to media player by HTTPS server is an AES 128 key that is 16 octet keys. The format of the Key file is simply a packed array of these 16 octets in binary format. The key value must be interpreted as a 128 bit hexadecimal number and must be pre fixed with 0x or 0X.

A new or modified playlist is generated for the media player . The new playlist includes the applied encryption type with a key URI pointed to a local HTTPS server embedded within the client application . The client SDK presents the new playlist to the media player.

HLS player gets the new or modified playlist file from client SDK . When AES 128 ECB MP2TS encryption is used the HLS player gets clear un encrypted media and renders the media. When AES 128 CBC is used player gets encrypted media decrypts the media using the key URI and renders the media.

At block a key exchange protocol is performed with the server under the indicated DRM key management system to establish the new key. In one embodiment the IPRM application e.g. client SDK on the client device performs key exchange using the URI information to identify the key of interest with the IPRM application on the streamer . At block a temporary Rights Data File that includes a subkey used to derive the new decryption key is stored by the IPRM application.

At block the playlist is parsed to determine an applied encryption type. The behavior of the client SDK depends on the content encryption method type indicated in the HLS playlist.

AES 128 EBC MP2TS encryption is specific to IPRM and is not currently supported by any standard HLS server or player. Therefore the decryption has to happen outside the HLS player e.g. media player and within the client SDK . The clear media content e.g. un encrypted media content is sent from client SDK to media player . The HLS player in this case treats the incoming stream as clear without a key URI in the playlist. When AES 128 EBC MP2TS is the applied encryption type the client SDK decrypts the plurality of encrypted content segments. IPRM is used to decrypt the content and provide a clear buffer to client SDK . Client SDK sends the buffer to media player e.g. a native HLS player of client device . A new or modified playlist is generated for the media player with an encryption method set to none and having no key URI. The new playlist is presented by the client SDK to the HLS player .

AES 128 CBC mode decryption is supported by a native HLS player as long as the key URI is securely presented to the native HLS player e.g. player . When AES 128 CBC encryption is the applied encryption type the DRM based live streaming content key is established. A format of the DRM based live streaming content key is changed to match the media player of the client device. The HLS key provided to media player by HTTPS server is an AES 128 key that is 16 octet keys. The format of the Key file is simply a packed array of these 16 octets in binary format. The key value must be interpreted as a 128 bit hexadecimal number and must be pre fixed with 0x or 0X.

A new playlist e.g. modified playlist is generated for the media player . The new playlist includes the applied encryption type with a modified key URI for program keys. The client SDK presents the new playlist to the media player.

The programKey n field in the URI above is just an indicator of subsequent key changes due to either new CCI a long elapsed time of usage for the prior key or some other detected program parameter change. The programKey n field can also be a fixed name with a strictly sequential number to show the key changes across all usage scenarios. Thus tuning to channel 1 would show a keyname1 then a new tuned channel would use keyname2 then a CCI change on that channel would go to keyname3 and so on. The field just needs to be explicit enough that client devices can establish the correct key. Another option is to use keyname1 then keyname2 then back to keyname1 and so on essentially odd and even key names forever. This option is also effective even though all the referenced keys would be different so long as the keys do not change very often.

HLS player gets the new or modified playlist file with the modified key URI from client SDK . When AES 128 ECB MP2TS encryption is used the HLS player gets clear un encrypted media and renders the media. When AES 128 CBC is used player gets encrypted media decrypts the media using the modified key URI and renders the media.

IPRM currently supports AES 128 ECB mode for MPEG 2 Transport Streams. HLS in addition to supporting clear content only supports AES 128 with CBC mode for encryption.

For an encryption method mode of NONE there is no encryption signal and there should be no key file associated with this method. The media file following this tag is in clear.

HLS currently only supports one encryption method. This supported encryption method is AES 128 CBC. The decryption type is signaled in the playlist with URI to key file. The native client device HLS player obtains the key and decrypts the encrypted live streaming content. The following rules apply to AES 128 CBC encryption 

AES 128 ECB MP2TS is a new proposed method to HLS in order to support IPRM encrypted MP2TS packets using AES 128 ECB mode. Since this is an IPRM specific mode the native client device platform HLS player does not support this mode and packets need to be decrypted before getting to the player. The playlist should be tagged with encryption METHOD of NONE while being presented to the player.

The following highlights key exchange elements of HLS playlists as discussed in this disclosure in sample playlist files and their corresponding modifications on the streamer and client device. This sample shows m3u8 playlist file as the client device tunes to channel 701. In each of the following examples there is a media sequence 541 a target duration 2 an encryption method a URI and a list of content segments EXTINF 2 . The URI references a LocalServerFQDN. An FQDN refers to a Fully Qualified Domain Name

End user device may be implemented as client device . Device comprises a processor CPU a memory e.g. random access memory RAM and or read only memory ROM and various input output devices e.g. storage devices including but not limited to a tape drive a floppy drive a hard disk drive or a compact disk drive a receiver a transmitter and other devices commonly required in multimedia e.g. content delivery encoder decoder system components Universal Serial Bus USB mass storage network attached storage storage device on a network cloud .

The processes described above including but not limited to those presented in connection with may be implemented in general multi purpose or single purpose processors. Such a processor e.g. processor will execute instructions either at the assembly compiled or machine level to perform that process. Those instructions can be written by one of ordinary skill in the art following the description of presented above and stored or transmitted on a computer readable medium e.g. a non transitory computer readable medium. The instructions may also be created using source code or any other known computer aided design tool. A computer readable medium may be any medium capable of carrying those instructions and include a CD ROM DVD magnetic or other optical disc tape silicon memory e.g. removable non removable volatile or non volatile packetized or non packetized wireline or wireless transmission signals.

While the foregoing is directed to embodiments of the present disclosure other and further embodiments may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

