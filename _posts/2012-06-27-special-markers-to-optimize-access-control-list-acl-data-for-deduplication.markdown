---

title: Special markers to optimize access control list (ACL) data for deduplication
abstract: Techniques for deduplicating a backup stream with ACL data embedded therein are described. According to one embodiment, a storage system receives a backup stream from a client, where the backup stream includes multiple data streams to be stored in the storage system. Each data stream represents a file or a directory of one or more files of a file system associated with the client. The storage system is to scan the backup stream to recognize an access control list (ACL) marker associated with at least one of the data streams, where the ACL marker identifies ACL data representing an ACL of the at least one data stream. The storage system is to chunk using a predetermined chunking algorithm the ACL data into a plurality of ACL data chunks to be stored in the storage system in a deduplicated manner.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09141633&OS=09141633&RS=09141633
owner: EMC Corporation
number: 09141633
owner_city: Hopkinton
owner_country: US
publication_date: 20120627
---
Embodiments of the present invention relate generally to data storage systems. More particularly embodiments of the invention relate to using special markers to optimize access control list ACL data for better deduplication.

Data storage utilization is continually increasing causing the proliferation of storage systems in data centers. In order to reduce storage space of a storage system deduplication techniques are utilized where data objects or files are segmented in chunks and only the deduplicated chunks are stored in the storage system.

A typical file system includes an access control system that maintains an access control list ACL for a file or a directory of files where the ACL list specifies the permissions of a file or a directory of files. When a file or a directory of files of a file system is backed up the ACL data associated with the files may also be backed up so that the proper ACL can be re enforced when the files are restored from the storage system. Typically a majority of the ACL data of a file system is repetitive and the ACL data is blended with data files which may reduce the deduplication rate when during deduplication of the data files.

Various embodiments and aspects of the inventions will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

Techniques for deduplicating a backup stream with ACL data embedded therein are described. According to some embodiments special markers also referred to herein as ACL markers are utilized to mark the location and or boundaries of ACL data of a backup stream of a file system. When the backup stream is received at a storage system such as a deduplicated backup storage system the ACL markers are recognized and the corresponding ACL data e.g. ACL data regions or boundaries is identified. The ACL data may then be deduplicated particularly when a size of the ACL data is relatively large. Since in general ACL data across a file system for a particular user or users may very much be the same or similar a deduplication rate of the ACL data can be significantly improved.

Storage system may represent any type of server or cluster of servers. For example storage system may be a storage server used for any of various different purposes such as to provide users with access to shared data and or to back up data such as mission critical data. In one embodiment storage system includes but is not limited to backup engine deduplication storage engine and one or more storage units communicatively coupled to each other. Storage units may be implemented locally e.g. single node operating environment or remotely e.g. multi node operating environment via interconnect which may be a bus and or a network. Backup engine is configured to back up data of clients and to store the backup files in storage units .

In response to a data file for example received from backup engine to be stored in storage units according to one embodiment deduplication storage engine is configured to segment the data file into multiple chunks also referred to as segments according to a variety of segmentation policies or rules. Deduplication storage engine may choose not to store a chunk in a storage unit if the chunk has been previously stored in storage units . In the event that deduplication storage engine chooses not to store the chunk in storage units it stores metadata associated with the chunk to enable the reconstruction of the file using the previously stored chunk. As a result chunks of data files are stored in a deduplicated manner either within each of storage units or across at least some of storage units . The metadata such as metadata may be stored in at least some of storage units such that files can be accessed independent of another storage unit. Metadata of each storage unit includes enough information to provide access to the files it contains.

According to one embodiment backup engine includes an ACL processing unit to process ACL data of a backup stream received from clients . In one embodiment ACL processing unit is to recognize ACL markers marking the corresponding ACL data within the backup stream. Once the ACL markers have been recognized the associated ACL data is identified based on the ACL markers. For example the size or a boundary of an ACL data region may be determined based on the ACL markers. The ACL data may be deduplicated by deduplication storage engine into deduplicated ACL data chunks and the deduplicated ACL data chunks are then stored in any of storage units as part of data objects . In one embodiment ACL markers may be inserted into the backup stream at the client prior to transmitting the backup stream to storage system .

For example a backup stream may be generated by a backup client software of client in response to a request for backing up data stored in client . The backup stream may include one or more data streams each data stream representing a file or a directory of one or more files or subdirectories dependent upon the specific backup policy or schedule. In addition backup client software includes an ACL marking unit to scan the data streams to identify ACL data and to mark the ACL data using a predetermined ACL marker. In one embodiment ACL marking unit is to insert an ACL marker also referred to as an ACL header in front of an ACL data block and optionally after the ACL data block to identify the boundary of the data block. According to one embodiment an ACL marker includes a predetermined signature and a length identifying a size of the ACL data following the ACL marker. Note that although not shown the architecture of clients may be identical or similar. Client may also include backup client software and its corresponding ACL marking unit running therein.

When the backup stream is received by backup engine from backup client software ACL processing unit of backup engine is to scan the backup stream to recognize the ACL markers inserted by ACL marking unit to identify the corresponding ACL data. The ACL data may be deduplicated into deduplicated ACL data chunks and the deduplicated ACL data chunks are then stored in storage units . In one embodiment the ACL data may be deduplicated when the ACL data satisfies a predetermined condition. For example according to a particular embodiment the ACL data may be deduplicated if the size of the ACL data exceeds a predetermined threshold e.g. minimum chunk size associated with the storage system .

ACL data refers to permission attributes associated with a file or directory of one or more files. Most of operating systems such as Windows network file system NFS or UNIX store ACL data along with the content data. When a backup stream is generated the ACL data may also be embedded within the backup stream along with the associated files or directories. ACLs are attributes of a file or directory that control which users on a file system can access the file or directory. Different types of access are defined typically read write and execute. A single access control entry specifies either allow or deny the type of access and then the user or group the access refers to. Typically an ACL contains all deny access entries followed by all allow access entries or vice versa. The ACL entries are evaluated by the operating system to determine if a user has requested access to a file. ACLs can be from several hundred bytes to hundreds of kilobytes. When stored in the file system ACL can include entries that state Access Control Items can be inherited from the directory above it. When a file and its attributes are written out for backup all inherited items must be written out so that files may be restored individually. Very often because of inherited ACL there is a large amount of data duplication in ACLs in backup streams.

Note that ACL processing unit may be implemented as a standalone processing unit communicatively coupled to backup engine and or deduplication storage engine . In this example storage system operates as a backup server. In another configuration storage system may operate as a non backup system such as for example a regular file server. When storage system operates as a regular storage system ACL processing unit can be coupled to an interface such as a file system interface a Web interface an application programming interface API etc. to receive a file or files from clients to be stored in storage units . Furthermore ACL marking unit may also be implemented within storage system . In such a configuration ACL marking unit operating at the server side is to mark the ACL data of a file stream using the techniques described above and ACL processing unit is to recognize and process the ACL markers accordingly as described. ACL marking unit and ACL processing unit may also be implemented as a single unit deployed within storage system . Other configurations may also exist.

According to one embodiment an ACL block in this example ACL block includes an ACL marker in a form of ACL header and ACL data . ACL marker may be inserted by an ACL marking unit such as ACL marking unit . For example the ACL marking unit scans backup stream to identify ACL data of ACL blocks . In this example once ACL data has been identified ACL marker is inserted for example in front of ACL data .

According to one embodiment an ACL marker in this example ACL header includes an ACL signature and a length . ACL signature includes a predetermined pattern that can be used to identify ACL data . Length specifies the size of ACL data . As a result when the ACL processing unit scans backup stream it can recognize ACL header based on its ACL signature and determine the size of ACL data based on length . ACL data can then be anchored and separated from header and deduplicated as needed. ACL header can be implemented in a variety of data structures.

In one embodiment storage system includes a deduplication engine interfacing one or more clients with one or more storage units storing metadata and data objects . Clients may be any kinds of clients such as a client application or backup software located locally or remotely over a network. A network may be any type of networks such as a local area network LAN a wide area network WAN such as the Internet a corporate intranet a metropolitan area network MAN a storage area network SAN a bus or a combination thereof wired and or wireless.

Storage units may be implemented locally e.g. single node operating environment or remotely e.g. multi node operating environment via an interconnect which may be a bus and or a network. In one embodiment one of storage units operates as an active storage to receive and store external or fresh user data while the another one of storage units operates as a target storage unit to periodically archive data from the active storage unit according to an archiving policy or scheme. Storage units may be for example conventional magnetic disks optical disks such as CD ROM or DVD based storage magnetic tape storage magneto optical MO storage media solid state disks flash memory based devices or any other type of non volatile storage devices suitable for storing large volumes of data. Storage units may also be combinations of such devices. In the case of disk storage media the storage units may be organized into one or more volumes of Redundant Array of Inexpensive Disks RAID . Data stored in the storage units may be stored in a compressed form e.g. lossless compression Huffman coding Lempel Ziv Welch coding delta encoding a reference to a chunk plus a difference etc. . In one embodiment different storage units may use different compression methods e.g. main or active storage unit from other storage units one storage unit from another storage unit etc. .

The metadata such as metadata may be stored in at least some of storage units such that files can be accessed independent of another storage unit. Metadata of each storage unit includes enough information to provide access to the files it contains. In one embodiment metadata may include fingerprints contained within data objects where a data object may represent a data chunk a CR of data chunks or a container of one or more CRs. Fingerprints are mapped to a particular data object via metadata enabling the system to identify the location of the data object containing a chunk represented by a particular fingerprint. When an active storage unit fails metadata contained in another storage unit may be utilized to recover the active storage unit. When one storage unit is unavailable e.g. the storage unit has failed or is being upgraded etc. the system remains up to provide access to any file not stored in the failed storage unit. When a file is deleted the metadata associated with the files in the system is updated to reflect that the file has been deleted.

In one embodiment the metadata information includes a file name a storage unit where the chunks associated with the file name are stored reconstruction information for the file using the chunks and any other appropriate metadata information. In one embodiment a copy of the metadata is stored on a storage unit for files stored on a storage unit so that files that are stored on the storage unit can be accessed using only the information stored on the storage unit. In one embodiment a main set of metadata information can be reconstructed by using information of other storage units associated with the storage system in the event that the main metadata is lost corrupted damaged etc. Metadata for a storage unit can be reconstructed using metadata information stored on a main storage unit or other storage unit e.g. replica storage unit . Metadata information further includes index information e.g. location information for chunks in storage units identifying specific data objects .

In one embodiment deduplication storage engine includes file service interface segmenter duplicate eliminator file system control and storage unit interface . Deduplication storage engine receives a file or files or data item s via file service interface which may be part of a file system namespace of a file system associated with the deduplication storage engine . The file system namespace refers to the way files are identified and organized in the system. An example is to organize the files hierarchically into directories or folders. File service interface supports a variety of protocols including a network file system NFS a common Internet file system CIFS and a virtual tape library interface VTL etc.

The file s is are processed by segmenter and file system control . Segmenter breaks the file s into variable length chunks based on a variety of rules or considerations. For example the file s may be broken into chunks by identifying chunk boundaries using a content based technique e.g. a function is calculated at various locations of a file when the function is equal to a value or when the value is a minimum a maximum or other value relative to other function values calculated for the file a non content based technique e.g. based on size of the chunk or any other appropriate technique. In one embodiment a chunk is restricted to a minimum and or maximum length to a minimum or maximum number of chunks per file or any other appropriate limitation.

In one embodiment file system control processes information to indicate the chunk s association with a file. In some embodiments a list of fingerprints is used to indicate chunk s associated with a file. File system control passes chunk association information e.g. representative data such as a fingerprint to an index not shown . The index is used to locate stored chunks in storage units via storage unit interface . Duplicate eliminator identifies whether a newly received chunk has already been stored in storage units . In the event that a chunk has already been stored in storage unit s a reference to the previously stored chunk is stored for example in a chunk tree associated with the file instead of storing the newly received chunk. A chunk tree of a file may include one or more nodes and each node represents or references one of the deduplicated chunks stored in storage units that make up the file. Chunks are then packed by a container manager not shown into one or more storage containers stored in storage units . The deduplicated chunks may be further compressed using a variation of compression algorithms such as a Lempel Ziv algorithm before being stored.

When a file is to be retrieved file service interface is configured to communicate with file system control to identify appropriate chunks stored in storage units via storage unit interface . Storage unit interface may be implemented as part of a container manager. File system control communicates with an index not shown to locate appropriate chunks stored in storage units via storage unit interface . Appropriate chunks are retrieved from the associated containers via the container manager and are used to construct the requested file. The file is provided via interface in response to the request. In one embodiment file system control utilizes a tree e.g. a chunk tree of content based identifiers e.g. fingerprints to associate a file with data chunks and their locations in storage unit s . In the event that a chunk associated with a given file or file changes the content based identifiers will change and the changes will ripple from the bottom to the top of the tree associated with the file efficiently since the appropriate content based identifiers are easily identified using the tree structure. Note that some or all of the components as shown as part of deduplication engine may be implemented in software hardware or a combination thereof. For example deduplication engine may be implemented in a form of executable instructions that can be stored in a machine readable storage medium where the instructions can be executed in a memory by a processor.

In one embodiment storage system may be used as a tier of storage in a storage hierarchy that comprises other tiers of storage. One or more tiers of storage in this hierarchy may utilize different kinds of storage devices and or may be optimized for different characteristics such as random update performance. Files are periodically moved among the tiers based on data management policies to achieve a cost effective match to the current storage requirements of the files. For example a file may initially be stored in a tier of storage that offers high performance for reads and writes. As the file ages it may be moved into a tier of storage according to one embodiment of the invention. In various embodiments tiers include different storage technologies e.g. tape hard drives semiconductor based memories optical drives etc. different locations e.g. local computer storage local network storage remote network storage distributed storage cloud storage archive storage vault storage etc. or any other appropriate storage for a tiered data storage system.

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as those set forth in the claims below refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the invention also relate to an apparatus for performing the operations herein. Such a computer program is stored in a non transitory computer readable medium. A machine readable medium includes any mechanism for storing information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices .

The processes or methods depicted in the preceding figures may be performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. software e.g. embodied on a non transitory computer readable medium or a combination of both. Although the processes or methods are described above in terms of some sequential operations it should be appreciated that some of the operations described may be performed in a different order. Moreover some operations may be performed in parallel rather than sequentially.

Embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

