---

title: Immortal instance type
abstract: Technologies are described herein for ensuring data in long-term storage will be accessible at a future date. Upon storing the data in long-term storage, a well-defined instance of data processing resources is created on a host computing platform for the installation and testing of a related application that is capable of accessing the stored data. Once testing of the related application is complete, a machine image is generated from the instance and stored with the data in the long-term storage. If access to the data stored in the long-term storage is required at a future date, the data and associated machine image may be retrieved, and a compatible instance of data processing resources created in which the machine image may be restored. The data in the long-term storage may then be accessed by the related applications executing in the newly created instance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08701109&OS=08701109&RS=08701109
owner: Amazon Technologies, Inc.
number: 08701109
owner_city: Reno
owner_country: US
publication_date: 20120206
---
An organization or individual user may wish to archive large amounts of data for extremely long periods such as decades or possibly indefinitely. In some cases the format of the archived data will be independently decipherable such as a blob of English text or there may be confidence that the data will be able to be interpreted in the future by a well known algorithm such as a JPEG image file an MPEG move file an archive file format e.g. TAR or ZIP and the like. However in many cases the format of the archived data may be closely coupled with the application software that produced it and that is required to interpret it. Additionally the application software may be closely coupled to a particular computer architecture. Therefore the data archived in long term storage may become useless if the application software needed to understand the data becomes unable to run because the particular computer architecture is no longer available.

For example an aircraft manufacturer may wish to store all of the engineering design and testing data that went into the design of an aircraft in long term storage for the potential 50 year working life of the aircraft. This data may be produced by a variety of application software programs including CAD programs mathematical analysis programs simulation programs and the like. In the event of an accident of the aircraft many years later the aircraft manufacturer may wish to retrieve that data from long term storage and make use of it for an accident investigation related litigation and the like. If a key element of that data is only useful with a corresponding finite element analysis software program and the software program or the computer architecture on which it depends is no longer available then access to the key element of data may not be possible.

Along with storing the data in the archival system the organization or user may also attempt to maintain the software and hardware platforms required to access the data for the 50 year period of the useful life of the data. However maintaining physical hardware for such a long period may be impractical. Hardware components and spare parts would have to be stockpiled for that period and there would be no guarantees that the hardware could remain functional due to aging of parts sublimation of lubrication degradation of FLASH or EPROM memory and the like. In addition the organization or user may be required to perform periodic testing to ensure that the software and hardware platforms remain available further increasing the cost of maintaining the hardware and software for such a long period.

The following detailed description is directed to technologies for ensuring data in long term storage will be accessible at a future date. Utilizing the technologies described herein an organization or individual user may store data in long term storage along with one or more related applications required to access the data. According to embodiments the solution utilizes machine virtualization to allow a well defined instance of data processing resources to be created on a host computing platform for the installation and testing of the related applications. Once testing of the related applications is complete a machine image may be generated from the instance and stored with the data in the long term storage.

Because the instance of data processing resources is based on well defined standards and limitations the instance is immortal in that the provider of the data processing resources may guarantee that a compatible instance may be created on future host computing platforms. If access to the data stored in the long term storage is required at a future date the data and associated machine image may be retrieved and a compatible instance of data processing resources created in which the machine image is restored. The data in long term storage may then be accessed by the related applications executing in the newly created instance. Utilizing virtualization to provide immortal instances may allow for long term storage of data in a manner that may ensure that the data may be accessed in the future without having to maintain compatible hardware and software platforms required to access the data over its useful life.

It should be appreciated that the subject matter presented herein may be implemented as a computer process a computer controlled apparatus a computing system or an article of manufacture such as a computer readable storage medium. These and various other features and embodiments will become apparent from a reading of the following disclosure and a review of the associated drawings.

While the subject matter described herein is presented in the general context of program modules that execute on one or more computing devices those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced on or in conjunction with other computer system configurations beyond those described below including multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers handheld computers personal digital assistants cellular telephone devices electronic book readers special purposed hardware devices network appliances and the like. The embodiments described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

In the following detailed description references are made to the accompanying drawings that form a part hereof and that show by way of illustration specific embodiments or examples. The drawings herein are not drawn to scale. Like numerals represent like elements throughout the several figures.

The computing resources provided by the service provider computing environment may include various classes of resources such as data storage resources data processing resources data communication resources and the like. Each class of computing resource may be general purpose or may be available in a number of specific configurations. According to embodiments the computer resources include long term storage for customer data. The long term storage may allow customers to store data securely and reliably for extended periods of time such as years or decades in a cost effective fashion. The long term storage may comprise any number and type of data storage resources in the service provider computing environment such as file servers data archival devices magnetic storage devices optical storage devices and the like.

A customer may utilize a customer computer system to connect the service provider computing environment over one or more network s to upload customer datasets to the long term storage . The customer datasets may contain the discrete sets of data that the customer wishes to store in long term storage such as one or more data files. The customer computer system may represent a personal computer PC desktop workstation laptop notebook personal digital assistant PDA electronic book reader game console set top box consumer electronics device server computer or any other computing device capable of connecting to the network s and accessing the long term storage provided by the service provider computing environment . The network s may represent a combination of local area networks LANs wide area networks WANs the Internet and or any other networking infrastructure known in the art that connects the customer computer system to the long term storage and other computing resources of the service provider computing environment .

The customer may further utilize the customer computer system to connect the service provider computing environment over the network s to allocate configure and manage the long term storage resources provided by the service provider computing environment. In this regard the service provider computing environment may include a number of application servers that provide various management services to the customer for purchasing allocating and maintaining long term storage resources uploading and retrieving customer datasets stored in the long term storage and the like. The application servers may represent standard server computers database servers web servers network appliances desktop computers other computing devices and any combination thereof. The application servers may execute a number of modules in order to provide the management services. The modules may execute on a single application server or in parallel across multiple application servers in the service provider computing environment . In addition each module may consist of a number of subcomponents executing on different application servers or other computing devices in the service provider computing environment . The modules may be implemented as software hardware or any combination of the two.

The application servers may execute a long term storage management module . The long term storage management module may allow customers to allocate and configure long term storage resources upload customer datasets to the long term storage retrieve stored datasets from long term storage and the like. A customer may utilize a Web browser application executing on the customer computer system to access a user interface UI presented by the long term storage management module through a Web service to access the management services related to the long term storage . Additionally or alternatively the long term storage management module may expose an application programming interface API which may be accessed over the network s by stand alone application software programs executing on the customer computer system . Other mechanisms for accessing the management services for long term storage of the long term storage management module may also be imagined including remote procedure calls SOAP based web services remote file access proprietary client server architectures and the like.

The computer resources provided by the service provider computing environment may further include data processing resources. The data processing resources may be made available in discrete units or instances . Each instance may represent the data processing resources of a dedicated host computer or each instance may represent a virtual machine instance executing on a host computer . The host computers may represent generic multi processor server devices special purpose hardware devices and the like. Various types and configurations of instances may be made available. For example each available instance of data processing resources may be of a particular size such as small medium and large representing different combinations of physical and or virtual hardware resources allocated to the instance such as number and types of processors amounts of memory size and speed of local storage number of networking addresses or communication channels and or the like. An instance may further be configured with a particular platform such as a specific operating system OS and or hypervisor installed on the instance. Instances may also be made available with specific application software components installed such as Web server software database management software portal software a specific runtime environment or platform and the like.

The application server s may further execute an instance management module . A customer wishing to deploy an application on the service provider computing environment may utilize the customer computer system to connect the instance management module to allocate configure and manage instances of data processing resources. The customer may utilize a Web browser application executing on the customer computer system to access a user interface UI presented by the instance management module provided by the instance management module to perform the allocation configuration and maintenance of the instances .

Additionally or alternatively the instance management module may expose an API which may be accessed over the network s by stand alone application programs executing on the customer computer system in the same fashion as described above. Other mechanisms for accessing the management services of the instance management module may also be imagined including remote procedure calls SOAP based web services remote file access proprietary client server architectures and the like. The configuration and status of each individual instance as well as the various types and configurations of instances available for allocation may be stored in instance configuration data . The instance configuration data may be stored in a database or other data storage system available to the application server s in the service provider computing environment for example.

According to embodiments the instance configuration data may define one or more immortal instance types. An immortal instance represents a type of instance with a well defined configuration such that the instance can be guaranteed to execute on both current host computers as well as future host computing platforms. In some embodiments immortal instances are implemented using virtualization. Virtualization allows the hardware of existing host computers to be virtualized with a specific configuration of virtual hardware presented to the operating system OS and application software programs referred to herein as applications executing in the immortal instance P as will be described below in more detail in regard to . The instance configuration data may define several immortal instance types with various virtual hardware configurations and parameters supporting various hardware architectures and platforms executing different operating systems and providing access to specific local and external resources as will be described in more detail below. According to further embodiments the immortal instance type may be more restrictive than a typical instance type and possibly less performant. The goal in defining the immortal instance types may be to strictly restrict the available functionality to a small set of well known and well documented standards.

In order to ensure that customer datasets stored in the long term storage will be accessible at a future date the instance management module and or the long term storage management module may provide customers with a mechanism to allocate and execute one or more instances of an immortal instance type in which the customer can install related applications that are needed to access the data in the datasets. As will be described in more detail below in regard to the customer may then execute the related applications in the immortal instances P to test that the applications run correctly and can access the data in the customer datasets stored in the long term storage . Because instances of the immortal instance type s are guaranteed to execute on future host computers in the service provider computing environment the customer can be ensured that the related applications will be available to access their customer datasets store in the long term storage at a future date.

According to further embodiments the instance management module and or the long term storage management module may further provide customers with a mechanism to create a machine image from each of the immortal instances P in which the related applications were installed and tested. The machine images may capture the installation and configuration of the OS and the application software program s in the immortal instance P and allow for the installation and configuration to be recreated in an instance of the same immortal instance type or a compatible immortal instance type in the future. The machine images may then be stored along with the associated customer datasets in the long term storage .

The long term storage management module and or the instance management module may further maintain image dataset instance mapping data . The image dataset instance mapping data may allow mappings between the customer datasets and the machine images containing the related applications as well as between the machine image and the immortal instance type of the instance from which the machine image was generated. The maintain image dataset instance mapping data may be stored in a database or other data storage system available to the application server s in the service provider computing environment for example. In some embodiments the maintain image dataset instance mapping data may be stored in long term storage accompanying the customer datasets and machine images .

The image dataset instance mapping data may be utilized by the long term storage management module and the instance management module to locate the associated machine image and to allocate and execute an instance of the same immortal instance type or a compatible immortal instance type with the restored machine image in order for a customer to retrieve and access customer datasets in the long term storage at a future date as will be described in more detail below in regard to . The image dataset instance mapping data may further be utilized by the long term storage management module and or the instance management module to determine those immortal instance types that are no longer tied to a customer dataset and associated machine image and can be deprecated and those with which compatibility must be maintained in new host computers and or new generations of immortal instance types as will be further described below.

One virtual machine A may host a management OS . The management OS may be automatically started by the VMM upon startup of the host computer A and may provide administrators of the host computer tools and facilities for managing the VMM and the other virtual machines B N. The virtual machine A hosting the management OS may execute at a higher privilege level than the other virtual machines B N and the management OS may also provide services to the other virtual machines through the VMM such as loading of hardware drivers for the host computer virtualizing hardware resources within virtual machines B N arbitrating access to the hardware of the host computer A and the like. In a specific embodiment the management OS may be a specifically modified version of the LINUX operating system for example.

The other virtual machines B N may each provide an instance of data processing resources for customers of the service provider computing environment as described above in regard to . Each virtual machine B N may run an instance of a guest OS as well as execute one or more applications to provide services to customers and other end users across the networks . According to one embodiment the VMM may support both paravirtualized and unmodified guest OSs . A paravirtualized guest OS is modified to run in a virtual machine provided by the VMM while an unmodified guest OS may be a version of an operating system that is configured to execute directly on physical hardware. Guest OSs may include the MICROSOFT WINDOWS operating system from MICROSOFT Corporation of Redmond Wash. the ORACLE SOLARIS operating system from ORACLE Corporation of Redwood City Calif. the LINUX operating system the UNIX operating system the NetBSD operating system and the like.

It will be appreciated that the embodiments described herein may be enabled by other virtualization architectures beyond the virtualization architecture described above and shown in . For example the management OS may run directly above and control access to the hardware of the host computer A. In addition while shows the VMM as separate from the management OS embodiments where the functionality of the management OS and VMM are integrated are within the scope of this disclosure.

According to embodiments the VMM in conjunction with the management OS controls the virtualization of the hardware of the host computer A in the virtual machines . The hardware includes central processing units CPUs or processors physical memory network interface cards NICs local storage devices input output I O controllers and the like. The VMM and or management OS may create each virtual machine with a specific virtualized hardware configuration. For example the VMM may restrict the CPU instructions available in a virtual machine in order to limit the guest OS and application s executing in the virtual machines to a well defined instruction set compatible across a variety of host computers . Similarly the VMM may limit the available registers the amount of main memory the amount of cache memory the number of interrupts the number of networking addresses and other hardware resources available in the virtualized hardware configuration of each virtual machine . In addition the VMM and or management OS may provide emulation of a specific hardware platform or architecture within a virtual machine .

The virtualized hardware configuration utilized by the VMM and or management OS to create each virtual machine may be based on the configuration parameters defined for an instance type in the instance configuration data associated with the instance corresponding to the virtual machine. The instance configuration data may comprise data that instructs the VMM and or management OS as to the mapping of physical hardware resources to virtual hardware resources and other parameters of the virtualized hardware configuration for the virtual machine . Similarly the instance configuration data may define access of the guest OS and applications executing in the virtual machine to storage devices databases other host computers and the like across the networks .

According to embodiments a virtual machine P may be created by the VMM in the host computer A to host an instance based on an immortal instance type also referred to herein as immortal instance . As described above the immortal instance P may be created based on a well defined virtualized hardware architecture designed to create a compatible environment for the applications of a customer as well as to ensure that the instance can be executed on future versions of hardware platforms and or virtualization architectures. For example the instance configuration data defining the immortal instance P may specify that the corresponding virtual machine P is limited to a core or well defined CPU instruction set to ensure a broad level of compatibility. The instance configuration data may further define specific timing behaviors for the virtual machine P such as a CPU clock speed a memory lookup response time a bus data transition rate timing of event responses ordering of event responses and the like. In further examples the instance configuration data may define a specific prefetch behavior a specific threading behavior the specific interrupts supported and other virtualized hardware configurations for the virtual machine P corresponding to the immortal instance P. The instance configuration data may further define the amount of main memory and or cache memory available to the corresponding virtual machine P access of the guest OS and applications executing in the virtual machine to a particular well defined virtualized block storage device or file system and the like.

In some embodiments the VMM and or management OS may sandbox the guest OS and the application s executing in the immortal instance P in order to control and limit their access to external resources or services across the network s such as storage devices databases other host computers Web services and other Internet based data sources and the like. This may be done to ensure that the guest OS and application s can run in an environment that can be recreated in the future when such external resources may not be available. In other embodiments the instance configuration data defining the immortal instance P may include the specification of specific external resources or services such as the long term storage that are available to the guest OS and application s . In these instances the service provider computing environment may be required to provide the specified resources and or services or compatible resources and or services to immortal instances P created on the host computers for as long as a mapping between a customer dataset and corresponding machine image and the immortal instance type remains in the image dataset instance mapping data .

In additional embodiments different immortal instance types may be defined in the instance configuration data that specify different guest OSs to be executed in the corresponding virtual machines and that support different application architectures and environments. Similarly the configuration parameters in the instance configuration data defining each immortal instance type may specify the hardware platforms or computer architectures on which immortal instances P of that type may be created the type of virtualization software required for the corresponding virtual machines and the like.

Over time new definitions of immortal instance types for new or different hardware platforms or supporting different operating systems and or application architectures may be defined in the instance configuration data . The instance configuration data for these new immortal instance types may further specify backward compatibility with older immortal instance types. For example immortal instance types may be defined in recursive generations wherein the current generation of an immortal instance type is guaranteed to support or emulate the previous generation in the series. In this way guest OSs and applications that are able to execute in an immortal instance P created from an earlier version of the immortal instance type will be able to run in immortal instances created from the current generation of the immortal instance type.

It will be appreciated that as new host computers of new or differing hardware architectures are introduced into the service provider computing environment the new host computers may be tested with the current generations of immortal instance types to ensure compatibility before older host computers supporting the immortal instance types are deprecated. Similarly new generations of immortal instances types may be tested for compatibility with previous generations before the older generation immortal instance types are deprecated. In some embodiments such compatibility testing may be performed utilizing generic test specifications that test the compatibility in the virtualized hardware configuration and or other accessible resources defined for virtual machines corresponding to immortal instances P created from the specific immortal instance type as will be described in more detail below in regard to .

Additionally or alternatively compatibility testing may involve creating immortal instances P from the new immortal instance type and loading one or more machine images associated with a previous generation of that instance type in the image dataset instance mapping data . The operating system and related applications contained in the machine image may then be tested for compatibility with immortal instances P created from the new instance type and or executing on the new hardware platform based on testing specifications created for the machine image. Those immortal instance types for which compatibility must be maintained may be further determined based on the existence of a mapping between a customer dataset and corresponding machine image and the immortal instance type in the image dataset instance mapping data as described above.

Turning now to additional details will be provided regarding the embodiments presented herein for ensuring data in long term storage will be accessible at a future date. It should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in parallel or in a different order than those described herein.

The routine begins at operation where the long term storage management module receives one or more customer datasets that a customer desires to be placed into long term storage and to remain accessible for an extended period of time. As described above in regard to the customer may utilize a Web browser application executing on the customer computer system to access a UI presented by the long term storage management module to upload the customer dataset s to previously allocated long term storage for example. The routine proceeds from operation to where the long term storage management module stores the received customer dataset s in the long term storage .

From operation the routine proceeds to operation where the instance management module creates an immortal instance P on a host computer based on an immortal instance type. According to some embodiments the customer may select an available immortal instance type from those defined in the instance configuration data that best supports the related applications required to access the data in the customer datasets . In other embodiments the long term storage management module and or the instance management module may determine the immortal instance type from which to create the immortal instance P based on specifications provided by the customer such as hardware requirements and operating system for example.

As described above in regard to the instance management module may create a virtual machine P corresponding to the immortal instance P on a host computer A in the service provider computing environment that is indicated as compatible with the immortal instance type in the instance configuration data . The virtual machine P may further comprise a specific virtualized hardware configuration and execute an appropriate guest OS based on the configuration parameters stored in the instance configuration data defining the selected immortal instance type. The configuration parameters in the instance configuration data may further define the internal and external resources available to the guest OS and application s executing in the virtual machine P corresponding to the immortal instance P.

The routine proceeds from operation to operation where the customer installs one or more related applications required to access the data in the customer dataset s along with any other supporting software into the newly created immortal instance P for testing. Once the immortal instance P has been allocated on the host computer A and the guest OS has been initialized the customer may be granted access to the immortal instance to install configure and maintain the guest OS and application s on the instance. In some embodiments the access may be facilitated by the instance management module . In other embodiments the customer may utilize a remote client application executing on the customer computer system to directly access and control the immortal instance P depending on the capabilities and protocols supported by the guest OS executing in the instance.

From operation the routine proceeds to operation where the customer tests the installed related applications in the immortal instance P. According to some embodiments the related applications executing in the immortal instance P are provided direct access to the data in the customer dataset s stored in the long term storage as shown in . In other embodiments the data in the customer dataset s may be extracted and stored in a virtual file system or block storage device supported by local or external storage devices in order to facilitate testing of the related application s .

The customer may further tweak the installation and configuration of the installed application s and or the guest OS in order to ensure proper operation of the related applications in the immortal instance P. For example because the virtualized hardware configuration for the corresponding virtual machine P may be restricted to a small set of well known and well documented standards based on the immortal instance type certain features or enhancements in the related application s may have to be disabled in order to ensure that the applications function correctly in the immortal instance P. Similarly since the guest OS and the related application s may be sandboxed in the corresponding virtual machine P and have limited access to internal and external resources and services the related applications may have to be configured or altered to eliminate external dependencies on such resources and services.

In some embodiments the customer may be able to further modify the configuration parameters of the immortal instance P such as adjusting the CPU timings or clock speed in the corresponding virtual machine P in order for the related application s to execute properly. The ability to adjust the configuration parameters for the instance may be provided by the instance management module for example. Any modifications made to the configuration parameters of the immortal instance P may be stored in metadata associated with the machine image generated from the instance as will be described below in order that these modification may be applied to any future immortal instance created to support the machine image and the application installations contained therein. According to further embodiments the customer may be provided with the ability to change the immortal instance type of the immortal instance P to a type that better supports the related application s and or provides the necessary external dependencies required for the applications to execute properly for example.

The routine proceeds from operation to operation where a machine image is generated from the immortal instance P as further shown in . Once the testing and tweaking of the related application s is completed successfully the long term storage management module and or the instance management module may create the machine image capturing the installation and configuration of the guest OS and the related application s in the immortal instance P. At operation the generated machine image may then be stored in the long term storage associated with the customer dataset s containing the data accessed by the related application s . In some embodiments the data from the customer dataset s that was extracted to a local storage of the immortal instance P for testing purposes may further be included in the machine image stored in the long term storage .

From operation the routine proceeds to operation where the long term storage management module updates the image dataset instance mapping data to include a mapping between the customer dataset s and the associated machine image in long term storage and the immortal instance type of the immortal instance P from which the machine image was generated. According to embodiments the mapping between the customer dataset s and the associated machine image and the immortal instance type ensures that the immortal instance type or a compatible instance type will exist in the future from which an immortal instance P can be created and the machine image restored therein. From operation the routine ends.

The routine begins at operation where the long term storage management module receives a request to access the data in one or more customer datasets in long term storage . For example a customer may utilize a Web browser application executing on the customer computer system to access a UI presented by the long term storage management module to request access to the customer dataset s previously uploaded to long term storage . The routine proceeds from operation to where the long term storage management module locates the specified customer dataset s in the long term storage .

From operation the routine proceeds to operation where the long term storage management module searches the image dataset instance mapping data to locate a machine image associated with the customer dataset s as well as an immortal instance mapped to the machine image. Next the routine proceeds from operation to operation where the instance management module creates an immortal instance P on a host computer based on the immortal instance type mapped to the machine image . According to embodiments the instance management module may utilize the specific immortal instance type mapped to the associated machine image or the instance management module may select another immortal instance type indicated as compatible with the mapped immortal instance type in the instance configuration data . For example the instance management module may select the latest generation immortal instance type from the series of the mapped immortal instance type that is guaranteed to be backward compatible with the original instance type as discussed above in regard to .

The instance management module may then create a virtual machine P corresponding to the immortal instance P on a host computer A in the service provider computing environment that is indicated as compatible with the selected immortal instance type in the instance configuration data as described above in regard to operation . Any modifications made to the configuration parameters of the immortal instance P that is stored in metadata associated with the machine image is further applied to the created immortal instance P.

The routine proceeds from operation to operation where the long term storage management module and or the instance management module installs the machine image in the corresponding virtual machine to create the immortal instance P. Next the routine proceeds to operation where the customer accesses the data in the customer dataset s utilizing the related application s executing in the newly created immortal instance P. For example the customer may utilize a remote client application executing on the customer computer system to directly access the immortal instance P and execute the related application s to access the data. According to some embodiments the related application s executing in the immortal instance P are provided direct access to the data in the customer dataset s stored in the long term storage as shown in . In other embodiments the data in the customer dataset s may be extracted and stored in a virtual file system or block storage device supported by local or external storage devices in order to facilitate access to the data by the related application s . From operation the routine then ends.

The routine begins at operation where the instance management module receives configuration parameters for an immortal instance type. As described above the immortal instance type parameters may include configuration parameters for a virtual machine P that hosts a corresponding immortal instance P based on a set of well known and well documented standards. For example the immortal instance type may define a core or well defined CPU instruction set that is exposed to the guest OS and applications executing in the immortal instance P. The immortal instance type may further define the amount of main memory and or cache memory available to the virtual machine P specific timing behaviors for the virtual machine a specific prefetch behavior a specific threading behavior specific interrupts supported and other virtualized hardware configurations for the virtual machine P.

The configuration parameters for the immortal instance type may further define the hardware platform requirement for the immortal instance type the type of guest OS to be executed in the virtual machine P the virtualization software or architecture required the types of internal and external resources available to the guest OS and applications executing in the virtual machine such as a well defined virtualized block storage device or file system and the like. Upon receiving the configuration parameters for the immortal instance type the routine proceeds to operation where the instance management module stores the received configuration parameters for the immortal instance type in the instance configuration data 

From operation the routine proceeds to operation where the instance management module creates an immortal instance P from the immortal instance type on a compatible host computer in the service provider computing environment based on the hardware platform and or the virtualization software or architecture required by the configuration parameters. Next at operation testing is performed in the immortal instance P to ensure compatibility of applications and the specified guest OS with the configuration parameters of the immortal instance type and corresponding virtual machine P. For example a suite of testing applications or scripts that model application behavior in the immortal instance P may be executed while calls to the virtualized hardware configuration by the testing applications and guest OS are monitored by the VMM and or management OS to ensure that only CPU instructions supported by the immortal instance type are issued that the timing behaviors specified in the configuration parameters for the immortal instance type are adhered to that only supported interrupts are raised that only supported internal and external resources are accessed and the like.

From operation the routine proceeds to operation where a mapping between the immortal instance type and one or more machine images and associated customer datasets in long term storage is created in the image dataset instance mapping data . For example the long term storage management module may create the mapping after generation of a machine image from an immortal instance P created from the immortal instance type to support access to customer dataset s for a customer stored in long term storage as described above in regard to operation . According to embodiments the mapping between the immortal instance type and a machine image and associated customer dataset s ensures that compatibility with the immortal instance type defined in the instance configuration data is maintained as current hardware platforms are deprecated and new hardware platforms are introduced in the service provider computing environment .

It will be appreciated that as new host computers of new or differing hardware or virtualization architectures are introduced into the service provider computing environment the new host computers may be tested for compatibility with the current generation of immortal instance types that also have mappings maintained in the image dataset instance mapping data before older host computers supporting the immortal instance types are deprecated. In order to facilitate such compatibility testing of a new host computer or hardware virtualization platform with the immortal instance type defined in the instance configuration data the routine proceeds from operation to where the instance management module creates a new immortal instance P from the configuration parameters of the immortal instance type on the new host computer .

Next the routine proceeds from operation to operation where compatibility tests are performed in the newly created immortal instance P to ensure that the immortal instance is compatible with the new host computer and its associated hardware platform and virtualization architecture. The tests may be performed utilizing the same suite of testing applications or scripts utilized in operation above while execution of the testing applications and guest OS are monitored for failures by the VMM and or management OS . Additionally or alternatively compatibility testing may involve loading one or more machine images mapped to the immortal instance type in the image dataset instance mapping data and executing the operating system and related applications contained in the machine image to test compatibility with the immortal instance P executing on the new host computer or hardware virtualization platform. From operation the routine ends.

The computer includes a baseboard or motherboard which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication paths. In one illustrative embodiment one or more central processing units CPUs operate in conjunction with a chipset . The CPUs are standard programmable processors that perform arithmetic and logical operations necessary for the operation of the computer .

The CPUs perform the necessary operations by transitioning from one discrete physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states such as flip flops and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements such as logic gates. These basic switching elements may be combined to create more complex logic circuits including registers adders subtractors arithmetic logic units floating point units or the like.

The chipset provides an interface between the CPUs and the remainder of the components and devices on the baseboard. The chipset may provide an interface to a random access memory RAM used as the main memory in the computer . The chipset may further provide an interface to a computer readable storage medium such as a read only memory ROM or non volatile RAM NVRAM for storing basic routines that help to startup the computer and to transfer information between the various components and devices. The ROM or NVRAM may also store other software components necessary for the operation of the computer in accordance with the embodiments described herein.

According to various embodiments the computer may operate in a networked environment using logical connections to remote computing devices and computer systems through a network such as a local area network LAN a wide area network WAN the Internet or any other networking topology known in the art that connects the computer to remote computers. The chipset includes functionality for providing network connectivity through a network interface controller NIC such as a gigabit Ethernet adapter. For example the NIC may be capable of connecting the computer to other computing devices such as other application servers the customer computer systems a data storage system in the service provider computing environment and the like over the network s described above in regard to . It should be appreciated that any number of NICs may be present in the computer connecting the computer to other types of networks and remote computer systems.

The computer may be connected to a mass storage device that provides non volatile storage for the computer. The mass storage device may store system programs application programs other program modules and data which are described in greater detail herein. The mass storage device may be connected to the computer through a storage controller connected to the chipset . The mass storage device may consist of one or more physical storage units. The storage controller may interface with the physical storage units through a serial attached SCSI SAS interface a serial advanced technology attachment SATA interface a fiber channel FC interface or other standard interface for physically connecting and transferring data between computers and physical storage devices.

The computer may store data on the mass storage device by transforming the physical state of the physical storage units to reflect the information being stored. The specific transformation of physical state may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the physical storage units whether the mass storage device is characterized as primary or secondary storage or the like. For example the computer may store information to the mass storage device by issuing instructions through the storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive unit the reflective or refractive characteristics of a particular location in an optical storage unit or the electrical characteristics of a particular capacitor transistor or other discrete component in a solid state storage unit. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this description. The computer may further read information from the mass storage device by detecting the physical states or characteristics of one or more particular locations within the physical storage units.

In addition to the mass storage device described above the computer may have access to other computer readable medium to store and retrieve information such as program modules data structures or other data. It should be appreciated by those skilled in the art that computer readable media can be any available media that may be accessed by the computer including computer readable storage media and communications media. Communications media includes transitory signals. Computer readable storage media includes volatile and non volatile removable and non removable storage media implemented in any method or technology for the non transitory storage of information. For example computer readable storage media includes but is not limited to RAM ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory or other solid state memory technology compact disc ROM CD ROM digital versatile disk DVD high definition DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices and the like.

The mass storage device may store an operating system utilized to control the operation of the computer . According to one embodiment the operating system comprises the LINUX operating system. According to another embodiment the operating system comprises the WINDOWS SERVER operating system from MICROSOFT Corporation of Redmond Wash. According to further embodiments the operating system may comprise the UNIX or SOLARIS operating systems. It should be appreciated that other operating systems may also be utilized.

The mass storage device may store other system or application programs and data utilized by the computer such as the long term storage management module and or the instance management module described above in regard to . In one embodiment the mass storage device or other computer readable storage media may be encoded with computer executable instructions that when loaded into the computer may transform the computer from a general purpose computing system into a special purpose computer capable of implementing the embodiments described herein. These computer executable instructions transform the computer by specifying how the CPUs transition between states as described above. According to one embodiment the computer may have access to computer readable storage media storing computer executable instructions that when executed by the computer perform the routines and for ensuring data in long term storage will be accessible at a future date as described above in regard to .

The computer may also include an input output controller for receiving and processing input from a number of input devices such as a keyboard a mouse a touchpad a touch screen an electronic stylus or other type of input device. Similarly the input output controller may provide output to a display device such as a computer monitor a flat panel display a digital projector a printer a plotter or other type of output device. It will be appreciated that the computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

Based on the foregoing it should be appreciated that technologies for ensuring data in long term storage will be accessible at a future date are presented herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

