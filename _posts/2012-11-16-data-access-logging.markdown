---

title: Data access logging
abstract: Data characterizing a plurality of data accesses of objects at one or more log points is received by a data access framework. Thereafter, data accesses requiring logging are identified and one or more corresponding pre-specified attributes are then logged. Related apparatus, systems, techniques and articles are also described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09396085&OS=09396085&RS=09396085
owner: SAP SE
number: 09396085
owner_city: Walldorf
owner_country: DE
publication_date: 20121116
---
The subject matter described herein relates to the logging of disclosure of data for example via read and write accesses from various requesting entities.

Enterprises are increasingly monitoring which entities e.g. computing systems individuals access their data. Not only is such monitoring required to comply with various laws and regulations but such monitoring can be used for other purposes such as data security which focuses on the confidentiality of certain data and also protects its integrity against manipulation etc. . Authorizations can control restrictions established for read and write access to confidential data. Data access logging in this context can be used to protocol access and to detect unauthorized access.

Data access can also be monitored in an effort to protect personal information of users. In addition to maintaining the integrity of users personal data access to such data must be restricted in order to comply with various health and privacy laws.

Furthermore data access monitoring can be used for data classification purposes with various data having different levels of confidentiality. The classification is related to the content only. It is not derivable from technical formal attributes or the data type.

In one aspect data characterizing a plurality of data accesses of objects at one or more log points is received by a data access framework. Thereafter data accesses requiring logging are identified and one or more corresponding pre specified attributes are then logged.

The data accesses can be for example read accesses and or write accesses. The data accesses requiring logging can be identified by checking whether data access logging is enabled for a corresponding object and a logical system e.g. SAP client that initiated the corresponding data access. In addition for each data access fields that should be logged for the data access can be determined and corresponding values can be logged.

In some variations fields that are required for condition evaluation are determined for evaluation of logging conditions and for being logged based on a pre defined rule set. Corresponding values can then be logged. The pre defined rule set can be specified by log configuration settings. The log configuration settings can be generated using at least one configuration template.

The logging can include storing values e.g. numbers field names etc. for the determined fields in at least one buffer and or data store. Stated differently the logging can in some cases simply identify the accessed fields while in other implementations the logging can identify both the accessed fields and corresponding values for same. The buffered values can be asynchronously transferred to at least one data store. In addition reports can be generated and presented that characterize the stored values.

The log points can originate from at least one channel from the system containing sensitive data to the outside world. When data is transferred through this channel it is disclosed. At least one channel can be a remote application programming interface API channel with the corresponding log points for the remote API channel being at a client upon initiating a request to a server at the server upon receiving the request from the client at the server upon responding to the request from the client and or at the client receiving the response from the server. At least one channel can be a user interface channel with corresponding log points at a backend server after receiving an event from a user interface and or at the backend server after responding to the event from the user interface. The user interface channel can be a graphical user interface an audio channel and or an audiovisual channel.

In some variations mass configuration can be provided in which an existing read access log configuration of an entity e.g. a web service or a screen can be used as a template for the configuration of other entities target entity . Matching data access log configurations can be identified by comparing types or structures of elements parts of the entities and such matches can be copied from the template entity to the target entity. Such access log configurations can be used to specify the pre specified attributes to be logged.

Computer program products are also described that comprise non transitory computer readable media storing instructions which when executed by at least one data processor of one or more computing systems causes the at least one data processor to perform operations herein. Similarly computer systems are also described that may include one or more data processors and a memory coupled to the one or more data processors. The memory may temporarily or permanently store instructions that cause at least one processor to perform one or more of the operations described herein. In addition methods can be implemented by one or more data processors either within a single computing system or distributed among two or more computing systems.

The subject matter described herein provides many advantages. In particular the current subject matter is advantageous in that it enables customers to comply with varying legal and privacy requirements relating to read write accesses of data by logging data characterizing such read write accesses and allowing subsequent viewing review of such accesses for only specified purposes.

The details of one or more variations of the subject matter described herein are set forth in the accompanying drawings and the description below. Other features and advantages of the subject matter described herein will be apparent from the description and drawings and from the claims.

The current subject matter is directed to the monitoring and logging of accesses of data. Such data access monitoring can serve various purposes such as providing data security data privacy and data classification. With data security the main goal is to protect the interests of a company. The focus is confidentiality and protection against manipulation of data. Authorizations restrict the read and write access to confidential data. Data access logging as described herein can be used to protocol access and to detect unauthorized access. With regard to data privacy the current subject matter can be used to ensure that a person s personal sensitive information is not made available to unauthorized users. With regard to data classification the current subject matter enables different levels of confidentiality i.e. classes of confidentiality which are derivable from the content of such data and not its technical formal attributes or data type.

The data access log framework can include a channel log API that provides an interface with the various channels . A configuration module can provide various configuration settings rules filters etc. that can be attached to various types of data accesses e.g. read and or write accesses etc. as will be explained in further detail below . A log condition evaluator using the configuration settings from the configuration module can determine whether a particular data access requires logging. Data characterizing the data access can be persisted by a log writer into a log buffer and or into a log data store . The log buffer can be used store data in order to increase performance. Data stored in the log buffer can be asynchronously written via a buffer flusher to the log data store . The log data store can be coupled to a log monitor which in turn can be accessed by users at a client .

Data accesses can be identified at various points within a particular data orchestration. is a diagram that shows interactions between a consumer client and a provider server . A first data access agent which acts as a listener to identify and record data relating to a data access can be part of the consumer client and can be triggered upon disclosure of data in a request sent to the provider server . In addition a second data access agent can form part of the provider server and can be triggered upon receipt of the request from the consumer client . Similarly a third access agent can form part of the provider server and can be triggered upon provision of a response disclosing sensitive data to the consumer client . A fourth access agent can from part of the consumer client and can be triggered upon receipt of the response disclosing sensitive data from the provider server . While illustrates an arrangement with four data access log points it will be appreciated that any combination of one or more agents can be utilized depending on the desired configuration. The data access log points can form part of the remote APIs channels and can access the data access log framework by way of the channel log API .

As noted above the current subject matter can be used to comply with legal requirements relevant for data access logging especially as there are an increasing number of diverse laws and regulations regarding data security data privacy and data classification. There may be different legal requirements for different purposes. For example the data which is logged is different e.g. in the USA a user s social security number must not be logged in this case it has to instead be logged that a certain user had access to the social security number but not the value of the social security number . In addition the logged data can be logged for one purpose but can be prohibited in relation to a different purpose e.g. storing user related data for security purposes may not allowed for data privacy purposes etc. . In addition retention requirements with regard to logged accessed data can vary as well as the usage of such data i.e. the data can only be used for a specified purpose etc. as such the current subject matter enables the purpose of logged data to be preserved identified.

The various data access log points can be used to log both read and write accesses which can comprise a query and a result which can sometimes be empty . The log writer can cause various attributes to be logged either in the log buffer or the log data store . Example but not limiting attributes include 

In addition IP addresses of environments triggering the data access can be logged. Furthermore attributes that simplify the selection of logged data or attributes which allow the authorization management when accessing the logged data can also be logged i.e. a log record can be extended by the application component and the software component of the underlying channel object e.g. a concrete screen or a remote API such as a web service so that such logged data can be found via queries based on such parameters . Still further the legal entity owner of the logged data e.g. the related application can be recorded.

In some cases attributes detected by a read access log point need not be logged. For example attributes do not need to be logged when corresponding change documents already exist and or if confidentiality requires that such attributes are not logged. Example of attributes that may in some cases not be logged include authorizations assigned to a user passwords social security numbers private keys of certificates session cookies and specific short or long text in case of read access because there can be fixed text like read access to the following entity happened in addition to the concrete logging attributes described above .

The examples described above with regard to the remote API channel and the user interface channel are illustrative and should not be construed as being required or limiting. The current data access logging approach can cover the data access to all entities in a system e.g. an ERP system independent of whether it is triggered via remote API or UI. The log writing may not be done in the application but in the underlying frameworks instead. For example all UI frameworks and remote API frameworks can be enabled for data access logging.

Various configurations of data access logging can be handled by the configuration module . A configuration setting which can sometimes be characterized as a rule and or filter can comprise channel i.e. the channel from which the read access originated technical attributes e.g. name of a service name of an operation etc. involved legal entities and purpose among others. Stated differently the configuration setting can specify the accessed fields to be logged and whether the corresponding information in such fields should be logged.

Data access logging can be selectively switched on off i.e. activated deactivated by entities e.g. SAP client providing the accessed data. The action of switching can also be logged e.g. date time user etc. . In cases in which logging is switched on for a given entity providing the accessed data the specific configuration settings of that entity e.g. SAP client rules filters can be active. The specific configuration or portion thereof rules filters can be provided as part of the application as initial proposals i.e. they are part of the application platform etc. or they can be customized generated by the ultimate end user.

In cases in which logging is switched on a user can further restrict the logging via a Business Add in BAdI call. For example logging can be restricted for a particular business partner. If the customer restricts the logging further via BAdI this restriction can be recorded in the internal control system .

In some implementations distribution of logging configurations can be provided. Distribution can be performed via customizing transport or using a central configuration approach. During such distribution logging configurations can be protected against reading and manipulation. Existing distribution routes i.e. transport paths can be reused provided that however protection against unauthorized reading and manipulation is prevented via various safeguards along such routes.

The current subject matter provides data access logging in such a fashion as to avoid or minimize the consumption of processing resources or otherwise negatively affect performance. The log writer during runtime determines based on configuration which fields must be logged to fulfill country specific legal requirements using for example the legal entity . In some cases runtime optimization can be provided by logging raw data with an asynchronously decoupled filtering for the final logging data. In some cases a log buffer can be used to provide runtime optimization.

The log data store can store data in a variety of ways and can selectively allow access to such data. For example the log data store can be wholly or partially encrypted and or access can require a user to sign in which in turn is logged . For log reports via the log monitor specific authorizations can be provided based for example on the corresponding legal entity or purpose. Data in the log data store can be copied during a system client copy procedure.

Logged data can be retained by and or archived from the log data store based on user configurations which can be based for example on country legal entity and or purpose . In cases where performance of reading and analyzing logged data is not necessary then the archived data can be utilized because it can be stored using a less expensive and slower but reliable database technology . A monitoring interface disposed between the log data module and the log monitor can be used for reporting e.g. purpose specific reporting etc. . Using the log monitor users can search for attributes i.e. non key fields etc. within the log data store . In addition the log monitor can employ automated pattern recognition and random sampling of suspicious accesses. In cases in which accesses are indicative of being unauthorized various alerting mechanisms e.g. e mail messaging visual displays audio alerts voice calls etc. can be employed. The log monitor can restrict access to reports and or to the data stored in the log data store based on specified authorization restrictions and the like. Via the interface it is also possible to transfer the logged data into a column based database for having fast analytical access to all attributes of the logged data.

In some implementations mass configuration can be provided in which an existing read access log configuration of an entity e.g. a web service or a screen can be used as a template for the configuration of other entities target entity . Matching data access log configurations can be identified by comparing types or structures of elements parts of the entities and such matches can be copied from the template entity to the target entity.

Various implementations of the subject matter described herein may be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations may include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and may be implemented in a high level procedural and or object oriented programming language functional programming languages logical programming languages and or in assembly machine language. As used herein the term machine readable medium refers to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the subject matter described herein may be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user may provide input to the computer. Other kinds of devices including tablet computers may be used to provide for interaction with a user as well for example feedback provided to the user may be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user may be received in any form including acoustic speech or tactile input.

The subject matter described herein may be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user may interact with an implementation of the subject matter described herein or any combination of such back end middleware or front end components. The components of the system may be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN and the Internet.

The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

Although a few variations have been described in detail above other modifications are possible. For example the logic flows depicted in the accompanying figures and described herein do not require the particular order shown or sequential order to achieve desirable results. Other embodiments may be within the scope of the following claims.

