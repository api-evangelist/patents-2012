---

title: Techniques for redirecting input/output
abstract: Techniques for redirecting input/output are disclosed. In one particular embodiment, the techniques may be realized as a method for redirecting input/output comprising the steps of method for redirecting input/output comprising configuring a first virtual machine with a recorder for library interposition, configuring a replica virtual machine with a player for library interposition, receiving a first recorded event from the first virtual machine, and transferring the first recorded event to the replica virtual machine for replay.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09612852&OS=09612852&RS=09612852
owner: Veritas Technologies LLC
number: 09612852
owner_city: Mountain View
owner_country: US
publication_date: 20121218
---
The present disclosure relates generally to research funded by the United States Department of the Air Force Research Laboratory under Contract No. FA8650 10 C 7024 titled IARPA StoneSoup Minestrone. 

The present disclosure relates generally to virtual machines and more particularly to techniques for redirecting input output.

Computer programs behave differently depending on the input they receive. Sometimes it is necessary for a computer program to receive identical input each time it is run. For example a customer may receive an error message while using the computer program. A support technician needs to be able to reproduce the error to debug the computer program. The support technician may ask the customer to provide step by step instructions that lead to the error message. For example the customer may tell the technician that clicking the Save button when Caps Lock is enabled causes the computer program to crash. The technician will then note that the steps to reproduce the error are 1 enable Caps Lock then 2 click the Save button. The input to the program enabling Caps Lock and then clicking Save may consistently crash the program every time the program runs.

In some situations a computer program may receive non deterministic input that causes the program to behave differently each time the program runs. Network input is a common source of non deterministic input. The program may be susceptible to crashing given a specific sequence of input events that must be reproduced exactly to trigger the crash while debugging or performing other testing.

Non deterministic input also hinders attack mitigation analysis. For example certain network traffic received by a program may be known to cause buffer overflow on a particular operating system on a particular computer architecture. A buffer overflow is an example of a severe program bug because malicious programs can exploit them over a network to infect or damage the computer running the program that is susceptible to the buffer overflow. To evaluate whether this network traffic can cause the same buffer overflow on other operating systems or computer architectures the program on each configuration must receive the same network input to test it.

Conventional techniques for reproducing input to a computer program have significant shortcomings. For example IOapps tools use library interposition to record and playback system events. IOapps interposes a recorder program between a computer program executable and an operating system s library e.g. libc to trace or intercept system calls. However like most record and replay implementations IOapps records some libc function calls currently 20 and attempts to re execute replay them exactly as recorded. IOapps is heavyweight interposing only on a subset of low level input output I O and inflexible not providing any options for allowing network input playback.

Jockey is another conventional record and replay implementation. Jockey operates at an even lower level than IOapps instrumenting operating system level system calls. Jockey does not provide high level library interposition.

Another record and replay implementation R2 requires that the computer program be developed for the system. Software developers must instrument their computer code with R2 s record and replay system in mind. R2 cannot support computer programs that have not been instrumented for R2.

In view of the foregoing it may be understood that there may be significant problems and shortcomings associated with conventional technologies for redirecting I O.

Techniques for redirecting input output are disclosed. In one particular embodiment the techniques may be realized as a method for redirecting input output comprising configuring a first virtual machine with a recorder for library interposition configuring a replica virtual machine with a player for library interposition receiving a first recorded event from the first virtual machine and transferring the first recorded event to the replica virtual machine for replay.

In accordance with further aspects of this particular embodiment further comprising receiving a subsequent recorded event from the first virtual machine after the first recorded event was transferred for replay.

In accordance with further aspects of this particular embodiment further comprising configuring a plurality of replica virtual machines wherein each replica virtual machine of the plurality of replica virtual machines may be configured with a player of a plurality of players for library interposition and transferring the first recorded event to at least two replica virtual machines of the plurality of replica virtual machines for replay wherein the first recorded event may be transferred to the at least two replica virtual machines of the plurality of replica virtual machines concurrently for replay.

In accordance with further aspects of this particular embodiment wherein the first virtual machine may comprise a first architecture and wherein the replica virtual machine may comprise a second architecture different from the first architecture.

In accordance with further aspects of this particular embodiment wherein the first recorded event may be a network based input output event.

In accordance with further aspects of this particular embodiment wherein the first recorded event may be transferred through a local pipe.

In accordance with further aspects of this particular embodiment wherein the first recorded event may be transferred through a network pipe.

In accordance with further aspects of this particular embodiment wherein the first recorded event may comprise a data transmission associated with the event.

In another particular exemplary embodiment the techniques may be realized as a system for redirecting input output comprising one or more processors communicatively coupled to a network wherein the one or more processors are configured to configure a first virtual machine with a recorder for library interposition configure a replica virtual machine with a player for library interposition receive a first recorded event from the first virtual machine and transfer the first recorded event to the replica virtual machine for replay.

In accordance with additional aspects of this particular embodiment wherein the one or more processors are further configured to receive a subsequent recorded event from the first virtual machine after the first recorded event was transferred for replay.

In accordance with additional aspects of this particular embodiment wherein the one or more processors are further configured to configure a plurality of replica virtual machines wherein each replica virtual machine of the plurality of replica virtual machines may be configured with a player of a plurality of players for library interposition and transfer the first recorded event to at least two replica virtual machines of the plurality of replica virtual machines for replay wherein the first recorded event may be transferred to the at least two replica virtual machines of the plurality of replica virtual machines concurrently for replay.

In accordance with additional aspects of this particular embodiment wherein the first recorded event may be a network based input output event.

In accordance with additional aspects of this particular embodiment wherein the first recorded event may be transferred through a network pipe.

In accordance with additional aspects of this particular embodiment wherein the first recorded event may comprise a data transmission associated with the event.

In yet another particular exemplary embodiment the techniques may be realized as an article of manufacture for redirecting input output the article of manufacture comprising at least one non transitory processor readable storage medium and instructions stored on the at least one medium wherein the instructions are configured to be readable from the at least one medium by at least one processor and thereby cause the at least one processor to operate so as to configure a first virtual machine with a recorder for library interposition configure a replica virtual machine with a player for library interposition receive a first recorded event from the first virtual machine and transfer the first recorded event to the replica virtual machine for replay.

In accordance with additional aspects of this particular embodiment the instructions may cause the at least one processor to operate further so as to receive a subsequent recorded event from the first virtual machine after the first recorded event was transferred for replay.

In accordance with additional aspects of this particular embodiment the instructions may cause the at least one processor to operate further so as to configure a plurality of replica virtual machines wherein each replica virtual machine of the plurality of replica virtual machines may be configured with a player of a plurality of players for library interposition and transfer the first recorded event to at least two replica virtual machines of the plurality of replica virtual machines for replay wherein the first recorded event may be transferred to the at least two replica virtual machines of the plurality of replica virtual machines concurrently for replay.

In accordance with additional aspects of this particular embodiment wherein the first recorded event may be a network based input output event.

In accordance with additional aspects of this particular embodiment wherein the first recorded event may be transferred through a network pipe.

In accordance with additional aspects of this particular embodiment wherein the first recorded event may comprise a data transmission associated with the event.

The present disclosure will now be described in more detail with reference to particular embodiments thereof as shown in the accompanying drawings. While the present disclosure is described below with reference to particular embodiments it should be understood that the present disclosure is not limited thereto. Those of ordinary skill in the art having access to the teachings herein will recognize additional implementations modifications and embodiments as well as other fields of use which are within the scope of the present disclosure as described herein and with respect to which the present disclosure may be of significant utility.

With reference to computer system of modem network interface or some other method may be used to provide connectivity from one or more of client systems and to network . Client systems and may be able to access information on server A or B using for example a web browser or other client software not shown . Such a client may allow client systems and to access data hosted by server A or B or one of storage devices A N B N and or N . Networks and may be local area networks LANs wide area networks WANs the Internet cellular networks satellite networks or other networks that permit communication between clients servers and other devices communicatively coupled to networks and . Networks and may further include one or any number of the exemplary types of networks mentioned above operating as a stand alone network or in cooperation with each other. Networks and may utilize one or more protocols of one or more clients or servers to which they are communicatively coupled. Networks and may translate to or from other protocols to one or more protocols of network devices. Although networks and are each depicted as one network it should be appreciated that according to one or more embodiments networks and may each comprise a plurality of interconnected networks.

Storage devices A N B N and or N may be network accessible storage and may be local remote or a combination thereof to server A or B. Storage devices A N B N and or N may utilize a redundant array of inexpensive disks RAID magnetic tape disk a storage area network SAN an internet small computer systems interface iSCSI SAN a Fibre Channel SAN a common Internet File System CIFS network attached storage NAS a network file system NFS optical based storage or other computer accessible storage. Storage devices A N B N and or N may be used for backup or archival purposes.

According to some embodiments clients and may be smartphones PDAs desktop computers a laptop computers servers other computers or other devices coupled via a wireless or wired connection to network . Clients and may receive data from user input a database a file a web service and or an application programming interface. Servers A and B may be application servers archival platforms backup servers network storage devices media servers email servers document management platforms enterprise search servers or other devices communicatively coupled to network . Servers A and B may utilize one of storage devices A N B N and or N for the storage of application data backup data or other data. Servers A and B may be hosts such as an application server which may process data traveling between clients and and a backup platform a backup process and or storage. According to some embodiments servers A and B may be platforms used for backing up and or archiving data. One or more portions of data may be backed up or archived based on a backup policy and or an archive applied attributes associated with the data source space available for backup space available at the data source or other factors.

According to some embodiments clients and or may contain one or more portions of software for I O redirection such as for example I O redirection module . As illustrated one or more portions of I O redirection module may reside at a network centric location. For example server A may be a server a firewall a gateway or other network element that may perform one or more actions to scan web applications for vulnerabilities. According to some embodiments network may be an external network e.g. the Internet and server A may be a gateway or firewall between one or more internal components and clients and the external network. According to some embodiments I O redirection module may be implemented as part of a cloud computing environment.

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM may be the main memory into which the operating system and application programs may be loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system may be stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical drive a floppy disk unit or other storage medium. For example I O redirection module may be resident in system memory .

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present disclosure. The devices and subsystems can be interconnected in different ways from that shown in . Code to implement the present disclosure may be stored in computer readable storage media such as one or more of system memory fixed disk optical disk or floppy disk . Code to implement the present disclosure may also be received via one or more interfaces and stored in memory. The operating system provided on computer system may be MS DOS MS WINDOWS OS 2 OS X UNIX Linux or another known operating system.

Power manager may monitor a power level of battery . Power manager may provide one or more APIs Application Programming Interfaces to allow determination of a power level of a time window remaining prior to shutdown of computer system a power consumption rate an indicator of whether computer system is on mains e.g. AC Power or battery power and other power related information. According to some embodiments APIs of power manager may be accessible remotely e.g. accessible to a remote backup management module via a network connection . According to some embodiments battery may be an Uninterruptable Power Supply UPS located either local to or remote from computer system . In such embodiments power manager may provide information about a power level of an UPS.

Referring to there is shown modules of an I O redirection module in accordance with an embodiment of the present disclosure. An I O redirection module may contain one or more components including an interpose recorder an interpose player a local file system interconnection and an interpose framework .

The description below describes network elements computers and or components of a system and method for I O redirection that may include one or more modules. As used herein the term module may be understood to refer to computing software firmware hardware and or various combinations thereof. Modules however are not to be interpreted as software which is not implemented on hardware firmware or recorded on a processor readable recordable storage medium i.e. modules are not software per se . It is noted that the modules are exemplary. The modules may be combined integrated separated and or duplicated to support various applications. Also a function described herein as being performed at a particular module may be performed at one or more other modules and or by one or more other devices instead of or in addition to the function performed at the particular module. Further the modules may be implemented across multiple devices and or other components local or remote to one another. Additionally the modules may be moved from one device and added to another device and or may be included in both devices.

In according to some embodiments interpose recorder may record I O. The interpose recorder may record I O on a virtual machine such as canonical virtual machine . The canonical virtual machine may be configured with a system library such as libc library and a computer program executable .

The libc library may represent true functions that the executable intends to call that the I O redirection module will record and replay. For example in a Linux environment libc contains functions such as memory allocation process management and signal handling as well as transmitting and receiving data over a network.

The canonical virtual machine may be the baseline system from which I O may be redirected to other systems. The interpose recorder may be interposed between the library and the executable . Through library interposition the interpose recorder may intercept I O events as they are transmitted between the executable and the library . For example instead of I O events passing directly from the executable to the library I O events from the executable may first pass through the interpose recorder . Recorded I O events may include network connection metadata and data that has been transmitted or received. The library interposition may be transparent to the library and the executable .

The interpose recorder may be configured to intercept and record only certain high level I O instead of every I O event on its way to the library . For example the interpose recorder may be configured to intercept and record only network I O events such as read event and socket event . For example a read input event may be received at executable shown as read . The executable may attempt to use the library to process the read input event. The read input event may be intercepted by the interpose recorder shown as read . The interpose recorder may record the read input event and associated data after which the read event may proceed to the library shown as read

In another example a socket connection input event may be received at executable shown as socket . The executable may attempt to use the library to process the socket input event. The socket input event may be intercepted by the interpose recorder shown as socket . The interpose recorder may record the socket input event and associated data after which the socket input event may proceed to the library shown as read . The interpose recorder may record an arbitrarily long sequence of input events such as high level network input events for part or all of the time that the computer program executable is running on the canonical virtual machine .

In according to some embodiments interpose player may playback I O for re execution. The interpose player may playback I O on a virtual machine such as a replica virtual machine . In some embodiments the replica virtual machine has the same or similar operating system and computer architecture as the canonical virtual machine whereas in other embodiments the replica virtual machine and the canonical virtual machine have different operating systems or computer architectures. The I O redirection module may comprise a plurality of other replica virtual machines with the same or different configuration as the replica virtual machine .

The replica virtual machine may be configured with a system library such as libc library and a computer program executable . The library may be the same as the library on the canonical virtual machine . Also the computer program executable may be the same as the computer program executable on the canonical virtual machine . The replica virtual machine may be a test system to which I O may be redirected from another system such as canonical virtual machine . The interpose player may be interposed between the library and the executable . Through library interposition the interpose player may produce I O events as if they were transmitted between the executable and the library . Instead of I O events passing directly from the library to the executable certain I O events may originate from the interpose player while other I O events may pass through the interpose player .

The interpose player causes the replica virtual machine to re execute the I O redirected from the canonical virtual machine . The interpose player may be configured to playback only certain high level I O instead of every I O event. For example the interpose recorder may be configured to playback only network input events such as read event . For example the interpose player may play back a read event shown as read . The read event may be received at executable shown as read . The read event may appears to the executable as if it came from the library shown as read . The interpose player may playback the read I O event and associated data. The library interposition may be transparent to the library and the executable .

In another example a socket connection input event may be received at executable shown as socket . The executable may attempt to use the library to process the socket input event. The socket input event may be intercepted by the interpose player shown as socket after which the socket input event may proceed to the library shown as read

The interpose player may playback an arbitrarily long sequence of I O events such as high level network I O events for part or all of the time that the computer program executable is running on the replica virtual machine . In some embodiments the interpose player may permit flexibility in handling I O events such as network I O events. For example the interpose player may allow for variance in read buffer sizes during playback.

Referring to according to some embodiments there may be a local file system to facilitate the interconnection between the canonical virtual machine and the replica virtual machine . In this configuration the interpose recorder records I O events in the canonical virtual machine and stores the recorded events and associated data in the local file system . Subsequently the interpose player retrieves the recorded events and associated data from the local file system and plays back the I O events in the replica virtual machine .

In some embodiments the local file system enables the I O redirection module to store recorded I O events offline for an indefinite period of time. The executable on canonical virtual machine may run to completion before the executable on replica virtual machine begins to run. The recorded I O events stored on the local file system may be used once and deleted or they may be used repeatedly over a period of time. The local file system may store an arbitrarily large number of recorded I O events depending on the amount of storage space available in the local file system and the length of time a recording is needed. In some embodiments the local file system enables the I O redirection module to function while it is offline. In other embodiments the local file system may be replaced by a remote file system connected to the network.

Referring to according to some embodiments there may be an interpose framework . The interpose framework facilitates transferring recorded I O events from the canonical virtual machine to one or more replica virtual machines such as replicas and . In some embodiments a replica virtual machine may be identical to the canonical virtual machine while other replica virtual machines in the system may be variations of the configuration of the canonical virtual machine .

In a first replica virtual machine may reside on the same physical machine as that of canonical virtual machine . The first replica is a local replica connected to the interpose framework by a local pipe running in parallel with the canonical virtual machine on the same physical computer host. A second replica virtual machine may reside on a physical machine remote to that of canonical virtual machine . The second replica is a remote replica connected to the interpose framework by a network pipe running concurrently on a physical host connected through a distributed network.

In some embodiments interpose framework may transmit recorded I O events and associated data in real time. The interpose framework may receive a stream of I O events and associated data from the canonical virtual machine as soon as possible after they are recorded by the interpose recorder . As soon as possible after receiving a recorded I O event and associated data the interpose framework may redirect the I O to one or more replicas such as the local replica and the remote replica . The interpose framework redirects I O to local replicas through local pipe and to remote replicas through network pipe .

The interpose framework may broadcast redirected I O to multiple replicas simultaneously. The interpose framework does not need to wait for the executable on canonical virtual machine to run to completion. Instead the interpose framework enables testing the computer program executable running on a plurality of replica virtual machines simultaneously and at the same time that the baseline I O recordings are being made at within the canonical virtual machine . Consequently the interpose framework facilities a highly efficient technique for redirection I O for re execution on a plurality of replica virtual machines for testing. In some embodiments the local file system may be used in conjunction with the interpose framework whereby the recorded I O may be redirected and replicated at other concurrently running replica virtual machines or saved for later replay. Additionally in some embodiments I O redirection may involve transactional functions requiring more than one entry to perform a task. For these functions the interpose framework may synchronize the I O so that the executables running on the replica virtual machines e.g. and will perform without errors such as synchronization errors.

Referring to there is depicted a method for redirecting I O in accordance with an embodiment of the present disclosure. At block the method may begin.

At block a canonical virtual machine may be selected. The canonical virtual machine may be configured with a system library and a computer program executable.

At block a replica virtual machine may be selected. The replica virtual machine may be configured with a system library and the same computer program executable as that of the canonical virtual machine block . The replica virtual machine may have a configuration or environment that differs from that of the canonical virtual machine.

At block the canonical and replica virtual machines may be configured for library interposition. The canonical virtual machine may be configured with an interpose recorder for recording I O events and associated data and the replica virtual machine may be configured with an interpose player for playing back the recorded I O events.

At block as the executable is running I O events may be captured through library interposition via the interpose recorder.

At block the captured I O events and data may be transferred to the replica virtual machine. In some embodiments the executable may run to completion block and the entire sequence of I O events may be recorded. A local file system may store the sequence of I O events to facilitate transferring them to a replica virtual machine at a later time. In other embodiments individual I O events may be transmitted to a replica virtual machine as they are being recorded or streamed from the canonical virtual machine with the running executable. The recorded I O event may be sent through one or more local pipes or network pipes.

At block the recorded I O may be replayed on the replica virtual machine through library interposition via the interpose player. The replica virtual machine may receive a stream of I O events as soon as possible after they occur while the canonical virtual machine is running block . In other embodiments the replica virtual machine may receive a stored sequence of recorded I O for playback after the computer program on the canonical virtual machine block has run to completion.

At this point it should be noted that I O redirection in accordance with the present disclosure as described above may involve the processing of input data and the generation of output data to some extent. This input data processing and output data generation may be implemented in hardware or software. For example specific electronic components may be employed in a I O redirection module or similar or related circuitry for implementing the functions associated with I O redirection in accordance with the present disclosure as described above. Alternatively one or more processors operating in accordance with instructions may implement the functions associated with I O redirection in accordance with the present disclosure as described above. If such is the case it is within the scope of the present disclosure that such instructions may be stored on one or more non transitory processor readable storage media e.g. a magnetic disk or other storage medium or transmitted to one or more processors via one or more signals embodied in one or more carrier waves.

The present disclosure is not to be limited in scope by the specific embodiments described herein. Indeed other various embodiments of and modifications to the present disclosure in addition to those described herein will be apparent to those of ordinary skill in the art from the foregoing description and accompanying drawings. Thus such other embodiments and modifications are intended to fall within the scope of the present disclosure. Further although the present disclosure has been described herein in the context of at least one particular implementation in at least one particular environment for at least one particular purpose those of ordinary skill in the art will recognize that its usefulness is not limited thereto and that the present disclosure may be beneficially implemented in any number of environments for any number of purposes. Accordingly the claims set forth below should be construed in view of the full breadth and spirit of the present disclosure as described herein.

