---

title: Systems and methods for creating web service compositions
abstract: Exemplary embodiments provide systems and methods for connecting services, including web services, using intermediate data exchange objects to create composition services. Data exchange objects may be service independent objects that represent the inputs and/or outputs of various services. The systems and methods may employ data exchange objects to determine whether two services are composable and to implement and execute composite services according to the data exchange objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09319283&OS=09319283&RS=09319283
owner: Xerox Corporation
number: 09319283
owner_city: Norwalk
owner_country: US
publication_date: 20120227
---
This disclosure relates to connecting services and more particularly to connecting web services using a data exchange object.

Recent years have witnessed increasing interest in creating and using widely accessible services including web services implemented using representational state transfer REST style architectures. Unlike the heavy weight Simple Object Access Protocol SOAP based standards RESTful services are loosely coupled and simpler to handle for developers and users alike. The large numbers of RESTful services and the simple interfaces have enabled the creation of mashups of multiple services to serve diverse purposes.

Making or forming a new composition service by combining or connecting multiple individual services however is time consuming and difficult due to the syntactic and semantic differences of the individual services. As a result skilled users with programming knowledge are generally needed to build a composition of services or applications from multiple web services. Typically the composition of RESTful web services requires considerable programming effort. In order to get heterogeneous services to work together skilled users must write adaptors to handle the difference in data encoding schemes ASCII URL UTF 8 etc. the conversion of formats JSON XML PHP etc. and communication protocol differences SOAP REST etc. . And semantically relating heterogeneous services requires perhaps more significant skilled effort.

Solutions such as JOpera and Yahoo Pipes allow programmers to use a GUI to create a workflow of services and connect the corresponding input and output attributes. However the programmers are also required to provide adaptors required to couple pairs of services by handling the differences in terms of data encoding and formats. Moreover such GUI based orchestration engines typically provide no hint to the developers regarding the composability of services in the first place i.e. whether it is semantically possible to interconnect them. In such systems developers must learn the working details of the different services to determine whether they can be used together. Another example is the BPEL4WS standard which is used for the static composition of services. This standard too does not support the discovery of possible compositions on demand.

There is ongoing research into using semantic web service languages AI planning rule based plan generation and situation calculi for automating the composition of available services to fulfill user requirements. Despite several efforts in these areas there is no tool that lay users without programming skills can use to generate service compositions.

Semantic and syntactic differences between services not only make it difficult to program or automate the composition of a set of services they also make it difficult to realize that two disparate services can be used together especially in unforeseen conditions. For example consider a composition where the output of an MP3 encoder service is used as the input for a picture framer service. To a non programmer this composition does not seem to make sense and may be considered unworkable because the two services seem semantically incompatible. By considering in detail however the application programming interfaces APIs of these two services a person that understands software would find that the MP3 encoder outputs a JPG file among other data that represents the artwork for the encoded sound track and the picture framer can accept a JPG file to then frame it.

In addition to difficulties in determining whether the interfaces of two services are compatible services especially web services are always evolving and changing their APIs thus potentially becoming incompatible with the applications or services that use them. Keeping track of these changes while avoiding any coupling between services compositions and applications built from a particular composition is challenging.

The present disclosure provides several novel improvements to current service composition techniques including improvements that enable lay users to connect web services easily and efficiently without any programming knowledge.

In general embodiments consistent with the present disclosure provide systems and methods that may be used to democratize the process of creating complex compositions out of simple services. Simplifying the process of service composition may help to quickly increase the breadth of the palette in service marketplaces including web service marketplaces available in the Internet.

Systems and methods consistent with this disclosure may provide a framework that enables lay users with little or no programming knowledge to create new compositions from a set of existing services. Various embodiments may employ inputs obtained from users of the systems and methods for their evolution. In such embodiments the systems and methods may evolve with inputs obtained from the community.

Various embodiments create store and utilize abstract intermediate object types called Data Exchange Objects DEOs for representing data objects that are exchanged between services e.g. web services while being service independent. A DEO may represent any data object that is output by or input to a service such a U.S. address DEO a geocode DEO an album record DEO an online product DEO etc. In various embodiments a DEO may serve as an indirect connector of services. In various implementations a user without any details of the I O objects of two services may check for the composability i.e. connectability or compatibility of the services by searching for intermediate DEOs associated with both services. For example if one of the possible outputs of a service in part or in whole can be mapped to a particular DEO and that same DEO can be mapped to one of the possible inputs of another service then those services can be connected through the DEO and thus composed.

In the example shown in the Get Product Details service accepts a productId input and returns or outputs data object s e.g. a JavaScript Object Notation JSON object with details about the product in an online market including productName output pricePerUnit output and currencyType output . In pseudocode the outputs may be represented with a structure as follows 

As shown the CurrencyConverter service accepts an input JSON object s e.g. a JSON object specifying the currency that needs to be converted including inputCurrencyAmount input inputCurrencyCode input and outputCurrencyCode input . In pseudocode these inputs may be represented with a structure as follows 

CurrencyConverter service returns the amount in the output currency according to current exchange rates in data object s such as outputCurrencyAmount output and outputCurrencyCode output . Composition of these two services may be useful for a user who wants to know the current price of a product in his her local currency type.

In various embodiments a DEO may serve as an indirect connector of services. In the example shown in the Money DEO includes two attributes a numericalAmount attribute and a currencyType attribute .

As shown in the example of two of the output members of the GetProductDetail service e.g. pricePerUnit output and currencyType output may be associated with or mapped to the Money DEO e.g. to the numericalAmount attribute and the currencyType attribute respectively. In additional two of the input members of the CurrencyConverter service may be associated with or mapped to the members of Money DEO e.g. InputCurrencyAmount input may be mapped to numericalAmount attribute and inputCurrencyCode input may be mapped to currencyType attribute .

In some embodiments DEOs may be implemented as structured data objects that follow a grammar similar to that of a JSON object. For example the grammar used to generate DEOs may include 

In various embodiments once a DEO such as Money DEO or the above described DailyWeather DEO is created a lay user may create a composition of the two services and without any knowledge of the intrinsic details of either service. In various embodiments a user without any details of the I O objects of two services may also check for the composability of services using intermediate DEO s . If one of the possible outputs of a service in part or in whole can be mapped to a particular DEO and that same DEO can be mapped to one of the possible inputs of another service then those services can be connected through the DEO and thus composed. In various embodiments a DEO may represent the input or output of a service if such a mapping exists.

In the example of Money DEO indicates to a user that Get Product Details service and Currency Converter service are semantically compatibility to some degree as Money DEO specifies that the members pricePerUnit output and currencyType output of GetProductDetails service are equivalent to the members inputCurrencyAmount input and inputCurrencyCode input respectively of CurrencyConverter service . In the example shown Money DEO specifies this by mapping the same attribute to an output of Get Product Details service and an input Currency Converter service . For instance pricePerUnit output is mapped numericalAmount attribute which is also mapped to inputCurrencyAmount input .

In various embodiments the mapping or association between an input and or output of a service and a DEO may be stored as part of the DEO itself stored as part of the definition of each service or stored separately.

Although the exemplary embodiments discussed and the exemplary name DEO refers to representation of data objects in other embodiments DEOs may be used to represent storage elements computing resources or elements e.g. Amazon.com s simple storage service instances S3 or elastic compute cloud instances EC2 and the like. Compositions which require access to online data stores and cloud instances may use such embodiments of DEOs to discover appropriate services and users may analyze their compatibilities using such DEOs.

Although the exemplary embodiments discussed have illustrated a single level of indirection between two services other embodiments may mappings between two or more sets of DEOs. For example if a service ServiceA returns a DEO DEO1 and a service ServiceB returns a DEO DEO2 and DEO DEO3 is derivable from the combination of DEOs DEO1 and DEO2 then the multiple levels of indirection DEO1 to DEO2 to DEO3 make connection of ServiceA to ServiceB possible and the DEOs enable for a user to learn about the composability of service ServiceA with service ServiceB via DEO DEO3.

In various embodiments community participants e.g. system users may create and store DEOs such as Money DEO for use by other users thus providing a composition framework regarding the equivalence of data members from different services. In various embodiments a community of users may create large numbers of flatly structured intermediate DEOs to help connect services. This approach contrasts with approaches that involve using formal hierarchical domain specific ontologies and maintaining associations between service I O elements and the ontologies to analyze the equivalence of elements which are complex and discourage popular adoption.

One of ordinary skill will recognize that elements may be added to removed from or modified within system without departing from the principles of the invention. For example systems consistent with the invention may have any number of services inputs outputs and DEOs.

In the embodiment shown in organization structure lists set of characteristics of a service such as a RESTful web service which may be defined and stored in a data structure representing the service. As shown in column the characteristics that may be stored to represent a web service include parent service name and description API method name and description Static URL Dynamic URL HTTP method Authentication Query String Encoding Body Encoding Request parameters requirements and details Request body type and details Response body type and details and Output DEO s .

Using these types of characteristics a service definition for representing the Yahoo Build Your Own Search Service BOSS API may be configured as 

In this exemplary embodiment the mapping or association between the output s of the service and one or more DEOs is stored along with the definition of the service as illustrated by row of data organization and by the outputDEOs characteristic in the service definition above. In other embodiments a mapping or association between the input s of the service and one or more DEOs may also be stored with the definition of a service. The mappings or associations between the inputs outputs of a service and DEO s may also be stored in other ways.

In some embodiments the service to DEO mapping information may include details about the equivalence of corresponding members of a service I O object and a DEO. In various embodiments information regarding the association between a DEO and the set of services that are associated with it is made accessible to a user aiding the user in building compositions of services.

One of ordinary skill will recognize that fields may be added to deleted from modified or reordered in data organization without departing from the scope of the invention. For example a row may be added to specify input DEOs that are associated with a service.

In various embodiments DEO execution engine may be implemented as a software program or application running on computing system such as a server. In various embodiments DEO execution engine may implement functions and operations that manage query and manipulate DEOs and service definitions and their associations. For example DEO execution engine may include functions and operations which enable user via a client application on computer to query a DEO data store for appropriate services and DEOs create and edit definitions and associations build workflows generate orchestration code and execute it. In some embodiments where the services employed are web services DEO execution engine may interact with compose and or execute services that are accessible via a network such as the Internet. In one specific exemplary embodiment DEO execution engine may implement the functionality associated with the controls shown on exemplary user interface of using a client server model where computer is the client and DEO execution engine is the server.

In the embodiment shown any client application running on computer may create and or interact with stored DEO data and stored service data through the DEO execution engine . For example a client application running on computer such as a composite service execution module that passes data from one service to another service during execution may first query the service to DEO mappings using the DEO execution engine before implementing the data passing. In some embodiments a client application running on computer may also directly interface not shown with a DEO Data Manager and or the DEO Data Store for functions not related to service and DEO definitions.

In the embodiment shown in DEO execution engine is operably connected to DEO Data Manager . In various embodiments DEO Data Manager controls the creation maintenance storage and retrieval of information related to service composition functions and DEOs which in the embodiment shown is stored in DEO Data Store . In various embodiments DEO Data Store may store service and DEO definitions as well as service DEO and DEO service associations or mappings.

In various embodiments DEO Data Store may be implemented as a networked distributed highly available key value data store such as Hadoop s HBase data store Amazon s SimpleDB data store or the Cassandra Gizzard or Redis data stores among others. In such embodiments a pseudo data base may be built on top of the key value data store as represented for example by DEO Data Manager which may be responsible for a set of queries and operations on the data. As shown DEO Data Manager may provide an interface used by DEO Execution Engine for interacting with the data in DEO Data Store . As mentioned in some embodiments DEO Data Manager may also provide an interface used by client applications running on computer such as a graphical services composition tool or the like.

In various embodiments wherein DEO Data Manager and DEO Data Store are implemented as a key value data store DEO Data Manager may provide the following features and functions 1 an interface that receives a unique key and returns a unique value associated to that key 2 an interface to create or update a value associated with a key 3 high availability and 4 low latency. Such embodiments by virtue of 3 and 4 may easily scale with the number of key value pairs stored.

In various embodiments instead of a key value data store any other kind of data store may be used such as a RDBMS with a SQL interface or the like as no particular type of data store implementation is critical to the present disclosure.

In various embodiments the service definitions DEO definitions and associations or mappings among them may be generated and maintained by users such as user as humans may comprehend difficult to recognize connections and correlations between the APIs of services and between DEOs. In such embodiments social collaborations may be leveraged to create and maintain large collections of DEO and service related data similar to the data management platform FluidDB.

One of ordinary skill will recognize that the exemplary system shown in is necessarily simplified for conciseness and clarity of explanation and that that elements and components may be added to removed from combined or modified within system without departing from the principles of the invention without departing from the scope of the invention. For example computer may be connected to DEO execution engine via a network such as network e.g. the Internet and or DEO execution engine may also be connected to DEO Data Manager via a network such as network . For another example system may be implemented such that the functionality of DEO execution engine and DEO Data Manager are combined in a single program application or server. For yet another example DEO Data Store may be implemented as multiple data stores with the data distributed among them.

As shown user interface includes a controls area and a work display area . Other arrangements are possible. A user who wishes to compose or connect two services for example serviceA and serviceB may employ the controls in controls area and the displays in work display area to determine 1 whether serviceA can be composed with or connected to serviceB i.e. whether the services are syntactically compatible and 2 which if any data objects link serviceA and serviceB i.e. whether the services are semantically compatible .

Checking for syntactic compatibility primarily deals with verifying whether the outputs of one service can be used as inputs to the other service. For example in order for serviceA to be composable with serviceB the Internet Media Type IMT returned as output by serviceA must be acceptable as input by serviceB. For example if serviceA returns images in JPEG format and serviceB accepts images of GIF format only then serviceA and serviceB are not syntactically compatible because they cannot be directly connected.

Adaptors which handle the conversion of formats JPEG GIF JSON XML PHP etc. the differences in data encoding schemes ASCII URL UTF 8 etc. and which address communication protocol differences SOAP REST etc. may be employed to make services syntactically compatible. In various embodiments structured definitions for web services see for example may be employed as a means of checking for and enabling syntactic composability of services.

The controls and displays of user interface enable a user to view and analyze the semantic differences and equivalences between input and output data objects of services. For instance the query controls and resultant displays of service and or DEO information allow a user to determine whether equivalent members are named differently in different services whether the same name is used to represent entirely different members by different services and the like such that the user may determine whether services are semantically compatible.

In the exemplary embodiment shown controls area includes 11 controls . More or fewer controls may be used. The functionality of each exemplary control will be described using the conventions of the exemplary implementation described in the following paragraph.

Service i will be represented as S. DEO j will be represented as D. Each service has a globally unique ID and each DEO has a globally unique ID. Those unique ids are hashed H e.g. using SHA1 to determine their key K in the data store e.g. DEO data store and the keys are represented in the following way K S H S and K D H D . Let O S be the set of DEOs that can be used to represent the output of service S and I S be the set of DEOs that can be used to represent the input of service S.

Create Service Definition control allows a user to create or modify the definition of a service in work display area and then store the service definition for example in a data store such as DEO data store . In various embodiments a created service definition may be assigned a unique ID such as a number or a string S and the unique ID may be used to store the service definition for example by hashing the unique ID e.g. H S and using the result e.g. K S as an index key into the data store. In some embodiments the service definition may be stored in association with a timestamp indicating the date and time that the definition was last modified.

In various embodiments a user may create or modify the definition of a service by modifying pseudo code and or graphical representations corresponding to features of the service in work display area . For example a user may use an editor to create and store a definition of a weather service as follows 

In some embodiments the output format of a service may also be created modified and stored by a user using user interface .

Create DEO Definition control allows a user to create or modify the definition of a DEO in work display area and then store the DEO definition for example in a data store such as DEO data store . In various embodiments a created DEO definition may be assigned a unique ID such as a number or a string D and the unique ID may be used to store the DEO definition for example by hashing the unique ID e.g. H D and using the result e.g. K D as an index key into the data store. In some embodiments the DEO definition may be stored in association with a timestamp indicating the date and time that the definition was last modified.

In various embodiments a user may create or modify the definition of a DEO by modifying pseudo code and or graphical representations corresponding to features of the DEO in work display area . For example a user may use an editor to create and store a definition of a DailyWeather DEO as follows 

Create Service Association control allows a user to create or modify an association or mapping between an input output of a service and an attribute characteristic or member of a DEO in work display area and then store the association or mapping for example in a data store such as DEO data store . In some embodiments the association or mapping may be stored as part of a service definition or a DEO definition.

In various embodiments a user may create or modify the definition of a service by modifying pseudo code and or graphical representations corresponding to features of the service in work display area . For an example with respect to the Weather Service service definition and the DailyWeather DEO definition above in some embodiments a user may use an editor to create and store a mapping between the DailyWeather DEO and the output of WebServiceX APIs weather service of the textual form 

Referring for a moment to there is depicted an exemplary user interface for creating and managing data exchange objects and web service compositions consistent with embodiments of the invention. In the embodiment shown a user has activated the Create Service Association control and the system has created a graphical display in work display area that allows the user to associate or map the outputs of a service named CNET service to the attributes of DEO named Money by drawing or dragging connectors and between the graphical representations of the service s outputs and the DEO s attributes .

More specifically in this example the user may have previously used the Create Service Definition control or the Service Definition query control to create and or display a definition of CNET service such as 

Similarly for this example the user may have previously used the Create DEO Definition control or the DEO Definition query control to create and or display a definition of Money DEO such as 

In some embodiments not shown the definition of the subject service s and DEO s may be displayed in work display area of for example in the lower portion of work display area at the same time as the mapping connections between the service s and the DEO s . Other techniques for presenting the relevant information to the user may also be used.

Using the information from the service definition s and the DEO definition s the user may determine the semantic compatibility or equivalence between service inputs outputs and DEOs and create mappings or associations between them. As shown in the user has determined that the CNET.TechProducts.TechProduct.MSRP output of CNET service is semantically equivalent to the Money.numericalAmount attribute of Money DEO and associated or mapped the two together as represented by graphical connector . Similarly the user has determined that the CNET.TechProducts.TechProduct.MSRP.currencyCode output of CNET service is semantically equivalent to the Money.currencyType attribute of Money DEO and associated or mapped the two together as represented by graphical connector . In various embodiments the system may automatically check whether the inputs outputs and attributes which a user associates with each other are also syntactically equivalent and if not employ an appropriate adaptor to resolve syntactic differences.

Some services may include a single output or input data object may contains subparts or portions of information that map to two or more DEO attributes and vice versa. For such situations various embodiments may provide functions e.g. a source code subprogram or module to separate the subparts and associate each with the appropriate DEO attribute or vice versa. For example if unlike the example above the returned XML object of the CNET service included the element TechProducts.TechProduct.MSRP having a string value that specified both the amount of money and the type of currency such as 399.00 then the system may separate the currency symbol and the numerical value using a regular expression such as d . s so as to map between the numerical portion of the CNET service output i.e. 399.00 and the Money.numericalAmount attribute of Money DEO CNET.TechProducts.TechProduct.MSRP Money.numericalAmount.

In various embodiments after a user has finished creating Service to DEO associations the system may save the associations using a key indexed storage scheme as described below.

One of ordinary skill will recognize that the exemplary user interface shown in is necessarily simplified for conciseness and clarity of explanation and that information and controls may be rearranged or presented differently without departing from the scope of the invention.

Referring again to Service Definition Query control allows a user to find and display a service definition s in work display area . For example upon activation of Service Definition Query control the system may prompt the user for the name and or unique ID of the service or generate the unique ID from the name and then use the name or unique ID e.g. S to retrieve the corresponding service definition from a data store such as DEO data store . In some embodiments a key for example as defined above for service S may be computed and sent to the data store and the data store may return the service definition that is retrieved using the key. In some embodiments the data store also may return a timestamp that specifies the latest modification time of the definition.

DEO Definition Query control allows a user to find and display a DEO definition s in work display area . For example upon activation of DEO Definition Query control the system may prompt the user for the name and or unique ID of the DEO or generate the unique ID from the name and then use the name or unique ID e.g. D to retrieve the corresponding DEO definition from a data store such as DEO data store . In some embodiments a key for example as defined above for DEO D may be computed and sent to the data store and the data store may return the DEO definition that is retrieved using the key. In some embodiments the data store also may return a timestamp that specifies the latest modification time of the definition.

Input DEO Query control allows a user to find a set or collection of DEOs that match a search parameter s e.g. DEOs that represent at least one input of a specified service and display them in work display area . For example upon activation of Input DEO Query control the system may prompt the user for the name and or unique ID of the service or generate the unique ID from the name and then use the name or unique ID e.g. S to retrieve information reflecting the corresponding input DEO s from a data store such as DEO data store .

In some particular embodiments to determine I S which is the set of DEO s that represent the input of service S the system may compute the data store key for I S such as H H S which is used to retrieve the appropriate set of input DEO s and which was previously used by the system to store the set of input DEO s when they were associated with service S . In some such embodiments the query may return a collection of DEO ids and a timestamp that tells the last time each DEO was associated with S which are displayed in work display area . In other embodiments the DEO definitions may be returned.

Output DEO Query control allows a user to find a set or collection of DEOs that match a search parameter s e.g. DEOs that represent at least one output of a specified service and display them in work display area . For example upon activation of Output DEO Query control the system may prompt the user for the name and or unique ID of the service or generate the unique ID from the name and then use the name or unique ID e.g. S to retrieve information reflecting the corresponding output DEO s from a data store such as DEO data store .

In some particular embodiments to determine O S which is the set of DEO s that represent the output of service S the system may compute the data store key for O S such as H H H S which is used to retrieve the appropriate set of output DEO s and which was previously used by the system to store the set of output DEO s when they were associated with service S . In some such embodiments the query may return a collection of DEO ids and a timestamp that tells the last time each DEO was associated with S which are displayed in work display area . In other embodiments the DEO definitions may be returned.

Services Compose Query control allows a user to determine whether two or more service can be composed or connected to each other and display the result in work display area . For example upon activation of Services Compose Query control the system may prompt the user for the names and or unique IDs of at least two services that the user wishes to form into a composite service and then use the names or unique IDs e.g. Sand S to retrieve information from a data store such as DEO data store reflecting whether at least one DEO exists that maps to an output input of Sand to an input output of S.

In some particular embodiments to determine if Sand Scan be composed the system performs computations to determine whether O S I S 0 i.e. to determine if S s output can be represented by at least one DEO that also represents S s input. In some such embodiments the system first retrieves O S and I S from a data store which returns a collection of output DEO IDs corresponding to Sand a collection of input DEO IDs corresponding to S. Then for each DEO in O S or I S if it has less elements the system determines whether the same DEO exists in I S or O S i.e. determines which DEOs in O S match a DEO in I S . In certain embodiments this determination can be done in O n time if the collections are represented as hash tables. The system adds each matching DEO if any to a list of matches which may be displayed in work display area . In some embodiments if the timestamp associated with a DEO in the list is newer than the timestamp in O S and I S then the matching step can be skipped.

Services Per DEO Query control allows a user to determine what service s are associated to a particular DEO and display the appropriate service s in work display area . In various embodiments this control may be useful for garbage collection of useless DEOs measuring the relevance of a DEO and the like. For example upon activation of Services Per DEO Query control the system may prompt the user for the name and or unique ID of the DEO or generate the unique ID from the name and then use the name or unique ID e.g. D to retrieve information reflecting the service s that are associated with the DEO from a data store such as DEO data store .

The processing for the Input DEO query control and the Input DEO query control illustrates embodiments that discover the DEOs associated to a particular service. In typical usage of the system the number of DEOs associated to a single service may be small while on the other hand the number of services associated to a single DEO may be large. Accordingly some embodiments provide two techniques for a user to determine the services that are represented by a DEO 1 techniques that determine and provide the list of services associated with a DEO Dand 2 techniques that determine and provide information indicating whether a specified service Sand a specified DEO Dare related.

Services Per DEO Query control provides one exemplary implementation of the former technique. In some particular embodiments Services Per DEO Query control causes the system to determine the key used to query the data store for the list of services associated with a DEO D computed as H H D . In various embodiments this query may return a timestamp of last modification an integer representing number of blocks and a first block wherein such embodiments divide the list of services into blocks of equal size. If there are multiple blocks the system queries for subsequent blocks using H concatenate H D i as the key where i is the block index and is greater than 0 as the first block i 0 is returned by the first query.

In such embodiments to determine if Sis associated to D the system may perform a query using H concatenate K D K S as the key and the returned value may an indicator of association for example a timestamp or yes no binary indicator. If the data store cannot find a value for this key e.g. the query returns null or some other non success indicator then there is no association between Sand D.

As with all the descriptions of queries in this disclosure the values retrieved by queries were previously stored in the data store at locations determined by the same keys that are later used to retrieve the values for instance upon activation of controls .

Services to DEO Mapping Query control allows a user to find and display associations or mappings between service s and DEO s in work display area . For example upon activation of Service Definition Query control the system may prompt the user for the name and or unique ID of a service and or DEO or generate the unique ID from the name and then use the names or unique IDs e.g. Sand D to retrieve information from a data store such as DEO data store describing the mapping or association between the specified DEO Dand inputs outputs of the specified service S.

In some particular embodiments the system first determines whether the specified DEO represents the output or input of the specified service. The processing described with respect to the Services Per DEO Query control the Input DEO query control and the Input DEO query control illustrates embodiments that determines whether a specified DEO represents the output or input of a specified service. Using such processing the system may determine whether a DEO Dis associated with or mapped to the service S and whether the DEO Dis in O S or in I S . Next the system may query the mapping definition e.g. by using H concatenate K S K D I as the key for a DEO in I S or H concatenate K S K D O for a DEO in O S . The returned information or values from the query will contain the mapping between attributes which were stored previously using the same key for example when the mapping was created.

In various embodiments as with the other query commands or controls the returned information from the Services to DEO Mapping Query control may be displayed to the user in work display area . For instance continuing the previous examples presented above activating the Services to DEO Mapping Query control and providing as inputs information identifying the Weather Service service and the DailyWeather DEO may cause the system to retrieve or fetch and display in work display area mapping information such as 

In some embodiments the same information may be alternatively or simultaneously displayed in a graphical format similar to the graphical format shown in or . Other types of graphical or non graphical displays may also be used.

Compose and Execute control allows a user to build workflows and generate orchestration code in work display area and execute the code. In various embodiments Compose and Execute control may invoke a service execution module e.g. a module of DEO execution engine which calls the services which a user has composed or interconnected and passes data from one service to another during execution according to service to deo to service mappings or associations as described in this disclosure.

For example the system may display a composition web service in the work display area for example as shown in and upon activation of the Compose and Execute control may execute the Get Product Details service pass its outputs and to the corresponding inputs and of Currency Converter service as mapped according to Money DEO and provide information from the outputs and of Currency Converter service to the user.

One of ordinary skill will recognize that the exemplary user interface shown in is necessarily simplified for conciseness and clarity of explanation and that information and controls may be added removed rearranged or presented differently without departing from the scope of the invention.

As shown in the example of process begins with creating a definition for a service stage . For example in some embodiments a user such as user may define a service using a graphical composition tool executing as a client on computer and DEO execution engine functioning as a server may create the service definition.

Next process creates a data exchange object i.e. DEO to represent an interface object such as an output data object or an input data object of a service stage for example the service whose definition was created in stage . For example in some embodiments user may define a DEO using a graphical composition tool executing as a client on computer and DEO execution engine functioning as a server may create the DEO definition.

In stage process creates a mapping of the interface object of the service to the DEO. For example in some embodiments user may define a mapping or association using a graphical composition tool executing as a client on computer and DEO execution engine functioning as a server may create the data representing the mapping.

At stage process stores the service definition the data exchange object and the mapping. For example in various embodiments DEO execution engine may store the service definition in DEO data store which is managed by DEO data manager . In various embodiments DEO execution engine may also store the DEO definition in DEO data store which is managed by DEO data manager . In various embodiments the service definition and or the DEO definition may be stored according to a key based on a unique ID of the service for example as described previously. In various embodiments DEO execution engine may also store the mapping data in DEO data store which is managed by DEO data manager . In some embodiments the mapping may be stored according to a key based on a unique ID of the DEO for example as described previously. In other embodiments the mapping may be stored as part of a service definition and or a DEO definition.

Process then determines whether two services may be connected using the stored DEO definition the services definitions and the mapping stage . For example in some embodiments DEO execution engine may execute code to implement the functionality described previously with respect to the Services Compose Query control and provide to user via computer an indication of whether two services may be connected to form a composite service.

At stage process branches based on whether or not the two services may be connected e.g. whether the two services are composable . If the services cannot be connected stage No then process ends. If on the other hand the two services can be connected e.g. an output s of one service map to a DEO that maps to an input s of the other service the process proceeds to stage .

At stage process connects the two services to create a new composition service. For example in some embodiments DEO execution engine may execute code to implement the functionality described previously with respect to Compose and Execute control and provide to user via computer prompts for input data required by the composition service and data representing the output data produced by the composite service.

One of ordinary skill will recognize that stages may be added to deleted from modified or reordered in process without departing from the scope of the invention. For example stage may be combined with each of stages to store definitions and mappings as they are created. For another example stage may be eliminated for example in situations where a user does not want to execute the composition service.

Computing system includes a number of components such as a central processing unit CPU a memory an input output I O device s and a nonvolatile storage device . System can be implemented in various ways. For example an implementation as an integrated platform such as a workstation server personal computer laptop smart phone etc. may comprise CPU memory nonvolatile storage and I O devices . In such a configuration components and may connect and communicate through a local data bus and may access a database implemented for example as a separate database system via an external I O connection. I O component s may connect to external devices through a direct communication link e.g. a hardwired or local wifi connection through a network such as a local area network LAN or a wide area network WAN and or through other suitable connections. System may be standalone or it may be a subsystem of a larger system.

CPU may be one or more known processing devices such as a microprocessor from the Core 2 family manufactured by the Intel Corporation of Santa Clara Calif. Memory may be one or more fast storage devices configured to store instructions and information used by CPU to perform certain functions methods and processes related to embodiments of the present invention. Storage may be a volatile or non volatile magnetic semiconductor tape optical or other type of storage device or computer readable storage medium including devices such as CDs and DVDs meant for long term storage.

In the illustrated embodiment memory contains one or more programs or subprograms loaded from storage or from a remote system not shown that when executed by CPU perform various operations procedures processes or methods consistent with the present invention. Alternatively CPU may execute one or more programs located remotely from system . For example system may access one or more remote programs via network that when executed perform functions and processes related to or implementing embodiments of the present invention.

In one embodiment memory may include a program s that implements a web services connection application including implementing process and user interface displays as shown in and or a program that implements a DEO execution engine . In some embodiments memory may also include other programs or applications that implement other methods and processes that provide ancillary functionality to the invention. For example memory may include programs that gather from various sources organize store and or generate web services data used by DEO execution engine and programs that communicate with other systems such as DEO data manager .

Memory may be also be configured with other programs not shown unrelated to the invention and or an operating system not shown that performs several functions well known in the art when executed by CPU . By way of example the operating system may be Microsoft Windows Unix Linux an Apple Computers operating system Personal Digital Assistant operating system such as Microsoft CE or other operating system. The choice of operating system and even to the use of an operating system is not critical to the invention.

I O device s may comprise one or more input output devices that allow data to be received and or transmitted by system . For example I O device may include one or more input devices such as a keyboard touch screen mouse and the like that enable data to be input from an administrative user such as a system operator. Further I O device may include one or more output devices such as a display screen CRT monitor LCD monitor plasma display printer speaker devices and the like that enable data to be output or presented to a user such as user . I O device may also include one or more digital and or analog communication input output devices that allow computing system to communicate for example digitally with other machines and devices. Other configurations and or numbers of input and or output devices may be incorporated in I O device .

In the embodiment shown system is connected to a network such as the Internet a private network a virtual private network or other network which may include network of which may in turn be connected to various systems e.g. DEO data manager and computing machines not shown in such as personal computers laptop computers and or smart phones of users who wish to utilize DEO execution engine . In general system may input data from external machines and devices and output data to external machines and devices via network .

In the exemplary embodiment shown in database is a standalone database external to system . In other embodiments database may be hosted by system . In various embodiments database may manage and store data used to implement systems and methods consistent with the invention. For example database may implement DEO data store and or manage and store data structures such as data structure which contain service DEO and mapping data used by DEO execution engine graphical composition tool or user interface displays such as those illustrated in .

Database may comprise one or more databases that store information and are accessed and or managed through system . By way of example database may be an Oracle database a Sybase database or other relational database. Systems and methods consistent with the invention however are not limited to separate data structures or databases or even to the use of a database or data structure.

The above disclosure provides examples of systems and methods for composing compound services by the aggregation and connecting of other existing services. In various embodiments the connections between service are made and or represented through use of abstract intermediate object types referred to as data exchange objects DEOs that represent the data objects that are exchanged between services. Various embodiments provide a user with the ability to determine the validity of a connection by testing whether the outputs of one service in whole or in part can be mapped to a particular DEO and that same DEO can be mapped to one of the possible inputs in whole or in part of a second service. Where two or more services can be connected they compose a new compound service. In various embodiments the systems and methods include functionality to perform queries returning the inputs outputs of DEOs to test whether two DEOs can be connected and to compose the new service.

It will be apparent to those skilled in the art that various modifications and variations can be made to the structures and methodologies described herein. Thus it should be understood that the invention is not limited to the examples discussed in the specification. Rather the present invention is intended to cover modifications and variations.

It will be appreciated that variants of the above disclosed and other features and functions or alternatives thereof may be combined into many other different systems or applications. Various presently unforeseen or unanticipated alternatives modifications variations or improvements therein may be subsequently made by those skilled in the art which are also intended to be encompassed by the following claims. Moreover the claims can encompass embodiments in hardware software or a combination thereof.

