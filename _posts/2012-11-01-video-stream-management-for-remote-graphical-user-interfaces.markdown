---

title: Video stream management for remote graphical user interfaces
abstract: Embodiments enable display updates other than a video stream in a graphical user interface (GUI) to be rendered, encoded, and transmitted exclusive of the video stream. A virtual machine generates a GUI that includes an encoded video stream and other display updates. A virtual graphics processing unit (VGPU) stack associated with the VM renders the other display updates of the GUI to a framebuffer. The rendered display updates are encoded and transmitted to a client for display. The encoded video stream, or a modified (e.g., reduced bit rate) version of the encoded video stream, may be transmitted to the client, such that the client can display the encoded video stream within the GUI. For example, the encoded video stream may be selectively transmitted to the client based on the performance capabilities of the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09372737&OS=09372737&RS=09372737
owner: VMware, Inc.
number: 09372737
owner_city: Palo Alto
owner_country: US
publication_date: 20121101
---
This application claims priority to U.S. provisional patent application No. 61 596 561 filed Feb. 8 2012 which is incorporated herein in its entirety.

Remote desktop technology allows a user of a client computing device to interact with a graphical user interface e.g. a desktop interface that is managed by a server computing device. The graphical user interface GUI includes display information to be presented on a display for a user. For example display updates generated by software applications executed by the server may be rendered to a framebuffer at the server and then transmitted to the client for display. The framebuffer stores pixel color values for every pixel for an output display. Remote desktop and computing applications export the GUI to a remote device referred to herein as the client device. Conversely user inputs e.g. mouse clicks and keystrokes at the client device may be transmitted to the server for input into applications or other software running at the server.

To limit the amount of data transferred between the server and client the GUI may be encoded. For example the server may compress every frame and or calculate differences between a current rendering e.g. frame of the desktop interface and a previous rendering and transmit the differences to the client rather than transmitting the entirety of the desktop interface.

Further the desktop interface may be virtual generated by a virtual machine VM executed by the server. In such virtual desktop infrastructures VDIs the GUI may be rendered by a virtual graphics processing unit VGPU stack associated with the VM encoded and transmitted to the client for display. When a video stream provided in encoded form is to be displayed within the desktop interface the VGPU decodes the encoded video stream and renders the decoded video stream within the desktop interface. The desktop interface including the decoded video stream is then encoded and transmitted to the client.

The methods and systems described herein enable display updates other than a video stream in a graphical user interface GUI such as a virtual desktop to be transmitted to a client exclusive of the video stream. In exemplary embodiments a VM executed by a server generates a GUI that includes an encoded video stream and other display updates. A virtual graphics processing unit VGPU stack associated with the VM renders the other display updates of the GUI to a framebuffer without decoding or rendering the video stream to the framebuffer. The server encodes the rendered display updates and transmits the encoded display updates to a client for display. In some embodiments the encoded video stream or a modified e.g. reduced bit rate version of the encoded video stream is transmitted to the client using a communication channel other than the communication channel used to transmit the encoded GUI such that the client can decode and display the encoded video stream within the GUI.

Embodiments described herein facilitate reducing server computing load in a virtual desktop infrastructure VDI by rendering display updates to a graphical user interface GUI other than a video stream and encoding and transmitting the rendered display updates exclusive of the video stream to a client. Accordingly the encoded video stream need not be decoded and rendered within the GUI by the server potentially reducing the volume e.g. the quantity and or the size of display updates that are encoded and transmitted to the client. As a result the utilization of processor and or network resources used to encode and transmit such display updates may also be reduced.

In some embodiments the encoded video stream is discarded by the server. In other embodiments the server transmits the encoded video stream to the client separately from other display updates in the GUI or modifies e.g. reduces the bit rate of the encoded video stream and transmits the modified version of the encoded video stream to the client separately from other display updates in the GUI. For example the server may determine the performance capabilities e.g. network bandwidth or a hardware attribute of the client and determine whether to prevent transmission of the encoded video stream transmit the original encoded video stream or transmit a modified version of the encoded video stream based on the performance capabilities.

In exemplary embodiments VM generates the GUI by instructing a virtual graphics processing unit VGPU stack that is associated with VM to draw and display graphical elements such as windows fields icons images and input controls e.g. buttons of the GUI. The instructions to the VGPU may be referred to as display updates. VGPU stack includes for example a graphics driver not shown which may be included in VM a software emulated or virtual graphics device not shown such as a virtual graphics adapter and a virtual display device not shown such as a virtual monitor e.g. liquid crystal display . Software applications executed by VM interact with the graphics driver of VGPU stack either directly or via the guest OS. The virtual graphics device interacts with guest software executing in the VM as would a physical graphics device.

VGPU stack renders the display updates in the GUI as instructed by VM . In exemplary embodiments VGPU stack renders the display updates by drawing a frame of pixels depicting the graphical elements to one or more framebuffers not shown provided by the virtual graphics device not shown . Successive frames may be drawn by updating the framebuffer s such as by drawing successive frames to alternating framebuffers or multiple buffering. 

A GUI encoder encodes the rendered display updates and transmits the encoded display updates to client . The display updates may be encoded for example by applying a lossless or lossy data compression algorithm to a drawn frame or to modified pixel values within the frame and or by applying video compression to a sequence of frames drawn by VGPU stack . Video compression may include interframe compression such as encoding a given frame as a set of differences between that frame and a previous frame.

Client receives the encoded display updates and decodes the encoded display updates using a GUI decoder . The decoded display updates are displayed at a view screen of client to update the GUI as instructed by VM such as by rendering the decoded display updates to a framebuffer of a physical graphics device that is connected to a physical display device.

In some scenarios a video stream is displayed within the GUI. For example a user of client may access a video stored at server using a local video playback application or may access a video hosted on a network e.g. the World Wide Web using a network streaming application both of which are executed at server by VM . Such videos are typically provided in the form of an encoded video stream which enables the video to be compressed using a video specific compression algorithm e.g. including interframe compression . For example a video stream may be compressed using the H.264 standard for video compression. Accordingly displaying the video stream using the process described above may involve decoding the encoded video stream generating display updates based on the video stream and rendering the display updates to the framebuffer using VGPU stack . Such an implementation would trigger a display update in the GUI each time successive frames of the video stream differ even if nothing within the GUI other than the video stream was modified. As a result GUI encoder would encode and transmit the display update for each such change essentially re encoding the video stream. In addition to imposing a computing load on server such an implementation may provide a video stream that client is incapable of displaying at an acceptable quality level e.g. frame rate due to performance limitations of client .

VGPU stack renders display updates in the GUI other than the video stream to the framebuffer. VGPU stack may or may not render the video stream depending on a configuration of server and or a configuration provided by client such as a configuration parameter indicating that client supports video redirection e.g. receiving the encoded video stream in a communication channel separate from that used to transmit other display updates .

When the configuration specifies that the video stream should not be rendered by VGPU stack VGPU stack keeps the encoded video stream separate from other display updates in the GUI. For example VGPU stack may substitute a placeholder for the encoded video stream within the GUI. In some embodiments VGPU stack substitutes a placeholder for the video stream by rendering the area of the GUI occupied by the video stream as a solid color and or as a textual message or image indicating that the encoded video stream has been suppressed. GUI encoder encodes the rendered display updates which exclude the video stream and transmits the encoded display updates to client as described above with reference to .

When the configuration specifies that the video stream should be rendered by VGPU stack VGPU stack decodes and renders the video stream to the framebuffer with the other display updates. GUI encoder encodes the rendered display updates including the video stream. Optionally GUI encoder may exclude the video stream and or substitute a placeholder for the video stream as described above when encoding the rendered display updates. For example GUI encoder may determine whether to encode the video stream based on a configuration parameter provided by client . Performing such exclusion and or substitution at GUI encoder enables system to accommodate scenarios in which video redirection capabilities change during the computing session in which the GUI is presented. For example if client becomes unable to support video redirection due to a malfunction client may request that GUI encoder include the video stream when encoding display updates. Similarly if the computing session is disconnected from a first client that supports video redirection and reconnected to a second client that does not support video redirection the second client may request that GUI encoder include the video stream when encoding display updates. In response to such a request GUI encoder encodes the video stream along with the other display updates and transmits the encoded display updates to client .

In exemplary embodiments rendering and encoding display updates other than the video stream for transmission to client avoids decoding of the video stream by VGPU stack and re encoding of the decoded video stream as display updates within the GUI by GUI encoder . Accordingly the utilization of computing resources e.g. processor cycles and or network bandwidth associated with providing the GUI to client may be significantly reduced. Such a computing resource utilization reduction may be especially pronounced where server provides GUIs to a plurality of clients . In some embodiments VGPU stack decodes and renders the video stream to the framebuffer but GUI encoder excludes the video stream when encoding display updates. Such embodiments incur some computing resource e.g. processor cycles utilization due to the decoding and rendering but still exhibit reduced computing resource e.g. processor cycles and network bandwidth utilization by avoiding encoding and transmission of display updates based on the video stream.

Further where client is a device with limited computing resources such as a smart phone or a device with limited network bandwidth the encoded video stream may not be displayable at client at an acceptable level of quality. For example client device may display only a portion of the frames in the video stream also known as dropping frames potentially causing the video stream to be unintelligible. In such scenarios omitting the encoded video stream from display updates transmitted to client may not negatively affect the computing experience of a user at client .

Exemplary embodiments omit decoding and rendering of the video stream using VGPU stack at the level of a graphics driver or a virtual device. For example VGPU stack may when queried for capabilities by the guest OS of VM advertise hardware acceleration of one or more video decoding operations e.g. motion compensation de interlacing decryption post processing and or supported encodings . Accordingly software applications such as local video playback application and network streaming application may delegate decoding and rendering of an encoded video stream to VGPU stack using a standard general purpose interface that supports hardware acceleration such as DirectX Video Acceleration DXVA provided by Microsoft Windows . Accordingly the video stream may be decoded and rendered or omitted as determined by VGPU stack . Such embodiments enable server to accommodate video streams provided by any software application rather than accommodating only applications that use a specialized application programming interface API .

In some embodiments the encoded video stream is not provided to client . In other embodiments the encoded video stream is optionally transmitted to client . In such embodiments an intercept module executed by server captures the encoded video stream from VGPU stack using a stream capture component . A control module of intercept module selects one of three available transmission actions a preventing transmission of the encoded video stream b transmitting the encoded video stream and c transmitting a modified version of the encoded video stream.

As one example control module may be configured to always select a predetermined transmission action. As another example intercept module may be configured to select a transmission action based on a preference or configuration associated with VM with client and or with the user of client . In addition or alternatively control module may select a transmission action based on client performance capabilities e.g. provided by a capabilities module as described in more detail below.

Intercept module performs the selected transmission action. When prevention of transmission is selected intercept module discards the encoded video stream such that the encoded video stream is not transmitted to client . When transmission of the encoded video stream is selected intercept module transmits the original encoded video stream as received from VGPU stack to client . In exemplary embodiments GUI encoder transmits the encoded display updates to client using a first communication channel e.g. a first network socket and intercept module transmits the encoded video stream to client using a second communication channel e.g. a second network socket .

Client receives the encoded video stream and decodes the encoded video stream using a video decoder . Video decoder may include a hardware decoder and or a software decoder executed by a processor of client . For example some examples of client such as a netbook may not include a hardware decoder. Other examples of client such as a desktop computer may include a hardware decoder e.g. a graphics processing unit GPU capable of performing at least some video decoding hardware acceleration. Whether implemented as hardware software or both video decoder decodes the encoded video stream and client renders the decoded video stream within the GUI using a video overlay component such that the decoded video stream is displayed within the GUI to the user of client .

When transmission of a modified version of the encoded video stream is selected prior to transmitting the video stream intercept module modifies the encoded video stream using a transcoder . In exemplary embodiments transcoder modifies the encoded video stream s encoding bit rate frame rate and or resolution. For example transcoder may reduce the bit rate of the encoded video stream by decoding the video stream and re encoding the decoded video stream using a video compression algorithm that achieves a higher compression ratio than that achieved by the compression algorithm used to encode the original encoded video stream and or using video compression parameters that allow a greater amount of data loss than allowed by the parameters used to encode the original encoded video stream. As another example transcoder may decode the video stream scale the decoded video stream to a lower resolution than the resolution of the original encoded video stream and encode the scaled video stream. Such modification enables server to reduce the network bandwidth used to transmit the encoded video stream to client and or to reduce the computing load incurred by client in decoding the encoded video stream.

In exemplary embodiments control module also transmits control information associated with the video stream and or with the GUI to client . The control information includes video stream attributes e.g. the video compression format the resolution the frame rate and or the bit rate of the video stream one or more dimensions e.g. the width and or height of the video stream the position e.g. an x coordinate a y coordinate and or a z coordinate of the video stream within the GUI and or compositing information associated with the video stream and the GUI e.g. which graphical elements if any underlay or overlay the video stream in the GUI . Video overlay component of client renders the decoded video stream within the GUI based on the control information. For example if other graphical elements in the GUI overlap the video stream video overlay component may overlay the video stream on the graphical elements that are positioned below the video stream e.g. elements having a lower z coordinate than that of the video stream and overlay the graphical elements that are positioned above the video stream e.g. elements having a higher z coordinate than that of the video stream on the video stream. Accordingly aside from any modification performed by transcoder the video stream is displayed in view screen of client as the video stream would be displayed to a local user at server but without incurring the computing resource utilization of decoding the video stream and re encoding the video stream within the GUI at server .

As described above in some embodiments VGPU stack and or GUI encoder provides a message and or an image indicating that the video stream has been suppressed. When the encoded video stream is transmitted to client video overlay component may overlay the video stream on such an indication whereas when the encoded video stream is discarded the indication is shown. In other embodiments no such indication is provided by server and when server discards the encoded video stream video overlay component renders a message or image indicating the suppression of the video stream at the position e.g. as indicated by the control information of the video stream within the GUI. For example video overlay component may display a message such as Video stream suppressed at remote desktop. 

As described above control module may select a transmission action based on a configuration of control module VM client and or the user of client . In some embodiments the transmission action is selected based on one or more performance capabilities of client . In such embodiments capabilities module determines client performance capabilities such as a network bandwidth of client a hardware attribute of client e.g. processor speed amount of memory and or presence of a hardware video decoder hardware acceleration of one or more video decoding operations e.g. motion compensation de interlacing decryption post processing and or supported encodings a resolution of client and or a frame rate of video displayed at client . For example the client performance capabilities may be stored as a profile associated with client and may be manually or automatically defined.

In some embodiments capabilities module determines client performance capabilities at least in part by receiving the capabilities from client . In the embodiment shown in capabilities module receives the client performance capabilities via a view agent that communicates with client . For example view agent may operate as a proxy for client such that capabilities module can request and receive capabilities of client from view agent which relays requests and responses between capabilities module and client . In addition or alternatively client may initiate a transmission of its performance capabilities to capabilities module for example when initializing a remote desktop session with server .

Control module receives the performance capabilities from capabilities module and selects a transmission option based on the performance capabilities. As an example control module may select preventing transmission of the encoded video stream or modifying the encoded video stream e.g. to reduce the bit rate if client does not include a hardware video decoder.

In exemplary embodiments control module selects a transmission option by comparing a client performance capability to a predetermined threshold value. For example if the network bandwidth of client e.g. the bandwidth from server to client is less than a minimum video streaming threshold value e.g. 500 kilobits per second kbps control module may select preventing transmission of the encoded video stream such that the video stream does not interfere with display of the GUI. If the network bandwidth is greater than the minimum video streaming threshold value and less than a moderate video streaming threshold value e.g. 1000 kbps control module may select modifying the encoded video stream to reduce the bit rate such that the video stream may be transmitted to client without interfering with the display of the GUI. If the network bandwidth is greater than the moderate video streamlining threshold value control module may select transmitting the original encoded video stream.

Threshold values may be predetermined as described above or may be determined by control module based on attributes of the encoded video stream. In an exemplary embodiment control module selects the transmission option in part by calculating a minimum video streaming threshold value based on the bit rate of the encoded video stream received by stream capture component . For example the threshold value may be equal to the sum of the bit rate of the encoded video stream an estimated average bandwidth associated with transmitting display updates in the GUI and optionally a predetermined bandwidth overhead value representing an estimated amount of bandwidth used by client for purposes other than displaying the GUI and or representing an estimated amount by which the available bandwidth may fluctuate. In another embodiment control module calculates a desired resolution threshold value equal to the resolution of the encoded video stream received by stream capture component .

In some embodiments control module selects the transmission option based on a plurality of performance capabilities. For example a first set of threshold values e.g. minimum processor speed may be applied when client includes a hardware video decoder and a second set of threshold values may be applied when client does not include a hardware video decoder .

In one embodiment when control module selects modifying the video stream transcoder modifies the encoded video stream based on a predetermined set of target attributes such as a target bit rate a target frame rate a target resolution and or a target encoding. For example whenever modification is selected transcoder may modify the encoded video stream by decoding the encoded video stream and re encoding the decoded video stream using a predetermined resolution and or a predetermined bit rate expected to enable client to decode and display the video stream.

In another embodiment transcoder modifies the encoded video stream based on the performance capabilities of client such as by determining e.g. calculating one or more target attributes for the video stream based on the performance capabilities and modifying the encoded video stream using the determined target attributes. As one example transcoder may determine a target encoding from a set of encodings supported by client and re encode the video stream using the target encoding. As another example transcoder may determine a target resolution that is equal to the resolution of client and modify the encoded video stream by scaling the video stream such that the resolution of the transmitted video stream is less than or equal to the target resolution. As yet another example transcoder may reduce the bit rate of the video stream to a target bit rate that is based on the processor speed and or bandwidth of client .

In some embodiments transcoder determines a target attribute by evaluating a mathematical function e.g. a stepwise or continuous function using one or more client capabilities as input values. For example such a function may provide a target bit rate that is positively correlated with the processor speed and or the bandwidth of client .

Some performance capabilities such as processor speed and the presence of a hardware video decoder are static. Other performance capabilities such as bandwidth and frame rate may be dynamic. Accordingly the process of determining client performance capabilities and selecting a transmission action may be performed repeatedly such that control module can adapt the transmission action as the client performance capabilities change over time. For example if client is a mobile device the bandwidth of client may change significantly as client moves out of range a wireless local area network WLAN and begins communicating with server using a mobile data e.g. 3G or 4G network. Similarly client may detect and report to capabilities module via view agent the frame rate of encoded video stream as it is decoded and rendered to view screen . If the detected frame rate is less than the frame rate of the encoded video stream transmitted to client control module may select modifying the video stream to reduce the bit rate.

The operations described herein may be performed by a computer or computing device. A computer or computing device may include one or more processors or processing units system memory and some form of computer readable storage media. Computer readable storage media are tangible and non transitory and store information such as computer readable instructions data structures program modules or other data. Exemplary computer readable storage media include hard disk drives flash memory drives digital versatile discs DVDs compact discs CDs and magnetic tape cassettes.

The operations illustrated and described herein may be implemented as computer executable instructions encoded on a computer readable medium in hardware programmed or designed to perform the operations or both. Aspects of the disclosure transform a general purpose computer into a special purpose computing device when programmed to execute the operations described herein.

The order of execution or performance of the operations in embodiments of the disclosure illustrated and described herein is not essential unless otherwise specified. That is the operations may be performed in any order unless otherwise specified and embodiments of the disclosure may include additional or fewer operations than those disclosed herein. For example it is contemplated that executing or performing a particular operation before contemporaneously with or after another operation is within the scope of aspects of the disclosure.

When introducing elements of aspects of the disclosure or the embodiments thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

Having described aspects of the disclosure in detail it will be apparent that modifications and variations are possible without departing from the scope of aspects of the disclosure as defined in the appended claims. As various changes could be made in the above constructions products and methods without departing from the scope of aspects of the disclosure it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

