---

title: Secure inter-module communication mechanism
abstract: Methods, apparatuses, and systems directed to facilitating secure, structured interactions between code modules executing within the context of a document processed by a user agent, such as a browser client, that implements a domain security model. In a particular implementation, a module connector script or object loaded into a base document discovers listener modules and sender modules corresponding to different origins or domains, and passes information between them. In this manner, a listener module may consume and use information from a sender module located on the same page simply by having an end-user add both modules to a web page without having to explicitly define any form of interconnection. For example, a photo module may access a user account at a remote photo sharing site, and provide one or more photos to a module that renders the photographs in a slide show.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09424551&OS=09424551&RS=09424551
owner: Yahoo! Inc.
number: 09424551
owner_city: Sunnyvale
owner_country: US
publication_date: 20120130
---
This application is a continuation of U.S. Non Provisional application Ser. No. 12 207 430 filed on Sep. 9 2008 now U.S. Pat. No. 8 108 771 entitled Secure Inter Module Communication Mechanism which is a continuation of U.S. Non Provisional application Ser. No. 11 845 538 filed on Aug. 27 2007 now U.S. Pat. No. 8 108 770 entitled Secure Inter Module Communication Mechanism each of the non provisional applications being incorporated herein by reference.

The present disclosure generally relates to communication between code objects executable within the context of a web page or other structured document processed by a browser or other client application.

Interactive systems connected by wide area networks such as the Internet have steadily evolved into vibrant mediums for information exchange social interaction and sharing of digital media. Internet users typically maintain one or more accounts with various service providers that feature customizable personal pages such as personal home pages e.g. my.yahoo.com etc. personal pages on social network sites e.g. facebook.com myspace.com etc. and the like. To enhance the utility and customization of such pages to end users service providers sometimes allow users to customize their pages with one or more functional modules or widgets hereinafter referred to as modules .

In web or Internet environments these modules can include HTML code and scripts such as JavaScript and Asynchronous JavaScript and XML AJAX that execute within the context of a client application such as a browser to achieve a variety of useful or entertaining functions. For example modules can be developed to display content such as blog entries news headlines or podcasts obtained from Really Simple Syndication RSS feeds. Other modules can be developed to display a slideshow of photos hosted on a content aggregation site such as flickr.com. Other modules can display real time stock quotes. In many instances the modules appear in a base HTML document as frames or Inline Frames iframes which makes it possible to embed another HTML document inside the base HTML document.

The service providers maintaining these customizable pages may develop a number of modules from which users may select and add to their pages. Given the wide variety of functions that modules can perform and the seemingly unlimited creativity of users however some service providers also provide an open development environment that allows third parties to develop modules as well. Given the security issues involved in allowing third party modules however service providers also typically rely on certain measures to minimize the security concerns regarding third party modules. Specifically content in different windows and frames of a web page can interact in powerful ways by scripting with the document object model. However since a browser client can simultaneously display unrelated content such as a base page and one or more modules in its various windows and frames certain policies must be applied to protect data integrity and privacy of information. If no security measures are taken a module executing in one frame might be able to learn information in other modules or the base document. To allow unfettered access in this manner could be a breach of the user s privacy.

Accordingly most publicly available browser clients such as Mozilla Firefox and Microsoft Internet Explorer support a domain security model that only allows interactions with content from the same origin. For example an object of an iframe corresponding to one domain e.g. http yahoo.com may not access the content of another frame or the base document if the content is sourced from another domain e.g. https example.com . As to Javascript for instance to prevent cross site security problems browsers enforce the same origin policy in the javascript object model. That is scripts running in one iframe may not access any objects inside another iframe unless both pages in the iframes come from the same origin. Some browsers consider two pages to have the same origin if the protocol port if given and host are the same for both pages. Without domain security a rogue page could snoop on another page access cookies outside its domain or manipulate content using Dynamic HyperText Markup Language DHTML .

Service providers may take advantage of the domain security model supported by standard browsers in connection with third party modules. For example a service provider may serve HTML documents including a third party module or references e.g. src attribute to the third party module in iframes corresponding to a different origin or domain from the base document as well as documents embedded in other iframes. In this manner operation of a given third party module is effectively contained within the context of its corresponding iframe.

The present invention provides methods apparatuses and systems directed to facilitating secure structured interactions between code modules executing within the context of a document processed by a user agent such as a browser client that implements a domain security model. In a particular implementation a module connector script or object loaded into a base document discovers listener modules and sender modules corresponding to different origins or domains and passes information between them. In this manner a listener module may consume and use information from a sender module located on the same page simply by having an end user add both modules to a web page without having to explicitly define any form of interconnection. For example a photo module may access a user account at a remote photo sharing site and provide one or more photos to a module that renders the photographs in a slide show.

Database system is a network addressable system that may host a database application and may operate in conjunction with a variety of network applications such as a social network system a customizable user home page e.g. my.yahoo.com etc. Database system is accessible to one or more hosts over a computer network. In one implementation database may store various types of information such as user account information user profile data addresses preferences financial account information. Database may also store content such as digital content data objects and other media assets. A content data object or a content object in particular implementations is an individual item of digital information typically stored or embodied in a data file or record. Content objects may take many forms including text e.g. ASCII SGML HTML images e.g. jpeg tif and gif graphics vector based or bitmap audio video e.g. mpeg or other multimedia and combinations thereof. Content object data may also include executable code objects e.g. games executable within a browser window or frame podcasts etc. Structurally database connotes a large class of data storage and management systems. In particular implementations database may be implemented by any suitable physical system including components such as database servers mass storage media media library systems and the like. Module hosting platform hosts modules developed internally by service provider site as well as modules developed by third parties. Data store stores module definition data such as computer program code HTML code scripts Adobe Flash swf objects and the like.

In a particular implementation a network application may access database system to retrieve add or modify data stored therein as required to provide a network application such as a social network application or customizable home page to one or more users. In response to a request for a home page from a given user network application server may access database system to a retrieve page format and layout information from a corresponding user account. The layout information may identify among other things modules that the user has added to his or her page. Network application may then access module hosting platform in order to obtain or generate HTML code and other content for adding the modules identified in the layout information. Network application may then merge this content into a base document or page template and transmit the merged page to the user.

Client systems are operably connected to the network environment via a network service provider or any other suitable means. Client systems may include personal computers or mobile devices such as lap top computers personal digital assistants PDAs etc. Clients systems may include one or more processors a memory a network interface one or more input output I O devices and a system bus interconnecting these components. Client systems may also include an operating system and a user agent such as a browser client operative to interact with service provider site . Browser clients may include Microsoft Internet Explorer Mozilla Firefox Apple Safari Netscape Navigator and any other suitable user agent. Such browser clients support a domain security model that disallows interaction between content e.g. code objects and scripts served from different origins. In a particular implementation an origin is defined as a combination of a host name port and protocol. A host name could be an IP address or a domain name. A port refers to a Transport Control Protocol Internet Protocol TCP IP port while protocol refers to protocol layers above the transport layer such as HTTP S HTTP HTTP over Secure Sockets Layer HTTPS . Still further some browsers consider an IP address e.g. 66.213.145.93 and a domain name that resolves to that IP address to be different origins when used in connection with iframes.

The server host systems described herein such as network application server may be implemented in a wide array of computing systems and architectures. Still further the system architecture for client systems may be quite similar to server system architectures. For example the system architecture may further include I O systems such as a mouse keyboard and a display device. The following describes example computing architectures for didactic rather than limiting purposes.

The elements of hardware system are described in greater detail below. In particular network interface provides communication between hardware system and any of a wide range of networks such as an Ethernet e.g. IEEE 802.3 network etc. Mass storage provides permanent storage for the data and programming instructions to perform the above described functions implemented in the location server whereas system memory e.g. DRAM provides temporary storage for the data and programming instructions when executed by processor . I O ports are one or more serial and or parallel communication ports that provide communication between additional peripheral devices which may be coupled to hardware system .

Hardware system may include a variety of system architectures and various components of hardware system may be rearranged. For example cache may be on chip with processor . Alternatively cache and processor may be packed together as a processor module with processor being referred to as the processor core. Furthermore certain embodiments of the present invention may not require nor include all of the above components. For example the peripheral devices shown coupled to standard I O bus may couple to high performance I O bus . In addition in some embodiments only a single bus may exist with the components of hardware system being coupled to the single bus. Furthermore hardware system may include additional components such as additional processors storage devices or memories.

As discussed below in one implementation the operations of one or more of the physical servers described herein are implemented as a series of software routines run by hardware system . These software routines comprise a plurality or series of instructions to be executed by a processor in a hardware system such as processor . Initially the series of instructions may be stored on a storage device such as mass storage . However the series of instructions can be stored on any suitable storage medium such as a diskette CD ROM ROM EEPROM etc. Furthermore the series of instructions need not be stored locally and could be received from a remote storage device such as a server on a network via network communication interface . The instructions are copied from the storage device such as mass storage into memory and then accessed and executed by processor .

An operating system manages and controls the operation of hardware system including the input and output of data to and from software applications not shown . The operating system provides an interface between the software applications being executed on the system and the hardware components of the system. According to one embodiment of the present invention the operating system is the Windows 95 98 NT XP Vista operating system available from Microsoft Corporation of Redmond Wash. However the present invention may be used with other suitable operating systems such as the Apple Macintosh Operating System available from Apple Computer Inc. of Cupertino Calif. UNIX operating systems LINUX operating systems and the like. Of course other implementations are possible. For example the server functionalities described herein may be implemented by a plurality of server blades communicating over a backplane.

Still further the messenger script may also declare a messaging application programming interface API to allow modules to register as senders and receivers and to send and receive messages. The messaging API is also a published specification available to third party module developers. The messaging API allows module developers to create modules that can register with the module connector script as well as send and receive messages from other modules. In the example code of for instance the module includes a loadPhotosFromFlickr function that accesses the site flickr.com to obtain URLs to one or more photos uploaded to the user s account. The advertisePhotos function uses the interface declared by the messenger script to send messages. In the implementation shown the function includes a send command according to the messaging API that causes the messenger script to post the photo URLs in the message queue of the location src attribute of the corresponding messenger iframe see below . In a particular implementation the module connector script supports a plurality of channels. Each message identifies a channel and includes corresponding data to be sent on the channel. As illustrates the send command identifies a channel called pictures. Each channel is also associated with an output format that a listening module can expect. Additional channels could include text pictures music video etc. For example the pictures channel may require that the output be URLs to photos while the video channel may require the output to be URLs to videos. In one implementation a module can also register as a listener on one or more channels by issuing a send command on a listener channel. For example according to one possible messaging API a module developer may create a module that calls a receive function having the following API receive pictures handler and defines a handler e.g. handler function msg . The underlying messaging implementation may perform a send operation such as send channel listener data pictures to advertise the module s ability to listen to a particular channel. The messaging implementation stores pointers to the handlers for future reference so that when a message on that channel is received it can be routed to the handler function. In this manner the module relying on the receive messaging API issues a send command on the listener channel identifying the channel s on which it can receive messages. The receive function further identifies a handler for received messages handler defines a function that processes the message. For example if the message is a URL to a photo the handler function may define a process that retrieves the photo and adds it to a slideshow that is displayed to the user.

Other implementations are possible. For example operation of the message connector script could be adjusted by the end user who may configured one or more rules that define the modules with which a given module can interact or the channels on which a module can receive messages. Still further the time interval at which the module connector script operates can be a fixed value or can gradually increase at each operation.

The present invention has been explained with reference to specific embodiments. For example while embodiments of the present invention have been described as operating in connection with HTTP HTML and JavaScript the present invention can be used in connection with any suitable protocol environment. Other embodiments will be evident to those of ordinary skill in the art. It is therefore not intended that the present invention be limited except as indicated by the appended claims.

