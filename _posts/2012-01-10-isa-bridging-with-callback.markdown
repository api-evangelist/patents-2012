---

title: ISA bridging with callback
abstract: Methods, apparatuses and storage medium associated with ISA bridging with callback, are disclosed. In various embodiments, at least one computer-readable storage medium may include instructions configured to enable a target device with a target ISA, in response to execution of the instructions, to provide an ISA bridging layer to the target device to facilitate a library service to callback a callback function of an application. The library service may be implemented for the target ISA, and the application may be implemented at least partially for a source ISA that may be different from the target ISA. The ISA bridging layer may include a source ISA emulator and a library emulator configured to cooperate to enable the application to call the library service, and the library service to callback the callback function, across the two instruction set architectures. Other embodiments may be disclosed or claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09513977&OS=09513977&RS=09513977
owner: Intel Corporation
number: 09513977
owner_city: Santa Clara
owner_country: US
publication_date: 20120110
---
The present application is a national phase entry under 35 U.S.C. 371 of International Application No. PCT CN2012 070163 filed Jan. 10 2012 entitled ISA BRIDGING WITH CALLBACK which designated among the various States the United States of America. The Specification of the PCT CN2012 070163 Application is hereby incorporated by reference.

The background description provided herein is for the purpose of generally presenting the context of the disclosure. Unless otherwise indicated herein the materials described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.

A computing device may be characterized by its Instruction Set Architecture ISA . Typically a computing device may include Operating System OS services and the OS services may include the runtime library services LIB developed for the ISA of the computing device to facilitate application developers to develop applications to operate on the computing device. For example various smartphones may be characterized by the use of the ARM processor and its ISA. These smartphones may include an OS e.g. iOS or Android in support of the various applications developed for the respective smartphones. Some computing devices offer an ISA independent execution environment such as Java or Android Application Framework. However a large number of applications nonetheless include ISA dependent portions that invoke services of ISA dependent runtime libraries. Further these ISA dependent portions often include callback functions requiring callbacks from the ISA dependent runtime libraries and such callbacks are often not discovered until runtime rendering traditional approaches such as binary translation inadequate in addressing the needs.

Methods apparatuses and storage medium associated with ISA bridging with callback are disclosed. In various embodiments at least one computer readable storage medium may include instructions configured to enable a target device with a target ISA in response to execution of the instructions to provide an ISA bridging layer to the target device to facilitate a library service to callback a callback function of an application. The library service may be implemented for the target ISA and the application may be implemented at least partially for a source ISA that may be different from the target ISA. The ISA bridging layer may include a source ISA emulator and a library emulator configured to cooperate to enable the application to call the library service and the library service to callback the callback function across the two instruction set architectures.

Various aspects of the illustrative embodiments will be described using terms commonly employed by those skilled in the art to convey the substance of their work to others skilled in the art. However it will be apparent to those skilled in the art that alternate embodiments may be practiced with only some of the described aspects. For purposes of explanation specific numbers materials and configurations are set forth in order to provide a thorough understanding of the illustrative embodiments. However it will be apparent to one skilled in the art that alternate embodiments may be practiced without the specific details. In other instances well known features are omitted or simplified in order not to obscure the illustrative embodiments.

Various operations will be described as multiple discrete operations in turn in a manner that is most helpful in understanding the illustrative embodiments however the order of description should not be construed as to imply that these operations are necessarily order dependent. In particular these operations need not be performed in the order of presentation. Further descriptions of operations as separate operations should not be construed as requiring that the operations be necessarily performed independently and or by separate entities. Descriptions of entities and or modules as separate modules should likewise not be construed as requiring that the modules be separate and or perform separate operations. In various embodiments illustrated and or described operations entities data and or modules may be merged broken into further sub parts and or omitted.

The phrase in one embodiment or in an embodiment is used repeatedly. The phrase generally does not refer to the same embodiment however it may. The terms comprising having and including are synonymous unless the context dictates otherwise. The phrase A B means A or B . The phrase A and or B means A B or A and B . The phrase at least one of A B and C means A B C A and B A and C B and C or A B and C .

Computing device may be a server a desktop computer a laptop computer a tablet computer a smartphone a personal digital assistant a game console an Internet appliance or other computing devices of the like. Examples of computing device may include but are not limited to the servers available from Hewlett Packard of Palo Alto Calif. desktop or laptop computers available from Dell Computer of Austin Tex. smartphones and computing tablets available from Apple Computer of Cupertino Calif. game console available from Nintendo Corporation of Tokyo Japan and so forth.

Processor and memory arrangement is intended to represent a broad range of processor and memory arrangements including but not limited to arrangements with single or multi core processors of various execution speeds and power consumptions and memory of various architectures with one or more levels of caches and of various types such as dynamic random access FLASH and so forth. In various embodiments GPU may be configured to provide video decoding and or graphics processing functions to OS while display unit may be configured to enable multi media content e.g. HD video to be rendered thereon. Similarly GPU and display unit are intended to represent a broad range of graphics processors and display elements known in the art. Likewise network s is are intended to represent a broad range of networks known in the art. Examples of network s may include wired or wireless local or wide area private or public networks including the Internet.

OS including library services except for the application programming interface API defining invocation of library service is intended to represent a broad range of operating system elements known in the art. OS may include conventional components such as a kernel configured to manage memory resources schedule task execution and so forth and device drivers configured to manage various device resources. In embodiments OS may include a virtual machine in support of middleware if employed e.g. Android s virtual machine in support of the Android application framework. For the embodiments in addition to defining invocations of library services to facilitate invocation of callback functions of application the API of library services may also include the corresponding stubs and signatures of callback functions of application . Examples of OS may include but are not limited to Windows operating systems available from Microsoft Corporation of Redmond Wash. Linux available from e.g. Red Hat of Raleigh N.C. Android developed by the Open Handset Alliance or iOS available from Apple Computer of Cupertino Calif.

Similarly middleware is intended to represent a broad range of middleware elements known in the art including but not limited to ISA independent middleware. Examples of middleware may include but are not limited to Android Application Framework Java or other application frameworks or ISA independent execution environments.

Likewise application including callback functions is intended to represent a broad range of applications known in the art. Examples of application may include but are not limited to personal assistant productivity or social networking applications such as calendar word processing spreadsheet Twitter Facebook et al or generic application agents such as a browser. Examples of a browser may include but are not limited to Internet Explorer available from Microsoft Corporation of Redmond Wash. or Firefox available from Mozilla of Mountain View Calif.

Referring now to wherein illustrated is an example ISA bridging layer in accordance with various embodiments of the present disclosure. As shown for the embodiments ISA bridging layer may include ISA bridging loader source ISA emulator and target ISA Library emulator hereinafter simply LIB emulator configured to provide various runtime features and services including but not limited to dynamic binding services. Source ISA emulator may include source ISA context and binary translation engine . Source ISA emulator may maintain in source ISA context the execution context of source ISA architecture including but not limited to e.g. the current execution instruction pointer IP . Binary translator engine may be configured to translate source ISA instructions to target ISA instructions. LIB emulator may include target ISA Library LIB context gates and wrapper functions . LIB emulator may maintain in target ISA Library LIB context the execution context of target ISA Library. In various embodiments there may also be one corresponding pair of gate and wrapper function per library service configured to facilitate calling of library service by application across the source and target ISA architectures. Similarly there may be one corresponding pair of gate and wrapper function per callback function configured to facilitate callback of callback function by library services across the target and source ISA architectures.

ISA bridging loader may be configured to load application . In loading application ISA bridging loader may be configured to resolve any unresolved symbolic names of application associated with calling library services to appropriate ones of the library services . In embodiments ISA bridging loader may be configured to resolve any unresolved symbolic names of application associated with calling library services to addresses of the corresponding gates of library services . Additionally ISA bridging loader may be configured to modify the symbolic names or references to callback functions to internal names and associate the symbolic names or references to callback functions to the corresponding wrapper functions .

ISA bridging loader may gain control of the loading from the loader of OS or middleware if employed in any one of a number of known manners. Examples of such known manners may include the use of binary format based control transfer or load pre load variables when supported by OS or middleware . In other embodiments the loader of OS or middleware if employed may be modified to facilitate the transfer of control to ISA bridging loader instead.

As described earlier source ISA emulator may be configured to maintain source ISA execution context . Source ISA emulator may be configured to track the source ISA IP instruction pointer during execution of application . When application attempts to invoke a library service source ISA emulator monitoring source ISA execution may invoke and transfer execution control to LIB emulator instead. In various embodiments source ISA emulator may invoke and transfer execution control to the corresponding gate of the library service .

Gates corresponding to library services may be configured to respectively redirect calls to library services to the corresponding wrapper functions to process and set up the calls. Whereas gates corresponding to callback functions may be configured to respectively transfer execution control for callbacks from the corresponding wrapper functions to source ISA emulator . In various embodiments each gate may include an instruction configured to effectuate the redirect to the corresponding wrapper function or source ISA emulator . In various embodiments the instruction of each gate may be a source ISA instruction configured to cooperate with the binary translation engine to effectuate execution control redirection. In various embodiments each gate may further include an indicator identifying the corresponding wrapper function .

In various embodiments for processing and setting up a call to the corresponding library service each wrapper function corresponding to a library service may be configured to retrieve the associated parameter values of the call from source ISA context convert the call from the source ISA application binary interface ABI format to the target ISA ABI format and save the converted call with the parameter values in LIB context .

On a callback to a callback function execution control may be transferred to the corresponding wrapper function of callback function . In various embodiments for processing and setting up a callback to a callback function of application each wrapper function corresponding to a callback function may be configured to convert the callback from the target ISA ABI format to the source ISA ABI format attach the associated parameter values of the callback and save the converted callback with the parameter values in source ISA context .

Gates corresponding to a callback function may be configured to invoke the source ISA emulator with the source ISA context prepared by wrapper function corresponding to the callback function to emulate the callback function presented in Source ISA format on target ISA.

Referring now to wherein illustrated is an example ISA bridging method with callback in accordance with various embodiments of the present disclosure. As shown method may include two parts part for bridging calls from application of source ISA to library services of target ISA and part for bridging callbacks from a library service of target ISA to a callback function of application of source ISA .

Part may begin at block . At block ISA bridging loader may load application . In loading application ISA bridging loader may resolve the symbolic names or references of application to library services and modify symbolic names or references of callback functions as earlier described. From block part may proceed to block . At block in the course of execution application may call one of library services . In various embodiments application may require a callback to one of its callback functions by the called library service . In embodiments application may include as part of the call to the called library service a pointer to the callback function to be callback. Instead of passing the pointer to the callback function the wrapper function of the library service may pass the corresponding wrapper function of the call back function .

From block part may proceed to block . At block source ISA emulator on detection of the call through e.g. monitoring of the source ISA IP and determining that the IP is referencing an address within the address scope of the target library may redirect the call and transfer execution control to the corresponding gate of the library service in LIB emulator . From block part may proceed to block . At block gate may further redirect the call and transfer execution control to the corresponding wrapper function of the called library service . From block part may proceed to block . At block wrapper function of the called library service may process the call and set up the call in LIB context for execution by the called library service as earlier described. From block part may proceed to block . At block gate of the called library service may collect the return value s of the call from LIB context update source ISA context and transfer execution control to source ISA emulator to return the return values of the library service call to application .

Referring now to part may begin at block . At block in the course or on completion of a called library service the library service may callback a callback function of application e.g. by calling the callback pointer passed by application . From block part may proceed to block as the callback pointer is the wrapper function corresponding to the callback function . At block execution control may be transferred to the corresponding wrapper function of callback function in accordance with the modified reference. From block part may proceed to block . At block wrapper function may process the callback set up the callback in source ISA context for execution by the callback function of application as described earlier and thereafter transfer execution control to the corresponding gate of the callback function . From block part may proceed to block . At block gate corresponding to the callback function may redirect the callback and transfer execution control to the ISA emulator with the source ISA context prepared by the wrapper function .

Further at block on detection of the call through e.g. monitoring of the source ISA IP and determining that the IP is referencing an address within the address scope of the gates corresponding to call back functions source ISA emulator may redirect the source ISA IP to the call back function to continue the emulation. From block part may proceed to block . At block gate of the callback function may collect the return value s of the callback from source ISA context update LIB context and transfer execution control to LIB emulator to return the return values of the callback function to the library service .

Referring back to for one embodiment at least one of the processor s of processor and memory arrangement may be packaged together with the computational logic or a subset thereof of ISA bridging layer configured to practice the operations or a subset thereof of method of . For one embodiment at least one of the processor s of processor and memory arrangement may be packaged together with the computational logic or a subset thereof of ISA bridging layer configured to practice the operations or a subset thereof of method of to form a System in Package SiP . For one embodiment at least one of the processor s of processor and memory arrangement may be integrated on the same die with the computational logic or a subset thereof of ISA bridging layer configured to practice the operations or a subset thereof of method of . For one embodiment at least one of the processor s of processor and memory arrangement may be integrated on the same die with the computational logic or a subset thereof of ISA bridging layer configured to practice the operations or a subset thereof of method of to form a System on Chip SoC . For at least one embodiment the SoC may be utilized in a desktop computer a laptop computer a smartphone a computing tablet an Internet appliance a personal digital assistant PDA a portable game playing device a server or other computing devices.

Still referring to while for ease of understanding the present disclosure has been described with one ISA bridging layer bridging one source ISA to one target ISA. However the present disclosure is not so limited. In embodiments multiple different ISA bridging layers may be provided to bridge multiple different source ISA to the target ISA. In some of these embodiments a dispatcher may additionally be provided to detect the bridging required and instantiates the appropriate ISA bridging layer or layers to provide the required ISA bridging.

Further in various embodiments the present disclosure may be practiced with substituted binaries in target ISA for portions of application in source ISA to reduce the amount of bridging needed. In other embodiments some of the resources used for bridging e.g. some of the wrapper functions may be located on a remote server accessible to ISA bridging layer .

Still further while for ease of understanding ISA bridging layer has been described as being configured to bridge source ISA and target ISA that are different. However the disclosure is not so limited. It is contemplated that for various applications ISA bridging layer may be employed to bridge source ISA and target ISA that are the same. In such applications one or more of the described elements e.g. binary translation engine may not be needed. An example of such application may be to provide enhanced operational security to computing device . Other applications may likewise benefit from such bridging.

Thus although specific embodiments have been illustrated and described herein it will be appreciated by those of ordinary skill in the art that a wide variety of alternate and or equivalent implementations may be substituted for the specific embodiments shown and described.

Accordingly it will be appreciated that the present disclosure may be a solution to the technical problem of a computing device with one ISA supporting applications developed for another ISA where the applications have usage characteristics of requiring on occasions callbacks from the called library services. The advantage of the present disclosure may include but is not limited to avoiding the need to fully translate or re implement the application in the computing device s ISA.

It will also be appreciated that the present disclosure may be a solution to the technical problem of providing enhanced security to a computing device. The advantage of the present disclosure may include but is not limited to the robustness of the isolation provided.

