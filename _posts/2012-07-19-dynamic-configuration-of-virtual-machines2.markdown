---

title: Dynamic configuration of virtual machines
abstract: A method and apparatus are disclosed to identify the operations/processes performed by one or more virtual machines. In one example method of operation, the system may perform identifying processes currently operating in an operating system and recording process information corresponding to each of the processes in a memory. The method may also include determining a priority for each of the processes currently operating in the operating system and incrementing a current priority of at least one of the processes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09639379&OS=09639379&RS=09639379
owner: Open Invention Network LLC
number: 09639379
owner_city: Durham
owner_country: US
publication_date: 20120719
---
This application claims benefit to provisional application 61 509 187 entitled SYSTEM AND METHOD FOR THE DYNAMIC CONFIGURATION OF A VIRTUAL MACHINE filed on Jul. 19 2011 the entire contents of which are hereby incorporated by reference.

The present invention is generally related to a dynamic virtual machine configuration procedure and more particularly to an application used to identify activity associated with a virtual machine and perform inferences used to dynamically configure the virtual machine.

Currently traditional enterprise networks may include various nodes that contribute to an overall business process. The network nodes may include both physical and virtual machines. Enterprise networks may include virtual machines and physical hosts which are required to provide an allocation of resources. Physical hosts do not have information associated with an underlining guest s ability to perform tasks and or processes associated with their use in a business environment. A greater understanding of the guest s ability to perform their intended task s may be derived by monitoring and processing data available through the host s and guest s APIs. By monitoring the data associated with the APIs it is possible to apply processes that will yield an ideal resource allocation for one or more virtual machines.

An example embodiment of the present invention may include a method of identifying via a processor a plurality of processes currently operating in an operating system. The method may also include recording process information corresponding to each of the processes in a memory and determining via the processor a priority for each of the plurality of processes currently operating in the operating system. The method may also include incrementing via the processor a current priority of at least one of the plurality of processes.

Another example embodiment of the present invention may include an apparatus that includes a memory and a processor configured to identify a plurality of processes currently operating in an operating system record process information corresponding to each of the processes in the memory determine a priority for each of the plurality of processes currently operating in the operating system and increment a current priority of at least one of the plurality of processes.

It will be readily understood that the components of the present invention as generally described and illustrated in the figures herein may be arranged and designed in a wide variety of different configurations. Thus the following detailed description of the embodiments of a method apparatus and system as represented in the attached figures is not intended to limit the scope of the invention as claimed but is merely representative of selected embodiments of the invention.

The features structures or characteristics of the invention described throughout this specification may be combined in any suitable manner in one or more embodiments. For example the usage of the phrases example embodiments some embodiments or other similar language throughout this specification refers to the fact that a particular feature structure or characteristic described in connection with the embodiment may be included in at least one embodiment of the present invention. Thus appearances of the phrases example embodiments in some embodiments in other embodiments or other similar language throughout this specification do not necessarily all refer to the same group of embodiments and the described features structures or characteristics may be combined in any suitable manner in one or more embodiments.

In addition while the term message has been used in the description of embodiments of the present invention the invention may be applied to many types of network data such as packet frame datagram etc. For purposes of this invention the term message also includes packet frame datagram and any equivalents thereof. Furthermore while certain types of messages and signaling are depicted in exemplary embodiments of the invention the invention is not limited to a certain type of message and the invention is not limited to a certain type of signaling.

Example embodiments of the present disclosure provide a system method and or device configured to automatically determine a virtual machine s ideal resource allocation as managed by a virtualization hypervisor device hypervisor . Referring to a physical virtual host may enable a hypervisor resource allocation manager. The hypervisor also known as a virtual machine manager VMM is a hardware virtualization technique which allows multiple operating systems or guests to run concurrently on a host computer. The hypervisor is conceptually one level higher than a supervisory program. The hypervisor may operate by the hypervisor application programming interfaces APIs and may present to the guest operating systems a virtual operating platform and manage the execution of the guest operating systems. Multiple instances of a variety of operating systems may share the virtualized hardware resources of the physical host device through the hypervisor. The hypervisor may be installed on server hardware with the function of operating guest operating systems acting as servers.

The virtual machine VM may be a completely isolated guest operating system installation within a normal host operating system. The virtual machines are implemented with software emulation and or hardware virtualization. According to one example observing metadata input from the application programming interface API of the virtualization management system may offer a current status. The status information retrieved may be correlated with a virtual machine s operating system status which is provided by the API inputs from both the physical host device providing the resource allocation and the guest s internal OS APIs such as VIX and WINCP.

In operation a console web service definition language WSDL interface may request enterprise virtualization information that includes the currently identified virtual machines virtual storage information that the VMs are utilizing and any corresponding virtual network components. For each virtual machine the virtual machines APIs i.e. VIX and WMI will report allocation for each virtual machine. The allocation may include resources such as memory usage storage capacity usage network devices used in correlation with the VM operation and CPU usage. Examples of such usage may include for example memory usage of 4 Gigabytes storage allocation of 100 Gigabytes a network device VMWARE network TCP IP protocol adapter etc.

The API will return a current allocation utilized by the virtual machine s for each of these allocations. The use of another API such as WMI may also be utilized. For the status on network connections a network stack monitor such as NetStat network statistics is used as a command line tool that displays network connections both incoming and outgoing connections routing tables and a number of network interface statistics. Netstat operates on UNIX UNIX compatible and WINDOWS NT based operating systems.

The APIs and illustrated in the communication architecture in may provide detailed information about the allocation and performance of the virtual machines operating in the environment. The APIs and should be considered standard in a modern virtual enterprise environment. The guest APIs allow for the alteration of process priority and CPU affinity and settings indicating that the APIs provide a large variety of features found in any hardware software platform virtual environment. A VM status of a VM may be based on a VM that is presently on and operating with a status that is a current measurement of the usage based on a known allocation. For example VM may be operating with a memory of 2.1 Gigabytes used for a 4 Gigabyte allocation.

The operating system of the computer device used to access the virtual machine may initiate an API call over the network to request a VM state and network connectivity. A VM or physical machine that is requesting a specification and or statistics i.e. usage of another machine via an API such as WMI may be required to be on the same network segment. For example a machine resident on the same network segment may conduct the API request and report the results to the inference engine.

The VIX API or Vix is a library for writing scripts and programs to manipulate virtual machines. It is high level easy to use and practical for both script developers and application programmers. VIX API operates on Microsoft WINDOWS and LINUX platforms. Windows management instrumentation WMI is the primary management technology for Microsoft Windows operating systems. It enables consistent and uniform management control and monitoring of systems throughout an enterprise. WMI allows system administrators to query change and monitor configuration settings on desktop and server systems applications networks and other enterprise components. System administrators can write scripts that use the WMI scripting library to work with WMI and create a wide range of systems management and monitoring scripts. WMI is installed natively in the Windows operating system.

The correlation operation may yield a resource allocation status that is assigned to the elements of resource allocation including but not limited to a present CPU utilization a memory allocation network resource allocation and or memory storage allocation. The present state information is then monitored to determine if a change in configuration is beneficial to the overall virtual environment. An optimal resource allocation may be inserted into a new or existing work order for an orchestration component of the virtual enterprise environment to be updated. For example the present state information may indicate that a current operating parameter such as CPU memory usage etc. has exceeded a threshold of 90 in which case the present state information is yielding that an adjustment should be made to accommodate the over utilization of resources.

Established thresholds may be directly related to a node State. The state may be defined as an indicator to the system and may require the user of the business application service to meet a threshold requirement. The operation to determine a current state of an individual element may be based on a threshold that has been defined for example by the system administrator. The threshold may include a metric that either exceeds or underperforms in a specific area of interest to the system administrator. An example would be a server in a network that is exceeding a specified CPU utilization percentage.

An optimal configuration of a guest is achieved by modifying the priority of processes and or services utilized by the guest in conjunction with the resource allocation of the guest itself by the host. A first candidate virtual machine VM being monitored may be suspended and the changes to the configuration may be made. The VM is resumed and a new resource allocation status is calculated by the process. If the resource allocation status falls below a predefined threshold the process may be initiated. The system may observe the internal process CPU and memory consumption of the candidate VM by monitoring the virtual machine s operating system. If the resource allocation of the VM fails to achieve an optimal state after the cycle is repeated 3 consecutive times then the VM may be identified as requiring a change in state. This monitored data may be utilized by an inference engine to determine if a delta exists outside the normal loss of efficiency for virtual machines for a given virtual infrastructure. As a result a work order may be created to increment the resource allocation by the hypervisor API to compensate accordingly and a message is sent to the virtual infrastructure API of the candidate VM as being an ideal candidate for a dynamic configuration. If the candidate VM achieves an optimum efficiency it may be monitored for 3 consecutive cycles and if no change is determined the system may iterate to the next VM as sorted by the virtual infrastructure provider.

In one example of operation a priority of a process may be established by selecting the process from a list of currently operating processes on a particular machine. Next the process may have its corresponding priority set to a certain level such as high normal or low . The efficiency thereafter of the process may be observed as an allocated parameter based on a predefined threshold used to determine whether the process is currently utilizing the amount of CPU usage considered nominal for that priority of the process.

A cycle is a task that a VM is required to perform. An interface may be provided that allows a user to build a baseline on a blank template adding the components that are required to perform the functions of a service group of VMs and corresponding functions performed. Because the primary application and or purpose for the VM s existence is known then it can be assigned a state. In one embodiment the state of a primary application may be determined by combining the states of prioritized processes. The state of a primary application may be determined by monitoring both processes and executables and service communication and performance on the node of the VM that executes the executables and processes.

Detection of failures of a business application service may be performed by monitoring the health of the components of the service group that performs the business application service as well as the connections between these components. There are several factors that contribute to the overall health or state of the node VM . Parameters such as CPU usage memory usage network uptime etc. are each indicators of the state of a business application. If the primary application s components executable application and or services are unable to communicate or perform within acceptable parameters then this can greatly affect the performance of a node VM . The monitoring system application may be used to monitor the state of the primary applications by monitoring the executables and service communication and performance on the nodes themselves.

State may be defined as an entity whether virtual or physical associated with a node. Any node may have a state established by for example detection of a physical condition of the node at a discrete moment in time. The state may be established for example on the basis of assigning a threshold value for a particular parameter followed by monitoring the parameter for any changes. Example parameters may include without limitation CPU usage memory usage and or storage capacity utilized network uptime configuration drift and or alerts or alarms from the network. These parameters are monitored by requests and responses from the VIX API and WMI for example.

The components of the enterprise configuration utilized by example embodiments of the present invention may include those commonly associated with an enterprise virtualization implementation. Such enterprise components may be utilized to emulate a physical enterprise computing environment. The components must be configured to efficiently exchange data and process information for business applications. The APIs associated with both the hosts and guests need to be enabled and set at a maximum level. Examples of APIs would include VMAPI VIX Windows API WinAPI WinCP and ancillary reporting applications such as Netstat.

According to example embodiments the network components used in the enterprise network may include a least one physical host a network device such as a virtual router capable of performing virtual Networking and physical routers capable of providing network access to the physical network infrastructure. Additional network components include at least one storage device capable of providing access to a virtual infrastructure.

According to example embodiments application components required may include a hypervisor management platform such as VMWare ESX server VMWare vSphere management software Microsoft Hyber V Microsoft SCVMM Microsoft Server Virtual Storage Vendor s APIs a database such as SQL Server and or Oracle and a web based console server. Further components may include a rules engine such as OpenRules Mandarax or Drools.

Referring to the console web service definition language WSDL interface may transmit a request for enterprise virtualization information from the various APIs including virtual machine operating system OS API and API interface . These APIs provide detailed information about the allocation and or performance of the virtual machine s operating in the enterprise environment. These guest APIs allow for the alteration of process priority and CPU affinity and other settings.

Access to the API such as WMI allows the priority for each process and application or executable to be set. Through the WMI API the priority may be set programmatically. For example to change the priority the following function may be performed Const ABOVE NORMAL 32768 strComputer . Set objWMIService GetObject winmgmts   impersonationLevel impersonate strComputer root cimv2 Set objStartup objWMIService.Get Win32 ProcessStartup Set objConfig objStartup.SpawnInstance  objConfig.PriorityClass ABOVE NORMAL Set objProcess GetObject winmgmts root cimv2 Win32 Process objProcess.Create Notepad.exe Null objConfig intProcessID.

The process priority range includes a priority class value of normal 32 low 64 real time 128 high 256 below normal 16384 above normal 32768 etc.

Examples of the API information for the hypervisor API may include Host ID Host Name Host IP Host Mac Host memory resource and allocation Host storage resource and allocation Host storage resource and allocation. Examples of VM information may include VM ID VM name VM IP VM Mac VM memory resource and utilization VM storage resource and utilization VM storage resource and utilization. VM network type resource and status etc. The virtual machine OS API may include a machine name machine IP machine mac machine netstat connections machine applications machine performance mon stats machine processes machine services service affinity priority CPU and memory.

The Netstat application may be provided by the virtual machine OS API to provide local address foreign address state protocol process ID received packets received bytes sent bytes etc. The specification for the WSDL may include a virtual machine IP address an application source a destination IP address an application process list performance statistics Prefmon a standard O S configuration files list and state statistics from the O S.

Applications required to accomplish a dynamic configuration of the guest may include a standard OS process communication monitoring program such as NETSTAT an inference engine a relational database repository a continually updating OS API that includes process and service priority and CPU affinity. The data from the host API and the guest API are accumulated from the APIs and deposited in the DB . The dynamic configuration rules engine retrieves the API data for both the host and guest. The rules engine records the priority of each application that it associates with the processes and services that are present in the Netstat data collected from the guest via the guest API. The Netstat data includes the applications which are communicating with other nodes in the environment.

The identified applications are recorded by the rules engine and are examined for their priority within the operating system along with the physical virtual host s CPU affinity for the guests that execute those applications. The rules engine then increases the level of priority by one level. For example if the process or service associated with the application in the Netstat is normal the rules engine will send the request to the guest configuration adapter to change the process or services priority to above normal. While the rules engine gathers data on the Netstat application s the processes and services that are not Netstat based are then examined for a reduction in priority. The rules engine will send a request to the guest configuration adapter to iterate the application priority downward depending on the data received from the host API. For the Netstat non related applications the range that the rules engine will iterate though is low below normal or normal. The participating VMs as assigned by the host configuration console are queried for its API data and Netstat application data. A dynamic guest configuration console may be used to perform the configuration of adapter . This data may be obtained via direct request or proxy though a broker. The Netstat data may gather via a remote desktop protocol RDP connection or guest based agent.

The dynamic guest configuration adapter may transmit a message to the rules engine to continually gather the data from the same sources to monitor progress at 5 minute intervals. The rules engine will send a request to the guest configuration adapter to iterate the application priority upward depending of the data received from the host API. The range that the rules engine will iterate though is low below normal normal above normal or high. The real time process setting is not included in this range.

The incrementing the current priority of the at least one process includes modifying the process to have an increased amount of central processor unit CPU utilization or memory utilization. The current priority may be increased by one increment level at a time such as from a present status of normal to an increased level of above normal. The method may also perform decrementing a priority for at least one of the other plurality of processes. The incrementing a current priority of the process may be performed to increase the current priority of the process based on usage data of a physical host application programming interface API associated with the current priority of the process. The processes may be operating via at least one virtual machine.

Example embodiments are preferably realized in a hardware device such as a computer cellular phone or other mobile terminal device etc. In other embodiments the present invention may be realized in hardware software firmware or a combination of hardware software and or firmware. The above example embodiments may also be implemented in software code and may be stored on a computer readable medium such as for example non volatile memory devices e.g. RAM ROM hard disk etc. . The software code may be accessed from the computer readable medium and may be executed by a processor. The executed program may provide one or more of the features of the example embodiments.

The operations of a method or algorithm described in connection with the embodiments disclosed herein may be embodied directly in hardware in a computer program executed by a processor or in a combination of the two. A computer program may be embodied on a computer readable medium such as a storage medium. For example a computer program may reside in random access memory RAM flash memory read only memory ROM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM registers hard disk a removable disk a compact disk read only memory CD ROM or any other form of storage medium known in the art.

An exemplary storage medium may be coupled to the processor such that the processor may read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an application specific integrated circuit ASIC . In the alternative the processor and the storage medium may reside as discrete components. For example illustrates an example network element which may represent any of the above described network components of the other figures.

As illustrated in a memory and a processor may be discrete components of the network entity that are used to execute an application or set of operations. The application may be coded in software in a computer language understood by the processor and stored in a computer readable medium such as the memory . The computer readable medium may be a non transitory computer readable medium that includes tangible hardware components in addition to software stored in memory. Furthermore a software module may be another discrete entity that is part of the network entity and which contains software instructions that may be executed by the processor . In addition to the above noted components of the network entity the network entity may also have a transmitter and receiver pair configured to receive and transmit communication signals not shown .

Although an exemplary embodiment of the system method and computer readable medium of the present invention has been illustrated in the accompanied drawings and described in the foregoing detailed description it will be understood that the invention is not limited to the embodiments disclosed but is capable of numerous rearrangements modifications and substitutions without departing from the spirit or scope of the invention as set forth and defined by the following claims. For example the capabilities of the systems can be performed by one or more of the modules or components described herein or in a distributed architecture. For example all or part of the functionality performed by the individual modules may be performed by one or more of these modules. Further the functionality described herein may be performed at various times and in relation to various events internal or external to the modules or components. Also the information sent between various modules can be sent between the modules via at least one of a data network the Internet a voice network an Internet Protocol network a wireless device a wired device and or via plurality of protocols. Also the messages sent or received by any of the modules may be sent or received directly and or via one or more of the other modules.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. Although the present invention has been described with reference to specific exemplary embodiments it will be recognized that the invention is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

