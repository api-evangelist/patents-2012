---

title: Preserving user profiles across remote desktop sessions
abstract: User profiles of remote desktops are managed in a crash-consistent manner. When a user logs into a remote desktop, metadata of the user profile is loaded from persistent storage while registry settings and files of the user profile are loaded asynchronously with respect to the login. During the remote desktop session, snapshots of the remote desktop image in persistent storage are generated periodically, and a change log that indicates changes to the user profile is created therefrom. The user profile stored in persistent storage is updated lazily using the change log at opportunistic times after snapshot generation. When the user logs out of the remote desktop, the user profile stored in the persistent storage is updated with any additional changes to the user profile by extracting the changes from the copy-on-write cache associated with the most recent snapshot.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09542209&OS=09542209&RS=09542209
owner: VMware, Inc.
number: 09542209
owner_city: Palo Alto
owner_country: US
publication_date: 20120629
---
Server based computing allows a networked client computer which may be remotely situated with respect to a server to access computing resources on the server. Several protocols such as Remote Desktop Protocol RDP Virtual Network Computing VNC or PC over IP PCoIP have been developed to enable server based computing. Increasingly server based computing has become supported by a virtualized computing environment. One such example is virtual desktop infrastructure VDI which enables organizations to replace traditional personal computers PCs on the client side with instances of a desktop operating system that are hosted on virtual machines running on servers in a data center. A thin client that is installed on a user s terminal remotely connects to one of the virtual machines running the desktop operating system and presents a virtual desktop for the user.

In order to allow users of server based computing to retain customizations of their desktops and provide them with a consistent desktop experience various user profile management solutions sometimes referred to as persona management have been developed. One such solution is user profile backup and restore. With this solution the user profile is saved to persistent storage when the user logs out and restored from the persistent storage when the user subsequently logs in. This solution however has some limitations. The first is a spike in input output operations IOs during popular login and logout times such as at the beginning and at the end of a work day. Second the login and logout processes are delayed as the user must wait for his or her profile to be loaded into memory upon login and to be saved to persistent storage upon logout. Third the solution relies on the user to logout to trigger an update of the user profile. Some users however do not always logout after completing a remote desktop session. In such cases the user loses any changes to the user profile if the server hosting the remote desktop session should crash. Also if the user launches another remote desktop session the original user profile will be restored onto the desktop and the user will now have inconsistent user profiles across different remote desktop sessions.

To overcome the drawbacks of the user profile backup and restore techniques a user profile streaming technique has been developed by VMware Inc. of Palo Alto Calif. According to this technique when a user logs into a remote desktop session the basic components of the user s profile are first loaded. Other components of the user s profile are subsequently loaded on an as needed basis e.g. as they are accessed by the user. In addition the user profile is updated in persistent storage as the components of the user profile are being updated during the remote desktop session. As a result IO spikes are avoided and the login and logout processes take less time.

One or more embodiments of the present invention provide a method for managing user profiles that employ user profile streaming techniques and in addition preserve user profiles in persistent storage on a crash consistent basis. In one embodiment the method also dynamically creates stateless desktops in a shared storage system to allow the user to preserve his or her desktop experience across multiple desktop sessions even though they are hosted on different machines.

A method of preserving user profiles for desktops across desktop sessions according to an embodiment includes the steps of generating a snapshot of the desktop extracting a differential state of the user profile based on the snapshot to create a change log of the user profile and lazily i.e. asynchronously with respect to the generation of the snapshot and the creation of the change log committing changes indicated by the change log to the user profile stored in the persistent storage. The steps of generating extracting and committing are performed on a periodic basis during a desktop session and when the user logs out of the desktop session the changes indicated by the change log that have not yet been committed and any other changes to the user profile since the most recent snapshot are committed to the user profile stored in the persistent storage in response thereto. To permit the user to preserve his or her desktop experience across multiple desktop sessions regardless of the particular machine that is hosting the desktop the user profile may be stored in a shared storage system such as a storage area network SAN device or a network attached storage NAS device.

Further embodiments include a non transitory computer readable storage medium that includes instructions that enable a processing unit to implement the above method as well as a computer system configured to implement the above method.

A virtualization software layer also referred to hereinafter as a hypervisor is installed on top of hardware platform . Hypervisor supports a virtual machine execution space within which multiple virtual desktops i.e. virtual machines running desktop operating systems and applications may be concurrently instantiated and executed. As shown virtual execution space includes virtual desktops . In one embodiment as further discussed in for each virtual desktop running on server hypervisor provides a corresponding virtual machine monitor VMM that implements virtualization support such as emulated hardware to coordinate operations between hypervisor and the virtual desktop.

Each of servers is further networked to an enterprise level storage system such as storage array . Examples of storage array may be a network attached storage NAS array storage area network SAN array or any other similar storage array. Storage array includes a storage system manager that serves as the communication agent for storage array and implements a virtualization of the physical typically rotating disk drive based storage units referred to in as spindles that reside in storage array . In alternative embodiments storage array may be implemented using solid state non volatile storage media known as solid state disks. Storage system manager abstracts away the complexities of targeting read and write operations to the physical addresses of the actual spindles by exposing to servers the ability to view the aggregate physical storage space provided by the spindles as a contiguous logical storage space that is divided into set of virtual partitions known as LUNs logical units . The embodiment of depicts LUN maintained by storage array that include a user profile repository that stores user profile data for all users of VDI.

A virtual desktop management server placed between servers and user terminals manages the provisioning of virtual desktops on servers to user terminals and also functions as a connection broker that manages connections between user terminals and virtual desktops . In alternative embodiments a server that provides the functionality of the connection broker may be separately provided. User terminals may execute a thin client application that interacts with virtual desktop management server to connect to a user s virtual desktop and render the virtual desktop s graphical user interface. Alternatively a user terminal may access a virtual desktop through web browser access or through other similar means.

It should be recognized that various modifications and changes may be made to the data center embodiment of consistent with the teachings set forth herein. For example servers and may be connected through various different known topologies and technologies e.g. switches etc. to multiple storage systems similar to storage array . One alternative embodiment may implement virtual desktop management server as a virtual machine running on one of servers . One example of virtual desktop management server that may be used in embodiments is the VMware Virtual Desktop Manager product which is commercially available from VMware Inc. of Palo Alto Calif.

As illustrated in immediately upon login a first load process depicted by arrow is carried out. During the first load process user profile execution agent loads in metadata of the user profile into virtual RAM . In one embodiment the metadata identifies a monolithic file in which registry settings of the user profile are stored and all other files that are part of the user profile such as files in the user s My Documents folder. Subsequent load processes depicted by arrows and each depict a loading process that is carried out by user profile execution agent to load a file that is part of the user profile and has not yet been loaded into virtual RAM when the user access such a file. In some embodiments files that are part of the user profile and have not yet been loaded into virtual RAM may be loaded into virtual RAM at different times according to a preset schedule e.g. after a predetermined amount of time after login .

As further illustrated in user profile execution agent carries out an update process asynchronously with respect to generation of each snapshot and synchronously with respect to logout . After each snapshot user profiles execution agent extracts a differential state of the user profile based on the snapshot to create a change log of the user profile. This can be done by examining the copy on write cache associated with the snapshot at the time a new snapshot is generated for changes to registry settings in one embodiment changes to the monolithic file of the registry settings and files of the user profile. Then user profile execution agent consumes the change log at opportunistic times e.g. during low activity to update the user profile stored in user profile repository to reflect changes made to registry settings and files of the user profile. It should be recognized that if a crash should occur at any point in time between login and logout a crash consistent user profile can be reconstructed from the user profile stored in user profile repository and the change log because both are generated from crash consistent snapshots.

At step user profile execution agent monitors accesses to portions of the user profile and intercepts them to determine at step whether or not the portions being accessed have already been loaded. If it is determined at step that such portions have not yet been loaded step is executed to load the accessed portions into virtual RAM . After loading into virtual RAM step is executed where user profile execution agent returns data in the accessed portions to the issuer of the intercepted access. On the other hand if it is determined at step that the portions of the user profile being accessed have not yet been loaded step is skipped and step is executed next. After step the thread loops back to step where user profile execution agent monitors for subsequent accesses to the user profile and intercepts them.

Step represents the thread which asynchronously loads portions of the user profile that have not yet been loaded into virtual RAM . In one embodiment the asynchronous loading is carried out according to a preset schedule after a predetermined amount of time has elapsed after login .

While waiting at step or during any of steps and the user may have initiated a logout process. When this happens as part of the logout process user profile execution agent at step finishes consuming any unprocessed changes in the change log. User profile execution agent also examines the copy on write cache associated with the snapshot for additional changes to the registry settings and files of the user profile since the last snapshot and updates the user profile stored in user profile repository to reflect all such changes. The logout is then processed at step . If the user terminates his or her desktop session without logging out a consistent image of the desktop may be constructed upon reconnection using the current version of the user profile stored in user profile repository and consuming the unprocessed changes in the change log.

It should be recognized that various modifications and changes may be made to the specific embodiments described herein without departing from the broader spirit and scope of the invention as set forth in the appended claims. For example The various embodiments described herein may employ various computer implemented operations involving data stored in computer systems. For example these operations may require physical manipulation of physical quantities usually though not necessarily these quantities may take the form of electrical or magnetic signals where they or representations of them are capable of being stored transferred combined compared or otherwise manipulated. Further such manipulations are often referred to in terms such as producing identifying determining or comparing. Any operations described herein that form part of one or more embodiments of the invention may be useful machine operations. In addition one or more embodiments of the invention also relate to a device or an apparatus for performing these operations. The apparatus may be specially constructed for specific required purposes or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines may be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations.

The various embodiments described herein may be practiced with other computer system configurations including hand held devices microprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

One or more embodiments of the present invention may be implemented as one or more computer programs or as one or more computer program modules embodied in one or more computer readable media. The term computer readable medium refers to any data storage device that can store data which can thereafter be input to a computer system computer readable media may be based on any existing or subsequently developed technology for embodying computer programs in a manner that enables them to be read by a computer. Examples of a computer readable medium include a hard drive network attached storage NAS read only memory random access memory e.g. a flash memory device a CD Compact Discs CD ROM a CD R or a CD RW a DVD Digital Versatile Disc a magnetic tape and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.

Although one or more embodiments of the present invention have been described in some detail for clarity of understanding it will be apparent that certain changes and modifications may be made within the scope of the claims. Accordingly the described embodiments are to be considered as illustrative and not restrictive and the scope of the claims is not to be limited to details given herein but may be modified within the scope and equivalents of the claims. In the claims elements and or steps do not imply any particular order of operation unless explicitly stated in the claims.

Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the invention s . In general structures and functionality presented as separate components in exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements may fall within the scope of the appended claims s .

