---

title: Automatic selection of lowest configuration feature level by functionality exploited
abstract: Methods and systems of generating product configuration files may involve receiving an identification of a set of features for a software product via a file editor interface. The lowest version of the software product that supports the set of features may be determined, wherein a configuration file can be generated based on the lowest version. In one example, the configuration file identifies the set of features and includes the lowest version as an attribute of the configuration file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08930902&OS=08930902&RS=08930902
owner: International Business Machines Corporation
number: 08930902
owner_city: Armonk
owner_country: US
publication_date: 20120302
---
The present application is a continuation of U.S. patent application Ser. No. 13 209 597 filed on Aug. 15 2011.

Embodiments of the present invention generally relate to the creation of configuration files for software products. More particularly embodiments relate to the automatic selection of configuration file version levels to ensure maximum backwards compatibility.

In various computing system industries software product upgrades may be periodically released wherein each release has a different version level. Typically a given product release can introduce new functionality that may involve the use of new application programming interface API functions in order to implement the new functionality in the host environment of the software product. Computer programmers may use tooling to create configuration files which when deployed into the host environment provide for the API functions selected at the time of the creation coding of the configuration files. While conventional configuration file tooling techniques may be suitable under certain circumstances there remains considerable room for improvement.

For example some tooling solutions may change with each release of the software product. A challenge with regard to such an approach is that if an attempt is made to deploy configuration files created for one version of a product into an environment with a lower e.g. earlier version of the product an error could result due to the usage of API functions that are unknown to the lower version of the product.

Other tooling solutions may be able to create configuration files for different versions of a software product. In such a case the programmer may be first required to explicitly set the version level of the runtime environment which can in turn restrict the API functions that are available to the programmer. If however the selected version level is too low certain desired API functions may not be available to the programmer. If on the other hand the selected version level is too high e.g. recent compatibility with earlier versions may be unnecessarily sacrificed while unneeded API functions are available but unused.

Embodiments may involve a computer implemented method in which an identification of a set of features for a software product is received via a file editor interface. The method may also provide for determining a lowest version of the software product that supports the set of features and generating a configuration file for the software product. The configuration file may identify the set of features and include the lowest version as an attribute of the configuration file.

Embodiments may also include a computer program product having a computer readable storage medium and computer usable code stored on the computer readable storage medium. If executed by a processor the computer usable code can cause a computer to receive an identification of a set of features for a software product via a file editor interface and determine a lowest version of the software product that supports the set of features. The computer usable code may also cause a computer to generate a configuration file for the software product wherein the configuration file is to identify the set of features and is to include the lowest version as an attribute of the configuration file.

Other embodiments may provide for a computer implemented method in which one or more prompts are output via a file editor interface. An identification of a set of features for a software product may be received via the file editor interface wherein the set of features includes one or more application programming interface API functions and the software product includes a server. The method can also provide for determining a lowest version of the software product that supports the set of features and generating a configuration file for the software product. In one example the configuration file includes an event binding file identifies the set of features and includes the lowest version as an attribute of the configuration file.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Referring now to a scenario is shown in which a user such as a computer programmer interacts with a file editor interface in order to generate configuration files such as a configuration file for a software product. In the illustrated example the file editor interface is able to generate configuration files for multiple product releases having different features and or functionality. For example the software product could be a customer information control system CICS server in which release is designated as Ver. X and stores outgoing messages only to a message queue whereas release is designated as Ver. Y and might include the ability to transfer outgoing messages directly to a web server Hypertext Transfer Protocol HTTP address. In such a case the configuration file might be an event binding file that includes code to bind message creation events to HTTP addresses. Similarly a subsequent product release may be designated as Ver. Z and may include additional messaging functionality or other features not present in the previous releases of the product.

As will be discussed in greater detail the file editor interface can automatically determine the lowest e.g. earliest version of the software product that supports the features selected by the user and assigns that version to the resulting configuration file even though the file editor interface may be compatible with a higher version of the software product e.g. Ver. Z . Thus in the illustrated example all of the features selected by the user are supported by product releases and but not by product release e.g. HTTP message binding was selected . The file editor interface may therefore assign Ver. Y i.e. the lowest version of the software product that supports the selected features to the configuration file by adding an attribute to the configuration file that indicates Ver. Y as the level of compatibility. Without the illustrated ability to automatically assign the lowest supported version level the user might manually either select Ver. X as the target host environment which would eliminate the HTTP message binding functionality or select Ver. Z as the target host environment which would prevent the configuration file from being installed in Ver. Y host environments.

Simply put assigning the lowest version supported to the configuration file may ensure maximum backwards compatibility for the configuration file . Moreover by enabling the user to select features without regard to version level the illustrated approach exposes the user to features that might not be supported in the current host environment. Accordingly the software vendor may be able to silently publicize new features to users of older environments so that the users may be more likely to upgrade to newer versions of the product.

Turning now to a method of generating product configuration files is shown wherein the method may be implemented in a file editor interface and or tooling solution. Illustrated processing block provides for receiving an identification of a set of features for a software product. As already noted the set of features could include one or more API functions and the software product may include a server. Block determines the lowest version of the software product that supports the identified set of features and a configuration file may be generated for the software product at block . In the illustrated example the configuration file identifies the set of features and includes the lowest version as an attribute such as attribute . In one example the configuration file is an event binding file.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions. In addition the terms first second etc. may be used herein only to facilitate discussion and carry no particular temporal or chronological significance unless otherwise indicated.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

