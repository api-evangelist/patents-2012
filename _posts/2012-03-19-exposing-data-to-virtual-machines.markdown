---

title: Exposing data to virtual machines
abstract: Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for exposing metadata to a virtual machine. In one aspect, a method includes executing a virtual machine on a host operating system. A synthetic file system is mounted on the virtual machine to expose the synthetic file system to a plurality of guest applications executing on the virtual machine. The synthetic file system is configured to provide a plurality of system calls to the guest applications including at least a read operation or a write operation for reading from or writing to external metadata stored outside the virtual machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08677449&OS=08677449&RS=08677449
owner: Google Inc.
number: 08677449
owner_city: Mountain View
owner_country: US
publication_date: 20120319
---
This specification relates to virtual machine systems and more specifically to mounting a synthetic file system on a virtual machine.

Cloud computing is network based computing in which typically large collections of servers housed in data centers or server farms provide computational resources and data storage as needed to remote end users. Some cloud computing services provide access to software applications such as word processors and other commonly used applications to end users who interface with the applications through web browsers or other client side software. Users electronic data files are usually stored in the server farm rather than on the users computing devices. Maintaining software applications and user data on the server farm simplifies management of end user computing devices. Some cloud computing services allow end users to execute software applications in virtual machines.

A virtual machine system mounts a synthetic file system in a virtual machine. A guest application executing on the virtual machine accesses metadata that is stored outside the virtual machine using the synthetic file system. The guest application can read and write to the metadata. The synthetic file system is configured to enforce a security policy for the metadata by controlling access to the metadata by guest applications.

In general one aspect of the subject matter described in this specification can be embodied in methods that include the actions of executing a virtual machine on a host operating system mounting a synthetic file system on the virtual machine to expose the synthetic file system to a plurality of guest applications executing on the virtual machine wherein the synthetic file system is configured to provide a plurality of system calls to the guest applications including at least a read operation or a write operation for reading from or writing to an external data repository storing data outside the virtual machine receiving a first system call of the plurality of system calls at the synthetic file system for the read operation or the write operation from a first guest application of the plurality of guest applications determining that the first guest application is not authorized for the first system call by a security policy associated with the synthetic file system and denying access to the external data repository to the first guest application. Other embodiments of this aspect include corresponding systems apparatus and computer programs configured to perform the actions of the methods encoded on computer storage devices. A system of one or more computers can be configured to perform particular actions by virtue of having software firmware hardware or a combination of them installed on the system that in operation causes or cause the system to perform the actions. One or more computer programs can be configured to perform particular actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

These and other embodiments can each optionally include one or more of the following features. Determining that the first guest application is not authorized for the first system call by the security policy comprises translating the first system call into a server request and providing the server request to a trusted agent the trusted agent being a process executing on the virtual machine. The trusted agent is configured to send the server request to a server external to the virtual machine the server being configured to access the external data repository. The server is configured to provide a token to the trusted agent during a booting process for the virtual machine and the trusted agent is configured to provide the token to the server with the server request. The server is configured to provide the token to the virtual machine only once and the trusted agent is configured to shut down the virtual machine when during the booting process the trusted agent requests the token and the metadata server denies the request for the token. The synthetic file system is implemented using Filesystem in Userspace FUSE . Determining that the first guest application is not authorized for the first system call by the security policy comprises translating the first system call into a host request and providing the host request to a virtual machine monitor the virtual machine monitor being a process executing on the host operating system and not on the virtual machine the virtual machine monitor having access to the external data repository. Translating the first system call into a host request comprises serializing the first system call and information identifying the first guest application into the host request. Providing the host request to the virtual machine monitor comprises using a ring buffer that is shared between the virtual machine and the host operating system. The system of one or more computers is a host machine executing the host operating system and wherein the virtual machine executes a guest operating system that controls the execution of the guest applications within the virtual machine and provides services to the guest applications.

Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. Sensitive information can be passed from a virtual machine monitor into a virtual machine while maintaining access control to the sensitive information. Two way communication between a virtual machine and a virtual machine monitor can be enabled by a synthetic file system while still allowing access control for sensitive information.

The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

Each host machine executes a host operating system which is software that can manage concurrent execution of one or more virtual machines. For example the host operating system is managing virtual machine VM and VM while host OS is managing a single VM . Each VM includes simulated hardware referred to as virtual hardware e.g. virtual hardware and . The virtual hardware can be a simulated version of the underlying host machine hardware or a simulated version of other types of hardware. Software that is executed by the virtual hardware is referred to as guest software. In some implementations guest software cannot determine if it is being executed by virtual hardware or by a physical host machine. If guest software executing in a VM or the VM itself malfunctions or aborts other VMs executing on the host machine will not be affected. A host machine can include one or more processors that include processor level mechanisms to enable virtual hardware to execute software applications efficiently by allowing guest software instructions to be executed directly on the host machine s microprocessor without requiring code rewriting recompilation or instruction emulation.

Each VM is allocated a set of virtual memory pages from the virtual memory of the underlying host operating system and is allocated virtual disk blocks from one or more virtual disk drives for use by the guest software executing on the VM. For example host operating system allocates memory pages and disk blocks to VM and VM and host operating system does the same for VM . In some implementations a given VM cannot access the virtual memory pages assigned to other VMs. For example VM cannot access memory pages that have been assigned to VM . A virtual disk drive can be persisted across VM restarts. Virtual disk blocks are allocated on physical disk drives coupled to host machines or available over the internal network for example. In addition to virtual memory and disk resources VMs can be allocated network addresses through which their respective guest software can communicate with other processes reachable through the internal network or the Internet . For example guest software executing on VM can communicate with guest software executing on VM or VM . In some implementations each VM is allocated one or more unique Internet Protocol IP version 4 or version 6 addresses and one or more User Datagram Protocol UDP port numbers. Other address schemes are possible. The VM IP addresses are visible on the internal network and in some implementations are visible on the Internet if the addresses are advertised using a suitable routing protocol for instance.

A VM s guest software can include a guest operating system which is software that controls the execution of respective guest software applications within the VM and provides services to those applications. For example a guest operating system could be a variation of the UNIX operating system. Other operating systems are possible. Each VM can execute the same guest operating system or different guest operating systems. In further implementations a VM does not require a guest operating system in order to execute guest software applications. A guest operating system s access to resources such as networks and virtual disk storage is controlled by the underlying host operating system.

By way of illustration when the guest application or guest operating system attempts to perform an input output operation on a virtual disk initiate network communication or perform a privileged operation for example the virtual hardware is interrupted so that the host operating system can perform the action on behalf of the virtual machine . The host operating system can perform these actions with a process that executes in kernel process space user process space or both.

The kernel process space is virtual memory reserved for the host operating system s kernel which can include kernel extensions and device drivers for instance. The kernel process space has elevated privileges that is the kernel is allowed to perform certain privileged operations that are denied to processes running in the user process space . Examples of privileged operations include access to different address spaces access to special functional processor units in the host machine such as memory management units and so on. The user process space is a separate portion of virtual memory reserved for user mode processes. User mode processes cannot perform privileged operations directly.

The virtual machines and can be grouped together into a cluster. For example the virtual machines and can be grouped into a cluster for a geographic region and the cluster can be implemented as a data center a physical facility that houses computer systems and associated components e.g. power supplies environmental controls and security devices. An optional cluster manager can be configured to coordinate operations in a cluster and coordinate operations with cluster managers of other clusters. The cluster manager can be implemented as a system of one or more computers.

The cluster managers can implement a global virtual machine application programming interface API for virtual machine administrators to manage and perform operations on virtual machines in clusters of any region. An API is an interface that provides interactivity between software modules. An API allows one software component to access particular services implemented by another software component. An API defines the language and parameters that API calling software modules use when accessing the particular services that have been implemented.

The global virtual machine API implemented by the cluster manager provides the functionality for administrators to perform various operations for controlling virtual machines in one or more regions. For example an administrator in a first region can use the API to start a virtual machine in a different second region. Example API calls can include calls that perform the operations of starting a particular number of virtual machines starting a particular number of virtual machines in one or more particular regions specifying or uploading a particular virtual machine image starting a virtual machine from a particular virtual machine image migrating a particular virtual machine image from one region to another region stopping virtual machines in one or more regions specifying or uploading an update to an existing virtual machine image in addition to a variety of other commands.

In some implementations the cluster manager accesses a globally replicated database storing information about allocation of system resources. The database can keep track of for example the number type and status of virtual machines allocated to a particular user account. When virtual machines are started or terminated in a particular region the cluster manager server for that region can update the database accordingly. Changes can be replicated to other geographic regions of for use by the other cluster managers.

The metadata server can be executed on the same host OS as the virtual machine or the metadata server can be executed on a system external to the host OS of the virtual machine . The metadata server can be a Hypertext Transfer Protocol HTTP server for example and can be set up for the sole use of the virtual machine .

The metadata can be status and configuration information for the virtual machine exchanged with a cluster manager e.g. the cluster manager of . Examples of configuration information include basic data about the virtual machine e.g. geographic location of the cluster executing the virtual machine network settings and arbitrary information provided by an end user through a global virtual machine API. In addition the metadata can include information to provide access to extended services e.g. authentication secrets. Furthermore the metadata server can expose the internal status of the virtual machine e.g. status and statistics about processes executing on the virtual machine . The metadata can be coordinated by a cluster manager using the API.

The virtual machine includes virtual hardware a guest OS and guest applications e.g. as described above with reference to . The virtual machine also includes a synthetic file system . The synthetic file system is an interface to external metadata on the metadata server . The synthetic file system is mounted like a file system that provides access to a disk based file system but instead of providing access to a disk it provides access to the external metadata . Guest applications can access the external metadata for example using the same system calls used to access disk based files. The synthetic file system provides at least a read operation and a write operation to guest applications of the virtual machine .

The virtual machine can be booted from a generic boot image e.g. used to boot various virtual machines. To customize the virtual machine additional information can be passed to the virtual machine as external metadata . Some types of external metadata can be sensitive for example user names and passwords. Using the synthetic file system sensitive metadata can be restricted e.g. to different user accounts or security principals in the virtual machine .

When a guest application accesses sensitive metadata using a file system call to the synthetic file system the synthetic file system translates the file system call to a server request which can be processed by a trusted agent . The trusted agent is a process that communicates with the metadata server to read to and write from external metadata .

While the virtual machine is booting the trusted agent requests a token from the metadata server . In general the token can be any shared information used to authenticate the trusted agent to the metadata server . The metadata server can generate the token responsive to the request for a token and associated the token with the requesting trusted agent . For example where the metadata server is set up for the sole use of the virtual machine the metadata server can be configured to provide the token to the virtual machine only once for each time the virtual machine is booted. Hence the metadata server will deny a request for the token to any guest application that requests the token after the trusted agent requests the token .

The trusted agent can then pass the token back to the metadata server with server requests. The metadata server can trust the trusted agent because it can provide the token with its requests. If the trusted agent requests the token from the metadata server and is denied e.g. because some other application has already requested it the trusted agent can shut down the virtual machine .

The trusted agent receives access control information from the metadata server . The access control information specifies which guest applications or other types of accounts on the virtual machine can access the external metadata . That information can be exposed via the synthetic file system e.g. in the same manner that disk file permissions are exposed by the virtual hardware . For example a guest application can make a system call to the synthetic file system to determine whether it has access to the external metadata in the same way it would make a system call to a disk file system.

The synthetic file system can be implemented for example using Filesystem in Userspace FUSE a kernel module for certain operating systems. FUSE is useful because it can be used to create a synthetic filesystem without editing the system kernel.

The virtual machine includes virtual hardware a guest OS and guest applications e.g. as described above with reference to . The host OS mounts a synthetic file system on the virtual machine . The synthetic file system is an interface to external metadata available to the host OS. The synthetic file system can be implemented by a software driver and a paravirtualized hardware component e.g. so that the synthetic file system is a component of the guest OS and virtual hardware . Guest applications can access the external metadata using system calls to the synthetic file system . The system calls include at least a read operation and a write operation.

The synthetic file system also exposes access control information for the external metadata to the guest applications e.g. in the same manner that disk file permissions are exposed by the virtual hardware . For example a guest application can make a system call to the synthetic file system to determine whether it has access to the external metadata in the same way it would make a system call to a disk file system.

The synthetic file system redirects a system call for the external metadata into the host OS to be handled by the virtual machine monitor . The virtual machine monitor using the access control information determines whether or not the guest application or other process making the system call has appropriate access for the system call. The virtual machine monitor can enforce various security policies for accessing the external metadata .

The synthetic file system can be implemented for example using a 9P file system and Virtio. 9P is a protocol that is useful for passing data between a virtual machine and its host OS and Virtio is a standard for paravirtualized network and disk device drivers that can be used by guest applications cooperatively with a host OS in a virtual computing system. Virtio can be used to provide a ring buffer protocol for passing information between a virtual machine and its host.

In general the synthetic file system can be implemented using any of various appropriate tools. The synthetic file system can serialize a system call and pass the serialized system call to the virtual machine monitor . The serialized system call includes for example information about the requesting guest application or process so that the virtual machine monitor can enforce the security policy.

When the synthetic file system receives a system call and serializes the system call the synthetic file system can cause the running thread of the virtual machine to exit so that the virtual machine monitor can execute. The synthetic file system passes the serialized system call to the virtual machine monitor for example using a ring buffer that is shared between the virtual machine and the host OS .

The system executes a host operating system step . The host operating system can manage concurrent execution of one or more virtual machines e.g. as described above with reference to .

The system executes a virtual machine on the host operating system step . The virtual machine can execute a guest operating system that controls the execution of one or more guest applications within the virtual machine and provides services to the guest applications e.g. as described above with reference to . The virtual machine can virtualize underlying hardware of the system or other hardware.

The system mounts a synthetic file system on the virtual machine exposing the synthetic file system to one or more guest applications executing on the virtual machine step . The synthetic file system is configured to perform system calls for the guest applications. The system calls include at least a read operation and a write operation for reading from and writing to external metadata stored outside the virtual machine. For example the synthetic file system can be the synthetic file system of or the synthetic file system of .

Using the synthetic file system the system provides access to the external metadata and enforces a security policy for the external metadata step . The synthetic file system is configured to enforce the security policy by denying access to the external metadata to at least one of the guest applications.

For example the synthetic file system can receive a system call for the read operation or the write operation from a guest application. The system determines that the guest application is not authorized for the first system call by a security policy associated with the synthetic file system. The security policy is associated with the synthetic file system for example by a metadata server as described above with reference to or by a virtual machine monitor as described above with reference to . The system denies access to the external metadata to the first guest application. For example the synthetic file system can return an error value to the requesting guest application.

Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on computer storage medium for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be or be included in a computer readable storage device a computer readable storage substrate a random or serial access memory array or device or a combination of one or more of them. Moreover while a computer storage medium is not a propagated signal a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium can also be or be included in one or more separate physical components or media e.g. multiple CDs disks or other storage devices .

The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer readable storage devices or received from other sources.

The term data processing apparatus encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer a system on a chip or multiple ones or combinations of the foregoing The apparatus can include special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit . The apparatus can also include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system a cross platform runtime environment a virtual machine or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures such as web services distributed computing and grid computing infrastructures.

A computer program also known as a program software software application script or code can be written in any form of programming language including compiled or interpreted languages declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine object or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few. Devices suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN an inter network e.g. the Internet and peer to peer networks e.g. ad hoc peer to peer networks .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other. In some embodiments a server transmits data e.g. an HTML page to a client device e.g. for purposes of displaying data to and receiving user input from a user interacting with the client device . Data generated at the client device e.g. a result of the user interaction can be received from the client device at the server.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any inventions or of what may be claimed but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Thus particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous.

