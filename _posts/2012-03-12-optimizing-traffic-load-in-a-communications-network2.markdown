---

title: Optimizing traffic load in a communications network
abstract: Each application executing on an application server uses an extended version of the Berkeley Packet Filter (BPF) language to define an application-specific rule set. The application server also includes a Just-In-Time compiler to compile the BPF rule set. The compiled rule set is downloaded to a Packet Forwarding Entity (PFE) in the network, and used to control how the PFE steers data packets generated by the application through a communications network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09648133&OS=09648133&RS=09648133
owner: TELEFONAKTIEBOLAGET L M ERICSSON
number: 09648133
owner_city: Stockholm
owner_country: SE
publication_date: 20120312
---
The present invention relates generally to communications networks and more particularly to systems and methods for steering packets through a communications network.

Service Routers SRs are network devices capable of supporting a variety of different types of services such as Voice over IP VoIP telephony services. As is known in the art each different type of service may be associated with a different type of application hosted on one or more application servers. To support the different types of services the SR hosts a server load balancing SLB function that dynamically balances the traffic load from the different applications. Particularly the SLB function distributes the traffic load by forwarding data packets generated by the different applications and received at the SR to multiple servers or processing units.

Conventional SLB functions usually balance the traffic load based on the type of application that generated the traffic. For example application servers that send Electronic Programming Guides EPGs to set top boxes typically encapsulate data in General Packet Radio Service GPRS Tunneling Protocol GTP packets. Thus upon receipt of such GTP packets at the SR the SLB function would forward those packets to a server or processing unit via an appropriate port or interface associated with the forwarding of those types of packets. As another example a proxy communicating data packets using the HyperText Transfer Protocol HTTP requires traffic to be sent and received over port 80 8080. As such the SLB function would forward received HTTP packets to a server or processing unit via port 80 8080. Regardless of the type of application or service that generates the data packets however conventional SLB functions forward traffic to an appropriate processing unit based on the type of application that generated the data packet.

Conventionally the SLB function utilizes two main approaches to balance the traffic load at the SR. The first approach uses an Access Control List ACL to steer traffic to a destination. Particularly the SLB function first analyzes incoming data packets to determine predefined information such as a source address for the data packet. The SLB function then accesses the ACL based on the determined source address to identify a corresponding destination address for the data packet. Once the SLB function has determined the appropriate destination address it forwards the data packet to the destination address in accordance with a predefined rule. However such a conventional load balancing approach although useful is tied to certain limited information. Particularly packets may be steered through the network only according source and or destination address type of protocol and or source and destination port.

In the second approach the applications that generate the data packets explicitly code a fixed bit field in each data packet with predefined bits that identify the destination. Upon receiving the packet the SLB function extracts the predefined bits from the fixed bit field for use in selecting and forwarding the packet to an appropriate destination processing unit. This approach is also useful but not without its problems. As stated above the load balancing rules are different for each type of application that sends data packets to the SR. Therefore new forwarding path code must be developed and hosted at the SR to be able to support each new application type. Such a practice is resource intensive.

For example the need to develop new code can complicate the process of porting applications already supported at the SR to and or from other platforms. Additionally the forwarding path component at the SR needs to be re coded for each new application type. However it is difficult to add new application specific forwarding code into an existing forwarding plane. Further any new code could have unwanted interactions with existing load balancing code or there may be resource issues associated with some applications. It is difficult to optimize the various pieces of forwarding code because the code for each application type is independently developed. Such lack of optimization may lead to the inefficient usage of forwarding plane resources.

The present invention provides a system and method for optimally applying a set of steering rules at a packet forwarding entity PFE in a communications network. Particularly one or more PFEs are communicatively connected to one or more application servers ASs via a packet data network. The ASs each host one or more applications to provide a variety of different services to end users. Each application which may provide a different type of service uses the Berkeley Packet Filter BPF language to generate a set of application specific steering rules for each of the PFEs. These rules control how data packets generated by a given application are steered at the PFE.

To efficiently implement steering control at the PFE the applications describe their specific rule sets and associated data as text in a BPF source file. The applications then compile the source file using a Just In Time JIT compiler at the AS before downloading the compiled file to one or more of the PFEs. The JIT compiled file contains instructions native to the platform of the PFE and may be optimized according to one or more characteristics of the network. At runtime the PFE steers data packets generated by a given application through the network in accordance with the JIT compiled rules and constraints set forth by the given application.

Of course those skilled in the art will appreciate that the present invention is not limited to the above contexts or examples and will recognize additional features and advantages upon reading the following detailed description and upon viewing the accompanying drawings.

The present invention provides a system and method for optimally applying a set of steering rules at a packet forwarding entity PFE in a communications network. Particularly the PFE receives data packets generated by a plurality of different types of applications hosted on one or more application servers. Prior to sending traffic to the PFE however each application uses the Berkeley Packet Filter BPF language to generate a set of application specific steering rules to control how its data packets are steered at the PFE. As is known in the art the BPF is a conventional mechanism that allows network entities such as the PFE to filter incoming data packets to determine specific packets of interest. However the present invention extends this conventional BPF mechanism to also allow the different applications to control the steering behavior at the PFE for their packets.

In one embodiment of the present invention each application executing on an application server uses the BPF language to generate its own BPF based rule set defining how a given PFE is to steer packets generated by the application. Some PFEs may not be capable of interpreting BPF based rule sets or if they are may not be able to interpret such BPF rule sets with acceptable performance. Further not all PFEs have the same operating platform. Therefore the present invention uses a Just In Time JIT compiler to generate a code file from each application specific BPF rule set. Each JIT compiled code file includes efficient forwarding code that is native to each PFE platform that will receive the code file. Once the code files are downloaded to and installed on their corresponding PFEs data packets generated by the different applications are received at the PFEs and steered through the network in accordance with the appropriate compiled code file.

The use of the BPF language and the JIT compiler for steering application packets provides benefits that conventional methods of steering data packets do not provide. For example use of the extended BPF language allows applications to define specific fields or bits within its packets that are to be extracted at the PFE and used to steer the packet. Such steering may help to balance a load in the network for example. Additionally use of the JIT compiler to compile the BPF based source file i.e. the application specific BPF rule set enables network operators to deploy new and or different types of applications without having to first provide each different PFE with corresponding forwarding code customized specifically for that operating platform.

Turning now to the drawings is a block diagram illustrating a communications system configured to operate according to one embodiment of the present invention. As seen in system comprises an IP network such as the Internet for example that communicatively interconnects a plurality of servers with a PFE and an application server AS . Those skilled in the art will appreciate that although only a single PFE and a single AS are shown this is for illustrative purposes only and that the present invention is suited for use by multiple PFEs and ASs .

According to one or more embodiments of the present invention the application server includes a plurality of different types of applications. Each type of application performs one or more different services e.g. VoIP services for end users. According to the present invention each application generates its own set of application specific steering rules using an extended BPF language. As previously stated the extended BPF language allows each application to define filtering information as is conventional to allow the PFE to identify packets of interest. However according to the present invention the extended BPF language also allows each application to define or control how the PFE steers its data packets through the network .

Additionally as will be described later in more detail the application server comprises a JIT compiler for just in time compiling each set of application specific steering rules into native code for the PFE . The JIT compiler is a software program that is well known in the art. Thus the specifics of the JIT compiler are not described in detail herein. For the present invention however it is sufficient to understand that the application generates and saves its rule set as a BPF source file. The application server then utilizes the JIT compiler to just in time compile the source file. Once compiled the application server then uploads the resultant native code file to the PFE .

The PFE comprises a computing device such as a router for example configured to forward data packets through the network. In operation each PFE receives the native code file from the application server and stores it in memory. As stated above the native code file contains the rules functions and data needed by the PFE to steer the data packets generated by a given application through the network. A filtering mechanism executing on the PFE receives the data packets and as is conventional filters the packets to determine whether any are packets of interest. In addition however the filtering mechanism at the PFE also steers the incoming data packets through the network to one of the servers in accordance with the native code file compiled at the AS .

In operation one or more of the applications executing on AS generate data packets to send to the PFE . In one embodiment a given application may generate some or all of its data packets to include filtering information i.e. to identify which data packets generated by the given application are to be steered and or steering information i.e. to identify a destination where the data packets generated by the given application are to be steered . The filtering information and or the steering information may be placed anywhere in the packet but in one embodiment comprises one or more bits inserted into the header of the data packets.

Upon receipt of the data packets the ACL analyzes the filtering information to determine which of the incoming packets are considered packets of interest and which are not. If a given packet is not of interest the ACL simply forwards the data packet to the FIB or other forwarding table. The FIB then determines a destination address for the packet and forwards the packet to that address as is conventional. However those packets that are of interest are forwarded to the JIT compiled code file for further processing in accordance with the present invention.

Particularly the JIT compiled code file as stated above contains instructions native to the platform of PFE and data. The instructions and data function to steer data packets generated by a particular application through the network in accordance with the rules and constraints set forth by the application. Upon receiving an incoming packet from the ACL the extractor extracts the steering information from the data packet. The extracted data may be for example one or more bits at predetermined locations in the header of the data packet. The steering function which is an extended BPF code snippet compiled into the native code file then executes on the extracted bits. Particularly the steering function calculates a load balancing ID based on the extracted bits for use in steering the packet to balance a traffic load. The data packet and the calculated load balancing ID is then forwarded to the load balancer to determine a destination for the data packet based on the calculated load balancing ID. The destination may be for example one of the servers or a specified application A executing on one of the servers .

The application also generates the necessary source code for the steering function that executes on the data extracted from the incoming data packets as well as the size and data for the load balancer . The application may generate other information as well however whatever information is required for filtering and or steering its packets at the PFE the application defines that information using the extended BPF language.

Once the application has determined the type of information that the PFE should use to steer the data packets the application describes that information and the steering function to execute on the incoming data packets in the extended BPF language and saves the information to a source file box . Such information may describe tables or other data structures that describe the application specific rules for steering its data packets and or one or more optimizations that may occur at run time. In one embodiment the application defines one or more specific hardware components at the PFE to operate on the data packet. Defining specific components may help to ensure that specific actions or functions are performed on its data packets.

The application then invokes the JIT compiler to compile the BPF source file into the code file box . JIT compilers and their operation are well known in the art. Therefore the specific details of how the JIT compiler generates the code file are not described herein. However it is sufficient to say that the JIT compiler generates the code file from the BPF file for the PFE and that the resultant code file may also be used on any PFE having the same operating platform as the PFE . The compiled code file is then downloaded to the PFE and may be downloaded to one or more other PFEs having the same operating platform box .

For example the API may include functions that allow the application to generate the rule set to include data associating a given incoming packet with one or more predetermined destinations in the network. Additionally the API may contain functions that allow the application to identify one or more fields and or bits in the incoming data packets to extract and use as input into a steering function executing at the PFE . Alternatively or additionally the API may allow the application to generate or identify one or more policies e.g. load balancing policies of the network and or one or more performance requirements of the application that sending the data packet.

The application may then in some embodiments optimize the generated steering rules. For example the application may optimize its generated steering rules based on an analysis of the steering rules of one or more other applications executing on the application server box . Particularly the application will have access to the steering rules for multiple applications executing on the AS . Such access allows the application to merge the steering requirements from each of a plurality of different applications into a unified steering specification. The ability to selectively merge the steering rules across applications allows any given application to perform various meaningful optimizations of the PFE such as using the ACL and FIB for some data packets to maximize performance.

The application may also optimize its generated steering rules to control multiple different steering components at the PFE to share the steering load box . Such an optimization could allow the application to maximize the use of the available hardware and performance. For example a typical steering destination for an application data packet is an application executing on a controller or services card at a server. In some systems however it may be more efficient to split the steering function such that the steering occurs at one or more line cards at the PFE . The line cards will provide a more coarsely grained steering for the packets however such coarse steering may be sufficient with which to determine and steer the packet to an appropriate destination services card. Once at the destination services card the steering for the data packet may be refined so as to steer the data packet to the appropriate destination. In other systems it may be more effective to perform all steering functions at the line card.

In addition to these optimizations the application may also optimize its steering rules for a specific forwarding plane that will steer the data packet box . However regardless of where steering occurs or how it occurs the application specific steering rules generated by the application allows for the optimization of system wide characteristics. The application is therefore able to derive an optimal implementation for the steering rules based on aspects of the system that are considered optimal for steering its data packets.

As stated above the application specific steering rules optimized as necessary or desired are described in the extended BPF language and saved to a source file. The JIT compiler at the AS then translates the BPF source code into an intermediate representation i.e. byte code box and compiles the representation into a code file that is native to the platform of the PFE box . The JIT compiled code file is then sent to the PFE to configure the PFE to steer incoming packets at runtime box .

Particularly the extractor first extracts information from a received data packet to use in steering the data packet box . As stated previously the extracted information may include one or more bits in one or more predefined locations. The extracted information is then used as input to the steering function . Particularly the steering function uses the extracted bits in one embodiment as an input to compute a steering ID to use for load balancing box . The code file then uses the computed steering ID as an index into the load balancer and locates a corresponding steering rule defined by the application. The PFE then forwards the data packet according to the destination specified by the located steering rule box .

The programmable controller may comprise any of a variety of one or more programmable microprocessors that are configured to control the operation of AS according to instructions and data stored in memory . Such instructions include but are not limited to the code necessary for performing communications functions such as transmitting and receiving data packets to from the PFE and or one or more of the servers via IP network .

According to one or more embodiments of the present invention the code and instructions also include a JIT compiler . As stated previously the JIT compiler compiles the BPF source code file generated by an application hosted at the AS into the code file that contains the native instructions to control the PFE to steer data packets generated by the application to a desired destination. This code file as stated previously is downloaded to the PFE to control how the PFE steers the data packets generated by the application.

The programmable controller may also comprise any of a variety of one or more programmable microprocessors that are configured to control the operation of PFE according to instructions and data stored in memory . Such instructions include but are not limited to the code necessary for performing communications functions such as transmitting and receiving data packets to from the AS and or one or more of the servers via IP network . The code and instructions also include a filtering mechanism that is executed at the PFE for filtering and steering incoming data packets according to one or more embodiments of the present invention. Particularly the PFE receives a JIT compiled code file from the AS via the communications interface . The code file contains the native instructions to control the programmable controller to steer data packets generated by the application to a desired destination as previously described.

The present invention may of course be carried out in other ways than those specifically set forth herein without departing from essential characteristics of the invention. Therefore the present embodiments are to be considered in all respects as illustrative and not restrictive and all changes coming within the meaning and equivalency range of the appended claims are intended to be embraced therein.

