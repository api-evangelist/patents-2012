---

title: Secure software installation
abstract: Embodiments of the present disclosure provide methods and systems for securely installing software on a computing device, such as a mobile device. In one embodiment, the device executes an installer that securely installs the software. In order to perform installations securely, the installer configures one or more secure containers for the software and installs the software exclusively in these containers. In some embodiments, the installer randomly determines the identifiers for the containers. These identifiers remain unknown to the software to be installed. Instead, an installation framework maintains the correspondence between an application and its container. Other methods and apparatuses are also described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08850135&OS=08850135&RS=08850135
owner: 
number: 08850135
owner_city: 
owner_country: 
publication_date: 20120905
---
This application is a continuation of and claims priority to U.S. patent application Ser. No. 12 477 769 filed Jun. 3 2009 entitled Secure Software Installation now U.S. Pat. No. 8 285 949 issued Oct. 9 2012 which is incorporated herein by reference in its entirety for all purposes.

This application is also related to U.S. patent application Ser. No. 12 477 775 now U.S. Pat. No. 8 484 728 issued Jul. 9 2013 entitled Managing Securely Installed Applications filed on Jun. 3 2009 which is hereby incorporated by reference in its entirety.

The present invention relates generally to the installation of software on a computing. More particularly this invention relates to the secure installation of software.

Software security in computing devices especially mobile devices today is becoming increasing important. Computing devices especially mobile devices have become increasingly open. For example mobile devices now commonly allow for the installation of new applications to extend the functionality of the device. However this openness brings security risks such as the risk of malware just has been seen in the world of personal computers.

To deal with these risks most mobile device platforms have introduced various security architectures. Typically in these security architectures the mobile device platform is protected based on granting privileges to software usually based on code signing. The access control decision to assign privileges to software processes is based either on code signing or on explicit user approval or a combination thereof.

Unfortunately the cost of obtaining signatures and meeting strict quality requirements deters many developers from participating and contributing to application development. If a certain piece of software does not come with an acceptable signature the mobile device may give the user the option of deciding whether that software should be granted the requested privileges. Designing the user interaction for this step without hampering usability and security can be tedious. Furthermore when users are simply prompted whether they want to grant certain privileges to some software they often do not have enough information to understand the implications of this action.

Embodiments of the present disclosure provide methods and systems for securely installing software on a computing device such as a mobile device. In one embodiment the device executes an installer that securely installs the software. In order to perform installations securely the installer configures one or more secure containers for the software and installs the software exclusively in these containers. In some embodiments the installer randomly determines the identifiers for the containers. These identifiers remain unknown to the software to be installed. Instead an installation framework maintains the correspondence between an application and its container.

Other features of the present invention will be apparent from the accompanying drawings and from the detailed description which follows.

In the following description numerous details are set forth to provide a more thorough explanation of embodiments of the present invention. It will be apparent however to one skilled in the art that embodiments of the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring embodiments of the present invention.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

Embodiments of the present disclosure provide methods and systems for securely installing software on a computing device such as a mobile device. In one embodiment the device executes an installer that securely installs the software. In order to perform installations securely the installer configures one or more secure containers for the software and installs the software exclusively in these containers. In some embodiments the installer randomly determines the identifiers for the containers. These identifiers remain unknown to the software to be installed. Instead an installation framework maintains the correspondence between an application and its container.

For example each software application may have a unique identifier. This unique identifier may be included in the installation request or also determined by the installer. The installer then determines a randomly assigned identifier such as a directory name for one or more containers on the device in which the application will be installed. The containers may be a specific area of storage on the device or a directory defined on the device. Data specific to the software application including code storage documents preferences and other libraries are stored and restricted to these dynamic containers.

After installation an installation framework performs a bind process to correlate the randomly assigned identifier with the unique identifier of the application. The installation framework also manages the execution of the application. For example when the application is launched the application framework performs a search for that application s randomly assigned identifier and locates the application s container. The application is then allowed to execute within its container. During execution the software application may also be restricted in various ways by the installation framework to its dynamic containers. The installer may also work with a trusted operating system component such as the kernel to help enforce the container restrictions.

As noted the installer may use randomly assigned identifiers for the containers which are unknown to the software being installed. The random identifiers may be based on various functions such as a hash function and the like. In addition the random identifiers for the containers may be based on various unique attributes of the software. In some embodiments the installer stores this information only in a trusted cache for access by the installation framework.

Moreover if desired the use of random identifiers for containers may be used in conjunction with other security mechanisms. For example the operating system of the computing device may be configured to determine whether the code has been authorized by a trusted authority.

For example a trusted authority may authorize software for installation and or execution by digitally signing the software. As is known in the art a digital signature uses public key cryptography to ensure the integrity of data. If the code is authorized and verified as such it may be generally executed without any further system or user interaction if the code is not authorized its ability to be executed on the computing device may be restricted or even prevented.

In some embodiments the computing device may alert the user that the code is not authorized and ask the user if they still wish to execute the unauthorized code. In other embodiments the computing devices may be configured to prevent unauthorized code from being executed at all regardless of the user s wishes.

In order to help explain the embodiments of these and other concepts are provided in this description. shows an example of a computing environment in which the embodiments may be implemented. and illustrate an exemplary mobile device. illustrates a conceptual block diagram of an environment on the computing device that supports secure installation of software. And illustrate exemplary processes for securely installing software and for managing and synchronizing software. These figures will now be further described below beginning with reference to .

Source serves as the source of the software or program code to be installed. For example source can be a website or service that is accessible to the computing devices . In some embodiments source is an application that runs on the computing device and makes source accessible via the network .

For example the source may be a website or service which allows users of the computing devices to browse and download applications from an online content and media store. Such media stores may include stores such as Apple s iTunes Store App Catalog by Palm Inc. Android Market Windows Marketplace for Mobile by Microsoft the Ovi store by Nokia and BlackBerry App World by Research in Motion.

The applications on source may be available to purchase or free of charge depending on the application. The applications can be downloaded directly to the computing devices as will be further described.

Alternatively source may be associated with a particular software provisioning facility or developer that has been authorized to provide or deliver an application to be installed or tested in the device. Furthermore source may be associated with an Enterprise entity that has a massive installation scheme. That is an application may be distributed and installed in devices that are associated with the Enterprise entity e.g. employees of an Enterprise entity .

Network provides a communication infrastructure between computing devices and source . Network may be any type of wide area metropolitan area or local area network. In addition network may comprise both wired and wireless components.

In some embodiments network may be implemented on the Internet which is the well known global network of interconnected computers enabling users to share information. The components and protocols employed by network are well known to those skilled in the art.

Computing devices may an computing device used by a user. Computing devices may be mobile computing devices such as mobile telephones mobile smart phones or some other type of mobile device. Computing devices may be configured to run an operating system that requires some or all of its software and code to have been securely installed. Thus if software is delivered or installed in an unauthorized state to computing devices the devices may be unable to fully execute the code instructions included in the software because they have not been properly installed.

Computing devices may be any number of different types of computing devices including desktop computers laptop computers handheld computers personal digital assistant PDA devices mobile telephone devices media play device and the like. For purposes of illustration various embodiments related to a mobile device are provided. However one skilled in the art will recognize that the embodiments can be applied to any type of computing device.

In some implementations the mobile device includes a touch sensitive display . The touch sensitive display can be implemented with liquid crystal display LCD technology light emitting polymer display LPD technology or some other display technology. The touch sensitive display can be sensitive to haptic and or tactile contact with a user.

In some implementations the touch sensitive display can comprise a multi touch sensitive display . A multi touch sensitive display can for example process multiple simultaneous touch points including processing data related to the pressure degree and or position of each touch point. Such processing facilitates gestures and interactions with multiple fingers chording and other interactions. Other touch sensitive display technologies can also be used e.g. a display in which contact is made using a stylus or other pointing device. Some examples of multi touch sensitive display technology are described in U.S. Pat. Nos. 6 323 846 6 570 557 6 677 932 and 6 888 536 each of which is incorporated by reference herein in its entirety.

In some implementations the mobile device can display one or more graphical user interfaces on the touch sensitive display for providing the user access to various system objects and for conveying information to the user. In some implementations the graphical user interface can include one or more display objects . In the example shown the display objects are graphic representations of system objects. Some examples of system objects include device functions applications windows files alerts events or other identifiable system objects.

In some implementations the mobile device can implement multiple device functionalities such as a telephony device as indicated by a Phone object an e mail device as indicated by the Mail object a map devices as indicated by the Maps object a Wi Fi base station device not shown and a network video transmission and display device as indicated by the Web Video object . In some implementations particular display objects e.g. the Phone object the Mail object the Maps object and the Web Video object can be displayed in a menu bar . In some implementations device functionalities can be accessed from a top level graphical user interface such as the graphical user interface illustrated in . Touching one of the objects or can for example invoke a corresponding functionality.

In some implementations the mobile device can implement a network distribution functionality. For example the functionality can enable the user to take the mobile device and provide access to its associated network while traveling. In particular the mobile device can extend Internet access e.g. Wi Fi to other wireless devices in the vicinity. For example mobile device can be configured as a base station for one or more devices. As such mobile device can grant or deny network access to other wireless devices.

In some implementations upon invocation of a device functionality the graphical user interface of the mobile device changes or is augmented or replaced with another user interface or user interface elements to facilitate user access to particular functions associated with the corresponding device functionality. For example in response to a user touching the Phone object the graphical user interface of the touch sensitive display may present display objects related to various phone functions likewise touching of the Mail object may cause the graphical user interface to present display objects related to various e mail functions touching the Maps object may cause the graphical user interface to present display objects related to various maps functions and touching the Web Video object may cause the graphical user interface to present display objects related to various web video functions.

In some implementations the top level graphical user interface environment or state of can be restored by pressing a button located near the bottom of the mobile device . In some implementations each corresponding device functionality may have corresponding home display objects displayed on the touch sensitive display and the graphical user interface environment of can be restored by pressing the home display object.

In some implementations the top level graphical user interface can include additional display objects such as a short messaging service SMS object a Calendar object a Photos object a Camera object a Calculator object a Stocks object a Address Book object a Media object a Web object a Video object a Settings object and a Notes object not shown . Touching the SMS display object can for example invoke an SMS messaging environment and supporting functionality likewise each selection of a display object and can invoke a corresponding object environment and functionality.

Additional and or different display objects can also be displayed in the graphical user interface of . For example if the device is functioning as a base station for other devices one or more connection objects may appear in the graphical user interface to indicate the connection. In some implementations the display objects can be configured by a user e.g. a user may specify which display objects are displayed and or may download additional applications or other software that provides other functionalities and corresponding display objects.

In some implementations the mobile device can include one or more input output I 0 devices and or sensor devices. For example a speaker and a microphone can be included to facilitate voice enabled functionalities such as phone and voice mail functions. In some implementations an up down button for volume control of the speaker and the microphone can be included. The mobile device can also include an on off button for a ring indicator of incoming phone calls. In some implementations a loud speaker can be included to facilitate hands free voice functionalities such as speaker phone functions. An audio jack can also be included for use of headphones and or a microphone.

In some implementations a proximity sensor can be included to facilitate the detection of the user positioning the mobile device proximate to the user s ear and in response to disengage the touch sensitive display to prevent accidental function invocations. In some implementations the touch sensitive display can be turned off to conserve additional power when the mobile device is proximate to the user s ear.

Other sensors can also be used. For example in some implementations an ambient light sensor can be utilized to facilitate adjusting the brightness of the touch sensitive display . In some implementations an accelerometer can be utilized to detect movement of the mobile device as indicated by the directional arrow . Accordingly display objects and or media can be presented according to a detected orientation e.g. portrait or landscape. In some implementations the mobile device may include circuitry and sensors for supporting a location determining capability such as that provided by the global positioning system GPS or other positioning systems e.g. systems using Wi Fi access points television signals cellular grids Uniform Resource Locators URLs . In some implementations a positioning system e.g. a GPS receiver can be integrated into the mobile device or provided as a separate device that can be coupled to the mobile device through an interface e.g. port device to provide access to location based services.

In some implementations a port device e.g. a Universal Serial Bus USB port or a docking port or some other wired port connection can be included. The port device can for example be utilized to establish a wired connection to other computing devices such as other communication devices network access devices a personal computer a printer a display screen or other processing devices capable of receiving and or transmitting data. In some implementations the port device allows the mobile device to synchronize with a host device using one or more protocols such as for example the TCP IP HTTP UDP and any other known protocol.

The mobile device can also include a camera lens and sensor . In some implementations the camera lens and sensor can be located on the back surface of the mobile device . The camera can capture still images and or video.

The mobile device can also include one or more wireless communication subsystems such as an 802.11b g communication device and or a Bluetooth communication device . Other communication protocols can also be supported including other 802.x communication protocols e.g. WiMax Wi Fi 3G code division multiple access CDMA global system for mobile communications GSM Enhanced Data GSM Environment EDGE LTE long term evolution Advanced etc.

In some implementations each of one or more system objects of device has a set of system object attributes associated with it and one of the attributes determines whether a display object for the system object will be rendered in the top level graphical user interface. This attribute can be set by the system automatically or by a user through certain programs or system functionalities as described below. shows an example of how the Notes object not shown in is added to and the Web Video object is removed from the top graphical user interface of device e.g. such as when the attributes of the Notes system object and the Web Video system object are modified .

Sensors devices and subsystems can be coupled to the peripherals interface to facilitate multiple functionalities. For example a motion sensor a light sensor and a proximity sensor can be coupled to the peripherals interface to facilitate the orientation lighting and proximity functions described with respect to . Other sensors can also be connected to the peripherals interface such as a positioning system e.g. GPS receiver a temperature sensor a biometric sensor or other sensing device to facilitate related functionalities.

A camera subsystem and an optical sensor e.g. a charged coupled device CCD or a complementary metal oxide semiconductor CMOS optical sensor can be utilized to facilitate camera functions such as recording photographs and video clips.

Communication functions can be facilitated through one or more wireless communication subsystems which can include radio frequency receivers and transmitters and or optical e.g. infrared receivers and transmitters. The specific design and implementation of the communication subsystem can depend on the communication network s over which the mobile device is intended to operate. For example a mobile device can include communication subsystems designed to operate over a GSM network a GPRS network an EDGE network a Wi Fi or WiMax network and a Bluetooth network. In particular the wireless communication subsystems may include hosting protocols such that the mobile device may be configured as a base station for other wireless devices.

An audio subsystem can be coupled to a speaker and a microphone to facilitate voice enabled functions such as voice recognition voice replication digital recording and telephony functions.

The I 0 subsystem can include a touch screen controller and or other input controller s . The touch screen controller can be coupled to a touch screen . The touch screen and touch screen controller can for example detect contact and movement or break thereof using any of a plurality of touch sensitivity technologies including but not limited to capacitive resistive infrared and surface acoustic wave technologies as well as other proximity sensor arrays or other elements for determining one or more points of contact with the touch screen .

The other input controller s can be coupled to other input control devices such as one or more buttons rocker switches thumb wheel infrared port USB port and or a pointer device such as a stylus. The one or more buttons not shown can include an up down button for volume control of the speaker and or the microphone .

In one implementation a pressing of the button for a first duration may disengage a lock of the touch screen and a pressing of the button for a second duration that is longer than the first duration may turn power to the mobile device on or off. The user may be able to customize a functionality of one or more of the buttons. The touch screen can for example also be used to implement virtual or soft buttons and or a keyboard.

In some implementations the mobile device can present recorded audio and or video files such as MP3 AAC and MPEG files. In some implementations the mobile device can include the functionality of an MP3 player such as an iPod . The mobile device may therefore include a 32 pin connector that is compatible with the iPod . Other input output and control devices can also be used.

The memory interface can be coupled to memory . The memory can include high speed random access memory and or non volatile memory such as one or more magnetic disk storage devices one or more optical storage devices and or flash memory e.g. NAND NOR . The memory can store an operating system such as Darwin RTXC LINUX UNIX OS X WINDOWS or an embedded operating system such as VxWorks. The operating system may include instructions for handling basic system services and for performing hardware dependent tasks. In some implementations the operating system can be a kernel e.g. UNIX kernel .

The memory may also store communication instructions to facilitate communicating with one or more additional devices one or more computers and or one or more servers. The memory may include graphical user interface instructions to facilitate graphic user interface processing sensor processing instructions to facilitate sensor related processing and functions phone instructions to facilitate phone related processes and functions electronic messaging instructions to facilitate electronic messaging related processes and functions web browsing instructions to facilitate web browsing related processes and functions media processing instructions to facilitate media processing related processes and functions GPS Navigation instructions to facilitate GPS and navigation related processes and instructions camera instructions to facilitate camera related processes and functions and or other software instructions to facilitate other processes and functions e.g. access control management functions. The memory may also store other software instructions not shown such as web video instructions to facilitate web video related processes and functions and or web shopping instructions to facilitate web shopping related processes and functions. In some implementations the media processing instructions are divided into audio processing instructions and video processing instructions to facilitate audio processing related processes and functions and video processing related processes and functions respectively. An activation record and International Mobile Equipment Identity IMEI or similar hardware identifier can also be stored in memory .

Each of the above identified instructions and applications can correspond to a set of instructions for performing one or more functions described above. These instructions need not be implemented as separate software programs procedures or modules. The memory can include additional instructions or fewer instructions. Furthermore various functions of the mobile device may be implemented in hardware and or in software including in one or more signal processing and or application specific integrated circuits.

Installer is a program or process that installs files such as applications drivers or other software on computing device . In some embodiments installer is configured to read and analyze the contents of a software package to be installed such as a software package from source .

A software package from source may have a specific format and information that is used by installer . In particular a software package may include the software s full name a unique identifier for the software a description of its purpose version number vendor checksum and a list of dependencies necessary for the software to run properly. Upon installation installer may also store metadata about the software.

In addition the installer may be interfaced based on a predetermined application programming interface API . In one embodiment the API comprises functions to install an application uninstall an application archive an application and list installed applications. The API can also provide functions that instruct installer to verify application installation and access restrictions at run time. In some embodiments the API for the installer may provide primitives for these functions via a trusted portion of the operating system such as the kernel .

Operating system generally serves as an interface between hardware and the user. In particular operating system may be responsible for the management and coordination of activities and the sharing of the resources of the computing device . Operating system primarily acts as a host for applications and thus includes instructions that handle the details of the operation of the hardware of the computing device .

In addition operating system may offer a number of services to application programs and users. The applications running on computing device may access these services through APIs or system calls. For example by calling an API function an application can request a service from the operating system pass parameters and receive the results of the operation.

In some embodiments operating system may be like operating system shown in . Accordingly operating system may be an operating system such as Darwin RTXC LINUX UNIX OS X WINDOWS or an embedded operating system such as VxWorks.

Kernel is the central trusted component of operating system . The functions of kernel responsibilities include managing the resources such as the resources shown in and . In particular kernel provides access to resources such as the memory processor s and I 0 subsystems of computing device . In general kernel may employ API system calls and inter process communications to perform its function.

Trusted cache is a temporary storage area where frequently accessed data such as randomly assigned identifiers for containers can be stored for rapid access. For example cache may be implemented in memory of computing device . Furthermore trusted cache may be maintained in a trusted space of memory in order secure its information. In some embodiments access to trusted cache may be limited to certain components such as kernel .

Installation framework is a library file that controls how applications are securely installed on the computing device and the management of the securely installed applications. In some embodiments the installation framework restricts where and how applications can be installed on the computing device . For example the installation framework may contain supporting programs libraries or references to other files.

Storage may be any data storage device such as a hard disk memory optical disk etc. for computing device . In some embodiments information is stored in storage based on a known file system and directory structure. Such file systems and directory structures are known to those skilled in the art.

Of note however the various embodiments may employ directories having randomly assigned identifiers or names. In particular these random identifiers provide a level of indirection that helps allow the installation framework control the installation and execution of software within its container. The random identifiers are unknown to the application itself and known only to the installation framework . This mechanism provides the operation system a point of control that ensures the behavior of an application s installation and execution.

Containers refer to any collection of resources that are used store the program code of a software application and used by the application running on computing device such as disk space on storage and or space memory in memory . In some embodiments containers may comprise a directory that refers to a specific area of storage on the device . Data specific to the software application including code storage documents preferences and other libraries are stored and restricted to the containers .

In order to enhance security containers can employ randomly assigned identifiers such as random directory names that are unknown to the application. One advantage among others is that this prevents the application from becoming a security risk since it does not directly control its resources or directory space. As noted the installer may use randomly assigned identifiers for the containers . The random identifiers may be based on various functions such as a hash function of information provided in the application s package some other type of cryptographic function and the like. In addition the random identifiers for the containers may be based on various unique attributes of the software. For example unique application identifiers in the form of com.domain.email may be used in determining the random identifier for the container . In some embodiments the installer stores this information only in trusted cache .

During execution a software application may also be restricted in various ways to its containers . For example containers may comprise a set of resource limits imposed on programs by kernel such as I 0 bandwidth caps disk quotas network access restrictions and as noted above a restricted directory namespace known only to the installation framework .

Second installer determines a container for the application. For example installer may randomly assign an identifier or name for a directory that is to be used as container for the application e.g. application ABCD. For example installer may perform various cryptographic functions to determine generate a random identifier for container . Such cryptographic functions are known to those skilled in the art. In some embodiments installer may employ a hashing function that is based on information from the package in order to determine generate the random identifier for container . In addition installer may utilize various arbitrary attributes of the software to determine the random identifier. In the example shown in installer has generated 1AFF2 as the random identifier for the container .

Third installer makes a call to installation framework . In response installation framework may record the random identifier and associate it with the application. In addition installation framework may determine various constraints such as I O limits storage space etc. for the requested application in container .

Fourth installer installs the program code etc. in its container . In some embodiments each application is given one container . For example installer may call installation framework and install compiled code in storage .

Fifth the identifier for container is stored in trusted cache for later use by operating system and kernel . For example installation framework may record an entry in trusted cache that correlates application ABCD with container identifier 1AFF2 for container . Of course the installation framework may utilize other bind processes to correlate the randomly assigned identifier with the application being installed.

In addition to the process described above when a request to install the software is received computing device can also check a digital signature of the software or software package to verify its authenticity and or authorization. If the software is verified as being signed by a trusted authority installation framework may also permit installation of the computing device as additional or alternative criteria for allowing installation.

First computing device receives a request to launch or execute an application that has been securely installed on computing device . For example a user of computing device may select an application installed on the computing device. In the example shown in application ABCD has been selected by the user using a peripheral such as a touch screen etc. This information may then be passed via peripheral interface to operating system .

Second operating system services this request. For example operating system may instruct kernel to execute the requested application e.g. application ABCD. Because this application has been securely installed the location of container is unknown or initially beyond the control of the application.

Accordingly third kernel makes a call to installation framework requesting the identifier for container for application ABCD. Fourth installation framework may then perform a search for the container for the requested application and then responds with the identifier for container e.g. 1AFF2. 

For example kernel may perform a comparison of this unique identifier with the information stored in trusted cache . For example kernel may perform a text comparison to determine whether the identifier matches an entry that is stored in trusted cache .

If the information does not match what is stored in trusted cache then operating system may deny the application and or prompt the user for a response. For example the operating system may provide a warning message that the application could not be found by installation framework .

If the information matches what is stored in trusted cache then fifth kernel continues its service of the application. In particular the application is allowed to execute on computing device within the constraints of its container .

In addition to the process described above when a request to execute the software is received computing device can also check a digital signature of the software to verify its authenticity and or authorization. If the software is verified as being signed by a trusted authority installation framework may use this verification as additional or alternative criteria for allowing execution.

In response at block a container ID is dynamically and randomly generated where the container ID has no preexisting correlation with the software package and or an application therein. The container ID is used to identify a specific storage location in which the application would be installed. In one embodiment the container ID identifies a directory location of a file directory in which the software package is to be installed. At block the software package is installed at a container identified by a randomly generated container ID. Thereafter a relationship or correlation information between the application ID and the container ID is stored in a trusted or secure storage location such as a trusted cache within the device. As a result since a container ID is randomly generated an application would not know or has no preexisting relationship with its container and container ID. The correlation between an application ID and a container ID is only known and maintained by a system component such as the operating system. One of the purposes to install an application within a specific container is to isolate applications e.g. third party applications from each other. An application can only be installed and executed within its own container without any privilege to access another container of another application.

At block based on the retrieved container ID processing logic accesses a secured storage location such as a trusted cache to verify whether the application to be launched is associated with a container identified by the container ID. For example the secured location may include a table or data structure to maintain a relationship between an application ID and a container ID. At block if the container ID matches the one stored in the secured storage location the associated application identified by the application ID is launched within the associated container. Note that when an application is executed in addition to those provided by the system components e.g. OS the application can only access data within its container and it cannot access data of another container associated with another application.

A display controller and display device provide a visual user interface for the user this digital interface may include a graphical user interface which is similar to that shown on a Macintosh computer when running OS X operating system software. The system also includes one or more wireless transceivers to communicate with another data processing system A wireless transceiver may be a WiFi transceiver an infrared transceiver a Bluetooth transceiver and or a wireless cellular telephony transceiver. It will be appreciated that additional components not shown may also be part of the system in certain embodiments and in certain embodiments fewer components than shown in may also be used in a data processing system.

The data processing system also includes one or more input devices which are provided to allow a user to provide input to the system. These input devices may be a keypad or a keyboard or a touch panel or a multi touch panel. The data processing system also includes an optional input output device which may be a connector for a dock. It will be appreciated that one or more buses not shown may be used to interconnect the various components as is well known in the art. The data processing system shown in may be a handheld computer or a personal digital assistant PDA or a cellular telephone with PDA like functionality or a handheld computer which includes a portable gaming device or a cellular telephone or a media player such as an iPod or devices which combine aspects or functions of these devices such as a media player combined with a PDA and a cellular telephone in one device. In other embodiments the data processing system may be a network computer or an embedded processing device within another device or other types of data processing systems which have fewer components or perhaps more components than that shown in .

At least certain embodiments of the inventions may be part of a digital media player such as a portable music and or video media player which may include a media processing system to present the media a storage device to store the media and may further include a radio frequency RF transceiver e.g. an RF transceiver for a cellular telephone coupled with an antenna system and the media processing system. In certain embodiments media stored on a remote storage device may be transmitted to the media player through the RF transceiver. The media may be for example one or more of music or other audio still pictures or motion pictures.

The portable media player may include a media selection device such as a click wheel input device on an iPod or iPod Nano media player from Apple Inc. of Cupertino Calif. a touch screen input device pushbutton device movable pointing input device or other input device. The media selection device may be used to select the media stored on the storage device and or the remote storage device. The portable media player may in at least certain embodiments include a display device which is coupled to the media processing system to display titles or other indicators of media being selected through the input device and being presented either through a speaker or earphone s or on the display device or on both display device and a speaker or earphone s . Examples of a portable media player are described in published U.S. patent application numbers 2003 0095096 and 2004 0224638 both of which are incorporated herein by reference.

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the present invention also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable medium. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. a machine e.g. computer readable transmission medium electrical optical acoustical or other form of propagated signals e.g. carrier waves infrared signals digital signals etc. etc.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method operations. The required structure for a variety of these systems will appear from the description above. In addition embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

