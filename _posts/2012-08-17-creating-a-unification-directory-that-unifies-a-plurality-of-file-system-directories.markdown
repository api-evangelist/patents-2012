---

title: Creating a unification directory that unifies a plurality of file system directories
abstract: Various embodiments of a system and method for creating a unification directory to unify a group of directories are described herein. The system may enable a first directory to be unified with one or more other directories such that when directory operations are performed on the first directory, it appears to them that the first directory includes not only its own files, but also the files of the one or more other directories. This may be accomplished by creating a persistent, re-useable unification directory which includes directory entries corresponding to the names of the files in the first directory and the one or more other directories. The unification directory does not contain complete copies of the files. Instead, the unification directory is used to obtain a listing of the files when needed, and the system then re-directs file operations to the real files in the individual directories as necessary.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08812567&OS=08812567&RS=08812567
owner: Symantec Corporation
number: 08812567
owner_city: Mountain View
owner_country: US
publication_date: 20120817
---
This application is a continuation of and claims priority to U.S. patent application Ser. No. 12 393 684 entitled Creating a Unification Directory that Unifies a Plurality of File System Directories filed Feb. 26 2009 now U.S. Pat. No. 8 271 558.

This invention relates to computer software. More particularly the invention relates to a system and method for creating a unification directory that unifies a plurality of file system directories.

Computer systems generally store files on storage devices such as disk drives where the files are managed by a file system. A file system typically includes a plurality of directories which are organized in a hierarchy. For example the file system may have a root directory the root directory may have sub directories and the sub directories of the root directory may in turn have sub directories etc. Each file in the file system may be specified by a pathname that indicates the hierarchical sequence of directories that lead to the file. For example a pathname such as dir1 dir2 filename.txt indicates that a file named filename.txt is located in a directory named dir2 . The dir2 directory is in turn located in another directory named dir1 which is located in the root directory of the file system.

For each file the file system stores a set of data blocks for the file i.e. the actual data stored in the file by a user or application as well as metadata for accessing and managing the file. For example in Unix and Unix derived file systems file metadata is often stored in inodes. The inode for a file stores information about the file such as the number of bytes in the file protection and permission information addresses of data blocks for the file s data the dates and times when the file was created last accessed and modified etc. The inode may also store information about the inode itself such as an inode number that identifies the inode and possibly an inode version number.

Each directory in the file system may include a table of directory entries that maps the names of the files and sub directories in that directory to their corresponding inodes or other file metadata structures . In some file systems a directory is implemented as a special type of file that simply lists the directory entries. For each file in the directory the directory entry for the file simply maps the name of the file to the inode number of the file s inode. A software application may access a file if it knows the pathname of the file. For example the sequence of directories leading to the file may be traversed until the file s directory is reached and the directory entries of the directory may be consulted to map the name of the file to the file s corresponding inode. The file s inode may then be accessed and the information stored therein may be used to access the file. For example as noted above the inode may store addresses of data blocks e.g. data blocks on a disk drive or other storage device that hold the file s data. Thus the data blocks may be accessed for example to read data from the file or to append new data to the file.

For some applications it is necessary to unify a group of directories into a single directory. Consider an application that normally accesses a hardware driver file in a particular operating system directory. If the application is executed on a virtual computer instead of a real computer then it may be necessary to use a special driver file instead of the normal hardware driver file.

Suppose that the normal hardware driver file is named display.sys and is located in a directory e.g. t drivers . Suppose also that the special driver file has the same name as the normal hardware driver file and is located in another directory e.g. v . The functionality of replacing the normal hardware driver file with the special driver file can be transparently achieved by configuring a unification of the directories t drivers and v such that the t drivers appears to contain not only its own files but also the files of the v directory. A unification file system can implement the unification such that application programs are unaware that some of the files that appear to be in the directory t drivers are actually located in the v directory. For example if the v directory contains a file named foo.sys then an application may request to access the file using the pathname t drivers foo.sys and the unification file system will automatically intercept the request and redirect it to the foo.sys file in the v directory. In the case of the special driver file the t drivers directory already has a file named display.sys . The unification may be configured so that the v directory is given priority over the t drivers directory. Thus when the application requests the file t drivers display.sys the unification file system may intercept the request and redirect it to the display.sys file in the v directory instead of the display.sys file in the t drivers directory.

Various systems known in the prior art enable a group of directories to be unified in the manner described above. For example unification file systems also called union file systems may enable files and directories of separate file systems known as branches to be transparently overlaid forming a single coherent file system. Contents of directories which have the same path within the merged branches will be seen together in a single merged directory within the new virtual file system. When mounting branches the priority of one branch over the other is specified. Thus when multiple branches contain a file with the same name one gets priority over the others. Some application virtualization platforms also provide similar functionality enabling multiple directories to be unified e.g. as in the virtual computer example discussed above.

Some prior art systems for unifying a group of directories operate to dynamically create a temporary merged view of the underlying directories in the group each time a merged view of the directories is needed. For example each time a list of files in the merged directory needs to be obtained these prior art systems may dynamically obtain a listing of the files in each of the individual directories in the group and then merge the listings together. However dynamically obtaining a merged listing in this manner is a relatively expensive operation to perform and may decrease the efficiency of the system.

Various embodiments of a system and method for creating a unification directory to unify a group of file system directories including a first file system directory and one or more other file system directories are described herein. According to some embodiments the method may comprise performing the following in response to a first request to perform a first operation on the first directory creating a unification directory to unify the group of directories for each file of each directory of the group of directories creating a respective directory entry in the unification directory to represent the file and using the directory entries in the unification directory to read a listing of file names to use for the first operation where the listing of file names specifies each file of each directory of the group of directories.

The method may further comprise performing the following in response to a second request subsequent to the first request to perform a second operation on the first directory determining that the unification directory already exists and in response to determining that the unification directory already exists using the directory entries created in the unification directory in response to the first operation to read the listing of file names to use for the second operation.

Some embodiments of the method may further comprise after determining that the unification directory already exists determining whether any of the directories of the group of directories has a modification time newer than a modification time of the unification directory. The second listing of files may be read from the unification directory in response to determining that none of the directories of the group of directories has a modification time newer than a modification time of the unification directory.

Some embodiments of the method may further comprise performing the following in response to a third request to perform a third operation on the first directory determining that the unification directory already exists determining whether any of the directories of the group of directories has a modification time newer than a modification time of the unification directory and in response to determining that at least one of the directories of the group of directories does have a modification time newer than the modification time of the unification directory re creating the unification directory.

While the invention is susceptible to various modifications and alternative forms specific embodiments thereof are shown by way of example in the drawings and are described in detail. It should be understood however that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.

Various embodiments of a system and method for creating a unification directory to unify a group of directories are described herein. illustrates an example of a group of directories including a directory A root dir1 containing files A directory B t dir1 containing files B and directory C a doc containing files C. The system may enable the directories B and C to be unified with the directory A such that when directory operations are performed on the directory A it appears to them that the directory A includes not only the files A but also the files B and C. More particularly the system may accomplish this by creating a unification directory which includes directory entries corresponding to the names of the files A B and C. However the unification directory does not contain complete copies of the files. For example the actual file data of the files A B and C may not be copied. Instead the unification directory is used to obtain a listing of the files A B and C when needed and the system then re directs file operations to the real files in the individual directories A B and C as necessary.

An administrator or configuration software may configure the system to inform the system that the directories B t dir1 and C a doc should be merged into the directory A root dir1 so that it appears as if the directory A includes not only the files A but also the files B and C. In some embodiments the unification of the directories A B and C may also be configured with priority information assigning each of the directories A B and C a priority relative to the other directories.

The system may create the unification directory the first time it is needed. For example the first time an application attempts to open the directory A root dir1 the system may intercept the open request and check to see whether the unification directory has been created yet. In response to determining that the unification directory has not yet been created the system may create a new directory to be used as the unification directory . The unification directory may be created at any location within the file system. As used herein the term directory refers to file system information or data structures created by a file system directory create operation. For example in some Unix based systems the unification directory may be created by calling a mkdir function provided by the file system. In some embodiments a directory may be implemented as a special type of file which lists directory entries identifying the files and sub directories in the directory.

After the new unification directory has been created the system may add directory entries to the unification directory . For each file in each of the directories A B and C the system may add a corresponding directory entry to the unification directory . If more than one of the directories A B and C has a file with a certain file name then only one directory entry for that file name is added to the unification directory .

As discussed above a directory entry corresponding to a particular file typically maps the name of the file to the inode number of an inode which stores metadata for the file. However in some embodiments of the present system the inode numbers specified by the directory entries in the unification directory may not be used but instead only the file names specified by the directory entries in the unification directory may be needed. The primary purpose of the unification directory is simply to provide an efficient means for obtaining a list of file names of the files in the underlying individual directories A B and C. The directory entries in the unification directory may not be used to actually access any files in order to read data from or write data to the files. Instead the system may re direct requests to access particular files to the appropriate underlying directory. Thus in some embodiments the directory entries in the unification directory may not need to refer to valid inodes. In other embodiments the directory entries in the unification directory may refer to valid inodes but the inodes may not refer to any file data blocks.

Thus the unification directory may be created and the directory entries may be added to the directory in response to intercepting an open request to open the directory A root dir1 for the first time after the unification of the directories B and C with the directory A has been configured. The unification directory may then be opened and a handle or identifier to the unification directory may be passed back in response to the open request. The calling application that generated the open request may then read a listing of files from the unification directory. The calling application may then use the listing of files in any of various ways. As an example in one embodiment the calling application may be a file system program attempting to display a list of files in the directory A on a display screen. Thus after obtaining the listing of files from the unification directory the file system program may then pass the name of each file to a stat function or other function to obtain various attributes regarding the file such as the file length modification date etc.

Since it appears to the calling application that all of the files in the file listing are actually in the directory A the stat function calls or other file operation requests issued by the calling application may all be directed to the directory A e.g. using the pathname of the directory A and the file name of each file. However some of the files may actually be in the directory B or the directory C. Thus the system may intercept the file operation requests and re direct them to the appropriate directory as necessary. For example if the calling application attempts to perform a file operation on the pathname root dir1 Name F then the system may re map the pathname to t dir1 Name F since the Name F file is actually in the directory B.

In various embodiments the system may determine which directory each file is actually located in using any of various techniques. For example in some embodiments the system may simply access the directories unified by the unification directory to attempt to find a file with the specified name. As noted above the unification of the directories A B and C may be configured with priority information assigning each of the directories A B and C a priority relative to the other directories. Thus the system may access the directories in the order of their priorities until a file with the specified name is found. Once found the pathname specified by the file operation may be re mapped to the pathname of the file in the directory in which the file was found. In other embodiments the system may be able to determine which directory each file is actually located in without having to access the directories in this manner. For example in some embodiments the system may store mapping information useable to re map file operations to the appropriate directories.

The unification directory may be re used from one directory operation to the next as long as the underlying directories A B and C have not changed. This may increase the efficiency of the system since the individual directories do not all have to be opened and read every time an operation on the directory A is performed. Instead the previously created unification directory may simply be opened and used to obtain the file listing again. In some embodiments the unification directory may be created as a persistent directory in a file system. As used herein the term persistent directory means a directory that can be re used even after the power to the system has been turned off and then turned back on again.

The computer system may include one or more processors coupled to memory . In some embodiments the memory may include one or more forms of random access memory RAM such as dynamic RAM DRAM or synchronous DRAM SDRAM . However in other embodiments the memory may include any other type of memory instead or in addition.

The memory may store program instructions and or data. In particular the memory may store directory unification software . The directory unification software may execute to perform various functions described herein such as configuring a group of directories to be unified intercepting requests to access a directory that has been unified with others creating a unification directory intercepting a request to access a file in a directory that has been unified with others and re directing the request to another directory etc.

The memory may also store file system software which executes to perform various directory operations and file operations. The directory unification software may call the file system software to request various operations associated with a unification directory to be performed such as creating the unification directory and removing the unification directory.

The directory unification software may also intercept various directory operation and file operation requests that would normally be handled by the file system software . For example as described above in some embodiments the directory unification software may intercept a request to open the directory A and create the unification directory in response to the request if it has not already been created . The directory unification software may also intercept requests to access files in the directory A and re direct the requests to files in the directories B and C as necessary.

The memory may also store application software which executes to perform various applications that require the use of files and directories. The application software may not be aware of the directory unification functions implemented by the directory unification software .

It is noted that the processor is representative of any type of processor. For example in one embodiment the processor may be compatible with the x86 architecture while in another embodiment the processor may be compatible with the SPARC family of processors. Also in some embodiments the computer system may include multiple processors .

The computer system also includes one or more storage devices . The storage device s may store file system information e.g. information which implements one or more file systems. The file system information may include both the actual data for a plurality of files and metadata used to manage the files. In some embodiments all of the directories that are unified by a unification directory such as described herein may be directories in the same file system. In other embodiments a unification directory may unify directories located in multiple file systems.

In various embodiments the storage devices may include any of various kinds of storage devices. Examples of storage devices include disk storage units e.g. devices including one or more disk drives tape drives e.g. devices operable to store data on tape cartridges optical storage devices e.g. devices operable to store data on optical media flash memory storage devices etc.

The computer system may also include one or more input devices for receiving user input e.g. to the directory unification software or other programs executing on the computer system . As one example the directory unification software may be operable to display a graphical user interface enabling an administrator to specify a group of directories to be unified. The input device s may include any of various types of input devices such as keyboards keypads microphones or pointing devices e.g. a mouse or trackball . The computer system may also include one or more output devices for displaying output e.g. the graphical user interface of the directory unification software . The output device s may include any of various types of output devices such as LCD screens or monitors CRT monitors etc.

The computer system may also include network connection hardware through which the computer system couples to one or more networks enabling communication with other computer systems. The network connection may include any type of hardware for coupling the computer system to a network e.g. depending on the type of network. In various embodiments the computer system may be coupled to the other computer systems via any type of network or combination of networks. For example the network may include any type or combination of local area network LAN a wide area network WAN an Intranet the Internet etc. Examples of local area networks include Ethernet networks Fiber Distributed Data Interface FDDI networks and token ring networks. Also each computer may be coupled to the network using any type of wired or wireless connection medium. For example wired mediums may include Ethernet fiber channel a modem connected to plain old telephone service POTS etc. Wireless connection mediums may include a satellite link a modem link through a cellular service a wireless link such as Wi Fi a wireless connection using a wireless communication protocol such as IEEE 802.11 wireless Ethernet Bluetooth etc.

The directory unification software may enable an administrator or configuration software to configure a directory unification among a first file system directory and one or more other file system directories such that it appears as if the first file system directory includes not only its own files but also the files of the one or more other file system directories. A directory operation on the first file system directory may subsequently be performed where the directory operation requires a listing of the files in the first directory to be obtained. In a normal Unix based file system a listing of the files in a directory is typically obtained by simply opening the directory e.g. using an open function call and then reading the list of files from the directory e.g. using a readdir function call . In this case however the directory unification software may intercept the request to open the first directory and re direct the request to a unification directory according to the method illustrated in the flowchart of . The method of may be implemented by the directory unification software executing in conjunction with the file system software on the computer system .

As indicated in block a directory operation may attempt to open the first directory. For example the file system software may provide an application programming interface API which includes an open function or other function for opening a directory. Thus in some embodiments the directory operation may attempt to open the first directory by calling the open function and passing the pathname of the first directory as a parameter.

In various embodiments the directory operation that attempts to open the first directory may be any of various kinds of directory operations that require a listing of the files in the first directory to be obtained. As one example the directory operation may be an operation for displaying the files in the first directory on a display screen of the computer system .

As indicated in block the directory unification software may intercept the request to open the first directory. For example the directory unification software may include software installed as a listener or filter on the open function so that calls to the open function can be intercepted. The directory unification software may be configured to intercept requests to open the first directory in response to the administrator or configuration software configuring the one or more other directories to be unified with the first directory. 

As indicated in block the directory unification software may then determine whether the unification directory for unifying the one or more other file system directories with the first directory already exists e.g. if it was created in response to a previous directory operation performed on the first directory.

If the unification directory does not yet exist then the directory unification software may create the unification directory e.g. by calling a directory create operation provided by the API of the file system software . For example in a Unix based system the unification directory may be created by calling a mkdir function. In various embodiments the unification directory may be created anywhere within the file system e.g. at any branch and location within the hierarchy of directories in the file system. As one example if the first directory is named var doc then the unification directory may be created as t var doc . The unification directory is created as a persistent directory such that it can be subsequently re used for later directory operations as described below.

As indicated in block after creating the new unification directory the directory unification software may then create a respective directory entry in the unification directory to represent each file of each directory unified by the unification directory. In other words for each file in either the first directory or in one of the one or more other directories a corresponding directory entry may be added to the unification directory. However if more than one of the directories has a file with a certain file name then only one directory entry for that file name is added to the unification directory.

As discussed above it is not necessary to re create the actual files of any of the directories in the unification directory. The unification directory is simply used to obtain a listing of the names of all the files in the first directory as well as the names of all the files in the one or more other directories. Thus in some embodiments it may be sufficient to simply create the directory entries for the files in the unification directory without creating any inodes or other metadata structures for the files and without creating any file data for the files. In other embodiments the directory unification software may create inodes or other metadata structures for the files listed by the directory entries in the unification directory but may not create any file data for the files.

As indicated in block after the directory entries have been added to the unification directory the directory unification software may then open the unification directory and pass a handle or other reference to the open unification directory back to the directory operation which originally attempted to open the first file system directory. Thus the functionality of creating the unification directory is transparent to the directory operation. It may appear to the directory operation that a handle to the first directory was returned in response to the open request just as in a normal file system.

In block the directory operation may then use the handle of the unification directory or other reference to the unification directory returned in block to read the list of files from the unification directory. Thus it may appear to the directory operation that the first directory includes all of the files actually in the first directory as well as all of the files in the one or more other directories which are unified with the first directory since the directory entries of the unification directory specify the names of all of these files.

After obtaining the listing of files from the unification directory the directory operation may then perform further processing using the listing of files e.g. depending on the type of directory operation. For example if the directory operation is an operation for displaying the files on a display screen the directory operation may call a stat function or other function on each file to obtain various attributes of the file such as the file length creation time etc. For each file the directory operation may pass as a parameter to the stat function the pathname of the file. Since it appears to the directory operation that all of the files are in the first directory the directory operation may specify the pathname of each file as the name of the file appended onto the pathname of the first directory. As discussed above the directory unification software may intercept the stat function calls and re map the pathname so that the stat calls for files that are actually located in directories other than the first directory are re directed to the appropriate directory.

Suppose now that a subsequent directory operation is performed on the first directory where the subsequent directory operation also requires a listing of files in the first directory to be obtained. Similarly as described above the subsequent directory operation may attempt to open the first directory and the directory unification software may intercept the open request and check to determine whether the unification directory already exists as shown in blocks and . The directory unification software may know the name the unification directory would have and the location within the file system that it would be if it did exist. Thus in some embodiments the directory unification software may determine whether the unification directory already exists by simply checking to determine whether a directory with that name and at that location exists.

In this case the directory unification software determines that the unification directory does already exist since it was created as a persistent directory in response to the previous directory operation as described above. The directory unification software may then check to determine whether any of the underlying directories unified by the unification directory i.e. the first directory and the one or more other directories have been modified since the time when the existing unification directory was created as shown in block . If any of the underlying directories have been modified then the directory entries of the existing unification directory may no longer be valid e.g. since one or more of the files they name may have been deleted from the underlying directory or one or more new files may have been added to one or more of the underlying directories since the time when the unification directory was created. Thus in this case the directory unification software may delete the existing unification directory as shown in block and may re create a new unification directory as shown in blocks and and as described above. Thus the new unification directory will have a current listing of the files in the underlying directories.

If the directory unification software determines that none of the underlying directories unified by the unification directory has been modified since the time when the existing unification directory was created then a valid listing of the files in the underlying directories can still be obtained from the existing unification directory. In this case the existing unification directory is simply opened and its handle is returned to the directory operation which can then use the handle to obtain the file listing.

A directory can include both files and sub directories. Although the discussion above refers mainly to files it is noted that the discussion also applies to sub directories. For example suppose that a first directory includes a first set of files and a first sub directory and a second directory includes a second set of files and a second sub directory. A unification directory such as described above may be used to unify the second directory with the first directory such that it appears to application programs that the first directory includes its own files and sub directories as well as the files and sub directories of the second directory i.e. includes the first and second set of files as well as the first and second sub directory .

The functionality of unifying sub directories may be implemented similarly as described above with respect to files. For example for each sub directory in any of the underlying directories being unified by the unification directory a corresponding entry representing the sub directory may be added to the unification directory e.g. where the entry specifies the name of the sub directory. Thus when the unification directory is read e.g. using the readdir function the listing will include both the files and the sub directories of the underlying directories.

In some embodiments the sub directories may be added as file entries to the unification directory. This may not matter since the sub directory entries are only present in the unification directory for listing purposes. Functions such as stat or similar functions may later discover what type of object each entry in the unification directory refers to so that the object is used or displayed correctly. Similarly as discussed above when another function attempts to actually use one of the sub directories listed in the unification directory the directory unification software will re direct the access request to the actual sub directory in the underlying directory.

It is noted that various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer accessible storage medium. Generally speaking a computer accessible storage medium may include any storage media accessible by one or more computers or processors during use to provide instructions and or data to the computer s . For example a computer accessible storage medium may include storage media such as magnetic or optical media e.g. one or more disks fixed or removable tape CD ROM DVD ROM CD R CD RW DVD R DVD RW etc. Storage media may further include volatile or non volatile memory media such as RAM e.g. synchronous dynamic RAM SDRAM Rambus DRAM RDRAM static RAM SRAM etc. ROM Flash memory non volatile memory e.g. Flash memory accessible via a peripheral interface such as the Universal Serial Bus USB interface etc. In some embodiments the computer s may access the storage media via a communication means such as a network and or a wireless link.

Although the embodiments above have been described in considerable detail numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.

