---

title: Network sensor device
abstract: According to an embodiment, a sensor device is provided comprising a sensor; a transceiver; a processor configured to run an application; and a virtualization layer which comprises an application programming interface encapsulating application layer features of the sensor device and which is configured to provide to the application, via at least one service access point, a service to communicate with another sensor device by means of the transceiver, a service to control the sensor and a service to discover a sensor device network, have the sensor device leave a sensor device network and/or have the sensor device join a sensor device network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09549049&OS=09549049&RS=09549049
owner: Singapore Technologies Dynamics Pte Ltd
number: 09549049
owner_city: Singapore
owner_country: SG
publication_date: 20120321
---
This application claims priority from United States of America provisional patent application No. 61 454 872 filed 21 Mar. 2011 the content of it being hereby incorporated by reference in its entirety for all purposes.

The rapid advances and convergence of technologies such as MEMS Micro Electro Mechanical Systems sensor devices wireless networks and low power embedded processors have enabled a new generation of large scale wireless sensor networks WSN . In the near future tiny and cheap sensors may be extensively embedded within our living environment for sensing a large variety of physical phenomena of interest to users. Unlike information services on the Internet where the information often becomes stale or even useless sensor networks can seamlessly couple the physical environment with the digital world and deliver useful real time information to users according to their needs.

Wireless sensor networks have attracted tremendous interest in the industry because they have many important applications including environmental monitoring healthcare industrial automation military and homeland security disaster warning and rescue manufacturing and logistics intelligent transportation safety monitoring of urban and civil infrastructures smart grid smart buildings and homes and many other applications that we do not yet imagine.

These enormous business prospects spurred investments in the development of sensor network platform technologies at both the hardware and software operating platform level. At the hardware level the sensor nodes offer a mix of sensing processing communication and storage capabilities. Some commonly used sensor node platforms include the MicaZ iMote2 IRIS TelosB Atmel Raven Gumstix and Sentilla JCreate from vendors such as Memsic Atmel Gumstix and Sentilla.

However these hardware platforms differ in the processor specifications storage file system communication protocols and sensor technologies. At the operating and programming platform level these sensor node platforms are based on different platforms such as TinyOS Contiki .Net Micro Framework embedded Linux Sentilla etc. In addition the wireless communication protocols also vary from platform to platform and there exists a plethora of different protocols that are supported by various vendors. Some common wireless networking protocols for sensor networks include IEEE 802.15.4 ZigBee TinyOS MAC 6LoWPAN SICSLoWPAN and GSM 3G.

Various embodiments provide a sensor device comprising a sensor a transceiver a processor configured to run an application and a virtualization layer which comprises an application programming interface encapsulating application layer features of the sensor device and which is configured to provide to the application via at least one service access point a service to communicate with another sensor device by means of the transceiver a service to control the sensor and a service to discover a sensor device network have the sensor device leave a sensor device network and or have the sensor device join a sensor device network.

The following detailed description refers to the accompanying drawings that show by way of illustration specific details and embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention. Other embodiments may be utilized and structural logical and electrical changes may be made without departing from the scope of the invention. The various embodiments are not necessarily mutually exclusive as some embodiments can be combined with one or more other embodiments to form new embodiments.

The sensor device network includes a plurality of sensor devices in this example a first sensor device a second sensor device and a third sensor device .

The sensor devices may communicate via communication connections in this example a first communication connection between the first sensor device and the second sensor device a second communication connection between the first sensor device and the third sensor device and a third communication connection between the second sensor device and the third sensor device .

The topology of the sensor device network may for example be a single hop star where all the sensor devices are within transmission range of each other and multiple sensor nodes respond to a command node or central controller not shown .

The communication via the communication connections may be carried out according to various communication protocols and may include wireless or wireline communication. For example the communication may be carried out according to one or more of the wireless networking protocols IEEE 802.15.4 ZigBee TinyOS MAC 6LoWPAN SICSLoWPAN and GSM 3G. Different sensor devices may support different communication protocols.

At the hardware level the sensor devices also referred to as sensor nodes or just nodes may provide functions for sensing processing communication and data storage. For this they may for example include one or more sensor modules one or more actuators a processor and one or more memories. The sensor devices may for example be configured according to one or more of the sensor node platforms MicaZ iMote2 IRIS TelosB Atmel Raven Gumstix and Sentilla JCreate from vendors such as Memsic Atmel Gumstix and Sentilla.

At the operating and programming platform level these sensor node platforms are for example based on different platforms such as TinyOS Contiki .Net Micro Framework embedded Linux Sentilla etc.

Different sensor devices may be based on different platforms and for example use different operating systems .

Heterogeneity in sensor networks can be categorized into four dimensions hardware platform operating system communication stack and application schema. The hardware platform of a sensor node defines its physical attributes including sensor modules communication modules embedded processors and memories. There are many commercially available hardware platforms including MicaZ IRIS iMote2 TelosB SunSpot Gumstix etc. which differ from each other in terms of processor feature memory capacity I O interface etc. Heterogeneity in hardware platforms results in different low level processing mechanism part of which can be encapsulated by the operating system and shielded from programmers. To facilitate the development of sensor network applications there are several event driven programming model with their tailored extensions of the C programming language. TinyOS applications are constructed through defining static wiring structure among modularized software components while Contiki C uses protothreads to support multitasking. Both of them provide a rich component library.

Apart from the hardware software platform differences of sensor nodes when networked sensor applications are concerned two more heterogeneity dimensions are introduced. The first heterogeneity is the networking protocol heterogeneity. As sensor networks are usually constrained by the processing memory and energy limitations of sensor nodes many application tailored networking protocols have been proposed to cope with such constraints and improve system performance. With different networking protocols it is very difficult to integrate sensor network systems and make them interoperable. The second heterogeneity lies in the application layer which handles data and service management. Interoperable sensor nodes should share the same knowledge about how to make use of the data and other functionalities aka services provided by other sensor nodes.

The following items may be seen as the two main factors that affect the operation of a sensor network 

Sensor nodes using different hardware software platforms may be programmed over incoherent platforms and programming interfaces which form the corresponding application layer. This includes the operating environments used such as TinyOS Contiki embedded Linux etc. Each sensor node may provide different features in a unique manner. In addition programmability also covers the different functionalities of the sensor network such as joining a network requesting and providing data commanding different sensor nodes to carry out sensing tasks etc.

In this example each sensor device runs a respective application supports a respective network protocol runs a respective operating system and is based on a respective hardware platform .

At the network layer different protocols may specify the packet formats traffic management the network topologies of the sensor node networks etc.

In this example each sensor device runs a respective application supports a respective network protocol runs a respective operating system and is based on a respective hardware platform .

Thus sensor nodes with heterogeneous application layers and or network layers may not be able to interoperate and it may thus be very difficult to build a large scale sensor network using sensor nodes of different platforms e.g. using different operating systems network protocols etc. . Indeed most sensor network deployments make use of sensor nodes of similar platforms. In practice a large scale sensor network such as a sensor network for environmental monitoring is typically developed and deployed in several phases. A small scale prototype sensor network is first deployed to experiment with those basic sensing actuation tasks that are fundamental to the application. In the later phases this sensor network is then enhanced to handle more complicated sensing tasks employ better wireless networking technologies or harness the processing storage power of new sensor node platforms. To build and deploy a powerful but yet cost efficient large scale sensor network it typically makes sense to use sensor nodes that provide the best combination of functionalities and value for money. Also due to the phased deployment strategy it is impractical to replace the entire sensor network with the latest sensor node platforms given the investment already made for the existing sensor network. In fact it is often impractical to replace a sensor node with another node once it has been deployed in the field. Thus the existing restriction of having to deploy similar sensor nodes in a network may greatly limit the scalability and flexibility in terms of managing the ongoing cost of deploying and upgrading sensor networks using different cheaper and advanced sensor nodes.

These heterogeneity challenges may for example be addressed by unifying the respective layers. For example IBM s Mote Runner and Sentilla s JCreate introduce a virtual machine in a node to support programming in multiple languages for the same platform. However in order to achieve interoperability of heterogeneous platforms the respective virtual machine on each platform is needed and thus the original interoperability problem may be seen to persist.

For the application layer approaches such as OpenWSN and ZigBee introduce a very application specific application layer that can only be used in a specific application such as utility services or control and automation. These different application layers cannot be extended to build other sensor network applications and they do not interoperate as well.

Likewise devices and solutions that enable interoperability between different network layer protocols such as 6LoWPAN and ZigBee allow interoperability only in a peer to peer single hop setting and do not provide interoperability between two Wireless Personal Area Networks WPANs . Co existing WPANs can use the same radio interface with different protocol suites. For example Zigbee 6LoWPAN WirelessHART and other IEEE 802.15.4 protocol based WPANs share the same wireless radio with each other. The radios of co existing WPANs may also be different. For example a WPAN may be Bluetooth based while the other may be UWB based.

Virtualization may be introduced into sensor networks in various ways. Examples include the following 

However these approaches require a unique software layer operating system and application to be used in place of the existing very rich operating platforms. They are not able to make use of the features and capabilities that are already available in the existing platforms and thus can be seen to not really solve the issue of interoperability. They also require programmers to be trained for programming in the new platform and thus the existing code base is wasted.

According to one embodiment a virtualization technology is used which addresses enabling heterogeneous layers to co exist in the same sensor network or interoperate while in different sensor networks. One embodiment builds on top of existing platforms e.g. hardware platforms so that not only their features can be reused but existing applications and code base can also be integrated and reused. The virtualization framework according to various embodiments pushes the application limits of sensor networks by overcoming the existing limitation of using sensor nodes of a similar platform in a network.

In other words according to one embodiment the issue of heterogeneity of sensor devices is addressed by a semantics based and service oriented virtualization framework to handle the heterogeneities and enable transparent interoperability. The underlying philosophy of the virtualization framework according to an embodiment can be seen in changing the way applications are developed by introducing a virtualization layer between the operating system and sensor network applications. This according to one embodiment is illustrated in .

The sensor device further comprises a virtualization layer which comprises an application programming interface encapsulating application layer features of the sensor device and which is configured to provide to the application via at least one service access point a service to communicate with another sensor device by means of the transceiver a service to control the sensor and a service to at least one of discover a sensor device network have the sensor device leave a sensor device network and have the sensor device join a sensor device network.

According to one embodiment in other words a virtualization layer encapsulates the functionalities of a sensor device such as communication and sensor control such that they are accessible e.g. via a predetermined interface i.e. predetermined service access points by an application.

According to one embodiment the processor is further configured to run an operating system and the virtualization layer is above the operating system layer.

According to one embodiment the processor is further configured to run an operating system implementing a network protocol stack and the virtualization layer is configured to provide the service to communicate with another sensor device by means of the network protocol stack.

According to one embodiment the service to control the sensor includes controlling the sensor to perform a sensing operation.

According to one embodiment the sensor device comprises a hardware platform including the sensor and the transceiver. The hardware platform is for example MicaZ iMote2 IRIS TelosB Atmel Raven Gumstix or Sentilla JCreate but is not limited to these.

According to one embodiment the service to communicate with another sensor device is a service to communication with another sensor device having a different hardware platform.

According to one embodiment the virtualization layer provides network protocol translation functionality.

According to one embodiment the processor is further configured to run a TinyOS Contiki .Net Micro Framework embedded Linux or Sentilla operating system.

According to one embodiment the processor is further configured to run an operating system and the service to communicate with another sensor device is a service to communication with another sensor device running a different operating system.

In this example each sensor device runs a respective application respective operating system and is based on a respective hardware platform . Further each sensor device includes a respective virtualization layer .

The virtualization layer of each sensor device includes a runtime environment and an application programming interface API as it is illustrated in .

The virtualization layer includes a runtime environment and an API which will be described in more detail below.

The virtualization layer of each sensor device includes four components namely an API an application schema a protocol management component and a hardware abstraction component .

On the application programming level the application schema also referred to as Generalized Application Schema GAS and the Application Programming Interface API allow through flexible configurations of those functions accommodation of diversified applications. According to one embodiment the design of this schema has three merits 1 it is general enough to cover the requirements of diversified applications 2 it provides over the air configurability such that the application can be easily configured and retrofitted 3 it does not rely on central servers and control functions can be distributed into the system to reduce system traffic load and shorten event response time. The schema may be designed on top of a general sensor and actuator network and deals with the application layer of the protocol stack. According to one embodiment under layer protocols such as the physical layer media access control MAC layer and network layer protocols are outside the scope of this schema. Adopting this approach in the application layer of each sensing and actuation device can help to shift the workload from pre deployment system design to post deployment application design. The time required for system development can be shortened and the deployment procedure can be simplified. Furthermore the schema can also be used as a shared application interface in heterogeneous sensor and actuator networks to support both interoperability and scalability.

The application schema included in the virtualization layer provides a unified and generalized sensor network application schema. It enables integration and interoperability among distributed and heterogeneous sensor nodes and can serve as a unified application interface to integrate distributed applications through the Service Oriented Architecture SOA approach. The API of the virtualization framework encapsulates the application schema into programming interfaces as well as provides functions for easy manipulation of underlying networking protocols. With this API diversified sensor network applications conforming to the same application schema can be easily developed.

According to one embodiment separate versions of the runtime and the API e.g. of an API library of the virtualization layer are built on top of different sensor network operating systems which may for example include TinyOS and Contiki. Building multiple versions of the virtualization layer on top of several popular operating systems enables interoperability among heterogeneous operating systems and also preserves the advantages of the large code base and user community of these established operating systems. Programmers can stick to their familiar operating systems and enjoy a smooth learning curve of the transition phase towards virtualization.

The protocol management component takes care of protocol abstraction and encapsulation when the sensor node interconnects with other sensor nodes through networking protocols and enables interconnectivity between different networking protocols. Arbitrary stripped down versions of networking protocol suites may be supported by the protocol management component to cope with the energy limitations of the sensor nodes .

The hardware abstraction component of the virtualization framework sits on top of the existing operating system and interacts directly with the underlying platform s hardware resources i.e. the hardware platform . It may for example enable transparent access to the underlying hardware resources from other sensor nodes with different operating systems.

Regarding the network level interoperability connecting all sensor nodes or sensor networks to the Internet is a simple way to address interconnection issues. As long as all sensor networks e.g. WPANs are connected to the Internet they can communicate with each other. However as the Internet does not manage locality information of each WPAN. Even if co existing WPANs can communicate with each other through the Internet it is very difficult for them to discover their co location status and cooperate on location based issues.

On the contrary local interconnectivity among co existing WPANs not only provides connectivity but also helps to better exploit and share knowledge locally among the vicinity such that Location Based Services LBS which can be seen as crucial part of Ambient Intelligence technologies could be greatly facilitated. With the usage of a virtualization layer according to various embodiments local cooperation can be supported across different device level radio technologies and system level WPAN deployments. Further a convenient way for instant data sharing among proximate devices without the support of other infrastructure based systems such as the Internet is provided.

With the current trend of connecting WPANs to the Internet there are many corresponding efforts to decouple the applications of existing WPANs from their under layer protocols and transplant them onto Internet protocol suites such as the adaptation of ZigBee Application Layer ZAL over UDP. With the virtualization according to various embodiments these decoupled applications can be directly adopted by embedded devices despite their under layer protocols. Designs of new applications of embedded devices can also be totally protocol transparent.

Further features and effects of the virtualization framework according to various embodiments may include the following 

Various embodiments can be seen to leverage the concepts of platform virtualization PV service oriented architecture SOA and semantic web SW to address the incoherency between communication standards and data interpretation.

Platform Virtualization Virtualization technologies may include operating system virtualization storage virtualization network virtualization memory virtualization I O virtualization application virtualization desktop virtualization etc. The concept of platform virtualization can be seen in developing an intermediate layer between the hardware resources and the operating platform such that any operating platform can be used on any underlying hardware.

Service Oriented Architecture The importance of SOA in enterprise computing is widely recognized. SOA is a software architecture to enable loosely coupled integration and interoperability of distributed heterogeneous systems by using services as component elements. Services are computational entities that can be described published discovered orchestrated and invoked by other software entities. An SOA usually includes directory services that service providers register with. A request for a service with desired characteristics often results in a matchmaking process based on the profiles stored in the directory. Even if no adequate services are found in this manner it is still possible to build composite services by combining several existing services.

Semantic Web Semantics is the solution for finding meaningful information and integrating with the related information. This semantic provenance imposes a formally defined domain specific conceptual view on sensor data mitigates or eliminates terminological heterogeneity and enables the use of reasoning tools for knowledge discovery. Ontology is the key technology behind semantics for making information more meaningful by adding more knowledge. The term ontology can be defined as an explicit formal specification of concepts. Ontology binds together classes or concepts that may have subclasses to represent more specific concepts than in super classes properties or relationships that describe various features and properties of the concepts also termed as slots that are superimposed on the defined classes and or properties to define allowed values domain and range .

As illustrated in the operation of the sensor nodes is categorized into different layers. The hardware platform layer of a sensor node specifies the physical attributes of the sensor node such as the sensor modules e.g. one or more sensors communication modules the embedded processor and the memory. The next layer is the operating system layer that defines the firmware middleware programming environment. The operating system layer exposes the capabilities of the sensor node sensing routing storage etc. based on the underlying hardware platform . The operating system may support a particular network layer and the application or a plurality of applications may be built on top of the operating system.

Thus the manner in which the underlying platform is utilized by an application is largely defined by the operating system how different nodes talk to each other is defined by the network layer and how various nodes in the network implement and understand the application logic is defined by the application layer.

The virtualization layer allows two sensor nodes having different network and application layers with different mechanisms for data logging data representation data processing and routing to interoperate.

According to one embodiment the virtualization layer that sits on top of the operating system of a sensor device encapsulates the network layer and the application layer of the sensor device. This added layer functions on top of the operating system also referred to as the host operating system and provides the ability to use different application and network layers while making use of the system level features provided by the operating system. This is illustrated in .

In this example each sensor device runs a respective application has a respective virtualization layer runs a respective operating system and is based on a respective hardware platform .

The virtualization layer of a sensor device supports various network protocols e.g. a first network protocol and a second network protocol and applications e.g. a first application and a second application and enables the programmers to develop applications on top of the virtualization layer. Thus it is possible to exploit any network and application layer available within the virtualization layer .

This design also allows making the application independent from the network protocols . Thus the application developer can simultaneously use traditionally incompatible network layers and application layers such as ZigBee on the application layer with 6LoWPAN on the network layer. In addition he can also develop application and network layer gateways between two sensor networks or sensor devices running different network layer protocols and application layer protocols. Such gateways can perform the translation on the network layer and application layer and enable transparent interoperability between heterogeneous devices.

According to one embodiment the overall design of the virtualization layer is based on the SOA such that the capabilities of the sensor nodes are exposed and used as services including the network layer and the application layer.

The runtime environment see is for example a small footprint of the virtualization layer that hosts core services to handle on node jobs and network interconnectivity whereas the API provides a unified mechanism for developing the programmer and application specific services that are also managed by the runtime environment in a unified manner.

The runtime environment or virtualization layer runtime comprises generic services network management service management and tables to keep track of jobs routes and services. These runtime services either stay active all the time or are invoked on demand to handle various tasks. A packet parser of the generic services receives all the in bound packets and parses them to identify whether the packet should be routed or should be consumed by the node itself. For routing the network management service route discovery and the routing table are utilized. If the packet is to be consumed by the sensor node itself then an auto reply service is invoked if the packet requests something from the sensor node that can be served by the services that are part of the node s runtime. For example if the packet is for a service discovery then a discovery service in the service management tier is invoked and the details of the services hosted on the sensor node are retrieved from the service table which may for example include application semantics and an automatic reply is sent back to the requesting party.

If the incoming packet requests for a sensing actuation or automation control task to be initiated on the node then the scheduling execution control and job table components are used to schedule this task for execution.

The network management components of the runtime also include a protocol translation service that can dynamically switch from one protocol to the other. This component implements various network layer protocol stacks such as IEEE 802.15.4 TinyOS MAC ZigBee and IPv6 based 6LoWPAN. Essentially this component encapsulates various network layer protocols at the application layer and thus allows interoperability between heterogeneous network layers in a node to node or a node to network fashion. Initialization maintenance and route discovery components of the network management may also be employed for setting up the network layer maintaining the routes and routing the traffic respectively.

The virtualization layer runtime also includes core components to manage the services on the node as part of the service management functionalities. These include service discovery invocation and termination components that are invoked automatically in response to requests. The service table is maintained to serve as a registry for service configurations that can be dynamically retrofitted by a dynamic configuration component . The SOA approach provides application level interoperability between heterogeneous application layers and enables the building of a application service translation component . This component makes use of the Application Semantics for various application layers and allows programmers to translate to and fro between various applications.

According to one embodiment the virtualization layer API builds on top of the native operating system and encapsulates application services network protocols node level and data management features to expose them as functions to the application programmers. The various components of the API and their sub components are shown in . The purpose of the API is to enable application programmers to build sensor network applications in a unified manner by explicitly or implicitly using various application and network layers encapsulated within the API . The programmers develop application logic and the services specific to the application and the deployment on the node will be handled by the virtualization layer s runtime core services. For example the API is implemented for the most common sensor network platforms that support C Java and NesC languages. The libraries in the API belong to four main classes service management network management node management and data management .

Service management libraries enable programmers to interface with the sensors and actuation hardware available on the node using a sensing interface and an actuation interface . Through a create service library and a utilize service library the programmers can build complex workflows and deploy them on the nodes. An automation control library provides a protocol based approach for creating and activating complex control tasks such as gathering data from a number of sensors processing the data and reporting to the sink node in case of a significant event. Such automation controls are built on top of the existing core sensing and actuation services on the nodes. The service management also allows starting and stopping services and the building of the application logic to remotely discover services on known and unknown nodes and over known and unknown protocols thus enabling true interoperability.

The network management libraries provide basic features such as discovering joining and leaving a sensor network . A switch network protocol interface and a network protocol interface are used in case of joining and operating in heterogeneous network layers. A convenient network diagnostics library provides functions to detect anomalies in the network such as disconnections bandwidth throughput etc. from the application layer s perspective.

Since the health of the node itself is also crucial and its semantics should also be configured for network visibility purposes and to design the application logic the node management provides a node semantics configuration library and a node diagnostics library . The semantics management allows access to parameters such as the node s identification visibility role time sources physical and logical location network address etc. The diagnostics that can be accessed include the node s battery memory and CPU status permanent storage etc.

The data management library can be seen as an important feature of the API that provides basic data management and processing functions. These include a data sink function to gather data from a node or the network to another location data sync between one or more nodes in the network data compression to conserve network bandwidth and data security to preserve data privacy and allow authenticated access.

It should be noted that the API features can be used in a cascaded manner such that data can be gathered in a particular application layer context and processed in a different application and transmitted over a different network protocol. This feature allows truly scalable interoperability ease of programming over heterogeneous sensor network platforms.

The operating system is for example an RTOS Real Time Operating System . In such an operating system threads are termed tasks and can be scheduled individually through specifying priority and having delays within tasks. Similar to Contiki a continuous service is needed to run a task. Inter thread communication and coordination is achieved through RTOS primitives like mutexes semaphores events mailboxes and timers. This is illustrated in .

In the task diagram arrows represent possible calls to tasks including a control manager task an app task a parser task a receive task and a send task. Every task other than the receive task has a mailbox which acts like a notification queue. Every send of an element into the queue notifies the task . There is a mutex controlling the using of the radio resource shared by both the receive task and the send task.

The task functionalities are as described above e.g. may include functionalities of the runtime described with reference to . According to one embodiment the control manager task handles creation deletion and servicing of the automations by keeping a registry of similar content as the sensing manager which has been implemented. Each automation might be serviced by an individual timer. These control services can be passive or active. The control manager task also services control service discovery. The app application task resolves decisions made by application layer such as receiving of data or service discovery report.

A Control Auto Enabling Packet with homogenous input and single output may for example have the following format 

It should be noted that the broad application spectrum of sensor networks is well established. The deployment of large scale sensor networks involves stakeholders such as government agencies industrial companies research institutions and system integrators. Sensor network applications have provided substantial benefits and cost savings through their remote surveillance actuation and alert mechanisms. Thus the spectrum of sensor network applications is ever expanding and there is increased attention to seek higher returns on investment by reducing on going infrastructural operational repair and upgrade costs.

The sensor network virtualization technology according to various embodiments can be applied in a broad spectrum of application domains such as environmental monitoring homeland security battlefield operations disaster warning and rescue industrial automation healthcare monitoring transportation smart buildings smart grids etc. Potential customers include sensor network technology providers and technology integrators. The technology integrators will indirectly represent their clients such as government agencies and large companies which require heterogeneous sensor network solutions. The demand for interoperable sensor network technologies from technology integrators may motivate sensor network technology providers to include support for a virtualization framework as provided according to various embodiments as a built in feature of their platforms. Likewise the ability to develop interoperable sensor networks may be necessary for many applications thus promoting the adoption of a virtualization framework.

Sensor network platform providers may find greater interest in the technology according to various embodiments as it pushes the limits to which sensor networks can be applied. These providers may find it indispensable to provide the virtualization framework according to various embodiments as part of their product offerings due to the expected growing user interest.

Thus as the sensor network market grows the sensor network virtualization technology according to embodiments may find even greater clientele due to the flexibility and cost value benefit it offers to customers.

While the invention has been particularly shown and described with reference to specific example embodiments it should be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention as defined by the appended claims. The scope of the invention is thus indicated by the appended claims and all changes which come within the meaning and range of equivalency of the claims are therefore intended to be embraced.

