---

title: Deferred evaluation and presentation of a custom diagnostic analysis
abstract: A device receives code generated via a technical computing environment (TCE), performs a test on the code to generate a test result, and generates test information based on the performance of the test on the code. The device outputs or stores the test result, and receives, based on the test result, a request for a diagnostic analysis of the code. The device performs, based on the request, the test information, and at least one diagnostic, a diagnostic analysis of the code to generate a diagnostic result, and outputs or stores the diagnostic result.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09117029&OS=09117029&RS=09117029
owner: The MathWorks, Inc.
number: 09117029
owner_city: Natick
owner_country: US
publication_date: 20121205
---
The accompanying drawings which are incorporated in and constitute a part of this specification illustrate one or more implementations and together with the description explain these implementations. In the drawings 

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

A technical computing environment TCE may provide a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that requires the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In one example a TCE may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations.

Code generated by the TCE may be tested by a diagnostic system to determine whether the code will function properly e.g. when executed . When the code fails a test typical diagnostic systems output a diagnostic string that includes very limited information e.g. a static explanation of the failure . Such diagnostic systems do not enable a user e.g. a tester to perform a specific diagnostic analysis to obtain more detailed information about the failure of the code. Other diagnostic systems may automatically perform the specific diagnostic analysis even when the tester does not want more detailed information about the failure. Performance of the specific diagnostic analysis may consume time and costly computing resources.

Systems and or methods described herein may defer evaluation and presentation of a custom diagnostic analysis. In one example the systems and or methods may provide a rich diagnostic infrastructure that is flexible and customizable. The systems and or methods may enable a tester to create a custom diagnostic that performs an in depth and complete diagnostic analysis of a state of program code when requested by the tester. For example the tester may request the diagnostic analysis of the code when the code fails or when the code passes i.e. does not fail . Thus the systems and or methods may enable the diagnostic analysis to be deferred until the tester or a test framework requests the diagnostic analysis. Such an arrangement may prevent the diagnostic analysis from unnecessarily consuming time and costly computing resources.

As further shown in the testing component may receive code generated by the TCE. The TCE code may include text based code that may require further processing to execute binary code that may be executed text files that may be executed in conjunction with other executables etc. In one example the TCE code may include a model that may need to be tested by the testing component.

The testing component may receive a test to perform on the TCE code. In one example the test may include one or more test application programming interfaces APIs that perform particular tests on one or more portions of the TCE code. The testing component may perform the test on the TCE code to generate a test result. In one example the test result may include an indication e.g. a diagnostic string that provides a static explanation of whether one or more portions of the TCE code passed or failed the test. During performance of the test on the TCE code the testing component may generate test information and may provide the test information to the storage component for storage. In one example the test information may include states of the TCE code during execution of the portions of the TCE code. For example the testing component may capture a state of a TCE model when the TCE model experiences a failure and may store this state information in the storage component.

The testing component may output e.g. display to the tester and or may store the test result. Alternatively or additionally the testing component may provide the test result to the diagnostic analysis component. The diagnostic analysis component may receive the test result and may provide e.g. display the test result to the tester. Based on the test result the tester may or may not decide to perform a diagnostic analysis on the TCE code. If the tester decides to perform the diagnostic analysis on the TCE code the tester may provide a request to perform the diagnostic analysis to the diagnostic analysis component.

If the diagnostic analysis component receives the request to perform the diagnostic analysis the diagnostic analysis component may retrieve the test information from the storage component. The diagnostic analysis component may perform based on the request and the test information a diagnostic analysis of the TCE code to generate a diagnostic result. In one example the diagnostic result may include the diagnostic string an in depth analysis of a failure in the TCE code active processes during occurrence of the failure in the TCE code etc. The diagnostic analysis component may output e.g. display to the tester and or may store the diagnostic result.

The terms code and program code as used herein are to be used interchangeably and are to be broadly interpreted to include text based code that may not require further processing to execute e.g. C code Hardware Description Language HDL code very high speed integrated circuits VHSIC HDL VHDL code Verilog Java and or other types of hardware or software based code that may be compiled and or synthesized binary code that may be executed e.g. executable files that may directly be executed by an operating system bitstream files that can be used to configure a field programmable gate array FPGA Java byte code object files combined together with linker directives source code makefiles etc. text files that may be executed in conjunction with other executables e.g. Python text files a collection of dynamic link library DLL files with text based combining configuration information that connects pre compiled modules an extensible markup language XML file describing module linkage etc. etc. In one example code may include different combinations of the above identified classes e.g. text based code binary code text files etc. . Alternatively or additionally code may include code generated using a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations. Alternatively or additionally code may be of any type such as function script object etc. and a portion of code may include one or more characters lines etc. of the code.

Client device may include one or more devices that are capable of communicating with server device via network . For example client device may include a laptop computer a personal computer a tablet computer a desktop computer a workstation computer a smart phone a personal digital assistant PDA and or other computation and communication devices.

Server device may include one or more server devices or other types of computation and communication devices that gather process and or provide information in a manner described herein. Server device may include a device that is capable of communicating with client device e.g. via network . In one example server device may include one or more laptop computers personal computers workstation computers servers central processing units CPUs graphical processing units GPUs application specific integrated circuits ASICs field programmable gate arrays FPGAs etc. and or software e.g. a simulator executing on the aforementioned devices. In one example server device may include TCE and may perform some or all of the functionality described herein for client device . Alternatively server device may be omitted and client device may perform all of the functionality described herein for client device .

Network may include a network such as a local area network LAN a wide area network WAN a metropolitan area network MAN a telephone network such as the Public Switched Telephone Network PSTN an intranet the Internet or a combination of networks.

TCE may be provided within a computer readable medium of client device . Alternatively or additionally TCE may be provided in another device e.g. server device that is accessible by client device . TCE may include hardware or a combination of hardware and software that provides a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that required the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In one implementation TCE may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations.

For example TCE may use an array as a basic element where the array may not require dimensioning. These arrays may be used to support array based programming where an operation may apply to an entire set of values included in the arrays. Array based programming may allow array based operations to be treated as high level programming that may allow for example operations to be performed on entire aggregations of data without having to resort to explicit loops of individual non array operations. In addition TCE may be adapted to perform matrix and or vector formulations that can be used for data analysis data visualization application development simulation modeling algorithm development etc. These matrix and or vector formulations may be used in many areas such as statistics image processing signal processing control design life sciences modeling discrete event analysis and or design state based analysis and or design etc.

TCE may further provide mathematical functions and or graphical tools e.g. for creating plots surfaces images volumetric representations etc. . In one implementation TCE may provide these functions and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . Alternatively or additionally TCE may provide these functions as block sets or in another way such as via a library etc.

TCE may be implemented as a text based environment e.g. MATLAB software Octave Python Comsol Script MATRIXx from National Instruments Mathematica from Wolfram Research Inc. Mathcad from Mathsoft Engineering Education Inc. Maple from Maplesoft Extend from Imagine That Inc. Scilab from The French Institution for Research in Computer Science and Control INRIA Virtuoso from Cadence Modelica or Dymola from Dynasim etc. a graphically based environment e.g. Simulink software Stateflow software SimEvents software Simscape software etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments Dymola by Dynasim SoftWIRE by Measurement Computing WiT by DALSA Coreco VEE Pro or SystemVue by Agilent Vision Program Manager from PPT Vision Khoros from Khoral Research Gedae by Gedae Inc. Scicos from INRIA Virtuoso from Cadence Rational Rose from IBM Rhopsody or Tau from Telelogic Ptolemy from the University of California at Berkeley aspects of a Unified Modeling Language UML or SysML environment etc. or another type of environment such as a hybrid environment that includes one or more of the above referenced text based environments and one or more of the above referenced graphically based environments.

TCE may include a programming language e.g. the MATLAB language that may be used to express problems and or solutions in mathematical notations. The programming language may be dynamically typed and or array based. In a dynamically typed array based computing language data may be contained in arrays and data types of the data may be determined e.g. assigned at program execution time.

For example suppose a program written in a dynamically typed array based computing language includes the following statements 

Now suppose the program is executed for example in a TCE such as TCE . During run time when the statement A hello is executed the data type of variable A may be a string data type. Later when the statement A int32 1 2 is executed the data type of variable A may be a 1 by 2 array containing elements whose data type are 32 bit integers. Later when the statement A 1.1 2.2 3.3 is executed since the language is dynamically typed the data type of variable A may be changed from the above 1 by 2 array to a 1 by 3 array containing elements whose data types are floating point. As can be seen by this example data in a program written in a dynamically typed array based computing language may be contained in an array. Moreover the data type of the data may be determined during execution of the program. Thus in a dynamically type array based computing language data may be represented by arrays and data types of data may be determined at run time.

TCE may provide mathematical routines and a high level programming language suitable for non professional programmers and may provide graphical tools that may be used for creating plots surfaces images volumetric representations or other representations. TCE may provide these routines and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . TCE may also provide these routines in other ways such as for example via a library local or remote database e.g. a database operating in a computing cloud remote procedure calls RPCs and or an application programming interface API . TCE may be configured to improve runtime performance when performing computing operations. For example TCE may include a just in time JIT compiler.

Although shows example components of environment in other implementations environment may include fewer components different components differently arranged components and or additional components than those depicted in . Alternatively or additionally one or more components of environment may perform one or more other tasks described as being performed by one or more other components of environment .

Processing unit may include one or more processors microprocessors or other types of processing units that may interpret and execute instructions. Main memory may include one or more random access memories RAMs or other types of dynamic storage devices that may store information and or instructions for execution by processing unit . ROM may include one or more ROM devices or other types of static storage devices that may store static information and or instructions for use by processing unit . Storage device may include a magnetic and or optical recording medium and its corresponding drive.

Input device may include a mechanism that permits a user to input information to device such as a keyboard a camera an accelerometer a gyroscope a mouse a pen a microphone voice recognition and or biometric mechanisms a remote control a touch screen a neural interface etc. Output device may include a mechanism that outputs information to the user including a display a printer a speaker etc. Communication interface may include any transceiver like mechanism that enables device to communicate with other devices networks and or systems. For example communication interface may include mechanisms for communicating with another device or system via a network.

As described herein device may perform certain operations in response to processing unit executing software instructions contained in a computer readable medium such as main memory . A computer readable medium may be defined as a non transitory memory device. A memory device may include space within a single physical memory device or spread across multiple physical memory devices. The software instructions may be read into main memory from another computer readable medium such as storage device or from another device via communication interface . The software instructions contained in main memory may cause processing unit to perform processes described herein. Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

Although shows example components of device in other implementations device may include fewer components different components differently arranged components and or additional components than depicted in . Alternatively or additionally one or more components of device may perform one or more other tasks described as being performed by one or more other components of device .

Block diagram editor may include hardware or a combination of hardware and software that may be used to graphically specify models of dynamic systems. In one implementation block diagram editor may permit a user to perform actions such as construct edit display annotate save and or print a graphical model e.g. a block diagram that visually and or pictorially represents a dynamic system . In another implementation block diagram editor may permit a user to create and or store data relating to graphical entities .

A textual interface may be provided to permit interaction with block diagram editor . A user may write scripts that perform automatic editing operations on a model using the textual interface. For example the textual interface may provide a set of windows that may act as a canvas for the model and may permit user interaction with the model. A model may include one or more windows depending on whether the model is partitioned into multiple hierarchical levels.

Graphical entities may include hardware or a combination of hardware and software that may provide entities e.g. signal lines buses etc. that represent how data may be communicated between functional and or non functional units and blocks of a model. Blocks may include fundamental mathematical elements of a block diagram model.

Execution engine may include hardware or a combination of hardware and software that may process a graphical model to produce simulation results may convert the graphical model into executable code and or may perform other analyses and or related tasks. In one implementation for a block diagram graphical model execution engine may translate the block diagram into executable entities e.g. units of execution following the layout of the block diagram. The executable entities may be compiled and or executed on a device e.g. client device to implement the functionality specified by the model.

Graphical models may include entities with relationships between the entities and the relationships and or the entities may have attributes associated with them. The entities my include model elements such as blocks and ports. The relationships may include model elements such as lines e.g. connector lines and references. The attributes may include model elements such as value information and meta information for the model element associated with the attributes. Graphical models may be associated with configuration information. The configuration information may include information for the graphical model such as model execution information e.g. numerical integration schemes fundamental execution period etc. model diagnostic information e.g. whether an algebraic loop should be considered an error or result in a warning model optimization information e.g. whether model elements should share memory during execution model processing information e.g. whether common functionality should be shared in code that is generated for a model etc.

Additionally or alternatively a graphical model may have executable semantics and or may be executable. An executable graphical model may be a time based block diagram. A time based block diagram may consist for example of blocks e.g. blocks connected by lines e.g. connector lines . The blocks may consist of elemental dynamic systems such as a differential equation system e.g. to specify continuous time behavior a difference equation system e.g. to specify discrete time behavior an algebraic equation system e.g. to specify constraints a state transition system e.g. to specify finite state machine behavior an event based system e.g. to specify discrete event behavior etc. The lines may represent signals e.g. to specify input output relations between blocks or to specify execution dependencies between blocks variables e.g. to specify information shared between blocks physical connections e.g. to specify electrical wires pipes with volume flow rigid mechanical connections etc. etc. The attributes may consist of meta information such as sample times dimensions complexity whether there is an imaginary component to a value data type etc. associated with the model elements.

In a time based block diagram ports may be associated with blocks e.g. blocks . A relationship between two ports may be created by connecting a line e.g. a connector line between the two ports. Lines may also or alternatively be connected to other lines for example by creating branch points. For instance three or more ports can be connected by connecting a line to each of the ports and by connecting each of the lines to a common branch point for all of the lines. A common branch point for the lines that represent physical connections may be a dynamic system e.g. by summing all variables of a certain type to 0 or by equating all variables of a certain type . A port may be an input port an output port an enable port a trigger port a function call port a publish port a subscribe port an exception port an error port a physics port an entity flow port a data flow port a control flow port etc.

Relationships between blocks e.g. blocks may be causal and or non causal. For example a model may include a block that represents a continuous time integration block that may be causally related to a data logging block by using a line e.g. a connector line to connect an output port of the continuous time integration block to an input port of the data logging block. Further during execution of the model the value stored by the continuous time integrator may change as the current time of the execution progresses. The value of the state of the continuous time integrator may be available on the output port and the connection with the input port of the data logging block may make this value available to the data logging block.

A sample time may be associated with the elements of a graphical model. For example a graphical model may include a block e.g. block with a continuous sample time such as a continuous time integration block that may integrate an input value as time of execution progresses. This integration may be specified by a differential equation. During execution the continuous time behavior may be approximated by a numerical integration scheme that is part of a numerical solver. The numerical solver may take discrete steps to advance the execution time and these discrete steps may be constant during an execution e.g. fixed step integration or may be variable during an execution e.g. variable step integration .

Alternatively or additionally a graphical model may include a block e.g. block with a discrete sample time such as a unit delay block that may output values of a corresponding input after a specific delay. This delay may be a time interval and this interval may determine a sample time of the block. During execution the unit delay block may be evaluated each time the execution time has reached a point in time where an output of the unit delay block may change. These points in time may be statically determined based on a scheduling analysis of the graphical model before starting execution.

Alternatively or additionally a graphical model may include a block e.g. block with an asynchronous sample time such as a function call generator block that may schedule a connected block to be evaluated at a non periodic time. During execution a function call generator block may evaluate an input and when the input attains a specific value when the execution time has reached a point in time the function call generator block may schedule a connected block to be evaluated at this point in time and before advancing execution time.

Further the values of attributes of a graphical model may be inferred from other elements of the graphical model or attributes of the graphical model. For example the graphical model may include a block e.g. block such as a unit delay block that may have an attribute that specifies a sample time of the block. When a graphical model has an execution attribute that specifies a fundamental execution period the sample time of the unit delay block may be inferred from this fundamental execution period.

As another example the graphical model may include two unit delay blocks e.g. blocks where the output of the first of the two unit delay blocks is connected to the input of the second of the two unit delay block. The sample time of the first unit delay block may be inferred from the sample time of the second unit delay block. This inference may be performed by propagation of model element attributes such that after evaluating the sample time attribute of the second unit delay block a graph search proceeds by evaluating the sample time attribute of the first unit delay block since it is directly connected to the second unit delay block.

The values of attributes of a graphical model may be set to characteristics settings such as one or more inherited settings one or more default settings etc. For example the data type of a variable that is associated with a block e.g. block may be set to a default such as a double. Because of the default setting an alternate data type e.g. a single an integer a fixed point etc. may be inferred based on attributes of elements that the graphical model comprises e.g. the data type of a variable associated with a connected block and or attributes of the graphical model. As another example the sample time of a block may be set to be inherited. In case of an inherited sample time a specific sample time may be inferred based on attributes of elements that the graphical model comprises and or attributes of the graphical model e.g. a fundamental execution period .

Although shows example functional components of TCE in other implementations TCE may include fewer functional components different functional components differently arranged functional components and or additional functional components than depicted in . Alternatively or additionally one or more functional components of TCE may perform one or more other tasks described as being performed by one or more other functional components of TCE .

As further shown in testing component may receive code generated by TCE . TCE code may include text based code that may require further processing to execute binary code that may be executed text files that may be executed in conjunction with other executables etc. In one example TCE code may include one or more models that may need to be tested by testing component .

Testing component may receive e.g. from a tester a test to perform on TCE code . Alternatively or additionally testing component may include one or more pre configured tests for TCE code and the tester may select one of the pre configured tests. In one example the test may include one or more test APIs that perform particular tests on one or more portions of TCE code . Testing component may perform the test on TCE code to generate a test result . In one example test result may include an indication e.g. a diagnostic string that provides a static explanation of whether one or more portions of TCE code passed or failed the test. During performance of the test on TCE code testing component may generate test information and may provide test information to storage component . Storage component may receive and store test information . In one example test information may include states of TCE code during execution of the portions of TCE code information associated with screen shots of the executing TCE code information associated with failures of TCE code etc. For example testing component may capture a state of a model when the model experiences a failure and may store this state information in storage component .

Testing component may output e.g. display to the tester and or may store test result e.g. in storage component . Alternatively or additionally testing component may provide test result to diagnostic analysis component . Diagnostic analysis component may receive test result and may provide e.g. display test result to the tester. Based on test result and or other factors the tester may or may not decide to perform a diagnostic analysis on TCE code . For example if test result indicates that TCE code failed the test the tester may request performance of the diagnostic analysis so that the tester may identify problem s causing the failure and or to aid in a debugging process. Alternatively the tester may configure the test framework to not perform the diagnostic analysis during failures of TCE code . Alternatively if test result indicates that TCE code passed the test the tester may request performance of the diagnostic analysis when the tester wants to verify that the diagnostic analysis executes correctly. If the tester decides to perform the diagnostic analysis on TCE code the tester may provide a request to perform the diagnostic analysis to diagnostic analysis component .

If diagnostic analysis component receives request to perform the diagnostic analysis diagnostic analysis component may retrieve test information from storage component . Diagnostic analysis component may perform based on request and test information a diagnostic analysis of TCE code to generate a diagnostic result . In one example diagnostic result may include a diagnostic string an in depth analysis of a failure in TCE code active processes during occurrence of the failure in TCE code a screen shot of the executing TCE code during the failure information associated with the failure etc. Diagnostic analysis component may output e.g. display to the tester and or may store diagnostic result .

In one example implementation diagnostic analysis component may receive a diagnostic class for the diagnostic analysis. The diagnostic class may include an array of one or more e.g. multiple diagnostics to perform on TCE code . For example the diagnostic class may include particular syntax e.g. diagnostic.join diag1 diag2 . . . diagn for the array where diag1 through diagn may include strings function handles and or diagnostic instances. Diagnostic analysis component may perform the multiple diagnostics on TCE code to generate multiple diagnostic results e.g. similar to diagnostic result . Diagnostic analysis component may output e.g. display to the tester and or may store the multiple diagnostic results.

Alternatively or additionally diagnostic analysis component may enable a tester to specify diagnostics that are relevant to a particular verification point of TCE code . The specific diagnostics may include string descriptions and multiple arbitrary diagnostics. However diagnostic analysis component may ensure that the expense associated with execution of the arbitrary diagnostics by computing resources is incurred only when the tester requests the output of the arbitrary diagnostics.

Diagnostic analysis component may provide a qualification API to the tester. The qualification API may include a set of verification utilities for use in automated testing of TCE code . The qualification API may include qualification types e.g. verifications assertions fatal assertions assumptions etc. and methods that determine whether TCE code passes or fails a qualification. The qualification API methods may allow an optional input argument such as for example a string a function handle a subclass of a diagnostic interface base class etc. When a string is provided as the input argument diagnostic analysis component may utilize a simple string description as diagnostic result . A function handle is a pointer to a specific instance of a function. When a function handle is provided as the input argument diagnostic analysis component may provide as diagnostic result output that is displayed to the user upon execution of the function handle.

When a subclass of a diagnostic interface base class is provided as the input argument diagnostic analysis component may invoke abstract diagnostic methods at a particular time. The diagnostic methods may include obtaining screen shots of the executing TCE code saving state associated with models at the point of the failure querying a status of a device on which TCE code is executing etc. Whenever a test occurs regardless of whether the test of TCE code passes or fails diagnostic analysis component may make the diagnostic methods available to the tester. However the diagnostic methods may not be invoked by diagnostic analysis component until the tester requests invocation of the diagnostic methods.

Although shows example operations capable of being performed by TCE in other implementations TCE may perform fewer operations different operations and or additional operations than depicted in . Alternatively or additionally one or more components of may perform one or more other tasks described as being performed by one or more other components of .

Diagnostic query component may receive test result and may provide e.g. display test result to the tester. Based on test result the tester may or may not decide to perform a diagnostic analysis on TCE code . If the tester decides to perform the diagnostic analysis on TCE code the tester may provide request to perform the diagnostic analysis to diagnostic query component . If request is received diagnostic query component may provide to diagnostic output component an indication to perform the diagnostic analysis. If request is not received diagnostic query component may provide to diagnostic output component an indication to not perform the diagnostic analysis.

Diagnostic output component may receive indication to perform the diagnostic analysis or indication to not perform the diagnostic analysis. Diagnostic output component may receive test information a request for a string a request for a handle and or a request for a diagnostic class. Request may include information requesting a diagnostic string that provides a static explanation of a failure of TCE code . Request may include information requesting output that is displayed to the user upon execution of a function handle. Request may include information requesting abstract diagnostic methods at a diagnostic reference time.

If diagnostic output component receives indication diagnostic output component may perform based on test information and requests a diagnostic analysis on TCE code to generate diagnostic result . In such a situation diagnostic result may include a string a handle and a diagnostic class as indicated by reference number . The string may include a diagnostic string that provides a static explanation of a failure of TCE code . The handle may include an output that is displayed to the user upon execution of a function handle. The diagnostic class may include an in depth analysis of the failure of TCE code screen shots of the executing TCE code state information associated with models at the point of the failure a status of a device on which the TCE code is executing etc.

If diagnostic output component receives indication diagnostic output component may not perform a diagnostic analysis on TCE code . Alternatively if diagnostic output component receives indication diagnostic output component may still perform based on test information and requests and a diagnostic analysis on TCE code to generate diagnostic result . In such a situation diagnostic result may include a string and a handle as indicated by reference number . The string may include a diagnostic string that provides a static explanation of a failure of TCE code . The handle may include an output that is displayed to the user upon execution of a function handle.

Although shows example functional components of diagnostic analysis component in other implementations diagnostic analysis component may include fewer functional components different functional components differently arranged functional components and or additional functional components than depicted in . Alternatively or additionally one or more functional components of diagnostic analysis component may perform one or more other tasks described as being performed by one or more other functional components of diagnostic analysis component .

Diagnostic output component may receive array and may perform the multiple diagnostics of array on TCE code e.g. when requested by the tester . In one example diagnostic output component may utilize test information to perform the multiple diagnostics on TCE code . Based on performance of the multiple diagnostics diagnostic output component may output an analysis of the failure of TCE code active processes occurring during the failure of TCE code a screen shot during the failure of TCE code information associated with the failure of TCE code etc. Analysis of the failure of TCE code may include an in depth analysis of the failure of TCE code e.g. The failure occurred because incorrect variables are input into an equation . . . . Active processes may include a status of a device on which TCE code is executing state information associated with models at the point of the failure processes of TCE code that are executing during the failure e.g. Active processes include execution of the function t . . . etc. Screen shot may include a screen shot of the executing TCE code during the failure. Failure information may include information associated with the failure of TCE code .

Although shows example operations capable of being performed by diagnostic analysis component in other implementations diagnostic analysis component may perform fewer operations different operations and or additional operations than depicted in . Alternatively or additionally one or more components of may perform one or more other tasks described as being performed by one or more other components of .

Testing component may receive e.g. from a tester a test to perform on TCE code . In one example the test may include syntax e.g. Verify Button Color blue that verifies whether a button color displayed by TCE code is blue. Testing component may perform the test on TCE code to generate test result . In one example test result may include an indication e.g. a diagnostic string that provides a static explanation of whether or not the button color displayed by TCE code is blue. During performance of the test on TCE code testing component may generate test information and may provide test information to storage component . Storage component may receive and store test information . In one example test information may include information associated with a screen shot generated by TCE code when the button is displayed. In this example information associated with the screen shot may indicate that the button color is red which may indicate that TCE code failed the test.

Testing component may output e.g. display to the tester and or may store test result e.g. in storage component . Alternatively or additionally testing component may provide test result to diagnostic analysis component . Diagnostic analysis component may receive test result and may provide e.g. display test result to the tester. Based on test result e.g. which indicates that TCE code failed the test the tester may provide request to perform the diagnostic analysis to diagnostic analysis component .

If diagnostic analysis component receives request to perform the diagnostic analysis diagnostic analysis component may retrieve test information from storage component . Diagnostic analysis component may perform based on request and test information a diagnostic analysis of TCE code to generate diagnostic result . In one example diagnostic result may include a screen shot of the executing TCE code during the failure. As shown in screen shot may include a red button rather than the desired blue button. Diagnostic analysis component may output e.g. display to the tester and or may store screen shot with red button . Such an arrangement may enable the tester to see the incorrect red button first hand rather than merely a static diagnostic failure string.

Although shows example operations capable of being performed by TCE in other implementations TCE may perform fewer operations different operations and or additional operations than depicted in . Alternatively or additionally one or more components of may perform one or more other tasks described as being performed by one or more other components of .

As shown in process may include receiving code generated via a technical computing environment TCE block and performing a test on the code to generate a test result block . For example in an implementation described above in connection with testing component may receive code generated by TCE . TCE code may include text based code that may require further processing to execute binary code that may be executed text files that may be executed in conjunction with other executables etc. Testing component may receive e.g. from a tester a test to perform on TCE code . Testing component may perform the test on TCE code to generate test result . In one example test result may include an indication e.g. a diagnostic string that provides a static explanation of whether one or more portions of TCE code passed or failed the test.

As further shown in process may include generating test information based on performance of the test block and outputting and or storing the test result block . For example in an implementation described above in connection with during performance of the test on TCE code testing component may generate test information and may provide test information to storage component . In one example test information may include states of TCE code during execution of the portions of TCE code information associated with screen shots of the executing TCE code information associated with failures of TCE code etc. Testing component may output e.g. display to the tester and or may store test result e.g. in storage component .

Returning to process may include receiving a request for a diagnostic analysis of the code block performing based on the request and the test information a diagnostic analysis of the code to generate a diagnostic result block and outputting and or storing the diagnostic result block . For example in an implementation described above in connection with based on test result the tester may or may not decide to perform a diagnostic analysis on TCE code . If the tester decides to perform the diagnostic analysis on TCE code the tester may provide a request to perform the diagnostic analysis to diagnostic analysis component . If diagnostic analysis component receives request to perform the diagnostic analysis diagnostic analysis component may retrieve test information from storage component . Diagnostic analysis component may perform based on request and test information a diagnostic analysis of TCE code to generate diagnostic result . In one example diagnostic result may include a diagnostic string an in depth analysis of a failure in TCE code active processes during occurrence of the failure in TCE code a screen shot of the executing TCE code during the failure information associated with the failure etc. Diagnostic analysis component may output e.g. display to the tester and or may store diagnostic result .

Process blocks may include the process blocks depicted in . As shown in process blocks may include receiving a diagnostic class with an array of multiple diagnostics for the diagnostic analysis block performing the multiple diagnostics on the code to generate multiple diagnostic results block and outputting and or storing the multiple diagnostic results block . For example in an implementation described above in connection with diagnostic analysis component may receive a diagnostic class for the diagnostic analysis. The diagnostic class may include an array of multiple diagnostics to perform on TCE code . In one example the diagnostic class may include particular syntax e.g. diagnostic.join diag1 diag2 . . . diagn for the array where diag1 through diagn may include strings function handles and or diagnostic instances. Diagnostic analysis component may perform the multiple diagnostics on TCE code to generate multiple diagnostic results. Diagnostic analysis component may output e.g. display to the tester and or may store the multiple diagnostic results.

Systems and or methods described herein may defer evaluation and presentation of a custom diagnostic analysis. In one example the systems and or methods may provide a rich diagnostic infrastructure that is flexible and customizable. The systems and or methods may enable a tester to create a custom diagnostic that performs an in depth and complete diagnostic analysis of a state of program code when requested by the tester. For example the tester may request the diagnostic analysis of the code when the code fails or when the code passes i.e. does not fail . Thus the systems and or methods may enable the diagnostic analysis to be deferred until the tester requests the diagnostic analysis. Such an arrangement may prevent the diagnostic analysis from unnecessarily consuming time and costly computing resources.

The foregoing description of implementations provides illustration and description but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the implementations.

For example while series of blocks have been described with regard to the blocks and or the order of the blocks may be modified in other implementations. Further non dependent blocks may be performed in parallel.

It will be apparent that example aspects as described above may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement these aspects should not be construed as limiting. Thus the operation and behavior of the aspects were described without reference to the specific software code it being understood that software and control hardware could be designed to implement the aspects based on the description herein.

Further certain portions of the implementations may be implemented as a component that performs one or more functions. This component may include hardware such as a processor an application specific integrated circuit ASIC or a field programmable gate array FPGA or a combination of hardware and software.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the disclosure of the specification. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification. Although each dependent claim listed below may directly depend on only one other claim the disclosure of the specification includes each dependent claim in combination with every other claim in the claim set.

No element act or instruction used in the present application should be construed as critical or essential unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

