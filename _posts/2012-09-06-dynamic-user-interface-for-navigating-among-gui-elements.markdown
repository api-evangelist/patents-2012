---

title: Dynamic user interface for navigating among GUI elements
abstract: In one example, a computing device executes a plurality of application processes, each of which has an associated graphical user interface element. The computing device renders a common graphical user interface on a presence-sensitive screen. The common graphical user interface includes a currently rendered graphical user interface element associated with a currently selected application process from among the plurality of application processes; a tab row comprising a plurality of tabs, wherein each of the graphical user interface elements corresponds to one of the plurality of tabs; and a slide bar positioned proximate to the tab row. The computing device renders a first tab in the tab row with a larger size than other graphical tabs in the plurality of tabs responsive to receipt by the presence-sensitive screen of a gesture input associated with a region of the slide bar that is closest to the first tab.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08732613&OS=08732613&RS=08732613
owner: Google Inc.
number: 08732613
owner_city: Mountain View
owner_country: US
publication_date: 20120906
---
Computing devices may have multiple applications pages or instances running at the same time and available for a user to interact with. Alternatively a computing device may quickly close and open various applications pages or instances as a user opts to stop using one and start using another one. In either case the computing device may render a graphical user interface GUI at a display and render individual GUI elements such as tabs or icons corresponding to each of the applications pages or instances that may be currently running or that may be available for a user to access. A user may select a particular one of the tabs or icons by entering a user input such as a touch input or a mouse click to navigate to or to open the corresponding application pages or instances for example.

In general this disclosure provides a dynamic user interface for navigating among graphical user interface GUI elements.

In one example a method includes executing by a computing device a plurality of application processes wherein each of the application processes has an associated graphical user interface element. The method further includes rendering by the computing device a common graphical user interface on a presence sensitive screen of the computing device. The common graphical user interface includes a currently rendered graphical user interface element that is associated with a currently selected application process from among the plurality of application processes a tab row comprising a plurality of graphical tabs wherein each of the graphical user interface elements corresponds to one of the plurality of graphical tabs and a slide bar positioned proximate to the tab row. The method further includes rendering a first graphical tab in the tab row with a larger size than other graphical tabs in the plurality of graphical tabs responsive to receipt by the presence sensitive screen of a gesture input associated with a region of the slide bar that is closest to the first graphical tab.

In another example a computing device includes at least one processor a presence sensitive screen and machine readable code stored on the at least one data storage device. The machine readable code comprising executable instructions that are executable by the at least one processor thereby configuring the at least one processor to execute a plurality of application processes wherein each of the application processes has an associated graphical user interface element. The executable instructions further configure the at least one processor to render a common graphical user interface on the presence sensitive screen of the computing device. The common graphical user interface includes a currently rendered graphical user interface element that is associated with a currently selected application process from among the plurality of application processes a tab row comprising a plurality of graphical tabs wherein each of the graphical user interface elements corresponds to one of the plurality of graphical tabs and a slide bar positioned proximate to the tab row. The executable instructions further configure the at least one processor to render a first graphical tab in the tab row with a larger size than other graphical tabs in the plurality of graphical tabs responsive to receipt by the presence sensitive screen of a gesture input associated with a region of the slide bar that is closest to the first graphical tab.

In another example a computer readable storage medium includes executable instructions for configuring at least one processor to execute a plurality of application processes wherein each of the application processes has an associated graphical user interface element. The executable instructions further configure the at least one processor to render a common graphical user interface on the presence sensitive screen of the computing device. The common graphical user interface includes a currently rendered graphical user interface element that is associated with a currently selected application process from among the plurality of application processes a tab row comprising a plurality of graphical tabs wherein each of the graphical user interface elements corresponds to one of the plurality of graphical tabs and a slide bar positioned proximate to the tab row. The executable instructions further configure the at least one processor to render a first graphical tab in the tab row with a larger size than other graphical tabs in the plurality of graphical tabs responsive to receipt by the presence sensitive screen of a gesture input associated with a region of the slide bar that is closest to the first graphical tab.

The details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features objects and advantages will be apparent from the description and drawings and from the claims.

The various described features are not drawn to scale and are drawn in a simplified form in which one or more features relevant to the present application are emphasized. Like reference characters denote like elements throughout the figures and text.

In general the disclosure below is directed to methods devices and software for dynamic controls for navigating among multiple browser tabs windows or applications apps which may be collectively referred to as application processes in a graphical user interface GUI on a computing device such as a smartphone tablet computer or other computer or computing interface. Dynamic navigation features may be used on a computing device that has a touchscreen or other type of presence sensitive display. Dynamic navigation features of this disclosure may include a slide bar graphical element rendered adjacent or proximate to a row of graphical navigation tabs or browsing tabs i.e. graphical tabs where each graphical tab is associated with a different page window application or other application process whether of a browser application or other application. The slide bar graphical element i.e. slide bar enables a user to make gesture inputs to navigate among the tabs and dynamically adjust the sizes of tabs proximate to the gesture input in the slide bar. The sizing of the tabs may therefore be made to differ dependent on user interactions with the slide bar. The sizing of the tabs may also be dependent on which tab is currently open or on which application process is currently selected for viewing. When several tabs are open and the user is not interacting with the slide bar the tab for the currently open process may be sized relatively larger or magnified while the other tabs for application processes not currently open may be sized relatively smaller or demagnified in various examples.

Tabs adjacent to the tab for the currently open process may also be rendered in an intermediate size in various examples. The amount of content displayed in a tab may be dependent on the tab s current size so the tab for a currently open application process may be large enough to show a significant amount of the title text adjacent to the icon while a demagnified tab may only display an icon or may display nothing other than the outline of the tab itself for example. Other specific sizing characteristics may be used depending on the number of open tabs the screen width the pixel resolution if the device is in a portrait mode or a landscape mode and whether the tabs are constrained to all be represented within the width of the screen or are allowed to run off the edges of the screen in different examples. An example of a GUI implementing dynamic navigation features is shown in .

Other computing devices may also be used in some examples including portable computing devices such as a mobile phone a tablet computer a laptop a netbook or a wearable device as well as more or less stationary computing devices such as a desktop computer or a fixed interface panel for example. Computing device may also connect to a wired or wireless network using a network interface. Additional details of example computing devices are described in further detail below with respect to subsequent figures.

Computing device includes one or more input devices that receive user input such as from illustratively depicted user specifying actions to be performed by computing device . In the illustrated example presence sensitive screen is both an input device and an output device that generates one or more signals corresponding to a location selected by a gesture input performed by the user on or near the presence sensitive screen . In some examples presence sensitive screen detects a presence of an input unit e.g. one or more fingers a pen or a stylus that may come in contact with presence sensitive screen or that may be proximate to but not in physical contact with presence sensitive screen . As used herein user contact may therefore refer to a proximate presence that is detected by presence sensitive screen . In other examples the gesture may include physical contact with presence sensitive screen to select the corresponding location e.g. in the case of a touch sensitive screen. Presence sensitive screen in some examples generates a signal corresponding to the location of the input unit. Signals generated by the selection of the corresponding location s may be provided as data to applications e.g. the browser application that renders browser GUI and other components of computing device . One or more intermediary applications or operating system components of computing device may also filter or process the signals generated via presence sensitive screen before conveying filtered or processed input signals to the browser application or another one or more applications.

In some examples computing device may include an input device such as a joystick camera acoustic sensor or other device capable of receiving or recognizing a gesture of user . In one example a camera capable of transmitting user input information to computing device may visually identify a gesture performed by user . Upon visually identifying the gesture of the user a corresponding user input may be received by computing device from the camera. In another example one or more acoustic sensors may identify mechanical vibrations or other acoustic signals that a user may make with gestures such as tapping or otherwise contacting or manipulating a surface or object and computing device may interpret the acoustic signals as user inputs. The aforementioned examples of input devices are provided for illustration purposes. Other similar example techniques may also be suitable to detect a gesture and detected properties of a gesture.

Computing device also includes one or more output devices that display content to user . In the illustrated example presence sensitive screen of computing device displays graphical content responsive to electronic signaling or other directives from computing device . Graphical content generally may include any visual depiction displayed by presence sensitive screen . Examples of graphical content may include images text videos visual objects and or visual program components such as scroll bars text boxes buttons etc. In the illustrated example the browser application directs presence sensitive screen to display browser graphical user interface i.e. browser GUI . In this example the operating system and or other applications also direct presence sensitive screen to display additional GUI features including information bar and navigation bar . Information bar may display information such as the time signal bars indicating wireless signal strength and notifications from email and texting applications in this example. Navigation bar includes virtual navigation buttons such as buttons for going back for going to the home screen and for switching between applications for example.

The browser application behind browser GUI executing on computing device includes program instructions and or data that are executable by computing device . Many types of applications may run on computing device examples of which may include a web browser an email application a text messaging application or any other application that receives user input and or displays graphical content.

The browser application causes browser GUI to be displayed by presence sensitive screen . Browser GUI may include interactive and or non interactive graphical content that presents information of computing device in human readable form. Browser GUI enables user to interact with the browser application through presence sensitive screen . In this way browser GUI may enable user to create modify and or delete data on computing device .

User may perform gestures on browser GUI in presence sensitive screen e.g. tapping virtual buttons or keys displayed at regions of presence sensitive screen that provide input to the browser application. Elements of the operating system and or the browser application may process gesture inputs to presence sensitive screen including inputs to virtual buttons or keys and the browser application or other application may provide outputs and change the state of browser GUI in response to the user inputs. In this example the browser application supports tabbed browsing with multiple browser windows that a user can access with tabs such as tabs with one tab for each browser window such that a user can select one of the tabs to cause the browser application to render the browser window corresponding to that tab in browser GUI . Each browser window may be rendered by a separate application process of the browser application in one example implementation. Different browser applications and other applications or other application processes which may be referred to collectively and generically as application processes may implement tabbed browsing or tabbed navigation in a variety of ways such as with multiple threads or with single threaded tabbed browsing with separate tabs or other graphical elements that each correspond to a window or other element. Such tabs or other graphical elements may be generically referred to as graphical user interface elements or process graphical user interface elements for purposes of this disclosure e.g. graphical user interface elements associated with application processes. Each of one or more application processes may have an associated graphical user interface element e.g. each application process of a browser application may have an associated tab that is a graphical user interface element associated with that application process .

As seen in the browser application may also render the tabs in different sizes. Tab which corresponds to the currently rendered or top browser window or application process is rendered in a larger size than tab which corresponds to a currently non rendered browser window or application process which is not currently rendered and may be conceptualized in the user experience as being currently below or obscured by the currently rendered or top browser window. Tab for the current browser window is rendered in a larger size or magnified relative to tab which is rendered in a smaller size or demagnified since it is associated with the currently non selected browser window. Tab row also includes a new tab button which may be selected for opening a new browser window and associated tab. As the user opens new tabs the function of magnifying and demagnifying tabs as rendered in tab row may also be extended in a variety of ways to more than two tabs as further described below.

The tabs display useful identifying information about their corresponding browser windows or other application processes such as an identifying icon and a page title that are useful for the user to see when navigating among the tabs. While tab is shown in a moderately demagnified state in the example of it still has enough space to show an icon and a useful portion of the beginning of the page title.

Browser GUI also includes a URL box or omnibox adjacent to tab row and a slide bar adjacent to tab row in the example of . When a user touches the slide bar and runs a finger in a gesture motion along the slide bar the tab magnification may follow the user s finger so that the tab immediately adjacent to the current user touch or that is indicated by the current user gesture is magnified instead of the tab for the currently open process wherever the user gesture input goes along the slide bar . That is computing device may render a first graphical tab in tab row with a larger size than the other graphical tabs in the plurality of graphical tabs in tab row responsive to receipt by presence sensitive screen of a gesture input associated with the region of slide bar that is closest to the first graphical tab. Computing device may then render additional graphical tabs in tab row with relatively larger sizes than the other graphical tabs in tab row responsive to receipt by presence sensitive screen of ongoing motion of a gesture input associated with the region of slide bar while the gesture input moves closer to the additional graphical tabs. Thereby computing device may modify the tab magnification rendering the graphical tabs in tab row with varying size responsive to receipt by presence sensitive screen of user gesture inputs associated with regions of slide bar . Examples of this are shown in .

So while tab was originally magnified at the start of the process as shown in tab is demagnified in the view of and while tab was one of many demagnified tabs in the view of tab is magnified to the larger size in the view of where it is immediately adjacent the current point of contact B of the user gesture input. Each of the intervening tabs between tab and tab may also have been magnified and then demagnified in sequence during the progress of the user gesture input along the path from the initial point of contact A to the point of contact B shown in . This magnification of each tab as the user drags the gesture input adjacent to each tab in the slide bar enables the user to see the full size identifying information such as icon and page title in each tab and for as long as the user keeps the gesture input adjacent to that tab. This process of magnifying and demagnifying the tab sizes in response to the gesture input therefore enables much more informed and useful navigation among the tabs particularly on devices with small screens or a small size for presence sensitive screen .

The user may then complete the gesture input once the user has selected a tab and lift her hand away from presence sensitive screen or finalize the gesture input in examples based on non contact gesture inputs so that point of contact B is the final point of contact and tab remains magnified while the other tabs remain demagnified after the end of the gesture input. In some examples the browser application then switches from rendering the browser window for tab to rendering the browser window for tab once the user gesture input is released or once a user input is made that otherwise indicates a user navigation to the browser window for that tab. In other examples the browser application may also display an expanded tab or other graphical preview for each tab that the user gesture input navigates adjacent to along the path from the initial point of indication to the final point of indication in the slide bar .

The browser application may also render the demagnified tabs in a range of magnifications. shows one example of this in which the browser application renders the demagnified tabs in various levels of magnification at the same time with currently selected tab magnified and an intermediate level of magnification proximate to the currently magnified tab with a descending order of magnification with increasing distance from the currently magnified tab down to a minimal size for the tabs at a certain tab count distance away from the currently magnified tab. So tabs and are slightly demagnified since they are adjacent to currently selected tab then tabs and are rendered in a further demagnified state tabs and are yet further demagnified and tabs and are maximally demagnified corresponding to their respective distance from the currently selected tab . If intermediate sizes adjacent to the magnified tab are used the intermediate magnification may also continue preceding and following the main magnification as a gesture input is dragged along the slide bar. This pattern of graduated demagnification of the tabs surrounding the currently selected or currently proximate tab may therefore be applied during the process of a user gesture input along slide bar so that a subset of partially magnified tabs are dynamically magnified and demagnified in a moving range surrounding the current position of the user gesture input so that the amount of information the user can see from the surrounding tabs is proportional to the proximity of the user gesture input. The magnified and demagnified tabs make it easier for the user to see the title for each tab as the user scrolls a finger along the slide bar thereby facilitating navigation among tabs particularly on a screen with a relatively small size. This may therefore provide additional advantage for informing and facilitating the user s navigation among the tabs.

The magnified tabs may be magnified in a continuously variable manner dependent on the relative position of the contact point of a user s gesture input with respect to the adjacent tabs. For example the graphical tab currently rendered with a magnified or larger size may be rendered in a maximum size when the gesture input is closest to the center of the tab and decrease continuously in size as the gesture input moves toward the edge of the tab. Another tab proximate to the largest magnified tab may also be rendered in an intermediate size that increases continuously in size as the gesture input moves closer to this proximate tab so that the proximate tab increases in size and the previously adjacent tab decreases in size such that they are the same size when the gesture input is exactly between them and equally proximate to them both.

Therefore in the example of computing device responsive to receipt of a gesture input by the portion of presence sensitive screen on which tab row is rendered while graphical tab which is closest to the gesture input is rendered with a larger size than graphical tabs for other graphical user interface elements graphical tabs and that are adjacent to graphical tab are rendered in an intermediate size. That is this intermediate size is smaller than the larger size of graphical tab and larger than a size for graphical tabs for other graphical user interface elements that are not adjacent to graphical tab . This is further applicable to graphical tabs and which are adjacent to the first intermediate sized tabs and and proximate to graphical tab and which are rendered in a smaller intermediate size that are still larger than the size for graphical tabs in this example. An additional repetition of this pattern is applied to graphical tabs and which are adjacent to the second intermediate sized tabs and and somewhat proximate to graphical tab and which are rendered in a yet smaller intermediate size that are also still larger than the size for graphical tabs in this example.

In another example no differential or special sizing can be applied when the user is not navigating and the magnified and demagnified tabs are only used when the user touches or makes a gesture input to the slide bar to navigate among the open tabs.

The slide bar may therefore be conceptualized with a user interaction metaphor of an elastic band that is stretched at the point of the user touch and that stretches the edges of the adjacent tab to show more information at the point of the user touch.

In another example which may be referred to as a run off option the row of tabs may be allowed to run off the edges of the screen rather than be constrained to fit within the screen width as depicted in the previous examples. In either of these examples as the user opens more tabs so that they don t all fit at full width within the edges of the screen the non focus tabs i.e. the tabs for the processes windows not currently active may have their width steadily reduced. In the run off option the tab width can be constrained to a certain minimum width such as just enough width to display the tab s icon and as additional tabs are opened after the minimum tab width has already been reached the tab row becomes extended off the edge of the screen.

As one particular example the browser application may impose a minimum tab width of seven millimeters or some other minimum tab width somewhere in the range of five to twelve millimeters or another value outside that range but that is selected to maintain the tabs at a size that each one may still be easily selectable by a user gesture input as appropriate to the form of user gesture inputs that are accepted for that device. For example in devices that primarily use user touch gesture inputs with the user s finger a minimum size may be selected that remains easily selectable with a human finger which may be seven millimeters in one example. In other devices that may accept a user gesture input with a fine tipped stylus the browser application may maintain a smaller minimum tab width such as three millimeters for example. In devices that use a camera and eye tracking of the user s eyes for accepting user gesture inputs the browser application may maintain a relatively smaller minimum tab width such as three millimeters for example. A browser application may also alternate between various gesture input modes and different minimum tab widths on a single device where multiple user gesture input modes may be used on that device.

When the user is done scrolling through the tabs the user can decide to select the current magnified tab or still stay on the currently open process window. Different user interaction options can be used to select between these two choices. For example the user may tap on a currently magnified tab to open the process window for that tab or simply remove the finger from the screen to release the currently magnified tab and stay on the currently open process window.

While the slide bar is depicted as being rendered above the tab row and the URL box in the previous examples other examples may also use other arrangements such as positioning the slide bar below the tab row . In yet another example the functionality of the slide bar may be superimposed on the tab row and the browser application may interpret different forms of gesture input on the combined tab row slide bar as inputs for selecting a tab or for sliding along the tab row to progressively magnify and demagnify the tabs and to navigate among the tabs. In other examples a browser application may render a button or scroll bar not depicted in the slide bar and follow a user interface metaphor of a user gesture input to the slide bar corresponding to a grasp and drag input to the button or scroll bar which may represent a more intuitive user experience for some users. Any or all of the different examples and options disclosed herein may be either selected and implemented by the developer ahead of time as an enforced implementation or may be offered as user configurable options that the user is free to modify. In the latter case one implementation may be configured as the initial or default configuration and the other options may be made available for the user to select to modify the user interface away from the initial default setting.

While examples are shown above with both smartphone and tablet computing devices formats other examples may be implemented on any other type of computing device. A browser application or other application or user interface involving multiple applications may therefore use any of the techniques disclosed above to empower a user to navigate among various tabbed browser windows tabbed application processes or tabbed information spaces rapidly and efficiently.

As shown in the example of computing device C includes one or more processors memory a network interface one or more data storage devices power source one or more microphones one or more speakers one or more cameras and presence sensitive screen C which may be a touchscreen or other presence sensitive screen as described above with reference to computing devices and B. Computing device C also includes operating system that may be stored on one or more storage devices and execute on one or more processors . Each of the components C and may be interconnected physically communicatively and or operatively in any of a variety of physical and or communicative connection means for inter component communications.

Operating system in various examples may control the operation of components of computing device C and facilitate operation of higher level software applications. Computing device C in this example further includes applications including browser application that is executable by computing device C. Operating system in one example facilitates the interaction of browser application with any or all of processors memory network interface data storage device power source one or more microphones one or more speakers one or more cameras and presence sensitive screen C.

As shown in browser application may include input module and display module . Browser application input module and display module may each include program instructions and or data that are executable by computing device C or by at least one of the one or more processors of computing device C. For example application input module and or display module may include computer executable software instructions that cause computing device C to perform any one or more of the operations and actions described in the present disclosure. In various examples operating system and browser application may include code and or data that are stored on one or more data storage devices and that are read and executed or processed by one or more processors and may in the process be stored at least temporarily in memory .

In this illustrative implementation of computing device C operating system may include an operating system kernel which may include various device drivers kernel extensions and kernel modules for example. Operating system may also interact with a set of libraries which may include various more or less standard specialized and or proprietary libraries such as a GUI framework which may implement various basic functions for controlling the content displayed on presence sensitive screen C including content for browser GUI C provided by browser application such as tab bar and slide bar in accordance with any of the examples described above. Applications may also include other applications with an input module and display module that may also include code for rendering tabbed page browsing or tabbed window browsing among multiple application processes alone or in combination with browser application . Other applications may also include their own code for rendering tab bar and slide bar in accordance with any of the examples described above.

In one illustrative implementation of computing device C operating system may also interact with a runtime which may include various core libraries as well as a virtual machine which may be the Dalvik virtual machine in one example implementation. Virtual machine may abstract certain aspects and properties of computing device C and allow higher level applications to run on top of virtual machine so that software code in the higher level applications may be compiled into bytecode to be executed by the virtual machine . Other embodiments may include other elements of a software stack between the operating system kernel and the applications.

For example software for applications such as browser application may be written in C or C which may be executable as native code by computing device C or may also be written in Java then compiled to virtual machine executable bytecode to be executed by virtual machine . As one illustrative example libraries may include the Standard C Library libc which provides native support for C functions. In different implementations the operating system and or the virtual machine may be able to execute code written in various other languages such as Objective C Go Python Ruby JavaScript Dart Clojure or ClojureScript for example either natively or compiled into a virtual machine executable bytecode or compiled into an assembly language or machine code native to the CPU of computing device C for example. Various examples may not use a virtual machine and use applications that run natively on the computing device C or that use some other technique compiler interpreter or abstraction layer for interpreting a higher level language into code that runs natively on computing device C.

GUI framework libraries or other aspect of operating system or the software stack underlying the applications may include code for providing any or all of the functionality for rendering tab bar and or slide bar in accordance with any of the examples described above and may abstract this functionality at an underlying level for applications . Code for implementing the functionality of any of the aspects of this disclosure may therefore be included in any level or portion of the entire software stack running on computing device C or that is accessible to computing device C such as in a web application or other program executing off of computing device C but that interacts with computing device C such as via HTTP over a wireless connection.

In various examples computing device C may also have various application programming interfaces APIs that are native to operating system and that run on top of operating system and which are intended to provide resources that automate or facilitate higher level applications that access the one or more APIs. These one or more APIs may include object libraries or other libraries toolsets or frameworks and may be associated with a native programming environment for writing applications. Computing device C may also have a different specific organization of APIs libraries frameworks runtime and or virtual machine associated with or built on top of operating system other than the example organization depicted in .

Higher level applications such as browser application may therefore make use of any of various abstractions properties libraries or lower level functions that are provided by any of operating system OS kernel libraries GUI framework runtime core libraries virtual machine or other compilers interpreters frameworks APIs or other types of resources or any combination of the above with which computing device C is configured to enable functions such as rendering a slide bar adjacent to or superimposed on a tab bar URL box or other graphical navigation element dynamically magnifying and demagnifying tabs or other graphical navigation elements in response to user inputs and other functions as described above.

The one or more processors in various examples may be configured to implement functionality and or process instructions for execution within computing device C. For example processors may be capable of processing instructions stored in memory or instructions stored on data storage devices . Computing device C may include multiple processors and may divide certain tasks among different processors. For example processors may include a central processing unit CPU which may have one or more processing cores. Processors may also include one or more graphics processing units GPUs and or additional processors. Processors may be configured for multi threaded processing. Processors and or operating system may divide tasks among different processors or processor cores according to certain criteria such as to optimize graphics rendering or to optimize the user experience. For example processors and or operating system may reserve a particular processing thread or processor or processing core or a portion thereof for certain tasks such as rendering translational motion of graphical elements or for rendering still images or video frames within a video output such as video feeds and other graphical elements displayed in client GUI C.

Various tasks or portions of tasks may also be divided among different layers of software and hardware. For example a processing thread may oversee higher level management of the display of browser GUI C while being configured to push much of the processing burden of decoding and rendering the graphics for browser GUI C through GPU hardware that is optimized for the task.

Memory in various examples may be configured to store information within computing device C during operation. Memory in various examples may be a computer readable storage medium. In various examples memory is a temporary memory and computing device C relies more on one or more data storage devices than memory for long term storage. Memory in various examples may be a volatile memory meaning that memory may not maintain stored contents for a long duration of time once it is powered down such as when computing device C is turned off. Examples of volatile memories that may characterize memory include random access memories RAM dynamic random access memories DRAM static random access memories SRAM and other forms of volatile memories. In various examples memory may be used to store program instructions for execution by processors . Memory in various examples may be used by software or applications running on computing device C to temporarily store data and or software code during execution of an application.

One or more data storage devices in various examples may include a computer readable storage medium or multiple computer readable storage media. Data storage devices may be configured to store larger amounts of information than memory . Data storage devices may further be configured for long term storage of information. In various examples data storage devices include non volatile storage elements. Examples of such non volatile storage elements include magnetic hard discs optical discs floppy discs flash memories or forms of electrically programmable memories EPROM or electrically erasable and programmable EEPROM memories. In other examples memory may also be configured for long term data storage and any of a variety of technologies may blur the lines between memory and data storage and between volatile and non volatile. Memory and data storage devices may also include any of various caches buffers and other temporary memories that may be incorporated at any of various levels of a processing architecture and with various latency and capacity profiles including a dedicated cache exclusive to a processing core or processing chip.

Computing device C in various examples may also include a network interface . Computing device C in one example utilizes network interface to communicate with external devices such as servers or data centers via one or more networks which may include one or more wireless networks. Network interface may be or include a network interface card such as an Ethernet card an optical transceiver a radio frequency transceiver or any other type of component that is configured to send and receive information. Other examples of such network interfaces may include Bluetooth 3G 4G LTE and WiFi radios configured for mobile computing devices as well as USB. In various examples computing device C may use network interface to communicate wirelessly with an external device such as a server or data center that may provide data for one or more browser windows in browser GUI C.

Computing device C in various examples may also include one or more input and or output devices such as presence sensitive screen C which may be configured to display browser GUI C. Presence sensitive screen C may include a liquid crystal display LCD display screen or display screen that uses another type of graphical output technology. Presence sensitive screen C may also be a touchscreen that comprises an electrically capacitive layer sensitive to the presence of touch and configured to translate the positions of touch gesture inputs and the motions of touch gesture inputs as they change position over time into signals to provide to a driver for the touchscreen or other feature for receiving the information on the gesture inputs in the example of computing device C. Presence sensitive screen C may also be another type of presence sensitive screen in other examples.

Computing device C may also include or be configured to connect with any of a variety of other input and or output devices such as physical buttons a physical keyboard a mouse a touchpad a trackball a voice user interface system an accelerometer a vibration component a sound card a video graphics adapter card or any other type of device for detecting and or interpreting inputs from a user or for converting a signal into a form of graphical audio tactile or other form of user output that can be sensed by a user.

Computing device C in various examples may include one or more power sources which may be rechargeable and provide power to computing device C. Power source in various examples may be a lithium ion battery a nickel cadmium battery a nickel metal hydride battery or other suitable power source.

In various examples all of or portions of browser application input module or display module may be a part of or native to operating system libraries and or runtime . In various examples browser application may receive input through network interface of computing device C. Computing device C may for example receive website data and or web application data through network interface from a network connected server device and browser application may use this data in the content it renders in browser GUI C. While certain features are displayed in the examples of browser GUI C as depicted in and as described above other examples of a browser GUI C or other GUI for a browser application or other application of the present disclosure may include more fewer or other variations of features than the examples discussed above either in accordance with user selected options by default or by implementation.

In process a computing device or a processor thereof may execute a GUI application such as browser application . In this example a computing device executes a plurality of execution processes such as tabbed browsing windows or other tabbed GUI windows wherein each of the application processes has an associated process graphical user interface element . The computing device renders a common graphical user interface on a presence sensitive screen of the computing device wherein the common graphical user interface comprises a currently rendered process graphical user interface element that is associated with a currently selected application process from among the plurality of application processes a tab row comprising a plurality of graphical tabs wherein each of the process graphical user interface elements corresponds to one of the plurality of graphical tabs and a slide bar positioned proximate to the tab row . The computing device renders a first graphical tab in the tab row with a larger size than other graphical tabs in the plurality of graphical tabs when the presence sensitive screen receives a gesture input associated with a region of the slide bar that is closest to the first graphical tab . The computing device may further perform any of the functions and processes described above with reference to .

Various techniques described herein may be implemented in software that may be written in any of a variety of languages making use of any of a variety of toolsets frameworks APIs programming environments virtual machines libraries and other computing resources as indicated above. For example software code may be written in Java C Objective C C Go Python Ruby Scala Clojure JavaScript ClojureScript assembly language machine code or any other language. As one specific illustrative example aspects of the disclosure discussed above may be implemented in a software module written in Java that is executable on virtual machine of which may be the Dalvik virtual machine for example.

Aspects of the disclosure may be equally applicable and implemented in any browser or operating system and using any other APIs frameworks or toolsets. Aspects described herein for transmission decoding and rendering of data for video output or video content which may be considered interchangeably herein with media output or media content that also includes audio output or audio content may make use of any protocol standard format codec compression format HTML element or other technique or scheme for encoding processing decoding rendering or displaying an audio output or a video output.

When implemented in software or firmware various techniques disclosed herein may be realized at least in part by a computer readable data storage medium comprising instructions that when executed cause a processor to perform one or more of the methods described above. For example the computer readable data storage medium may store such instructions for execution by a processor.

A computer readable medium may form part of a computer program product which may include packaging materials. A computer readable medium may comprise a computer data storage medium such as random access memory RAM read only memory ROM non volatile random access memory NVRAM electrically erasable programmable read only memory EEPROM flash memory magnetic or optical data storage media and the like. In various examples an article of manufacture may comprise one or more computer readable storage media.

In various examples the data storage devices and or memory may comprise computer readable storage media that may comprise non transitory media. The term non transitory may indicate that the storage medium is not embodied in a carrier wave or a propagated signal. In certain examples a non transitory storage medium may store data that can over time change e.g. in RAM or cache . Data storage devices may include any of various forms of volatile memory that may require being periodically electrically refreshed to maintain data in memory but those skilled in the art will recognize that this also constitutes an example of a physical tangible non transitory computer readable data storage device. Executable instructions are stored on a non transitory medium when program code is loaded stored relayed buffered or cached on a non transitory physical medium or device including if only for only a short duration or only in a volatile memory format. Machine readable code may be stored on the data storage devices and or memory and may include executable instructions that are executable by at least one processor. Machine readable code and executable instructions may refer to any form of software code including machine code assembly instructions or assembly language bytecode software code in C or software code written in any higher level programming language that may be compiled or interpreted into executable instructions that may be executable by at least one processor including software code written in languages that treat code as data to be processed or that enable code to manipulate or generate code.

The code or instructions may be software and or firmware executed by processing circuitry including one or more processors such as one or more digital signal processors DSPs general purpose microprocessors application specific integrated circuits ASICs field programmable gate arrays FPGAs or other equivalent integrated or discrete logic circuitry. Accordingly the term processor as used herein may refer to any of the foregoing structure or any other structure suitable for implementation of the techniques described herein. In addition in some aspects functionality described in this disclosure may be provided within software modules or hardware modules.

The various embodiments described above and depicted in as well as additional embodiments are within the scope of one or more of the following claims.

