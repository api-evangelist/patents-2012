---

title: Device specific data in a unified pointer message
abstract: In one embodiment, a unified pointer message  may describe in a single type of pointer message a coordinate input from a user via multiple types of pointer devices. An input device interface  may receive a coordinate input  from an input device. A processor  may execute an application programming interface layer  that creates a unified pointer message  for the coordinate input . The processor  may send the unified pointer message  to an application. The processor  may process a device specific data set  unhandled by the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09274622&OS=09274622&RS=09274622
owner: Microsoft Technology Licensing, LLC
number: 09274622
owner_city: Redmond
owner_country: US
publication_date: 20120911
---
A coordinate input device or pointer device may interact with a computing device to indicate to the computer a selected virtual location. The virtual location may be represented by a point on a display or other visual presentation device. A pointer device may be a mouse an electronic pen a touch input device a gesture recognition device or other device indicating a set of coordinates to the computing device. A touch input device may be touch screen a track pad or touch recognition system.

This Summary is provided to introduce a selection of concepts in a simplified form that is further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Embodiments discussed below relate to describing in a single type of pointer message a coordinate input from a user via multiple types of pointer devices. An input device interface may receive a coordinate input from an input device. A processor may execute an application programming interface layer that creates a unified pointer message for the coordinate input. The processor may send the unified pointer message to an application. The processor may process a device specific data set unhandled by the application.

Embodiments are discussed in detail below. While specific implementations are discussed it should be understood that this is done for illustration purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without parting from the spirit and scope of the subject matter of this disclosure. The implementations may be a machine implemented method a tangible machine readable medium having a set of instructions detailing a method stored thereon for at least one processor or a pointer device interface.

A pointer device interface may process coordinate data input by a user to indicate a virtual location as well as any associated control data provided by a pointer device. The pointer device interface may unify input data from a variety of sources using a superset of any data sent by common pointing devices referred to as a unified pointer message. The unified pointer message may be extensible to accommodate future device types. Using the unified pointer message data from any supported device types can be represented by a single event type. In addition the unified pointer message may provide a consistent coordinate system for any input or allow for an application to convert the coordinate input data between multiple coordinate systems. Additionally the unified pointer message may indicate a unified pointer event type to differentiate data from different devices. The subset of data included in a specific instance of the pointer event depends on the device originating the data. A unified pointer message may report a core subset of data such as device type device identifier or coordinates. The unified pointer message may also report an optional subset of data such as button state geometry pressure and other data that may vary from device to device. This optional subset of data is referred to as a device specific data set. The unified pointer message may indicate spatial coordinates control and interaction state and control change data.

If a legacy application is unable to handle a device specific event the pointer device interface may translate an unhandled device specific event from a unified pointer message to a legacy device message more easily interpreted by the legacy application such as a mouse message. The pointer device interface may be passed events that are not handled by the application to translate from unified pointer messages back to legacy device messages such as a mouse message a gesture message a touch message or a pen message. The pointer device interface may translate the unified pointer message to whichever legacy device message provides the most data rich message while still being consumable by the legacy application. The pointer device interface may convert the device specific data into a legacy device message that the legacy application may more easily understand and process. For example as many legacy applications may process a mouse message touch device data may be converted to a mouse message for easier interpretation. A double tap on the touch device may be presented in a mouse message in the legacy application as a mouse button click.

Applications may listen just for the coordinate data ignoring further data unless requested by the application. The unified pointer message may be used by desktop applications multimedia applications and other applications. Further a web application framework such as a web browser or an extensible application markup language XAML framework may translate the unified pointer message for use by web applications such as hypertext markup language HTML applications or extensible application markup language applications.

Thus in one embodiment a unified pointer message may describe in a single type of pointer message a coordinate input from a user via multiple types of pointer devices. An input device interface may receive a coordinate input from an input device. A processor may execute an application programming interface layer that creates a unified pointer message for the coordinate input. The processor may send the unified pointer message to an application. The processor may process a device specific data set unhandled by the application.

The processor may include at least one conventional processor or microprocessor that interprets and executes a set of instructions. The memory may be a random access memory RAM or another type of dynamic data storage that stores information and instructions for execution by the processor . The memory may also store temporary variables or other intermediate information used during execution of instructions by the processor . The data storage may include a conventional ROM device or another type of static data storage that stores static information and instructions for the processor . The data storage may include any type of tangible machine readable medium such as for example magnetic or optical recording media such as a digital video disk and its corresponding drive. A tangible machine readable medium is a physical medium storing machine readable code or instructions as opposed to a signal. Having instructions stored on computer readable media as described herein is distinguishable from having instructions propagated or transmitted as the propagation transfers the instructions versus stores the instructions such as may occur with a computer readable medium having instructions stored thereon. Therefore unless otherwise noted references to computer readable media medium having instructions stored thereon in this or an analogous form references tangible media on which data may be stored or retained. The data storage may store a set of instructions detailing a method that when executed by one or more processors cause the one or more processors to perform the method.

The input output device interface may include one or more conventional mechanisms that permit a user to input information to the computing device such as a keyboard a mouse a voice recognition device a microphone a headset a gesture capture device a touch screen etc. The input output device interface may include one or more conventional mechanisms that output information to the user including a display a printer one or more speakers a headset or a medium such as a memory or a magnetic or optical disk and a corresponding disk drive. The communication interface may include any transceiver like mechanism that enables computing device to communicate with other devices or networks. The communication interface may include a network interface or a transceiver interface. The communication interface may be a wireless wired or optical interface.

The computing device may perform such functions in response to a processor executing sequences of instructions contained in a computer readable medium such as for example the memory a magnetic disk or an optical disk. Such instructions may be read into the memory from another computer readable medium such as the data storage or from a separate device via the communication interface .

A unifying component of the conversion layer may send the unified pointer data in the form of a unified pointer message to the application layer . The application layer may receive a set of device specific data in the unified pointer data such as the user clicking a mouse button or making a pinching motion on a touch screen. If the application receives the device specific data set referred to as a device specific event and is unable to handle the device specific event the application layer may send the unhandled device specific data set to a translation component of the conversion layer . The conversion layer may translate the unified pointer data to the legacy device data form that provides the most data while still being understood by the application. The translation component may calculate more easily interpreted legacy device data such as mouse data and return the legacy device data to the application layer . For example a pinching gesture or a tap gesture received by gesture capture hardware and represented in a unified pointer message may be translated into mouse wheel data or a mouse click from mouse hardware for easier interpretation by legacy applications.

A device specific data flag may indicate whether device specific data is available. Device specific data describes any feature on the input device that allows users to enter an auxiliary signal separate from the coordinate data such as the buttons or track wheel on a mouse or the geometry and pressure of a touch on a touch pad. A device specific data field describing the device specific data such as geometry pressure and other device specific data. A current device specific state may describe the current state of the auxiliary data signal for the pointer device. The unified pointer message may indicate any changes to the device specific state. The unified pointer message may have a previous device specific state describing the previous state of the auxiliary data signal so that the application may determine any changes and interpret the action requested by the user. Alternately the unified pointer message may have a device specific data delta describing the change in state of the auxiliary data signal.

The application programming interface layer may be a traditional application programming interface layer or a communication object model COM based application programming interface layer. A traditional application programming interface layer such as a Win32 application programming interface layer provides a standard set of functionality for a graphical user interface operating system. A traditional application programming interface layer may process a common subset of the pointer types available in pointer data such as location button state device type source device and other data. A communication object model based application programming interface layer such as a Windows Runtime application programming interface layer supports interaction with a variety of component objects. A communication object model based application programming interface layer may process each pointer object as having common base properties and a property bag with relevant type specific data. The pointer device interface may tailor the unified pointer message to the idioms of the framework.

The application programming interface layer may pass the unified pointer message to a web application interface layer such as a document object model DOM interface layer for conversion for a web application layer . A document object model interface layer such as a web browser is a web application interface layer oriented towards interacting with document objects such as objects in hypertext markup language documents and extensible markup language XML documents. A document object model interface layer may process a flat union of interesting properties across pointer types.

In one embodiment the conversion layer may be the common input framework layer . Alternately the conversion layer may be the application programming interface layer . The common input framework layer is close to driver layer while the application programming interface layer is close to the application layer . By moving the conversion layer further up the computer layer architecture to the application programming interface layer intermediate layers may process any extra data provided by a more expressive pointer device such as a mouse device before the coordinate data even reaches the application.

If the application is unable to handle a device specific event Block the pointer device interface may receive an unhandled device specific data set from the application Block . The pointer device interface may process a device specific data set unhandled by the application Block . The pointer device interface may translate an unhandled device specific data set to at least one of a mouse event or a gesture event for the application Block . The pointer device interface may send a translated device data set to the application Block .

In one embodiment the pointer device interface may process unhandled pointer data by promoting a mouse message. illustrates in a flowchart one embodiment of a method for processing a coordinate input using message promotion. The pointer device interface may receive a coordinate input from a pointer device Block . The pointer device interface may identify in the unified pointer message the pointer device providing the coordinate input Block . The pointer device interface may identify a current device specific state in the unified pointer message Block . The pointer device interface may calculate a device specific data delta for the unified pointer message Block . The pointer device interface may identify the device specific data delta in the unified pointer message Block . Alternately the pointer device interface may identify a previous device specific state in the unified pointer message . The pointer device interface may create the unified pointer message for the coordinate input either at a common input framework layer or at an application programming interface layer Block . The pointer device interface may send the unified pointer message to an application Block .

If the application opts to promote a legacy device message based on the unified pointer message Block the pointer device interface may receive a promotion directive form the application Block . The pointer device interface may process a device specific data set unhandled by the application Block . The pointer device interface may promote a legacy device message based on the unified pointer message Block . The pointer device interface may send the legacy device message to the application Block .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms for implementing the claims.

Embodiments within the scope of the present invention may also include a computer readable storage media for carrying or having computer executable instructions or data structures stored thereon. Such computer readable storage media may be any available media that can be accessed by a general purpose or special purpose computer. By way of example and not limitation such computer readable storage media can comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic data storages or any other medium which can be used to carry or store desired program code means in the form of computer executable instructions or data structures. Combinations of the above should also be included within the scope of the computer readable storage media.

Embodiments may also be practiced in distributed computing environments where tasks are performed by local and remote processing devices that are linked either by hardwired links wireless links or by a combination thereof through a communications network.

Computer executable instructions include for example instructions and data which cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. Computer executable instructions also include program modules that are executed by computers in stand alone or network environments. Generally program modules include routines programs objects components and data structures etc. that perform particular tasks or implement particular abstract data types. Computer executable instructions associated data structures and program modules represent examples of the program code means for executing steps of the methods disclosed herein. The particular sequence of such executable instructions or associated data structures represents examples of corresponding acts for implementing the functions described in such steps.

Although the above description may contain specific details they should not be construed as limiting the claims in any way. Other configurations of the described embodiments are part of the scope of the disclosure. For example the principles of the disclosure may be applied to each individual user where each user may individually deploy such a system. This enables each user to utilize the benefits of the disclosure even if any one of a large number of possible applications do not use the functionality described herein. Multiple instances of electronic devices each may process the content in various possible ways. Implementations are not necessarily in one system used by all end users. Accordingly the appended claims and their legal equivalents should only define the invention rather than any specific examples given.

