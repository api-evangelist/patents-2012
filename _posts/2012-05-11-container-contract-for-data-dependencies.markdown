---

title: Container contract for data dependencies
abstract: Disclosed are various embodiments involving a container contract for data dependencies using representational state transfer (REST). A data resource is obtained by way of REST in response to determining that an application component has a dependency on the data resource. The application component is invoked to process the data resource. The data resource may be sent to the server by way of REST to effect a modification to the data resource in the server in response to determining that the application component has modified the data resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09088463&OS=09088463&RS=09088463
owner: Amazon Technologies, Inc.
number: 09088463
owner_city: Seattle
owner_country: US
publication_date: 20120511
---
Representational state transfer REST is a design pattern for client server architectures. Architectures embodying REST principles may be referred to as being RESTful. In REST clients send requests to servers and servers return responses to clients. Requests and responses relate to the transfer of representations of resources. A resource may be any coherent and meaningful concept that may be addressed by a uniform resource identifier URI . A representation of a resource may be for example a document that captures the current or intended state of the resource. One example of a RESTful architecture is hypertext transfer protocol HTTP .

REST is a stateless architecture where no client context is stored on the server between requests. Server side state may be addressed as a resource. As with resources on the World Wide Web REST resources are also cacheable. REST also provides a layered system that may facilitate load balancing and shared caches. The uniform interface of REST enables each part to be developed independently. REST is distinguished from web services simple object access protocol SOAP and remote procedure call RPC in that the latter are procedure oriented while REST is data oriented. Compared to service oriented architectures REST architectures may be more scalable and easier to maintain.

The present disclosure relates to providing a container contract for data dependencies using representational state transfer REST . Various commercially available programming frameworks support component programming models. Client side components typically interact with some kind of remote service via simple object access protocol SOAP remote procedure call RPC remote method invocation RMI or other forms of service interfaces. Resource oriented architectures following the REST paradigm are concerned more with data than service oriented architectures which are concerned more with procedure calls. Components using REST have included logic to interact with a data store to obtain the data to make it available within the component. Despite using REST the components have used library procedure calls in order to obtain the remote data and or update the remote data thereby imposing a service interaction aspect onto a resource oriented architecture.

Various embodiments of the present disclosure employ a contract where the component is presented with the data resource. The container obtains the data resource using REST and automatically presents the data resource to the component for processing. The component processing may involve modifying the data resource. If the data resource is modified the container is configured to automatically update the data resource on the REST server. The updating may be configured using instructions obtained from the server using a level three RESTful interaction according to the Richardson Maturity Model for REST.

According to the abstraction employed in various embodiments of the present disclosure the component is concerned only with processing the data and not server interactions to obtain or update the data. Consequently the component itself does not have to initiate REST requests or process REST responses which simplifies component development. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes one or more computing devices in data communication with one or more computing devices by way of a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing device may comprise for example a server computer client computer or any other system providing computing capability. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability. In some embodiments a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of computing devices together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience the computing device is referred to herein in the singular. Even though the computing device is referred to in the singular it is understood that a plurality of computing devices may be employed in the various arrangements as described above.

Various applications and or other functionality may be executed in the computing device according to various embodiments. Also various data is stored in a data store that is accessible to the computing device . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing device for example include a container framework one or more application components executed under the container framework a REST client included in the container framework and other applications services processes systems engines or functionality not discussed in detail herein. The container framework is executed to provide a managed component container environment for one or more application components . In various embodiments the container framework may correspond to a server oriented framework or to a client oriented framework. A client oriented container framework may operate for example in conjunction with a web browser or other client application.

The application components may correspond to any problem specific application code that is developed under a contract defined by the container framework . In various examples the contract may involve an inversion of control design pattern. Inversion of control is a style of software construction where reusable code i.e. the container framework controls the execution of problem specific code i.e. the application components . Data dependencies of the application components may be registered or predefined such that the container framework is configured to obtain and or update data resources according to the dependencies using REST and the REST client . For example an application component may correspond to a Java object a JavaBean object and or other types of components.

The REST client corresponds to logic that implements a client for a RESTful protocol such as for example hypertext transfer protocol HTTP and or other RESTful protocols. The REST client may support methods such as for example GET PUT POST DELETE and so on. The REST client constructs a resource request from a uniform resource identifier and or a URI template with various parameters. In some cases the URI is a uniform resource locator URL . The REST client sends the resource request over the network to a server and thereby obtains a resource response . The REST client may then parse the resource response and return the resulting representation of a data resource to the container framework . The container framework obtains the active resource from the resource response . The container framework makes the active resource available to the application component when the application component is invoked.

The data stored in the data store includes for example application code application data configuration data and potentially other data. The application code corresponds to user configured code which is instantiated into the application components . The application data corresponds to locally stored data which may be loaded and or stored by the application components . The configuration data may include parameters that configure the operation of the container framework and or the application components . Such parameters may include definitions of data dependencies of the application components under the container contract.

The computing device may comprise for example a server computer or any other system providing computing capability. In some embodiments a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of computing devices together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience the computing device is referred to herein in the singular. Even though the computing device is referred to in the singular it is understood that a plurality of computing devices may be employed in the various arrangements as described above.

Various applications and or other functionality may be executed in the computing device according to various embodiments. Also various data is stored in a data store that is accessible to the computing device . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing device for example include a REST server and other applications services processes systems engines or functionality not discussed in detail herein. The REST server is executed to obtain resource requests from REST clients over the network and to provide resource responses to the REST clients in fulfillment of the resource requests . The REST server may for example correspond to a commercially available HTTP server such as Apache HTTP Server Apache Tomcat Microsoft Internet Information Services IIS and so on. The data stored in the data store includes for example resource data and potentially other data. The resource data corresponds to server side representations of data resources which may be obtained and or updated by the REST server in response to resource requests from the REST clients .

Next a general description of the operation of the various components of the networked environment is provided. To begin the container framework and the application components may be preconfigured through manual or automatic approaches. The application components may register one or more data dependencies at run time or before. Such data dependencies may depend on data available from one or more of the REST servers which may be operated for example by different entities using different computing devices . In one embodiment the data dependencies may be recorded as annotations in the configuration data which may be associated with the container framework the particular dependent application component and or both. A contract between the container framework and the application components may define the pattern of interaction between the container framework and the application components in this regard.

Upon determining that an application component is to be invoked the container framework determines the data dependencies of the application component . The container framework then obtains data resources to satisfy the data dependencies. The container framework employs the REST client to generate and send one or more resource requests to one or more REST servers over the network . The data dependencies may indicate uniform resource identifiers URI or templates for URIs corresponding to data resources available via REST.

The REST client obtains resource responses from the REST servers which may in some cases include instructions for generating modification resource requests for the given data resource or data describing how to find such instructions. As a non limiting example suppose that a resource is a hypertext markup language HTML page containing certain information about the user. The modification instructions may include an HTML form for modifying the information of the HTML page. The HTML form may define a URI a REST interaction method e.g. POST etc. and the various parameter names and types that can be provided as part of the form. Upon receiving the form data the REST server may be configured to update the data resource corresponding to the HTML page which may involve a modification committed to the resource data .

Upon obtaining the data resource the container framework passes the data resource through a container injection mechanism to the application component as the active resource . Where multiple data resources are obtained to satisfy multiple data dependencies multiple active resources may be provided to the application component . The container framework rather than the application component performs any negotiation data conversion data un marshaling and so on relative to obtaining the data resource.

The container framework may manage client side caching of the active resource according to REST. For example in response to a resource request the REST server may indicate to the REST client that the requested resource has not been updated since the last request. Accordingly the REST client and the container framework may employ a locally cached copy of the requested resource. It is noted that the client side caching may be implemented without any awareness or special action by the application components .

The container framework invokes or executes the application component and the application component begins processing the active resources that have been provided. Unlike traditional approaches to REST the application component does not access the active resource by way of a call that maps directly to a REST operation. For example the application component does not call any particular method that generates a REST GET request or a POST request. That is to say the active resource is automatically provided and updated on behalf of the application component by the container framework . Upon the application component finishing processing the active resources or upon the application component returning control back to the container framework the container framework determines whether any of the active resources that had been provided to the application component have been modified.

For the active resources that have been modified and have modification instructions the container framework using the REST client issues modification resource requests to the appropriate REST server . To this end the container framework may generate a new URI based at least in part on the modification instructions and the modified local copy of the active resource . The modification resource requests may specify new or updated data for the modified active resources . The modification may pertain to creation update or deletion of an entity related to the active resource that is managed by the REST server . The modification may affect other entities or resources in the resource data which depend upon the modified entity. The REST server processes the modification resource requests and modifies the resource data . The REST server may return a resource response to the REST client indicating whether the update was successful.

Turning now to shown is a sequence diagram that provides an example of the interaction among the container framework the application component and the REST server according to various embodiments. It is understood that the sequence diagram of provides merely an example of the many different types of interaction that may be employed in the operation of the container framework the application component and the REST server as described herein. Alternatively the sequence diagram of may be viewed as depicting steps of an example method implemented in the various computing devices and in the networked environment according to various embodiments.

Beginning with box the container framework determines a data dependency of the application component . Such a determination may be made with reference to the configuration data or through a registration call made by the application component or another entity. In box the container framework requests a data resource from the REST server to fulfill the data dependency. A resource request is thereby sent over the network to the REST server .

In box the REST server obtains the data resource in response to the resource request . In so doing the REST server may access and or update resource data stored in the data store . Further the REST server may make any number of calls to various other services executing on the same computing device or a different computing device . The REST server returns the resource response to the container framework over the network in response to the resource request . The resource response includes the requested resource or an error message. In some cases the resource response may be a level three REST message having instructions for updating the included data resource .

In box the container framework provides the data resource obtained from the resource response to the application component as the active resource which is a local copy in the computing device which is capable of modification by the application component . To this end the container framework may provide the resource via a predefined injection site of the application component e.g. a setter method a constructor and or other injection sites under the container contract. In box the container framework invokes the application component with an invocation .

Consequently the application component in box performs some form of processing that has a dependency on the active resource . The application component returns a result or otherwise indicates to the container framework that processing of the active resource is completed. In box the container framework determines that the active resource has been modified. Such a determination may be performed using the result or metadata associated with the active resource e.g. last modified metadata versioning information etc. .

In box in response to determining that the active resource has been modified the container framework sends a resource request for a modification to server state related to the data resource on the REST server . For example the request may relate to a creation a deletion or an update of a server copy of the data resource. The resource request may be generated based at least in part on one or more instructions received in the resource response . In box the REST server modifies the server state related to the data resource which may include creating updating or deleting the representation of the resource in the resource data . In box the REST server returns the resource response pertaining to the modification to the container framework . Thereafter the interaction depicted by the sequence diagram ends.

Continuing now to shown is a sequence diagram that provides an example of the interaction among the container framework the application component and the REST server according to various embodiments. It is understood that the sequence diagram of provides merely an example of the many different types of interaction that may be employed in the operation of the container framework the application component and the REST server as described herein. Alternatively the sequence diagram of may be viewed as depicting steps of an example method implemented in the various computing devices and in the networked environment according to various embodiments.

Beginning with box the container framework determines a data dependency of the application component . Such a determination may be made with reference to the configuration data or through a registration call made by the application component or another entity. In box the container framework injects a stub in the application component . The stub allows for lazy loading of a data resource when the dependency is reached by the application component . In some cases the dependency may not be reached and the data resource will consequently not be obtained.

In box the container framework invokes the application component with an invocation . In response a stub call may be received from the application component . In response to the stub call or according to pre fetching that may be happening concurrently in box the container framework requests a data resource from the REST server to fulfill the data dependency. A resource request is thereby sent over the network to the REST server . In some cases the data resource may be obtained from a cache according to REST.

In box the REST server obtains the data resource in response to the resource request . In so doing the REST server may access and or update resource data stored in the data store . Further the REST server may make any number of calls to various other services executing on the same computing device or a different computing device . The REST server returns the resource response to the container framework over the network in response to the resource request . The resource response includes the requested resource or an error message. In some cases the resource response may be a level three REST message having instructions for updating the included data resource .

In box the container framework provides the data resource obtained from the resource response to the application component as the active resource which is a local copy in the computing device which is capable of modification by the application component . To this end the container framework may provide the resource via a predefined injection site of the application component e.g. a setter method a constructor and or other injection sites under the container contract.

Consequently the application component in box performs some form of processing that has a dependency on the active resource . The application component returns a result or otherwise indicates to the container framework that processing of the active resource is completed. In box the container framework determines that the active resource has been modified. Such a determination may be performed using the result or metadata associated with the active resource e.g. last modified metadata versioning information etc. .

In box in response to determining that the active resource has been modified the container framework sends a resource request for a modification to server state related to the data resource on the REST server . For example the request may relate to a creation a deletion or an update of a server copy of the data resource. The resource request may be generated based at least in part on one or more instructions received in the resource response . In box the REST server modifies the server state related to the data resource which may include creating updating or deleting the representation of the resource in the resource data . In box the REST server returns the resource response pertaining to the modification to the container framework . Thereafter the interaction depicted by the sequence diagram ends.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the container framework according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the container framework as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning with box the container framework determines the existence of a data dependency for an application component . In box the container framework determines whether the data resource for the data dependency is cached according to REST. If the data resource is not cached in box the container framework obtains a representation of a data resource in fulfillment of the dependency from a REST server over the network . Along with the data resource the container framework may obtain instructions for modifying server state related to the data resource. Such instructions may be included within the data resource itself or transmitted along with the representation of the data resource. The container framework proceeds to box .

If the data resource is cached the container framework moves instead from box to box . In box the container framework obtains the representation of the data resource from the cache potentially together with cached modification instructions. The container framework then proceeds to box . In box the container framework provides a local copy of the data resource to the application component as the active resource . In some cases scoping rules may be applied to the active resource . For example the local copy may be specific to the instance of the application component shared among multiple instances of the application component and or shared among multiple different application components for a given application.

In box the container framework invokes the application component to perform some type of processing that has a dependency on the active resource . In box the container framework determines whether the application component has modified the active resource . If the application component has not modified the active resource the portion of the container framework ends.

If the application component has modified the active resource the container framework proceeds from box to box . In box the container framework sends a modification request to the REST server according to the modification instructions obtained in box . Thereafter the portion of the container framework ends.

Moving on to shown is a flowchart that provides one example of the operation of a portion of the application component according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the application component as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning with box the application component registers a data dependency with the container framework . The registration may be upon initial configuration of the application component or at run time. Also such a registration may be manual or automatic. The data dependency may be recorded in the configuration data according to the container contract.

In box the application component obtains a local copy of the data resource on which it depends from the container framework . In box the application component obtains an invocation from the container framework . In one embodiment the application component is invoked by a constructor where one of the arguments to the constructor is the data resource.

In box the application component processes the data resource. In box the application component optionally modifies the data resource. In box the application component returns control to the container framework which may involve returning a result to the container framework . Thereafter the portion of the application component ends.

Continuing now to shown is a flowchart that provides one example of the operation of a portion of the REST server according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the REST server as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning with box the REST server obtains a request for a data resource from a REST client . In box the REST server obtains the data resource from the resource data . In box the REST server sends a representation of the data resource to the REST client along with instructions for modifying the server state related to the data resource. In some cases the instructions may be included within the data resource itself. The representation and instructions are sent to the REST client by way of the network .

In box the REST server obtains a request to modify the server state relating to the data resource from the REST client over the network . In box the REST server modifies the server state related to the data resource in the resource data in accordance with the modification request. In box the REST server returns the result to the REST client over the network . Thereafter the portion of the REST server ends.

With reference to shown is a schematic block diagram of the computing device according to an embodiment of the present disclosure. The computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the container framework the application components the REST client and potentially other applications. Also stored in the memory may be the active resources a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the container framework the application components the REST client and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The sequence diagram of and the flowcharts of show the functionality and operation of an implementation of portions of the container framework the application component and the REST server . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the sequence diagram of and the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the container framework the application components and the REST client that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

