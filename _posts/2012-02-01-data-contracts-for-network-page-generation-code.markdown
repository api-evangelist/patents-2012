---

title: Data contracts for network page generation code
abstract: Disclosed are various embodiments for using data contracts in connection with network page generation code. A network page request is obtained from a client. Data is aggregated from multiple data sources in response to the request, and data is marshalled based at least in part on a data contract. Page generation code is executed to generate at least a portion of the network page in response to the request. The aggregated data is provided to the page generation code as one or more predefined variables. Access to the predefined variables by the page generation code complies with the data contract.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08862984&OS=08862984&RS=08862984
owner: Amazon Technologies, Inc.
number: 08862984
owner_city: Reno
owner_country: US
publication_date: 20120201
---
A data type is a classification for a data item that may identify the possible values for the data item the possible operations on the data item the meaning of the data item and other information about the data item. Examples of data types may include Boolean floating point integer character character string and so on. In a manifestly typed programming language the developer explicitly specifies the data type for the data item in the code. In a type inferred programming language the compiler may infer the data type according to the context of how the data item is used in the code. Typed programming languages may be statically typed or dynamically typed. In static typing all data items have their types determined prior to runtime e.g. at compile time or another time. In dynamic typing types are determined at runtime.

The present disclosure relates to providing data contracts for use with network page generation code. A hosting provider may offer network site hosting for a plurality of customers. Such hosting may include access to an electronic commerce platform or other hosted application. For security and other various reasons customer supplied network page generation code may be executed under a framework that restricts the operations permitted in the code. Also the page generation code may be restricted from directly accessing data sources of the electronic commerce platform. To provide access data from the electronic commerce platform that is used by the page generation code may be aggregated from one or more data sources in advance for use by the page generation code. This aggregated data may be provided to the page generation code through predefined variables.

Various techniques relating to a data aggregation framework are provided in U.S. patent application Ser. No. 13 348 051 entitled GENERATING NETWORK PAGES USING CUSTOMER SUPPLIED GENERATION CODE and filed on Jan. 11 2012 and in U.S. patent application Ser. No. 13 348 059 entitled GENERATING NETWORK PAGES USING CUSTOMER GENERATED NETWORK PAGE PORTIONS and filed on Jan. 11 2012 both of which are incorporated herein by reference in their entirety.

Documentation may be provided to the customers in order to assist them in developing page generation code for their network sites under this framework. The documentation may take the form of an example as in sample or default page generation code and or other written documentation. One form of documentation may be a data contract which is a formal agreement between a service and a client regarding data that is to be exchanged. The data contract may establish naming conventions for the data data types for the data subcomponents for the data and or other parameters for the data.

Various embodiments of the present disclosure employ such data contracts to validate customer submitted page generation code to marshal and unmarshal data and for other purposes. By providing the data contracts to the customer as a form of application programming interface API documentation the customer supplied page generation code is developed consistent with internal subsystems that perform for example code validation data serialization marshalling and or other functions according to the same data contracts. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes a computing environment in data communication with one or more clients by way of a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of computing devices together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. The computing environment may be operated by a hosting provider to host network sites for various customers.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed by the computing environment for example include a plurality of data sources . . . N a data aggregation service a network page generation application a network page server application a network site configuration application and other applications services processes systems engines or functionality not discussed in detail herein. The data sources are executed to provide various data used in generating network pages for network sites of customers of the hosting provider. Where the customers are merchants the data provided by the data sources may relate to electronic commerce data such as for example item catalog data item suggestions data shopping cart data checkout data order data and so on. In one embodiment the data sources may comprise web services. In another embodiment the data sources may comprise files or other forms of data stores. The data sources may be configured to marshal the data i.e. serialize the data according to predefined data contracts. As used herein marshalling refers to the process of transforming the memory representation of an object to a data format suitable for storage or transmission.

The data aggregation service is executed to aggregate data from the data sources for use in generation of network pages . The data aggregation service may employ parallel fetching to reduce latency when data is aggregated from multiple data sources . The network page generation application is executed to generate the network pages in response to page requests obtained from clients . The network pages may correspond to web pages gopher pages mobile application screens and or other forms of network content. The data aggregation service may be configured to unmarshal the data obtained from the data sources using a predefined data contract. In some embodiments the data aggregation service may marshal the data using a predefined data contract for sending to the network page generation application .

Where the customer is a merchant the network pages may correspond to home pages catalog pages item detail pages shopping cart pages checkout pages order confirmation pages and so on. Such network pages may facilitate selecting items for purchase rental download lease or other form of consumption. In addition where the customer is a merchant the network page generation application may include or be in communication with an electronic commerce system that performs various backend functions in order to facilitate the online purchase of items.

The network page generation application may execute page generation code in order to generate the network pages . The page generation code may correspond to a default version supplied by the hosting provider or may correspond to a customized version supplied by the customer. In some cases the page generation code may be transformed or compiled from one code format to another and or may be interpreted. As a non limiting example the page generation code may correspond to JavaServer Pages JSPs which may be compiled into Java servlets which in turn may be compiled into bytecode which may be executable by the network page generation application . To this end the network page generation application may include a servlet container such as Apache Tomcat or another servlet container.

The network page generation application may be configured to obtain aggregated data from the data aggregation service and to provide the aggregated data to the page generation code for example as a set of predefined variables or by another approach. The network page generation application may include one or more data accesses to the predefined variables . The data accesses may be evaluated for compliance with a predefined data contract. The network page generation application may act as a sandbox for the page generation code to enforce restrictions on application programming interface API calls access to the data source and or other resources in the computing environment .

The network page server application is configured to obtain the page requests from the client over the network to generate network pages in response to the page requests using the network page generation application and to return the network pages to the client by way of the network . The network page server application may correspond to a commercially available hypertext transfer protocol HTTP server such as for example Apache HTTP Server Apache Tomcat Microsoft Internet Information Services IIS and or other servers.

The network site configuration application is executed to facilitate customer configuration of network sites. To this end the network site configuration application may enable uploading and configuration of the page generation code configuration of various parameters associated with the operation of the network site order fulfillment management item catalog management and or other functionality. The network site configuration application may be configured to evaluate the customer supplied page generation code for compliance with predefined data contracts. The network site configuration application may implement an HTTP server a web based distributed authoring and versioning WebDAV server a file transfer protocol FTP server and or other servers.

The data stored in the data store includes for example network site data network site configuration data customized page generation code default page generation code data contracts page generation restrictions and potentially other data. The network site data corresponds to data used in the generation of the network pages for the hosted network sites of the merchants or other customers. Such data may include for example templates hypertext markup language HTML text extensible markup language XML cascading style sheets CSS images audio video animations and or other data.

The network site configuration data may store parameters and or other data for controlling the operation and appearance of the hosted network site. Such data may control various electronic commerce functionality such as for example item catalogs item taxonomies item searching item recommendations shopping carts checkout order fulfillment and or other functionality. The customized page generation code corresponds to page generation code which is created or customized by merchants or other customers. The default page generation code may correspond to a default set of page generation code for a merchant or other customer to use for a base functionality for a network site. The default page generation code may generate network pages having for example a default appearance and behavior for a generic electronic commerce site.

The data contracts may correspond to the predefined data contracts which are used to determine whether the data accesses to the predefined variables in the page generation code are in compliance to marshal or unmarshal data and or for other internal purposes in the computing environment . The data contracts may be provided to the customers as documentation for use in developing the page generation code . As a non limiting example the data contracts may comprise web services description language WSDL extensible markup language XML schema data definition markup language DDML document schema description languages DSDL document structure description DSD and or other data description languages. In some embodiments the data contracts may be used to provide manifest typing to a non manifestly typed language static typing to a dynamically typed language and so on. For example the data contracts may be used to provide static manifest typing for data accesses to the predefined variables in expression language EL expressions in JSP. Additionally the data contracts may include developer documentation such as for example names of predefined variables listing of the associated data types instructions explanations and so on regarding use of the data specified by the data contracts .

The page generation restrictions may configure various restrictions to be placed on the page generation code by the network page generation application . As a non limiting example where the page generation code corresponds to JSP code the network page generation application may restrict the JSP code from including scriptlets and or various API calls. Various functionalities may be whitelisted or blacklisted as the case may be. Such restrictions may be configured by way of parameters in the page generation restrictions .

The client is representative of a plurality of client devices that may be coupled to the network . The client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability. The client may include a display . The display may comprise for example one or more devices such as cathode ray tubes CRTs liquid crystal display LCD screens gas plasma based flat panel displays LCD projectors or other types of display devices etc.

The client may be configured to execute various applications such as a browser and or other applications. The browser may be executed in a client for example to access and render network pages served up by the computing environment and or other servers thereby generating a rendered network page on the display . The client may be configured to execute applications beyond the browser such as for example code development applications file transfer applications mobile applications email applications instant message applications and or other applications.

Next a general description of the operation of the various components of the networked environment is provided. To begin a merchant or other customer of a hosting provider associated with the computing environment configures a network site to be hosted through the computing environment . The network site may have a common domain that is shared by multiple customers of the hosting provider or the network site may correspond to a unique domain for each customer. The merchant or other customer may adopt default page generation code for various network pages accessible through the network site. Alternatively or additionally the merchant or other customer may create customized page generation code for generating some or all of the network pages accessible through the network site. The data contracts may be provided to the customers as a form of documentation.

The merchant or other customer may interact with the network site configuration application to customize or make changes to the network site. In various cases the customer may edit the page generation code directly through the network site configuration application or the customer may upload replacement page generation code . Through this system customers are able to control generation of network pages for their network sites despite using a hosted infrastructure and potentially a hosted electronic commerce platform.

The page generation code is able to access aggregated data generated by the data aggregation service . The set of data that is available and the data contract that is used may depend on the type of network page e.g. whether the network page is a checkout page catalog page order confirmation page and so on. In one example the predefined variables may be associated with the hosted electronic commerce platform provided by the hosting provider. The predefined variables may correspond to implicit variables or other variables that are available in the scope of the page generation code . The page generation code may be configured to access all of the predefined variables or a subset of the predefined variables . The page generation code may be restricted from accessing the data sources directly.

In various embodiments the data accesses in the page generation code may be evaluated with compliance with the corresponding data contract before runtime or at runtime. Where the page generation code is compiled the page generation code may be evaluated for compliance with the data contract before compile time. The page generation code may be evaluated to ensure that use of the predefined variables by the data accesses are consistent with data types defined in the data contract .

As a non limiting example an EL expression itemName 3 which applies an arithmetic operator to the predefined variable of itemName may be flagged as non compliant where itemName is defined in the data contract as a character string. It is noted that the page generation code in this case may contain no reference to itemName before the example EL expression because itemName may be an implicit variable. Thus various embodiments allow for pre runtime type checking to be applied using the data contract in a situation and language not otherwise providing for such type checking.

In operation the client sends a page request to the network page server application for some network page from a network site of a customer. The network site is hosted on behalf of the customer by the hosting provider who operates the computing environment . Where the customer is a merchant the hosting provider may operate a hosted electronic commerce platform in conjunction with the computing environment . The page request is provided to the network page generation application which then obtains the aggregated data from the data aggregation service . The aggregation may be performed automatically in response to the page request or in advance of the page request . The data aggregation service fetches the aggregated data from one or more data sources . The aggregated data may be marshalled and unmarshalled according to the data contract .

The page generation code for the requested network page is executed by the network page generation application . The network page generation application facilitates access to the aggregated data by the page generation code by way of the predefined variables . The page generation code generates the network page and the network page server application serves up the network page to the client in response to the page request .

In some embodiments the page generation code is restricted from accessing one or more of the data sources . The customer supplied page generation code may be isolated from one or more of the data sources for purposes of complying with PCI DSS and or other security standards. Consequently the data from the data sources may be accessible only as the predefined variables . It is noted that the data aggregation service may generate the aggregated data in response to the page request in response to other events or at other times as desired.

The page generation code may be analyzed for compliance with one or more policies according to the page generation restrictions when initially configured or compiled and or at runtime. Such policies may include acceptable content of the network page API usage usage of scriptlets or other disallowed language features and so on. If the page generation code is determined to be non compliant the page generation code may be unexecuted terminated if already executing replaced with default page generation code or another action may be taken.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the network site configuration application according to the embodiments discussed in connection with . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the network site configuration application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the network site configuration application obtains page generation code from a customer whose network site is hosted by the hosting provider who operates the computing environment . The network site configuration application may be configured to authenticate a client associated with the customer. In box the network site configuration application determines whether the page generation code complies with the page generation restrictions . If the page generation code does not comply with the page generation restrictions the network site configuration application rejects the page generation code in box . An error may be presented to the customer. Thereafter the portion of the network site configuration application ends.

If the page generation code complies with the page generation restrictions the network site configuration application proceeds from box to box . Even assuming that the page generation code is determined to be valid by the network site configuration application validity checks may still need to be performed by the network page generation application at runtime. In box the network site configuration application determines whether the page generation code complies with a corresponding data contract for the page generation code . To this end the network site configuration application determines whether one or more data accesses to the predefined variables comply with the data contract .

If the page generation code does not comply with the data contract the network site configuration application moves from box to box . In box the network site configuration application rejects the page generation code . An error may be presented to the customer. Thereafter the portion of the network site configuration application ends. If instead the page generation code does comply with the data contract the network site configuration application proceeds from box to box .

In box the network site configuration application compiles the page generation code . For example the network site configuration application may compile the page generation code from a JSP into a servlet. The resulting servlet code may also be compiled into bytecode for execution by a Java Virtual Machine JVM or directly by a processor circuit of the computing environment .

In box the network site configuration application configures the network page generation application to execute the compiled page generation code for one or more network pages for the network site of the customer. In box the network site configuration application may store configuration data that configures the data aggregation service to provide a set of predefined variables to the page generation code . Thereafter the portion of the network site configuration application ends.

Continuing on to shown is a flowchart that provides one example of the operation of a portion of the network page generation application according to the embodiments discussed in connection with . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the network page generation application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the network page generation application obtains a page request from the client by way of a network page server application . The page request indicates a network page from a network site of a customer. The network site is hosted by the hosting provider who operates the computing environment . In box the network page generation application obtains or fetches page generation code corresponding to the requested network page .

In box the network page generation application aggregates various data pertaining to the customer from one or more data sources by way of the data aggregation service . The data complies with one or more data contracts . In box the network page generation application unmarshals the data obtained from the data aggregation service using one or more data contracts . In some embodiments the unmarshalling may be performed by the data aggregation service .

In box the network page generation application executes the page generation code . In doing so the network page generation application may perform various runtime checks to ensure that the page generation code does not include any impermissible code or content. In box the network page generation application provides the aggregated data to the page generation code as predefined variables .

In box the network page generation application assembles the network page using the output of the page generation code and potentially other data. In box the network page generation application sends the generated network page to the client in response to the page request . Thereafter the portion of the network page generation application ends.

Moving on to shown is a flowchart that provides one example of the operation of a portion of the data source according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the data source as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the data source obtains a request for data from the data aggregation service . In box the data source obtains a data contract . The data contract may be provided along with the data request or may be obtained by the data source from a data store . In one embodiment the data source is operated by an entity external to the data aggregation service . Consequently the data source may employ an external data contract which may be incorporated within an internal data contract employed by the data aggregation service the network page generation application the network site configuration application and or other components.

In box the data source marshals the requested data using the data contract . In box the data source sends the marshalled data to the data aggregation service . Thereafter the portion of the data source ends.

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment includes one or more computing devices . The computing device corresponds to a representative computing device which may be employed in the computing environment .

The computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the data aggregation service the data sources the network page generation application the network page server application the network site configuration application and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the data aggregation service the data sources the network page generation application the network page server application the network site configuration application and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the network site configuration application the network page generation application and the data source . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the data aggregation service the data sources the network page generation application the network page server application and the network site configuration application that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system.

In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

