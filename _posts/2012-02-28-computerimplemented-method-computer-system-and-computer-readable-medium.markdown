---

title: Computer-implemented method, computer system and computer readable medium
abstract: The present application relates to a computer implemented method for processing a request to connect to a server from an application residing on a client device. The method may comprise, among other operations, receiving the request to connect to the server from the application residing on the client device. In response, the method determines a matched service interface and an access indicator of the matched service interface. The access indicator of the matched service interface is sent to the application residing on the client device in response to the request to connect to the server. If more than one matched service interface is determined, a best matching service interface may be determined. In some instances, the best matching service interface is the newest version of the matched service interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856365&OS=08856365&RS=08856365
owner: SAP AG
number: 08856365
owner_city: Walldorf
owner_country: DE
publication_date: 20120228
---
This application relates to a computer implemented method a computer system and a computer readable medium.

In classic client server computing a broadly distributed application may partition tasks workload and or application processes between at least two devices. For example the distributed application may be partitioned between a service requester known as a client and a service provider known as a server. The client may request the services provided by the server over a network. For example the client may request a computing service or an email service provided by the server over a network such as the Internet.

During an upgrade of a distributed application in a client server computing environment application code on a client device i.e. client software and or application code on a server device i.e. server software may need to be configured. However configuring the upgraded client software on the client device may result in many problems. For example a user of the client device may ignore a notification from the server requiring configuration of the client software and continue to try to use the client software that has not been upgraded. Further the user of the client device may try to use the upgraded client software without having configured the upgraded client software. Moreover even if the user of the client device tries to configure the upgraded client software errors may be introduced during the configuration causing the upgraded client software to point to non existent server software.

In the following a detailed description of embodiments will be given with reference to the drawings. It should be understood that various modifications to the embodiments may be made. In particular one or more elements of one or more embodiments may be isolated from each other and may be combined and or used in other embodiments to form new embodiments.

According to an embodiment the server may host or provide one or more services such as . A service may be a computer process software or application performing specific functions. A service may have one or more versions. For each version of a service a service interface also known as a contract may be provided on the server enabling applications to access to the version of the service. For example in service interfaces are offered for the available versions of the service . Service interfaces may be provided for services and as well. A service interface enabling an application access to a version of a service may be accessed via an access indicator. An example of an access indicator may be a Uniform Resource Locator URL or other pointer to the access indicator.

The server may be one of a plurality of versions. If a plurality of versions is provided for a single server such as the server a newer version of the server may offer more service interfaces than an older version of the server. Further if multiple instances of a specific version of the server are implemented e.g. each instance of a specific version of the server is implemented in a different business each service interface corresponding to a specific version of a service residing on an instance of the server is addressable via a different access indicator. For example an instance of server X is implemented at Company A and another instance of server X is implemented at Company B. To access a service interface residing on server X at Company A a client application may use an access indicator such as a URL e.g. http s companya.com svc . To access a service interface for the same service of the same version residing on server X at Company B a client application may use a different access indicator such as a different URL e.g. http s companyb.com svc .

The client device may include a client application . The client application may comprise code and may be pre installed on the client device or may be downloaded onto the client device . The client application may use one or more service interfaces residing on the server . For example the client application may use only service interface and therefore may be considered a static client application. Another approach includes the client application being enabled to use a selection of service interfaces such as service interface service interface and service interface and therefore may be considered a multi static client application. In the static and multi static client applications the service interfaces may be addressed by an access indicator encoded in code of the client application . For example a client application may use an access indicator such as a URL e.g. http s companya.com svc to address a specific version of a service interface.

Advantageously the client application may switch to a newer service interface as soon as possible but avoiding a disruptive switch during application runtime. During application runtime the client application may detect a newer version of a service interface but the newer service interface will be used the next time the application is started.

Yet another approach is the client application being enabled to use all service interfaces offered by the server such as service interfaces and therefore be considered a dynamic client application. The one or more specific service interfaces that the client application may use are considered acceptable service interfaces. For example the dynamic client application may be a browser type generic client type application.

A dynamic application may include the access identifier of the service interface management system and may pass the input parameter to the service interface management system in a request to the to the service interface management system. Instead of the input parameter being acceptable service interfaces the input parameter may be an application identifier expressing the purpose of the application such as an employee list or opportunity list. The service interface management system may look up the service interfaces belonging to the application identifier and determine a best matching service interface from these service interfaces.

Further the dynamic application may include a latest version link which enables the application to upgrade to a newer version of a service interface as soon as it is available on the server. The response payload of requests addressing a specific service interface must contain an access identifier to the latest newest version of the service interface to allow generic clients to switch to the latest newest version.

If a plurality of versions of an application is provided for a single application the newer versions of the application may be enabled to use more service interfaces than the older versions of the application. In other words a newer version of an application may have more acceptable service interfaces than an older version of an application. According to an embodiment a next version of an application may use one more service interface than a direct predecessor version of the application. Further a specific version of the application can be installed and used by many users i.e. there may be many instances of a specific version of the application.

During an upgrade of either the server or the client application on the client device a switch from an older version of the server and or client application to a newer version of the server and or client application is performed. However the client application after an upgrade is performed may not contain the correct access indicator needed to access a service interface residing on the server . For example an upgraded client application downloaded by Company A may need to be configured to access the new service interface on the server of Company A.

Two companies Company A example.org and Company B smallexample.com implement separate instances of server S and application A as described above and as shown in . To ensure that Company A and Company B each display the correct employee directory access indicators must be properly configured. For example Company A and Company B may both download application A from the application store. Company A uses an access indicator e.g. URL https example.org u to address and access the service interface C of Company A. Company B uses a different access indicator e.g. URL https smallexample.com v to address and access the service interface C of Company B.

Thus employees using application A of Company A must enter the access indicator e.g. URL https example.org u and the employees using application A of Company B must enter the access indicator e.g. URL http smallexample.com v.

In when the Employee Directory application A is extended i.e. upgraded the next version of the application e.g. application A may have additional functionality e.g. displaying a photo of an employee in addition to the other employee data. Application A may accept both service interface C and service interface C while application A still only accepts service interface C. Further both Company A and Company B may still use server S.

Once application A is distributed via the application store application A is indicated as the new version of application A in an update announcement to application A users in both Company A and Company B. For example an email announcement may be sent to employees of Company A and Company B that use application A stating there is a new version of application A.

Accordingly some employees may update the application A to application A the remaining employees may not update the application A to application A and instead still use application A. Application A will still work since application A accepts service interface C and server S offers service interface C. Application A will work since application A can still accept service interface C in addition to service interface C and server S offers service interface C as shown in

However the access indicators in application A and application A must point to the appropriate service interface in order to access the correct version and service offered by the server. Thus to configure an upgraded client application on a client device a service interface management system is provided according to an embodiment.

The service interface management system may be implemented as hardware as a software platform or as a cloud. For example the service interface management system may comprise an example of cloud computing. Cloud computing provides computation software data access storage resources etc. without requiring cloud users i.e. the client devices to know the location and other details of the computing infrastructure. Thus the cloud may comprise delivery of computing as a service where shared resources software and information are provided to computers and other devices as a service over a network. Access to cloud based applications may be through a client device such as a web browser or portal or a light weight desktop or a mobile application.

On the client application side instead of encoding an access indicator of a service interface into the client application the client application may include an access indicator of the service interface management system . For example Company A will encode into the client application an access indicator for service interface management system of Company A and Company B will encode into the client application a different access indicator for service interface management system of Company B. Thus when a request is made by a client application the request is automatically sent to the service interface management system using the access indicator such as a URL of the service interface management system . In response to the request from the client device the service interface management system may provide the client device with an access indicator. The service interface management system may provide access indicators for each type of application in a business and for all versions of one application type for a business.

The request receipt module may receive a request from a client application residing on a client device indicated by an access indicator. The request may include an input parameter from the client application which may be encoded with the input parameter. The input parameter may represent one or more service interfaces acceptable to the client application.

The match determination module may determine a matched service interface. As discussed above the match determination module may further comprise the acceptable service interface module and the best matching service interface module . To determine a matched service interface the acceptable service interface module may determine a value of the input parameter from the request received from the client application by the request receipt module . The input parameter may represent one or more service interfaces acceptable to the client application. For example referring to the client application may only access service via service interfaces and . Thus service interfaces and are acceptable service interfaces.

The acceptable service interface module may also retrieve service interfaces offered by the server from data storage. The data storage may be coupled to the server or may be coupled to the service interface management system . For example referring to the service interfaces offered by the server may be the service interfaces 

The acceptable service interface module may then determine whether any of the one or more acceptable service interfaces match any of the service interfaces offered by the server. If more than one matched service interface is determined by the acceptable service interface module the best matched service interface module may determine the best matching service interface from among the matched service interfaces. The best matching service interface may be the matched service interface of the newest version based on a predetermined order of application versions. Alternatively the best matching service interface may be the matched service interface of the most relevance. In addition if no match is determined the service interface management system sends an error message to the client application on the client device indicating the application will not function.

Once a matched service interface is determined the access indicator module may determine an access indicator of the matched service interface. The access indicator of the matched service interface may be a Uniform Resource Locator URL of the matched service interface. For example a URL for the service interface may be determined from a lookup table storing service interfaces and their corresponding access indicators e.g. URLs. The access indicator module may then send the access indicator e.g. URL of the matched service interface to the client application residing on the client device. The client device may use the access indicator to connect to the server via the appropriate service interface.

Summarizing a service interface management system for processing a request to connect to a server from an application residing on a client device may be provided comprising 

Advantageously all applications need is knowledge of one access indicator i.e. the URL of the service interface management system . By accessing the access indicator no other configuration information is necessary because the service interface management system provides the configuration i.e. the URL to the client application. The access indicator of the service interface is the service interface the client application should connect to such that it can be connected to the server. Even if the client application itself is upgraded the URL of the service interface management system may be hardcoded into the client application code. Thus the upgraded client application will still point to the service interface management system . Further the client application will automatically switch to the best version of the service interface with respect to those offered by the server.

The above described computer system may be operable to carry out the methods as described below in conjunction with and .

At step a service interface management system receives a request to connect to a server from an application residing on a client device. The request may be directly from the application residing on the client device or may be routed through another service such as a registration service. In other words the receiving at a service interface management system the request to connect to the server from the application residing on the client device may further comprise determining an access identifier of the service interface management system from a registration service

At step the service interface management system determines a matched service interface. This step is described in more detail below with reference to .

At step the service interface management system determines an access indicator of the matched service interface. The access indicator of a matched service interface may be a Uniform Resource Locator URL of the matched service interface.

At step the service interface management system sends the access indicator of the matched service interface to the client application residing on the client device in response to the request to connect to the server.

At step the service interface management system determines an input parameter from said request. The input parameter represents one or more service interfaces acceptable to the application.

At step the service interface management system determines whether any of the one or more acceptable service interfaces matches any service interfaces offered by the server i.e. one or more matched service interfaces is determined. If more than one matched service interface is determined at step the method proceeds to step . If only one matched service interface is determined the method ends and returns to step of the method .

At step the service interface management system determines a best matching service interface from the more than one matched service interface. The best matching service interface may be the matched service interface of the newest version based on a predetermined order of application versions. Alternatively the best matching service interface may be the matched service interface of the most relevance.

After determining the best matching service interface the method ends and returns to step of the method wherein the best matching service interface is the matched service interface.

In view of the above described methods a computer readable medium may be provided. The computer readable medium may be operable for processing a request from a client device to connect to a server. The computer readable medium may comprise computer executable instructions that when executed perform the steps of 

Further a client side application may be provided. The client side application may reside on a client device for connecting to a server said client application configured to 

Moreover a server may be provided. The server may process a request to connect to a service interface from an application residing on a client device comprising 

The registration service may provide the appropriate access indicator to a requesting company. For example if Company A requests an access indicator from the registration service Company A will receive the access indicator for their own service interface management system . If Company B requests an access indicator from the registration service Company B will receive the access indicator for their own service interface management system .

Therefore on the client side instead of maintaining the access indicator of their own service interface management systems in the client application a company may simply maintain the access indicator of the registration service in the client application . Advantageously the access indicator of the registration service is identical for all client applications and can be hard coded into the client applications .

Further in response to registering with the registration service the registration service may provide Company A with a startup code that is easy to type and remember. The registration service may also provide Company B with a startup code different than that startup code provided to Company A in response to Company B registering with the registration service . When employees of Company A and Company B may download their client applications they simply enter the startup code for their respective company into the client application where configuration information is usually entered.

When the client application is started by an employee of Company A a request is sent to the registration service to read the access indicator e.g. URL of the service interface management system of Company A. Similarly when the client application is started by an employee of Company B a request is sent to the registration service to read the access indicator e.g. URL of the service interface management system of Company B. Thus the registration service returns an appropriate access indicator to a requesting company in exchange for the startup code. Alternatively if the client application is bound to a specific device with a unique identifier e.g. a mobile device with an IMEI number a company can register multiple devices with the unique identifiers with the registration service . For example an application programming interface API may read the IMEI number of the device and provide the IMEI number to the registration service . The registration service may register the IMEI number of each device belonging to a group with a specific access identifier such as a URL of the service interface management system of the company. Therefore all of the devices belonging to a group or company may be registered with the registration service . When the client application is started on a registered device the IMEI number is automatically provided to the registration service and the registration service may respond with the access identifier associated with that IMEI number. Advantageously the client applications can then use the unique identifier such as the IMEI number instead of the startup code to request the access identifier of the service interface management system from the registration service .

The server may further include a hard disk drive for reading from and writing to a hard disk not shown and an external disk drive for reading from or writing to a removable disk . The removable disk may be a magnetic disk for a magnetic disk driver or an optical disk such as a CD ROM for an optical disk drive. The hard disk drive and the external disk drive are connected to the system bus by a hard disk drive interface and an external disk drive interface respectively. The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the server . The data structures may include relevant data for the implementation of the method as described above. The relevant data may be organized in a database for example a relational database management system or a object oriented database management system.

Although the exemplary environment described herein employs a hard disk not shown and an external disk it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks random access memories read only memories and the like may also be used in the exemplary operating environment.

A number of program modules may be stored on the hard disk external disk ROM or RAM including an operating system not shown one or more application programs other program modules not shown and program data . The application programs may include at least a part of the functionality as depicted in .

A user may enter commands and information as discussed below into the server through input devices such as keyboard and mouse . Other input devices not shown may include a microphone or other sensors joystick game pad scanner or the like. These and other input devices may be connected to the processing unit through a serial port interface that is coupled to the system bus or may be collected by other interfaces such as a parallel port interface game port or a universal serial bus USB . Further information may be printed using printer . The printer and other parallel input output devices may be connected to the processing unit through parallel port interface . A monitor or other type of display device is also connected to the system bus via an interface such as a video input output . In addition to the monitor computing environment may include other peripheral output devices not shown such as speakers or other audible output.

The computing environment may communicate with other electronic devices such as a computer telephone wired or wireless personal digital assistant television or the like. To communicate the computer environment may operate in a networked environment using connections to one or more electronic devices. depicts the computer environment networked with remote computer i.e. mobile device . The remote computer may be another computing environment such as a mobile device such as a smart phone or tablet and may include many of the elements described above relative to the computing environment . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet and may particularly be encrypted.

When used in a LAN networking environment the computing environment may be connected to the LAN through a network I O . When used in a WAN networking environment the computing environment may include a modem or other means for establishing communications over the WAN . The modem which may be internal or external to computing environment is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computing environment or portions thereof may be stored in a remote memory storage device resident on or accessible to remote computer . Furthermore other data relevant to the method may be resident on or accessible via the remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the electronic devices may be used.

The above described computing system is only one example of the type of computing system that may be used to in the method described above.

