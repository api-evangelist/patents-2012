---

title: File processing to accelerate image viewer initialization
abstract: The present disclosure includes systems and methods relating to accelerating initialization of image viewers. In general, one aspect of the subject matter described in this specification can be embodied in a method that includes receiving a request to display an image, identifying a data component involved with displaying the image, modifying an existing electronic binary vector graphics file to include the data component, and transmitting the modified file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08402168&OS=08402168&RS=08402168
owner: Adobe Systems Incorporated
number: 08402168
owner_city: San Jose
owner_country: US
publication_date: 20120210
---
This application is a divisional of and claims priority to U.S. patent application Ser. No. 11 777 822 now U.S. Pat. No. 8 151 004 entitled File Processing to Accelerate Image Viewer Initialization filed on Jul. 13 2007 the disclosure of which is hereby incorporated by reference.

The present disclosure relates to initialization of image viewers and more specifically to accelerating initialization of image viewers conforming to a binary vector graphics file format such as Adobe Flash based image viewers. Flash content is typically delivered as a series of instructions over web protocols in the precisely described proprietary SWF file format. In a typical initialization a user may indicate a wish to view an image configured for presentation using an Adobe Flash based image viewer for example by double clicking the image from within a web browser client. A communication is then transmitted to a server hosting the image and the image viewer. The server then returns to the client a loader SWF file. A Flash application executes the loader SWF file causing the transmission of a second communication to the server. The server then returns to the client a main SWF file which includes the image viewer application. Execution of the main SWF file causes multiple additional transmissions to the server to request components used in displaying the requested image for example skin data image viewer configuration data and image information. Image information is typically not cached i.e. is marked expire immediately and therefore may require an origin server access for each request. After the server has responded to all requests and all requested components have been received at the client the image is displayed.

This specification describes technologies relating to accelerating initialization of image viewers. In general one aspect of the subject matter described in this specification can be embodied in a method that includes receiving a request to display an image identifying a data component involved with displaying the image modifying an existing electronic binary vector graphics file to include the data component and transmitting the modified file. Another aspect of the subject matter described in this specification can be embodied in a method that includes identifying a first electronic binary vector graphics file associated with an image viewer parsing the electronic file into several objects manipulating the objects and linking the manipulated objects into a second electronic binary vector graphics file. Other embodiments of this aspect include corresponding systems apparatus and computer program products.

These and other embodiments can optionally include one or more of the following features. The request may be received from a source device and the modified file may be transmitted to the source device. A first server may receive the request and a second server may transmit the modified file. A first server may receive the request and retrieve an electronic file from a second server. The request may be a Hypertext Transfer Protocol HTTP request. The request may be a Hypertext Transfer Protocol over Secure Socket Layer HTTPS request. A method may identify and remove from an electronic file a component of an image viewer nonessential for displaying the image. A method may determine and include in an electronic file layout information for displaying the image. A method may mark a modified electronic file as cacheable. A cacheable modified electronic file may be cached on a Content Delivery Network. The binary vector graphics file format may be a SWF file format. Manipulating the objects may involve removing an object adding an object and or modifying an object. An object may conform to a SWF data structure. The SWF data structure may be a SWF tag. A method may replace simple numerical references in an electronic file with direct object references prior to manipulating the objects. A method may provide an electronic file to an application. The application may invoke the image viewer during execution of an electronic file.

Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages. Image viewer initialization may be accelerated by reducing the number of required data transmissions between the client and the server. Image viewer initialization may be accelerated by reducing the size of the required data transmissions between the client and the server. Image viewer initialization may be accelerated by making the required data transmissions between the client and the server cacheable. Image viewer initialization may be accelerated by reducing the total number of computations required. Image viewer initialization may be accelerated by transferring computations previously performed at the client to the server.

The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the invention will become apparent from the description the drawings and the claims.

Retailers service providers and other business entities generally seek to advertise their products and services. One method of advertising is to provide images of products and services to potential consumers. For example if a potential consumer visits the web site of a clothing retailer the consumer may be presented with a variety of images of dresses suits shoes and other items that the retailer has for sale. Some of these web sites may provide the consumer with a rich media experience allowing the consumer to select an image for display zoom in on a particular area of the image rotate the image or perform any of a number of other actions related to the image. For example the consumer may select a particular item of clothing such as a suit by double clicking a thumbnail image of the suit. As a result of selecting the thumbnail image a larger image of a model wearing the suit may be displayed. The consumer may be able to rotate the image to see the suit from a different angle zoom in to see the fabric details of the suit select a different fabric or color or perform other manipulations of the suit image.

Such rich media experiences may be provided to the user through customized image viewers configured to interact with images such as those described above. The images and image viewers are associated with a number of previously generated configuration files and data files that interact to provide the rich media experience. The customized image viewers are typically adapted to execute on a particular platform. One such platform is the Adobe Flash platform. Files containing image viewers adapted to execute on the Adobe Flash platform are referred to as SWF files and conform to the SWF binary vector graphics format. Such files normally have the extension .swf. SWF provides a compact TAG based easily extendible format that supports streaming bitmap and vector graphics and scripting. SWF player software is available for many platforms and can be adapted to client computer performance and network connection speed. SWF s timely market entry coupled with its graphics and development software support made it popular among web designers and later web developers.

Image viewers adapted to execute on a particular platform are generally launched by applications associated with the particular platform. For example an Adobe Flash based image viewer must generally be launched by an Adobe Flash player. Once the platform application launches the image viewer the image viewer may interact with the image and its associated files to provide the rich media experience.

Before an image configured for presentation using an image viewer can be displayed at a client the image viewer may require downloading from a server and may also require initialization. Image viewers are typically web clients adapted for image viewing and may support basic features such as zooming and panning and may also support more advanced features such as swatching spinning automatic stage layout and image maps.

Request may be received by optimizer module . Optimizer module may identify the components required to view the requested image for example a Flash image viewer configured to display the requested image skin data image configuration data image viewer configuration data image data and other components by inspecting the contents of request . Skins are used to customize the look and feel of the image viewer. A skin may contain image viewer components configuration information and may also contain internationalization resources such as a preferred language. A skin may define the overall appearance of the image viewer may position or remove user interface elements and may define detailed resizing behaviors. For example the image viewer configuration data may determine whether the image can be zoomed and if so the skin data may determine where and how the zoom button is displayed. Skin data may also determine the appearance and position of a model or the background scenery associated with the image. For example the same model standing in the same position on a beach may be displayed wearing a variety of clothing articles. One selectable image may show the model in a pair of white shorts and a tank top while another selectable image may show the model in a yellow sundress. In this example the shorts tank top and sundress represent image data white and yellow represent image configuration data and the model the model s position and the beach represent skin data.

Optimizer module may identify the components required to view the requested image by opening and inspecting the contents of a file associated with request such as for example a SWF file associated with request . Some of the identified components may be unique to the requested image for example the initial image data or the image configuration data. Such unique components are referred to herein as dynamic data components. Some of the identified components may be common to many images related to the requested image for example the skin data or the image viewer configuration data. Such common components are referred to herein as static data components.

Optimizer module may open inspect and modify the contents of a SWF file using any of a number of available SWF editing tools such as the Flagstone Transform SWF open source library. Using a SWF editing tool optimizer module may embed into a SWF file one or more identified components required to view the requested image. In some implementations optimizer module may embed dynamic data components into a loader SWF file. For example in system after receiving request optimizer module may identify loader SWF dynamic data component D dynamic data component D dynamic data component D and dynamic data component D as components required to view the requested image. Optimizer module may then retrieve identified loader SWF and dynamic data components D D D and D from image serving component using API to communicate with image serving component . In some implementations not illustrated in example system optimizer module may retrieve identified dynamic data components from a different server and or may identify and retrieve other components instead of or in addition to the identified dynamic data components. Optimizer module may then modify loader SWF to include dynamic data components D D D and D resulting in modified loader SWF . Optimizer module may then transmit modified loader SWF to client in communication . In some implementations a Flash application at client may execute modified loader SWF which may cause the transmission of request for a main SWF file to server .

In some implementations optimizer module may embed static data components into a main SWF file. For example in system after receiving request optimizer module may identify main SWF which includes image viewer static data component S static data component S and static data component S as components required to view the requested image. Optimizer module may then retrieve identified main SWF and static data components S S and S from image serving component using API to communicate with image serving component . In some implementations not illustrated in example system optimizer module may retrieve identified static data components from a different server and or may identify and retrieve other components instead of or in addition to the identified static data components. Optimizer module may then modify main SWF to include static data components S S and S .

In some implementations optimizer module may identify one or more required components not essential for viewing the requested image. Using an SWF editing tool optimizer module may remove one or more identified components from a SWF file. For example optimizer module may determine that for example the spin feature of the required Flash image viewer is not required to display the requested image. In system after receiving request optimizer module may determine that components MV MV and MV are nonessential features of Flash image viewer i.e. components MV MV and MV are not required to display the requested image. Optimizer module may then modify main SWF to remove identified nonessential components MV MV and MV .

In some implementations optimizer module may identify computations required to view the requested image such as for example computations for updating the user interface layout based on the stage size and or skin layout information. Optimizer module may identify these user interface layout and skin layout computations by inspecting the contents of request and or by inspecting the contents of a file associated with request . For example request may indicate that the requested image should be initially displayed in a particular size. Optimizer module may perform the computations to determine layouts . Optimizer module may then modify main SWF to include layouts .

In example system after modifying main SWF resulting in modified main SWF optimizer module may then transmit modified main SWF to client in communication . Although example system shows communication in response to communication other configurations are possible. For example optimizer module may transmit communication after transmitting communication in response to request . In another example modified loader SWF and modified main SWF may be transmitted in a single communication from optimizer module . Although example system illustrates a system adapted for the Adobe Flash platform other systems adapted for other binary vector graphics platforms are possible.

Cache may be a Content Delivery Network CDN . A CDN is a system of computers networked together across the Internet that cooperate transparently to deliver cached content to end users. CDN nodes are deployed in multiple locations often over multiple backbones. These nodes cooperate with each other to satisfy requests for content by end users potentially reducing bandwidth costs and or improving end user performance. Example CDNs include Akamai and Mirror Image.

As shown in a Flash application at client may execute the received modified loader SWF which may cause client to transmit to the server a request for a main SWF A associated with viewing images of class A including requested image A.. Optimizer module may receive request may identify main SWF A and other static components required to view images of class A as described in connection with may identify nonessential components of main SWF A as described in connection with and may perform computations associated with viewing images of class A. Optimizer module may then modify the main SWF may mark the modified main SWF as cacheable and may transmit the modified main SWF to client in return communication resulting in the eventual display of image A. at client . As communications and travel between client and optimizer module on the server cache may capture the communications recognize that they are cacheable and store them.

Client may then transmit to the server a request for an image A. for example in response to an indication that a user wishes to view an image A. configured for presentation using a Flash image viewer. Image A. like image A. may be a particular image from a class A of related images. Optimizer module located within the server may receive request may identify a loader SWF and other dynamic components required to view image A. may modify the loader SWF may mark the modified loader SWF as cacheable and may transmit the modified loader SWF to client in return communication . As communications and travel between client and optimizer module on the server cache may capture the communications recognize that they are cacheable and store them.

In some implementations a Flash application at client may execute the received modified loader SWF which may cause client to transmit to the server a request for a main SWF A associated with viewing images of class A including requested image A.. Cache may recognize communication as similar to communication sent previously by client in conjunction with request to view image A.. Cache may then transmit in return communication to client the modified main SWF generated by optimizer module in response to previously received communication resulting in the eventual display of image A. at client . As communication travels from client to optimizer module on the server and back cache may capture the communication and store it.

Client may then transmit to the server a request for image A. for example in response to an indication that a user wishes to view an image A. configured for presentation using a Flash image viewer. Cache may recognize request as similar to request to view image A. sent previously by client . Cache may then transmit in return communication to client the modified loader SWF generated by optimizer module in response to previously received request . In some implementations a Flash application at client may execute the received modified loader SWF which may cause client to transmit to the server a request for a main SWF A associated with viewing images of class A including requested image A.. Cache may recognize communication as similar to communication sent previously by client in conjunction with request to view image A.. Cache may then transmit in return communication to client the modified main SWF generated by optimizer module in response to previously received communication resulting in the eventual display of image A. at client . Although example process illustrates a process adapted for the Adobe Flash platform other processes adapted for other binary vector graphics platforms are possible.

Loader processor worker servlet may modify a loader SWF. In some implementations loader processor worker servlet may modify a loader SWF by embedding configuration loading animation image information and other data into the loader SWF. Viewer processor worker servlet may modify a main SWF. In some implementations viewer processor worker servlet may modify a main SWF by embedding skins and other custom user interface elements or by removing nonessential components such as nonessential viewer components. Viewer processor worker servlet may also perform computations required to view the requested image such as for example computations for updating the user interface layout based on the stage size and or skin layout information. Loader processor worker servlet and viewer processor worker servlet may perform actual processing of original SWF files and return modified SWF files back to the client. Worker servlet may include disk memory cache and response producer . Worker servlet may include disk memory cache and response producer . Caches and may be a single cache shared by worker servlets and and may store previously generated responses on the disk. Worker servlet and worker servlet may share the same architecture and may differ only in configuration and their respective caches and response producers are collectively referred to herein with reference numerals cache and response producer .

Response producer may generate modified SWF files and may validate existing modified SWF files stored in cache . Response producer may keep information about external dependencies requested during response validation and or generation. Response production may be divided into multiple primitive artifacts and the entire response production may be represented as a chain of elementary executions of many simple artifacts. Artifacts may be initially registered in response producer and may not be directly connected to other artifacts. Response producer may create a framework which may allow one artifact to review results of another artifact or of an external resource. Results of each execution of each artifact may be stored and made available to other artifacts. Artifact examples include the original loader SWF image viewer configuration image information and skin files.

In a simplified example response producer may be a concrete java class labeled Producer. Artifacts may be represented by a java interface labeled Artifact. Every specific artifact may be a concrete class implementing the Artifact interface such as class SourceSWFArtifact ViewerConfigArtifact SkinArtifact and or MainSWFArtifact. Inside class Producer artifacts interact with each other using artifact identifiers. Each artifact may optionally locate the resource for which it is responsible and may also produce a result. For example the image viewer configuration artifact may locate the remote viewer configuration stored on the server and may also load and parse XML text into appropriate java configuration objects.

Two layers of SWF processing libraries may be used in SWF modification procedures such as for example decompiling decomposing modifying SWF tags linking and compiling back into SWF format. In the first layer SWF modification procedures may involve parsing the original SWF into a set of Java objects. Each Java object may correspond to a specific SWF tag or other SWF data structure. Parsing may be accomplished with an open source and or commercially available SWF tool such as the Flagstone Transform SWF open source library. In the second layer SWF modification procedures may involve a linking mechanism that may replace existing name or numerical references in the SWF file with in memory object references between different SWF tags and data resulting in a SWF file with a flexible in memory structure with an application programming interface that may allow the addition removal or modification of SWF file content. The linking mechanism may then re link the SWF tags and may ensure that object identifiers and symbols references are valid throughout the modified SWF file. Although example process illustrates a process adapted for the Adobe Flash platform other processes adapted for other binary vector graphics platforms are possible.

If the optimizer module determines that the SWF file is associated with initialization of the image viewer and should be modified the optimizer module may collect dynamic data components such as image data and or image configuration data necessary for initialization of the image viewer. For example the optimizer module may retrieve a dynamic data component from an image serving component within the same server as the optimizer module. In some implementations the optimizer module may retrieve a dynamic data component from a remote server.

The optimizer module may insert the collected dynamic data components into a loader SWF associated with initializing the image viewer mark the modified loader SWF as cacheable and transmit the modified loader SWF. In some implementations the optimizer module may transmit the modified loader SWF to a client in communication with the optimizer module and a Flash application at the client may execute the modified loader SWF which may cause the client to transmit to the server a request for a main SWF.

The optimizer module may collect static data components such as skin data and or image viewer configuration data necessary for initialization of the image viewer. For example the optimizer module may retrieve a static data component from an image serving component within the same server as the optimizer module. In some implementations the optimizer module may retrieve a static data component from a remote server.

The optimizer module may insert the collected static data components into a main SWF associated with initializing the image viewer. In some implementations the main SWF includes the image viewer. The optimizer module may analyze the image viewer configuration to determine whether the image viewer contains features not required for initialization and eventual display of the requested image and may remove any identified features from the main SWF. The optimizer module may compute layout information associated with initializing the image viewer such as user interface layouts based on the stage size and or skin layouts and may insert the computed layout information into the main SWF.

The optimizer module may mark the modified main SWF as cacheable and transmit the modified main SWF. In some implementations the optimizer module may transmit the modified main SWF to a client in communication with the optimizer module. Although example process illustrates a process adapted for the Adobe Flash platform other processes adapted for other binary vector graphics platforms are possible.

Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer program products i.e. one or more modules of computer program instructions encoded on a computer readable medium for execution by or to control the operation of data processing apparatus. The computer readable medium can be a machine readable storage device a machine readable storage substrate a memory device a composition of matter effecting a machine readable propagated signal or a combination of one or more of them. The term data processing apparatus encompasses all apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them. A propagated signal is an artificially generated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus.

A computer program also known as a program software software application script or code can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio player a Global Positioning System GPS receiver to name just a few. Computer readable media suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described is this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many specifics these should not be construed as limitations on the scope of the invention or of what may be claimed but rather as descriptions of features specific to particular embodiments of the invention. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Thus particular embodiments of the invention have been described. Other embodiments are within the scope of the following claims. For example the actions recited in the claims can be performed in a different order and still achieve desirable results.

