---

title: Receiving an update module by accessing a network site
abstract: Fault of a particular module in an electronic device is detected. In response to detecting the fault, an update module is retrieved from a network site over a network to update the particular module, where the network stack is independent of a network stack associated with an operating system in the electronic device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09405613&OS=09405613&RS=09405613
owner: Hewlett-Packard Development Company, L.P.
number: 09405613
owner_city: Houston
owner_country: US
publication_date: 20120724
---
An electronic device can include various modules that include machine readable instructions such as a boot code e.g. Basic Input Output System code or Unified Extensible Firmware Interface UEFI code an operating system an application and so forth. When a module in the electronic device exhibits a fault the electronic device may cease to operate properly.

A module including machine readable instructions in an electronic device can exhibit a fault due to various causes. In some examples the fault can be due to corruption caused by malware e.g. virus or other type of malicious code . A fault can also be caused by corruption in various data structures used by the module. There can be other causes of faults in a module.

Example modules in an electronic device can include any one or a combination of the following a boot code e.g. Basic Input Output System BIOS code or Unified Extensible Firmware Interface UEFI code an operating system a device driver an application and so forth. Note that UEFI code is provided as a replacement for traditional BIOS code. In the ensuing discussion reference to BIOS code is intended to refer to either traditional BIOS code or UEFI code. A fault in a module of the electronic device can cause malfunction of the electronic device or may lead to reduced performance of the electronic device. For example if the boot code or operating system of the electronic device were to crash then the electronic device may no longer be useable since the electronic device would not be able to start properly. As another example if a device driver were to exhibit a fault then access to a corresponding hardware device of the electronic device may no longer be possible. Failure of an application may lead to an inability of the user to use the application for performing desired tasks.

In response to a fault of a module a user may attempt to update the faulty module by either replacing the module or repairing the module using an update module update code provided on a storage medium such as a hard disk drive a Universal Serial Bus USB storage medium or other removable medium. However in cases where a storage medium that has an update module is not readily available it can be difficult for the user to recover the faulty module.

In accordance with some implementations rather than having to restore a faulty module using code on a storage medium a preboot network stack of the electronic device can be used for retrieving over a network an update module for recovering the faulty module. The preboot network stack can be part of a management subsystem where the preboot network stack is independent of a network stack that is associated with an operating system of the electronic device. A network stack can include network communication layers that allow communications over a network. A network can be a wired network a wireless network or a combination of wired and wireless networks.

Using the preboot network stack retrieval of an update module can be performed in a preboot context of the electronic device. A preboot context refers to a state of the electronic device prior to completion of a boot procedure and prior to loading of an operating system. The boot procedure of an electronic device involves executing boot code e.g. BIOS code and loading the operating system of the electronic device. By being able to use the preboot network stack to retrieve an update module the ability to recover a faulty module does not have to rely on proper operation of boot code or an operating system in the electronic device.

Although reference is made to a preboot network stack it is noted that such network stack which is independent of the operating system associated network stack can also be used to perform communication including communication to retrieve an update module after booting of the electronic device has completed and the operating system has been loaded. Thus a preboot network stack refers to a network stack that is capable of operating both in the preboot context and after successful booting of the electronic device and loading of the operating system.

The electronic device further includes a management subsystem which has another network stack that is independent of the OS associated network stack . This network stack can be referred to as a preboot network stack as discussed above.

The management subsystem is used for performing various management tasks with respect to the electronic device . By using the network stack that is independent of the OS associated network stack the management subsystem can perform its management tasks using out of band network connectivity. If the network connectivity associated with the OS using the OS associated network stack is considered the in band network connectivity in other words this network connectivity is used for performing the normal operations of the electronic device that involve network communications then the out of band network connectivity refers to a separate connectivity that can be maintained without involving the OS associated network stack .

As further depicted in the electronic device includes a physical network interface which can be a network interface card or some other type of physical network interface. Both the network stack and network stack can communicate through the physical network interface over a network . Although just one physical network interface is depicted in note that in alternative examples multiple physical network interfaces can be present.

Examples of various management tasks that can be performed using the management subsystem can include any one or combination of the following transmitting information of the electronic device in response to a query from a remote management server downloading of malware signatures from the remote management server power cycling the electronic device in response to a request from the remote management server performing tasks to quarantine the electronic device upon detection of infection by viruses or other malware and so forth.

In accordance with some implementations the management subsystem and in particular the network stack in the management subsystem can also be used by the fault manager for the purpose of obtaining an update module from a remote network site which includes a server computer for updating or recovering a faulty module in the electronic device . Updating or recovering a faulty module can refer to replacing or repairing the faulty module using the update module.

The fault manager can detect a fault of a module such as the OS or some other module in the electronic device . In response to detecting the fault the fault manager can use the network stack of the management subsystem to access over the network the remote network site for retrieving the update module at the network site . The retrieved update module can be used for recovering the faulty module in the electronic device .

The ability of the management subsystem to perform network communications using its network stack which is independent of the OS associated network stack allows retrieval of the update module over the network even if the electronic device cannot boot properly. In fact the faulty module to be recovered can be the OS or boot code.

The network stack of the management subsystem also provides greater flexibility since the network stack does not have to rely upon use of a specific remote boot protocol such as the Preboot Execution Environment PXE protocol. PXE communications can be restricted to communications between PXE clients and PXE servers within a secure network such as a private network of an enterprise e.g. business concern educational organization government agency etc. .

In contrast the network stack of the management subsystem supports communications in a greater variety of environments for the purpose of retrieving the update module at the network site . The greater variety of environments can include an enterprise environment and a public environment such as the world wide web .

The electronic device further includes a processor or multiple processors and a storage medium or storage media . The fault manager and OS are executable on the processor s . Although not shown other modules in the electronic device can also be executable on the processor s .

In response to detecting the fault the process accesses at the network site using network communication through the network stack of the management subsystem which is independent of the OS associated network stack . The access of the network site using the network stack of the management subsystem can be performed in the preboot context. In response to the access the process receives at the update module from the network site which can be used to update the faulty particular module. Updating the faulty particular module includes replacing the particular module and or repairing the particular module.

The electronic device includes a management engine which can be implemented as an integrated circuit controller chip such as an application specific integrated circuit ASIC chip programmable gate array PGA chip microcontroller microprocessor and so forth. The management engine is an implementation of the management subsystem of .

An application programming interface API or some other type of interface is provided to allow the fault manager to access services of the management engine . In accordance with some implementations a service that can be accessed by the fault manager using the API is the out of band network connectivity including the network stack supported by the management engine which allows the fault manager to retrieve an update module e.g. in from the remote network site without having to rely on the OS associated network stack . The API includes various functions or routines that can be called by the fault manager for accessing the services of the management engine .

In the network stack in the management engine has a Hypertext Transfer Protocol HTTP layer which allows the management engine to perform HTTP communications over a network such as the network of . HTTP defines various requests and responses that can be communicated by the HTTP layer . The HTTP requests can be used for obtaining information such as the update module in from a network entity such as a server computer at the network site . In other examples instead of using HTTP the network stack can include a component according to another protocol for managing request response communications or other types of communications over a network.

The network stack further includes a Transmission Control Protocol Internet Protocol TCP IP stack which has a TCP layer and an IP layer. An IP layer is used to communicate IP packets that have source and destination IP addresses to allow for the packets to be routed through a network to a destination. The TCP layer provides for reliable ordered delivery of data between network entities.

It is noted that the OS associated network stack can include similar layers as the network stack in the management engine .

The electronic device also includes a non volatile memory such as flash memory or other type of memory. The non volatile memory can be used to store BIOS code and management engine code . The BIOS code can be considered firmware which includes machine readable instructions that is executable by the processor s of the electronic device such as to perform boot tasks. In some examples the fault manager can be part of the BIOS code . In other examples the fault manager is separate from the BIOS code .

The management engine code can also be considered firmware that is executable in the management engine . The management engine code can provide various services that are offered by the management engine such as services relating to management tasks that are performed by the management engine . In other examples the management engine code can be embedded in a non volatile storage medium that is part of the management engine .

Machine readable instructions of various modules described above including the fault manager OS application BIOS code and management engine code of are loaded for execution on a processing circuit such as the processor s or management engine in .

Data and instructions are stored in respective storage devices which are implemented as one or more computer readable or machine readable storage media. The storage media include different forms of memory including semiconductor memory devices such as dynamic or static random access memories DRAMs or SRAMs erasable and programmable read only memories EPROMs electrically erasable and programmable read only memories EEPROMs and flash memories magnetic disks such as fixed floppy and removable disks other magnetic media including tape optical media such as compact disks CDs or digital video disks DVDs or other types of storage devices. Note that the instructions discussed above can be provided on one computer readable or machine readable storage medium or alternatively can be provided on multiple computer readable or machine readable storage media distributed in a large system having possibly plural nodes. Such computer readable or machine readable storage medium or media is are considered to be part of an article or article of manufacture . An article or article of manufacture can refer to any manufactured single component or multiple components. The storage medium or media can be located either in the machine running the machine readable instructions or located at a remote site from which machine readable instructions can be downloaded over a network for execution.

In the foregoing description numerous details are set forth to provide an understanding of the subject disclosed herein. However implementations may be practiced without some or all of these details. Other implementations may include modifications and variations from the details discussed above. It is intended that the appended dams cover such modifications and variations.

