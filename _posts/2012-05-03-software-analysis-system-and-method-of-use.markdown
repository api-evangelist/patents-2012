---

title: Software analysis system and method of use
abstract: Systems and Methods are utilized for determining a software signature. A software program in a form of a sequence of instructions of the software program is obained. The software program is clustered into a software family. A signature for each software family is generated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09092229&OS=09092229&RS=09092229
owner: GEORGE MASON RESEARCH FOUNDATION, INC.
number: 09092229
owner_city: Fairfax
owner_country: US
publication_date: 20120503
---
This application claims the benefit of U.S. Provisional Application No. 61 483 238 filed May 6 2011 entitled Malware Static Analysis Techniques Using a Multidisciplinary Approach which is hereby incorporated by reference in its entirety.

Embodiments of the present invention may cluster software programs into software families generate a signature for each software family or identify unknown software as part of a software family or any combination thereof.

The software analysis application may be any combination of the modules and . In some embodiments the software analysis application may comprise the instruction extraction module and the signature establishment module . In other embodiments the software analysis application may comprise the instruction extraction module the signature establishment module and the classification module . In other embodiments the software analysis application may comprise the signature repository and the signature visualization module .

Communication between modules can vary based on composition of the modules in the software analysis application . For example in some embodiments a software collection module may collect software programs and filter out the programs based on certain configurations. The filtered output can be forwarded to an instruction extraction module to retrieve sequences of instructions SOIs e.g. sequences of assembly instructions grouped in a certain manner of the programs. The SOIs and the programs may be fed into a signature establishment module to group the programs into program families and to generate signatures for the families. The generated signatures can be stored into a signature repository . In other embodiments a client may submit a software program to a server via an internet in order to analyze the software program. The server may forward the program to an instruction extraction module to retrieve SOIs of the program. The extracted SOIs can be forwarded to a signature establishment to generate a signature of the program. The generated signature may be stored in signature repository . Also the generated signature can be forwarded to a classification module to classify a software program family for the forwarded program. The client also can visualize analysis of the software program and or the software program families using a visualization module . In some embodiments the instruction extraction module may receive a software program from a client a server or the collection module . The signature establishment module may receive extracted op codes from the instruction extraction module . The classification module may receive a testing software program from the client or a request from the server . The classification module may look into a signature repository to find a signature for the testing software program or may send the software program to the signature establishment module to generate the signature. The visualization module may retrieve a software program from the signature repository and or send a software program to the signature establishment module and or to the classification module to generate data necessary for visualizing information of the software.

In the software program may be parsed into basic blocks. A basic block may be a segment of code that has one entry point e.g. no code within the segment is the destination of a jump instruction one exit point and no jump instructions contained within it e.g. a sequence of instructions which are all executed if the first one in the sequence is executed .

In n grams may be retrieved from the basic blocks. For example if a basic block is composed of nine grams as AABCDASHD assuming that each letter represents an instruction with no jump instructions contained the instruction extraction module can retrieve 8 bi grams AA AB BC CD DA AS SH and HD 7 tri grams AAB ABC BCD CDA DAS ASH and SHD or quad grams AABC ABCD BCDA CDAS DASH and ASHD from the basic block.

In based on retrieved SOIs from a software program the instruction extraction module may count distinct SOIs retrieved from the program. The output of the collection may be represented as a vector in n dimensional space with n being the number of the distinct instruction sequences.

In the instruction extraction module may combine the vectors of the software programs and create a two mode weighted matrix of two set of actors SOIs and software programs. A one mode Matrix is composed of one set of actors whereas a two mode matrix is composed of two sets of actors. In a two mode matrix the matrix representation is ABwhere n is the number of first actors A m is the number of second actors B and the matrix is composed of n numbers in a row and m numbers in a column.

For example shows a two mode weighted matrix in some embodiments where the first actors are n grams and the second actors are virus programs. In the embodiment in the instruction extraction module extracted six distinct n grams from seven virus programs. The numbers in the matrix represent a total count of n grams in the virus programs. For example the number 32 in the second row matrix in may also suggest that the virus comprises 10 n grams 30 n grams 20 n grams 2 n gram 5 n grams and 9 n grams .

In the signature establishment module may convert the two mode matrix into the one mode matrix of software programs. expresses a method of converting a two mode matrix into a one mode matrix. A weighted two mode matrix of A a first set of actors and B a second set of actors may be converted to a one mode weighted matrix as shown in . In some embodiments using the conversion illustrated in a weighted two mode matrix of ABcan be converted into a weighted one mode matrix of AAby finding Awhere aa a matrix element in the ith row and the jth column i j can be calculated using the formula in . Note that aa aa abis a matrix element of the matrix ABin the ith row and the kth column and abis a matrix element of the matrix ABin the jth row and the kth column. Similarly a weighted two mode matrix of ABcan be converted into a matrix of BBwhere bbbband a value of bbequals the value calculated using the formula in . Note that abis a matrix element of the matrix ABin the kth row and the ith column and abis a matrix element of the matrix ABin the kth row and the jth column.

For example shows a result of applying the conversion to the weighted two mode matrix in in some embodiments. The output of the conversion is one mode matrix. The set of actors in is a set of virus programs Virus Virus Virus Virus Virus Virus and Virus . The matrix elements may represent the strength of the ties between actors relative to SOIs extracted from the actors. For example in the embodiments in the strength of the tie between Virus and Virus 398.2384 is greater than the strength of the tie between Virus and Virus 30.7653 . The difference may suggest that the Virus has a composition of n grams that is closer to Virus than Virus .

In the signature establishment module may cluster the software programs into software families. is a flow diagram illustrating details of clustering software programs into the software families. In the signature establishment module may cluster the software programs into software families through a use of structural equivalence. Structural equivalence may be measured as Euclidean distance or as a correlation coefficient. Other measurement methods may also be used. The signature establishment module may pair software programs and measure the structural equivalence of the pair. The signature establishment module may create a matrix of the structural equivalence by measuring the structural equivalences for all possible pairs of the software programs and combine the structural equivalences as a matrix. The matrix of structural equivalence may show the relative structural similarities of each pair of actors. For example in some embodiments using Euclidean distance as the measure of structural equivalence the Euclidean distance formula in can be used to calculate the structural equivalence where drepresents the Euclidean distance between actors i and j a is the number of actors in the relational matrix and xis the element in the relational matrix. In other embodiments using a correlation coefficient as the measure of structural equivalence the correlation coefficient formula can be used where cis the correlation coefficient of actors i and j Mis the mean of the values in row i Mis the mean of the values in column i and xis the element in the relational matrix.

In the structural equivalence may be fed into a hierarchical clustering algorithm that may create clusters of software programs based on the structural equivalence matrix. The hierarchical clustering algorithm is a method of cluster analysis which seeks to build a hierarchy of clusters. The software programs may be clustered into distinct clusters families of the software programs.

In the signature establishment module may filter out software programs in a particular software family. For the filtration the signature establishment module may calculate an average ratio of the software family as a set of SOI counts over total SOI counts within the family. For example if a software family is comprised of 50 SOIs of type A 100 SOIs of type B and 350 SOIs of type C the average ratio of the family can be represented as a vector of type A SOI type B SOI type C SOI 50 50 100 350 100 50 100 350 350 50 100 350 0.1 0.2 0.7 . Also similar to the way the ratio of the family is calculated the signature establishment module may calculate a ratio of each software program in the software family as a set of SOI counts of the program over total SOI counts within the software program. The signature establishment module may remove software programs from the software family if the structural equivalence value between the average ratio of the family and the ratio of the software program does not exceed a certain threshold value. The threshold value may be any decimal number between 0 and 1 if the measure of the structural equivalence uses the correlation coefficient. In some embodiments where correlation efficient is the measure of the structural equivalence the threshold value of 0.95 may be used as the criterion but the value can be any other number. The signature establishment module may repeat the filtration until structural equivalence values between the family and all the remaining software programs exceed the threshold value. For example let s assume that a software family is initially formed with four distinct software programs A B C and D after the hierarchy clustering algorithm is applied. The average ratio of the family and individual programs can be calculated based on the formula in . The signature establishment module may calculate the correlation efficient between the family and each program using the calculated average ratios. If the calculated structural equivalences are 0.98 A 0.97 B 0.85 C and 0.95 D and the filtering criterion is 0.95 the filtration process may apply to the program C which may result in eliminating the program C from the family. The average ratio of the family is re calculated with A B and D because any elimination may cause the change of underlying SOI counts of the family. This filtration process may be reiterated until all the programs in the family can have the correlation efficient value greater than 0.95.

In the signature establishment module may generate the signature for software families. In some embodiments the signature establishment module may establish the average ratio of the software family as one of possible signatures for the software family.

Perfect fit This criterion is used for dichotomous relations. For a perfect fit a block must either be all 0 s or all 1 s. Hence the relational tie in the image matrix is a 1 only if the block is all 1 s and 0 if it is all 0 s.

Zeroblock This criterion is used for dichotomous relations. The relational tie in the image matrix is a 0 if the entire block is filled with 0 s otherwise it is a 1.

Oneblock This is a criterion used for dichotomous relations. It is the opposite of a zeroblock in that the relational tie in the image matrix is a 1 if the entire block is filled with 1 s otherwise it is 0.

 Density criterion This is a criterion used for dichotomous relations. The previous criteria rely on the blocks being either fully 1 s or 0 s and real world data is rarely in that form. Therefore a density threshold is defined so that if the density of the block is smaller than the threshold its corresponding relational tie in the image matrix is a 0 else it is a 1. This threshold is usually the calculated density of the whole relation.

Maximum value This is a criterion used for multi valued relations where blocks that contain only small values in them are considered zeroblocks and blocks that contain any large values are considered oneblocks. This is similar to the zeroblock criterion but for multi valued relations.

Mean value This also is a criterion used for multi valued relations where the mean value of the entire relation is calculated. Then the mean of each block is calculated and if it is greater than the relation s mean then it is a oneblock otherwise it is a zeroblock. It is similar to the density criterion except that instead of using a density value it uses the mean value.

As an example of showing an image matrix as a result of applying the maximum value criterion illustrates the output matrix of software families after the criterion is applied. In the embodiment in the image matrix may suggest that software programs are clustered into four families P P P and P and the relational ties between the families are either one if the relational tie value is greater than the maximum value or zero. For example may show that the relational tie from the family P to the family P 0.6 is strong compared to the tie from P to P 0 .

In the signature establishment module may count all the SOIs of software programs within a particular software family. In the signature establishment module may create a two mode matrix of SOIs and software programs. For example shows a matrix with two sets of actors in some embodiments where the two sets of actors are virus programs and respective n gram counts of the programs in a virus program family. In the embodiment in the instruction extraction module extracted six distinct n grams from seven virus programs. The numbers in the matrix represent a total count of n grams in virus programs. For example the number 32 in the third row and second column means the total count of the n grams in the virus program . The matrix in may also suggest that the virus comprises 10 n grams 30 n grams 20 n grams 2 n gram 5 n grams and 9 n grams .

In the two mode matrix of the SOIs and the software programs may be converted into the one mode matrix of SOIs. shows a result of applying the conversion method to the two mode matrix in . The set of actors in is a set of six distinct n grams extracted from one software family n gram n gram n gram n gram n gram and n gram . The matrix elements may represent the strength of ties between the set of n grams relative to the software family from which it was extracted. For example the matrix in may suggest that the strength of the tie between n gram and n gram 39.2982 is less than the strength of tie between n gram and n gram 68 9833 .

In the signature establishment module may pair two SOIs and calculate structural similarity of the pair for all the possible pairs in the software family to create a structural similarity matrix. Structural equivalence may be measured as Euclidean distance or as a correlation coefficient. Other measurement methods may also be used. The matrix of structural equivalence may show the relative structural similarities of each pair of actors. For example in some embodiments using Euclidean distance as the measure of structural equivalence the Euclidean distance formula in can be used to calculate the structural equivalence. Note that details on were set forth earlier in the application. 

In the signature establishment module may feed the structural similarity matrix into the hierarchical clustering algorithm to produce clusters of the SOIs. illustrates an image matrix of SOI clusters. In similar to creating the image matrix of software programs in the signature establishment module may create the image matrix which may show relational ties between SOI clusters. To determine the relational ties between the n grams one may use a specific criterion for deciding if there is a tie represented as one or a zero if there is not. Any criterion can be used for the decision such as Perfect Fit Zeroblock Oneblock a Density Criterion Maximum Value Mean Value or any commonly available criteria in the art or any combination thereof.

As an example of showing an image matrix as a result of applying the maximum value criterion illustrates the output matrix of n grams after the Maximum criterion is applied. The image matrix in may suggest that the software family is composed of five distinct types of n gram clusters P P P P and P and the relational ties between the n gram clusters are either one if the relational tie value is greater than the maximum value e.g. 0.5 or zero. For example the image matrix may suggest that the relational tie from P to P is strong where the relational tie from P to P is not.

A signature of a software family can be defined in various ways. illustrates many ways of calculating a ratio for a software program families. In the embodiment in as an example software programs are clustered into three software program families Software Family Software Family and Software Family . Multiple software programs in each family are selected to generate signatures. For example suppose there are three programs and in Software Family and these include three types of bi grams MOV JUMP RETURN SUB and ADD JUMP. The first program includes 50 MOV JUMP grams 20 RETURN SUB grams and 100 ADD JUMP grams. The second program includes 30 MOV JUMP grams 28 RETURN SUB grams and 80 ADD JUMP grams. The third program includes 43 MOV JUMP grams 27 RETURN SUB grams and 93 ADD JUMP grams. The total bi gram counts of the programs in Software Family for the first second and third programs are respectively and . In some embodiments the signature of each member of Software Family can be a vector of the ratio of the set of n gram counts per total numbers of n grams in the software itself. So for example the signature of the first program would be 50 170 20 170 100 170 which is approximately 0.29412 0.11765 0.58823 . The sum of these three components is approximately 1. In the same way the signature for the second program would be 30 138 28 138 80 138 which is approximately 0.21739 0.20290 0.57971 . Again these sum to 1. Finally the signature for the third program would be 43 163 27 163 93 163 which is approximately 0.26380 0.16565 0.57055 . As in the previous cases these also sum to 1. The signature for the family would be the average of all signatures for the programs in the family. In this example the signature for the family would be approximately 0.25843 0.16207 0.57950 which again sums to 1. Both the signatures of the individual programs and the signatures of the families are unit vectors i.e. they sum to 1 . Similarities may be measured by taking the cosine of the angle between the vectors with a cosine near 1 indicating very similar and a cosine near 0 indicating no similarity. The coherency within a family can be measured by the similarity of the signatures of the individual programs to the signature of the family. The dissimilarity between families can be measured by the dissimilarity of their respective signatures. A new previously unseen program can be assigned to a family by investigating the similarity of its signature to the signature of each family and assigning it to the family for which it has the highest similarity.

It should be noted that the similarities in the examples of were measured by taking the cosine of the angle between the vectors. If the vectors point in the same direction the cosine of the angle is 1 and they are very similar. If the angle is 90 degrees then the cosine is of the angle 0 and they have no similarity. In other embodiments similarity can be measured by a number of other distance or similarity measures. For example other similarity metrics comprise 

Euclidean Squared Uses the Euclidean squared distance in cases where one would use regular Euclidean distance in Jarvis Patrick or K Means clustering.

Pearson Correlation Uses the Pearson Correlation coefficient to cluster together samples with similar behavior samples with opposite behavior are assigned to different clusters.

Pearson Squared Uses the squared Pearson Correlation coefficient to cluster together samples with similar or opposite behaviors i.e. samples that are highly correlated and those that are highly anti correlated are clustered together .

Chebychev Uses Chebychev distance to cluster together samples that do not show dramatic differences samples with a large difference may be assigned to different clusters.

Spearman Uses Spearman Correlation to cluster together samples whose profiles have similar shapes or show similar general trends but whose levels may be very different.

In additional embodiments a few number of SOIs can be selected and a ratio may be calculated by counting the SOIs in the programs instead of counting all n grams in the family. In other embodiments a count of APIs may be used to generate a signature for the family instead of n gram counts.

In this specification a and an and similar phrases are to be interpreted as at least one and one or more. References to an embodiment in this disclosure are not necessarily to the same embodiment. Comprise and similar phases are to be interpreted as include but not limited to .

Many of the elements described in the disclosed embodiments may be implemented as modules. A module is defined here as an isolatable element that performs a defined function and has a defined interface to other elements. The modules described in this disclosure may be implemented in hardware a combination of hardware and software firmware wetware e.g. hardware with a biological element or a combination thereof all of which are behaviorally equivalent. For example modules may be implemented using computer hardware in combination with software routine s written in a computer language e.g. C C Fortran Java Basic Matlab or a modeling simulation program such as Simulink Stateflow GNU Octave or LabVIEW MathScript. Additionally it may be possible to implement modules using physical hardware that incorporates discrete or programmable analog digital and or quantum hardware. Examples of programmable hardware include computers microcontrollers microprocessors application specific integrated circuits ASICs field programmable gate arrays FPGAs and complex programmable logic devices CPLDs . Computers microcontrollers and microprocessors are programmed using languages such as assembly C C or the like. FPGAs ASICs and CPLDs are often programmed using hardware description languages HDL such as VHSIC hardware description language VHDL or Verilog that configure connections between internal hardware modules with lesser functionality on a programmable device. Finally the above mentioned technologies may be used in combination to achieve the result of a functional module.

The disclosure of this patent document incorporates material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records for the limited purposes required by law but otherwise reserves all copyright rights whatsoever.

While various embodiments have been described above it should be understood that they have been presented by way of example and not limitation. It will be apparent to persons skilled in the relevant art s that various changes in form and detail can be made therein without departing from the spirit and scope. In fact after reading the above description it will be apparent to one skilled in the relevant art s how to implement alternative embodiments. Thus the present embodiments should not be limited by any of the above described exemplary embodiments. In particular it should be noted that for example purposes the above explanation has focused on the example s software signature application. However one skilled in the art will recognize that embodiments of the invention could be a malware detection application.

In addition it should be understood that any figures that highlight any functionality and or advantages are presented for example purposes only. The disclosed architecture is sufficiently flexible and configurable such that it may be utilized in ways other than that shown. For example the steps listed in any flowchart may be re ordered or only optionally used in some embodiments.

Further the purpose of the Abstract of the Disclosure is to enable the U.S. Patent and Trademark Office and the public generally and especially the scientists engineers and practitioners in the art who are not familiar with patent or legal terms or phraseology to determine quickly from a cursory inspection the nature and essence of the technical disclosure of the application. The Abstract of the Disclosure is not intended to be limiting as to the scope in any way.

Finally it is the applicant s intent that only claims that include the express language means for or step for be interpreted under 35 U.S.C. 112 paragraph 6. Claims that do not expressly include the phrase means for or step for are not to be interpreted under 35 U.S.C. 112 paragraph 6.

