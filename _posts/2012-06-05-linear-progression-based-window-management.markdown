---

title: Linear progression based window management
abstract: Some embodiments implement a linear switching application that provides functionality for switching between different windows based on an x-axis ordering of the windows instead of the z-axis or other ordering of prior art. The linear switching application identifies an array of currently open windows and sorts the array based on the leftmost x-coordinate position of the windows in the array. Optionally, the linear switching application modifies the GUI to display window identifiers based on the leftmost x-coordinate position of each window to orient the user to the x-coordinate position of each of the windows on-screen. The application determines an index in the current x-sorted array for the window that is currently frontmost and changes the frontmost window based on the current frontmost window and a directional input provided by the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09142193&OS=09142193&RS=09142193
owner: Intellitact LLC
number: 09142193
owner_city: Beverly Hills
owner_country: US
publication_date: 20120605
---
This application claims the benefit of U.S. provisional application 61 493 522 entitled Linear Switcher filed Jun. 6 2011 is a continuation in part of U.S. non provisional patent application Ser. No. 13 423 204 entitled Input Device Enhanced Interface filed on Mar. 17 2012 which claims the benefit of U.S. provisional application 61 465 308 entitled Keyboard Enhanced Interface filed Mar. 17 2011 and is a continuation in part of U.S. non provisional patent application Ser. No. 13 423 212 entitled Touch Enhanced Interface filed Mar. 17 2012 which claims the benefit of U.S. provisional application 61 465 309 entitled Touch Enhanced Interface filed Mar. 17 2011. The contents of provisional applications 61 493 522 61 465 308 and 61 465 309 and non provisional applications Ser. Nos. 13 423 204 and 13 423 212 are hereby incorporated by reference.

The present invention generally relates to user interface enhancements for computer systems and electronic devices.

A modern day multi tasking operating system OS allows multiple applications to be running at any given time with each application having one or more open windows. By providing this multi tasking ability to have multiple open windows users are able to work with more data and access more functionality simultaneously. However the more windows that are open the more challenging it can be for users to access a window with the desired data or functionality. Specifically users switch between the different open windows in order to access the data or functionality that is provided within each window. For example a user switches to 1 a first window of a document processing application in order to prepare a first document 2 a second window of the same document processing application in order to prepare a second document 3 a window of an email application in order to check emails 4 a window of a media player application in order to play music tracks 5 a file explorer window in order to access different files and 6 a window of a web browser application in order to do research on the Internet.

Switching to a window involves making that window frontmost and providing key focus to that window. The graphical user interface GUI of the OS provides various means with which to switch to a particular window. A user can click on a desired window with a graphical pointing tool or touch gesture in order to make that window frontmost i.e. gain access to the data or functionality associated with that window . However when several windows are simultaneously displayed on screen the windows may overlap in a virtual three dimensional space based on the ordering with which each window is launched or accessed also referred to as the z order of the windows.

In such cases where windows overlap the user must often rearrange the position of the windows by dragging them to new positions or minimize or hide one or more obstructing windows in order to disclose the desired window. This laborious method of switching between windows is further exacerbated by the fact that many users forgo the benefits of viewing multiple windows preferring instead to maximize or fill the entire screen with the window that they are currently working with. In so doing to access a different window the maximized window must first be minimized or reduced in size so that other windows appear on screen thereby allowing the user to utilize an on screen pointer to click move or resize the desired window s . It is clear that clicking on windows is an inefficient means with which to switch between different windows when multiple windows are simultaneously open. Finding the desired window becomes more challenging time consuming and frustrating as more windows are open as is often the case with larger screen sizes and or multiple displays.

To improve upon window switching the Windows operating system includes a taskbar that includes symbols for windows that the user may click to make a particular window frontmost. Similarly the Mac OS X includes an application dock that includes symbols for applications that the user may click to make a particular application s window or windows frontmost. The taskbar and dock are spatially dependent graphical tools that require a layer of abstraction as the user must first identify a symbol corresponding to a desired window or application before clicking on that symbol. While often more effective than rearranging and clicking on windows this manner of switching between windows is still inefficient. For example when several applications are open identifying the desired application from the taskbar or dock becomes overly time consuming as the user visually sorts through the multiple symbols in the taskbar or dock to identify a desired window. In the Windows taskbar the problem is exacerbated when the taskbar becomes overcrowded and the symbols in the taskbar shrink in size to accommodate symbols for all open windows. As the symbols shrink they become less readable causing the user to hover the on screen pointer one by one over each of the symbols and wait until a pop up text field identifies the name of the desired window. Furthermore the symbols in the taskbar move around as windows are opened and closed. The user must therefore repeat the spatial identification step of identifying a position of a symbol that corresponds to the window on the taskbar each time. To select a particular document window in the OS X dock the user must first click and hold the application symbol corresponding to the document at which point a menu appears which lists all open documents for that application among other things. The user must then drag the pointer to the name of the desired document and release the mouse. Furthermore as more applications are in use or retained in the dock the symbols become smaller and smaller so that further mouse over techniques are required to enable the user to identify the correct symbol.

Because of these and other issues it is sometimes preferable to switch between windows using the discrete inputs of a key based input device such as a keyboard. In operating systems such as Windows OS and Mac OS various keystroke shortcuts are available to invoke a window switching function using discrete keyboard inputs. The window switching function allows a user to switch between different windows by pressing and holding at least a first keyboard key such as a Command key and then tapping a second keyboard key to select a different window to make frontmost. The first key can then be released and the last selected window remains frontmost. Specifically in Mac OS holding the Command key while tapping the Tab key switches between different application windows in a first direction and holding the Command and Shift keys while tapping the Tab key switches between different application windows in a second direction that is opposite to the first direction. The window switching function operates loosely based on which application was most recently frontmost though the order is hard to discern and therefore essentially becomes random to the user. Similar functionality is provided in the Windows OS whereby holding the Alt key and tapping the Tab key invokes a windows switching function that switches between different windows. Complimentary functionality is also available in the Mac OS whereby holding the Command key while tapping the Tilde key switches between windows that belong to the currently active application in the Mac OS. Each of these window switching functions is subject to the same ordering issues discussed below.

For purposes of simplicity and clarity the following discussion generalizes the phrase window switching function to include functionality for switching between application windows and functionality for switching between windows of an active application without limitation. This phrase is meant to also encompass switching between windows applications and or other objects or user interface elements of a GUI.

The above referenced window switching functions are inefficiently implemented for various reasons. Firstly the ordering of windows used by the window switching function becomes essentially randomized to the user when three or more windows are accessed. Specifically the order of the applications or windows changes in a seemingly random manner. As a result there is no repeatable or static correspondence between the different windows in the GUI and the order with which the windows can be selected using the window switching function. Secondly the existing keyboard shortcuts for performing the window switching function requires users to move at least one hand away from the associated home position keys e.g. A S D F J K L and when using the window switching function which leads to time consuming movements that can result in incorrect keys being pressed. Thirdly reversing directions using the existing window switching functions is awkward for most users and many users lack sufficient dexterity or do not know the keyboard shortcut for reversing directions because it requires that two non adjacent keys be held down while a third key is pressed.

Accordingly there is a need for improved functionality with which to switch between different application and document windows. Specifically there is a need to switch between different windows without having to recall the order in which the windows were last accessed and without regard to which application owns which window.

It is an objective of the present invention to define an apparatus method system and computer software product that increases the efficiency and expressivity in the use of key based input devices. More specifically it is an objective to increase the efficiency with which a key based input device can be used to switch between different windows in a graphical user interface. It is an objective to enable switching between different windows based on the x axis positioning of the windows in the GUI such that the user need not recall the order in which the windows were last accessed but rather relies on the ordering that is apparent on screen. It is a further objective of the present invention to enable switching between user interface elements within a single window such as text fields or other elements which can accept key focus. It is a further objective of the present invention to enable switching within user selected modes that determine switching between all windows all visible windows or windows of the frontmost application. It is a further objective to assist the user in visualizing overlapping windows through functionality such as transparency and stagger functionality.

To achieve these and other objectives some embodiments implement a linear switching application that provides functionality for switching between different windows based on an x axis ordering of the windows instead of the z axis or other ordering of prior art. The linear switching application identifies an array of currently open windows. The linear switching application filters the array of windows based on an operating mode of the application. Next the array is sorted based on the leftmost x coordinate position of the windows in the array. This sorting arranges the windows in the array to conform with their corresponding visual layout in the GUI. Optionally the linear switching application modifies the GUI to display window identifiers from the leftmost x coordinate position of each window. These identifiers are visual cues which help orient the user to the leftmost x coordinate position of each of the windows on screen especially when certain windows overlap or obscure other windows. The application determines an index in the current x sorted array for the window that is currently frontmost and then changes the array index based on a directional input provided by the user. Changing the index in turn changes the frontmost window to the window that is represented by the newly selected index. Each directional input provided by the user selects either the window that is to the right or to the left of the current frontmost window.

In this manner users are provided a visually and physically consistent and intuitive facility for window and application switching. Moreover users can easily customize the left right ordering by merely positioning the windows in a manner that is most convenient to their particular workflow thereby simultaneously and automatically updating the ordering used by the linear switcher so that it is readily apparent and unambiguously identifiable on screen. Perhaps most importantly consistent ordering of windows in a particular workflow allows the user to develop and utilize muscle memory when switching between windows in a particular workflow which leads to automatic effortless operation.

Some embodiments of the present invention provide new methods for switching between different windows in an efficient and repeatable manner. One such method is implemented by the linear switcher application of some embodiments. The linear switcher provides functionality for switching between different windows based on an x axis ordering of the windows instead of the z axis or other ordering of prior art. Such switching based on the x axis ordering provides a contextually obvious and easily invocable means by which users can switch between different windows. Moreover users can customize the ordering by positioning the windows in a manner that is most convenient to their particular workflow. In this manner the ordering used by the linear switcher removes one or more levels of abstraction is readily apparent and unambiguously identifiable on screen. This consistent and streamlined mode of operation allows muscle memory to be utilized because operations of the linear switcher may be invoked using key combinations that are intuitive and non awkward to access.

To aid in the discussion below the term window is used to generally refer to any switchable framework within a graphical user interface. Accordingly the term window as used herein can refer to a framework that graphically represents different instances of different applications irrespective of the documents or other interactive elements within each application framework. The window as used herein can also refer to a framework that graphically represents different instances of the same application wherein the instances may include different documents that have been opened for the same application or different workspaces views etc. that have been opened by the same application. Accordingly the window switching function of the linear switcher is applicable to any operating system irrespective of the operating system definition of a window. Moreover as illustrated with reference to linear switching is also invocable between elements within a single window such as between UI elements that can accept key focus. This therefore extends applicability to devices and operating systems which do not support multiple windows such as some tablets and other portable devices.

In some embodiments the linear switcher is an application or independent process running under the OS in the foreground or background. Such an application or process can be adapted for operation with any OS including Microsoft Windows Apple OS or various Linux distributions as well as portable and tablet devices. In some embodiments the linear switcher is integrated into the OS and may include features such as an Application Programming Interface API scriptability or other OS integration and accessibility.

The process begins by obtaining at an array of currently open windows. An open window includes any window that has been instantiated though the open window need not be displayed on screen. An open window can be obscured behind other windows that are displayed on screen. An open window also can be minimized or positioned off screen. In some embodiments the array of currently open windows is obtained by issuing one or more API or system calls to the OS or window server of the OS. In many instances the obtained array is ordered according to the z order of the windows i.e. an ordering resembling the order with which the windows were accessed . In other instances the obtained array is ordered according to the order in which each window was instantiated without regard as to when the windows were last accessed. The array includes pointers or identifiers that are used to programmatically interact with the open windows. For example the pointers or identifiers can be parameters that are issued as part of an API or system calls which are used to identify which window an API or system call is passing data to modifying or obtaining data from. In some embodiments the obtained array further includes information about the open windows such as a z order position and last on screen coordinates. In some other embodiments such additional information is not included as part of the obtained array and is instead obtained via subsequent API or system calls using the pointers or identifiers.

Once the window array is obtained the process determines at its operating mode and reorders the array accordingly. In some embodiments the process for the linear switcher includes three modes visible app or all . Each mode provides x order access to a different set of open windows as explained below. The mode for the linear switcher may be set by the user OS or fixed to a default setting.

When in the app mode the process discards at the windows in the array that are not associated with the frontmost application. In so doing the app mode of the linear switcher allows users to switch between windows of the frontmost application. Other windows of other applications are not accessible through the linear switcher when in the app mode. To reorder the array in the app mode the linear switcher identifies the frontmost application by issuing an API or system call to the OS or window server of the OS. The linear switcher then identifies which windows in the obtained array are associated with the identified frontmost application by analyzing the pointers or identifiers of the windows and those of the frontmost application. The process discards windows that are not associated with the frontmost application by removing the pointers or identifiers for those windows from the array. Various applications can have multiple open windows. For example a document processing application may have multiple open windows with each window displaying contents of a different document or file.

When in the visible mode the process reorders the array by discarding at the windows in the obtained array that are not visible on screen. Windows that are not visible on screen include those windows that are fully obscured by one or more other windows. This is accomplished by obtaining the coordinate positions and z ordering of each of the open windows. Then the process comparatively determines if one or more of the windows are completely obscured by one or more other windows. In some embodiments windows that are not visible on screen may also include windows that have been minimized hidden or placed away from the viewable on screen area. In the visible mode the linear switcher allows users to switch between those windows that are fully or partially viewable on screen. illustrates a partially obscured window that would be accessible using the linear switcher when in the visible mode. illustrates moving window to the right over window such that window is wholly obscured by window . As a result in the linear switcher cannot be used to switch to window when in the visible mode.

When in the all mode the process does not discard any windows from the array with the exception of hidden or minimized windows in some embodiments. Accordingly when in the all mode the linear switcher allows users to switch to any window irrespective of whether it is obscured or owned by the frontmost application. So long as the window is open it will be accessible by the linear switcher when in the all mode. In some other embodiments when in the all mode the linear switcher allows users to access all open windows including hidden and or minimized windows.

Next the process sorts at the array based on the leftmost x coordinate position of the remaining windows in the array i.e. windows that have not been discarded at steps above . As noted above the coordinate positions of the windows may be included within the obtained array from the OS or may be obtained using API or system calls to the OS or window server of the OS using the corresponding pointers or identifiers of the windows. When one window has an identical x coordinate with another window or when one window has an x coordinate that is within a specified distance of the x coordinate for another window the process selects the window with the largest vertically uppermost y coordinate as the leftmost window of the two and the window with the smallest vertically lowest y coordinate as the rightmost window of the two. This manner of distinguishing between near vertically left aligned windows is similarly applicable to when three or more windows have x coordinates within the same specified distance.

Once the array is sorted some embodiments optionally display window identifiers on screen based on the leftmost x coordinate position of each window. As will be described below and illustrated with reference to these window identifiers aid in better identifying the windows that may be partially or wholly obscured by other windows when using the linear switcher.

The process determines at an index in the current x sorted array for the window that is currently frontmost. As an example a first window in the sorted array is associated with the index a second window in the sorted array is associated with the index and a third window in the sorted array is associated with the index . When the third window in this example is frontmost the determined index is 2.

In some embodiments steps are performed when window positions change based on a resizing of a window movement of window opening of a new window or closing or hiding of an open window as some examples such that the process continually tracks the positions of the windows irrespective of whether a user is switching between windows.

Provided that a user input is issued to switch between windows using the linear switcher the process determines at the corresponding direction indication of the user input. When the direction indication is to the right the process raises at the index by 1 switches the window to the next window to the right in the sorted array if necessary and the process ends. When the direction indication is to the left the process lowers at the index by 1 switches the window to the next window to the left in the sorted array if necessary and the process ends. Some embodiments perform limit checking such that switching windows is not necessary when the current frontmost i.e. selected or active window is at one limit and the provided directional switch input attempts to exceed that limit. For example switching is not necessary when the index of the current frontmost window is at an end of the array and the index cannot be raised or lowered further. In some other embodiments the array is circular and the index will cycle from one end of the array to the other end allowing the user to switch from a window at one end of the screen to a window at the opposite end of the screen. Finally if the newly raised window does not belong to the current frontmost application the linear switcher will cause the owner of the newly raised window to become frontmost.

The window identifiers assist in identifying those windows that are partially or wholly obscured in the GUI by other windows. As shown the window identifiers extend from the leftmost x coordinate of each window and each identifier includes a graphical symbol or icon that identifies the window from which the identifier extends. In some embodiments a window identifier is complimented with an optional textual identifier. The textual identifier provides a short textual description of the window for additional identification. For example textual identifier is shown for the window . The textual identifier extends upward from the leftmost x coordinate of the window . In some embodiments textual identifiers are shown instead of or in addition to some or all of the window identifiers. In some embodiments the short textual description is included in or instead of the graphical symbols or icons of the window identifiers . Symbols icons or text for the window identifiers and or textual identifiers are obtained in some embodiments using the window pointers or identifiers in conjunction with various API or system calls that retrieve the symbols icons or text such as the title of the window. In some embodiments the title of the window or other text is spoken using the OS text to speech capabilities in response to a specific key or keys being pressed and or tapped by the user.

In some embodiments when a window is maximized the linear switcher temporarily reduces the size of the maximized window so that the x order position of that window and other windows can be seen on screen in addition to the identifiers for the windows. In some embodiments when a window is minimized the linear switcher temporarily restores the minimized window on screen in order to display the corresponding identifiers and the x order position of that window. Alternatively a window identifier may be presented from the bottom of the screen for a minimized window based on the leftmost x coordinate for that window when it was last displayed on screen.

Additionally various touches and gestures may be used to invoke and perform various functions within the linear switcher. Such touches and gestures such as holds slides taps and flicks may be issued on any touch sensitive surface such as a touch sensitive screen trackpad touch sensitive buttons or touch sensitive frame of a device as well as any other presence and motion sensing apparatus. For example in some touch enabled embodiments of the linear switcher a four finger horizontal back and forth slide invokes the linear switcher causing the application icons to be displayed as the menubar area fades and window identifier icons and other visual cues appear. This provides a visual indication to the user that the linear switcher mode is active. A subsequent single finger left flick causes the liner switcher to select the window to the left of the current frontmost window and a single finger right flick selects the window to the right of the current frontmost window. A single finger upward flick selects the previously described all windows mode and a single finger downward flick selects the previously described app windows mode. A single finger back and forth slide or oscillation causes the name of the frontmost window to be spoken utilizing the text to speech capabilities of the OS. Two finger slides move the frontmost window in proportion to the movement of the slide and two finger flicks also move the frontmost window but snap to left center right and top middle bottom positions on each screen as further described below. Three finger slides resize the frontmost window such that the lower right coordinate of the window is modified in proportion to the movement of the slide. A four finger upward flick exits the linear switcher mode with a corresponding animation of the application icons sliding off the top of the screen and the menubar fading back in. In some embodiments graphics and or animations which depict various touch options are presented to the user after the linear switcher has been invoked by touch and no subsequent valid touches are perceived beyond a period of time. Additionally or alternatively audible cues and instructions are provided as well for example after touch activating the linear switcher a two finger touch speaks move to indicate that slides will move the frontmost window. Similarly a three finger touch speaks resize and a one finger touch speaks select a four finger touch speaks flick up to exit and so on. It should be clear to one skilled in the art that different touches and gestures may be mapped to alternate linear switching functionality and such embodiments should be regarded within the scope of the present invention. Additional description for invoking output actions such as those of the linear switcher using touches and gestures holds taps slides and flicks is described in U.S. non provisional patent application Ser. No. 13 423 212 entitled Touch Enhanced Interface and in U.S. provisional patent application 61 465 309 entitled Touch Enhanced Interface .

In some embodiments audible notifications are presented when a new window is selected or made frontmost using the linear switcher. The audible notifications may be presented in addition to or instead of the various identifiers described above. The audible notification may read a title or description of the currently selected window. Additionally or alternatively the audible notifications may use various sounds with a musical pitch to indicate where in the sorted array of windows the current selected window is located. For example in some embodiments a low pitched sound is used to indicate a leftmost window and for every selection to the right of the leftmost window the pitch for the sound is incrementally raised by for example one scale tone. Audible notifications may also be used to notify the user when a leftmost window or a rightmost window has been reached. For example in the leftmost window is initially selected at and the linear switcher is used to switch three windows to the right and select window . However once window is selected at and the user attempts to switch to the right again the linear switcher provides an audible notification to the user to indicate that a rightmost limit has been reached and no further selections may be made in that direction.

In some embodiments a visual slider is presented with graphical tick marks to indicate a selected window and a number of windows to the right and to the left of the selected window. Each tick mark represents a window that may be selected when using the linear switcher. Accordingly the visual slider includes more tick marks when more windows are open and fewer tick marks when fewer windows are open.

In some embodiments the linear switcher is enhanced to better identify the position of the windows on screen when the linear switcher is in use. Specifically rather than display window identifiers from the current leftmost x coordinate of each window some embodiments snap the leftmost window to the leftmost side of the screen and snap the rightmost window to the rightmost side of the screen with intermediary windows arranged in a staggered configuration across the center of the screen. illustrates the snapping functionality of the linear switcher based on the prior screen layout of . When several windows are open some such embodiments snap two or more windows to the leftmost and rightmost sides of the screen see windows and in a staggered configuration such that there is an equal distribution of windows at the leftmost center and rightmost positions of the screen.

Other embodiments of the linear switcher in accordance with those described above are presented with reference to below. illustrates a first set of window identifiers in accordance with some embodiments. As before the window identifiers extend from the leftmost x coordinate position of each window. Each window identifier is graphically represented by a symbol with the symbol of the frontmost application being distinguishable from the other symbols. In some embodiments the symbols include application icons. In some embodiments some of the symbols are badges that convey status information about the corresponding window. For example a window identifier that extends from an email application window can be used to display a badge for identifying the number of unread emails.

In some embodiments the transparency can be turned on and off by holding down or tapping a specific key while the linear switcher is active. presents processes utilized to enable and disable the window transparency effect in some embodiments. The linear switcher is normally already invoked when the transparency ON command is received at . Therefore various visual elements such as window highlighting are displayed on screen. Some such elements fade out so the windows are not obstructed. At an opaque grey masking layer is placed beneath each window which matches each window size exactly. The process records at the z order of the windows for later recall. The process creates at a graphic image of each window so that the transparency of the image can be controlled. The newly created images are then displayed at in x order atop the grey opaque layer. By stacking in x order windows are more consistently visible. Then at transparency is applied to the windows and shadow and other effects are applied. Finally the process starts at a cyclical animation process which slightly varies the transparency of the windows to further aid the user in discerning the contents of each window. When the transparency OFF command is received at the grey masking layers are removed at the window graphic images are removed at and the original windows are made at visible again in the original z order. The process ends at with the initial graphic elements of the linear switcher restored.

The linear switcher may perform other visual effects such as fading the desktop or background to black. This allows the user to more easily identify the open windows without the background distraction of desktop images or the like. In some embodiments the linear switcher utilizes shadow effects on the windows to better distinguish the windows from one another.

Some embodiments further provide methods with which to interact with open windows in order to set or adjust the sizing and positioning of the windows on screen. Some such methods include providing keyboard shortcuts which allow users to move and resize windows using various keys of the key based input device. This allows users the ability to customize the arrangement of windows on screen using discrete commands. By providing the ability to rearrange the windows on screen the order with which the linear switcher selects windows can be visually and intuitively set according to the task at hand and allows for quicker switching between specific windows using muscle memory. For example depicts a typical workflow situation wherein the user is composing a text document while referring to document . The user may use the linear switcher to switch right and left to for instance copy text from document to document . When the user later wishes to refer primarily to document the user moves document slightly to the left of window as shown in . In so doing the same right left switching can now be used to alternate between accessing documents and . Thus the least number of key actions may be utilized to access the most frequently accessed documents and muscle memory is automatically formed eventually making such selection effortless. Furthermore there is never a doubt as to the access ordering of the windows because the order is always reflected horizontally across the screen s and therefore the number and direction of keystrokes required to access a specific window is always readily apparent and intuitive. When compared against existing art the present invention effectively removes levels of abstraction thus reducing the cognitive load and associated memory requirements of the user. Also when compared against existing art in terms of a previous application shortcut the present invention differs in that switching occurs by window rather than by application. Furthermore some embodiments maintain a history of frontmost windows such that subsequent invocations of a previous output action brings forward such windows rather than simply alternating between the last two frontmost applications or documents.

In some embodiments once the linear switcher is invoked as described above the I K J and L keys can be used to move the currently selected window up down left and right. In some embodiments different and or additional keys can be used such that move operations apply to multiple on screen windows. illustrate using the move functionality in conjunction with the linear switcher in accordance with some embodiments. In window is frontmost and selected in the linear switcher. In window is moved to a rightmost position on screen using one or more specified keyboard keys. As a result of the move the linear switcher updates its x ordering of the windows. Such updating of the x ordering may occur when the linear switcher detects that the moving of the window has ceased. Next the user utilizes the appropriate key or keys to switch one window to the left. From the updated x ordering as a result of the previous window movement the linear switcher identifies that window is now the next window to the left of selected window and as shown in the linear switcher raises window that is to the left of the previously selected window . Once window is frontmost the keyboard keys can be used to adjust the on screen position of that window to the left as shown in . Accordingly the user can customize the ordering of the linear switcher such that the most commonly used windows are adjacent to one another in an ordering that is easy for the user to access and visualize on screen.

In some embodiments the move functionality is enhanced to allow for multiple windows to be simultaneously moved. In some such embodiments a different or additional keys are pressed or tapped to move for instance all open or on screen windows of the frontmost application. In this and other such cases additional on screen graphics assist the user in discovering and utilizing enhanced features of the linear switcher.

In some embodiments the window move functionality is enhanced with a snap feature whereby windows are automatically positioned exactly at the left edge of the screen the center of the screen or the right edge of the screen for horizontal movement or the top of the screen middle of the screen and bottom of the screen for vertical window movement. In one such embodiment pressing an additional key such as the spacebar causes the next directional movement to snap to the next closest snap position. Furthermore when multiple screens are utilized the three snap positions per axis are available for each such monitor. This allows the user to quickly move a window to a corner or to a different monitor.

Some embodiments further provide a stacking capability whereby a particular keyboard key press automatically stacks windows belonging to the same application behind the window that is selected or frontmost. To do so the coordinate positions of each non frontmost window are adjusted to be offset from the coordinate positions of the frontmost window. A staggering effect is accomplished by adjusting the offset amount for each window that is stacked behind the frontmost window. Options are provided to offset on the x axis the y axis or both. Further options allow the stacking function to make all windows the same size or retain the current sizes and only move the windows to the stacked positions. Some embodiments provide stacking starting from the position of the leftmost window of the current application which may or may not be the frontmost window.

Similarly to the window move functionality some embodiments also provide a means to resize windows. In one such embodiment the height and width of the frontmost window may be changed by utilizing various keyboard keys. Specifically when the linear switcher is activated as described above some embodiments provide designated keys to increase and decrease the width of the frontmost window and two other designated keys to increase or decrease the height of the frontmost window. Tapping a designated resize key makes a single incremental change whereas holding down the designated resize key smoothly changes the dimension until the key is released. Also when the linear switcher is active some embodiments provide additional on screen graphics which add further functionality that can be accessed by keyboard pointing device or touch. Such functionality includes window positioning snapping resizing transparency and other settings as well as informational data such as key focus modification history file path and status etc.

In some embodiments a stagger function provides an intuitive manner by which the user can identify each of the on screen windows. Particularly when the user employs many windows and windows overlap or obscure underlying windows the stagger function becomes a valuable tool which exposes all windows by altering the y axis coordinate while retaining the x axis coordinate that is sliding the windows up and down while horizontally locked. This allows the title bar and possibly further content of the screen to become visible to the user. In some cases windows will extend beyond the lower bounds of the screen and thus be hidden from view. In some embodiments the z ordering of the windows determines the vertical ordering for the windows when the stagger function is invoked and in other embodiments the x ordering determines the vertical ordering for the windows when the stagger function is invoked.

In some embodiments the stagger function further aids the user in identifying each of the on screen windows by displaying icons at the top of the screen to identify each of the windows and by superimposing vertical lines down from the icons to the corresponding windows below. The vertical line representing the frontmost window is highlighted and the corresponding icon identifying the frontmost window above is enlarged. As the user switches left and right the icon and vertical line highlighting tracks the selected window. When the stagger function is exited the selected window is raised frontmost and application is switched if necessary. The windows animate back their previous positions and the vertical lines slide up and out of view.

The process determines at an ordering of the windows along the z coordinate plane based on an increasing z coordinate position of each window. Next the process adjusts at the y coordinate position of each window based on the determined ordering of the windows along the z coordinate plane. This adjustment to the y coordinate positions of the windows produces the staggered effect that better displays the windows on screen. Specifically the frontmost window having the highest z coordinate depth is moved towards the bottom of the screen to have the lowest y coordinate position the window with the next highest z coordinate depth i.e. the last accessed window is moved to a y coordinate position that is above the frontmost window but that is below all other windows and so on. It should be noted that the staggered effect does not adjust the x coordinate or the z coordinate positions of the windows. This is so the user can use the stagger function in conjunction with the switching functionality wherein the stagger function allows the user to better identify the x axis ordering of the windows when some windows overlap with other windows thereby obscuring some of the windows from view. The process returns at the windows to their original y coordinate positions when the stagger function is exited as a result of the user releasing the keyboard key that is used to invoke the stagger function.

It should be noted that touch gestures as well as pointer gestures such as oscillation as well as other pointer input such as clicking on linear switcher overlay elements and other pointer events such as right click or scroll wheel events can be utilized in combination or instead of keyboard based input to control the linear switcher of some embodiments. For example the user may invoke the linear switcher by pressing and holding a keyboard key and then use their other hand on a pointing device such as a mouse to operate controls that appear in response to the linear switcher being invoked. For the sake of brevity and clarity keyboard input is used in this and other specific disclosures herein though other control mechanisms and combinations thereof are incorporated in some embodiments.

At each of the windows is shown with a number corresponding to the window s z coordinate depth. Window is frontmost and is therefore shown with the number 1 to indicate that it has the highest z coordinate position. Window was the window last accessed after the frontmost window and is therefore only obscured by the frontmost window . Window is shown with the number 2 to indicate that it has the next highest z coordinate position. Window is next and is shown with the number 3 and window is the backmost window and is shown with the number 4.

When the stagger function is invoked at the y coordinate position of the windows is adjusted in accordance with the z coordinate ordering of the windows . Since window has the highest z coordinate position its y coordinate position is adjusted so that window is presented lower than the other windows along the y coordinate plane. Window has the next highest z coordinate position. Accordingly the y coordinate position for window is adjusted so that the window is positioned just above window but below the other windows and along the y coordinate plane. The y coordinate positions for windows and are similarly adjusted relative to their z coordinate positions.

In addition to the above described embodiments which are used to switch between various windows of various applications some embodiments of the present invention are used in a similar manner to switch focus between user interface elements such as views fields groups areas etc. within the frontmost window itself. This allows the user to utilize the same or similar above described actions such as key events or touch events to shift focus to the left or right and therefore minimize the need to utilize a pointing device such as a mouse or a touchscreen to change the active focus within a frontmost window. To accomplish this the linear switching software utilizes system API calls appropriate to the platform in order to ascertain a list of various UI elements within a particular window. From that list the linear switcher gains access to further attributes of the listed UI elements such as the type of UI element and the coordinates within the window. Such data is then analyzed and potentially incorporated into the sorting processes previously described in order to provide additional points at which the switching process may stop along the x axis. Such additional functionality may also be invocable separately from the above described window switching functionality. In some embodiments such additional functionality is activated on a per application basis and each such application may have a variable number of UI elements which may accept focus. Furthermore such UI elements may be activated or deactivated based on certain defined trigger actions or user preference and persisted across relaunch.

It should be noted that other embodiments utilizing differing graphical techniques triggering mechanisms or implementation variances could be easily conceived but would nonetheless essentially analogize the above described embodiments and therefore fall within the purview of the present invention. Furthermore as one skilled in the art would understand in light of the present disclosure the z ordering of the windows upon exiting the linear switcher may be set to any particular ordering. For example the starting or first frontmost window may be raised to just beneath the final or last frontmost window upon exiting the process which may avoid some obstruction by intermediate windows. provides an illustration of the linear switcher raising the starting or first frontmost window to just beneath the final or last frontmost window upon exit of the process in accordance with some embodiments.

At stage the linear switcher is invoked by pressing and holding a first keyboard key and is used to cycle one window to the left by continuing the hold of the first keyboard key while tapping a second keyboard key to select window as the frontmost window. In so doing window is temporarily made frontmost and window is dropped beneath window . The user continues to operate the linear switcher at stage by holding the first keyboard key and cycles to the left once more by again tapping the second keyboard key . Consequently at stage window is now temporarily frontmost and window is dropped beneath window and the first window window is dropped beneath window .

The user continues to operate the linear switcher at stage by cycling to the left once more. The user then exits the linear switcher application by releasing the first keyboard key that was initially used to invoke the linear switching application. Consequently at stage the window becomes frontmost and remains frontmost after exiting the linear switcher and the linear switcher also raises the level of the starting frontmost window window to be just beneath the final frontmost window window before exiting so that its content may be less obscured.

It should be noted that in some embodiments as the user operates the linear switcher by switching windows left and right the selected and highlighted window appears to be temporarily frontmost but is not actually frontmost until and unless the user then releases the first keyboard key to exit the linear switcher mode. This optimization is done to make operations more fluid by reducing unnecessary intermediate window and application switching operations that would otherwise be performed by the OS at each stage.

As was noted above the linear switcher is implemented as one or more software applications or processes that execute on one or more physical computing devices. The linear switcher may be specified as a set of instructions recorded to a non transitory computer readable storage medium also referred to as computer readable medium thereby providing an article of manufacture. When these instructions are executed by one or more computational element s such as processors or other computational elements like ASICs and FPGAs they cause the computational element s to perform the actions indicated in the instructions. Computer and computer system are meant in their broadest sense and can include any electronic device with a processor including cellular telephones smartphones tablet devices laptops netbooks home entertainment and gaming systems household appliances automotive devices etc. Examples of computer readable media include but are not limited to CD ROMs flash drives RAM chips hard drives EPROMs etc.

The linear switcher transforms general purpose computing resources of the computing devices on which it executes to implement and perform the specified x axis based window switching function. Stated differently the computing devices on which the linear switcher executes comprise general purpose processors random access memory non volatile storage and network resources that are transformed by the linear switcher into one or more specific purpose machines that perform the x axis based window switching function. Some of the tangible results produced by the linear switcher include the switching between different windows in a GUI and the adaptation of a key based input device and other input devices to perform the linear switching functionality.

Computer system includes a bus a processor a system memory a read only memory a permanent storage device input devices and output devices . The bus collectively represents all system peripheral and chipset buses that communicatively connect the numerous internal devices of the computer system . For instance the bus communicatively connects the processor with the read only memory the system memory and the permanent storage device . From these various memory units the processor retrieves instructions to execute and data to process in order to execute the processes of the invention. The processor is a processing device such as a central processing unit integrated circuit graphical processing unit etc.

The read only memory ROM stores static data and instructions that are needed by the processor and other modules of the computer system. The permanent storage device on the other hand is a read and write memory device. This device is a non volatile memory unit that stores instructions and data even when the computer system is off. Some embodiments of the invention use a mass storage device such as a magnetic or optical disk and its corresponding disk drive as the permanent storage device .

Other embodiments use a removable storage device such as a flash drive as the permanent storage device Like the permanent storage device the system memory is a read and write memory device. However unlike the storage device the system memory is a volatile read and write memory such as random access memory RAM . The system memory stores some of the instructions and data that the processor needs at runtime. In some embodiments the processes are stored in the system memory the permanent storage device and or the read only memory .

The bus also connects to the input and output devices and . The input devices enable the user to communicate information and select commands to the computer system. The input devices include any of a capacitive touchscreen resistive touchscreen any other touchscreen technology a trackpad that is part of the computing system or attached as a peripheral a set of touch sensitive buttons or touch sensitive keys that are used to provide inputs to the computing system or any other touch sensing hardware that detects multiple touches and that is coupled to the computing system or is attached as a peripheral. The input device also include alphanumeric keypads including physical keyboards and touchscreen keyboards pointing devices also called cursor control devices . The input devices also include audio input devices e.g. microphones MIDI musical instruments etc. . The output devices display images generated by the computer system. The output devices include printers and display devices such as cathode ray tubes CRT or liquid crystal displays LCD .

Finally as shown in bus also couples computer to a network through a network adapter not shown . In this manner the computer can be a part of a network of computers such as a local area network LAN a wide area network WAN or an Intranet or a network of networks such as the Internet. For example the computer may be coupled to a web server network so that a web browser executing on the computer can interact with the web server as a user interacts with a GUI that operates in the web browser.

As mentioned above the computer system may include one or more of a variety of different computer readable media. Some examples of such computer readable media include RAM ROM read only compact discs CD ROM recordable compact discs CD R rewritable compact discs CD RW read only digital versatile discs e.g. DVD ROM dual layer DVD ROM a variety of recordable rewritable DVDs e.g. DVD RAM DVD RW DVD RW etc. flash memory e.g. SD cards mini SD cards micro SD cards etc. magnetic and or solid state hard drives ZIP disks read only and recordable blu ray discs any other optical or magnetic media and floppy disks.

While the present invention has been described with reference to numerous specific details one of ordinary skill in the art will recognize after disclosure that the invention can be embodied in other specific forms yet these would not depart from the scope and spirit of the invention as herein disclosed.

