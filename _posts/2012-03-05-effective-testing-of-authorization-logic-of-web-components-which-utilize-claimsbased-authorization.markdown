---

title: Effective testing of authorization logic of web components which utilize claims-based authorization
abstract: An authorization algorithm of a software component can be selected. A static code analysis can be performed to determine a conditional statement within an algorithm of the software component. The outcome of the conditional statement can be established based on an input and a criteria using dynamic code analysis. The input can be a value associated with a claim set of a claims-based authentication policy. The criteria can be an authentication criteria specified within the algorithm. Responsive to the outcome, an execution path associated with the outcome can be determined and a code coverage criterion can be met for the conditional statement.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08839351&OS=08839351&RS=08839351
owner: International Business Machines Corporation
number: 08839351
owner_city: Armonk
owner_country: US
publication_date: 20120305
---
This application is a continuation of U.S. patent application Ser. No. 13 253 649 filed Oct. 5 2011 pending which is incorporated herein in its entirety.

Many organizations depend on Web based software e.g. Web application to run their business processes conduct transactions and deliver increasingly sophisticated services to customers. Every Web application e.g. Web service destined for online deployment frequently addresses security issues as an integral part of the software delivery process. Unfortunately in the race to meet deadlines and stay ahead of the competition many businesses fail to perform adequate security testing. This often results in vulnerabilities providing ample opportunity for unauthorized users to access or steal corporate and or personal data. That is security flaws within Web services can place employees and the business at risk. The most efficient way to stay ahead of application security vulnerabilities is to build software securely from the ground up.

The business logic carried out by components of Web services often places restrictions on users of that component. For example if a Web service is used for alcohol sale then the age of the user should be verified to decide whether that person is eligible for service. A recent solution to this problem is an approach which utilizes claims based authorization . Claims based authorization specifies processes for validating relevant details about the user e.g. age of the Web component. The Web service defines a set of criteria e.g. age that the user must satisfy which is known as the claim set. For each criterion in this set there is an entity the Web service trusts which can provide information about the user with respect to that criterion. This entity is referred to as the token issuer where the token holds the information the Web service can use to authenticate the user. To authorize a user the Web service can request a suitable set of tokens e.g. Security Assertion Markup Language tokens where each token contains a certain claim set. The Web service can inspect the information stored inside the tokens and based on results of the inspection can decide to serve the user.

Testing authorization logic carried out by a Web service which uses claims based authorization can be challenging. One hurdle to testing authorization logic is that the range of values corresponding to each claim can be unbounded. For example the claim can assume string values corresponding to names or allowed actions. Thus testing a Web service using simple enumeration of all the possible values for all the relevant claims can be time consuming resource intensive and error prone. That is brute force testing can be a non viable strategy.

One aspect of the present invention can include a system an apparatus a computer program product and a method for effective testing of authorization logic of Web components which utilize claims based authorization. An authorization algorithm of a software component can be selected. A static code analysis can be performed to determine a conditional statement within an algorithm of the software component. The outcome of the conditional statement can be established based on an input and a criteria using dynamic code analysis. The input can be a value associated with a claim set of a claims based authentication policy. The criteria can be an authentication criteria specified within the algorithm. Responsive to the outcome an execution path associated with the outcome can be determined and a code coverage criterion can be met for the conditional statement.

Another aspect of the present invention can include an apparatus a computer program product a method and a system for effective testing of authorization logic of Web components which utilize claims based authorization. A testing engine can be configured to perform at least one of a functional and non functional assessment of an authentication layer of a software component. The non functional assessment can be a validation of one or more authentication algorithms associated with the software component. The authentication algorithms can be associated with a claims based authentication policy. One or more of the claims associated with the claims based authentication policy can be an unbounded value. A data store can be able to persist and aggregate static and dynamic analysis results of the assessment of the authentication algorithm to enable multiple views of the authentication algorithm execution.

The present disclosure is a solution for effective testing of authorization logic of web components which utilize claims based authorization. In the solution a testing engine can be utilized to validate the functioning of an authorization layer of a Web component software e.g. Web service . That is the engine can aid in quality assurance practices which aim to produce defect free security components. The disclosure can utilize static and dynamic code analysis to exhaustively test authorization elements within a Web service. In one instance the testing engine can automatically produce tokens which conform to testing guidelines and or rulesets. In the instance tokens can be utilized to validate authorization layer operation. For example tokens can conform to a Web service Trust WS Trust specification which can be used to completely test an authorization algorithm. A quantitatively sufficient amount of tokens can be generated to permit the testing of each code path of the authentication layer. The tokens can be inputted into the layer causing the evaluation of each conditional statement within the authentication layer against valid and non valid values e.g. valid user input invalid user input . That is a wide gamut of scenarios can be rapidly and easily tested against Web services which utilize claims based authorization.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions.

These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

As used herein Web application can be an application which can be accessed over a network including but not limited to an Internet an intranet and an extranet. In one instance application can be a Web service. Application can be presented within a browser controlled environment e.g. a JAVA applet coded in a browser supported language e.g. JAVASCRIPT combined with a browser rendered markup language and can be reliant on a common Web browser to render the application executable. For example application can be a Rich Internet Application RIA . Application can be hosted within a Web application server e.g. Web application server and can provide services to an end point client device e.g. desktop computer end point server devices e.g. server and the like. Application can be associated with a software framework such as a Web framework. Application can include but is not limited to authentication layer business logic layer not shown and the like.

Authentication layer can be a software component including one or more algorithms for performing claims based authentication. Authentication layer can be associated with source code binary and the like. Source code can be a human readable document associated with one or more computer languages including but not limited to JAVA PHP Hypertext PreProcessor PHP C Hypertext Markup Language HTML Dynamic HTML and the like. For example source code can be a JAVA source code file. Binary can be a machine readable document associated with machine code and or intermediate representation code. For example binary can be a JAVA byte code file.

Source code and or binary can be conveyed to testing engine which can utilize profiler to instrument layer e.g. code and or binary . Profiler can utilize traditional and or proprietary profiling techniques to instrument layer . Profiler can analyze code and or binary to produce appropriate instrumentation . For example profiler can identify string comparisons e.g. starts with contains equals and or numerical comparisons e.g. which are associated with conditional statements. Instrumentation can be customized software code for detecting conditional statement execution function invocations object creation and the like. For example instrumentation can include executable code for setting an entry and an exit point within a function permitting statistical data e.g. number of times a function has been called to be collected. That is instrumentation can be utilized to perform traditional code coverage criteria e.g. decisions coverage condition coverage compute metrics and the like. Instrumentation can be appropriately inserted into layer resulting in the creation of instrumented layer . Instrumented layer can include instrumented source code and or instrumented binary .

In one instance profiler can generate instrumentation and can modify source code to place instrumentation within source code . In the instance the instrumented binary can be created e.g. compiled from instrumented source code from the instrumented source code .

Token generator can utilize instrumented layer to generate relevant authentication token which can be employed to test layer . Authentication token can be a security token associated with a claims based authentication mechanism. Token can include but is not limited to assertions protocols bindings profiles and the like. In one instance token can be a Security Assertion Markup Language SAML token. In the instance the token can include but is not limited to authentication statements attribute statements authorization decision statements and the like. That is token can include attributes with testing values which can be utilized to validate layer functioning.

Example B illustrates a token generation scenario from source code . In the scenario source code can be an e commerce Web site authorization logic for the sale of alcohol. The conditional statement can permit the login of a user to the e commerce Web site if the authorization token identifies the user as over the age of eighteen. That is conditional statement can be analyzed to determine an authorization value which can be evaluated against a constant e.g. integer value eighteen . An authorization token e.g. Token A can be generated with a value of twenty to test the successful e.g. TRUE evaluation of statement . It should be appreciated that multiple tokens e.g. A A can be generated to test each potential execution paths associated with statement .

In one embodiment to exercise all possible control flow paths of source code where source code includes n tests e.g. statements each result can be represented using an array of length n e.g. t1 . . . t n where t i is the result of test i. Each feasible result array can be obtained by synthesizing appropriate values for the claims in the token. For example if the token contains two claims e.g. age username four different inputs can be crafted corresponding to a value below above eighteen for the age and a name that corresponds to a registered user and a non registered user. The embodiment can enable exhaustive testing of the Web component s authorization logic even in the case of a parameter whose set of legal values can be unbounded. Furthermore for each array of test results execution of business logic of the Web component can be determined using instrumentation e.g. instrumentation .

Token can be inputted into instrumented layer which can be executed by runtime engine . Execution of layer can produce in execution result . Result can be one or more data sets associated with the execution of layer . Result can include but is not limited to decision tree output and the like. Decision tree can be a data model identifying the execution of layer . Tree can include but is not limited to a text document a graphical illustration and the like. Output can include but is not limited to program generated output instrumentation generated output debugging information logging information and the like.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. In flow A application architecture can include but is not limited to Model View Controller MVC three tier architecture and the like. It should be appreciated that multiple values can be present within each token and example B illustrates a simplified scenario for the sake of clarity.

In step an algorithm within an authentication layer of a Web component can be identified. The algorithm can be automatically and or manually identified. It should be appreciated that the algorithm can include multiple algorithms functions classes objects and the like. In step a conditional statement within the algorithm can be selected. Selection can be performed in execution order statement complexity and the like. In step test values associated with the conditional statement can be determined. In one instance a manual review process can be associated with test value determination to permit customized and or focused testing. In step test values can be populated into appropriate authentication tokens. In step an authentication token can be se selected. In step the conditional statement can be evaluated against the authentication token. In step output of the evaluation can be collected. In step if there are more tokens to evaluate for the conditional statement the method can return to step else continue to step . In step if there are more conditional statements to evaluate the method can return to step else continue to step . In step a decision tree can be generated and optionally presented within a user interface. That is the decision tree can be utilized to provide rapid visual feedback of algorithm testing. In step the method can end.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. It should be appreciated that method can be performed in real time or near real time. Further method can be performed in serial and or in parallel. In one instance the method can be performed automatically during a software development lifecycle enabling security flaws to be quickly identified and removed.

Testing server can be a hardware software element able to execute testing engine . Server can include but is not limited to testing engine authentication token interface data store and the like. In one instance server can be an IBM RATIONAL APPSCAN server. Server capabilities can include but is not limited to authoring tools e.g. developer tracking versioning functionality security capabilities and the like. It should be appreciated that server can combine the automated correlation of static and dynamic analysis test results to provide novel capabilities for testing applications which utilize claims based authentication.

Testing engine can be a hardware software component for performing static and dynamic program analysis of a Web application . Engine can include but is not limited to token generator runtime engine profile and the like. In one instance engine can be a networked component. In another instance engine can be a plug in component of an integrated development environment. In the instance engine can be associated with a testing tooling. In one instance engine can be a functionality of an IBM RATIONAL APPSCAN TESTER EDITION software.

Token generator can be a hardware software entity for creating authentication token . Generator functionality can include but is not limited to token type determination validating token formation communicating token and the like. In one embodiment generator can communicate with authentication server to determine an appropriate application security policy . In the embodiment generator can determine policy type and generate appropriate authentication token . In one embodiment generator can emulate an identity provider allowing application to execute without reconfiguration. In the embodiment generator can automatically determine relevant identity provider settings e.g. parsing configuration files utilized by application which can be used during testing to emulate an identity provider.

Runtime engine can be a hardware software element for executing application . Runtime engine functionality can include platform virtualization sandboxing debugging tracing auditing and the like. Engine can select appropriate token which can be inputted into application during execution. Engine can provide logging capabilities which can be utilized to generate results . In one instance engine can be communicatively linked to a defect tracking system. In one embodiment engine can automatically test a Web application responsive to a scan action. In the embodiment a scan action can be a user initiated action within an IDE.

Profiler can utilize a wide variety of techniques to collect data from application during testing including but not limited to hardware interrupts code instrumentation instruction set simulation operating system hooks and performance counters. In one instance profiler can be a call graph profiler able to generate decision tree during runtime. Profiler functionality can include but is not limited to event based profiling statistical profiling source code instrumentation profiling interpreted instrumentation profiling hypervisor simulation profiling. It should be appreciated that although instrumenting Web application can cause changes in the performance of the program potentially causing inaccurate results and heisenbugs the instrumentation can be very specific e.g. conditional statements and can be carefully controlled to have a minimal impact.

Settings can be one or more rulesets for establishing the behavior of server engine and or system . Settings can include but is not limited to token generator settings runtime engine options profiler parameters and the like. In one instance settings can include security policy options decision tree settings and the like. Setting can be manually and or automatically determined. In one instance setting can be configured via interface .

In one instance token can be associated with one or more encryption schemes. In the instance token can be associated with an Extensible Markup Language XML Encryption. Token can be associated with a Single Sign On SSO Scheme which can include but is not limited to a Web browser a user e.g. principle an authentication server e.g. identity provider and the like.

In one instance security policy can be associated with a Security Assertion Markup Language SAML profile. Policy can be associated with one or more query response protocols. Policy can be associated with one or more bindings including but not limited to Simple Object Access Protocol SOAP Hypertext Transport Protocol HTTP and the like. It should be appreciated that security policy can include traditional and or proprietary claims based authentication allowing the disclosure to be extensible and permit the testing of any claims based security policies.

Web application server can be a hardware software component for storing and or executing application . Server can be associated with a development environment production environment and the like. In one embodiment server can be an IBM WEBPSHERE APPLICATION server.

Result can be one or more datasets for tracking the outcome of application testing. Result can include but is not limited to log files database records binary files multi media files and the like. In one instance result can be associated with a concurrent versioning system CVS defect tracking system and the like. Result can be associated with scan templates user defined output templates and the like. For example result can be configured to present customized views of application execution for each developer associated with the application .

In one embodiment decision tree can be a call graph associated with a portion of application . In one instance decision tree can be linked to results permitting a graphical representation of application testing to be achieved. In the instance nodes of the decision tree can correspond to entries within results . For example entry can indicate at a conditional statement e.g. Loc A a defect exists when values associated with an authentication token e.g. Token A is inputted. In one embodiment selecting a node e.g. conditional statement A within the decision tree can yield information about the execution of the code associated with the node. For instance tokens used to evaluate the conditional statement A can be presented allowing a software developer to inspect token values which result in incorrect operation of application .

Interface can be a user interactive component permitting interaction and or presentation of decision tree . Interface can be present within the context of a Web browser application an integrated development environment IDE and the like. In one embodiment interface can be a screen of an IBM ECLIPSE IDE. Interface capabilities can include a graphical user interface GUI voice user interface VUI mixed mode interface and the like. In one instance interface can be communicatively linked to computing device.

Data store can be a hardware software component able to persist result authentication token decision tree and the like. Data store can be a Storage Area Network SAN Network Attached Storage NAS and the like. Data store can conform to a relational database management system RDBMS object oriented database management system OODBMS and the like. Data store can be communicatively linked to server in one or more traditional and or proprietary mechanisms. In one instance data store can be a component of Structured Query Language SQL complaint database.

Network can be an electrical and or computer network connecting one or more system components. Network can include but is not limited to twisted pair cabling optical fiber coaxial cable and the like. Network can include any combination of wired and or wireless components. Network topologies can include but is not limited to bus star mesh and the like. Network types can include but is not limited to Local Area Network LAN Wide Area Network WAN Virtual Private Network VPN and the like.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. It should be appreciated that runtime engine can be an optional component of engine . It should be appreciated that one or more components within system can be optional components permitting that the disclosure functionality be retained. It should be understood that engine components can be optional components providing that engine functionality is maintained. It should be appreciated that one or more components of engine can be combined and or separated based on functionality usage and the like. System can conform to a Service Oriented Architecture SOA Representational State Transfer REST architecture and the like.

The flowchart and block diagrams in the illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

