---

title: Concurrent embedded application update and migration
abstract: Embodiments of the present invention provide a system, method, and computer program product for updating software on an embedded computer device. According to one aspect of the present invention, a concurrent embedded application update is performed in which selected state information for one or both of an embedded virtual machine and a plurality of applets on an embedded computer device is securely exported to a host computer device. After software updates have been installed, the selected state information can be restored on the embedded computer device from which it was exported and/or it can be migrated to a second embedded computer device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08935689&OS=08935689&RS=08935689
owner: International Business Machines Corporation
number: 08935689
owner_city: Armonk
owner_country: US
publication_date: 20120813
---
The present invention relates generally to computer devices and more particularly to concurrently updating embedded applications on embedded computer devices.

Embedded computer devices such as smartcards typically contain one or more computer processors memory and other embedded hardware and software components. The software components typically include embedded applications such as an embedded Java Virtual Machine eJVM and multiple applets.

It is often desirable to update embedded applications on an embedded computer device while the embedded applications are in communication with an external host application such that the embedded applications continue to run uninterrupted from the perspective of the external host application. This process is referred to as a concurrent embedded application update CEAU . For example a user may wish to utilize a CEAU to update an eJVM and applets embedded on a smartcard without rendering the smartcard unable to process requests from the perspective of a host application that is running on a host computer device.

To perform a CEAU certain state information typically must be preserved so that it can later be restored and the embedded computer device can resume operating after the CEAU is complete. For example state information for a smartcard may include the in RAM state of the eJVM and the applets which can include live objects and values of static fields. One known technique for preserving state information involves storing state information in persistent storage on the embedded computer device such as in flash memory. However accessing flash to later restore the information can be a slow process and flash memory can degrade with use. Further an eJVM and its applets can possess large amounts of state information potentially to the extent that the amount of state information exceeds the persistent storage capacity of the embedded computer device and therefore cannot be entirely preserved. For example embedded applications that perform cryptographic functions may manage large cryptographic key pools whose storage size exceeds the storage capacity of the flash memory on the embedded computer device.

A known alternative to preserving state information during a CEAU is to rebuild the state information after the CEAU is complete. However for certain state information such as cryptographic state information rebuilding the information can be prohibitively expensive with respect to system resources resulting in time delays that prevent a CEAU from being performed without interruption from the perspective of a host application.

Embodiments of the present invention provide a system method and computer program product for updating software on an embedded computer device. According to one aspect of the present invention an embedded computer device executes an applet in an embedded virtual machine. The embedded computer device suspends new requests to the applet and transmits state information for one or both of the embedded virtual machine and the applet to a host computer device for temporary storage. The embedded computer device receives one or more software updates for one or both of the embedded virtual machine and the applet from the host computer device. The embedded computer device then installs the one or more software updates received from the host computer device. Subsequently the embedded computer device receives the state information from the host computer device restores it on the embedded computer device and allows new requests to be sent to the applet.

Embodiments of the present invention will now be described in detail with reference to the accompanying drawings. It is to be understood that the disclosed embodiments are merely illustrative of potential embodiments of the present invention and may take various forms. In addition each of the examples given in connection with the various embodiments is intended to be illustrative and not restrictive. Therefore specific structural and functional details disclosed herein are not to be interpreted as limiting but merely as a representative basis for teaching one skilled in the art to variously employ the present invention.

Host computer device and embedded computer device are interconnected. In some embodiments embedded computer device is internal to host computer device . In other embodiments embedded computer device is external to host computer device and is connected to host computer device using an acceptance device such as a universal serial bus USB smartcard reader. In other embodiments embedded computer device is connected to host computer device via a network such as a local area network LAN a wide area network WAN such as the Internet or a combination of the two and includes wired wireless or fiber optic connections. In general host computer device can be connected to embedded computer device with any combination of connections and protocols that support communications in accordance with embodiments of the present invention.

Host computer device includes host application embedded application updater host communications device driver and state information data store . Host application via host communications device driver provides access to services and functionalities of one or more applets on embedded computer device . For example host application can issue requests to and receive responses from one or more applets on embedded computer device .

Embedded application updater is a program that provides software updates to embedded computer device in accordance with embodiments of the present invention. For example during a CEAU embedded application updater provides to embedded computer device software updates for one or more applets and or eJVM . Embedded application updater obtains the software updates from local storage on host computer device and or from storage on a remote computer device via a network.

Host communications device driver enables host application and embedded application updater to communicate with embedded computer device . During a CEAU host communications device driver initiates suspension of embedded computer device by transmitting a suspend instruction to eJVM and in response receives from eJVM state information for temporary storage in state information data store . Host communications device driver also queues requests received from host application and or other applications on host computer device that are made to one or more applets while embedded computer device is in a suspension state.

Embedded computer device includes one or more applets embedded java virtual machine eJVM installer application and daemon . One or more applets are one or more software applications that are stored on embedded computer device and are executable by eJVM in accordance with embodiments of the present invention. In this exemplary embodiment eJVM is an embedded java virtual machine capable of executing one or more applets as java bytecode. In general eJVM can be implemented with any embedded virtual machine i.e. any bytecode interpreter known in the art. During a CEAU eJVM preserves selected state information for eJVM and or one or more applets by exporting the state information to host computer device . Later eJVM receives the state information from host computer device and restores the state information on embedded computer device . In certain embodiments a migration is performed in which the state information is restored on a second embedded computer device as discussed later in this specification. Those skilled in the art will recognize that eJVM may also include components that are not illustrated in such as for example extensions and a runtime environment including system classes application programming interfaces APIs and native methods for hardware components of embedded computer device .

Installer application receives updates for one or more applets and or eJVM from embedded application updater and installs the updates on embedded computer device in accordance with embodiments of the present invention.

Daemon runs as a background service i.e. program on embedded computer device and maintains a timestamp field on embedded computer device in accordance with embodiments of the present invention. In certain embodiments daemon stores a timestamp of the time at which eJVM exports state information. The timestamp is verified by daemon during restoration of the state information as an added security measure to decrease the likelihood of unauthorized replication of the state information on another embedded computer device e.g. a replay attack .

It should be understood that for the purposes of illustration does not show additional computer devices and elements which may be present when practicing embodiments of the present invention. For example when performing a CEAU and migration in accordance with an embodiment of the present invention one or more updates are installed on and the state information is migrated to a second embedded computer device .

In step in response to receiving the suspend instruction eJVM stops accepting new requests made by host application to one or more applets . That is eJVM suspends requests i.e. calls to one or more applets that were made after receipt of the suspend instruction from host communications device driver . Host communications device driver queues new requests made by host application to one or more applets .

In step eJVM instructs all active applets i.e. one or more applets that are currently executing active requests to suspend operation after the active applets have finished executing their active requests.

In step eJVM periodically determines whether all active requests are complete i.e. whether the active applets have finished executing their active requests . If in step eJVM determines that all active requests are not complete then eJVM continues to allow the active applets to finish executing their active requests. If in step eJVM determines that all active requests are complete then in step eJVM performs garbage collection where appropriate. In this exemplary embodiment for example garbage collection is performed to reclaim memory on embedded computer device that is occupied by data objects that were no longer being used by one or more applets and or eJVM prior to receipt of the suspend instruction from host communications device driver .

In step eJVM selects and securely exports state information for one or more applets and or eJVM to host computer device via host communications device driver for temporary storage in state information data store . State information can include for example the in RAM state of eJVM itself state information pertaining to native methods and code for embedded computer device and the in RAM state of one or more applets including all live objects and values of static fields. During a prior set up phase a user of concurrent embedded application update system can specify which state information should be exported to host computer device on the basis of for example whether the state information exceeds the persistent storage capacity of embedded computer device and or whether the state information would be prohibitively expensive to rebuild with respect to system resources. Operational steps for securely exporting state information in accordance with an embodiment of the present invention are discussed in greater detail with regard to .

In step eJVM releases any held operating system resources on embedded computer device . For example the released operating system resources may include semaphores file handles and other data related to currently opened files.

In step eJVM transmits a notification to host communications device driver indicating that suspension is complete.

In step installer application receives from embedded application updater one or more updates for one or more applets and eJVM and calls installer application . In step installer application installs the received one or more updates.

In step eJVM having been updated requests and receives from host communications driver the state information stored in state information data store i.e. the state information that was exported in step of . In certain embodiments of the present invention prior to receiving the state information eJVM must first authenticate itself using for example a digital certificate.

In step eJVM restores the received state information on embedded computer device and notifies host communications device driver . In this exemplary embodiment eJVM restores the state of eJVM and one or more applets . Operational steps for restoring state information in accordance with an embodiment of the present invention are discussed in greater detail with regard to .

After the state information has been restored in step eJVM receives a start instruction from host communications device driver . In step eJVM resumes operation and sends a resume instruction to each active applet of one or more applets that was suspended in step of upon which the active applets can rebuild any portion of their states that was not restored in step . For example the active applets may rebuild one or more caches that were eliminated during suspension in step of .

After eJVM and one or more applets have resumed operation in step eJVM transmits a notification to host communications device driver indicating that embedded computer device is available to accept new requests. After step host communications device driver can transmit to eJVM any requests that may have been queued while embedded computer device was suspended.

Accordingly by performing the operational steps of one or more applets and or eJVM are updated on embedded computer device . Because state information was exported for storage on host computer device embodiments of the present invention can preserve larger amounts of state information than might otherwise be possible given a limited storage capacity of embedded computer device . Preserving such state information reduces the need to expend system resources and time rebuilding the state information which enables the CEAU to be performed without interruption from the perspective of host application . Further certain embodiments of the present invention involve a migration in which the preserved state information is restored on a second embedded computer device as discussed in greater detail with regard to .

In step eJVM selects state information for eJVM and one or more applets to export to host computer device pursuant to specified criteria. A user of concurrent embedded application update system can specify such criteria on a variety of bases. For example the user can specify that state information should be exported to host computer device if preservation of the entirety of the state information or the entirety of a discrete portion of the state information would require more persistent storage than is available on embedded computer device . The user can also specify that specific kinds of state information or state information belonging to specific kinds of one or more applets should be exported to host computer device . These criteria can be useful for example to export specific state information that is anticipated by the user to be expensive and time consuming to rebuild such as a large RSA keypool or other cryptographic state information belonging to applets that perform cryptographic functions. The user can also specify that all state information should be exported to embedded computer device .

In step eJVM normalizes the state information selected in step if necessary. In this exemplary embodiment normalization includes compacting the eJVM heap i.e. the region of memory used by eJVM and creating a relocation table. For example if in step of garbage collection results in fragmentation of the eJVM heap eJVM can compact the heap by moving the remaining live objects such that they are consolidated in a particular region of the heap thereby creating a region of contiguous free space in the heap. The object handle for each moved object which is stored in the relocation table and is referenced by applications points to the new location of the object in the eJVM heap.

In step eJVM compresses the state information. In this exemplary embodiment eJVM utilizes zlib compression. In general any suitable compression technique that is known in the art can be utilized.

After compression is complete in step eJVM calls daemon to generate and store a timestamp on embedded computer device such that it persists during the CEAU. For example the timestamp can be stored in battery backed RAM BBRAM .

In step eJVM generates a symmetric encryption key SK . In this exemplary embodiment the AES symmetric encryption algorithm is utilized. In general any symmetric encryption algorithm can be utilized.

In step eJVM encrypts the compressed state information and timestamp with the SK generated in step and eJVM generates a message authentication code MAC . In other embodiments symmetric encryption and generation of the MAC can be accomplished using a combination technique such as for example Counter with CBC MAC CCM .

In step eJVM encrypts the SK and MAC with a public encryption key of an asymmetric encryption key pair that is associated with the target embedded computer device. In this exemplary embodiment eJVM uses the RSA asymmetric encryption algorithm. The target embedded computer device is the embedded computer device on which the state information will be decrypted and restored. Accordingly during a CEAU that does not involve migration embedded computer device encrypts the SK and MAC with its own public encryption key i.e. the public encryption key for which it has the corresponding private encryption key during a CEAU that involves migration embedded computer device encrypts the SK and MAC with a public encryption key that is associated with a second embedded computer device as the second embedded computer device is the target embedded computer device.

In step eJVM transmits to host computer device for temporary storage in state information data store the encrypted state information and the encrypted SK and MAC.

In step eJVM decrypts the SK and MAC with the private encryption key associated with the target embedded device . That is eJVM decrypts the SK and MAC with the private encryption key that corresponds to the public encryption key with which the SK and MAC were encrypted in step of .

In step eJVM verifies the MAC for the encrypted state information and timestamp and eJVM decrypts the encrypted state information and timestamp with the SK. After decryption is complete eJVM calls daemon to verify the decrypted timestamp.

In step daemon verifies the decrypted timestamp. If the CEAU does not involve migration i.e. the target embedded computer device also performed the operational steps of daemon verifies the decrypted timestamp by comparing the decrypted timestamp to the timestamp stored in step of to identify a match. If the CEAU does involve migration daemon verifies the decrypted timestamp by receiving the stored timestamp from the embedded computer device that performed the operational steps of and comparing the received timestamp to the decrypted timestamp to identify a match. In either scenario verification of the timestamp requires having the timestamp that was generated in step of and therefore helps decrease the likelihood of unauthorized replication of the state information on an embedded computer device other than the target embedded computer device e.g. a replay attack .

In step eJVM decompresses the decrypted state information and in step converts the state information into a format that is compatible with the now updated eJVM and one or more applets if necessary. That is depending on the nature of the state information and the updates to eJVM and one or more applets eJVM and one or more applets may be able to resume operations utilizing the state information as is or the state information may need to be converted into a compatible format.

In step eJVM restores the state information on the target embedded computer device and where necessary updates the state information in accordance with the relocation table to reflect the new locations of any objects in the eJVM heap that were moved during normalization of the state information in step of . eJVM also notifies host communications device driver that the restoration is complete.

Accordingly the operational steps of enable selected state information to be securely exported and restored on an embedded computer device including securely migrating the selected state information to a second embedded computer device . Because the state information is transmitted in a cryptographically secure manner embodiments of the present invention can be utilized to perform a CEAU and migration that involves sensitive state information such as cryptographic state information with a decreased risk of unauthorized access to and or replication of the sensitive state information.

In step embedded computer device performs the operational steps of i.e. steps through as previously discussed. In step during the performance of the operational steps of host communications device driver receives from eJVM the exported state information for eJVM and one or more applets and stores the state information in state information data store . Also host communications device driver receives from eJVM the notification indicating that suspension is complete.

In step embedded application updater transmits to installer application one or more updates for eJVM and or one or more applets and in step embedded computer device performs the operational steps of i.e. steps through as previously discussed. During the performance of the operational steps of host communications device driver transmits the state information stored in state information data store to eJVM when requested and host communications device driver transmits a start instruction to eJVM after restoration of the state information is complete.

In step host communications device driver receives from eJVM the notification indicating that embedded computer device is available to accept new requests. After step host communications device driver can then transmit to eJVM any requests that have been queued while embedded computer device was suspended.

In step host communications device driver determines that one or more applets and or eJVM need to be updated on the second embedded computer device . As previously discussed this determination can be based on for example an update schedule receiving a command from a user of host computer device or receiving a command from an application on host computer device . In step host communications device driver transmits a suspend instruction to eJVM on the first embedded computer device and then begins queuing any new requests made to one or more applets on the first embedded computer device.

In step the first embedded computer device performs the operational steps of as previously discussed. In step during the performance of the operational steps of host communications device driver receives from eJVM the exported state information for eJVM and one or more applets on the first embedded computer device and host communications device driver stores the state information in state information data store . Also host communications device driver receives from eJVM on the first embedded computer device a notification indicating that suspension is complete.

In step embedded application updater transmits to installer application on the second embedded computer device one or more updates for eJVM and or one or more applets on the second embedded computer device . That is in this exemplary embodiment eJVM and one or more applets are already installed on the second embedded computer device and in step the second embedded computer device receives one or more updates for those existing installations. In other embodiments the second embedded computer device does not have an existing installation of eJVM and one or more applets and in step embedded application updater transmits to installer application on the second embedded computer device the updated version of eJVM and one or more applets .

In step the second embedded computer device performs the operational steps of as previously discussed. During the performance of the operational steps of host communications device driver transmits the state information stored in state information data store to eJVM on the second embedded computer device when requested and host communications device driver transmits a start instruction to eJVM on the second embedded computer device after restoration of the state information is complete.

In step host communications device driver receives from eJVM on the second embedded computer device the notification indicating that the second embedded computer device is available to accept new requests. After step host communications device driver can then transmit to eJVM on the second embedded computer device any requests that have been queued while the first embedded computer device was suspended.

Accordingly in this exemplary embodiment a CEAU and migration are performed in a combined fashion eJVM and one or more applets are updated on the second embedded computer device and state information exported by the first embedded computer device is restored on the second embedded computer device . The second embedded computer device can therefore resume operating at the point at which the first embedded computer device was suspended without interruption from the perspective of host application . The first embedded computer device can then be disconnected from host computer device .

Internal components include one or more buses which provide for communications between one or more processors memory and one or more input output I O interfaces . Memory includes multiple computer readable tangible storage devices. Computer readable tangible storage devices are capable of storing information such as data program code in functional form and or other suitable information on a temporary basis and or permanent basis. Memory includes random access memory RAM which can include BBRAM read only memory ROM and electrically erasable programmable read only memory EEPROM such as flash memory. One or more applets eJVM installer application and daemon are stored in memory for execution by one or more processors .

One or more I O interfaces allow for input and output of data with host computer device and other devices that may be connected to embedded computer device . For example I O interfaces can support contact and contactless communications with host computer device and I O interfaces can support communications with host computer device via an acceptance device not shown such as for example a USB smartcard reader.

Internal components include one or more processors one or more computer readable RAMs and one or more computer readable ROMs on one or more buses one or more operating systems and one or more computer readable tangible storage devices . Host application embedded application updater and data in state information data store are stored on one or more of the respective computer readable tangible storage devices for access and or execution by one or more of the respective processors via one or more of the respective RAMs which typically include cache memory . In the illustrated embodiment each of the computer readable tangible storage devices is a magnetic disk storage device of an internal hard drive. Alternatively each of the computer readable tangible storage devices is a semiconductor storage device such as ROM EEPROM flash memory or any other computer readable tangible storage device that can store a computer program and digital information. A computer readable tangible storage device as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Internal components also include a R W drive or interface to read from and write to one or more portable computer readable tangible storage devices such as a CD ROM DVD memory stick magnetic tape magnetic disk optical disk or semiconductor storage device. Host application embedded application updater host communications device driver and data in state information data store can be stored on one or more of the respective portable computer readable tangible storage devices read via the respective R W drive or interface and loaded into the respective hard drive or semiconductor storage device .

Internal components also include a network adapter or interface such as a TCP IP adapter card or wireless communication adapter such as a 4G wireless communication adapter using OFDMA technology . Host application embedded application updater host communications device driver and data in state information data store can be downloaded to the respective computing processing devices from an external computer or external storage device via a network for example the Internet a local area network or other wide area network or wireless network and network adapter or interface . From the network adapter or interface the programs and data can be loaded into the respective hard drive or semiconductor storage device . The network may comprise copper wires optical fibers wireless transmission routers firewalls switches gateway computers and or edge servers.

External components include a display screen a keyboard or keypad and a computer mouse or touchpad . Internal components also include device drivers to interface to display screen for imaging to keyboard or keypad to computer mouse or touchpad and or to display screen for pressure sensing of alphanumeric character entry and user selections. Device drivers also include host communications device driver to interface to embedded computer device not shown which can be internal or external to host computer device . The device drivers R W drive or interface and network adapter or interface comprise hardware and software stored in storage device and or ROM .

Aspects of the present invention have been described with respect to block diagrams and or flowchart illustrations of methods apparatus system and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer instructions. These computer instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The aforementioned programs can be written in any combination of one or more programming languages including low level high level object oriented or non object oriented languages such as Java C and C . The program code may execute entirely on a user s computer partly on a user s computer as a stand alone software package partly on a user s computer and partly on a remote computer or entirely on a remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet service provider . Alternatively the functions of the aforementioned programs can be implemented in whole or in part by computer circuits and other hardware not shown .

The foregoing description of various embodiments of the present invention has been presented for purposes of illustration and description. It is not intended to be exhaustive nor limit the invention to the precise form disclosed. Many modifications and variations of the present invention are possible. Such modifications and variations that may be apparent to a person skilled in the art of the invention are intended to be included within the scope of the invention as defined by the accompanying claims.

