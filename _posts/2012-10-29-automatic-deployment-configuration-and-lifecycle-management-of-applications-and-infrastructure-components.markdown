---

title: Automatic deployment, configuration, and lifecycle management of applications and infrastructure components
abstract: Apparatuses, computer readable media, methods, and systems are described for automatic deployment of applications and infrastructure components, which may include processing selection of an operating system, processing selection of a stack, creating a stencil based on the operating system and the stack, and publishing the stencil.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09489110&OS=09489110&RS=09489110
owner: Bank of America Corporation
number: 09489110
owner_city: Charlotte
owner_country: US
publication_date: 20121029
---
Applications have been developed to perform tasks using software programs. A server may be a physical computer running to serve the requests of at least one other program. Deploying of applications and setting up servers can be intensive of time and resources of information technology staff. In view of such issues improvements in deployment and management of application lifecycle are needed.

The following presents a simplified summary in order to provide a basic understanding of some aspects of the disclosure. The summary is not an extensive overview of the disclosure. It is neither intended to identify key or critical elements of the disclosure nor to delineate the scope of the disclosure. The following summary merely presents some concepts of the disclosure in a simplified form as a prelude to the description below.

In some aspects apparatuses computer readable media methods and systems are described for automatic deployment of applications and infrastructure components which may include processing a selection of an operating system. A selection of a stack may be processed. A stencil based on the operating system and the stack may be created. The created stencil may then be published.

In some additional aspects apparatuses computer readable media methods and systems are described for automatic deployment of applications and infrastructure components which may include processing selection of an operating system. An element may be generated that includes a selection of one of a plurality of types. A selection for a stack comprising the element may be processed. A stencil may be created based on the operating system and the stack. The created stencil may then be published.

Aspects of the embodiments may be provided in at least one non transitory computer readable medium and or memory storing computer executable instructions that when executed by at least one processor cause a computer or other apparatus to perform one or more of the process steps described herein.

These and other aspects of the embodiments are discussed in greater detail throughout this disclosure including the accompanying drawings.

In the following description of the various embodiments reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration various embodiments in which the disclosure may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope and spirit of the present disclosure.

With reference to the computing system environment may include a computing device having a processor for controlling overall operation of the computing device and its associated components including random access memory RAM read only memory ROM communications module and memory . Computing device may include a variety of computer readable media. Computer readable media may be any available media that may be accessed by computing device may be non transitory and may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions object code data structures program modules or other data. Examples of computer readable media may include random access memory RAM read only memory ROM electronically erasable programmable read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information and that can be accessed by computing device .

Although not required various aspects described herein may be embodied as a method a data processing system or as a computer readable medium storing computer executable instructions. For example a computer readable medium storing instructions to cause a processor to perform steps of a method in accordance with aspects of the disclosed embodiments is contemplated. For example aspects of the method steps disclosed herein may be executed on a processor on computing device . Such a processor may execute computer executable instructions stored on a computer readable medium.

Software may be stored within memory and or storage to provide instructions to processor for enabling computing device to perform various functions. For example memory may store software used by the computing device such as an operating system application programs and an associated database . Also some or all of the computer executable instructions for computing device may be embodied in hardware or firmware. Although not shown RAM may include one or more are applications representing the application data stored in RAM while the computing device is on and corresponding software applications e.g. software tasks are running on the computing device .

Communications module may include a microphone keypad touch screen and or stylus through which a user of computing device may provide input and may also include one or more of a speaker for providing audio output and a video display device for providing textual audiovisual and or graphical output. Computing system environment may also include optical scanners not shown . Exemplary usages include scanning and converting paper documents e.g. correspondence receipts and the like to digital files.

Computing device may operate in a networked environment supporting connections to one or more remote computing devices such as computing devices and . The computing devices and may be personal computing devices or servers that include many or all of the elements described above relative to the computing device . Computing device may be a mobile device e.g. smart phone communicating over wireless carrier channel .

The network connections depicted in may include a local area network LAN and a wide area network WAN as well as other networks. When used in a LAN networking environment computing device may be connected to the LAN through a network interface or adapter in the communications module . When used in a WAN networking environment computing device may include a modem in the communications module or other means for establishing communications over the WAN such as the Internet or other type of computer network. It will be appreciated that the network connections shown are illustrative and other means of establishing a communications link between the computing devices may be used. Various well known protocols such as TCP IP Ethernet FTP HTTP and the like may be used and the system can be operated in a client server configuration to permit a user to retrieve web pages from a web based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.

The disclosure is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the disclosed embodiments include but are not limited to personal computers PCs server computers hand held or laptop devices smart phones multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Referring to an illustrative system for implementing example embodiments according to the present disclosure is shown. As illustrated system may include one or more workstation computers . A workstation may be for example a desktop computer a smartphone a wireless device a tablet computer a laptop computer and the like. Workstations may be local or remote and may be connected by one of communications links to computer network that is linked via communications link to server . In system server may be any suitable server processor computer or data processing device or combination of the same. Server may be used to process the instructions received from and the transactions entered into by one or more participants.

Computer network may be any suitable computer network including the Internet an intranet a wide area network WAN a local area network LAN a wireless network a digital subscriber line DSL network a frame relay network an asynchronous transfer mode ATM network a virtual private network VPN or any combination of any of the same. Communications links and may be any communications links suitable for communicating between workstations and server such as network links dial up links wireless links hard wired links as well as network types developed in the future and the like.

Deployment of applications and infrastructure components e.g. servers can be a cumbersome task. Conventionally applications and servers are deployed manually.

Example embodiments provided herein use one or more stencils for deploying and managing the lifecycle e.g. deployment changing managing upgrading decommissioning and the like of at least one of an application a server and other infrastructure components. A stencil may provide configuration information for deploying at least one of the application the server and other infrastructure components. Subsequent to stencil creation the stencil may be reviewed to confirm that it can be used to deploy at least one of the application and the server as expected. After being reviewed the stencil may be reusable by other users. Rather than having to create a new stencil other users may search existing stencils to at least one of use and modify an existing stencil to expedite deployment of another application server and other infrastructure components.

Two examples of a stencil are a database stencil and a webserver stencil. A database stencil may be used to configure a server to implement the server as a database server. In an example the database stencil may specify 1 a server type 2 memory storage and processing requirements of the database server 3 a network location of where the database server is to obtain software 4 how to install the software 5 configuration points in the software and 6 runtime requirements. Computing device may forward the database stencil to the server and computing device and server may interact to determine whether server can meet the requirements of the database stencil. If the server is unable to meet the requirements computing device may forward the database stencil to a different server. If able to meet the requirement server may process the configuration information from the database stencil to configure the server as a database server.

In another example of a stencil a webserver stencil may specify 1 processing requirements 2 a network location of where a server is to obtain software 3 how to install the software and 4 where to obtain data. Similar to the example above computing device may forward the webserver stencil to a server in an attempt to configure the server as a webserver.

Referring again to block of the user may create a completely new stencil e.g. not based on an existing stencil or may modify an existing stencil. For example computing device may provide the user with a listing of existing stencils and the option to create a completely new stencil. The user may also associate an application group with the stencil as well as a draft tag signifying that the stencil has not yet been approved for deployment. With reference to block computing device may present a graphical user interface permitting a user to select an operating system OS and at least one stack for the stencil. The user may select from one of multiple operating systems to use.

A stack may be a collection of elements grouped for a specific function or convenience. Stacks may have authors group ownership and can be versioned. Two examples of stack classes are an S Stack and a C Stack. An S Stack may only contain elements. A C Stack may contain elements as well as one or more S Stacks. Types of stacks may include an OS Stack a Public Stack and a Custom stack. The OS Stack may be available to at least some or all users and may include an OS Image and a default system configuration. A designer of the OS Stack may manage the OS Stack. A public stack may be available to at least some or all users include a default bucket and may specify public stack specific to a hardware profile. The default bucket may include a default setup for various types of applications hardware or other resources. Examples include a default setup of a database server a webserver a middleware server standard security settings high security settings and the like. The hardware profile may define appropriate computing hardware or resource specifications e.g. CPU RAM speed and the like . A Public Stack Designer may manage the public stack. A custom stack may only be available for use by an application team app team and may contain configuration elements that provide further tuning customization. A custom stack designer within the app team may manage the custom stack.

An element may be a lowest building block of configuration information. An element may have many types e.g. osimage kernelparams files software mount points string integer Boolean DateTime and the like contain attributes holding configuration values specific to that element type and provide method s of implementation. In some examples elements may be versioned to ensure re playability. For example a user upgrading a stack may be given the opportunity to upgrade elements when upgrading a stencil to a newer version. For example when upgrading elements a version of a stack may be automatically changed from a previous version to the new version. In some instances each element may be associated to an operating system OS release. In an example an element may indicate whether one or more of a service restarts svcrestart reboot or rebuild is required if a configuration is applied to a server. Each element may provide execution dependencies based on other elements and may allow for the ordering of execution steps in an arbitrary or a dependent manner. A designer may manage elements and an element reviewer may approve new versions of elements for release to an application group. illustrates an example graphical user interface for composing an element in accordance with example embodiments. In an example a user may be able to provide a name of an element e.g. an element named Kernel Kernel or Kernel in field and select a type of an element from a drop down menu . Example types include a string type an integer type a Boolean type and a Date Time type. An attribute list may include a listing of names of previously created elements and types of the associated elements.

With reference again to the stencil may be associated with a host or a group of hosts and this association may be referred to as tagging. The user who designed the stencil may save the new stencil or submit the new stencil for testing as shown in block . Submitting a stencil for testing may be referred to as promotion as shown in block .

In block a stencil reviewer may review the promoted stencil. During testing the reviewer have the ability to deploy the stencil into a test zone to validate the outcome. If any issues are identified the reviewer may communicate the issues via e.g. computing device to the stencil creator and may propose any available solutions. If no issues are identified or if a stencil is modified as proposed the reviewer may via e.g. computing device publish the new stencil as shown in block . Publishing may involve making the new stencil available for use by the stencil creator as well as other users or a select group of users. For example only users who are members of a particular application group may be able to use a stencil. A tag of a published stencil may indicate that the stencil is active and may be used to deploy an application a server or other infrastructure components. In some instances published stencils may be versioned and immutable to provide for reproducibility.

Once a stencil has been approved other users may copy the stencil and or modify the stencil to their liking. For example in block stencils in application group AG may be used by other members of the AG. A stencil may limit its use only to members of the AG to one or more other AGs or to all users. A stencil may have one or more authors group ownership and a lifecycle. A stencil may be deprecated e.g. removed made obsolete by a higher version and the like . When stencil is deprecated the stencil no longer is taggable unless with authorization e.g. to allow replay .

Block is an illustration of an Infrastructure Resource Pool available for an application to be deployed. In some examples the Infrastructure Resource Pool may be hardware HW Pool or an Infrastructure Pool. The Infrastructure Resource Pool may contain servers computing devices storage devices network devices and the like. Groupings or sub pools may be established to delineate specifications e.g. standard premium platinum specifications with different cost structure or authority of ownership e.g. based on businesses such as for example Global Markets Wholesale Banks and the like . Sub pools may be used to delineate other appropriate demarcations such as development test zones production zones or other specialized zones. As seen in block may include a development zone a change management CM zone a production zone and a free zone e.g. use for a predetermined amount of time for nominal or no cost .

A stencil may have multiple modes. A stencil may be in a draft mode after being created and prior to being reviewed. When in a draft mode a reviewer may tag and test the stencil. A stencil is in an active mode subsequent to being approved by a reviewer. Stencils in active mode may be used by the creating user as well as other users to deploy a server an application or other infrastructure components. A stencil is in a deprecated mode upon being removed or made obsolete by a higher version. When in the deprecated mode a user is unable to access the stencil unless authorized.

Infra stacks may be used to configure and deploy infrastructure components used by an application. Infra stacks may be contrasted with custom or application stacks that manage configurations of the application. Infra stacks may abstract infrastructure implementation details from application owners and allow proper infrastructure practices to be followed.

A rendering engine may submit stencil to an execution engine to create an application and to configure one or more servers using stencil . Rendering engine may translate the intent of the stencils into executable instructions that execution engine can implement to deploy the application. In some examples execution engine may be separate from the stencils so that execution engine can be upgraded replaced without the need to change any definitions of the stencils or other configuration definitions. Instead rendering engine may be replaced and or updated to provide appropriate executable instructions that execution engine can process.

Drift management may monitor for configuration drifts. In an example drift management may constantly periodically or aperiodically monitor deployed application infrastructure for any configuration drifts e.g. when a certain configuration was modified without authorization . Such drifts may result in an alert being generated and or the configuration being automatically reverted back to conform to the stencil. Such reversion action can be customized to run only during certain time periods or be temporary suspended.

Stencils may be tagged to a server or group of servers. The action of tagging may involve deploying an application and infrastructure as defined in a stencil. Retagging may involve modifying deployed application infrastructure according to the new stencil being tagged to a particular application and or server. illustrates an example flow chart of stencil tagging and provisioning deployment in accordance with example embodiments. A stencil may include a tag signifying whether the stencil has been tested and approved for deployment. Example tags include for example draft for a stencil that has not yet been reviewed ready for testing for a stencil that has been sent for review but has not yet been tested and approved for a stencil that has been tested and approved.

In step computing device may receive a selection from a configuration operator or other user of an approved token. A token is used as deployment currency . When an application owner requests deployment of one or more applications a choice is made on the types of infrastructure needed e.g. servers network storage etc and the associated cost components. When such requests are approved a token is granted so it can be used as a currency by the application owner to deploy their application. When a deployment is made the value of the token is debited to reflect the appropriate consumption that has happened.

In step computing device may select a stencil matching the token and identify parameters. In some examples a token may have an implicit monetary value based upon the infrastructure specifications requested. A stencil or a request made with a certain infrastructure requirement may be matched against the token to ensure specifications and monetary is within range.

In step computing device may provision the stencil. In step execution engine may provision an operating system based on the stencil. In step execution engine may configure an application based on the stencil and in step may post provisioning logistics. Post provisioning logistics may encompass registration of monitoring systems of records updates financial cost registration and the like. These may interface via an application programming interface API with various other systems. In some examples post provisioning logistics may include monitoring the application and a runbook as well as backing up the application. In step execution engine may perform quality assurance on the application and may configure a server in step to include the application.

In step computing device may receive an instruction to change a management process. Such changes may be subjected to change management practices of the organization and procedures may vary for different types of servers e.g. Development vs. Production or different businesses e.g. Capital Markets vs. Credit Card business . The system may communicate with change management software via for example application programming interfaces APIs for rule enforcement.

In steps and a change management approver may receive and approve a change management request. In step computing device may inform the configuration operator of operations to be performed for stencil deployment e.g. rebuild reboot restart service and of a maintenance window. If accepted computing device may instruct execution engine to perform the change. In step execution engine may determine whether to rebuild the server. If rebuilt flow chart may proceed to step where execution engine provisions an operating system and continues to step . Returning to step if the stencil is not rebuilt the flow chart may proceed to step . In step execution engine may apply a configuration to one or more servers. In step execution engine optionally may instruct one or more of the servers to at least one of reboot and restart. In step execution engine may perform quality assurance on the servers. In step execution engine may inform computing device when the one or more servers are ready.

In some instances an ensemble including multiple stencils may be used to define an application environment within one or more data centers. Referring to an ensemble A may be a definition of an application environment. Ensemble A may include an encapsulation of multiple stencils A C and an orchestration model A. Computing device may create ensemble A based on selections of stencils A C and orchestration model A received from a user. Stencils A C may each describe a different component of an application e.g. web middleware database and the like . Orchestration model A may include an affinity and constraint model e.g. 2 database servers located in different regions web and middleware servers reside on same virtual local area network and the like . Orchestration Model A may place requirements constraints e.g. latency requirements resiliency requirements server A must be on same network as Server B execution order and the like . Ensemble A may enable a configuration operator to define an application environment on one or more data centers. For example an entire application suite can then be deployed using ensemble A. An example definition of an application environment includes three datacenters A C in different regions each configured as a webserver with two load balanced messaging servers and two back end database servers in an active passive failover setup. Each datacenter A C may include one or more servers and or other infrastructure components. Ensemble A may include a rejuvenate option allowing applications to automatically heal when resources fail e.g. entire datacenter A is unavailable and there are available spare resources at another datacenter that can implement the application environment.

In addition the ensemble B can contain an orchestration and constraint model B. With the orchestration and constraint model B various conditions can be configured for deploying and adjusting the servers during use. For example the orchestration and constraint model B can provide rules or parameters A D for how the servers in stencils A D are deployed into various compute zones. An orchestration parameter A can be set where webserver A is deployed first then webservers B C and D are deployed next in subsequent fashion. The orchestration parameter can also instruct that all database servers messaging severs and middleware servers are deployed before the webservers. A scaling parameter B can also be set which can add two more units when the webservers 30 day load average is above 90 . A monitoring and placement parameter C can also be set in the orchestration and constraint model B. For example the monitoring and placement parameter C can require that two database servers are separated by at least 80 kilometers and can require that the latency between the database servers and the messaging servers be less than 20 microseconds. Various monitoring can be set up within the system to automatically deploy more capacity as needed and to determine if certain failures caused degraded states. In addition a healing parameter D can be set such that when the system is operating in a degraded state the healing function will determine what if any additional resources are needed to be deployed to restore optimum running state.

In block the method may include processing selection of a stack. In an example computing device may receive input via a graphical user interface selecting a stack. The stack may have been previously created or may be a custom stack newly created by the user. The stack may be one of multiple classes such as for example a C Stack or an S Stack.

In block the method may include creating a stencil based on the operating system and the stack. In an example computing device may create a stencil based on the selected operating system and stack. The stack may be one of many stacks or may be a single stack.

In block the method may include publishing the stencil. Publishing the stencil may create all or a select group of users to use the stencil for their own deployment purposes. The method may end may repeat one or more times or may return to any of the preceding blocks.

Aspects of the embodiments have been described in terms of illustrative embodiments thereof. Numerous other embodiments modifications and variations within the scope and spirit of the appended claims will occur to persons of ordinary skill in the art from a review of this disclosure. For example one of ordinary skill in the art will appreciate that the steps illustrated in the illustrative figures may be performed in other than the recited order and that one or more steps illustrated may be optional in accordance with aspects of the embodiments.

