---

title: System and method for communicating with an applet using an inline web frame in a network environment
abstract: A method in an example embodiment includes modules for identifying an applet for a local network and providing instructions in a parent container file to enable operations that comprise rendering an inline web frame within a main web page, loading a source file in the inline web frame, adding a callback object to the inline web frame, and loading an interface file of the applet in the inline web frame. In particular, the loaded interface file can be configured to communicate with an entity associated with the local network by invoking the callback object. In specific embodiments, the inline web frame is hidden in the main web page. In more specific embodiments, the callback object contains one or more application programming interfaces (APIs). In further embodiments, the parent container file can include a hypertext markup language (HTML) document.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09083566&OS=09083566&RS=09083566
owner: CISCO TECHNOLOGY, INC.
number: 09083566
owner_city: San Jose
owner_country: US
publication_date: 20120418
---
This disclosure relates in general to the field of network communications and more particularly to a system and a method for communicating with an applet using an inline web frame in a network environment.

A local network can be configured with a selected group of computing devices in any suitable arrangement including a local area network LAN a wireless local area network WLAN a virtual local area network VLAN etc. A local network can be configured for various settings e.g. a home an office an enterprise a vehicle etc. with connectivity to external networks and with communication capabilities between the local network s computing devices. For example a router can be hardwired to a modem to provide a connection between the computing devices of a local network and between the computing devices and an external network such as the Internet. In addition many local networks are at least partially wireless in which wireless computing devices communicate with a wireless router via a wireless network interface controller.

Communication with some computing devices in a local network is typically accomplished by software referred to as a device driver which can be used to configure the computing devices and to act as a translator between the hardware of the computing device and applications or operating systems that use the computing device. Device applications may also provide functionality which is built on top of such devices in a local network. Additionally service applications offering network services e.g. parental controls for devices device monitoring etc. may be provided in a local network and may or may not be associated with a particular computing device.

Device drivers device applications and service applications can be associated with numerous different providers including third party vendors. Consequently managing the different drivers and applications in a local network can require a significant amount of diligence by a user to access each computing device and service to receive notifications updates or other messages. Hence local networks need to be configured to facilitate communication between their computing devices and or services and users that manage these components.

A method in an example embodiment includes identifying an applet for a local network. In such a context the term identifying includes any activity associated with evaluating analyzing flagging or otherwise processing the applet. The method also includes providing instructions in a parent container file to enable operations that comprise rendering an inline web frame within a main web page loading a source file in the inline web frame adding a callback object to the inline web frame and loading an interface file of the applet in the inline web frame.

In more particular embodiments the loaded interface file can be configured to communicate with an entity associated with the local network by invoking the callback object. In further embodiments the inline web frame is hidden in the main web page. In yet other specific embodiments the callback object contains one or more application programming interfaces APIs . In even more specific embodiments the method includes receiving a communication from the loaded interface file generating instructions to display a notification on at least one computing device connected to the local network and communicating the instructions to the local network. The parent container file can include a hypertext markup language HTML document in certain example configurations.

Network environment in represents a series of points or nodes of interconnected communication paths for receiving and transmitting packets of information that propagate through network environment . Additionally network environment offers communicative interfaces between network elements and computing devices. Network environment can include any local area network LAN wireless local area network WLAN metropolitan area network MAN Intranet Extranet wide area network e.g. WAN virtual local area network VLAN virtual private network VPN or any other appropriate architecture or system that facilitates communications in a network environment.

Elements of may be coupled to one another through one or more interfaces employing any suitable connection wired or wireless which provides a viable pathway for electronic communications. Additionally any one or more of these elements may be combined or removed from the architecture based on particular configuration needs. Network environment may include a configuration capable of transmission control protocol Internet protocol TCP IP communications for the electronic transmission or reception of packets in a network. Network environment may also operate in conjunction with a user datagram protocol IP UDP IP or any other suitable protocol where appropriate and based on particular needs.

Certain terminologies are used herein with regard to the various embodiments of the present disclosure. The term link as used herein encompasses a physical or logical communications channel e.g. a physical transmission medium such as a wire or cable or a logical transmission medium such as a radio channel that connects two or more communicating devices. The term data as used herein refers to any type of numeric voice video or script data or any type of source or object code or any other suitable information in any appropriate format that may be communicated from one point to another in electronic devices e.g. computing devices network elements and or networks.

Note that in this Specification references to various features e.g. elements structures modules components steps operations characteristics etc. included in one embodiment example embodiment an embodiment another embodiment some embodiments various embodiments other embodiments alternative embodiment etc. are intended to mean that any such features are included in one or more embodiments of the present disclosure but may or may not necessarily be combined in the same embodiments.

For purposes of illustrating the operational aspects of a system for communicating with an applet using an inline web frame it is important to understand the communications that may be traversing network environment and the problems that may be present in operational scenarios transpiring in network environment . The following foundational information may be viewed as a basis from which the present disclosure may be properly explained. Such information is offered for purposes of explanation only and accordingly should not be construed in any way to limit the broad scope of the present disclosure and its potential applications.

In a typical local network a network element such as a router connects the local network to other networks e.g. the Internet and forwards data packets to the other networks or to computing devices in the local network. A local network can include numerous types of computing devices e.g. printers laptops personal computers smart phones tablets gaming consoles etc. which can be associated with any number of different vendors. Certain computing devices e.g. hardware devices such as printers scanners smart appliances etc. are generally configured with software often referred to as device drivers or software drivers provided by their corresponding vendors. A device driver can display information about and provide logic to configure a device. Device applications may also be offered by vendors to expose device specific functionality built on top of a computing device. These device drivers and device applications are referred to herein as device applets. 

Service applications can include software which handles the display and execution of tasks in a local network. Additionally service applications may or may not be tied to particular computing devices on a local network and may be offered by various vendors to provide additional services on a local network. These service applications are referred to herein as service applets and may operate on multiple devices or provide actions or information to a user. The more general reference to applet is intended to include both device and service applets.

Generally in a local network device applets and service applets are installed and managed separately by a user. The applets are often initially downloaded by the user and any subsequent updates may also be separately downloaded by the user. Different vendors can employ different notification techniques for new releases versions patches etc. In addition service and device applets can provide a wide range of functionality with various types of communications and various implementations to provide those communications to a user. Consequently as more applets are added to a local network more effort is generally required by a user to effectively manage and access the applets.

A framework that provides a user interface in a local network for hosting applets can solve some of these problems. For example certain Home Network Ecosystems can provide for populating a user interface with appropriate applications based on the characteristics of the particular client devices in the home network. While this may alleviate the difficulty in keeping the home network and its client devices up to date with the newest applet releases or versions the applets may still communicate to a user separately and the user may need to separately load and execute each applet to access that applet and receive pertinent communications.

Because a local network could have any number of applets provided by different vendors or providers it is also desirable to protect the code of the framework for hosting the applets from the applets themselves. In one example a user interface can be configured to enable an applet that includes hypertext markup language HTML cascading style sheet CSS and JavaScript code to be launched by a user and displayed in an inline web frame e.g. inline frame iFrame of a main web page of the user interface. The applet s JavaScript code can then be allowed to run in the iFrame without accessing the main web page.

An iFrame is an HTML element that places another HTML document in an inline frame that sits in a parent or main HTML page. A sandbox is created by an iFrame to prevent the contents of the iFrame from communicating with the main HTML page. IFrames are often used by websites to load a web page from another site to display advertisements e.g. banner ads animated images Flash content etc. . Web browsers that load plug ins or applets e.g. Adobe Flash or QuickTime into the browser often use iFrames to give a region of a web page to the plug in or applet for its own display.

Although iFrames provide a useful mechanism for hosting applets by a user interface when an applet is not running the applet may still need to communicate with a user to notify the user regarding state changes to a software or hardware entity associated with the local network e.g. printer is low on ink refrigerator needs a new filter another user is trying to initiate a chat session via a chat utility applet a certain device has come online or has gone offline in the local network a certain applet needs to be updated etc. . A state change can include any change related to an entity s properties or characteristics. Accordingly a technique by which an applet can communicate with a user even when the applet is not visible or fully loaded and executing and without interfering with a user interface that hosts the applet is needed.

Embodiments of the present disclosure can resolve many of these issues and potentially others in offering a system for communicating with an applet using an inline web frame which includes a portal container application with a user interface. illustrates one embodiment in which cloud services e.g. portal container services applet provider services and applet identification services provide a framework for hosting device and or service applets that can be displayed and executed in inline web frames of a user interface accessed remotely or locally by a computing device of local network . The system can create a separate inline web frame which can be hidden or not visible to a user in a main web page for each applet associated with the local network if the applet has a corresponding interface file. The hidden inline web frames can be configured to facilitate communication between an interface file of each applet and other hardware and software entities including the portal container application using callback objects injected into the inline web frame. More specifically the system enables an applet to communicate with its parent container or main web page even when a main user interface of the applet is not visible or loaded by using an inline web frame that is pre populated with a callback object exposing an application programming interface API that is available from the main web page.

Turning to is a simplified block diagram illustrating one possible set of details associated with network environment . A portal server is provided in the cloud e.g. WAN and can be configured to provide applet provider services applet identification services and portal container services of network environment . As shown in the example embodiment shown in these services and can be combined and provided by portal server which can include a processor a memory element a network interface controller a portal container application applets an authentication and account module and an applet identification module . In other embodiments services and could be deployed in other suitable arrangements including separate machines for each service or multiple machines for each service.

Smart network host device can include a processor a memory element a network controller interface an off line portal container application downloaded applets and a network state model . Smart network host device which can be configured as a router or a gateway provides access to external networks such as WAN e.g. the Internet and to computing devices of local network . In example network environment smart network host device is connected to WAN interface device e.g. a modem shown in which may be connected to WAN by any appropriate medium including for example digital subscriber lines DSL telephone lines T1 lines T3 lines wireless satellite fiber optics cable Ethernet etc. or any suitable combination thereof.

In example embodiments smart network host device can provide routing capabilities typically implemented by wireless routers to route packets between local network and external networks and between computing devices of local network . Wireless capabilities of smart network host device can be implemented using known wireless standards such as the Institute of Electronics and Electrical Engineers 802.11 standards for wireless local area networking. Antennas coupled to smart network host device and computing devices such as computer can be configured to establish wireless links such as link . Smart network host device may also be configured to implement wired connections to one or more computing devices using known standards such as Ethernet. Furthermore suitable protocols for routing data packets can be implemented including layer switching and layer routing. Other services and protocols such as dynamic host configuration protocol DHCP network address translation NAT etc. may also be implemented in smart network host device .

Network state model of smart network host device represents different entities and related services operating within local network . For example if a computing device connected to smart network host device implements a printer with a scanner and flash memory reader then network state model could include an entry for the computing device and related attributes for a printer service scanner service and file or block device service. In addition new devices can register with smart network host device which then updates network state model to include the new device.

Off line portal container application and downloaded applets can be provided on smart network host device to enable computer to access a local off line version of portal container application even when external network access is unavailable. While certain functionalities of some applets may not be possible without an external network connection other applets that provide services or device functionalities contained within local network can be enabled through off line portal container application . Downloaded applets of smart network host device can include applets previously identified and downloaded from portal server for example when portal container application was previously launched. In certain embodiments applets that require connectivity to an external network to properly function may not be included in downloaded applets .

Computer represents any computing device of local network that may be used to launch portal container application for hosting device and service applets associated with local network . Such devices may typically include for example wireless or wired computer smart phone or tablet . Other computing devices may also be used if they have suitable processing memory and display components e.g. a smart appliance with an embedded tablet in addition to web browser capabilities. Computer can include a processor a memory element a network interface controller and a web browser . Web browser could be a known web browser commonly deployed on personal computers or Macintosh computers that typically operate in a client server model. Web browser is capable of contacting web servers requesting information or resources receiving the requested information or resources and interpreting and displaying received parent container files e.g. HTML documents . A parent container file is a file created by portal container application using a markup language such as HTML to create a main web page and one or more hidden inline web frames within the main web page. A parent container file can be for example an HTML document. Examples of web browser include but are not limited to Microsoft Internet Explorer software Netscape Navigator software Mozilla Firefox software Google Chrome software Apple Safari software etc.

Computer can also be configured with a display device . Display device could include a separate computer monitor or an integrated display screen with any appropriate input mechanism e.g. a keyboard a touch screen a mouse a touchpad a trackball audio input devices etc. . Display device may also be capable of presenting a user interface which could be a graphical user interface GUI created by software.

In embodiments of the present disclosure computer can launch portal container application remotely or locally from local network . Computer could access portal server from local network via smart network host device as indicated by link which could be a wired or wireless link. Alternatively computer could access portal server remotely as indicated by link which could include any available communication pathway that includes wireless links wired links other networks or any suitable combination thereof.

Portal container application and associated modules can be configured to be deployed on any computing device hosting a web browser e.g. computer . In particular portal container application could be configured as a native application implemented directly on computer that can download and update applets from various applet providers in the cloud and generate a user interface on computer . In certain implementations a native application that provides applet identification services and portal container services could potentially improve the user experience on computing devices that utilize radio transmission technologies that could have undesirable transmission rates when downloading data from the Internet e.g. mobile telecommunication technologies such as 3G 3GPP Long Term Evolution 4G etc. . Accordingly it may be desirable for a native application to be deployed in handheld devices and mobile devices such as smart phones and tablets.

In various implementations smart network host device computer and portal server can include software to achieve or to foster the applet communication operations as outlined herein. Note that in one example each of these elements can have an internal structure e.g. processors memory elements network interface controllers etc. to facilitate some of the operations described herein. For example one or more of network interface controllers and may be wireless network interface controllers to enable wireless communication between these elements. In other embodiments these applet communication operations may be executed externally to these elements or included in some other network element to achieve this intended functionality. Alternatively smart network host device computer and or portal server may include this software or reciprocating software that can coordinate with other network elements in order to achieve the operations as outlined herein. In still other embodiments the computing devices and network elements may include any suitable algorithms hardware software components modules interfaces or objects that facilitate the operations thereof.

In operational terms portal container application creates a restricted execution environment or sandbox for applets that run in local network and enables selected communication capabilities for each applet to access other entities associated with the local network when the applet is idle i.e. not fully loaded and executing . Portal container application can provide a user interface on a computing device such as computer for the applets which can be obtained from any applet provider. Authentication and account module allows a user of computer to log into a website hosting the portal container application and authenticate to an account for local network . Any suitable authentication techniques may be employed e.g. user identification and password etc. . Computer can log in to the website that hosts portal container application from local network via smart network host device or remotely from another access point e.g. a router in another local network a router in a public network a modem etc. .

If computer establishes a connection to portal server from local network and is authenticated then a connection between portal container application and smart network host device has already been established. If computer establishes a connection to portal server from a remote network and is authenticated then authentication and account module can provide location information e.g. a network address of smart network host device . For example a network address of smart network host device may be stored in an account associated with local network . A connection can then be established to smart network host device thereby facilitating communication between computer and other computing devices in local network with portal container application generating a user interface for the applets on remote computer .

When a user logs on to the website of portal server through computer locally or remotely in one embodiment smart network host device provides information from network state model regarding the types of computing devices and other network elements configured in local network e.g. the type of routers computers printers scanners card readers gaming consoles tablets smart phones etc. including any that have been recently added. Applet identification module then iterates a list of applets to be downloaded and or updated for the identified local network to which computer is connected. For example when a new device has joined local network applets that are identified to download could include a device applet required to view and manage the new device service applets that the new device supports and version updates to existing applets.

Applets can be in the form of a repository of applets or an applet store that contains the applets to be downloaded to local network . Applets may be provided by the provider controlling portal container application or by third parties who create their own code for their specific devices or services for local networks. Additionally each applet is identified by a universally unique identifier UUID also referred to herein as applet ID which can be generated when the applet is created. Applets identified and downloaded for a particular local network can include both device and service applets and can include applets that are associated with computing devices in the local network applets that a user has purchased applets that have been published and offered without cost that a user has selected or applets that have been automatically identified and selected for the particular network.

Portal container application can create a hidden web frame within a main web page or parent page by generating a portal container file with appropriate instructions. The portal container file could be created in HTML e.g. HTML document or another suitable markup language with instructions for rendering a main web page e.g. main HTML page with hidden inline web frames e.g. iFrames . For ease of reference descriptions herein may specifically refer to HTML documents iFrames main HTML pages and JavaScript to illustrate example implementations of portal container files inline web frames web pages and a scripting language respectively in embodiments of the present disclosure.

A separate hidden iFrame is created for each identified applet that is configured to interface with other entities i.e. devices and or applications associated with local network without being fully loaded. Portal container application configures a hidden iFrame such that code e.g. a callback object can be injected into the hidden iFrame to enable an applet or a portion thereof that is running in the hidden iFrame to communicate with other entities such as the main page smart network host device portal container application and potentially other devices and or applications.

To accomplish this portal container application examines the contents of each identified applet to find the presence of an interface file. In one embodiment the interface file could be a portion of the applet in the form of a JavaScript file e.g. interface.js . If the interface file is present in an applet then portal container application creates an iFrame within the main HTML page of the user interface. An iFrame element is an inline frame used to embed another document within a parent HTML document and can be created in an HTML document with an tag. Cascading Style Sheet CSS is essentially a template that applies formatting and style information to an element of a web page. In CSS a DISPLAY property can be set to NONE for an iFrame or a VISIBILITY property set to HIDDEN so that it does not appear on a display device when the main HTML page is rendered. The use of the DISPLAY NONE setting may be desirable because space is not taken up in the main HTML page.

After creating the hidden iFrame in the HTML document a uniform resource locator URL of the hidden iFrame is set to an HTML source file which causes an HTML page to load into the hidden iFrame when the main HTML page is rendered on a display device e.g. display device of computer . Additionally an applet ID of the applet associated with the iFrame is passed to the iFrame via the URL of the HTML source file that was set as the URL of the iFrame. In one example embodiment the applet ID can be appended to the URL as a URL query parameter.

With reference to is a block diagram that graphically illustrates the operations that can be performed when a web browser e.g. web browser interprets an HTML document created by portal application container . Web browser can create a window object i.e. an open window in a browser for HTML document and an additional window object for each iFrame in HTML document . A main page is rendered with hidden iFrames through . Each of the hidden iFrames through is loaded in main page and corresponds to a unique applet that was identified and determined to have interface file by portal container application .

A representative exploded view of hidden iFrame is illustrated in . An HTML source file is loaded into hidden iFrame as a result of the URL of iFrame being set to the URL of HTML source file by portal container application . HTML source file can be configured to function as a loader file for loading a selected applet. Additionally main page can be configured to construct a JavaScript object in main page shown as callback object and then to populate the object with callback functions i.e. a set of methods such as application program interfaces APIs that can execute code on main page . A callback object containing APIs which corresponds to callback object containing APIs is added to hidden iFrame by main page . In one embodiment callback object can be added to hidden iFrame by setting a global variable within hidden iFrame s window object to the callback object.

The injection of callback object into iFrame by main page enables iFrame to access APIs in order to communicate with devices and or applications in local network . Access to APIs can also enable iFrame to communicate outside local network for example to portal container application . Thus main page effectively makes itself and selected APIs accessible to iFrame .

Any number of callbacks can be constructed in main page and then added to hidden iFrame . For example a single callback as shown in can be used to call all APIs divulged by main page . Alternatively a different callback object could be associated with each API. In another embodiment each callback could contain APIs related to a specific type of function e.g. a callback object containing APIs that communicate with the router a callback object containing APIs that communicate user interface messages to devices etc. .

HTML source file can then dynamically load an interface file of the applet associated with iFrame . If the applet ID has been appended on the URL of the HTML source file as a query parameter then HTML source file can retrieve the URL query parameter and use the applet ID to locate and dynamically load applet interface file e.g. interface.js file of the applet. In one example implementation this can be accomplished using an Asynchronous JavaScript and XML AJAX web development technique to retrieve data from a web server asynchronously in the background without interfering with the display and behavior of main page . An API such as XMLHttpRequest XHR can be invoked to send HTTP or HTTPS requests directly to a web server and to load the server response data directly back into the script thus avoiding full page reloads. After invoking the XHR API to load applet interface file a JavaScript eval function can be invoked to execute applet interface file . Other JavaScript evaluation techniques may also be used e.g. JavaScript Object Notation JSON parsing with functions etc. .

In another implementation a script tag can be dynamically created and added to an HTML Document Object Module DOM of the iFrame. The HTML DOM is a World Wide Web Consortium W3C standard for accessing HTML documents. It is a platform that allows programs and scripts to dynamically access and update the content structure and style of a document.

When applet interface file is loaded and running in hidden iFrame the applet is in an idle state. Applet interface file may communicate with parent container application or smart network host device for example by invoking appropriate methods in callback object thereby allowing applet interface file to push data to portal container application . The set of methods added to callback object become APIs that applet interface file can invoke when the applet is in the idle state. Example APIs could include ReadMessage API and SendMessage API. Thus applet interface file can run in the background without the entire applet being loaded and can communicate with other entities outside of the iFrame in local network by using selected APIs made available by main page of the user interface.

To illustrate example scenarios certain APIs can be configured to communicate with smart network host device in order to reach portal container application . In one example an API exposed to an applet could allow the applet to notify portal container application that the list of devices associated with the applet has been updated. Consequently portal container application can re query smart network host device for a related device list. In another example an API exposed to an applet could enable the applet to notify portal container application the current state of the application. Accordingly portal container application could update a badge i.e. some text that modifies an application s icon to indicate the state of the corresponding application or device on an icon associated with the corresponding device or application.

Once the computing devices and network elements of local network are known and other selected applets free or purchased are known at applet identification module can identify applets to be downloaded to local network . Applet identification module can search applets to identify applet identifiers applet IDs for each applet to download.

When a first applet is identified portal container application can examine the applet and determine whether it contains an applet interface file. If it does not contain an applet interface file then flow proceeds to and a determination is made as to whether there are more applets to be examined for local network . If there are more applets to be examined then flow passes back to to identify the next applet.

If an applet interface file is found at in the currently identified applet then flow proceeds to where portal container application creates a hidden iFrame within a main page of a parent container file e.g. HTML document by using tags. The iFrame can be configured to not display on computer by using the DISPLAY NONE or VISIBILITY HIDDEN setting of CSS. At the applet ID of the current applet to be loaded is provided to the hidden iFrame. In one example implementation the applet ID is appended to the URL of an HTML source file e.g. HTML source file as an HTML query parameter. At the URL of the iFrame can be set to the URL of the HTML source file with the appended applet ID which enables an HTML page to load into the hidden iFrame when web browser interprets HTML source file .

After the URL of the iFrame has been set with the HTML source file URL and appended applet ID then flow passes to where a determination is made as to whether there are more applets to be examined for local network . If all of the applets have been examined then flow proceeds to where HTML document is sent to computer .

After callback object which contains APIs divulged by main page is added to hidden iFrame applet interface file of the applet associated with iFrame is located loaded and executed in hidden iFrame while the applet remains idle. In one embodiment applet interface file may continue to run in the background until a request is made to load the applet. For example applet interface file for a printer applet may be loaded and running in a hidden iFrame to communicate with the printer and users concerning ink levels paper supply etc. When a user selects a print action for the printer the printer applet may be loaded and therefore the applet interface file of the printer applet may no longer need to run in the background.

At each applet interface file in each hidden iFrame through can wait for a communication event while running in the background. A communication event can include detecting an incoming communication to the applet interface file detecting a trigger to initiate outgoing communication and detecting a request to load a corresponding device or service applet.

If an incoming communication is detected by applet interface file then at the communication is received from the associated entity sending the communication. The entity could include for example portal container application smart network host device a computing device in local network or another application or utility. By way of illustration a communication could be received by a chat utility from another user interested in chatting with the user of computer . Another exemplary communication could be received from a router e.g. smart network host device that another computing device e.g. a child s Xbox has come online in local network .

At applet interface file can invoke callback object to access an appropriate API of APIs to respond to the incoming communication. Examples of responses could include invoking callback object to display an appropriate message to a user e.g. User A is requesting a chat session Xbox has joined the network etc. . Once applet interface file responds to the incoming communication it can continue to run in the background in hidden iFrame and to wait for the next communication event at .

If a request is received to launch a device or service applet that is associated with applet interface file then at the requested applet can be loaded and executed. For example if a user decided to launch a chat utility to begin a chat session with another user who requested a chat session then the chat utility could be loaded and executed. Thus allowing applet interface file to continue running may be unnecessary while the chat utility is running. In this scenario in which applet interface file was terminated when its corresponding applet was loaded once the applet is exited e.g. execution is terminated by a user exiting out of the applet the applet may cease being visible to a user. Applet interface file can then be loaded in the hidden iFrame again in order to receive and or communicate events and notifications. In some implementations however applet interface file can continue to run when its corresponding applet has been loaded and is executing. Furthermore portal container application may be configured to allow the user to hide the applet so that it is no longer displayed and or to prevent the applet interface file from running in the background.

If a trigger is detected by applet interface file to initiate outgoing communications then at callback object can be invoked to execute an appropriate one of APIs . Triggers can be time based in some implementations. For example applet interface file that is associated with a printer in the local network could periodically ping the printer using an appropriate API to determine whether the ink levels are satisfactory whether the printer is out of paper etc. After callback object has been invoked to send an outgoing communication applet interface file can continue to run in the background in hidden iFrame and to wait for the next communication event at .

In example implementations at least some portions of the activities related to the system for communicating with an applet using an inline web frame in a network environment outlined herein may be implemented in software in for example portal container application applets authentication and account module applet identification module off line portal container application downloaded applets and web browser . In some embodiments this software could be received or downloaded from a web server or provided on computer readable media in order to provide this system for communicating with an applet using an inline web frame. In some embodiments one or more of these features may be implemented in hardware provided external to these elements or consolidated in any appropriate manner to achieve the intended functionality.

Furthermore the embodiments of the system for communicating with applets described and shown herein may also include suitable interfaces for receiving transmitting and or otherwise communicating data or information in a network environment such as network environment . Additionally some of the processors and memory elements associated with the various network elements may be removed or otherwise consolidated such that a single processor and a single memory location are responsible for certain activities. Alternatively certain processing functions could be separated and separate processors and or physical machines could implement various functionality. For example portal server could be separated into multiple machines to provide applet provider services applet identification services and portal container services . In a general sense the arrangements depicted in the FIGURES may be more logical in their representations whereas a physical architecture may include various permutations combinations and or hybrids of these elements. It is imperative to note that countless possible design configurations can be used to achieve the operational objectives outlined here. Accordingly the associated infrastructure has a myriad of substitute arrangements design choices device possibilities hardware configurations software implementations equipment options etc.

In some of the example embodiments one or more memory elements e.g. memory elements and can store data used for the applet communication operations described herein. This includes the memory element being able to store instructions e.g. software logic code etc. that are executed to carry out the activities described in this Specification. A processor can execute any type of instructions associated with the data to achieve the operations detailed herein in this Specification. In one example one or more processors e.g. processors and could transform an element or an article e.g. data from one state or thing to another state or thing. In another example the activities outlined herein may be implemented with fixed logic or programmable logic e.g. software computer instructions executed by a processor and the elements identified herein could be some type of a programmable processor programmable digital logic e.g. a field programmable gate array FPGA an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM an ASIC that includes digital logic software code electronic instructions flash memory optical disks CD ROMs DVD ROMs magnetic or optical cards other types of machine readable mediums suitable for storing electronic instructions or any suitable combination thereof.

Components of network environment e.g. smart network host device computer and portal server may keep information in any suitable type of memory e.g. random access memory RAM read only memory ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM etc. software hardware or in any other suitable component device element or object where appropriate and based on particular needs. Any of the memory items discussed herein e.g. memory elements should be construed as being encompassed within the broad term memory element. The information being read used tracked sent transmitted communicated or received by network environment could be provided in any database register queue table cache control list or other storage structure all of which can be referenced at any suitable timeframe. Any such storage options may be included within the broad term memory element as used herein. Similarly any of the potential processing elements modules and machines described in this Specification should be construed as being encompassed within the broad term processor. 

Not shown in the FIGURES is additional hardware that may be suitably coupled to processors and and other components in the form of memory management units MMU additional symmetric multiprocessing SMP elements physical memory peripheral component interconnect PCI bus and corresponding bridges small computer system interface SCSI integrated drive electronics IDE elements etc. The network elements of e.g. smart network host device computer and portal server may include any additional suitable hardware software components modules interfaces or objects that facilitate the operations thereof. This may be inclusive of appropriate algorithms and communication protocols that allow for the effective protection and communication of data. Furthermore any suitable operating system may also be configured in the computing devices and network elements to appropriately manage the operation of the hardware components therein.

Note that with the numerous examples provided herein interaction may be described in terms of two three four or more network elements. However this has been done for purposes of clarity and example only. It should be appreciated that the system can be consolidated in any suitable manner. Along similar design alternatives any of the illustrated computers modules components and elements of the FIGURES may be combined in various possible configurations all of which are clearly within the broad scope of this Specification. In certain cases it may be easier to describe one or more of the functionalities of a given set of flows by only referencing a limited number of network elements e.g. as in . It should be appreciated that the system for communicating with applets using an inline web frame as shown in the FIGURES and its teachings are readily scalable and can accommodate a large number of components as well as more complicated sophisticated arrangements and configurations. Accordingly the examples provided should not limit the scope or inhibit the broad teachings of the system as potentially applied to a myriad of other architectures.

It is also important to note that the operations and steps described with reference to the preceding FIGURES illustrate only some of the possible scenarios that may be executed by or within the system. Some of these operations may be deleted or removed where appropriate or these steps may be modified or changed considerably without departing from the scope of the discussed concepts. In addition the timing of these operations may be altered considerably and still achieve the results taught in this disclosure. The preceding operational flows have been offered for purposes of example and discussion. Substantial flexibility is provided by the system in that any suitable arrangements chronologies configurations and timing mechanisms may be provided without departing from the teachings of the discussed concepts.

Numerous other changes substitutions variations alterations and modifications may be ascertained to one skilled in the art and it is intended that the present disclosure encompass all such changes substitutions variations alterations and modifications as falling within the scope of the appended claims.

