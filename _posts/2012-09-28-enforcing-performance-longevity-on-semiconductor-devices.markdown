---

title: Enforcing performance longevity on semiconductor devices
abstract: Technologies for enforcing an expiration policy on an electronic engineering sample component includes a one-time programmable fuse to store a manufacture date of the electronic engineering sample component, another one-time programmable fuse to store an expiration date of the electronic engineering sample component, and a component life management engine to compare a current date of the electronic engineering sample component with the expiration date of the electronic engineering sample component. The component life management engine to disable or lock the electronic engineering sample component in response to determining that the current date of the electronic engineering sample component exceeds the expiration date of the electronic engineering sample component. In some embodiments, a computing device may enforce the expiration policy for the electronic engineering sample component. The computing device may also be communicatively coupled to a remote unlock server and may receive authorization to unlock a disabled engineering sample component.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08901953&OS=08901953&RS=08901953
owner: Intel Corporation
number: 08901953
owner_city: Santa Clara
owner_country: US
publication_date: 20120928
---
Engineering samples are pre production devices loaned by semiconductor device manufacturers to companies and other entities for evaluation interoperability testing and product readiness purposes prior to product launch. Often those samples are of a similar quality and level of operation to production devices. In some cases engineering samples may include additional or proprietary features that are not included in production devices. As such engineering samples are not typically intended for general public use.

To prevent the public distribution of engineering samples semiconductor device manufactures typically only loan samples to companies and other entities subject to specific contractual terms and conditions. For example semiconductor device manufactures generally only loan engineering samples to those Original Equipment Manufacturers OEMs Original Device Manufacturers ODMs and Independent Software Vendors ISVs that have agreed in advance to certain legal disclaimers e.g. regulatory compliance disclosures lack of warranty coverage device ownership statements etc. and conditions e.g. agreements not to sell resell distribute disclose confidential information intended use etc. . Notwithstanding those agreements a number of engineering samples still somehow find their way into the general public where they are distributed sold in the open market or are used in a manner contrary to the intended purpose.

While the concepts of the present disclosure are susceptible to various modifications and alternative forms specific embodiments thereof have been shown by way of example in the drawings and will herein be described in detail. It should be understood however that there is no intent to limit the concepts of the present disclosure to the particular forms disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives consistent with the present disclosure and the appended claims.

In the following description numerous specific details such as logic implementations opcodes means to specify operands resource partitioning sharing duplication implementations types and interrelationships of system components and logic partitioning integration choices are set forth in order to provide a more thorough understanding of the present disclosure. It will be appreciated by one skilled in the art however that embodiments of the disclosure may be practiced without such specific details. In other instances control structures gate level circuits and full software instruction sequences have not been shown in detail in order not to obscure the description of the of the concepts described herein. Those of ordinary skill in the art with the included descriptions will be able to implement appropriate functionality without undue experimentation.

References in the specification to one embodiment an embodiment an example embodiment etc. indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the art to effect such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

Embodiments of the concepts described herein may be implemented in hardware firmware software or any combination thereof. Embodiments implemented in a computer system may include one or more point to point or bus based interconnects between components. Embodiments of the concepts described herein may also be implemented as instructions carried by or stored on one or more machine readable or computer readable storage media which may be read and executed by one or more processors. A machine readable or computer readable storage medium may be embodied as any device mechanism or physical structure for storing or transmitting information in a form readable by a machine e.g. a computing device . For example a machine readable or computer readable storage medium may be embodied as read only memory ROM device s random access memory RAM device s magnetic disk storage media optical storage media flash memory devices mini or micro SD cards memory sticks and others.

In the drawings specific arrangements or orderings of schematic elements such as those representing devices modules instruction blocks and data elements may be shown for ease of description. However it should be understood by those skilled in the art that the specific ordering or arrangement of the schematic elements in the drawings is not meant to imply that a particular order or sequence of processing or separation of processes is required. Further the inclusion of a schematic element in a drawing is not meant to imply that such element is required in all embodiments or that the features represented by such element may not be included in or combined with other elements in some embodiments.

In general schematic elements used to represent instruction blocks may be implemented using any suitable form of machine readable instruction such as software or firmware applications programs functions modules routines processes procedures plug ins applets widgets code fragments and or others and that each such instruction may be implemented using any suitable programming language library application programming interface API and or other software development tools. For example some embodiments may be implemented using Java C and or other programming languages. Similarly schematic elements used to represent data or information may be implemented using any suitable electronic arrangement or structure such as a register data store table record array index hash map tree list graph file of any file type folder directory database and or others.

Further in the drawings where connecting elements such as solid or dashed lines or arrows are used to illustrate a connection relationship or association between or among two or more other schematic elements the absence of any such connecting elements is not meant to imply that no connection relationship or association can exist. In other words some connections relationships or associations between elements may not be shown in the drawings so as not to obscure the disclosure. In addition for ease of illustration a single connecting element may be used to represent multiple connections relationships or associations between elements. For example where a connecting element represents a communication of signals data or instructions it should be understood by those skilled in the art that such element may represent one or multiple signal paths e.g. a bus as may be needed to effect the communication.

Referring now to an illustrative system for enforcing a policy on an engineering sample includes a computing device and an electronic engineering sample component communicatively coupled thereto. The electronic engineering sample component may be embodied as a semiconductor device loaned to an OEM an ODM or an ISV by a semiconductor device manufacturer for evaluation interoperability testing and product readiness purposes prior to launching the device to the general public. For example the electronic engineering sample component may be embodied as a processor motherboard computing device peripheral device electronic device integrated circuit or any other type of electronic device or component manufactured for purposes of testing and evaluation prior to launch e.g. pre production silicon . It should be understood that although the electronic engineering sample component is described as being embodied as a semiconductor device manufactured for pre production testing and evaluation the electronic engineering component may instead be embodied as a semiconductor device intended for sale or use by the general public. For example in such embodiments the electronic engineering sample component may be embodied as a processor motherboard computing device peripheral device electronic device integrated circuit or any other type of electronic device or component manufactured for general consumer use e.g. production silicon .

In some embodiments the electronic engineering sample component may comprise a component of an I O subsystem of the computing device a component or a device communicatively coupled to the I O subsystem of the computing device or all or a portion of a processor e.g. a processor core of the computing device . As discussed in more detail below the electronic engineering sample component may enforce one or more policies as a function of information securely stored in the electronic engineering sample component itself. Such information may be securely stored in one or more one time programmable OTP fuses embedded in the electronic engineering sample component . For example an OTP fuse may be programmed to comprise the date and time e.g. a timestamp corresponding to the date and time that the electronic engineering sample component was manufactured. As discussed in more detail below another OTP fuse may be programmed to comprise a date and time of expiration for the electronic engineering sample component . Additionally or alternatively the electronic engineering sample component may include one or more other OTP fuses which may be configured to include another date and time of expiration or one or more other policies to be enforced on the electronic engineering sample component .

In some embodiments the OTP fuses may be configured by the semiconductor device manufacturer during manufacturing of the electronic engineering sample component . That is one or more of the OTP fuses may be set by the semiconductor manufacturer prior to loaning or otherwise releasing the electronic engineering sample component to an OEM an ODM an ISV or directly into the open market. Additionally or alternatively one or more other OTP fuses may be configured after manufacturing of the electronic engineering sample component . For example the one or more other OTP fuses may be set by the OEM ODM or ISV to which the semiconductor device manufacturer has loaned or otherwise provided the electronic engineering sample component to after manufacturing.

The electronic engineering sample component may comprise logic e.g. firmware software instructions hardware software or any combination thereof to enforce one or more policies that either permit or restrict usage of the electronic engineering sample component in response to one or more reference events occurring or conditions being met. For example in some embodiments the electronic engineering sample component may comprise a policy that dictates the maximum amount of time the electronic engineering sample component may be used. The policy may further set forth an action to take in response to the electronic engineering sample component being used for the maximum amount of time. To do so the electronic engineering sample component may determine whether a timer has expired. In response to making such a determination all functionality of the electronic engineering sample component or a portion thereof may be disabled or otherwise locked. In that way a timed operational limit may be placed on the electronic engineering sample component which effectively ages the electronic engineering sample component . As a result the electronic engineering sample component becomes less valuable and or less desirable on the open market after the timed operational limit has been reached.

Additionally or alternatively the computing device may enforce one or more policies on the electronic engineering sample component as a function of information securely stored in a different component of the computing device . Such information may comprise reprogrammable data stored in secure memory storage e.g. the secure memory storage of of the computing device . In some embodiments the data stored in such secure memory storage of the computing device may comprise one or more of the date and time e.g. a timestamp corresponding to the date and time that the electronic engineering sample component was manufactured the date time the electronic engineering sample component will expire and one or more other policies to be enforced on the electronic engineering sample component by the computing device .

In embodiments wherein the computing device enforces one or more policies for the electronic engineering sample component the system may comprise the computing device the electronic engineering sample component and a remote unlock server as shown in the illustrative embodiment of . In such embodiments the computing device may unlock and or extend an expiration date time of the electronic engineering sample component as a function of communications with the remote unlock server over a network . To do so the computing device may reconfigure and or reprogram the data stored in secure memory storage of the computing device in response to receiving a message from the remote unlock server authorizing the computing device to unlock or extend the expiration date time corresponding to the electronic engineering sample component .

The computing device may be embodied as any type of computing device for processing data. In the illustrative embodiment of the computing device includes a processor an I O subsystem a memory a data storage one or more peripheral devices and an electronic engineering sample component . In some embodiments several of the foregoing components may be incorporated on a motherboard of the computing device while other components may be communicatively coupled to the motherboard via for example a peripheral port. Furthermore it should be appreciated that the computing device may include other components sub components and devices commonly found in a computing device which are not illustrated in for clarity of the description.

The processor of the computing device may be embodied as any type of processor capable of executing software firmware such as a microprocessor digital signal processor microcontroller or the like. The processor is illustratively embodied as a single core processor having a processor core . However in other embodiments the processor may be embodied as a multi core processor having multiple processor cores . Additionally the computing device may include additional processors having one or more processor cores .

The I O subsystem of the computing device may be embodied as circuitry and or components to facilitate input output operations with the processor and or other components of the computing device . In some embodiments the I O subsystem may be embodied as a memory controller hub MCH or northbridge an input output controller hub ICH or southbridge and a firmware device. In such embodiments the firmware device of the I O subsystem may be embodied as a memory device for storing Basic Input Output System BIOS data and or instructions and or other information e.g. a BIOS driver used during booting of the computing device . However in other embodiments I O subsystems having other configurations may be used. For example in some embodiments the I O subsystem may be embodied as a platform controller hub PCH . In such embodiments the memory controller hub MCH may be incorporated in or otherwise associated with the processor and the processor may communicate directly with the memory as shown by the hashed line in . Additionally in other embodiments the I O subsystem may form a portion of a system on a chip SoC and be incorporated along with the processor and other components of the computing device on a single integrated circuit chip.

The processor is communicatively coupled to the I O subsystem via a number of signal paths. These signal paths and other signal paths illustrated in may be embodied as any type of signal paths capable of facilitating communication between the components of the computing device . For example the signal paths may be embodied as any number of wires cables light guides printed circuit board traces via bus intervening devices point to point interconnects and or the like.

The memory of the computing device may be embodied as or otherwise include one or more memory devices or data storage locations including for example dynamic random access memory devices DRAM synchronous dynamic random access memory devices SDRAM double data rate synchronous dynamic random access memory device DDR SDRAM mask read only memory ROM devices erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM devices flash memory devices and or other volatile and or non volatile memory devices. The memory is communicatively coupled to the I O subsystem via a number of signal paths. Although only a single memory device is illustrated in the computing device may include additional memory devices in other embodiments. Various data and software may be stored in the memory device . For example one or more operating systems OS applications programs libraries and drivers that make up the software stack executed by the processor may reside in memory during execution.

The data storage may be embodied as any type of device or devices configured for the short term or long term storage of data such as for example memory devices and circuits memory cards hard disk drives solid state drives or other data storage devices. In embodiments wherein the computing device enforces one or more policies on the electronic engineering sample component the data storage may also be used to store data associated with the electronic engineering sample component .

The peripheral devices of the computing device may include any number of additional input output devices interface devices and or other peripheral devices. For example the peripheral devices may include a display for displaying content to a user a keyboard mouse or other input output peripheral devices. The peripheral devices are communicatively coupled to the I O subsystem via a number of signal paths thereby allowing the I O subsystem and or processor to receive inputs from and send outputs to the peripheral devices .

The electronic engineering sample component may be embodied as any type of semiconductor device or devices loaned to an OEM an ODM or an ISV by a semiconductor device manufacturer for evaluation interoperability testing and product readiness purposes prior to launching the device s to the general public. For example the electronic engineering sample component may be embodied as a processor motherboard computing device peripheral device electronic device integrated circuit or any other type of electronic device or component manufactured for purposes of testing and evaluation prior to launch e.g. pre production silicon . It should be understood that although the electronic engineering sample component is described as being embodied as a semiconductor device manufactured for pre production testing and evaluation the electronic engineering sample component may instead be embodied as a semiconductor device intended for sale or use by the general public. For example in such embodiments the electronic engineering sample component may be embodied as a processor motherboard computing device peripheral device electronic device integrated circuit or any other type of electronic device or component manufactured for general consumer use e.g. production silicon . In some embodiments the electronic engineering sample component may comprise a component of an I O subsystem of the computing device a component or a device communicatively coupled to the I O subsystem of the computing device or all or a portion of a processor of the computing device . As discussed in more detail below the electronic engineering sample component or the computing device may enforce one or more policies as a function of information securely stored in the electronic engineering sample component or in the secure memory of the computing device .

Referring now to one embodiment of an environment of the electronic engineering sample component includes a secure storage one or more one time programmable OTP fuses a component life management engine and a timer module . The electronic engineering sample component may include other modules which provide additional functionality to the electronic engineering sample component or to the computing device . As discussed in more detail below the electronic engineering sample component may also include in some embodiments component expiration policy logic and or component management services logic . It should be understood that the environment and or any of the modules included therein may be implemented in hardware firmware software or any combination thereof.

As discussed the electronic engineering sample component may enforce one or more policies as a function of information securely stored in the electronic engineering sample component . To do so the component life management engine may include logic e.g. firmware software instructions hardware software or any combination thereof to enforce one or more policies that either permit or restrict usage of the electronic engineering sample component in response to one or more reference events occurring or conditions being met. To ensure that enforcement of the policies is not circumvented the component life management engine may be executed upon booting or restarting the electronic engineering sample component or the computing device communicatively coupled thereto. Additionally or alternatively the component life management engine may also be executed upon inserting the electronic engineering sample component into a computing device that is already running. In that way the one or more policies may also be enforced in response to hot plugging and or hot swapping the electronic engineering sample component .

In some embodiments the component life management engine includes the one or more policies that either permit or restrict usage of the electronic engineering sample component . To do so the policies may be embodied as one or more rules that trigger the component life management engine to perform an action in response to one or more reference events occurring or conditions being met. For example a policy of the component life management engine may be embodied as a rule specifying a duration of time e.g. the maximum amount of time the electronic engineering sample component may be used. To determine whether the electronic engineering sample component has been used for the specified duration of time the component life management engine may retrieve a reference date and time from the timer module . As discussed in more detail below the reference date and time retrieved from the timer module may be determined as a function of the date and time that the electronic engineering sample component was manufactured. The component life management engine may also retrieve an expiration date and time corresponding to the electronic engineering sample component . Thereafter the component life management engine may compare the expiration date and time with the reference date and time. In response to determining that the expiration date and time equals or exceeds the reference time the component life management engine may restrict all or a portion of the functionality of the electronic engineering sample component . For example in response to determining that the electronic engineering sample component has been used for the maximum amount of time specified the component life management engine may disable reduce the functionality e.g. reduced processing power degraded quality output limit features etc. or brick or otherwise render the electronic engineering sample component unusable or less desirable. It should be understood that although the component life management engine is described as comprising an expiration policy in the illustrative embodiment the component life management engine may comprise any other type of policy to be enforced on the electronic engineering sample component . For example the component life management engine may comprise a policy setting forth a location that the electronic engineering sample component may be used for what purpose the electronic engineering sample component may be used which components of the computing device are required for use with the electronic engineering sample component or any limitation or condition placed on the usage of the electronic engineering sample component .

The component life management engine may enforce the one or more policies as a function of information securely stored in the electronic engineering sample component itself. To do so the component life management engine may retrieve or otherwise access information stored in the secure storage of the electronic engineering sample component . Such information may be securely stored in one or more one time programmable OTP fuses embedded in the secure storage the electronic engineering sample component . For example an OTP fuse may be programmed to comprise the date and time e.g. a timestamp corresponding to the date and time that the electronic engineering sample component was manufactured. Another OTP fuse may be programmed to comprise a date and time of expiration for the electronic engineering sample component . Additionally or alternatively the electronic engineering sample component may comprise one or more other OTP fuses which may be configured to include another expiration date and time e.g. OTP fuse or one or more other policies to be enforced on the electronic engineering sample component e.g. OTP fuse for example by the component life management engine .

In some embodiments the OTP fuses may be configured by the semiconductor device manufacturer during manufacturing of the electronic engineering sample component . That is one or more of the OTP fuses may be set by the semiconductor manufacturer prior to loaning or otherwise providing the electronic engineering sample component to an OEM an ODM an ISV or directly into the open market. Additionally or alternatively one or more other OTP fuses may be configured after manufacturing of the electronic engineering sample component . For example the one or more other OTP fuses may be set by the OEM ODM or ISV to which the semiconductor device manufacturer has loaned or otherwise provided the electronic engineering sample component to after manufacturing. Additionally in some embodiments one or more of the OTP fuses may override another one of the OTP fuses . For example the OTP fuse may override the OTP fuse .

In embodiments wherein the component life management engine enforces a policy defining a duration in time in which the electronic engineering sample component may be used the component life management engine may retrieve a reference date and time from the timer module . The timer module may keep track of an amount of time that has passed since the electronic engineering sample component was manufactured. To do so the timer module may utilize any number of timers clock signals counters algorithms or any other component of the electronic engineering sample component suitable for determining the passage of time. In some embodiments the timer module may determine an amount of time that has passed e.g. counting up since the occurrence of a particular event such as for example since the electronic engineering sample component was manufactured. In other embodiments the timer module may determine an amount of time remaining e.g. counting down until the occurrence of an event such as for example until the expiration of an expiration date and time.

The component life management engine may initialize the timer module upon first boot of the electronic engineering sample component . To do so the component life management engine may retrieve the date and time that the electronic engineering sample component was manufactured from one of the OTP fuses such as for example the OTP fuse . The component life management engine may then configure the timer module to comprise a reference date and time which may be determined as a function of the date and time in which the electronic engineering sample component was manufactured. Thereafter the component life management engine may compare the reference date time to one or more expiration dates times.

In some embodiments the timer module may comprise a battery . The battery may facilitate maintaining storage of data for the timer module . It should be understood that although the timer module is shown as comprising the battery in the illustrative embodiment the battery may be comprise a separate component of the electronic engineering sample component in some embodiments.

To prevent circumvention of enforcement policies based on the passage of time the component life management engine may comprise the component management services logic . The component management services logic comprises a policy that locks or otherwise disables the electronic engineering sample component in response to the component life management engine detecting that the battery has been removed. In that way attempts to reset the timer module by removing the battery is prevented.

Referring now to at least one embodiment of a method for enforcing an expiration policy on the electronic engineering sample component begins with block . In block the electronic engineering sample component is booted and or restarted. As discussed above the electronic engineering sample component may also be hot swapped and or hot plugged into the computing device in some embodiments. Upon booting restarting or otherwise initializing the electronic engineering sample component the method advances to block .

In block the component life management engine is initialized. The component life management engine may comprise logic e.g. firmware software instructions hardware software or any combination thereof to enforce one or more policies that either permit or restrict usage of the electronic engineering sample component in response to one or more reference events occurring or conditions being met. In some embodiments the component life management engine may enforce a policy setting forth a maximum time that the electronic engineering sample component may be used. To do so the component life management engine may retrieve a manufacture date and time of the electronic engineering sample component from a one time programmable OTP fuse such as for example the OTP fuse . In such embodiments the component life management engine may configure the timer module to comprise the manufacture date and time as an initial reference date and time. The component life management engine may do so during a first boot or initialization of the electronic engineering sample component . The timer module may then continuously increment the reference date and time. After initializing the component life management engine the method advances to block .

In block the component life management engine determines a reference date time. To do so the component life management engine may retrieve the reference date time from the timer module . The method then advances to block .

In block the reference date time is compared to an expiration date time corresponding to the electronic engineering sample component . As discussed above the semiconductor device manufacturer and one or more of an OEM an ODM an ISV may securely store an expiration date time corresponding to the maximum date time for which the electronic engineering sample component may be used. The expiration date time may be securely stored in one or more of the other OTP fuses such as for example the OTP fuse OTP fuse and or the OTP fuse . The component life management engine may retrieve the expiration date time corresponding to the electronic engineering sample component . Thereafter the component life management engine may compare the retrieved expiration date time to the reference date time. The method then advances to block .

In block the component life management engine determines whether the reference date time exceeds the expiration date for the electronic engineering sample component . If at block the component life management engine determines the reference date time does not exceed the expiration date time the method loops back to block to make another determination. If however the component life management engine determines the reference date time exceeds the expiration date time the method advances to block .

In block the component life management engine enforces the policy setting forth the maximum time the electronic engineering sample component may be used. To do so the component life management engine may perform one or more actions to take in response to the electronic engineering sample component being used for the maximum amount of time. For example in block the component life management engine may render the electronic engineering sample component permanently unusable. Additionally or alternatively the component life management engine may shut down the electronic engineering sample component in block . In block the component life management engine may instead lock the electronic engineering sample component . As discussed above the component life management engine may enforce in block one or more other policies on the electronic engineering sample component in some embodiments. In such embodiments the component life management engine may retrieve the one or more other policies and perform the corresponding action.

Referring now to at least one embodiment of a method for preventing the circumvention of an expiration policy enforced on the electronic engineering sample component begins with block . In block the electronic engineering sample component is booted and or restarted. As discussed above the electronic engineering sample component may also be hot swapped and or hot plugged into the computing device in some embodiments. Upon booting restarting or otherwise initializing the electronic engineering sample component the method advances to block .

In block the component life management engine is initialized. As discussed above the component life management engine may comprise logic e.g. firmware software instructions hardware software or any combination thereof to enforce one or more policies that either permit or restrict usage of the electronic engineering sample component in response to one or more reference events occurring or conditions being met. The method then advances to block in which the component life management engine executes component management services logic to prevent the circumvention of the one or more policies. In some embodiments the component management services logic may detect the removal of a battery of the electronic engineering sample component . It should be understood that the component management services logic may perform other actions for preventing circumvention of the one or more policies in some embodiments. The method then advances to block .

In block the component life management engine detects whether the battery has been removed using the component management services logic . If at block the component life management engine determines the battery has been not been removed the method loops back to block to continue detecting whether the battery is removed. If however the component life management engine determines that the battery has been removed the method advances to block in which the component life management engine locks or otherwise disables the electronic engineering sample component . The method then advances to block .

In block the component life management engine determines in some embodiments whether a security engine e.g. a trusted execution environment is enabled on the computing device in which the electronic engineering sample component is operating. In some embodiments the security engine may be utilized to securely unlock or otherwise re enable the electronic engineering sample component which was locked by the component life management engine . If at block the component life management engine determines that a security engine is enabled on the computing device the method advances to block . If however the component life management engine instead determines that a security engine is not enabled on the computing device the electronic engineering sample component remains locked and the method returns to block to continue determining whether a security engine is enabled.

In block the component life management engine may determine whether an authorized unlock code has been received. For example the component life management engine may receive an unlock code from a BIOS authentication screen using the security engine as a secure proxy. The component life management engine may verify the unlock code to determine whether the unlock code is authorized. If at block the component life management engine determines that an unlock code is either not received or not authorized the method returns to block to detect whether the security engine is still enabled on the computing device . On the other hand if the component life management engine determines that an unlock code is received and is authorized the method instead advances to block in which the component life management engine unlocks and or re enables the electronic engineering sample component with the unlock code.

As discussed above in some embodiments the computing device rather than the electronic engineering sample component may enforce the one or more policies for the electronic engineering sample component . To do so the computing device may enforce the one or more policies on the electronic engineering sample component as a function of information securely stored in a different component of the computing device . In such embodiments the computing device may comprise the I O subsystem memory data storage one or more peripheral devices and the electronic engineering sample component illustrated in . In addition to facilitate accessing the information securely stored in components other than the electronic engineering sample component the computing device may also include a security engine a secure environment communication circuitry the network and the remote unlock server as illustrated in .

The I O subsystem may comprise the security engine in some embodiments. The security engine may be embodied as a microprocessor such as a security co processor that operates independently of the processor . In such embodiments the security engine comprises the component life management engine which as described above comprises logic e.g. firmware software instructions hardware software or any combination thereof to enforce one or more policies that either permit or restrict usage of the electronic engineering sample component in response to one or more reference events occurring or conditions being met.

In some embodiments the I O subsystem may also comprise the secure environment which may be provided by the security engine . The secure environment may be a secure and isolated environment that is accessible to the security engine but inaccessible to the processor and other components of the computing device . The secure environment may comprise a component of the I O subsystem of the computing device or a component of the processor of the computing device . In some embodiments the secure environment includes radio frequency identification RFID logic . The RFID logic comprises logic e.g. firmware software instructions hardware software or any combination thereof to facilitate secure communications with devices external to the computing device . For example in some embodiments the RFID logic may be used to securely update tracking information corresponding to the electronic engineering sample component after being loaned out by a semiconductor device manufacturer.

In some embodiments the secure environment also includes a timer module . The timer module may keep track of a current and or a reference date time of the computing device . To do so the timer module may utilize any number of timers clock signals counters algorithms or any other component of the computing device suitable for determining the current date time of the electronic engineering sample component . In some embodiments the timer module may determine an amount of time that has passed e.g. counting up since the occurrence of a particular event such as for example since the electronic engineering sample component was manufactured. In other embodiments the timer module may determine an amount of time remaining e.g. counting down until the occurrence of an event such as for example until the expiration of an expiration date and time.

The secure environment may also comprise a secure memory in some embodiments. In such embodiments the computing device may enforce the one or more policies on the electronic engineering sample component as a function of reprogrammable information securely stored in the secure memory . For example the secure memory may comprise a manufacture date and time which may be indicative of the date and time the electronic engineering sample component was manufactured. The secure memory may also comprise an expiration date and time which may be indicative of a date and time in which the electronic engineering sample component can no longer be used. In some embodiments the secure memory may comprise another expiration date and time which may be indicative of a different date and time in which the electronic engineering sample component can no longer be used.

In some embodiments the manufacture date and time and the expiration date time may be stored in the secure memory by the semiconductor manufacturer prior to loaning or otherwise providing the electronic engineering sample component to an OEM an ODM an ISV or directly into the open market. However the another expiration date and time may be configured after manufacturing of the electronic engineering sample component . For example the another expiration date time may be stored in the secure memory by the OEM ODM or ISV to which the semiconductor device manufacturer has loaned or otherwise provided the electronic engineering sample component to after manufacturing. As discussed in more detail below the component life management engine may retrieve the expiration date time from the secure memory . The component life management engine may then compare the expiration date time to a reference date and time which may correspond to the manufacture date and time of the electronic engineering sample component . If the reference date and time exceeds the expiration date time the component life management engine may lock or otherwise disable the electronic engineering sample component .

In some embodiments the secure memory may also include tracking data . The tracking data may comprise information corresponding to the distribution of the electronic engineering sample component . Similar to the another expiration date and time the tracking data may be set by the OEM ODM or ISV to which the semiconductor device manufacturer has loaned or otherwise provided the electronic engineering sample component to after manufacturing. To do so the OEM ODM or ISV may use the RFID logic to securely update e.g. via a password protected communication the secure memory to include the tracking data .

The communication circuitry of the computing device may be embodied as any number of devices and circuitry for enabling communications between the computing device one or more remote computing devices over a network . For example the communication circuitry may enable communications between the computing device and the remote unlock server over the network . The communication circuitry may be embodied as a network interface controller NIC in some embodiments. The network may be embodied as any number of various wired and or wireless communication networks. For example the network may be embodied as or otherwise include a local area network LAN a wide area network WAN a mobile network or a publicly accessible global network such as the Internet. Additionally the network may include any number of additional devices to facilitate communication between the computing device and the remote computing devices. The computing device and the remote computing devices may use any suitable communication protocol to communicate with each other over the network depending on for example the particular type of network s .

The remote unlock server may be embodied as any type of server capable of performing the functions described herein. As such the remote unlock server may include various hardware and software components e.g. a processor memory and communication circuitry typically found in a server for communicating storing maintaining and transferring data over a network. The remote unlock server may receive a request through the network to unlock and or extend an expiration time of the electronic engineering sample component . After authenticating the request or the identity of the requestor the remote unlock server may transmit a response authorizing the unlocking of the electronic engineering sample component or extending the corresponding expiration date time.

Referring now to at least one embodiment of a method for managing and enforcing an expiration policy on the electronic engineering sample component using the computing device and the remote unlock server begins with block . In block the electronic engineering sample component is booted and or restarted. As discussed above the electronic engineering sample component may also be hot swapped and or hot plugged into the computing device in some embodiments. Upon booting restarting or otherwise initializing the electronic engineering sample component the method advances to block .

In block the component life management engine is initialized. The component life management engine may comprise logic e.g. firmware software instructions hardware software or any combination thereof to enforce one or more policies that either permit or restrict usage of the electronic engineering sample component in response to one or more reference events occurring or conditions being met. In some embodiments the component life management engine may enforce a policy setting forth a maximum time that the electronic engineering sample component may be used. To do so the component life management engine may retrieve a manufacture date and time of the electronic engineering sample component from the secure memory . In such embodiments the component life management engine may configure a timer module to comprise a reference date and time as a function of the manufacture date and time of the electronic engineering sample component . The component life management engine may do so during a first boot or initialization of the electronic engineering sample component . After initializing the component life management engine the method advances to block .

In block the component life management engine determines a reference date time. To do so the component life management engine may retrieve the reference date time from the timer module . The method then advances to block .

In block the reference date time is compared to an expiration date time corresponding to the electronic engineering sample component . As discussed above the semiconductor device manufacturer and one or more of an OEM an ODM an ISV may securely store an expiration date time corresponding to the maximum date time for which the electronic engineering sample component may be used. The expiration date time may be securely stored in the secure memory . The component life management engine may retrieve the expiration date time corresponding to the electronic engineering sample component . Thereafter the component life management engine may compare the retrieved expiration date time to the reference date time. The method then advances to block .

In block the component life management engine determines whether the reference date time exceeds the expiration date time for the electronic engineering sample component . If at block the component life management engine determines the reference date time does not exceed the expiration date time the method loops back to block to make another determination. If however the component life management engine determines the reference date time exceeds the expiration date time the method advances to block .

In block the component life management engine enforces the policy setting forth the maximum time the electronic engineering sample component may be used. To do so the component life management engine may perform one or more actions to take in response to the electronic engineering sample component being used for the maximum amount of time. For example in block the component life management engine may render the electronic engineering sample component permanently unusable. Additionally or alternatively the component life management engine may shut down the electronic engineering sample component in block . In block the component life management engine may instead lock the electronic engineering sample component . The component life management engine may enforce one or more other policies on the electronic engineering sample component in some embodiments. The method then advances to block .

In block the component life management engine may determine whether a request to unlock and or extend the expiration date time of the electronic engineering sample component has been received. In some embodiments the component life management engine may receive the request from a BIOS authentication screen using the security engine as a secure proxy. The request may comprise an unlock code in some embodiments. If at block the component life management engine determines that a request to unlock and or extend the expiration date time of the electronic engineering sample component has been received the method advances to block . If however it is determined a request has not been received the method returns to block to monitor for the receipt of a request to unlock or extend the expiration date time of the electronic engineering sample component .

In block the component life management engine may determine whether the request to unlock or extend the expiration date time of the electronic engineering sample component is authorized. To do so the component life management engine may verify the unlock code embodied within the request. If at block the component life management engine determines that the unlock code is not authorized the method returns to block to monitor for the receipt of another request to unlock or extend the expiration date time of the electronic engineering sample component . If however the component life management engine determines at block that the unlock code is authorized the method advances to block in which the component life management engine unlocks and or re enables the electronic engineering sample component using the unlock code.

Illustrative examples of the devices systems and methods disclosed herein are provided below. An embodiment of the devices systems and methods may include any one or more and any combination of the examples described below.

Example 1 includes an electronic engineering sample component including a first one time programmable fuse to store a manufacture date corresponding to the electronic engineering sample component a second one time programmable fuse to store an expiration date corresponding to the electronic engineering sample component a timer module to increment a timer the timer having an initial date value corresponding to the manufacture date of the electronic engineering sample component and a component life management engine to enforce a policy as a function of a current date value of the timer and the expiration date corresponding to the electronic engineering sample component wherein the component life management engine further to disable the electronic engineering sample component in response to the current date value of the timer exceeding the expiration date.

Example 2 includes the subject matter of Example 1 and wherein the component life management engine further to compare the current date value of the timer with the expiration date corresponding to the electronic engineering sample component.

Example 3 includes the subject matter of any of Examples 1 and 2 and wherein to disable the electronic engineering sample component in response to the current date value of the timer exceeding the expiration date includes one or more of to lock shut down and permanently disable the electronic engineering sample component.

Example 4 includes the subject matter of any of Examples 1 3 and wherein the component life management engine further to i retrieve the manufacture date corresponding to the electronic engineering sample component from the first one time programmable fuse upon first initialization of the of the electronic engineering sample component and ii configure the initial date value of the timer to comprise the retrieved manufacture date corresponding to the electronic engineering sample component.

Example 5 includes the subject matter of any of Examples 1 4 and wherein the timer module includes a battery to preserve the current date value of the timer and wherein the component life management engine includes component management services logic to detect removal of the battery the component life management engine to disable the electronic engineering sample component in response to detecting the removal of the battery from the timer module.

Example 6 includes the subject matter of any of Examples 1 5 and wherein the electronic engineering sample component includes a processor or another component of a computing device.

Example 7 includes the subject matter of any of Examples 1 6 and wherein the electronic engineering sample component includes a processor of a computing device and wherein to disable the electronic engineering sample component in response to the current date value of the timer exceeding the expiration date includes to lock the electronic engineering sample component.

Example 8 includes the subject matter of any of Examples 1 7 and wherein the component life management engine further to i determine whether a security engine of the computing device is enabled in response to the electronic engineering sample component being locked ii receive an unlock code from a basic input basic output system of the computing device using the security engine as a secure proxy in response to the electronic engineering sample component being locked iii determine whether the unlock code is authorized in response to receiving the unlock code from the basic input basic output system and iv unlock the electronic engineering sample component in response to determining that the unlock code is authorized.

Example 9 includes the subject matter of any of Examples 1 8 and further including a third one time programmable fuse to store another expiration date corresponding to the electronic engineering sample component the another expiration date corresponding to a different expiration date of the electronic engineering sample component.

Example 10 includes the subject matter of any of Examples 1 9 and wherein the manufacture date the expiration date the initial date value and the current date value comprise a manufacture date and time an expiration date and time an initial date and time value and a current date and time value.

Example 11 includes the subject matter of any of Examples 1 10 and wherein the component life management engine further to i enforce a usage policy as a function of a current use of the electronic engineering sample component and an intended use of the electronic engineering sample component and ii disable the electronic engineering sample component in response to the current use exceeding the intended use.

Example 12 includes a method for enforcing a policy with an electronic engineering sample component including storing a manufacture date corresponding to the electronic engineering sample component in a first one time programmable fuse storing an expiration date corresponding to the electronic engineering sample component in a second one time programmable fuse incrementing a timer having an initial date value corresponding to the manufacture date of the electronic engineering sample component enforcing an expiration policy as a function of a current date value of the timer and the expiration date corresponding to the electronic engineering sample component and disabling the electronic engineering sample component in response to the current date value of the timer exceeding the expiration date.

Example 13 includes the subject matter of Example 12 and further including comparing the current date value of the timer with the expiration date corresponding to the electronic engineering sample component.

Example 14 includes the subject matter of any of Examples 12 and 13 and wherein disabling the electronic engineering sample component in response to the current date value of the timer exceeding the expiration date includes one or more of locking shutting down and permanently disabling the electronic engineering sample component.

Example 15 includes the subject matter of any of Examples 12 14 and further including retrieving the manufacture date corresponding to the electronic engineering sample component from the first one time programmable fuse upon first initialization of the of the electronic engineering sample component and configuring the initial date value of the timer to comprise the retrieved manufacture date corresponding to the electronic engineering sample component.

Example 16 includes the subject matter of any of Examples 12 15 and further including preserving the current date value of the timer with a battery of the timer detecting removal of the battery of the timer and disabling the electronic engineering sample component in response to detecting the removal of the battery from the timer.

Example 17 includes the subject matter of any of Examples 12 16 and wherein the electronic engineering sample component includes a processor or another component of a computing device.

Example 18 includes the subject matter of any of Examples 12 17 and wherein the electronic engineering sample component includes a processor of a computing device and wherein disabling the electronic engineering sample component in response to the current date value of the timer exceeding the expiration date includes locking the electronic engineering sample component.

Example 19 includes the subject matter of any of Examples 12 18 and further including determining whether a security engine of the computing device is enabled in response to the electronic engineering sample component being locked receiving an unlock code from a basic input basic output system of the computing device using the security engine as a secure proxy in response to the electronic engineering sample component being locked determining whether the unlock code is authorized in response to receiving the unlock code from the basic input basic output system and unlocking the electronic engineering sample component in response to determining that the unlock code is authorized.

Example 20 includes the subject matter of any of Examples 12 19 and further including storing another expiration date corresponding to the electronic engineering sample component the another expiration date corresponding to a different expiration date of the electronic engineering sample component.

Example 21 includes the subject matter of any of Examples 12 20 and further including enforcing a usage policy as a function of a current use of the electronic engineering sample component and an intended use of the electronic engineering sample component and disabling the electronic engineering sample component in response to the current use exceeding the intended use.

Example 22 includes the subject matter of any of Examples 12 21 and wherein the manufacture date the expiration date the initial date value and the current date value comprise a manufacture date and time an expiration date and time an initial date and time value and a current date and time value.

Example 23 includes a computing device for enforcing a policy with an electronic engineering sample component the computing device including a processor and a memory having stored therein a plurality of instructions that when executed by the processor cause the computing device to perform the method of any of Examples 12 22.

Example 24 includes one or more machine readable storage media including a plurality of instructions stored thereon that in response to being executed result in a computing device performing the method of any of Examples 12 22.

Example 25 includes a computing device for enforcing a policy on an electronic engineering sample component including a first processor an electronic engineering sample component a security engine including a second processor to operate independently of the first processor a secure memory accessible to the security engine and inaccessible to the first processor or other components of the computing device the secure memory to store i a manufacture date corresponding to the electronic engineering sample component and ii an expiration date corresponding to the electronic engineering sample component a timer module to increment a timer the timer having an initial date value corresponding to the manufacture date of the electronic engineering sample component and wherein the security engine further to enforce an expiration policy as a function of a current date value of the timer and the expiration date corresponding to the electronic engineering sample component.

Example 26 includes the subject matter of Example 25 and wherein the security engine further to compare the current date value of the timer with the expiration date corresponding to the electronic engineering sample component.

Example 27 includes the subject matter of any of Examples 25 and 26 and wherein to enforce an expiration policy includes one or more of to lock to shut down and to permanently disable the electronic engineering sample component in response to the current date value of the timer exceeding the expiration date.

Example 28 includes the subject matter of any of Examples 25 27 and wherein the security engine further to i retrieve the manufacture date corresponding to the electronic engineering sample component from secure memory upon first initialization of the electronic engineering sample component and ii configure the initial date value of the timer to comprise the retrieved manufacture date corresponding to the electronic engineering sample component.

Example 29 includes the subject matter of any of Examples 25 28 and wherein the electronic engineering sample component includes a processor or another component of the computing device.

Example 30 includes the subject matter of any of Examples 25 29 and wherein the electronic engineering sample component includes a processor of the computing device and wherein to enforce an expiration policy includes to disable the electronic engineering sample component in response to the current date value of the timer exceeding the expiration date includes to lock the electronic engineering sample component.

Example 31 includes the subject matter of any of Examples 25 30 and wherein the security engine further to i receive an unlock code from a remote unlock server in response to the electronic engineering sample component being locked ii determine whether the unlock code is authorized in response to receiving the unlock code from the remote unlock server and iii unlock the electronic engineering sample component in response to determining that the unlock code is authorized.

Example 32 includes the subject matter of any of Examples 25 31 and wherein the secure memory further to store another expiration date corresponding to the electronic engineering sample component the another expiration date corresponding to a different expiration date of the electronic engineering sample component.

Example 33 includes the subject matter of any of Examples 25 32 and wherein the manufacture date the expiration date the initial date value and the current date value comprise a manufacture date and time an expiration date and time an initial date and time value and a current date and time value.

Example 34 includes the subject matter of any of Examples 25 33 and wherein the secure memory further to store tracking data corresponding to the electronic engineering sample component.

Example 35 includes the subject matter of any of Examples 25 34 and further including radio frequency identification circuitry to securely receive the tracking data and wherein the security engine further to store the received tracking data in the secure memory of the computing device.

Example 36 includes the subject matter of any of Examples 25 35 and wherein the security engine further to i enforce a usage policy as a function of a current use of the electronic engineering sample component and an intended use of the electronic engineering sample component and ii disable the electronic engineering sample component in response to the current use exceeding the intended use.

Example 37 includes a method for enforcing a policy on an electronic engineering sample component including storing a manufacture date corresponding to the electronic engineering sample component in a secure memory of a computing device storing an expiration date corresponding to the electronic engineering sample component in the secure memory of the computing device incrementing a timer having an initial date value corresponding to the manufacture date of the electronic engineering sample component enforcing by a security engine of the computing device an expiration policy as a function of a current date value of the timer and the expiration date corresponding to the electronic engineering sample component and disabling by the security engine the electronic engineering sample component in response to the current date value of the timer exceeding the expiration date.

Example 38 includes the subject matter of Example 37 and further including comparing by the security engine the current date value of the timer with the expiration date corresponding to the electronic engineering sample component.

Example 39 includes the subject matter of any of Examples 37 and 38 and wherein disabling the electronic engineering sample component in response to the current date value of the timer exceeding the expiration date includes one or more of locking shutting down and permanently disabling the electronic engineering sample component.

Example 40 includes the subject matter of any of Examples 37 39 and further including retrieving by the security engine the manufacture date corresponding to the electronic engineering sample component from secure memory upon first initialization of the of the electronic engineering sample component and configuring by the security engine the initial date value of the timer to comprise the retrieved manufacture date corresponding to the electronic engineering sample component.

Example 41 includes the subject matter of any of Examples 37 40 and wherein the electronic engineering sample component includes a processor or another component of the computing device.

Example 42 includes the subject matter of any of Examples 37 41 and wherein the electronic engineering sample component includes a processor of the computing device and wherein disabling the electronic engineering sample component in response to the current date value of the timer exceeding the expiration date includes locking the electronic engineering sample component.

Example 43 includes the subject matter of any of Examples 37 42 and further including receiving by the security engine an unlock code from a remote unlock server in response to the electronic engineering sample component being locked determining by the security engine whether the unlock code is authorized in response to receiving the unlock code from the remote unlock server and unlocking by the security engine the electronic engineering sample component in response to determining that the unlock code is authorized.

Example 44 includes the subject matter of any of Examples 37 43 and further including storing another expiration date corresponding to the electronic engineering sample component in the secure memory of the computing device the another expiration date corresponding to a different expiration date of the electronic engineering sample component.

Example 45 includes the subject matter of any of Examples 37 44 and further including enforcing by the security engine a usage policy as a function of a current use of the electronic engineering sample component and an intended use of the electronic engineering sample component and disabling by the security engine the electronic engineering sample component in response to the current use exceeding the intended use.

Example 46 includes the subject matter of any of Examples 37 45 and wherein the manufacture date the expiration date the initial date value and the current date value comprise a manufacture date and time an expiration date and time an initial date and time value and a current date and time value.

Example 47 includes the subject matter of any of Examples 37 46 and further including storing tracking data corresponding to the electronic engineering sample component in the secure memory of the computing device.

Example 48 includes the subject matter of any of Examples 37 47 and further including securely receiving the tracking data with radio frequency identification circuitry and storing the received tracking data in the secure memory of the computing device.

Example 49 includes a computing device for enforcing a policy on an electronic engineering sample component the computing device including a processor and a memory having stored therein a plurality of instructions that when executed by the processor cause the computing device to perform the method of any of Examples 37 48.

Example 50 includes one or more machine readable storage media including a plurality of instructions stored thereon that in response to being executed result in a computing device performing the method of any of Examples 37 48.

