---

title: Delay of display event based on user gaze
abstract: Methods and systems of delaying the execution of a display event based on a detected user gaze are provided. Display events may be generated and executed to change a user interface of a display. For example, an autocorrect algorithm can automatically replace a typed word with a corrected word in a text field, generating a display event that causes the corrected word to be displayed instead of the typed word. Such a display event may be executed as soon as possible after its generation. However, a gaze detection device can obtain information that indicates a user is not looking at the typed word on the display. In such a situation, it may be more intuitive to delay the execution of the display event until the gaze information indicates that the user is looking at the typed word.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09189064&OS=09189064&RS=09189064
owner: Apple Inc.
number: 09189064
owner_city: Cupertino
owner_country: US
publication_date: 20120905
---
An electronic device can include a display that displays content intended to be viewed by a user. The content can change based on changing context. For example when an instant message is received by the electronic device a pop up notification can be displayed indicating to the user that a new message has been received. However if the user is not looking at the portion of the display with the pop up notification or not looking at the display at all the user may miss the notification altogether.

This relates to delaying the execution of a display event based on a detected user gaze. Display events may be generated and executed to change a user interface of a display. For example an autocorrect algorithm can automatically replace a typed word with a corrected word in a text field generating a display event that causes the corrected word to be displayed instead of the typed word. Such a display event may be executed as soon as possible after its generation. However a gaze detection device can obtain information that indicates a user is not looking at the typed word on the display. For example the user may be looking at a keyboard. In such a situation it may be more intuitive to delay the execution of the display event until the gaze information indicates that the user is looking at the typed word.

In the following description of examples reference is made to the accompanying drawings which form a part hereof and in which it is shown by way of illustration specific examples that can be practiced. It is to be understood that other examples can be used and structural changes can be made without departing from the scope of the disclosed examples.

Various examples relate to delaying the execution of a display event based on a detected user gaze. Display events may be generated and executed to change a user interface of a display. For example an autocorrect algorithm can automatically replace a typed word with a corrected word in a text field generating a display event that causes the corrected word to be displayed instead of the typed word. Such a display event may be executed as soon as possible after its generation. However a gaze detection device can obtain information that indicates a user is not looking at the typed word on the display. For example the user may be looking at a keyboard. In such a situation it may be more intuitive to delay the execution of the display event until the gaze information indicates that the user is looking at the typed word.

Although examples disclosed herein may be described and illustrated herein primarily in terms of display events it should be understood that the examples are not so limited but are additionally applicable to events of electronic devices in general whether or not the events are related to a display. For example non display events can include sending data from one module to another modifying or processing stored data initiating or ending a process and the like.

In some examples gaze information can be obtained from a gaze detection device and the execution of the display event can be delayed based on the gaze information. For example gaze information can include a gaze region on the display . The gaze region can indicate a location on the display where a user is looking. Additionally the gaze region can indicate that a user is not looking at the display and instead indicate that the user is looking at for example a keyboard or a physical document among other possibilities. In some examples the execution of the display event can be delayed until gaze information indicates that a user is looking at the display. In some examples a gaze region may be a single position. A gaze region may be represented by a single coordinate on the display a coordinate and radius or coordinate vertices of a polygon among other possibilities. Although gaze region is illustrated as an oval or circular in the figures the gaze region may not be displayed on the display according to some examples.

In some examples the display event can be associated with a target region of the display and the execution of the display event can be delayed until the gaze region falls within the associated target region . In some examples the associated target region can include the portion of the display where the display event will take place. For example target region includes the portion of the display where the corrected word quick would be displayed in place of the typed word quicj . In some examples the associated target region may include the entire display. In such an example a display event can be delayed until gaze information indicates that a user is looking at the display. In some examples it can be determined that a gaze region falls within a target region if the gaze region merely overlaps with the target region. In some examples a target region may be a single position. A target region may be represented by a single coordinate on the display a coordinate and radius or coordinate vertices of a polygon among other possibilities. Although the target region is illustrated as a rectangle in the figures the target region may not be displayed on the display according to some examples.

Gaze information can be obtained from a gaze detection device and the execution of the display event can be delayed based on the gaze information. For example gaze information can include a gaze region on the display .

In some examples the display event can be associated with a target region of the display and the execution of the display event can be delayed until the gaze region falls within the associated target region . For example the display event can be associated with the target region encompassing the row of icons including the mail icon and the message icon . Other examples may include different associated target regions.

Examples of the disclosure can be applied to events other than those described above such as displayed badges or pop up notifications for voice mail message news alerts software or application updates and the like. In other examples the display can remain dark or dimmed until the gaze region overlaps the display. Non display events can include sending data from one module to another modifying or processing stored data initiating or ending a process and the like.

First a display event can be generated step . In some examples the generation of an event can include storing information and parameters of the event and can be a separate process from the execution of a previously generated event. The display event can be queued for execution step . Queuing an event for execution may include adding the event to an event queue. In some examples queuing an event for execution may include merely marking the event for execution or providing a time for execution of the event. A target region associated with the display event may be determined step . Determining the target region may include obtaining a definition of the target region associated with the display event. In some examples determining the target region may include obtaining a position or bounding box associated with the display event.

User gaze information may be obtained step . User gaze information may include a gaze region as discussed above. User gaze information may be obtained from a gaze detection device such as a camera or other optical device. Obtaining user gaze information may include processing an image obtained from an optical device according to some examples. Some existing gaze detection techniques can include transmitting infrared waves to an individual s retina and sensing reflected infrared waves with a camera to determine the location of the individual s pupil and lens. Infrared light can be reflected from a user s face but absorbed by a user s pupils. Therefore the points of light absorption can be detected as eyes. Alternatively the infrared data can be inverted and then the pupils will stand out as very bright circles. The eye position can be used to determine gaze information including a gaze region on a display.

It can be determined whether the user gaze overlaps the target region associated with the display event step . This determination can be based on a comparison of the target region and the gaze region to determine any overlap. In some examples the area of the overlapping region can be compared to a threshold area to determine whether the user gaze overlaps the target region. This overlap determination can be made in a variety of other ways such as whether the gaze region is entirely inside the target region whether the gaze region is partially inside the target region e.g. some percentage of the gaze region is inside the target region whether a centroid of the gaze region is inside the target region etc.

If the gaze is determined to overlap the target region the queued display event can be executed step . Executing the display event can include changing the user interface of the display according to the display event. Changing the user interface can include adding and or removing one or more user interface objects from the display. Additionally changing the user interface can include moving or otherwise animating one or more user interface objects. In some examples executing the display event can include removing the display event from an event queue.

If the gaze is determined not to overlap the target region the execution of the queued display event can be delayed step . Delaying the execution of the display event can include moving the display event further back in an event queue. In some examples delaying the execution of the display event can include queuing the display event for later execution. In some examples delaying the execution of the display event can include providing a later time for execution. In some examples delaying execution of the display event can include merely not executing the display event when it comes up for execution e.g. when it is at the front of the event queue . After delaying the execution of the queued display event additional user gaze information can be obtained step and it can be determined whether the gaze overlaps the target region step to see whether the execution of the display event should be delayed further.

The examples discussed above can be implemented in one or more Application Programming Interfaces APIs . An API is an interface implemented by a program code component or hardware component hereinafter API implementing component that allows a different program code component or hardware component hereinafter API calling component to access and use one or more functions methods procedures data structures classes and or other services provided by the API implementing component. An API can define one or more parameters that are passed between the API calling component and the API implementing component.

The above described features can be implemented as part of an application program interface API that can allow it to be incorporated into different applications e.g. spreadsheet apps utilizing touch input as an input mechanism. An API can allow a developer of an API calling component which may be a third party developer to leverage specified features such as those described above provided by an API implementing component. There may be one API calling component or there may be more than one such component. An API can be a source code interface that a computer system or program library provides in order to support requests for services from an application. An operating system OS can have multiple APIs to allow applications running on the OS to call one or more of those APIs and a service such as a program library can have multiple APIs to allow an application that uses the service to call one or more of those APIs. An API can be specified in terms of a programming language that can be interpreted or compiled when an application is built.

In some examples the API implementing component may provide more than one API each providing a different view of the functionality implemented by the API implementing component or with different aspects that access different aspects of the functionality implemented by the API implementing component. For example one API of an API implementing component can provide a first set of functions and can be exposed to third party developers and another API of the API implementing component can be hidden not exposed and provide a subset of the first set of functions and also provide another set of functions such as testing or debugging functions which are not in the first set of functions. In other examples the API implementing component may itself call one or more other components via an underlying API and thus be both an API calling component and an API implementing component.

An API defines the language and parameters that API calling components use when accessing and using specified features of the API implementing component. For example an API calling component accesses the specified features of the API implementing component through one or more API calls or invocations embodied for example by function or method calls exposed by the API and passes data and control information using parameters via the API calls or invocations. The API implementing component may return a value through the API in response to an API call from an API calling component. While the API defines the syntax and result of an API call e.g. how to invoke the API call and what the API call does the API may not reveal how the API call accomplishes the function specified by the API call. Various API calls are transferred via the one or more application programming interfaces between the calling API calling component and an API implementing component. Transferring the API calls may include issuing initiating invoking calling receiving returning or responding to the function calls or messages in other words transferring can describe actions by either of the API calling component or the API implementing component. The function calls or other invocations of the API may send or receive one or more parameters through a parameter list or other structure. A parameter can be a constant key data structure object object class variable data type pointer array list or a pointer to a function or method or another way to reference a data or other item to be passed via the API.

Furthermore data types or classes may be provided by the API and implemented by the API implementing component. Thus the API calling component may declare variables use pointers to use or instantiate constant values of such types or classes by using definitions provided in the API.

Generally an API can be used to access a service or data provided by the API implementing component or to initiate performance of an operation or computation provided by the API implementing component. By way of example the API implementing component and the API calling component may each be any one of an operating system a library a device driver an API an application program or other module it should be understood that the API implementing component and the API calling component may be the same or different type of module from each other . API implementing components may in some cases be embodied at least in part in firmware microcode or other hardware logic. In some examples an API may allow a client program to use the services provided by a Software Development Kit SDK library. In other examples an application or other client program may use an API provided by an Application Framework. In these examples the application or client program may incorporate calls to functions or methods provided by the SDK and provided by the API or use data types or objects defined in the SDK and provided by the API. An Application Framework may in these examples provide a main event loop for a program that responds to various events defined by the Framework. The API allows the application to specify the events and the responses to the events using the Application Framework. In some implementations an API call can report to an application the capabilities or state of a hardware device including those related to aspects such as input capabilities and state output capabilities and state processing capability power state storage capacity and state communications capability etc. and the API may be implemented in part by firmware microcode or other low level logic that executes in part on the hardware component.

The API calling component may be a local component i.e. on the same data processing system as the API implementing component or a remote component i.e. on a different data processing system from the API implementing component that communicates with the API implementing component through the API over a network. It should be understood that an API implementing component may also act as an API calling component i.e. it may make API calls to an API exposed by a different API implementing component and an API calling component may also act as an API implementing component by implementing an API that is exposed to a different API calling component.

The API may allow multiple API calling components written in different programming languages to communicate with the API implementing component thus the API may include features for translating calls and returns between the API implementing component and the API calling component however the API may be implemented in terms of a specific programming language. An API calling component can in one embodiment call APIs from different providers such as a set of APIs from an OS provider and another set of APIs from a plug in provider and another set of APIs from another provider e.g. the provider of a software library or creator of the another set of APIs.

It will be appreciated that the API implementing component may include additional functions methods classes data structures and or other features that are not specified through the API and are not available to the API calling component . It should be understood that the API calling component may be on the same system as the API implementing component or may be located remotely and accesses the API implementing component using the API over a network. While illustrates a single API calling component interacting with the API it should be understood that other API calling components which may be written in different languages or the same language than the API calling component may use the API .

The API implementing component the API and the API calling component may be stored in a non transitory machine readable storage medium which includes any mechanism for storing information in a form readable by a machine e.g. a computer or other data processing system . For example a machine readable medium includes magnetic disks optical disks random access memory read only memory flash memory devices etc.

In the exemplary software stack shown in applications can make calls to Services A or B using several Service APIs and to Operating System OS using several OS APIs. Services A and B can make calls to OS using several OS APIs.

Note that the Service 2 has two APIs one of which Service 2 API 1 receives calls from and returns values to Application 1 and the other Service 2 API 2 receives calls from and returns values to Application 2. Service 1 which can be for example a software library makes calls to and receives returned values from OS API 1 and Service 2 which can be for example a software library makes calls to and receives returned values from both OS API 1 and OS API 2. Application 2 makes calls to and receives returned values from OS API 2.

Touch I O device may include a touch sensitive panel which is wholly or partially transparent semitransparent non transparent opaque or any combination thereof. Touch I O device may be embodied as a touch screen touch pad a touch screen functioning as a touch pad e.g. a touch screen replacing the touchpad of a laptop a touch screen or touchpad combined or incorporated with any other input device e.g. a touch screen or touchpad disposed on a keyboard or any multi dimensional object having a touch sensitive surface for receiving touch input.

In one example touch I O device embodied as a touch screen may include a transparent and or semitransparent touch sensitive panel partially or wholly positioned over at least a portion of a display such as the display illustrated in . According to this example touch I O device functions to display graphical data transmitted from computing system and or another source and also functions to receive user input. In other examples touch I O device may be embodied as an integrated touch screen where touch sensitive components devices are integral with display components devices. In still other examples a touch screen may be used as a supplemental or additional display screen for displaying supplemental or the same graphical data as a primary display and to receive touch input.

Touch I O device may be configured to detect the location of one or more touches or near touches on device based on capacitive resistive optical acoustic inductive mechanical chemical measurements or any phenomena that can be measured with respect to the occurrences of the one or more touches or near touches in proximity to device . Software hardware firmware or any combination thereof may be used to process the measurements of the detected touches to identify and track one or more gestures. A gesture may correspond to stationary or non stationary single or multiple touches or near touches on touch I O device . A gesture may be performed by moving one or more fingers or other objects in a particular manner on touch I O device such as tapping pressing rocking scrubbing twisting changing orientation pressing with varying pressure and the like at essentially the same time contiguously or consecutively. A gesture may be characterized by but is not limited to a pinching sliding swiping rotating flexing dragging or tapping motion between or with any other finger or fingers. A single gesture may be performed with one or more hands by one or more users or any combination thereof. Exemplary gestures include the single contact and two contact scaling gestures discussed above in view of .

Computing system may drive a display with graphical data to display a graphical user interface GUI . The GUI may be configured to receive touch input via touch I O device . Embodied as a touch screen touch I O device may display the GUI. Alternatively the GUI may be displayed on a display separate from touch I O device . The GUI may include graphical elements displayed at particular locations within the interface. Graphical elements may include but are not limited to a variety of displayed virtual input devices including virtual scroll wheels a virtual keyboard virtual knobs virtual buttons any virtual UI and the like. A user may perform gestures at one or more particular locations on touch I O device which may be associated with the graphical elements of the GUI. In other examples the user may perform gestures at one or more locations that are independent of the locations of graphical elements of the GUI. Gestures performed on touch I O device may directly or indirectly manipulate control modify move actuate initiate or generally affect graphical elements such as cursors icons media files lists text all or portions of images or the like within the GUI. For instance in the case of a touch screen a user may directly interact with a graphical element by performing a gesture over the graphical element on the touch screen. Alternatively a touch pad generally provides indirect interaction. Gestures may also affect non displayed GUI elements e.g. causing user interfaces to appear or may affect other actions within computing system e.g. affect a state or mode of a GUI application or operating system . Gestures may or may not be performed on touch I O device in conjunction with a displayed cursor. For instance in the case in which gestures are performed on a touchpad a cursor or pointer may be displayed on a display screen or touch screen and the cursor may be controlled via touch input on the touchpad to interact with graphical objects on the display screen. In other examples in which gestures are performed directly on a touch screen a user may interact directly with objects on the touch screen with or without a cursor or pointer being displayed on the touch screen.

Feedback may be provided to the user via communication channel in response to or based on the touch or near touches on touch I O device . Feedback may be transmitted optically mechanically electrically olfactory acoustically or the like or any combination thereof and in a variable or non variable manner.

Attention is now directed towards examples of a system architecture that may be embodied within any portable or non portable device including but not limited to a communication device e.g. mobile phone smart phone a multi media device e.g. MP3 player TV radio a portable or handheld computer e.g. tablet netbook laptop a desktop computer an All In One desktop a peripheral device or any other system or device adaptable to the inclusion of system architecture including combinations of two or more of these types of devices. is a block diagram of one example of system that generally includes one or more computer readable mediums processing system I O subsystem radio frequency RF circuitry audio circuitry and gaze detection circuitry . These components may be coupled by one or more communication buses or signal lines .

It should be apparent that the architecture shown in is only one example architecture of system and that system could have more or fewer components than shown or a different configuration of components. The various components shown in can be implemented in hardware software firmware or any combination thereof including one or more signal processing and or application specific integrated circuits.

RF circuitry is used to send and receive information over a wireless link or network to one or more other devices and includes well known circuitry for performing this function. RF circuitry and audio circuitry are coupled to processing system via peripherals interface . Interface includes various known components for establishing and maintaining communication between peripherals and processing system . Audio circuitry is coupled to audio speaker and microphone and includes known circuitry for processing voice signals received from interface to enable a user to communicate in real time with other users. In some examples audio circuitry includes a headphone jack not shown . Gaze detection circuitry can be coupled to an optical device such as a camera for obtaining information regarding the gaze of a user. In some examples gaze detection circuitry can process images acquired by an optical device to determine gaze information.

Peripherals interface couples the input and output peripherals of the system to processor and computer readable medium . One or more processors communicate with one or more computer readable mediums via controller . Computer readable medium can be any device or medium that can store code and or data for use by one or more processors . Medium can include a memory hierarchy including but not limited to cache main memory and secondary memory. The memory hierarchy can be implemented using any combination of RAM e.g. SRAM DRAM DDRAM ROM FLASH magnetic and or optical storage devices such as disk drives magnetic tape CDs compact disks and DVDs digital video discs . Medium may also include a transmission medium for carrying information bearing signals indicative of computer instructions or data with or without a carrier wave upon which the signals are modulated . For example the transmission medium may include a communications network including but not limited to the Internet also referred to as the World Wide Web intranet s Local Area Networks LANs Wide Local Area Networks WLANs Storage Area Networks SANs Metropolitan Area Networks MAN and the like.

One or more processors run various software components stored in medium to perform various functions for system . In some examples the software components include operating system communication module or set of instructions touch processing module or set of instructions graphics module or set of instructions one or more applications or set of instructions and display event delay module or set of instructions . Each of these modules and above noted applications correspond to a set of instructions for performing one or more functions described above and the methods described in this application e.g. the computer implemented methods and other information processing methods described herein . These modules i.e. sets of instructions need not be implemented as separate software programs procedures or modules and thus various subsets of these modules may be combined or otherwise rearranged in various examples. In some examples medium may store a subset of the modules and data structures identified above. Furthermore medium may store additional modules and data structures not described above.

Operating system includes various procedures sets of instructions software components and or drivers for controlling and managing general system tasks e.g. memory management storage device control power management etc. and facilitates communication between various hardware and software components.

Communication module facilitates communication with other devices over one or more external ports or via RF circuitry and includes various software components for handling data received from RF circuitry and or external port .

Graphics module includes various known software components for rendering animating and displaying graphical objects on a display surface. In examples in which touch I O device is a touch sensitive display e.g. touch screen graphics module includes components for rendering displaying and animating objects on the touch sensitive display.

One or more applications can include any applications installed on system including without limitation a browser address book contact list email instant messaging word processing keyboard emulation widgets JAVA enabled applications encryption digital rights management voice recognition voice replication location determination capability such as that provided by the global positioning system GPS a music player etc.

Touch processing module includes various software components for performing various tasks associated with touch I O device including but not limited to receiving and processing touch input received from I O device via touch I O device controller .

System may further include display event delay module for performing the method functions as described herein in connection with . Display event delay module may at least function to delay the execution of display events based on gaze information obtained from gaze detection circuitry . Module may be embodied as hardware software firmware or any combination thereof. Although module is shown to reside within medium all or portions of module may be embodied within other components within system or may be wholly embodied as a separate component within system .

I O subsystem is coupled to touch I O device and one or more other I O devices for controlling or performing various functions. Touch I O device communicates with processing system via touch I O device controller which includes various components for processing user touch input e.g. scanning hardware . One or more other input controllers receives sends electrical signals from to other I O devices . Other I O devices may include physical buttons dials slider switches sticks keyboards touch pads additional display screens or any combination thereof.

If embodied as a touch screen touch I O device displays visual output to the user in a GUI. The visual output may include text graphics video and any combination thereof. Some or all of the visual output may correspond to user interface objects. Touch I O device forms a touch sensitive surface that accepts touch input from the user. Touch I O device and touch screen controller along with any associated modules and or sets of instructions in medium detects and tracks touches or near touches and any movement or release of the touch on touch I O device and converts the detected touch input into interaction with graphical objects such as one or more user interface objects. In the case in which device is embodied as a touch screen the user can directly interact with graphical objects that are displayed on the touch screen. Alternatively in the case in which device is embodied as a touch device other than a touch screen e.g. a touch pad the user may indirectly interact with graphical objects that are displayed on a separate display screen embodied as I O device .

Touch I O device may be analogous to the multi touch sensitive surface described in the following U.S. patents U.S. Pat. No. 6 323 846 Westerman et al. U.S. Pat. No. 6 570 557 Westerman et al. and or U.S. Pat. No. 6 677 932 Westerman and or U.S. Patent Publication 2002 0015024A1 each of which is hereby incorporated by reference.

Examples in which touch I O device is a touch screen the touch screen may use LCD liquid crystal display technology LPD light emitting polymer display technology OLED organic LED or OEL organic electro luminescence although other display technologies may be used in other examples.

Feedback may be provided by touch I O device based on the user s touch input as well as a state or states of what is being displayed and or of the computing system. Feedback may be transmitted optically e.g. light signal or displayed image mechanically e.g. haptic feedback touch feedback force feedback or the like electrically e.g. electrical stimulation olfactory acoustically e.g. beep or the like or the like or any combination thereof and in a variable or non variable manner.

System also includes power system for powering the various hardware components and may include a power management system one or more power sources a recharging system a power failure detection circuit a power converter or inverter a power status indicator and any other components typically associated with the generation management and distribution of power in portable devices.

In some examples peripherals interface one or more processors and memory controller may be implemented on a single chip such as processing system . In some other examples they may be implemented on separate chips.

Examples of the disclosure can be advantageous in allowing users to perform scaling operations while holding and operating a device with only one hand and have at least the technical effect of creating a second virtual touch input based on only a single actual touch input.

In some examples a computer implemented method is disclosed. The method can include generating a display event obtaining user gaze information and delaying the execution of the display event based on the user gaze information. Additionally or alternatively to one or more of the examples disclosed above the method can further include obtaining additional user gaze information and executing the display event based on the additional user gaze information. Additionally or alternatively to one or more of the examples disclosed above executing the display event can include one or more of adding a user interface object to a display removing a user interface object from a display and animating a user interface object on a display. Additionally or alternatively to one or more of the examples disclosed above the user gaze information can include a gaze region on a display and the method can further include obtaining a target region of the display the target region being associated with the display event and determining that the gaze region does not overlap the target region wherein delaying the execution of the display event based on the user gaze information can include delaying the execution of the display event based on the determination that the gaze region does not overlap the target region. Additionally or alternatively to one or more of the examples disclosed above the method can further include determining an overlapping area based on the gaze region and the target region comparing the overlapping area to a threshold area and determining that the overlapping area is less than the threshold area wherein determining that the gaze region does not overlap the target region can be based on the determination that the overlapping area is less than the threshold area. Additionally or alternatively to one or more of the examples disclosed above obtaining the target region can include obtaining a bounding box of the display event. Additionally or alternatively to one or more of the examples disclosed above the target region can include the entire display. Additionally or alternatively to one or more of the examples disclosed above the method can further include queuing the display event on an event queue wherein delaying the execution of the display event can include queuing the display event further back on the event queue. Additionally or alternatively to one or more of the examples disclosed above the method can further include obtaining an image from a gaze detection device and processing the image obtained from the gaze detection device wherein the user gaze information can be obtained based on the processed image.

In some examples an electronic device is disclosed. The electronic device can include a display a processor to execute instructions and a memory coupled with the processor to store instructions which when executed by the processor cause the processor to perform operations to generate an application programming interface API that allows an API calling component to perform the following operations generating a display event obtaining user gaze information and delaying the execution of the display event based on the user gaze information. Additionally or alternatively to one or more of the examples disclosed above the operations can further include obtaining additional user gaze information and executing the display event based on the additional user gaze information. Additionally or alternatively to one or more of the examples disclosed above executing the display event can include one or more of adding a user interface object to the display removing a user interface object from the display and animating a user interface object on the display. Additionally or alternatively to one or more of the examples disclosed above the user gaze information can include a gaze region on the display and the operations can further include obtaining a target region of the display the target region being associated with the display event and determining that the gaze region does not overlap the target region wherein delaying the execution of the display event based on the user gaze information can include delaying the execution of the display event based on the determination that the gaze region does not overlap the target region. Additionally or alternatively to one or more of the examples disclosed above the operations can further include determining an overlapping area based on the gaze region and the target region comparing the overlapping area to a threshold area and determining that the overlapping area is less than the threshold area wherein determining that the gaze region does not overlap the target region can be based on the determination that the overlapping area is less than the threshold area. Additionally or alternatively to one or more of the examples disclosed above obtaining the target region can include obtaining a bounding box of the display event. Additionally or alternatively to one or more of the examples disclosed above the target region can include the entire display. Additionally or alternatively to one or more of the examples disclosed above the operations can further include queuing the display event on an event queue wherein delaying the execution of the display event can include queuing the display event further back on the event queue. Additionally or alternatively to one or more of the examples disclosed above the operations can further include obtaining an image from a gaze detection device and processing the image obtained from the gaze detection device wherein the user gaze information can be obtained based on the processed image.

Although the disclosed examples have been fully described with reference to the accompanying drawings it is to be noted that various changes and modifications will become apparent to those skilled in the art. Such changes and modifications are to be understood as being included within the scope of the disclosed examples as defined by the appended claims.

