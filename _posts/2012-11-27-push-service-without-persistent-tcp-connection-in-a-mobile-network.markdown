---

title: Push service without persistent TCP connection in a mobile network
abstract: Methods, systems, and articles of manufacture for non-TCP push service in a mobile network comprise receiving, at a push server, registration information for a mobile device from a push client via a first internal interface without persistent TCP connection. The registration information includes a private IP address for the mobile device and a mobile device session identifier associated with an instance of an application client on the mobile device. A push trigger associated with an event of an application server is received at the push server via a second interface exposed outside of a service provider firewall. The push trigger includes a push trigger session identifier. When the push trigger session identifier matches the mobile device session identifier, the push trigger is determined to be associated with the instance of the application client on the mobile device and is transmitted to the push client without persistent TCP connection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09148765&OS=09148765&RS=09148765
owner: Alcatel Lucent
number: 09148765
owner_city: Boulogne-Billiancourt
owner_country: FR
publication_date: 20121127
---
The present disclosure relates generally to mobile networks and more particularly to mobile network push services.

Mobile device applications typically operate in a client server model where the application client on a mobile device receives and processes data from one or more network based application servers. To obtain the data from the server the application client may use either a pull or push mode. In the pull mode the application client periodically polls the application server for new data. In the push mode the application server pushes data to the application client when the new data is available without the need for the application client to poll.

Applications that often poll the network can benefit from push services. Push services include traditional e mail e.g. for sending a push notification to a mobile device when new e mail arrives at the server Short Messaging Service SMS e.g. for sending a push notification when an SMS message arrives at a server voice over internet protocol VoIP e.g. for notification of an incoming call web browsing e.g. for notification of when to refresh the web page and growing video applications for 3G 4G smart mobile devices. Examples of push event notifications for such video applications include but are not limited to network condition changes policy changes and other notifications that may require an application client response.

Push mode is especially important for mobile devices operating over cellular networks. Typically when a mobile device does not have data to send or receive it can go into an idle e.g. dormant sleep mode to conserve battery power and over the air resources associated with the device s radio operation. The radio access network maintains location state information of the idle device and uses paging mechanisms defined by a corresponding cellular access technology standard to wake up the mobile device when data arrives for the device.

In contrast pull mode requires a mobile device to periodically exit idle mode when the application client needs to poll the application server for new data regardless of whether the server has such new data or not resulting in waste of mobile device battery resources and unnecessary over the air communications. Further improving application response time requires increasing polling frequency with more battery and over the air resources wasted. Reducing polling frequency can result in more delays in application client responses to application server events.

With 3G and 4G networks using all IP based data services the typical network architecture for current cellular service providers uses private IP addresses for the mobile devices with a firewall between the service provider core network and the public internet. This presents a significant challenge for push implementations. A typical firewall with network address translation NAT located between the application client on the mobile device with a private IP address and the application server allows only for transmission control protocol TCP based client initiated communications between the application client and application server. However maintaining such TCP connections between the application client and application server requires periodic heart beating which is essentially equivalent to a pull mode client originated TCP packets have to be exchanged periodically with a similar impact as pull mode on the mobile device idle mode.

With an application client that has a private IP address behind a firewall an application server located outside the firewall cannot send IP packets to the application client without a special hole in the firewall since the client s private IP address is not reachable from the outside of the service provider s network. Such a hole in the firewall is typically created automatically when a TCP connection with the application server is originated by the application client. The firewall NAT function replaces in the client sent TCP IP packet the pair with the pair of and creates for a certain duration of time a mapping between the pair and the thus allowing packets from the application server addressed to the to be forwarded to the of the application client. Such mapping creates a hole in the firewall allowing the application server to send packets to the application client. In the absence of TCP traffic e.g. when the client goes to idle mode the mapping ages out and the client becomes unreachable from the server. However maintaining a persistent TCP connection by sending periodic TCP traffic to refresh this mapping is costly and requires the mobile device to periodically exit the idle state to generate such traffic. Also the aging timers configuration may vary for different firewalls resulting in a requirement for such traffic to be unnecessarily frequent.

Existing solutions indicate the importance of firewall issues but also that there is no single satisfactory approach for a push implementation with a firewall between a service provider network and the public internet.

For example a TCP based mobile operating system OS or mobile device vendor push service typically consists of a push server located elsewhere in the internet outside of the wireless service providers firewall protected core push client middleware coupled with the mobile device OS and a set of APIs specific to the mobile device OS that are exposed to the application clients and servers to register and receive push service. However a persistent TCP connection has to be maintained through the firewall. Maintaining such a connection requires periodic TCP traffic to be exchanged between the mobile device and the push server resulting in a waste of both battery life and over the air resources. Depending upon the frequency of the TCP keep alive in some cases it is every second and or firewall aging refresh exchanges the mobile device is either completely prevented from entering the idle mode if the keep alive exchange is too frequent or is forced to periodically exit the idle mode for the keep alive exchange. The frequency of the TCP exchange is typically dictated by OS specific considerations e.g. TCP keep alive or other mechanisms that allow a server to detect a dead TCP connection when the mobile device powers down or abruptly goes out of wireless coverage range as well as by a firewall hole aging timer for the reverse TCP traffic from the server to the client. Also maintaining persistent TCP connections with tens of millions of mobile clients requires significant server resources to be allocated. In addition this method may create privacy issues for the mobile device users as it may allow the third party push server to track mobile devices and their use of applications.

Network can further include a push server accessible via the public Internet outside of firewall . Mobile devices can include push client e.g. middleware coupled with the mobile device Operating System OS and one or more application programming interfaces APIs that are exposed to application client and application server for registering and receiving push services specific to mobile device OS vendors via a persistent TCP based connection. For example a mobile device may periodically wake up to send a heartbeat type communication to maintain a TCP based connection.

In network application server cannot send IP packets to a mobile device that has a private IP address without a special hole in the firewall i.e. the client s private IP address is not reachable from outside of the service provider s core network . For example such a hole in firewall may be created automatically when a TCP based connection with application server is originated by a mobile device . Specifically a firewall NAT function replaces a private address port number pair for example with a public address port number pair for example in a TCP IP packet sent by a mobile device and creates e.g. for a certain duration of time a mapping between the pair and the unique new source TCP port number. As such application server may send packets addressed to the that may be forwarded to the private address port number pair of a specific mobile device . This mapping procedure defined as creating a hole in the firewall allows application server to send packets to application client . However in the absence of TCP based communication traffic e.g. when a mobile device toggles into idle mode the public private mapping may expire meaning that application client will become unreachable from application server .

A User Datagram Protocol based Session Initiation Protocol UDP based SIP model requires a special session border controller device to operate in conjunction with a firewall to dynamically punch holes in the firewall to reach a mobile device during mobile device registration on the network. This method allows a mobile device to receive incoming calls. However a UDP based SIP model may also require a specialized session border control function for each new application and a reconfiguring of the session border controller each time a new application appears on the market.

SMS messages also may be utilized for push notifications for non SMS instant message applications. However many service provider plans charge users for receiving SMS messages. Therefore using SMS for push notifications may cause unexpected and unwelcome charges for users with such plans.

Methods systems and articles of manufacture for a push service in a wireless service provider core network that is compatible with idle e.g. sleep or dormant mode requirements of devices receiving service on 2G 3G 4G mobility networks is disclosed. In one embodiment a push server includes two interfaces. A first interface is within a service provider s private network behind the firewall so that a mobile device is reachable from the push server using a private IP address of the mobile device. A second interface is public i.e. exposed outside the service provider s firewall such that application servers located outside of a firewall can initiate push triggers.

This architecture eliminates the need for a permanent TCP connection between a push server and a mobile device. For example an interface between a push server and a push client within a mobile device can support a connection less e.g. UDP protocol with some added acknowledgement messages for reliability or a non persistent TCP connection initiated by the push server for delivering a single push notification.

In the absence of new data on an application server a mobile device can go into an idle e.g. sleep or dormant mode to conserve battery power and a cellular access network corresponding to the mobile device can maintain a network specific i.e. native location update mechanism such that when packets from a push server need to be transmitted to a mobile device in idle state the location update mechanism can wake up the mobile device and allow it to receive a push trigger from the push server.

In one embodiment a method comprises receiving at a push server registration information for a mobile device from a push client via a first internal interface without persistent TCP connection. The registration information includes a private IP address for the mobile device and a mobile device session identifier associated with an instance of an application client on the mobile device. Later a push trigger associated with an event of an application server is received at the push server via a second interface exposed outside of a service provider firewall wherein the push trigger includes a push trigger session identifier. The push trigger is determined to be associated with the instance of the application client on the mobile device when the push trigger session identifier matches the mobile device session identifier and when the push trigger session identifier matches the mobile device session identifier the push trigger is transmitted by the push server to the push client on the mobile device. The push trigger may be transmitted to the push client via one of an internal first interface if the mobile device is connected via a cellular 2G 3G 4G interface or an external second interface if the mobile device is connected via a Wi Fi interface and the push trigger over the internal first interface may be transmitted using UDP or non persistent TCP. A TCP connection with the push client may be originated by the push server to deliver the push trigger and then terminated after the push trigger is delivered.

In accordance with an embodiment the session identifier is transmitted from the application client to the application server via an application specific client server communication. The communication may be based upon TCP.

In accordance with an embodiment after the session identifier is transmitted to the application server the mobile device is set to an idle state. The mobile device is set to a non idle state when a paging message associated with the push trigger is received at the push client.

In accordance with an embodiment the push trigger is received at the push client and communicated to the application client using the session identifier in the push trigger to identify the application client instance.

In accordance with an embodiment the push trigger is received at the application client and an application specific TCP based connection is established between the application client and the application server to receive data associated with the push trigger.

In accordance with an embodiment the registration information is transmitted when the mobile device moves from a first access network to a second access network if the private IP address or the session identifier changes between the first and second access networks.

These and other advantages will be apparent to those of ordinary skill in the art by reference to the following detailed description and the accompanying drawings.

Many current mobile networks e.g. 3G 4G LTE are using transmission control protocol TCP Internet Protocol IP based data services which are used to provide various vendor controlled push services. When an application client resides behind a firewall such as in a service provider network applications that must often poll a network server for new data can benefit from a non TCP way of establishing a push service as disclosed herein. Examples of such applications include traditional e mail push notification is sent to the mobile device when new e mail arrives at the server SMS push notification is sent when an SMS arrives at the server VoIP push notification for an incoming call web browsing push notification for when to refresh the web page and a growing number of video applications for 3G 4G smart mobile devices. Examples of push event notifications for such video applications include but are not limited to network condition changes policy changes and other notifications that might require a robust application client response.

Various embodiments provided herein detail a push service without persistent TCP connection in a wireless service provider s core network. illustrates a functional diagram of a mobile network for implementing a push service without persistent TCP connection in accordance with an embodiment. The push service illustrated in is compatible with idle mode requirements of mobile devices receiving service on 2G 3G 4G or other mobility networks. For example non TCP push server has two communication interfaces. The first interface is public i.e. exposed outside the service provider s firewall so that application server outside of firewall can initiate a push trigger i.e. a notification of an application server event . The second internal interface is within the service provider s private network behind firewall so that a mobile device is reachable from non TCP push server using the private IP address of mobile device .

This architecture eliminates the need for a persistent TCP based connection between a push server and a mobile device . For example the interface between non TCP push server and non TCP push client in the mobile device can be based upon UDP or another non persistent connection. One skilled in the art will recognize that that in one embodiment a UDP based non persistent connection may include acknowledgement messages for reliability. Further any of a variety of communication protocols for push services without persistent TCP connection may be used for communications between non TCP push client and non TCP push server . As used herein the term non TCP refers to connections or communications not using TCP e.g. UDP based connections or communications and also non persistent TCP connections or communications where for example a TCP connection is established to transmit a single message and then is terminated.

In the absence of the new data on application server a mobile device can toggle into an idle mode to conserve battery power. For example mobile access network may maintain a corresponding wireless access technology defined i.e. native location update mechanism for locating mobile devices. As such when the packets from non TCP push server need to be transmitted to a mobile device in idle state a native paging mechanism may wake up the mobile device and allow it to receive the push trigger from non TCP push server .

At step the push client registers the session ID from step and the IP address from step with non TCP push server using for example a UDP based connection with acknowledgements for reliability. Alternatively a non persistent TCP connection may be established for a single operation e.g. registration of the session ID or sending an individual message and then terminated after the operation is completed.

At step application client e.g. using a native application for TCP based communications with application server in the network establishes an application session and registers the session ID with application server so application server can transmit a push trigger when necessary.

When the application session is done the TCP based connection between application client and application server is terminated and the mobile device toggles into an idle mode to conserve battery power at step . In one embodiment the mobile device can preserve the same IP address that was received in step in an idle mode. The mobile network may then use a location update function to maintain mobile device location information. Alternatively if a mobile device IP address change is required e.g. due to mobility event between networks various 3G and 4G networking standards 3GPP 3GPP2 WiMAX will require a mobile device to toggle out of an idle mode and become active to retransmit a newly assigned IP address.

At step application server in the network receives a trigger event or new data requiring an update of mobile device data or state information. The trigger event can be any kind of event e.g. a new e mail is received for e mail application the contents of the application server database were updated and application client is subscribed for receiving automatic updates the network has become uncongested and a large video file can be downloaded or uploaded by the application application server receives a policy update that needs to be propagated to application client with an impact on an ongoing video session etc. . Application server sends a push trigger to non TCP push server s public IP address exposed outside of the service provider firewall including the session ID that application server received in step . One skilled in the art will recognize that application server may obtain the IP address of non TCP push server by any means e.g. the IP address may be a well known or published IP address . Alternatively the IP address of non TCP push server may be received by application server with the session ID in step .

At step non TCP push server using the mapping between the session ID and the mobile device IP address assigned in step to determine the mobile device associated with the push trigger transmits the push trigger to non TCP push client on the mobile device using UDP based messages e.g. with acknowledgement . For example if the mobile device is in an idle state a regular paging mechanism may be invoked by the mobile access network to wake up the mobile device upon detecting the push trigger addressed to the mobile device . Further if the initial packet is lost non TCP push server may retransmit the push trigger to the mobile device .

At step non TCP push client on the mobile device receives the push trigger and using the session ID generated in step communicates the push trigger to application client . For example non TCP push client may identify an application client instance using the session ID in the push trigger and forward the push trigger to application client .

At step application client upon receiving the push trigger establishes a new TCP based connection with application server and downloads data i.e. the trigger event associated with the push trigger.

In another embodiment the push service of is applicable in case of standards defined multi access interworking of the trusted 3G 4G mobile networks. illustrates a functional diagram of a mobile network for implementing an alternative push service without persistent TCP connection in accordance with an embodiment. In a 3G 4G network is shown to be interworking with a trusted non 3GPP access network having one or more non 3GPP base stations . For the purposes of the embodiment interworking is defined as in the 3GPP standard i.e. using common PDN GW as an IP anchor . The same mechanism described in above can be utilized for the push service without persistent TCP connection in with the PDN GW anchoring IP access to the mobile device . In one embodiment push client push server re registration may occur every time the mobile device IP address changes or a new session ID is generated e.g. when application client restarts or new instance of an application client is started .

The various embodiments provide a unique way for network operators to reduce signaling load associated with setting up connections. Currently these connections are configured to either poll servers for data pull model or to send periodic heartbeats to maintain persistent TCP based connections competing push model . Eliminating both of these by using the UDP based or non persistent TCP based connections proposed in herein reduces the required operator investment needed to support a given level of network traffic.

In addition this approach addresses other general issues for TCP based push services. In various embodiments having a push service hosted by a wireless service provider helps to alleviate the privacy issue of third party enterprises gaining access to tracking information for mobile device customers. While tracking information is necessary for implementing the various embodiments wireless service providers track the mobile devices as part of an understood service contract with customers to provide mobile services. Also using a non TCP e.g. UDP based connection between non TCP push server and non TCP push client resolves push server scalability issues with regard to data traffic capacity since UDP is a connection less non persistent protocol.

The embodiments also benefit subscribers by extending mobile battery life since mobile devices will no longer need to be configured for unnecessary connections to network servers such as for heart beating or polling purposes. Further the embodiments provide services providers with an opportunity to host mobile vendor independent push services. This has particular appeal to application providers because they no longer have to implement mobile device vendor or operating system specific mechanisms for sending content to mobile devices.

The above described method steps including those steps described as being implemented by a mobile device or a server may be implemented on a computer using well known computer processors memory units storage devices computer software and other components. is a high level block diagram of an exemplary computer that may be used for implementing a push service without persistent TCP connection. Computer contains a processor which controls the overall operation of the computer by executing computer program instructions which define such operation. The computer program instructions may be stored in a storage device e.g. magnetic disk and loaded into memory when execution of the computer program instructions is desired. Thus the steps of the method of may be defined by the computer program instructions stored in the memory and or storage and controlled by the processor executing the computer program instructions. The computer may include one or more network interfaces for communicating with other devices via a network for implementing the steps of the method of . The computer may also include other input output devices that enable user interaction with the computer e.g. display keyboard mouse speakers buttons etc. . One skilled in the art will recognize that an implementation of an actual computer could contain other components as well and that is a high level representation of some of the components of such a computer for illustrative purposes.

The foregoing Detailed Description is to be understood as being in every respect illustrative and exemplary but not restrictive and the scope of the invention disclosed herein is not to be determined from the Detailed Description but rather from the claims as interpreted according to the full breadth permitted by applicable patent laws. It is to be understood that the embodiments shown and described herein are only illustrative of the principles of the present invention and that various modifications may be implemented by those skilled in the art without departing from the scope and spirit of the invention. Those skilled in the art could implement various other feature combinations without departing from the scope and spirit of the invention.

