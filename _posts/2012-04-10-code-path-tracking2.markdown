---

title: Code path tracking
abstract: Methods, systems, and products are provided for code path tracking. Embodiments include identifying an instrumented trace point in software code to be path tracked; identifying a function executed at the instrumented trace point in the software code; identifying parameters for the function executed at the instrumented trace point; and recording a description of the function, the parameters, and the result of the execution of the function using the parameters.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09563538&OS=09563538&RS=09563538
owner: International Business Machines Corporation
number: 09563538
owner_city: Armonk
owner_country: US
publication_date: 20120410
---
This application is a continuation application of and claims priority from U.S. patent application Ser. No. 11 621 666 filed on Jan. 10 2007.

The field of the invention is data processing or more specifically methods systems and products for code path tracking.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

As computer software has become more complicated analyzing problems in the software code and improving functions executed in the software code has also become more difficult. Tools currently exist which can sample instruction paths taken in specific software modules or collect data at trace points built into the software. These coverage tools are somewhat useful but they have several limitations 

Methods systems and products are provided for code path tracking. Embodiments include identifying an instrumented trace point in software code to be path tracked identifying a function executed at the instrumented trace point in the software code identifying parameters for the function executed at the instrumented trace point and recording a description of the function the parameters and the result of the execution of the function using the parameters.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods systems and products for code path tracking according to embodiments of the present invention are explained with reference to the accompanying drawings beginning with . sets forth a block diagram of an exemplary system for code path tracking according to embodiments of the present invention. The system of includes a recording computer . The computer is labeled a recording computer in this specification to signify that the software code running on the recording computer is being code path tracked according to the present invention and the recording computer is so labeled because code path tracking according to the present invention records a description of a function executed at an instrumented trace point in the software code and records a description of the result of the execution of that function. The recorded description may then be transferred to a replay computer for replay as discussed in more detail below.

This exact architecture of the system of however is presented only for explanation not for limitation of the present invention. Many system architectures as will occur to those of skill in the art are functional for code path tracking according to embodiments of the present invention and all such architectures are well within the scope of the present invention.

The example of includes a database management system DBMS computer program instructions for creating an maintaining a database. The exemplary DBMS of includes an SQL module . The SQL module is implemented as computer program instructions that execute an SQL query . Each SQL query is carried out by a sequence of database operations specified as an access plan. An access plan is a description of database functions for execution of an SQL query.

This access plan represents database functions to scan through the stores table and for each stores record join all transactions records for the store. The transactions for a store are identified through the storeID field acting as a foreign key. The fact that a selection of transactions records is carried out for each store record in the stores table identifies the join function as iterative.

The system of includes an optimizer as part of the SQL module. Optimizer optimizes the execution of SQL queries against the DBMS . DBMS is a DBMS that administers access to the contents of database . Optimizer is implemented as computer program instructions that optimize execution of a SQL query in dependence upon database management statistics. That is the optimizer uses database statistics from database for optimizing SQL queries against database . Database statistics are typically implemented as metadata of a table such as for example metadata of tables of database . Database statistics may include for example 

These three database statistics are presented for explanation only not for limitation. The use of any database statistics as will occur to those of skill in the art is well within the scope of the present invention.

The optimizer of includes a code path tracking module . The code path tracking module is implemented as computer program instructions for code path tracking capable of identifying an instrumented trace point in software code to be path tracked identifying a function executed at the instrumented trace point in the software code identifying parameters for the function executed at the instrumented trace point and recording a description of the function the parameters and the result of the execution of the function using the parameters.

An instrumented trace point is one or more computer program instructions included at a location in the software code for identifying a function executed at that instrumented trace point identifying parameters for the function executed at the instrumented trace point and recording a description of the function the parameters and the result of the execution of the function using the parameters. The description of the function the parameters and the result of the execution of the function using the parameters may be implemented as an eXtensible markup language XML description. XML refers to the eXtensible Markup Language a specification developed by the World Wide Web Consortium W3C . XML is a pared down version of SGML the Standard Generalized Markup Language . XML was originally intended primarily to encode Web documents but its use today is much broader than just the Web. It allows designers to create their own customized tags enabling the definition transmission validation and interpretation of data between applications between computers and database and between organizations.

The description of the function the parameters and the result of the execution of the function using the parameters may be used to replay the function and the result of the execution of the function for analysis of the quality of the execution of the function. Replaying the function advantageously allows a user to make determinations as to whether to modify the functions or parameters of the functions as will occur to those of skill in the art.

For further explanation sets forth a block diagram of a replay computer. The replay computer is so labeled for explanation and not for limitation. The exemplary replay computer also includes a DBMS a SQL module and an optimizer . In the example of however the optimizer includes a code path replay module . The code path replay module includes computer program instructions for receiving the recorded description of the function the parameters and the result of the execution of the function using the parameters recorded by the recording computer and replaying in dependence upon the recorded description the execution of the function using the parameters. The code path replay module of also includes computer program instructions capable of receiving from a user an alternative function executing the alternative function and displaying to the user the result of the execution of the alternative function.

The exemplary recording computer of and the exemplary replay computer of are presented for ease of explanation of different aspects of code path tracking according to the present invention. While in many cases it may be advantageous to record a description of the function the parameters and the result of the execution of the function using the parameters on one computer and replay the function in dependence upon the description on another computer in other cases the recording of the description and the replaying of the function may occur on the same computer and all such cases are well within the scope of the present invention.

As mentioned above code path tracking in accordance with the present invention is generally implemented with computers that is with automated computing machinery. For further explanation sets forth a block diagram of automated computing machinery comprising an exemplary computer useful in code path tracking according to embodiments of the present invention. The computer of includes at least one computer processor or CPU as well as random access memory RAM which is connected through a system bus to processor and to other components of the computer. Stored in RAM is DBMS computer program instructions for database management. The DBMS of includes an SQL module which in turn includes an optimizer .

The optimizer of includes a code path tracking module . The code path tracking module includes computer program instructions for identifying an instrumented trace point in software code to be path tracked which in this example is an optimizer identifying a function executed at the instrumented trace point in the software code identifying parameters for the function executed at the instrumented trace point and recording a description of the function the parameters and the result of the execution of the function using the parameters.

The optimizer of also includes a code path replay module . The code path replay module includes computer program instructions for receiving the recorded description of the function the parameters and the result of the execution of the function using the parameters and replaying in dependence upon the recorded description the execution of the function using the parameters.

Also stored in RAM is an operating system . Operating systems useful in computers according to embodiments of the present invention include UNIX Linux Microsoft NT AIX IBM s i5os and many others as will occur to those of skill in the art. Operating system DBMS and optimizer code path tracking module and code path replay module in the example of are shown in RAM but many components of such software typically are stored in non volatile memory also.

Computer of includes non volatile computer memory coupled through a system bus to processor and to other components of the computer. Non volatile computer memory may be implemented as a hard disk drive optical disk drive electrically erasable programmable read only memory space so called EEPROM or Flash memory RAM drives not shown or as any other kind of computer memory as will occur to those of skill in the art.

The example computer of includes one or more input output interface adapters . Input output interface adapters in computers implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice.

The exemplary computer of includes a communications adapter for implementing connections for data communications to other computers . Such connections may include serial connections such as RS 232 connections connections through external buses such as USB connections connections through data communications networks such as TCP IP connections and others as will occur to those of skill in the art. Communications adapters implement the hardware level of connections for data communications through which one computer sends data communications another computer directly or through a network. Examples of communications adapters useful for code path tracking according to embodiments of the present invention include modems for wired dial up connections Ethernet IEEE 802.3 adapters for wired network connections and 802.11b adapters for wireless network connections.

For further explanation sets forth a flow chart of a computer implemented method for code path tracking. The method of includes identifying an instrumented trace point in software code to be path tracked. As mentioned above an instrumented trace point is a location in the software code that includes computer program instructions for identifying a function executed at that instrumented trace point identifying parameters for the function executed at the instrumented trace point and recording a description of the function the parameters and the result of the execution of the function using the parameters.

An instrumented trace point may be implemented as a call into an application programming interface API capable of recording a description of the function the parameters and the result of the execution of the function using the parameters. Such a call may be parameterized with an identification of a function executed at the instrumented trace point as well as parameters of the function executed at the trace point.

The individual instrumented trace points may be user selected. That is the method of may also include instrumenting a user selected trace point. Instrumenting a user selected trace point may be carried out by receiving a user selection of a trace point to be instrumented to record a description of the function of the software code executed at that trace point the parameters and the result of the execution of the function using the parameters.

The exemplary class contains simple helper methods such as register enum value that provide for a user to add instrumented trace points into the software in question to path track a function at the instrumented trace point. The software is then changed to incorporate these instrumented trace points compiled and executed.

As mentioned above the instrumented trace point further may be implemented as a decision point in a database optimizer. Such a decision point may be a location of software code executing a particular sequence of database operations implementing an access plan. An access plan is a description of database functions for execution of an SQL query. Taking the following SQL query as an example 

This access plan represents database functions to scan through the stores table and for each stores record join all transactions records for the store. The transactions for a store are identified through the storeID field acting as a foreign key. The fact that a selection of transactions records is carried out for each store record in the stores table identifies the join function as iterative.

The method of also includes identifying a function executed at the instrumented trace point in the software code. A function executed at the instrumented trace point in the software code may be any function in the software code to be path tracked according to embodiments of the present invention. One such function may be for example one or more of a particular sequence of database operations implementing an access plan

The method of also includes identifying parameters for the function executed at the instrumented trace point . Parameters for the function identify the values or data structures against which the function operates. For example an access plan for an SQL query may include tablescan stores for the function tablescan operating on a parameter table stores. 

The method of also includes recording a description of the function the parameters and the result of the execution of the function using the parameters. Recording a description of the function the parameters and the result of the execution of the function using the parameters according to the method of may be carried out by creating an XML description of the function the parameters and the result of the execution of the function using the parameters. The XML description may also conform to an XML Schema Definition XSD . An XSD is an instance of an XML schema typically written in XML Schema. An XSD defines a type of XML document in terms of constraints upon what elements and attributes may appear in the document their relationship to each other and what types of data may be in them.

As mentioned above the description of the function the parameters and the result of the execution of the function using the parameters may be used to replay the function and the result of the execution of the function for analysis of the quality of the execution of the function. Replaying the function advantageously allows a user to make determinations as to whether to modify the functions or parameters of the functions as will occur to those of skill in the art. For further explanation therefore sets forth a flow chart illustrating further aspects of code path tracking according to the present invention. The method of includes receiving the recorded description of the function the parameters and the result of the execution of the function using the parameters. Receiving the recorded description of the function the parameters and the result of the execution of the function using the parameters may be carried out by receiving the description from a code path tracking module operating locally or operating remotely as mentioned above.

The method of also includes replaying in dependence upon the recorded description the execution of the function using the parameters. Replaying in dependence upon the recorded description the execution of the function using the parameters may be carried out by replicating the execution of the functioning dependence upon the recorded description and displaying results of the execution and in some cases additional statistics describing the execution of the function such as execution time CPU consumption and so on as will occur to those of skill in the art. Replaying the execution of the function advantageously allows a user to individually analyze the execution of functions at instrumented trace points.

In some cases replaying the execution of the function may demonstrate flaws in the function or parameters or other factors surrounding the execution of the function. To aid in improving the software code the method of also includes receiving from a user an alternative function . Receiving from a user an alternative function may be carried out through a user interface designed to receive from a user selections of alternative functions for execution.

The method of also includes executing the alternative function and displaying to the user the result of the execution of the alternative function. Executing the alternative function and displaying to the user the result of the execution of the alternative function advantageously provides a vehicle for improving functions executed at instrumented trace decision points.

Receiving from a user an alternative function executing the alternative function and displaying to the user the result of the execution of the alternative function may occur in real time or alternatively may include receiving from a user an alternative function either manually or programmatically and at some later date executing the alternative function and displaying the result of the execution of the alternative function.

Code path tracking has been described largely in the context of an optimizer for a SQL module in a DBMS. This is for explanation and not for limitation. In fact code path tracking according to embodiments of the present invention may be usefully implemented in many contexts as will occur to those of skill in the art and all such contexts are well within the scope of the present invention.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for code path tracking Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on signal bearing media for use with any suitable data processing system. Such signal bearing media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

