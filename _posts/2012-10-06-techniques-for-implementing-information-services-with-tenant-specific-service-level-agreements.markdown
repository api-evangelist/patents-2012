---

title: Techniques for implementing information services with tenant specific service level agreements
abstract: A technique for selecting an information service implementation includes receiving a service request that includes a tenant identifier that uniquely identifies a calling tenant. Transformation logic to service the service request is selected based on the received tenant identifier. One or more data sources and one or more data targets are selected for the service request based on the received tenant identifier. Data from the selected data sources is processed using the selected transformation logic and the processed data is stored at the selected data targets.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09342353&OS=09342353&RS=09342353
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09342353
owner_city: Armonk
owner_country: US
publication_date: 20121006
---
The present invention generally relates to information services and in particular to techniques for implementing information services with tenant specific service level agreements.

In general cloud computing refers to Internet based computing where shared resources software and information are provided to users of computer systems and other electronic devices e.g. mobile phones on demand similar to the electricity grid. Adoption of cloud computing has been aided by the widespread adoption of virtualization which is the creation of a virtual rather than actual version of something e.g. an operating system a server a storage device network resources etc. A virtual machine VM is a software implementation of a physical machine e.g. a computer system that executes instructions like the physical machine. VMs are usually categorized as system VMs or process VMs. A system VM provides a complete system platform that supports the execution of a complete operating system OS . In contrast a process VM is usually designed to run a single program and support a single process. A characteristic of a VM is that application software running on the VM is limited to the resources and abstractions provided by the VM. System VMs also referred to as hardware VMs allow the sharing of the underlying physical machine resources between different VMs each of which executes its own OS. The software that provides the virtualization and controls the VMs is typically referred to as a VM monitor VMM or hypervisor. A hypervisor may run on bare hardware Type 1 or native VMM or on top of an operating system Type 2 or hosted VMM .

Cloud computing provides a consumption and delivery model for information technology IT services based on the Internet and involves over the Internet provisioning of dynamically scalable and usually virtualized resources. Cloud computing is facilitated by ease of access to remote computing sites via the Internet and frequently takes the form of web based tools or applications that a cloud consumer or tenant can access and use through a web browser as if the tools or applications were a local program installed on a computer system of the tenant. Commercial cloud implementations are generally expected to meet quality of service QoS requirements of consumers and typically include service level agreements SLAs . Tenants avoid capital expenditures by renting usage from a cloud vendor i.e. a third party provider . In a typical cloud implementation tenants consume resources as a service and pay only for resources used.

An Internet point of presence POP is an access point to the Internet that may house servers routers gateways asynchronous transfer mode ATM switches and or digital analog call aggregators. An Internet POP may be for example part of the facilities of a telecommunications provider that an Internet service provider ISP rents or at a location separate from the telecommunications provider. A typical ISP may have thousands of POPs each of which corresponds to a different physical location. In a POP cloud it is usually unclear to a tenant where data of the tenant resides as a location of an access point e.g. gateway appears to the tenant to be the location of the data.

Disclosed are a method a data processing system and a computer program product embodied in a computer readable storage medium for implementing information services with tenant specific service level agreements in cloud computing environments.

A technique for selecting an information service implementation includes receiving a service request that includes a tenant identifier that uniquely identifies a calling tenant. Transformation logic to service the service request is selected based on the received tenant identifier. One or more data sources and one or more data targets are selected for the service request based on the received tenant identifier. Data from the selected data sources is processed using the selected transformation logic and the processed data is stored at the selected data targets.

The above summary contains simplifications generalizations and omissions of detail and is not intended as a comprehensive description of the claimed subject matter but rather is intended to provide a brief overview of some of the functionality associated therewith. Other systems methods functionality features and advantages of the claimed subject matter will be or will become apparent to one with skill in the art upon examination of the following figures and detailed written description.

The above as well as additional objectives features and advantages of the present invention will become apparent in the following detailed written description.

The illustrative embodiments provide a method a data processing system and a computer program product embodied in a computer readable storage medium for implementing information services with tenant specific service level agreements in cloud computing environments.

In the following detailed description of exemplary embodiments of the invention specific exemplary embodiments in which the invention may be practiced are described in sufficient detail to enable those skilled in the art to practice the invention and it is to be understood that other embodiments may be utilized and that logical architectural programmatic mechanical electrical and other changes may be made without departing from the spirit or scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and equivalents thereof.

It is understood that the use of specific component device and or parameter names are for example only and not meant to imply any limitations on the invention. The invention may thus be implemented with different nomenclature terminology utilized to describe the components devices parameters herein without limitation. Each term utilized herein is to be given its broadest interpretation given the context in which that term is utilized.

According to one aspect of the present disclosure techniques are disclosed herein that increase software stack sharing capabilities by employing multi tenant functions and service polymorphisms.

It should be understood that although this disclosure includes a detailed description on cloud computing implementation of the teachings recited herein are not limited to a cloud computing environment. Rather embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed including client server and peer to peer computing environments. Cloud computing is a model of service delivery for enabling convenient on demand network access to a shared pool of configurable computing resources e.g. networks network bandwidth servers processing memory storage applications virtual machines and services that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. A cloud model may include at least five characteristics at least three service models and at least four deployment models.

Cloud characteristics may include on demand self service broad network access resource pooling rapid elasticity and measured service. Cloud service models may include software as a service SaaS platform as a service PaaS and infrastructure as a service IaaS . Cloud deployment models may include private cloud community cloud public cloud and hybrid cloud.

On demand self service means a cloud consumer can unilaterally provision computing capabilities such as server time and network storage as needed automatically without requiring human interaction with a service provider. Broad network access means capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms e.g. mobile phones laptops and personal digital assistants PDAs . Resource pooling means computing resources of a provider are pooled to serve multiple consumers using a multi tenant model with different physical and virtual resources dynamically assigned and reassigned according to demand. In resource pooling there is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction e.g. country state or datacenter .

Rapid elasticity means capabilities can be rapidly and elastically provisioned in some cases automatically to quickly scale out and be rapidly released to quickly scale in. To the consumer the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time. Measured service means cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction that is appropriate to the type of service e.g. storage processing bandwidth and active user accounts . Resource usage can be monitored controlled and reported providing transparency for both the provider and consumer of the utilized service.

In an SaaS model the capability provided to the consumer is to use applications of a provider that are running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser e.g. web based e mail . In the SaaS model the consumer does not manage or control the underlying cloud infrastructure including networks servers operating systems storage or even individual application capabilities with the possible exception of limited user specific application configuration settings.

In a PaaS model a cloud consumer can deploy consumer created or acquired applications created using programming languages and tools supported by the provider onto the cloud infrastructure. In the PaaS model the consumer does not manage or control the underlying cloud infrastructure including networks servers operating systems or storage but has control over deployed applications and possibly application hosting environment configurations.

In an IaaS service model a cloud consumer can provision processing storage networks and other fundamental computing resources where the consumer is able to deploy and run arbitrary software which can include operating systems and applications . In the IaaS model the consumer does not manage or control the underlying cloud infrastructure but has control over operating systems storage deployed applications and possibly limited control of select networking components e.g. host firewalls .

In a private cloud deployment model the cloud infrastructure is operated solely for an organization. The cloud infrastructure may be managed by the organization or a third party and may exist on premises or off premises. In a community cloud deployment model the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns e.g. mission security requirements policy and compliance considerations . The cloud infrastructure may be managed by the organizations or a third party and may exist on premises or off premises. In a public cloud deployment model the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.

In a hybrid cloud deployment model the cloud infrastructure is a composition of two or more clouds private community or public that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability e.g. cloud bursting for load balancing between clouds . In general a cloud computing environment is service oriented with a focus on statelessness low coupling modularity and semantic interoperability. At the heart of cloud computing is an infrastructure that includes a network of interconnected nodes.

With reference to a schematic of an exemplary cloud computing node is shown. Cloud computing node is only one example of a suitable cloud computing node and is not intended to suggest any limitation as to the scope of use or functionality of embodiments described herein. Regardless cloud computing node is capable of being implemented and or performing any of the functionality set forth herein. Cloud computing node includes a computer system server which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with computer system server include but are not limited to personal computer systems server computer systems thin clients thick clients hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputer systems mainframe computer systems and distributed cloud computing environments that include any of the above systems or devices and the like.

Computer system server may be described in the general context of computer system executable instructions such as program modules being executed by a computer system. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types. Computer system server may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment program modules may be located in both local and remote computer system storage media including memory storage devices.

As shown in computer system server in cloud computing node is illustrated in the form of a general purpose computing device. The components of computer system server may include but are not limited to one or more processors or processing units including one or more processor cores a system memory and a bus that couples various system components including system memory to processors . Bus represents one or more of any of several types of bus structures including a memory bus or memory controller bus a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include the industry standard architecture ISA bus the micro channel architecture MCA bus the enhanced ISA EISA bus the video electronics standards association VESA local bus and the peripheral components interconnect PCI bus.

Computer system server typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system server and includes both volatile and non volatile media removable and non removable media. System memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory .

Computer system server may further include other removable non removable volatile non volatile computer system storage media. By way of example only storage system can be provided for reading from and writing to a non removable non volatile magnetic media not shown and typically called a hard drive . Although not shown a magnetic disk drive for reading from and writing to a removable nonvolatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more data media interfaces.

As will be further depicted and described herein memory may include at least one program product having a set e.g. at least one of program modules that are configured to carry out the functions of various disclosed embodiments. Program utility having a set at least one of program modules may be stored in memory by way of example and not limitation as well as an operating system one or more application programs other program modules and program data. Each of the operating system one or more application programs other program modules and program data or some combination thereof may include an implementation of a networking environment. Program modules generally carry out the functions and or methodologies of embodiments of the invention as described herein.

Computer system server may also communicate with one or more external devices such as a keyboard a pointing device a display one or more devices that enable a user to interact with computer system server and or any devices e.g. network card modem etc. that enable computer system server to communicate with one or more other computing devices. Such communication can occur via Input Output I O interfaces . Still yet computer system server can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted network adapter communicates with the other components of computer system server via bus . It should be understood that although not shown other hardware and or software components can be used in conjunction with computer system server . Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays redundant array of inexpensive disk RAID systems tape drives and data archival storage systems etc.

With reference to an illustrative cloud computing environment is depicted. As shown cloud computing environment comprises one or more cloud computing nodes with which local computing devices used by cloud consumers such as for example personal digital assistant PDA or cellular telephone A desktop computer B laptop computer C and or automobile computer system N may communicate. Nodes may communicate with one another and may be grouped not shown physically or virtually in one or more networks such as private community public or hybrid clouds as described herein or a combination thereof. In this manner cloud computing environment can offer infrastructure platforms and or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It should be understood that the types of computing devices A N shown in are intended to be illustrative only and that computing nodes and cloud computing environment can communicate with any type of computerized device over any type of network and or network addressable connection e.g. using a web browser .

With reference to a set of functional abstraction layers provided by cloud computing environment is shown. It should be understood that the components layers and functions shown in are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted in cloud computing environment includes a hardware and software layer a virtualization layer a management layer and a workloads layer .

Hardware and software layer includes various hardware and software components. As one example the hardware components may include mainframes e.g. IBM zSeries systems reduced instruction set computer RISC architecture based servers e.g. IBM pSeries systems IBM xSeries systems IBM BladeCenter systems storage devices networks and networking components. As another example the software components may include network application server software e.g. IBM WebSphere application server software and database software e.g. IBM DB2 database software . IBM zSeries pSeries xSeries BladeCenter WebSphere and DB2 are trademarks of International Business Machines Corporation registered in many jurisdictions worldwide.

Virtualization layer provides an abstraction layer in which virtual entities e.g. virtual servers virtual storage virtual networks including virtual private networks virtual applications and operating systems and virtual clients are included. As previously discussed these virtual entities may be accessed by clients of cloud computing environment on demand. The virtual entities are controlled by one or more virtual machine monitors VMMs that may for example be implemented in hardware and software layer virtualization layer or management layer .

Management layer provides various functions e.g. resource provisioning metering and pricing security user portal service level management and SLA planning and fulfillment . The resource provisioning function provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. The metering and pricing function provides cost tracking as resources are utilized within the cloud computing environment and billing or invoicing for consumption of the utilized resources. As one example the utilized resources may include application software licenses.

The security function provides identity verification for cloud consumers and tasks as well as protection for data and other resources. The user portal function provides access to the cloud computing environment for consumers and system administrators. The service level management function provides cloud computing resource allocation and management such that required service levels are met. For example the security function or service level management function may be configured to limit deployment migration of a virtual machine VM image to geographical location indicated to be acceptable to a cloud consumer. The service level agreement SLA planning and fulfillment function provides pre arrangement for and procurement of cloud computing resources for which a future requirement is anticipated in accordance with an SLA.

Workloads layer provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include mapping and navigation software development and lifecycle management virtual classroom education delivery data analytics processing and transaction processing.

Information services are one of the cornerstones of information technology IT infrastructures. In general information services may be defined as the layer of a service oriented architecture SOA that provides an application access to information while hiding the details of the underlying data store so the data store can evolve and change without requiring the application to change and the application can provide the services as needed and allows a service provider to enforce policies e.g. business integrity policies and security policies at a layer that is consistent with the business view of the data. The demand for processing larger data volumes within smaller processing windows increases the operational cost of information services. To address the increasing operational cost of information services cloud computing has been devised to offer the ability to share infrastructure cost among multiple consumers or tenants. According to one aspect of the present disclosure a server is configured to check tenant identifiers IDs when requests for information services are received and route the tenant requests to an agent based on the tenant IDs. In various embodiments the agent is configured to implement tenant specific service level agreements SLAs in selecting transformation logic and data sources targets to be utilized in servicing the tenant requests.

Information services sharing in multi tenant cloud environments has usually been limited to the sharing of hardware as a software stack usually tends to be specific to each tenant since data and data transformation are usually tenant specific. Multi tenant cloud environments usually employ unique information service endpoints and may implement interfaces that are specific for each tenant. Conventional multi tenant cloud environments have generally lacked the flexibility to create higher level composed services through for example an enterprise service bus ESB that might also need to be multi tenant.

According to one or more embodiments techniques are disclosed that increase software stack sharing capabilities by employing multi tenant functions and service polymorphisms. As used herein polymorphism refers to the ability to define a common service interface while allowing changes in the way an underlying service is routed assigned resources and implemented based on tenant specific considerations. In this manner common implementations and resources may be utilized by multiple tenants when appropriate to facilitate cost savings via infrastructure sharing.

According to aspects of the present disclosure common information service interfaces and endpoints are employed to the extent permissible in order to maximize the sharing of the underlying infrastructure. Employing service implementation polymorphism based on a calling tenant facilitates different behaviors that may be required for different tenants. In general information services are often used as part of a higher level service composition e.g. a more complex master data management service an ESB service or a composite service component architecture SCA . Employing a common service interface and endpoint for underlying information services allows higher level composition components to be multi tenant capable while still maintaining a relatively simple composition. According to one or more aspects of the present disclosure tenant specific polymorphic implementations are implemented with a common interface and endpoint.

Service tenant polymorphism can take various forms. For example a completely different service implementation can be provided to different tenants or the same service implementation can be reused with different data sources targets for different tenants. According to one or more embodiments the selection of the service implementation is performed dynamically at runtime based on the service caller i.e. the tenant . In traditional object oriented polymorphism the service implementation is determined at service instantiation usually using a factory pattern. According to one or more aspects of the present disclosure a dynamic service implementation selection mechanism that is based on tenant identity is employed at the time of service invocation.

In general SLAs have traditionally been directed toward performance availability and scalability. According to the present disclosure implementing information service tenant polymorphisms facilitates extending the semantics of SLAs to encompass more information oriented concepts e.g. the quality or quantity of reference data or the algorithm or algorithms used for data processing such as specific standardized or matching algorithms.

The disclosed techniques generally increase the ability to share an information services infrastructure. With a common service interface and endpoint middleware that hosts service entry points can be completely shared by all tenants. In general middleware is responsible for the initial decoding of a service request e.g. decoding a simple object access protocol SOAP message and the selection of the service implementation to use according to the calling tenant. Typically the initial decoding of a service request and the selection of the service implementation are not the time consuming part of an information service invocation and are not subject to many SLA constraints that are different between tenants which facilitates further sharing of the services infrastructure. As such information service providers can usually focus more on service business logic i.e. information processing and less on front end hosting infrastructure.

It should be appreciated that service implementations can take various shapes and forms including the off loading of processing to a separate server or a dedicated data processing engine which may be required for certain tenant SLA constraints e.g. data isolation or processing power capabilities. The extension of traditional SLA semantics to more information service oriented concepts e.g. data providers or data processing algorithms facilitates added customer value by providing guarantees on the data processing mechanism. The extension of traditional SLA semantics to information service oriented concepts also usually provides more flexibility and options in the pricing definitions of an information as a service offering.

In general information service polymorphism i.e. how to provide various information service implementations for the same service interface and endpoint may be applied to transformation logic and or data sources targets. As used herein transformation logic refers to the algorithm or algorithms used to transform data data sources refers to the locations of the data to be transformed and data targets refers to the locations where the transformed data is stored. In general an infrastructure should be capable of configuring the transformation logic and or the data sources targets in a tenant specific manner in order to maximize sharing capabilities and to provide maximum flexibility in information service implementations.

Transformation logic polymorphism may be achieved by dissociating the way the information service is exposed to callers tenants . In a typical implementation the service interface and endpoint are the parts that are exposed to callers and that are shared by all tenants. The service interface and endpoint may be hosted in a shared infrastructure that is responsible for receiving service requests performing the service format specific decoding e.g. the decoding of a SOAP message and selecting and sending the decoded request to the right service implementation according to the current tenant.

The service implementation or service provider provides the actual data processing and transformation logic and may take various shapes and or forms. For example the service implementation may vary between a relatively simple piece of Java code that runs directly within the shared infrastructure to something that is more complex but more flexible where data processing is off loaded to a dedicated data processing engine. For a given information service a service provider interface is defined to include a single process request operation taking as input the service input arguments and returning the service output arguments in a service agnostic format e.g. Java data objects JDOs or service data objects SDOs . Tenant specific implementations may be provided by adding an implementation of the service provider interface.

As one example an InfoSphere information services director ISD is a typical implementation of the more complex and flexible case. As is known the InfoSphere ISD is configured to facilitate publishing tasks as reusable services in an SOA. In one or more embodiments the shared infrastructure is provided by an ISD server that may be hosted within for example a WebSphere application server. In this embodiment the ISD server provides the handling and decoding of an initial service request. The ISD server then dispatches the request to a specialized data processing and transformation engine e.g. an InfoSphere DataStage QualityStage or a DB2 which is a relational model database server federation. In a disclosed embodiment dispatch is performed through dedicated ISD agents that are the gateways between the shared infrastructure and the data transformation engines.

With reference to a cloud computing environment is illustrated that is configured to process an information service request with tenant specific routing capabilities according to an aspect of the present disclosure. Cloud computing environment includes a management server data processing system that implements a virtual machine monitor VMM and is in communication with a cloud consumer client tenant and exemplary servers and . Management server which handles and decodes service requests may be for example an ISD server that functions as a shared interface for multiple tenants. Server executes a virtual machine VM server executes a VM and server executes a VM . While only three servers and are illustrated in cloud computing environment it should be appreciated that more or less than three servers may be implemented within a cloud computing environment configured according to the present disclosure. Moreover while servers and are only illustrated as executing a single VM it should be appreciated that servers and may each execute one or more VMs and may each execute one or more VMMs which may be implemented for example in hardware and software layer virtualization layer or as a resource provisioning function in management layer of computing environment .

Management server as well as servers and may be configured in a similar manner as computer system server of . Management server may for example be implemented within hardware and software layer of computing environment . In this example servers and may be in the same or different geographical locations within the United States or other countries.

VMs and may each be configured to support multiple tenants based on tenants assigned to the VMs and by one or more agents which may be included within VMM . In determining which tenants to assign to which VMs and VMM may consider whether a current workload of VMs and allows for an additional tenant workload while still meeting tenant specific SLAs. VMM may for example deploy migrate workload dynamically to one or more other servers within cloud computing environment to meet tenant specific SLAs. Management server is configured to receive service requests from tenant and route the service requests to an agent e.g. based on a tenant ID that selects transformation logic and data sources targets to service the request e.g. by routing service requests to one of VMs and for service based on the tenant ID.

With reference to a cloud computing environment is illustrated that is configured to process information service requests with tenant specific routing capabilities according to an aspect of the present disclosure. Cloud computing environment includes management server that implements VMM and is in communication with tenants A B and C. As is illustrated management server is also in communication with VMs and . VM is communication with database DB and DB and VM is in communication with DB . As is shown in management server provides an interface to receive service requests from tenants A B and C and to provide responses to tenants A B and C. An agent e.g. implemented within VMM or elsewhere within management server is configured to dynamically route tenant requests based on tenant specific SLAs which are indicated by tenant IDs. As is shown in services requests for tenants A and B are dynamically routed to VM based on tenant IDs for tenants A and B and service requests for tenant C are dynamically routed to VM based on a tenant ID for tenant C . In this example VM implements the same transformation logic for tenants A and B and VM implements different transformation logic for tenants C. It should be appreciated that data sources targets for tenants A and B may be provided by DB and or DB and data sources targets for tenant C are provided by DB . Tenants A and B may for example share a same database e.g. DB or databases e.g. DB and DB . Tenants A and B may employ a same schema or a different schema for DBs and .

In one or more embodiments transformation logic polymorphism can be viewed as a superset of the data sources targets case. For example implementing tenant specific transformation logic may fix the data sources targets that the transformation logic uses. In general tenant specific data sources targets are valuable when transformation logic can be shared by multiple tenants and only the data acted upon by the transformation logic is tenant specific.

In most cases access interfaces for data sources targets are standardized. For example an access interface may take the form of flat files e.g. file access application programming interfaces APIs relational database management systems RDBMSs e.g. structure query language SQL Java database connectivity JDBC and open database connectivity ODBC interfaces queues topics e.g. a Java message service JMS interface and traditional data process engines e.g. InfoSphere DataStage QualityStage which already separate the physical connection information e.g. file path JDBC ODBC connection uniform resource locators URLs from the transformation logic. According to one or more aspects of the present disclosure dynamic selection of the physical connection information based on the current tenant is implemented.

In general selection of the information service implementation includes identification of the current tenant selection of the corresponding tenant transformation logic if any and selection of the tenant specific data sources and targets if any . The identification of the tenant may be provided by the entry point infrastructure e.g. implemented by management server that receives the information service request. The identity of the service caller tenant may be established through any appropriate authentication mechanisms. For example a user identifier ID a user password web services security WSS tokens or certificates can be used as a tenant ID or utilized to identify a tenant through a group or role memberships. Employing a user ID may be the simplest mechanism for identifying a tenant as the approach may leverage identity access and management capabilities of an existing infrastructure since the user ID is usually the only identity related information that is flowing through infrastructure containers as it is needed for authorization decisions.

Tenant identification may also be completely dissociated from a calling tenant ID. For example a specific tenant key may be provided as part of an information service call or the origin of a calling tenant e.g. host name or Internet protocol IP address of the caller can be used to determine an appropriate tenant ID. In general a tenant ID may be derived from the service request payload or from the service request context e.g. a hypertext transfer protocol HTTP header of an HTTP based service request or from a mapping of a user to a tenant. In a typical implementation the infrastructure is flexible in the selection of where the tenant ID is derived e.g. caller identity service request payload or service request context and is able to propagate the information to the information service provider. For example the infrastructure may propagate context information through service implementations explicit API input arguments thread local variables or custom security attributes. For a Java based environment tenant specific context and associated custom attributes may be standardized.

Once the tenant has been properly identified by the infrastructure the appropriate transformation logic is dynamically selected at runtime i.e. at the time the information service request is received . For example with reference to an appropriate one of VMs and may be selected by an agent not separately shown of VMM to service a received service request based on a tenant ID associated with the received service request. In various embodiments the infrastructure is configured to provide a flexible and dynamic mapping mechanism between tenant IDs and information service implementations. In at least one embodiment an administrator can change the mapping through a comprehensive user interface and any changes may then be taken into account at runtime. For example the actual transformation logic selection process can use a simple factory based mechanism to a more complex pooling mechanism. In general pooling mechanisms can also be used to configure and handle traditional availability and scalability SLA constraints.

Tenant specific routing may encompass the selection of a specific agent e.g. an ISD agent to process the request. The selection of the specific agent can be for example driven by performance and scalability tenant specific SLAs. Tenant specific routing may encompass the selection of a specific DataStage or QualityStage job at the agent level. For example tenant specific routing may be driven by the data oriented tenant SLAs i.e. which transformation logic to use . Typically data sources targets selection is technically harder to achieve. However there are many ways that data sources targets can deal with multi tenant data e.g. separate databases a same database with separate schemas or a same database with a same schema . In general the selection process may occurs relatively deep within the information service implementation i.e. within the transformation logic .

Tenant identification can mean different things for different data sources and targets. Tenant identification may identify a specific database or schema the value of a specific column in a table or a user ID may be used to authenticate a user with a data source target. In one or more embodiments an infrastructure provides maximum flexibility in the data sources and data targets selection by properly propagating a tenant ID through the various information service layers and correctly mapping the tenant ID in a data source target specific fashion. For example an RDBMS source might require an extra WHERE clause in a structured query language SQL statement in order to select tenant specific data. As another example a different data source may require access to a completely separate database and database server for full tenant data isolation .

The dynamic capabilities required to properly address tenant identification mapping to data sources targets is usually a weak point in existing infrastructures. In the typical case of an RDBMS data source target various different levels of the RDBMS access should ideally be fully dynamic. However using conventional approaches only SQL parameters are dynamic. According to one or more aspects of the present disclosure SQL parameters SQL queries schema table space database selection and database server selection are all fully dynamic in order to correctly map tenant IDs to appropriate data sources targets. As one example dynamic SQL queries facilitate different queries at least different WHERE clauses for different tenants.

SLAs are the typical way in which a contract for a service subscription is specified. Conventionally SLAs have usually covered aspects like security performance scalability and functional aspects. While these aspects are applicable to information services e.g. deciding on which computer node of a data stage DS parallel engine might provide the best performance there are information centric and data centric characteristics for SLAs that are specific to information services. From an implementation perspective the information specific SLA characteristics can either be implemented as an extension to the overall service SLA or as a separate SLA attached to the outmost service in case of a service composite and appropriately passed to nested services as needed. An SLA can also be provided with many different technologies e.g. extensible markup language XML and property files including key value pairs .

An SLA may offer a tenant a number of different information centric characteristics for selection. For example data isolation may require a separate database a same database with separate schema or a same database with a same schema. Based on the data isolation selection persistency access and an SQL query may need to be dynamically adjusted. As another example data encryption may specify security for data in motion security for data in a production database and security for data at rest. Data in motion may require that a secure communication channel e.g. a secure socket layer SSL and a message encryption be separately selectable. Data in a production database may employ database encryption features either for all records fields or only on sensitive fields e.g. a social security number SSN field . Data at rest may require backup and protection by encryption.

Compliance with specific privacy data protection regulations may vary by country. For example customer information according to Swiss law has to physically reside within Switzerland. As another example German citizen employee information cannot be processed by IT systems outside Germany without written approval from the employee. If legal compliance is required an operational model of the service should support legal compliance with an appropriate federated architecture e.g. an architecture than includes a mobile device management MDM server . An SLA may also offer a tenant choices on standardized services such as address validation data enrichment matching and survivorship. If data enrichment is selected a third party provider for which a tenant has a valid license key e.g. Dun and Bradstreet Verispan Facebook and LinkedIn may be chosen. Matching may utilize for example deterministic matching or probabilistic matching. Automatic survivorship may be applied with a default rule set or a tenant specific rule set. A common service to create an address may for example offer data isolation standardization address validation and or mapping. For example data isolation may include a separate database a same database with separate schema or a same database with the same schema. In any case based on the data isolation selection the persistency access including the SQL query may be dynamically adjusted. Assuming mapping is selected a subscribing tenant may provide a license key or the service provider may have an appropriate subscription and charges the subscribing tenant for the feature .

It should be appreciated that depending on the selections made by a tenant the same service interface with the same data model may provide different capabilities based on the SLA thus enabling polymorphic behavior of the information services. Data operated on by transformation logic may take various forms. For example data may include business metadata technical metadata operational metadata reference data e.g. look up tables and hierarchical reference data master data e.g. customer data product data supplier data account data and network asset data operational data e.g. customer relationship management CRM data enterprise resource planning ERP data source control management SCM data and human resource HR data unstructured data contracts movies and joint photographic experts group JPEG images and analytical data e.g. data warehouse DW data big data entity analytics predictive analytics and data mining .

With reference to a flow chart for an exemplary process that implements information services with tenant specific SLAs according to various embodiments of the present disclosure is illustrated. For ease of understanding process is discussed in conjunction with cloud computing environment of . Process may for example be performed at least in part by an agent of management server . Process begins e.g. in response to receipt by management server of a communication by a cloud consumer at block at which point control transfers to decision block . In block management server determines whether the communication is a service request from a subscribing tenant e.g. one of tenants A B and C . If the communication is not a service request control transfers from block to block where process terminates.

Next in decision block management server determines whether a valid tenant ID is associated with the service request. For example management server may access a database to determine whether a valid tenant ID was received with the service request. In the event a valid tenant ID was not received in block control transfers to block where management server provides a response that indicates that the tenant ID is invalid. Following block control transfers to block . In the event that the tenant ID is valid in block control transfers to block .

In block an agent of management server selects transformation logic for processing the service request based on the tenant ID. For example the agent of management server may select transformation logic by selecting a particular VM to process the service request. Next in block the agent of management server selects data sources targets for the service request based on the tenant ID. For example the agent of management server may select data sources targets by selecting a particular database that may be accessed by the particular VM. Alternatively by selecting a particular VM the agent of management server may also select a particular database as the data source and the data target. Next in block the selected VM processes data from the selected data sources using the selected transformation logic. Then in block the selected VM stores the processed data from the selected data sources at selected data targets. According to one or more embodiments of the present disclosure data source target queries requests are based on a tenant ID. In this manner the selected transformation logic becomes tenant specific logic. Following block control transfers to block where process terminates.

In the flow chart above the method depicted in may be embodied in a computer readable medium containing computer readable code such that a series of steps are performed when the computer readable code is executed on a computing device. In some implementations certain steps of the methods may be combined performed simultaneously or in a different order or perhaps omitted without deviating from the spirit and scope of the invention. Thus while the method steps are described and illustrated in a particular sequence use of a specific sequence of steps is not meant to imply any limitations on the invention. Changes may be made with regards to the sequence of steps without departing from the spirit or scope of the present invention. Use of a particular sequence is therefore not to be taken in a limiting sense and the scope of the present invention is defined only by the appended claims.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible storage medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device. Program code embodied on a computer readable signal medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be stored in a computer readable storage medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

As will be further appreciated the processes in embodiments of the present invention may be implemented using any combination of software firmware or hardware. As a preparatory step to practicing the invention in software the programming code whether software or firmware will typically be stored in one or more machine readable storage mediums such as fixed hard drives diskettes optical disks magnetic tape semiconductor memories such as ROMs PROMs etc. thereby making an article of manufacture in accordance with the invention. The article of manufacture containing the programming code is used by either executing the code directly from the storage device by copying the code from the storage device into another storage device such as a hard disk RAM etc. or by transmitting the code for remote execution using transmission type media such as digital and analog communication links. The methods of the invention may be practiced by combining one or more machine readable storage devices containing the code according to the present invention with appropriate processing hardware to execute the code contained therein. An apparatus for practicing the invention could be one or more processing devices and storage systems containing or having network access to program s coded in accordance with the invention.

Thus it is important that while an illustrative embodiment of the present invention is described in the context of a fully functional computer server system with installed or executed software those skilled in the art will appreciate that the software aspects of an illustrative embodiment of the present invention are capable of being distributed as a program product in a variety of forms and that an illustrative embodiment of the present invention applies equally regardless of the particular type of media used to actually carry out the distribution.

While the invention has been described with reference to exemplary embodiments it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the invention. In addition many modifications may be made to adapt a particular system device or component thereof to the teachings of the invention without departing from the essential scope thereof. Therefore it is intended that the invention not be limited to the particular embodiments disclosed for carrying out this invention but that the invention will include all embodiments falling within the scope of the appended claims. Moreover the use of the terms first second etc. do not denote any order or importance but rather the terms first second etc. are used to distinguish one element from another.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below if any are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiments were chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

