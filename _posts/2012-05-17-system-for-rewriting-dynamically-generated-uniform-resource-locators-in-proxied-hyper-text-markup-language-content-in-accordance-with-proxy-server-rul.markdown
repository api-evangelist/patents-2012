---

title: System for rewriting dynamically generated uniform resource locators in proxied hyper text markup language content in accordance with proxy server rules
abstract: A system and method for facilitating changing a link generated by a script provided in proxied content. The example method includes identifying a link-producing script in proxied content; applying a wrapper function to the link-producing script; and employing the wrapper function to rewrite one or more links output by the link-producing script. In a specific embodiment, the proxied content includes Hypertext Transfer Protocol Language (HTML) markup. The link-producing script is implemented via JavaScript, and one or more links output via the link-producing script includes one or more Uniform Resource Locators (URLs).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09460222&OS=09460222&RS=09460222
owner: Oracle International Corporation
number: 09460222
owner_city: Redwood Shores
owner_country: US
publication_date: 20120517
---
The present application relates to software and more specifically to software for facilitating proxy operations in computer networks.

Proxy software is employed in various demanding applications including content filtering censoring anonymizing tracking implementing gateways and so on. Such applications often demand efficient mechanisms for accurately and consistently translating communications between a client and a content server via an intermediate proxy.

A proxy such as a proxy server may be any communication intermediary between a client and a server from which the client requests content. For example a client may connect to a proxy server to request content such as a service file connection web page or other resource from a content server. The proxy server evaluates the client request according to predetermined rules such as filtering censoring or tracking rules. The proxy server then selectively provides requested content to the client in accordance with the predetermined rules.

When relaying HyperText Markup Language HTML content such as a webpage between a client and content server certain Uniform Resource Locator URL links and associated resources must be adjusted or translated to function as intended. The adjusted or translated links are said to be rewritten relative to proxy. However certain URL links also called hyperlinks and resources may not be present in the HTML markup offered by a content server. For example the HTML markup may contain embedded URL generating scripts to be run on a client browser.

Conventionally dynamically generated hyperlinks output by the URL generating scripts bypass proxy server hyperlink adjustments or translations. Hence such dynamically generated hyperlinks may become inoperable when proxied using conventional link rewriting mechanisms.

An example method facilitates rewriting or otherwise changing a link generated by a script provided in proxied content. The example method includes identifying a link producing script in proxied content applying a wrapper function to the link producing script and employing the wrapper function to facilitate changing one or more links included in dynamic content that is output by the link producing script.

In a specific embodiment the proxied content includes Hypertext Transfer Protocol Language HTML markup. The link producing script is implemented via JavaScript and one or more links output via the link producing script include one or more Uniform Resource Locators URLs .

The specific embodiment further includes receiving a request for proxied content such as a pagelet from a client browser and mapping the request to a URL associated with a content server. Markup corresponding to the proxied content and identified by the client request is retrieved by a proxy server from a content server also called the remote server. Software running on the proxy server is adapted to parse or transform the markup in accordance with rules specified via the proxy server and then provide the transformed markup to the client browser. Transformation of the markup includes but is not limited to applying a wrapper function to any URLs existing in a script included in the markup and applying a wrapper function to any JavaScript expressions that make calls to JavaScript functions e.g. document.write . . . that produce dynamically generated content. The dynamically generated content may include one or more dynamically generated URLs.

The method further includes executing the wrapper function and the one or more link producing scripts to yield one or more dynamically generated links in response thereto. The one or more link producing scripts and accompanying wrapper function may be executed on a client computer running the client browser. The one or more dynamically generated links are rewritten to work properly with the proxy server i.e. they are rewritten relative to proxy.

Rewriting of the one or more dynamically generated links may occur on a client computer or on the proxy server or a combination of both depending upon the implementation. When employing server side dynamic link rewriting dynamically generated content output from a link producing script which includes the one or more dynamically generated links is forwarded to the proxy server for rewriting of dynamically generated links therein. This is called the RESTful approach. Rewritten links are then forwarded from the proxy server back to the client computer for use by the client browser.

Transformation of the proxied content may further include identifying any static URLs occurring in the proxied content and rewriting the static URLs to facilitate transfer of content associated with the static URLs between a content server and the client via the proxy server.

Hence certain embodiments discussed herein facilitate rewriting URLs such as dynamically generated URLs that might not be found by conventional URL parsing mechanisms thereby limiting circumvention of the proxy server and reducing the likelihood of nonfunctioning or otherwise improperly proxied links.

As web pages increasingly employ dynamic HTML and or content generated via client side scripting languages the need for efficient mechanisms as presented herein for correctly proxying such dynamic content and links generated thereby increases.

A further understanding of the nature and the advantages of particular embodiments disclosed herein may be realized by reference of the remaining portions of the specification and the attached drawings.

Although the description has been described with respect to particular embodiments thereof these particular embodiments are merely illustrative and not restrictive.

For example while the present application is discussed with respect to web based proxies that facilitate transfer of pagelets containing link producing JavaScripts between a remote server i.e. content server and a client via a proxy embodiments are not limited thereto. For example web proxying operations involving relaying content other than pagelets wherein the content includes link generating computer code other than JavaScript may handle dynamically generated links as discussed herein without departing from the scope of the present teachings.

For the purposes of the present discussion a link such as a hyperlink may be any reference to or specification of a location of content in a computer network. The specification of a location may include an address associated with the content such as a HyperText Transfer Protocol HTTP address called a Uniform Resource Locator URL . A URL may be a specific type of link characterized by a text string that references an Internet resource.

A script may be any computer program or component function or procedure thereof adapted to perform one or more tasks. A link producing script may be any script that is adapted to output a link such as a URL. For example a script e.g. a JavaScript document.write . . . script that outputs content e.g. markup that includes one or more links represents a type of link producing script also called a link generating script. Similarly a script that includes one or more function calls to a link producing script is also is considered to be a link producing script.

Certain scripts may be executed via a browser which may run on a computer that is separate from a content server that hosts content that includes the script. Such a browser is called a client browser. A client browser may be any browser software running on a client computer or system. A browser may be any software adapted to access and or traverse content available via a computer network such as an enterprise network and or the World Wide Web. A client may be any computer or system that is adapted to receive content from another computer or system called a server.

A content server may be any server that is adapted to provide a resource e.g. data or functionality to a client. A remote server may be any content server in communication with a client via a proxy server. A proxy such as a proxy server may be any communication intermediary between a client and a content server.

Content that is generated via a script is called dynamic content. Links occurring in the dynamic content which have been generated via the script are called dynamically generated links. The script that produces the dynamically generated links is a content generating script that is also a link producing script. Hence a dynamically generated URL may be any URL that is output from or otherwise determined by a script called a link producing script or a URL generating script.

Content may be any resource which may include data and or functionality such as a web page file streaming audio and or video and so on. Proxied content may be any content that is provided to a consuming resource such as computer and or program via an intermediate proxy. The consuming computer and or program or collection thereof is called the client. A server may be any computing resource such as a computer and or software that is adapted to provide content to another computing resource or entity that requests it i.e. the client.

Hypertext may be any text or content with one or more elements that are associated with hyperlinks. The elements may include for example image maps or text that point to the location or address associated with the hyperlink such that when a user selects an image map or hyperlinked text the content associated with the specified location or address may be presented via a user interface. In certain contexts the term hyperlink may also refer to the user interface control e.g. image map hyperlinked text etc. associated with the specified location or address. However as the term is used herein a hyperlink refers to a URL associated with the user interface control.

For clarity certain well known components such as hard drives processors operating systems power supplies Internet Service Providers ISPs and so on have been omitted from the figures. However those skilled in the art with access to the present teachings will know which components to implement and how to implement them to meet the needs of a given implementation.

The example system includes a proxy server which may be implemented as a pagelet producer which acts as a communication intermediary between a browser client and a remote server . The proxy server includes a pagelet mapper in communication with a proxy server markup handler . The browser client includes a web page retriever which may include a browser user interface for rendering and displaying a consumer page and for sending requests for content to the remote server via the pagelet mapper of the proxy server . The browser client further includes a client markup handler which communicates with the web page retriever and which may communicate with the proxy server markup handler of the proxy server .

The client markup handler is adapted to selectively rewrite static URLs that have not already been rewritten by the proxy server markup handler existing in transformed markup obtained from the proxy server markup handler to execute link producing scripts and to either rewrite dynamically generated content or to issue a request to the proxy server markup handler to rewrite and return the dynamically generated content as discussed more fully below.

For the purposes of the present discussion a URL or link is said to be rewritten if it is adjusted replaced or otherwise modified. For example when adjusting a URL that points to a content server to be a relative URL relative to the proxy server the adjusted URL is said to be rewritten.

Markup may be any content and associated syntax specified via a markup language. A markup language such as HTML may be any system or specification for prescribing how content is to be presented via a user interface such as a browser user interface. Markup syntax may be any instructions or computer code included as part of a markup language.

The remote server includes content which may include one or more link producing scripts adapted to be run via a browser engine to yield dynamically generated content markup with dynamically generated links.

In an example operative scenario the web page retriever issues a request for a pagelet where the request is sent to the pagelet mapper of the proxy server . For the purposes of the present discussion a pagelet may be any section of a webpage. Certain pagelets may be included within frames e.g. within IFRAME HTML tags or otherwise embedded directly into web page markup without using frames.

The pagelet mapper includes computer code for mapping the requested pagelet to a remote URL corresponding to the pagelet address on the remote server . The remote server includes machine readable instructions i.e. computer code for returning requested content identified by the remote URL to the proxy server .

The requested content received by the proxy server is analyzed for the existence of static URLs and link producing scripts. The proxy server markup handler includes computer code for rewriting or otherwise changing the static URLs in accordance with predetermined proxy server rules. The predetermined proxy server rules are implementation specific and may vary depending upon the application. The rules may include for example adjusting URLs to point to a particular web address associated with the proxy server and or adding additional strings to facilitate tracking resources requested by the client browser .

The proxy server markup handler analysis of the returned markup from the remote server includes analyzing proxied content for existence of a document.write JavaScript statement e.g. document.write . . . included within HTML script tags e.g. . . . . For the purposes of the present discussion a document.write Java Script statement may be any programming language statement or expression that calls a document.write Java Script function.

Analysis of the proxied content i.e. returned markup from the remote server further includes analyzing proxied content for existence of an innerHTML JavaScript statement. An innerHTML Java Script statement e.g. .innerHTML . . . may be any programming language statement that calls a class method or function and or other computing object whose name includes innerHTML. 

The wrapper function may include computer code for replacing one or more calls to one or more document.write JavaScript functions in the proxied content with a call to a first component of the wrapper function e.g. WrapperDocWrite . . . . Computer code defining the first component may be included in a code library e.g. Library and Pagelet Producer Client specified via the wrapper function as shown in the transformed markup on the client browser . Similarly the innerHTML Java Script statements e.g. .innerHTML . . . in the proxied content may be replaced with calls to a second component of the wrapper function e.g. WrapperInnerHtml . . . . Computer code for facilitating implementing the second component of the wrapper function may also be included in one or more of the code libraries e.g. Library and Pagelet Producer Client specified via the wrapper function.

Hence the proxy server markup handler includes computer code for applying a wrapper function to each detected link generating script. For the purposes of the present discussion a wrapper function may be any computer code e.g. software program adapted to alter and or augment another script or function.

In the present example embodiment the wrapper function applied to a link generating script before transfer of the wrapped script to the client browser is adapted to encapsulate the link generating script to facilitate capturing links output by the link generating script and to facilitate rewriting captured scripts in accordance with predetermined proxy server rules. The wrapper function may first allow the link generating script to run normally to potentially create a URL on a client browser then parse the output of the link generating script and rewrite any URLs as required to function in accordance with the proxy server rules. The parsed output may be placed onto the client browser page 20 so that it appears as it originally would have before the introduction of the wrapper function.

Exact details of the wrapper function are implementation specific and may vary accordingly. Those skilled in the art with access to the present teachings may readily determine appropriate details and implement a wrapper function to meet the needs of a given implementation without undue experimentation.

The example operative scenario further includes returning transformed i.e. parsed markup which includes rewritten static URLs and any wrapped link generating scripts to the client browser . The client markup handler of the client browser receives the transformed content from the proxy server markup handler and executes any wrapped link producing scripts in the transformed markup as needed to output dynamically generated markup and accompanying dynamically generated URLs.

The example operative scenario may involve implementing a first server side processing option which includes sending markup output by a link producing script e.g. a Java Script document.write script to the proxy server markup handler to be parsed and the dynamically generated URLs therein to be rewritten in accordance with proxy server rules.

A second client side processing option includes employing the wrapper function associated with each link producing script to parse and rewrite dynamically generated content including any dynamically generated URLs therein in accordance with proxy server rules specified via the wrapper function. The second client side processing option involves performing parsing and markup rewriting operations on the client browser computer .

In summary the remote server responds to client initiated content requests forwarded through the proxy server with markup that is returned to the proxy server . The proxy server employs the proxy server markup handler to parse the markup and look for URLs for URLs occurring within scripts e.g. within HTML script tags and for JavaScript function calls occurring within HTML script tags that may produce dynamic content with dynamically generated URLs therein. The proxy server markup handler then wraps static URLs in the markup wraps URLs within scripts and wraps JavaScript expressions that may produce dynamically generated content with dynamically generated URLs. The wrapped URLs and expressions are then forwarded to the client . Subsequently the client markup handler may optionally via a first option employ the applied wrapper functions to rewrite URLs directly on the client or may optionally via a second option implement a RESTful call to the proxy server to parse dynamically generated content rewrite URLs therein and return rewritten URLs back to the client for further use.

Embodiments that implement only the first server side processing option the second client side processing option or a combination of both are possible.

The web page retriever includes a pagelet injector which includes code for initiating fetching of remote content e.g. content from the remote server also called proxied content via the proxy server . The client side pagelet injector forwards a pagelet request to a pagelet injector handler running on the proxy server . The pagelet injector adjusts the request as needed and forwards it to a server side retriever which communicates with the remote server to trigger fetching of the content back to the proxy server .

Retrieved content may be passed back through the retriever and pagelet injection handler to a server side transformer included in the proxy server markup handler . The server side transformer includes computer code for parsing retrieved content and identifying URLs and other content such as special fragments and then marking any found static URLs included within or outside of a script identified within HTML script tags for rewriting and applying a wrapper function around any link generating scripts that produce or include dynamic URLs and content.

The server side transformer may forward the parsed content to a server side URL rewriter via the pagelet injection handler . Alternatively the server side transformer communicates directly with the server side URL rewriter . Alternatively or in addition URL rewriting operations are relegated to the client side URL rewriter .

The server side URL rewriter includes computer code for rewriting marked static URLs in the parsed content from the server side transformer and returning the rewritten URLs to the pagelet injection handler for forwarding to the client browser .

The client browser forwards received parsed content with rewritten URLs relayed the pagelet injection handler from the server side transformer or alternatively from the server side transformer and then passes the parsed content to the client markup handler . The client markup handler includes an optional client side URL rewriter which includes computer code for rewriting any static URLs marked by the server side transformer that have not been rewritten on the server side via the server side URL rewriter .

Note that in certain implementations the server side URL rewriter is reserved for rewriting URLs in response to requests from the client side URL rewriter . In such implementations parsed content from the server side transformer may be forwarded to the client browser without first performing server side URL rewriting via the server side URL rewriter .

The client markup handler further includes a dynamic content rewriter which includes computer code for executing link generating scripts in the received parsed content from the proxy server in accordance with applied wrapper functions. The dynamic content rewriter selectively invokes server side functionality e.g. the URL rewriter to rewrite dynamically generated URLs output from any link generating scripts contained in parsed markup received from the proxy server . The dynamic content rewriter does this by calling a client side transformer Representational State Transfer REST client to facilitate rewriting dynamically generated content identified by the server side transformer via the server side URL rewriter .

The transformer REST client includes computer code for employing a HyperText Transfer Protocol HTT POST method to send HTML markup to the proxy server for URL rewriting. The client side transformer REST client communicates with the server side URL rewriter via an intermediate server side transformer REST handler . The server side transformer REST handler may also communicate with the server side transformer to facilitate employing functionality thereof to facilitate transferring resulting rewritten dynamically generated URLs and related markup and content back to the client browser for use by the web page retriever .

The web page retriever may employ rewritten markup including rewritten dynamically generated URLs to access and display or otherwise present the proxied content in a user interface of the client browser .

The construction of the system of is similar to the construction of the system of with the exception that the client markup handler includes a client side transformer which includes computer code for parsing content for URLs and special fragments e.g. dynamically generated fragments . In addition the client side dynamic content rewriter need not communicate with the server side URL rewriter so the client side transformer REST client and server side transformer REST handler of are omitted from . Instead the client side dynamic content rewriter communicates with the client side URL rewriter and the client side transformer to facilitate applying any additional wrapper functions to received content as needed and to facilitate rewriting dynamically generated links and related content e.g. special fragments that are output from link generating scripts in the parsed content received from the server side transformer and or received from the client side transformer .

Content rewritten via the client markup handler including dynamically generated URLs may be provided to the web page retriever to facilitate employing the proxy server to retrieve requested content from the remote server and to display or otherwise present it via the client browser .

The second example method includes an initial content receiving step which includes receiving proxied content which includes one or more link generating scripts or function calls e.g. document.write markupA to be executed on a client browser.

A subsequent scanning step includes scanning the received content for instances of JavaScript such as document.write document.writeln and .innerHTML .

Next upon finding JavaScript statements that include document.write document.writeln and or .innerHTML the found statements are replaced in a replacing step with calls to a wrapper function component. For example instances of .innerHTML may be replaced with a call to a WrapperinnerHTML function. A JavaScript parser may be employed to find any HTML Document Object Model DOM element expressions left of . and to find portions of the element expressions to the right of an assignment statement e.g. to the right of or within parenthesis . . . . Certain assignment statements are entirely replaced with calls to one or more wrapper function components such as WrapperInnerHTML element expr markup expr .

After the replacing step a providing step outputs the resulting script identified between the and tags shown in which represents a wrapped script i.e. a link producing script to which a wrapper function has been applied. The wrapped script may be processed by the client markup handler of and dynamically generated URLs output therefrom may be rewritten server side e.g. via the system of and or client side e.g. via the system of .

Example pseudo code for facilitating implementing the method and associated wrapper function of is as follows.

Exact details pertaining to identifying portions of content to be wrapped and wrapper function details are implementation specific and may vary. Those skilled in the art with access to the present teachings may readily determine how to implement a wrapper function to meet the needs of a given implementation without undue experimentation.

A second step includes applying a wrapper function to the link producing script. A third step includes employing the wrapper function to change one or more links output by the link producing script.

Note that the method may be augmented or altered without departing from the scope of the present teachings. Examples of possible additional steps include receiving a request for proxied content such as a pagelet from a client browser and mapping the request to a URL associated with a content server retrieving markup from the content server corresponding to proxied content identified via the request transforming the markup in accordance with rules specified via the proxy server and providing transformed markup to the client browser. The rules specified by the proxy server may be incorporated in the applied wrapper function.

Any suitable programming language can be used to implement the routines of particular embodiments including C C Java assembly language etc. Different programming techniques can be employed such as procedural or object oriented. The routines can execute on a single processing device or multiple processors. Although the steps operations or computations may be presented in a specific order this order may be changed in different particular embodiments. In some particular embodiments multiple steps shown as sequential in this specification can be performed at the same time.

Particular embodiments may be implemented in a computer readable storage medium for use by or in connection with the instruction execution system apparatus system or device. Particular embodiments can be implemented in the form of control logic in software or hardware or a combination of both. The control logic when executed by one or more processors may be operable to perform that which is described in particular embodiments.

Particular embodiments may be implemented by using a programmed general purpose digital computer by using application specific integrated circuits programmable logic devices field programmable gate arrays optical chemical biological quantum or nanoengineered systems components and mechanisms may be used. In general the functions of particular embodiments can be achieved by any means as is known in the art. Distributed networked systems components and or circuits can be used. Communication or transfer of data may be wired wireless or by any other means.

It will also be appreciated that one or more of the elements depicted in the drawings figures can also be implemented in a more separated or integrated manner or even removed or rendered as inoperable in certain cases as is useful in accordance with a particular application. It is also within the spirit and scope to implement a program or code that can be stored in a machine readable medium to permit a computer to perform any of the methods described above.

As used in the description herein and throughout the claims that follow a an and the includes plural references unless the context clearly dictates otherwise. Also as used in the description herein and throughout the claims that follow the meaning of in includes in and on unless the context clearly dictates otherwise.

Thus while particular embodiments have been described herein latitudes of modification various changes and substitutions are intended in the foregoing disclosures and it will be appreciated that in some instances some features of particular embodiments will be employed without a corresponding use of other features without departing from the scope and spirit as set forth. Therefore many modifications may be made to adapt a particular situation or material to the essential scope and spirit.

