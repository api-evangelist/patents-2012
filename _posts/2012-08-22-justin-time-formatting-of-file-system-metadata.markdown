---

title: Just-in time formatting of file system metadata
abstract: An improved technique generates formatted file system metadata in increments only when metadata for those increments are specifically requested. A location on a storage volume designated for storing file system metadata is read and tested to determine whether it stores a predetermined pattern indicating an unformatted state. If the pattern is found, metadata for the designated location are generated and returned. Otherwise, metadata are returned as initially read from the storage volume.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09152637&OS=09152637&RS=09152637
owner: EMC Corporation
number: 09152637
owner_city: Hopkinton
owner_country: US
publication_date: 20120822
---
Data storage systems such as disk drives and storage arrays i.e. arrays of disk drives and or other non volatile storage devices generally require formatting to provide a full range of capabilities. Formatting typically involves writing file system metadata to storage media. The metadata includes file system bookkeeping information such as ownership information pertaining to different blocks or groups of blocks of the storage media as well as free space on the storage media.

Certain storage arrays have the ability to provision storage on the fly. Such arrays may serve the needs of multiple users running various applications. When data storage requirements from users exceed the amount of storage currently available to the array the array can reach into a reserve of storage media and provision additional storage bringing the additional storage online in response to the user demand.

In many arrays metadata consumes a substantial amount of storage space. When new media of an array are provisioned the contents of the media are formatted with file system metadata being written to the media. It has been estimated that file system metadata consumes between 1 and 10 of the total amount of space of a formatted medium.

Storage arrays are typically designed to handle large numbers of requests from users to read and or write data to storage media of the arrays. A properly functioning array can respond quickly to such requests to avoid delays and promote a favorable user experience.

Unfortunately however the process of formatting file system metadata for newly provisioned storage of an array can consume valuable array resources and can temporarily impair the ability of the array to respond quickly and efficiently to read and write requests which continue to arrive undiminished from user applications during the time formatting takes place.

One approach for reducing the processing burden on an array when formatting newly added media has been to provision and format the media in slices. For example rather than bringing an entire storage volume e.g. disk drive on line all at once a slice from the storage volume of approximately 1 GB in size is provisioned formatted and added to the file system. A significant reduction in overhead is thus realized as compared with provisioning and formatting an entire storage volume all at once.

It has been recognized however that provisioning and formatting newly added slices a slice at a time works well for certain types of volumes or LUNs logical storage units but does not work well for other types of LUNs. For example some LUNs tend to store data compactly whereas others tend to store data in a more dispersed manner such that growth of the file system by even small amounts requires many new slices to be brought online. As a result formatting file system metadata a slice at a time can still be highly burdensome.

In contrast with prior approaches which can impair array performance by formatting large amounts of file system metadata all at once while the array is concurrently processing requests from users an improved technique formats file system metadata in smaller increments only when the file system specifically requests access to those increments of metadata. When the file system or other requestor requests access to a location on a media designated for an increment of metadata such as to check the ownership of blocks associated with that location the location is read and inspected. If inspection reveals the absence of formatted metadata new formatted metadata for the designated location are generated and returned to the requestor. However if inspection reveals that formatted metadata are already present at the designated storage location the metadata is simply returned to the requestor as read. In this fashion file system metadata are formatted in increments when the file system actually attempts to access the metadata. Bulk formatting of metadata either a volume at a time or a slice at a time is therefore avoided as are the associated reductions in array performance.

Certain embodiments are directed to a method of formatting file system metadata. The method includes receiving from a requestor a request to read file system metadata from a designated location of a storage volume and reading the designated location of the storage volume. The method further includes testing whether data read from the designated location of the storage volume matches a predetermined pattern indicating an unformatted state and generating formatted metadata for the designated location of the storage volume when the data read from the designated location matches the predetermined pattern.

Other embodiments are directed to computerized apparatus and computer program products. Some embodiments involve activity that is performed at a single location while other embodiments involve activity that is distributed over a computerized environment e.g. over a network .

Embodiments of the invention will now be described. It is understood that such embodiments are provided by way of example to illustrate various features and principles of the invention and that the invention hereof is broader than the specific example embodiments disclosed.

An improved technique for formatting file system metadata generates formatted metadata in increments only when the increments of metadata are specifically requested. The technique includes reading a location on a storage volume designated for storing file system metadata and testing the data read to determine whether they store a predetermined pattern indicating an unformatted state. If the pattern is found metadata for the designated location are generated and returned. Otherwise metadata are returned as initially read from the storage volume.

The array includes a storage processor a pool of storage resources and various storage volumes LUNs and . Each LUN logical storage unit includes multiple slices. Although only two LUNs and are shown it is understood that the array may contain any number of LUNs.

The storage processor includes a set of processing units e.g. one or more processing chips and or assemblies and memory . The memory includes both volatile and non volatile memory and stores instructions for realizing a file system and a transaction log . The file system organizes files and metadata stored in the LUNs . In an example the file system includes a mapping of files and file system metadata to particular storage locations on the LUNs . The mapping may be explicit e.g. stored in a mapping table algorithmic e.g. computed or may employ a combination of explicit and algorithmic mappings or other mapping techniques. In some examples the file system includes an API application programming interface which exposes various methods. The methods include a requestor method for requesting file system metadata. The API may include other methods as well. Although only one storage processor is shown it is understood that the array may include multiple storage processors as appropriate for the particular implementation.

Instructions from the application cannot always be completed without provisioning additional storage. In an example when additional storage is needed the storage processor directs the pool to provision a slice of storage e.g. one or more portions of one or more physical disk drives held in reserve by the pool to a LUN. For example a slice may be provisioned from the pool to the LUN . Also there are times when slices that have already been provisioned are no longer required. Such slices may be returned to the pool . For example slice of the LUN may be returned to the pool when it is no longer needed.

According to techniques described herein provisioning slices from the pool to any of the LUNs does not involve formatting file system metadata i.e. slices are provisioned without file system metadata being generated or written. Accordingly the process for provisioning storage on the array involves much less overhead than prior approaches which format metadata on provisioned storage as part of the provisioning process. With certain embodiments of the instant technique however it is desired that the data stored at metadata locations on provisioned storage matches a predetermined pattern. For example the locations designated for metadata on provisioned storage can be caused to be blank all zeroes or made to match some other recognizable pattern all ones alternating ones and zeroes etc. . Data processing to ensure that provisioned storage contains the predetermined pattern in metadata locations can be done at any suitable time and need not compete with instructions from the client machine for resources of the array .

In operation the application running on the client machine issues instructions for reading from and writing to particular files or portions thereof on the array . The storage processor receives the instructions and takes actions to carry out the requested instructions.

It is sometimes necessary for the file system to check and or update file system metadata in connection with reading or writing a file or a portion thereof in response to an instruction from the client machine . For example it may be necessary to update ownership of a file. In an example however the file system has no independent record of which locations on the LUNs contain formatted metadata and which do not.

To access metadata for a particular file or portion of a file the file system executes a mapping operation e.g. an algorithmic operation and or look up operation to obtain the location of the metadata for the file or portion thereof on the array . The location is designated for example with a particular LUN identifier a particular slice identifier and a particular block offset relative to the slice. A digital value is then read from the designated location on the array . In some examples as indicated the file system cannot determine in advance whether the designated location includes formatted metadata or not. The digital value read from the designated location is thus tested to determine whether it matches the predetermined pattern that indicates unformatted metadata e.g. all zeroes . In an example if the digital value matches the predetermined pattern the file system proceeds to generate formatted metadata for the designated location. If the digital value does not match the predetermined pattern the file system concludes that the digital value read from the designated location is already formatted metadata and does not generate new formatted metadata.

The slice is seen to include a number of groups . Sixteen groups are shown however it is understood that this number may be varied and in some arrays can be changed explicitly as a parameter. In an example each group is a cylinder group as employed in Unix file systems as well as other file systems. Each of the groups includes a designated region for storing metadata and a designated region for storing user data.

It is understood that the slices and the groups are logical structures recognized by the file system . Although the slices and groups are made up of physical storage media any of the slices can be formed from one or more physical media such as disk drives. Similarly any of the groups can be formed from one or more physical media.

In an example when the file system requests access to metadata the file system specifies the location of a particular group of a particular slice on a particular LUN. The file system then reads the contents of the designated location .

In an example groups on any given slice are provided in pairs. For instance a group is paired with a group to form a pair . As is known corruption arising from software and or hardware errors can cause data to be erroneously written to a LUN. If corruption causes the predetermined pattern to be written to a region that region can be mischaracterized as including unformatted data when in fact it does not. To guard against this possibility the groups are updated in pairs such that both groups of a pair contain formatted metadata or both groups do not. Corruption can then be ruled out by checking that the assigned counterpart for any group i.e. the other group of the pair also contains the predetermined pattern. Conversely if the region of a group shows the predetermined pattern and the region of its counterpart does not then it can be assumed that corruption has occurred.

In certain examples each of the groups is paired with another group on the same slice. Pairs are preferably separated from one another to ensure that whatever corruption affects the region of one group of the pair is not likely to affect the region of the other. In an example pairs are separated from each other by a distance approximately equal to half the size of a slice. Thus where a slice is 1 GB pairs or groups such as the pair are separated from each other by approximately 500 MB.

To allow corruption to be checked in the manner described the file system maintains synchronization between the groups of each pair. Thus whenever formatted metadata is written to one group of a pair formatted metadata is also written to the other group of the pair. Similarly in some examples whenever metadata is erased and replaced with the predetermined pattern in one group of a pair metadata is also erased and replaced with the predetermined pattern in the other group of the pair. There is no requirement however that the same file system metadata be written to both groups of a pair. Rather file system metadata for each group of a pair may be particular to the group.

Beginning with an instruction is received at step from the client machine . The instruction may include a direction to read a file or a portion of a file from a particular LUN of the array or to write a file or a portion of a file to a particular LUN of the array for example.

At step the file system checks whether the requested action requires access to file system metadata. If not control proceeds to step whereupon the array executes the read or write instruction without accessing file system metadata.

If however it is determined at step that file system metadata is required control proceeds to step where the array obtains a location of file system metadata for the file or portion thereof. For example the file system may perform a lookup and or algorithmic mapping operation to obtain the specific location on the array of the requested metadata. The location may be described in any suitable manner such as by LUN identifier slice identifier and offset within a slice for example.

At step a request is received for the metadata from the identified location. In one example the request is received from the requestor method of the API . Alternatively the request is received from some other requestor.

At step the designated location on the identified storage volume is read. The contents of the data read are then checked for the presence of the predetermined pattern that indicates unformatted file system metadata step . In an example the predetermined pattern is a pattern of all zeroes.

If at step the predetermined pattern is found at the designated location control proceeds to step where a second location is read. In an example the designated location is the region of one of the groups of a particular one of the slices and the second location is the region of its counterpart on the same slice.

At step the region of the second location is itself checked for the predetermined pattern. If the pattern is not found an error is raised step indicating that the data at either the designated location or the second location has been corrupted.

If however at step the second location is found to include the predetermined pattern control proceeds to step . Here file system metadata are generated in memory . To maintain pairing between the designated location and the second location file system metadata are also generated for the second location. Preferably the file system metadata for both the designated location and the second location are not written to the array at this time but rather exist as constructs in the memory .

At step the generated file system metadata are returned to the requestor. Although the requestor may be attempting only to read file system metadata a more typical situation involves a read modify write operation in which the generated metadata are updated with the intent of writing the updated metadata back to the designated location.

At step modified metadata are received from the requestor. The received metadata includes modified metadata for the first location as well as metadata for the second location.

At step the metadata received at step are written to the array . The modified metadata for the designated location are written to the designated location and the metadata for the second location are written to the second location.

With the need for accessing file system metadata satisfied the instruction from the client machine for reading or writing to the array can be executed step .

Returning to step if the data read from the designated location do not reveal the predetermined pattern it can be assumed that formatted file system metadata is already present at the designated location and control proceeds to step where the file system metadata is returned to the requestor. Then as already described as in the case of read modify write updated metadata is received from the requestor step the metadata is written to the LUN step and the instruction from the client machine i.e. read or write is executed step .

It can be seen that the process writes file system metadata to the array only when such writing is specifically requested. It is therefore evident that metadata are not written to the array unless a specific instruction to do so is received. For example metadata are not written to the array if the requestor merely reads the metadata. Rather the metadata are computed in the memory provided to the requestor and discarded after they are used.

At step the transaction log is updated. The update includes writing an entry into the transaction log describing actions that the file system will perform in writing the updated metadata i.e. actions that have not yet taken place at the time the entry is written. In an example the entry to the transaction log describes each value of metadata to be written and the locations at which the respective metadata are to be written.

At step the file system directs the updated file system metadata to be written to the array for both the designated location and the second location. Under normal circumstances the updated metadata are queued and written to the array without errors. Sometimes however errors can occur such as system hardware or software failures that cause the system to reboot causing the actions of writing the updated file system metadata to fail.

At step a determination is made as to whether the updated metadata was written successfully. In an example metadata is written successfully only when writing is successful both at the designated location and at the second location. A successful writing of metadata is indicated at step . If the metadata was not written successfully however control proceeds to step whereupon the transaction log is read. Any intended actions written to the transaction log which have not yet been conducted are then performed such that the original intention expressed in the transaction log to write the updated metadata is carried out.

In the manner described writing updated metadata to the LUN is an atomic operation. Once the transaction log is updated with the intended actions the actions are as good as done. If an error occurs that prevents the completion of the actions the transaction log is read and the intended actions are accessed and performed. Conversely if the transaction log is not updated with the intended actions the actions are never performed. Because the transaction log stores actions for both writing to the designated location and writing to the second location the process helps to ensure that metadata for the designated location and the second location remain synchronized.

An improved technique has been described for formatting file system metadata in increments only when the file system specifically requests access to those increments of metadata. Bulk formatting of metadata either a disk drive at a time or a slice at a time is therefore avoided as are the associated reductions in array performance.

As used throughout this document the words comprising including and having are intended to set forth certain items steps elements or aspects of something in an open ended fashion. Although certain embodiments are disclosed herein it is understood that these are provided by way of example only and the invention is not limited to these particular embodiments.

Having described certain embodiments numerous alternative embodiments or variations can be made. For example it has been described that requests for file system metadata arise as a result of instructions from the application on the client machine to read or write files or portions of files. This is merely an example however. Requests for file system metadata can arise in other contexts such as when the array performs self checks or housekeeping tasks.

In addition requests for file system metadata have been described as originating from the requestor method . This is also merely an example. Alternatively the requestor of metadata can be some other part of the file system or some other part of the array . In yet other examples the requestor of file system metadata may reside outside the array .

Also requests for file system metadata need not be associated with access to files per se. Alternatively requests for file system metadata can arise when it is desired to examine particular blocks or other portions of a storage volume regardless of their association with any particular file.

Also it has been shown and described that storage volumes i.e. LUNs include multiple slices where each slice includes multiple groups such as cylinder groups. However this also is merely an example as the techniques hereof are not limited to any particular structure for storing data.

Also although improvements have been described herein with reference to the generalized storage array of it is understood that the improvements hereof are not limited to any particular type of array. Rather storage arrays vary widely in their architecture and the techniques described herein apply to any type of array regardless of its architecture.

In addition the file system is shown and described as being part of the storage processor . Alternatively the file system may reside in its own processing system such as on a file system server with multiple storage processors communicating with the file system server to gain access to the various storage volumes on the array.

Further still the improvement or portions thereof may be embodied as one or more non transient computer readable storage media such as one or more magnetic disks magnetic tapes compact disks DVDs optical disks flash memories Application Specific Integrated Circuits ASICs Field Programmable Gate Arrays FPGAs and the like shown by way of example as media and of . The medium or media may be encoded with instructions which when executed on one or more computers or other processors perform methods that implement the various processes described herein. Such medium or media may be considered an article of manufacture or a machine and may be transportable from one machine to another.

Those skilled in the art will therefore understand that various changes in form and detail may be made to the embodiments disclosed herein without departing from the scope of the invention.

