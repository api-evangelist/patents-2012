---

title: Consistent backup of electronic information
abstract: Systems and methods are provided for performing backup operations while a user is using a device. In one implementation, a method is provided. A backup operation of data including a plurality of related items is initiated. Modifications to one or more items of the plurality of related items are monitored for during the backup operation. The backup operation is completed. If a modification occurred to one or more items, a second backup operation is performed for the modified items.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08775378&OS=08775378&RS=08775378
owner: 
number: 08775378
owner_city: 
owner_country: 
publication_date: 20121023
---
This application is a continuation of and claims priority to U.S. application Ser. No. 11 499 256 filed Aug. 4 2006 the entire disclosure of which is incorporated herein by reference.

This application is generally related to the following jointly owned and co pending patent applications each incorporated herein by reference in its entirety 

A hallmark of modem graphical user interfaces is that they allow a large number of graphical objects or items to be displayed on a display screen at the same time. Leading personal computer operating systems such as Apple Mac OS provide user interfaces in which a number of windows can be displayed overlapped resized moved configured and reformatted according to the needs of the user or application. Taskbars menus virtual buttons and other user interface elements provide mechanisms for accessing and activating windows even when they are hidden behind other windows.

With the sophisticated tools available users are encouraged not only to create and save a multitude of items in their computers but to revise or otherwise improve on them over time. For example a user can work with a certain file and thereafter save its current version on a storage device. The next day however the user could have had second thoughts about the revisions or could have come up with new ideas and therefore opens the file again.

The revision process is usually straightforward if the user wants to add more material to the file or make changes to what is there. But it is typically more difficult for a user who has changed his her mind about changes that were previously made and wants the file back as it was once before. Application programs for word processing typically let the user undo previous edits of a text at least up to a predefined number of past revisions. The undo feature also usually is configured so that the previously made revisions must be undone in reverse chronological order that is the user must first undo the most recently made edit then the second most recent one and so on. If the user saves and closes the document and thereafter opens it again it can not be possible to automatically undo any previous edits.

Systems and methods are provided for performing backup operations e.g. using a backup daemon while a user is using a device. An algorithm or other monitoring can be used to detect changes that occur during the backup operation in order to maintain consistency between related data in the backup. The back up can be performed again for related data that was modified during prior backup operation.

In general in one aspect a method is provided. A backup operation of data including a plurality of related items is initiated. Modifications to one or more items of the plurality of related items are monitored for during the backup operation. The backup operation is completed. If a modification occurred to one or more items a second backup operation is performed for the modified items.

Implementations of the method can include one or more of the following features. The method can further include determining which items of data are related. The monitoring for modifications can include identifying event notifications associated with an item of the plurality of related items. Performing a second backup operation can include replacing the backup data for an item with backup data from the second backup. The method can further include monitoring for modifications to one or more items of the plurality of related items during the second backup operation. The method can further include determining a maximum number of backup operations to perform to complete a backup operation without modifications occurring during the backup operations. If the maximum number of backup operations is reached an alert can be generated including notifying a user. If the maximum number of backup operations is reached the backup operation can be suspended for a predefined period of time.

In general in one aspect a method is provided. A criterion for capturing a state of a view of a user interface is defined. The state of the view is captured in accordance with the criterion. Capturing the state includes monitoring for modification of the state of the view during the capture and performing a second capture for the modification of the state of the view. A prompt is received to suspend presentation of a current view and present a captured view. The captured view is reinstated into the current view of the user interface.

Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages. Changes to data being included in a backup operation can be detected. If changes are detected additional backup operations can be performed in order to prevent inconsistent data in a backup particularly related data.

The details of the various aspects of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the invention will become apparent from the description the drawings and the claims.

The computer also includes a local storage device and a graphics module e.g. graphics card for storing information and generating graphical objects respectively. The local storage device can be a computer readable medium. The term computer readable medium refers to any medium that includes data and or participates in providing instructions to a processor for execution including without limitation non volatile media e.g. optical or magnetic disks volatile media e.g. memory and transmission media. Transmission media includes without limitation coaxial cables copper wire fiber optics and computer buses. Transmission media can also take the form of acoustic light or radio frequency waves.

While modifications of a user interface view are described herein with respect to a personal computer it should be apparent that the disclosed implementations can be incorporated in or integrated with any electronic device that has a user interface including without limitation portable and desktop computers servers electronics media players game devices mobile phones email devices personal digital assistants PDAs embedded devices televisions other consumer electronic devices etc.

Systems and methods are provided for modifying an interface view e.g. a user interface view . Systems and method are also provided for performing consistent backup operations while data on a device is being modified. The systems and methods can be stand alone or otherwise integrated into a more comprehensive application. In the materials presented below an integrated system and method for modifying a user interface view is disclosed. As used herein a view refers to an item element or other content capable of being presented in a user interface that can be subjected to a backup operation by the backup component .

Though discussion is made with reference to modifying a user interface view those of ordinary skill will recognize that such a view can be based on various data structures files processes and other aspects of information management. It follows that modification to file structures data and the like is also contemplated in order to achieve the modification to the user interface view. In other words while the restoration of the user interface view from one state to another can be the most apparent change from the user s perspective this is accomplished through the corresponding changes in the underlying system content.

One of ordinary skill in the art will recognize that the engines methods processes and the like that are described can themselves be an individual process or application part of an operating system a plug in an application or the like. In one implementation the system and methods can be implemented as one or more plug ins that are installed and run on the personal computer . The plug ins are configured to interact with an operating system e.g. MAC OS X WINDOWS XP LINUX etc. and to perform the various functions as described with respect to the Figures. A system and method for modifying a user interface view can also be implemented as one or more software applications running on the computer . Such a system and method can be characterized as a framework or model that can be implemented on various platforms and or networks e.g. client server networks wireless networks stand alone computers portable electronic devices mobile phones etc. and or embedded or bundled with one or more software applications e.g. email media player browser etc. .

The computer includes the backup component that allows for the storage of versions of the computer s files or other items for example within the local storage or in an external storage repository. In one implementation the backup component also allows a user to select any of the stored versions and use it to initiate a restoration of that version in the computer.

Each application program can include an application programming interface API . The architecture can utilize API techniques to access application programs and enhance them with further functionality. For example the API can link several applications together for providing a single service on all linked applications. Particularly the time machine architecture can utilize API techniques to enhance application programs with the time machine functionality. The API tools can link several applications to the time machine engine by using an API for providing a similar menu or icon for each application. For example the API can be used by the time machine when generating a backup version of a current state of the application. As another example the API can be used when the application is restored through the time machine to a state that corresponds to a backup version. Although the API is shown in as part of application programs the API can be separate from the application programs . For example the API can be separately located and made available by the system for use by one or more of the application programs .

In one implementation the backup component provides back up and restoration capability for the system. Many different items or elements can be the subject of a back up in the system. For example folders files items information portions directories images system parameters playlists address books e mails e mail folders application states and the like all can be candidates for archiving. Other types are also possible. In this example the backup component includes a local storage device and an external storage device . Versions can be stored on either of them. Any number of local and or external storage devices can be used by the backup component for storing versions. In one implementation no local storage is provided.

In one implementation one copy of original data e.g. folders files items information portions directories images system parameters playlists address books e mails e mail folders application states preferences and the like is stored in the system in addition to the original. When one or more subsequent copies are made each one can contain only the differences between the current data version and the original data version thereby saving storage space. In some implementations the storage devices and can be used to store the original versions of the data as well as links pointing to the original versions. The links can be hard links which reference or point to physical data or as another example can be symbolic links that reference another file on the storage device e.g. by name or location .

The backup component can interact with one or more of the applications using the corresponding API. In one implementation this can provide backing up of that application s files state or other items and can provide for user restoration of a selected backed up version to name two examples. In one implementation the backup component runs as a background task on an operating system where the task is not visible to the user. The backup component can be capable of running across multiple user accounts.

The backup component includes an activity monitoring engine . In one implementation the activity monitoring engine monitors for changes within applications e.g. application files or state that are targeted for backup operations. A change can also include the addition of new files or other data structures or deletion of existing ones. For example the activity management engine can be responsible for verifying the integrity of a playlist in a music file management program or for verifying that a corresponding song file exists for a listed song.

In one implementation the activity monitoring engine is capable of discerning between a substantive change e.g. the text within a document has been modified and a non substantive change e.g. the play count within an iTunes playlist has been updated or several changes cancel each other out through its interaction with the application programs . The activity monitoring engine can for example create a list of modified elements to be used when a backup event is eventually triggered. In one implementation the activity monitoring engine can monitor the system for periods of inactivity. The activity monitoring engine can then trigger a backup event during a period of time in which the backup operation will not cause a system slowdown for an active user.

A preference management engine specifies some operating parameters of the backup component . In one implementation preference management engine contains user specified and or system default application parameters for the backup component . These can include settings for the details of capturing and storing the views. For example the preference management engine can determine the frequency of a backup capture the storage location for the backup versions the types of elements e.g. files or other items that are eligible for backup capture and the events which trigger a backup capture periodic or event driven etc. .

In one implementation the preference management engine can detect that a new storage device is being added to the system and prompt the user whether it should be included as a backup repository. Files and other items can be scheduled for a backup operation due to location e.g. everything on the C drive and within D photos a correlation with specific applications e.g. all pictures music e mail in an inbox an address book and system settings or a combination of strategies. Different types of items can be scheduled to be stored on different devices or on different segments of a storage device during a backup operation. In one implementation the backup component stores the versions in a format corresponding to a file system structure.

A backup management engine coordinates the collection storage and retrieval of views performed by the backup component . For example the backup management engine can trigger the activity monitoring engine to watch for activities that satisfy a requirement specified in the preference management engine .

A change identifying engine locates specific files or other items within to determine if they have changed. The change identifying engine can be capable of discerning a substantive change from a non substantive change. For example the change identifying engine can identify a loss of data associated with a user s current view. In one implementation the change identifying engine traverses a target set of files or other items comparing a previous version to the current version to determine whether or not a modification has occurred. In addition the change identifying engine can generate an alert identifying the loss of data and prompt the user to initiate a previous version of the current view to restore the lost data. For example the change identifying engine can be responsible for verifying whether a data loss has occurred in a music file management program or for verifying that a corresponding song file is unchanged for a listed song.

A backup capture engine locates views e.g. elements files or other items that are to be backed up. The backup capture engine can invoke the activity monitoring engine and or the change identifying engine for example to generate a capture list. The backup capture engine can then store copies of these elements in one or more targeted storage repositories. The backup capture engine can track multiple version copies of each item included in the backup repository.

The backup component includes a backup restoration engine to restore previous versions of views e.g. files or other items . In one implementation the backup restoration engine provides a user interface e.g. a graphical user interface where a user can select the item s to be restored.

The backup restoration engine can initiate data backup operations on one or more data elements or items as directed by a user the system or according to a predetermined or otherwise defined schedule. For example the user can set up a scheduled backup operation to occur for any number of data files. The data files can be related to one another such as when the files share similar attributes or a schema. For example several files included on one particular webpage can have a similar schema and can require versions of each related file to remain consistent to display a successful webpage image. Unless the backup operation is completed in a very short amount of time there is a chance that one or more of the files to be included in the backup can be modified before the backup operation is complete. For example the backup operation can be performed while a computer system is in use e.g. executing operation received from a user . The use of the computer system during a backup operation can introduce inconsistencies between backed up data files and data files currently awaiting the backup operation. In this example such changes are monitored and the backup operation can be tailored to take them into account. If inconsistencies are found between files the backup restoration engine can attempt to resolve any discrepancies between data files.

The backup can over time include copies of files such as file A file B or file C as they are backed up. Files stored in the backup folder can be exact copies of the original folder contents or a modified portion thereof. As shown in the backup component has been instructed to back up the files A B and C included in the folder . At time T a backup operation has been initiated and begins to backup files. For example the backup operation has successfully backed up file A in a backup folder . At time Tthereafter the user makes a modification to file A in folder thus changing the file A to file A . In this description when a user modifies a file during the backup operation the file name is modified to include an inversion mark or a prime mark e.g. modifications to file A are notated as file A . Similarly the user at time Tchanges the file C to C . File A has been successfully backed up at time T and the new modification can create an inconsistency in the data.

At time T file B is successfully backed up to backup folder . The time machine engine can continue to backup data at time Tadding file C from folder to folder . Upon nearing the end of the group of files to back up the time machine engine can now resolve the inconsistency at time T. At T the backup folder is modified based on a change that was detected during the back up. Particularly the backed up file A is replaced with the file A . This backup modification operation was triggered by detecting the change between the original file A and the new file A . Thus if the folder is used in a restoration operation in the future it will restore the files A B and C to the system rather than the files A B and C which was the state of the backup folder at T. Thus the change in the backup folder at Tseeks to give that folder the state that the folder had when the backup was completed at T.

In some implementations the time machine engine can determine that particular files are related to one another. In the example in the user can have set the time machine engine to resolve changes in related files before completion of the first backup. In such implementations the subsequent modification of the backup folder is done only if there is a change in a related file. Here changing file A to file A can alter a link or shared relationship to file B. For example when file A changes to file A the time machine engine can modify an associated link or relationship within file A to allow the correlation between file A now modified to file A and file B to remain intact. In some implementations a user can define files as being related through a predefined relationship between the original files or file structures. In some implementations the user can receive an alert or message stating that the inconsistency has been found and further can be prompted to make a decision about performing another backup operation. In other implementations the backup process can not attempt to determine a relationship between files.

In some implementations a backup operation can begin automatically when the backup management engine is invoked to compare data captured by the backup capture engine with data identified in the change identifying engine . For example when the user modifies a previously backed up file the backup management engine can be invoked to begin the comparison of data. If changed data has been identified the change identifying engine informs the backup management engine that a change has occurred. Next the backup management engine can query the preference management engine to determine whether or not to attempt an additional backup operation for the modified files. The preference management engine can inform the backup management engine of any predetermined preferences and an additional backup operation can ensue.

Upon initiating each backup operation the time machine engine can begin monitoring for additional modifications e.g. using an event monitor or detector such as FS Events which monitors file system changes . If additional modifications to the data identified as part of the backup operation e.g. an incremental backup of particular changed files occur during the time of the backup operation are detected the time machine engine can attempt to resolve each conflict. In one implementation any changes to data other than the data being included in the backup will not impact the backup data and will be captured during the next backup operation. Moreover while the post backup modification of the backup folder is being done the system can monitor for additional changes in any of the files involved. If such additional changes are found the system can perform an additional modification of the backup folder. In some implementations the user can predetermine a maximum number of such iterations to perform. Upon completing the maximum number of backup operations the time machine engine can inform the user that a maximum number of backup operations has completed and further backups can not be performed on the current data. In other implementations the iterative updates of the backup folder can continue until no further changes of the files at issue are detected.

In an alternative implementation a notification system provides notifications to the time machine engine when a change is detected. For example an event notification system can provide a notification when a change to one of the files in the backup operation is detected e.g. using event detector such as FS Events . For example if a file in the backup is written to during the backup operation the change can be logged by an event detector. The event detector can then notify the time machine engine that the file has been written to.

In some implementations the time machine engine can detect modifications occurring to previously backed up data and ignore the conflict the modified data can create. For example the user can set the time machine engine to never resolve backup conflicts and therefore the time machine engine stores elements in the version that is available to the system. Specifically modified files are stored in their modified state if the backup operation occurred after the modification.

In some implementations a modification can be ignored because the change is insignificant. For example a file attribute modification such as which particular user opened the file most recently can be ignored because it is not significant to the file content. In some implementations a modification can be ignored because the change creates a conflict in the system. For example the system can ignore all modifications and back up an original version of elements corresponding to the state when the backup process began. These determinations can be made by the change identifying engine .

When the time machine engine determines that a change has occurred during a backup operation several options can be presented to the user during or after the initial backup operation. In the example above the time machine modified an initial backup file to restore a file relationship between the files. In some implementations the time machine engine can automatically resolve the changed file inconsistencies replace data until a maximum number of iterations occurs in which case the user can be prompted to make a decision regarding subsequent backup operations. In some implementations the time machine engine can notify the user each time a change has occurred during a backup operation. If modifications to backup data cannot be resolved because the user is modifying too many files during the backup operation the time machine engine can attempt to resolve the data when the computer system is not in use.

Upon nearing the end of the group of files to back up the time machine engine can now resolve the inconsistency at time T. In the example in the time machine engine attempted to resolve the conflict by performing subsequent backup operations to capture modifications to each file. Here the time machine engine will deliberately ignore at least for the time being the modifications made to one or all of the files. At T the backup folder is modified using the version of each file when the backup operation was initiated. Particularly the already backed up file C in the backup is replaced with the file C that existed when the backup operation was initiated. This backup operation was triggered by detecting that a change between the original file C and the new file C occurred after the backup operation had begun. Thus the change in the backup folder at Tseeks to give that folder the state that the folder had when the backup operation was initiated. The current state of the folder A B C can be backed up in a subsequent backup procedure.

In some implementations the time machine engine can trigger another backup operation because a file modification was detected to one file but not others. For example modifying files that are related can introduce a conflict because related files can require a specific hierarchy or formatting to function properly in the computer system . The time machine engine can monitor file changes and check for any relatedness to other files in the system. Thus modifying one file and not its related counterparts can trigger one or more future backup operations.

The time machine engine monitors in step modifications that can occur during the backup operation. A query can be sent to a processing device such as the backup management engine for example to determine whether or not modifications occurred during a particular backup operation. If modifications did not occur during the backup operation the backup can be determined complete in step . If modifications did occur the time machine engine can modify a backup version in step . In one implementation the backup version is modified to correspond to the state that the files or other items have at the end of the initial backup operation for example as described with reference to . In another implementation the backup version is modified to correspond to the state that the files or other items have at the beginning of their initial backup operation for example as described with reference to . In some implementations the user can be given a prompt or an option to decline further backup operations. For example when a modification is insignificant to the structure and content of the files e.g. a title change or file name change the time machine engine can present a pop up window containing a decline or ignore option. Upon completion of the backup operation in step it can be determined whether or not modifications have occurred during the backup operation. If modifications did not occur during the backup operation the backup can be determined complete in step . When modifications have occurred during a backup operation a query can be sent to determine whether or not additional backup operations can be allowed in step . For example a user can set a maximum number of backup operations that can be carried out by configuring the time machine engine with a predetermined number of iterations. If further backup operations are allowed the back up can be performed again to resolve the inconsistencies in step . The time machine engine can attempt to resolve inconsistencies by performing steps and until the maximum number of iterations has been reached. Upon reaching the maximum number of backup operations the time machine engine can generate an alert to the user in step . The alert can notify the user of the intended resolution and can allow the user to decline continue or modify the backup operation. In some implementations the user can choose to be prompted each time the time machine engine triggers the performance of the backup operation.

A user can select from a set of applications which type s of data is eligible for a backup. The applications list can contain specific products e.g. iTunes and or general categories e.g. photos address book e mail inbox . In one implementation each application name can be individually selectable. For example within an internet browser application the user can set the bookmarks and personal settings to be backed up but not the history or cookies. One implementation can allow a user to select specific disk drives folders and or files for inclusion in a backup.

A message block alerts the user as to the date and time of the last backup event. As shown in the last backup occurred thirty minutes earlier. In one implementation this information is obtained from the backup capture engine . A user can select a backup now button to trigger a backup event. In one implementation the backup now button calls the backup capture engine to initiate a capture event using the settings provided within the time machine settings dialog .

If a checkbox is selected the time machine engine provides a status icon within a menu bar of the desktop user interface . The status icon can alter in appearance depending upon the time machine engine s status e.g. when the time machine engine is disabled when it is actively backing up files or when it is in standby mode etc. The status icon can provide the user with an additional method of accessing the time machine settings dialog . In one implementation a different type of status indicator can be used or a different way of initiating it can be provided.

If a lock icon is selected the time machine engine backup configuration is essentially locked into place until the icon is selected again. For example selecting the lock icon in the settings dialog can ensure daily automatic backup operations are performed using backup device Steve s backup device as the storage medium until the lock icon is selected thus unlocking the current backup configuration.

A user can select a help button to open a help dialog regarding the time machine settings. The help dialog can be presented within the time machine settings dialog or in a separate pop up window for example. In another implementation a mouse over of individual controls within the time machine settings dialog can provide the user with a brief description of that control s functionality.

As shown in the user can also select a Version s when Backup Initiated option to back up data as it existed when the backup operation initiated. In this example the time machine engine can store the version available at the time of a backup operation. In one implementation this corresponds to the example in . Thus any modifications made after the backup operation has been initiated would not be included in the current backup version. In some implementations the user can be prompted to save one or more versions of the files if an inconsistency is identified.

Another option available in the backup options view is a Significant Changes Only option . The Significant Changes Only option can use predefined or user entered criteria to determine which changes are sufficient to trigger a new backup version. The Significant Changes Only option can be applied to both the Most Current Version s option and the Version s when Backup Initiated option .

The backup options view includes a Number of Iterations option allowing the user to limit the number of times a backup operation is attempted when the monitoring detects changes being done during the backup operation.

As noted above the management of backup versions can be handled by the backup component . That component can generate a time machine interface with which the user can control the restoration of selected content and see the results thereof. Such an interface can be generated by the backup restoration engine . There will now be described an example of how such an interface can reflect a modification of a previously backed up element. is a screen shot depicting an example of a time machine user interface after the time machine engine has been activated. The time machine interface includes a presentation window a timeline and function buttons. The timeline presents a history view associated with the current view. The time machine interface is shown in as a layer differentiated from the desktop user interface by a dashed line around the perimeter of the user interface. In one implementation the desktop user interface and an associated application window are obscured or otherwise hidden while the time machine is active.

The presentation window can show the currently selected snapshot or a portion thereof. As used herein a snapshot refers to a backup element stored in an archive that includes a backup of selected items or content as specified by the backup component . Alternatively the presentation window can show a selected one of several available snapshots. In one example a user can operate the time machine interface so as to sequentially select each snapshot and can restore elements from these selected snapshots until the current version engulfs the entire history of the timeline or some portion thereof. For example the user can select a snapshot in the timeline and merge its contents with the contents of the current presentation window by restoring each element individually and keeping both versions in some cases to achieve a merged list of elements. In some implementations the active window can be scaled upon entering the time machine to fit within the interface. For example if an application is running in full screen mode e.g. iTunes when the time machine session is initiated the application window can be scaled down to fit within the time machine interface.

The timeline can include a number of snapshots representing slices of time for active window elements. Each snapshot provides a screenshot representation of an earlier version of the selected application at a particular point in time. The snapshots can represent periodic backup points in time or can represent snapshots of the active window where a change has occurred.

Arrow buttons and shown to the left and right of the snapshots allow the user to navigate additional snapshots not shown thus there can be a large number of snapshots to select from.

In some implementations the timeline includes a visual representation of elements and can appear across the top portion of the time machine interface as shown . Alternatively the timeline can not appear in the top portion of the time machine interface until a user moves their cursor to the top portion of the time machine interface .

In alternative implementations all snapshots can be shown according to when they are taken regardless of changes between snapshots. In another alternative implementation the snapshot can indicate a range of time covered by a single snapshot where no changes have occurred e.g. Jun. 1 Aug. 8 2005 . In another implementation the rate of snapshots can vary over time. For example there can be a number of snapshots in the newest archives but the snapshots become more spaced in time as they reach further into the past. For example hourly snapshots for the current day can turn into daily snapshots which turn into weekly snapshots that become monthly snapshots as their file dates reach further into the past. The transition to later snapshots can be achieved in one implementation by selecting a representative snapshot from a group of snapshots and deleting the rest.

As shown in a most recent snapshot is shown with a highlighted border. This represents the present state of the contents of the presentation window . The other snapshots shown in the timeline represent states of the selected application in the past. For example the snapshot represents a state that the folder has at the time T. As such the snapshot corresponds to a backup performed at or before T. Next a snapshot is the backup ultimately created in the example. As described above changes are monitored during the backup operation and the backup folder is modified to include A B and C the state at the end of the initial backup operation. Accordingly the snapshot here is identical to the most recent snapshot which corresponds to the current state.

The other snapshots in the timeline can show other configurations of past states of the selected application. For example different numbers of elements show additions and deletions have occurred over time. The time machine interface can also show modifications that have been made between different versions of folders files or items and the like.

The time machine interface includes a restore button a changed items only button and an information button . Other buttons are possible. The restore button when selected restores the window to the selected state represented by the selected snapshot presented within the presentation window and exits the time machine interface e.g. restoring the desktop user interface . A user can select a snapshot and then select the restore button to modify the current version of the element selected. The changed items only button filters the snapshots to show only those that differ vary from the current state. That is the changed items only button does not refer to the incremental changes between snapshots in the timeline rather it refers to omitting those snapshots whose states are identical to the current state of the selected application window. For example if the most recent snapshot is identical to a snapshot that occurs earlier in time selecting the changed items only button will cause the time machine to cease displaying one of the copies e.g. remove the snapshot from the timeline. This can help the user locate a previous version from which to restore contents different than those in the current version.

The information button provides information regarding the selected snapshot. In one implementation selecting the information button opens a panel display. The panel display provides in one implementation information including the date and time the snapshot was made the location of actual elements of a snapshot the size of the snapshot and a comment section.

There will now be described an example of how a time machine interface can reflect a backup created when file modifications during backup operations are deliberately omitted. is a screen shot depicting another example of a time machine user interface after the time machine engine has been activated. A most recent snapshot is shown with a highlighted border. This represents the present state of the contents of the presentation window . The other snapshots shown in the timeline represent states of the selected application in the past. For example the snapshot represents a state that the folder has at the time T. As such the snapshot corresponds to a backup performed at or before T. Next a snapshot is the backup ultimately created in the example. As described above changes are monitored during the backup operation and the backup folder is modified to include A B and C the state at the beginning of the initial backup operation. Accordingly the snapshot here is identical to the snapshot which corresponds to the state of the folder at time T.

In the above description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding. It will be apparent however to one skilled in the art that implementations can be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to avoid obscuring the disclosure.

In particular one skilled in the art will recognize that other architectures and graphics environments can be used and that the examples can be implemented using graphics tools and products other than those described above. In particular the client server approach is merely one example of an architecture for providing the functionality described herein one skilled in the art will recognize that other non client server approaches can also be used. Some portions of the detailed description are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

An apparatus for performing the operations herein can be specially constructed for the required purposes or it can comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program can be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms and modules presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems can be used with programs in accordance with the teachings herein or it can prove convenient to construct more specialized apparatuses to perform the method steps. The required structure for a variety of these systems will appear from the description. In addition the present examples are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages can be used to implement the teachings as described herein. Furthermore as will be apparent to one of ordinary skill in the relevant art the modules features attributes methodologies and other aspects can be implemented as software hardware firmware or any combination of the three. Of course wherever a component is implemented as software the component can be implemented as a standalone program as part of a larger program as a plurality of separate programs as a statically or dynamically linked library as a kernel loadable module as a device driver and or in every and any other way known now or in the future to those of skill in the art of computer programming. Additionally the present description is in no way limited to implementation in any specific operating system or environment.

The subject matter described in this specification can be implemented as one or more computer program products i.e. one or more modules of computer program instructions encoded on a computer readable medium for execution by or to control the operation of data processing apparatus. The instructions can be organized into modules or engines in different numbers and combinations from the exemplary modules described. The computer readable medium can be a machine readable storage device a machine readable storage substrate a memory device a composition of matter effecting a machine readable propagated signal or a combination of one or more them. The term data processing apparatus encompasses all apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them. A propagated signal is an artificially generated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus.

While this specification contains many specifics these should not be construed as limitations on the scope of what may be claimed but rather as descriptions of features specific to particular implementations of the subject matter. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

The subject matter of this specification has been described in terms of particular embodiments but other embodiments can be implemented and are within the scope of the following claims. For example the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous. Other variations are within the scope of the following claims.

