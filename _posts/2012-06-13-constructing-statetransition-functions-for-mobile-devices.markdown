---

title: Constructing state-transition functions for mobile devices
abstract: Disclosed are various embodiments for a state monitoring application. A state monitoring application initiates the execution of test operations on a client device. States of the client device are monitored to determine when the client device is at risk of entering an unresponsive state. When the client device is at risk, the state monitoring application initiates the execution of remedy operations to prevent the client device from becoming unresponsive.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09372786&OS=09372786&RS=09372786
owner: Amazon Technologies, Inc.
number: 09372786
owner_city: Seattle
owner_country: US
publication_date: 20120613
---
Mobile devices can be tested by executing a series of operations on the device. Testing becomes difficult when executing these operations puts the device in a non responsive state.

Disclosed are various embodiments of a state transition function for mobile devices. Testing applications on mobile devices requires accounting for numerous hardware and operating system configurations. This complicates the testing process as executing identical test operations can produce different results across the different mobile device configurations. In some cases a mobile device can enter an unresponsive state during the execution of the test operations due to some unique feature of the device configuration. Once a device becomes unresponsive it requires a manual restart so that the test operations may resume execution. In order to prevent a required manual restart a state transition function can monitor the state of a mobile device. When the mobile device is at risk for becoming unresponsive the state transition function can initiate the execution of one or more remedy operations on the device so that the device is no longer at risk and the execution of test operations can resume without manual intervention. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes a computing device a client device an actuator and potentially other devices coupled to a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing device may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of computing devices together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience the computing device is referred to herein in the singular. Even though the computing device is referred to in the singular it is understood that a plurality of computing devices may be employed in the various arrangements as described above.

Various applications and or other functionality may be executed in the computing device according to various embodiments. Also various data is stored in a data store that is accessible to the computing device . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing device for example include a device testing application and other applications services processes systems engines or functionality not discussed in detail herein. The device testing application is executed to initiate the execution of test operations on client device .

A test operation may comprise any interaction with client device a tested application executed on client device an operating system or any other component of client device . The test operation may include terminal or command line interface commands to be executed on client device . Test operation may also include gesture events or user interface interactions. Test operation may comprise other commands or interactions with the client device applications executed on client device or other components of client device as may be appreciated.

Device testing application also obtains device states from the client device via network . The device state comprises one or more attributes relating to the operational status of client device . Attributes contained within the device state may comprise a number of open file handles remaining battery power central processing unit CPU usage an amount of allocated memory remaining disk space used disk space file input output I O statistics power consumption rates or other attributes.

Furthermore device testing application initiates the execution of remedy operations when the device state meets a condition defined in a device profile . Device profile contains conditions which when met by a client device indicate that the device is at risk for entering an unresponsive state. A remedy operation may comprise any interaction with client device an application executed on client device an operating system or any other component of client device . The remedy operation may include terminal commands command line interface commands gesture events user interface interactions or any other command interaction or operation to be executed on client device . The remedy operation may also comprise a command to activate an actuator which presses a power switch located on the client device to shut down the device.

To these ends the device testing application may communicate with client device over various protocols such as for example hypertext transfer protocol HTTP file transfer protocol FTP HTTP Secure HTTPS simple object access protocol SOAP representational state transfer REST user datagram protocol UDP transmission control protocol TCP and or other protocols for communicating data over the network .

The data stored in the data store includes for example device profiles test operations remedy operations and potentially other data.

The client device is representative of a plurality of client devices that may be coupled to the network . The client device may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer a personal digital assistant a cellular telephone set top box music players web pads tablet computer systems game consoles or other devices with like capability.

The client device may be configured to execute various applications such as a tested application a device state interface and or other applications. Device state interface is executed to encode various attributes relating to the operational status of client device into a device state . Device state interface may comprise a service process or daemon of an operating system executed on client device . Device state interface may also comprise a stand alone executable application executed on client device . It may also comprise other interfaces logic or applications executed on the client device . The client device may be configured to execute applications beyond tested application and device state interface such as for example email applications instant message applications and or other applications. Client device comprises a network interface to communicate with computing device via network . When an encoded operation is received by client device through network interface client device executes the operations encoded therein.

The client device may comprise a power switch which shuts down the device when pressed. The power switch may be a lever switch button or other mechanical implement which controls the activation and deactivation of the client device . The actuator may press the power switch in response to an input from the computing device .

Next a general description of the operation of the various components of the networked environment is provided. To begin computing device executes a device testing application in order to test a client device . Device testing application selects a plurality of test operations to be executed on the client device . For example a test operation may comprise uninstalling an application. In embodiments of the client device that include a touch screen interface a test operation may comprise a gesture event such as a two finger swipe. A test operation may further comprise selecting a user interface element from a tested application executed on the client device . Test operations may comprise other interactions commands gestures or events executed on the client device . Test operations may also comprise multiple gestures commands events or other components with or without a specified order of execution.

Device testing application initiates the execution of a test operation on client device by encoding the test operation as encoded operation . Encoded operation is then communicated to client device via network using network interface . Client device receives encoded operations from computing device via network through network interface as well as other communications. Client device then executes the test operation encoded in the encoded operation . The test operation may define tasks performed in relation to a tested application executed on the client device or some other component of client device . For example when executing a test operation comprising a user interface event relating to tested application event handling logic within tested application will execute as if the client device had received user interface input. When executing a test operation comprising a touch screen gesture event client device will perform as if a user had input the gesture event into the touch screen interface. Other test operations may be executed as well. Furthermore multiple test operations may be executed in a predefined sequence or at random.

Device testing application next obtains a device state from client device by communicating with the device state interface executed on client device via network . Device state interface encodes various attributes relating to the operational status of client device into a device state which is then communicated to computing device via network . In some embodiments device state comprises one or more file or data objects encoding the attributes relating to client device . In other embodiments device state comprises a stream of encoded attributes. Device state may encode the attributes of client device in other data structures or formats as may be appreciated. Device state may be sent or accessed periodically or at predefined times. In some embodiments device state is communicated by client device to computing device in response to a request sent by computing device . In other embodiments client device communicates device state to computing device at a predefined interval. Other methods of communicating a device state may also be used.

Device testing application compares the device state to one or more device profiles corresponding to the client device . Each device profile defines conditions which based on a device state associated with the client device indicate when the client device is at risk for entering an unresponsive state. In one embodiment the conditions may comprise an attribute encoded in the device state being above or below a threshold amount. In another embodiment the conditions may comprise an attribute encoded in the device state being outside a predefined range. In yet another embodiment the condition may comprise multiple attributes encoded in the device state simultaneously falling outside predefined ranges or simply having predefined values within ranges indicating problems may occur. Other conditions relating to the device state may also be defined in the device profile . Conditions may be preprogrammed or created in response to operating conditions of a client device contemporaneous to or after the execution of one or more test operations .

In response to the client device meeting a condition defined within the device profile device testing application can initiate the execution of a remedy operation on client device to attempt to place the client device out of risk for entering an unresponsive state. The remedy operation can comprise one or more operations commands executions gestures events or processes relating to the operation of client device or component thereof including any service application or process executed on client device or other components. For example a remedy operation may comprise terminating an execution of a service or daemon on the client device . In another example a remedy operation may comprise restarting the client device . In a further example a remedy operation may comprise shutting down the client device . Other remedy operations may also be executed. The remedy operation is then encoded as an encoded operation and communicated to client device for execution. The device testing application may then obtain a device state to determine if the client device still meets a condition defined within the device profile .

Referring next to shown is a flowchart that provides one example of the operation of a portion of the device testing application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the device testing application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

The operation of is performed by the device testing application . The device testing application initiates the execution of a series of test operations on a client device . After each test operation the device testing application then obtains a device state from client device to determine if the client device is at risk for entering an unresponsive state. If the client device is at risk the device testing application initiates the execution of remedy operations until the client device is no longer at risk. Once the client device is no longer at risk the execution of test operations continues.

Beginning with box device testing application initiates the execution of a test operation . The test operation is encoded as an encoded operation and communicated to the client device . In embodiments in which the test operation comprises a single operation the client device executes the operation defined therein. In embodiments in which the test operation comprises multiple operations the operations may be executed in a specified execution order or a random order.

Moving to box the device testing application determines if all test operations have been executed by the client device . If so testing has completed. If not as shown in box the device testing application obtains a device state from client device . This is accomplished by a device state interface executed on client device encoding various attributes relating to the operation of client device into a device state . Device state is then communicated to the computing device .

Next in box the device testing application determines if the client device meets a condition defined in a device profile . This is accomplished by comparing the device state obtained in box to one or more conditions defined in the device profile . For example in one embodiment the device profile may define a condition as the client device having more than 1000 file handles open. The device testing application determines if the open file handles attribute encoded in the device state exceeds 1000. In another embodiment the device profile may define a condition as the battery power having less than 10 . As another example the device profile may define a condition as the CPU usage exceeding 80 . Other conditions may be defined in the device profile .

In another embodiment the device profile may define a condition in which multiple attributes must be within predefined ranges or have predefined values simultaneously. For example the condition may comprise a battery level below 25 and a CPU usage exceeding 80 . The device testing application would look to the battery level and CPU usage attributes encoded in the device state to determine if both attributes are within the ranges defined in the condition. Other conditions defined in the device profile may be compared to other attributes encoded in the device state .

If the client device does meet a condition defined in the device profile the device testing application attempts to execute a remedy operation from a plurality of available remedy operations in order to put the client device in a state where it does not meet a condition defined in the device profile . In box the device testing application determines if there are unexecuted remedy operations. If every available remedy operation has been executed then the operation of ends. In such situations the client device is in such a state that the device testing application cannot intervene to place the client device outside of a risk state.

In box should there be unexecuted remedy operations the device testing application initiates the execution of an unexecuted remedy operation . In some embodiments this comprises initiating the execution of the remedy operation on the client device . This is accomplished by encoding the remedy operation as an encoded operation and communicating it to the client device for execution. In other embodiments initiating the execution of an unexecuted remedy operation comprises directing an actuator to press a power switch on the client device . The remedy operation to be executed may be determined through several means. In one embodiment the remedy operation may be selected at random from the unexecuted remedy operations . In another embodiment the remedy operation may be selected based upon a history of success associated with executing the remedy operation on the client device. In a further embodiment the remedy operation may be selected based on its position in a predefined ordered list of remedy operations . The remedy operation may also be selected based on other criteria or methods.

Next the process returns to box to obtain another device state from the client device . This is used to determine if the remedy operation had an effect such that the client device no longer meets a condition defined in the device profile . Boxes and are repeated until the client device no longer meets a condition defined in the device profile as shown in box or there are no remaining unexecuted remedy operations as shown in box . If the client device no longer meets a device profile condition the device testing application resumes initiating the execution of test operations on the client device as shown in box .

Referring next to shown is a flowchart that provides one example of the creation of a device profile according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the device testing application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning with box device testing application obtains a device state from client device . As previously described the device state interface generates a device state by encoding various attributes relating to the operational status of the client device . The device state is then communicated to the device testing application via network .

In box the device testing application initiates the execution of a test operation by communicating the test operation as an encoded operation to the client device . Upon receiving the encoded operation client device then executes the test operation encoded therein. In box the test operation is added to a data set from which the device profile may be generated.

In box the device testing application determines if client device has entered an unresponsive state. In some embodiments this is accomplished through attempting to obtain a device state . In other embodiments this is accomplished by communicating a request to the client device and waiting a predetermined amount of time for a response. In further embodiments this may be accomplished by determining if a data stream or signal originating from the client device has been terminated. Other methods and techniques can also be used to determine if the client device has entered an unresponsive state. If the client device has entered an unresponsive state then a device profile is generated or updated in box .

If the client device has not entered an unresponsive state after executing test operation another device state is obtained in box . In box the two most recently obtained device states one device state obtained before and another after the execution of test operation are compared. This determines what changes occurred in client device due to the execution of the test operation . For example the differences between the device states may indicate that executing test operation resulted in 25 new file handles being opened and a 5 reduction in battery power. In another example a test operation may comprise installation and uninstallation of an application. The changes in the device states may show a 50 megabyte increase in allocated memory indicative of leaking data. Other attribute comparisons may be made as well. Data relating to the differences between the two most recently obtained device states is then added to a data set.

Moving to box if the test has not been completed the moves to box . Boxes through are repeated until the test has been completed as shown in box or the client device enters an unresponsive state as shown in box . Once the client device enters an unresponsive state or the test is completed box generates or updates a device profile .

In box a device profile is generated or updated. A new device profile is generated in cases where an associated client device does not have an existing device profile . If the associated client device does have an existing device profile the existing device profile is updated to add change delete or otherwise modify conditions included in the device profile. A device profile can be generated or updated using a data set comprising executed test operations as shown in box differences between obtained device states as shown in box precalculated or known data relating to client device including hardware specifications data relating to the operating system of client device or other data. In some embodiments the device profile is generated or updated as a function of user input. In other embodiments the device profile is generated or updated based on a supervised machine learning algorithm such as Bayesian statistics kernel estimators decision tree learning case based reasoning or other algorithms. Other techniques algorithms and methods can also be used to generate or update the device profile. The device profile will include conditions which when met indicate an associated client device is at risk for entering an unresponsive state.

With reference to shown is a schematic block diagram of the computing device according to an embodiment of the present disclosure. The computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are device testing application and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processors as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java Javascript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the device testing application and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the device testing application. If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including device testing application that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

