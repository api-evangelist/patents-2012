---

title: Printable object processing
abstract: In one implementation, a printable object processing system detects a user print action relative to a printable object and identifies an attribute of the printable object in response to detecting the user print action. The printable object processing system them defines a print rule based on the attribute.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09489157&OS=09489157&RS=09489157
owner: Hewlett-Packard Development Company, L.P.
number: 09489157
owner_city: Houston
owner_country: US
publication_date: 20120113
---
Users of computing devices typically print printable objects manually. For example a user can print an image file attached to an electronic mail message by selecting a print command for the image file at an electronic mail client.

Some computing devices or software applications or applications hosted at computing devices allow users of those applications to specify rules for printing printable objects. For example a user can define a rule within an electronic mail client that is satisfied by electronic mail messages with attachments of a particular file type. More specifically the rule can be satisfied by electronic mail messages with attachments that are of the Portable Document Format PDF . When an electronic mail message satisfies the rule the electronic mail client prints the attachment.

Implementations discussed herein define print rules in response to print actions that are performed on or relative to printable objects. For example some implementations discussed herein define print rules based on attributes of printable objects relative to which a user performs or requests or initiates via a computing device or service a print action. As a more specific example implementations discussed herein detect print actions relative to printable objects e.g. printing a printable object at a printer connected to a computing device printing a printable object at a network connected printer providing a printable object to a print service or providing a printable object to a print repository and define print rules based on attributes of those printable objects. Each print rule has one or more conditions related to the attributes of those printable objects and a print action.

In some implementations such print rules are applied to new printable objects i.e. printable objects other than the printable objects whose attributes where used to define the print rules that are accessible at a computing device or service. In other words attributes of the new printable objects are compared with one or more conditions of the print rules. If a new printable object has one or more attributes that satisfy one or more conditions of a print rule that new printable object is said to satisfy that print rule and the print action for that print rule is executed on or performed relative to that new printable object.

In some implementations print rules are defined and applied to printable objects without user input. Thus print rules can be defined and print actions can be performed on printable objects automatically. That is print rules can be defined and print actions can be performed on printable objects in response to signals or commands from a printable object processing system rather than in response to input from a user. As a result a printable object processing system can for example identify attributes of printable objects on which a user performs print actions e.g. that a user prints at a printer and apply print actions to other printable objects that have those same attributes without specification of those attributes from the user.

For example a printable object processing system can monitor actions performed by a user or user actions at a computing device or service e.g. an application a web application or a data or content repository and detect print actions requested by a user or user print actions relative to printable objects when the user prints those printable objects. The printable object processing system then defines print rules based on attributes of those printable objects. Thus the printable object processing system defines print rules in response to user print actions rather than in response to user descriptions of print rules e.g. user specified attributes and or print actions .

Similarly a printable object processing system can monitor a computing device or service to detect when new printable objects are received or become accessible and apply print rules to the new printable objects. That is for example the printable object processing system can compare attributes of the new printable objects with conditions of print rules to determine whether any of the new printable objects satisfy any of the print rules. The printable object processing system can then execute the print action for each print rule relative to the new printable objects that satisfy that print rule. For example printable object processing system can provide the new printable objects that satisfy a print rule to a print repository from which a user can request printing of printable objects via a network connected printer.

A print action relative to a printable object is detected at block . A printable object is content or a data set that can be stored at a memory and printed at a printer. For example a word processing document file e.g. a Microsoft Word document an image file e.g. a Joint Photographic Experts Group JPEG Portable Network Graphics PNG or bitmap image file an electronic mail message a Portable Document Format PDF file or any other data set or portion thereof that can be printed.

A print action is an operation that is associated with printing. For example printing a printable object at a local printer e.g. a printer connected to a computing device printing a printable object at a network connected printer providing a printable object to a print service e.g. sending the printable object to an electronic mailbox associated with a network connected printer or providing a printable object to a print repository. Such print actions are relative to a printable object when performed on a printable object.

Print actions can be detected at block using a variety of methodologies. For example a printable object processing system can instrument a runtime environment of an application or a group of applications to receive notifications when print actions are performed on printable objects within that application. That is the runtime environment can be instrumented to provide notifications to the printable object processing system in response to execution of a print action relative to a printable object. Such notifications can include information related to the print action e.g. a type or class of print action and to the printable object on which the print action is performed e.g. attributes of the printable object an identifier such as a file system path of the printable object and or the printable object itself . As used herein the term to instrument means interface with interact with and or extend functionality of.

As a specific example a printable object processing system can register with hooks of a runtime environment such as an operating system via an application programming interface API of the runtime environment to receive events messages function calls method invocations or some other notification when print actions are performed on printable objects. As another example instructions or code implementing an application or group of applications and or a runtime environment can be modified to instrument the application and or runtime. For example the application can be a Java application hosted within a Java Runtime Environment JRE . The printable object processing system can instrument the Java application and or JRE by modifying bytecode of the Java application and or JRE to provide notifications to the printable object processing system when print actions are performed on printable objects.

In some implementations a printable object processing system can detect print actions via a plug in interface of the application. For example the printable object processing system can register with the application to receive notifications when the application performs a print action relative to printable objects. Similar to the notifications discussed above such notifications can include information related to a print action and printable object relative to which the print action is performed. In other words the printable object processing system can be a plug in or extension to an application or a group of applications . As a specific example the application can be a browser application e.g. a web or Internet browser and the printable object processing system can be a plug in or extension to the browser application. As another example the application can be an electronic mail client or email application and the printable object processing system can be a plug in or extension to the electronic mail client.

After a print action relative to a printable object is detected at block one or more attributes of the printable object are identified at block . For example attributes of the printable object are identified using information included in a notification from a runtime environment or from an application. Attributes are properties or characteristics of a printable object and a printable object can include a variety of attributes. For example attributes of a printable object can be any of a variety of attribute types such as a file type a content type an origin or source e.g. a sender address or domain of an email including a printable object or author of a file including a printable object a destination e.g. a recipient address or domain of an email including a printable object metadata fields or categories a filesystem path a size e.g. a file size a resolution of an image or graphic or a date or age.

The attribute types identified at block can vary according to different implementations. In some implementations the attribute types identified at block and analyzed at block discussed in more detail below can be configurable for a printable object processing system. For example a printable object processing system can access configuration parameters at a configuration file that defines which attribute types are of interest to the printable object processing system. That is the configuration file defines which attribute types are identified at block and or analyzed at block . In some implementations the printable object processing system can define a configuration interface such as a graphical user interface GUI at which a user can specify which attribute types are of interest to the printable object processing system.

At block a printable object processing system implementing process determines whether more print actions should be considered before defining a print rule at block . For example a number of print actions that should be considered can be specified similarly as discussed above in relation to attribute types of interest. In some implementations the number of print actions can be for a particular type of print action e.g. printing at a local printer printing at a network connected printer providing to a print service or providing to a print repository . In other implementations rather than a number of print actions that should be considered print actions should be considered for a period of time e.g. specified similarly as discussed above in relation to attributes of interest before a print rule is defined at block .

Furthermore in some implementations print actions are considered until a particular number of print actions are applied to printable objects with a common attribute e.g. an attribute that is identical or similar for each printable object . For example print actions should be considered until a predetermined or specified number of print actions have been performed relative to printable objects with a common attribute such as a file type or origin or with a group of common attributes. Accordingly in some implementations information related to print actions printable objects and attributes of printable objects are cached or stored by a printable objects processing system for analysis at blocks and or .

If more print actions should be considered at block process returns to block to detect additional print actions. If no additional print actions need be considered at block process proceeds to block to define a print rule. As used herein a print rule includes a condition related to an attribute of printable objects and is associated with a print action. The print action can be implicitly associated with a print rule e.g. the print action for the print rule is specified at the printable objects processing system rather than at the print rule or explicitly associated with the print rule e.g. the print action is specified at the print rule . The condition specifies an attribute or range or group of attributes that satisfy the print rule.

A print rule can be defined for example by determining whether a threshold quantity or frequency of print actions has been performed relative to printable objects with a common attribute. Such a threshold quantity or frequency and attribute can be provided as discussed above in relation to block e.g. can be specified in configuration information such as a configuration file or by a user via an interface and can vary according to different implementations. For example for print rules that are highly sensitive to change the threshold quantity can be a relatively small number. Thus a print rule can be defined after a few print actions are applied to printable objects with a common attribute or group of common attributes . As another example for print rules that are highly insensitive to change the threshold quantity can be a relatively large number such that a print rule is defined after many print actions are applied to printable objects with a common attribute.

Moreover as discussed above the attributes or attribute types that are analyzed at block can vary according to different implementations. That is the attributes that are used to define a print rule at block can vary among implementations. For example in one implementation a print rule can be defined based on a single attribute such as a file type. Thus after the threshold quantity of print actions are applied to printable objects with a particular file type a print rule for that file type is defined at block . That is a print rule with that file type as a condition is defined at block . As another example in another implementation a print rule can be defined based on a variety of attributes such as a file type an origin and a size. More specifically for example after the threshold quantity of print actions are applied to printable objects with a particular file type origin and resolution a print rule with conditions for that file type that origin and that resolution is defined at block .

In some implementations a print action is implicitly related to a print rule. For example a printable object processing system can associate a particular print action with each print rule. That is a printable object processing system implementing process can perform a particular print action on new printable objects that satisfy any print rule. In other implementations a print action is explicitly related to a print rule. For example a print rule can include a field that identifies a print action and a printable object processing system implementing process can perform that print action on new printable objects that satisfy that print rule. Such a print action can be selected at block based on statistical analysis of information related to print actions relative to printable objects detected at block . For example the print action that was performed most frequently relative to print actions that share a common attribute can be specified in the print rule defined at block for which that attribute is a condition. In other implementations a default print action can be specified in a print rule defined at block .

In other implementations a print action for a print rule can be specified by a user. For example a printable object processing system implementing process can prompt e.g. via a user interface a user to select or input a print action at block .

The print rule can then be applied to a new printable object as illustrated at block . A print rule is applied to a new printable object by determining whether the new printable object satisfies the print rule and performing a print action related to the print rule on the new printable object. As discussed above print actions initiated or requested by a user can be referred to as user print actions. In contrast print actions initiated or requested by a printable object processing system can be referred to as system print actions. Blocks illustrate an example of applying a print rule to a new printable object.

A new printable object is detected by a printable object processing system implementing process at block . Similar to detecting print actions discussed above in relation to block the printable object processing system can instrument applications and or a runtime environment to receive notifications when new printable objects are available. For example the printable object processing system can be a plug in to an electronic mail client that receives notification when electronic mail messages are received. As another example the printable object processing system can hook into an operating system or service e.g. a data repository to receive notification printable objects are stored at a filesystem.

The new printable object is then compared with a print rule or group of print rules to determine whether the new printable object satisfies the print rule at block . More specifically for example attributes of the new printable object are compared with the condition or conditions of the print rule to determine whether attribute of the new printable object satisfy the condition. If an attribute of the new printable object satisfies the condition the new printable object is said to satisfy the print rule. An attribute satisfies a condition if the attribute matches or sufficiently matches the condition. For example a condition can be a file type extension that is compared with a file type attribute in a case insensitive comparison. In some implementations a condition can be expressed relative to a comparison operator such as greater than greater than or equal to less than less than or equal to or not equal to. As an example the condition can be a minimum size value e.g. a minimum resolution of an image file or minimum file size that is satisfied by new printable objects that have a size value greater than the minimum size value. As yet another example a condition can define a pattern e.g. using a regular expression that is satisfied by attributes e.g. file names file types file system paths or origins of printable objects such as email addresses or domains that match the pattern.

If the new printable object does not satisfy the print rule no print action is performed on the new printable object. If however the new printable object does satisfy the print rule in the example illustrated in process proceeds to block at which the print action associated with the print rule is performed relative to or on the new printable object. The print action performed relative to the new printable object is a system print action and can be any of a variety of print actions or a group of print actions. As specific example the print action can include printing the new printable object at a printer connected to a computing device printing the new printable object at a network connected printer providing the new printable object to a print service or providing the new printable object to a print repository.

Process illustrated in is an example implementation. In other implementations various aspects of process can be different from those discussed above in relation to . For example in some implementations a process similar to process defines print rules but does not apply print rules to new printable objects. Thus for example block can be excluded. Moreover in some implementations one process can apply print actions defined by another process to new printable objects. Accordingly blocks and can be implemented at a first process or printable object processing system implementing the first process to define print rules and block can be implemented at another process or printable object processing system implementing the second process to apply the print rules defined at the first process to new printable objects. Furthermore although process is illustrated in as a sequential process some blocks can be executed or processed in parallel with other blocks. For example blocks and can execute sequentially with respect to one another e.g. as illustrated in and block can execute in parallel or asynchronously with blocks and .

Computing device hosts runtime environment email application browser application application application and printable object processing system . As an example of computing device is a schematic block diagram of a computing device hosting a printable object processing system according to an implementation. Computing device e.g. a computer server a group of computer servers a virtual machine a group of virtual machines or a combination thereof includes processor communications interface and memory . Processor is any combination of hardware and software that executes or interprets instructions codes or signals. For example processor can be a microprocessor an application specific integrated circuit ASIC a distributed processor such as a cluster or network of processors or computing devices a multi core or multi processor processor or a virtual or logical processor of a virtual machine.

Communications interface is a module via which processor can communicate with other processors or computing devices via communications link. For example communications interface can include a network interface card and a communications protocol stack hosted at processor e.g. instructions or code stored at memory and executed or interpreted at processor to implement a network protocol . As specific examples communications interface can be a wired interface a wireless interface an Ethernet interface a Fiber Channel interface an InfiniBand interface and IEEE 802.11 interface or some other communications interface via which processor can exchange signals or symbols representing data to communicate with other processors or computing devices.

Memory is a processor readable medium that stores instructions codes data or other information. As used herein a processor readable medium is any medium that stores instructions codes data or other information non transitorily and is directly or indirectly accessible to a processor. Said differently a processor readable medium is a non transitory medium at which a processor can access instructions codes data or other information. For example memory can be a volatile random access memory RAM a persistent data store such as a hard disk drive or a solid state drive a compact disc CD a digital video disc DVD a Secure Digital SD card a MultiMediaCard MMC card a CompactFlash CF card or a combination thereof or other memories. In some implementations memory can be integrated with processor separate from processor or external to computing device .

Memory includes modules e.g. instructions or codes that when executed at processor implement operating system runtime environment printable object processing system email application browser application and applications and . In other words operating system runtime environment printable object processing system email application browser application and applications and are each modules that when executed at processor cause processor to perform operations that implement respectively an operating system a printable object processing system an email application a browser application and other applications. Said differently operating system runtime environment printable object processing system email application browser application and applications and are hosted at computing device or at processor . In some implementations other modules such as a print driver or print manager are also hosted at computing device .

In some implementations computing device can be a virtualized computing device. For example computing device can be hosted as a virtual machine at a computing server. Moreover in some implementations computing device can be a virtualized computing appliance and operating system is a minimal or just enough operating system to support e.g. provide services such as a communications protocol stack and access to components of computing device such as communications interface runtime environment printable object processing system email application browser application and applications and .

Printable object processing system and runtime environment email application browser application and applications and can be accessed or installed at computing device from a variety of memories or processor readable media. For example computing device can access a remote processor readable medium via communications interface and printable object processing system at that processor readable medium. As a specific example computing device can be a thin client that accesses operating system and printable object processing system during a boot sequence.

As another example computing device can include not illustrated in a processor readable medium access device e.g. CD DVD SD MMC or a CF drive or reader and printable object processing system at a processor readable medium via that processor readable medium access device. As a more specific example the processor readable medium access device can be a DVD drive at which a DVD including an installation package for printable object processing system is accessible. The installation package can be executed or interpreted at processor to install printable object processing system at computing device e.g. at memory . Computing device can then host or execute the print service system.

In some implementations printable object processing system can be accessed at or installed from multiple sources locations or resources. For example some components or modules of printable object processing system can be installed via a communications link and other components or modules of printable object processing system can be installed from a DVD.

Referring to runtime environment is a module or group of modules that support execution of email application browser application application and application at computing device . For example runtime environment can be an operating system a virtual machine e.g. a Java virtual machine JVM a software library or framework or an application server. Email application browser application application and application are modules or groups of modules that are hosted at computing device that operate on or with printable objects. Either or both of applications and can be for example an image manipulation or management application a word processing application a shell such as a command line shell or GUI shell of an operating system a print driver or print manager or any other application that interacts with printable objects.

As illustrated in printable object processing system instruments runtime environment to detect print actions relative to printable objects and new printable objects at email application browser application application application and or other applications not shown hosted at computing device . For example printable object processing system can instrument runtime environment by registering to receive notifications of print actions by hooking runtime environment or by altering code or instructions of runtime environment . In other implementations printable object processing system can instrument email application browser application application application and or other applications hosted at computing device individually to detect print actions at those applications and new printable objects. In yet other implementations printable object processing system can instrument applications hosted at computing device and runtime environment to detect print actions at those applications and new printable objects.

Printer is a printer that is local or locally connected to computing device . That is for example printer communicates with computing device via an interface such as a Universal Serial Bus USB parallel port a wireless interface such as Bluetooth or Wi Fi Direct or some other interface independent of communications link . In some implementations an environment including a printable object processing system does not include a local printer.

Print repository is a service hosted at a computing device or group of computing devices at which printable objects can be stored e.g. at a persistent memory such as a hard disk drive and accessed by network connected printers. As illustrated in print repository is independent of printers and . That is print repository is not hosted at printer or printer . Rather print repository is hosted at a computing device or group of computing devices independent of or separate from printers and .

In some implementations print repository includes accounts and security mechanisms that allow a user of print repository to store printable objects within an account of that user at print repository such that other users of print repository cannot access those printable objects. Said differently printable objects and can each be associated with an account.

As an example a credential such as a user name and password can be required to store and or to access printable objects at an account of print repository . Thus the credential for an account is required to store printable objects at print repository and to access printable objects at print repository . Said differently the credential is used to log into print repository to store and or to access printable objects at print repository .

Printers and are network connected printers. As used herein the term network connected printer means a printer can be connected to a communications link such as a computer network and is capable of obtaining representations of printable objects sending and receiving data accessing representations of printable objects and or accessing applications via the communications link. Additionally printers and can request printable objects or representations such as rasterized or rendered representations of printable objects from print repository . For example printer can host an application including a GUI via which a user can log into an account at print repository and request printable objects associated with that account. Print repository provides those printable objects to printer and printer prints those printable objects. Thus a user can initiate printing of printable objects stored at print repository from printer or from other network connected printers to which print repository is accessible.

Additional information related to print repositories is disclosed in U.S. patent application Ser. No. 13 307 166 filed on Nov. 30 2011 and entitled STORAGE OF PROCESSED CONTENT FOR PRINTING which is incorporated herein by reference in its entirety. U.S. patent application Ser. No. 13 307 166 discloses for example print repositories implemented as computer and or server systems with storage for a rapid printing service that receive printable objects or content store the printable objects or representations thereof and provide the printable objects to printers.

Communications link includes devices services or a combination thereof that define communications paths between computing device print repository printer printer and or other devices or services. For example communications link can include one or more of a cable e.g. twisted pair cable coaxial cable or fiber optic cable a wireless link e.g. radio frequency link optical link or sonic link or any other connectors or systems that transmit or support transmission of signals. Communications link can include communications networks such as an intranet the Internet other telecommunications networks or a combination thereof. Additionally communications link can include proxies routers switches gateways bridges load balancers and similar communications devices. Furthermore the connections and communications paths illustrated in are logical and do not necessarily reflect physical connections.

As an example of data flow in the environment illustrated in a user of computing device can perform or initiate or request a print action relative to printable content via email application browser application application application and or other applications. For example a user of computing device can print printable objects from email application browser application application application and or other applications at printer . Alternatively for example a user of computing device can print printable objects from email application browser application application application and or other applications at a network connected printer such as for example printer or printer . Moreover user of computing device can for example provide printable objects from email application browser application application application and or other applications to print repository or a print service not shown such as an ePrint service from Hewlett Packard Company. Printable object processing system detects the print action e.g. via runtime environment or via an application and in response determines whether a print rule should be defined.

Additionally printable object processing system detects new printable objects e.g. via runtime environment or via an application and in response applies a print rule or a group of print rules to the new printable objects. For example printable object processing system can receive a notification in response to a variety of events at computing device . As specific examples printable object processing system can receive a notification in response to receipt of an electronic mail message including a printable object at email application download of or access to a printable object at browser application or transfer of a printable object to a filesystem not shown hosted at computing device .

If a new printable object satisfies a print rule a print actions associated with that print rule is performed on the printable object. As illustrated in printable object processing system is in communication with print repository and printable object processing system provides printable objects that satisfy print rules to print repository . Said differently printable objects and were new printable objects detected by printable object processing system which satisfied a print rule or a group of print rules. As discussed above in some implementations printable objects are stored in secured accounts at print repository . Accordingly printable object processing system can provide a credential to print repository to log into an account of print repository before providing a printable object to print repository . Additionally in some implementations printable object processing systems in addition to printable object processing system can provide printable objects to print repository .

As discussed above a user of printer and or printer can access printable objects at print repository and print those printable objects. In some implementations printers and each include an interface via which a user can log into an account of print repository view printable objects or a representation thereof and request printing of a printable object at those printers.

Printable object processing system includes monitor module attribute module definition module rule module and action module . Monitor module detects print actions relative to printable objects. For example a notification can be provided from a runtime environment or application to monitor module in response to a print action relative to a printable object. In some implementations monitor module also instruments a runtime environment or application to detect print actions.

Monitor module is in communication with attribute module and provides a signal or instruction to attribute module in response to detection of a print action relative to a printable object. Attribute module then identifies one or more attributes of the printable object. In other words attribute module determines one or more attributes of the printable object. For example attribute module can request metadata related to the printable object from a runtime environment such as an operating system or can parse the printable object to determine attributes of attributes of the printable object.

In some implementations attribute module accesses configuration information that identifies attributes or attribute types that should be considered by attribute module . For example a configuration file of printable object processing system can specify which attribute types of printable objects are of interest to printable object processing system and attribute module can determine attributes of those attribute types.

Definition module defines print rules based on attributes of printable objects. In other words definition module determines when a print rule should be generated the condition or conditions for that print rule and what print action or print actions should be associated with that print rule. For example definition module can determine that a threshold quantity or frequency of print actions have been performed on printable objects with a common attribute and in response define a print rule with that attribute as a condition. In some implementations the threshold quantity or frequency and attribute of interest can be specified in configuration information such as a configuration file for printable object processing system . That is if the threshold quantity or frequency of print actions have been performed on printable objects with a common attribute e.g. of an attribute type specified in the configuration information definition module defines a print rule with a condition satisfied by that attribute or a print rule for that attribute . In some implementations attributes of interest can be defined dynamically by definition module based on quantities of or frequencies at which print actions are performed on printable objects which have a common attribute.

In some implementations definition module defines print rules for multiple attributes. That is definition module defines print rules with conditions for each of a group of attributes that are satisfied by printable objects with those attributes. For example definition module can define a print rule for a group of attributes after a threshold quantity or frequency of print action have been performed on printable objects with a group of common attributes. The group of common attributes can be specified for example in configuration information for printable object processing system . As an alternative example a group of attributes can be determined dynamically by definition module based on statistical analysis of print actions performed on printable objects. For example definition module can dynamically define groups of attributes based on quantities of or frequencies at which print actions are performed on printable objects which have common attributes.

In addition to defining print rules definition module updates print rules in some implementations. For example a print rule can be defined with a condition that is satisfied for a first attribute at a first time. At a later time definition module can determine that a threshold quantity or frequency of print actions for updating a print rule has been performed on printable objects with the first attribute and a second attribute. Definition module can then identify the print rule for example based on the condition satisfied by the first attribute and can update or modify the print rule to have an additional condition that is satisfied by the second attribute. In some implementations the threshold quantity or frequency of print actions for updating a print rule can be the same as for defining a print rule. Accordingly in some implementations definition module can determine whether a print rule exists and or should be updated before defining a new print rule. For example definition module can determine that an existing print rule should be updated if all conditions of the existing print rule are satisfied by attributes that would otherwise be used for conditions of a new print rule. If the existing print rule includes conditions that are not satisfied by those attributes a new print rule can be defined.

As discussed above updating a print rule can include adding a condition or conditions to the print rule and can also include modifying a print action e.g. adding removing or replacing a print action associated with the print rule. Moreover updating a print rule can include removing a condition or conditions from a print rule. For example if all conditions of an existing print rule except one condition are satisfied by attributes that would otherwise be used for conditions of a new print rule that condition can be removed from the existing print rule.

In some implementations in addition to determining conditions for print rules definition module also determines a print action for print rules. A print action can be specified statically for example in configuration information for printable object processing system . For example configuration information for printable object processing system can specify that the print action for print rules should include providing printable objects that satisfy those print rules to a print repository. In other implementations a print action can be specified dynamically for example based on the print actions that were performed on printable objects in response to which the print rules were defined. As an example if the majority of print actions performed on printable objects in response to which the print rules were defined included printing at a local printer the print action for those print rules can include printing at a local printer. Thus the print action for a print rule can be the print action in response to which the print rule was defined or a different print action.

Rule module determines whether printable objects e.g. new printable objects satisfy a print rule. For example rule module compares attributes of printable objects with conditions of print rules to determine whether those printable objects satisfy a print rule. In some implementations print rules are stored at rule module e.g. at a portion of a memory or data store allocated to rule module . In other implementations print rules are stored at a memory or data store accessible to rule module .

If a printable object satisfies a print rule rule module provides a signal or instruction to action module to perform a print action on that printable object. As discussed above the print action can be explicitly associated with the print rule e.g. specified in the print rule or implicitly associated with the print rule. Accordingly in some implementations action module performs a print action based on an identifier of a print action at the print rule. In other implementations action module performs a particular print action regardless of the presence of an identifier of a print action at a print rule. In some implementations multiple print actions are associated with a print rule and action module performs each such print action on that printable object in response to a signal or instruction from rule module .

While certain implementations have been shown and described above various changes in form and details may be made. For example some features that have been described in relation to one implementation and or process can be related to other implementations. In other words processes features components and or properties described in relation to one implementation can be useful in other implementations. As another example functionalities discussed above in relation to specific modules or elements can be included at different modules engines or elements in other implementations. Furthermore it should be understood that the systems apparatus and methods described herein can include various combinations and or sub combinations of the components and or features of the different implementations described. Thus features described with reference to one or more implementations can be combined with other implementations described herein.

As used herein the term module refers to a combination of hardware e.g. a processor such as an integrated circuit or other circuitry and software e.g. machine or processor executable instructions commands or code such as firmware programming or object code . A combination of hardware and software includes hardware only i.e. a hardware element with no software elements software hosted at hardware e.g. software that is stored at a memory and executed or interpreted at a processor or at hardware and software hosted at hardware. Additionally as used herein the singular forms a an and the include plural referents unless the context clearly dictates otherwise. Thus for example the term module is intended to mean one or more modules or a combination of modules.

Moreover the term provide as used herein includes push mechanism e.g. sending data independent of a request for that data pull mechanisms e.g. delivering data in response to a request for that data and store mechanisms e.g. storing data at an intermediary at which the data can be accessed . Furthermore as used herein the term based on means based at least in part on. Thus a feature that is described as based on some cause can be based only on the cause or based on that cause and on one or more other causes.

