---

title: Framework for critical-path resource-optimized parallel processing
abstract: Computer-implemented methods, computer-program products, and systems instantiate a resource comsumption optimizer framework (RCOF) for a plurality of sub-process associated with a process. A plurality of sub-processes are loaded into a memory in accordance with a calculated optimized resource comsumption pattern. Each sub-process is associated with an agent that communicates with the RCOF. A particular sub-process is executed and the execution start is gated by an associated agent based upon at least a determined buffer value. The RCOF is notified of the particular sub-process execution completion.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09141425&OS=09141425&RS=09141425
owner: SAP SE
number: 09141425
owner_city: Walldorf
owner_country: DE
publication_date: 20120910
---
Organizations implement parallel processing environments in order to increase the efficiency of a process by dividing the process into a number of sub processes to be executed simultaneously with the goal of solving a problem in less time or solving a larger problem in the same time. Parallel processing environments implement resource control systems to handle account for critical system resources such as memory central processing unit CPU consumption network bandwidth file input output I O limitations memory speed etc. during processing or the critical system can be improperly delayed by other non critical processes. Often these resource control systems use a brute force methodology to ensure availability of the critical system resources. Regardless of a process actual sub process dependencies the brute force methodology introduces latency into an overall parallel processing time of the process. The introduced latency necessarily impacts the process efficiency and affects an organization s provision of business applications and or necessary data for use by customers. As a result customers may choose more efficient alternate solutions.

The present disclosure relates to computer implemented methods computer program products and systems for critical path resource optimized parallel processing. One computer implemented method includes instantiating a resource consumption optimizer framework RCOF for a plurality of sub process associated with a process loading the plurality of sub processes into a memory in accordance with a calculated optimized resource consumption pattern associating each sub process of the plurality of sub processes with an agent wherein the agent communicates with the RCOF executing a particular sub process of the plurality of sub processes loaded into the memory wherein the sub process execution start is gated by an associated agent based upon at least a determined buffer value and notifying the RCOF of the particular sub process execution completion.

Other implementations of this aspect include corresponding computer systems apparatus and computer programs recorded on one or more computer storage devices each configured to perform the actions of the methods. A system of one or more computers can be configured to perform particular operations or actions by virtue of having software firmware hardware or a combination of software firmware or hardware installed on the system that in operation causes or causes the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by a data processing apparatus cause the apparatus to perform the actions.

The foregoing and other implementations can each optionally include one or more of the following features 

A first aspect combinable with the general implementation further comprising prior to the loading of the sub processes into the memory calculating the optimized resource consumption pattern.

In a second aspect combinable with any of the previous aspects the agent exposes an application programming interface API to the RCOF.

A third aspect combinable with any of the previous aspects further comprising determining that a particular sub process of the plurality of sub processes loaded into the memory can start execution.

A fourth aspect combinable with any of the previous aspects further comprising determining that the calculated optimized resource consumption pattern should be updated.

A fifth aspect combinable with any of the previous aspects further comprising updating the calculated optimized resource consumption pattern.

A sixth aspect combinable with any of the previous aspects further comprising determining where processing of the plurality of sub processes is complete.

The subject matter described in this specification can be implemented in particular implementations so as to realize one or more of the following advantages. First a described framework can be implemented in multiple processing environments that support resource measurement and control for example through an operating system and or programming language. Second the framework can be used to facilitate processing of all processes with parallel processing capable sub processes with dependencies. Third overall throughput is increased in the process processing by reduction of overall process latency though intelligent distribution of available processing resources without slowing the process. Fourth it is possible to execute a process with fewer resources in the same overall processing time by optimizing the latency of single sub processes which reduces peak resource usage. As a result the maximum available resources needed by a system to execute the process can remain the same and or be reduced. Other advantages should be apparent to those skilled in the art.

The details of one or more implementations of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

This disclosure generally describes computer implemented methods computer program products and systems for critical path resource optimized parallel processing.

Specifically the enterprise server is responsible for receiving application requests for example requests for critical path resource optimized parallel processing from one or more client applications associated with the client of the example distributed computing system and responding to the received requests by processing said requests in the associated business application RCOF and or PPE and sending an appropriate response from the business application RCOF and or PPE back to the requesting client application. In addition to requests from the client requests associated with the business application RCOF and or PPE may also be sent from internal users external or third party customers other automated applications as well as any other appropriate entities individuals systems or computers. According to one implementation enterprise server may also include or be communicably coupled with an e mail server a web server a caching server a streaming data server and or other suitable server. In other implementations the enterprise server and related functionality may be provided in a cloud computing environment.

The enterprise server includes an interface . Although illustrated as a single interface in two or more interfaces may be used according to particular needs desires or particular implementations of the example distributed computing system . The interface is used by the enterprise server for communicating with other systems in a distributed environment including within the example distributed computing system connected to the network for example the client as well as other systems communicably coupled to the network not illustrated . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated example distributed computing system .

In some implementations any or all of the business application RCOF the PPE and or other components of the enterprise server both hardware and or software may interface with each other and or the interface using an application programming interface API and or a service layer . The API may include specifications for routines data structures and object classes. The API may be either computer language independent or dependent and refer to a complete interface a single function or even a set of APIs. The service layer provides software services to the example distributed computing system . The functionality of the enterprise server may be accessible for all service consumers via this service layer. Software services such as provide reusable defined business functionalities through a defined interface. For example the interface may be software written in Java C or other suitable language providing data in extensible markup language XML format or other suitable format.

While illustrated as an integrated component of the enterprise server in the example distributed computing system alternative implementations may illustrate the service layer as a stand alone component in relation to other components of the example distributed computing system . Moreover any or all parts of the service layer may be implemented as child or sub modules of another software module enterprise application or hardware module without departing from the scope of this disclosure.

The enterprise server includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular implementations of the example distributed computing system . Generally the processor executes instructions and manipulates data to perform the operations of the enterprise server . Specifically the processor executes the functionality required to receive and respond to requests from the client and or for critical path resource optimized parallel processing.

The enterprise server also includes a memory that holds data for the enterprise server . Although illustrated as a single memory in two or more memories may be used according to particular needs desires or particular implementations of the example distributed computing system . While memory is illustrated as an integral component of the enterprise server in alternative implementations memory can be external to the enterprise server and or the example distributed computing system . In some implementations the memory includes one or more instances of a process a process model a global buffer and or a free buffer .

The process is a partially parallel executable instance of executable computer program instructions. The process is capable of being divided into a plurality of discrete processes or sub processes with clearly defined dependencies between the sub processes for example execution time. Dividing the process into sub processes is computationally advantageous in that processing the sub processes in parallel allows a faster completion time or reduced computing resource usage for the process as a whole.

CREATED process program code is loaded from a secondary storage device for example a hard drive into main memory for example random access memory RAM 

These example process states are only representative of possible process states and definitions. One of ordinary skill will recognize that more or less process states are possible as well as different definitions of what constitutes the more or less process states. In some implementations the process and or sub process can provide an API as in interface with other components of the example distributed computing system .

The process model is data specifying sub processes of a process necessary sub process dependencies sub process central processing unit CPU consumption values of each sub process and other suitable data associated with processes and sub processes. In some implementations the process model can be determined at design time and or at run time. For example a software developer can create the process model while designing a process and or an automated process not illustrated can analyze a process and determine associated sub processes and the determined sub process dependencies prior to execution at run time. The process model is shared with the RCOF described below . In some implementations the process model can be stored in any suitable data structure for example a text file flat file binary file database or other suitable data structure.

The business application is any type of application or set of applications that allows the requesting viewing executing changing deleting generating or otherwise managing information associated with a business. Generally a business application is used by business users to perform various business related functions to increase productivity measure productivity and perform business functions accurately. Example business applications may include human resources management payroll management invoicing business process development management data processing business trend analysis analytics etc. In some implementations the business application can use business application data not illustrated which is any type of data associated used by a business application and or associated with a business object associated with a business application. For example for a business application that calculates taxes on sales invoices business application data for a specific sales invoice business object may include data pertaining to a particular sales invoice number buyer seller date address product s quantity price tax rate etc. The business application can also use a process sub processes a process model a global buffer a free buffer and or other component s of the example distributed computing system .

Once a particular business application is launched a client may interactively process a task event or other information associated with the enterprise server . In some implementations the business application may manage one or more processes . The one or more processes may include business processes performing and executing business process related events. Generally business processes communicate with clients applications systems and components to send and receive events.

In some implementations a particular business application may operate in response to and in connection with at least one request received from other business applications including a business application associated with another enterprise server . In some implementations the business application can be and or can include a web browser. In some implementations each business application can represent a web based application accessed and executed by remote clients across the network e.g. through the Internet or using at least one cloud based service associated with the business application . For example a portion of a particular business application may be a web service associated with the business application that is remotely called while another portion of the business application may be an interface object or agent bundled for processing at a remote client .

Any or all of a particular business application may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further all or portions of the particular business application may be executed or accessed by a user working directly at the enterprise server as well as remotely at a corresponding client . Further although illustrated as a single business application the business application may be implemented as multiple business applications on the enterprise server .

The RCOF is a service or a stand alone application that using one or more algorithms and process sub process data to manage critical path resource optimized parallel processing of a process and associated sub processes with respect to available system resources such as CPU availability network bandwidth file I O limitations memory speed etc. The RCOF can be any application program module process or other software that may also provide methods and or a graphical user interface necessary to perform its functions. In some implementations the RCOF can provide an API as an interface with other components of the example distributed computing system .

In some implementations the RCOF uses the process model to obtain process sub process data the PPE described below one or more agents described below and a free buffer described below and or a global buffer described below in order to determine and manage sub process executions. Although illustrated as a single RCOF in the enterprise server two or more RCOFs may be used in the enterprise server according to particular needs desires or particular implementations of example distributed computing system . For example a first RCOF can manage a first set of sub processes with respect to CPU availability while a second RCOF can manage a second set of sub processes with respect to file I O. In some implementations the first RCOF and the second RCOF can jointly manage the same sub processes in whole or in part.

In some implementations a particular RCOF can operate in response to and in connection with at least one request received from an associated business application RCOF PPE Agent and or client . Additionally a particular RCOF may operate in response to and in connection with at least one request received from other business applications RCOFs PPEs and or agents including business applications RCOFs PPEs and or agents associated with another enterprise server . In some implementations each RCOF can represent a web based application accessed and executed by remote clients using the network e.g. through the Internet or using at least one cloud based service associated with the RCOF . For example a portion of a particular RCOF may be a web service associated with an RCOF that is remotely called while another portion of the particular RCOF may be an interface object or agent bundled for processing at a remote client . Moreover any or all of a particular RCOF may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further portions of the particular RCOF may be executed or accessed by a user working directly at the enterprise server as well as remotely at a corresponding client .

The PPE is a service or stand alone application used by the RCOF to determine and or process one or more partially parallel executable sub processes . In some implementations the PPE can calculate one or more free buffers described below and or one or more global buffers described below per process sub process. In some implementations the PPE uses the process model to calculate free buffers and or global buffers for each sub process. In other implementations the PPE can use data received from a dynamic process not illustrated to calculate free buffers and or global buffers . The PPE may also use one or more agents described below and a free buffer and or a global buffer in order to determine and process sub process executions. In some implementations the PPE can use particular algorithms to perform its functions for example in calculating the free buffer and or global buffer . Algorithms may include for example round robin time slice and or other suitable algorithms. In some implementations the PPE may provide the algorithms to the RCOF for RCOF processing purposes.

Although illustrated as a single PPE in the enterprise server two or more PPEs may be used in the enterprise server according to particular needs desires or particular implementations of example distributed computing system . The PPE can be any application program module process or other software that may provide methods and a graphical user interface necessary to perform its functions. In some implementations the PPE can provide an API as in interface with other components of the example distributed computing system .

In some implementations a particular PPE can operate in response to and in connection with at least one request received from an associated business application RCOF agent and or client . Additionally a particular PPE may operate in response to and in connection with at least one request received from other business applications PPEs and or agents including business applications PPEs and or agents associated with another enterprise server . In some implementations each PPE can represent a web based application accessed and executed by remote clients using the network e.g. through the Internet or using at least one cloud based service associated with the PPE . For example a portion of a particular PPE may be a web service associated with a PPE that is remotely called while another portion of the particular PPE may be an interface object or agent bundled for processing at a remote client . Moreover any or all of a particular PPE may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further portions of the particular PPE may be executed or accessed by a user working directly at the enterprise server as well as remotely at a corresponding client . In some implementations the PPE can be used to configure the process model dependencies sub process CPU consumption values and other suitable data and or to retrieve these values from one or more process components of the example distributed computing environment .

The agent is a service or stand alone application used by the RCOF and or PPE to create run block and or terminate a sub process associated with a process . In some implementations the agent can perform other functions consistent with this disclosure. The agent also communicates with the RCOF and or the PPE to provide data about a sub process for example timestamps CPU usage and or other suitable data. The agent can be any application program module process or other software that may provide methods and a graphical user interface necessary to perform its functions. In some implementations the agent uses the process model the PPE and a free buffer described below and or a global buffer described below in order to perform its functions. In some implementations a particular agent can operate in response to and in connection with at least one request received from an associated business application RCOF PPE agent and or client . Additionally a particular agent may operate in response to and in connection with at least one request received from other business applications RCOFs PPEs and or agents including business applications RCOFs PPEs and or agents associated with another enterprise server . In some implementations each agent can represent a web based application accessed and executed by remote clients using the network e.g. through the Internet or using at least one cloud based service associated with the agent . For example a portion of a particular agent may be a web service associated with an agent that is remotely called while another portion of the particular agent may be an interface object or agent bundled for processing at a remote client . Moreover any or all of a particular agent may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further portions of the particular agent may be executed or accessed by a user working directly at the enterprise server as well as remotely at a corresponding client .

The client may be any computing device operable to connect to or communicate with at least the enterprise server using the network . In general the client comprises a computer operable to receive transmit process and store any appropriate data associated with the example distributed computing system .

The illustrated client further includes a client application . The client application is any type of application that allows the client to request and view content on the client . In some implementations the client application can be and or include a web browser. In some implementations the client application can use parameters metadata and other information received at launch to access a particular set of data from the server . Once a particular client application is launched a user may interactively process a task event or other information associated with the enterprise server . Further although illustrated as a single client application the client application may be implemented as multiple client applications in the client .

The illustrated client further includes an interface a processor and a memory . The interface is used by the client for communicating with other systems in a distributed environment including within the example distributed computing system connected to the network for example the enterprise server as well as other systems communicably coupled to the network not illustrated . The interface may also be consistent with the above described interface of the enterprise server or other interfaces within the example distributed computing system . The processor may be consistent with the above described processor of the enterprise server or other processors within the example distributed computing system . Specifically the processor executes instructions and manipulates data to perform the operations of the client including the functionality required to send requests to the enterprise server and to receive and process responses from the enterprise server . The memory may be consistent with the above described memory of the enterprise server or other memories within the example distributed computing system but storing objects and or data associated with the purposes of the client .

Further the illustrated client includes a GUI . The GUI interfaces with at least a portion of the example distributed computing system for any suitable purpose including generating a visual representation of a web browser. In particular the GUI may be used to view and navigate various web pages located both internally and externally to the enterprise server . Generally through the GUI an enterprise server user is provided with an efficient and user friendly presentation of data provided by or communicated within the example distributed computing system .

There may be any number of clients associated with or external to the example distributed computing system . For example while the illustrated example distributed computing system includes one client communicably coupled to the enterprise server using network alternative implementations of the example distributed computing system may include any number of clients suitable to the purposes of the example distributed computing system . Additionally there may also be one or more additional clients external to the illustrated portion of the example distributed computing system that are capable of interacting with the example distributed computing system using the network . Further the term client and user may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover while the client is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers.

The illustrated client is intended to encompass any computing device such as a desktop computer laptop notebook computer wireless data port smart phone personal data assistant PDA tablet computing device one or more processors within these devices or any other suitable processing device. For example the client may comprise a computer that includes an input device such as a keypad touch screen or other device that can accept user information and an output device that conveys information associated with the operation of the enterprise server or the client itself including digital data visual information or a GUI as shown with respect to the client .

Turning now to is a block diagram illustrating dependent sub process steps of a parallel processing capable process . For clarity of presentation the description that follows generally describes block diagram in the context of . However it will be understood that block diagram may be described for example by any other suitable system environment software and hardware or a combination of systems environments software and hardware as appropriate.

Process is divided into sub processes A B C D E F and G. and respectively . Each sub process can be described for example by legend . Legend shows that a process can be described with a processing step D PID an overall processing time OPT an earliest processing start time EPS and an earliest processing end time EPE . Time may be represented by the variable unit t. The PID identifies an identifier of a particular sub process. The OPT indicates the amount oft that the particular sub process takes overall to process. The EPS indicates the earliest t that a sub process may start to process. The EPE indicates the earliest t a sub process will end its processing. For example sub process A is illustrated as having a PID of A an OPT of t 5 an EPS of t 0 and an EPE of t 5.

Dependencies of the sub processes are illustrated in . In some implementations these dependencies are stored in the process model . For example sub process PID A calls out to three sub processes sub process PID B sub process PID C and sub process PID D which can be executed in parallel. The same can be said for PID C calling out to sub process PID E and sub process PID F . Note however that PID E can only be executed after PID B and PID C complete. Likewise PID F can only execute after PID C and PID D complete. Similarly sub process PID G can only execute after PID E and PID F complete.

As shown in PID A has an EPS t 0 meaning it starts at t 0. PID B PID C and PID D have an EPS t 5 after PID A finishes . PID E and PID F have an EPS t 10. PIDs E and F start after PID D finishes. Note that PID E was also waiting for PID B to finish but it finished at EPE t 8 and PID F waited for the end of PID D which finished at EPE t 7. PID G starts at EPS t 17 following completion of PID E at EPE t 16 and PID F at EPE t 17.

Note that a critical path exists in the overall process. The sub processes PID A PID C PID F PID G must be processed with the earliest possible EPS in order to avoid an overall delay here t 24 . It may be possible to time shift the other sub processes but not sub processes defined by PIDs ACFG. Therefore PIDs A C F G form a critical path in the overall process execution.

Some sub processes can be time shifted without delaying the overall process and or other sub processes . The free buffer describes an amount of time t that a particular sub process can be shifted without affecting the start time of any later sub process . For example sub process has a OPT of 3 meaning that it could be shifted t 2 to start at EPS t 7 and finish at EPE t 10. In this case it would finish at the same time as PID C with EPE t 10 and would not affect the start of PID D starting at EST t 10. In contrast the global buffer describes an amount oft that a particular sub process can be shifted in t without shifting the overall process end t. For example PID B may also be time shifted t 3. This time shifting would then delay the start of PID E to start at an EPS of t 11 but still complete at the same EPE t 17 as PID F and not interfering with the EPS t 17 or EPE t 24 of PID G. Since another sub process start time has been affected the time shift of t 3 cannot be considered a free buffer but can be considered a global buffer because the overall process EPE t 24 has not been changed. In some implementations the global buffer and or the free buffer may be defined and or stored in a file database data structure or any other suitable method of storing data. Although the free buffer and global buffer as illustrated as being stored in memory the free buffer and or global buffer may be stored in any location internal and or external to the components of the example distributed computing system in a manner consistent with the free buffer and or the global buffer being associated with a particular sub process.

Turning now to is a block diagram illustrating computational CPU resource leveling through time shifting of sub processes. For clarity of presentation the description that follows generally describes block diagram in the context of . However it will be understood that block diagram may be described for example by any other suitable system environment software and hardware or a combination of systems environments software and hardware as appropriate. Although details CPU resource leveling one of ordinary skill will appreciate that this same methodology could be applied to a multitude of other resources within the example distributed computing system for example network bandwidth file I O limitations memory speed etc.

If every sub process has a defined CPU consumption in of the overall available CPU capacity it is possible to determine results of processing the sub processes with various EPS values. For example if defined CPU consumption values are PID A 50 PID B 30 PID C 20 PID D 70 PID e 40 PID F 40 and PID G 70 then the overall CPU resource consumption curve is illustrated in at . Here if all sub processes start at the earliest EPS possible the overall CPU consumption would be too high particularly when PID B PID C and PID D are processed in parallel as shown at . Any algorithm for example a time slice or round robin algorithm that tries to equally share resources ends up slowing down all of them. And as PID C is part of the critical path defined above the overall processing deadline EPE t 24 for PID G would be violated.

However if PID B is simply time shifted here a delayed by t 2 to an EPS of 7 then from t 5 7 only PID C and PID D is processed at 90 CPU and from t 7 10 PID B and PID C are processed at 50 CPU. The overall CPU resource consumption curve for a time shift of t 2 for the EPS of PID B is illustrated in at . This time shift ensures that the critical path EPE of t 24 is not violated. In some implementations it can be possible time shift to both accelerate and or delay the start of a sub process.

Turning now to is a block diagram illustrating a RCOF and agents in relation to dependent sub process steps of a parallel processing capable process. For clarity of presentation the description that follows generally describes block diagram in the context of . However it will be understood that block diagram may be described for example by any other suitable system environment software and hardware or a combination of systems environments software and hardware as appropriate.

The RCOF is illustrated in . Associated with the RCOF are a number of agents for example and a PPE not illustrated . In some implementations a single agent is associated with a single sub process for example agent and sub process PID A . In other implementations one or more agents can be associated with one or more sub processes.

In general an agent acts to prohibit or to permit the operation of a sub process. For example agent may prohibit or permit PID A to start executing. Likewise agent may prohibit PID E from starting until both agents and have indicated to the RCOF that PID B and PID C have successfully completed. In one example RCOF may be aware of all active agents possibly through use of the process model and directly notify agent following its notification by agents and that PID B and PID C completed processing and that PID E may start. In some implementations the RCOF may be able to notify and or actively call an agent through the use of an API provided by each agent. For example an agent could expose a delay block function through the API allowing the RCOF to actively control the agent in order to better manage sub process execution in real time. In other implementations agent may need to query the RCOF or receive a notification message generated by the RCOF for permission to allow PID E to start processing. Unless permission is granted by the RCOF PID E execution will remain blocked. In some implementations agents may actively poll the RCOF according to a predefined or dynamically generated poll rate. In some implementations agents may also pass timestamps to the RCOF to permit a check of expected and real time resource consumption for a sub process. This additional data may allow the RCOF to update in real time the resource consumption values the process model and or an in use process optimization pattern. For example referring to the example of the RCOF could update real time CPU resource consumption values the process model and or an in use process optimization pattern.

In optimizing the processing of the overall process the RCOF typically takes into account free buffers first followed by global buffers. These values as well as others may be retrieved from the process model . In some implementations the RCOF may use linear optimization methods both known and proprietary to determine optimal processing optimization patterns. For example optimization patterns could include as smooth as possible over time keep threshold values under all circumstances which could include in some implementations extending global buffers and other suitable default and or user defined optimization patterns. In some instances a user may be presented with an opportunity to select from a plurality of suggested and or existing process optimization patterns possibly through a graphical user interface. In some implementations the RCOF may user various other system components to simulate multiple processing possibilities in order to select an optimal process optimization pattern prior to starting processing of an overall process. In these instances a user may be provided an opportunity to select a simulated optimal process optimization pattern to use in processing a particular process.

Turning now to is a flow chart for determining sub process related data for critical path resource optimized parallel processing. For clarity of presentation the description that follows generally describes method in the context of . However it will be understood that method may be performed for example by any other suitable system environment software and hardware or a combination of systems environments software and hardware as appropriate. For example one or more of the enterprise server the client or other computing device not illustrated can be used to execute method and obtain any data from the memory of the client the enterprise server or the other computing device not illustrated .

At sub process data is determined for a process. Sub process data may include applicable sub processes which sub processes may execute in parallel critical path information PID OPT EPS and or EPE time information agent associations and or sub process dependencies. In some implementations sub process data is manually determined and stored in the process model. In other implementations the sub process data is determined in whole or in part by the PPE and stored in the process model. In other implementations the PPE and one or more other components for example the RCOF may together calculate in whole or in part the sub process data. From method proceeds to

At free buffers and or global buffers are calculated for the determined sub process data. In some implementations the free buffers and or global buffers are determined by the PPE. In other implementations the PPE and one or more other components for example the RCOF may together calculate in whole or in part the free buffers and or the global buffers. From method proceeds to .

At resource consumption values are calculated for each process. For example CPU resource consumption values could be calculated for each sub process in order to determine optimum CPU resource consumption patterns and or other resource consumption patterns including CPU resource consumption values. In some implementations resource consumption values can be calculated by the PPE. From method proceeds to .

At optimized resource consumption patterns are calculated. In some implementations the calculated optimized resource consumption patterns are calculated by the ROCF. In other implementations the ROCF and one or more other components for example the PPE may together calculate in whole or in part the optimized resource consumption patterns. From method proceeds to .

Turning now to is a flow chart for critical path resource optimized parallel processing. For clarity of presentation the description that follows generally describes method in the context of . However it will be understood that method may be performed for example by any other suitable system environment software and hardware or a combination of systems environments software and hardware as appropriate. For example one or more of the enterprise server the client or other computing device not illustrated can be used to execute method and obtain any data from the memory of the client the enterprise server or the other computing device not illustrated .

At process associated sub processes are loaded into memory according to the calculated optimized resource consumption pattern see . From method proceeds to .

At each sub process in memory is associated with at least one agent. In some implementations the RCOF performs the assignment of the agents to the sub processes. In some implementations agents may be queried by the RCOF to determine their readiness. In other implementations agents may actively notify the RCOF of their readiness to proceed with processing. From method proceeds to .

At a determination is made whether a sub process may begin execution. If at it is determined that the sub process may begin execution the agent associated with the sub process permits the sub process to execute and the method proceeds to . In some implementations the RCOF can directly instruct the agent through an exposed method using an agent associated API. In other implementations the agent actively polls the RCOF or receives a notification message indicating that the agent is to permit the sub process to execute. If at however it is determined that the sub process may not execute method proceeds to .

At the sub process is executed. In some implementations the RCOF can interrupt delay and or terminate the execution of the sub process. From method proceeds to .

At the RCOF is notified of the sub process execution completion. In some implementations the sub process associated agent can notify the RCOF of the sub process execution completion. In other implementations the RCOF can actively poll the agent and or receive a notification message generated by the agent to indicate the execution completion of the sub process. From method proceeds to .

At a determination is made whether to update the calculated optimized resource consumption pattern based upon data received from one or more agents regarding sub process completion. For example if a process completes faster than expected or slower than expected the RCOF may wish to update the calculated optimized resource consumption pattern to ensure efficient process completion. If at it is determined that the calculated optimized resource consumption pattern should not be updated method proceeds to . If at however it is determined that that the calculated optimized resource consumption pattern should be updated method proceeds to where the RCOF updates the calculated optimized resource consumption pattern. In some implementations the process model is also updated to reflect changes to the calculated optimized resource consumption pattern and the PPE re calculates appropriate free and or global buffers. In some implementations the agents are notified of the changes to the calculated optimized resource consumption pattern and processing of sub processes are modified accordingly.

At a determination is made whether execution of all sub processes is complete. If at it is determined that execution of all sub process is not complete method proceeds to . If at however it is determined that execution of all sub process is not complete method proceeds to .

At post processing is executing. Post processing may include updating the resource consumption optimizer framework the process model and the free buffer and or global buffers. Post processing may also include generating a log and or notifying one or more users by electronic communication for example by an email message and or text message. In some implementations post processing can also include notification to another process sub process. Other post processing methods consistent with this disclosure will be apparent to those of skill in the art. After method stops.

While the subject of this disclosure focuses on parallel processing one of ordinary skill with recognize other processing methods are equally applicable to the computer implemented methods computer program products and systems described herein. Therefore this disclosure should not be read as limiting in any way the scope to only parallel processing but as also encompassing any other suitable processing technique.

Implementations of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry in tangibly embodied computer software or firmware in computer hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on a tangible non transitory computer storage medium for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage medium can be a machine readable storage device a machine readable storage substrate a random or serial access memory device or a combination of one or more of them.

The term data processing apparatus refers to data processing hardware and encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can also be or further include special purpose logic circuitry e.g. a central processing unit CPU a FPGA field programmable gate array or an ASIC application specific integrated circuit . In some implementations the data processing apparatus and or special purpose logic circuitry may be hardware based and or software based. The apparatus can optionally include code that creates an execution environment for computer programs e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them. The present disclosure contemplates the use of data processing apparatuses with or without conventional operating systems for example LINUX UNIX WINDOWS MAC OS ANDROID IOS or any other suitable conventional operating system.

A computer program which may also be referred to or described as a program software a software application a module a software module a script or code can be written in any form of programming language including compiled or interpreted languages or declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network. While portions of the programs illustrated in the various figures are shown as individual modules that implement the various features and functionality through various objects methods or other processes the programs may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. a CPU a FPGA or an ASIC.

Computers suitable for the execution of a computer program include by way of example can be based on general or special purpose microprocessors or both or any other kind of CPU. Generally a CPU will receive instructions and data from a read only memory ROM or a random access memory RAM or both. The essential elements of a computer are a CPU for performing or executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a global positioning system GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few.

Computer readable media transitory or non transitory as appropriate suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM DVD R DVD RAM and DVD ROM disks. The memory may store various objects or data including caches classes frameworks applications backup data jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto. Additionally the memory may include any other appropriate data such as logs policies security or access data reporting files as well as others. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user implementations of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube LCD liquid crystal display or plasma monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse trackball or trackpad by which the user can provide input to the computer. Input may also be provided to the computer using a touchscreen such as a tablet computer surface with pressure sensitivity a multi touch screen using capacitive or electric sensing or other type of touchscreen. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

The term graphical user interface or GUI may be used in the singular or the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Therefore a GUI may represent any graphical user interface including but not limited to a web browser a touch screen or a command line interface CLI that processes information and efficiently presents the information results to the user. In general a GUI may include a plurality of user interface UI elements some or all associated with a web browser such as interactive fields pull down lists and buttons operable by the business suite user. These and other UI elements may be related to or represent the functions of the web browser.

Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of wireline and or wireless digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN a radio access network RAN a metropolitan area network MAN a wide area network WAN Worldwide Interoperability for Microwave Access WIMAX a wireless local area network WLAN using for example 802.11a b g n and or 802.20 all or a portion of the Internet and or any other communication system or systems at one or more locations. The network may communicate with for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and or other suitable information between network addresses.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any invention or on the scope of what may be claimed but rather as descriptions of features that may be specific to particular implementations of particular inventions. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable sub combination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a sub combination or variation of a sub combination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system modules and components in the implementations described above should not be understood as requiring such separation in all implementations and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Particular implementations of the subject matter have been described. Other implementations alterations and permutations of the described implementations are within the scope of the following claims as will be apparent to those skilled in the art. For example the actions recited in the claims can be performed in a different order and still achieve desirable results.

Accordingly the above description of example implementations does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

