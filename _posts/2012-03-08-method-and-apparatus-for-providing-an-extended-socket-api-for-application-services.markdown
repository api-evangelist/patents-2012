---

title: Method and apparatus for providing an extended socket API for application services
abstract: Methods and apparatus for providing an extended socket API are disclosed. A method for providing a socket API according to an implementation of the invention may include: receiving data at a first network socket; opening a second network socket; associating the first network socket and the second network socket using a socket file descriptor of a client-side connection; and directing the data from the first network socket to the second network socket. When an application service utilizes the socket API, the method may further include processing the data, i.e., performing a service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856353&OS=08856353&RS=08856353
owner: Cisco Technology, Inc.
number: 08856353
owner_city: San Jose
owner_country: US
publication_date: 20120308
---
Integration of application services into a network can be a difficult and costly undertaking which is especially the case when the network devices are provided by different vendors. For example an application control module may provide a high performance network stack capable of terminating millions of TCP flows as well as handling UDP and raw IP traffic. The Application Control Engine ACE module of CISCO SYSTEMS INC. San Jose Calif. is one example application control module. However the ACE module does not have a standard socket API for interacting with application services that operate on network data streams.

When an application service processes a packet the service accepts data from an inbound connection processes the data i.e. performs a service and forwards the data to an outbound connection. Existing socket APIs do not allow association between the inbound and outbound connections. There are however situations where association between the inbound and outbound connections may be desirable such as when providing server load balancing service SLB functions or providing L7 service functions and particularly when the L7 service functions are chained .

For example an SLB service may be run on top of an existing application control module such as the ACE module discussed above using the standard socket API. The standard socket API functions by terminating a connection from the client machine to a virtual IP VIP address of a server running the application control module and opening a new connection from a host IP address of the server running the application control module other than the VIP to a destination server. The load balancing service then acts as a man in the middle by accepting data from the client machine processing the data i.e. performing an algorithm to select the best server to satisfy the client needs and forwarding the data to the selected destination server. Using the standard socket API two distinct connections exist and the relationship between the connections is not maintained by the SLB service. In other words the client communicates with the server running the application control module and the server running the application control module communicates with the selected destination server.

Similarly an L7 service may be run on top of an existing application control module using the standard socket API. When L7 services are chained however the input and output connections must be associated by the L7 services to ensure reliability of packet delivery and packet order. This may not be possible using the standard socket API because there may not be a one to one relationship between the packets sent to each L7 service and the packets received by each L7 service and each L7 service is free to open additional connections that are unrelated to a particular packet.

Methods and apparatus for providing an extended socket API are disclosed herein. The extended socket API may be used when providing application services such as SLB or L7 service functions for example. A method for providing a socket API according to an implementation of the invention may include receiving data at a first network socket opening a second network socket associating the first network socket and the second network socket using a socket file descriptor of a client side connection and directing the data from the first network socket to the second network socket.

Optionally the method may include expressly identifying the socket file descriptor of the client side connection when opening the second network socket.

In one implementation the socket file descriptor of the client side connection may include an IP address and a source port of a client device.

Additionally the method may include closing at least one of the first network socket and the second network socket.

A method for providing application services according to another implementation of the invention may include receiving data at a first network socket opening a second network socket associating the first network socket and the second network socket using a socket file descriptor of a client side connection directing the data from the first network socket to the second network socket and processing the data.

Optionally the method may include expressly identifying the socket file descriptor of the client side connection when opening the second network socket. The socket file descriptor of the client side connection may include an IP address and a source port of a client device.

Additionally the method may include closing at least one of the first network socket and the second network socket.

In another implementation the method may include unproxying the first network socket and the second network socket. In addition a portion of the data may be directed from the first network socket to the second network socket without being processed while the first network socket and the second network socket are unproxied.

Alternatively or additionally the first network socket and the second network socket may be unproxied until a predetermined amount of data is directed between the first network socket and the second network socket.

In other implementations the method may include proxying the first network socket and the second network socket after unproxying the first network socket and the second network socket. Further the data directed from the first network socket to the second network socket may be processed when the first network socket and the second network socket are proxied.

Additionally processing the data may include providing a service function such as a server load balancing function for example.

In yet another implementation the method may include transmitting the data through the second network socket and providing a second service function. In this implementation the second service function may provide a different type of service than the service function. For example the service function and the second service function may provide L7 services.

A non transient computer readable storage medium according to yet another implementation of the invention may include computer executable instructions stored thereon that cause a computing device to receive data at a first network socket open a second network socket associate the first network socket and the second network socket using a socket file descriptor of a client side connection direct the data from the first network socket to the second network socket and process the data.

Optionally the first network socket and the second network socket may be associated by expressly identifying the socket file descriptor of the client side connection when opening the second network socket.

In one implementation the socket file descriptor of the client side connection may include an IP address and a source port of a client device.

Alternatively or additionally the non transient computer readable storage medium may include further computer executable instructions that cause the computing device to unproxy the first network socket and the second network socket. A portion of the data may be directed from the first network socket to the second network socket without being processed while the first network socket and the second network socket are unproxied.

Other systems methods features and or advantages will be or may become apparent to one with skill in the art upon examination of the following drawings and detailed description. It is intended that all such additional systems methods features and or advantages be included within this description and be protected by the accompanying claims.

Unless defined otherwise all technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art. Methods and materials similar or equivalent to those described herein can be used in the practice or testing of the present disclosure. While implementations will be described for providing an extended socket API for use with SLB and L7 service functions it will become evident to those skilled in the art that the implementations are not limited thereto but are applicable for providing an extended socket API for use with any type of application service.

Referring to a system for providing an application service in a network environment is illustrated. The system includes a client device such as a desktop or laptop computer a handheld mobile device a tablet etc. connected to a network . The network may be a wide area network WAN i.e. the Internet for example. Optionally the client device may be connected to the network through a local area network LAN . The client device may be provided with client applications for providing user interaction with the client device and or other devices connected to the network . For example the client applications may be performed by executing executable commands that are stored in system memory of the client device with a processing unit .

The system the may also include an application server connected to the network . The application server is connected to the network through LAN . The LAN is an internal network of a public or private institution such as a business a university or a government department. However in some implementations the application server may be directly connected to the network . The application server may be provided with application programs . The application programs may provide various services to the client device . The application programs may be performed by executing executable commands that are stored in the system memory of the application server with a processing unit .

For example one of the application programs may provide a SLB function. SLB is the process of deciding to which server S S. . . S of a server farm the application server should send a client request for service. Although there are three servers shown in the server farm may include any number of servers. The client device may send a request for a webpage or to download a file and the application server may select which of the servers S S. . . Sis best suited to fulfill the client request in the shortest amount of time without overloading the selected server and or the server farm . The application server may provide the SLB function with a number of SLB algorithms to predict which server S S. . . Sis best suited to service the client request. The SLB algorithms may include but are not limited to a round robin algorithm a least connection algorithm based on a number of current connections a hash address algorithm based on the source and or destination IP address a hash cookie algorithm based on a cookie name a hash header algorithm based on the HTTP header name or a hash URL algorithm based on the requested URL. In addition to providing an SLB function the application programs may provide L7 service functions which are discussed below with regard to as well as any other service function.

The connections shown in to the network may be any type of wire optical fiber or wireless connection for example Wi Fi IEEE 802.11x WiMax IEEE 802.16 Ethernet 3G 4G etc. In addition the client device the application server and the servers S S. . . Smay be implemented using the hardware shown in the general computing device of .

Referring to the logical connections formed while providing an application service using an extended socket API are shown. Similarly to the standard socket API A shown in the extended socket API B also allows the application program to control and use network sockets. In fact the extended socket API B shares all of the existing capabilities of the standard socket API A. However the extended socket API B may be provided with additional functionality. For example the extended socket API B may associate the inbound socket and the outbound socket . When the extended socket API B establishes a new connection i.e. by opening the outbound socket the extended socket API B may express the relationship to the inbound socket in order to associate the inbound and outbound sockets and . In some implementations the call that creates the outbound socket may expressly identify the inbound socket with the socket file descriptor of the client side connection which contains the source IP address and the source port for example. By associating the inbound socket and the outbound socket all of the data sent or received on either socket will be associated with the other flow by the transport layer. Thus source network address translation NAT is unnecessary when the inbound socket and the outbound socket are associated.

Once the extended socket API B associates the inbound and outbound sockets and additional functionality may be provided. For example the associated inbound and outbound sockets and may be suspended or unproxied. This may be advantageous when the application program no longer needs to perform a service i.e. process the data but the connection between the client device and the destination server should remain intact. For example the destination server may be streaming data to the client device. In this case the application program may not need to process the streamed data and in order to minimize processing load the data may be passed from the inbound socket to the outbound socket without the service being performed by the application program . This may free system resources for other uses.

In some implementations the inbound socket and the outbound socket may be unproxied until a predetermined amount of data passes through the connection. Optionally the predetermined amount of data may be specified in an unproxy until function call. Then after the predetermined amount of data passes through the connection the application program may again begin to process the data. Further after the connection has been unproxied the associated inbound socket or outbound socket may be found and proxied at any time using a get function call for example. Additionally any existing unconnected sockets i.e. unconnected inbound and outbound sockets may be linked to create a connection and any connected sockets may be unlinked to terminate a connection using an associate or disassociate function call respectively.

In the implementations discussed above the application program may be responsible for closing both the inbound and outbound sockets and . Optionally the application may be free to close one socket i.e. the inbound socket or client side connection for example and hold on to the other socket i.e. the outbound socket or server side connection for example . In this case the other socket i.e. the outbound socket or server side connection may be parked for reuse at a later time. As discussed above the client server connection may be reestablished using the associate function call if both the client side connection and the server side connection are unused . When the connection is unproxied however both the inbound socket and the outbound socket may be closed by default if either side closes the connection.

Example calls for an extended socket API according to the implementation of the invention are shown below 

A chain of L7 services may be utilized such that a service is performed on a data stream and the data stream is then directed to the next hop in the chain. Chained application services are shown as service programs A B and N in . Although shows three application services in a chain any number of services may be chained together. In a first service program A may receive a data stream from a source port of a client device at an inbound socket . The first service program A may provide a decompression service for example. Because the extended socket API A associates the inbound and outbound sockets and the first service program A may perform a table look up to determine the next hop in the chain i.e. a second service program B to which the data stream must be directed. The second service program B may provide an SLB service for example. After the first service program A processes the data stream i.e. performs decompression for example the processed data stream may then be directed to the second service program B via an inbound socket. The extended socket API B associates an outbound socket with the inbound socket and the second service program B may perform a table look up to determine the next top in the chain i.e. a third service program N . The third service program may provide any service in addition to the services previously provided. After the second service program B process the data stream the processed data stream may then be directed to the third service program N via an inbound socket. Assuming the third service program N is the final service program in the chain and because an outbound socket is associated with the inbound socket by the extended socket API N the processed data stream may be directed to a destination port of a destination server .

When application services are chained on a single device a large burden is placed on the processing power of the device. Thus clustering or distributing the processing load to a plurality of devices may be used to distribute the load among the plurality of available devices. Accordingly the service programs i.e. A B and N may each be executed by a different one of the plurality of devices. Alternatively or additionally one or more of the service programs may be executed by on one of the plurality of devices. The extended socket API discussed above may facilitate clustering of application services on a plurality of devices by associating inbound and outbound sockets which ensures that the hop by hop information will be kept in the transport layer and forwarded on to the next service in the chain of application services.

Referring to a flow diagram of example operations performed within the system of is shown. At a data stream may be received by the extended socket API at an inbound socket. Next at the extended socket API may establish a new connection by opening an outbound socket. When opening the outbound socket the extended socket API may express the relationship between the inbound and outbound sockets in order to associate the inbound and outbound sockets at . For example the extended socket API may expressly identify the inbound socket within the function call opening the outbound socket. At a determination is made as to whether the connection should be unproxied. If the connection is to remain proxied a service may be performed on the data stream at before the data stream is sent through the outbound socket at . On the other hand if the connection is to be unproxied the data stream may be sent through the outbound socket at without processing at . As discussed above the ability to unproxy the connection may be advantageous when the connection between a client device and a destination server should remain intact but a service does not need to be performed on the data stream. At a determination is made as to whether the connection should be closed. If YES either or both of the inbound and outbound sockets may be closed. If NO the inbound and outbound sockets remain associated and the data stream continues to flow through the connection.

Referring to a block diagram of an example computing device is illustrated. The client devices and or servers discussed above may be computing devices such as computing device shown in . In its most basic configuration computing device typically includes at least one processing unit and memory . Depending on the exact configuration and type of computing device memory may be volatile such as random access memory RAM non volatile such as read only memory ROM flash memory etc. or some combination of the two. This most basic configuration is illustrated in by dashed line . The processing unit may be a standard programmable processor that performs arithmetic and logic operations necessary for operation of the computing device .

The processing unit may be configured to execute program code encoded in tangible computer readable media. For example the processing unit may execute program code stored in the system memory .

Computing device may have additional features functionality. For example computing device may include additional storage such as removable storage and non removable storage including but not limited to magnetic or optical disks or tapes. Computing device may also contain network connection s that allow the device to communicate with other devices. Computing device may also have input device s such as a keyboard mouse touch screen etc. Output device s such as a display speakers printer etc. may also be included. All these devices are well known in the art and need not be discussed at length here.

Computing device typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by device and includes both volatile and non volatile media removable and non removable media. Computer storage media include volatile and non volatile and removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Computer storage media include but are not limited to RAM ROM electrically erasable program read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of computing device .

It should be understood that the various techniques described herein may be implemented in connection with hardware firmware or software or where appropriate with a combination thereof. Thus the methods and apparatuses of the presently disclosed subject matter or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computing device the machine becomes an apparatus for practicing the presently disclosed subject matter. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs may implement or utilize the processes described in connection with the presently disclosed subject matter e.g. through the use of an application programming interface API reusable controls or the like. Such programs may be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and it may be combined with hardware implementations.

The extended socket API according to the implementations discussed above associates the inbound and outbound connections which may provide a number of advantages. First the extended socket API allows for relatively easy integration of socket based application services especially for man in the middle services such as SLB and NAT services. In addition the extended socket API allows preservation of the original source IP address and source port of the client side connection when opening an outbound connection. This may be desirable when identification information of the client device should be preserved by the server i.e. for logging or security reasons. Next the extended socket API may allow temporary suspension of a connection when a service does not need to be performed on the data stream which reduces processing load. The extended socket API also supports large numbers of concurrent connections.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

