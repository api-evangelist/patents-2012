---

title: Method and system for handling object boundaries of a data stream to optimize deduplication
abstract: Techniques for deduplicating a data stream based on boundary markers embedded therein are described. According to one embodiment, a data stream is received from a client having a sequence of a plurality of data objects, where to data stream represents a file or a directory of one or more files of a file system associated with the client. In response, the data stream is deduplicated into a plurality of deduplicated chunks in view of boundaries of the data objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09087086&OS=09087086&RS=09087086
owner: EMC Corporation
number: 09087086
owner_city: Hopkinton
owner_country: US
publication_date: 20121218
---
This application is related to co pending U.S. patent application Ser. No. 13 718 824 entitled Method and System for Handling Checksum of a Data Stream to Optimize Deduplication filed Dec. 18 2012.

Embodiments of the present invention relate generally to data storage systems. More particularly embodiments of the invention relate to handling object boundaries of a data stream to optimize data for better deduplication.

Data storage utilization is continually increasing causing the proliferation of storage systems in data centers. In order to reduce storage space of a storage system deduplication techniques are utilized where data objects or files are segmented in chunks and only the deduplicated chunks are stored in the storage system.

At the time of data recovery by clients there is a need to validate data integrity as data are read back from a storage system e.g. backup storage system . Some data would include integrity verification data such as checksum data inside the data stream for data integrity verification during the restoration. However such integrity verification data may cause seriously degraded deduplication of the actual data stream at the storage system. Such data integrity check should survive backup data migration among different tiers of storage while its operation efficiency should be guaranteed with random data access and deduplication effectiveness at the storage systems preserved.

In addition a data stream such as a backup data stream typically consists of a sequence of data objects or files. Typically storage systems are unaware of individual file boundaries that can be used as heuristics for segmentation thus segmentation boundaries tend to randomize across file boundaries. As a result such a configuration would affect performance and or deduplication effectiveness because a file is often represented and accessed as a whole unit during backup and synthetic operations.

Various embodiments and aspects of the inventions will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

According to some embodiments storage software e.g. backup software is equipped with knowledge about the structure and nature of the data being stored. Such application specific knowledge can provide important heuristics for backend storage processing such as deduplication processing. In one embodiment special markers are embedded into a data stream e.g. backup data stream to transfer such data specific knowledge to backend storage systems to be recognized by the storage systems. As a result certain optimization processes can be performed during storage processes such as deduplication processes while maintaining desired functionality for the clients.

In one embodiment checksum markers are embedded in a data stream that includes multiple data regions. Each checksum marker is associated with each of the data regions and each checksum marker includes or identifies a checksum within the data stream for verifying the integrity of the corresponding data region. The checksum markers may be inserted into the data stream by a client e.g. backup software client interleaving with the corresponding data regions. The data stream is then transmitted to a remote storage system e.g. backend storage system such as a backup storage system for storage. The checksum markers may be utilized for verifying the integrity of the data regions subsequently when the data stream is restored from the remote storage system. When the storage system receives the data stream having checksum markers therein the storage system parses the data stream to recognize or identify the checksum markers and to remove the checksum markers from the data stream. The data stream having the checksum markers removed is then deduplicated to generate deduplicated chunks also referred to as deduplicated segments . The deduplicated chunks are then stored in the storage system. In addition the checksum markers are separately stored which may be used to reconstruct the data stream subsequently during the restoration. As a result the checksums of the data regions within the data stream would not significantly affect the deduplication efficiency.

According to another embodiment another type of markers is utilized to identify boundaries of data objects within the data stream. When the storage system is to perform a deduplication process the storage system can segment the data stream into segments using a chunking algorithm. When segmenting the data stream the storage system can recognize the boundary markers and take the data object boundaries into the consideration in deciding where to anchor the data stream. As a result a better deduplication and data access efficiency can be achieved. Both the checksum markers and boundary markers can be utilized individually or in combination within a data stream.

Storage system may represent any type of server or cluster of servers. For example storage system may be a storage server used for any of various different purposes such as to provide users with access to shared data and or to back up data such as mission critical data. In one embodiment storage system includes but is not limited to backup engine deduplication storage engine and one or more storage units communicatively coupled to each other. Storage units may be implemented locally e.g. single node operating environment or remotely e.g. multi node operating environment via interconnect which may be a bus and or a network. Backup engine is configured to back up data of clients and to store the backup files in storage units .

In response to a data file for example received from backup engine to be stored in storage units according to one embodiment deduplication storage engine is configured to segment the data file into multiple chunks also referred to as segments according to a variety of segmentation policies or rules. For example a file may be broken into chunks by identifying chunk boundaries using a content based technique. In one particular embodiment a function is calculated at various locations of a file when the function is equal to a value or when the value is a minimum a maximum or other value relative to other function values calculated for the file. Alternatively a file may be segmented into chunks by identifying chunk boundaries using a non content based technique e.g. based on size of the chunk . In one embodiment a chunk is restricted to a minimum and or maximum length to a minimum or maximum number of chunks per file or any other appropriate limitation. Deduplication storage engine may choose not to store a chunk in a storage unit if the chunk has been previously stored in storage units . In the event that deduplication storage engine chooses not to store the chunk in storage units it stores metadata associated with the chunk to enable the reconstruction of the file using the previously stored chunk. As a result chunks of data files are stored in a deduplicated manner either within each of storage units or across at least some of storage units . The metadata such as metadata may be stored in at least some of storage units such that files can be accessed independent of another storage unit. Metadata of each storage unit includes enough information to provide access to the files it contains.

According to one embodiment backup engine includes a marker processing unit to process markers of a backup stream received from clients . In one embodiment marker processing unit is to recognize the markers marking certain data such as checksum data or data object boundaries within the backup stream. Once the markers have been recognized the associated data is identified based on the markers. For example the size or a boundary of checksum data or a data region may be determined based on the markers. The markers and or associated data e.g. the actual checksum data may be extracted or removed from the data stream. The remaining data stream without the markers and or the associated data may be deduplicated by deduplication storage engine into deduplicated data chunks in view of the information provided by the markers. The deduplicated data chunks are then stored in any of storage units as part of data objects . The markers and or the associated data may also be separately stored in storage units . In one embodiment the markers and or associated data may be inserted into the backup stream at the client prior to transmitting the backup stream to storage system .

For example a backup stream may be generated by backup client software of client in response to a request for backing up data stored in client . The backup stream may represent a file or a directory of one or more files or subdirectories dependent upon the specific backup policy or schedule. In addition when generating the data stream backup client software is to insert markers and or associated checksum data into the data stream prior to transmitting the data stream to storage system where the markers will be recognized by marker processing unit to perform additional processes based on the information provided by the markers.

In one embodiment a data stream includes multiple data regions e.g. fixed size regions . When a data stream is being formed client software is to generate a checksum for each data region and insert a checksum marker also referred to as a marker header in front of each checksum data block to identify the corresponding checksum data block. According to one embodiment a marker header includes a predetermined pattern signature and a length identifying a size of the marker data block following the marker header as shown in . According to another embodiment client software may also identify the boundaries of the data regions and insert boundary markers into the data stream during the construction of the data stream. Note that although not shown the architecture of clients may be identical or similar. Client may also include backup client software and its corresponding marking unit running therein.

When the backup stream is received by backup engine from backup client software marker processing unit of backup engine is to scan the backup stream to recognize the markers inserted by client software to identify the corresponding marker. During the construction of a backup stream the backup stream may be partitioned into multiple data regions by client software . A checksum is generated for each region and a checksum marker is inserted into the backup stream to be associated with the corresponding data region for the purpose of verifying integrity of the corresponding data region. In addition client software further inserts a checksum marker to identify the checksum for each data region.

The checksum markers may be utilized for verifying the integrity of the data regions subsequently when the data stream is restored from the remote storage system. When the storage system receives the data stream having checksum markers therein marker processing unit parses the data stream to recognize or identify the checksum markers and to remove the checksum markers and or the associated checksum data from the data stream. The data stream having the checksum markers removed is then deduplicated by deduplication storage engine to generate deduplicated chunks also referred to as deduplicated segments . The deduplicated chunks are then stored in storage units of storage system . In addition the checksum markers are separately stored which may be used to reconstruct the data stream subsequently during the restoration. As a result the checksums of the data regions within the data stream would not significantly affect the deduplication efficiency.

According to another embodiment another type of marker is utilized to identify boundaries of data objects within the data stream. When deduplication storage engine is to perform a deduplication process deduplication storage engine can segment the data stream into segments using a chunking algorithm. When segmenting the data stream deduplication storage engine can recognize the boundary markers and take the data object boundaries into the consideration in deciding where to anchor the data stream for the purpose of segmenting the data stream into deduplicated chunks. As a result a better deduplication and data access efficiency can be achieved. Both the checksum markers and boundary markers can be utilized individually or in combination within a data stream.

Note that marker processing unit may be implemented as a standalone processing unit communicatively coupled to backup engine and or deduplication storage engine . In this example storage system operates as a backup server. In another configuration storage system may operate as a non backup system such as for example a regular file server. When storage system operates as a regular storage system marker processing unit can be coupled to an interface such as a file system interface a Web interface an application programming interface API etc. to receive a file or files from clients to be stored in storage units . Other configurations may also exist.

According to one embodiment a checksum marker in this example checksum marker includes a checksum pattern and a length . Checksum pattern includes a predetermined pattern that can be used to identify checksum data . Length specifies the size of checksum data . As a result when the marker processing unit scans data stream it can recognize checksum marker based on its checksum pattern and determine the size of checksum data based on length . Checksum marker can be implemented in a variety of data structures.

A checksum or hash sum is a fixed size datum computed from an arbitrary block of digital data for the purpose of detecting accidental errors that may have been introduced during its transmission or storage. The integrity of the data can be checked at any later time by recomputing the checksum and comparing it with the stored one. If the checksums match the data was likely not accidentally altered. The procedure that yields the checksum from the data is called a checksum function or checksum algorithm. A good checksum algorithm will yield a different result with high probability when the data is accidentally corrupted if the checksums match the data has the same high probability of being free of accidental errors.

As described above a backup data stream typically consists of a sequence of data objects such as files. Without properly marking data object boundaries within the large backup data stream a storage system will not be aware of individual data object boundaries that can be used as heuristics for segmentation. The segmentation boundaries tend to randomize across file boundaries which would reduce read performance and virtual synthetic operation efficiency because a backup file is often represented and accessed as a whole unit during backup and synthetic operations.

According to another embodiment markers as shown in can also be used as boundary markers that identify boundaries of data objects within a data stream. The data stream can be deduplicated in view of the boundaries of the data objects for a better deduplication efficiency. In one embodiment boundary markers are inserted at natural data object boundaries into backup data stream at backup clients which can be recognized by a storage system to improve performance and efficiency. Armed with such knowledge on data object layout boundaries the storage system can produce internal segmentation boundaries that align with natural file boundaries

In one embodiment such an anchoring algorithm may be a type 9 anchoring algorithm. A type 9 anchoring algorithm produces segments in sizes between a minimum of 4 kilobytes KB and a maximum of 12 KB with an average size of around 8 KB. It computes a rolling 32 bit exclusive OR XOR checksum up to 12 KB in data stream and selects the byte beyond 4 KB as an anchoring point where it produces a maximum checksum value.

In this example without aware of data object boundaries the anchoring algorithm produces anchoring points . As shown in the chunk anchored by anchoring points and includes content of both data objects . Similarly the chunks anchored between anchoring points between anchoring points and between anchoring points also include content of multiple data objects. As described above content of chunks associated with the same data object tends to be accessed as a whole. If a chunk includes content of multiple data objects the efficiency of accessing the chunks associated with a particular data object will be significantly impacted.

With embedded boundary markers as shown in data stream the position of data object boundaries can be determined within data stream . As a result when an anchoring point is determined using an existing anchoring algorithm such as type 9 anchoring algorithm the boundary markers can be used to calculate a distance between the closest natural data object boundaries identified through boundary markers from the anchoring points. According to one embodiment if such a distance is within a pre defined threshold value one of closest natural data object boundaries that best match other existing segmentation policies is chosen as an actual anchoring point for segmentation. The segmentation process proceeds with the rest of backup data stream starting from the newly established anchoring point. Referring to with some of anchor points such as anchor points and are selected to be aligned with data object boundaries identified by boundary markers respectively. As a result no chunk contains the content of multiple data objects or a number of chunks that contain content of multiple data objects can be reduced.

As segments e.g. segment are being generated through the segmentation process they are being filtered for duplicate removal then compressed and packed into containers for storage in compression unit called compression region or CR e.g. compression region . Such containers e.g. container are appended to a container log and each compression region contains a number of segments. In addition to alignment of anchoring points with natural data object boundaries during segmentation process after segments have been filtered for removal of duplicates segments belonging to a same file are to be packed into a single compression region and a single container for storage if there is no size constraint and other system policies permit. With such container packing optimization many relatively small data can be retrieved with much higher probability that loading data only from a single container or a single compression region from a single container is sufficient thus read performance can be improved.

In one embodiment storage system includes a deduplication engine interfacing one or more clients with one or more storage units storing metadata and data objects . Clients may be any kinds of clients such as a client application or backup software located locally or remotely over a network. A network may be any type of networks such as a local area network LAN a wide area network WAN such as the Internet a corporate intranet a metropolitan area network MAN a storage area network SAN a bus or a combination thereof wired and or wireless.

Storage units may be implemented locally e.g. single node operating environment or remotely e.g. multi node operating environment via an interconnect which may be a bus and or a network. In one embodiment one of storage units operates as an active storage to receive and store external or fresh user data while the another one of storage units operates as a target storage unit to periodically archive data from the active storage unit according to an archiving policy or scheme. Storage units may be for example conventional magnetic disks optical disks such as CD ROM or DVD based storage magnetic tape storage magneto optical MO storage media solid state disks flash memory based devices or any other type of non volatile storage devices suitable for storing large volumes of data. Storage units may also be combinations of such devices. In the case of disk storage media the storage units may be organized into one or more volumes of Redundant Array of Inexpensive Disks RAID . Data stored in the storage units may be stored in a compressed form e.g. lossless compression Huffman coding Lempel Ziv Welch coding delta encoding a reference to a chunk plus a difference etc. . In one embodiment different storage units may use different compression methods e.g. main or active storage unit from other storage units one storage unit from another storage unit etc. .

The metadata such as metadata may be stored in at least some of storage units such that files can be accessed independent of another storage unit. Metadata of each storage unit includes enough information to provide access to the files it contains. In one embodiment metadata may include fingerprints contained within data objects where a data object may represent a data chunk a CR of data chunks or a container of one or more CRs. Fingerprints are mapped to a particular data object via metadata enabling the system to identify the location of the data object containing a chunk represented by a particular fingerprint. When an active storage unit fails metadata contained in another storage unit may be utilized to recover the active storage unit. When one storage unit is unavailable e.g. the storage unit has failed or is being upgraded etc. the system remains up to provide access to any file not stored in the failed storage unit. When a file is deleted the metadata associated with the files in the system is updated to reflect that the file has been deleted.

In one embodiment the metadata information includes a file name a storage unit where the chunks associated with the file name are stored reconstruction information for the file using the chunks and any other appropriate metadata information. In one embodiment a copy of the metadata is stored on a storage unit for files stored on a storage unit so that files that are stored on the storage unit can be accessed using only the information stored on the storage unit. In one embodiment a main set of metadata information can be reconstructed by using information of other storage units associated with the storage system in the event that the main metadata is lost corrupted damaged etc. Metadata for a storage unit can be reconstructed using metadata information stored on a main storage unit or other storage unit e.g. replica storage unit . Metadata information further includes index information e.g. location information for chunks in storage units identifying specific data objects .

In one embodiment deduplication storage engine includes file service interface segmenter duplicate eliminator file system control and storage unit interface . Deduplication storage engine receives a file or files or data item s via file service interface which may be part of a file system namespace of a file system associated with the deduplication storage engine . The file system namespace refers to the way files are identified and organized in the system. An example is to organize the files hierarchically into directories or folders. File service interface supports a variety of protocols including a network file system NFS a common Internet file system CIFS and a virtual tape library interface VTL etc.

The file s is are processed by segmenter and file system control . Segmenter breaks the file s into variable length chunks based on a variety of rules or considerations. For example the file s may be broken into chunks by identifying chunk boundaries using a content based technique e.g. a function is calculated at various locations of a file when the function is equal to a value or when the value is a minimum a maximum or other value relative to other function values calculated for the file a non content based technique e.g. based on size of the chunk or any other appropriate technique. In one embodiment a chunk is restricted to a minimum and or maximum length to a minimum or maximum number of chunks per file or any other appropriate limitation.

In one embodiment file system control processes information to indicate the chunk s association with a file. In some embodiments a list of fingerprints is used to indicate chunk s associated with a file. File system control passes chunk association information e.g. representative data such as a fingerprint to an index not shown . The index is used to locate stored chunks in storage units via storage unit interface . Duplicate eliminator identifies whether a newly received chunk has already been stored in storage units . In the event that a chunk has already been stored in storage unit s a reference to the previously stored chunk is stored for example in a chunk tree associated with the file instead of storing the newly received chunk. A chunk tree of a file may include one or more nodes and each node represents or references one of the deduplicated chunks stored in storage units that make up the file. Chunks are then packed by a container manager not shown into one or more storage containers stored in storage units . The deduplicated chunks may be further compressed using a variation of compression algorithms such as a Lempel Ziv algorithm before being stored.

When a file is to be retrieved file service interface is configured to communicate with file system control to identify appropriate chunks stored in storage units via storage unit interface . Storage unit interface may be implemented as part of a container manager. File system control communicates with an index not shown to locate appropriate chunks stored in storage units via storage unit interface . Appropriate chunks are retrieved from the associated containers via the container manager and are used to construct the requested file. The file is provided via interface in response to the request. In one embodiment file system control utilizes a tree e.g. a chunk tree of content based identifiers e.g. fingerprints to associate a file with data chunks and their locations in storage unit s . In the event that a chunk associated with a given file or file changes the content based identifiers will change and the changes will ripple from the bottom to the top of the tree associated with the file efficiently since the appropriate content based identifiers are easily identified using the tree structure. Note that some or all of the components as shown as part of deduplication engine may be implemented in software hardware or a combination thereof. For example deduplication engine may be implemented in a form of executable instructions that can be stored in a machine readable storage medium where the instructions can be executed in a memory by a processor.

In one embodiment storage system may be used as a tier of storage in a storage hierarchy that comprises other tiers of storage. One or more tiers of storage in this hierarchy may utilize different kinds of storage devices and or may be optimized for different characteristics such as random update performance. Files are periodically moved among the tiers based on data management policies to achieve a cost effective match to the current storage requirements of the files. For example a file may initially be stored in a tier of storage that offers high performance for reads and writes. As the file ages it may be moved into a tier of storage according to one embodiment of the invention. In various embodiments tiers include different storage technologies e.g. tape hard drives semiconductor based memories optical drives etc. different locations e.g. local computer storage local network storage remote network storage distributed storage cloud storage archive storage vault storage etc. or any other appropriate storage for a tiered data storage system.

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as those set forth in the claims below refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the invention also relate to an apparatus for performing the operations herein. Such a computer program is stored in a non transitory computer readable medium. A machine readable medium includes any mechanism for storing information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices .

The processes or methods depicted in the preceding figures may be performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. software e.g. embodied on a non transitory computer readable medium or a combination of both. Although the processes or methods are described above in terms of some sequential operations it should be appreciated that some of the operations described may be performed in a different order. Moreover some operations may be performed in parallel rather than sequentially.

Embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

