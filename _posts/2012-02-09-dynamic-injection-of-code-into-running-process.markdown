---

title: Dynamic injection of code into running process
abstract: Techniques are described herein that are capable of dynamically injecting code into a running process. For instance, the techniques are capable of causing arbitrary code to be activated in the process while the process is running in response to receipt of a request for dynamic execution of the arbitrary code from outside the process while the process is running.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08539506&OS=08539506&RS=08539506
owner: Microsoft Corporation
number: 08539506
owner_city: Redmond
owner_country: US
publication_date: 20120209
---
A process such as a computer program e.g. a software application or a portion thereof may perform operations with respect to another process. The process that performs the operations is referred to as a requesting process and the process on which the operations are performed is referred to as a targeted process. Traditionally in order for a requesting process to attach to a target process a contributor to a runtime environment in which the targeted process executes provides a targeted set of services for the requesting process or an activation mechanism for instantiating code within the targeted process. For instance the contributor may be an operating system a layered runtime e.g. Common Language Runtime CLR distributed by Microsoft Corporation Java Virtual Machine JVM distributed by Oracle Corporation etc. a host executable e.g. a browser an integrated framework e.g. Windows Presentation Foundation WPF etc. When an activation mechanism instantiates code e.g. an object within the targeted process the code typically is callback code that receives notifications or is called with a reference to a host object that provides access to data and or services. Such an activation mechanism traditionally is provided by consulting machine configuration information such as a registry or an environment variable at start up of the targeted process. The relevant code is then instantiated based on this information and initialized with relevant host provided data.

However techniques for activating code in a targeted process at start up of the targeted process have limitations. For instance if the targeted process is not started with a configuration that references code the targeted process typically is restarted after a configuration that references the code is set. Restarting the targeted process may introduce additional cost and or steps to the user experience of activating the code. Also circumstances that exist while the targeted process is running may be difficult to recreate once the target process is restarted. For example problems such as thread race conditions a slow memory leak that takes days to force an error etc. are relatively serious but potentially difficult to reproduce. In another example alterations of an execution environment implied by re configuring the targeted process may prevent a problem from being reproduced at all.

Providing application programming interface API functionality to code of a requesting process may be relatively costly. For instance production and maintenance of documentation forward compatibility etc. may contribute to the cost of a platform provided API Auxiliary functionality such as tooling functionality of a platform or framework often is regarded as having a relatively lower priority than the central functionality of the platform or framework. Accordingly work that is to be performed for providing the auxiliary functionality may be deferred. For relatively complex platforms or frameworks the expertise for providing core platform services versus the expertise for providing auxiliary services may not overlap. Such issues may limit development and or innovation with regard to the auxiliary services. Code that is not strictly purposed for a platform and or which possibly entails execution of arbitrary code e.g. arbitrary tool code as would be the case for public extension points entails substantial security risk that may be mitigated by careful review and or implementation. Finally an API that is provided by an application or framework may entail servicing and or versioning problems. For instance providers of requesting processes often make adjustments to code thereof in an effort to keep in sync with changes to a platform potentially recompiling and or rewriting the code to account for such changes.

Various approaches are described herein for among other things dynamically injecting code into a running process. For instance the approaches are capable of causing arbitrary code to be activated in the process while the process is running in response to receipt of a request for dynamic execution of the arbitrary code from outside the process while the process is running. The approaches may cause the arbitrary code to be activated in the process in any of a variety of ways including but not limited to causing an operating system OS application programming interface API to look up a location of a code container that includes the arbitrary code from a registry loading the arbitrary code from a code container via a path that is indicated by the message into a shared library at a location that is indicated by the message and calling the shared library to execute the arbitrary code value obtaining the arbitrary code from a code container that is indicated by the message and activating the arbitrary code at an entry point of the process that is specified by the message etc.

A method is described for dynamically injecting code into a running process. According to the method a message is received in a targeted process from a requesting process that is external to the targeted process while the targeted process is running. The message requests dynamic execution of arbitrary code in the targeted process. The message includes a code identifier that identifies the arbitrary code. The arbitrary code is caused to be located and activated in the targeted process while the targeted process is running based on the code identifier to provide activated code.

A system is described that includes an interface module and a causation module. The interface module is configured to receive a message in a targeted process from a requesting process that is external to the targeted process while the targeted process is running. The message requests dynamic execution of arbitrary code in the targeted process. The message includes a code identifier that identifies the arbitrary code. The causation module is configured to cause the arbitrary code to be located and activated in the targeted process while the targeted process is running based on the code identifier to provide activated code.

A computer program product is described that includes a computer readable medium having computer program logic recorded thereon for enabling a processor based system to dynamically inject code into a running process. The computer program product includes a program logic module. The program logic module is for enabling the processor based system to cause arbitrary code to be located and activated in a targeted process while the targeted process is running to provide activated code based on receipt of a message in the targeted process from a requesting process that is external to the targeted process while the targeted process is running. The message requests dynamic execution of the arbitrary code in the targeted process. The message includes a code identifier that identifies the arbitrary code. The code identifier is useable to locate and activate the arbitrary code.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Moreover it is noted that the invention is not limited to the specific embodiments described in the Detailed Description and or other sections of this document. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

The features and advantages of the disclosed technologies will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit s in the corresponding reference number.

The following detailed description refers to the accompanying drawings that illustrate exemplary embodiments of the present invention. However the scope of the present invention is not limited to these embodiments but is instead defined by the appended claims. Thus embodiments beyond those shown in the accompanying drawings such as modified versions of the illustrated embodiments may nevertheless be encompassed by the present invention.

References in the specification to one embodiment an embodiment an example embodiment or the like indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Furthermore when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the relevant art s to implement such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

Example embodiments described herein are capable of dynamically injecting code into a running process. For instance the example embodiments are capable of causing arbitrary code to be activated in the process while the process is running in response to receipt of a request for dynamic execution of the arbitrary code from outside the process while the process is running. The example embodiments may cause the arbitrary code to be activated in the process in any of a variety of ways including but not limited to causing an operating system OS application programming interface API to look up a location of a code container that includes the arbitrary code from a registry to activate the arbitrary code from the code container upon determining the location and to provide a reference to the arbitrary code to a caller that provided the request loading the arbitrary code from a code container via a path that is indicated by the message into a shared library at a location that is indicated by the message and calling the shared library to activate the arbitrary code value obtaining the arbitrary code from a code container that is indicated by the message and activating the arbitrary code at an entry point of the process that is specified by the message etc.

Example techniques described herein have a variety of benefits as compared to conventional techniques for executing code in a process. For instance the example techniques may attach to a running target process on an ad hoc basis in order to bring code of a requesting process to bear against the target process. The example techniques may pass data that qualify instantiation of arbitrary code to enable parameterized activation of the arbitrary code. The instantiation may be qualified in any of a variety of arbitrary ways e.g. by accessing data received from the requesting process . Once the arbitrary code is injected into the running targeted process the arbitrary code may be serviced e.g. updated out of band with respect to the targeted process and or an environment e.g. a programming runtime environment in which the targeted process runs i.e. outside the targeted process and or the aforementioned environment .

The example techniques may reduce cost and or a number of steps to the user experience and or the developer experience of activating the code as compared to conventional techniques for executing code in a process. For example the example techniques need not necessarily provide API functionality to code of the requesting process. In accordance with this example production and maintenance of documentation forward compatibility etc. with regard to such API functionality may not be necessary. In further accordance with this example servicing and or versioning problems associated with such API functionality may be avoided. The arbitrary code that is injected into the running process may provide an API with which the caller that provided the request for dynamic execution of the arbitrary code may communicate. This may provide greater flexibility and or control with respect to the process in which the arbitrary code is injected. In another example no particular configuration is needed at startup of the targeted process. For instance if the targeted process is not started with a configuration that references the code the targeted process need not be restarted with a configuration that references the code. Accordingly circumstances problems that exist while the target process is running need not be recreated. In yet another example a provider of the requesting process need not necessarily make adjustments to code of the requesting process in order to keep in sync with changes to the target process.

As shown in computer system includes a plurality of user systems A M a network and a plurality of servers A N. Communication among user systems A M and servers A N is carried out over network using well known network communication protocols. Network may be a wide area network e.g. the Internet a local area network LAN another type of network or a combination thereof.

User systems A M are processing systems that are capable of communicating with servers A N. An example of a processing system is a system that includes at least one processor that is capable of manipulating data in accordance with a set of instructions. For instance a processing system may be a computer a personal digital assistant etc. User systems A M are configured to provide requests to servers A N for requesting information stored on or otherwise accessible via servers A N. For instance a user may initiate a request for executing a computer program using a client e.g. a Web browser Web crawler or other type of client deployed on a user system that is owned by or otherwise accessible to the user. In accordance with some example embodiments user systems A M are capable of accessing domains Web sites hosted by servers A N so that user systems A M may access information that is available via the domains. Such domain may include Web pages which may be provided as hypertext markup language HTML documents and objects e.g. files that are linked therein for example.

It will be recognized that any one or more user systems A M may communicate with any one or more servers A N. Although user systems A M are depicted as desktop computers in persons skilled in the relevant art s will appreciate that user systems A M may include any client enabled system or device including but not limited to a desktop computer a laptop computer a tablet computer a personal digital assistant a cellular telephone or the like.

Servers A N are processing systems that are capable of communicating with user systems A M. Servers A N are configured to execute computer programs that provide information to users in response to receiving requests from the users. For example the information may include documents e.g. Web pages images video files etc. output of executables or any other suitable type of information. In accordance with some example embodiments servers A N are configured to host respective Web sites so that the Web sites are accessible to users of computer system .

First server A is shown to include a request module and a target module for illustrative purposes. Request module is configured to execute a requesting process e.g. a requesting software program which is external to a targeted process that is executed by target module . The requesting process is capable of generating message s that request dynamic execution of arbitrary code in the targeted process that is executed by target module . One example type of a requesting process is referred to as a tool process. A tool process is a requesting process that is capable of being used to perform diagnostic operations e.g. identifying source of problem debugging profiling controlling etc. with respect to a targeted process. Examples of a tool process include but are not limited to a web development program e.g. Windows Azure Platform Amazon Web Services Google App Engine VMWare Force com etc. and an integrated development environment e.g. Microsoft Visual Studio JDeveloper NetBeans Eclipse Platform etc. .

Target module is configured to execute a targeted process e.g. a targeted software application . Examples of a targeted process include but are not limited to a web browser e.g. Internet Explorer Firefox Google Chronic Safari etc. a game e.g. an online game or a console game etc. In one example embodiment the targeted process runs in a programming runtime environment. For instance the programming runtime environment may be executed by a runtime module that includes target module . A programming runtime environment is a software component that supports execution of computer programs written in designated computer programming language s by translating intermediate language IL instructions into machine instructions. For instance Java Runtime Environment JRE developed and distributed by Sun Microsystems Inc now Oracle America Inc. is an example of a programming runtime environment that supports execution of computer programs written in the Java programming language. Common Language Runtime CLR developed and distributed by Microsoft Corporation is an example of a programming runtime environment that supports execution of computer programs written in a variety of languages. It will be recognized however that the targeted process need not necessarily run in a programming runtime environment.

Target module includes an in process injection module . In process injection module is configured to dynamically inject arbitrary code into the targeted process that is executed by target module to satisfy request s therefor from requesting module . For example in process injection module is capable of causing the arbitrary code to be located and activated in the targeted process while the targeted process is running resulting in activated code. In accordance with this example the arbitrary code is caused to be located and activated in the targeted process based on receipt of message s in the targeted process from the requesting process while the targeted process is running. The message s from the requesting process request dynamic execution of the arbitrary code in the targeted process. In further accordance with this example the message s may include code identifier s that identify the respective arbitrary code and that may be useable to locate and activate the arbitrary code. The message s from the requesting process may be received by the targeted process directly from the requesting process or indirectly from the requesting process. For instance one or more of the message s may be received via one or more intermediate processes and or modules. Such intermediate processes and or modules may forward the message s toward the targeted process upon receipt thereof from the requesting process or from another intermediate process module and or machine. Some example techniques for dynamically injecting code into a running process are discussed in greater detail below with reference to .

In process injection module request module and target module are shown to be incorporated in first server s A for illustrative purposes and are not intended to be limiting. It will be recognized that in process injection module request module and or target module or any portion s thereof may be incorporated in any one or more of the user systems A M. For example client side aspects of in process injection module request module and or target module may be incorporated in one or more of the user systems A M and server side aspects of in process injection module request module and or target module may be incorporated in first server s A. In another example in process injection module request module and or target module may be distributed among the user systems A M in yet another example in process injection module request module and or target module may be incorporated in a single one of the user systems A M. In still another example in process injection module request module and or target module or any portion s thereof may be incorporated in a device that is locally connected via a wired or wireless connection to a user system. For instance target module including in process injection module may be incorporated in a mobile device that is coupled via a communication link to user system A and request module may be incorporated in user system A.

In process injection module may be implemented in various ways to dynamically inject code into a running process including being implemented in hardware software firmware or any combination thereof. For example in process injection module may be implemented as computer program code configured to be executed in one or more processors. In another example in process injection module may be implemented as hardware logic electrical circuitry. In an embodiment in process injection module may be implemented in a system on chip SoC . Each SoC may include an integrated circuit chip that includes one or more of a processor e.g. a microcontroller microprocessor digital signal processor DSP etc. memory one or more communication interfaces and or farther circuits and or embedded firmware to perform its functions.

Following are two example scenarios in which computer system may be used. In the first scenario a customer may be using a requesting process that is executed by request module . The customer may select an attach to running process on networked machine entry in a Debug menu that is provided in the context of the requesting process. Request module may retrieve a list of processes that are running on the networked machine. The user may select a targeted process from the list of processes and press an Attach button for example. Request module may package and send a message to the running targeted process to activate a debugging component in the running targeted process. In process injection module may perform a global registration operation with respect to the debugging component to enable request module to have access e.g. to attach to the debugging component in response to receipt of the message from requesting module .

In the second scenario request module enumerates all processes running on a tablet that is attached to a local computer via a universal serial bus USB cable. In this scenario no tool code has been downloaded to the tablet itself. Request module selects a targeted process running on the tablet and packages an activation message to be sent to the tablet. The activation message includes a code location identifier that specifies a location of a code container. For instance the code location identifier may specify a uniform resource locator URL corresponding to information that is viewable from the tablet. Upon receipt of the activation message in process injection module retrieves the code container from the location specified by the code location identifier and activates arbitrary code that is included in the code container to provide instantiated code. In process injection module provides a pointer to the instantiated code to request module . It is noted that request module may call directly into the instantiated code if the instantiated code is represented as a component object model COM object that supports marshalling. In process injection module may initialize the instantiated code with information regarding the instantiated code that may be useful for its execution environment.

The example scenarios mentioned above are provided for illustrative purposes and are not intended to be limiting. It will be recognized that the example techniques described herein are applicable to any of a variety of scenarios.

As shown in the method of flowchart begins at step . In step a targeted process is identified. In an example implementation identification module identifies the targeted process.

At step a message is generated that includes activation data regarding code. In an example implementation generation module generates the message.

At step the message is sent to the targeted process. In an example implementation provision module sends the message to the targeted process.

At step a response is received that indicates whether the activation is successful. For example an error message may be received if the activation is not successful. In accordance with this example the error message may specify an error that occurred with respect to activation of the code. In another example a success message may be received if the activation is successful. In accordance with this example the success message may indicate that the code is accessible to request module . For instance the success message may include a reference to the code that is useable to call into the code. In an example implementation receipt module receives the response.

In some example embodiments one or more steps and or of flowchart may not be performed. Moreover steps in addition to or in lieu of steps and or may be performed.

It will be recognized that request module may not include one or more of identification module generation module provision module and or receipt module . Furthermore request module may include modules in addition to or in lieu of identification module generation module provision module and or receipt module .

As shown in the method of flowchart begins at step . In step a message is received that includes activation data regarding code. In an example implementation interface module receives the message.

At step a determination is made whether activation is disabled. If activation is disabled the code cannot be activated. If activation is not disabled the code may be activated if appropriate activation operations are performed in accordance with technique s described herein if activation is disabled flow continues to step . Otherwise flow continues to step . In an example implementation activation determination module determines whether activation is disabled. It is noted that in some embodiments activation may be toggled between enabled and disabled by an entity such as a system administrator. In accordance with these embodiments toggling the activation from disabled to enabled may render the code capable of being activated if the appropriate activation operations are performed in accordance with technique s described herein.

At step a failure message is provided. The failure message indicates that activation is disabled. In an example implementation provision module provides the failure message. Upon completion of step flowchart ends.

At step a determination is made whether a configuration state exists. For example the configuration state may be specified by environment variable s that are associated with the code. In accordance with this example if such environment variable s specify the configuration state the configuration state is said to exist. If no such environment variable s exist or such environment variable s do not specify the configuration state the configuration state is said to not exist. If a configuration state exists flow continues to step . Otherwise flow continues to step . In an example implementation state determination module determines whether a configuration state exists.

At step the configuration state is pushed. Pushing the configuration state means persisting the configuration state to be restored at a future time. For instance pushing the configuration state may result in a coding convenience such as enabling reuse of the same code location and or activation mechanism that is provided on startup of the code. In an example implementation state pushing module pushes the configuration state. Upon completion of step flow continues to step .

At step the activation data is unpacked from the message. In an example implementation unpacking module unpacks the activation data from the message.

At step a determination is made whether an identifier that identifies the code is available. If an identifier that identifies the code is available flow continues to step . Otherwise flow continues to step . In an example implementation availability determination module determines whether an identifier that identifies the code is available.

At step a determination is made whether an indicator that indicates a path to the code is available. For example the path may be a network location information regarding a local machine a uniform resource identifier URI to a file that may be downloaded via a network e.g. the Internet etc. In accordance with this example the URI may be a uniform resource locator URL or a uniform resource name URN . If an indicator that indicates a path to the code is available flow continues to step . Otherwise flow continues to step . In an example implementation path determination module determines whether an indicator that indicates a path to the code is available.

At step the code is activated e.g. loaded and or at least partially executed from a location specified by the path. In an example implementation activation module activates the code from the location specified by the path. Upon completion of step flow continues to step .

At step the code is activated based on the identifier that identifies the code. In an example implementation activation module activates the code based on the identifier that identifies the code. Upon completion of step flow continues to step .

It will be recognized that an unsuccessful attempt to perform step and or may lead to an error condition in which case flow continues to step . For example activation of the code may fail at step or . In another example initialization of the activated code may fail at step . In accordance with this example the activated code may be cleaned up if the initialization fails.

At step the activated code is initialized. For instance initialization may involve reviewing environmental variables for information to qualify activation of the code requiring the activated code to implement a specified interface requiring a code container that is associated with the activated code to expose entry points of names that may be called unpacking arbitrary initialization data from the message etc. In an example implementation initialization module initializes the activated code.

At step the activated code is registered. In an example implementation registration module registers the activated code.

At step a result of the activation is packaged. In an example implementation packaging module packages the result of the activation.

At step a determination is made whether the configuration state is to be popped. If the configuration state is to be popped flow continues to step . Otherwise flow continues to step . In an example implementation pop determination module determines whether the configuration state is to be popped.

At step the configuration state is popped. Popping the configuration state means restoring the configuration state which is pushed at step In an example implementation state popping module pops the configuration state. Upon completion of step flow continues to step .

At step the result of the activation is returned. In an example implementation provision module returns the result of the activation. Upon completion of step flowchart ends.

In some example embodiments one or more steps and or of flowchart may not be performed. Moreover steps in addition to or in lieu of steps and or may be performed.

It will be recognized that in process injection module may not include one or more of interface module activation determination module provision module state determination module state pushing module unpacking module availability determination module path determination module activation module initialization module registration module packaging module pop determination module and or state popping module . Furthermore in process injection module may include modules in addition to or in lieu of interface module activation determination module provision module state determination module state pushing module unpacking module availability determination module path determination module activation module initialization module registration module packaging module pop determination module and or state popping module .

As shown in the method of flowchart begins at step . In step a message is received in a targeted process from a requesting process that is external to the targeted process while the targeted process is running. It will be recognized that the message may be received in the targeted process directly or indirectly from the requesting process. The message includes a code identifier and requests dynamic execution of arbitrary code in the targeted process. The code identifier identifies the arbitrary code. The code identifier is useable to locate and activate the arbitrary code. The requesting process may be a tool process such as a web development program or an integrated development environment though the scope of the example embodiments is not limited in this respect. In an example implementation interface module receives the message in the targeted process from the requesting process while the targeted process is running.

In an example embodiment the code identifier contains source code to be compiled and then executed in the targeted process. In another example embodiment the code identifier is a URI and or a web service call that returns source code for compilation. In yet another example embodiment the code identifier contains script code which is not compiled for execution in the targeted process.

At step the arbitrary code is caused to be located and activated e.g. loaded and or at least partially activated in the targeted process while the targeted process is running based on the code identifier to provide activated code. In an example implementation causation module causes the arbitrary code to be located and activated in the targeted process while the targeted process is running.

In an example embodiment step includes causing an operating system OS application programming interface API to look up a location of a code container that includes the arbitrary code from a registry based on the code identifier. For instance the operating system application programming interface may be caused to use the code identifier as a key to look up the location of the code container. The code identifier may be represented using a globally unique identifier GUM for example. The operating system application programming interface may be a CoCreateInstance component object model COM function for example. It will be recognized that the code container may be a binary container or a cab or other compressed container front which the code is to be extracted. In accordance with this embodiment the code identifier is provided to the operating system application programming interface.

In another example embodiment step includes providing arbitrary data to the arbitrary code to initialize the arbitrary code. In accordance with this embodiment the arbitrary data is included in the message that is received in the targeted process at step .

In yet another example embodiment step includes halting all threads of the targeted process except for a thread that is associated with the activated code.

In still another example embodiment the code identifier and or other data in the message specifies a singleton instance of the arbitrary code. For instance the code identifier and or other data may request that an instance of the arbitrary code be created if such an instance does not already exist and or that a previously constructed instance of the arbitrary code be returned otherwise. An object registration mechanism may be reused for this purpose.

At step instantiated code which is instantiated with respect to the targeted process is identified. The instantiated code includes the activated code. In an example implementation identification module identifies the instantiated code which is instantiated with respect to the targeted process.

At step an invalidation message is received. For instance the invalidation message may be generated by the targeted process or by the requesting process. In an aspect the invalidation message may indicate that an error has occurred in the targeted process or in the requesting process. In another aspect the invalidation message may indicate that the targeted process or the requesting process is to be discontinued. For example the invalidation message may be received in response to a user exiting the targeted process. In accordance with this example the invalidation message may be received during a shutdown sequence of the targeted process. For instance the targeted process may detect that the user has exited the targeted process and generate the invalidation message based thereon. In an example implementation interface module receives the invalidation message.

At step the instantiated code is invalidated. For example the instantiated code may be discarded removed from memory called into so that the instantiated code may perform its own un initialization and or shutdown work etc. In accordance with this example reference s to the instantiated code may be deleted deactivated etc. In an example implementation invalidation module invalidates the instantiated code.

In an example embodiment the message may include qualifier s related to caching of the arbitrary code. For example the message may indicate that the arbitrary code is to be retrieved even if the arbitrary code has already been retrieved and cached locally. In accordance with this example the code identifier may refer to a URI such as a URL or a URN. In one aspect causation module may consult a table that indicates whether that arbitrary code has been retrieved and cached locally already. Causation module may retrieve the arbitrary code from the table if the arbitrary code has not been retrieved and cached locally already. In another aspect causation module may know whether causation module has already compiled a code container that was delivered as source code in a previous message. Note that a message may include a GUM to be associated with the arbitrary code along with the source code for the arbitrary code to be identified by the GUID.

Because of the costs of transmitting source code with each message the requesting process may request activation of a designated GUID. Activation may fail because the code container cannot be located The requesting process may follow up with a message that requests activating the same GUID and this time bundles the source code with the message. The causation module may compile and cache and activate the arbitrary code. The requesting process may continue with another message that requests the arbitrary code providing the GUID without the source code. This time causation module may locate and activate its cached compiled version of the arbitrary code. One potential reason for implementing the aforementioned scheme is that multiple requesting processes may be providing messages that request dynamic execution of the same arbitrary code in the targeted process.

It will be recognized that the message received by the targeted process may include a request for instantiating e.g. initializing more than a single code object which may be included in a single code container or span multiple code containers. In the case where a return reference is provided the data structure holding the result may contain an ordered collection of references to the various instantiated objects.

In some example embodiments one or more steps and or of flowchart may not be performed. Moreover steps in addition to or in lieu of steps and or may be performed For instance in an example embodiment flowchart includes providing accessibility of code that is included in the targeted process to the activated code. Accessibility of the code that is included in the targeted process may be provided to the activated code despite some of the code that is included in the targeted process being configured to be inaccessible to entities other than the targeted process for example. In accordance with this embodiment causation module may provide accessibility of the code that is included in the targeted process to the activated code.

In another example embodiment flowchart includes determining environmental variables that are associated with the arbitrary code. The environmental variables are configured to parameterize loading of the arbitrary code. For instance startup module may determine the environmental variables that are associated with the arbitrary code. In accordance with this embodiment the arbitrary code is activated during startup of the targeted process in accordance with the environmental variables. For instance startup module may activate the arbitrary code during startup of the targeted process. In further accordance with this embodiment step is performed in response to completion of activating the arbitrary code during the startup of the targeted process. For instance causation module may perform step in response to completion of activating the arbitrary code during startup of the targeted process.

In yet another example embodiment flowchart includes providing a value that references the activated code. The value is callable by the requesting process to interact with the targeted process while the targeted process continues to run. A data structure provided by the requesting process may be populated with the value though the scope of the example embodiments is not limited in this respect. In one example causation module may provide the value that references the activated code. In accordance with this example causation module may generate the value.

In one aspect of the aforementioned embodiment the requesting process may have a synchronous code activation experience that on return gives the requesting process access e.g. relatively immediate access to the value which serves as a callable reference to the activated code. In another aspect the activated code may be registered in a manner that causes the activated code to become accessible to the requesting process. For instance the activated code may be registered using a memory section that is shared among the targeted process and the requesting process.

It will be recognized that in process injection module may not include one or more of interface module causation module identification module invalidation module and or startup module . Furthermore in process injection module may include modules in addition to or in lieu of interface module causation module identification module invalidation module and or startup module .

As shown in the method of flowchart begins at step . In step the arbitrary code is loaded from a code container into a shared library based on a location that is indicated by a location identifier in the message and a path that is indicated by path information in the message. For example the shared library may be a dynamic link library DLL . In another example the location identifier may be a uniform resource identifier URI such as a uniform resource locator URL or a uniform resource name URN . In an example implementation activation logic loads the arbitrary code from the code container into the shared library. For instance activation logic may download the shared library from a source external to a device that includes causation module .

At step a call is made into the shared library to execute the arbitrary code. In an example implementation calling logic calls into the shared library to execute the arbitrary code.

In some example embodiments one or more steps and or of flowchart may not be performed. Moreover steps in addition to or in lieu of steps and or may be performed.

As shown in the method of flowchart begins at step . In step the arbitrary code is obtained from a code container that is indicated by the code identifier. The code identifier may be specified as MyDll.dll MyCodeActivatingEntryPoint for example. In an example implementation obtaining logic obtains the arbitrary code from the code container.

At step the arbitrary code is activated at an entry point of the targeted process. The entry point is specified by the code identifier. For example the code identifier may include a DLL that is to be loaded into memory the entry point into which calls are to be made for accessing the arbitrary code and a contract name that identifies an interface that is to be used for calling into the arbitrary code. In accordance with this example the DLL exposes the entry point. The entry point may be specified by an identifier such as MyDll.dll MyCode.ActivatingEntryPoint for example. In this example the initial portion MyDll of the identifier represents a filename for illustrative purposes and is not intended to be limiting. It will be recognized that the initial portion of the identifier may be a fully qualified path to a binary on disk or another URI that corresponds to a location of the arbitrary code. In an example implementation activation logic activates the arbitrary code at the entry point of the targeted process that is specified by the code identifier.

In some example embodiments one or more steps and or of flowchart may not be performed. Moreover steps in addition to or in lieu of steps and or may be performed.

It will be recognized that causation module may not include one or more of activation logic calling logic and or obtaining logic . Furthermore causation module may include modules in addition to or in lieu of activation logic calling logic and or obtaining logic .

In process injection module request module target module identification module generation module provision module receipt module interface module activation determination module provision module state determination module state pushing module unpacking module availability determination module path determination module activation module initialization module registration module packaging module pop determination module state popping module interface module causation module identification module invalidation module startup module activation logic calling logic obtaining logic flowchart flowchart flowchart flowchart and flowchart may be implemented in hardware software firmware or any combination thereof.

For example in process injection module request module target module identification module generation module provision module receipt module interface module activation determination module provision module state determination module state pushing module unpacking module availability determination module path determination module activation module initialization module registration module packaging module pop determination module state popping module interface module causation module identification module invalidation module startup module activation logic calling logic obtaining logic flowchart flowchart flowchart flowchart and or flowchart may be implemented as computer program code configured to be executed in one or more processors.

In another example in process injection module request module target module identification module generation module provision module receipt module interface module activation determination module provision module state determination module state pushing module unpacking module availability determination module path determination module activation module initialization module registration module packaging module pop determination module state popping module interface module causation module identification module invalidation module startup module activation logic calling logic obtaining logic flowchart flowchart flowchart flowchart and or flowchart may be implemented as hardware logic electrical circuitry.

For instance in an embodiment one or more of in process injection module request module target module identification module generation module provision module receipt module interface module activation determination module provision module state determination module state pushing module unpacking module availability determination module path determination module activation module initialization module registration module packaging module pop determination module state popping module interface module causation module identification module invalidation module startup module activation logic calling logic obtaining logic flowchart flowchart flowchart flowchart and or flowchart may be implemented in a system on chip SoC . The SoC may include an integrated circuit chip that includes one or more of a processor e.g. a microcontroller microprocessor digital signal processor DSP etc. memory one or more communication interfaces and or further circuits and or embedded firmware to perform its functions.

As shown in computer includes a processing unit a system memory and a bus that couples various system components including system memory to processing unit . Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. System memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS is stored in ROM .

Computer also has one or more of the following drives a hard disk drive for reading from and writing to a hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM DVD ROM or other optical media. Hard disk drive magnetic disk drive and optical disk drive are connected to bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable storage media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the computer. Although a hard disk a removable magnetic disk and a removable optical disk are described other types of computer readable storage media can be used to store data such as flash memory cards digital video disks random access memories RAMs read only memories ROM and the like.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM. These programs include an operating system one or more application programs other program modules and program data Application programs or program modules may include for example computer program logic for implementing in process injection module request module target module identification module generation module provision module receipt module interface module activation determination module provision module state determination module state pushing module unpacking module availability determination module path determination module activation module initialization module registration module packaging module pop determination module state popping module interface module causation module identification module invalidation module startup module activation logic calling logic obtaining logic flowchart including any step of flowchart flowchart including any step of flowchart flowchart including any step of flowchart flowchart including any step of flowchart and or flowchart including any step of flowchart as described herein.

A user may enter commands and information into the computer through input devices such as keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite dish scanner touch screen camera accelerometer gyroscope or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to bus but may be connected by other interfaces such as a parallel port game port or a universal serial bus USB .

A display device e.g. a monitor is also connected to bus via an interface such as a video adapter . In addition to display device computer may include other peripheral output devices not shown such as speakers and printers.

Computer is connected to a network e.g. the Internet through a network interface or adapter a modem or other means for establishing communications over the network. Modem which may be internal or external is connected to bus via serial port interface .

As used herein the terms computer program medium and computer readable medium are used to generally refer to non transitory media such as the hard disk associated with hard disk drive removable magnetic disk removable optical disk as well as other non transitory media such as flash memory cards digital video disks random access memories RAMs read only memories ROM and the like. Such computer readable storage media are distinguished from and non overlapping with communication media. Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wireless media such as acoustic RF infrared and other wireless media. Example embodiments are also directed to such communication media.

As noted above computer programs and modules including application programs and other program modules may be stored on the hard disk magnetic disk optical disk. ROM or RAM. Such computer programs may also be received via network interface or serial port interface . Such computer programs when executed or loaded by an application enable computer to implement features of embodiments discussed herein. Accordingly such computer programs represent controllers of the computer .

Example embodiments are also directed to computer program products comprising software e.g. computer readable instructions stored on any computer useable medium. Such software when executed in one or more data processing devices causes a data processing device s to operate as described herein. Embodiments may employ any computer useable or computer readable medium known now or in the future. Examples of computer readable mediums include but are not limited to storage devices such as RAM hard drives floppy disks CD ROMs DVD ROMs zip disks tapes magnetic storage devices optical storage devices MEMS based storage devices nanotechnology based storage devices and the like.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. It will be apparent to persons skilled in the relevant art s that various changes in form and details can be made therein without departing from the spirit and scope of the invention. Thus the breadth and scope of the present invention should not be limited by any of the above described example embodiments but should be defined only in accordance with the following claims and their equivalents.

