---

title: Method and apparatus for deriving and using trustful application metadata
abstract: A method, non-transitory computer readable medium and apparatus for deriving trustful metadata for an application are disclosed. For example, the method crawls online for the application, analyzes the application to determine a function of the application, and generates trustful meta-data for the application based upon the function of the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09449104&OS=09449104&RS=09449104
owner: AT&T Intellectual Property I, L.P.
number: 09449104
owner_city: Atlanta
owner_country: US
publication_date: 20120702
---
The present disclosure relates generally to metadata for software applications and more particularly to a method and apparatus for deriving and using trustful application metadata.

Mobile endpoint device use has increased in popularity in the past few years. Associated with the mobile endpoint devices are the proliferation of software applications broadly known as apps or applications that are created for the mobile endpoint device.

The number of available apps is growing at an alarming rate. Currently hundreds of thousands of apps are available to users via app stores such as Apple s app store and Google s Android marketplace. However with the enormous growth of apps available in the Internet there has been little control over metadata associated with the apps. For example malicious apps may be disguised as popular apps by providing false information in the metadata. As a result when users see a particular app they may believe it to be a legitimate app or a popular app and download and install the malicious app instead.

In one embodiment the present disclosure provides a method for deriving trustful metadata for an application. For example the method crawls online for the application analyzes the application to determine a function of the application and generates trustful meta data for the application based upon the function of the application.

To facilitate understanding identical reference numerals have been used where possible to designate identical elements that are common to the figures.

The present disclosure broadly discloses a method non transitory computer readable medium and apparatus for deriving trustful metadata for software applications apps . The growing popularity of apps for mobile endpoint devices has lead to an explosion of the number of apps that are available. Currently there are hundreds of thousands of apps available for mobile endpoint devices.

However there has been little standardization or control as to how and what information may be inserted into a meta data file that describes a particular app. Currently developers may create a meta data file for an app with whatever information they desire. In addition third parties may also be able to modify the meta data file.

As a result the meta data may be manipulated by various parties to include information that may not accurately describe the app it is associated with. Some developers may take advantage of the ability to manipulate meta data and attempt to insert information in the meta data associated with a popular app. Consequently when the popular app is searched for by users their apps will also appear in a search result presented to the user. For example some developers may insert the term Angry Birds into the meta data file of a productivity app such that when a user searches for the Angry Birds app the productivity app will also appear even though the productivity app is completely unrelated to the Angry Birds app.

Worse yet some hackers may attempt to infect endpoint devices with harmful viruses or Trojan horse apps using the same technique. For example the meta data may be created to make the virus app appearing as a copy of a popular app. As a result a user may not know that he or she is actually downloading and executing a virus app instead of the app the user was actually looking for. Thus there is a need to provide users with trustful meta data that can be trusted by users.

In one embodiment the network may comprise a core network . The core network may be in communication with one or more access networks and . The access networks and may include a wireless access network e.g. a WiFi network and the like a cellular access network a PSTN access network a cable access network a wired access network and the like. In one embodiment the access networks and may all be different types of access networks may all be the same type of access network or some access networks may be the same type of access network and other may be different types of access networks. The core network and the access networks and may be operated by different service providers the same service provider or a combination thereof.

In one embodiment the core network may include an application server AS and a database DB . Although only a single AS and a single DB are illustrated it should be noted that any number of application servers or databases may be deployed.

In one embodiment the AS may comprise a general purpose computer as illustrated in and discussed below. In one embodiment the AS may perform the methods and algorithms discussed below related to deriving trustful meta data.

In one embodiment the DB may store various meta data for each one of a plurality of apps collected by a web crawler. In addition the DB may store the generated trustful meta data. The generation of the trustful meta data is discussed in further detail below.

In one embodiment the DB may store various information gathered by analyzing the apps. The information gathered by analyzing the apps may be used to generate the trustful meta data. The various information may include for example call graphs information about application programming interface API usage information about local behavior e.g. does the app access personal information stored on the endpoint device and the like and usage of an app e.g. computer processing capacity used memory used battery life used local endpoint device sensors used such as a global position system GPS and the like information about network behavior and usage of an app e.g. network bandwidth used which network protocols are used such as real time transport protocol RTP session initiation protocol SIP and the like.

In one embodiment the DB may also store a plurality of apps that may be accessed by users via their endpoint device. In one embodiment a plurality of databases storing a plurality of apps may be deployed. In one embodiment the databases may be co located or located remotely from one another throughout the communications network . In one embodiment the plurality of databases may be operated by different vendors or service providers. Although only a single AS and a single DB are illustrated in it should be noted that any number of application servers or databases may be deployed.

In one embodiment the access network may be in communication with one or more user endpoint devices also referred to as endpoint devices or UE and . In one embodiment the access network may be in communication with one or more user endpoint devices and .

In one embodiment the user endpoint devices and may be any type of endpoint device such as a desktop computer or a mobile endpoint device such as a cellular telephone a smart phone a tablet computer a laptop computer a netbook an ultrabook a tablet computer a portable media device e.g. an iPod touch or MP3 player and the like. It should be noted that although only four user endpoint devices are illustrated in any number of user endpoint devices may be deployed.

It should be noted that the network has been simplified. For example the network may include other network elements not shown such as border elements routers switches policy servers security devices a content distribution network CDN and the like.

In one embodiment the functional framework flow diagram includes four different phases phase phase II phase III and phase IV . In phase operations are performed without user input. For example from a universe of apps phase I may pre process each one of the apps to obtain and or generate meta data and perform app fingerprinting to generate a crawled app. Apps may be located in a variety of online locations for example an app store an online retailer an app marketplace or individual app developers who provide their apps via the Internet e.g. websites. An online location is broadly interpreted as a location accessible via a network connection. Thus crawling online for an app is broadly interpreted as accessing an app via a network connection e.g. accessing an app on a local area network or server or through the Internet where the app is located on an external network or server .

In one embodiment a web crawler may be used to obtain various apps and the associated meta data for each one of the apps. However as noted above the meta data generated by the developer that is obtained from the Internet or the world wide web may not be trusted due to the ease of manipulating the meta data.

As a result in phase I a third party or a network service provider may generate trustful meta data that may be relied on by an end user or subscriber of the service provider. In other words the network service provider may vet the meta data for the subscribers to ensure that the meta data accurately describes the app. By generating the trustful meta data the subscriber may have faith that the meta data accurately describes the app.

In addition the trustful meta data may be leveraged to provide additional configurable search parameters for the user. For example the trustful meta data may include information about various attributes associated with the app that were obtained by analyzing the app to generate the trustful meta data. These attributes may be used by a subscriber or end user to further narrow search queries for apps such as searching based upon memory usage bandwidth usage what files the app attempts to access during use and the like.

In one embodiment the apps may also be fingerprinted to eliminate harmful apps such as viruses and common apps can also be grouped together that may be appear to be different apps based upon the meta data. Once the trustful meta data is generated and the apps are fingerprinted the apps may be weighted to assign an initial weighting that is used to compute an initial ranking.

For example at phase I the method may optionally apply a weight to each application to generate a weighted app. For example the weight can be applied in accordance with various parameters e.g. a reputation of the app developer a cost of app the quality of the technical support provided by the developer a size of the app e.g. memory size requirement ease of use of the app in general ease of use based on the user interface effectiveness of the app for its intended purpose and so on. For example a reputation of a developer for developing particular types of apps may optionally also be obtained e.g. from a public online forum from a social network website from an independent evaluator and so on. The reputation information implemented via weights may then be used to calculate an initial ranking for each one of the apps e.g. a weight of greater than 1 can be applied to a developer with a good reputation whereas a weight of less than 1 can be applied to a developer with a poor reputation. It should be noted that the weights e.g. with a range of 1 10 with a range between 0 1 and so on can be changed based on the requirements of a particular implementation.

An optional user based filtering step can be applied once the apps are weighted and an initial ranking for each of the apps is computed. For example each user may have a predefined set of parameters that are to be applied to all of the apps e.g. excluding all apps of a particular size due to hardware limitation excluding all apps based on a cost of the apps excluding all apps from a particular developer and so on. It should be noted that this step is only applied if the user has a predefined set of filter criteria to be applied to generate pre search apps .

Alternatively once the apps are weighted and an initial ranking for each of the apps is computed phase II is triggered by user input. For example during phase II a user may input a search query for a particular app. In one embodiment the search may be based upon a natural language processing NLP or semantic query. For example the search may simply be a search based upon matches of keywords provided by the user in the search query. Using the NLP query a NLP ranking of the app may be computed.

In one embodiment the search may be based upon a context based query. For example the search may be performed based upon what e.g. an activity the user is participating in where e.g. a location when e.g. a time of day and with whom e.g. a single user a group of users friends family an age of the user and the like a user is performing an activity.

A ranking algorithm may be applied to the apps that accounts for at least the initial ranking and the context based ranking to compute a final ranking of the apps. In one embodiment the final ranking may be calculated based upon the initial ranking the context based ranking the NLP ranking and or a user feedback ranking. For example the weight values of each of the rankings may be added together to compute a total weight value which may then be compared to the total weight values of the other apps.

At phase III the results of the final ranking are presented to the user. As discussed above the trustful meta data that is generated may be used to allow a user to further filter apps or narrow the search based upon particular attributes of the apps. For example the user may want to further narrow down the search to apps that use less than 100 megabytes of memory space or narrow down the search to apps to eliminate any apps that access personal contact information during operation and the like.

At phase IV the user may select one of the apps and interact with the app. For example the user may select one of the apps and either preview the app or download the app for installation and execution on the user s endpoint device.

The method begins at step . At step the method crawls the Internet for meta data of an app. For example the web crawler may be deployed by the AS to crawl the Internet e.g. websites or online stores that have apps for purchase and download for one or more apps and the associated meta data. For example in one embodiment there may already be meta data associated with the app. However as noted above the meta data may not be trusted as meta data may be easily manipulated by a developer or another third party.

At step the method analyzes the app to determine how the app functions. By analyzing the app to see how the app functions information may be gathered to generate trustful meta data that accurately reflects the true identity and functions of the app. In other words a third party or a network service provider may actually analyze the app to reveal the true functionality of the app rather than blindly relying on the meta data that is provided or that pre existed with the app.

The app may be analyzed using a variety of methods and by a variety of parties. For example the app may be analyzed by a developer by an operator preview by a user preview and the like. The analysis may include static analysis dynamic analysis and analysis of various files associated with an app.

The analysis may attempt to collect information regarding how the app functions and the attributes of an app. For example the attributes may include how the app behaves with respect to accessing personal information stored on a local endpoint device how much processing capacity the app uses how much memory the app uses how much battery life the app consumes i.e. rate of power consumption which sensors of the endpoint device are used by the app e.g. a GPS sensor an accelerometer a camera a microphone etc. how much network bandwidth the app uses which network protocols are used by the app and the like.

For example in one embodiment the analysis may be performed by a developer an operator preview or by a user preview . In one embodiment the developer may gather information about the app using certain files e.g. a manifest file for Android operating systems. The files may be analyzed to obtain application programming interface API usage information .

In one embodiment the operator preview may analyze the app by performing a static binary analysis or a dynamic analysis . For example the operator preview may be performed by a network service provider or another third party tasked with performing the analysis.

In one embodiment the static binary analysis may analyze certain code of the app that does not change for example call graphs or API usage . Looking at the call graphs or the API usage may help gather information about what programs the app is actually executing and how the app is executing them.

In one embodiment the dynamic analysis may analyze local and network behavior and usage . For example dynamic analysis may include analysis of how the app functions during operation e.g. how the app responds to user inputs and the like.

In one embodiment local behavior may include information such as for example whether the app accesses personal information stored on the endpoint device whether the app attempts to access or execute other applications on the endpoint device whether the app stores cookies on the endpoint device and the like. In one embodiment the local usage may include information such as for example how much processing power of the endpoint device the app uses how much memory of the endpoint device the app uses how much battery life of the endpoint device the app uses which sensors on the endpoint device the app uses and the like. In one embodiment network behavior may include information such as for example what network protocols are used by the app does the app scan for particular ports how often does the app communicate through the network while running and the like. In one embodiment the network usage may include information such as for example how much bandwidth the app uses in the network how much processing resources the app uses in the network how much data the app is storing in the network and the like.

In one embodiment the user preview may analyze the app by performing a dynamic analysis . In one embodiment the user preview may be a live preview application on the user s endpoint device that can be monitored by the network e.g. by the AS to collect information.

For example a user may want to test drive an app before purchasing and downloading the app. The live preview allows the user to execute and operate the app on the user s endpoint device or remotely from a server as if the user had purchased the app. As a result the service provider may allow the user to preview the app before purchasing and downloading. During the course of the user preview the service provider or network may collect information about how the app behaves or is used while the user is test driving the app.

In one embodiment the dynamic analysis may analyze local and network behavior and usage similar to the dynamic analysis of the operator preview . In one embodiment local behavior may include information such as for example does the app access personal information stored on the endpoint device does the app attempt to access or execute other applications on the endpoint device does the app store cookies on the endpoint device and the like. In one embodiment the local usage may include information such as for example how much processing power of the endpoint device the app uses how much memory of the endpoint device the app uses how much battery life of the endpoint device the app uses which sensors on the endpoint device the app uses and the like. In one embodiment network behavior may include information such as for example what network protocols are used by the app does the app scan for particular ports how often does the app communicate through the network while running and the like. In one embodiment the network usage may include information such as for example how much bandwidth the app uses in the network how much processing resources the app uses in the network how much data the app is storing in the network and the like.

In one embodiment the information gathered from all of the analysis may be used to generate the trustful meta data. For example by analyzing the app and testing to see how the app truly operates the app may be vetted and the trustful meta data may be generated that can be trusted unlike the meta data that is currently available for an app. In other words an objective third party such as for example a network service provider may generate trustful meta data that is based upon actual analysis and testing of the app. In other words the trustful meta data is generated by a different party than the party that generated the original meta data associated with an app.

In one embodiment one or more of the analysis performed by the developer the operator preview or the user preview may be used to generate the trustful meta data. In other words not all of the analysis may be needed to generate the trustful meta data. For example the trustful meta data may be generated with only the developer analysis or the developer analysis and the operator preview analysis and so on. In addition any one of the analysis methods may be executed by any of the developer the operator preview or the user preview . For example the developer may also use static binary analysis and or dynamic analysis.

Referring back to at step the method generates trustful meta data for the app based upon how the app functions. It should be noted that the trustful meta data may be considered to be an additional meta data file for the app. The generation of the trustful meta data is not simply a modification of one or more fields in an existing meta data file. Rather it creates a second different meta data file associated with the app based upon how the app functions. Thus the existing meta data file can be retained and is not deleted or over written in one embodiment.

In other words the apps that are obtained in step may already be associated with pre existing meta data. However by generating the trustful meta data a network service provider may provide the trustful meta data file to an end user or subscriber instead of the pre existing meta data that was obtained with the app.

The trustful meta data may be presented to a subscriber or an end user such that the subscriber or the end user may have full confidence that the trustful meta data accurately describes the app. As a result the additional service provided by the service provider may be provided as a subscription service e.g. a service provided for an additional fee or as an added feature to a data plan service e.g. Internet access service to the end user or subscriber by ensuring that apps having trustful meta data are not malicious virus apps or Trojan horse apps.

In addition the trustful meta data may be leveraged to provide additional configurable search parameters for the user. For example the trustful meta data may include information about various attributes associated with the app that were obtained when the app was analyzed to generate the trustful meta data. These attributes may be used by a subscriber or end user to further narrow search queries for apps such as searching based upon memory usage bandwidth usage what files the app attempts to access during use and the like. At step the method ends.

It should be noted that although not explicitly specified one or more steps of the method described above may include a storing displaying and or outputting step as required for a particular application. In other words any data records fields and or intermediate results discussed in the methods can be stored displayed and or outputted to another device as required for a particular application. Furthermore operations steps or blocks in that recite a determining operation or involve a decision do not necessarily require that both branches of the determining operation be practiced. In other words one of the branches of the determining operation can be deemed as an optional step. Furthermore operations steps or blocks of the above described methods can be combined separated and or performed in a different order from that described above without departing from the example embodiments of the present disclosure.

It should be noted that the present disclosure can be implemented in software and or in a combination of software and hardware e.g. using application specific integrated circuits ASIC a general purpose computer or any other hardware equivalents e.g. computer readable instructions pertaining to the method s discussed above can be used to configure a hardware processor to perform the steps of the above disclosed method. In one embodiment the present module or process for deriving trustful metadata for an app can be implemented as computer executable instructions e.g. a software program comprising computer executable instructions loaded into memory and executed by hardware processor to implement the functions as discussed above. As such the present method for deriving trustful metadata for an app as discussed above in method including associated data structures of the present disclosure can be stored on a non transitory e.g. tangible or physical computer readable storage medium e.g. RAM memory magnetic or optical drive or diskette and the like.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of a preferred embodiment should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

