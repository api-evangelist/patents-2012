---

title: Method and apparatus for creating a platform agnostic application file
abstract: A method and apparatus for creating an application file comprising accessing at least one library, stubbing the at least one library to create a stub library containing symbols exported from the at least one library, and packing the stub library into the application file. Other embodiments include method and apparatus for packaging an application file comprising accessing the application file, unpacking the application file to expose at least one stub library, accessing the at least one stub library and packaging the application file with another application using symbols contained in the stub library for delivery to an end user computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09436487&OS=09436487&RS=09436487
owner: ADOBE SYSTEMS INCORPORATED
number: 09436487
owner_city: San Jose
owner_country: US
publication_date: 20120329
---
Embodiments of the present invention generally relate to software application development and more particularly to a method and apparatus for development of applications using disparate development platforms.

Modern software development is performed using many software developers working on various hardware software platforms to develop a software application. Each platform has dedicated Software Development Kit SDK to facilitate development of executable code also referred to herein as software application or software application upon a particular platform. For example an application for iOS may be initially developed using an Apple computer Mac OS and an Apple based SDK. The application may be subsequently transferred to another developer for inclusion as a plug in or extension of a larger application testing and the like. The second developer may work on for example a WINDOWS platform using a WINDOWS based SDK to package the extension with the larger application. As a result for example an extension developed on an APPLE computer may ultimately be included in a larger application being developed on a WINDOWS platform and ultimately executed on a third computer e.g. APPLE computer.

To facilitate functionality across the various platforms the initial first developer may create multiple versions of the software where each version functions on a different platform. Another alternative is to create one software application and design the ability to link to a different library associated with each platform. As such the application would be packaged with a plurality of libraries at least one library for each supported platform .

Therefore there is a need in the art for improved method and apparatus for development of applications capable of operating across different platforms.

Embodiments of the present invention generally relate to a method and apparatus for creating an application file comprising accessing at least one library stubbing the at least one library to create a stub library containing symbols exported from the at least one library and packing the stub library into the application file.

Another embodiment of the present invention generally relates to a method and apparatus for packaging an application file with another application comprising accessing the application file unpacking the application file to expose at least one stub library accessing the at least one stub library packaging the application file with another application using symbols contained in the stub library for delivery to an end user computer.

While the method and apparatus is described herein by way of example for several embodiments and illustrative drawings those skilled in the art will recognize that the method and apparatus for creating executable code is not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit embodiments to the particular form disclosed. Rather the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the method and apparatus for creating a platform agnostic executable code defined by the appended claims. Any headings used herein are for organizational purposes only and are not meant to limit the scope of the description or the claims. As used herein the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to.

Embodiments of the present invention include a method and apparatus for creating an application file. Specifically embodiments of the present invention disclose design and implementation of a method and apparatus for creating a platform agnostic application file. In an embodiment a method for creating the application file comprises accessing a library and stubbing the library to create a stub library. In some embodiments more than one library can be stubbed to create more than one stub library. More specifically the at least one stub library contains symbols that are exported from a library. The method further comprises packing the stub library into an application file e.g. an extension file and optionally compressing the application file. Such a compressed application file can be decompressed unpacked and used to package the application file with another application referred to herein a master application located on a platform that is different from the platform used to create the application file. Consequently the process to package the application file with the master application is platform agnostic. The package master application and the application file may then be executed on a third platform. In this manner the packaging platform does not require the library represented by the stub library to complete the packaging process. Thus packaging may be accomplished in a platform agnostic manner.

Various embodiments of an apparatus and method for creating and or consuming an application file are described. In the following detailed description numerous specific details are set forth to provide a thorough understanding of claimed subject matter. However it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances methods apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.

Some portions of the detailed description which follow are presented in terms of algorithms or symbolic representations of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform. In the context of this particular specification the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. Algorithmic descriptions or symbolic representations are examples of techniques used by those of ordinary skill in the signal processing or related arts to convey the substance of their work to others skilled in the art. An algorithm is here and is generally considered to be a self consistent sequence of operations or similar signal processing leading to a desired result. In this context operations or processing involve physical manipulation of physical quantities. Typically although not necessarily such quantities may take the form of electrical or magnetic signals capable of being stored transferred combined compared or otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to such signals as bits data values elements symbols characters terms numbers numerals or the like. It should be understood however that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout this specification discussions utilizing terms such as processing computing calculating determining or the like refer to actions or processes of a specific apparatus such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification therefore a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals typically represented as physical electronic or magnetic quantities within memories registers or other information storage devices transmission devices or display devices of the special purpose computer or similar special purpose electronic computing device.

The apparatus is usable for practicing methods for development and execution of a platform agnostic application file designed and implemented in conformity with the principles of the present invention. Details of the apparatus have been disclosed herein with respect to whereas the methods implemented using the apparatus are disclosed with reference to .

The computing system comprises an application file creation computer an application file packaging computer an application package consumption computer and a network . The computing system facilitates deployment of the apparatus for development and execution of platform agnostic application files in particular extension files in accordance with the certain principles of the present invention. In accordance with various embodiments an application file e.g. an extension is developed on the application file creation computer transferred to the application file packaging computer where the application file is packaged with another application i.e. referred to herein as the master application file without regard to the type of platform used in packaging and ultimately the packaged files are executed on the application package consumption computer e.g. an end user computer .

Application creation computer is a type of computing device e.g. a laptop a desktop a Personal Digital Assistant PDA a tablet a mobile phone and or the like known to one of ordinary skill in the art. The application creation computer comprises a first Central Processing Unit CPU a first set of support circuits and a first memory . The first CPU may comprise one or more commercially available microprocessors or microcontrollers that facilitate data processing and storage.

First set of support circuits facilitate the operation of the first CPU and include one or more clock circuits power supplies cache input output circuits and the like.

First memory comprises at least one of Read Only Memory ROM Random Access Memory RAM disk drive storage optical storage removable storage and or the like. The first memory comprises a first operating system OS a Software Development Kit SDK a shared library and an application file comprising for example stub library and optionally at least one library .

By way of example and in no way limiting the scope of the invention in certain specific embodiments the SDK may comprise one or more APIs one or more libraries documentation a packager tool a compiler linker and editor.

SDK facilitates creation of one or more application files e.g. application file in accordance with the present invention. The term Software Development Kit or SDK or devkit as used herein refers to a set of development tools that allows for the creation of applications for a certain software package software framework hardware platform computer system video game console operating system or similar platform. Specifically the SDK may be something as simple as an Application Programming Interface API in the form of some files to interface to a particular programming language or include sophisticated hardware to communicate with a certain embedded system. Common tools include debugging aids and other utilities often presented in an integrated development environment IDE . In one embodiment the SDK comprises a packager tool for creating the stub library and creating the application file in accordance with the invention.

The stub library contains one or more symbols exported from a shared library . A stub library is generally used for linking purposes and contains only exported symbols without executable code. The shared library is a standard library that is known to exist on the application package consumption computer . Although a single stub library is shown the application file may comprise a plurality of stub libraries. The stub library and the one or more symbols contained therein enable a linking tool to statically use the symbols without the use of an SDK.

In use the stub library is created and added to the application file . Typically but not necessarily the application file is compressed and stored for later use. In alternative embodiments at least one additional library may be added to the application file where the additional library is operative on both the application creation computer the application file packaging computer and the application package consumption computer . In one embodiment the additional library is a unique library created by the application file developer. The application file operates as a container for stub and non stub libraries that form the extension to be packaged on a second platform with a master application and ultimately used on a third platform.

The term Shared library or shared object as used herein refers to a file that is intended to be shared by executable files and further shared objects files. Modules used by a program are loaded from individual shared objects into memory at load time or run time rather than being copied by a linker when it creates a single monolithic executable file for the program. Shared libraries can be statically linked meaning that references to the library modules are resolved and the modules are allocated memory when the executable file is created.

Typically most modern operating systems can have shared library files of the same format as the executable files. This offers two main advantages firstly it requires using only one loader rather than two. Secondly it allows the executable files to be used as shared libraries if they have a symbol table. For example typical combined executable and shared library formats are Executable and Linkable Format ELF and Mach O both in Unix and PE Windows .

To facilitate further development testing packaging and or the like the application file whether compressed or uncompressed is transmitted from the application creation computer to the application packaging computer through the network . In its simplest form the application file e.g. an extension file contains only the stub library. In other embodiments the application file may contain additional libraries unstubbed that are created by the application file developer.

Network comprises equipment and cabling for transporting digital data between computers. By way of example and in no way limiting the scope of the invention in certain embodiments the network may comprise multiple routers and switches not shown that transport traffic between the application creation computer and the application consumption computer and to the Internet. Network is in one embodiment a communication network and may run the Internet Protocol IP suite. However in other embodiments the network may be a portable storage device e.g. disk drive solid state memory and or the like that facilitates moving the application file or a copy thereof from the application creation computer to the application packaging computer and ultimately to the application package consumption computer . As such the application creation computer is communicably coupled to the application packaging computer via the network .

Application packaging computer is a type of computing device e.g. a laptop a desktop a PDA a tablet a mobile phone and or the like known to one of ordinary skill in the art. The application packaging computer comprises a second CPU a second set of support circuits and a second memory . The second CPU may comprise one or more commercially available microprocessors or microcontrollers that facilitate data processing and storage.

Second set of support circuits facilitate the operation of the second CPU and include one or more clock circuits power supplies cache input output circuits and the like.

Second memory comprises at least one of ROM RAM disk drive storage optical storage removable storage and or the like. The second memory comprises a second OS a linking tool a master application and an application file a copy of application file containing stub library and an optional library or a plurality of libraries.

In one embodiment the application consumption computer receives an application file from the application creation computer via the network . In one embodiment the master application is designed to attach to or otherwise utilize the application file as for example an extension or plug in.

The linking tool accesses the compressed application file . The linking tool decompresses as necessary and unpacks the application file . The linking tool accesses the stub library and uses the stubs symbols to link the application file to the master application . In one embodiment the master application consumes the application file extension to add functionality to the master application. Using embodiments of the present invention enables the extension functionality to be created on any platform and then packaged on another platform without regard to the type of platform 

Application package consumption computer is a type of computing device e.g. a laptop a desktop a PDA a tablet a mobile phone and or the like known to one of ordinary skill in the art. The application package computer comprises a second CPU a second set of support circuits and a second memory . The second CPU may comprise one or more commercially available microprocessors or microcontrollers that facilitate data processing and storage.

Second set of support circuits facilitate the operation of the second CPU and include one or more clock circuits power supplies cache input output circuits and the like.

Second memory comprises at least one of ROM RAM disk drive storage optical storage removable storage and or the like. The second memory comprises a third OS a linker library and an application package . The application package comprises a master application and an application file a copy of application file containing stub library and an optional at least one library .

In one embodiment the application package consumption computer receives an application package from the application packaging computer via the network . In one embodiment upon installation and execution the master application is designed to attach to or otherwise utilize the application file as for example an extension or plug in.

The linker accesses and unpacks the application package . In one embodiment the master application consumes the application file extension to add functionality to the master application . The installation and execution of the applications contained in the application package is conventional and well known to those skilled in the art.

The method starts at step and proceeds to step where the method uses one or more components of the SDK to create the application file in . As discussed in conjunction with the SDK comprises one or more components for example one or more APIs one or more libraries documentation a packager tool a compiler linker and editor.

At step the method accesses one or more libraries. By way of example and in no way limiting the scope of the invention in certain embodiments the one or more libraries are provided by the SDK. Further the one or more libraries may constitute a shared library.

At step the method creates one or more stub libraries based on the one or more libraries. The stub library contains one or more symbols that are exported from the one or more libraries. Specifically the method specifies the dependencies required when linking to the library static library . The method generates the stubs for all symbols exported from each of the dependencies and creates the stub library.

At step the method using the packager tool adds the created stub library and optionally at least one library non stubbed to the application file. The additional non stubbed library is a library that is known to be available to the master application on the application consumption computer.

At step the method stores the application file for later use. In certain embodiments the application file may be compressed using at least one of data compression algorithms generally known in the art. For example and by no way of limitation the lossless data compression algorithm is that used in connection with a ZIP file format.

The signatures.xml comprises data or information used to authenticate the extension. The digital signature can be created by the extension developer by hashing the extension without the digital security signature and encrypting the hash with a private encryption key. The digital security signature can later be decrypted using the extension developer s public encryption key and comparing that to a hash of the extension without the digital security signature. If the two hashes match it can be concluded that the copy of the extension is valid and unaltered.

Certain embodiments of the present invention provide methods for consumption of application files e.g. extension file and apparatuses used therefor designed and implemented in accordance with the principles of the invention. In certain such embodiments a method for consuming an application file comprises accessing the application file decompressing as needed and unpacking the application file accessing the stub library contained therein and using the stubs to link to the master application. As such a functional extension can be created on one platform and packaged with a master application on another platform without regard to the type of platform used for performing the packaging.

The method starts at step and proceeds to step where the method accesses the application file. In certain embodiments the method further comprises receiving the compressed application file from the application creation computer over the network to consume the application file contained therein.

At step the method decompresses as needed and unpacks the application file to access the stub library contained therein.

At step the method uses the stub library and the stubs or symbols to statically link or couple to the master application to add additional functionality to the master application. In certain specific embodiments the method uses the linking tool to access the stub library and uses the stubs to link to the master application on the consumption computer. A final master application may be created in this manner by consuming a meriad number of application files extensions created on any number of disparate platforms.

In one embodiment of the invention the final master application may be transferred to a user computer e.g. application package consumption computer of for execution.

The embodiments of the present invention may be embodied as methods apparatus electronic devices and or computer program products. Accordingly the embodiments of the present invention may be embodied in hardware and or in software including firmware resident software micro code etc. which may be generally referred to herein as a circuit or module . Furthermore the present invention may take the form of a computer program product on a computer usable or computer readable storage medium having computer usable or computer readable program code embodied in the medium for use by or in connection with an instruction execution system. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. These computer program instructions may also be stored in a computer usable or computer readable memory that may direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer usable or computer readable memory produce an article of manufacture including instructions that implement the function specified in the flowchart and or block diagram block or blocks.

The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium include the following hard disks optical storage devices a transmission media such as those supporting the Internet or an intranet magnetic storage devices an electrical connection having one or more wires a portable computer diskette a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber and a compact disc read only memory CD ROM .

Computer program code for carrying out operations of the present invention may be written in an object oriented programming language such as Java Smalltalk or C and the like. However the computer program code for carrying out operations of the present invention may also be written in conventional procedural programming languages such as the C programming language and or any other lower level assembler languages. It will be further appreciated that the functionality of any or all of the program modules may also be implemented using discrete hardware components one or more Application Specific Integrated Circuits ASICs or programmed Digital Signal Processors or microcontrollers.

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the present disclosure and its practical applications to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as may be suited to the particular use contemplated.

Various embodiments of an apparatus and method for creating a platform agnostic application file as described herein may be executed on one or more computer systems which may interact with various other devices. One such computer system is computer system illustrated by which may in various embodiments implement any of the elements or functionality illustrated in . In various embodiments computer system may be configured to implement methods described above. The computer system may be used to implement any other system device element functionality or method of the above described embodiments. In the illustrated embodiments computer system may be configured to implement methods and as processor executable executable program instructions e.g. program instructions executable by processor s in various embodiments.

In the illustrated embodiment computer system includes one or more processors coupled to a system memory via an input output I O interface . The computer system further includes a network interface coupled to I O interface and one or more input output devices such as cursor control device keyboard and display s . In various embodiments any of components may be utilized by the system to receive user input described above. In various embodiments a user interface e.g. user interface may be generated and displayed on display . In some cases it is contemplated that embodiments may be implemented using a single instance of computer system while in other embodiments multiple such systems or multiple nodes making up computer system may be configured to host different portions or instances of various embodiments. For example in one embodiment some elements may be implemented via one or more nodes of computer system that are distinct from those nodes implementing other elements. In another example multiple nodes may implement computer system in a distributed manner.

In different embodiments computer system may be any of various types of devices including but not limited to a personal computer system desktop computer laptop notebook or netbook computer mainframe computer system handheld computer workstation network computer a camera a set top box a mobile device a consumer device video game console handheld video game device application server storage device a peripheral device such as a switch modem router or in general any type of computing or electronic device.

In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processor capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x96 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

System memory may be configured to store program instructions and or data accessible by processor . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing any of the elements of the embodiments described above may be stored within system memory . In other embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media or on similar media separate from system memory or computer system .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces such as input output devices . In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one components e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to a network e.g. network such as one or more external systems or between nodes of computer system . In various embodiments network may include one or more networks including but not limited to Local Area Networks LANs e.g. an Ethernet or corporate network Wide Area Networks WANs e.g. the Internet wireless data networks some other electronic data network or some combination thereof. In various embodiments network interface may support communication via wired or wireless general data networks such as any suitable type of Ethernet network for example via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fiber Channel SANs or via any other suitable type of network and or protocol.

Input output devices may in some embodiments include one or more display terminals keyboards keypads touchpads scanning devices voice or optical recognition devices or any other devices suitable for entering or accessing data by one or more computer systems . Multiple input output devices may be present in computer system or may be distributed on various nodes of computer system . In some embodiments similar input output devices may be separate from computer system and may interact with one or more nodes of computer system through a wired or wireless connection such as over network interface .

In some embodiments the illustrated computer system may implement any of the methods described above such as the methods illustrated by the flowcharts of . In other embodiments different elements and data may be included.

Those skilled in the art will appreciate that computer system is merely illustrative and is not intended to limit the scope of embodiments. In particular the computer system and devices may include any combination of hardware or software that can perform the indicated functions of various embodiments including computers network devices Internet appliances PDAs wireless phones pagers etc. Computer system may also be connected to other devices that are not illustrated or instead may operate as a stand alone system. In addition the functionality provided by the illustrated components may in some embodiments be combined in fewer components or distributed in additional components. Similarly in some embodiments the functionality of some of the illustrated components may not be provided and or other additional functionality may be available.

Those skilled in the art will also appreciate that while various items are illustrated as being stored in memory or on storage while being used these items or portions of them may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively in other embodiments some or all of the software components may execute in memory on another device and communicate with the illustrated computer system via inter computer communication. Some or all of the system components or data structures may also be stored e.g. as instructions or structured data on a computer accessible medium or a portable article to be read by an appropriate drive various examples of which are described above. In some embodiments instructions stored on a computer accessible medium separate from computer system may be transmitted to computer system via transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link. Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer accessible medium or via a communication medium. In general a computer accessible medium may include a storage medium or memory medium such as magnetic or optical media e.g. disk or DVD CD ROM volatile or non volatile media such as RAM e.g. SDRAM DDR RDRAM SRAM etc. ROM etc.

The methods described herein may be implemented in software hardware or a combination thereof in different embodiments. In addition the order of methods may be changed and various elements may be added reordered combined omitted modified etc. All examples described herein are presented in a non limiting manner. Various modifications and changes may be made as would be obvious to a person skilled in the art having benefit of this disclosure. Realizations in accordance with embodiments have been described in the context of particular embodiments. These embodiments are meant to be illustrative and not limiting. Many variations modifications additions and improvements are possible. Accordingly plural instances may be provided for components described herein as a single instance. Boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of claims that follow. Finally structures and functionality presented as discrete components in the example configurations may be implemented as a combined structure or component. These and other variations modifications additions and improvements may fall within the scope of embodiments as defined in the claims that follow.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

