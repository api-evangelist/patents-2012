---

title: Providing remote application logs for cloud applications
abstract: Applications and their application components are deployed on a cloud platform. The application components generate application logs on the underlying cloud runtime infrastructure of the cloud platform. In one aspect, the application logs may be stored on a network storage on the cloud platform. In another aspect, the application logs may be stored on the cloud runtime infrastructure. The cloud platform provides a service that exposes an interface to remotely provide the stored application logs. The exposed interface is instantiated to process remote requests for application logs for a specified application component. The remote requests are sent from a client. The requested application logs are retrieved based on the implementation of the interface. The application logs are provided to the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09122841&OS=09122841&RS=09122841
owner: SAP SE
number: 09122841
owner_city: Walldorf
owner_country: DE
publication_date: 20121016
---
The increasing software complexity results in changes to product cycles requirements and models for delivering software applications. Changes in customers needs require flexibility in terms of processes landscape and software components. Operational costs are high and a lot is spent on maintenance of the existing infrastructural equipment. Traditionally business customers have to build and maintain their own infrastructure to run on premise applications. Cloud computing is the delivery of computing resources as a service over a network e.g. the Internet . By applying the Software as a Service SaaS model and offering business applications that are hosted online the maintenance costs decrease and time is saved. Software vendors can use the cloud environment to quickly deploy existing software solutions. SaaS is a delivery model where a cloud service provider provides software applications and various hardware and software resources on demand when requested by an end user e.g. customer . A customer of on demand applications is free from the procurement and maintenance of the hardware and software needed for executing the applications.

Platform as a Service PaaS is another category of cloud computing solutions that provides the computing platform including operating system programming language execution environment database and web server to facilitate the development and deployment of on demand applications and services. In PaaS offerings the customer is responsible for more of the execution environment than in the SaaS model. However with PaaS offerings the customer has greater control over the application. Applications can run as SaaS on the infrastructure that is used with a PaaS provider. Another level of cloud computing solution is Infrastructure as a Service IaaS in which the service provider offers computing resources in the form of physical or virtual machines data storage networks load balancers etc. In some cases the customer provides applications to be executed possibly along with operating system images and other portions of the execution runtime environment.

Application developers or users of cloud based applications need access to the underlying infrastructure to perform certain operations. This way they can have a similar experience to what they have when working with on premise solutions. Direct access to the underlying infrastructure e.g. virtual machines VMs with operating systems and application servers installed on top of them in a PaaS environment is usually given to a defined number of users such as platform operators. Monitoring systems help administrators to identify resource bottlenecks or problems and take the required action. During the development phase it is a common practice to insert logging statements within the code to produce informative logs at runtime that can be helpful for troubleshooting or for analysis purposes.

Logging is a process of creating and storing permanent records of events for a particular system or software application that can be reviewed printed and analyzed. These records can contain short messages the source of the records timestamps of the events log levels specifying the importance of the records etc. Log messages can include a detailed sequence of statements that describe the events happening during an operation as they are executed. Logger objects have predefined levels that specify the granularity that will be applied when logging messages in the log files. A logging configuration can be defined for a particular software application or component. The logging configuration defines the log levels that will be applied while the software application or component is running Java logging framework is a logging package for the Java Platform that defines a couple of log levels for a logger object e.g. fatal error warning info debug trace others. Based on the log level and the events that occur during the execution of the application log messages are generated and stored as logged data e.g. in log files . Log messages can be used not only by application developers but also by the system administrators that identify problems in system operations. Therefore it is essential to keep logs during the whole execution of a given software application or a system. To retrieve the logged data for an application deployed on a cloud platform the underlying cloud infrastructure should be accessed.

Embodiments of techniques for providing remote application logs for cloud applications are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of the embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one of the one or more embodiments. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

Monitoring application servers and application components that run on top of the servers is a process that is important for on premise and on demand solutions. Software applications that are offered as SaaS are deployed on a given cloud platform and run on data centers operated by a cloud vendor. As more and more applications are offered as services the need for maintenance of these applications increases. Application developers need to monitor the applications during runtime and therefore need access to the stored application logs when troubleshooting customer s problems. However when an application is deployed on a cloud platform the cloud runtime infrastructure cannot be directly accessed by the application developer. Thus application developers should be enabled to remotely preview relevant application logs to easily analyze the behavior of running applications. In addition application developers need to access this logging information without the additional assistance from cloud platform operators.

In one embodiment the request sent from the client can specify which application components are monitored and request the stored logged data for them. For example the client can be a web application for providing information about deployed application components on the cloud platform . Another example of the client can be an Integrated Development Environment IDE that provides the option of a software developer to access the Cloud Platform Monitoring System . The IDE can be the Eclipse development environment which could be used to develop applications in various programming languages such as but not limited to Java Perl C C PHP etc. Furthermore the client can be a plug in in the Eclipse development environment. Yet another example of the client can be a command line console client that a user can use to enter commands. The command line console client can be designed to communicate with the Cloud Platform Monitoring System . In one embodiment the client can be provided by the cloud platform .

In one embodiment the cloud platform can provide platform accounts that can be used by clients such as the client . In one embodiment an account can be a logical entity for separation such as an account that a customer of a cloud platform can receive. For example customers can use the account for their own business needs and use a cloud provided space for the account for creating different applications. The cloud provided space may be a repository or storage. One account can use one space for a number of applications deployed and started on the cloud platform. The applications can also include a number of application components.

The request from the client can be received over a remote communication channel . For example the communication channel can be based on Hypertext Transfer Protocol HTTP . The Cloud Platform Monitoring System can retrieve remote application logs e.g. logged data for the requested application components from the application components deployed and started on VMs e.g. Virtual Machine  Virtual Machine  Virtual Machine N and other VMs provided by the cloud platform and having application components running on top of them. In one embodiment the execution of the application components such as Application Component can record log messages. In another embodiment the recorded log messages can be interpreted as logged data describing the behavior of a running software component a software application or a software system. The logged data may correspond to logger objects that are inserted in the programming code of the Application Component  . The logged data can be stored on a server running on a VM such as the Virtual Machine  Virtual machine  etc. After processing the request from the client the Cloud Platform Monitoring System may provide the requested logged data for the defined application components. For example the logged data may be provided over HTTP communication channel and displayed by a client in a web browser.

In one embodiment the cloud platform can provide a monitoring system that includes the Log Service . The Log Service can expose an API Application Programming Interface which can be accessed by external units such as a client . The API may represent a specification that defines the communication between software components. In one embodiment the API can provide interfaces that allow operations like listing available log files for deployed application components getting a specified log file etc. These operations can support authentication and authorization features. The service can serve responses to the client s calls that request logged data for defined application components or applications. The calls made from the client can be received over a remote communication channel for example based on HTTP. The exposed API can include an interface which can be a programming interface. In one embodiment the implementation of the interface retrieves logged data for the requested application components or applications. For example a client may request from the Log Service the logged data for the Application Component . The Log Service provides the API where the interface is instantiated and can serve requests from the client . The retrieved requested logged data can be provided to the client . For example the logged data may be provided for downloading in a file format or presented in a web browser.

In one embodiment the design and implementation of the Log Service can be based on a Representational State Transfer REST architecture style. REST defines a set of architectural principles by which one can design a service web service that is concentrated on resources that are transferred over HTTP. REST principles can be applied with a wide range of clients written in different programming languages. Web services that are based on the REST architecture style also called RESTful Web services use HTTP method explicitly and in a way consistent with the protocol definition. With RESTful services there is a one to one mapping between create read update and delete operations and HTTP methods. For example when retrieving a resource a GET method is used. RESTful Web services expose directly structure like Uniform Resource Identifiers URIs . The Log Service can be designed as a RESTful service which exposes an API to various clients that can be built on top of it to present application log files logged data to end users e.g. application developers . In one embodiment an end user may request logged data by using a web browser. In another embodiment a custom application or a mobile application may be developed in such a manner that they use the logging functionality provided by the Log Service .

The API specification may define methods that can be used. If the API is a REST API the REST API specification may provide description of the HTTP methods that are available and a path that can be used for a Uniform Resource Location URL based request. Table 1 presents a specification for two exemplary methods provided by a REST API. These methods can provide remotely application logs for cloud deployed applications and application components for an authenticated and authorized user of an account on a cloud platform such as the cloud platform . The specification may further describe the possible HTTP response codes which can be returned to the client that requested the logged data. For example the response code can be 200 which means that the request has succeeded. If the response code is 401 this means that the request was unauthenticated. Response code 403 represents a response when the user client is not allowed to access the logged data that is requested for the account application component.

The request path is described with parameters account application component and file. Table 2 presents description of the used parameters in the path.

Table 3 presents a sample output that can be returned to the client after requesting logged data using the GET method and applying it to a provided URL. For example the URL can be https log api logs . Table 3 presents the output for a request made in the following form https log api logs acme prjmgmt web which represents a request for account acme for application prjmgmt and for application component web . In one embodiment the output may be provided in Java Script Object Notation JSON format.

If a request which includes the file name is made for example https log api logs acme prjmgmt web ljs trace2011 06 21.log the response may include an archived version of the log file.

In one embodiment the Cloud Platform Monitoring System may persist the received logged data on a Logs Share . The Logs Share can be a network storage associated with the Cloud Platform Monitoring System . The logged data in the Logs Share can be organized and grouped by accounts on the cloud platform. For example for an account the logged data can be arranged in a hierarchy structure organized by accounts applications and application components. The Logs Share can maintain up to date logged data by receiving regular portions of logged data from the virtual machines Virtual Machine  etc. coming through the Cloud Platform Monitoring System . The interval logged data may be sent from the VMs to the Logs Share at different intervals. That is the intervals can be set to different time period scenarios. For example the update can be done every 10 seconds one a day etc.

Some embodiments may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components maybe implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. Examples of computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment may be implemented using Java C or other object oriented programming language and development tools. Another embodiment may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in details.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the one or more embodiments. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments including what is described in the Abstract is not intended to be exhaustive or to limit the one or more embodiments to the precise forms disclosed. While specific embodiments of and examples for the invention are described herein for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. These modifications can be made in light of the above detailed description. Rather the scope is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

