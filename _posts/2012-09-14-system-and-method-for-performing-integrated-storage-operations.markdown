---

title: System and method for performing integrated storage operations
abstract: The present invention relates to a method for performing integrated storage operations on an information store. The present invention comprises identifying a plurality disparate types of storage operations stored in a policy option table. A first storage operation is performed according to a first set of storage criteria stored in the policy option table and a second operation, disparate from the first storage operation, is performed according to a second set of storage criteria stored in the policy option table.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08583594&OS=08583594&RS=08583594
owner: CommVault Systems, Inc.
number: 08583594
owner_city: Oceanport
owner_country: US
publication_date: 20120914
---
This application is a continuation of U.S. patent application Ser. No. 13 179 033 entitled SYSTEM AND METHOD FOR PERFORMING INTEGRATED STORAGE OPERATIONS filed on Jul. 8 2011 which is a continuation of U.S. patent application Ser. No. 12 794 478 entitled SYSTEM AND METHOD FOR PERFORMING INTEGRATED STORAGE OPERATIONS filed on Jun. 4 2010 now U.S. Pat. No. 7 979 389 which is a continuation of U.S. patent application Ser. No. 10 989 893 entitled SYSTEM AND METHOD FOR PERFORMING INTEGRATED STORAGE OPERATIONS filed on Nov. 15 2004 now U.S. Pat. No. 7 734 578 which claims the benefit of U.S. Provisional Patent Application No. 60 519 540 entitled SYSTEM AND METHOD FOR PERFORMING INTEGRATED STORAGE OPERATIONS filed on Nov. 13 2003. These applications are hereby incorporated by reference herein in their entireties.

This application is related to the following patents and pending patent applications each of which is hereby incorporated herein by reference in its entirety 

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosures as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever.

The invention disclosed herein relates generally to performing integrated storage operations including management of snapshots backups and other storage operations performed on an information store. More particularly the present invention relates to a system and method for combining different data snapshot and backup strategies for homogenous data protection according universal policies entered by a user or administrator.

To obtain a more thorough understanding of the present invention the following discussion provides additional understanding regarding the manner is which information is typically stored on magnetic media. Using traditional techniques backups of an information store are performed using the operating system s file system. Backup is done by accessing the operating system s OS file system for the information store to be backed up such as the Windows NTFS file system. The file allocation system of the operating system typically uses a file allocation table to keep track of the physical or logical clusters across which each file in the information store is stored. Also called an allocation unit a cluster is a given number of disk sectors that are treated as a unit each disk sector storing a number of bytes of data. This unit the cluster is the smallest unit of storage the operating system can manage. For example on a computer running Microsoft s Windows 95 operating system the OS uses the Windows FAT32 32 bit file allocation table having a cluster size to 4K. The number of sectors is determined when the disk is formatted by a formatting program generally but not necessarily when the OS is installed.

The operating system allocates disk space for a file only when needed. That is the data space is not preallocated but allocated dynamically. The space is allocated one cluster at a time where a cluster is a given number of consecutive disk sectors. The clusters for a file are chained together and kept track of by entries in a file allocation table FAT .

The clusters are arranged on the disk to minimize the disk head movement. For example all of the space on a track is allocated before moving on to the next track. This is accomplished by using the sequential sectors on the lowest numbered cylinder of the lowest numbered platter then all sectors in the cylinder on the next platter and so on until all sectors on all platters of the cylinder are used. This is performed sequentially across the entire disk for example the next sector to be used will be sector on platter of the next cylinder.

For a hard fixed disk FAT sector cluster etc. size is determined when a disk formatting program formats the disk and are based on the size of the partition. To locate all of the data that is associated with a particular file stored on a hard disk the starting cluster of the file is obtained from the directory entry then the FAT is referenced to locate the next cluster associated with the file. Essentially the FAT is a linked list of pointers to clusters on the disk e.g. each 16 bit FAT entry for a file points to the next sequential cluster used for that file. The last entry for a file in the FAT has a number indicating that no more clusters follow. This number can be from FFF to FFFF base inclusive.

A sixteen byte section of a FAT is depicted. The first four bytes store system information. A two byte pair bytes four and five are the beginning bytes of the FAT used to track file information. The first cluster for data space on all disks is cluster . Therefore bytes four and five are associated with the first cluster of disk sectors used to store file information. Bytes six and seven are associated with cluster . . . and bytes fourteen and fifteen are associated with cluster . 

This example illustrates how sectors associated with a file referenced in a directory are located. The cluster information bytes in the directory point to cluster number . The sectors in cluster not shown contain the initial sector of data for the referenced file. Next the FAT is referenced to see if additional clusters are used to store the file information. FAT bytes four and five were pointed to by the cluster information bytes and the information stored in bytes four and five in the FAT point to the next cluster used for the file. Here the next cluster is . Accordingly cluster contains the next sector of data for the referenced file. FAT bytes ten and eleven contain an end of file flag FFFF indicating there are no more clusters associated with the referenced file. All of the information comprising the referenced file therefore is contained in clusters and on the disk.

As with other applications running on the computer a typical copy application provides a read request to the operating system which handles interpretation of the information contained in the FAT and reading of each file for the copy application. A file system is provided on the destination storage device that is used by the copy application to write files. Similarly the recovery portion of the copy application or a separate recovery application may read files from the destination storage device for recovery of the information.

One currently available alternative is to perform snapshots of an information store. With current snapshot systems and methods administrators create an incremental copy that is an exact point in time replica of the source volume each time a snapshot is taken. The snapshot is stored locally on the information store from which it was taken and tracks incremental changes to the data in the information store. Furthermore changed data is written to a new location in the information store as tracked by the snapshot. With knowledge regarding the change as well as the changed data the snapshot can be used to roll back changes to an information store to the point in time when the snapshot was taken. If there should be any logical corruption in the information store s data that went un detected for a period of time however these incremental updates faithfully replicate that logical corruption to the data when copying. Additionally other drawbacks are associated with currently known snapshot techniques including the significant drawback of preventing restoration from the snapshot in the event that the information store fails as both the snapshot and the information store become unavailable.

Another technique known in the art is serverless or extended copy. Extended copy systems utilize intelligent devices to perform copying of an information store e.g. a disk array attached to a database server. These systems conduct copying without requiring the use of a copy server or the server whose data is being copied to move a data stream from source volume to a storage device such as a tape drive. The intelligent device is typically a data router SCSI to Fibre Channel bridge or other network infrastructure device that is in communication with an information store or other storage devices e.g. in a storage area network SAN . Recently a set of extended copy commands have been incorporated into storage devices themselves which are connected to the SAN. In this case the server tells the storage device which data in an information store to copy and the storage device then moves the data directly from the information store to the storage device. Since there is no server involved in transporting the data stream this copy method is known as serverless.

Over time an organization may employ different combinations of techniques known in the art to perform backups snapshots and other copying of information stores. Unfortunately none of these techniques or the systems that implement them are compatible which heretofore disallows using universal policies to leverage multiple techniques known to the art in a unified fashion. The problem of not having a universal backup or snapshot policy becomes especially pronounced when applied to a multiple host environment for example several hosts coupled to a storage area network SAN . In these environments for example it would be advantageous to periodically perform a full copy of a information store which organizes the copy by file names and folders and includes the capability to restore individual data file names and folders. Yet it is also advantageous to perform periodic snapshots of an information store where each snapshot is an index of the data contained on an information store at the point in time when the snapshot was taken.

The incompatibility of current systems causes significant difficultly in host network administration. For example if a host administrator wishes to restore a full copy or snapshot of an information store the correct software must be loaded and a copy or snapshot created at some point in time must be selected for restoring. In the case of restoring a full copy selected files may be restored. In the case of a snapshot the administrator is typically limited to restoring a whole snapshot. If for example recovery of backup files or a snapshot is desired because of a discovered problem with a volume the selected copy or snapshot should be one that was created before the problem occurred. Even after finding a seemingly correct copy or snapshot to restore however it is quite possible that a different snapshot or copy system created a copy or snapshot that was performed even later in time but before the problem occurred which would be more desirable to restore. Nevertheless the administrator has no way to determine if this is the case.

Related to this problem currently incompatible backup systems do not leverage off each others capabilities. For example a snapshot cannot be leveraged to perform typical operations performed using a full copy including file or folder level restoration. Even limiting to just using snapshots those created by different software systems may not even be compatible and therefore one type of snapshot system cannot leverage the capabilities of the other.

Thus there is a need for systems and methods employing policies to determine the time and order in which one or more storage operations are performed on one or more data stores.

The present invention addresses among other things the problems discussed above with creating copies up data using current and past systems that do not provide consistent and centralized storage policies nor compatibility between these disparate techniques.

In accordance with the present invention a data protection agent is provided for performing snapshots full copies and other storage operations on information stores communicating over a network. A proxy host may execute the data protection agent that in connection with one more ore media agents performs storage operations on information stores across the network. As an alternative to using a proxy host the data protection agent may be stored and executed on an intelligent device on the network such as a router or other network infrastructure device or another node on the network.

According to one embodiment the data protection agent manages and controls different types of storage operations according to diverse formats which are otherwise incompatible. The data protection agent executes e.g. a copy or snapshot of the information store and processing of the copy or snapshot is performed on the proxy host computer or intelligent device to relieve the target host of processor usage. Further processing is then performed whether the processing requires the snapshot to merely be stored in a storage device or requires that a full copy operation be performed including utilizing the FAT table of the target volume to create a snapshot or full copy that can be browsed down to the file and folder level also known as an image level copy.

Processing may also include converting metadata describing the snapshots and copies into a normalized format so an easy facility may be provided for an administrator to restore the data generated by the disparate storage operations.

With reference to embodiments of the invention are presented. presents a block diagram illustrating one embodiment of a network of host computers and connected by a network which may comprise for example a storage area network SAN or a packetized local or wide area network and a system for performing storage operations on data which may include the use of storage policies.

A storage policy is generally a data structure or other information which includes a set of preferences and other storage criteria for performing a storage operation. The preferences and storage criteria may include but are not limited to a storage location relationships between system components network pathway to utilize retention policies data characteristics compression or encryption requirements preferred system components to utilize in a storage operation and other criteria relating to a storage operation. A storage policy may be stored to archive media as metadata for use in restore operations or other storage operations or to other locations or components of the system. Storage operations as contemplated by the present invention include any operation where data is transferred from one volume or device to another such as but not limited to backups snapshots clones etc.

Each host computers and is in communication with an information store and respectively each of which stores data for client computers not shown . One of the host computers a proxy host contains a data protection agent which is a software module that is generally responsible for coordinating the actions of one or more data agents for fully copying performing snapshots archiving migrating and recovering data in the information stores and of each of the one or more of the other host computers and . According to one embodiment the data protection agent is operative to perform all the functions provided by the one or more data agents .

The proxy host may be used to create proxy copies of an information store . Typically when making a copy of an information store the host works with a media agent to copy data from an information store to a storage device. In the process the media agent updates its index to indicate the given information store from which the copy was made. Unfortunately the resources of the host are utilized in the process. Using a proxy host processing is offloaded to the proxy which performs the functions of the host working with a media agent to write the data from an information store to a storage device . The proxy also supplies metadata for storage in the media agent s index indicating the information store from which the copy was made. Alternatively a data protection agent running in the storage manager may act as the proxy host eliminating the need for a separate proxy host for this operation. In embodiments wherein the storage manager has enough memory and processing power to act as the proxy host the data protection agent runs on the storage manager and the media agents store the file of clusters directly to a storage device.

Advantageously the present invention may be used to create snapshots from backups that have been created using techniques known to those of skill in the art. A backup is taken of an information store which is subsequently restored on a storage device that is located remotely from the information store e.g. a proxy host. A snapshot is taken of the restored backup and metadata is used to record that the snapshot was taken from the information store from which the backup was taken not the restored backup.

Each of the host computers and may contain a local data agent which may perform copy operations on an information store and . Each data agent has the capability of performing local low level read and write calls at least the cluster level under the control of the data protection agent . It should be noted that clusters are but one level of granularity by which the data agent may interact with an information store e.g. blocks extents etc. The operations performed by the data protection agent however may be carried out without the a data agent present in each host computer and by providing the data protection agent with access to system level commands on the local hardware or operating systems of the host computers and .

As shown the system of also includes a storage manager including a volume replication table and a storage manager index cache and one or more of the following a client an information store a data agent a media agent a media agent index cache and a storage device . One exemplary embodiment of the present system is the CommVault QuNetix three tier system available from CommVault Systems Inc. of Oceanport N.J. further described in U.S. patent application Ser. No. 09 610 738 and hereby incorporated by reference in its entirety.

These components may either reside within or at the same location as the proxy host or may be connected through the network as long as a data path is provided between the storage manager and the data protection agent so that they may work together in instructing the data and media agents regarding the manner in which to store data in the storage devices . Alternatively the data protection agent may be included in the storage manager providing commands to the proxy host data and media agents to control storage operations on information stores and . In some embodiments the system has two or more data protection agents one each at various locations in the system working separately or in cooperation with each other.

The data protection agent provides a single interface for specifying specific data to copy or take a snapshot of and allows a user or administrator to define a work flow for after a snapshot or backup is created. For example the user can choose to schedule a snapshot described below to run three times a day and only on the second attempt choose to perform a full copy of all data in an information store. Similarly the user can choose to schedule full copies of information stores once every day of the week but just on Sunday. Further the data protection agent can be configured to perform a local area network volume copy command LANVolCopy hardware based serverless data movement or software based serverless data movement to copy the data to create the point in time copy.

The storage manager is generally a software module or application that helps coordinate and control storage of backups and snapshots into storage devices . The storage manager communicates with the proxy host data agents media agents and storage devices to control full copies snapshots migrations recoveries etc. .

The storage manager maintains a storage manager index cache . Data in the storage manager index cache which the storage manager collects from data agents media agents user and other applications is used to indicate track and associate logical relationships and associations between components of the system user preferences management tasks and other data that is useful to the system. For example the storage manager index cache may contain data that tracks logical associations between media agents and storage devices . The storage manager index cache may also contain data that tracks the status of storage operations to be performed storage patterns such as media use storage space growth network bandwidth service level agreement SLA compliance levels data protection levels storage policy information storage criteria associated with user preferences data retention criteria storage operation preferences and other storage related information.

In order to track of the multiple snapshots the data protection agent uses a database table or other data structure or file map referred to as a replication volume table which is stored in the proxy host information store . Alternatively in the case where a special proxy host is not used the replication volume table is stored in a storage device .

The replication volume table among other advantages facilitates the tracking the results of multiple storage operations across multiple storage devices . For example the system might as directed by a policy or a user store a first snapshot to on first storage device A such as a tape drive or library and then store subsequent snapshots containing only the changed cluster s t on a second storage device B such as an optical drive or library. Alternatively instructions may be stored within system components e.g. a storage manger or media agent directing the storage devices used to store snapshots. Information regarding the storage device to which the snapshot is written as well as other information regarding the snapshot generally is written to the replication volume table . An exemplary structure according to one embodiment is as follows TABLE US 00001 id serial PRIMARY KEY FOR THIS TABLE PointInTime integer CreationTime integer Timestamp of RV creation ModifyTime integer Timestamp of last RV update CurrentState integer Current state of RV CurrentRole integer Current role of RV PrimaryVolumeId integer FOREIGN KEY FOR SNRVolume TABLE PhysicalVolumeId integer FOREIGN KEY FOR SNRVolume TABLE ReplicationPolicyId integer FOREIGN KEY FOR ReplicationPolicy TABLE RVScratchVolumeId integer FOREIGN KEY FOR RVScratchVolume table Flags integer JobId LONGLONG SnapVolumeId integer FOREIGN KEY FOR SNRVolume TABLE

In the exemplary replication volume table id is a unique identification number assigned by the system to the snapshot PointInTime represents the date and time that the snapshot was created CreationTime represents the date and time that the snapshot was completed ModifyTime is the recorded date and time of the snapshot taken prior to the current snapshot CurrentState is an identifier used to indicate a current status of the snapshot e.g. pending completed unfinished etc. PrimaryVolumeId is the identifier for the information store from which the snapshot is being made PhysicalVolumeId is a hardware identifier for the information store RVScratchVolumeId is an identifier for a scratch volume which in some embodiments may be used to buffer additional memory as known to those of skill in the art Flags contains a 32 bit word for various settings such as whether a snapshot has been taken previously etc. JobId stores the identifier for the job as assigned by a storage management module and the SnapVolumeId points to the physical destination storage device to which the snapshot is written.

As each snapshot indexes the changes to an information store at a given point in time a mechanism must be provided that allows the snapshots taken of an information store to be chronologically related so that they are properly used for restoring an information store . According to the replication volume table the CurrentRole integer may store a value for the relative position of a given snapshot in hierarchy of snapshots taken from a given information store e.g. first t second t t t etc. 

A media agent is a software module that transfers data in conjunction with one or more data agents as directed by the storage manager between an information store and one or more storage devices such as a tape library a magnetic media storage device an optical media storage device or other storage device. The media agent communicates with and controls the one or more storage devices . According to one embodiment the media agent may communicate with the storage device via a local bus such as a SCSI adaptor. Alternatively the storage device may communicate with the media agent via a Storage Area Network SAN . Other types of communication techniques protocols and media are contemplated as falling within the scope of the invention.

By way of example the media agent receives snapshots preferably with the changed data that is tracked by the snapshot from one or more data agents and determines one or more storage devices to which it should write the snapshot. According to one embodiment the media agent applies load balancing algorithms to select a storage device to which it writes the snapshot. Alternatively the storage manager instructs the media agent as to which storage device the snapshot should be written. In this manner snapshots from a given information store may be written to one or more storage devices ensuring data is available for restoration purposes in the event that the information store fails. Either the media agent or the storage manager records the storage device on which the snapshot is written in a replication volume table thereby allowing the snapshot to be located when required for restoring the information store .

A media agent maintains a media agent index cache that stores index data the system generates during snapshot migration and restore operations. For example storage operations for Microsoft Exchange data generate application specific index data regarding the substantive Exchange data. Similarly other applications may be capable of generating application specific data during a copy or snapshot. This data is generally described as metadata and may be stored in the media agent index cache . The media agent index cache may track data that includes for example information regarding the location of stored data on a given volume. The media agent index cache may also track data that includes but is not limited to file names sizes creation dates formats application types and other file related information information regarding one or more clients associated stored data information regarding one or more storage policies storage criteria storage preferences compression information retention related information encryption related information and stream related information. Index data provides the system with an efficient mechanism for locating user files during storage operations such as copying performing snapshots and recovery.

In some embodiments components of the system may reside on and be executed by a single computer. According to this embodiment a data agent media agent and storage manager are located at the client computer to coordinate and direct local copying archiving migration and retrieval application functions among one or more storage devices that are remote or distinct from the information store . This embodiment is further described in U.S. patent application Ser. No. 09 610 738.

When employing a policy option table such as the exemplary embodiment presented in the data protection agent in conjunction with one or more data and media agents performs the operation designated in the table to the target host identified in field and target volume and stores the results in the destination volume identified in field . After the specified time interval the subsequent operation is performed. This provides for simplicity of policy design and entry of options by the administrator. In other embodiments however other more complex options may be available and stored in the table . For example contingencies may be added in which operations are directed to cease for a specific target host if an error encountered during processing a previous operation on the same target host. If the contingency arises the storage manager may send a page or message to a system administrator s communication device who may diagnose the problem and re start operations for the target host.

One embodiment of a method for using the policy option table for executing copy operations on an information store is illustrated in the flow diagram of . When the data protection agent is initialized options are received form a user e.g. system administrator regarding the operations that are to be performed step . The policy option table may be used to store the sequence of operations to be carried out. Defining a policy a such as a storage policy to perform one or more different storage operations is referred to herein as an integrated storage operation.

To simplify the explanation of the present embodiment illustrates the steps performed by the proxy host or data protection agent with respect to information store. Those skilled in the art however should recognize that the steps performed by the data protection agent may be used to perform full copy snapshot and other storage operations with regard to multiple remote information stores over a network and to store the resultant information in multiple destinations according to for example a destination volume identifier that may be contained in the policy option table. Furthermore the storage manager may control multiple data protection agents over the network so that the increased processing power may be utilized to perform the instructed operations with each data protection manager having slave data protection agents or data agents. Finally it should be noted that full copy operations beyond those presented in the present embodiment of the method are contemplated as falling within the scope of the invention.

Turning to step the data protection agent may execute a configuration menu through an interface e.g. a Graphical User Interface GUI or an Application Programming Interface API to create or edit a given policy option table. Options such as a time interval between operations or in some embodiments specific dates and times to perform the operations may be entered. The sequence of the operations and other options may be stored in the policy option table.

After configuration step the data protection agent reads the policy option table including the specified sequence of operations step . The data protection agent initiates a loop to perform the sequence of specified operations step . At each point in time specified in the policy option table or after a specified time interval since the completion of the prior operation the data protection agent determines what type of operation is called for by referring to the policy option table.

According to the present embodiment if a full copy of all data in an information store t is to be performed step then the data protection agent sends the proper commands to a given data agent to perform the full copy of the specified information store on a specified host computer. Similarly where the policy option table indicates that a snapshot step or a serverless copy is to be performed step processing is released to the proper subroutine e.g. serverless copy subroutine step to execute the operation identified in the policy option table. After a given operation is performed steps the routine performs a wait operation step until the interval provided by the policy option table expires. At this point processing returns to the start of the loop step where the next operation in the policy option table is executed.

In another embodiment the data protection agent is implemented to run on a network router or other network infrastructure device. Those skilled in the art should recognize that it is become more commonplace to run utilities from a network router including in serverless copy operations. In embodiments of the present invention in which the data protection agent resides in a router on the network the data protection agent communicates with the storage manager which is run from a host in communication with the network.

After processing the snapshot processing returns to step . If the next operation in the policy option table is a snapshot processing moves to the subroutine of which presents a flow diagram illustrating the steps performed during a snapshot according to one embodiment of the present invention. First a check is performed to determine if the present snapshot is an initial snapshot taken of an information store step . If step evaluates to true the data agent to perform an initial full snapshot of the data stored in the information store e.g. indexing the location of all data in the information store in conjunction with one or more media agents and copies all of the data on the information store with the initial snapshot to a storage device step .

Advantageously the snapshot and data copied from the information store may be written to a storage device that is remote or different from the information store step e.g. local data from a given workstation written to a storage array attached to a network. The selection of a destination storage device for the snapshot may be accomplished using one or more techniques known to those of skill in the art. For example a fixed mapping may be provided indicating a storage device for which all snapshots and copied or changed data should be written. Alternatively an algorithm may be implemented to dynamically select a storage device from among a number of storage devices available on a network. For example a storage manager may select a media agent to handle the transfer of the snapshot and copied data to a specific storage device based on criteria such as available bandwidth other scheduled storage operations media availability storage policies storage preferences or other consider considerations. According to certain embodiments the snapshot contains information regarding the files and folders that are tracked by the snapshot.

If the present snapshot referred to as snapshot t is not the initial snapshot called snapshot to herein step then the data protection agent takes a snapshot of the information store and a comparison is performed such that only the clusters which have changed or been created since the last snapshot t was taken of that information store are copied step . For example in some embodiments the data agent employs a block filter or similar construct known to those of skill in the art to compare snapshot twith tand thereby detect changed clusters on an information store. Alternatively the data agent may use other techniques know in the art such as Copy on Write COW to identify changed data on an information store. If a given cluster in the information store has changed since the last snapshot in which the cluster appears or if the cluster from the information store was created subsequent to the last snapshot then the cluster is read from information store and stored with the new snapshot being written to the storage device step .

One embodiment of a snapshot used to track clusters read from the information store to clusters in a snapshot as well as to map file and folder names corresponding to the snapshot clusters is illustrated in . During the scan the data agent creates a snapshot and writes data e.g. new or changed data to a storage device . According to the present embodiment the snapshot is illustrated as a flat file data structure although those of skill in the art will recognize that the snapshot may be embodied in a number of disparate types of data structures.

The snapshot is used to associate the original cluster numbers from an information store with clusters on a storage device which in the present embodiment is a magnetic tape. It should be appreciated by those of skill in the art that the present invention is not limited to magnetic tape and that the systems and methods described herein may be applicable to using snapshots with other storage technologies e.g. storing disk geometry data to identify the location of a cluster on a storage device such as a hard disk drive.

The tape offsets for the clusters in the snapshot are mapped to original disk cluster information . File and folder names may be scanned from the information store s FAT and also mapped to the tape offsets . A file part column in the snapshot tracks the clusters for each file and folder where each file and folder contains an entry for the first cluster . For files or folders that are stored in more than one cluster sometimes not in contiguous clusters the offset table entry for each further cluster is numbered consecutively .

In order to identify the files and folders represented by the stored clusters e.g. changed data in the snapshot the map may exclude data from columns relating to the original disc clusters and last snapshot . In order to keep track of changed verses unchanged clusters however the original disk cluster information is stored in the map . Other information may also be stored in the map such as timestamps for last edit and creation dates of the files.

For each snapshot even though only clusters that have been changed or created since a previous snapshot are tracked in a given snapshot after the initial snapshot to the snapshot may be provided with the data from all previous snapshots to provide the latest snapshot with folder and file information such that a picture of the entire information store is maintained concurrently each snapshot. Alternatively this may be bypassed in favor of creating a snapshot that indexes all data at a given point in time in the information store and copying only changed data.

Entries from each snapshot may also contain a last snapshot field that holds an identifier for the last snapshot containing the cluster indexed by the entry at the time the current snapshot was created. According to an alternative embodiment e.g. for snapshots that do not store the information from the information store s FAT the snapshot only tracks clusters stored in the information store with the clusters indexed by the snapshot. For those embodiments the snapshot contains neither file and folder information nor file part information .

One advantage of using the data protection agent to manage snapshots and backups of the multiple hosts is the ability to consolidate metadata regarding the various different kinds of snapshots backups and other copies made by various storage operations into a unified view of the storage operations performed on a given information store. For example just after each snapshot or backup is performed the data protection agent may convert the metadata describing the resultant into a universal data format. This conversion allows the data protection agent for example to provide a universal restore interface for accessing the results of all copy operations.

Taking the example of a snapshot the metadata generated by taking a snapshot may be converted into a normalized metadata format. Similarly metadata generated by creating a backup copy of data may also be converted into a normalized metadata format. Thus because the system stores metadata describing the disparate copy operations comparisons may be made between the metadata to derive conclusions regarding the relationships of the underlying data e.g. what volume the underlying data came from.

After selecting the desired copy the data protection agent allows the administrator to chose a restore destination host information store and volume to which the copy is restored defaulting to the original target volume and host from which the copied was taken step . An option to replace the whole volume or to just copy the contents of the volume to a folder in the restore destination volume is provided. Once the restore destination is selected the data protection agent instructs the media agent to restore the selected copy from the storage device to the restore destination.

If the administrator needs to restore files from a snapshot one embodiment of the restore process is described in application Ser. No. 60 519 576 entitled SYSTEM AND METHOD FOR PERFORMING AN IMAGE LEVEL SNAPSHOT AND FOR RESTORING PARTIAL VOLUME DATA filed Nov. 13 2003 which is hereby incorporated by reference in its entirety.

While the invention has been described and illustrated in connection with preferred embodiments many variations and modifications as will be evident to those skilled in this art may be made without departing from the spirit and scope of the invention and the invention is thus not to be limited to the precise details of methodology or construction set forth above as such variations and modification are intended to be included within the scope of the invention.

