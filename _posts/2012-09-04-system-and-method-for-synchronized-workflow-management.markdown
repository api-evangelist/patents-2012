---

title: System and method for synchronized workflow management
abstract: A system may identify a workflow associated with a graphical model and execute the workflow in a number of stages. The system may display a number of components of the graphical model and identify which of the displayed components are associated with or affected by execution of a current one of the stages of the workflow.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08656352&OS=08656352&RS=08656352
owner: The MathWorks, Inc.
number: 08656352
owner_city: Natick
owner_country: US
publication_date: 20120904
---
This application is a continuation of U.S. patent application Ser. No. 11 841 808 filed Aug. 20 2007 now U.S. Pat. No. 8 261 233 which issued Sep. 4 2012 which is a continuation of U.S. patent application Ser. No. 11 432 939 filed May 12 2006 the entire content of which is incorporated by reference herein.

The illustrative embodiment of the present invention relates generally to workflows in graphical modeling environments and more particularly to a workflow manager synchronized with the graphical modeling environment.

Graphical programming languages and graphical modeling environments enable the construction of graphical models such as block diagram models entity flow models flow diagrams computational noncausal models and statechart models. Graphical programming languages provide a wide array of functionality that may be utilized during model design. Frequently there is more than one approach to solving a particular problem achieving a particular goal or following a proven procedure. Achieving a particular goal often requires a set of tasks that are unknown or difficult for a novice user to grasp. A workflow describes the set of tasks that must be completed in order to accomplish particular goals during the design of a graphical model.

Some conventional graphical programming languages provide tools that assist a user in identifying problems with a design and further facilitate the implementation of recommendations designed to address the problems. Unfortunately these conventional tools provide advice that is relatively unstructured in that the advice is not closely associated with a particular portion of a workflow. Additionally these conventional tools do not tailor the graphical modeling environment for a particular task that the model designer is attempting to accomplish. It would be desirable to provide a workflow management tool that provides structured advice and is able to reconfigure the graphical modeling environment in a manner suitable for the particular workflow that is being executed by the model designer.

The illustrative embodiment of the present invention provides a workflow manager that offers structure and control over the graphical modeling environment so that the graphical modeling environment is reconfigured in a manner appropriate for a particular workflow. The workflow manager of the present invention provides hierarchical task management that is synchronized to the graphical modeling environment. The workflow manager allows a model designer to navigate a series of steps required to achieve the goal of a particular workflow. An application programming interface API allows the steps to be customized as required by the end user.

According to one aspect a computer readable medium may contain instructions executable by at least one processor. The computer readable medium may include one or more instructions for receiving a workflow associated with a graphical model one or more instructions for executing a portion of the workflow one or more instructions for synchronizing a display of one or more components of the graphical model relating to the portion of the workflow with execution of the portion of the workflow and one or more instructions for permitting a user to interact with the workflow via the display.

According to another aspect a computing device may include a graphical programming environment including instructions for implementing a graphical model a workflow associated with the graphical model where the workflow may include a number of tasks and a workflow manager to execute at least one of the tasks of the workflow and synchronize a display of one or more components of the graphical model relating to the at least one task with execution of the at least one task. The computing device may also include a processor to execute the instructions of the graphical programming environment.

According to yet another aspect a method may include identifying a workflow associated with a graphical model where the workflow may include a number of tasks executing at least one of the tasks of the workflow displaying a plurality of components of the graphical model and identifying which of the displayed components are associated with or affected by execution of the at least one task while the at least one task is being executed.

According to a further aspect a system may include means for identifying a workflow associated with a graphical model means for executing the workflow in a number of stages means for displaying a number of components of the graphical model and means for identifying which of the displayed components are associated with or affected by execution of a current one of the stages of the workflow.

The workflow manager of the illustrative embodiment of the present invention programmatically tailors and customizes the graphical modeling environment into a form appropriate for an identified workflow associated with a graphical model. By tailoring the graphical modeling environment to the workflow the design process becomes more focused and efficient. The synchronization of the different views of the model design to the workflow allow the user to ascertain how design choices made at each step of the workflow affect the model components impacted by that step of the workflow. The ability to create and restore snapshots of the workflow process allows the design process to be started and stopped efficiently from a number of different points in the workflow without the need to restart the workflow from the beginning of the process.

The graphical modeling environment includes at least one graphical model . The graphical modeling environment also includes at least one workflow for the graphical model that may be identified by a user . The workflow may include a set of tasks and that are required to accomplish the goal associated with the workflow. The workflow may be manipulated via an API that allows the user to define and customize the workflow . The API defines and manages the workflow. The API allows one to register the specific tasks of a workflow along with their relative order optionally a partial order and dependencies of tasks that in turn may be conditional. The API also allows one to specify the structure of the workflow along with the referential integrity between tasks i.e. which tasks are dependent on each other . The API may also allow a user to define and customize a new workflow for the graphical model . Exemplary workflows include a workflow for converting a model from a floating point implementation to a fixed point implementation a workflow for converting a model from one type of fixed point implementation to another type of fixed point implementation a workflow for converting a model from a continuous time implementation to a discrete time implementation a workflow to optimize a model to enhance simulation performance a workflow to configure a model for optimal code generation a workflow to instrument a model for data logging a data management workflow a code generation workflow a verification and validation V V workflow to assess the correctness and robustness of a design a workflow to prepare a model for connecting with instrumentation hardware a workflow to configure reconfigurable input output I O a workflow to setup instruments and a workflow for validating the matching of model interfaces a workflow for calibrating a model to acquired data. Those skilled in the art will recognize that many additional workflows may also be managed by the workflow manager of the present invention and that the above list is included for illustrative purposes rather than to provide an exhaustive listing of all of the workflows available to the present invention. Furthermore it will also be appreciated that a workflow may be nested within another workflow or referenced by another workflow so that the execution of a first workflow is dependent on a second workflow.

The graphical modeling environment also includes a workflow manager that synchronizes the workflow to the graphical modeling environment and progressively tailors the graphical modeling environment based on the current state of the workflow . The workflow manager is discussed in further detail below. The workflow manager of the present invention also allows the user to create a snapshot of the current state of the execution of the workflow . It will be appreciated that although the snapshot is depicted as being stored in the graphical modeling environment on the computing device the snapshot may be stored in other locations accessible to the workflow manager without departing from the scope of the present invention. It will be recognized by those skilled in the art that the workflow manager may be integrated into the graphical modeling environment as a software tool may be a plug in for the graphical modeling environment or alternatively may be a separate application or process communicating with the graphical modeling environment .

The computing device communicates with a display such as a computer monitor television set or some other type of display device. The display may display a view of a listing of the components affected by the identified workflow . The display may also display a dialog workflow manager view alternately with a graphical depiction of the graphical model referred to herein as a modeling environment view . Exemplary modeling environment views include views of a block diagram editor a data flow diagram editor a text based block inside a graphical diagram the block may hold instructions in a dynamically typed language a statechart a sequence diagram a class diagram a physical modeling view and a data explorer view. In other implementations other non visual indicators such as audio or tactile feedback indicators may be used to indicate a component affected by the task in the workflow.

The workflow manager of the present invention may also be utilized in a distributed environment. depicts an alternative distributed environment suitable for practicing the illustrative embodiment of the present invention. A virtualized first computing device hosts a modeling environment . It will be appreciated that the first computing device could also be a physical device. The modeling environment includes at least one workflow that is associated with a graphical model and the workflow manager . In other implementations the workflow manager may be in communication with or integrated into additional third party workflow tools. A user accesses a second computing device to communicate over a network with the modeling environment on the first computing device . The network may be the Internet a local area network LAN a wide area network WAN a wireless network an intranet an extranet or some other type of network. The second computing device may include a graphical model that is transmitted by the user to the modeling environment . In another implementation the workflow may be located on the second computing device while the graphical model is located on the first computing device. Alternatively both the workflow and the graphical model may be located in the modeling environment . In an alternative implementation a server may be used to download code to be executed on a client device in order to practice the illustrative embodiment of the present invention. Other alternative distributed architectures in addition to those discussed here will be apparent to those skilled in the art and are considered to be within the scope of the present invention.

The second computing device is in communication with a display upon which the output of the modeling environment which is transmitted over the network may be displayed to the user . The display may include a workplace component view a modeling environment view and the workflow manager dialog view . The different views and may be displayed simultaneously singly or in various combinations.

The workflow manager of the present invention tailors the graphical modeling environment by synchronizing the model components with the workflow and eliminating or otherwise indicating which components are associated with the current step of the workflow and which are extraneous. It will be appreciated that more than one workflow may be active at a time and synchronized with the modeling environment by the workflow manager . When more than one workflow is active at a time the workflows may share data as well as control. In order to better explain the workflow manager provides a series of screenshots which illustrate the usage and functionality of the workflow manager in a SIMULINK environment. It will be appreciated that the workflow manager of the present invention may be employed in many different graphical modeling environments in addition to a SIMULINK environment.

The workflow may be stored in a database or a file. The workflow may be stored in an XML format. The workflow may be subjected to version control as well as configuration control as a workflow can reference other workflows . The stored workflows may be subjected to differencing and merging operations. Furthermore documentation of the workflow can be generated for example in portable document format PDF POWERPOINT PPT or Hypertext Markup Language HTML format which may show the workflow structure conditions requirements configuration actions etc. The documentation may be in a textual format or a graphical format. Moreover a partial workflow may be constructed from a file. For example a number of slides in POWERPOINT from Microsoft Corporation of Redmond Wash. can be imported and converted into a workflow framework including the branching points that POWERPOINT facilitates. In the case of a partial workflow e.g. a workflow framework or template a workflow editor may be used to supply missing details. The completed workflow may then be exported back to the original or another file format.

A workflow may contain active parts so that once a workflow is selected it may do whatever tasks it can automatically before relinquishing control to the user. Or performing certain tasks automatically can be invoked when a user has prepared a model up to a certain point within one workflow stage. For example once a sample rate is selected for the overall model and a desired solver that satisfies prerequisites the workflow can invoke an automatic discretization of continuous time blocks. Before this discretization it may also be required that the user removes incompatible blocks. Also selecting a workflow may automatically select certain configuration options e.g. for code generation .

The workflow manager provides a hierarchical description of the steps necessary to complete a specific task. One aspect of the present invention is that the workflow manager is synchronized to the modeling environment in a way that reconfigures the entire modeling environment or select portions of the modeling environment if desired specific to the task at hand. For example the workflow manager may reconfigure libraries or a set of blocks available for usage. The workflow manager may also be coupled to a modeling style guideline so that selecting a workflow will result in a particular modeling style guideline being used. As another example of the synchronization of the modeling environment with the workflow the screenshot of depicts the model environment in a default configuration when no particular step is selected. The default view includes a listing of the graphical model components in the case of the present example these components are blocks and connections from the block diagram model. After the selection and expansion of the fixed point conversion workflow and a selection of the step for entering a design min max as depicted in the screenshot of the model environment is reconfigured by the workflow manager. The workflow manager presents a new window pane that includes information related to the current step. The workflow manager synchronizes the workflow step to the alternate views in the modeling environment. Thus depicts a screenshot that provides indicators in this example broken lines showing which components and are affected by the current step in the workflow in the model contents pane and which parts and of the model hierarchy are associated with the current step in the workflow in a model hierarchy pane . The workflow manager also provides an additional workflow manager view dialog that requests additional information from the user for the particular step. It will be appreciated that the selection of other steps in the workflow would reconfigure the environment specific to that task. For example the step prepare for scaling will reconfigure the modeling environment to display views where data type and scaling information is applicable. The manner and extent to which the environment is reconfigured between tasks is up to the workflow author. The corresponding modeling environment view depicted in the screenshot of also graphically indicates which model components and in the block diagram model are affected by the current step in the workflow. The synchronized information provides the designer with a better understanding of the effect of his design choices on the model than is possible with conventional tools.

The workflow manager tailors the graphical modeling environment based upon the current stage in the execution of the workflow. The configuration and arrangement of the environment can change for specific tasks or be shared among tasks which may be configured within the workflow API. The workflow manager analyzes each workflow step to identify which components in the current model are affected by the current step s execution. For example if the workflow calls for the alteration of a sum block in a block diagram model the workflow manager can analyze the block diagram model to determine which other blocks are affected directly or indirectly in a change in the sum block. Each of those blocks and the sum block would then be identified for the user. The author of a particular workflow determines the requirements of each task in a workflow and programs the workflow via the workflow API. The workflow API allows the author to include analysis visualization actions and artifact archival for each task in the workflow.

Although use dashed lines surrounding the components to indicate components affected by the current step in the workflow it should be appreciated that a number of different mechanisms may be used to indicate the affected components. For example the intensity of the component or component label may be varied to indicate that a particular component is or is not affected by a current step in the workflow. Thus affected components and or component labels may be displayed in the graphical modeling environment in bold or with increased intensity while non affected components may be grayed out or simply not shown in a particular view. Alternatively the components and or component labels may be displayed using different colors to indicate which model components are affected by the current step in the workflow. It will be appreciated that many different types of indicators may be used within the scope of the present invention.

Another aspect of the workflow manager of the present invention is its ability to show progression toward a goal. For example once the min max values in the previous example are entered the modeling environment provides feedback. That is as information is entered into the modeling environment for a specific task the result is reflected visually. This allows the user to know what tasks are done and which are remaining. For example the workflow manager may alter the display so that when the Min and Max values are entered for Constant during the enter design min max an icon turns from yellow meaning not done to green meaning done . Alternatively as depicted in the screenshot of the constant label may be surrounded by dotted lines to indicate the value has been entered while model hierarchy elements and and model contents and are surrounded by dashed lines indicating that the workflow is not done with them yet. A similar depiction is shown in the graphical modeling view of where block diagram element the constant block is surrounded by dotted lines to indicate completion in the workflow while block diagram elements and are surrounded by dashed lines to indicate their lack of completion. As noted above color display intensity or other forms of indicators may be substituted for those shown herein.

In one aspect of the present invention the workflow may reference a programmatic API that allows a user to add custom workflows to add and remove steps from existing workflows and to perform other tasks. In an exemplary implementation the API is implemented using a MATLAB from The MathWorks Inc of Natick Mass. programming interface but many other implementations are possible within the scope of the present invention. shows a screenshot of a workflow that may be defined and customized through a provided API. The provision of an API allows a user to define and customize a workflow that synchronizes and controls the layout of the graphical environment. The order of tasks is controlled through the API as well as the dependencies between tasks. For example if task 2.3 depends on task 1.2 that information can be specified which allows the workflow manager to prevent progress on task 2.3 until task 1.2 is complete. In addition the API allows a user to specify connectivity to other workflows as well as types of people conducting the workflow. This is important since it allows a lower level workflow to be reused by more than one higher level workflow which may involve more than one user.

Workflow navigation items can be superimposed on the model. For example a forward and backward button may be present on the model canvas. The appearance of the navigation items and the workflow in general can be designed using graphical editing environments that have a set of workflow specific operations for example forward backward and checkpoint operations available for drag and drop design. The graphical modeling environment may then operate in two different modes one for editing the workflow and the appearance to the model designer and another where the workflow is affected. The workflow manager may also be used in conjunction with templatized workflows or parameterized workflows and workflow fragments that represent a portion of a larger workflow.

The workflows created and or altered via the API perform a number of functions. The workflow collects input from the user and performs requested actions. Additionally the workflow archives measurements results and or data produced by the user input and or requested actions. The workflow may thus be used to not only achieve a goal but also to produce the necessary artifacts to prove that a goal was met. The proof of completion may meet a standard such as DO 178B. Additionally the workflow and its associated API allow the workflow author to specify which tasks should be validated against acceptance criteria. Acceptance criteria are established for a model prior to conducting a workflow. Many types of acceptance criteria are possible depending on the goals of the workflow or application needs. For example a typical acceptance criterion is to check that the model can still be compiled after a change to the model. Another example acceptance criterion is that the simulation result matches a specified baseline after a change to the model. In other words as the user performs tasks within the workflow the model changes and is therefore continuously validated against a set of acceptance criteria. The acceptance criteria and the workflow may be specified using object constraint language OCL .

Acceptance criteria may be represented as a separate unique node in the workflow tree. Acceptance criteria include two types of acceptance criteria workflow author defined acceptance criteria and user defined acceptance criteria. The workflow author would determine if user defined acceptance criteria is required. Acceptance criteria has levels e.g. mandatory or desired. Tasks may register which acceptance criteria they have to pass in order to be register as passing.

The workflow manager of the present invention also provides reporting capability to indicate to a user how much work remains to be done. This reporting can be output in a variety of methods including but not limited to HTML and PDF reports for example or directly in the workflow manger itself. The screenshot in depicts the workflow manager displaying a Status summary that indicates that 27 blocks in the model require min max data.

In another aspect of the present invention the workflow manager allows a user to create snapshots that represent the current state of execution of the workflow. The snapshot captures both workflow information entered by the user and model information. The snapshot includes all of the data necessary to recreate the exact state of the model and its workflow. Snapshots can be saved and restored thus saving the user the time and effort of recreating an interrupted workflow. Additionally the snapshot feature allows a user to experiment with various design choices with the knowledge that the user will be able to back out the choices to earlier saved restore point captured by a saved snapshot. Saving and restoring snapshots of a workflow is important since this allows the user to explore a solution space for an optimal result. In one implementation the full state of the workflow captured in a snapshot is saved as a persistent file on the computer hard drive for later restoration. It will be appreciated that the snapshot may also be saved on other storage mediums accessible to the graphical modeling environment and the workflow manager.

The present invention may also be used to facilitate workflow data logging. Workflow data logging can track how long it took to complete a task how many times did the user select undo how many blocks were changed what the number of blocks used was which configuration changes were made how often the model was simulated and many other workflow related tasks. This information can be stored in a centralized database with the results being scored. Future workflow selection can be based on the scoring of the data logs and or changes to the existing workflow can be made based on scores associated with a data log.

The present invention provides bi directional linkage from the graphical modeling environment view such as a block diagram view to a hierarchical view of corresponding objects in the workflow. Bi directional linkage between components of a modeling environment is important since the optimal realization of an action in a workflow is task dependent. The workflow manager initially guides the user to the most optimal component for realizing a task. However the user may choose to navigate to a different component for a variety of reasons such as understanding the problem context better configuring in a component more familiar to them etc. For example a user can navigate from the block diagram to the component view for a task that requires action. depicts the bi directional linkage provided by the present invention between a block diagram editor and component view. The screenshot in shows the block diagram model associated with the identified workflow. By right clicking or otherwise selecting a user causes a pull down menu to be displayed which includes the option of navigating directly to the component view of the components affected by the current task. shows a screenshot of the corresponding component view which includes a listing of the sum block to which the user navigates. In other words the selection by the user of the Show in FPT ME context menu selection for the Sum block requiring action brings the user to the same point in the component view for making the desired changes.

As will be apparent from the above discussion the workflow manager of the present invention is capable of reconfiguring many different types of views in the modeling environment including a graphical modeling editor view a model hierarchy view showing the hierarchy of the graphical model which can be the nesting of graphical entities but could also be the nesting of functionality which is different in case of virtual graphical nesting a model dependencies view that shows the elements in the model environment that it depends upon such as initialization scripts header files with data structures referenced models and referenced binaries a compiled model view that shows the model properties after all degrees of freedom such as data type dimensions and sample rate have been determined which may lead to inserting functional units that could be graphically depicted a model requirements view that shows the requirements of the model that are compiled in a text based document such as a free form text document or a spreadsheet but potentially also superimposed on the model as determined by hotlinks between model entities and specific requirements a model coverage view that shows the model aspects that have been evaluated and how comprehensively they have been evaluated during one or a number of simulations for example condition coverage or modified condition decision coverage MC DC a model simulation results view a model debugging view that shows values internal to the execution computations and that allows halting the execution at desired points in the flow of computations required for execution a model profiling view that shows the computational expense of the model entities as established during one or multiple simulation runs and a contents editor view.

In one aspect of the present invention the workflow manager synchronizes a dynamically configurable workflow with the modeling environment. For a dynamically configurable workflow the workflow may be adapted during the design activities. A change in workflow may be predicated upon certain user activity. Instead of a static set of activities the set of activities becomes dynamically selected. So if a user selects a nonlinear element to be added to the graphical model the workflow may be dynamically changed to require a linearization step. This may be based on simulation results as well.

The present invention may be provided as one or more computer readable programs embodied on or in one or more mediums. The mediums may be a floppy disk a hard disk a compact disc a digital versatile disc a flash memory card a PROM a RAM a ROM or a magnetic tape. In general the computer readable programs may be implemented in any programming language. Some examples of languages that can be used include MATLAB Python FORTRAN C C C or JAVA. The software programs may be stored on or in one or more mediums as object code. Hardware acceleration may be used and all or a portion of the code may run on a FPGA an ASIC a graphics processing unit GPU or any other piece of computational hardware including analog such as for example a configurable printed circuit board. The code may run in a virtualized environment such as in a virtual machine. Multiple virtual machines running the code may be resident on a single processor.

Since certain changes may be made without departing from the scope of the present invention it is intended that all matter contained in the above description or shown in the accompanying drawings be interpreted as illustrative and not in a literal sense. Practitioners of the art will realize that the sequence of steps and architectures depicted in the figures may be altered without departing from the scope of the present invention and that the illustrations contained herein are singular examples of a multitude of possible depictions of the present invention.

