---

title: Autonomous application-level auto-scaling in a cloud
abstract: A method and system for application-level auto-scaling in a cloud computing environment is provided. An example system includes a data collector and a scaling module. The data collector is to collect application-level data that reflects demand for a subject computing application executing on the virtual instance of a machine provided by a virtualization service. The scaling module is to select a scaling action based on the application-level data and issue a request to perform the scaling action with respect to the virtual instance of a machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09069606&OS=09069606&RS=09069606
owner: ADOBE SYSTEMS INCORPORATED
number: 09069606
owner_city: San Jose
owner_country: US
publication_date: 20120508
---
This application relates to the technical fields of software and or hardware technology and in one example embodiment to system and method for application level auto scaling in a cloud computing environment.

The phrase cloud computing refers to an architectural paradigm in which computation is moved from local servers to a remote service that provides computation as a commodity or utility. A cloud is typically a large collection of shared commodity computation resources that can be interchangeably provisioned in response to clients computation requests. Cloud computing is frequently used in software as a service SaaS application architectures and may be viewed as an implementation choice for application deployment that leverages shared resources and improved cost structure of the cloud. A web service that provides resizable compute capacity in a cloud may be referred to as a virtualization service. An example of a virtualization service is Amazon Elastic Compute Cloud Amazon EC2 . A cloud computing approach may be used to implement a variety of computational paradigms such as virtual machines jobs remote procedure calls traditional servers etc.

A method and system that provides application level auto scaling in a cloud computing environment is described. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of an embodiment of the present invention. It will be evident however to one skilled in the art that the present invention may be practiced without these specific details.

As used herein the term or may be construed in either an inclusive or exclusive sense. Similarly the term exemplary is merely to mean an example of something or an exemplar and not necessarily a preferred or ideal means of accomplishing a goal. Additionally although various exemplary embodiments discussed below may utilize Java based servers and related environments the embodiments are given merely for clarity in disclosure. Thus any type of server environment including various system architectures may employ various embodiments of the application centric resources system and method described herein and is considered as being within a scope of the present invention.

In a cloud based architecture the number of servers providing a service via a web based computing application as the load changes may be scaled automatically. In the case of a service that is invoked by clients over the Internet a load balancer that fields and distributes incoming requests may be configured to monitor traffic and use this information to add or remove virtual instances hosting the service as the load changes. In the case of a service that is only used internally for instance a thumbnail service that gets invoked as new content arrives at the content server executing on a virtual instance of a machine the cloud infrastructure can monitor some basic aspects of content server performance CPU and memory utilization for example and use this data as an indication of the need to scale service instances. The approach that utilizes a load balancer only deals with external facing services while in a large multi component service most of the work is likely to be done by internally facing services that never get invoked through a load balancer. This approach of monitoring performance in order to determine the need for scaling uses information that is at best a proxy for real information about service requirements because e.g. a server can show high CPU utilization for many reasons most of them insufficient to require launching new virtual instances.

A method and system described herein that provides auto scaling in a cloud computing environment uses application level data to make scaling decisions. In one example embodiment a cloud scale system is composed of a collection of virtual instances of a machine also referred to as virtual instances or merely instances . In one example embodiment in an architecture comprising virtual instances executing respective server applications each instance is provided with a so called auto scaling component.

With reference to an auto scaling component comprises a data collector and a scaling module that together manage the auto scaling of instances executing a cloud based computing application e.g. a content server or some other web application . For the purposes of this description a cloud based computing application executing on the instances and for which the scaling decisions are being made is referred to as the subject computing application. The data collectors and the scaling modules which are shown in as executing on instances and interact through a set of persistent queues and and through a common database . In one embodiment the persistent queues and and the database are managed by the provider of cloud based computing services also referred to as the cloud provider and are expected to have high reliability and availability.

As shown in the scaling modules do not access any of the persistent queues or directly. The persistent queues or comprise one or more input queues and one or more output queues. In one embodiment the scaling modules use the database for synchronization and coordination. As the load with respect to the instances and changes it may be advantageous to run more or fewer instances. The approach described herein uses a distributed architecture where the scaling module executing in each virtual instance makes its own decisions about whether to terminate the instance that hosts it or to add one or more instances. The database may be utilized to perform coordination with the scaling modules executing in the other virtual instances. As mentioned above the persistent queues and as well as the database may be managed by the provider of cloud based computing services. Alternatively the persistent queues or the database or both may be provided by a third party provider.

In one example embodiment each data collector has two methods the request latency detector and pending requests estimator. The request latency detector accesses the next pending request in an input queue processes it and returns the latency of this recently processed request. The pending requests estimator returns the estimated value of the number of current pending requests. In some embodiments the number of pending requests for the subject computing application may be estimated by examining the length of the relevant input queue or by examining a count of database records that match a certain query condition or some other computation. These database records that match a certain query condition may be termed for the purposes of this description request records.

An instance periodically invokes the request latency detector of the data collector and records the latency value indicative of the latency of a recently processed request returned by the request latency detector. The instance may be configured to maintain the history of request latency for the subject computing application between the times when the scaling module wakes up and performs its task of making a scaling decision. The combination of past request latency and approximate pending requests information provides useful retrospective and prospective load information that is application specific. This combination provides a good measure of the past and future workload with respect to the subject computing application executing in the instance.

The scaling module in each instance wakes up periodically and performs a scaling action. The scaling operation may be described as involving two parts 1 making a scaling decision and 2 performing the scaling actions in one embodiment the code for performing scaling operations the executable code for the scaling module is stored in the database and is loaded into the instance when the instance starts. The data collector passes the request latency information and the approximate pending to the scaling module . Based on the request latency information and the estimated value of the number of current pending requests the scaling module makes a scaling decision which is either to make no change to the number of instances executing the subject computing application to reduce the number of instances executing the subject computing application by killing the current instance or to increase the number of instances executing the subject computing application instances by cloning the current instance. After a decision has been made the action is performed.

In some embodiments a scaling action may be utilized to change the properties of the instances that are running the subject computing application. For example where the virtualization service host permits selection of instances with various memory disk network configurations anew instance may be started with a different configuration than the instance that is performing the seating action. The auto scaling techniques described herein may be utilized beneficially with spot pricing mechanism in order to bid on instances at prices considerably below the normal rate. 

In some embodiments the database may be utilized to provide synchronization among multiple scaling modules that are configured to perform scaling actions with respect to instances executing the subject computing application. For example before attempting to alter the number of instances executing the subject computing application the scaling module locks a row associated with the subject computing application or e.g. with the data collector in the database and verifies that no other scaling module executing on another instance has performed a modification within a certain time period that may be termed courtesy interval. The use of a courtesy interval is intended to help avoid the so called lemmings off a cliff behavior where all the scaling modules may simultaneously decide to terminate their associated instance or to clone their associated instance. Thus if the scaling module determines based on the examination of information stored in the database that another scaling module has performed a scaling action with respect to instances executing the subject computing application during the courtesy interval the current scaling action is discarded and the scaling module releases the lock on the database row. If on the other hand no other scaling module has performed a scaling action within the courtesy interval the scaling module attempts to perform the scaling action.

In some embodiments the scaling actions are idempotent that is an untimely crash of the instance while the scaling module is attempting to perform a scaling action is made recoverable.

If the scaling action is to terminate an instance the scaling module writes to the database that the current instance is being terminated releases the database lock and then attempts to terminate the current instance. The specific operations to terminate an instance may be specific to the particular virtualization service that is providing the cloud. A so called grim reaper service may be provided that periodically scans the database and terminates any instances that are marked as terminated but are still executing. The grim reaper service may be implemented as part of the subject computing application or alternatively it can be provided by the cloud provider or by any party.

If the scaling action is to clone an instance the scaling module generates a request id and associates it with the create request. The virtualization service provider is configured to execute only one create request associated with each request id regardless of how many times it is attempted. In one embodiment scaling module generates a request id writes the request together with the create request id in the database attempts to execute the create request and writes information about the resulting new instance into the database . A so called birth helper service may be provided that periodically scans the database to detect any create requests that might not have been completed and attempts to complete them by resubmitting them and updating the instance information when they eventually complete. The birth helper service may be implemented as part of the subject computing application or alternatively it can be provided by the cloud provider or by any party. The scaling module together with the data collector may be referred to as an auto scaling component.

An example architecture within which method and system to provision on a cloud a computing application and an associated service provider interface may be implemented is described with reference to an architecture diagram illustrated in . The architecture may include a client computer system and a hosted service system . In one example embodiment the hosted service system is to provision and manage an enterprise SaaS product utilizing a cloud based computing service as a virtualization infrastructure. Cloud based computing services as shown in are provided by a virtualization service host and a network storage service . In one embodiment a hosted service system utilizes Amazon Elastic Compute Cloud EC2 service as a virtualization service and Amazon Simple Storage Service Amazon S3 as a network storage service. In some embodiments the hosted service system may utilize more than one virtualization service host e.g. one host being Amazon EC2 and another host provided by Adobe Systems Incorporated. The client computer system and the hosted service system may be in communication with each other via a communications network that may be a public network e.g. the Internet .

The virtualization service host accesses the storage of the network storage system to obtain one or more machine images in order to load the instance of a virtual machine executing a computing application . As shown in the instance of a virtual machine is also hosting an auto scaling component . The auto scaling component may be implemented e.g. as part of the computing application or independent of the computing application . The auto scaling component in one example embodiment corresponds to the combination of the data collector and the scaling module of .

While in some embodiments the computing application and the auto scaling component may be loaded from the same machine image in other embodiments the computing application and the auto scaling component are loaded from different machine images.

The computing application may be accessed by the client computer system via a browser application . A user in control of the client computer system may send a request to the hosted service system to load the computing application . The request may be initiated via a user interface provided by the hosted service system to the client computer system via the browser application .

The user interface in one embodiment provides both an end user s and a system administrator s view of the computing application and also permits issuing control operations to the computing application and permits viewing the resulting changes in the state of the computing application . For example where the computing application is a content server an end user may manipulate various electronic forms. The user interface may also serve as a source of information for the hosted service system including documentation downloads and support. The user interface in one embodiment uses Adobe Flex software offered by Adobe Systems Incorporated as the user interface technology for the implementation of the user interface. The user interface in one embodiment uses an XML Extensible Markup Language based representational state transfer REST style secure communications protocol to synchronize its operations with a control server . A request to access the user interface may be authenticated using one of a variety of authentication techniques.

The request from the client computer system to load the computing application is received at the control server which responds the request by activating an access interface provided by the virtualization service host . The control server in one example embodiment provides coordination between the components of the architecture provides administration and monitoring of the virtualization service host and also may be configured to audit system usage and resource allocation with respect to the computing application . The control server in one embodiment runs within a standard Hypertext Transfer Protocol Secure HTTPS compliant web server and may be deployed as a publically accessible web application that is available outside a firewall.

The virtualization service host accesses the storage of the network storage system to obtain one or more machine images in order to load the associated computing application . As mentioned above in some embodiments the executable code that is the auto scaling component may be loaded separately from the machine image comprising the computing application . The machine images can be uploaded to the network storage system by the control server utilizing an access interface provided with the network storage system . The hosted service system further includes a secure networking client to provide a bidirectional encrypted compressed connection between a machine in the end user s secure network environment e.g. the client computer system and one or more instances of a virtual machine running within the virtualization infrastructure the computing application . The networking client manages various aspects of transmission control protocol TCP traffic forwarding encryption and network discovery such that the user can access the computing application as if it was running locally on the user s machine. An example auto scaling component is illustrated in .

The scaling module may be configured to select a scaling action based on the application level data provided by the data collector and issue a request to the virtualization service to perform the scaling action with respect to the virtual instance of a machine. The scaling action may be terminating the virtual instance of the machine that hosts the auto scaling component or instantiating anew virtual instance of a machine executing the subject computing application. It will be noted that while the scaling module can issue requests to terminate or create a virtual instances the scaling module may also be configured to execute scaling actions such as terminating or creating virtual instances of a machine.

As explained above application level data comprises latency of a recently processed request directed to the subject computing application and an estimate of the number of pending requests directed to the subject computing application. The number of pending requests directed to the subject computing application may be based on a length of an input queue provided by the virtualization service. The number of pending requests directed to the subject computing application may also be determined based on a number of request records in a database provided by the virtualization service. The data collector may include a latency module configured to determine latency of a recently processed request directed to the subject computing application. The data collector may also include a pending requests estimator configured to estimate the number of pending requests directed to the subject computing application.

The scaling module may be configured to create a new virtual instance of a machine that has properties that differ from the properties of its host instance. For example if the application level data provided to the scaling module by the data collector indicates that the need for creating a new instance is not urgent e.g. the number of pending requests is within a certain range and or the latency value is within a certain range the scaling module may access a recent price bid history for instances having various configuration and submit a bid for creating an instance with certain parameters at a certain price. If the virtualization service returns a message indicative of accepting the bid the scaling module creates a new instance. Otherwise no new instance is created as long as the application level data indicates that a new instance does not to be created urgently. In some embodiments the scaling module may access a price list for instances with different configuration parameters and select a configuration based on the application level data provided by the data collector .

The scaling module may be configured to lock a database row associated with the subject computing application and based on whether a scaling action with respect to the subject computing application has been performed during a predetermined time interval proceed with the scaling action or cancel the scaling action. An example method for application level auto scaling in a cloud computing environment can be described with reference to .

As shown in the method commences at operation when the data collector of collects application level data. As mentioned above a scaling module e.g. the scaling module of or the scaling module of wakes up periodically and performs its task of making a scaling decision. At operation a trigger indicative of a request to evaluate the need to perform a scaling action is detected. Such trigger may be to wake up the scaling module . At operation the scaling module processes the application level data collected by the data collector and determines selects a scaling action. At operation the scaling module issues a request to execute the determined scaling action.

The example computer system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU or both a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT . The computer system also includes an alpha numeric input device e.g. a keyboard a user interface LD navigation device e.g. a cursor control device a disk drive unit a signal generation device e.g. a speaker and a network interface device .

The disk drive unit includes a machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system with the main memory and the processor also constituting machine readable media.

The software may further be transmitted or received over a network via the network interface device utilizing any one of a number of well known transfer protocols e.g. Hyper Text Transfer Protocol HTTP .

While the machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing and encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of embodiments of the present invention or that is capable of storing and encoding data structures utilized by or associated with such a set of instructions. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media. Such media may also include without limitation hard disks floppy disks flash memory cards digital video disks random access memory RAMs read only memory ROMs and the like.

The embodiments described herein may be implemented in an operating environment comprising software installed on a computer in hardware or in a combination of software and hardware. Such embodiments of the inventive subject matter may be referred to herein individually or collectively by the term invention merely for convenience and without intending to voluntarily limit the scope of this application to any single invention or inventive concept if more than one is in fact disclosed.

Thus a method and system for providing application level auto scaling in a cloud computing environment has been described. Although the method and system have been described with reference to specific example embodiments it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the inventive subject matter. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

