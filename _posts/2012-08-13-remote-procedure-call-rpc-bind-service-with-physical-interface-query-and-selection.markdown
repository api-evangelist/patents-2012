---

title: Remote procedure call (RPC) bind service with physical interface query and selection
abstract: A service module that provides for discovery of one or more network interfaces connecting a prospective remote procedure call (RPC) client, facilitates the provision of RPC programs in a network including multi-horned systems. When a request for a network address to an RPC application providing an RPC program is received from the RPC client, the RPC bind daemon discovers from the module, using the client response address, over which interface(s) the client is accessible. The daemon then selects an address of a network path to the RPC application that the prospective client can access and returns the corresponding network address. The service module monitors the network stack for RPC get address requests and builds tables of client address entries with corresponding network interface identifiers. The entries are retired according to an aging policy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09021510&OS=09021510&RS=09021510
owner: International Business Machines Corporation
number: 09021510
owner_city: Armonk
owner_country: US
publication_date: 20120813
---
The present U.S. Patent Application is a Continuation of U.S. patent application Ser. No. 12 631 016 filed on Dec. 4 2009 published as U.S. Publication 20110138404 on Jun. 9 2011 and issued as U.S. Pat. No. 8 266 639 on Sep. 11 2012. The disclosure of the above referenced U.S. Patent Application is incorporated herein by reference.

The present invention is related to networking computer systems and more specifically to a method and system for implementing remote procedure call RPC programs in a manner that ensures their accessibility.

In networked computer systems and in particular in systems that include multiple network interfaces per processing node there are typically multiple sub nets and in larger networks multiple domains. Each sub net or domain will typically include many computer systems each of which is executing an operating system that may provide RPC programs to client applications both within the same computer system and to remote RPC clients that are connected to the computer system through a network path. The daemon that manages RPC connections is named rpcbind.

An RPC application registers one or more RPC programs that it supports by calling an interface on rpcbind daemon rpcb reg . The rpcb reg call provides an RPC program number and a successful call registers the program provider as the provider of that program. Subsequent rpcb getaddr calls to the rpcbind daemon by prospective clients provide a program number which the rpcbind daemon satisfies by returning a universal network address associated with the RPC application that supports the RPC program that was requested.

However in the multi horned system described above a prospective RPC client cannot necessarily use the address for an RPC application that the RPC bind daemon may return. For example if an RPC application that serves a particular RPC program is on a first sub net of the network and the prospective client is on a second sub net the address returned by the RPC bind daemon for the RPC application in the first sub net may not have a routing path from the second sub net. Further even if such a path is present there may be a firewall or filtering present or the route may be very inefficient. The particular location of a prospective RPC client is typically not known since the request may have originated anywhere in the network and from any network adapter connected to the operating system hosting the rpcbind daemon reached by the request. Further when complex network connections are involved a request could prospectively reach multiple rpcbind daemon instances and or an rpcbind instance could potentially be aware of multiple applications that service a program number configurations that are either avoided or in the case of multiple applications servicing a program number typically rejected by the rpcbind daemon. While alternate rpcbind daemons and or multiple RPC applications servicing a program number could provide improved connectivity to RPC programs the structure of the RPC mechanism typically prohibits such arrangements.

Therefore it would be desirable to provide a rpcbind daemon that can provide accessible RPC program addresses in a network including multi horned computer systems. It would further be desirable to provide RPC functionality for a given program number from multiple applications and to provide multiple distributed rpcbind daemons within a network.

The invention is embodied in a computer performed method computer program product and computer system that respond to RPC program address requests in a manner that ensures accessibility to the application providing the RPC program by a requesting client. The computer system is a system that carries out the steps of the method and the computer program product is a computer readable storage medium containing program instructions for carrying out the steps of the method.

The method receives a request for the address of an RPC program from a prospective RPC client. A network path to a RPC application providing the program is selected and the corresponding universal address returned by determining through which of multiple network interfaces the prospective client can access an RPC application which may effectively select an RPC application accordingly. If multiple network paths to an RPC application providing the program number are accessible to the prospective client and optionally multiple RPC applications then a heuristic can be applied to select the network path to the RPC application such as a network path to the prospective client that is not firewalled has the least number of links has a lowest cost is set as preferred by the system and so forth.

The routing path to the prospective client can be discovered using a module that monitors the network stack for rpcb getaddr requests and builds a table of entries relating the requestors to the particular network interface from which the rpcb getaddr requests arrived. The entries are discarded according to an aging criteria to maintain proper dynamics of the network. When an RPC program request arrives the rpcbind daemon can query the module to obtain an interface identifier. The interface identifier is then used to select the proper network path to use to connect an RPC application to the prospective client.

The foregoing and other objectives features and advantages of the invention will be apparent from the following more particular description of the preferred embodiment of the invention as illustrated in the accompanying drawings.

The present invention relates to remote procedure call RPC services and specifically with techniques to ensure that an RPC client receives an accessible universal address for an RPC application or program in particular in multi horned systems where a client may exist on a different sub net than some of the RPC servers within the system. Upon receiving an rpcb getaddr request that connects a prospective RPC client to a program interface the rpcbind daemon determines through which network interface s the RPC client can access the system and selects a network path over which the prospective RPC client can access the RPC application e.g. by selecting a universal network address to return to the prospective RPC client. If multiple network paths to the RPC application are accessible by the prospective RPC client a heuristic may be used to select from among the multiple network paths such as least cost minimum links not firewalled system preferred or other criteria that indicates a particular network interface and or network path is preferred over another. The techniques of the present invention can also be used to select from among multiple RPC applications that service a given program number since the universal address network path returned by the rpcbind daemon of the present invention also uniquely specifies the RPC application. Further multiple rpcbind daemons could potentially exist in a network without creating a conflict since an rpcbind daemon that is reachable by a prospective client should then be able to identify which network interface to use in selecting an RPC application to provide the requested RPC program.

A service module provides physical network interface identification in response to receiving a request from the rpcbind daemon. The module may provide a system application programming interface API or may be an RPC application that provides a program that returns the network interface identifier given the prospective client s response address as input. The module monitors network traffic for rpcb getaddr requests generally by insertion as part of the network stack. When an rpcb getaddr request is detected the corresponding requestor address is inserted in a table as an entry that also includes the network interface identifier. The entries are retired according to an aging function to match the dynamic nature of the network. When an rpcb getaddr request is received by the rpcbind daemon the rpcbind daemon queries the service module to return the network interface identifier for the provided prospective client s response address. When the request to map the prospective client s response address to a network interface is received by the module the module returns the interface identifier from an entry in the table that corresponds to the client s response address.

Referring now to a networked computer system in which an embodiment of the present invention is practiced is depicted in a block diagram. A server A includes a server processor SCPU coupled to a server memory SMEM that contains program instructions for implementing a portion of a system in accordance with an embodiment of the present invention and forming a computer program product in accordance with another embodiment of the present invention. Server A also includes multiple network interfaces NIC and NIC that connect server A to a network. In particular server memory SMEM includes an rpcbind daemon that provides RPC binding functionality in accordance with an embodiment of the present invention. Server memory SMEM also includes an RPC application to which rpcbind daemon binds program requests rpcb getaddr requests received from the network. Server A is coupled by the network to a workstation computer A through a network interface NIC of workstation computer A which in the depicted embodiment includes a workstation processor CPU coupled to a workstation memory MEM as well as a display Display and input devices Input Devices such as a mouse and keyboard that provide user interfaces for interacting with applications within the depicted computer system as well as configuring at least one operating system that provides RPC services in accordance with an embodiment of the present invention. The network connecting workstation computer A to server A may include wireless local area networks WLANs wired local area networks LANs wide area networks WANs or any other suitable wired or wireless network.

In the illustrated example workstation memory MEM includes an application program that uses RPC services and is therefore an RPC client. Application program contacts rpcbind daemon to obtain an address of an RPC application that provides a needed RPC program number. In the present invention the universal address provided in response to the request a rpcb getaddr request is selected from among multiple network paths by which the prospective RPC client application program can read RPC application . Exemplary processes and structures for performing the selection are set forth in further detail below. The present invention concerns RPC techniques that are not limited to a specific computer system configuration workstation server arrangements or requiring workstations at all as some embodiments of the present invention are applicable to multiple server computer systems in which RPC services accessed on a first server by a second server. Finally the specification of a server A and a workstation A and the location of their specific memories MEM and SMEM does not imply a specific client server relationship or hierarchical organization as the techniques of the present invention may be employed in distributed systems in which no particular machine is identified as a server but at least one of the machines provides an RPC daemon and RPC applications for providing RPC program interfaces and in which addresses of the RPC applications are mapped according to techniques of the present invention.

As illustrated in workstation A is connected to server A by a switch S that is connected to network interfaces NIC and NIC. In the depicted configuration server A is a multi horned server because server A has multiple paths to nodes within the network generally as specified by multiple sub networks sub nets causing the possibility of duplicate addresses that do not conflict because of the separate networks or sub nets but otherwise represent a problem in generating a universal address that uniquely and correctly specifies a particular node. For example if RPC client contacts rpcbind daemon within server A with an rpc getaddr request for a program number supported by an RPC application registered with rpcbind daemon then a path exists to RPC client through S from rpcbind daemon . However the existence of such a path is not a guarantee that RPC application is reachable via any network path between workstation A and server A. For example if RPC application within server A is registered with rpcbind daemon to service program number ten but using an address that corresponds to a sub net corresponding to network interface NIC then rpcbind service when contacted by RPC client with a rpcb getaddr 10 . . . request will return an address corresponding to an interface on RPC application on the sub net corresponding to network interface NIC which might not have a route to and from RPC client either because there is no routing function between the sub nets or because the requisite port number is firewalled for the path through network interface NIC at some point along the corresponding network path. In particular even if server A bridges the portions of the network connected by network interfaces NIC and NIC if the sub nets assigned to the network portions do not overlap in address space then RPC client will not be able to communicate with RPC application unless a correct address is returned by rpcbind server that makes RPC application reachable which requires knowledge of which network interface controller NIC NIC supports the connection from RPC client to rpcbind daemon . The present invention provides functionality for rpcbind daemon to determine which network interface NIC NIC received the rpcb getaddr request so that an address of a reachable RPC application or a best effort address can be returned and if multiple network paths can be used a network path with a lowest cost or best performance is selected.

Referring now to a pictorial diagram illustrating a relationship between modules and interfaces within the system of is shown. The depicted structure is only one of many possible program structures for implementing the identification methodology described herein and is provided as an example of an embodiment of a structure in accordance with an embodiment of the present invention. A prospective RPC client e.g. RPC client sends a rpcb getaddr progno . . . message to rpcbind daemon . An interface monitor monitors traffic entering server A from network interfaces NIC and NIC generally by implementing interface monitor as part of the network stack e.g. a TCP IP protocol driver. When rpcb getaddr messages are received by server A a table is examined for an entry corresponding to the originator s address i.e. the response address of prospective RPC client and if an entry is present the entry is updated. Table contains entries that include a network address an interface ID e.g. an identifier uniquely identifying the network interface such as NIC or NIC from which an rpcb getaddr request arrived and a timestamp. The timestamp is used to retire entries since due to the dynamic nature of the network as well as the location of RPC services need to be removed fairly often so as to avoid connecting RPC clients to an RPC server that is no longer available. When the rpcbind daemon receives the rpcb getaddr message from RPC client a query is sent to interface monitor including the origin address from the rpcb getaddr message. Interface monitor performs a look up in table and using the interface ID present in the table if an entry is present maps the universal address returned to RPC client in response to the rpcb getaddr message so that a binding to an RPC application for the specified program number will have a network path that provides a desired level of connectivity. If an entry is not present in the table rpcbind daemon will generally make a best effort to generate a universal address by using the first network adapter or locating similarly addressed entries in table . If multiple network paths are supportable i.e. multiple possible universal addresses could be returned then a heuristic can be used to select from among the possible addresses network paths. The criteria used may include whether a path is firewalled with a preference to avoid firewalls how many links are present with a preference to reduce the number of links whether a link has a higher system assigned cost than another with a preference for least cost or whether a particular physical network interface is designated as preferred. A table can be used to provide the heuristic information for the sub net masks or specific addresses and include flags for the firewalled and preferred condition as well as flags or numerical values for the number of links and or cost.

Referring now to a method in accordance with an embodiment of the present invention is depicted in a flowchart. When a get program address request is received from a prospective RPC client step the prospective client response address is used to query interface monitor for an entry in table step . If an RPC application for the specified program number is not known to be accessible to the interface decision a best effort selection is made as described above and the best effort address is returned step . Otherwise if there is more than one possible network path to the RPC application decision then the best path is selected according to one or more of the heuristics described above and an address of the RPC application on the selected network path is returned step . Otherwise if only a single network path provides connectivity decision then the address for the single network path is returned step .

Referring now to a method in accordance with another embodiment of the present invention is illustrated in a flowchart. The depicted method describes an exemplary operation of a service module that provides the network interface lookup functionality of the present invention. The service module monitors traffic in the network stack for multiple physical network interfaces step . When an RPC get address request is detected decision the physical network interface ID and the client originator address is stored in the table step . If a query is received from the rpcbind daemon decision the service module retrieves the physical network interface ID from the table and the ID is returned to the rpcbind daemon step . When a table entry is older than a threshold aging value decision then the entry is removed from the table step . Until RPC services are shutdown e.g. due to system shutdown decision the service module continues to monitor the network stack and respond to requests from rpcdaemon according to steps .

Referring now to another networked computer system in which an embodiment of the present invention is practiced is depicted in a block diagram. Server A and workstation A are provided as described above with respect to . Additional workstation computers A C are also connected to the network through switches S and S. As illustrated the network connections are not symmetric and are more representative of an arbitrary network including a larger number of systems. Additional servers B and C have features similar to those of server A and are also included in the depicted computer system. Servers A C are coupled by the network to workstation computers A C which can be assumed identical in form to workstation A.

In the illustrated example an additional RPC application A is depicted as executing within server C an additional rpcbind daemon A is depicted as executing within server B and an additional RPC client A is illustrated as executing within workstation C for generality. Since there are multiple rpcbind daemon instances A an rpcb getaddr request will generally be processed by the first rpcbind daemon that filters the network stack of a machine in the network path over which the rbcp getaddr request travels. So for example if RPC client issues an rpcb getaddr request rpcbind daemon will generally respond to the request as described above with reference to . An address of RPC application will be returned and subsequent RPC activity will be provided between RPC client and RPC application . However if RPC client A issues an rpcb getaddr request rpcbind daemon A will generally receive the request and could conceivably respond with an address of either RPC application on server A or RPC application A on server C. The service module that tracks rpcb getaddr requests may contain information about network paths to multiple RPC applications with associated path information such as the cost preference information described above with respect to . Once a selection of a network path is made i.e. a particular universal address is assigned and returned in response to the rpcb getaddr request the selection of a particular RPC application is implicit in the address and therefore the present invention provides further scalability in distributing RPC applications.

While the invention has been particularly shown and described with reference to the preferred embodiments thereof it will be understood by those skilled in the art that the foregoing and other changes in form and details may be made therein without departing from the spirit and scope of the invention.

