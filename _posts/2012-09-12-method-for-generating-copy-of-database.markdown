---

title: Method for generating copy of database
abstract: In a DBMS, in response to a request from application programs, a base table update function updates a base table and a recovery start point, and a log recording function records update logs for the base table. Then, at predetermined timing, a backup function outputs the content of the base table to a backup file and copies the recovery start point associated with the base table to a recovery start point. Subsequently, when a user has specified a quiesce point and the base table, a copy generation function generates a target table that is a copy of the base table at the quiesce point by updating the backup file of the specified base table with ones of the update logs from the recovery start point to the quiesce point.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08799232&OS=08799232&RS=08799232
owner: International Business Machines Corporation
number: 08799232
owner_city: Armonk
owner_country: US
publication_date: 20120912
---
The current application claims the benefit of co pending U.S. application Ser. No. 12 858 637 titled Device and Method for Generating Copy of Database which was filed on Aug. 18 2010 and which is hereby incorporated by reference.

The present invention relates to devices and methods for generating copies of databases and in particular relates to a device and a method for generating a copy of a database at a specific point in time.

Recently the number of computer systems continuously providing services 24 hours a day every day of the year has increased. In such computer systems databases are continuously updated. However even in the case of a database that is continuously updated when the database is used as for example input data for batch processing or a Data Warehouse it is required to make copies of the database at a specific quiesce point.

For example a case where the content of a database at 00 00 00 is requested will now be considered. The database is continuously updated.

In this case when it is ensured that only insertion of a row into a table in the database is performed the content of the database at 00 00 00 can be read because an arrangement can be adopted in which each row is set to include a time stamp column holding insertion time and a row satisfying a condition that the insertion time is before 00 00 00 is read.

However when updating of a row in a table in the database is performed this method cannot be used. This is because even in a case where each row is set to include a time stamp holding update time the time stamp does not always remain intact when copying is performed. For example it is assumed that a row A was updated at 23 59 00 and 00 00 10. In this case a time stamp held by the row A indicates 00 00 10. Thus when a row satisfying a condition that the update time is before 00 00 00 is searched for at several minutes past 00 00 00 the row A falls outside the search results. As the result the data of the row A at 23 59 00 is lost and the consistent content of the database at 00 00 00 cannot be acquired. In this way it is difficult to create the content of a database at a specific quiesce point the database being continuously updated using the current functions.

Similarly in a case where a row in a database is deleted a row having originally existed may be lost when the content of the database at a quiesce point is acquired.

Some Japanese Unexamined Patent Application Publications disclose techniques for acquiring the content of a database at a specific point in time.

In Japanese Unexamined Patent Application Publication No. 2001 344139 a controlling table unit holds the controlling information of each database object and is always updated and a snapshot information storage unit holds a copy of the controlling table unit at a specific point in time. A backup processing unit compares at backup time information stored in the snapshot information storage unit with the current controlling table unit to determine the content of changes differences in the database and create and store backup information indicating the content of changes.

In Japanese Unexamined Patent Application Publication No. 2009 146228 upon receiving an instruction to perform backup operations a backup device assigns to each point in time indicated by the instruction a storage area for storing a snapshot created for the point in time. When the original data is updated after the points in time indicated by the instruction the backup device checks whether the original data corresponding to a place where an update operation has been performed at the immediately preceding point in time indicated by the instruction is stored in a storage area assigned as one for storing the latest snapshot created for the immediately preceding point in time. When the backup device has determined that such original data is not stored in such a storage area the backup device stores only in the storage area for storing the latest snapshot the original data close to be updated the original data corresponding to the place where an update operation has been performed.

In Japanese Unexamined Patent Application Publication No. 9 97201 a backup creation unit performs an operation of backing up a database and generates a notification of the progress of the backup operation. A database reference and update unit performs operations of referring to and updating a database and outputs addition and update information indicating the content of addition of data to a database or updating of a database. A backup creation status notification unit determines on the basis of a notification of the progress of backup and addition and update information whether an addition or update operation has been performed on data having been backed up. When an addition or update operation has been performed on the data having been backed up an addition and update reflection unit adds data to the backup data or updates the backup data on the basis of the addition and update information.

In Japanese Unexamined Patent Application Publication No. 2005 242729 a system recovery management unit creates a backup of a volume in the initial state and a snapshot of the volume during system operation using a backup restore processing unit in a storage device and keeps watch on the conditions using a recovery point. When a system failure has occurred the system recovery management unit determines a point to be recovered from the recovery point restores the volume from the created backup and updates metadata for maintaining the consistency of the data.

The techniques disclosed in these and other references are aimed at only an operation of backing up the content of a database at a specific point in time and or an operation of restoring the content not aimed at creating a copy of the database at the specific point in time.

Existing approaches for creating a copy of a database at a specific point in time include the following.

The first approach is one in which data is retrieved from a database while a business application is caused to update the database and then transaction logs operation logs recorded by the business application while the data is retrieved are applied to the retrieved data.

The second approach is one in which a copy of a database at a quiesce point is created by updating an alternate table when updating the database and temporarily stopping updating of the alternate table at the quiesce point.

However these approaches have a problem such that the implementation and system operation are costly. Especially in the case of a large system holding a database including several thousand tables or a database of several terabytes the implementation and operation based on such approaches are not practical.

The present invention reduces the cost for generating a copy of a database at a specific point in time.

The present invention provides a device for generating a copy of a database at a specific point in time. The device includes a backup data acquisition unit acquiring backup data of the database output by a database management system DBMS for use in recovering the database without stopping updating of the database before the specific point in time an update log acquisition unit acquiring update logs of the database recorded for use in recovering the database during a period between a recovery start point before the DBMS having output the backup data and the specific point in time and a generation unit generating as the copy a new database holding content of the database at the specific point in time on the basis of the backup data acquired by the backup data acquisition unit and the update logs acquired by the update log acquisition unit.

In this case the generation unit may generate the new database by updating the backup data acquired by the backup data acquisition unit with update logs acquired by the update log acquisition unit relating to transactions committed before the specific point in time.

The generation unit may generate the new database by updating the backup data acquired by the backup data acquisition unit with update logs acquired by the update log acquisition unit relating to updates having not been reflected in the backup data.

The device may further include a reception unit accepting specification of the specific point in time by a user.

The device may further include a recovery start point acquisition unit acquiring the recovery start point stored in association with the backup data acquired by the backup data acquisition unit.

Moreover the present invention provides a device generating a copy of a database at a specific point in time. The device includes a database management system DBMS including at least an output function of outputting backup data of the database for use in recovering the database without stopping updating of the database and a recording function of recording update logs of the database for use in recovering the database as the copy a new database holding content of the database at the specific point in time on the basis of the backup data output by the output function of the DBMS before the specific point in time and the update logs recorded by the recording function of the DBMS during a period between a recovery start point before a time period and the specific point in time the backup data having been output during the time period.

In this case the device may further include a storage unit storing a checkpoint before the time period during which the backup data have been output in association with the backup data output by the output function of the DBMS and a determination unit determining as the recovery start point the checkpoint stored in the storage unit in association with the backup data.

Moreover the present invention provides a device for generating a copy of a database at a specific point in time. The device includes a database management system DBMS including at least an output function of outputting backup data of the database for use in recovering the database without stopping updating of the database and a recording function of recording update logs of the database for use in recovering the database a backup data acquisition unit acquiring the backup data output by the output function of the DBMS before the specific point in time an update log acquisition unit acquiring the update logs recorded by the recording function of the DBMS during a period between a recovery start point before a time period and the specific point in time the backup data having been output during the time period and a generation unit generating as the copy a new database holding content of the database at the specific point in time by updating the backup data acquired by the backup data acquisition unit with first update logs out of the update logs acquired by the update log acquisition unit the first update logs relating to transactions committed before the specific point in time and relating to updates having not been reflected in the backup data.

Moreover the present invention provides a method for generating a copy of a database at a specific point in time. The method includes acquiring backup data of the database output by a database management system DBMS before the specific point in time for use in recovering the database without stopping updating of the database acquiring update logs of the database recorded for use in recovering the database during a period between a recovery start point before a time period and the specific point in time the DBMS having output the backup data during the time period for use in recovering the database and generating as the copy a new database holding content of the database at the specific point in time on the basis of the backup data and the update logs.

Moreover the present invention provides a program for causing a computer to function as a device for generating a copy of a database at a specific point in time. The program causes the computer to function as a backup data acquisition unit acquiring backup data of the database output by a database management system DBMS for use in recovering the database without stopping updating of the database before the specific point in time an update log acquisition unit acquiring update logs of the database recorded for use in recovering the database during a period between a recovery start point before the DBMS having output the backup data and the specific point in time and a generation unit generating as the copy a new database holding content of the database at the specific point in time on the basis of the backup data acquired by the backup data acquisition unit and the update logs acquired by the update log acquisition unit.

According to the present invention the cost for generating a copy of a database at a specific point in time can be reduced.

An embodiment of the present invention enables simple creation of a copy of a table at a specific quiesce point the copy being useful for operations using backup data and update logs that have hitherto been used only for recovery of a failure of a database.

The outline of this operation will briefly be described below. In this case the description will be given assuming that an original table a base table in a database is TABLE1 and a table a target table in which a copy of the base table is stored is TABLEX.

A database management system DBMS first acquires backup data of TABLE1 by performing online backup without stopping updating of TABLE1.

Then the DBMS creates data of TABLEX using the backup data and an update log of TABLE1. That is when a quiesce point has been determined the backup data of TABLE1 is reflected in TABLEX and the update log of TABLE1 is applied to restore the data to the condition at the quiesce point. As the result TABLEX is a table holding data of TABLE1 at the quiesce point and can be used as for example input data for batch processing or data warehousing operations.

The embodiment of the present invention will now be described in detail referring to the attached drawings.

The computer includes application programs hereinafter simply called applications and a DBMS and a base table as shown in the drawing. The computer further includes update logs a backup file a copy generation function and a target table .

The applications and request the DBMS to update the base table . Although the applications and are shown in the drawing when the applications and need not be distinguished from each other the applications and are denoted as the applications . In this case although only the two applications are shown three or more applications may exist.

The DBMS is a program for managing a database including the base table . The DBMS according to the embodiment operates while updating to the update logs update data applied to the base table and outputs to the backup file the content of the base table in response to a request from an operator. The DBMS includes a base table update function a log recording function and a backup function .

The base table update function updates the base table when updating of the base table has been requested by the applications . The base table update function further updates a recovery start point information indicating the location of one of the update logs to be used for recovery associated with the base table when the consistency of the database is ensured.

The log recording function writes to the update logs update data necessary to for example cancel or re execute updating of the base table and writes to the update logs commit information indicating that a commit has been performed at commit time. In an embodiment the log recording function is provided as an exemplary recording function of recording an update log.

The backup function acquires a backup of the base table and outputs the backup to the backup file even while the base table is being updated by the applications . This operation can be performed by for example temporarily storing data of the base table and the recovery start point in a buffer pool not shown in the DBMS and reading the data in the buffer pool. Alternatively this operation may be performed by backing up the base table and the recovery start point as a physical disk file instead of reading the data in the buffer pool. In this case this backup operation needs to be performed before a target quiesce point a quiesce point that may be specified by a user . At this time although the backup operation may be performed at time just before the target quiesce point or time after a predetermined interval from the target quiesce point at will the time necessary to create a copy of the base table is reduced by performing the backup operation at a time near the target quiesce point. Moreover when the content of the plurality of base tables at a quiesce point is necessary the time at which an online backup operation is performed can be set for each of the base tables at will. That is there is no limitation such that for example respective backups of the plurality of base tables need to be acquired at the same time. In an embodiment the backup function is provided as an exemplary output function of outputting backup data.

In the description the DBMS will be described as a program as described above. Alternatively the DBMS may be viewed as a function of a computer system implemented by executing a program.

It is assumed that the base table is a table to be updated by the applications and is always updated. In this case this component is simply called the base table . Alternatively the component may be viewed as storage means for storing the base table . Moreover the recovery start point is stored in association with the base table .

The update logs hold update data necessary to for example rollback or re execute updating of the base table . Each log record in the update logs holds log location information indicating the location of the log record in the update logs for example a relative byte address RBA or a time stamp and update location information indicating the location of an updated record corresponding to the log record in the base table . In this case this component is simply called the update logs . Alternatively the component may be viewed as storage means for storing the update logs .

The backup file is a file to which a backup of the base table is output. In this case this component is simply called the backup file . Alternatively the component may be viewed as storage means for storing the backup file . Moreover a recovery start point is stored in association with the backup file . The recovery start point is a copy of the recovery start point stored in association with the base table the copy being copied when the base table is backed up. In this case since the backup file is created while the base table is being updated by the applications update data is not necessarily reflected in the backup file . However all update data can be reflected in the backup file by applying the update logs to the backup file with the recovery start point being the start point. In the embodiment the backup file is provided as exemplary backup data and an exemplary storage unit storing a checkpoint in association with backup data.

A user specifies the base table which needs to be copied and a quiesce point to cause the copy generation function to function. Specifically the copy generation function reads the backup file of the base table and restores the backup file into the target table . The copy generation function further reads the recovery start point associated with the backup file and reads the update logs with the recovery start point being the start point. Then the copy generation function reads a log of the specified base table from the update logs and applies the log to the target table . At this time log location information and update location information in the update logs are used. Since the target table into which the backup file of the base table is restored has the same physical structure as the base table these pieces of information can be used. When such a log is applied a time stamp in commit information corresponding to the log is compared with a quiesce point. For example regarding a transaction that is not committed at a quiesce point update data is rolled back. Alternatively after update data up to a quiesce point is reflected a rollback operation may be performed. As the result only the update data committed at the quiesce point is reflected and the exact content of the base table at the quiesce point is created in the target table . In this case the copy generation function can specify a single quiesce point and process the plurality of base tables at the same time. While the copy generation function is shown as a function independent of the DBMS in the drawing the copy generation function may be an extension of a failure recovery function that the DBMS has. In the embodiment the copy generation function is provided as an exemplary generation unit generating a new database and an exemplary determination unit determining as a recovery start point a checkpoint stored in association with backup data.

The target table is an alternate table in which the content of the base table at a quiesce point is stored. In this case it is assumed that the target table has the exactly the same table attributes as the base table . Specifically it is assumed that column names respective data types and lengths of individual columns orders of the columns and specifications of the respective sizes of the tables are the same. However there is no problem even when indexes are not the same. In this case this component is simply called the target table . Alternatively the component may be viewed as storage means for storing the target table .

The outline of an operation of copying the base table by the copy generation function will next be described.

Part a is a diagram in a case where the target table is generated by performing copying of the base table as shown in .

In this case the operation is started by for example a command extended from a failure recovery command such as RECOVER FROM TABLE1 TO TABLEX RESTORE QUIESCEPOINT XXXXX . That is the backup file of the base table is first restored into the target table . After the restore operation is completed the target table up to a quiesce point specified in QUIESCEPOINT XXXXX is restored by reading a log of the base table from the update logs and applying the log to the target table . In this case although update data of a transaction that has been committed at the quiesce point is reflected update data of for example a transaction across the quiesce point and a transaction that is performed after the quiesce point is not reflected. As the result the target table holding the content of the base table at the quiesce point is created.

Part b is a diagram in a case where the plurality of target tables are generated by performing copying of the plurality of base tables . The case is not shown in .

In this case the operation is started by for example a command extended from a failure recovery command such as RECOVER FROM TABLE1 TABLE2 TABLE3 TO TABLEX TABLEY TABLEZ RESTORE QUIESCEPOINT XXXXX . That is a backup file of a base table a backup file of a base table and a backup file of a base table are first restored respectively into target tables and in parallel. After the restore operations are completed the target tables up to a quiesce point specified in QUIESCEPOINT XXXXX are restored by reading respective logs of the base tables and from the update logs and applying the logs to the target tables and . In this case the respective operations of restoring the backup files can be performed in parallel and the application operations can be performed by reading the update logs only once. Thus the time necessary to create the plurality of target tables at the same quiesce point can be reduced.

In this case the function of a recovery utility needs to be extended so as to create the target table using the backup file of the base table and the update logs as described above. Since a technique for recovering the data of the base table on the basis of the backup file and the update logs specifying a quiesce point has been already established this extension can be implemented only by a functional extension in which this technique is applied to the target table separate from the base table .

The operation of the copy generation function according to the embodiment will next be described using a specific example.

After a recovery start point RBT transactions to are performed as shown in the drawing. Subsequently a transaction is performed across a quiesce point Qt. Furthermore a backup operation is started while the transaction is being performed and is completed while the transaction is being performed. In this case the recovery start point RBT is for example a system checkpoint and is held in system information in the DBMS and the backup file .

The update logs will next be described briefly. The transaction updates the base table at times t t and t and performs a commit at time t. The transaction updates the base table at times t and t and performs a commit at time t. The transaction updates the base table at times t and t and performs a commit at time t. The transaction updates the base table at time t and performs a commit at time t. The transaction updates the base table at times t and t and performs a commit at time t.

Part a shows the content of the base table at time before the time t. The values of records R R R R R and R are 100 200 300 400 500 and 600 respectively.

Part b shows the content of the base table at time after the time t and before the time t. Referring to the value of the record R is updated from 300 to 350 at the time t and the value of the record R is updated from 500 to 450 at the time t. Thus the values of the records R R R R R and R are 100 200 350 400 450 and 600 respectively.

Part c shows the content of the base table at time after the time t and before the time t. Referring to the value of the record R is updated from 600 to 650 at the time t and the value of the record R is updated from 200 to 250 at the time t. Thus the values of the records R R R R R and R are 100 250 350 400 450 and 650 respectively.

Part d shows the content of the base table at time after the time t. Referring to the value of the record R is updated from 350 to 200 at the time t the value of the record R is updated from 650 to 700 at the time t and the value of the record R is updated from 250 to 300 at the time t. Thus the values of the records R R R R R and R are 100 300 200 400 450 and 700 respectively.

Part e shows the content of the base table backed up between time Bt and time Bt i.e. the content of the backup file . The records R to R in the state of b and the record R in the state of c are held in the backup file as shown by a broken line from b to c due to the order of the backup time and update time of each record. That is for example a value 250 having been updated shown in c is not reflected in the backup file as the value of the record R but a value 200 having not been updated shown in b is reflected in the backup file as the value of the record R. In this manner since the backup file is created by online backup the data of the backup file is not necessarily backed up in a consistent state.

An operation in a case where the content of the base table at the quiesce point Qt is restored into the target table on the basis of the update logs in and the backup file in will next be described specifically.

The copy generation function first restores the backup file of the base table into the target table .

In this case out of the log records for the times t to t in the update logs in the log records for the times t and t are ones for times after Qt and thus are excluded. Moreover the log records for the times t t and t are not ones for the base table and thus are excluded. Such logs are applied to the target table .

Part a shows the content of the target table before the logs are applied. Updates in and in have been already reflected respectively in the records R R and R surrounded by ellipses in a broken line .

Parts b c and d show the content of the target table when the logs are applied. An update in in is reflected in the record R surrounded by ellipses in a broken line so that the value of the record R is updated from 200 in b to 250 in c . Similarly an update in in is reflected in the record R surrounded by ellipses in the broken line so that the value of the record R is updated from 350 in c to 200 in d . On the other hand since commit information corresponding to an update in in is not included in the update in in is not reflected in the record R surrounded by an ellipse in a broken line .

The copy generation function includes a backup file acquisition unit a target table generation unit an update log acquisition unit a quiesce point reception unit and an update determination unit as shown in the drawing.

The backup file acquisition unit acquires the backup file of the specified base table from the backup files output by the DBMS . At this time the backup file acquisition unit further acquires the recovery start point associated with the backup file . In the embodiment the backup file acquisition unit is provided as an exemplary backup data acquisition unit acquiring backup data and an exemplary recovery start point acquisition unit acquiring a recovery start point stored in association with backup data.

The target table generation unit generates the target table in which a copy of the base table at a quiesce point is stored by restoring the backup file acquired by the backup file acquisition unit into the target table and then applying to the target table a log record that the update determination unit determines needs to be reflected in the target table . In the embodiment the target table generation unit is provided as an exemplary generation unit generating a new database.

The update log acquisition unit acquires the update logs output by the DBMS . In the embodiment the update log acquisition unit is provided as an exemplary update log acquisition unit acquiring an update log.

The quiesce point reception unit accepts for example the information of a quiesce point specified by a user. In the embodiment the quiesce point reception unit is provided as an exemplary reception unit accepting specification of a specific point in time.

The update determination unit determines whether each log record in the update logs acquired by the update log acquisition unit needs to be reflected in the target table .

In the copy generation function the quiesce point reception unit first accepts specification of a quiesce point by for example a user S .

Then the backup file acquisition unit acquires the backup file of the specified base table out of the backup files output by the DBMS and the recovery start point associated with the backup file S . Then the target table generation unit restores the backup file into the target table S .

When the backup file has been restored into the target table and the update logs have been acquired as described above the update determination unit determines whether to use each log record in the update logs to update the target table and the target table is updated using log records that the update determination unit determines are used to update the target table .

That is the update determination unit first finds a log record of the recovery start point S . In this case the recovery start point acquired together with the backup file by the backup file acquisition unit in S is used as the recovery start point . Then information on a transaction that was being performed at the recovery start point hereinafter called transaction information is read from the log record and is then stored in a memory as transaction in process information S .

Then the update determination unit reads a log record from the acquired update logs S . Then the update determination unit determines whether an update operation in the log record was performed after the quiesce point S . Specifically the update determination unit determines whether the time stamp of the log record is newer than the time stamp of the quiesce point. In this case the quiesce point accepted by the quiesce point reception unit in S is used as the quiesce point.

When the update determination unit determines that the update operation in the log record was not performed after the quiesce point i.e. the time stamp of the log record is not newer than the time stamp of the quiesce point the update determination unit determines whether the log record is one regarding an update of the base table S .

As the result when the update determination unit determines that the log record is not one regarding an update of the base table the process returns to S.

On the other hand when the update determination unit determines that the log record is one regarding an update of the base table the update determination unit determines whether the log record includes transaction start information hereinafter simply called start information S . When the update determination unit determines that the log record includes start information new transaction information is stored in the memory as transaction in process information S and then the process returns to S. On the other hand when the update determination unit determines that the log record does not include start information the process proceeds to S.

The update determination unit determines whether the log record includes commit information S . When the update determination unit determines that the log record includes commit information transaction in process information corresponding to the commit information is erased from the memory S and then the process returns to S. On the other hand when the update determination unit determines that the log record does not include commit information the process proceeds to an operation of updating the target table .

That is a log record that is determined in S as not relating to an update after the quiesce point is determined in S as relating to an update of the base table is determined in S as not including start information and is determined in S as not including commit information in this manner is one holding update data to be reflected in the target table . Thus the update determination unit converts the log record for the base table to a log record for the target table S and updates the target table with the log record having been converted S . Then the process returns to S. Subsequently a similar operation is repeated on a log record read in S until an update operation in the log record is one performed after the quiesce point in S. When it is determined in S that an update operation in the log record is one performed after the quiesce point i.e. the time stamp of the log record is newer than the time stamp of the quiesce point updated data belonging to a transaction corresponding to transaction in process information left in the memory is rolled back S .

The exemplary operation of the copy generation function in the flowchart in will next be described taking as examples cases where the log records in are read in S and update operations as shown in are performed. Regarding cases where the log records for the times t t t and t are read the log records are commit information resulting in Yes in S and thus are not determined as being ones to be used for update operations. Thus the description is omitted.

A case where a log record in is read will first be described. Regarding the log record it is assumed that it is determined by reading the log record in S that RBT

A case where a log record in is read will next be described. Regarding the log record it is assumed that it is determined by reading the log record in S that RBT

A case where a log record in is read will next be described. Regarding the log record it is assumed that it is determined by reading the log record in S that RBT

A case where a log record in is read will next be described. Regarding the log record it is assumed that it is determined by reading the log record in S that RBT

A case where a log record in is read will next be described. Regarding the log record it is assumed that it is determined by reading the log record in S that RBT

A case where a log record in is read will next be described. Regarding the log record it is assumed that it is determined by reading the log record in S that RBT

In the embodiment a copy of a database at a quiesce point is created into the target table which is an alternate table on the basis of an online backup of the base table and the update logs as described above. This enables simple creation of the content of a database continuously changing due to updates at a quiesce point in an alternate table.

Moreover in the embodiment since creation of the target table does not affect an operation of updating the base table at all the base table can be caused to operate continuously.

Moreover in the embodiment even in the case of the large base table of for example several hundred gigabytes the time necessary to create a copy of the base table can be reduced and necessary CPU utilization and disk amount can be reduced.

Moreover in the embodiment respective copies including the content of the plurality of base tables at the same quiesce point can be created.

A first improvement is one for enabling the backup file of the base table and the update logs to be used to restore a table separate from the base table . For example when a limitation is set so that the DBMS cannot be used for the alternate table the limitation needs to be removed. Then a function of performing a conversion of the update logs of the base table so as to apply the update logs to the target table with the information of the update logs being kept needs to be added.

A first function is one of enabling specification of a quiesce point by a time stamp for a simple operation.

A second function is one of checking that the base table has the same attributes as the target table .

Finally a hardware configuration of a computer to which the embodiment is suitably applied will be described. is a diagram showing an exemplary hardware configuration of such a computer. The computer includes a central processing unit CPU that is a calculation means a main memory connected to the CPU via a mother board M B chip set and a display unit connected to the CPU via the M B chip set as shown in the drawing. Moreover a network interface a magnetic disk drive HDD an audio unit a keyboard mouse and a flexible disk drive are connected to the M B chip set via a bridge circuit

In the individual components are connected to each other via a bus. For example connection between the CPU and the M B chip set and connection between the M B chip set and the main memory are established via a CPU bus. Moreover connection between the M B chip set and the display unit may be established via Accelerated Graphics Port AGP . However when the display unit includes a video card that supports PCI Express connection between the M B chip set and this video card is established via a PCI Express PCIe bus. Moreover when connection to the bridge circuit is established regarding the network interface for example PCI Express may be used. Moreover regarding the magnetic disk drive for example serial AT Attachment ATA ATA for parallel transfer or Peripheral Components Interconnect PCI may be used. Moreover regarding the keyboard mouse and the flexible disk drive Universal Serial Bus USB may be used.

The present invention may be implemented entirely via hardware or entirely via software. Alternatively the present invention may be implemented via both hardware and software. Moreover the present invention may be implemented as a computer a data processing system or a computer program. This computer program can be stored and provided in a computer readable storage medium. In this case an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device may be considered as the medium. Moreover a semiconductor or solid state storage unit a magnetic tape a detachable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk can be shown as an example of a computer readable storage medium. Examples of current optical disks include a compact disk read only memory CD ROM a compact disk read write CD R W and a DVD.

While the present invention has been described using the embodiment the technical scope of the present invention is not limited to the aforementioned embodiment. It is obvious to persons skilled in the art that various changes can be made or an alternative embodiment can be adopted without departing from the spirit and scope of the present invention.

