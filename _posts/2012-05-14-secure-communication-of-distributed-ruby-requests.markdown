---

title: Secure communication of distributed ruby requests
abstract: Various embodiments of systems and methods for providing a secure communication are described herein. A client application generates a Distributed Ruby (DRb) request based on a request received from a user. The obtained DRb request is wrapped to obtain an HTTPS request, which includes the DRb request and one or more authentication information. The generated HTTPS request is forwarded to an HTTPS server, which verifies the HTTPS request based on the authentication information. The HTTPS request is then unwrapped to obtain the DRb request, which is executed by a DRb server to obtain a result of execution of the DRb request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08745706&OS=08745706&RS=08745706
owner: Business Objects Software Limited
number: 08745706
owner_city: Dublin
owner_country: IE
publication_date: 20120514
---
Embodiments generally relate to computer systems and more particularly to methods and systems for secure communication of distributed Ruby requests.

Client Server applications are the backbone of many businesses and aid in their smooth functioning by providing the ability to input process store and access data irrespective of the difference in time and geographic location as well as difference in the position of the device of accessibility. Various communication protocols are used for communicating between the client and the server application. A popular communication protocol for client server communication is a Distributed Ruby DRb protocol due to the ease of connecting Ruby programs over a network. However client server communication using the DRb protocol may not meet the security requirements of several organizations.

Embodiments of techniques for secure communication of distributed ruby requests are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

Initially wrapping may be performed on the DRb request to obtain a Hypertext Transfer Protocol Secure HTTPS request . Hypertext Transfer Protocol Secure HTTPS is a combination of the Hypertext Transfer Protocol HTTP and the SSL TLS protocol. HTTPS provides encrypted communication to prevent eavesdropping and secure identification of a network web server. During connecting to a website HTTPS protects from passive and active network attacks such as Man in the middle attacks. During a session HTTPS can protect against eavesdropping and tampering with the contents of the site or with the information sent to the site. Wrapping is a process of creating the HTTPS request containing the DRb request . Wrapping may be performed by storing the DRb request in the HTTPS request . In one embodiment the DRb request may be stored in the body of the HTTPS request and authentication information may be stored in a header of the HTTPS request . In another embodiment the DRb request may be stored in the header of the HTTPS request . The authentication information stored in the header of the HTTPS request may include a user name password of a user a session identification of the session between the client and the server or any other authentication information.

Next the obtained HTTPS request is forwarded to the server . The forwarded HTTPS request includes an HTTPS header and an HTTPS body . The authentication information included in the header of the forwarded HTTPS request may then be verified. In case the authentication information included in the HTTPS header is verified then the HTTPS request may be unwrapped to obtain the DRb request . Finally the obtained DRb request may be executed to obtain a result of execution of the DRb request . The obtained result of execution of the DRb request may be provided to the client .

Next at block the client application generates a Distributed Ruby DRb request based on the user request received at block . The DRb request may include a Ruby method corresponding to the received user request. The DRb request may also include a Ruby Object for executing the DRb request. A Ruby method is an expression that returns a value. The Ruby method may return values based on parameters included in the expression. The Ruby object handles the execution of the DRb request. The Ruby object may include a method that is to be executed during the execution of the DRb request. In one embodiment a client application component may generate the DRb request. A client application component is a portion of the client application defined to generate the DRb request. In the above example the user request for providing a list of customers may be converted into a DRb request that includes a Ruby Object Client and a Ruby method Clients.list all for retrieving the list of company clients.

Next at block the generated DRb request is forwarded to a DRb client. A DRb client is a Ruby library defined to send the DRb request to a DRb server using a DRb protocol. The DRb client is defined in a DRb library. The DRb library provides a way to share objects over the network allowing Ruby clients to easily connect to share objects and use these objects.

In one embodiment DRB allows selecting a transport layer protocol implementation for transporting the DRb request. In computer networking the transport layer provides end to end communication services for applications within a layered architecture of network components and protocols. In one embodiment a Hypertext Transfer Protocol Secure HTTPS is selected for transporting the DRb request to the DRb server block . In one embodiment a HTTPS client may be registered with the DRb client for transporting the DRb request. Based on the registration a DRb client may send all the DRb requests received by the DRb client to the registered HTTPS client. An HTTPS client is a client application that used a Ruby HTTPS library for HTTPS communication.

A serialization operation may then be performed on the obtained DRb request block . Serialization is the process of converting an object into a stream of bytes in order to persist it to memory a database or a file. Its main purpose is to save the state of an object in order to be able to recreate it when needed. Serialization of the object may be performed for easy transportation of the object from one domain to another or through a firewall. A serialized DRb request may be obtained after performing the serialization operation on the DRb request.

Next at block a wrapping operation may be performed on the serialized DRb request to obtain an HTTPS request. A wrapping operation is an act of creating an HTTPS request containing the serialized DRb request. The HTTPS request may include a HTTPS header and a HTTPS body. In one embodiment the serialized DRb request obtained at block may be stored in the HTTPS header. The serialized DRb request may be stored in the HTTPS header if the DRb request is a GET request. A GET request may be received for requesting a representation of a specified server resource. In another embodiment the serialized DRb request may be stored in the body of the HTTPS request. The DRb request may be stored in the HTTPS BODY if the DRb request is a PUT request or a POST request. A PUT request may be received for uploading a representation of a specified server resource. A POST request may be received for submitting data to be processed to a server resource. In case the DRb request is a DELETE request then the DRb request may be stored in either the header or the body of the HTTPS request. A DELETE request may be received for deleting a specific server resource. The HTTPS header may include authentication information such as the user name and password of the user received at block for securely identifying the user sending the request. In the above example the user name VZN and the password frt 56 may be stored in the header of the HTTPS request.

In one embodiment the HTTPS client may send a request for session identification to an HTTPS server. A session identification session identifier session ID or session token is a piece of data that is used in network communications to identify a session or a series of related message exchanges. Session identifiers may be used in cases where the communications infrastructure uses a stateless protocol such as HTTP. For example a buyer who visits a seller s site wants to collect a number of articles in a virtual shopping cart and then finalize the shopping by going to the site s checkout page. This typically involves an ongoing communication where several webpages are requested by the client and sent back to them by the server. In such a situation it is vital to keep track of the current state of the shopper s cart and a session ID is one way to achieve that goal. Based on the received request the HTTPS server may send back a session identifier identifying the session to the HTTPS client. The obtained session identification may then be stored in the HTTPS header of the HTTPS request.

In one embodiment during the wrapping operation an HTTPS verb may be generated corresponding to the DRb request generated at bock . The HTTP defines eight methods or verbs that indicate actions to be performed on a resource. The HTTP methods includes HEAD GET POST PUT DELETE TRACE OPTIONS and CONNECT. The generated HTTP verb may define the action to be performed for executing the DRb request. The generated HTTPS verb may then be stored in the HTTPS header of the HTTPS request. In the above example an HTTPS verb GET may be generated based on the DRb request Clients.list all . The GET method is defined to request a representation of the specified resource. Requests using GET should only retrieve data and should have no other effect. The HTTP verb GET may be stored in the HTTPS header of the HTTPS request.

Next at block the generated HTTPS request may be forwarded to an HTTPS server. In one embodiment the HTTPS client may use the HTTPS library to send the HTTPS request to the HTTPS server. The HTTPS client may forward the generated HTTPS request to the HTTPS server by initiating a communication with the HTTPS server. After forwarding the HTTPS request the HTTPS client may wait for receiving a response from the HTTPS server. In one embodiment an HTTPS server is a standalone or a built in HTTPS server.

Next at block the authentication information included in the header section of the HTTPS request received by the HTTPS server at block may be verified. For example the HTTPS server may compare the user name and password stored in the HTTPS header of the received HTTPS request with a list of user name password pairs stored in the HTTPS server for verifying the received HTTPS request. Based on the verification a determination is made whether the HTTPS request received at block is authenticated block . In the above example the user name VZN and the password frt 56 may be compared with the list of user name password stored in the HTTPS server to determine whether the HTTPS request received by the HTTPS server is authenticated.

Next in case the HTTPS request is authenticated condition in block is true the received HTTPS request is unwrapped to obtain the serialized DRb request stored in the body of the HTTPS request block . Unwrapping is a process of retrieving the serialized DRb request from the HTTPS request. The obtained serialized DRb request may then be de serialized to obtain the DRb request block . In the above example if the DRb request is authenticated then the serialized DRb request stored in the header or the body of the HTTPS requested may be retrieved and de serialized to obtain the DRb request which includes the Ruby Object Client and a Ruby method Clients.list all .

Next at block the DRb request obtained at block may be forwarded to a DRb server. In one embodiment the HTTPS server may be configured to route all DRb requests to the DRb sever. A DRb server is a program defined to process a DRb request. The DRb server may execute the DRb request to obtain a result of execution of the DRb request block . In one embodiment the DRb server may forward the DRb request to the Ruby object included in the DRb request. The Ruby object may execute the method included in the DRb request to obtain the result of execution of the DRb request. In the above example the DRb request may be executed by the DRb server to obtain a list of clients ABC INC. XYZ CORP. 

Next at block the obtained result of execution of the DRb request is forwarded to the HTTPS server. The obtained result of execution of the DRb request may then be wrapped to obtain an HTTPS result that stores the result of execution of the DRb request block . The DRb result may be stored in the body of the HTTPS result. Next at block the HTTPS result may be forwarded to the HTTPS client. The HTTPS request may be forwarded to the HTTPS client in response to the communication initiated by the HTTPS client. The HTTPS request may then be unwrapped to obtain a result of execution of the DRb request block . The obtained result of execution of the DRb request may finally be forwarded to the client application that received the user request block . In the above example the list of client is finally forwarded to the client application that received the request for client information.

Some embodiments of the invention may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components maybe implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls or web services being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. Examples of computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment of the invention may be implemented using Java C or other object oriented programming language and development tools. Another embodiment of the invention may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments of the invention including what is described in the Abstract is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of and examples for the invention are described herein for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather the scope of the invention is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

