---

title: Directing plug-in updates for a software application to a target audience using manifest parameters
abstract: Techniques for directing plug-in updates for software applications to a target audience using manifest parameters are disclosed. In some embodiments, directing plug-in updates for software applications to a target audience using manifest parameters includes processing a manifest to determine that a plug-in is available for a software application on a device; determining whether a plurality of attributes associated with the plug-in match corresponding attributes associated with the device or the software application, in which the plurality of attributes are identified in the manifest; and automatically installing the plug-in if the plurality of attributes are determined to match.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09003395&OS=09003395&RS=09003395
owner: Adobe Systems Incorporated
number: 09003395
owner_city: San Jose
owner_country: US
publication_date: 20120810
---
In computing systems a plug in e.g. or plugin generally refers to a software component or set of software components that can add specific abilities to a software application. If supported plug ins can enable customizing the functionality of an application. Applications generally support plug ins for various reasons.

Plug ins can be used to enable third party developers to for example create new features and or functionality that extends an application to support easily adding new features and or functionality to reduce the size of an application and to separate source code from an application due to the incompatibility of software licenses.

For example web browsers can use plug ins to display new file types e.g. Adobe Flash Player graphics software can use plug ins to support file formats and or process images e.g. Adobe Photoshop and office productivity software can use plug ins to extend the abilities of its application by adding custom commands and or specialized features e.g. Adobe Acrobat .

The invention can be implemented in numerous ways including as a process an apparatus a system a composition of matter a computer program product embodied on a computer readable storage medium and or a processor such as a processor configured to execute instructions stored on and or provided by a memory coupled to the processor. In this specification these implementations or any other form that the invention may take may be referred to as techniques. In general the order of the steps of disclosed processes may be altered within the scope of the invention. Unless stated otherwise a component such as a processor or a memory described as being configured to perform a task may be implemented as a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. As used herein the term processor refers to one or more devices circuits and or processing cores configured to process data such as computer program instructions.

A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.

Plug ins are generally used for customizing the functionality of a software application. Applications generally support plug ins for various reasons. For example plug ins can be used to enable third party developers to for example create new features and or functionality that extends an application to support easily adding new features and or functionality to reduce the size of an application and to separate source code from an application due to the incompatibility of software licenses.

However new plug ins generally must be tested and compatible with versions of a software application and platforms on which the software application and plug ins are executed. For example even if a new plug in is implemented as a platform independent plug in loaders for installing e.g. loading plug ins for the software application are typically not platform independent. As another example a new plug in may only be available for certain languages and or geographies e.g. a new plug in may be available for an English language version of the software application but not yet available for any other languages or regions .

What is needed are improved techniques for directing plug in updates for software applications to a target audience using manifest parameters. Accordingly various techniques for techniques for directing plug in updates for software applications to a target audience using manifest parameters are disclosed in accordance with some embodiments. For example the various techniques described herein can be used to target certain configurations for a new plug in e.g. automatically updating software applications on devices that have certain matching attributes by automatically downloading and loading the new plug in on such devices such as based on platform related information configuration related information and or enterprise related information for enterprise customers .

In some embodiments directing plug in updates for software applications to a target audience using manifest parameters includes processing a manifest to determine that a plug in is available for a software application on a device determining whether a plurality of attributes associated with the plug in match corresponding attributes associated with the device or the software application in which the plurality of attributes are identified in the manifest and automatically installing e.g. loading the plug in if the plurality of attributes are determined to match. In some embodiments the plug in is directed to a target audience using the plurality of attributes that are identified in the manifest. In some embodiments the plug in is targeted for platforms with a set of attributes identified by the manifest. In some embodiments the plug in is a self updating component of a software application.

In some embodiments the plurality of attributes include a platform type and platform version related attribute a software application version related attribute and an attribute associated with one or more other configuration parameters e.g. geography language associated with a geography and or enterprise related configuration parameter s .

In some embodiments the plug in requires a license to execute. In some embodiments the plug in requires a license to execute and additional payment is required to access the license.

In some embodiments directing plug in updates for software applications to a target audience using manifest parameters further includes determining whether to automatically install the plug in using a filtering mechanism that selects the plug in based on a capability associated with the device.

In some embodiments directing plug in updates for software applications to a target audience using manifest parameters further includes determining whether to automatically install a first version of the plug in based on a capability associated with the device in which a plurality of versions of the plug in are available.

In some embodiments directing plug in updates for software applications to a target audience using manifest parameters further includes determining whether to automatically install the plug in based on a tuner key configuration setting e.g. a registry setting or other secure configuration setting associated with the application and stored on the device in which the plug in is not automatically installed if the tuner key is not set to a value indicated in the manifest for the tuner key.

In some embodiments directing plug in updates for software applications to a target audience using manifest parameters further includes periodically sending a request to a server for new plug ins available for the software application executed on the device e.g. the request can include a request for a new or current manifest which lists any new plug ins .

In some embodiments directing plug in updates for software applications to a target audience using manifest parameters includes receiving a request for a manifest from a client device and sending the client device a manifest that identifies a plurality of versions of a plug in that are available for a software application on the client device in which the manifest is sent to a plurality of client devices and in which the manifest includes a plurality of attributes for targeting each of the plurality of versions of the plug in. In some embodiments each of the plurality of versions of the plug in are directed to target audiences using the plurality of attributes that are identified in the manifest.

Referring to a platform is shown that includes a SPA server . In some embodiments the SPA server is a cloud service. In various embodiments SPA server is managed by a third party e.g. Akamai or is managed by the software company which produces the application e.g. Adobe in the case of Adobe Acrobat . For example the SPA server can be a server controlled maintained by a software application vendor e.g. associated with application or as another example the SPA server can be provided by a third party content delivery server used by the software application vendor for such content delivery e.g. an Akamai server or another third party content delivery server . As shown the SPA server includes a SPA engine a manifest e.g. a SPA plug in manifest that can be implemented as an XML formatted file or another format of data that lists available SPA plug ins and or versions of SPA plug ins and a plug in e.g. a SPA plug in . In some embodiments the SPA server also includes target information . In some embodiments the target information is included within the manifest e.g. using manifest parameters . As also shown a client device is in network communication with the SPA server via a network e.g. the Internet and the client device includes a software application e.g. Adobe Acrobat or another software application that includes a SPA engine e.g. a SPA loader a manifest e.g. an XML file or another formatted set of data such as a signed XML list of SPA plug ins and in some cases multiple versions of plug ins can be available such as an initial version 1.0 may only support English only and then a later version 1.1 may support English French German and Spanish languages and a plug in .

For example the client device executes the application in which the SPA engine can periodically request a manifest. The SPA server executes the SPA engine and in response to the manifest request sends the manifest to the SPA engine . The SPA engine processes the downloaded manifest to determine which plug ins e.g. including in some cases which versions of a plug in to download and then install for use by the application e.g. the SPA engine can determine which plug ins versions of plug ins to download based on processing of the manifest prior to downloading any new plug ins which can be performed as an asynchronous communication process . The SPA engine can then request the selected new versions of plug ins from the SPA server . In some embodiments processing the manifest includes selecting a plug in that includes variants using various techniques described herein e.g. processing the manifest to determine a variant selection storing the variant selection as a persistent configuration parameter for the plug in and using the variant selection when loading the plug in to execute the selected variant at run time . In some embodiments processing the manifest includes selecting a plug in e.g. and possibly a particular version of a plug in based on targeting information included in the manifest e.g. or separately stored target information provided by the SPA server using various techniques described herein. In some embodiments targeting information includes various parameters associated with the application and or the client device e.g. geography locale operating system platform version related information application version related information and or other basic or advanced attributes such as tuner keys or other parameters such as those described herein with respect to various embodiments . In some embodiments targeting information includes tuner parameters e.g. matching values of tuner keys which are configuration settings that can be security stored and associated with the software application using various techniques described herein. In some embodiments both variants and targeting information are used for selecting which if any plug ins versions of plug ins to install and which variants to execute at run time for use by the application using various techniques described herein.

In some embodiments a new plug in or new versions of a plug in can require certain billing or licensing requirements. For example if the application does not have sufficient license billing rights associated with the new plug in or new version of the plug in then the SPA engine can execute a user interface UI display e.g. UI trigger that provides an interface for prompting a user to provide any required license billing related information and authorization e.g. billing model payment method s and authorization certificate s as part of the process for downloading and installing that plug in plug in version which can also include secure interactions and verifications with the SPA server or another billing licensing service or cloud service for performing billing licensing processing and authorizations .

In some embodiments an application monitor executes on the client device to monitor a user s interaction with plug ins installed for use with the application . In some embodiments the application monitor monitors activities e.g. user interactions and or application activities with plug ins e.g. selected for install using variants and generates reports for the platform e.g. a Services Plug In Architecture SPA platform based on the monitored user interactions with plug ins that facilitates providing interactive product improvement through the use of variants and data gathering reports in a system that can be updated on the fly. For example the application monitor can record mouse clicks keyboard interactions and or touch screen interactions to monitor which features users are using not using and or how the users are interacting with such features e.g. features functionality associated with plug ins . As another example the application monitor can record observation of the application e.g. as a whole with filtering applied to all data to extract desired data regarding the plug in of focus on a back end server or cloud service function e.g. to limit server communication from many clients or in some cases the filtering or some of the filtering can be performed locally on the client device. These techniques can be used to facilitate a software application product improvement program that can yield valuable information about how customers use and interact with such software application products including plug ins and different versions of plug ins. The software application product improvement program can be implemented to be voluntary e.g. users can be prompted to opt in and or be given an option to opt out and anonymous. In some scenarios customers who elect to participate agree to share various information including the following system information such as operating system processor and memory installed browser type and version certain software application product information such as version number plug in information such as version number and software application feature usage information including plug in plug in version usage information such as menu options or buttons selected.

In some embodiments the manifest is processed on the SPA server by the SPA engine to determine which plug ins versions of plug ins to select for downloading to the client device for installation and use by the application . In some embodiments the SPA server requires that the SPA engine send various information associated with the client device and the application to process the manifest and in some cases the target information . For example such information provided by the client device for such purposes can be provided in an XML file or another format of data including any parameters used for processing the manifest such as client device and application related attributes tuner key settings and or any other attributes or parameters. In some embodiments whether to process the manifest locally on the client device or on the SPA server can be configured or determined dynamically e.g. based on client processing resources capabilities and or trust parameters based on SPA server processing resources and or network bandwidth and or various other parameters or considerations such as for performance bandwidth work load balancing and or security considerations .

In some embodiments the plug in is installed on the fly without the user waiting or having to restart the application. In some embodiments the plug in is automatically installed but the plug in is executed only when the application is started. For example if the plug in is not yet downloaded and installed when the application is started then the plug in is not executed until the next time the application is started e.g. this approach can ensure that the user interface is consistent for the application throughout a given session and avoids a user experience in which a user may be surprised by a user interface changing during that session .

In various embodiments steps are performed in any order. For example new plug ins may be periodically detected and obtained from SPA server and the plug in may have been downloaded before processing the manifest to determine whether or not to install the plug in .

In some embodiments plug ins perform a variety of services and functions that are not necessarily provided by the underlying application e.g. Adobe Acrobat or another application and in at least some cases can only be obtained by installing the plug in. For example an electronic signature plug in can be provided to extend an office productivity software application such as Adobe Acrobat . The variant mechanism described herein with respect to various embodiments can be used to test providing the electronic signature plug in as a for purchase plug in version and as a free trial plug in version e.g. free for a certain period of time before purchase is required for continued use . The customer interactions with these variants can be monitored to determine which option is more likely to generate more revenue e.g. whether there will be more purchases of the new plug in by users if there is a free trial period or not . Based on the feedback learned using the variant mechanism for this example plug in scenario the manifest can be modified to change the variants e.g. adjust variant allocations such as percentages associated with different versions of the plug in or in some cases simply choose one of the variants as the default or only variant of the plug in to execute at run time e.g. or as another example a few number of variants may be used to perform further testing on a subset of the variants as a form of a run off between such variants such as to obtain a wider metric for those variants before determining whether or not to select one or any of those variants for the application . For example if the for purchase only option is more successful based on such variant based testing and automatic feedback loop e.g. generates more revenue and or yields a greater number of purchases of the plug in then the manifest can be modified to only provide that variant of the plug in e.g. the trial period variant is not included in the manifest . The electronic signature plug in is merely exemplary and plug ins are not necessarily so limited. As will now be apparent to one of ordinary skill in the art in view of the various embodiments described herein the variant mechanism techniques can be used to provide various plug ins that include a plurality of variants and can be used to automatically adjust variant settings based on monitored feedback using the various techniques described herein with respect to various embodiments e.g. without necessarily having to re download the plug in as the variant settings can be adjusted to cause different variants to be performed at run time for that plug in in which the variants are adjusted using for example manifest parameters that can be changed in a new version of a manifest which can be downloaded and processed to cause the stored value s of the variant selection to be modified on a given client device s .

In addition to being able to facilitate interactive product improvement through the use of variants and data gathering reports in a system that can be updated on the fly the platform can also facilitate directing plug in updates for a software application to a target audience using manifest parameters if so desired. In some embodiments plug ins are targeted based on attributes associated with the client device such as basic attributes e.g. version platform etc. as well as advanced attributes e.g. variants tuner keys etc. . For example if a brand new plug in is only available to Chinese language versions of the software application then the plug in can be targeted to such Chinese users using manifest parameters e.g. language version geography and or locale parameters . Using target information if desired plug ins may be targeted to Chinese users e.g. or users meeting some other criteria .

For example an electronic signature plug in can be provided to extend an office productivity software application such as Adobe Acrobat . The targeted install mechanism described herein with respect to various embodiments can be used to direct the electronic signature plug in to a target audience based on various information such as information related to platforms configurations and or enterprise customers. For example if the electronic signature plug in has only been developed and tested for certain platforms and configurations e.g. English language versions of release version X.0 then the manifest can include certain required attributes to only allow for install of the electronic signature plug in on devices that match any such required attributes. The electronic signature plug in is merely exemplary and plug ins are not necessarily so limited. As will now be apparent to one of ordinary skill in the art in view of the various embodiments described herein the targeted install mechanism techniques can be used to provide various plug ins versions of plug ins and can be used to direct plug in updates for software applications to a target audience using manifest parameters using the various techniques described herein with respect to various embodiments.

In some embodiments plug ins are targeted based on attributes associated with the client device including advanced attributes such as tuner keys e.g. registry keys or other configuration settings which for example can be securely configured such that system administrators can control which software updates including plug ins can be installed loaded on client devices with software applications . In some embodiments tuner keys are configuration settings that are stored on the client device as shown in e.g. tuner keys can be stored as registry key related information securely stored and associated with the application . For example tuner keys can be used for enterprise customers of the software application to control a common configuration environment for each of the client devices managed by a particular enterprise e.g. in which a system administrator can control which plug ins versions of plug ins can be installed loaded in order to maintain a common client device computing environment including using such tuner keys for selecting which versions and plug in extensions can be installed loaded for the software applications on the client device . In some embodiments enterprises can disallow public software updates e.g. disable automatic software updates that include new plug ins from Akamai servers and redirect the enterprise managed client devices to request new manifests from an enterprise controlled manifest location so that only enterprise approved and tested updates are allowed to be posted in the enterprise controlled manifest.

In various embodiments a plug in is able to access cloud based services includes a sophisticated user interface experience e.g. panels and calculations can be easily created and or can interact with native user interface elements e.g. user interface controls and or services that are native to Adobe Acrobat as opposed to the plug in . In various embodiments an out of update of a plug in is supported e.g. detection distribution and or execution of a plug in is not dependent a version update of the software application for which the plug in is provided such as Adobe Acrobat and in some cases such can be installed on the fly such as when the software application is currently being executed a plug in has access to Access to the JavaScript Document Object Model DOM Application Programming Interfaces APIs and or a plug in is able to provide bidirectional communication.

The various techniques described herein with respect to various embodiments for targeting plug ins based on attributes associated with the client device such as basic attributes and advanced attributes provide for a more flexible and targeted mechanism for distribution and installation of plug ins. Another benefit is the reduced amount of network traffic which reduces networking related costs. Other criteria by which plug ins are targeted may be employed some other examples are described in further detail below.

Referring to SPA plug in includes interface definition specification IDS . In general IDS includes metadata describing the SPA plug in including but not limited to the contents of a SPA plug in wrapper or package e.g. SPA plug in . In various embodiments IDS includes the following identifying attributes of the SPA plug in e.g. a unique identifier ID and a version number to uniquely identify the plug in and its version and in some cases a group attribute that can be used for example to identify plug ins authored by the same vendor user interface elements of the SPA plug in to be displayed via an application user interface e.g. panels menu items buttons etc. actions performed by the SPA plug in via an application user interface e.g. new panes logging events or pop ups not native to the application references to resources used or called by the SPA plug in e.g. access strings icons databases or storage etc. In some embodiments IDS includes metadata about resources and or actions .

In this particular example IDS includes references to resources and actions which are also components of SPA plug in . Resources include resources called by or used by an SPA plug in and a variety of items such as icons strings data files and or accessible storage or devices. In some embodiments resources include common resources e.g. which are available or used globally and localized resources e.g. for use in specific locales .

Graphics platform is used to draw e.g. buttons checkboxes and other user interface controls to an application user interface. In some embodiments graphics platform is a SWF Shockwave Flash file. A SWF supports all three key concepts of a Model View Controller MVC model and is an example of a compiled self contained platform independent graphics platform. At least in the case of SWF files the model is handled via the logic which is available to a SWF via the underlying ActionScript code which is compiled into the SWF. ActionScript and SWFs compared to some other MVC models may be attractive because the MVC model is platform independent e.g. like Java . Some other user interface platforms are platform specific e.g. XCode for iOS is specific to Apple platforms . However whatever the platform they all typically support some form of graphical interface builder IDE e.g. the Adobe Flash Flex Builder along with a programming language interface e.g. ActionScript and via some form of compiler spit out an executable of some form e.g. a SWF file .

In some embodiments a plug in e.g. a SPA plug in is a software module created to extend the capabilities of a software application e.g. Adobe Acrobat or another software application . In some embodiments a plug in is packaged as a container file e.g. a Universal Container Format UCF file . In some embodiments the plug in also includes a digital signature for certification.

In some embodiments variant names and percentages are used to allocate different variants of a plug in with a degree of randomness such that different client devices may be configured to execute e.g. at load time run time different variants of the plug in to facilitate interactive product improvement through the use of variants and data gathering reports in a system that can be updated on the fly. The following figure shows an example of variant names and percentages.

Referring to SPA manifest includes variant information . In this example three variants are defined variant A with a percentage or probability of 25 variant B with a percentage or probability of 25 and variant C with a percentage or probability of 25 . Although three variants are shown in this example any number of variants may be used e.g. just variant A or another form of identification label such as A1 B12 Car B5g67 etc. and different allocations e.g. percentages may be used for each of the variants. A number in the range 1 100 i.e. inclusive of 1 and 100 is selected. If the randomly selected number is in the range of 1 25 then variant A i.e. the first variant encountered when parsing variant information is used if the randomly selected number is in the range of 26 50 then variant B i.e. the second variant encountered when parsing variant information is used and if the randomly selected number is in the range of 51 75 then variant C is used. If the randomly selected number is greater than or equal to 76 then the plug in is not updated. Each of the variants may be associated with a different aspect of the plug in including the plug in itself. Note that variants are applicable to panes panels menu items buttons links text actions and even as ActionScript conditionals. In general variants allow for complete modification of the plug in in any way shape or form desired.

Variants may be used to test different functionality features of plug ins for a variety of applications. For example a new plug in that includes a plurality of variants may be provided and a company may want to determine the most effective variant of the new plug in such as based on user interaction. In one example of how variants are used 5 of users are presented with a first variant of the plug in 5 of users are presented with a second variant of the plug in and the remaining 90 of users are ignored i.e. they are not part of the product improvement testing for the different variant of this new plug in . By observing the interactions of the users presented with the first and second variant of the plug in e.g. using Adobe Headlights or another programmatic tool for monitoring user interactions with a software application that is configured to execute different variants of the plug in at run time the most effective version of the new plug in can be determined to facilitate product improvement for the software application. Using variants trial features functionality of a new plug in may be tested on a portion of the user base before being released on a wider scale.

In some embodiments variants are combined with other target information so that a particular variant of a plug in is only presented to a number of users e.g. a subset of randomly selected users or all users based on the variant s devices or configurations e.g. attributes which meet certain criteria based on the target information. For example a version of a plug in can be delivered to a certain percentage of non enterprise users enterprise users in that example would not be presented with the plug in e.g. which can be targeted to not receive the plug in based on tuner key settings values . Another example is a new plug in that is English only e.g. because there was not enough time to localize the plug in . At a later point a revision comes along that contains tier one locales e.g. French German Spanish followed by tier two Chinese Japanese Korean etc. As another example such targeting techniques can be used to target variant selection for certain users devices and or other criteria e.g. MAC OS users in the United States can be configured to select variant A of a new plug in and Microsoft Windows users in the United States can be configured to select variant B of the new plug in and all other users can be configured to select variant C of the new plug in .

In some embodiments manifest parameters e.g. attributes or other parameters are used to direct new plug ins or particular versions of plug ins for a software application to a target audience e.g. client devices with certain platforms and configurations software application versions with certain configurations and or other criteria such as based on enterprise configuration information for enterprise customers . The following figure shows an example of manifest parameters.

Referring to SPA manifest includes parameters that are used for directing plug in updates for software applications to a target audience. In this example the manifest requires certain attributes e.g. configuration content in order to install e.g. load a SPA plug in e.g. promptPane BasicSharePane . In particular the manifest parameters in this example require that the language attribute match the English language US setting in which this plug in can be directed to the software applications that are the English language US releases e.g. for a staged release of the new plug in in which in an initial stage of the release only an English language of the new plug in is supported and distributed . In general manifest parameters allow for directing plug in updates for software applications to a target audience in any way shape or form desired.

In some embodiments a plug in or a particular version of the plug in is delivered to enterprise users based on a tuner key e.g. setting s of tuner key s can be used to determine whether or not the plug in is installed for the enterprise user s software application . For example a manifest can require certain attributes e.g. configuration content including certain tuner key settings in order to install e.g. load a particular plug in.

In some embodiments a decision whether to install a plug in or a particular version of the plug in e.g. which includes a random factor is made each time an application is started. For example if a message is to be presented to 5 of users each time a user starts the application then that user has a 5 chance of viewing the message. In such embodiments just because a user is presented with the message one time does not necessarily mean that that user will see the message again the next time that the user runs that application.

Below is an example manifest schema that lists available SPA plug ins that can be downloaded from a SPA server. As shown below the manifest schema supports variants and also supports attributes and tuner keys for targeting delivery of plug ins.

Referring to the above example manifest schema in some embodiments the version attribute is the version of the schema itself while the release attribute describes the required version of the software application e.g. Adobe Acrobat in order to interpret the schema e.g. as the code for this example manifest schema is written in C . The updateRate is used to override the time in days between checking for updates while the updateWait is the delay time after initializing the software application e.g. executing Adobe Acrobat . Once the manifest is checked the rate of updates for SPA plug ins will be set to that of the manifest until the described rate changes upon subsequent updates. An optional group can be specified to indicate the default group for all plug ins listed in the manifest. With regard to a manifest plug in element standard identifying attributes of the plug in include its unique id group identifier version the configuration version it requires and the release version of the software application required. In some cases if the group identifier is specified is in the manifest element it is not required for the plug in element unless it used to override that group of the manifest. The release attribute represents the initial release for the update e.g. subsequent releases may also be allowed but those will often have that plug in version incorporated already or possibly a future version of the plug in . In some cases the configurations element is limited to one or more configuration elements which can be specified with the platform e.g. Microsoft Windows or Apple OS X and or software application product e.g. Adobe Acrobat Reader Standard or Pro attributes defined. For example the attributes can be combined using inclusive logic e.g. the default in each case is to include everything such that only specify the items needed to single out configurations not specifying either platform or product will act to include all platforms or products respectively . In some embodiments enhanced logic is available along with logic operands e.g. and or and negation .

In some embodiments the tuner key attribute such as shown in the above example manifest schema uses an enable prefix to describe a key value pair which matches the software application registry entries regarding enterprise usage. If the tuner key is non existent the plug in is not precluded otherwise the availability of the plug in is dependent on the tuner key. For example the tuner attribute enableWorkflows AcrobatHS ShareFile would indicate to check entries of EnableAcrobatHS and EnableShareFile under the Workflows dictionary under the Adobe Acrobat registry area. The URI attribute specifies a valid location where the plug in is located on a server. An appropriate hash algorithm and value can be required that correspond to the data at the URI. In some embodiments a registry can include a disableXXX setting that is similar to an enableXXX setting except that in the absence of the registry key the default behavior is to preclude the plug in.

In some embodiments there are several install attributes for on a per plug in basis as well. These can include the requires prompt to override user settings if auto install if applicable on which pane if any to display the prompt promptPane and whether an immediate install is desired e.g. which may alter the UI instantaneously . In some cases there is the capability to exclude downloads if the user has an ask preference for install excludePromptInstall . The priority attribute can be used to describe the criticality for the update e.g. to be used by the UI in suggesting an update to the user such as required recommended optional and testing.

In some embodiments the variants element is used to optionally hold one or more variant elements each of which describes that variant by its name and its percentage. The special variant name disabled is reserved to indicate the option of not loading the plug in at all and may be used but only with that predefined meaning. The sum of percentages should generally total no more than 100 any remaining percentage is treated as the option inactive . In some embodiments at runtime the framework will select a choice based on the weighted options. For example an A B test to be equal distributed among 10 of users would have variants of name A percentage 5 and name B percentage 5 . In some embodiments in the actual plug in IDS e.g. an ids.xml file the useVariant attribute may be used to override this variant selection e.g. the useVariant attribute can be used for overriding which variant had initially been selected at download time when reading from the SPA plug ins manifest to allow for minimal change to the SWF such as in cases when a deadline for a periodic release is needed and or in other use scenarios in which this functionality is desired. The SWF will be able to retrieve the variant using the new getVariant API and individual UI items e.g. anything that supports the flags perms and enable attributes can use the variants attribute followed by a comma separated list of variants as necessary. The variants can also be required to be listed at the top level of the plugin ids.xml file.

In some embodiments the startDate and revertDate attributes are used to control the lifetime of a plug in. The start date can indicate that a plugin should be downloaded immediately but not loaded until a later start date. If not specified the plug in is to be installed at first opportunity. Another possible usage of the startDate is to ensure that all applicable users are ready when the testing is schedule to begin e.g. to avoid a ramp up period during which updates are occurring through a default update period . The revertDate can be used to ensure when a particular test should be concluded such as for testing a new plug in new version of a plug in using the variant mechanism as described herein with respect to various embodiments. Another possible usage for the revertDate attribute can be to immediately stop all usage of a plug in such as in the event of some security issue.

In some embodiments the locales element includes one or more locale elements that contains a language attribute e.g. which follows the RFC 3066 language code such as lang en US as well as a localized prompt and optional note. The two reason fields e.g. note and prompt can be used for different situations. The prompt field can be used to display one or more reasons for updates when the user is prompted as to whether the updated is desired. For example this prompt can be an HTML string that will be used as the main body text of a Flash popup. A note however is used in the case where SPA provides a notification that an automatic install has occurred. Due to its usage context the note value string is generally not an HTML string.

Below is an example plug in that includes variants. As shown below this plug in supports three variants e.g. variant A B C . In this example variant A is used for the top bar button in the menus and the advertisements. Variant B will only display in the advertisements. Variant C only appears in the top bar button.

The following table gives some examples of how targeted information e.g. using manifest and or target information may be used to target certain users but target information is not limited to the examples described below. Any target information which can be used to discern a unique segment of users e.g. paying customers versus free customers those from a given state with certain laws those who have customer feedback turned on etc. may be used.

In some embodiments the target information is compared against local configuration information e.g. basic attributes and or advanced attributes to determine if the plug in should be downloaded and or installed loaded. For example local configuration information can be obtained from a variety of sources and or a variety of locations. In some embodiments a registry area e.g. some of which may be restricted associated with an application e.g. Adobe Acrobat is accessed and location configuration information is obtained from there e.g. such as tuner key settings values .

Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive.

