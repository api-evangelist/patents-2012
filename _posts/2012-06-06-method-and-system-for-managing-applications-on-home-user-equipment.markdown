---

title: Method and system for managing applications on home user equipment
abstract: A system and method for managing an application on a home user equipment, preferably a set-top-box of a television, the method includes the steps of:


url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09250970&OS=09250970&RS=09250970
owner: NEC EUROPE LTD.
number: 09250970
owner_city: Heidelberg
owner_country: DE
publication_date: 20120606
---
The invention relates to a method for managing an application on a home user equipment preferably a set top box of a television.

The present invention relates also to a system for managing an application on a home user equipment preferably for executing a method according to one of the claims .

Although applicable in general to home user equipment the present invention will be described with regard to a set top box for a television as home user equipment.

Conventional television content delivery systems distribute television content among a plurality of users via electronic communication means. The content may be any audio and or video content or accompanying informational content such as the electronic program guide EPG. Such a conventional television content delivery system is shown in . From a source operated by a corresponding content provider content is transmitted via transport service providers such as digital IP TV providers satellite television providers and or cable television providers . Such service providers may then use a combination of standard and non standard data transport technologies to deliver content to users subscribing the content.

For example in case of IP TV cable television and satellite television users such as a family in a home subscribe to one or more of these service providers in order to receive the content. The service providers supply users with a set top box prior to receiving the content that is able to decipher or decrypt specific encoded content sent by the corresponding service provider into a format suitable for example for displaying on a user s television . Recently upcoming television sets may have in built set top boxes in which case the service provider provides authentication credentials. The users may then use these credentials to operate the in built set top box. Some service providers may also allow interaction by providing a back channel from the user to the content provider . For example a user may then use a remote control to send control messages to the content provider via the service provider . These control messages may then be used to control the content provided by the content provider to the user .

A set top box receives encoded content via data input output ports and outputs an audio and or visual signal suitable for viewing with a television via its audio visual output port . The set top box further comprises a user input interface with which for example via a wireless remote control actions of the set top box may be controlled for example adjusting the loudness of the audio signal a television program switch or the like. The set top box usually comprises a digital right management manager used to decode ciphered or encrypted data from the service provider . Conventional digital rights management managers are implemented as a hardware module in order to prevent a tampering and or unauthorized access to audio video content.

The set top box comprises further a processor CPU and memory for running an application on the set top box for example a decipher application etc. A controller in the set top box coordinates overall functioning of the different components of the set top box . A user interface engine is responsible for the user interface for example menues or the like presented to the user. Such user interfaces may for example be implemented in form of limited web browsers. Further conventional set top boxes may support additional downloadable software applications wherein these software applications then usually provide their output to the user interface. As an example electronic program guide information displaying information about television program schedules is conventionally implemented as software application .

High end conventional set top boxes also include local non volatile storage for storing video and or informational content and or software applications. Such a persistent storage may also be used to implement a personal video recorder PVR for the user in particular to provide time shift viewing of television programs. To present audio video content to the user a video decoding unit takes as input audio video content from the digital rights management manager or from the persistent storage and decompresses it. Output from the user interface engine is then overlaid on top of the decompressed video audio content via a multiplexing renderer . A hardware abstraction layer then converts the audio video output from the multiplexing renderer into signals suitable for conventional televisions. The hardware abstraction layer also converts user control signals sent to the set top box for example via a remote control into messages to be processed by the user interface engine .

However conventional home user equipment in particular in form of a set top box suffers significant disadvantages.

One of the disadvantages is that most service providers provide media content in a non standard inaccessible and encoded format making it unsuitable for mixing it with other information of other content providers. A further disadvantage is that most home user equipment in particular set top boxes have a very limited ability to execute or install complex applications because of they are designed for the end consumer market therefore have to be low cost. An even further disadvantage is that different set top boxes of different service providers result in a overall heterogeneous content delivery architecture and capabilities among different users which further results in high costs and a limited ability to provide additional services for a plurality of users. Conventional set top boxes are normally equipped with hardware implemented software applications making it necessary to replace an old set top box with a newer one when the service provider would like to provide enhanced or additional services even in case of updates. One of the further disadvantages is that home user equipment works in general only well with a specific content presenting means.

In US 2010 0064335 A1 so called virtual set top box is shown which emulates hardware capabilities of a physical set top box to process IPTV content. However this requires for example complicated respectively complex hardware and software like a personal computer to emulate a set top box via a software application. Conventional personal computers are too big too loud and consume too much energy to be used in a home user environment for example next to a television when viewing video content via the personal computer on a television. Further the user has to control and monitor a running virtual set top box on his personal computer which need a lot of user interaction in particular before and during viewing video content. Therefore implementing such a virtual set top box on a general purpose personal computer reduces significantly system reliability while increasing a risk of security breaches via unauthorized access to copyright protected media content.

It is therefore an objective of the present invention to provide a method and a system for managing an application on a home user equipment which are more flexible than conventional methods and systems in particular with regard to processable services.

It is a further objective of the present invention to provide a method and a system for managing an application on a home user equipment which are easier to implement and require less user interaction to be able to present media content for the user without deteriorating security of protected content.

It is an even further objective of the present invention to provide a method and a system for managing an application in a home user equipment which may be more easily provide further services which are in particular not implemented when a user buys the home user equipment in a retail store.

It is an even further objective of the present invention to provide a method and system for managing an application on a home user equipment allowing flexible interconnection of different media content presenting means reaching in particular from mobile phones via tablets to beamers and conventional televisions.

In accordance with the invention the aforementioned objectives are accomplished by the method of claim and a system according to claim .

According to claim the method for managing an application on a home user equipment preferably a set top box of a television is characterized by the steps of

According to claim the system for managing an application on a home user equipment preferably for executing a method to one the claims comprising a home user equipment preferably a set top box of a television and a computational entity located in the internet comprising each an input interface and an output interface for communication with each other.

According to claim the system is characterized in that the computational entity comprises a task divider for dividing the application into separate executable application parts and for determining for each separate executable application part whether to be executed on the home user equipment or on the computation entity communication means for transferring application parts determined for execution on the computational entity to the computational entity via the input and output interfaces and for returning results of executed application parts to the home user equipment via the input and output interfaces a processor for executing transferred application parts on the computational entity and a synchronizer for synchronising returned results with results of separate application parts executed on the home user equipment.

According to the invention it has first been recognized that the method according to claim and the system according to claim provide the ability for execution of more complex applications on home user equipment.

According to the invention it has further first been recognized that the method according to claim and the system according to claim provide a more easier incorporation of further components and or subsystems for future use on the home user equipment.

According to the invention it has further been first recognized that the method according to claim and the system according to claim allow an efficient sharing of resources when providing media content thus saving energy.

According to the invention it has further been first recognized that the method according to claim and the system according to claim provide a high level of security for protected media content while enhancing the flexibility for processing content of different service providers.

According to the invention it has further been first recognized that the method according to claim and the system according to claim needs lesser user interaction while enabling to provide more complex and more applications.

According to a preferred embodiment identical application parts transferred to the computational entity from different home user equipment are identified wherein one of the identical application parts is executed by the computational entity and a result of this execution of the one identical application part is returned to each of the different home user equipment. This enhances the economic viability by deploying unique copies of complex software applications on the computational entity for each home user equipment. For example making computational entity resources available on a per home user equipment basis would be very expensive. By identifying identical application parts and executing one of the identical application parts and finally transferring identical results back to each home user equipment the amount of computational entity resources needed for performing the application is significantly reduced.

According to a further preferred embodiment identical application parts are identified by identical inputs and identical execution information preferably execution code. This enables a reliable identification of identical application parts to be executed in the computational entity located in the internet. It is further possible to implement a requirement depending on the application part whether identical application parts start executing at the same time i.e. within a given time period to avoid time lag. This provides fast replication of results or outputs of identical application parts across different home user equipment. It is possible that two identical separate executable application parts may correspond to different applications and different home user equipment.

According to a further preferred embodiment at least one of the steps a c includes analyzing a source code of the application. This allows a reliable division of an application into smaller separate executable components respectively application parts. A further advantage is that the division may be performed based on preferences for example the source code may be analysed in terms of integer and or floating point performance and then assigned to a suitable subcomponent of the computational entity. An even further advantage is that these divided components may be analyzed for example for cycles in the execution.

According to a further preferred embodiment at least one of the steps a c includes analyzing a data flow of the application. This allows a reliable division of the application into separated executable application parts for example by identifying a cycle during execution of the application and combing cycles within one separate executable application part. This minimizes data exchange between separate executable application parts in particular if data exchange is necessary between a component running on the home user equipment and another separate executable application part running on the computational entity. Further network latency between the computational entity and the home user equipment is avoided respectively minimized.

According to a further preferred embodiment computational requirements of an application for execution on the home user equipment are identified and separate executable application parts exceeding solely or cumulatively computational requirements of the home user equipment are determined for execution on the computational entity. This optimizes for example the use of resources of the home user equipment and the computational entity Only these separate executable application parts which are alone or together with other separate executable application parts above the computational requirements of the home user equipment are transferred to the computational entity for execution. This avoids unnecessary transfer to application parts and resources on the computational energy on the one hand and on the other hand resources of the home user equipment are used in an optimized way without overloading the home user equipment.

According to a further preferred embodiment step b includes determining a local parameter indicating a physical requirement to be executed on the home user equipment. This enables to determine whether to execute separate executable application parts on the home user equipment or on the computational entity. For example a separate executable application part in form of an image buffer writing out a visual output of the separate executable application part needs to be a part of the home user equipment therefore the corresponding separate executable application part must be executed on the home user equipment.

According to a further preferred embodiment an output of a first application part is used as input for a second application part executed on the computational entity preferably wherein the first and second application part correspond to different applications on separate home user equipment. This allows an implementation of a composition of several further functions If for example an output of a first function is used as input for further functions not only further functions may be provided by also recalculation of outputs for the further functions is avoided resulting in an even more efficient use of computational resources of the computational entity. Such a use may be performed for example via copying a memory storing an output into next functional components as input and or through network protocols such as multicast depending on whether functional components are executed on the same physical computational entity or not.

According to a further preferred embodiment the home user equipment provides connector means for enabling an entire application to be executed on the computational entity. In this way the computational entity provides an addition or removing of corresponding connector components or means enabling the entire application execution on the computational entity. For example if a complete application is moved from the home user equipment to the computational entity then an output of the application may be streamed to the home user equipment. The connecting means are then for example a stream encoder and a network streamer application in the home user equipment to enable this functionality together with a corresponding stream receiver decoding such a stream to the home user equipment as required.

According to a further preferred embodiment separate executable application parts are provided with common data input and data output ports. The term common with regard to data input and data output ports means standard data input and data output ports providing are an easier data exchange between separate executable application parts.

According to a further preferred embodiment of the system according to claim the computational entity further comprises a multiplexer for mixing input and results of separate executable application parts. Such a multiplexer is preferably used to mix outputs of applications content and user input. The multiplexer for example creates a unified data stream from different sources which can be transmitted to the home user equipment for further processing and or rendering at user premises.

There are several ways how to design and further develop the teaching of the present invention in an advantageous way. To this end it is to be referred to the patent claims subordinate to patent claim and subordinate to patent claim on the one hand and to the following explanation of preferred embodiments of the invention by way of example illustrated by the figure on the other hand. In connection with the explanation of the preferred embodiments of the invention by the aid of the figure generally preferred embodiments and further developments of the teaching will we explained.

In a conventional television content delivery system is shown. A content provider provides media content to multiple transport service providers such as digital IPTV providers satellite television providers and cable television providers . These service providers and use a combination of standard and non standard data transport technologies to deliver the media content to subscribing users . For example in case of IPTV cable television and satellite television users such as a family in a home subscribe to one or more of these service providers and in order to obtain the media content. The service providers supply users with a non standard set top box equipped and authorized to decipher specific encoded media content sent by the service provider and into a format suitable for displaying on the user s television . Some more modern television sets have in built set top boxes in which case the service provider provides authentication credentials to users who may then use these credentials to operate the in built set top box. Some service providers and allow interactive programming by providing a back channel from the user to the content provider . The back channel is a communication medium enabling communication from the user to the content provider . For example a user may then use a remote control to send control messages to the content provider . The control messages are used to control the media content transmitted to the user .

In a conventional set top box receives encoded media content data via its data I O component and outputs and audio visual signals suitable for viewing with a television via A V output . The set top box also receives user input for example via a wireless remote control port . This input is then used to control actions of the set top box . Further the set top box comprises a digital rights management manager used to decode the encrypted media content data received via the data I O component . To prevent tampering and or unauthorized actions to video audio content the digital rights management manager is usually implemented as a hardware module.

The set top box further comprises a central processing unit CPU and memory which is used to run applications on the set top box . A controller orchestrates respectively controls an overall functioning of the set top box . A user interface engine is responsible for a corresponding user interface for example menus presented to the user . Such a user interface engine may for example be implemented by limited web browsers. If for example the set top box supports additional downloadable software applications these software applications deliver their output to a user interface engine . For example the electronic program guide EPG displaying information about television program schedules is implemented in conventional set top boxes as software applications according to this manner.

Further the conventional set top box may further comprise persistent storage which may be used as a local non volatile data storage. Video and informational content as well as software applications may be stored here and retrieved at a later time for example if the set top box is turned off in between. The conventional set top box may further comprise a video decoding unit which takes as input compressed audio video content from the digital rights management manager or the persistent storage and decompresses it. Output from the user interface engine is overlaid on top of the video signal via a multiplexing renderer . A hardware abstraction layer then converts the audio video output from the multiplexing renderer into a signal suitable for television. Further the hardware abstraction layer converts user control signals received via the wireless remote control port into messages which can be handled by the user interface engine .

In a computational entity in form of a cloud computing data center is shown. Further different user premises are shown. Each user has a set top box in his premises . Further reference signs and denote so called cloud set top box CSTB denoted with and incorporating facilities of the cloud computing data center and those of the corresponding set top box in the corresponding user premises and . The cloud data center comprises central processing unit processors graphic processing units sharable storage public static IP addresses and or content head end sub systems.

For performing the method according to the invention a CSTB instance is established being a temporary entity that exists for the duration required by a software application or applications deployed on it. The cloud set top box and may be a geographically distributed entity existing partly on the corresponding set top box in the user premises and and partly in the cloud computing data center . Although each cloud set top box instance is unique for each corresponding set top box in each of the user premises and the cloud computing data center enables efficient sharing of resources when possible. Such an example is denoted with reference sign showing overlapping cloud set top box regions . For example in the case of two ore more cloud set top boxes instances and are tasked by software applications to perform identical tasks then the corresponding identical task located in overlapping region is performed only once and its output is presented to both or further corresponding cloud set top boxes and .

The cloud set top box or cloud set top box instance and provides the user to access a platform where multiple or complex applications may be deployed and consumed by users and service providers. The user using set top box does not recognize that a cloud set top box instance from the application of its set top box is established to the cloud computing data center hiding the distributed nature of the cloud set top box and . Instead in particular unified capabilities of the set top box and the cloud computing data center to each application running on the set top box are presented thereby allowing to perform complex tasks without being aware of where these tasks are executed namely at the set top box or in the cloud computing data center .

In particular an entire application may be executed in the cloud computing data center and the result of this execution output is shared among a plurality of cloud set top boxes and . Another option is to identify some components of the application on the set top box and their outputs are shared among the cloud set top box instances and and not the whole application.

In is shown an instance of a cloud set top box comprising the set top box in the user premises and a cloud component . The cloud component is capable of hosting all or parts of applications which are for example implemented as software programs providing advanced functionality. The cloud component of the cloud set top box instance invokes a cloud controlling middleware via an application programming interface API in order to utilize the capabilities of the cloud computer data center according to . The cloud controlling middleware comprises the following components 

A network and a data input output component providing applications with mechanisms to communicate with the set top box in the user premises and to obtain media content from content providers via so called content head end sub systems in the cloud computing data center . Further the network and data input output component receives user input from the set top box and transfers the user input to the applications .

Further the cloud controlling middleware comprises a set top box synchronizer and a task divider component . This component synchronizes actions of the cloud component with the set top box in the user premises. For example the component may delegate and synchronize some tasks to the set top box depending on computational requirements or capabilities of the set top box and other tasks to the cloud computing data center . The component comprises a database for storing abilities of all deployed set top box models and or versions and may use this information to distribute the tasks among different components of a cloud set top box. Further this component may detect duplicate task requests from different cloud set top box instances schedules an execution of only one task and copies the output of the executed task to each requesting cloud set top box instance.

A video and general processing component in the cloud controlling middleware exposes capabilities of the cloud computing data center in processing video data and information. The cloud computing data center may provide specialized hardware to process video data for example by providing hardware audio video transcoders graphical processing units or the like. This capability information may be provided to application software developers via an application programming interface API.

A multiplexing component in the cloud controlling middleware is used to mix outputs of applications or separate executable parts of them content and user input. The multiplexing component creates a unified data stream from the different outputs of the applications or separate executable parts of them of content and user input which may then be transmitted to the set top box for further processing and or rendering at user premises.

A service orchestration component is operable to coordinate interaction of different applications running on the cloud set top box instance .

A task manager in the cloud controlling middleware collects all tasks requests from for example applications or application parts and schedules them for example according to priority and or fairness. The task manager further controls the overall lifecycle of each cloud set top box instance including for example authentication access control billing and state link advertisement management.

A resource manager is operable to check the underlying cloud computing infrastructure resources and keeps real time information about resource availability in the cloud computing data center . This information is then used by the task manager to accept or deny requests from applications respectively in general from higher layers. Further the resource manager requests resources from the cloud computing data center as demanded by the task manager .

Further a content head end sub system is responsible to distribute the unified data stream from the multiplexing component to the set top box .

In an application according to is shown wherein the application is divided into separate executable application parts and wherein some application parts are executed on the set top box STB and some are executed on the computational entity CLOUD.

In the separate executable application part of user input is executed on the set top box STB. This user input is transmitted to the separate executable application part on a cloud computing data center CLOUD responsible for obtaining and decoding the video on demand program according to the user input and to another separate executable application part responsible for obtaining image movie database information and social network comments and for the subsequent converting of the information and the comments into streams for example by providing text to image conversion. The multiplexing of these two streams namely the video on demand stream and the converted social network image movie database stream is performed in the cloud computing data center CLOUD. For data communication between the cloud computing data center cloud and the set top box STB encoder and decoder means for transmission and reception of data are inserted so that the multiplexed streams may be encoded and transmitted from the cloud computing data center cloud to the set top box STB which receives and decodes the received stream.

That received stream is then further transferred for output to the image buffer and outputted respectively displayed or presented to the user. The tasks are put into separate executable application parts divided among the cloud computing data center CLOUD and the set top box STB which interconnected via buffered input output connection.

For rate control the multiplexer may interact with the video source in form of the user s personal video recorder. The video data is then encoded by the encoder and transmitted to the set top box STB where it finally is presented to the user. This interaction between the multiplexer and the personal video recorder is merged together in a single vertex in a graph representing data flow providing a directed acyclic graph DAG which is further described in .

After identifying that separate executable application parts of the first and second cloud set top box instance CSTB1 CSTB2 are identical the cloud computing data center CLOUD only performs once the identical separate executable application part obtaining image movie database information and social network comments and subsequent converting of the information and the comments into streams and distributes the encoded multiplexed streams to the different cloud set top box instances CSTB1 and CSTB2 each having a corresponding receiving interface for decoding the received multiplexed stream.

In a further example for sharing resources of the cloud computing data center is shown in an abstract flowchart. For example data inputs A B are to be processed to perform different functions represented by reference signs f g h and m. A first and second cloud set top box instance CSTB1 and CSTB2 request a result of the functions m and f m f A . A third cloud set top box instance CSTB3 requests a result of m g f A and a fourth cloud set top box instance CSTB4 requires a result in form of m h f B g f A .

To provide the first cloud set top box instance CSTB1 and the second cloud set top box instance CSTB2 with the aforementioned data data input A is processed by component f in the cloud computing data center CLOUD. The result of this processing is used as input for component m in the cloud computing data center CLOUD and the output of this processing m f A is then transmitted to the first and second cloud set top box instance CSTB1 and CSTB2.

To provide the third cloud set top box instance CSTB3 with the aforementioned corresponding result the already processed data input A with component f f A is used as input for component g in the cloud computing data center CLOUD. The outputted result g f A is then on the one hand used as input for component m and the corresponding output of component m namely m g f A is then transmitted to the third cloud set top box instance CSTB3.

On the other hand the outputted result of component g namely g f A is used as input for component m together with the result of h f B . The outputted result of component m h f B g f A is then transmitted to the forth cloud set top box instance CSTB4. Data input B is processed before in component f and the result f B is then used as input for component h in the cloud computing data center CLOUD and the processed result h f B is then used as additional input for component m together with g f A as mentioned before.

According to the table and in connection with components f g h and m are executed twelve times in summary if each cloud set top box instance CSTB1 CSTB2 CSTB3 and CSTB4 operates conventionally namely independent of every other cloud set top box component. By sharing outputs of some components in particular f A m f A and g f A the number of executions of the different components respectively separate executable application parts f g h and m is reduced to seven executions instead of twelve executions conventionally.

The cloud set top box instances CSTB1 and CSTB2 have identical application parts to be executed on the cloud computing data center which are represented by components m and f and the data input A is also identical so the entire application part is shared among these. On the other hand the third and fourth cloud set top box instances CSTB3 and CSTB4 share some components with other cloud set top box instances CSTB1 CSTB2 CSTB3 and CSTB4 but not the application part located in the cloud computing data center CLOUD.

In a first step S requirements of an application that is the capabilities required to execute the application are determined. The application source code is analyzed for it in order to separate functional parts of the application into components or separate executable applications parts along lines of data flow of the entire application. These components are then connected up for example in form of an execution graph G C E with vertices C corresponding to the different components and edges E representing the data flow of the entire application.

The execution graph G may contain cycles for example if two components exchange data during the course of execution of the application. If there are multiple data exchanges between two components then a corresponding amount of edges is inserted into the execution graph G. Components with multiple cycles preferably remain on the same hardware i.e. on the set top box or on the cloud computing data center to avoid network latency of exchanging data multiple times over the network.

In a second step S these cycles are removed from the execution graph G by merging components with cycles between them into larger components for example as shown and described in . To identify component candidates to be merged a parameter specifying a minimum number of cycles between different components is evaluated. For example if this parameter is specified as 0 then the execution graph G is made a directed acyclic graph DAG via a corresponding merge operation. In case of a directed acyclic graph DAG a topological ordering of the execution graph G corresponds to the serialized ordering of the data flow of the application.

After obtaining the components as described in the previous steps S and S in a third step S a task divider analyzes each separate component to determine which components are a necessary part of the physical set top box in other words which separate executable application parts have to be executed on the set top box. For example an image buffer writing out a visual output of the application needs to be part of the set top box.

After factoring out all components which need to be placed on the physical set top box the task divider in a fourth step S consults a set top box capability database to ensure that the set top box is capable of executing these minimum set top box components as needed by the application. For example if the application is a game requiring user feedback and the set top box is not capable of user input then the task divider will issue a error signal stopping the application from being deployed i.e. it is simply not possible to implement this application using this set top box.

On the other hand the task divider may also insert components into the execution graph G to enable an application execution if applicable For example if an application only permits a certain digital rights management algorithm with which the set top box is not equipped to decode the digital rights management decoding can be performed on the cloud computing data center. Another example is if the application only outputs a H.264 stream whereas the set top box is only capable of decoding a MPEG2 stream. The task divider will then insert a transcoding component in a fifth step S into the execution graph G of the application converting the H.264 output into MPEG2 output. The task divider is able therefore to adapt applications depending on heterogeneous capabilities of different set top boxes by inserting additional components when needed.

In case the execution graph G is not a directed acyclic graph i.e. some cycles were left inside a topological ordering is not possible. It is preferred that all connected components of the execution graphs vertices C having cycles are placed and executed on the same physical hardware i.e. either on the set top box or the cloud computing data center avoiding network latency round trips during data flow. Optionally a manual override is provided in case an application developer wants to separate vertices of a connected combined component. In an interactive gaming application a user input for example would probably fed back high up in the topological ordering creating a cycle encompassing a large number of components. In this case rather then simply deploying these components on the set top box the manual override may be used to divide components in the cycle and thereby inserting a network uplink of user interaction but dividing the components in a more efficient way.

After the execution graph G is adapted and in place the task divider starts in a sixth step S placing the component closest to a final sink of the execution graph G on the set top box traversing the topological ordering backwards subject to the set top box and cloud computing data center capability. User input components cannot for example be placed on the cloud computing data center. Once the capability of the set top box is exhausted for example no more memory or no more free central processing unit resource is available the remainder of the components are marked in a seventh step S to be executed on the cloud computing data center.

After marking out the division of these components the task divider constructs in an eights step S containers for each component with data inputs and data outputs being exposed to the outside via standard interfaces such as stream socket sources and sinks. Containers are in general independently executable entities respectively application parts that may be compiled or interpreted on a target platform like the set top box or the cloud computing data center. They are remotely controlled by a task synchronizer. In each container in a ninth step S buffers and timeouts based on the execution graph G to synchronize operation and to smooth out asynchronous delays and distributed execution requirements of the cloud set top box are implemented.

Finally in a tenth step S the application is deployed in form of connected containers on the hardware of the set top box and the cloud computing data center.

To summarize each cloud set top box or more precisely cloud set top box instance is a dynamically created distributed entity which may scale up to requirements of complex applications by utilizing resources of a cloud computing data center. Multiple cloud set top box instances are orchestrated to detect any duplicate task being undertaken in the cloud computing data center. The detected duplicate task is only performed once and its result may be copied across all the requesting cloud set top box instances providing efficiency to conventional set top boxes. Applications are divided into functional components respectively containers i.e. a separate executable application part whose output may be shared across different cloud set top box instances preferably by memory copy in the case components run on a same physical cloud computer of the cloud computing data center or by multicast in case components run on different cloud computers of the cloud computing data center.

Functional components may also be moved between set top boxes and the cloud computing data center dynamically and in real time allowing applications or parts of applications to be executed in the set top box or in the cloud computing data center depending on capabilities of the corresponding set top boxes and preferably real time demand of resources. Cloud computing data centers are more easily extensible by additional hardware and or software resources for example central processing unit graphic processing unit storage networking resources or the like. Upgrading the cloud computing data center can be more easier performed than those of conventional set top boxes of each user.

Further the present invention enables a more easier access of professional television content for a mobile smartphone a tablet PC or the like used by a user to view media content A corresponding cloud set top box instance may then be provided in form of a cloud computing data center component.

The present invention further provides a dynamic and real time division of tasks between set top boxes and cloud computing data centers enabling for example freeing up of resources in the cloud computing data center when processing may be performed inside corresponding set top boxes. These resources may then be used to serve other cloud set top box instances. The present invention further enables more complex applications in particular software application to compose or combine content from multiple sources for each individual user on demand and in real time.

A further advantage is that centralizing content head end sub systems at the cloud computing data center enables users to access any content on any underlying transport protocol from any service provider even if they do not own a set top box capable of decoding this content or even if they do not have access to the corresponding transport network used by a particular services provider.

The present invention further enables sharing an output of whole applications or parts thereof on cloud set top box instances. The present invention further enables discovering communalities between application components that enable to share output of whole applications leading to an efficient resource usage and a prevention of duplicate processing. The present invention further enables running application irrespective of set top box capability by dynamically distributing workload among the cloud computing data center and set top boxes.

The present invention further provides upgrading the usefulness of legacy set top box hardware via augmented processing in the cloud computing data center. The present invention even further provides an automatic insertion of components to enable cloud set top box instance execution when required enabling applications determined for the set top box to be distributed between the set top box and the cloud set top box instance respectively the cloud computing data center.

The present invention even further provides algorithmic task division scalability and sharing of underlying set top box resources and cloud computing data center resources preferably based on parsing application code representing it as an execution graph and then collapsing the execution graph until a topological sorting preferably free of cycles can be constructed. Outputs of applications and or of functional components of applications being executed in the cloud computing data center create efficiencies in the cloud computing data center resource usage by detecting and preventing a duplication of tasks requested by the same or different applications executing on different cloud set top boxes.

The present invention further enables scaling up application complexity on set top boxes irrespective of capabilities of set top box hardware in part due to the economical usage of cloud computing data center computing resources.

Even further the present invention provides scaling up user numbers and devices having access to content from multiple service providers. A fair share of cloud computing data center resources among users based on state link updates may be provided.

The present invention further enables content providers and service providers to develop innovative applications around content free of hardware limitations in particular of the hardware of set top boxes. Users are enabled to use multiple devices such as mobile smart phones tablet PCs or the like for accessing content from multiple sources via configurable applications. Synchronizing and distribution tasks on the basis of the hardware and software capabilities of the set top boxes and cloud computing data centers are provided in the manner being transparent to overlaid applications.

Resource usage in the cloud computing data center is regulated dynamically taking into account capabilities of hardware and the resources requested by the deployed cloud set top box instance applications according to the present invention.

One of the further advantages of the present invention is that complicated applications may be run by offloading tasks to the cloud computing data center when required. Further execution of duplicate tasks is avoided when possible.

The present invention enhances flexibility allowing users access content from any service provider without having to install non standard hardware for every service provider for example a user may pay to subscribe to service provider for just a view hours to get access to particular content being offered by that service provider without having to buy further hardware.

The present invention provides further content and or service providers to serve any user in a manner protecting their content from unauthorized access when content head end sub systems are centralized at their cloud computing data center.

The present invention provides an abstraction out of the underlying heterogeneous hardware and software equipment available at users premises and instead allowing applications developers to create one application that can be executed irrespective of underlying hardware and transport protocols.

The present invention further enables a user to use other devices like table PCs laptops mobile smart phones and personal computers to access content beyond conventional set top boxes. A whole set top box functionality can be implemented on the cloud computing data center for this purpose if needed.

A further advantage of the present invention is to allow users to access content on the move when they are not within their premises. An even further advantage is to provide and to make advanced services by IP TV cable and other media providers available to their entire customer base even in presence of set top boxes of different characteristics. CPU or memory intensive services can be run in the cloud computing data center for those users having a low end device.

Many modifications and other embodiments of the invention set forth herein will come to mind the one skilled in the art to which the invention pertains having the benefit of the teachings presented in the foregoing description and the associated drawings. Therefore it is to be understood that the invention is not to be limited to the specific embodiments disclosed and that modifications and other embodiments are intended to be included within the scope of the appended claims. Although specific terms are employed herein they are used in a generic and descriptive sense only and not for purposes of limitation.

