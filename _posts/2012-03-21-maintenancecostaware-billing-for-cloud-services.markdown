---

title: Maintenance-cost-aware billing for cloud services
abstract: In some examples, a method for performing maintenance-cost-aware billing is described. The method may include generating a version of a virtual machine image. The method may also include calculating a usage charge for usage of an instantiated virtual machine corresponding to the version of the virtual machine image. The calculation of the usage charge may be based on an age of the version of the virtual machine image.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08554649&OS=08554649&RS=08554649
owner: Empire Technology Development LLC
number: 08554649
owner_city: Wilmington
owner_country: US
publication_date: 20120321
---
Unless otherwise indicated herein the materials described herein are not prior art to the claims in the present application and are not admitted to be prior art by inclusion in this section.

Cloud computing environments may include software as a service SaaS and platform as a service PaaS environments. SaaS may provide a user with access to an application software package that may include but is not limited to e mail groupware customer relationship management CRM and the like. PaaS may provide users with a computing platform on which user specific applications may be deployed and executed.

When a SaaS environment is updated business flows that users have constructed on the SaaS environment may have to be migrated to function properly in the updated SaaS environment which may include one or more updated calling protocols parameters and or Application Programming Interfaces APIs . Analogously when a PaaS environment is updated user deployed applications may have to be migrated to function properly in the updated PaaS environment which may include updated middleware. Updates to SaaS PaaS environments in some cases may be unavoidable such as in response to discovering a security hole or for load distribution. Migration may be disruptive and or costly for users.

In some cases users who wish to continue using a specific version of a SaaS PaaS environment and users who wish to use a latest version may coexist in a given cloud computing environment. As such it is difficult to update the cloud computing environment all at once. Moreover maintenance costs to maintain increasingly older versions of SaaS PaaS environments typically increase with increasing age.

Technologies described herein generally relate to maintenance cost aware billing for cloud computing environments.

In some examples a method for performing maintenance cost aware billing is described. The method may include generating a version of a virtual machine image. The method may also include calculating a usage charge for usage of an instantiated virtual machine corresponding to the version of the virtual machine image. The calculation of the usage charge may be based on an age of the version of the virtual machine image.

In some examples a computer storage medium having computer executable instructions stored thereon that are executable by a computing device to perform operations is described. The operations may include generating a version of a virtual machine image. The operations may also include calculating a usage charge for usage of an instantiated virtual machine corresponding to the version of the virtual machine image. The calculation of the usage charge may be based on an age of the version of the virtual machine image.

In some examples a back end system of a cloud service is described. The back end system may include a version controller and a billing module. The version controller may be configured to generate multiple versions of multiple virtual machine images. The billing module may be configured to calculate multiple usage charges for usage of multiple instantiated virtual machines corresponding to the versions of the virtual machine images. A calculation of each of the usage charges may be based on an age of a corresponding version of a corresponding virtual machine image.

The foregoing summary is illustrative only and is not intended to be in any way limiting. In addition to the illustrative aspects embodiments and features described above further aspects embodiments and features will become apparent by reference to the drawings and the following detailed description.

In the following detailed description reference is made to the accompanying drawings which form a part hereof. In the drawings similar symbols typically identify similar components unless context dictates otherwise. The illustrative embodiments described in the detailed description drawings and claims are not meant to be limiting. Other embodiments may be utilized and other changes may be made without departing from the spirit or scope of the subject matter presented herein. It will be readily understood that the aspects of the present disclosure as generally described herein and illustrated in the Figures can be arranged substituted combined separated and designed in a wide variety of different configurations all of which are explicitly contemplated herein.

Some embodiments described herein generally relate to a maintenance cost aware billing model for cloud computing environments. Software constituting a software as a service SaaS or platform as a service PaaS environment may be versioned using virtual machine images VMIs . Usage charges may be calculated based on the age of a given VMI. For instance as a version of a VMI ages over the course of a maintenance period specified in an associated contract usage charges for using a corresponding instantiated virtual machine may progressively increase from a lower value at the beginning of the maintenance period to a higher value at the end of the maintenance period. The increase in usage charges may be sufficient in some cases to partially or completely offset maintenances costs involved in maintaining the version of the VMI and or may be sufficient to make maintaining the version of the VMI profitable.

Accordingly in some embodiments described herein a cloud service provider can maintain older versions of SaaS and or PaaS environments for users that desire to continue using a given version without unfairly apportioning the growing cost of maintaining progressively older versions amongst users that prefer to use newer versions and without maintaining the progressively older versions at a financial loss. At the same time embodiments of the maintenance cost aware billing described herein may attract floating users e.g. users that can easily migrate between software versions by charging lower usage charges to users of the latest and or newer versions.

The cost to maintain a particular version of software in the cloud service may increase with increasing age of the software version. Thus it may be unfair to early adopters of the latest version s users of the relatively new version s and or locked in users of the older versions to equally distribute costs associated with maintaining all versions of the software. Accordingly some embodiments described herein may charge increasingly higher usage charges for using increasingly older software versions referred to herein as maintenance cost aware billing. For example the users of the relatively new version s of the software may be charged more than the early adopters of the latest version s of the software. Similarly the locked in users of the older version s of the software may be charged more than the users of the relatively new version s of the software. Similarly the deeply locked in users of the oldest version s of the software may be charged more than the locked in users of the older version s of the software.

Embodiments of maintenance cost aware billing may more fairly distribute maintenance costs amongst the users of the software versions since users of older versions of the software which have relatively higher maintenance costs may be charged more than users of newer versions of the software. Moreover since usage charges may be increasingly lower for increasingly newer software versions embodiments of maintenance cost aware billing may incentivize users to migrate to the latest version of the software. As such the number of users of the latest version s may increase. As the number of users of the latest version s increases security holes bugs and or other problems may be discovered earlier and may then be resolved earlier than might otherwise occur potentially leading to a shorter time to development of a relatively more secure and stable latest version s e.g. a latest version s with relatively fewer security holes bugs and or other problems. Shorter time to security and or stability of the latest version s of software may additionally attract floating users e.g. users who can readily and easily migrate between software versions.

The maintenance period may be suitable for users that are unwilling to migrate as frequently as the users opting for the maintenance period and or for users that are unwilling to migrate to a version of software that is so new that it may not be completely secure and or stable. These users may also see a reduction in usage charges at the beginning of each maintenance period as they migrate to a version of software that is newer than what they were using previously but is already somewhat old followed by an increase in usage charges with increasing age of the version of software. The maintenance periods are provided by way of example only and should not be construed to limit the embodiments described herein.

In general the network may include one or more wide area networks WANs and or local area networks LANs that enable the client devices and the cloud service to communicate with each other. In some embodiments the network includes the Internet including a global internetwork formed by logical and physical connections between multiple WANs and or LANs. Alternately or additionally the network may include one or more cellular RF networks and or one or more wired and or wireless networks such as but not limited to 802.xx networks Bluetooth access points wireless access points IP based networks or the like. The network may also include servers that enable one type of network to interface with another type of network.

Each of the client devices may execute an application not shown or other instructions configured to communicate through the network with the cloud service . The application executed on each client device to communicate with the cloud service may include an internet browser or other suitable application. Each of the client devices may include but is not limited to a desktop computer a laptop computer a mobile phone a smartphone a personal digital assistant PDA or other suitable client device.

The cloud service of the cloud computing environment may include computer resources one or more virtual machines A N that are accessible to the users and a back end system . Although not required the cloud service may include an AMAZON EC2 type cloud service.

By way of example and not limitation the computer resources may include processing resources such as one or more central processing units CPUs storage resources such as one or more storage devices other resources such as network interface controllers NICs or other communication interface devices and or other suitable computer resources.

Each of the virtual machines A N may be associated with a corresponding one of the users . The users may broadly include individual users and or organizations including one or more users. In general the users may operate the client devices to access the virtual machines A N running on the computer resources .

In some embodiments the virtual machines A N or more particularly corresponding VMIs may be versioned and the cloud service may implement maintenance cost aware billing such that usage charges e.g. fees that are charged to the users may be based on the age e.g. the version of the virtual machine s A N associated with each user . The virtual machines A N may be versioned in some embodiments by versioning software constituting a particular software as a service SaaS or platform as a service PaaS environment within the virtual machines and or by versioning corresponding virtualization software.

According to some embodiments the usage charges may be higher for usage of older versions of the virtual machines A N and lower for usage of newer versions of the virtual machines . Moreover the usage charges over time for using a given version of any one of the virtual machines A N may increase as the virtual machine A N ages. For example the usage charges may be calculated according to a graph such as the graph of and or according to a function in which usage charges increase with increasing age of the software. Accordingly some embodiments described herein may incentivize users to migrate to newer versions of the virtual machines A N and or may partially or completely offset the cost of maintaining aging versions of the virtual machines A N or may make such maintenance profitable.

As will be described in greater detail in the discussion of the back end system may be configured to among other things generate versions of the virtual machines A N or more particularly may generate versions of the corresponding VMIs according to contracts with the users of the versions of the virtual machines A N and or according to contracts that are otherwise associated with the versions of the virtual machines A N. The back end system may also be configured to calculate usage charges for usage of the versions of the virtual machines A N based on the age of each version.

The storage devices may be implemented as primary storage within the computer resources and may include nearly any type of storage device for digital data such as Random Access Memory RAM Read Only Memory ROM Electrically Erasable Programmable ROM EEPROM Compact Disc ROM CD ROM or other optical disk storage magnetic disk storage solid state storage or other storage devices.

The networks and or network devices may include one or more switches routers communication interfaces and or other devices for facilitating communication between devices in the computer resources .

A virtualization layer may be provided in each virtual machine A N to manage access to or virtualize the computer resources for the virtual machine A N. Examples of virtualization layers may include but are not limited to VMware ESX VMware GSX Xen 3.0 or other versions or KVM or other suitable virtualization layers.

Each virtual machine A N may additionally include a particular SaaS or PaaS environment hereinafter individually environment A and environment N or collectively environments A N . Each of the environments A N may include any one of potentially multiple versions of software such as an operating system or the like running on standardized hardware presented to the virtual machine A N by the corresponding virtualization layer . Alternately or additionally each of the virtualization layers may include any one of potentially multiple versions of the corresponding virtualization layer . A given version of the environment A N or and or a given version of the corresponding virtualization layer or may constitute a given version of a corresponding VMI.

Each virtual machine A N may additionally include one or more applications configured to run in the corresponding environment A N . In some embodiments when the environment A or environment N includes a SaaS environment the one or more applications or in the corresponding virtual machine A N may be deployed by a provider associated with the cloud service . Alternately or additionally when the environment A or environment N includes a PaaS environment the one or more applications or in the corresponding virtual machine A N may be deployed by a corresponding one of the users of for example.

The back end system includes one or more components that may be implemented in hardware and or software in and or on the computer resources . For example the back end system may include a version controller and a billing module .

The version controller may be configured to generate versions of VMIs corresponding to the instantiated virtual machines A N. In general each VMI may include binary code that when executed by a processing device such as by a processing device of any of the physical servers causes a corresponding one of the virtual machines A N to instantiate. The version controller may be configured to generate a given version of a VMI as directed by a corresponding one of the users and or in accordance with a contract associated with the user.

The billing module may be configured to calculate usage charges for the instantiated virtual machines A N corresponding to the versions of the VMIs . A calculation of each of the usage charges may be based on an age of a corresponding version of a corresponding one of the VMIs where usage charges for usage of older versions are generally higher than usage chargers for usage of younger versions of the same VMI . For instance the billing module may be configured to calculate usage charges according to a graph such as the graph of and or according to a function in which usage charges increase with increasing age of the VMI .

Each of the version controller and the billing module may include computer executable instructions stored in a computer readable medium the computer executable instructions being executable by a processing device such as a processing device of any of the physical servers to perform one or more of the operations described herein. Alternately or additionally one or both of the version controller or the billing module may be implemented in hardware.

As illustrated in the back end system may further include a VMI database and or a maintenance database . The VMI database may be configured to store each of the versions of the VMIs according to a corresponding maintenance period specified by a corresponding contract associated with a corresponding one of the VMIs such as a corresponding contract associated with a corresponding one of the users of .

The maintenance database may be configured to store maintenance periods corresponding to the versions of the VMIs stored in the VMI database . A timestamp a VMI version number or the like may be stored in the maintenance database to designate the beginning of a maintenance period for a given contract and the contract or data derived therefrom may also be stored in the maintenance database to specify the duration of the maintenance period. The duration may be defined in terms of time such as in terms of a number of days months and or years and or in terms of maintenance cycles such as in terms of a number of security patches and or hot fixes.

In general a given version of a corresponding one of the VMIs may be maintained for the duration of the maintenance period specified in a corresponding contract at the end of which maintenance period the given version of the VMI may be migrated to a newer version of the VMI . The contract may additionally specify whether the newer version of the VMI to which migration occurs at the end of the maintenance period is a latest version of the VMI or a non latest version of the VMI that may be more secure and or stable than the latest version of the VMI .

In operation the version controller may be configured to migrate each VMI to a newer version of a corresponding one of the VMIs according to a corresponding contract by for each VMI determining from the maintenance database when the corresponding maintenance period will expire. A particular newer version of the corresponding VMI may be determined also from the maintenance database and or the corresponding contract to which the VMI will be migrated at the end of the corresponding maintenance period. The newer version may be generated by the version controller and stored in the VMI database . The version controller may determine that the corresponding maintenance period has expired and may initiate a corresponding new maintenance period. For example the old timestamp VMI version number or the like in the maintenance database may be replaced by a new timestamp VMI version number or the like to designate the beginning of the new maintenance period. The version controller may then migrate the VMI to the particular newer version of the corresponding VMI .

As indicated previously the particular newer version of the corresponding VMI may include in some embodiments a latest version of the corresponding VMI in which case a first usage charge calculated at a beginning of the corresponding new maintenance period may have a first value that is relatively low. Alternately the particular newer version of the corresponding VMI may include a non latest version of the corresponding VMI such that the first usage charge calculated at the beginning of the corresponding new maintenance period may have a second value that is higher than the first value.

The first usage model may correspond to a maintenance period of zero in which a corresponding user migrates to the latest version of a corresponding VMI immediately and or soon after the latest version is released. The first usage model may be suitable for e.g. developers and or floating users. Because the user in the first usage model migrates to the latest version immediately or soon after release of the latest version and because usages charges for usage of the latest version may be lower than usage charges for usage of any non latest versions the usage charges over time under the first usage model may remain steady and low for the user.

The second usage model may correspond to a maintenance period of one year in which a corresponding user migrates to the latest version of a corresponding VMI once per year. The second usage model may be suitable for the average business user for example. In time tmay represent an initial time time tmay represent one year from time t time tmay represent one year from time t and time tmay represent one year from time t. Thus the ranges t t t tand t tmay correspond to one year maintenance periods of the second usage model .

As illustrated in the usage charges of each maintenance period t t t tand t tof the second usage model are the lowest at the beginning of each maintenance period t t t tand t tafter migrating to or beginning with the latest version of the corresponding VMI. As the corresponding version of the VMI ages during each maintenance period t t t tand t t however the usage charges increase until the end of the maintenance period t t t tand t twhen the usage charges are at their highest followed by a drastic decrease at the beginning of the next maintenance period t t t tand t tafter migrating again to a latest version.

The third usage model may correspond to a maintenance period of one and a half years in which a corresponding user migrates to a relatively newer non latest version of a corresponding VMI once every year and a half. The third usage model may be suitable for relatively conservative users who desire a relatively secure and or stable SaaS PaaS environment. In time tmay represent one and a half years from time t and time tmay represent one and a half years from time t. Thus the ranges t tand t tmay correspond to one and a half year maintenance periods of the third usage model .

As illustrated in the usage charges of each maintenance period t tand t tof the third usage model are the lowest at the beginning of each maintenance period t tand t tafter migrating to or beginning with the relatively newer non latest version of the corresponding VMI. As the corresponding version of the VMI ages during each maintenance period t tand t however the usage charges increase until the end of the maintenance period t tand t twhen the usage charges are at their highest followed by a decrease at the beginning of the next maintenance period t tand t tafter migrating again to a relatively newer non latest version.

In block Generate A Version Of A Virtual Machine Image a version of a VMI is generated. For example the version controller of the back end system may generate the version of the VMI by capturing a snapshot of the corresponding VMI and storing the version of the VMI in the VMI database . The version of the VMI may be generated as requested by a corresponding user.

Alternately or additionally the version of the VMI may be generated in accordance with a contract associated with the VMI. For example if the contract specifies migration to a particular version e.g. latest or non latest the version of the VMI may be automatically generated at the beginning of a new corresponding maintenance period or at the end of a corresponding current maintenance period or the like. Block may be followed by block .

In block Calculate A Usage Charge For Usage Of An Instantiated Virtual Machine Corresponding To The Version Of The Virtual Machine Image Based On An Age Of The Version Of The Virtual Machine Image a usage charge is calculated for usage of an instantiated virtual machine corresponding to the version of the VMI based on an age of the version of the VMI. The usage charge may be calculated according to a function or graph in which a greater age corresponds to a higher usage charge. For instance the graph may include the graph of . Alternately or additionally the function or graph may be configured to incentivize early migration to a latest version of the VMI by e.g. charging less for usage of the latest version than for usage of older versions.

Alternately or additionally the usage charge may be calculated according to an arc tangent function generally of the form f x A arctan x B A 2 . In this and other embodiments f x is the calculated usage charge in a range including a minimum charge C f x a maximum charge C x is the age of the version of the VMI in a domain including a minimum age x x a maximum age x and A and B are constants such that f x Cand f x C.

One skilled in the art will appreciate that for this and other processes and methods disclosed herein the functions performed in the processes and methods may be implemented in differing order. Furthermore the outlined steps and operations are only provided as examples and some of the steps and operations may be optional combined into fewer steps and operations or expanded into additional steps and operations without detracting from the essence of the disclosed embodiments.

For example the method may further include calculating over the course of a maintenance period of the VMI specified in a contract associated with the VMI multiple usage charges for the instantiated virtual machine corresponding to the version of the VMI wherein each of the usage charges is based on a corresponding age of the version of the VMI. The usage charges may be configured to be sufficient to completely offset maintenance costs associated with maintaining the version of the VMI over the course of the maintenance period. Alternately or additionally the usage charges may be further configured to be sufficiently large that maintaining the version of the VMI according to the specified maintenance period is profitable.

In some embodiments the method may further include maintaining the VMI over the course of the maintenance period.

Alternately or additionally the method may further include iterating as follows. A current version of a VMI may be automatically migrated to a newer version of the VMI at an end of a current maintenance period. A new maintenance period may be initiated. Over the course of the new maintenance period multiple usage charges may be calculated for usage of an instantiated virtual machine corresponding to the newer version of the VMI where each of the usage charges may be based on a corresponding age of the newer version of the VMI.

In these and other embodiments a given newer version of the VMI image may include a latest version of the VMI and a first usage charge calculated at the beginning of a corresponding new maintenance period may have a first value that is relatively low. For instance the second usage model of provides an example in which the newer version at the beginning of each maintenance period is the latest version and the first usage charge at the beginning of each maintenance period is relatively low. In the foregoing example it is understood that the newer version of the VMI image may only qualify as the latest version for a portion e.g. the beginning of the corresponding new maintenance period until another latest version is released.

Alternately the given newer version of the VMI image may include a non latest version of the VMI image such that the first usage charge calculated at the beginning of the corresponding new maintenance period has a second value that is higher than the first value. For instance the third usage model of provides an example in which the newer version at the beginning of each maintenance period is a non latest version and the first usage charge at the beginning of each maintenance period is a second value that is higher than first value for the latest version at the beginning of each maintenance period for the second usage model .

Some embodiments disclosed herein include a computer storage medium having computer executable instructions stored thereon that are executable by a computing device to perform operations included in the method of such as the operations illustrated by blocks and or in and or variations thereof. The computer storage medium may be included in one or more of the storage devices of and or in one or more local storage devices of the physical servers of .

Accordingly some embodiments of maintenance cost aware billing described herein charge users increasingly more for using increasingly older versions of software. As such usage of the latest version of software may be the least expensive which may attract floating users who can readily perform migration. Alternately or additionally users may be incentivized to migrate to the latest version of software which may lead to more users migrating to the latest version earlier than would otherwise occur which in turn may ultimately lead to a latest version that is more secure and or more stable earlier than would otherwise occur.

Some of the disclosed embodiments may provide a pricing model that is fair to both users who wish to continue using a specific version of software and to users who wish to periodically and or constantly migrate to a newer version. In particular users who wish to continue using a specific version of software can pay increasingly higher usage charges to offset increasingly higher maintenance costs as the specific version of software ages.

In some embodiments the increasing usages charges for usage of increasingly older versions of software may be sufficient to at least partially or completely offset maintenance costs associated with maintaining the increasingly older versions of software throughout corresponding maintenance periods. Alternately or additionally the increasing usage charges for usage of increasingly older versions of software may be sufficient to make maintaining the increasingly older versions of software through corresponding maintenance periods profitable.

Depending on the desired configuration the processor may be of any type including but not limited to a microprocessor P a microcontroller C a digital signal processor DSP or any combination thereof. The processor may include one more levels of caching such as a level one cache and a level two cache a processor core and registers . An example processor core may include an arithmetic logic unit ALU a floating point unit FPU a digital signal processing core DSP Core or any combination thereof. An example memory controller may also be used with the processor or in some implementations the memory controller may be an internal part of the processor .

Depending on the desired configuration the system memory may be of any type including but not limited to volatile memory such as RAM non volatile memory such as ROM flash memory etc. or any combination thereof. The system memory may include an OS one or more applications and program data . The application may include a usage charge algorithm that is arranged to perform the functions as described herein including those described with respect to the method of . The application may correspond to one or more of the version controller and or billing module of for example. The program data may include usage charge data that may be useful for configuring the usage charge algorithm as is described herein. For instance the usage charge data may include a graph or function in which a greater age corresponds to a higher usage charge such as the graph of and from which usage charges may be calculated based on age. In some embodiments the application may be arranged to operate with the program data on the OS such that implementations of maintenance cost aware billing methods such as the method of may be provided as described herein. This described basic configuration is illustrated in by those components within the inner dashed line.

The computing device may have additional features or functionality and additional interfaces to facilitate communications between the basic configuration and any required devices and interfaces. For example a bus interface controller may be used to facilitate communications between the basic configuration and one or more data storage devices via a storage interface bus . The data storage devices may be removable storage devices non removable storage devices or a combination thereof. Examples of removable storage and non removable storage devices include magnetic disk devices such as flexible disk drives and hard disk drives HDD optical disk drives such as compact disk CD drives or digital versatile disk DVD drives solid state drives SSD and tape drives to name a few. Example computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data.

The system memory removable storage devices and non removable storage devices are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which may be used to store the desired information and which may be accessed by the computing device . Any such computer storage media may be part of the computing device .

The computing device may also include an interface bus for facilitating communication from various interface devices e.g. output devices peripheral interfaces and communication devices to the basic configuration via the bus interface controller . Example output devices include a graphics processing unit and an audio processing unit which may be configured to communicate to various external devices such as a display or speakers via one or more A V ports . Example peripheral interfaces include a serial interface controller or a parallel interface controller which may be configured to communicate with external devices such as input devices e.g. keyboard mouse pen voice input device touch input device etc. or other peripheral devices e.g. printer scanner etc. via one or more I O ports . An example communication device includes a network controller which may be arranged to facilitate communications with one or more other computing devices over a network communication link via one or more communication ports .

The network communication link may be one example of a communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and may include any information delivery media. A modulated data signal may be a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media may include wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF microwave infrared IR and other wireless media. The term computer readable media as used herein may include both storage media and communication media.

The computing device may be implemented as a portion of a small form factor portable or mobile electronic device such as a cell phone a personal data assistant PDA a personal media player device a wireless web watch device a personal headset device an application specific device or a hybrid device that include any of the above functions. The computing device may also be implemented as a personal computer including both laptop computer and non laptop computer configurations.

The present disclosure is not to be limited in terms of the particular embodiments described herein which are intended as illustrations of various aspects. Many modifications and variations can be made without departing from its spirit and scope as will be apparent to those skilled in the art. Functionally equivalent methods and apparatuses within the scope of the disclosure in addition to those enumerated herein will be apparent to those skilled in the art from the foregoing descriptions. Such modifications and variations are intended to fall within the scope of the appended claims. The present disclosure is to be limited only by the terms of the appended claims along with the full scope of equivalents to which such claims are entitled. It is to be understood that the present disclosure is not limited to particular methods reagents compounds compositions or biological systems which can of course vary. It is also to be understood that the terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting.

With respect to the use of substantially any plural and or singular terms herein those having skill in the art can translate from the plural to the singular and or from the singular to the plural as is appropriate to the context and or application. The various singular plural permutations may be expressly set forth herein for sake of clarity.

It will be understood by those within the art that in general terms used herein and especially in the appended claims e.g. bodies of the appended claims are generally intended as open terms e.g. the term including should be interpreted as including but not limited to the term having should be interpreted as having at least the term includes should be interpreted as includes but is not limited to etc. . It will be further understood by those within the art that if a specific number of an introduced claim recitation is intended such an intent will be explicitly recited in the claim and in the absence of such recitation no such intent is present. For example as an aid to understanding the following appended claims may contain usage of the introductory phrases at least one and one or more to introduce claim recitations. However the use of such phrases should not be construed to imply that the introduction of a claim recitation by the indefinite articles a or an limits any particular claim containing such introduced claim recitation to embodiments containing only one such recitation even when the same claim includes the introductory phrases one or more or at least one and indefinite articles such as a or an e.g. a and or an should be interpreted to mean at least one or one or more the same holds true for the use of definite articles used to introduce claim recitations. In addition even if a specific number of an introduced claim recitation is explicitly recited those skilled in the art will recognize that such recitation should be interpreted to mean at least the recited number e.g. the bare recitation of two recitations without other modifiers means at least two recitations or two or more recitations . Furthermore in those instances where a convention analogous to at least one of A B and C etc. is used in general such a construction is intended in the sense one having skill in the art would understand the convention e.g. a system having at least one of A B and C would include but not be limited to systems that have A alone B alone C alone A and B together A and C together B and C together and or A B and C together etc. . In those instances where a convention analogous to at least one of A B or C etc. is used in general such a construction is intended in the sense one having skill in the art would understand the convention e.g. a system having at least one of A B or C would include but not be limited to systems that have A alone B alone C alone A and B together A and C together B and C together and or A B and C together etc. . It will be further understood by those within the art that virtually any disjunctive word and or phrase presenting two or more alternative terms whether in the description claims or drawings should be understood to contemplate the possibilities of including one of the terms either of the terms or both terms. For example the phrase A or B will be understood to include the possibilities of A or B or A and B. 

In addition where features or aspects of the disclosure are described in terms of Markush groups those skilled in the art will recognize that the disclosure is also thereby described in terms of any individual member or subgroup of members of the Markush group.

As will be understood by one skilled in the art for any and all purposes such as in terms of providing a written description all ranges disclosed herein also encompass any and all possible sub ranges and combinations of sub ranges thereof. Any listed range can be easily recognized as sufficiently describing and enabling the same range being broken down into at least equal halves thirds quarters fifths tenths etc. As a non limiting example each range discussed herein can be readily broken down into a lower third middle third and upper third etc. As will also be understood by one skilled in the art all language such as up to at least and the like include the number recited and refer to ranges which can be subsequently broken down into sub ranges as discussed above. Finally as will be understood by one skilled in the art a range includes each individual member. Thus for example a group having 1 3 cells refers to groups having 1 2 or 3 cells. Similarly a group having 1 5 cells refers to groups having 1 2 3 4 or 5 cells and so forth.

From the foregoing it will be appreciated that various embodiments of the present disclosure have been described herein for purposes of illustration and that various modifications may be made without departing from the scope and spirit of the present disclosure. Accordingly the various embodiments disclosed herein are not intended to be limiting with the true scope and spirit being indicated by the following claims.

