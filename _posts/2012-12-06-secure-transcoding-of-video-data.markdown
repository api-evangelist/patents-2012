---

title: Secure transcoding of video data
abstract: A secure transcoder assembly features a secure data path where the related crypting and coding functions are secured in the secure data path. More specifically, during transcoding the ingress (received) encrypted video data is decrypted and copied from application memory (that is accessible to the application processor) to secure memory (that is inaccessible to the application processor) by security processor(s). Once in the secured memory, this video data is transcoded. The video data, now in its transcoded form, is re-encrypted by the security processor(s) during the transfer back to application memory for egress (continued transmission). The mode for the re-encrypting may be managed by the application processor via a crypto API, and the application processor may further feature an opaque handle on the data when it is passed to the secure region.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09445112&OS=09445112&RS=09445112
owner: Microsoft Technology Licensing, LLC
number: 09445112
owner_city: Redmond
owner_country: US
publication_date: 20121206
---
The continued proliferation of multimedia technologies has led to exponential growth in the number and variety of devices capable of processing digital video data. Similarly the ease with which video data may be copied and distributed without authorization has also increased which in turn has led to various copy protection strategies and improved Digital Rights Management DRM techniques. The inherent challenges of efficient storage and distribution of video data in turn have inspired much innovation in the area of scalable video coding and video transcoding.

In various applications such as digital broadcast and cable television TV systems video data is normally encrypted before transmission for security i.e. to prevent unauthorized use of the content . Near the receiving end of these transmissions such as in home video redistribution it is common to bit rate transcode the video bitstream for efficiency i.e. to achieve optimum utilization of available bandwidth . Transcoding is the direct digital to digital data conversion from one encoded format to another encoded format i.e. decoding to an intermediate form and then re encoding such as for example from a high quality large size format to a lower quality smaller size format. However when a video signal is decrypted transcoded from the original encoded format to the target encoded format and then re encrypted to complete transmission there is a period of time where the video data is relatively unsecure i.e. unencrypted and vulnerable to unauthorized use.

While some transcoding solutions attempt to mitigate this risk by performing transcoding using only trusted and tamper proof devices such devices are relatively expensive due to the increased cost of manufacturing inherent to such devices and these increased costs of production have limited the widespread utilization of such trusted and tamper proof devices. Accordingly there is a need for a transcoding approach that maintains security of the video data during the transcoding process.

Various implementations disclosed herein features secure transcoding using a secure data path where the related crypting and coding functions are also secured in the secure data path. More specifically during transcoding the ingress received encrypted video data is decrypted during the transfer from application memory that is accessible to the application processor to secure memory that is inaccessible to the application processor by security processor s . Once in the secured memory this video data is then transcoded. The video data now in its transcoded form is then encrypted during the transfer back to application memory for egress continued transmission by the security processor s .

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the detailed description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Various audio video A V container format standards such as the Protected Interoperable File Format PIFF Common File Format CFF and Common ENCryption format CENC for example specify the subsample encryption technique that is used for encrypting the corresponding content. These various encryption techniques employ a common approach wherein a sample of video data is divided into one or more subsamples and each of these subsamples may have an unencrypted part followed by an encrypted part. Because of the number of different format standards that are in common use at any given time transcoding solutions are often designed to work with several of these different formats. As such multi format transcoders generally feature flexible designs that are compatible with the multiple encryption format options.

In addition recent advances in multimedia technologies have led to a growth in the varieties of devices capable of handling digital video data and video data is often encrypted before transmission for security. Because of bandwidth constraints however it is often necessary to transcode the bitstream to achieve optimum utilization and the typical approach of decoding a video data signal to be transcoded and then re encrypting the data presents a security vulnerability. Indeed the ease of unauthorized copying and distribution of video data has led to various copy protection strategies and various Digital Rights Management solutions. With regard to wireless video transmissions secure systems for distributing scalable H.264 data are known but these systems largely employ expensive specialized hardware. In contrast no solutions are known that integrate directly into the transcoder architecture to allow secure transcoding of data.

To perform the desired transcoding the encrypted video may then be received from the protected source environment at the transcoder assembly . The transcoder assembly transcodes the encrypted video data in the original format to produce encrypted video data in the desired format. This resultant encrypted video data is then provided to the protected destination environment where it is received by a target decrypter to decrypt the video data into unencrypted but still encoded video data. This encoded video data is then further processed by the target decoder to provide the video data in an unencoded format to the video destination for intended use e.g. for television display .

Typical transcoding crypting and coding processes are often implemented using two different dedicated hardware processors a crypting processor for decryption and re encryption and a coding processor for transcoding respectively. These specialized processors in turn are controlled by an application processor. In order to implement a flexible subsample encryption solution that can support multiple encryption techniques it is the application processor that is typically used to determine the regions of encryption for each sample. However one of the consequences of this approach is that it provides a very lucrative attack vector whereby malicious code could be used to manipulate the memory used by the application processor to store the encrypted and unencrypted subsample regions. For example such malicious code could cause an application processor to leave entire samples in the clear i.e. unencrypted and accessible in memory so that the content may be readily accessed copied and so forth. Other potential attack vectors are also known and similarly need to be protected against during the transcoding process.

Various implementations disclosed herein features secure transcoding using a secure data path where the related crypting and coding functions are also secured in the secure data path. More specifically during transcoding the ingress received encrypted video data is decrypted from application memory that is accessible to or selectable by the application processor to secure memory that is inaccessible to or not selectable by the application processor by security processor s . The video data is then securely transcoded by the transcode processor. The video data now in its transcoded form is then re encrypted during the transfer back to application memory for egress continued transmission .

In the context of wireless video content delivery and with regard to the detailed description that follows it should be noted that a hardware abstraction layer HAL is an abstraction layer implemented in software that resides between the physical hardware of a computer or computerized device and the software that runs on that computer or device . As known to skilled artisans the function of the HAL is to hide differences in hardware from most of the operating system kernel so that most of the kernel mode code does not need to be changed to run on systems with different hardware.

Similarly skilled artisans are also familiar with the Network Abstraction Layer NAL that is a part of the H.264 AVC Video Coding Standard the main objective of which is the provision of a network friendly video representation addressing both conversational video telephony and non conversational storage broadcast or streaming applications. In NAL encoded video data is organized into NAL units each of which is effectively a packet that contains an integer number of bytes. The first byte of each NAL unit is a header byte that contains an indication of the type of data in the NAL unit and the remaining bytes contain payload data of the type indicated by the header. The NAL unit structure definition specifies a generic format for use in both packet oriented and bitstream oriented transport systems and a series of NAL units generated by an encoder may be referred to herein as a NAL unit stream. 

For the various implementations disclosed herein processing the video data may be distributed between the application processor and the secure processor s i.e. the transcode or coding processor and a crypto or crypting processor. described below depicts a representative data flow for several such implementations. Moreover for certain implementations the encryption may utilize a HAL cryptographic standard and partly run on the application processor to control encryption commands but never exposes to the application processor the unencrypted video data and associated metadata which controls the subsample regions . Instead the application processor is only given opaque handles for the encrypted video data that the application processor uses to transfer the in process video data between the different modules along the entire transcoder processing pipeline whereas the data structures referred to by these opaque handles are only understood by the secure processor s .

In operation the various implementations herein disclosed may use metadata that is accessible by the application processor to indicate one of several different processing options. For example this metadata may comprise fields corresponding to specific processing modes corresponding to the method of encryption used for the sample the identification for the sample the number of subsamples in the sample if any and the subsamples array if any wherein each subsample may comprise a range of zero or more bytes of unencrypted data followed by a range of zero or more bytes of encrypted data.

Accordingly several different modes or mode indicators may be available and may include but are not necessarily limited to the following a passthru mode where the video data is not encrypted and the transcoded video data is to be returned in the clear unencrypted b full mode where the entire sample is encrypted and no subsamples are defined c CENC common encryption mode where the sample is composed of subsamples each comprising a fixed length unencrypted header followed by encrypted video content and d CFF common file format mode where the sample is composed of subsamples each comprising a variable length unencrypted header followed by a variable number of encrypted video content blocks of a fixed length e.g. sixteen bytes each .

The transcoder assembly further comprises a secure region that is inaccessible to the application processor and components thereof illustrated in the application region except for the opaque handle that remains associated with the video data throughout processing e.g. and . This secure region comprises a decryption process a transform process and a re encryption process that correspond to the crypto processor and transcode processor accordingly these latter processors being distinct and separate from the application processor although may be perceived collectively as a single processing unit at a higher level of abstraction . Of course skilled artisans will appreciate that alternative implementations may feature only a single processor i.e. a secure processor that is used for all of the secure region processing and that other alternative implementations may feature more than two processors. In addition these various processors e.g. and may be collectively viewed or implemented in a variety of different fashions using different processing cores for example while still conceptually constituting a single processing unit such as processing unit of discussed further herein wherein this processing unit may comprise both application and secure processors . The secure region further comprises secure memory that again is inaccessible to the components in the application region . Also shown in the secure region of are data structures represented by dashed boxes e.g. and and described in more detail in .

At the decryption process securely decrypts the video data forming decrypted sample . At the transform process via the transcoder API securely transcodes the video data decrypted sample from its original encoding to its target encoding thereby forming transcoded sample . At the video data now in its new encoded format is re encrypted via the crypto API by the re encryption process to form the re encrypted sample .

At the re encrypted video data is then passed back to the application region i.e. processed from the secure memory to the application memory by the re encrypt process for example where it is once again accessible to the application code in its new encoded form and encrypted for security . At the application code then egresses the resultant transcoded and encrypted video data to the protected destination environment of .

Stated differently the process for at least some select implementations may be characterized as 1 ingressing encrypted video data in a first encoded format to an application region of a transcoder assembly 2 passing a mode indicator from the application region to the secure region 3 decrypting the encrypted video data in the first encoded format from the application region to a secure region that is inaccessible from the application region in response to the mode indicator 4 transcoding the video data from the first encoded format to a second encoded format in the secure region 5 re encrypting the video data in the second encoded format from the secure region to the application region in response to the mode indicator and 6 egressing the encrypted video data in the second encoded format. It should also be noted that for decrypting the encrypted video data a secure processor of the secure region may be used to input the encrypted video data directly from the application memory of the application region and through the decrypt process output decrypted video data directly to the secured memory of the secured region. Likewise for re encrypting the video data after transcoding via the transcode processor running the transcode process a secure processor of the secure region may be used to input the decrypted video data from the secured memory of the secure region and through the re encrypt process output re encrypted video data directly to the application memory of the application region.

In the video data sample which can only be referred to atomically from the application region via the opaque handle is shown as decrypted by the decryption process to form unencrypted but still encoded video data .

In the video data sample which can still only be referred to atomically from the application region via the opaque handle is shown as transcoded by the transform process to form a list of regions an index table and unencrypted but now transcoded video data . The list of regions comprises multiple regions . . . corresponding to regions in the video data and indicating whether each said region is to be clear unencrypted such as region for example or encrypted i.e. re encrypted in response to the mode indicated and passed to it by the application processor via the application code utilizing the crypto API of such as region for example. The index table comprises multiple indexes . . . corresponding to subsamples in the video data . Each subsample in turn comprises header and video content such as for example header and content corresponding to index

In the video data which again has been referred to only atomically from the application region via the opaque handle is shown as re encrypted in accordance with the encryption protocol in response to the mode indicated and passed to the re encryption process by the application processor via the application code utilizing the crypto API of that is where the regions that were designed to be encrypted e.g. region of are re encrypted e.g. region by the re encryption process and the regions that are to be clear or unencrypted e.g. region of are not encrypted e.g. region . This resultant video data now transcoded and with the content re encrypted is then passed back to the application region .

To enhance security of the resultant video data certain implementations disclosed herein may also implement one or more of the following additional features. To prevent a potential vulnerability in the case where encryption and decryption are the same operation the fact that the decryption process and re encryption processes used for the transcoding process are both performed in the secure region the initialization vector for encryption is selected securely by the secure region and can only be read by the application region once it has been used for encryption but cannot be chosen or selected by the application region to enable unauthorized decryption. To prevent the clear portions of the resultant video data viewable in the application region to be used to determine relative offsets for where the unencrypted equivalent may be found in the secure region the secure region may employ memory management techniques that separately sandbox the data to be encrypted from the data to be left in the clear thereby eliminating any relative references of where the to be encrypted data may reside in the secure memory relative to the data that is to be left clear.

In addition sandboxing may be utilized for different data streams with the processing for each stream occurring in its own sandbox in order to protect all data structures index tables list of subsample regions etc. used in the processing. Such a sandbox technique provides additional protection because an attacker cannot mix and match lists of regions for one stream with another stream. For example if the mode for one stream is passthru i.e. output should be unencrypted and the mode for a second stream is CENC having unencrypted and encrypted regions then an attacker might be able to mix and match data structures that is it could re use data structures of the first passthru stream to make the second stream unencrypted at the egress as well. Sandboxing each stream separately would prevent this from happening.

Numerous other general purpose or special purpose computing system environments or configurations may be used. Examples of well known computing systems environments and or configurations that may be suitable for use include but are not limited to personal computers PCs server computers handheld or laptop devices multiprocessor systems microprocessor based systems network PCs minicomputers mainframe computers embedded systems distributed computing environments that include any of the above systems or devices and the like.

Computer executable instructions such as program modules being executed by a computer may be used. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Distributed computing environments may be used where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules and other data may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing aspects described herein includes a computing device such as computing device . In its most basic configuration computing device typically includes at least one processing unit and memory . Depending on the exact configuration and type of computing device memory may be volatile such as random access memory RAM non volatile such as read only memory ROM flash memory etc. or some combination of the two. This most basic configuration is illustrated in by dashed line .

Computing device may have additional features functionality. For example computing device may include additional storage removable and or non removable including but not limited to magnetic or optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage .

Computing device typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by device and include both volatile and non volatile media as well as both removable and non removable media.

Computer storage media include volatile and non volatile media as well as removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Memory removable storage and non removable storage are all examples of computer storage media. Computer storage media include but are not limited to RAM ROM electrically erasable program read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the information and which can be accessed by computing device . Any such computer storage media may be part of computing device .

Computing device may contain communication connection s that allow the device to communicate with other devices. Computing device may also have input device s such as a keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. All these devices are well known in the art and need not be discussed at length here.

Computing device may be one of a plurality of computing devices inter connected by a network. As may be appreciated the network may be any appropriate network each computing device may be connected thereto by way of communication connection s in any appropriate manner and each computing device may communicate with one or more of the other computing devices in the network in any appropriate manner. For example the network may be a wired or wireless network within an organization or home or the like and may include a direct or indirect coupling to an external network such as the Internet or the like.

It should be understood that the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the processes and apparatus of the presently disclosed subject matter or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium where when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the presently disclosed subject matter.

In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs may implement or utilize the processes described in connection with the presently disclosed subject matter e.g. through the use of an API reusable controls or the like. Such programs may be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language. In any case the language may be a compiled or interpreted language and it may be combined with hardware implementations.

Although exemplary implementations may refer to utilizing aspects of the presently disclosed subject matter in the context of one or more stand alone computer systems the subject matter is not so limited but rather may be implemented in connection with any computing environment such as a network or distributed computing environment. Still further aspects of the presently disclosed subject matter may be implemented in or across a plurality of processing chips or devices and storage may similarly be affected across a plurality of devices. Such devices might include PCs network servers and handheld devices for example.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

