---

title: Deployment of web application archives as a preprocessing step for provisioning
abstract: In one aspect, a transformation of web application archives (WARs) to Open Services Gateway initiative (OSGi™) web bundles is performed. WARs are specialized Java® archives for packaging web applications and the transformation to OSGi™ web bundles is realized by applying proper entries to the manifest of the WARs thus making them OSGi™ compliant. In another aspect, the transformed WARs to OSGi™ web bundles are marked as auto started so that the web application is available for requests after product installation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09311068&OS=09311068&RS=09311068
owner: SAP SE
number: 09311068
owner_city: Walldorf
owner_country: DE
publication_date: 20120417
---
The field relates to web applications development and their deployment in a cloud environment. More precisely the field relates to deployment of web application archives as a preprocessing step for provisioning.

Cloud computing cloud cloud environment is typically delivery of computing as a service rather than a product wherein shared resources software and information are provided as a utility over a network. Cloud computing provides computation software applications data access data management and storage resources without requiring cloud users to know the location and other details of the computing infrastructure. End users typically access cloud based applications through a web browser or a light weight desktop or mobile applications while the business software and data are typically stored on servers at a remote location. Cloud application providers strive to give the same or better service and performance than if the software programs were installed locally on end user computers. Software developers use Integrated Development Environment IDE when building software applications to be deployed in the cloud.

One of the goals of cloud computing is to minimize Total Cost of Ownership TCO and resource consumption. There may be several factors that affect the consumption and TCO in a cloud infrastructure. For example proper selection of runtime components which are needed by a customer application to be operable in the cloud is one of the factors that may affect resource consumption and TCO in a cloud environment. The set of components for provisioning a developed product besides the software application itself usually includes core parts of runtime environment e. g. Java server for the Java based applications enterprise services which provide additional functionality to the deployed applications and internal configuration information. Another factor is complexity of the provisioning process the more complex the provisioning process is and the more steps it involves the more likely the process might fail at a certain point. Thus the predictability of failures in the provisioning process is another factor. For example when there are many steps involved in the preparation of the application for deployment in the cloud a possible failure in the final stages will incur a greater cost on the resources wasted up to that point.

Equinox p2 is a component of the Equinox project Equinox p2 provides a provisioning platform for Eclipse based applications. Based on the Eclipse Equinox Provisioning Platform p2 cloud deployment process comprises publishing of an Eclipse product definition containing and configuring software application artifacts that need to be installed during the software application start. As a result of the deployment the cloud distribution cloud services used from the software application and installable units of the deployed software application are merged in the Eclipse product p2 product and published in a p2 update site stored in a cloud repository. During the start of the corresponding software application component the published p2 product is installed via p2 from the repository to the file system of a running virtual machine image.

Various embodiments of systems and methods for web application archive WAR deployment as a preprocessing step for cloud computing services provisioning are described herein. In one embodiment the method includes receiving one or more WAR files and transforming the one or more WAR files to web bundles configured according to Open Services Gateway initiative OSGi standard specification. The method also includes generating an Equinox Provisioning Platform p2 product based on the WAR files transformed to the OSGi specification web bundles and one or more other OSGi web bundles persisted in a p2 update site and provisioning the p2 product on a virtual machine image.

In other embodiments the system includes a processor for executing program code and memory in communication with the processor. The system also includes a receiving module to receive one or more WAR files and a transforming module to transform the one or more WAR files to OSGi web bundles. The system further includes a generator module to generate a p2 product based on the WAR files transformed to the OSGi web bundles and one or more other OSGi web bundles persisted in a p2 update site and a provisioning module to provision the p2 product on a virtual machine image.

These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof presented in connection with the following drawings.

Embodiments of techniques for web application archive WAR deployment as a preprocessing step for provisioning are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention cart be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

At block the one or more WAR files are transformed to Open Services Gateway initiative OSGi web bundles. In one embodiment the WAR files are transformed by an external API such as API . This transformation aims deployment of the web application contained in the WAR files to an Equinox Provisioning Platform p2 p2 framework which is a framework where the already transformed WARs may be deployed. In one embodiment the transformation of the one or more WAR files to OSGi web bundles includes transforming WAR manifest of the one or more WAR files to OSGi manifest and publishing the transformed WARs OSGi web bundles to a p2 update site. The p2 update site may be such as p2 update site . Transforming a WAR manifest to an OSGi manifest makes the WAR files OSGi compliant and they are considered OSGi web bundles by the p2 framework. In one embodiment the p2 framework may be such as cloud environment . Publishing the transformed WARs to OSGi web bundles to a p2 update site prepares the web application contained initially in the WARs for deployment in a p2 framework.

Further at block a p2 product is generated. The p2 product is generated based on the transformed WAR files to the OSGi web bundles and one or more other OSGi web bundles persisted in a p2 update site. In one embodiment the generation of the p2 product includes generation of p2 product metadata. In one embodiment the p2 product metadata includes information describing hardware and software resources to be employed to execute the web application contained in the WARs. In one embodiment the p2 product metadata may further include any runtime rules or policies to be implemented during execution of the application. In one embodiment the OSGi web bundles based on the transformed WARs are marked as auto started in the generated p2 product metadata.

Then at block the generated p2 product is provisioned on a virtual machine image. In one embodiment the p2 product may be such as p2 product and the virtual machine image may be such as virtual machine image .

In one embodiment the generated p2 product is tested in a p2 framework before provisioning. In one embodiment the testing of the p2 product includes testing integration of components of the p2 product in a p2 framework. In one embodiment the tested components include transformed WAR files and OSGi web bundle Java archive files.

A transforming module is operable to transform the one or more WAR files to Open Services Gateway initiative OSGi web bundles. This transformation aims to deploy the web applications contained in the WAR files to an Equinox Provisioning Platform p2 p2 framework which is a framework where the already transformed WARs may be deployed. In one embodiment the transforming module is further operable to transform WAR manifest of the one or more WAR files to OSGi manifest and publish the OSGi web bundles to a p2 update site. Publishing the processed WARs to OSGi web bundles to a p2 update site prepares the web application contained initially in the WARs for deployment in a p2 framework.

A generating module is operable to generate the p2 product based on the transformed WAR files to OSGi web bundles and one or more other OSGi web bundles persisted in a p2 update site. In one embodiment the generating module is operable to generate a p2 product metadata. In one embodiment the p2 product metadata includes information describing hardware and software resources to be employed to execute the web application contained in the WARs. In one embodiment the p2 product metadata may further include any runtime rules or policies to be implemented during execution of the application. In one embodiment the transformed WARs to OSGi web bundles are marked as auto started in the generated p2 product metadata. Thus the web application contained initially in the WARs is available for requests after product installation.

A provisioning module is operable to provision the p2 product on a virtual machine image. The virtual machine image is deployed in a p2 cloud environment.

In one embodiment the system farther includes a testing module to test the p2 product in a p2 framework. In one embodiment the testing module is operable to test integration of components of the p2 product in the p2 framework.

Some embodiments of the invention may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components may be implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. Examples of computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment of the invention may be implemented using Java C or other object oriented programming language and development tools. Another embodiment of the invention may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments of the invention including what is described in the Abstract is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of and examples for the invention are described herein for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather the scope of the invention is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

