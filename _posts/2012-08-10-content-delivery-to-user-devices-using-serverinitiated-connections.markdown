---

title: Content delivery to user devices using server-initiated connections
abstract: Features are disclosed for enabling servers to initiate the opening of connections with clients, initiate transfers of data to clients, and provide clients with hints regarding which content retrieval, connection establishment, and other network operations will likely improve user-perceived performance on the client. A token may be transmitted from a client to a server, and the server may utilize the token to initiate a network connection with the client and send data to the client. The token may also be passed to a third party for similar use. Hints may be provided to the client, indicating actions that the client may perform in order to improve content processing efficiency and enhance a user experience with the content. The disclosed features may, for example, be incorporated into web browser and server software.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09231949&OS=09231949&RS=09231949
owner: Amazon Technologies, Inc.
number: 09231949
owner_city: Seattle
owner_country: US
publication_date: 20120810
---
In a network communication environment such as the Internet a client computing device client may utilize a software browser application to initiate network connections with server computing devices servers and subsequently request content from those servers. Servers may respond to client requests for content but in typical Hypertext Transfer Protocol HTTP based communications servers do not initiate transfers of content to clients. A request from the client is typically required in order to initiate any transfer of data from the server to the client. Other protocols such as SPDY enable a server to initiate a data transfer to a client over a connection initiated by the client device.

Servers may provide indications to clients regarding which network resources to retrieve to improve the performance of future content requests and processing. Such predicted or anticipatory retrieval also known as prefetching may be implemented through use of a prefetch hint embedded within a Hypertext Markup Language HTML file. In a typical implementation servers can determine which content a client is likely to request next and include a prefetch hint identifying which linked content to proactively fetch. Clients receiving an HTML file with a prefetch hint may request the indicated content before it is requested by a user.

The present disclosure is directed to among other features enabling servers to initiate the opening of connections with clients and to initiate the transfer of data to clients. Also disclosed are features for enabling a server to provide clients with hints regarding which content retrieval connection establishment and other network operations will likely improve perceived performance on the client. The various features may for example be used to improve user perceived performance in environments in which content is requested and transferred using the HTTP protocol.

Some embodiments involve the transmission of a token from a client to a server. The server may subsequently utilize the token to initiate additional network connections with the client passing the token or data derived from it back to the client to authenticate the server to the client. A client upon receipt of a request to establish a connection can verify that the token is valid prior to establishing the requested connection. Once a connection is established a server may transmit content or other data to the client without requiring a request first. Additional aspects of the disclosure relate to use of the token by third party servers received from a server to which a client originally transmitted the token to establish connections with the client device in a similar manner.

Further aspects of the disclosure relate to providing hints to a client which the client may use to improve user perceived performance with respect to a current or future request. The hints may indicate a number of connections to be established which entities to establish the connections with and or which content to retrieve. A client may utilize the hints to retrieve content prior to determining that the content is needed or desired. For example a hint file may be provided that lists which resources to retrieve and in which order to retrieve them. The hints may be determined dynamically by the server in some cases in response to feedback or initial indications received from a client. The feedback or initial indications may relate to network characteristics such as bandwidth screen display size or resolution etc.

Although aspects of the embodiments described in this disclosure will focus for the purpose of illustration on relationships and interactions between client devices and content servers one skilled in the art will appreciate that the techniques disclosed herein may be applied to any number of hardware or software processes or applications. Further although various aspects of the disclosure will be described with regard to illustrative examples and embodiments one skilled in the art will appreciate that the disclosed embodiments and examples should not be construed as limiting. Various aspects of the disclosure will now be described with regard to certain examples and embodiments which are intended to illustrate but not limit the disclosure.

With reference to an illustrative embodiment a user of a client device may launch a web browser application and submit a request to a server. The request may be for a web page or some other network accessible resource. The web browser may transmit the request according to a standard protocol such as Hypertext Transfer Protocol HTTP . The web browser may also include a token such as an encrypted identifier of the client device in the HTTP request. The token may be transmitted to the server in order to authenticate future communication from the server. For example if a server were to attempt to open a connection with a client device the client device may ignore such a request according to standard security practices. However if the server were to include the token that the client itself transmitted to the server then the client may determine based on the token and other information about the server e.g. IP address that the server is known that opening the connection may be desirable and further that opening a connection with the server is safe.

In some cases the server may utilize the connection to transmit content and data that the server knows or predicts the client will need but which the client does not yet know it needs or has not yet requested it. For example the server may be a web server configured to host content pages and transmit the content pages and resources embedded within the content pages in response to requests from client devices. If a client device requests a web page the server hosting the page can determine that the client will need the embedded resources in order to fully render the web page even though the client has not yet received a Hypertext Markup Language HTML file corresponding to the requested page that indicates which embedded objects to retrieve next. By establishing a second connection with the client the server may begin to transmit the embedded resources to the client in parallel with the HTML file in a prioritized sequence etc.

Some embedded resources may not be hosted by the server. For example the web pages hosted by the server may reference several objects which are hosted by a third party server such as a content delivery network CDN server. In such cases the server may transmit a copy of the token to the CDN server or other third party server. The third party server may then utilize the token to request establishment of a connection with the client device. The client device may process the token to determine that it is authentic e.g. decrypt the token to obtain an identifier and verify that the client generated the identifier and therefore the token . If the token is authentic and the client device is configured to accept connections from third party servers the client may accept the request establish the connection and begin to receive files via the newly established connection at the initiation of the third party server.

The client device may already have content present that the server or third party server attempts to transmit. For example browser applications commonly have local caches and content previously requested and received by the client device may be present in the cache. Transmission of redundant content may impact network performance and reduce eliminate or even counteract any benefit otherwise realized by allowing servers to establish connections and proactively transmit content. Accordingly the server may submit a request to the client device to determine whether a specific content item is present in a local cache and if so to determine the last edit date associated with the content item. The server may analyze the response and if it determines that the version cached on the client is current then the server may proceed with attempting to transmit other content items according to a similar process.

A server may also transmit hints or other instructions to a client device. Using the procedure described above and elsewhere herein the server may establish a connection with the client device. Rather than directly transmit content to the client device to enhance performance of a given content page the server may instead transmit a file or stream of data to the client that the client may use to request various content files and other objects. In a typical environment the client may request the HTML file corresponding to a desired web page. The HTML file includes embedded references to other resources and as the browser application of the client device processes the HTML file and encounters an embedded reference the browser application requests the corresponding resource. The server may determine an effective prioritization for retrieval of resources associated with the content page hosted by the server and transmit a hint file to the client device when the client device requests an HTML file. The hint file may indicate which embedded resources the client device will request in order to fully retrieve the web page which servers e.g. third party servers the embedded resources are to be retrieved from in what order to retrieve the resources etc. Accordingly the client device may analyze the hint file and begin to retrieve resources necessary or desirable for complete display of a web page before the client device fully receives and process the HTML file which references the resources.

The hint file may also be used to customize a response for a given client. For example a client device may be associated with a network that has certain characteristics e.g. bandwidth latency a display with certain characteristics e.g. size resolution . The client may disclose information regarding these characteristics to the server or the server may detect them. The server may transmit a hint file indicating that specific versions of resources are to be retrieved or specific host servers are to be contacted in order to retrieve content associated with the page that may be targeted specifically for the characteristics of a user device. For example the client device may be a mobile phone with a small display and limited network bandwidth. The server may through the use of a hint file inform the mobile phone of low resolution images to retrieve for display instead of the high quality images typically displayed on a page hosted by the server.

Turning now to an illustrative network computing environment in which the features described above may be implemented will be described. The network computing environment may include a content server a client device and a third party server . The various systems may communicate with each other via a communication network . The network may be a publicly accessible network of linked networks possibly operated by various distinct parties such as the Internet. In other embodiments the network may include a private network personal area network local area network wide area network cable network satellite network cellular telephone network etc. or combination thereof each with access to and or from the Internet.

The content server can correspond to a logical association of one or more computing devices for hosting content and servicing requests for the hosted content over the network . For example the content server may include a web server an application server a proxy server or some other device or group of devices that provide content to requesting client devices . Illustratively the content server of includes a number of components to implement server initiated connections and hint file generation such as a connection establishment component a hint generator and a content data store .

A connection establishment component may be configured to establish connections with client devices . The connection establishment component may be implemented as a hardware component of the content server or as a combination of hardware and software executing on the hardware. A hint generator may be configured to generate hint files and streams in response to content requests and other communications to or from client devices . The hint generator may be implemented as a hardware component of the content server or as a combination of hardware and software executing on the hardware similar to the connection establishment component . A content data store may be configured to store records files and other objects corresponding to content hosted by the content server . The content data store may correspond to a file system a relational database or some other electronic data store. In some embodiments the content server may include additional or fewer components than illustrated in . For example the content server may not include a hint generator or may include or it may include or otherwise be associated with various additional computing resources such as content delivery network CDN systems domain name system DSN servers and the like.

The client device may correspond to a wide variety of computing devices including personal computing devices laptop computing devices hand held computing devices terminal computing devices mobile devices e.g. mobile phones tablet computing devices etc. wireless devices electronic readers media players and various other electronic devices and appliances. A client device may be configured with a browser application to communicate via the network with other computing systems such the content server or third party server and to request receive process and display content. The browser may include a token control module and a hint analysis module . The token control module may be configured to generate and transmit tokens to the content server and to authenticate tokens received from the content server third party server or some other device in response to a request to establish a connection. The hint analysis module may be configured to receive and analyze hint files and other hint data from a content server and to initiate various actions based on the hints.

The third party server can correspond to a logical association of one or more computing devices for hosting content and servicing requests for the hosted content over the network . For example the third party server can include a web server component corresponding to one or more server computing devices for obtaining and processing requests for content such as content pages from the client device . In some embodiments one or more content providers may be associated with a CDN service provider an application service provider etc. The third party server may include a connection establishment component and a content data store similar to the content server .

An HTTP GET request typically includes data regarding the identity of the host which corresponds to the content server in this case the identity of the requested file which may correspond to the landing page of a web site and information about the client device . The information about the client device can include the User Agent HTTP header which specifies among other things the name and version of the browser that the client device is using to make the request. In some embodiments a custom HTTP header may be included with the request such as a Connection Token HTTP header. The custom header may be added to some or all requests generated by the client device . Because the header is a custom header a content server may not be able to identify the token and use it if the content server is not specifically configured to do so. Content servers that do not support the custom header may ignore it. In some embodiments the token control module may utilize an existing HTTP header to transmit the token. Further embodiments may not involve use of any HTTP header and may utilize different protocols such as SPDY.

In response to receiving a request such as the illustrative HTTP GET request described above a content server may respond with the requested file at 2 . If the content server is configured to receive the custom HTTP header that contains the token the content server may initiate a process for determining whether establishing a second connection with the client device is desirable. For example the content server may determine that opening an additional connection to the client device and sending files over the new connection will improve the performance and user experience on the client device . Accordingly the content server may pass the token or data derived from the token e.g. data generated by a challenge response algorithm back to the client device and request that a new connection be opened at 3 . The sequence of events may in some embodiments be reversed. For example a content server may request establishment of a new connection prior to responding with the originally requested content. In further embodiments the response to the client device request and the request to the client device to open a connection may be performed substantially in parallel.

The client device can analyze the token at 4 and determine whether the token is valid. For example the client device may create tokens from randomly generated data content server identification data client device identification data or any other data to which the client device has access. In some cases the token may be created with a time stamp to implement expiration. The data may be encrypted such that a content server or some third party does not have access to the data contained therein and cannot tamper with the token or generate fraudulent tokens. The client device may also record which tokens have been created. Upon receipt of a token the client device can determine whether the token is valid by decrypting the data checking the record of which tokens have been created and other operations depending on the method originally used to generate the token. In some embodiments the content server may modify the token according to some previously determined or approved method prior to passing it back. For example the content server may digitally sign the token with a private key and transmit the digitally signed token and the original token back to the client device for authentication. Such modifications to the token may be used to verify the identity of the content server or otherwise enhance the trust that a client device has in the validity of the token.

If the client device determines that the token is valid the client device may accept or otherwise establish the connection with the content server . Thereafter the content server may use the newly opened connection at 5 to transmit files or other data to the client device at the content server s initiative e.g. without receiving a request for a file or data .

Turning now to illustrative interactions and data flows to allow a third party server to establish a connection with the client device will be described. The client device may establish a connection request a file or transmit some other communication and also pass a token to a content server at 1 similar to the request described above with respect to . The content server may respond at 2 by transmitted the requested file to the client device .

The content server may instead of or in addition to requesting a new connection with the client device transmit the token or some data derived from or otherwise based on the token to a third party server at 3 . For example if the content server determines that certain files are going to be needed in order for a client device to fully receive a web page and that one or more of those files are hosted by a third party server the content server may send the token to the third party server . In some embodiments the content server may send additional data to the third party server such as the IP address of the client device and the name of a file that should be sent to the client device . The third party server may then contact the client device using the supplied IP address or some other method of identifying or addressing the client device and request that a connection be opened at 4 . The third party server may transmit the token received from the content server or some data derived from or otherwise based on the token to the client device .

The client device may validate the token at 5 as described above with respect to . In some embodiments additional validation may be performed due to the third party nature of the third party server . For security reasons the client device may have a list of third parties that it will accept connections from and may deny connection requests from all other third parties even if they present an otherwise valid token. The client device may also contact the original recipient of the token content server in this example in order to verify that the token was intended to be passed to a third party server .

Upon validating the token the client device may open the connection with the third party server . The third party server may then use the newly opened connection to transmit files or other data to the client device at 6 at the initiative of the third party server similar to the transmission from a content server to the client device described above with respect to . A file may be transmitted to the client device prior to receiving a request from the client device for the file.

Turning now to an illustrative process for enabling server initiated connections to a client device will be described. The process may be executed by a connection initiation module or some other module or component of the content server or third party server . The content server may receive a request from a client device for content hosted by the content server such as content in the content data store . In addition to responding to the request the content server may discover that a token has been received in a HTTP header or via some other method. The content server may also determine that the client device accepts incoming connections for example by detecting which browser the client device is using as indicated in the User Agent HTTP header. Upon determining that opening an additional connection is desirable the connection initiation module may transmit a request to the client device to open a connection. Advantageously once a connection is opened in this manner the content server may initiate transfer of content files and other data to the client device without requiring a request from the client device to do so.

The process begins at block . The process may be embodied in a set of executable program instructions and stored on a computer readable medium drive of a content server or some other computing system with which the content server is associated. When the process is initiated the executable program instructions can be loaded into memory such as RAM and executed by one or more processors of the computing system. In some embodiments the computing system may include multiple computing devices such as servers and the process may be executed by multiple servers serially or in parallel.

At block the content server may receive a request with a token from a client device . In addition to responding to the request the content server may determine that opening another connection with the client device is desirable.

The content server may then at block determine which files or other data to send to the client device in the event that the client device accepts the request to open a connection. For example if the client device has requested a content page such as a web page defined by an HTML file the content server may prioritize the various files corresponding to embedded references within the HTML file. The files may be prioritized by size type relative importance e.g. images files to be displayed near top may be more important than image files at the bottom some combination thereof or any number of other factors.

The content server may determine that one or more files to be transmitted to the client device are hosted by or otherwise associated with a third party server . In some embodiments the content server may further determine that the benefits of establishing additional connections support a decision to pass the token or some data derived from the token to the third party server at block . The content server can instruct or request that the third party server to establish a connection with the client device and transmit the files that the content server has determined will be required.

At block the content server may send a request for a new connection to the client device and include the token received at block . At decision block if the content server receives a denial from the client device to open the connection the process may terminate at block . If the client device accepts the request and establishes the connection the content server may begin the process of transmitting files to the client device .

In some embodiments the content server may be configured to determine whether the client device has a copy of a file prior to transmitting the file over the newly established connection. For example client devices commonly implement local caches in which copies of previously received content are stored. Future requests for the cached content may be served out of the cache thereby saving the time and resources associated with retrieving the content from a content server . The client device may initiate a brief communication with the content server to determine whether the cached content is up to date by transmitting an If Modified Since HTTP request. A content server responds to the If Modified Since request with a brief message if the content has not been modified in the time since the client device cached the copy. If the content has been modified the content server may simply respond to the If Modified Since request with the current version of the content.

In the server initiated connection process of the present example the content server may instead initiate a brief communication with the client device which is effectively the reverse of the If Modified Since HTTP request. For example the content server may request information from a client device regarding a file that may or may not be stored in the cache of the client device at block and analyze any response received from the client device . The requested information may include a time stamp from when the content was cached and a checksum or hash of the content to further determine whether the content has changed. The content server may then compare the timestamps or compute a hash or checksum to compare against the received data.

In some embodiments the content server may instead send the client device a timestamp from the time of the last update to the content and a checksum or hash of the most recent version. The client device may then use the information to determine whether the content has changed and transmit a request for the updated version to the content server .

At decision block the content server may determine whether there is a newer version of a file available. The determination may be based on a comparison of data received from the client device to data regarding the current version as described above with respect to block . If a file has been updated the process may proceed to block where the current version of the file is transmitted to the client device . Otherwise the process may terminate at .

In some cases the content server may determine at block that multiple files are to be transmitted. In such chases the content server may execute portions of the process optionally including blocks and for each file to be transmitted or only once for all files at substantially the same time.

Turning now to an illustrative process for receiving requests for and establishing server initiated connections on client device will be described. The process may be executed by the browser of the client device and specific portions may be implemented by the token control module . The token control module can generate tokens for transmission to the content server keep a record of all transmitted tokens and validate tokens received from the content server or third party server against those records. Advantageously when a token is received the token control module can determine not only the authenticity of the token but also whether the token has expired in order to prevent unauthorized use of the token.

The process begins at block . The process may begin automatically such as in response to initiation by a user of the client device of a request for a content object from a content server . The process may be embodied in a set of executable program instructions and stored on a computer readable medium drive of the client device . When the process is initiated the executable program instructions can be loaded into memory such as RAM and executed by one or more processors of the client device .

At block the client device may transmit a request for a content page or other network accessible file and include a token in the request as described above. Data regarding the token may be recorded by the token control module in order to determine later when the token is received with a request to open a connection which entity the token was transmitted to at what time the transmission was made and the like. Alternatively or in addition such data may be embedded within the token.

The time at which the token was originally transmitted may be used to determine whether the token has expired. For example a client device may not accept tokens that are more than 1 hour old 1 minute old or 1 second old. This may be for security reasons e.g. to reduce the window of time in which the token may be intercepted and used by a malicious third party . Additionally in some implementations the client device may wish to limit the content server to using the token for transmitting files associated with the request with which the token was originally sent to the content server rather than at a later time or at the discretion of the content server .

At block the client device may receive a request from a content server or a third party server to open a connection. At decision block the token control module may determine whether the token is valid. If the token is not valid the process may terminate at block . In some embodiments the client device may transmit a notification to the requesting entity if the token is expired or otherwise invalid. If the token control module determines that the token is valid and has not expired the process may proceed to open the connection at block and wait for activity over the connection at block .

Various network activities may occur over a network connection initiated by a content server or third party server including many or all of the actions requests responses and transmissions that occur over a connection initiated by a client device . For example the client device may receive a file from the content server at decision block . If a file is received the client device may process the file at block . Processing the file can include storing the file in a cache so that when an embedded reference to the file is encountered the file may be retrieved from cache without a request to the content server . In some embodiments processing may include displaying a file for pre rendering a file for later display. The process may then return to block .

The client device may also receive a request over the server initiated connection for information regarding a file that may or may not be present on the client device . As described above with respect to the content server may request information about a particular file prior to sending the file in order to avoid consuming bandwidth and other resources by sending a duplicate file. The request may include for example information about the current version of the file as hosted by the content server and the client device may then determine whether the local version is the current version. Alternatively the request may cause the client device to provide information about the local version to the content server . At block the client device can provide the requested information. The process may then return to block .

The client device may wait for connection activity at block for a predetermined amount of time until the connection is closed by the content server until a user of the client device causes the browser to navigate to a different domain or until the occurrence or nonoccurrence of some other event.

With reference to a content server may transmit a hint file to a client device at 1 . The transmission may occur over a connection established at the request of the content server as described in detail above. In some cases the hint file may be transmitted over a single connection established at the request of the client device such as the connection over which the client device transmitted a content request to the content server . For example if the client device initiated a connection with the content server via the SPDY protocol the content server may initiate a transfer of data to the client device over that same connection even though it was established by the client device .

In some embodiments the content server may determine that a client device is configured to receive and process hint files based on data received from the client device such as HTTP headers transmitted with an HTTP request. If the content server inspects the User Agent HTTP header and determines that the browser of the client device is capable of processing and using hints then the content server may begin inserting hints into custom HTTP response headers similar to the insertion of a token into a custom HTTP request header described above. For example a custom Open Connections HTTP header may be included and assigned a value indicating the IP address URLs or other identifiers of various hosts with which the client device should open connections. A custom Retrieve Files HTTP header may be assigned a vale indicating specific files to retrieve. Any number of other custom HTTP headers may be implemented. In further embodiments the content server may embed a reference at the top of a requested file such as an HTML file to retrieve the hint file from the content server . In such cases the browser of the client device can request and process an HTML file using standard methods and request the hint file as it encounters the reference.

The hint analysis module or some other component of the browser or client device may process the received hints at 2 . Processing the hints may include determining which domains to resolve how many connections to open which order to retrieve files that will be needed and the like. The client device can then act on the hints at 3 such as by opening a connection with the content server and requesting a file based on the received hint not on the received HTML file. The client device may also open connections to third party servers at 4 according to a listing or other instructions in the hint file.

Turning now to an illustrative process for generating hints at a content server will be described. The process may be executed by the hint generator of the content server . Advantageously the hint generator may be configured to prepare a list of connections to open prioritized list of resources to retrieve alternate files to retrieve and other actions to take in order to improve the performance and user experience at a client device with respect to the content hosted by the content server .

The process begins at block . The process may begin automatically such as when a content server is initialized or in response to some user or administrator event. The process may be embodied in a set of executable program instructions and stored on a computer readable medium drive of the computing system with which the content server is associated. When the process is initiated the executable program instructions can be loaded into memory such as RAM and executed by one or more processors of the computing system. In some embodiments the computing system may include multiple computing devices such as servers and the process may be executed by multiple servers serially or in parallel.

At block the content server receives a request from a client device . The request may be an HTTP GET request or some other request for a content item. At decision block the content server can determine whether the client device is configured to accept hints. As described above the content server may inspect the User Agent HTTP header to identify the browser type and version. If the browser is configured to accept hints such as the browser with a hint analysis module illustrated in the process can proceed to block otherwise the process can terminate at block .

At block the content server may analyze any client characteristics that have been transmitted to the content server or which the content server otherwise has access to. For example the client device may be configured to transmit data to the content server about the current network connection of the client device e.g. bandwidth latency the display available on the client device e.g. resolution physical size the computing capacity of the client device e.g. processor type memory and other characteristics which may affect performance. The data may be included in custom HTTP headers communicated with the content server before or after the transmission of an HTTP request detected from other data commonly transmitted e.g. IP address detected by the content server or some other system over a series of requests from the client device etc. In some embodiments the content server may have access to a data store with profile data about a client device .

The analysis of client characteristics can affect which hints to generate and send to the client device . At block the content server can generate hints for transmission to the client device .

At block the content server can optionally establish a connection with the client device as described in detail above. The content server may then use the connection to transmit a file containing the hints or a stream of hint data to the client device at block . Alternatively the content server may transmit the hints to the client device without establishing a new connection. For example if the content server and the client device have an existing SPDY connection open the content server may initiate transmission transmit hint files and data to the client device over the connection. In some embodiments the content server may induce the client device to request the hint file as described above by embedding a reference to the hint file in a file that the client device has or will request. The content server may also include hints in custom HTTP response headers sent to the client device . The hints may be associated with an expiration such as an HTTP header indicating a lifetime or expiration date or time. Data regarding the hints may be stored by a client device until they are expired similar to the caching of other network accessible content.

Turning now to an illustrative process for receiving and acting upon hints at a client device will be described. The process may be executed by the browser of the client device and specific portions may be implemented by the hint analysis module . Advantageously when a hint is received the hint analysis module can initiate actions according to the hints such as establishing connections and retrieving resources that the browser may need in the future thereby improving performance and the user experience.

The process begins at block . The process may begin automatically such as in response to initiation by a user of the client device of a request for a content object from a content server . The process may be embodied in a set of executable program instructions and stored on a computer readable medium drive of the client device . When the process is initiated the executable program instructions can be loaded into memory such as RAM and executed by one or more processors of the client device .

At block the browser may transmit a request for content to a content server . The request may include information about the current operating environment of the browser such as network conditions available computing resources and the like. Such information may be included in custom HTTP headers transmitted via an application programming interface API exposed by the content server or through some other method. In some embodiments the browser or some other component of the client device may be configured to store previously received hints similar to caching content items. In such cases the browser can determine whether a hint file or other hint data associated with the requested content or content source has been previously received. If so the hints may be processed and acted upon as described below.

At block the browser may receive one or more hints from the content server . The hint analysis module may analyze the hints to determine which actions if any to take based upon the hints. As described above the hints may include a prioritized list of resources associated with the originally requested content such that the browser may initiate retrieval of the resources prior to determining that they are needed for full processing or rendering of the originally requested content. Other hints may include alternative resources to retrieve connections to proactively open etc.

At block the browser may open various connections according to the hints. The connections may be opened to request specific resources as specified in the hints. In some embodiments connections may be opened in anticipation of requesting content in the future. For example a particular content item may include embedded references to a number of dynamically determined objects hosted by third party servers such as CDN servers. The hint file may indicate that the browser should proactively establish connections to the CDN servers so that once the dynamically determined objects are identified the browser may quickly retrieve the objects without waiting to establish a connection.

At block the browser may retrieve files and other resources as indicated in the hint file. Files may be retrieved in a prioritized order in parallel etc. For example the browser may be downloading the originally requested HTML file. That download may only be consuming 60 of the bandwidth available to the browser . The browser may proceed to utilize the remaining 40 of available bandwidth to download other resources associated with the requested content according the hint file. The associated resources may be retrieved before the browser finishes downloading the HTML file and is able to otherwise determine that the additional resources are to be retrieved. The hint file may also identify one or more substitute resources to retrieve based on the characteristic data sent to the content server at block . For example the substitute resources may be low resolution images or videos for mobile browsers e.g. browsers operating on a mobile phone .

At block the browser may transmit feedback to the content server . The feedback may be similar to the characteristic data that was transmitted with the original request. However feedback data may inform the content server about operating conditions with respect to the content from the content server rather than before the content from the content server is received.

All of the client side functionality described in this specification may be embodied in executable code of a browser program that supports HTTP HTML and other World Wide Web protocols and standards. For example the disclosed features may be incorporated into a mobile device browser that runs on a tablet or mobile phone that retrieves content over a wireless data network. In such mobile device embodiments in which wireless bandwidth limitations can be significant the ability for content servers to push content and or send hints to the mobile device can significantly improve user perceived performance. As described above additional performance benefits can be achieved by designing the mobile browser to notify servers of the mobile device s attributes e.g. relatively small form factor touch screen etc. and by designing the associated content server components to consider these attributes in selecting content and or hints to send to the mobile device . The browser may in some embodiments be configurable by the user to enable and disable server initiated connections and or pre fetching based on server supplied hints.

Depending on the embodiment certain acts events or functions of any of the processes or algorithms described herein can be performed in a different sequence can be added merged or left out altogether e.g. not all described operations or events are necessary for the practice of the algorithm . Moreover in certain embodiments operations or events can be performed concurrently e.g. through multi threaded processing interrupt processing or multiple processors or processor cores or on other parallel architectures rather than sequentially.

The various illustrative logical blocks modules routines and algorithm steps described in connection with the embodiments disclosed herein can be implemented as electronic hardware computer software or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. The described functionality can be implemented in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the disclosure.

The steps of a method process routine or algorithm described in connection with the embodiments disclosed herein can be embodied directly in hardware in a software module executed by a processor or in a combination of the two. A software module can reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of a non transitory computer readable storage medium. An exemplary storage medium can be coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium can be integral to the processor. The processor and the storage medium can reside in an ASIC. The ASIC can reside in a user terminal. In the alternative the processor and the storage medium can reside as discrete components in a user terminal.

Conditional language used herein such as among others can could might may e.g. and the like unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without author input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment. The terms comprising including having and the like are synonymous and are used inclusively in an open ended fashion and do not exclude additional elements features acts operations and so forth. Also the term or is used in its inclusive sense and not in its exclusive sense so that when used for example to connect a list of elements the term or means one some or all of the elements in the list.

Conjunctive language such as the phrase at least one of X Y and Z unless specifically stated otherwise is to be understood with the context as used in general to convey that an item term etc. may be either X Y or Z or a combination thereof. Thus such conjunctive language is not generally intended to imply that certain embodiments require at least one of X at least one of Y and at least one of Z to each be present.

While the above detailed description has shown described and pointed out novel features as applied to various embodiments it can be understood that various omissions substitutions and changes in the form and details of the devices or algorithms illustrated can be made without departing from the spirit of the disclosure. As can be recognized certain embodiments of the inventions described herein can be embodied within a form that does not provide all of the features and benefits set forth herein as some features can be used or practiced separately from others. The scope of certain inventions disclosed herein is indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

