---

title: Efficient mechanism for terminating applications
abstract: An efficient mechanism for terminating applications of a data processing system is described herein. In one embodiment, in response to a request for exiting from an operating environment of a data processing system, an operating system examines an operating state associated with an application running within the operating environment, where the operating state is stored at a predetermined memory location shared between the operating system and the application. The operating system immediately terminates the application if the operating state associated with the application indicates that the application is safe for a sudden termination. Otherwise, the operating system defers terminating the application if the operating state associated with the application indicates that the application is unsafe for the sudden termination.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08607248&OS=08607248&RS=08607248
owner: Apple Inc.
number: 08607248
owner_city: Cupertino
owner_country: US
publication_date: 20121019
---
This application is a continuation of U.S. application Ser. No. 12 143 466 now U.S. Pat. No. 8 296 776 filed Jun. 20 2008 which claims benefit of U.S. Provisional Application No. 61 059 469 filed Jun. 6 2008 which is hereby incorporated by reference.

The present invention relates generally to operations of a data processing system. More particularly this invention relates to efficient shutdown mechanism for a data processing system.

An operating system is a set of computer code that performs a variety of functions including interacting with the computer hardware insulating the programmer from the specifics of the computer hardware and providing general functionality that many application programs require.

An application in contrast addresses a particular problem to be solved. Examples of applications software are word processors etc. An application and operating system communicate using a series of standardized instruction codes passed between the two. The operating system software interprets these standardized instruction codes and controls the computer s hardware resources in response thereto. Oftentimes information in the form of data or messages is passed back to the applications software.

Typically when a user instructs the operating system to shut down the computer in which applications and operating system are running it takes a relatively long time to shut down. For example the operating system may ask an application to exit itself which may take a long time. Alternatively the operating system may prompt the user to manually terminate the application which sometimes requires too much user interaction.

An efficient mechanism for terminating applications of a data processing system is described herein. According to certain embodiments for each application that is running in a data processing system there is an operating state associated with each application and stored in a predetermined memory location shared and accessible between the respective application and the operating system supporting the application. For example whenever an application enters a critical section e.g. containing unflushed or unsaved data the application updates the operating state to indicate that the application is unsafe to exit. When the application leaves the critical section e.g. data has been flushed the application updates its operating state in the shared memory to indicate that the application is safe to exit.

As a result when an operating system receives a request to shut down for each application the operating system examines the operating state associated with each application to determine whether the operating system can terminate the application and or shut down the data processing system immediately. If the operating state of an application indicates that the respective application is unsafe to exit the operating system may defer terminating the application and or shutting down the data processing system until the application has a chance to finish up whatever it needs to do. On the other hand if the operating state of an application indicates that the application is safe to exit the operating system may immediately terminate the application and shut down the data processing system.

Other features of the present invention will be apparent from the accompanying drawings and from the detailed description which follows.

An efficient mechanism for terminating applications of a data processing system is described herein. In the following description numerous details are set forth to provide a more thorough explanation of embodiments of the present invention. It will be apparent however to one skilled in the art that embodiments of the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring embodiments of the present invention.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

According to certain embodiments for each application that is running in a data processing system there is an operating state associated with each application and stored in a predetermined memory location shared and accessible between the respective application and the operating system supporting the application. For example whenever an application enters a critical section e.g. containing unflushed or unsaved data the application updates the operating state to indicate that the application is unsafe to exit. When the application leaves the critical section e.g. data has been flushed the application updates its operating state in the shared memory to indicate that the application is safe to exit.

As a result when an operating system receives a request to shut down for each application the operating system examines the operating state associated with each application to determine whether the operating system can terminate the application and or shut down the data processing system immediately. If the operating state of an application indicates that the respective application is unsafe to exit the operating system may defer terminating the application and or shutting down the data processing system until the application has a chance to finish up whatever it needs to do. On the other hand if the operating state of an application indicates that the application is safe to exit the operating system may immediately terminate the application and shut down the data processing system.

Similarly operating system can be any of a variety of operating systems such as for example Mac OS from Apple Inc. of Cupertino Calif. or alternatively Windows operating system from Microsoft Corporation of Redmond Wash. Other operating systems such as UNIX or Linux may also be applied.

Operating system is the software component of a data processing system that is responsible for the management and coordination of activities and the sharing of the resources of the computer. The operating system OS acts as a host for application programs e.g. applications that are run on the machine. As a host one of the purposes of an operating system is to handle the details of the operation of the hardware e.g. hardware via device drivers . This relieves application programs from having to manage these details and makes it easier to write applications. Almost all computers including hand held computers desktop computers supercomputers and even modern video game consoles use an operating system of some type.

Operating systems offer a number of services to application programs and users. Applications access these services through application programming interfaces APIs or system calls. By invoking these interfaces the application can request a service from the operating system pass parameters and receive the results of the operation. Users may also interact with the operating system by typing commands or using a graphical user interface GUI . For hand held and desktop computers the GUI is generally considered part of the operating system. For large multiuser systems the GUI is generally implemented as an application program that runs outside the operating system.

Device driver is a specific type of computer software developed to allow interaction with hardware device . Typically this constitutes an interface for communicating with device through the specific computer bus or communications subsystem that the hardware is connected to providing commands to and or receiving data from the device and on the other end the requisite interfaces to the operating system and software applications. It is a specialized hardware dependent computer program which is also operating system specific that enables another program typically operating system or applications software package or computer program running under the operating system kernel to interact transparently with a hardware device and usually provides the requisite interrupt handling necessary for any necessary asynchronous time dependent hardware interfacing needs.

Operating system is also responsible for launching and or terminating each of the applications in response to a user interaction such as for example log out or shutdown action. According to one embodiment operating system includes an application termination logic that is configured to terminate each of the applications . In addition according to one embodiment for each application running within system an application state associated with each application is maintained in a predetermined memory location shared and accessible by application and operating system . In a particular embodiment the application state is accessible by application or operating system with an atomic lock such that only one of the application and operating system can access the application state at a given time.

For example whenever application enters a critical section e.g. containing unflushed or unsaved data the application updates the operating state to indicate that the application is unsafe to exit or be terminated. When application leaves the critical section e.g. data has been flushed application updates operating state in the shared memory to indicate that application is now safe to exit.

As a result when operating system receives a request to shut down or logout for each application the operating system examines the operating state associated with each application to determine whether the operating system can terminate the application and or shut down or log out the data processing system immediately. If the operating state of an application indicates that the respective application is unsafe to exit the operating system may defer terminating the application and or shutting down log out the data processing system until the application has a chance to finish up whatever it needs to do. On the other hand if the operating state of an application indicates that the application is safe to exit the operating system may immediately terminate the application and shut down log out the data processing system.

In addition as described above for each application in this example application an operating state associated with each application is maintained by system to indicate whether the associated application is safe for sudden termination. The operating state of an application can be maintained using a variety of manners. In one embodiment a counter is maintained for each application in this example application and stored in a predetermined memory location of memory shared and accessible by application and operating system .

A specific value or a range of values of counter can be used to indicate whether application can be safely terminated by operating system . In one embodiment when a value of counter is less than zero application can be terminated immediately. When a value of counter is greater than or equals to zero application is not safe to be terminated immediately by application termination logic of operating system . Alternatively a value of less than or equaled to zero may be used to indicate that application is safe to be terminated and a value of greater than zero may be used to indicate that application is not safe to be terminated dependent upon a specific configuration.

According to one embodiment whenever an application enters a critical section the application increments the value of its associated counter to indicate that the application is unsafe to be sudden terminated. Whenever an application exits a critical section the application decrements the value of its associated counter to reduce a possibility of unsafe sudden termination. For example when a user edits content of a word document of a word processing software application the word processing software application increments the associated counter to indicate that the word processing software application is unsafe for sudden termination. When a user saves the unsaved edits into a file the word processing software application decrements the value of the associated counter.

Note that an application may have multiple threads concurrently running and may enter a critical section concurrently. As a result each thread may individually increment the value of the counter associated with the application. For example the word processing software application may have multiple documents simultaneously opened and edited by a user. Thus each instant of the word processing software application may increment the value of the counter associated with the word processing software application. Therefore the word processing software application is unsafe for sudden termination until all instants e.g. all threads have exited the critical sections and decremented the value of the associated counter.

In this example referring to when application enters a critical section application increments the value of counter to indicate that application is not safe for sudden termination. When application exits a critical section application decrements the value of counter to reduce the possibility of unsafe sudden termination. Meanwhile when operating system receives a request to shut down or log out from a current operating environment or desktop operating system also access the counter to determine whether application can be suddenly terminated.

For example whenever operating system receives such a request operating system decrements the value of counter and then operating system evaluates the value of counter for determination of sudden termination. If the value of counter is less than zero after the decrement operating system may terminate application immediately without deferral or delay. However if the value of counter is greater than or equals to zero operating system would not terminate application immediately. Rather operating system may request application to exit itself which defers or delays the shutdown or logout process.

According to one embodiment API is used for application and operating system to communicate with each other. For example API includes but is not limited to function to disable sudden termination function to enable sudden termination and a query function to allow operating system to query application whether application is safe for sudden termination. For example when application needs to increment the value of counter application invokes function which in turn increments the value of counter and in effect disables the sudden termination for application . When application needs to decrement the value of counter application invokes function which in turn decrements the value of counter and in effect enables the possibility dependent upon how many threads or instants of the sudden termination for application . In addition query function may be used by operating system to dynamically query application to determine whether application is safe for sudden termination.

According to one embodiment an initial value of counter may be configured by default as one when application is launched. After application is launched and initialized if application is not in a critical section application may decrement the value of counter which is reduced to zero. Thus when operating system receives a request to shut down or log out operating system decrements the value of counter and then examines the value of counter . In this example the value of counter would have been a negative value which indicates that application is safe to be sudden terminated. As a result operating system may terminate application immediately.

According to another embodiment the initial value of counter may be preconfigured via an initial operating state of application metadata associated with application . When the initial operating state is set to a predetermined value which indicates that application supports sudden termination counter is initialized as zero when application is loaded by operating system . Since the initial value of counter is zero operating system assumes that application is safe for sudden termination. Otherwise the initial value of counter is set to one which is assumed that application is unsafe for sudden termination. An example of application metadata file is shown in .

This setting avoids the situation in which when application is being loaded with an initial value of counter as one and application hangs during the initialization. Thus application never gets a chance to decrement the value of counter even though application is not in a critical section. As a result when operating system receives a request for shutdown or logout operating system would not suddenly terminate application since the value of counter is not zero and the shutdown or logout process will be further delayed.

Note that counter is an atomic e.g. via a locking mechanism which may be implemented as hardware software or a combination of both counter in which only one of application and operating system can access counter at a given time.

As shown in the computer system which is a form of a data processing system includes a bus or interconnect which is coupled to one or more microprocessors and a ROM a volatile RAM and a non volatile memory . The microprocessor is coupled to cache memory . The bus interconnects these various components together and also interconnects these components and to a display controller and display device as well as to input output I O devices which may be mice keyboards modems network interfaces printers and other devices which are well known in the art.

Typically the input output devices are coupled to the system through input output controllers . The volatile RAM is typically implemented as dynamic RAM DRAM which requires power continuously in order to refresh or maintain the data in the memory. The non volatile memory is typically a magnetic hard drive a magnetic optical drive an optical drive or a DVD RAM or other type of memory system which maintains data even after power is removed from the system. Typically the non volatile memory will also be a random access memory although this is not required.

While shows that the non volatile memory is a local device coupled directly to the rest of the components in the data processing system the present invention may utilize a non volatile memory which is remote from the system such as a network storage device which is coupled to the data processing system through a network interface such as a modem or Ethernet interface. The bus may include one or more buses connected to each other through various bridges controllers and or adapters as is well known in the art. In one embodiment the I O controller includes a USB Universal Serial Bus adapter for controlling USB peripherals. Alternatively I O controller may include an IEEE 1394 adapter also known as FireWire adapter for controlling FireWire devices.

Thus an efficient mechanism for terminating applications of a data processing system has been described herein. Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the present invention also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable medium. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. a machine e.g. computer readable transmission medium electrical optical acoustical or other form of propagated signals e.g. carrier waves infrared signals digital signals etc. etc.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method operations. The required structure for a variety of these systems will appear from the description below. In addition embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

