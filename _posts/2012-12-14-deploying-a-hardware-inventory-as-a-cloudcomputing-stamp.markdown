---

title: Deploying a hardware inventory as a cloud-computing stamp
abstract: Methods, systems, and computer-readable media for automatically configuring an inventory of hardware to interact seamlessly with a computing fabric of a data center are provided. Initially, a communicative coupling between a user device and computing units of the hardware inventory is established. The communicated coupling allows an engine running on the user device to provision the computing units with software that allows the hardware inventory to function as a fabric-computing cluster (FCC) of the data center. Provisioning involves deploying a computing fabric to the computing units, and deploying core infrastructure services to run on top of the computing fabric. The computing fabric enables the computing units to interact as a unified logical system, while the core infrastructure services represent operating-system-level components that provide underlying support of applications running on the FCC. Upon carrying out the provisioning, the components internal to the computing units of the hardware inventory are validated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09367360&OS=09367360&RS=09367360
owner: Microsoft Technology Licensing, LLC
number: 09367360
owner_city: Redmond
owner_country: US
publication_date: 20121214
---
This application is related in subject matter to U.S. patent application Ser. No. 13 360 876 filed Jan. 30 2012 now pending entitled AUTOMATED BUILD OUT OF A CLOUD COMPUTING STAMP herein incorporated by reference.

Generally distributed service applications are hosted in cloud computing networks across various nodes and are intended primarily to promote high availability through redundancy of service application components dynamic scalability and auto healing functionality. These service applications are often divided into portions that include a group of service application components. These service application components may be hosted throughout nodes e.g. physical machines and virtual machines of one or more data centers. Often there exists a need to create or expand the computing storage capacity of these data centers to accommodate usage demands of the service applications and to help ensure that an entire service application does not become unavailable due to a lack of support from the underlying hardware.

Expansion of the data centers may involve various scenarios such as configuring a new set of hardware or reconfiguring an existing set of hardware to operate in concert with the existing nodes within the data centers. In one example a new set of racks that each accommodates a plurality of blades may be targeted for being integrated within a fabric that interconnects the data center nodes. This fabric helps ensure that the service application components distributed across the existing nodes and the newly added hardware such as racks network devices L2 3 switches routers load balancers power and serial devices and blades are able to interact as if each service application was running on its own independent computing device.

When conducting an expansion of a data center the steps for integrating the new set of hardware into the fabric are presently manually conducted. These manually conducted steps are often time consuming ineffective and inconsistent in result thus potentially leading to service interruptions within the fabric. Accordingly an automated end to end process that builds out a set of designated hardware for deployment into a fabric would help achieve an efficient robust and scalable framework for expanding the computing storage capacity of a data center.

This Summary is provided to introduce concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Embodiments of the present invention relate to systems methods and computer storage media for carrying out an automated bootstrap process that upon verifying a physical topology of an inventory of non configured hardware integrates and deploys the hardware inventory as a fabric computing cluster FCC within a cloud computing fabric of a data center. The automated manner in which the bootstrap process is implemented avoids the problematic fallout discussed above that precipitates from manually executed procedures for reconfiguring or adding capacity to a data center. Accordingly in embodiments of the present invention the automated bootstrap process enables incorporating the hardware inventory into the cloud computing fabric in a consistent and effective fashion.

In general the bootstrap process is triggered upon receiving an indication to create or expand computing storage capacity of a data center. In embodiments the data center includes a plurality of nodes e.g. physical machines or virtual machines network devices serial devices power devices and other equipment that are operably interconnected and managed via the cloud computing fabric. The fabric provides underlying support for service applications that are distributed throughout the data centers. In particular portions e.g. roles instances or program components of these service applications that are distributed throughout nodes may be managed by a controller of the fabric. The fabric controller is generally responsible for various duties surrounding the monitoring maintenance and management of the health of computer resources network gear serial devices and power units that support the underlying functionality of the fabric.

In an exemplary embodiment the bootstrap process is performed in independent phases upon being triggered by an event e.g. call to expand capacity of the data center . These phases are carried out by executing self contained workflows respectively and are generally depicted in . Initially a coauthoring phase may be conducted for specifying an initial set up of an inventory of hardware. This phase involves a workflow for implementing one or more of the following processes receiving a customer s dependency schema that specifies the additional capacity required on the customer s premises identifying the hardware that meets the dependency schema interfacing with the customer to gather values for configuring the identified hardware generating a symbolic representation from the values validating configuration using the symbolic representation upon delivery of the hardware and preparing a template file that memorializes a layout of the topology.

Upon preparing the template file the phases that involve discovery and validation of network devices and hardware devices may be commenced. The workflows for performing discovery and validation for each of these devices generally involve user device s that communicate with the network devices via network based connection and or a serial based connection to discover a physical topology e.g. inter rack locations and a wiring arrangement surrounding the hardware devices. These user device s may cross reference the discovered physical topology against the template file to validate the hardware devices. Once the physical logical topology configuration is fully generated the deployment of a new fabric instance or the expansion of an existing fabric instance can commence. It should be noted that the deployment of a new fabric instance or the expansion of an existing fabric instance can involve or be atop a portion of hardware in a given data center s or data center container.

Next the user device s may initiate communication with a cloud computing fabric of a data center to effectuate the phases that deploy the hardware inventory within the fabric of the data center as a fabric computing cluster FCC and provision security on the FCC. These phases involve various workflows that support setting up the hardware cluster to interact with resources and existing hardware within the data center. In addition these workflows may include the following steps preparing an infrastructure state from information gathered upon verifying the physical topology of the hardware inventory integrating the hardware inventory within the fabric of the data center by sharing the infrastructure state with a fabric controller deploying services running on the fabric within the hardware inventory and designating the hardware inventory as a data center FCC. Accordingly when carried out in succession these phases of the bootstrap process promote end to end automation for building out a hardware inventory and for integrating the hardware inventory within a fabric of a data center. This end to end automation may further achieve an efficient robust and scalable framework either within the hardware inventory preestablished within the data center e.g. reconfiguring an existing FCC to represent a new FCC instance within the data center or at a site external to the data center e.g. integrating a remote hardware inventory as a new FCC instance within the data center .

The subject matter of embodiments of the present invention is described with specificity herein to meet statutory requirements. However the description itself is not intended to limit the scope of this patent. Rather the inventors have contemplated that the claimed subject matter might also be embodied in other ways to include different steps or combinations of steps similar to the ones described in this document in conjunction with other present or future technologies.

Aspects of the invention focus upon two related phases within an overall bootstrap process where the bootstrap process is designed to achieve an efficient robust and scalable framework to incorporate a cloud operating system Windows Azure on designated hardware regardless of the location. These related phases are the following deploying a hardware inventory as a fabric computing cluster FCC within a cloud computing fabric of a data center and provisioning security on the FCC. These two phases of the bootstrap process are often conducted after a discovery and validation phase which involves the discovery validation and configuration of network devices and computer hardware as part of initial build out of a hardware inventory and a device return manufacture authorization RMA scenario. In one particular instance the workflows associated with the discovery validation and configuration for each of these elements rely in part on the information e.g. expected topology description previously gleaned from a previously conducted coauthoring phase of the bootstrap process. The workflows of the coauthoring phase the discovery validation configuration phase and the two phases discussed herein may be carried out by the same ecosystem. This ecosystem generally involves a user device e.g. mobile device laptop or utility box that is in communication e.g. serial and or network connections with the hardware inventory in order to perform deployment of the hardware inventory as the FCC and provisioning of security on the FCC before during or after deployment.

As discussed more fully below embodiments of this invention introduce technology within a cloud computing fabric to automatically deploy software on the inventory of hardware in order to eventually merge that hardware inventory as an FCC within a data center. As used herein the phrase hardware inventory is not meant to be limited to any particular configuration of components but broadly refers to any compilation of devices e.g. network devices computing devices and power supply devices that may be eventually integrated within the fabric. In one instance the hardware inventory may be located within a private enterprise network managed by a customer of a cloud computing network service provider where implementing the bootstrap process as an appliance on this type of hardware inventory allows for remote reachability between the data center and the private enterprise network. In another instance the hardware inventory may be located within the data center managed by the cloud computing network service provider where implementing the bootstrap process allows for building out local storage computing capacity of the data center.

In an exemplary embodiment the hardware inventory represents a system that is comprised of any number of the following network gear e.g. switches routers and load balancers power devices serial devices blade s e.g. computing and or storage devices and components within the blade s e.g. BIOS device drivers and firmware . Accordingly various systems may be categorized as the hardware inventory and the phrase hardware inventory is not limited to the exemplary systems described herein.

Further the hardware inventory may be equipped to communicate with external device s e.g. laptop configured to run and manage the bootstrap process of the hardware inventory and or internal device s e.g. blades for performing compute and storage operations via one or more channels. These channels may include a management channel serial communication channel and one or multiple network based channel s network communication channel . The serial communication channel represents an out of band connection that provides a hook up between the hardware inventory e.g. blades on racks and a set of serial devices e.g. Digi connector device . Typically serial management of the hardware inventory e.g. accessing and verifying the blades on the rack over the serial communication channel is conducted before setting up the networking capability on each of the blades on the rack. The network communication channel represents an in band connection for providing a network link between the external and or internal devices of the hardware inventory with various network locations. For example the network communication channel may include network management Ethernet wires that use in band signaling to exchange call control information. The two channels may be implemented using the same medium e.g. Ethernet depending on the hardware configuration.

As will be discussed more fully below the bootstrap process features end to end automation using one or more workflow engines running on a user device of that drive the orchestration and execution of various phases comprising the bootstrap process. In embodiments these phases can be carried out as independent workflows such that each phase may be invoked and driven to completion separately without reliance on concurrent operation of another phase or workflow. By allowing the phases to be carried out independently in a self contained manner each phase consistently delivers incremental improvements to hardware inventory without any adverse interactions of previous or subsequent workflows.

As will be apparent in the following discussion a majority of the discussion below will focus on the workflows surrounding the hardware inventory deployment and security provisioning phases of the bootstrap process where the workflows support setting up the hardware inventory within a cloud computing platform. In operation these workflows are designed to achieve the various goals of these two phases such as deploying the core infrastructure services e.g. fabric and storage on the hardware inventory such that it behaves as an FCC within a cloud computing fabric of a data center. One goal of the workflows is to provision security on the hardware inventory. Another goal of the workflows is to configure the fabric within the data center with information concerning the hardware inventory. Yet another goal of the workflows is to conduct cluster wide validation of the hardware inventory upon deployment. Generally cluster wide validation occurs once the core infrastructure services are provisioned onto the hardware inventory and the hardware inventory is deployed into the fabric of the data center. Cluster wide validation is employed to verify the services are live accessible and fully operational.

Still another goal of the workflows is to configure devices of the hardware inventory with production settings e.g. credentials and protocol data . Upon configuring the device with production settings the production settings are confirmed. Further the network configuration of the hardware inventory is established which allows for access to or network connectivity with the servers via one or more switches. Improper network configurations which are being detected and cured by the workflows typically prevent expected interaction with the servers even when the wiring surrounding the servers is correct e.g. data packets will not properly traverse network connections from the switches to the servers .

Yet another goal of the two phases is to verify that the configuration and functionality of the servers and their components match against a predefined template file. The template file may be prepared in part using the SKU definition developed generated during the coauthoring phase or hardware SKU certification phase of the bootstrap process. The SKU definition is discussed in greater detail in U.S. application Ser. No. 13 531 136 filed Jun. 22 2012 now pending entitled Establishing an Initial Configuration of a Hardware Inventory herein incorporated by reference. The template file may be used to verify that the wiring internal to the hardware inventory e.g. connections between servers serial access devices and PDUs and potentially external to the hardware inventory e.g. connections between serial aggregators is as expected by conducting wire checks to verify physical connections between devices. This verification of the physical topology of the hardware inventory conducted during the discovery and validation phase of the bootstrap process is discussed in greater detail in U.S. application Ser. No. 13 647 116 filed Oct. 8 2012 now pending entitled Discovering Validating and Configuring Hardware inventory Components herein incorporated by reference.

Having briefly described an overview of embodiments of the present invention an exemplary operating environment suitable for implementing embodiments of the present invention is described below.

Referring initially to in particular an exemplary operating environment for implementing embodiments of the present invention is shown and designated generally as computing device . Computing device is but one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing device be interpreted as having any dependency or requirement relating to any one or combination of components illustrated.

The invention may be described in the general context of computer code or machine useable instructions including computer executable instructions such as program modules being executed by a computer or other machine such as a personal data assistant or other handheld device. Generally program modules including routines programs objects components data structures etc. refer to code that performs particular tasks or implements particular abstract data types. The invention may be practiced in a variety of system configurations including handheld devices consumer electronics general purpose computers specialty computing devices etc. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network.

With reference to computing device includes a bus that directly or indirectly couples the following devices memory one or more processors one or more presentation components input output I O ports input output components and an illustrative power supply . Bus represents what may be one or more busses such as an address bus data bus or combination thereof . Although the various blocks of are shown with lines for the sake of clarity in reality delineating various components is not so clear and metaphorically the lines would more accurately be grey and fuzzy. For example one may consider a presentation component such as a display device to be an I O component. Also processors have memory. The inventors recognize that such is the nature of the art and reiterate that the diagram of is merely illustrative of an exemplary computing device that can be used in connection with one or more embodiments of the present invention. Distinction is not made between such categories as workstation server laptop handheld device etc. as all are contemplated within the scope of and reference to computing device. 

Computing device typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computing device and includes both volatile and nonvolatile media removable and nonremovable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and nonremovable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

Memory includes computer storage media in the form of volatile and or nonvolatile memory. The memory may be removable nonremovable or a combination thereof. Exemplary hardware devices include solid state memory hard drives optical disk drives etc. Computing device includes one or more processors that read data from various entities such as memory or I O components . Presentation component s present data indications to a user or other device. Exemplary presentation components include a display device speaker printing component vibrating component etc.

I O ports allow computing device to be logically coupled to other devices including I O components some of which may be built in. Illustrative components include a microphone joystick game pad satellite dish scanner printer wireless device etc.

Turning to a general discussion of the individual phases of the bootstrap process for establishing interoperation between an inventory of hardware and a cloud computing fabric of a data center will now be discussed. Generally illustrates a flow diagram that shows five exemplary phases of a bootstrap process for incorporating the hardware inventory into the fabric of a data center in accordance with an embodiment of the present invention. In embodiments building out the hardware inventory as a fabric computing cluster FCC using the phases discussed below may be carried out by a configuration software see reference numeral of on a user device see reference numeral of . The user device along with the hardware inventory data center and or other network device acts in concert to form various ecosystems that implement one or more phases of the bootstrap process.

Returning to as depicted at block the first phase of the bootstrap process includes a workflow for specifying an initial set up of the hardware inventory. Generally the workflow results in generating the logical physical configuration needed to deploy the fabric network between blocks and . During the first phase the workflow may involve gaining an understanding about an initial configuration of the hardware inventory before releasing the hardware inventory as an FCC of the data center. For instance the first phase workflow may attempt to validate the initial configuration of the hardware inventory to ensure it corresponds with an expected hardware layout e.g. device locations IP addresses VLANs and wiring and to ensure it meets certain regulations enforced by the data center e.g. flagged unsecure components are absent and desirable communication components are present .

In an exemplary embodiment the workflow of the first phase is concerned with verifying that the initial logical resources and the appropriate specification of those resources match a supported configuration. One instance of verifying may involve determining whether there are sufficient network resources e.g. IP addresses VLANs ports and the like provided in the configuration to match the desired configuration articulated by the specification. For example the first phase workflow may verify that at least one IP address is provided per machine if such a condition exists within the specification.

Another instance of verifying may involve determining whether there exists an overlap of the configuration with known existing ranges e.g. accidentally provided resources that are presently in use . Yet another instance of verifying may involve determining whether the planned set of resources constitutes a supported configuration e.g. are there enough of each required resource to meet the specification is the combination of these type of resources supported is the detected TOR switch compatible with the detected blades . Still another instance of verifying involves determining whether interaction with the end user customer is needed to gather resources required for the execution e.g. passwords addresses IP blocks VLANs and the like .

As depicted at block a second phase for discovering and validating network devices and wiring checks may be implemented on the hardware inventory. In embodiments the workflow of the second phase may involve communicating with a top of rack TOR switch and a serial access device of the network devices via a serial based connection and a network based connection respectively. Further the second phase workflow may involve sending instructions over one or more of the connections that prompt the TOR switch and or the serial access device to selectively induce hardware devices e.g. processors processing units computing devices servers and blades inserted into a rack to send traffic to the user device for analysis and may involve the use of a power distribution unit PDU to selectively power cycle the devices to reset their state. This analysis may include discovering and validating the hardware devices as depicted at block . That is the third phase of the bootstrap process employs data packets that are carried from the hardware devices to the user device. A workflow of the third phase may involve parsing the content e.g. payload and header of the data packets to determine the location or absence of configuration of and internal connections to the hardware devices.

In embodiments the third phase workflow may also send inject specific workflows tools etc. to the various devices and or blades to perform validation update and or configuration of hardware and or software components e.g. BIOS and device firmware within the devices blades themselves. In other embodiments the workflow of the third phase may execute smoke tests which serve to verify that components with the devices blades are functional and meet the fabric requirements. Further the third phase workflow may identify the model manufacturer and firmware version of devices blades for recordation and eventual use.

As depicted at block the fourth phase of the bootstrap process involves deploying the inventory as an FCC instance within the fabric of the data center. In an exemplary embodiment the fourth phase workflow may involve sharing with the fabric an infrastructure state of the hardware inventory e.g. generated during at least one of the previous phases and installing services on the hardware inventory that allow for interaction with the fabric. Installing services onto the hardware inventory may correspond with one of multiple scenarios which are discussed more fully below. As depicted at block the fifth phase of the bootstrap process involves cluster wide validation and provisioning of the security measures on the hardware inventory once it is designated as an FCC instance. In an exemplary embodiment the fifth phase workflow may involve passing data e.g. device credentials original certificates private keys and passwords between a secret store associated with the new FCC instance and a controller of the fabric.

Although five distinct phases of the bootstrap process have been described it should be understood and appreciated that other types of suitable arrangements of workflows that help advance the incorporation of the hardware inventory within a fabric of a data center may be used and that embodiments of the present invention are not limited to the five phases described herein. For instance embodiments of the present invention contemplate dividing a workflow of an individual phase e.g. phase five into separate workflows e.g. cluster wide validation and security provisioning that can be performed in a mutually exclusive fashion.

Examples of the multiple scenarios for installing services onto the hardware inventory will now be described. In one scenario the hardware inventory represents equipment that is new to the data center and that is not previously configured. Accordingly the new hardware is configured to operate transparently with existing resources of the data center and is cleanly integrated within the data center as a new FCC instance or cloud computing stamp that is managed by a controller of the cloud computing fabric.

In another scenario the hardware inventory represents a local extension of the data center that is added upon the data center requesting additional storage computing capacity. The local extension may include a rack of blades that build out to allow for management by a fabric controller. In embodiments the process of building out involves discovering a wiring pattern of the blades within the rack validating the wiring pattern against a predefined template file and approving the blades for incorporation into the data center. In effect building out the blades helps to ensure that any latent wiring issues or hardware issues e.g. physical defects missing parts invalid versions of parts or improper configuration within the rack are detected and addressed thereby ensuring that incorporation of the blades within the data center will not adversely impact the live underlying support being offered by the data center to services running thereon.

In yet another scenario the hardware inventory is configured with its own instance of a cloud computing fabric that is separate and partitioned from the fabric currently intercoupling resources of the data center. Thus upon incorporation of the hardware inventory into the data center the data center will run at least two cloud computing fabrics e.g. operating systems that function to isolate services assigned to the newly bootstrapped hardware inventory from services assigned to the original data center. In this way separate fabrics may be dedicated to services of particular customers thereby virtually and physically excluding protecting some services from others within the data center e.g. build out bootstrap in a data center container .

In still another scenario referred to as a return manufacture authorization RMA scenario the hardware inventory represents computing device s or other devices e.g. network PDU and serial that are deemed unreachable e.g. inoperable or disconnected by the controller of the fabric of the data center hereinafter fabric controller . During lifecycle management of hardware the fabric controller may periodically solicit a status of computing devices e.g. physical machines and or virtual machines aggregated within the data center. Soliciting the status may involve communicating requests to agents running on the computing devices respectively and receiving health information in return. If the fabric controller is unable to reach a particular computing device for any reason e.g. a network device that interconnects the computing device to the fabric controller fails the fabric controller can raise an alert that indicates the hardware inventory is unreachable.

Upon recognizing the hardware inventory as unreachable the fabric controller may initiate an auto healing procedure. In embodiments the auto healing procedure includes at least the steps of evacuation and validation where validation is often carried out within one or more phases of the bootstrap process as well. The step of evacuation may involve transferring services e.g. customer owned applications and system based applications consuming resources on the unreachable hardware inventory to a replacement hardware inventory. As such evacuation ensures that the auto healing procedure is transparent to the customers of the data center because the visibility to their services is not impacted during validation and maintenance.

Once the evacuation is successfully performed the step of validation is invoked. In an exemplary embodiment the step of validation includes carrying out a workflow of the bootstrap process that verifies configuration settings of components residing within the unreachable hardware inventory and cross references a detected physical topology e.g. links between components and wiring between devices of the unreachable hardware inventory against an expected physical topology e.g. provided within the template file of the reachable hardware inventory. In embodiments such validation may occur via the out of bound channel if the unreachable hardware device is inaccessible via the in band channel. As such the step of validation determines whether the unreachable hardware inventory is properly configured to interact with drivers of the fabric controller where the drivers are designed to interact with specific hardware configurations.

As more fully discussed below the step of validation involves taking the unreachable hardware inventory offline which is one reason for conducting the step of evacuation beforehand. It should be noted that evacuation is typically employed when real services are running on the impacted hardware. RMA during bootstrap does not typically involve the step of evacuation however RMA of hardware of a running live fabric does involve the step of evacuation for impacted role instances of a service for cleanup of customer data from unreachable hardware prep for OEMs Operators to access and investigate and for quarantine of unreachable hardware from reuse until issues are resolved.

Generally the unreachable hardware inventory is taken offline because several destructive actions occur that would interrupt the execution of services on devices of the unreachable hardware inventory and or on devices of the data center. These destructive actions may include one or more of the following manipulating a flow of power e.g. turning on and off to hardware e.g. blades power units serial devices network device s by requesting a serial access device to selectively drive a power via a PDU thereto gathering information from traffic sent from the manipulated blade extracting information e.g. MAC address of the blade from content of data packets sent within the traffic and verifying the location and wiring of the blade by evaluating the extracted information against the template file and performing validations. It should be noted that the serial access device is typically used for out of band communication while the top of rack TOR switch employs in band communication e.g. via the Ethernet .

In an example of selectively driving power to the blade the fabric controller may turn off power to a range of ports that feed the blades of the unknown invalid hardware inventory. Next the fabric controller may directly or indirectly instruct the PDU to turn on power to a selected port that links to a subject blade. The fabric controller may then read the MAC address from data packets being sent from the subject blade that is currently sending traffic. Thus connectivity of the subject blade is verified when the selected port corresponds with an expected port of the template file. Beyond verifying the selected port for receiving power from the PDU the step of validation may further involve using a TOR switch to determine which port within a range of ports allocated to blades of the hardware inventory is connected to the subject blade. This determination is made by identifying a subject port of the port range that is receiving the data packets being delivered from the subject blade.

The deployment and provisioning phases see blocks and of are substantially directed to integrating hardware inventory and installing particular software within the hardware inventory. With reference to a graphical representation illustrating an exemplary deployment ecosystem for integrating a hardware inventory within a data center e.g. data center of in accordance with embodiments of the present invention. Initially the deployment ecosystem includes a user device that is communicatively coupled with components of the hardware inventory . In an exemplary embodiment the communicative coupling is organized into at least a network based connection shown as thin dashed lines and a serial based connection shown as thick dashed lines . As illustrated in the serial based connection involves a communication path between the user device and a serial aggregator where the serial aggregator is responsible for properly distributing instructions from the user device to an appropriate serial device e.g. by processing addresses carried within data packets streaming from the user device . For instance the serial aggregator may represent a hub like mechanism that communicates with and talks to multiple serial devices e.g. connects to multiple Digi devices in multiple racks .

The network based connection involves a communication path between the user device and a TOR switch via a network device . In one example the network device may represent an L3 aggregator switch where the L3 aggregator switch is responsible for properly delivering data packets from the TOR switches to the user device e.g. aggregates data packets from multiple network devices . It should be noted that the network device may be configured to aggregate and communicate with multiple TOR switches where the network device serves as a parent node of the TOR switches and occasionally as a child node to other high level routers.

In operation the network device may act as an uplink between an existing infrastructure and the hardware inventory . Accordingly the network device serves to selectively isolate the hardware inventory from the rest of an existing infrastructure e.g. data center as well as the Internet. By ensuring that there is no broadcast traffic entering or leaving through the uplink the network device helps negate any impact upon external services currently running on the existing infrastructure.

In this way the deployment ecosystem may act in a self contained manner that confines messaging to intercommunication between the user device and the hardware inventory in order to ensure proper isolation between the hardware inventory being built out and an existing infrastructure. This isolation is useful in at least the following two respects providing a higher reliability during the bootstrap process by limiting external interference and ensuring any currently live hardware within the existing infrastructure is not impacted by the bootstrap process. In embodiments the isolation is configured as a security boundary that serves as a virtual layer separating the existing infrastructure and the hardware inventory which cannot be considered as trusted until each of the phases succeed. Accordingly the bootstrap process itself does not depend on a security context of the existing infrastructure. Generally during the final phases of the bootstrap process prior to the validation and provisioning phase the security credentials tokens are set up.

The configuration of the deployment ecosystem will now be discussed. Initially the ecosystem includes the user device for linking to and controlling functionality of racks and within the hardware inventory . With respect to the rack e.g. high density rack there exists one or more power distribution units PDUs blades e.g. computing units and serial devices and network devices e.g. TOR switch . It should be noted that there may be additional TOR switches per rack e.g. upper and lower TOR devices . The computing units and are designed to act as processors to carry out computing storage tasks and are configured by OEM to individually generate data packets upon respectively receiving power. In one instance the computing units and represent servers that are arranged and deployed within the rack . The PDUs are designed to selectively supply and aggregate power to the computing units and . The TOR switch is configured for sending data packets over the network based connection while the serial device is configured for invoking generation of the data packets upon receiving instructions over the serial based connection. In embodiments the serial device may be used to configure devices within the rack e.g. PDUs TOR switches and blades .

The hardware inventory may further include a serial aggregator and a network device that interconnect the racks within the user device . The serial aggregator aggregates and talks with multiple serial devices of various racks via serial communication channels thick dashed lines . The network device e.g. aggregator switch aggregates and talks with multiple TOR switches via network communication channels thin dashed lines . As can be seen the network equipment e.g. network device and TOR switch and the serial routers e.g. serial aggregator and serial device are generally organized in a tree shaped topology where there exists fewer connections when moving upward along the tree toward the user device .

The user device includes deployment software e.g. data center manager DCM engine that is designed to drive at least the deployment and provisioning phase of the bootstrap process. The deployment software is communicatively coupled to the TOR switch via the network based connection in band channel and to the serial device via the serial based connection out of band channel . In embodiments the deployment and provisioning phase of the bootstrap process comprise providing the user device with the DCM engine that is equipped to access a template file and triggering the DCM engine to update a master service MS within the data center where the MS helps integrate the FCC with the data center by allowing the FCC to interact with external resources of the data center. As discussed above the template file includes attributes of the hardware inventory that are recorded during discovery and validation of the plurality of computing units.

Although various different configurations of network serial devices and have been described it should be understood and appreciated that other types of suitable devices and or machines that distribute or aggregate messages may be used and that embodiments of the present invention are not limited to the serial device and TOR switch described herein. For instance multiple serial devices may be provided for the entire rack where the serial devices act as a serial access connection interface to the PDU and act as a serial connection interface to each of the computing units and . In another instance a serial device and the PDU may be combined into a single device. In yet another instance the TOR switch may be replaced with a specialized blade that has Ethernet interface capability. Accordingly the discovery and validation phase may be carried out using any number of network devices such that at least one network device includes in band capabilities for network communication and at least one network device includes out of band capabilities for serial communication. Or if the out of band capabilities are employed over the Ethernet then a secondary network switch may be used in place of the serial device. In this way the in band capabilities compliment the out of band capabilities and allow for debugging and diagnosis of the network devices as well as continued access to the computing units and if one of the capabilities fall offline.

It will be understood and appreciated by those of ordinary skill in the art that the ecosystem shown in is merely an example of one suitable portion of an environment for carrying out the deployment and provisioning phases of the bootstrap process and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the present invention. Nor should the ecosystem be interpreted as having any dependency or requirement related to any single resource or combination of resources illustrated therein. Further although the various blocks of are shown with lines for the sake of clarity in reality delineating various components is not so clear and metaphorically the lines would more accurately be grey and fuzzy.

The hardware inventory includes various equipment resources interconnected to the user device via serial based connections and or network based connections. This equipment resources as described herein may include software components e.g. installed in the network devices as well as tangible hardware elements such as racks and and the user device . The equipment resources may be distributably placed across various physical resources in order to establish communication therebetween. In addition a network not illustrated may be provided that facilitates this communication over channels connecting the equipment resources and any other elements required by the bootstrap process. The network may include without limitation one or more local area networks LANs and or wide area networks WANs . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet. Accordingly the network is not further described herein.

The exemplary system architecture of the ecosystem includes the user device and the computing units and . Each of these devices and shown in may take the form of various types of computing devices such as for example computing device described above with reference to . By way of example only and not limitation the devices and may be a personal computer desktop computer laptop computer consumer electronic device handheld device e.g. personal digital assistant various servers blades and the like. It should be noted however that the invention is not limited to implementation on such computing devices but may be implemented on any of a variety of different types of computing devices within the scope of embodiments of the present invention.

Typically each of the devices and include or is linked to some form of a computing unit e.g. central processing unit microprocessor etc. to support operations of the component s running thereon e.g. originating data packets upon receiving a signal or being supplied power . As utilized herein the phrase computing unit generally refers to a dedicated computing device with processing power and storage memory which supports operating software that underlies the execution of software applications and computer programs thereon. In one instance the computing unit is configured with tangible hardware elements or machines that are integral or operably coupled to the devices and to enable each device to perform communication related processes and other operations. In another instance the computing unit may encompass a processor not shown coupled to the computer readable medium accommodated by each of the devices and . Generally the computer readable medium stores at least temporarily a plurality of computer software components that are executable by the processor. As utilized herein the term processor is not meant to be limiting and may encompass any elements of the computing unit that act in a computational capacity. In such capacity the processor may be configured as a tangible article that processes instructions. In an exemplary embodiment processing may involve fetching decoding interpreting executing and writing back instructions e.g. reconstructing the physical gestures by presenting animations of the motion patterns .

Also beyond processing instructions the processor may transfer information to and from other resources that are integral to or disposed on the devices and . Generally resources refer to software and hardware mechanisms that enable the devices and to perform a particular function. By way of example only the resources may include one or more of the following mechanisms deployment software e.g. DCM engine a template file and components residing within the computing units and .

The workflows of the bootstrapping process for deploying the hardware inventory as the FCC and for provisioning security on the FCC will now be described with reference to . Initially the user device is provided with deployment software running thereon that is functional to carry out the deployment and provisioning phases of the overall bootstrap process. The user device may be wired or wirelessly hooked up to the hardware inventory via a serial based connection and or a network based connection which serve as the entry point for the user device to integrate the hardware inventory within the data center . The connectivity from the user device may be performed directly or through additional network devices not shown to enable communication therebetween.

As used herein the phrase deployment software is meant to generally refer to software that provides an efficient robust and scalable framework to incorporate a cloud based operating system e.g. Windows Azure on a designated hardware inventory regardless of the location. In one instance the deployment software enables deployment of the hardware inventory as a cloud computing stamp e.g. FCC within a cloud computing network e.g. distributed data center . In embodiments enabling deployment involves building up a non configured hardware inventory into a cloud computing stamp which is eventually incorporated into the fabric of the cloud computing network. Accordingly enabling deployment of the hardware inventory may involve provisioning and validating the cloud based operating system on the hardware inventory . In an exemplary embodiment the cloud based operating system includes the following computing fabric kernel space and core infrastructure services OS and or application space such as storage services monitoring data services domain name services and frontend services.

As mentioned above with respect to the deployment software may include the DCM engine running on the user device . In one embodiment the DCM engine may represent a portion of the fabric capable of managing hardware and devices. In another embodiment the DCM engine is programmed to drive workflows for installing and removing the hardware inventory into and from the data center . These workflows may include enabling an existing fabric to scale out without a service interruption.

Further the workflows may involve the DCM engine accessing a template file that includes attributes of the hardware inventory that are recorded during discovery and validation of a plurality of computing units therein. Discovery and validation is carried out during previous phases of the bootstrap process where these phases involve discovering components on the blades and comparing attributes of the components against a template file which serves as the blueprint of software and hardware expected to reside on the blades. The phases of the bootstrap process further involve verifying the components of the blades against the template file. For instance the discovery and validation prepares the blade for deployment into the fabric because the workflows ensure the blade is able to communicate properly with components e.g. fabric controller within the data center in which the blades are to be merged. If the blades are not properly configured then they will not be able to properly run the services thereon.

The user device stores or has access to the template file. The template file is generally configured to include a definition of the expected physical topology of the hardware inventory which describes the wiring between devices e.g. wiring between the TOR switch and the serial device . In one instance the wiring of the hardware inventory is defined in terms of a type of function e.g. compute or storage performed by the devices of the hardware inventory . Typically the template file may be provided by a hardware vendor who originally inspected the hardware inventory during a previous phase of the bootstrap process e.g. initial set up phase of the bootstrap process of .

The information collected during these phases such as the data recorded onto the template file is accessible by the DCM engine . In another instance while the user device is discovering and validating blades and components of the blades within the rack resultant information is being fed in real time to the DCM engine for eventual use. Accordingly the DCM engine is aware of the configuration and attributes of the devices e.g. blades serial and network devices and PDU detected within the hardware inventory as well as the physical and logical topology of the hardware inventory itself.

Turning now to an exemplary schematic depiction showing a relationship between various components being deployed on the hardware inventory by the DCM engine is shown in accordance with an embodiment of the present invention. Initially during deployment of the hardware inventory the DCM engine may carve out various components for managing differing levels of devices of the hardware inventory . These components include the following master service MS for managing a utility fabric cluster UFC and the CTM for managing an FCC .

In operation upon deploying the MS the MS may have the ability to manage the FCC of along with other FCCs in the data center . This ability to manage the FCC is due in part to the interaction of the DCM engine between the hardware inventory and the data center . As mentioned above the DCM engine represents deployment software running on the user device that includes an API based mechanism for accessing hardware inventory information e.g. XML schema and or template file and exporting the hardware inventory information to the computing fabric of the data center via the MS running on the data center . In other words the DCM engine may be capable of logically transferring the hardware inventory information directly into a preexisting MS of the data center by simply conveying the hardware inventory information without further installation. Or the DCM engine may be capable of populating the MS with the hardware inventory information when the MS does not presently contain that information during deployment of the hardware inventory .

Turning now to graphical representations illustrating exemplary systems for deploying various components within the hardware inventory are shown in accordance with embodiments of the present invention. With respect to the hardware inventory is demonstrated as being deployed in subsets e.g. portion of an overall rack as opposed to all at once. In this way as a subset is discovered and validated the subset is deployed such that is available to the MS which is deployed within the hardware inventory . The deployment of these subsets such as FCC and FCC is then communicated to the MS . This communication alerts the MS to begin managing the FCC and the FCC for hosting tenant applications and the like. Upon deploying the subsets of the hardware inventory dynamically as they are discovered and validated. Deployment of the CTMs may involve the DCM engine allocating portions for the hardware invention to run the CTMs within the subsets. For example with reference to a portion of the hardware within the FCC is allocated to host and run CTM while a portion of the hardware within the FCC is allocated to host and run CTM. Similar to the MS the CTMs and are replicated on portions of the hardware inventory and configured to interact with each other during production events. The remainder of the hardware inventory is made available to run the customer s tenant applications.

In addition to the MS and the CTMs and the DCM engine is programmed to provision the computing units within the hardware inventory with software. In an exemplary embodiment provisioning the software may include the following steps deploying a computing fabric to hardware inventory such that the plurality of computing units therein interact as a unified logical system and deploying core infrastructure services to run on top of the computing fabric. From an operating system s perspective the computing fabric affects kernel space. For instance the MS the CTMs and and any other tools for assisting in running the core infrastructure services may be internal to the computing fabric. Also from an operating systems perspective the core infrastructure services represent operating system level components within the user space. These operating system level components serve to provide underlying support tenant applications running on the FCCs and .

Examples of the operating system level components include storage services monitoring data services MDS domain name service DNS and a frontend service . In embodiments the storage services assist in establishing and maintaining a file system. The MDS is equipped to detect events within the FCCs and and to recognize and diagnose failures based upon the detected events. The DNS is configured to manage static and or dynamic IP addresses of the blades of the racks within the hardware inventory as well as to assign and record virtual IP addresses in association with tenant services running on the blades. The frontend service is designed to provide the tenant services with an application programming interface API for allowing external devices to interact with the FCCs and . That is the frontend service allows external devices e.g. private enterprise network to interact with tenant applications running on the hardware inventory by calling upon the APIs making unassigned portions of the FCCs and available to the customers. It should be noted that there exists other core infrastructure services besides those illustrated and mentioned with respect to such as software load balancers SLBs etc.

Turning to an operational diagram of a system architecture showing various components for securing and converting the hardware inventory to an FCC that interacts with the data center is shown in accordance with embodiments of the present invention. These various components include but are not limited to the following configuration engine security tools deployment engine validation setup engine and validation test engine . These components may be part of or in communication with the DCM engine running on the user device . Or one or more of these components may be isolated from the DCM engine and run independently from the deployment phase of the bootstrap process.

Initially upon provisioning the computing fabric and the core infrastructure services within the hardware inventory the configuration engine is equipped to configure the hardware inventory by applying configuration settings. In one instance the configuration engine is equipped to apply a first set of configuration settings to the computing fabric. The first set of configuration settings represents general properties that are applied to many FCCs within the data center thereby integrating the operation of the multiple FCCs into a common network.

In another instance the configuration engine is equipped to apply a second set of configuration settings to the core infrastructure services. The second set of configuration settings represents specific properties that are applied to an individual FCC . The second set of configuration settings may include environment specific settings hardware specific settings or tenant specific settings that are applied to the core infrastructure services. The environment specific settings determine whether the hardware inventory is entering into production or still being tested. The hardware specific settings are particular to whether the hardware inventory is local to a production location remote from a production location a stand alone data center joining a computing fabric of a networked data center and or is the first FCC to run the computing fabric. The hardware specific setting may also govern such things as the specific IP ranges for the FCC and the amount of storage or compute capacity of the hardware inventory . The tenant specific settings are provided to support the tenant services designated to run on the FCC . These tenant specific settings are typically application driven properties such as identifiers of the endpoints ranges of IP addresses and names of VLANs.

In operation the configuration engine is equipped to receive the configuration settings as name value pairs within a settings file . The configuration engine may then convert human readable name value pairs into configuration settings of a computer readable format e.g. service description files language which is expected and understandable by the computing fabric deployed on the FCC . In one instance the configuration may use configuration schemas to adapt the human readable name value pairs into a format of content specific values that may be interpreted by the MS and or CTMs.

The security tools are generally configured for provisioning security measures within the hardware inventory upon accessing a secret store . The secret store represents one or more stand alone mechanisms where confidential information is held and that interfaces with the security tools on the user device . In this way the secret store does not need to have any dependency on the Internet or other publicly accessible network thereby preserving the private nature of the confidential information stored within the secret store . In some embodiments the secret store may represent a centrally secured secret storage location that is accessed over the Internet.

Prior to deployment of the FCC the secret store employs a management API to manage confidential information generated on the fly while building out the hardware inventory during the initial bootstrap process phases. This confidential information e.g. credentials for network and hardware devices original certificates private keys passwords for serial access devices user names access protocols and other permissions is written to the secret store until the completion of the discovery and validation phase. In one instance the confidential information is manually uploaded to the secret store by a customer or administrator. In another instance the confidential information is automatically imported into the secret store from a credential authority.

During deployment the secret store may automatically transfer some confidential information to the security tools to export to the MS or CTMs. The secret store may transfer other confidential information to a highly available location for viewing by a custodian of the data center . This confidential information may be subsequently used by the custodian to debug the FCC upon experiencing problems when integrated within the data center .

In one instance of operation the security tools ensure the integrity of the confidential information as it is being injected into proper locations of the hardware inventory . This secure transfer of the confidential information allows a tenant application running on the FCC to encrypt and decrypt messages. It should be noted that the secure transfer of the confidential information may occur during or after deployment of the hardware inventory as the FCC .

Upon successfully completing the injection of the confidential information into the FCC and or data center using the security tools the FCC may be integrated within the data center . Integration may include replacing locally generated credential information used to access network and hardware devices employed during the build out of the hardware inventory with new secure credentials. In one instance replacement of the credential information is performed by leveraging existing cloud computing fabric processes for creating auditing and rotating security tokens on existing nodes. In this way credential information that may have been shared with various parties e.g. technicians OEMs curators or administrators while building out the hardware inventory are decommissioned thus the FCC is made more secure. It should be noted that even upon integration the user device may be retained as a gateway device to service the core infrastructure services e.g. MS and CTM after the bootstrap process is complete.

The security tools may also be tasked with provisioning an access control list ACL for virtual IP addresses and provisioning the DNS within the FCC . For most tenant services there exists an endpoint e.g. accessible by external entities using a virtual IP address which allows for accessing the tenant services. The endpoint is imparted with security measures in order to meter access thereto. For example the security measures may invoke a rule that only external entities that are granted authority by the frontend service of may talk with the computing fabric during the bootstrap process. Enforcing the security measures may involve either manually changing permissions on the networking hardware inventory to ensure only a select group of external entities have permission to access the endpoints or enforcing the security measures may involve the deployed computing fabric automatically applying the security measures e.g. access policies to the computing units or networking hardware of the hardware inventory . Automatically applying the security measures may involve the use of software based LBs with programmable interfaces that allow for specifying which security measures are desirable and which endpoints to the computing fabric the specified security measures will be installed. In one instance specifying the security measures includes setting up a range of virtual IP addresses to use within the ACL for a particular endpoint to a tenant service.

Using the security tools to provision the DNS involves creating at least one entry into the DNS that corresponds with the ACL where the entry maps a domain name to one or more virtual IP addresses of an endpoint. There may also be a certificate associated with the endpoint stored in the DNS. Thus the DNS manages customer to tenant virtual IP address conversion for each of the endpoints to the tenant services running in the FCC .

Typically for each tenant service two types of endpoints exist internal within the computing fabric and external visible to public . In embodiments dynamic IP DIP addresses are used for machine level addressing dedicated to internal endpoints while the virtual IP VIP addresses are used for public level addressing exposed publically for external endpoints. A hardware or a software based LB may be used for mapping between a VIP and a DIP in order to secure a range of IP addresses. Further the LB may perform network address translation to frustrate attacks on the internal functionality of the FCC .

The deployment engine may run on the user device or within the computing fabric of the FCC . Further the deployment engine may be called via an interface to instantiate deployment of the FCC where the deployment engine is responsible for driving end to end automation of various workflows within the bootstrap process including the execution of tools and mechanisms used for accomplishing the workflows inherent in scheduling deployments managing deployments that are in flight and responding to any issues that occur. The deployment engine conducts deployments by executing workflows against a running computing fabric reporting on progress escalating issues and collecting metrics that can be used to drive deployment improvements over time.

In operation the deployment engine may be configured to execute a set of commands in parallel or in serial that performs a workflow for automatically deploying a configuration image within the hardware inventory . The configuration image may include a virtual hard disk VHD package and logical steps of the workflow to carry out deployment of the package. Upon consuming the configuration image the deployment engine may commence execution of the logical steps of the workflow. These logical steps involve pre action e.g. validation of the FCC to ensure expected dependencies are met action e.g. deployment of the configuration image and post action e.g. post deployment validation .

Deployment of the configuration image may be staged by levels of priority of the components being deployed. These prioritized components include ordered from highest to lowest priority core tenants infrastructure tenants and platform tenants. The core tenants help provide a functioning data center and include services that enable general operation of the computing fabric. The core tenants include components that support inter node communication capability such as the DNS MS and CTMs. The infrastructure tenants help provide usability and availability of the FCC and make it usable to run a tenant service. The infrastructure tenants include storage services of e.g. XStore that support finding data for customer accounts that are located remotely and that provide an interface for the customer to interact with the CTMs. The platform tenants help offer the customers options that are not necessarily required for operation of the data center . In embodiments the platform tenants include attributes that correspond with definitions of the dependency schema thus helping to decide what software is to be run on the data center .

Upon completion of deployment of the configuration image the hardware inventory represents a new FCC that is ready to be integrated with the balance of FCCs within the computing fabric of the data center . When integrating the FCC to an existing data center information e.g. MAC addresses configurations of the computing units in the hardware inventory and the like about the FCC is conveyed to the data center to merge the FCC within a layout of the previously created clusters of the data center . Once integrated within the data center the FCC will serve as one of the clusters.

Initially the process of integrating the FCC involves preparing an infrastructure state from the information collected when verifying the physical topology of the hardware inventory . As used herein the phrase infrastructure state is meant to broadly encompass any data that is useful to describe hardware and or software properties presently exhibited by the network and hardware devices. In one particular example the infrastructure state helps identify the utility of the hardware inventory as storage compute or hybrid of storage and compute where the utility is based on such considerations as physical topology e.g. high profile blades are linked to ports with proper permissions for high security storage purposes configuration settings and identity of the network and hardware devices. As such infrastructure state ostensibly serves as an image of the software configuration settings and operating system installed within the hardware inventory when it is built out to the FCC .

In operation the infrastructure state is shared by the user device with one or more components of the data center when integrating the hardware inventory within the computing fabric. In this way the infrastructure state acts as an input that includes details of the hardware inventory that enable a fabric controller to manage the hardware inventory as an FCC or cloud computing stamp. For example details may include MAC or IP addresses and configurations of the network and hardware devices locations of particular devices port connections between devices and PDUs and other information needed to manage the FCC .

The validation setup engine and the validation test engine are configured to work in cooperation to perform post deployment validation of the FCC . Generally when moving from one phase of the bootstrap process to the next confirmation is made to ensure prerequisites of each phase are met. That is the resultant output of each phase typically leaves the hardware inventory in condition for the next phase to commence without difficulty. For example if the resultant output of the deployment of the computing fabric does not allow sufficient access to the computing units by the CTMs then an issue is detected and remediation prior to progressing to the next phase is triggered. Although each phase of the bootstrap process may include a validation as part of its workflows a comprehensive fabric wide validation is performed upon the end of the build out of the hardware inventory .

The comprehensive fabric wide validation ensures the hardware of the FCC is ready for use by running a suite of tests such that different tests are conducted against different subsystems from many locations. These locations may include the following the user device to transform the connection into the disaster recovery entry point fabric controller s of the data center to verify the FCC is internally reachable external entities e.g. corporate network to determine whether the FCC is externally reachable e.g. over the Ethernet and specialized entities as requested by customers.

Initially when carrying out the suite of tests for validation of the FCC the validation setup engine is instructed to implement a workflow whose built in features e.g. remote execution run as pause and resume may be exploited to perform tasks e.g. tenant deployments or network configuration . As such the validation setup engine may borrow and reuse existing workflows for setting up and verifying proper functionality of a test based tenant service or canary tenant to validate that the deployment and configuration of the FCC was successful. Typically the canary tenant exhibits characteristics of at least one tenant service to be hosted by the hardware inventory when operating as the FCC of the data center . In embodiments validating a configuration and deployment of an FCC may comprise the following steps deploying a computing fabric on the hardware inventory as mentioned above generating the artifacts for a canary tenant to be installed within the computing fabric of the hardware inventory deploying the canary tenant within the hardware inventory assigning a range of DIP and VIP addresses to a canary tenant and testing operation of the canary tenant using the addresses to ensure proper functionality within a physical and logical topology of the hardware inventory .

Turning to schemes for deploying the canary tenants will now be discussed. With respect to a scenario is depicted where a multi instance scheme is employed by the validation setup engine . The multi instance scheme involves distributing many replications of a single instance of a role of a canary tenant e.g. VMs across many computing units e.g. servers on racks of the hardware inventory . These single role instances are then tested to ensure the physical and logical topology of the hardware inventory allows for proper functionality. In one example testing may involve verifying that the network and LB settings allow for communication with each of the VMs and thus validating that each of the racks is reachable.

With respect to a scenario is depicted where a multi tenant scheme is employed by the validation setup engine . The multi tenant scheme e.g. multiple tenants where each tenant has multiple roles involves distributing many replications of instances of canary tenants e.g. VMs and across many computing units e.g. servers on racks of the hardware inventory . These different tenant instances are then tested to ensure the physical and logical topology of the hardware inventory allows for proper functionality of at least a first tenant service e.g. VMs and a second tenant service e.g. VMs running on the same hardware inventory .

Turning now to the validation test engine is configured to test the canary tenants once generated and distributed by the validation setup engine . When testing the validation test engine generally employs a test framework with inbuilt features e.g. data driven testing attribute based test execution multi platform test execution and multi mode test execution that permit performing a wide variety of tests in different modes. Initially the validation test engine is configured to inject tools into the computing units e.g. blades of racks of of the hardware inventory . These injected tools are configured to determine whether there are computing unit failures when the hardware inventory is being used in a way similar to production. If improperly configured the hardware inventory may exhibit corollary failures that may be addressed before being released for customer use.

The tools being injected by the validation test engine may be selected based on in part a SKU definition developed for the hardware inventory the template file or any other information collected during the bootstrap process. Further the injected tools may comprise an OEM based package or a custom built package. In operation the injected tools may run various tests with or without the canary tenants. In one instance the injected tools may run smoke tests which include checks of how the hardware and software installed on the hardware inventory will interact with services running on the computing fabric of the data center . In another instance the injected tools may run burn in tests which include extended stress tests that exhaust the compute capacity and various resources such as network bandwidth etc. of the hardware inventory to determine whether servers blades generate failures upon becoming physically hot. In this test the position of the servers blades in the rack is being checked thus the validation test engine is able to detect short term failures in the servers blades before allowing deployment of the FCC into the data center .

In yet another instance the injected tools may run a matrix of tests by making calls from various locations e.g. internal and external to the hardware inventory while checking various behaviors that occur in response to the calls. In one instance the calls invoke positive operations to check such attributes as availability latency and security. In another the calls invoke negative operations or design to fail tests from different locations. By specifying and running the tests from various locations the validation test engine may control which locations are selected for each test thereby diagnosing a failure by differentiating the location whose call caused the failure.

It should be noted that the exemplary system architecture of is but one example of a suitable environment that may be implemented to carry out aspects of the present invention and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Nor should the illustrated system architecture be interpreted as having any dependency or requirement relating to any one or combination of the components as illustrated. In some embodiments one or more of the components may be implemented as stand alone devices or as services or executable s . In other embodiments one or more of the components may be integrated directly into the data center FCC and or the user device . It will be understood by those of ordinary skill in the art that the components illustrated in are exemplary in nature and in number and should not be construed as limiting. It should be noted that deployment may be carried out without any of the specific components listed above but with replacement processes that provide similar functions.

Accordingly any number of components may be employed to achieve the desired functionality within the scope of embodiments of the present invention. Although the various components of are shown with lines for the sake of clarity in reality delineating various components is not so clear and metaphorically the lines would more accurately be grey or fuzzy. Further although some components of are depicted as single blocks the depictions are exemplary in nature and in number and are not to be construed as limiting e.g. although only one secret store is shown many more may be communicatively coupled to other user devices that are performing the bootstrap process on other hardware inventories .

Referring now to a flow diagram is shown that illustrates an overall method for converting the hardware inventory into the FCC in accordance with an embodiment of the present invention. Although the terms step and or block may be used herein to connote different elements of methods employed the terms should not be interpreted as implying any particular order among or between various steps herein disclosed unless and except when the order of individual steps is explicitly described. Initially the hardware inventory represents a rack where the rack may include a network device e.g. TOR switch and a set of computing units e.g. set of blades inserted into the rack . The set of blades are typically interconnected between the serial access device and the TOR switch.

Initially the method of involves establishing a communicative coupling between a user device and a hardware inventory as indicated at block . Typically the hardware inventory includes a plurality of computing units that are configured to provide additional compute or storage capacity to a data center. As indicated at block the plurality of computing units provisioning with software that allows the hardware inventory to function as an FCC of the data center. In embodiments provisioning comprises deploying a computing fabric to the plurality of computing units see block and deploying core infrastructure services to run on top of the computing fabric see block . In one instance the computing fabric enables the plurality of computing units to interact as a unified logical system while the core infrastructure services represent operating system level components that provide underlying support of applications running on the FCC.

As indicated at block the method further involves configuring the hardware inventory to behave as the FCC of the data center. In embodiments configuring comprises applying a first set of configuration settings to the computing fabric see block and applying a second set of configuration settings to the core infrastructure services see block . In instances the first set of configuration settings represents general settings that are applied throughout the data center while the second set of configuration settings includes particularized settings such as environmental specific settings hardware specific settings and tenant specific settings.

Turning to a flow diagram showing an overall method for provisioning security measures within the hardware inventory will now be described in accordance with embodiments of the present invention. The method of involves the step of accessing confidential data within a secret store as indicated at block . Typically the secret store is equipped to maintain at least temporarily the confidential data retrieved or received from a third party entity e.g. customer administrator custodian of the data center or credential authority . In other embodiments the store secret represents a long term repository for confidential information within a secret store service where a version of the service may represent a standalone unit running on the device that manages secrets during bootstrap. In yet other embodiments bootstrap process may use the standalone version of the service or a remote service if reachable.

As indicated at block the confidential information is retrieved from the secret store by a DCM engine running on a user device. The user device is communicatively coupled to the hardware inventory via a serial and or network connection. The hardware inventory generally includes a plurality of computing units that are configured to provide additional compute or storage capacity to a data center. The DCM engine is configured to convert the confidential data to a format that is expected by a computing fabric deployed on the hardware inventory as indicated at block . Further the DCM engine is configured for automatically injecting the converted confidential data into the computing fabric of the hardware inventory as indicated at block .

Embodiments of the present invention have been described in relation to particular embodiments which are intended in all respects to be illustrative rather than restrictive. Alternative embodiments will become apparent to those of ordinary skill in the art to which embodiments of the present invention pertain without departing from its scope.

From the foregoing it will be seen that this invention is one well adapted to attain all the ends and objects set forth above together with other advantages which are obvious and inherent to the system and method. It will be understood that certain features and subcombinations are of utility and may be employed without reference to other features and subcombinations. This is contemplated by and is within the scope of the claims.

