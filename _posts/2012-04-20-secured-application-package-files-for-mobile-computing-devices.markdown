---

title: Secured application package files for mobile computing devices
abstract: An ANDROID application package (APK) file for an application is repackaged into a secured APK file to protect a Dalvik executable (DEX) file of the application. The DEX file is encrypted to generate an encrypted DEX file that is included in the secured APK file along with a stub DEX file. The secured APK file is received in a mobile computing device where the stub DEX file is started to start a wrapper Activity. The wrapper Activity replaces an APK class loader of a mobile operating system of the mobile computing device with a decryptor class loader. The decryptor class loader decrypts the encrypted DEX file to recover the DEX file, and loads classes of the DEX file into a Dalvik virtual machine. The original Activity of the application is then started to provide the functionality of the application in the mobile computing device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08892876&OS=08892876&RS=08892876
owner: Trend Micro Incorporated
number: 08892876
owner_city: Tokyo
owner_country: JP
publication_date: 20120420
---
The present invention relates generally to computer security and more particularly but not exclusively to methods and apparatus for securing application package files for mobile computing devices.

Mobile operating systems are designed to be suitable for computers that are constrained in terms of memory and processor speed. The ANDROID operating system is a popular mobile operating system employed in mobile computing devices including mobile phones and tablets. Application programs for the ANDROID operating system come in a file referred to as the ANDROID application package APK file. A problem with the APK file is that it is relatively easy to decompile to identify system application programming interface API call sequences. This makes the APK file vulnerable to reverse engineering for malicious copying and other purposes.

Code obfuscation has been employed to make applications in APK files difficult to reverse engineer. For example the PROGUARD software tool may be employed to obfuscate JAVA code used in APK files. However while code obfuscation makes the APK file harder to read the APK file may still be readily decompiled to show the system calls employed by the application.

In one embodiment a computer implemented method comprises receiving a secured application package file in a mobile computing device the secured application package file comprising an encrypted Dalvik executable DEX file and a decryptor class loader. A class loader of a mobile operating system of the mobile computing device is replaced with the decryptor class loader. The decryptor class loader is used to decrypt the encrypted DEX file to recover a DEX file. The decryptor class loader instead of the class loader of the mobile operating system is used to load classes of the DEX file into a Dalvik virtual machine of the mobile operating system.

In another embodiment a system comprises a computer system configured to unpack an application package file to encrypt a first Dalvik executable DEX file of the application package file to generate an encrypted DEX file and to include the encrypted DEX file a second DEX file and resource files of the application package file into a secured application package file and a mobile computing device configured to receive the secured application package file to execute the second DEX file to launch a decryptor class loader to execute the decryptor class loader to decrypt the encrypted DEX file to recover the first DEX file to execute the decryptor class loader to load classes of the first DEX file into a Dalvik virtual machine and to execute the classes of the first DEX file in the Dalvik virtual machine.

These and other features of the present invention will be readily apparent to persons of ordinary skill in the art upon reading the entirety of this disclosure which includes the accompanying drawings and claims.

In the present disclosure numerous specific details are provided such as examples of apparatus components and methods to provide a thorough understanding of embodiments of the invention. Persons of ordinary skill in the art will recognize however that the invention can be practiced without one or more of the specific details. In other instances well known details are not shown or described to avoid obscuring aspects of the invention.

Referring now to there is shown a schematic diagram of a computer that may be employed with embodiments of the present invention. The computer may be employed as any of the computers described below. The computer may have fewer or more components to meet the needs of a particular application. The computer may include a processor . The computer may have one or more buses coupling its various components. The computer may include one or more user input devices e.g. touch screen keyboard mouse one or more data storage devices e.g. hard drive optical disk USB memory a display monitor e.g. LCD flat panel monitor CRT a communications interface e.g. network adapter modem cellular interface and a main memory e.g. RAM . The communications interface may be coupled to a computer network which in this example includes the Internet.

The computer is a particular machine as programmed with software modules . The software modules comprise computer readable program code stored non transitory in the main memory for execution by the processor . For example the software modules may comprise a repackaging module an APK file and a secured APK file when the computer is employed as a customer computer system see . As another example the software modules may comprise an ANDROID operating system and the secured APK file when the computer is employed as an ANDROID device .

The computer may be configured to perform method steps by executing the software modules . The software modules may be loaded from the data storage device to the main memory . The software modules may also be made available on other computer readable storage medium including optical disk flash drive and other memory devices.

The customer computer system may comprise one or more computers configured to generate a secured application package file. In one embodiment the customer computer system includes a repackaging module one or more APK files and one or more secured APK files . The repackaging module may comprise computer readable program code for generating a secured application package file which in the example of comprises a secured APK file . The APK file may comprise a conventional APK file of an application program application for the ANDROID operating system. In one embodiment the repackaging module is configured to repackage an APK file into a secured APK file . The repackaging module may be implemented as a command line software tool. The customer computer system is so named because it may be operated by a customer of a computer security vendor such as Trend Micro Inc. to protect the customer s applications included in application package files from reverse engineering.

In the example of a secured APK file comprises a manifest a signature resource files a stub Dalvik executable DEX file an encrypted DEX file a native library and a configuration file .

The manifest may include extensions package related data and other information generally included in a manifest of an APK file. In the example of the manifest comprises the manifest of the APK file and may include a reference to the wrapper Activity . The signature comprises the digital signature of the provider of the secured APK file . The resource files comprise additional files that the application uses and in this example includes the resource files of the APK file .

Generally speaking in the ANDROID operating system a DEX file comprises computer readable program code that performs the general function of an application. A typical APK file has a DEX file. In the example of the DEX file of the secured APK file is a stub DEX file which comprises an Activity referred to herein as a wrapper Activity . The wrapper Activity comprises an Activity of the ANDROID operating system . In the ANDROID operating system an Activity is a process of the application. The Activity is so named because it wraps around or encapsulates the original Activity of the application of the APK file . In one embodiment the wrapper Activity is intended to replace the original class loader of Activity of the ANDROID operating system with the decryptor class loader upon execution to decrypt the encrypted DEX file and to start the original Activity of the application by reading the configuration file .

In one embodiment the encrypted DEX file comprises the original DEX file of the APK file original DEX file but encrypted by the repackaging module to prevent reverse engineering. That is encryption of the original DEX file prevents it from being read even when the secured APK file is unpacked. However once encrypted the original DEX file no longer conforms to the standard DEX format and thus can no longer be executed by the Dalvik virtual machine of the ANDROID operating system .

The decryptor class loader may comprise computer readable program code for loading classes into the Dalvik virtual machine of the ANDROID operating system . In one embodiment the decryptor class loader is a native implementation that uses the JAVA Native Interface JNI of the JAVA programming language. The decryptor class loader may be configured to decrypt the encrypted DEX file to recover the original DEX file of the APK and to load the classes of the original DEX file into the Dalvik virtual machine of the ANDROID operating system . As can be appreciated the classes of the original DEX file include the original Activities of the application. The secured APK file thus allows the application to run as if the application was still packaged in the APK file .

In one embodiment the native library comprises the classes of the decryptor class loader . The wrapper Activity may also be implemented in native code using the native library . The classes of the decryptor class loader allow for decryption of the encrypted DEX file to recover the original DEX file and to load the classes of the original DEX file into the Dalvik virtual machine for execution. In other words the decryptor class loader may comprise computer readable program code for decrypting encrypted computer readable program code of the application to recover the original computer readable program code of the application and to load the original computer readable program code of the application into the virtual machine for execution by the virtual machine. The configuration file comprises information that allows the stub DEX file to identify which main Activity to load upon execution. In the example of the configuration file indicates to the stub DEX file to load the wrapper Activity as the main Activity.

In an example operation the APK file comprises a package file of an application for the ANDROID operating system . The repackaging module parses the contents of the APK file arrow to generate the secured APK file using the contents of the APK file arrow . The customer computer system forwards the secured APK file to the ANDROID device arrow . The customer computer system may forward the secured APK file directly to the ANDROID device by way of an ANDROID app store or by way of another computer system.

The device may comprise an ANDROID mobile phone tablet or other mobile computing devices that run the ANDROID operating system. In the device the stub DEX file executes to run the wrapper Activity . The wrapper Activity replaces the original class loader of Activity of the ANDROID operating system with the decryptor class loader . The decryptor class loader decrypts the encrypted DEX file of the APK file to recover the original DEX file and loads the classes of the original DEX file into the Dalvik virtual machine of the ANDROID operating system thereby allowing the application to run in the device . Advantageously the application cannot be reverse engineered in the device because its original DEX file is in encrypted state prior to being loaded into the Dalvik virtual machine.

In the example of the secured application package file is a secured APK file and the original application package file is an APK file . The repackaging module unpacks the APK file step to allow access to the files archived in the APK file including access to the original DEX file of the application. The manifest of the APK file is modified to insert a reference to the wrapper Activity step . The repackaging module generates the encrypted DEX file by encrypting the original DEX file which comprises the original classes of the application as included in the APK file step . The repackaging module copies the resource files and raw data from the APK to the secured APK file step . The repackaging module may copy resource files and raw data from the APK file to the secured file without modification. The repackaging module adds the stub DEX file comprising the wrapper Activity and the configuration file to the secured APK file step . The repackaging module adds the native library comprising the JNI implementation of the decryptor class loader to the secured APK file step . The repackaging module packages the secured APK file to include the manifest the signature the resource files the stub DEX file the encrypted DEX file the native library and the configuration file . The secured APK file may be provided to a mobile computing device running the ANDROID operating system such as the ANDROID device . The ANDROID device may receive the secured APK file directly from the customer computer system another computer system or an ANDROID app store for example.

The method begins when the wrapper Activity is started step such as when the application associated with the secured APK file is selected by the user for execution. When the wrapper Activity executes it replaces the APK class loader normally employed by the ANDROID operating system to load classes with the decryptor class loader step .

The decryptor class loader consults the configuration file to determine the main Activity to be loaded which in this case is the original Activity of the APK file original Activity . The decryptor class loader loads the original Activity into the Dalvik virtual machine of the ANDROID operating system step . In one embodiment the decryptor class loader loads the original Activity by receiving the decryption key for decrypting the encrypted DEX file step decrypting the encrypted DEX file to recover the original DEX file of the APK file step and loading the classes of the original DEX file into the Dalvik virtual machine of the ANDROID operating system step . The decryptor class loader may receive the decryption key locally or from a remote server computer system for example. By decrypting the encrypted DEX file to recover the original DEX file and loading the classes of the original DEX file the decryptor class loader allows the functions of the application to be executed by the Dalvik virtual machine.

The wrapper Activity builds an intent object for the classes loaded by the decryptor class loader step . The wrapper Activity then starts the original Activity step . The wrapper Activity thereafter ends step . As can be appreciated the original Activity now executes as intended by the developer of the APK file while being protected from reverse engineering by the secured APK file . That is decompiling the secured APK file does not reveal the contents more particularly the system calls employed by the application because of the encryption of the original DEX file. The application is thus secured from reverse engineering while still allowing the application to execute normally.

Embodiments of the present invention may be employed to perform other security functions in mobile computing devices not just to protect applications from reverse engineering. For example the decryptor class loader may also replace one or more original classes of the original DEX file with security classes. The security classes may be configured to hook critical function calls such as SMS sender in the case of anti premium service abuse for monitoring and evaluation.

Methods and systems for generating and executing secured application package files for mobile computing devices running mobile operating systems have been disclosed. While specific embodiments of the present invention have been provided it is to be understood that these embodiments are for illustration purposes and not limiting. Many additional embodiments will be apparent to persons of ordinary skill in the art reading this disclosure.

