---

title: Distributed update service
abstract: Systems and methods are disclosed that facilitate the updating of target computing devices based on versioning information. The updates to the target computing devices can utilize a series of external client workflow integration points, or integration points. The integration points allow the client computing device to interact with the computing device management component and dictate the workflow process associated with the implementation of the update procedure on the target computing device. The integration points can also be used by the client to perform additional processes specific to the client's policy-based protocols.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09342291&OS=09342291&RS=09342291
owner: AMAZON TECHNOLOGIES, INC.
number: 09342291
owner_city: Seattle
owner_country: US
publication_date: 20121114
---
Generally described computing devices utilize a communication network or a series of communication networks to exchange data. Companies and organizations operate computer networks that interconnect a number of computing devices to support operations or provide services to third parties. The computing systems can be located in a single geographic location or located in multiple distinct geographic locations e.g. interconnected via private or public communication networks . Specifically data centers or data processing centers herein generally referred to as a data center may include a number of interconnected computing systems to provide computing resources to users of the data center. The data centers may be private data centers operated on behalf of an organization or public data centers operated on behalf or for the benefit of the general public.

To facilitate increased utilization of data center resources virtualization technologies may allow a single physical computing device to host one or more instances of virtual machines that appear and operate as independent computing devices to users of a data center. With virtualization the single physical computing device can create maintain delete or otherwise manage virtual machines in a dynamic matter. In turn users can request computer resources from a data center including single computing devices or a configuration of networked computing devices and be provided with varying numbers of virtual machine resources.

In some scenarios the physical computing devices or instances of a virtual machine may be configured according to a number of virtual machine instance types to provide specific functionality often referred to as provisioning. For example various computing devices may be associated with different combinations of operating systems or operating system configurations hardware resources actual or virtualized and software applications to enable a computing device to provide different desired functionalities or to provide similar functionalities more efficiently. These customized configurations are often provided within a device image which a computing device may process in order to implement the desired software configuration and which can be standardized among a set of host computing devices.

Once the initial provisioning has occurred or while an initial provisioning is occurring however at least a portion of the machine image e.g. the operating environment software applications or configurations may need to be updated. It can be difficult for a service provider to identify all possible host computing devices that may require updating or to implement update information for a large set of host computing devices.

Generally described aspects of the present disclosure relate to the management of computing devices. Specifically systems and methods are disclosed that facilitate the updating of target computing devices such as host computing devices or client computing devices based on versioning information. A set of computing devices are provisioned with a local computing device management component. Each local computing device management component periodically transmits a request to a computing device management component to determine whether version information associated with the respective computing device corresponds to a desired goal state for the computing device. Illustratively the desired goal state of each computing device can be expressed in the form of version filter information. Based on a processing of the version filter information with the current version information of the computing device the computing device management component can facilitate the implementation of updates to the requesting target computing device.

The target computing devices can be associated with clients that interact with the target computing devices through client management devices. In some instances an update may need to proceed in accordance with specific procedures and processes determined by a client s policy based protocols. The system and method for performing updates to the target computing devices can utilize a series of external client workflow integration points or integration points. The integration points allow the client computing device to interact with the computing device management component and dictate the workflow process associated with the implementation of the update procedure. The integration points can also be used by the client to perform additional processes specific to the client s policy based protocols.

Illustratively client management devices may register instructions at one or more integration points. At each integration point the computing device management component transmits a message to the client computing device. The transmitted message informs the client computing device of the current stage of the update process for the host computing system. The computing device management component can wait to proceed with the processing of the update until a response has been received from the client computing device. The response from the client management device provides instructions to the computing device management component on how to proceed with the implementation of the update.

In some embodiments the computing device management component can implement pre condition integration points as part of a workflow process. Illustratively pre condition integration points allow client management devices to determine whether to initiate the update process for a target computing device. The pre condition phase occurs prior to performing mutable actions related to the processing of an update for the target computing system.

In another embodiment the computing device management component can implement pre update integration points as part of a workflow process. Illustratively pre update integration points allow client management devices to perform any tasks that need to be performed prior to implementing the update on the host computing device. For example a client management device may communicate with other related computing systems adjust operating parameters or perform other processes in anticipation of an update being performed on the target computing system.

In a further embodiment the computing device management component can implement post update integration points as part of a workflow process. The post update integration points allow client management devices to perform post update processes after the update has been implemented. For example testing and monitoring of the target computing device may be performed on the host to verify proper operation prior to returning the target computing device to its previous operational state.

In yet other embodiments the target computing devices are defined into specific host sets. Each host set can have one or more computing devices assigned to the host set. The host set can also have one or more host set parameters that at least partially dictates how updates are implemented on target computing devices within the host set.

While specific embodiments and example applications of the present disclosure will now be described with reference to the drawings these embodiments and example applications are intended to illustrate and not limit the present disclosure. The term target computing device can refer to computing devices client computing devices and host computing devices that undergo the systems and methods described herein. The target computing device can be physical computing devices instantiated virtual machine instances or combinations of physical computing devices and instantiated virtual machine instances. The term target computing device does not imply the configuration of any specific functionality for a computing device or the requirement that the computing device host one or more virtual machine instances. Additionally while various embodiments and aspects of the present disclosure will be described with regard to computing devices client computing devices and host computing devices hosting virtual machine instances running applications one or more aspects of the present disclosure can be applied with physical computing devices or combinations of physical computing devices and instantiated virtual machine instances. Accordingly reference to the term host computing device does not imply the configuration of any specific functionality for a computing device or the requirement that the computing device host one or more virtual machine instances. Still further one or more aspects of the present disclosure may be applicable to a variety of client computing devices and computing devices including but not limited to networking computing devices. Still further although various types of integration points are disclosed in the present disclosure one skilled in the relevant art will appreciate that no particular combination or order of integration point are required to be implemented.

The virtual network also includes a computing device management component for processing requests for the determination of updates to host computing devices . Additionally the computing device management component can provide updates to one or more of host computing devices . Although illustrated as a single stand alone component the computing device management component can be implemented in a distributed manner. Additionally one or more aspects of the computing device management component may be implemented in other computing devices such as a virtual machine instance.

With continued reference to the virtual network can further include a computing device version filter data store for maintaining at least in part version filter information that corresponds to a defined goal state for version information for host computing devices client target devices or computing devices . Additionally the computing device version filter data store can include information such as executable code configuration settings information and other information utilized to identify or implement updates for the host computing devices client target devices or computing devices . The computing device version filter data store may correspond to network attached storage NAS database servers local storage or other storage configurations which may be implemented in a centralized or distributed manner. Additionally although a single host computing device version filter data store is illustrated one skilled in the relevant art will appreciate that any number of data stores may be utilized to implement the computing device version filter data store .

Connected to the virtual network via a network are multiple client computing devices and . As used herein client computing devices refers to physical computing devices that may not be part of the virtual network . The client computing devices can be generally referred to as client management devices or client target devices depending on the function implemented by the computing device. However references to client management devices and client target devices should not be construed as limiting as a client computing device can be in one instance a client management device and in another instance the same client computing device can be a client target device .

Each client target device may be provisioned to provide a variety of different desired functionalities. Examples of the types of desired functionality include but are not limited to database management serving or distributing data or content e.g. Web servers managing load balancing or network resources managing network connectivity or security providing network addressing information managing client or server redirection or any other functionality associated with a data center.

The network may be for instance a wide area network WAN a local area network LAN or a global communications network. In some instances the client computing devices and may interact with the virtual network to request or define version filter information or to define a distribution of version filter information for a set of host computing devices .

In some instances the client computing devices can communicate with the virtual network and the computing device management component using a notification or messaging service. The client computing devices can use the notification service to send asynchronous communications to the virtual network and computing device management component and vice versa.

In one embodiment the client computing device associates a messaging service topic with one or more host computing devices to which the virtual network subscribes. The computing device management component also has a messaging service topic associated with the same host computing devices to which the client computing device subscribes. The client computing device can receive information from the virtual network and provide information to the virtual network in an asynchronous manner. For example the computing device management component can publish information to the client computing device through the messaging service topic and the client computing device can provide responses through the other associated messaging service topic. In one instance the client computing devices can define and modify host sets using the notification service and can send responses to queries from the computing device management component .

In another embodiment the computing device management component can communicate with the client management device in accordance with an API specific to the client management device. The client management device can communicate with the computing device management component in accordance with an API for the virtual network . In some embodiments the client management device can communicate with the virtual network through an API and the computing device management component can communicate with the client management device through a messaging service or vice versa.

In one instance the computing device management component can send an integration point message to the client computing device that can include a target asset identification a deployment identification a release identification a scope identification an integration point identification an integration request response identification and custom token data. The client computing device can send an integration point response message to the computing device management component that can include an asset identification a scope identification an integration point identification an integration point request response identification a response code and optionally a response message. Among other things the response code can instruct the computing device management component to proceed repeat and suspend. Illustratively the command to proceed instructs the computing device management component to proceed to the next step in the workflow process. The repeat command instructs the computing device management component to repeat the current step in the workflow process. In some embodiments the computing device management component can wait a period of time after receiving the repeat command before re sending the integration point message. The suspend commands instruct the computing device management component to suspend the operation which can be directed to a specific host a host set or other grouping.

In some embodiments the computing devices and are defined into host sets or host groupings. Each host set can have one or more computing devices and assigned to the host set. The host sets are customized groupings that can be defined by a client management device or the computing device management component . In one embodiment the host sets can be defined by a client management device and provided to the computing device management component . For example a client management device may create host set A and host set B for a group of ten target computing devices . Set A could have three computing devices and Set B could have seven computing devices . The client computing device can add or remove host computing devices from the host groupings. Hosts can be added to sets individually or in multiples. In one embodiment the computing device management component tracks the date and time when host computing devices are added to each host set.

Additionally a host set can have one or more host set parameters. In some instances the host set parameters can at least partially dictate how updates are implemented on host computing devices within a host set. In one instance a host set parameter may dictate the number of host computing devices within the host set can be updated simultaneously. For example a host set of fifty host computing devices can have a simultaneous update limit of four devices.

With reference now to illustrative interaction between the components of the virtual network for the updating of host computing devices based on versioning information and version filter information will be described. Although will be described with regard to host computing devices one skilled in the relevant art will appreciate that similar interaction may be implemented on any target computing device such as computing devices client target devices or combinations of host computing devices client target devices and computing devices . Accordingly the interactions illustrated in should not be construed as limiting.

With reference first to the computing device management component obtains version update information corresponding to a desired version goal state for a set of host computing devices . Illustratively the specification of the desired goal state may be transmitted by a client computing device such as a client computing device associated with a system administrator in accordance with an Application Protocol Interface API . Alternatively the computing device management component may make the determination of the desired goal state based on processing information made available by a network based service processing error reports or making comparisons of software application or operating system environments of other host computing devices .

Illustratively the computing device management component processes version filter information for each host computing device that is in the virtual network or in a set of host computing devices . For example the computing device management component may process version filter information for each host computing device in a data center. In one embodiment the computing device management component may not necessarily be able to identify each host computing device that is currently operational in the set of host computing devices e.g. within a data center . For example one or more host computing devices may be periodically removed or added to the data center without specific tracking information provided to the computing device management component . Accordingly the version filter information may be defined for host computing devices based on specific identification information for an individual host computing device or based on general characteristics of a host computing device e.g. any host computing device that is provisioned with a type of software application .

Still further the modification of the version filter information for a set of host computing devices may be based on a time distribution of updates for the set of host computing devices. In one example the computing device management component may modify version filter for a small subset of the set of host computing devices as a test group. In another example the computing device management component may implement a random or pseudo random modification of version filter information. In still a further example the computing device management component may apply additional criteria regarding aspects of the host computing devices such as geographic location shared computing resources performance priority information and the like.

With continued reference to at some point a local computing device management component on a host computing device makes a determination to transmit a version filter check to the computing device management component . In one embodiment the determination whether to transmit the version filter check may be based on time criteria such as minimum and maximum times for transmitting version filter check requests. In another embodiment the determination of whether to transmit the version filter check may be based on other criteria such as a communication network availability error conditions performance thresholds maximum and minimum and the like. Additionally the local computing device management component can also implement time based criteria for distributing the timing of the requests to the computing device management component . Based on the determination the local computing device management component transmits the version filter check to the computing device management component .

With reference now to the computing device management component obtains the filter request and processes a version filter request . Illustratively the computing device management component obtains version information that is included in the version filter check transmitted by the local computing device management component . Alternatively the computing device management component can transmit requests to the local computing device management component for specific information or additional information as necessary. Illustratively the computing device management component makes a comparison of the current version information associated with the requesting host computing device to determine whether the host computing device is associated with desired version goal state as defined in the version filter information.

Based on the comparison the computing device management component can then generate a version filter response . In one embodiment the computing device management component can generate a notification that an update is required. Additionally the computing device management component can provide update information utilized by the requesting host computing device to cause an update to software code. In another embodiment the computing device management component can transmit a notification that no update is necessary. Alternatively the computing device management component may not transmit any notification if the version filter check passes. Still further the computing device management component can generate information that will be used by the local computing device management component to transmit the next version filter check requests. The resulting information is transmitted to the requesting host computing device and processed .

Turning now to as previously described each local computing device management component on the host computing device can make a determination of whether to transmit a version filter check . In one embodiment the determination whether to transmit the version filter check may be based on time criteria such as minimum and maximum times for transmitting version filter check requests. In another embodiment the determination of whether to transmit the version filter check may be based on other criteria such as a communication network availability error conditions performance thresholds maximum and minimum and the like. Additionally the local computing device management component can also implement time based criteria for distributing the timing of the requests to the computing device management component . Based on the determination the local computing device management component transmits the version filter check to the computing device management component .

The computing device management component obtains the filter request and processes a version filter request . Illustratively the computing device management component obtains version information that is included in the version filter check transmitted by the local computing device management component . Alternatively the computing device management component can transmit requests to the local computing device management component for specific information or additional information as necessary. Illustratively the computing device management component makes a comparison of the current version information associated with the requesting host computing device to determine whether the host computing device is associated with desired version goal state as defined in the version filter information.

Based on the comparison the computing device management component can then generate a version filter response . In one embodiment the computing device management component can generate a notification that an update is required. Additionally the computing device management component can provide update information utilized by the requesting host computing device to cause an update to executable code modify configuration information. In another embodiment the computing device management component can transmit a notification that no update is necessary. Alternatively the computing device management component may not transmit any notification if the version filter check passes. Still further the computing device management component can generate information that will be used by the local computing device management component to transmit the next version filter check requests. The resulting information is transmitted to the requesting host computing device and processed .

Turning now to a routine for generating an update request such as a version filter request implemented by a local computing device management component on a target computing device such as a host computing device a computing device or a client target device will be described. Although routine will be described with regard to the local computing device management component on a host computing device one skilled in the relevant art will appreciate that one or more portions of routine may be implemented by other components of the host computing device . One skilled in the relevant art will also appreciate that the implementation of routine may be implemented on computing devices client target devices or combinations of host computing devices client target devices and computing devices .

At block the host computing device transmit a version filter check request to the computing device management component . As previously described in one embodiment the determination whether to transmit the version filter check may be based on time criteria such as minimum and maximum times for transmitting version filter check requests. In another embodiment the determination of whether to transmit the version filter check may be based on other criteria such as a communication network availability error conditions performance thresholds maximum and minimum and the like. Additionally the local computing device management component can also implement time based criteria for distributing the timing of the requests to the computing device management component .

At block the host computing device obtains a response from the computing device management component . In an illustrative embodiment the host computing device can obtain information that identifies whether the version filter check resulted in a determination of whether the host computing device satisfies the desired version goal state. Additionally the resulting information can also include information identifying any updates that should be implemented by the host computing device or the update information itself.

At decision block a test is conducted to determine whether the version filter check indicates that the host computing device satisfies the version filter check e.g. passes the version filter check . If the host computing device passes the version filter check at block the local computing device management component resets the query criteria. In one embodiment the local computing device management component can reset the query criteria by restarting a timer or clearing any criteria utilized to determine whether to transmit the request at block . Additionally the local computing device management component can process any information provided by the computing device management component with regard to controlling the query criteria utilized by the local computing device management component .

If at decision block the host computing device does not pass the version filter check information at block the local computing device management component implements updates based on information provided by the computing device management component . An illustrative subroutine for implementing updates based on type information for host computing devices will be described with regard to . However one skilled in the relevant art will appreciate that the implementation of updates on other computing devices such as host computing devices computing devices or on client target devices may incorporate additional or alternative criteria. The routine then returns to block in which the local computing device management component resets the query criteria.

Turning now to a subroutine for update implementation based on type information on a host computing device will be described. Although will be described with regard to host computing devices one skilled in the relevant art will appreciate that the implementation of subroutine may be implemented on computing devices client target devices or combinations of host computing devices client target devices and computing devices .

Illustratively the local computing device management component can implement subroutine as part of the execution of block . At block the local computing device management component obtains update type information for the update to be implementation. In one embodiment the update type information can specify that the update can be implemented on the host computing device without having to terminate any virtual machine instances or without requiring a reboot. In this embodiment the local computing device management component may still need to do some additional processing. In another embodiment the update type information can specify that any existing virtual machine instances may need to be terminated to implement the update but that the host computing device does not need to be rebooted. In still a further embodiment the update type information can specify that all existing virtual machine instances need to be terminated and that the host computing device requires a reboot.

At decision block a test is conducted to determine whether the update can be applied e.g. without termination of any existing virtual machine instances and without requiring a reboot . Illustratively the local computing device management component can utilize policy information that governs the implementation of updates on the host computing devices . For example policy information for host computing devices hosting virtual machine instances can specify whether or not currently instantiated virtual machine instances need to be terminated prior to implementing updates. In another example policy information for host computing devices can specify other requirements for the host computing devices that will be utilized to determine whether to implement the update. If the updated can be applied at block the local computing device management component implements the update and the subroutine returns at block .

With reference again to decision block if the update cannot be applied to the host computing device or other computing device at block the host computing device or computing device conducts additional processing for update implementation. An illustrative sub routine for conducting additional processing to implement an update will be described with regard to . At block the subroutine returns.

Illustratively upon return of the subroutine at block the host computing device or computing device can reset query criteria and check for additional updates. Accordingly the host computing device can continuously check and attempt to implement updates. Additionally in embodiments in which the host computing device or computing device is in the process of implementing updates that may require the suspension of resources or a reboot the host computing device can continue to identify and possibly implement additional updates.

Turning now to a subroutine for conducting additional processing in order to implement a pending update will be described. Illustratively the local computing device management component can implement subroutine as part of the execution of block . At block the local computing device management component identifies any portion of the pending update that can be implemented. In an illustrative example at least some portion of an update may implemented even if other portions of the update are dependent on criteria not yet satisfied such as completion of a previous update or execution of a process. Accordingly at block the local computing device management component attempts to implement any identified portions of the update information that are not dependent on criteria e.g. partial updates .

Once the implementation of the identified partial updates or portions of the updates has been initiated at block the local computing device management component can initiate the suspension one or more resources that are associated with the specific host computing device . In one embodiment the local computing device management component can determine whether to suspend the execution of virtual machine instances currently being executed by the host computing device . In another embodiment the host computing device or other computing device can determine whether to cause the termination or suspension of virtual machine instances on other host computing devices . For example a computing device in communication with one or more host computing devices may cause the termination of virtual machine instances on the host computing devices prior to implementing an update.

At decision block a test is conducted to determine whether the identified virtual machine instances that need to be suspended or terminated have been suspended or terminated. If not the subroutine may enter into a waiting period or attempt additional activities to cause the suspension of resources at block . Additionally the local computing device management component may also check to see whether the request to suspend resources should be terminated. For example the local computing device management component may determine that the request to suspend or terminate resources has taken too long which may be indicative of a failed attempt or likelihood of failure.

With reference again to decision block once any identified virtual machine instances have been suspended or otherwise terminated at decision block a test is conducted to determine whether the host computing device requires a reboot. If the host computing device does not require a reboot the subroutine proceeds to block in which the local computing device management component implements the update and the subroutine returns at block . Alternatively if a reboot is required at block the local computing device management component initiates a reboot and implements the update. The subroutine returns at block . As previously described in one embodiment the implementation of the partial updates and suspension of resources can occur in parallel with determination of additional or subsequent update information and the attempted implementation of the additional or subsequent update information.

Turning now to a routine for processing version filter check requests implemented by a computing device management component will be described. Although will be described with regard to host computing devices one skilled in the relevant art will appreciate that the implementation of routine may be implemented on computing devices client target devices or combinations of host computing devices client target devices and computing devices .

At block the computing device management component obtains a version filter request. In one example the version filter request is transmitted by the local computing device management component . As previously described the local computing device management component can independently transmit the version filter request in accordance with criteria evaluated by the local computing device management component or other information provided by the computing device management component . The version filter request can be an API and can include a variety of information that will be utilized by the computing device management component in processing the request. For example the version filter request can include information identifying operating system and software applications that are executing on the requesting host computing device . In another example the version filter request can include information identifying the last version or equivalent version of the operating system and software applications executing on the host computing device . In still further examples the version filter request can include information that is different from previous information provided by the local computing device management component .

At block the computing device management component obtains version filter information that specifies the desired version goal state for the identified computing device such as host computing device . The computing device management component can obtain the version filter information from the computing device version filter data store or from local memory e.g. cache memory . At decision block a test is conducted to determine whether version filter information corresponds to the version information identified in the version request directly or indirectly .

If the version filter information does not match with the version information it can be assumed that the computing device such as host computing device may have one or more updates to implement. Accordingly at block the computing device management component identifies update information. In one embodiment the computing device management component can generate a notification that an update is required and identify one or more potential sources of the update. In another embodiment the computing device management component can generate the notification and provide the update information required e.g. code to modify the operating system or software application code . If the version filter information matches the version information e.g. no update is required or once the notifications and updates are generated at block at block the computing device management component transmit a response to the requesting local computing device management component . As previously discussed however in one embodiment if no update is required the computing device management component can omit the transmission of any information to the local computing device management component . At block the routine terminates.

Turning now to a routine for creating or managing version filter information will be described. Illustratively routine can be implemented by a computing device management component . However routine can be implemented in whole or in part by other components of the virtual network environment .

At block the computing device management component obtains a request or notification corresponding to a version update. Illustratively the request can correspond to an API such as from a client computing device that specifies a most current version for a target computing device or set of target computing devices. The request can identify specific computing devices or provide criteria that allow the computing device management component to determine how the version update request will apply to each computing device in the set of computing devices.

At block the computing device management component identifies that set of computing devices such as a set of computing devices that correspond to the version update request. In one example if the version update request specifically identifies individual target computing devices the computing device management component can utilize the identification information included in the request. In another example if the version update request includes criteria for selecting the set of computing devices the computing device management component can process the criteria. Still further in some situations the computing device management component may not necessarily be aware of the current status or presence of all the target computing devices in the set of target computing devices e.g. a datacenter . In this scenario the processing of the version filter information may not be done prior to receiving a request from a previously unknown or forgotten target computing device.

At block the computing device management component determines a distribution of the version filter information for the set of computing devices. In one embodiment related to target computing devices if individual target computing devices are identified in the version update information the determination of the distribution can correspond to the selected or identified target computing devices. In another embodiment the distribution to a set of target computing devices may correspond to random or pseudo random selection of target computing devices from a set of computing devices. Accordingly the selected distribution can correspond to an evaluation of the random or pseudo random processes. In a further embodiment the distribution to a set of target computing devices can correspond to weighted distribution of target computing devices. For example the weighting of the set of target computing devices may be utilized to select a test group to implement an update. A second set of weights can then be selected to stagger the implementation to a larger group and can then be repeated several times. In other embodiments the computing device management component may also implement additional time delays or distribution techniques beyond any distribution information provided in the update request.

At block the computing device management component implements the distribution by modifying version filter in accordance with the determined distribution. At block the routine terminates.

At block computing device management component identifies one or more target computing devices that are not at the defined goal state and require updates. The identified target computing devices may require updates to operating systems and software applications that are executing on the target computing devices. The target computing devices with pending updates can be identified using the methods described herein such as those discussed with respect to .

The computing device management component can also identify target computing devices that have been associated with a host set in accordance with one or more host set parameters. Each host set can include one or more target computing devices. Each host set can have one or more host set parameters. The host set parameters can be configured to control the rate at which hosts are processed. The rate at which target computing devices are processed can be determined by a combination of the host sets and the host set parameters. In one instance the host set parameters can be used to determine the maximum number of target computing devices that can receive an update simultaneously. In one embodiment the computing device management component can use a semaphore associated with a host set to control the maximum number of host computing devices that are updated simultaneously.

The computing device management component can monitor and track which target computing devices is associated with each host set. For example there could be fifty target computing devices partitioned into host sets consisting of ten target computing devices in each set. The computing device management component can monitor and track each host set and each target computing device within the set. The computing device management component can identify one or more target computing devices within each host set in accordance with the host set parameters that is not at the defined goal state. In an illustrative embodiment the computing device management component can obtain information that identifies whether the target computing device satisfies the desired version goal state. Additionally the resulting information can also include information identifying any updates that should be implemented by the target computing device or the update information itself.

At block the computing device management component sends a pre condition integration point message to the client management device . In embodiments where the client management device registers a pre condition integration point the computing device management component sends a pre condition message that identifies the target computing device scheduled to receive the update. The message can also include additional details about the update that the target computing device is scheduled to receive. The pre condition integration point allows the client management device to determine whether to initiate the update process for the identified target computing device. The pre condition message is sent prior to performing any mutable actions related to the processing of an update for the target computing device. If the identified target computing device progresses past the pre condition state the computing device management component can initiate mutable processes on behalf of the target computing device such as acquiring a semaphore for the target computing device. The computing device management component can send the message to the client management device through an asynchronous messaging service. The computing device management component expects the client management device to respond to the pre condition integration point message.

At decision block the computing device management component determines whether to proceed with the update workflow based on the response of the client management device . The client management device can instruct the computing device management component to proceed with the update workflow. If computing device management component determines that an update can be applied to the target computing device the workflow progresses to block to implement the update as further described in association with .

The client management device can instruct the computing device management component not to proceed with the update workflow. In one instance the client management device can instruct the computing device management component to repeat the current workflow step which is the pre condition phase. In some embodiments the computing device management component can wait for a period of time before re sending the pre condition integration point message to the client computing device . At the pre condition state no mutable operations have been performed and other target computing devices can undergo updates while the other target computing device is waiting. Each target computing device at the pre condition state can continue to progress independently of other target computing devices.

In some embodiments when the computing device management component does not receive a response from the client management device the computing device management component can proceed with the update workflow. In other embodiments the computing device management component can repeat the pre condition state when it does not receive a response.

After the update is implemented the routine can be repeated until the target computing devices arrive at the defined goal state.

At block the computer device management component implements the pre condition check. In the pre condition check state the computing device management component performs potentially mutable operations on behalf of the target computing device prior to update deployment. Goal state monitoring can still occur during in this state. If the deployment of the update is suspended or in general the goal state becomes satisfied the target processing device can transition directly to pre condition cleanup state at block .

At the pre condition check state the computing device management component can control the rate at which target processing devices are updated. For example a client may not want more than a certain number of devices updated at the same time. Illustratively the number of simultaneous updates can be limited to properly balance the load on the remaining target processing devices in a host set. In one embodiment the computing device management component can prepare the target processing devices for deployment of the update by acquiring a semaphore. A semaphore can be associated with a host set and can be used to limit the maximum number of target processing devices simultaneously prepared for updates. In other embodiments other processes and methods can be used to control the relative rate at which targets are updated. In another embodiment the computing device management component can be configured to process updates at a certain interval. Alternatively the client management device could dynamically control the rate at which updates are applied by allowing target computing devices to proceed with the update workflow in block based on an algorithm threshold time or other parameters. Target sets can also be used to help process and organize the processing of the target processing devices. At the pre condition check the computing device management component performs operations to prepare the target processing device for the update. After the computing device management component prepares the target for the update the process proceeds to block .

At block the computing device management component sends a pre update integration point message to the client computing device . The pre update message informs the client computing device that the target computing device has acquired all pre conditions and is prepared for the update to be deployed. The message can also include additional details about the update for the target computing device. The pre update integration point allows the client management device to determine whether to perform client side actions prior to the implementation of the update. The client management device can perform actions in preparation for the update that are related to the operation of the target processing device. Illustratively there may be client side processes that are associated with and depend upon the operation of the target processing device. When the target processing device is being updated the client side processes may need to be diverted to another processing device such as a client target device . For example client management device may communicate with other related computing systems adjust operating parameters or perform other processes in anticipation of an update being performed on the target computing device.

The computing device management component expects the client management device to send a pre update response message. The computing device management component will determine how to proceed at block based on the response from the client computing device . In some embodiments a pre update integration point message is not registered with the client computing device and the target computing device can proceed to implement the update at block .

At decision block the computing device management component determines whether to apply the update based on the response of the client management device . The client management device can provide instructions to the computing device management component to apply the update. If computing device management component determines to apply the update the workflow progresses to block to implement the update.

The client management device can instruct the computing device management component not to proceed with the update. In one instance the client management device can instruct the computing device management component to repeat the current workflow step which is the pre condition check. In some embodiments the computing device management component can wait for a period of time before re sending the pre update integration point message to the client management device . In some embodiments if the client management device does not respond the target computing device will transition to the pre condition cleanup state if the update is not applied.

In some embodiments when the computing device management component does not receive a response from the client management device the computing device management component will proceed with the implementation of the update at block . In other embodiments the computing device management component can return to the pre condition check at block if a response is not received.

At block the target computing device can implement the update. The update can be can be implemented by the local computing device management component as illustrated and described in association with . After the update has been implemented the process proceeds to .

At block the computing device management component sends a post update message to the client management device . The post update message informs the client management device that the update has been implemented. The post update integration point allows the client management device to perform post update processes after the update has been implemented. The workflow proceeds to block to perform post update processing.

At block any post processing operations are performed. The post update processing can include testing and monitoring of the target computing device. For example testing protocols and checks may be performed on the target computing device to verify proper operation prior to returning the host computing device to its previous operational state. After the post update processing is performed the process proceeds to perform pre condition cleanup at block .

At block the computing device management component performs pre condition cleanup. The pre condition cleanup returns the target computing device to its previous operational state. The pre condition cleanup process removes conditions done on behalf of the target computing device for the update routine. For example the computing device management component could release semaphores. After the pre condition cleanup is complete the process proceeds to .

At block the computing device management component returns to block on . At which point update routine can be repeated until the goal state is achieved.

It will be appreciated by those skilled in the art and others that all of the functions described in this disclosure may be embodied in software executed by one or more processors of the disclosed components and mobile communication devices. The software may be persistently stored in any type of non volatile storage.

Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without user input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment.

Any process descriptions elements or blocks in the flow diagrams described herein and or depicted in the attached figures should be understood as potentially representing modules segments or portions of code which include one or more executable instructions for implementing specific logical functions or steps in the process. Alternate implementations are included within the scope of the embodiments described herein in which elements or functions may be deleted executed out of order from that shown or discussed including substantially concurrently or in reverse order depending on the functionality involved as would be understood by those skilled in the art. It will further be appreciated that the data and or components described above may be stored on a computer readable medium and loaded into memory of the computing device using a drive mechanism associated with a computer readable storing the computer executable components such as a CD ROM DVD ROM or network interface further the component and or data can be included in a single device or distributed in any manner. Accordingly general purpose computing devices may be configured to implement the processes algorithms and methodology of the present disclosure with the processing and or execution of the various data and or components described above.

It should be emphasized that many variations and modifications may be made to the above described embodiments the elements of which are to be understood as being among other acceptable examples. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

