---

title: System and method for providing access to a file in real time during a cloud storage upload process
abstract: A cloud server includes a cloud storage for storing a folder uploaded to the cloud server, a database for storing administrative data; and a cloud service application. The cloud service application establishes a communication connection with an end point device to retrieve a user identification about the user, the end point device name, and folder name and location and stores this information in the database. A remote device communicates with the cloud server to access a folder stored on at least one of the endpoint device and the cloud storage. The cloud service application determines an authorized user and provides access to the folder by providing direct access to the endpoint device from the remote device utilizing the communication connection during uploading of the folder to the cloud, or directly to the cloud storage if the folder has been uploaded.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08918368&OS=08918368&RS=08918368
owner: Gladinet, Inc.
number: 08918368
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20120925
---
This application claims priority to Provisional Patent Application No. 61 539 328 filed Sep. 26 2011 and is incorporated herein as set forth in its entirety.

This invention is directed to a system and method for uploading stored folders to the cloud and in particular providing access to a folder being uploaded during the upload process.

As a result of the adoption of cloud computing it is well known in the art to store applications files and data collectively and individually folders remotely particularly large data. However this requires a process of selecting folders containing either data or software applications for uploading. Because the folders being uploaded to the cloud servers are generally large files it often requires a secure connection for a long period of time so that entire folder may be securely and accurately uploaded in as large a file as possible preventing use of the folders by other computing devices. However as a result of the folder size the process takes a long time sometimes hours if not days. Many operations can not function without access to these folders over such a long period of time. Therefore a system and methodology which overcomes the shortcomings of the prior art is desired.

A system which provides access to a folder as it is uploaded to a cloud storage server includes a user device upon which a folder resides a cloud server and a remote device seeking access to the folder being uploaded to the cloud server. The user device and the remote device communicate with the cloud server. The user device communicates with the cloud server establishing a communication link to upload a folder from the user device to the cloud server the cloud server mapping the folder to the user device name a user account and folder description. The remote device transmits a request to the cloud server for access to a folder and the cloud server provides access to the folder at the user end point device when the folder has not been completely uploaded or to the folder as stored at the cloud server when the folder has been at least partially uploaded.

As shown in a system includes a cloud server . For the purposes of this description a cloud server is a virtual server made up of two or more computer devices acting in unison which provide at least a portion of their computing power and or data storage capacity when accessed by a remote computer to use applications data or other files stored thereon.

Cloud server includes a cloud storage for storing folders uploaded to cloud server . Cloud server also includes an administrative database for storing administrative information such as registered user identification names passwords or the like end point device computer names DNS names and assigned cloud related IDs folder names contents and locations and the like as will be described in greater detail below. A cloud service application runs on cloud server for operating cloud server and managing the operation between cloud storage and database and exterior devices. In this way cloud server operates under the software commands as performed by cloud service application .

System also includes an end point device such as a personal computer PC in one non limiting exemplary embodiment communicating with server utilizing known protocols. End point device may be any computing device capable of storing and operating on files within folders and folders themselves and communicating with a server.

In a preferred but non limiting embodiment cloud service application is an exposed set of an Application Programming Interface API relating to user account management and storage management. It may be Microsoft Windows Communication Foundation WCF service running on a Windows server or a MAC OS running on a MAC device. In this way as will be discussed in greater detail below cloud service API is capable of causing the uploading and downloading of folders between devices and cloud server as well as creating folder listings and other administrative data for tracking folders and their use.

End point device communicates with cloud service application to present a folder name space to the end user. It also maintains active communication connections with cloud service API to service any local folder related access.

As known in the art during operation a user at end point device will establish an account for use of cloud server and will select a storage amount to which the user will have access in cloud storage and number of authorized users. An administrator will be determined with the ability to create sub users manage the storage plan and create shared team folders as will be discussed below.

For each use the administrator or the authorized users log in to an account. The administrator is presented with a screen shot showing the current status of the available storage the number of authorized users and the number of published folders . The administrator can use this page to create sub users change a storage plan increase or decrease available space at cloud storage create a shared team folder or the like merely by selecting the appropriate icon utilizing a graphic user interface GUI and or web browser as known in the art.

During operation the user of system has already provided to cloud server the DNS name and or assigned ID of its end point device its account identification or registered user identification for use by the cloud service API . This information is stored in administrative database .

In order to attach a local end point device based folder for uploading to cloud server in a step a the user may utilize a GUI dialog box as shown in to select a local folder stored on end point device at an input by inputting a folder name at an input and local folder location at an input to be attached with the folder and to enable cloud service API to process the identified local folder.

In a step b the cloud service API uses this information to map the identification for the user at end point device the PC DNS name and or assigned ID and the folder location within end point device and stores the mapped information in cloud administrative database . At the same time cloud server API causes the identified local folder stored on end point device to be uploaded preferably with version information to cloud storage in accordance with step c . Because the request to upload originates with endpoint device both devices are trusted and a second communication connection is used to upload folders.

A folder may contain thousands of files. As each file within a folder is uploaded to cloud storage it causes a status update such as a time stamp or version number to be stored in a change log created and stored in cloud storage .

When a user utilizes end point device to communicate with cloud server they may access a web page utilizing a web browser showing a schedule of those folders uploaded to cloud server to access the desired local folder. The local folder appears with the given names such as desktop documents or pictures and may be followed by the endpoint device names such as Jerry HP2 . Because this folder location identifier may not be sufficiently unique it is stored in administrative database mapped to the endpoint device ID and DNS name so that the user as well as system tracks which end point device provides the attached local folder. In a windows mapped network drive view screen shot a GUI interface provides information regarding each folder as stored in cloud server including the folder type description and a determination of which source device computer is associated with which folder. Cloud service API maps the folder type to the folder name and location creates a folder name space for a directory and makes it accessible at page . In this way a file may be later selected for use by utilizing GUI interface as known in the art.

As shown in a a screen shot is provided as would be accessible through a web browser to the administrator. Screen shot shows current sub account users . In this way an administrator is also always aware of the number of sub account users having access to individual files. After initial creation of the account an administrator may create new users utilizing the create new user icon interface . As seen in a new user is created by providing minimal information in a window by providing information such as a user s first and last name an email address and determining an amount of storage to be made available to a user. Dialog box operates as known in the art and once input cloud server API stores this information in administrative database .

In some instances an administrator may desire to create a shared team folder. Such activity is enabled by cloud server the ability to provide access to multiple users to a single folder. This folder may either be stored at cloud storage or be an attached local folder being uploaded to cloud storage but currently stored in its entirety at end point device . The administrator is provided with a screen shot which through GUI interface identifies the name of the folder the location of the folder such as a specific end point PC or in the cloud storage and provides the ability for the administrator to set permissions or to enable the folder to published or unpublished utilizing a GUI interface as known in the art. Once set the permission is listed in a link to a drop down window as known in the art.

If it is desired to publish a folder then folders may be published in a variety of ways. In a window a known folder may be selected for publication by identifying the name of the folder in a field and the location of the folder in a field . The folder may be published to all users or a single identified user by selecting an icon and completing the published command by selecting the published icon . Alternatively a drop down menu which may be triggered by a browse command in window identifies the folders to be selected for publication to populate a published folder window by identifying the documents by name and location . In this non limiting example the public documents are to be published to all users. Alternatively if documents are to be published then in published folder window specific users may be authorized to read or write from or into the selected folder .

As discussed above cloud service API works with database to create a mapped database or directory of folder names folder elements files folder origin end point device and the user identification for authorized users associated with each folder. Cloud service API is building this directory as folders are uploaded to cloud storage from end user device in real time. Therefore although a folder may include a thousand files by way of non limiting example if early in the process and only two files of a folder have been uploaded to cloud storage then only information about those two files is what is created and stored in cloud storage . The directory includes folder information such as file names file version date stamp and file size as each file is uploaded

Reference is now made to wherein the system enables access to the folder from a remote device. Like numerals are utilized to indicate like structure. The primary difference is utilizing a remote device capable of communicating with cloud service API .

Remote device is any computing device such as a PC mobile device smartphone laptop tablet or the like capable of communicating with cloud server to operate on folders. The user of remote device may be any authorized user but is usually the same user as the user of end point device desiring access to folders from another location.

During operation end point device communicates with cloud service API by maintaining an active two way communication connection such as a HTTP connection in a web environment by way of non limiting example in a step a . This is required to maintain communication so that cloud service API may manage the uploading process. Upload to cloud storage still occurs along a separate communication connection in step g.

In a step b the user utilizes remote device to communicate with cloud server by utilizing the exposed cloud service API to access a target folder.

The user at remote device provides the folder name and as a result of a login a user identification as a folder request. Cloud server API uses the user s prestored name or other user identification stored in database to determine access rights to the folders and corresponding files associated with the authorized user. In this way cloud server API confirms that the user and remote device are trusted and access may be provided to endpoint . In response to the authorized request from the user at remote device cloud service API responds to an authorized user by creating a folder name space showing all folders and directory of files therein for those folders accessible to the user as determined from the information stored in administrative database .

Cloud service API determines whether or not there is in fact an ongoing communication connection with end point device which signifies that uploading of a folder may not be complete. If a determination is made that uploading is still going on cloud service API utilizes location information for particular folders and files as stored at cloud storage to first populate a folder name space with the files stored at cloud storage and also retrieve a directory from endpoint device of the target folders and associated files. Cloud service API merges the cloud storage directory with the endpoint device directory to create a folder name space showing all files within a folder and their most recent location. This is presented to the user at remote device in a manner such as that shown in screen shot . A user would select the target folder utilizing GUI to obtain a dropdown list of files within that folder. By selecting the folder cloud service API determines whether the folder has been uploaded to cloud storage or not. It is noted that the folder name space may be a mapped virtual drive a web client or any other method for providing a list of folders and their contents to a user at remote device .

If it is determined that upload has been completed then cloud service API provides access to the folder as stored in cloud storage in a step d. However if the cloud server API determines that the desired folder has not been completely uploaded then cloud service API causes cloud server to provide direct access to endpoint device in a step e utilizing the secure communication connection established in step a. In this way cloud server provides a bridge between remote device and end point device prior to completion of uploading.

This is enabled by the fact there is a preexisting active communication connection such as an HTTP handshake communication between end point device and cloud server by way of non limiting example in order to allow access to the exposed cloud service API as well as data storage . There is a trusted protocol providing access through the firewalls between stored server and end point device . Cloud server API utilizes this preexisting communication link to allow remote device to access the local folder at end point device .

In summary when an end user initiates a folder access request from remote device to cloud service API to access a specified local folder attached from endpoint device the cloud service API will locate the connection from the endpoint device utilizing the end device point DNS name and or device ID folder location and user information as stored in database . If the local only mode is set then the cloud service API will access the request directly by requesting files and folders from the endpoint device utilizing the located ongoing communication connection. If the folder uploading is not currently being performed then it is assumed that the upload is complete and the cloud service API will service the access request directly by requesting files and folders from a location in cloud storage as stored in administrative database . However if there is an ongoing upload if the endpoint device has already finished uploading the content of the target folder then cloud service API will service the access call from remote access device directly by requesting the files and folders from cloud storage . If cloud service API has determined that uploading is not complete then cloud service API will respond to the request by combining results from both cloud storage and the folder as stored on endpoint device .

In operation the user of remote device will be provided with screen or screen utilizing a browser showing local folders which are accessible from remote access device . By selecting the local folders attached to the cloud or by enabling a folder location box and entering the location of the folder and the name of the folder cloud service API may make the above determinations for allowing access to the folder. Once selected the user is provided with version control information related to each of the files such as the version number the operation and the time of the operation a screen .

The change log which forms part of the directory stored in storage cloud creates version information such as a date stamp for each file as it is uploaded to cloud storage . In this way cloud service API determines the version of any folder or file contained therein which is stored in the cloud. However in the real world files are consistently amended either within cloud storage or at the endpoint device . Accordingly when an authorized request from remote device as described above is received by cloud server cloud service API may open an active communication with endpoint device . Cloud service API then compares the date stamp associated with the target folder or file as determined from the stored directory information in cloud storage and compares that date stamp to a version identifier as known in the art associated with the corresponding file at endpoint device . Cloud service API determines which file is the latest version and transmit that latest version to remote device either by uploading the folder and or file directly from cloud storage or utilizing the active current communication connection to upload the file from endpoint device . In this manner user remote device is always provided with the most recent version of a file.

It should be noted that cloud server for simplicity of description acts as both the account administrator and the cloud server. However it should be understood it is well within the art to store account information separate from cloud server while making it accessible to cloud server API PC end user device and remote access device .

It should be understood that utilizing user identification data cloud names and device DNS or other identifiers as stored in database and processed by cloud service API system may also upload files from authorized users from remote device to be accessed by endpoint device . Furthermore a communication connection need not be permanently maintained only while uploading or downloading files or entire folders from or to cloud storage . By maintaining open communication between the device upon which the local folder is originally stored and the cloud server during the upload process as soon a user attaches a local folder to the cloud service it is immediately accessible from anywhere utilizing other devices capable of communicating with an API. Regardless of the time it takes for the end point device to upload files and version information to a cloud storage area of a cloud server all of the content of the local folder is immediately accessible to a user. In this way there is no waiting while an application is made cloud ready and the information is accessible by other users from other devices during the upload process.

Thus while there have been shown described and pointed out novel features of the present invention as applied to the preferred embodiments thereof it will be understood that the various submissions and substitutions and changes in the form and detail are contemplated to the disclosed invention which may be made by those skilled in the art without departing from the spirit and scope of the invention. It is the intention therefore to be limited only as indicated by the scope of the claims appended hereto. It is also to be understood that the following claims are intended to cover all of the generic and specific features described and all statements of the scope of the invention which as a matter of language might be said to fall therebetween.

