---

title: Userspace permissions service
abstract: In one example, a method includes intercepting, by a first security module, a request from a software application executing on the computing device to access a resource of the computing device. The first security module may include a first group of permissions received from a second security module included in an operating system. The second security module may control access by software applications executing on the computing devices to resources of the computing device based upon permissions granted to the software applications. The method may also include identifying a second group of permissions granted to the software application. The second group of permissions may be a subset of the first group of permissions. The method may also include determining, based upon the first group of permissions, whether the software application is allowed to access the resource. The method may also include controlling access to the resource, based on the determining.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08656465&OS=08656465&RS=08656465
owner: Google Inc.
number: 08656465
owner_city: Mountain View
owner_country: US
publication_date: 20120509
---
This application claims the benefit of U.S. Provisional Application No. 61 483 824 filed May 9 2011 the entire content of which is incorporated herein in its entirety.

Computing devices may install and execute one or more applications some of which may be downloaded from the Internet. In some instances applications may be malicious and therefore attempt to disrupt operation of a computing device and or obtain access to private information on the computing device. In other instances an application may request access to resources that are not required for operation of the application.

In one example a method includes sending by a first security module executing on the computing device a request for a first group of permissions to a second security module that is included in an operating system executing on the computing device. The second security module may control access by software applications executing on the computing devices to resources of the computing device based upon permissions granted to the software applications. The method may also include receiving from the second security module and by the first security module the first group of permissions. The method may also include intercepting by the first security module a second request from a software application executing on the computing device to access a resource of the computing device. The method may also include identifying by the first security module a second group of permissions granted to the software application wherein the second group of permissions is a subset of the first group of permissions. The method may also include determining by the first security module and based upon the first group of permissions that the software application is allowed to access the resource. The method may also include in response to the determining accessing by the first security module and using the second group of permissions the resource. The method may also include providing by the first security module access to the resource to the requesting software application.

In one example a computer readable storage medium encoded with executable instructions that cause a computing device having one or more processors to perform operations including intercepting by a first security module executing on the computing device a request from a software application executing on the computing device to access a resource of the computing device. The first security module may include a first group of permissions received from a second security module that is included in an operating system executing on the computing device. The second security module may control access by software applications executing on the computing devices to resources of the computing device based upon permissions granted to the software applications. The computer readable storage medium may be encoded with executable instructions that cause a computing device having one or more processors to perform operations including identifying by the first security module a second group of permissions granted to the software application wherein the second group of permissions is a subset of the first group of permissions. The computer readable storage medium may be encoded with executable instructions that cause a computing device having one or more processors to perform operations including determining by the first security module and based upon the first group of permissions whether the software application is allowed to access the resource. The computer readable storage medium may be encoded with executable instructions that cause a computing device having one or more processors to perform operations including based on the determining controlling access by the first security module to the resource.

In one example a computing device includes one or more processors. The computing device may further include one or more processors a first module and a second module. The first module may be configured to intercept a request from a software application executing on the computing device to access a resource of the computing device. The first security module may include a first group of permissions received from a second security module that is included in an operating system executing on the computing device. The second security module may control access by software applications executing on the computing devices to resources of the computing device based upon permissions granted to the software applications. The first module may identify a second group of permissions granted to the software application. The second group of permissions may be a subset of the first group of permissions. The first module may determine based upon the first group of permissions whether the software application is allowed to access the resource. The first module may based on the determining control access to the resource.

The details of one or more examples are set forth in the accompanying drawings and the description below. Other features objects and advantages will be apparent from the description and drawings and from the claims.

In general this disclosure is directed to techniques for managing application permissions using a userspace service that provides user specified preferences and blacklist services to evaluate the risk of granting permissions specific resources. Mobile applications have become increasingly popular. In some mobile platforms applications may request all their permissions upfront including broad permissions such as read GPS location at any time or communicate with any server on the internet at any time. Reviewing applications for malicious behavior or bugs that can be exploited to create malicious behavior may be difficult even if manual review is performed. Users may often click yes even when asked for dangerous permissions because they want to use new applications.

Asking users for permissions upfront may be confusing. For example the user may wish to know why an application requires access to a phone state identity. In some examples the user may be deterred from using the application by the initial request for permissions. Asking users for too much may also lead to potential for abuse. Users may also be dialog blind and will ignore that dangerous permissions are being requested in order to try out a popular new application.

Even without malicious intent on the part of the developer mistakes may occur. Security flaws in legitimate applications may cause confused deputy attacks such as an application with full internet access being tricked into uploading data to an adversary s servers instead of its own. Users may want privacy and can t easily go incognito without uninstalling programs. In other examples a user might want to turn off location aware features sharing for 10 minutes in order to run a private errand but while leaving the global positioning system GPS functionality accessible to the Navigation application.

Aspects of the present disclosure enable a security client executing in userspace to enforce security on a computing device. Techniques of the present disclosure provided by the security client may include not asking for permissions upfront at application install time. Other examples techniques may include only asking for a minimum set of permissions needed to perform a user s request so the context is clear. Additional techniques may include providing a reason for a request from a software application so the user can make an informed decision. Providing an easy mechanism to revoke individual permissions without uninstalling the entire application may be another technique. Another technique may include providing visual feedback to the user as to the danger level of a given permission or request.

Aspects of the present disclosure further provide techniques in a userspace application that enable a user and or computing module to specify granular permissions. Each of the granular permissions may specify whether an application is allowed to access a particular resource. Granular permissions may be an effective mechanism for enforcing security policies on third party applications. Traditionally granular permissions have been enforced by the operating system and any changes to the permissions model were required come from the operating system rather than from services provided by userspace applications. Thus updates to the conventional permissions model required updates to the operating system. In various instances certain devices may be updated with the new version of the operating system while other devices continue to execute the older version of the operating system preventing the other devices from receiving the benefits of the updated operating system.

Techniques of the present disclosure provide security services via a userspace application thereby allowing the userspace application and corresponding security services to be updated independently of the operating system. In this way security updates may be applied rapidly to a computing device via the userspace application without for example modifying or updating the operating system. Consequently techniques of the present disclosure improve the security of the computing device for example when the operating system is infrequently updated.

In one example techniques of the present disclosure include a userspace security service that receives permissions from the operating system. The userspace security service may in turn delegate one or more of the permissions to a client application requesting permission to access a resource after consulting user specified preferences blacklists whitelists and or trusted third party services to evaluate the risk of allowing the client application permission to access the specific resource. For example a client application may send messages to the userspace security service to request one or more permissions. The userspace security service may check existing user preferences to determine whether the user has previously authorized the application for the particular resource. If a previous authorization exists the connection may be created by the userspace service using the permissions originally granted by the base OS permissions framework and is passed to the client application.

If no previous authorization exists the user may be prompted to choose whether to allow the request once or whether to deny the URL request. In some examples additional checks may be implemented such as checking an API to warn the user if an application is attempting to contact a known domain associated with malware. The user or parties the user trusts could maintain lists of known behavior by whitelisted applications to import as sensible defaults in order to limit the amount of user interaction required for initial runs of an application. Other such permissions include access to specific files on the device access to the user s contact list etc.

In some examples an opt in feature may be included by the userspace security service that provides verification a requested resource such as a URL is not included on phishing malware blacklists via a remote service that provides an Application Programming Interface API . Techniques of the present disclosure further provide coarse permission control via the userspace security service e.g. access to specific files on the device access to the user s contact list etc. .

In some examples a userspace security service implementing techniques of the present disclosure uses preloadable whitelists such as an Access Control List ACL which may be generated by trusted third parties. The whitelists may identify commonly used and trusted applications. The userspace security service may use the whitelists to decide whether to trust third party applications to create configurations and or access resources thereby simplifying management overhead.

In some examples techniques are provided to detect if a program is sending users personal information out using the API. Although the aforementioned examples describe permissions relating to resources such as URLs contacts files and GPS coordinates techniques of the present disclosure may generally relate to permissions for any resource of a computing device including hardware and software resources of the computing device. Moreover any such resources for which permissions are requested may be local resources of a computing device or network resources connected to a computing device.

Computing device and servers are coupled to network via wired and or wireless links. Computing device may send data to or receive data from servers via network . Network may include a wide area network such as the Internet a local area network LAN an enterprise network a wireless network a cellular network a telephony network a Metropolitan area network e.g. Wi Fi WAN or WiMAX one or more other types of networks or a combination of two or more different types of networks e.g. a combination of a cellular network and the Internet . Servers may be any of several different types of network devices. For instance servers may be conventional web servers specialized media servers personal computers operating in a peer to peer fashion or other types of network devices. In some examples one or more of servers may host an online application store such as the Android Market that may offer applications for download or purchase to user .

Computing device may include a display and a communications module COMM MODULE . Display may be a liquid crystal display LCD e ink or other display. Display presents the content of computing device to user . For example display may present a graphical user interface GUI of an applications executed on computing device such as a web browser or a video game content retrieved from servers and other functions that may need to be presented to user . As another example display may be a touch screen or a presence sensitive device that allows user to interact with computing device .

In some examples any application executed on computing device may require data from one or more of servers . Communications module COMM MODULE transmits a request for the data and receives the data from one or more of servers . Communications module may provide the received data to device for further processing. Communications module is configured to transmit data requests to and receive data responses from one or more servers via network . Communications module may support wireless or wired communication and includes appropriate hardware and software to provide wireless or wired communication. For example communications module may include an antenna modulators demodulators amplifiers and other circuitry to effectuate communication between computing device and one or more of servers .

As shown in computing device may include a security client that provides a userspace security service as further described herein. Security client may be referred to as a security module. Security client may further include a manager module and permission module . Manager module in some examples manages Access Control Lists ACLs and allows user to revoke modify permissions of applications that attempt to access resources. In addition manager module may cause display to display a permissions request to user and further store decisions provided by user . Permission module in some examples initially obtains and stores coarse permissions from the operating system. In some examples the operating system may include a security module that controls access by software applications to resources of the computing device based upon permissions granted to the software applications. Other modules of the operating system may include a process scheduler module memory management module etc. In some examples the operating system as described in this disclosure may refer to the security module of the operating system that controls access by software applications to various resources e.g. network connections file access etc. .

Permissions module may hold a set of operating system level permissions and further use those permissions to make requests for resources on behalf of requesting applications. For instance permissions module may initially request from the security module of the operating system a set of permissions that include some or all of the permissions provided by the operating system of computing device . Permissions module may receive the permissions which may subsequently be delegated by security client to other applications in response to requests to access various resources.

In one example user may interact with computing device using one or more input devices e.g. as shown in and display to perform various functions. For example user using one or more input devices may cause device to execute an application displayed using display . In one example application may request user permissions to access various resources of device and or network resources accessible to device via network .

In accordance with techniques of this disclosure application may attempt to access network resource provided by server B. Application may initially generate a request that may attempt to send to server B. When application attempts to send the request to server B security client may intercept the request. Security client may in some examples be a standalone application that executes on device as a userspace application.

As previously described client programs such as application communicate with security client via an API provided by security client . To application the API provided by security client may be a native API that takes parameters and returns either results or a token enabling calls to be made on a raw result object. One example of a native API may be a native Android Interface Definition Language AIDL API. As further described herein application sends requests to security client and receives a set of permissions that indicate whether access to the requested resource is allowed or denied. Because the application may use the native API of security client security client may further provide fine grained permissions. Client programs such as application also may receive retry errors while a user is evaluating a request for permission. Retry errors may signal to a client program that it should retry its request periodically to determine if the user has given an approval or denial of their request.

In some examples security client may include an API. The API may be similar to or is the same as the operating system and therefore may include one or more system calls provided by the operating system. When application makes a request to access a resource using a system call provided by an API of the operating system security client may receive the request via the API provided by security client . As is described herein security client upon intercepting the request may invoke the system call of the operating system on behalf of application if application has permission to access the resource. In such examples some or all of the functionality provided by security client may be included in one or more libraries that provide the APIs that are similar to or the same as the operating system. Security client another application and or a user may cause a dynamic linker of the operating system to load the one or more libraries. In some examples the dynamic linker may not require superuser or root level access to load the one or more libraries. In this way the APIs in the of security client may override the system calls of the API provided by the operating system to intercept the requests to access resources.

Security client may initially receive the request and identify the requesting application. For example application may be identifiable by a unique identifier such as an application name or application identifier. Security client may further inspect the request generated by application to identify the requested resource e.g. network resource of server B.

In some examples security client may access a datastore of previous user authorizations to that specify whether the user has previously authorized an application to access a resource. The datastore may be stored on computing device or on a remote computing device accessible to computing device . In the current example security client may query the datastore to determine if the user previously authorized access to the resource requested by application . The datastore may be a database storing a series of different potentially overlapping ACLs generated by a user software hardware component and or third party service. In one example ACLs may be keyed by exact URL including protocol but could be extended to use wildcard matching for more flexibility. In other examples ACLs may identify other resources such as applications and or files. In some examples an ACL for a given URL that expires earliest is applied first in order to allow short term ACLs to take precedence over long term ACLs satisfying the property of being able to grant permissions for minutes only or to temporarily take away permissions in order to enter a privacy mode that does not store information for a defined session.

If the user has previously authorized access to the requested resource security client may provide application with permission to access the requested resource. For example security client may generate set of permissions indicating the previous authorization. Thus security client may generate the set of permissions based on at least one permission received initially from the operating system and on the request from application for permission to access the requested resource. Security client may apply the generated set of permissions to application thereby allowing or denying access to the requested resource. For instance in the current example the set of permissions may be used to control access of application to network resource . In some examples the set of permissions may include data indicating permissions to access a requested resource such as network. In this way security client provides a userspace security service that provides or denies access to resources requested by applications.

Techniques of the present disclosure may also be applied to applications that attempt to access local resources. For instance application may attempt to access local resource . In such examples local resource may include any data stored locally on computing device . Examples of local resources may include contact information of an address book electronic mail messages short or multimedia message service messages or more generally any files stored on computing device . If application attempts to access local resource security client may receive the request. Using the aforementioned techniques described in the example of network resource security client may query a datastore of previous authorizations to determine whether application is allowed to access local resource . Security client may then allow or deny access to local resource based on the datastore.

In some examples security client may further use blacklists and or whitelists to determine whether security client is allowed to access a resource such as local resource and or network resource . A blacklist generally may identify one or more untrusted entities that are denied a privilege service or access to a resource due to the characteristics of the entity. For example a blacklist may specify a list of URLs that are malicious or potentially malicious. Consequently a user may wish to avoid accessing with computing device any of the specified URLs in the blacklist. Other blacklists may specify applications that are known to be malicious or possibly malicious to computing device . A whitelist in contrast may identify one or more trusted entities that are provided a privilege service or access to a resource due to the characteristics of the entity. For instance a whitelist may specify a list of resources e.g. URLs and or applications which are designated as trusted. Consequently a user may access entities in the whitelist without concern that the URLs and or applications are harmful to computing device . In some examples whitelists and or blacklists may be generated by a trusted third party or the user of computing device . Whitelists and or blacklists may be also be generated automatically by a hardware and or software module by aggregating information about URLs and or applications from trusted third parties. Whitelists and or blacklists may further be stored locally on computing device or remotely on e.g. server A.

In one example security client may be configured to check a blacklist. For instance initially application may request access to network resource . Security client may receive the request from application further select the blacklist. If network resource is included in the blacklist security client may not allow application to access network resource . If the blacklist does not include network resource security client may allow access to network resource . In an example of a whitelist if the resource is included in the whitelist security client may allow access to network resource without requesting the user for authorization thereby minimizing administration effort by the user. In some examples security client may enable the user to choose whether or not to automatically allow applications to access resources on a whitelist by selecting one or more user settings.

In some examples security client may access a remote service to determine whether application is allowed to access local resource and or network resource . The remote service may store previous user authorizations of a user that allowed or denied an application access to a resource. In other examples the remote service may include a trusted third party service which provides up to date information about malicious software and or resources such as URLs. In any case when security client receives a request from application to access a resource such as remote resource security client may upon inspecting the request generate a message that includes the request and the identifier of application . Permission module may send the message to validation module of server A. Validation module may provide a remove service to determine whether application is allowed to access network resource .

Server A may receive the message select the request information included in the message. Using the request information validation module may determine the identity of the requesting application e.g. application and the resource requested by the application. In some examples validation module may query a datastore of previous user authorizations. The datastore may include previous authorizations provided by the user to various resources. In some examples validation module may further include a third trusted third party service that indicates whether network resource is malicious or possibly malicious. In the current example validation module may query the datastore to determine if the user previously authorized access to the resource requested by application . If the user has previously authorized such access validation module may generate a message that includes the data indicating the previous authorization. Validation module may send the message to computing device which may receive the message. Responsive to receiving the message permission module may provide application with permission to access the requested network resource . For instance permission module may generate a permission response indicating the previous authorization. Permission module may send the permission response to application . The permission response may be used to control access of application to network resource . In some examples the permission response may include data indicating permissions to access a requested resource such as network resource .

Various aspects of the previous examples may be localized on computing device . For example all or portions of the datastore that include previous user authorizations as previously described may be stored on computing device to improve performance and or reduce power use by computing device . Moreover all or some of the functionality of validation module may be included on computing device . In some examples validation module may query blacklist services or datastores that include data indicating malicious resources or other resources that a user may wish to deny access to. In such examples validation module may determine whether a request of application includes a requested resource on a blacklist. If yes the message generated by validation module and sent to computing device may indicate the blacklisted resource. Validation module may deny the request by application based on the message. Although previous user authorizations and blacklists are described in the examples any other suitable services that provide permission information may be used by the userspace security service provided by validation module .

In some examples the datastore that includes previous user authorizations may not include a previous authorization for the resource requested by application . In such examples permission module may cause display to display a message that indicates no previous authorizations exist in the datastore for the requested resource. The message may be included in graphical user interface . User may select YES control button to provide application with permission to access network resource or NO control button to deny access. If the user selects YES control button permission module may allow application access to network resource .

In the current example permission module may further store data indicating authorization in a datastore locally or on e.g. server A. If the user selects NO control button the permission module may deny the request generated by application for network resource . Permission module may further store data indicating authorization in a datastore locally or on e.g. server A. In other examples various different control buttons may be provided by permission . For example permission module may display an always allow button that when selected by a user allows an application to subsequently access to the requested resource in later requests. In other examples permission module may display an allow for five minutes button that when selected by the user allows an application to access the requested resource for a duration of five minutes. Any duration may be used in various different examples. In some examples deny always and deny for 5 minutes buttons may similarly be used to deny access.

In some examples permission module may include functionality to modify and or revoke pre existing authorizations or denials provided by a user. For example a user may provide an initial authorization for an application to access a requested resource. At a later time the user may wish to deny access to the requested resource. In such examples permission module may include for example a settings page or control panel that displays a requested resource and authorizations or denials associated with the requested resource. The user may send a request to revoke the pre existing authorization for a requested resource using the control panel. If security client subsequently receives a request to access the resource security client will deny such access based on the revocation of access to the requested resource.

In other examples when a resource is requested by an application permission module may display a first control button that indicates a default action based on the user s previous decision. Permission module may also display a second control button that indicates an action to reverse the default action. For example if the default action is to allow access to a resource the action to reverse the default action may be to deny access to the resource. Permission module may also display in the prompt a control that when selected causes permission module to display the settings page.

In some instances techniques of the present disclosure may only request permissions at the time of an application making a call requiring permission. For instance when an application is installed the user may not be asked to specify permissions of the application. However at a later time when the application attempts to access a resource security client may at that time prompt the user to specify permissions for the resource. In some examples permissions by default may only extend to a single requested resource such as a URL but may be expanded by the user to a domain or wildcard. In some examples the requesting application may not expand the requested resource to a domain or wildcard.

In some examples techniques of the present disclosure may only present to the user permissions requests when they are needed to perform a user s request. Thus in some examples security client may only request the minimum set of permissions required to complete the request of the requesting application. For instance an application may perform operations that require access to contact information of a user s address book access to a network connection and permission to report a GPS location of the computing device. If a user causes the application to request network access and contact information of the user s address book security client may only prompt user to allow or deny access to these resources. Moreover because the application has not requested access to report a GPS location of the computing device security client may not prompt the user for permission to report a GPS location of the computing device. Thus security client may in some examples only request the minimum set of permissions needed to complete the request of the requesting application.

Techniques of the present disclosure may further require applications to submit a justification rationale or reason to demonstrate to the user the need for the requested resource. For instance if an application attempt to request access to a URL security client may further require that the request include in addition to an application identifier and the URL text that specifies a rationale for the request. Security client when prompting the user may cause display to display the reason thereby informing the user as to why the application is requesting the resource. In this way security client enables the user to make an informed decision to allow or deny access to the requested resource based on the rationale provided. For instance if the rationale provided by the application for the request to the resource is inconsistent with the stated purpose and or functionality of the requesting application the user may deny such access by the application to the resource.

In some examples individual requests for resources by applications can be flagged for the user based on their level of riskiness. For instance an application request to access contacts in a user s address book may be a risker request than allowing the application to create a network connection. In some examples user may specify levels of risk for respective operations such as network access file access etc. User s preferences may be stored by security client . In other examples security client may include settings and or receive information from trusted third parties that specify the risk level for each operation. One or more associations between risk levels and resources may be stored in a datastore. In this way access to a particular resource may be associated with a risk level.

When an application attempt to request a resource security client may determine the risk level for the attempted request and cause computing device to output a risk level indicator of the risk level. For instance security client may determine the risk level of an attempted request and select based on the resource requested by an application the risk level from the one or more associations between risk levels and resources. Security client may subsequently cause display to display a warning that indicates the resource is malicious. The risk level indicator may include moving or still images or text. The moving or still images and or text may be color coded such that for example green is low risk while red is high risk. More generally the risk level may be displayed using any color coding to indicate higher and lower risk operations. Different sets of text and images may also be used by security client to display the level of risk to user . Based on the level of risk user may determine whether or not to allow access to the resource.

In other examples risk level indicators including sound or haptic feedback may be used to communicate risk levels to a user in a manner similar to the previous example. For instance security client may upon determining a risk level of an attempted request generate sounds having different volume levels and or audio content that are associated with different risk levels. For instance a high risk level may be associated with a higher volume sound. Similar techniques may be applied using haptic feedback. For instance security client may cause a haptic feedback device included in or connected to computing device to provide haptic feedback in response to a risk level. In some examples the haptic feedback may include a vibration or force generated by the haptic feedback device. The haptic feedback device may generate haptic feedback having different levels of intensity that are associated with different risk levels.

In some examples security client may further implement techniques that determine if an application may be accessing or transmitting information selected by the user to be monitored by security client . In one example computing device may include a datastore that stores monitored data. Monitored data may include but is not limited to a user s telephone number email address and mailing address. When an application such as application attempts to send data to a remote computing device security client may perform pattern matching on the data with monitored stored in the data store. For instance if application attempts to send a phone number such as 555 555 5555 security client may compare the phone number to the monitored data stored in the data store. If for example the monitored data includes data that completely matches or partially matches the phone number security client may perform one or more operations. For instance security client may present the data from application from being sent to its intended destination. In other examples security client may present a notification to the user. Any operation performed in response to a match may be configurable by the user using security client .

In some examples techniques of the present disclosure may provide granular permissions control. For instance security client may initially receive permissions from an operating system executing on computing device . The permissions generally may include but are not limited permitting any application to access or modify a file report a GPS location or send or receive data via a network connection. Security client may maintain for each application in a datastore a set of granular permissions that indicate whether an application is allowed to perform one or more operations with respect to a requested resource. For instance security client may enable a user to specify that application is allowed to send and receive data via a network connection from a specified URL. Security client may for a different application specify that the application is not allowed to access the URL. More generally each granular permission used by security client may specify an application a resource and an operation that the application may or may not perform with respect to the resource. In this way security client provides granular permissions for each application wishing to perform an operation with respect to a particular resource.

As shown in the specific example of computing device includes one or more processors memory a network interface one or more storage devices input device output device and battery . Computing device also includes an operating system which may include modules that are executable by computing device . Computing device in one example further includes one or more applications one of which may include application . Application may further include permission module and communication module . One or more applications may be executable by computing device . Each of components and may be interconnected physically communicatively and or operatively for inter component communications.

Processors in one example are configured to implement functionality and or process instructions for execution within computing device . For example processors may be capable of processing instructions stored in memory or instructions stored on storage devices .

Memory in one example is configured to store information within computing device during operation. Memory in some examples is described as a computer readable storage medium. In some examples memory is a temporary memory meaning that a primary purpose of memory is not long term storage. Memory in some examples is described as a volatile memory meaning that memory does not maintain stored contents when the computer is turned off. Examples of volatile memories include random access memories RAM dynamic random access memories DRAM static random access memories SRAM and other forms of volatile memories known in the art. In some examples memory is used to store program instructions for execution by processors . Memory in one example is used by software or applications running on computing device e.g. one or more of applications to temporarily store information during program execution.

Storage devices in some examples also include one or more computer readable storage media. Storage devices may be configured to store larger amounts of information than memory . Storage devices may further be configured for long term storage of information. In some examples storage devices include non volatile storage elements. Examples of such non volatile storage elements include magnetic hard discs optical discs floppy discs flash memories or forms of electrically programmable memories EPROM or electrically erasable and programmable EEPROM memories.

Computing device in some examples also includes a network interface . For example communication module as shown in may include or be a part of network interface . Computing device in one example utilizes network interface to communicate with external devices via one or more networks such as one or more wireless networks. Network interface may be a network interface card such as an Ethernet card an optical transceiver a radio frequency transceiver or any other type of device that can send and receive information. Other examples of such network interfaces may include Bluetooth 3G and WiFi radios in mobile computing devices as well as USB. In some examples computing device utilizes network interface to wirelessly communicate with an external device not shown such as a server mobile phone or other networked computing device.

Computing device in one example also includes one or more input devices . Input device in some examples is configured to receive input from a user through tactile audio or video feedback. Examples of input device include a touch sensitive and or a presence sensitive screen mouse a keyboard a voice responsive system or any other type of device for detecting a command from a user. In some examples input device includes a touch sensitive screen mouse keyboard microphone or video camera.

One or more output devices may also be included in computing device . Output device in some examples is configured to provide output to a user using tactile audio or video stimuli. Output device in one example includes a touch sensitive screen sound card a video graphics adapter card or any other type of device for converting a signal into an appropriate form understandable to humans or machines. Additional examples of output device include a speaker a cathode ray tube CRT monitor a liquid crystal display LCD or any other type of device that can generate intelligible output to a user.

Computing device in some examples include one or more batteries which may be rechargeable and provide power to computing device . Battery in some examples is made from nickel cadmium lithium ion or other suitable material.

Computing device may include operating system . Operating system in some examples controls the operation of components of computing device . For example operating system in one example facilitates the interaction of application or identification application with processors memory network interface storage device input device output device battery and short range communication device . Examples of operating system may include Android Apple iOS Blackberry OS Symbian OS Linux and Microsoft Windows Phone 7 .

As shown in applications may include application and security client . In one example a user may provide a user input via input device that causes application to attempt to request access to a remote resource specified by a URL. Initially application may generate a request for the URL and attempt to send the request to access the remote resource. Security client may receive the request via an API as described in . The request may identify application and the requested resource. Upon receiving the request manager module may initially determine whether the user has provided a previous authorization decision provided by the user with respect to the requested resource. The previous authorization may be stored in an ACL or other datastore that manager module may query based on the identity of application and the requested resource. If the user previously allowed application to access the requested resource manager module may send a message to permission module that allows application access to the requested resource in the current instance without further prompting the user. As previously described permission module manages a set of OS level permissions and uses those permissions to make requests on behalf of applications such as application .

If no such previous authorization is indicated in the ACL manager module may cause output device e.g. display to prompt the user to allow or deny access to the requested resource. The user may provide a corresponding user input via input device to allow or deny access to the resource. If the user allows access to the requested resource manger module may send a message to permission module that allows application to access the requested resource. Manager module may further update an ACL to indicate the user s preference. If however the user denies access to the requested resource manager module may deny application access to the requested resource and further update an ACL to indicate the user s preference.

As described in in some examples security client may also query whitelists blacklists and or trusted third party services to determine whether an application may access a resource. In such examples manager module may initially receive a request from application to access a resource. Upon receiving the request manager module may query sources such as whitelists blacklists and or trusted third party services that indicate whether application may access the resource. Based on the sources queries manager module send a message to permission module that allows or denies application access to the requested resource.

Any applications including applications or identification application implemented within or executed by computing device may be implemented or contained within executing by executed by and or be operatively communicatively coupled to components of computing device such as processors memory network interface and or storage devices .

In some examples security client may execute as one or more processes having a first group of execution privileges. Operating system may execute as one or more processes having a second group of execution privileges that are higher than the first group of privileges. Different execution privilege levels may be defined by operating system to provide varied levels of controls for different operations performed by security client operating system application etc. Consequently in some examples security client may request and receive permissions from operating system although security client executes as one or more processes that do not require execution at the elevated execution privileges of operating system . Therefore in some examples security client may intercept a request from application executing on computing device for permission to access a resource without the elevated second group of execution privileges of the operating system. Thus security client may perform techniques of the disclosure without the elevated second group of execution privileges of operating system e.g. without rooting computing device to obtain the elevated second group of execution privileges and or access to the operating system substructure .

Security client may retrieve additional permissions information from a server e.g. server A of to determine if the requested resource is a malicious resource or if the user previously attempted to access the resource and retrieve . When security client has received the relevant permission information security client may update the local cache of computing device to reflect the most recent permissions information . Security client generates a permissions response message based on the permissions information and sends the permissions response message to the requesting application in order to control e.g. grant or deny access to the resource by the application .

The method of includes sending by a first security module executing on the computing device a request for a first group of permissions to a second security module that is included in an operating system executing on the computing device wherein the second security module controls access by software applications executing on the computing devices to resources of the computing device based upon permissions granted to the software applications . The method may further include receiving from the second security module and by the first security module the first group of permissions . The method may further include intercepting by the first security module a second request from a software application executing on the computing device to access a resource of the computing device . The method may also include identifying by the first security module a second group of permissions granted to the software application wherein the second group of permissions is a subset of the first group of permissions .

The method also includes applying by the security module the second group of permissions to control access to the resource . The method may also include determining by the first security module and based upon the first group of permissions that the software application is allowed to access the resource. The method may also include in response to the determining accessing by the first security module and using the second group of permissions the resource. The method may also include providing access to the resource by the first security module to the requesting software application.

In one example the method may include determining by the first security module whether a response from a previous request of the software application for permission to access the resource is included in a datastore that stores previous authorizations to access resources and if the response from the previous request is included in the datastore retrieving by the security module the response from the datastore. In one example the may include determining by the first security module whether a response from a previous request of the software application for permission to access the resource is included in a datastore that stores previous authorizations to access resources and if the response from the previous request is included in the datastore retrieving by the security module the response from the datastore.

In one example the method may include storing by the first security module the second response in the datastore. In one example the method may include receiving by the first security module a second response that indicates whether the resource is a malicious resource from data source that indicates whether the resource is malicious and generating by the first security module the second group of permissions based on the second response. In one example the data source comprises a whitelist a blacklist or a remote security service.

In one example the method may include generating by the first security module a warning that indicates the resource is malicious and displaying by the computing device the warning. In one example the method may include determining by the first security module a risk level associated with the resource generating by the first security module one or more risk level indicators associated with the risk level and outputting with the warning by the computing device the risk level indicators associated with the risk level. In one example the one or more risk level indicators comprise at least one of colors moving or still images text haptic feedback or a sound.

In one example the method may include querying by the computing device one or more associations between risk levels and resources wherein the associations are stored in a datastore and selecting based on the resource by the computing device the risk level from the one or more associations between risk levels and resources. In one example the method may include receiving by the first security module a third request from the software application for permission to access the resource and receiving by the first security module an input value that indicates the software application is not permitted to access the resource wherein the second group of permissions generated by the security module deny the software application access to the resource.

In one example the method may include determining by the first security module whether the software application is authorized to access the resource and if the software application is authorized to access the resource authorizing by the first security module the software application to access the resource using the second group of permissions. In one example the method may include receiving by the first security module a message that indicates a reason that the software application is requesting permission to access the resource and displaying by the computing device the message.

In one example the second group of permissions comprises data that indicate whether the software application is allowed to perform one or more operations of a set of operations to access the resource. In one example the method includes comparing by the first security module monitored data stored in a datastore with outbound data that the software application is attempting to send to the resource to determine whether at least part of the monitored data matches the outbound data and wherein the monitored data is selected by a user for monitoring by the security module if at least part of the monitored data matches the outbound data determining by the first security module if the software application is allowed to send the outbound data to the resource and if the software application is not allowed to send the outbound data to the resource denying by the first security module the software application access to send the outbound data. In one example a resource further comprises a Uniform Resource Locator application service or file. In one example the datastore may be stored on the computing device. In one example the datastore may be stored on a remote computing device that is accessible by the computing device.

The techniques described herein may be implemented in hardware software firmware or any combination thereof. Various features described as modules units or components may be implemented together in an integrated logic device or separately as discrete but interoperable logic devices or other hardware devices. In some cases various features of electronic circuitry may be implemented as one or more integrated circuit devices such as an integrated circuit chip or chipset.

If implemented in hardware this disclosure may be directed to an apparatus such a processor or an integrated circuit device such as an integrated circuit chip or chipset. Alternatively or additionally if implemented in software or firmware the techniques may be realized at least in part by a computer readable data storage medium comprising instructions that when executed cause a processor to perform one or more of the methods described above. For example the computer readable data storage medium may store such instructions for execution by a processor.

A computer readable medium may form part of a computer program product which may include packaging materials. A computer readable medium may comprise a computer data storage medium such as random access memory RAM read only memory ROM non volatile random access memory NVRAM electrically erasable programmable read only memory EEPROM flash memory other solid state memories magnetic or optical data storage media and the like. The techniques additionally or alternatively may be realized at least in part by a computer readable communication medium that carries or communicates code in the form of instructions or data structures and that can be accessed read and or executed by a computer. In some examples an article of manufacture may comprise one or more computer readable storage media.

In some examples a computer readable storage medium may comprise non transitory medium. The term non transitory may indicate that the storage medium is not embodied in a carrier wave or a propagated signal. In certain examples a non transitory storage medium may store data that can over time change e.g. in a RAM or cache .

The code or instructions may be software and or firmware executed by processing circuitry including one or more processors such as one or more digital signal processors DSPs general purpose microprocessors ASICs FPGAs or other equivalent integrated or discrete logic circuitry. Accordingly the term processor as used herein may refer to any of the foregoing structure or any other structure suitable for implementation of the techniques described herein. In addition in some aspects functionality described in this disclosure may be provided within software modules or hardware modules.

Various embodiments of the disclosure have been described. The following examples provide additional embodiments.

