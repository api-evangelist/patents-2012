---

title: Apparatuses, methods and systems for transforming user infrastructure requests inputs to infrastructure design product and infrastructure allocation outputs
abstract: Systems and methods are disclosed for transforming user infrastructure requests and user purchase requests inputs into infrastructure design product and infrastructure allocation outputs. For example, a user infrastructure request is received and is correlated with pre-defined templates. A structured data file is parsed and sent to an infrastructure provider.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09117225&OS=09117225&RS=09117225
owner: VISA INTERNATIONAL SERVICE ASSOCIATION
number: 09117225
owner_city: San Francisco
owner_country: US
publication_date: 20120917
---
Applicant hereby claims priority under 35 U.S.C. 119 to provisional U.S. patent application Ser. No. 61 535 882 filed Sep. 16 2011 entitled INFORMATION TECHNOLOGY INFRASTRUCTURE DESIGN APPARATUSES METHODS AND SYSTEMS and provisional U.S. patent application Ser. No. 61 660 153 filed Jun. 15 2012 entitled INFORMATION TECHNOLOGY INFRASTRUCTURE DESIGN APPARATUSES METHODS AND SYSTEMS. The entire contents of the aforementioned applications are herein expressly incorporated by reference.

This patent application disclosure document hereinafter description and or descriptions describes inventive aspects directed at various novel innovations hereinafter innovation innovations and or innovation s and contains material that is subject to copyright mask work and or other intellectual property protection. The respective owners of such intellectual property have no objection to the facsimile reproduction of the parent disclosure document by anyone as it appears in published Patent Office file records but otherwise reserve all rights.

The present innovations are directed generally to information technologies and more particularly to INFORMATION TECHNOLOGY INFRASTRUCTURE DESIGN APPARATUSES METHODS AND SYSTEMS.

Information technology includes the management of computers network routers and storage devices. Managing such resources may include allocating said computers network routers and storage devices to particular tasks.

The leading number of each reference number within the drawings indicates the figure in which that reference number is introduced and or detailed. As such a detailed discussion of reference number would be found and or introduced in . Reference number is introduced in etc.

INFORMATION TECHNOLOGY INFRASTRUCTURE DESIGN APPARATUSES METHODS AND SYSTEMS hereinafter IT ID transforms user infrastructure requests and user purchase requests inputs via IT ID components into infrastructure design product and infrastructure allocation outputs. The IT ID also provides project driven end to end solutions whereby the information technology infrastructure e.g. a server a software application etc. is offered based on users requests and the design and provisioning of the infrastructure is automated.

In some implementations the allocation and usage of the infrastructure may involve payment. Based on the type of infrastructure delivered and the time period it is in use payment may be transferred from the user to the infrastructure provider.

A user may desire to use infrastructure on a project by providing initial project infrastructure provisioning request to a client device . In some example aspect the client device may be a user s web enable computer e.g. laptop desktop tablet etc. or a mobile communication device e.g. PDA smartphone etc. . The client device submits a project infrastructure request message to the IT ID server via a communication network. The IT ID processes the project infrastructure request message and provides a response to the client device if the request is accepted .

In some implementations using the user s input the client may generate a project infrastructure request e.g. and provide the project infrastructure request to the IT ID server. For example the client may provide a Secure Hypertext Transfer Protocol HTTP S POST message including data formatted according to the eXtensible Markup Language XML . Below is an example HTTP S POST message including an XML formatted project infrastructure request for the IT ID server 

The IT ID server may query the user s project infrastructure request with pre defined templates stored in the database . The database may further provide to the IT ID server a template which is the best match to the user s request. The database may also store new templates. For example the database may be a relational database responsive to Structured Query Language SQL commands. The IT ID server may execute a hypertext preprocessor PHP script including SQL commands to query the database for the template data. An example PHP SQL command listing illustrating substantive aspects of querying the database is provided below 

In some implementations the template may comprise system components such as but not limited to network hardware operating system storage and or a combination of these components. In another embodiment a template may further comprise software components in addition to the foregoing system components. In one embodiment a template may comprise a combination of system components and software components to provide a customized solution to a project. In another embodiment the templates may be documented and version controlled.

In other implementations the IT ID server may probe the network to determine what infrastructure resources are available and generate a new template based on the available infrastructure resources.

The IT ID server may then send the best template to the client device . The user may review the template and update the template with new design diagrams using hand made modeling tools or automated modeling tools. The hand made modeling tools may be constructed via Unified Modeling Language hereafter UML or Systems Modeling Language hereafter SysML . For example SPARX Enterprise Architect hereafter SPARX EA may be used to modify the template.

In some implementations using the user s input the client may generate a request to update the template design diagrams e.g. and provide the request to the IT ID server. For example the client may provide a Secure Hypertext Transfer Protocol HTTP S POST message including data formatted according to the eXtensible Markup Language XML . Below is an example HTTP S POST message including an XML formatted request for the IT ID server 

In other implementations the user may update the template design diagrams using SPARX EA. Once the user completes modifying the diagrams it may use for example SPARX EA to export the design diagrams to structured data files such as but not limited to Extensible Markup Language Metadata Interchange hereafter XMI file rich text file and Hypertext Markup Language hereafter HTML documents . In some implementations an exemplary XMI encoded file may take a form similar to the following 

The structured data files may be further sent to the IT ID server via an exemplary XML encoded message that may take a form similar to the following 

In some implementations the user may provide purchase request via the client device to the IT ID server for providing the infrastructure provisioning service wherein the purchase request may comprise user credit card identification information a payment amount and or the like. The IT ID server receives the purchase request information and sends financial data to a financial institution to perform the financial transaction. Once the transaction is approved a message is sent to the IT ID server and purchase information may be displayed to the client device . The IT ID server may also send a payment approval message to the client device. In another implementation the IT ID server may be integrated with a financial payment platform.

In some implementations the client may generate a purchase request e.g. and provide the purchase request to the IT ID server. For example the client may provide a Secure Hypertext Transfer Protocol HTTP S POST message including data formatted according to the eXtensible Markup Language XML . Below is an example HTTP S POST message including an XML formatted purchase request for the IT ID server 

In some implementations the IT ID server may parse the structure files e.g. XMI by a plurality of data tags . The parsed XMI data file may be sent to any compute services infrastructure provisioning tools infrastructure ordering tools or any infrastructure interfaces such as but not limited to BMC Cloud Lifecycle Management hereafter BMC CLM .

In some implementations the infrastructure interface may send a request to the infrastructures to map the topology of infrastructures . The infrastructures may then map the topology and send the topology mapping data back to the infrastructure interface . The infrastructure interface may correlate the topology mapping data with the parsed XMI file and determine if the requested infrastructures are available to the user. If the requested infrastructures are available the requested infrastructures may be allocated to the client device and a successful infrastructure delivery message may be send to the client device .

As an example the APIs may interface with any number of Business Management units which may provide input e.g. caps on infrastructure. For example a Cost Management unit may modify templates to limit a Service Life Cycle Management unit to 30 000 in infrastructure e.g. due to budget constraints projected earnings and or the like . Also an Asset and License Management unit may provide the IT ID with a list of unused software licenses which the IT ID may use for allotting resources when users in a Service Automation Management unit request infrastructure. Additionally in the event that the Service Automation Management unit does not meet the criteria of the most relevant template e.g. the Service Automation Management unit requests the use of Microsoft Server licenses for three users when the template requires at least five licenses to be used in order to save revenue and or a like rationale the IT ID may provide recommendations to the unit based on the unit s constraints e.g. to use software with free licenses such as Apache and or is otherwise cost effective given the quantity requested by the unit and or the like and may update a template specific to the unit reflecting the accepted recommendation.

In some implementations the IT ID may further be utilized to provide allocation errors and or the like to the user or to any of the Operational or Business Management units. For example the IT ID may send any errors that occur as a result of a unit requesting too many resources to a Remedy for Problem Incident Change Asset and License Management unit . In some implementations the IT ID may send errors in the form of a notification to the Remedy for Problem Incident Change Asset and License Management unit noting the request and the extent to which the request exceeds the limits placed on the unit and may request that the Remedy for Problem Incident Change Asset and License Management unit either deny or allow the request.

In some implementations the user may wish to allocate different resources to different areas of the user s enterprise based on a variety of factors. For example in some implementations operational management areas may receive a different set of resources than business management areas . As an example in some implementations the BMC Capacity and Performance Management unit of the enterprise may require more resources than the Service Automation Management unit may require internal resources as opposed to external resources or may have certain resource restrictions placed upon it via a Cloud Life Cycle Management CLM system which may place such restrictions based on the size of the module the finances associated with the module and or the like . In such cases the IT ID may use the Compute Services API to generate or update the templates in order to accommodate differences in needs between all areas of the enterprise.

In some implementations if a match is identified the IT ID server may send a list of templates that are closet to the user s project infrastructure request . The user may select a best match from the templates sent . The user may further send a message to the IT ID server to request to retrieve the best match template . The IT ID server may retrieve the best match template from the Template Database and send the best match template back to the user .

If the user desires to edit the template a template editor may be opened and the user may provide changes to the template and complete a design diagram via hand made or automated modeling tools.

In some implementations the user may export the updated design diagram to structured data files such as but not limited to XMI file rich text file JSON and HTML documents. The user may further send the structured data files e.g. XMI to the IT ID server . The IT ID server may then parse the structured data files by a plurality of data tags . In some implementations the IT ID may use a JSON parser to parse the file in some implementations the JSON encoded command for parsing the file may take a form similar to the following 

The parsed XMI file may further be sent to any compute services infrastructure provisioning tools infrastructure ordering tools or any infrastructure interfaces such as but not limited to BMC Cloud Lifecycle Management hereafter BMC CLM .

In some implementations if the match between the user s requirements and pre defined templates is not identified a notification may be sent to the user and the user can create new design diagrams for the project using either hand made tools e.g. SPARX EA or automatic tools and further export the diagrams to structured data files. The newly created diagram may be documented sent to the Template Database and stored. The user may further send the structured data files e.g. XMI to the IT ID server . The IT ID server may then parse the structured data files by a plurality of data tags . The parsed XMI file may further be sent to any compute services infrastructure provisioning tools infrastructure ordering tools or any infrastructure interfaces such as but not limited to BMC Cloud Lifecycle Management hereafter BMC CLM .

In some implementations the infrastructure interface may request to map the topology of the infrastructure resources and correlate the topology mapping data with the parsed XMI file to determine if the available infrastructure resources are sufficient for the user s requirements . If the infrastructure resources are available the infrastructure resources may be allocated to the user.

In some implementations the infrastructure interface may directly process the parsed data without mapping the topology and allocate the infrastructure resources to the user.

In some implementations if the infrastructure resources are unavailable a notification may be sent to the user and requires the user to change the request

In some implementations if the user requests changes to the infrastructure that was previously allocated modifications based on the new requirements that the user provides may be incorporated to the data file that was sent to the infrastructure provider . The modified data file is submitted to the infrastructure interface . If the requested infrastructure resources are available new infrastructure resources may be allocated to the user.

In some implementations as shown in a template may be an editable flow chart diagram where users may specify various aspects of the infrastructure desired. In some implementations the template may be for an application e.g. indicates that the template is for Application ABC however other implementations may use templates for web hosting infrastructure for internal business server infrastructure and or the like. In some implementations the user may specify the number of separate user entities that may access the system and thus affect resource usage. The user may also specify a network router and or like device through which to communicate with the various infrastructures within the template. The user may specify how the router communicates with the rest of the infrastructure e.g. HTTP s messages . The user may specify platforms e.g. servers clusters and or the like to utilize as well as sub platforms that may communicate with main platform . In some implementations the user could have multiple main platforms with multiple sub platforms in some implementations the limitations on the number of main or sub platforms may depend upon the internal and or resources available for the particular project. In some implementations the user may also specify how the main and sub platforms communicate with each other e.g. the protocols used the language used for communication and or the like . In some implementations the user may specify HTTP or HTTPS protocol for platforms. In some implementations the user may also specify backup platforms and or the like. In some implementations all platforms components and or the like may be implemented within each template as data objects e.g. XMI data objects and or the like with data structures as described above which may be pre configured to communicate with other platforms components infrastructures and or the like.

In some implementations as shown in the user may be able to specify a plurality of parameters for each main or sub platform added to the template. For example the user may be able to specify properties of the platform such as its name the port that it communicates on the name of the platform s host and or the like . The user may also be able to specify any components to the platform such as the operating system type and or version to be utilized on the platform e.g. Windows Server Linux and or the like the hardware to be used for the platform e.g. type of processors quantity of processors amount of memory amount and type of storage and or the like and or like attributes as shown in .

In some implementations as shown in the user may also be able to use a Load Balancer to ensure that platforms use equal proportions of the total resources or to compensate for any need for more resources as a result of changes the user makes to the template and or the like. For example in some implementations the user may specify platform with a particular component development environment and or the like. The Load Balancer in some implementations may automatically load other platforms and may allow the user to view estimates of the amount of resources each platform would require in order to allow the user to ensure that adding the new platform would not add too many resources in order to make sure the proportion of resources going towards the unit using is appropriate given the proportion of resources going towards the unit using and or the like. In some implementations platform may be a platform that the Load Balancer automatically generates if the IT ID determines that platform is not sufficient for the needs the user specified earlier for a particular unit.

Typically users which may be people and or other systems may engage information technology systems e.g. computers to facilitate information processing. In turn computers employ processors to process information such processors may be referred to as central processing units CPU . One form of processor is referred to as a microprocessor. CPUs use communicative circuits to pass binary encoded signals acting as instructions to enable various operations. These instructions may be operational and or data instructions containing and or referencing other instructions and data in various processor accessible and operable areas of memory e.g. registers cache memory random access memory etc. . Such communicative instructions may be stored and or transmitted in batches e.g. batches of instructions as programs and or data components to facilitate desired operations. These stored instruction codes e.g. programs may engage the CPU circuit components and other motherboard and or system components to perform desired operations. One type of program is a computer operating system which may be executed by CPU on a computer the operating system enables and facilitates users to access and operate computer information technology and resources. Some resources that may be employed in information technology systems include input and output mechanisms through which data may pass into and out of a computer memory storage into which data may be saved and processors by which information may be processed. These information technology systems may be used to collect data for later retrieval analysis and manipulation which may be facilitated through a database program. These information technology systems provide interfaces that allow users to access and operate various system components.

In one embodiment the IT ID controller may be connected to and or communicate with entities such as but not limited to one or more users from user input devices peripheral devices an optional cryptographic processor device and or a communications network .

Networks are commonly thought to comprise the interconnection and interoperation of clients servers and intermediary nodes in a graph topology. It should be noted that the term server as used throughout this application refers generally to a computer other device program or combination thereof that processes and responds to the requests of remote users across a communications network. Servers serve their information to requesting clients. The term client as used herein refers generally to a computer program other device user and or combination thereof that is capable of processing and making requests and obtaining and processing any responses from servers across a communications network. A computer other device program or combination thereof that facilitates processes information and requests and or furthers the passage of information from a source user to a destination user is commonly referred to as a node. Networks are generally thought to facilitate the transfer of information from source points to destinations. A node specifically tasked with furthering the passage of information from a source to a destination is commonly called a router. There are many forms of networks such as Local Area Networks LANs Pico networks Wide Area Networks WANs Wireless Networks WLANs etc. For example the Internet is generally accepted as being an interconnection of a multitude of networks whereby remote clients and servers may access and interoperate with one another.

The IT ID controller may be based on computer systems that may comprise but are not limited to components such as a computer systemization connected to memory .

A computer systemization may comprise a clock central processing unit CPU s and or processor s these terms are used interchangeable throughout the disclosure unless noted to the contrary a memory e.g. a read only memory ROM a random access memory RAM etc. and or an interface bus and most frequently although not necessarily are all interconnected and or communicating through a system bus on one or more mother board s having conductive and or otherwise transportive circuit pathways through which instructions e.g. binary encoded signals may travel to effectuate communications operations storage etc. The computer systemization may be connected to a power source e.g. optionally the power source may be internal. Optionally a cryptographic processor and or transceivers e.g. ICs may be connected to the system bus. In another embodiment the cryptographic processor and or transceivers may be connected as either internal and or external peripheral devices via the interface bus I O. In turn the transceivers may be connected to antenna s thereby effectuating wireless transmission and reception of various communication and or sensor protocols for example the antenna s may connect to a Texas Instruments WiLink WL1283 transceiver chip e.g. providing 802.11n Bluetooth 3.0 FM global positioning system GPS thereby allowing IT ID controller to determine its location Broadcom BCM4329FKUBG transceiver chip e.g. providing 802.11n Bluetooth 2.1 EDR FM etc. a Broadcom BCM4750IUB8 receiver chip e.g. GPS an Infineon Technologies X Gold 618 PMB9800 e.g. providing 2G 3G HSDPA HSUPA communications and or the like. The system clock typically has a crystal oscillator and generates a base signal through the computer systemization s circuit pathways. The clock is typically coupled to the system bus and various clock multipliers that will increase or decrease the base operating frequency for other components interconnected in the computer systemization. The clock and various components in a computer systemization drive signals embodying information throughout the system. Such transmission and reception of instructions embodying information throughout a computer systemization may be commonly referred to as communications. These communicative instructions may further be transmitted received and the cause of return and or reply communications beyond the instant computer systemization to communications networks input devices other computer systemizations peripheral devices and or the like. It should be understood that in alternative embodiments any of the above components may be connected directly to one another connected to the CPU and or organized in numerous variations employed as exemplified by various computer systems.

The CPU comprises at least one high speed data processor adequate to execute program components for executing user and or system generated requests. Often the processors themselves will incorporate various specialized processing units such as but not limited to integrated system bus controllers memory management control units floating point units and even specialized processing sub units like graphics processing units digital signal processing units and or the like. Additionally processors may include internal fast access addressable memory and be capable of mapping and addressing memory beyond the processor itself internal memory may include but is not limited to fast registers various levels of cache memory e.g. level 1 2 3 etc. RAM etc. The processor may access this memory through the use of a memory address space that is accessible via instruction address which the processor can construct and decode allowing it to access a circuit path to a specific memory address space having a memory state. The CPU may be a microprocessor such as AMD s Athlon Duron and or Opteron ARM s application embedded and secure processors IBM and or Motorola s DragonBall and PowerPC IBM s and Sony s Cell processor Intel s Celeron Core 2 Duo Itanium Pentium Xeon and or XScale and or the like processor s . The CPU interacts with memory through instruction passing through conductive and or transportive conduits e.g. printed electronic and or optic circuits to execute stored instructions i.e. program code according to conventional data processing techniques. Such instruction passing facilitates communication within the IT ID controller and beyond through various interfaces. Should processing requirements dictate a greater amount speed and or capacity distributed processors e.g. Distributed IT ID mainframe multi core parallel and or super computer architectures may similarly be employed. Alternatively should deployment requirements dictate greater portability smaller Personal Digital Assistants PDAs may be employed.

Depending on the particular implementation features of the IT ID may be achieved by implementing a microcontroller such as CAST s R8051XC2 microcontroller Intel s MCS 51 i.e. 8051 microcontroller and or the like. Also to implement certain features of the IT ID some feature implementations may rely on embedded components such as Application Specific Integrated Circuit ASIC Digital Signal Processing DSP Field Programmable Gate Array FPGA and or the like embedded technology. For example any of the IT ID component collection distributed or otherwise and or features may be implemented via the microprocessor and or via embedded components e.g. via ASIC coprocessor DSP FPGA and or the like. Alternately some implementations of the IT ID may be implemented with embedded components that are configured and used to achieve a variety of features or signal processing.

Depending on the particular implementation the embedded components may include software solutions hardware solutions and or some combination of both hardware software solutions. For example IT ID features discussed herein may be achieved through implementing FPGAs which are a semiconductor devices containing programmable logic components called logic blocks and programmable interconnects such as the high performance FPGA Virtex series and or the low cost Spartan series manufactured by Xilinx. Logic blocks and interconnects can be programmed by the customer or designer after the FPGA is manufactured to implement any of the IT ID features. A hierarchy of programmable interconnects allow logic blocks to be interconnected as needed by the IT ID system designer administrator somewhat like a one chip programmable breadboard. An FPGA s logic blocks can be programmed to perform the operation of basic logic gates such as AND and XOR or more complex combinational operators such as decoders or mathematical operations. In most FPGAs the logic blocks also include memory elements which may be circuit flip flops or more complete blocks of memory. In some circumstances the IT ID may be developed on regular FPGAs and then migrated into a fixed version that more resembles ASIC implementations. Alternate or coordinating implementations may migrate IT ID controller features to a final ASIC instead of or in addition to FPGAs. Depending on the implementation all of the aforementioned embedded components and microprocessors may be considered the CPU and or processor for the IT ID.

The power source may be of any standard form for powering small electronic circuit board devices such as the following power cells alkaline lithium hydride lithium ion lithium polymer nickel cadmium solar cells and or the like. Other types of AC or DC power sources may be used as well. In the case of solar cells in one embodiment the case provides an aperture through which the solar cell may capture photonic energy. The power cell is connected to at least one of the interconnected subsequent components of the IT ID thereby providing an electric current to all subsequent components. In one example the power source is connected to the system bus component . In an alternative embodiment an outside power source is provided through a connection across the I O interface. For example a USB and or IEEE 1394 connection carries both data and power across the connection and is therefore a suitable source of power.

Interface bus ses may accept connect and or communicate to a number of interface adapters conventionally although not necessarily in the form of adapter cards such as but not limited to input output interfaces I O storage interfaces network interfaces and or the like. Optionally cryptographic processor interfaces similarly may be connected to the interface bus. The interface bus provides for the communications of interface adapters with one another as well as with other components of the computer systemization. Interface adapters are adapted for a compatible interface bus. Interface adapters conventionally connect to the interface bus via a slot architecture. Conventional slot architectures may be employed such as but not limited to Accelerated Graphics Port AGP Card Bus Extended Industry Standard Architecture E ISA Micro Channel Architecture MCA NuBus Peripheral Component Interconnect Extended PCI X PCI Express Personal Computer Memory Card International Association PCMCIA and or the like.

Storage interfaces may accept communicate and or connect to a number of storage devices such as but not limited to storage devices removable disc devices and or the like. Storage interfaces may employ connection protocols such as but not limited to Ultra Serial Advanced Technology Attachment Packet Interface Ultra Serial ATA PI Enhanced Integrated Drive Electronics E IDE Institute of Electrical and Electronics Engineers IEEE 1394 fiber channel Small Computer Systems Interface SCSI Universal Serial Bus USB and or the like.

Network interfaces may accept communicate and or connect to a communications network . Through a communications network the IT ID controller is accessible through remote clients e.g. computers with web browsers by users . Network interfaces may employ connection protocols such as but not limited to direct connect Ethernet thick thin twisted pair 10 100 1000 Base T and or the like Token Ring wireless connection such as IEEE 802.11a x and or the like. Should processing requirements dictate a greater amount speed and or capacity distributed network controllers e.g. Distributed IT ID architectures may similarly be employed to pool load balance and or otherwise increase the communicative bandwidth required by the IT ID controller. A communications network may be any one and or the combination of the following a direct interconnection the Internet a Local Area Network LAN a Metropolitan Area Network MAN an Operating Missions as Nodes on the Internet OMNI a secured custom connection a Wide Area Network WAN a wireless network e.g. employing protocols such as but not limited to a Wireless Application Protocol WAP I mode and or the like and or the like. A network interface may be regarded as a specialized form of an input output interface. Further multiple network interfaces may be used to engage with various communications network types . For example multiple network interfaces may be employed to allow for the communication over broadcast multicast and or unicast networks.

Input Output interfaces I O may accept communicate and or connect to user input devices peripheral devices cryptographic processor devices and or the like. I O may employ connection protocols such as but not limited to audio analog digital monaural RCA stereo and or the like data Apple Desktop Bus ADB IEEE 1394a b serial universal serial bus USB infrared joystick keyboard midi optical PC AT PS 2 parallel radio video interface Apple Desktop Connector ADC BNC coaxial component composite digital Digital Visual Interface DVI high definition multimedia interface HDMI RCA RF antennae S Video VGA and or the like wireless transceivers 802.11a b g n x Bluetooth cellular e.g. code division multiple access CDMA high speed packet access HSPA high speed downlink packet access HSDPA global system for mobile communications GSM long term evolution LTE WiMax etc. and or the like. One typical output device may include a video display which typically comprises a Cathode Ray Tube CRT or Liquid Crystal Display LCD based monitor with an interface e.g. DVI circuitry and cable that accepts signals from a video interface may be used. The video interface composites information generated by a computer systemization and generates video signals based on the composited information in a video memory frame. Another output device is a television set which accepts signals from a video interface. Typically the video interface provides the composited video information through a video connection interface that accepts a video display interface e.g. an RCA composite video connector accepting an RCA composite video cable a DVI connector accepting a DVI display cable etc. .

User input devices often are a type of peripheral device see below and may include card readers dongles finger print readers gloves graphics tablets joysticks keyboards microphones mouse mice remote controls retina readers touch screens e.g. capacitive resistive etc. trackballs trackpads sensors e.g. accelerometers ambient light GPS gyroscopes proximity etc. styluses and or the like.

Peripheral devices may be connected and or communicate to I O and or other facilities of the like such as network interfaces storage interfaces directly to the interface bus system bus the CPU and or the like. Peripheral devices may be external internal and or part of the IT ID controller. Peripheral devices may include antenna audio devices e.g. line in line out microphone input speakers etc. cameras e.g. still video webcam etc. dongles e.g. for copy protection ensuring secure transactions with a digital signature and or the like external processors for added capabilities e.g. crypto devices force feedback devices e.g. vibrating motors network interfaces printers scanners storage devices transceivers e.g. cellular GPS etc. video devices e.g. goggles monitors etc. video sources visors and or the like. Peripheral devices often include types of input devices e.g. cameras .

It should be noted that although user input devices and peripheral devices may be employed the IT ID controller may be embodied as an embedded dedicated and or monitor less i.e. headless device wherein access would be provided over a network interface connection.

Cryptographic units such as but not limited to microcontrollers processors interfaces and or devices may be attached and or communicate with the IT ID controller. A MC68HC16 microcontroller manufactured by Motorola Inc. may be used for and or within cryptographic units. The MC68HC16 microcontroller utilizes a 16 bit multiply and accumulate instruction in the 16 MHz configuration and requires less than one second to perform a 512 bit RSA private key operation. Cryptographic units support the authentication of communications from interacting agents as well as allowing for anonymous transactions. Cryptographic units may also be configured as part of the CPU. Equivalent microcontrollers and or processors may also be used. Other commercially available specialized cryptographic processors include Broadcom s CryptoNetX and other Security Processors nCipher s nShield SafeNet s Luna PCI e.g. 7100 series Semaphore Communications 40 MHz Roadrunner 184 Sun s Cryptographic Accelerators e.g. Accelerator 6000 PCIe Board Accelerator 500 Daughtercard Via Nano Processor e.g. L2100 L2200 U2400 line which is capable of performing 500 MB s of cryptographic instructions VLSI Technology s 33 MHz 6868 and or the like.

Generally any mechanization and or embodiment allowing a processor to affect the storage and or retrieval of information is regarded as memory . However memory is a fungible technology and resource thus any number of memory embodiments may be employed in lieu of or in concert with one another. It is to be understood that the IT ID controller and or a computer systemization may employ various forms of memory . For example a computer systemization may be configured wherein the operation of on chip CPU memory e.g. registers RAM ROM and any other storage devices are provided by a paper punch tape or paper punch card mechanism however such an embodiment would result in an extremely slow rate of operation. In a typical configuration memory will include ROM RAM and a storage device . A storage device may be any conventional computer system storage. Storage devices may include a drum a fixed and or removable magnetic disk drive a magneto optical drive an optical drive i.e. Blueray CD ROM RAM Recordable R ReWritable RW DVD R RW HD DVD R RW etc. an array of devices e.g. Redundant Array of Independent Disks RAID solid state memory devices USB memory solid state drives SSD etc. other processor readable storage mediums and or other devices of the like. Thus a computer systemization generally requires and makes use of memory.

The memory may contain a collection of program and or database components and or data such as but not limited to operating system component s operating system information server component s information server user interface component s user interface Web browser component s Web browser database s mail server component s mail client component s cryptographic server component s cryptographic server the IT ID component s and or the like i.e. collectively a component collection . These components may be stored and accessed from the storage devices and or from storage devices accessible through an interface bus. Although non conventional program components such as those in the component collection typically are stored in a local storage device they may also be loaded and or stored in memory such as peripheral devices RAM remote storage facilities through a communications network ROM various forms of memory and or the like.

The operating system component is an executable program component facilitating the operation of the IT ID controller. Typically the operating system facilitates access of I O network interfaces peripheral devices storage devices and or the like. The operating system may be a highly fault tolerant scalable and secure system such as Apple Macintosh OS X Server AT T Plan 9 Be OS Unix and Unix like system distributions such as AT T s UNIX Berkley Software Distribution BSD variations such as FreeBSD NetBSD OpenBSD and or the like Linux distributions such as Red Hat Ubuntu and or the like and or the like operating systems. However more limited and or less secure operating systems also may be employed such as Apple Macintosh OS IBM OS 2 Microsoft DOS Microsoft Windows 2000 2003 3.1 95 98 CE Millenium NT Vista XP Server Palm OS and or the like. An operating system may communicate to and or with other components in a component collection including itself and or the like. Most frequently the operating system communicates with other program components user interfaces and or the like. For example the operating system may contain communicate generate obtain and or provide program component system user and or data communications requests and or responses. The operating system once executed by the CPU may enable the interaction with communications networks data I O peripheral devices program components memory user input devices and or the like. The operating system may provide communications protocols that allow the IT ID controller to communicate with other entities through a communications network . Various communication protocols may be used by the IT ID controller as a subcarrier transport mechanism for interaction such as but not limited to multicast TCP IP UDP unicast and or the like.

An information server component is a stored program component that is executed by a CPU. The information server may be a conventional Internet information server such as but not limited to Apache Software Foundation s Apache Microsoft s Internet Information Server and or the like. The information server may allow for the execution of program components through facilities such as Active Server Page ASP ActiveX ANSI Objective C C and or .NET Common Gateway Interface CGI scripts dynamic D hypertext markup language HTML FLASH Java JavaScript Practical Extraction Report Language PERL Hypertext Pre Processor PHP pipes Python wireless application protocol WAP WebObjects and or the like. The information server may support secure communications protocols such as but not limited to File Transfer Protocol FTP HyperText Transfer Protocol HTTP Secure Hypertext Transfer Protocol HTTPS Secure Socket Layer SSL messaging protocols e.g. America Online AOL Instant Messenger AIM Application Exchange APEX ICQ Internet Relay Chat IRC Microsoft Network MSN Messenger Service Presence and Instant Messaging Protocol PRIM Internet Engineering Task Force s IETF s Session Initiation Protocol SIP SIP for Instant Messaging and Presence Leveraging Extensions SIMPLE open XML based Extensible Messaging and Presence Protocol XMPP i.e. Jabber or Open Mobile Alliance s OMA s Instant Messaging and Presence Service IMPS Yahoo Instant Messenger Service and or the like. The information server provides results in the form of Web pages to Web browsers and allows for the manipulated generation of the Web pages through interaction with other program components. After a Domain Name System DNS resolution portion of an HTTP request is resolved to a particular information server the information server resolves requests for information at specified locations on the IT ID controller based on the remainder of the HTTP request. For example a request such as http 123.124.125.126 myInformation.html might have the IP portion of the request 123.124.125.126 resolved by a DNS server to an information server at that IP address that information server might in turn further parse the http request for the myInformation.html portion of the request and resolve it to a location in memory containing the information myInformation.html. Additionally other information serving protocols may be employed across various ports e.g. FTP communications across port and or the like. An information server may communicate to and or with other components in a component collection including itself and or facilities of the like. Most frequently the information server communicates with the IT ID database operating systems other program components user interfaces Web browsers and or the like.

Access to the IT ID database may be achieved through a number of database bridge mechanisms such as through scripting languages as enumerated below e.g. CGI and through inter application communication channels as enumerated below e.g. CORBA WebObjects etc. . Any data requests through a Web browser are parsed through the bridge mechanism into appropriate grammars as required by the IT ID. In one embodiment the information server would provide a Web form accessible by a Web browser. Entries made into supplied fields in the Web form are tagged as having been entered into the particular fields and parsed as such. The entered terms are then passed along with the field tags which act to instruct the parser to generate queries directed to appropriate tables and or fields. In one embodiment the parser may generate queries in standard SQL by instantiating a search string with the proper join select commands based on the tagged text entries wherein the resulting command is provided over the bridge mechanism to the IT ID as a query. Upon generating query results from the query the results are passed over the bridge mechanism and may be parsed for formatting and generation of a new results Web page by the bridge mechanism. Such a new results Web page is then provided to the information server which may supply it to the requesting Web browser.

Also an information server may contain communicate generate obtain and or provide program component system user and or data communications requests and or responses.

Computer interfaces in some respects are similar to automobile operation interfaces. Automobile operation interface elements such as steering wheels gearshifts and speedometers facilitate the access operation and display of automobile resources and status. Computer interaction interface elements such as check boxes cursors menus scrollers and windows collectively and commonly referred to as widgets similarly facilitate the access capabilities operation and display of data and computer hardware and operating system resources and status. Operation interfaces are commonly called user interfaces. Graphical user interfaces GUIs such as the Apple Macintosh Operating System s Aqua IBM s OS 2 Microsoft s Windows 2000 2003 3.1 95 98 CE Millenium NT XP Vista 7 i.e. Aero Unix s X Windows e.g. which may include additional Unix graphic interface libraries and layers such as K Desktop Environment KDE mythTV and GNU Network Object Model Environment GNOME web interface libraries e.g. ActiveX AJAX D HTML FLASH Java JavaScript etc. interface libraries such as but not limited to Dojo jQuery UI MooTools Prototype script.aculo.us SWFObject Yahoo User Interface any of which may be used and provide a baseline and means of accessing and displaying information graphically to users.

A user interface component is a stored program component that is executed by a CPU. The user interface may be a conventional graphic user interface as provided by with and or atop operating systems and or operating environments such as already discussed. The user interface may allow for the display execution interaction manipulation and or operation of program components and or system facilities through textual and or graphical facilities. The user interface provides a facility through which users may affect interact and or operate a computer system. A user interface may communicate to and or with other components in a component collection including itself and or facilities of the like. Most frequently the user interface communicates with operating systems other program components and or the like. The user interface may contain communicate generate obtain and or provide program component system user and or data communications requests and or responses.

A Web browser component is a stored program component that is executed by a CPU. The Web browser may be a conventional hypertext viewing application such as Microsoft Internet Explorer or Netscape Navigator. Secure Web browsing may be supplied with 128 bit or greater encryption by way of HTTPS SSL and or the like. Web browsers allowing for the execution of program components through facilities such as ActiveX AJAX D HTML FLASH Java JavaScript web browser plug in APIs e.g. FireFox Safari Plug in and or the like APIs and or the like. Web browsers and like information access tools may be integrated into PDAs cellular telephones and or other mobile devices. A Web browser may communicate to and or with other components in a component collection including itself and or facilities of the like. Most frequently the Web browser communicates with information servers operating systems integrated program components e.g. plug ins and or the like e.g. it may contain communicate generate obtain and or provide program component system user and or data communications requests and or responses. Also in place of a Web browser and information server a combined application may be developed to perform similar operations of both. The combined application would similarly affect the obtaining and the provision of information to users user agents and or the like from the IT ID enabled nodes. The combined application may be nugatory on systems employing standard Web browsers.

A mail server component is a stored program component that is executed by a CPU . The mail server may be a conventional Internet mail server such as but not limited to sendmail Microsoft Exchange and or the like. The mail server may allow for the execution of program components through facilities such as ASP ActiveX ANSI Objective C C and or .NET CGI scripts Java JavaScript PERL PHP pipes Python WebObjects and or the like. The mail server may support communications protocols such as but not limited to Internet message access protocol IMAP Messaging Application Programming Interface MAPI Microsoft Exchange post office protocol POP3 simple mail transfer protocol SMTP and or the like. The mail server can route forward and process incoming and outgoing mail messages that have been sent relayed and or otherwise traversing through and or to the IT ID.

Access to the IT ID mail may be achieved through a number of APIs offered by the individual Web server components and or the operating system.

Also a mail server may contain communicate generate obtain and or provide program component system user and or data communications requests information and or responses.

A mail client component is a stored program component that is executed by a CPU . The mail client may be a conventional mail viewing application such as Apple Mail Microsoft Entourage Microsoft Outlook Microsoft Outlook Express Mozilla Thunderbird and or the like. Mail clients may support a number of transfer protocols such as IMAP Microsoft Exchange POP3 SMTP and or the like. A mail client may communicate to and or with other components in a component collection including itself and or facilities of the like. Most frequently the mail client communicates with mail servers operating systems other mail clients and or the like e.g. it may contain communicate generate obtain and or provide program component system user and or data communications requests information and or responses. Generally the mail client provides a facility to compose and transmit electronic mail messages.

A cryptographic server component is a stored program component that is executed by a CPU cryptographic processor cryptographic processor interface cryptographic processor device and or the like. Cryptographic processor interfaces will allow for expedition of encryption and or decryption requests by the cryptographic component however the cryptographic component alternatively may run on a conventional CPU. The cryptographic component allows for the encryption and or decryption of provided data. The cryptographic component allows for both symmetric and asymmetric e.g. Pretty Good Protection PGP encryption and or decryption. The cryptographic component may employ cryptographic techniques such as but not limited to digital certificates e.g. X.509 authentication framework digital signatures dual signatures enveloping password access protection public key management and or the like. The cryptographic component will facilitate numerous encryption and or decryption security protocols such as but not limited to checksum Data Encryption Standard DES Elliptical Curve Encryption ECC International Data Encryption Algorithm IDEA Message Digest 5 MD5 which is a one way hash operation passwords Rivest Cipher RC5 Rijndael RSA which is an Internet encryption and authentication system that uses an algorithm developed in 1977 by Ron Rivest Adi Shamir and Leonard Adleman Secure Hash Algorithm SHA Secure Socket Layer SSL Secure Hypertext Transfer Protocol HTTPS and or the like. Employing such encryption security protocols the IT ID may encrypt all incoming and or outgoing communications and may serve as node within a virtual private network VPN with a wider communications network. The cryptographic component facilitates the process of security authorization whereby access to a resource is inhibited by a security protocol wherein the cryptographic component effects authorized access to the secured resource. In addition the cryptographic component may provide unique identifiers of content e.g. employing and MD5 hash to obtain a unique signature for an digital audio file. A cryptographic component may communicate to and or with other components in a component collection including itself and or facilities of the like. The cryptographic component supports encryption schemes allowing for the secure transmission of information across a communications network to enable the IT ID component to engage in secure transactions if so desired. The cryptographic component facilitates the secure accessing of resources on the IT ID and facilitates the access of secured resources on remote systems i.e. it may act as a client and or server of secured resources. Most frequently the cryptographic component communicates with information servers operating systems other program components and or the like. The cryptographic component may contain communicate generate obtain and or provide program component system user and or data communications requests and or responses.

The IT ID database component may be embodied in a database and its stored data. The database is a stored program component which is executed by the CPU the stored program component portion configuring the CPU to process the stored data. The database may be a conventional fault tolerant relational scalable secure database such as Oracle or Sybase. Relational databases are an extension of a flat file. Relational databases consist of a series of related tables. The tables are interconnected via a key field. Use of the key field allows the combination of the tables by indexing against the key field i.e. the key fields act as dimensional pivot points for combining information from various tables. Relationships generally identify links maintained between tables by matching primary keys. Primary keys represent fields that uniquely identify the rows of a table in a relational database. More precisely they uniquely identify rows of a table on the one side of a one to many relationship.

Alternatively the IT ID database may be implemented using various standard data structures such as an array hash linked list struct structured text file e.g. XML table and or the like. Such data structures may be stored in memory and or in structured files. In another alternative an object oriented database may be used such as Frontier ObjectStore Poet Zope and or the like. Object databases can include a number of object collections that are grouped and or linked together by common attributes they may be related to other object collections by some common attributes. Object oriented databases perform similarly to relational databases with the exception that objects are not just pieces of data but may have other types of capabilities encapsulated within a given object. If the IT ID database is implemented as a data structure the use of the IT ID database may be integrated into another component such as the IT ID component . Also the database may be implemented as a mix of data structures objects and relational structures. Databases may be consolidated and or distributed in countless variations through standard data processing techniques. Portions of databases e.g. tables may be exported and or imported and thus decentralized and or integrated.

In one embodiment the database component includes several tables . A User table includes fields such as but not limited to UserID UserClientD UserAccountName UserAccountAddress UserPaymentIdentifier s and or the like. The user table may support and or track multiple entity accounts on an IT ID. A Client table includes fields such as but not limited to ClientID ClientUserID ClientName ClientAddress ClientTransactionID ClientPaymentIdentifier s and or the like. A Project table includes fields such as but not limited to ProjectID ProjectUserID ProjectClientID ProjectDuration ProjectStateDate ProjectEndDate ProjectTemplateID ProjectInsfrastuctureData and or the like. A Transaction table includes fields such as but not limited to TransactionID TransactionUserID Transaction ClientID TransactionProjectID TransactionTemplateID TransactionPurchasePrice TransactionCurrentPrice TransactionUsageDate TransactionUsageTime TransactionUsageTally TransactionMaximumUsage TransactionDepreciationRate TransactionRefundStatus TransactionResidualValue and or the like. A Hardware table includes fields such as but not limited to HardwareID HardwareUserID HarwareClientID HardwareProjectID HardwareType HardwareName HardwareProtocols Hardware AddressInfo HardwareUsageHistory HardwareRequirements and or the like. An Operating System table includes fields such as but not limited to OSID OSUserID OSClientID OSProjectID OSType OSName OSVersion OSProtocols OSUsageHistory OSRequirements and or the like. A Storage table includes fields such as but not limited to StorageID StorageUserID StorageClientID StorageProjectID StorageType StorageName StorageSize StorageProtocols StorageUsageHistory StorageRequirements and or the like. A Network table includes fields such as but not limited to NetworkID NetworkUserID NetworkClientID NetworkProjectID NetworkType NetworkName NetworkProtocols NetworkUsageHistory NetworkRequirements and or the like. A Template table includes fields such as but not limited to TemplateID TemplateUserID TemplateClientID TemplateProjectID TemplateHardwareID TemplateOSID TemplateStorageID TemplateNetworkID TemplateVersion TemplateUsageHistory and or the like. A Parser table includes fields such as but not limited to ParserID ParserUserID ParserClientID ParserProjectID ParserTemplateID ParserHardwareID ParserOSID ParserStorageID ParserNetworkID and or the like.

In one embodiment the IT ID database may interact with other database systems. For example employing a distributed database system queries and data access by search IT ID component may treat the combination of the IT ID database an integrated data security layer database as a single database entity.

In one embodiment user programs may contain various user interface primitives which may serve to update the IT ID. Also various accounts may require custom database tables depending upon the environments and the types of clients the IT ID may need to serve. It should be noted that any unique fields may be designated as a key field throughout. In an alternative embodiment these tables have been decentralized into their own databases and their respective database controllers i.e. individual database controllers for each of the above tables . Employing standard data processing techniques one may further distribute the databases over several computer systemizations and or storage devices. Similarly configurations of the decentralized database controllers may be varied by consolidating and or distributing the various database components . The IT ID may be configured to keep track of various settings inputs and parameters via database controllers.

The IT ID database may communicate to and or with other components in a component collection including itself and or facilities of the like. Most frequently the IT ID database communicates with the IT ID component other program components and or the like. The database may contain retain and provide information regarding other nodes and data.

The IT ID component is a stored program component that is executed by a CPU. In one embodiment the IT ID component incorporates any and or all combinations of the aspects of the IT ID that was discussed in the previous figures. As such the IT ID affects accessing obtaining and the provision of information services transactions and or the like across various communications networks. The features and embodiments of the IT ID discussed herein increase network efficiency by reducing data transfer requirements the use of more efficient data structures and mechanisms for their transfer and storage. As a consequence more data may be transferred in less time and latencies with regard to transactions are also reduced. In many cases such reduction in storage transfer time bandwidth requirements latencies etc. will reduce the capacity and structural infrastructure requirements to support the IT ID s features and facilities and in many cases reduce the costs energy consumption requirements and extend the life of IT ID s underlying infrastructure this has the added benefit of making the IT ID more reliable. Similarly many of the features and mechanisms are designed to be easier for users to use and access thereby broadening the audience that may enjoy employ and exploit the feature sets of the IT ID such ease of use also helps to increase the reliability of the IT ID. In addition the feature sets include heightened security as noted via the Cryptographic components and throughout making access to the features and data more reliable and secure.

The IT ID transforms user infrastructure requests and user purchase requests inputs via IT ID components User Self service Portal Template Matching and Design Engine XMI Export XMI Parser into infrastructure design product and infrastructure allocation outputs.

The IT ID component enabling access of information between nodes may be developed by employing standard development tools and languages such as but not limited to Apache components Assembly ActiveX binary executables ANSI Objective C C and or .NET database adapters CGI scripts Java JavaScript mapping tools procedural and object oriented development tools PERL PHP Python shell scripts SQL commands web application server extensions web development environments and libraries e.g. Microsoft s ActiveX Adobe AIR FLEX FLASH AJAX D HTML Dojo Java JavaScript jQuery UI MooTools Prototype script.aculo.us Simple Object Access Protocol SOAP SWFObject Yahoo User Interface and or the like WebObjects and or the like. In one embodiment the IT ID server employs a cryptographic server to encrypt and decrypt communications. The IT ID component may communicate to and or with other components in a component collection including itself and or facilities of the like. Most frequently the IT ID component communicates with the IT ID database operating systems other program components and or the like. The IT ID may contain communicate generate obtain and or provide program component system user and or data communications requests and or responses.

The structure and or operation of any of the IT ID node controller components may be combined consolidated and or distributed in any number of ways to facilitate development and or deployment. Similarly the component collection may be combined in any number of ways to facilitate deployment and or development. To accomplish this one may integrate the components into a common code base or in a facility that can dynamically load the components on demand in an integrated fashion.

The component collection may be consolidated and or distributed in countless variations through standard data processing and or development techniques. Multiple instances of any one of the program components in the program component collection may be instantiated on a single node and or across numerous nodes to improve performance through load balancing and or data processing techniques. Furthermore single instances may also be distributed across multiple controllers and or storage devices e.g. databases. All program component instances and controllers working in concert may do so through standard data processing communication techniques.

The configuration of the IT ID controller will depend on the context of system deployment. Factors such as but not limited to the budget capacity location and or use of the underlying hardware resources may affect deployment requirements and configuration. Regardless of if the configuration results in more consolidated and or integrated program components results in a more distributed series of program components and or results in some combination between a consolidated and distributed configuration data may be communicated obtained and or provided. Instances of components consolidated into a common code base from the program component collection may communicate obtain and or provide data. This may be accomplished through intra application data processing communication techniques such as but not limited to data referencing e.g. pointers internal messaging object instance variable communication shared memory space variable passing and or the like.

If component collection components are discrete separate and or external to one another then communicating obtaining and or providing data with and or to other component components may be accomplished through inter application data processing communication techniques such as but not limited to Application Program Interfaces API information passage distributed Component Object Model D COM Distributed Object Linking and Embedding D OLE and or the like Common Object Request Broker Architecture CORBA Jini local and remote application program interfaces JavaScript Object Notation JSON Remote Method Invocation RMI SOAP process pipes shared files and or the like. Messages sent between discrete component components for inter application communication or within memory spaces of a singular component for intra application communication may be facilitated through the creation and parsing of a grammar. A grammar may be developed by using development tools such as lex yacc XML and or the like which allow for grammar generation and parsing capabilities which in turn may form the basis of communication messages within and between components.

where Value1 is discerned as being a parameter because http is part of the grammar syntax and what follows is considered part of the post value. Similarly with such a grammar a variable Value1 may be inserted into an http post command and then sent. The grammar syntax itself may be presented as structured data that is interpreted and or otherwise used to generate the parsing mechanism e.g. a syntax description text file as processed by lex yacc etc. . Also once the parsing mechanism is generated and or instantiated it itself may process and or parse structured data such as but not limited to character e.g. tab delineated text HTML structured text streams XML and or the like structured data. In another embodiment inter application data processing protocols themselves may have integrated and or readily available parsers e.g. JSON SOAP and or like parsers that may be employed to parse e.g. communications data. Further the parsing grammar may be used beyond message parsing but may also be used to parse databases data collections data stores structured data and or the like. Again the desired configuration will depend upon the context environment and requirements of system deployment.

For example in some implementations the IT ID controller may be executing a PHP script implementing a Secure Sockets Layer SSL socket server via the information server which listens to incoming communications on a server port to which a client may send data e.g. data encoded in JSON format. Upon identifying an incoming communication the PHP script may read the incoming message from the client device parse the received JSON encoded text data to extract information from the JSON encoded text data into PHP script variables and store the data e.g. client identifying information etc. and or extracted information in a relational database accessible using the Structured Query Language SQL . An exemplary listing written substantially in the form of PHP SQL commands to accept JSON encoded input data from a client device via a SSL connection parse the data to extract variables and store the data to a database is provided below 

Also the following resources may be used to provide example embodiments regarding SOAP parser implementation 

In order to address various issues and advance the art the entirety of this application for INFORMATION TECHNOLOGY INFRASTRUCTURE DESIGN APPARATUSES METHODS AND SYSTEMS including the Cover Page Title Headings Field Background Summary Brief Description of the Drawings Detailed Description Claims Abstract Figures Appendices and otherwise shows by way of illustration various embodiments in which the claimed innovations may be practiced. The advantages and features of the application are of a representative sample of embodiments only and are not exhaustive and or exclusive. They are presented only to assist in understanding and teach the claimed principles. It should be understood that they are not representative of all claimed innovations. As such certain aspects of the disclosure have not been discussed herein. That alternate embodiments may not have been presented for a specific portion of the innovations or that further undescribed alternate embodiments may be available for a portion is not to be considered a disclaimer of those alternate embodiments. It will be appreciated that many of those undescribed embodiments incorporate the same principles of the innovations and others are equivalent. Thus it is to be understood that other embodiments may be utilized and functional logical operational organizational structural and or topological modifications may be made without departing from the scope and or spirit of the disclosure. As such all examples and or embodiments are deemed to be non limiting throughout this disclosure. Also no inference should be drawn regarding those embodiments discussed herein relative to those not discussed herein other than it is as such for purposes of reducing space and repetition. For instance it is to be understood that the logical and or topological structure of any combination of any program components a component collection other components and or any present feature sets as described in the figures and or throughout are not limited to a fixed operating order and or arrangement but rather any disclosed order is exemplary and all equivalents regardless of order are contemplated by the disclosure. Furthermore it is to be understood that such features are not limited to serial execution but rather any number of threads processes services servers and or the like that may execute asynchronously concurrently in parallel simultaneously synchronously and or the like are contemplated by the disclosure. As such some of these features may be mutually contradictory in that they cannot be simultaneously present in a single embodiment. Similarly some features are applicable to one aspect of the innovations and inapplicable to others. In addition the disclosure includes other innovations not presently claimed. Applicant reserves all rights in those presently unclaimed innovations including the right to claim such innovations file additional applications continuations continuations in part divisions and or the like thereof. As such it should be understood that advantages embodiments examples functional features logical operational organizational structural topological and or other aspects of the disclosure are not to be considered limitations on the disclosure as defined by the claims or limitations on equivalents to the claims. It is to be understood that depending on the particular needs and or characteristics of an IT ID individual and or enterprise user database configuration and or relational model data type data transmission and or network framework syntax structure and or the like various embodiments of the IT ID may be implemented that enable a great deal of flexibility and customization. For example aspects of the IT ID may be adapted for cloud computing services. While various embodiments and discussions of the IT ID have been directed to information technology infrastructure design however it is to be understood that the embodiments described herein may be readily configured and or customized for a wide variety of other applications and or implementations.

