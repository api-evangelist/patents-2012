---

title: Image-based challenge-response testing
abstract: Various implementations for verifying that a user device is being operated by a person are described. In some implementations, a method includes receiving a challenge request. The method selects two or more first images from a first image category and one or more second images from one or more second image categories, which are distinct from the first image category. The method sends a challenge to the user device for presentation to the person. The challenge includes a challenge parameter and data describing the two or more first images and the one or more second images. The method receives a challenge response from the user device describing a user selection of at least one image from among the two or more first images and the one or more second images and determines a result of the challenge based on the challenge response and the challenge parameter.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08904493&OS=08904493&RS=08904493
owner: Google Inc.
number: 08904493
owner_city: Mountain View
owner_country: US
publication_date: 20120829
---
The present disclosure relates to electronic communication. In particular the present disclosure relates to image based challenge response testing.

Internet bots also referred to as web robots are often used to collect information and perform automated tasks on the Internet. In some cases Internet bots are used to emulate human activity such as inputting various information into a web based form and submitting that information. To ensure humans are using an online service and not Internet bots a challenge response test can be used which requires a test which is formulated to be simple for a human but difficult for a machine to complete to be completed before access to a particular resource is granted.

However usage of these types of challenge response tests has in some cases resulted in the development of increasingly sophisticated Internet bots which can circumvent the challenge response tests. In response the various challenge response tests have in some cases become more obscure to prevent circumvention by these Internet bots. Consequently these tests have also become increasingly difficult and onerous for human users to complete successfully and can discourage these users from using or signing up for online services that require challenge response testing.

The present disclosure overcomes the deficiencies and limitations discussed in the Background section at least in part by providing innovative systems and methods for verifying that a user device which is seeking access to a software service is being operated by a person. In one aspect various systems and methods include receiving a challenge request to verify a person is operating a user device selecting two or more first images from a first image category and selecting one or more second images from one or more second image categories. The one or more second image categories are distinct from the first image category. The systems and methods further include sending a challenge to the user device for presentation to the person. The challenge includes a challenge parameter and data describing the two or more first images and the one or more second images. The systems and methods receive a challenge response from the user device describing a user selection of at least one image from among the two or more first images and the one or more second images and determine a result of the challenge based on the challenge response and the challenge parameter.

The systems and methods may further include providing authorization for the user device to access a software service if the result of the challenge is determined to be successful. The determination of the result may include determining the result of the challenge to be successful if the user selection satisfies the challenge parameter. The systems and methods may also include selecting an uncategorized image and categorizing the uncategorized image into the first image category based on the result. The challenge may include the uncategorized image the user selection may associate the uncategorized image with the first image category and the determination of the result of the challenge may include a determination that the result of the challenge is successful. The systems and methods may also include querying a data store for evidence associating the uncategorized image with the first image category. The evidence may be based on one or more challenge responses that were previously received and which associate the uncategorized image with the first image category. The systems and methods may determine an evidence threshold to be met based on the evidence and the result and the categorization of the uncategorized image may be further based on the evidence threshold being met.

In another aspect various systems and methods include receiving a challenge request to verify a person is operating a user device selecting two or more first images based on pre determined attribute values and selecting a second image having an unknown attribute value. The systems and methods include sending a challenge to the user device for presentation to the person. The challenge includes a challenge parameter and data describing the two or more first images and the second image. The challenge parameter may instruct the person to select or sort the first and second images based on a challenge parameter. The systems and methods receive a challenge response from the user device describing a user input and determine a result of the challenge based on the challenge response and the challenge parameter. The systems and methods may further include authorizing the user based on the result and determining an attribute value for the second image based on the result.

Other aspects include corresponding systems methods and apparatus including computer program products. The technology described herein is particularly advantageous in a number of respects. For example the technology may provide a challenge to a user that is difficult for an automated program to circumvent by for example reverse engineering but is easily completable by a human user may select images based on attribute values determined for the images to reduce the probability of an automated program circumventing the challenge may leverage input provided by a user to categorize an uncategorized image or determine an undefined attribute for a given image etc. It should be understood that this list of features and advantages is provided by way of example and is not all inclusive as many additional features and advantages fall within the scope of the present disclosure. Moreover it should be noted that the language used in the present disclosure has been principally selected for readability and instructional purposes and not to limit the scope of the subject matter disclosed herein.

In some embodiments the technology described herein includes systems and methods for verifying that a user device which is seeking access to a software service is being operated by a person. For example the systems and methods receive a challenge request to verify a person is operating the user device. In response the system and methods select two or more first images from a first image category and one or more second images from one or more second image categories the one or more second image categories being distinct from the first image category. For instance three related images can be selected from a tools category that depict various different hand tools and two unrelated images such as an image of bicycle handles and an image of stool can be respectively selected from two other categories such as a replacement parts category and a home furnishings category. In this way the related images can be easily distinguished from the unrelated images by a person viewing them. The challenge includes data describing these images and a challenge parameter. The challenge parameter may describe how the images should be interacted with by the person to which the challenge is being sent. For instance the challenge parameter may instruct the person to select the images that do not belong to the first category.

Responsive to the sending of the challenge these systems and methods receive a challenge response from the user device describing a user selection of at least one image from among the two or more first images and the one or more second images. The systems and methods then determine a result of the challenge based on the challenge response and the challenge parameter. For instance the systems and methods may determine a result of the challenge to be successful if the user selection satisfies the challenge parameter. The challenge parameter may in some examples require the user to only select all the images from the first category or the second category. If the result of the challenge is determined to be successful the systems and methods can provide authorization for the user device to access the software service.

In various embodiments the systems and methods may include an uncategorized image in the challenge and based on the user selection included in the challenge response may categorize the uncategorized image. For example the systems and methods may categorize the uncategorized image into the first image category if the user selection associates the uncategorized image with the first image category and the result of the challenge is determined to be successful. In this way in addition to verifying that a person is operating the user device uncategorized images may be reliably categorized. The systems and methods may also aggregate a plurality of images from one or more information sources categorize these images and determine attribute values for these images based on the object s that are depicted by them. These attributes may then be used to select the images from the first category and or one or more second categories for the challenge. For example selecting images having widely disparate attribute values from a particular category results in the selection of images that are related but that depict objects that are clearly distinct from one another in size color and or shape etc. This is advantageous as it can prevent circumvention of the challenge by a sophisticated agent such as an Internet bot that is capable of correctly identifying images which depict similarly sized shaped and colored objects as being related. More specifically this can prevent the agent from achieving a high challenge success rate by grouping images based on any easily measured attribute such as brightness color distribution or number of lines.

It should be understood that these example systems and methods are provided by way of illustration and that other variations are described herein and fall within the scope of the present disclosure.

In the depicted embodiment the verification server is coupled to the network via signal line and interacts with the other entities . . . and of the system via the network . In some embodiments the verification server includes one or more processors and one or more storage devices storing data or instructions for execution by the one or more processors. Although only one verification server is shown multiple verification servers may be included in the system .

The verification server as depicted includes a verification engine also referred to herein as and a verification data store also referred to herein as . The verification engine is software code logic or routines for verifying that a user device which is seeking access to a software service is being operated by a person. Additional structure and functionality of the verification engine and the verification data store are further described below with reference to at least .

In some embodiments an instance of the verification engine is included in and operable on the verification server . In other embodiments an instance of the verification engine may be included in and operable on the application server . An instance of the verification engine may also be included in the application server or another entity coupled to the server such as a user device in addition to or in the place of being included in the verification server .

The user devices . . . are computing devices having data processing and data communication capabilities. In some embodiments a user device may include a processor a memory a power source and one or more network interfaces coupled via a data bus where one or more network interfaces broadcast and receive control data voice data and or network data via radio signals. For example the user devices may include one or more wired or wireless network interfaces for sending and receiving network data a graphics processor a high resolution touchscreen a physical keyboard forward and rear facing cameras sensors such as accelerometers and or gyroscopes a GPS receiver a Bluetooth module memory storing applicable firmware and various physical connection interfaces e.g. USB HDMI headset jack etc. etc. Additionally an operating system for managing the hardware and resources of the user device application programming interfaces APIs for providing applications access to the hardware and resources a user interface module for generating and displaying interfaces for user interaction and input and applications such as applications for making phone calls video calls web browsing messaging social networking gaming capturing digital video and or images etc. may be stored and operable on the user device .

In some embodiments a user device is a computing device such as a workstation computer a desktop computer a laptop computer a netbook computer a tablet computer a smartphone a set top box unit a television with one or more processors embedded therein or coupled thereto and capable of receiving viewer input accessing video content on computer networks such as the Internet and executing software routines to provide enhanced functionality and interactivity to viewers or the like. In other embodiments different user devices . . . comprise different types of computing devices. For example the user device is a laptop the user device is a tablet computer and the user device is a smartphone. In some embodiments the user device is a client or terminal device.

The user devices . . . in are provided by way of example. While illustrates three or more user devices the present disclosure applies to any system architecture having one or more user devices . In the depicted embodiment the user device with which user interacts is coupled to the network via signal line . The user devices and with which the users and respectively interact are coupled to the network via signal lines and respectively.

In the depicted embodiment the user device contains a user application executable by a processor not shown of the user device to provide for user interaction and to send and receive data via the network . In particular the user application is operable to instruct the user device to render user interfaces receive user input and send information to and receive information from the verification engine . While in just the user device is depicted as including the user application any number of user devices may include an instance of the user application . In these or other embodiments the user application is stored in a memory not shown of the user device and is accessible and executable by a processor not shown .

In some embodiments the user application generates and presents user interfaces to a user via a display not shown . For example the user application may generate and present the user interfaces and depicted in based at least in part on information received from the verification engine via the network . In some embodiments the user application is code operable in a browser launched on the user device the browser receives interface instructions from the verification engine of the verification server via the network in the form of a mark up language e.g. HTML XML etc. style sheets e.g. CSS XSL etc. graphics and or scripts e.g. JavaScript ActionScript etc. and the browser interprets the interface instructions and renders an interactive Web User Interface WUI for display on the user device based thereon. In other embodiments some or all of the interface instructions are provided by the user application while the verification information is provided by the verification engine . Other variations are also contemplated and within the scope of this disclosure. The user application is also operable to receive input signals from the user via an input device not shown of the user device and to send information to the verification engine via a communication unit not shown coupled to the network such as one like or substantially similar to the communication unit .

The network includes one or more wired or wireless networks and may have any number of configurations such as a star configuration token ring configuration or other known configurations. The network may include a local area network LAN a wide area network WAN e.g. the Internet and or any other interconnected data path across which multiple devices may communicate. The network may be coupled to or include mobile cellular networks including distributed radio networks and a hub providing a wireless wide area network WWAN or other telecommunications networks. In some embodiments the network may include Bluetooth communication networks for sending and receiving data. The network may transmit data using a variety of different communication protocols including user datagram protocol UDP transmission control protocol TCP hypertext transfer protocol HTTP hypertext transfer protocol secure HTTPS file transfer protocol FTP direct data connection wireless access protocol WAP various email protocols etc. User devices may couple to and communicate via the network using a wireless and or wired connection. In some embodiments the communication unit not shown of the user devices include a wireless network interface controller for sending and receiving data packets to an access point of the network . For example the user devices may be Wi Fi enabled devices which connect to wireless local area networks WLANs such as wireless hotspots. The user devices may also include one or more wireless mobile network interface controllers for sending and receiving data packets via a WWAN of the network .

The image server is a computing device or system for providing graphical images to the other entities of the system via the network . In the depicted embodiment the image server is electronically communicatively coupled to the network via signal line for communication with the other components of the system . In some implementations the image server may provide a network based image management service to its end users. For example users may use a user interface associated with the image management service to upload and organize publish and share photographs with other users . In other embodiments the image server may provide an online marketplace for selling products and may store and serve graphical images of those products to other entities of the system via the network . It should be understood that the image server is not limited to providing the above noted services and may include any other network based or cloud based service that involve the provision of images to users .

The search server is a computing device or system that includes a search engine for retrieving results that match search terms from an image data store. In the depicted embodiment the search server is communicatively coupled to the network via signal line . The other entities of the system may interact with the search engine via the network to retrieve the results matching various search terms provided to the search engine . For example the verification engine may signal the search engine to provide search results that include images of an object or object type. In some embodiments the search results may be filtered by the search engine to include particular categories of images such as images of products place people animals etc. Although only one search server is shown it should be understood that multiple search servers may be included in the system .

The image server and the search server may each include an image data store for locally storing the images served by the image server . The image server and the search server may each include distinct and independent instances of the image data store e.g. and or may share the same image data store . In some embodiments the image data store may be a cloud based storage system distributed across network . Various additional structure and functionality of the image data store are discussed in further detail below.

The application server is a computing device or system for providing various computing functionalities services and or resources to the other entities of the system . In the depicted embodiment the application server is communicatively coupled to the network via signal line for communication with the other components of the system . In the depicted embodiment the application server includes an application engine . The application engine in some embodiments is a network based software service operable to provide the computing functionalities services and or resources and to send data to and receive data from the other entities of the network . For example the application engine may provide users with a service for user account management internet searching social networking web based email blogging micro blogging photo management video music and multimedia hosting distribution and sharing business services news and media distribution or any combination of the foregoing services. It should be understood that the application server is not limited to providing the above noted services and may include any other network based or cloud based service.

The application server may in some embodiments include an instance of the verification engine along with an instance of the verification data store and thus locally access utilize the functionality provided by the verification engine . In other embodiments the application server may interact with verification server via the network to access utilize the functionality of the verification engine . For simplicity a single block for the application server is shown in . However in this or other implementations several distinct third party servers not shown may be coupled to the network via distinct signal lines which operate applications providing distinct or competing functionalities and or resources.

In some embodiments application server and more particularly the application engine may require users to be registered to use the services provided thereby. In some embodiments to register to use the application engine the application engine may require a user to provide identifying information for example a valid electronic mail address and password and the application may test the validity of the electronic mail address by sending the a confirmation message to the address containing instructions for confirming the account e.g. selecting a hyperlink to a confirmation webpage operated by the service provider . In other embodiments the application engine may interact with a federated identity server not shown to register authenticate users . Once registered the application engine may require a user seeking access to authenticate by inputting the identifying information in an associated user interface.

The verification server the image server the search server and the application server may each include a server server array or any other computing device or group of computing devices having data processing storing and communication capabilities. In these or other embodiments the servers and or may include a virtual server i.e. a virtual machine implemented via software which operates in a host server environment and accesses the physical hardware of the host server including for example a processor memory storage network interfaces etc. via an abstraction layer e.g. a virtual machine manager . In these or other embodiments the servers and or may be implemented using a cloud based architecture with its software components operating as a service on one or more servers distributed through the network . It should be understood that the servers and or can be stored in any combination of devices and servers or in only one device or server. In some embodiments the servers and may include one or more computing devices having the same or similar computer architecture as the verification server described with reference to .

The verification data store and the image data store are information sources for storing and providing access to stored data. In some embodiments the verification data store and or the image data store are or may be included in local memory devices. For example the verification data store may be included in a memory such as the memory see of the verification server and the image data store may be included in a memory not shown of the search server the image server and or the application server . In other embodiments the verification data store and the image data store may be or included in distributed data stores such as a computing storage devices adapted for information storage and retrieval. In some embodiments the verification data store and or the image data store may include a database management system DBMS operable by or accessible to the verification server . For example the DBMS could be a structured query language SQL DBMS. In these embodiments the verification data store and the image data store may in cooperation with one or more computing devices store data in an object based data store or multi dimensional tables comprised of rows and columns and manipulate i.e. insert query update and or delete data entries stored in the verification data store using programmatic operations e.g. SQL queries and statements or a similar database manipulation library .

The processor includes an arithmetic logic unit a microprocessor a general purpose controller or some other processor array to perform computations and provide electronic display signals to a display device not shown . The processor may be coupled to the bus for communication with the other components of the verification server . The processor may process data signals and may have various computing architectures including a complex instruction set computer CISC architecture a reduced instruction set computer RISC architecture or an architecture implementing a combination of instruction sets. Although only a single processor is shown in multiple processors may be included and each processor may include a single processing core or multiple interconnected processing cores. The processor may be capable of supporting the display of images the capture and transmission of images perform complex tasks including various types of feature extraction and sampling etc. It should be understood that the verification server may include various operating systems sensors displays additional processors and other physical configurations.

The memory stores instructions and or data that may be executed by the processor . In the depicted embodiment the memory stores at least the verification engine . In other embodiments such as an embodiment where represents the computer architecture of the application server the memory may also store the application engine . In the forgoing embodiments the memory is also capable of storing other instructions and data such as an operating system hardware drivers other software applications databases etc. The memory is coupled to the bus for communication with the processor and the other components of verification server . The instructions and or data may comprise code for performing any and or all of the techniques described herein. In particular the memory includes a non transitory computer usable e.g. readable writeable etc. medium which can be any apparatus or device that can contain store communicate propagate or transport instructions data computer programs software code routines etc. for processing by or in connection with the processor . A non transitory computer usable storage medium may include any and or all computer usable storage media. In some implementations the memory may include volatile memory non volatile memory or both. For example the memory may include a dynamic random access memory DRAM device a static random access memory SRAM device flash memory a hard disk drive a floppy disk drive a CD ROM device a DVD ROM device a DVD RAM device a DVD RW device a flash memory device or any other mass storage device known for storing information on a more permanent basis. It should be understood that the memory may be a single device or may include multiple types of devices and configurations.

The communication unit is coupled to the network by the signal line and coupled to the bus . In some embodiments the communication unit includes network interface devices I F for wired and wireless connectivity with the network . For example the communication unit may include a CAT 5 interface USB interface or SD interface transceivers for sending and receiving signals using Wi Fi Bluetooth or cellular communications for wireless communication etc. The communication unit can link the processor to the network that may in turn be coupled to other processing systems. The communication unit can provide other connections to the network and to other entities of the system using standard communication protocols including for example TCP IP HTTP HTTPS SMTP etc.

The verification data store is an information source capable of storing and providing access to data. In the depicted embodiment the verification data store is coupled for communication with the components and of the verification server via the bus and coupled via the processor for communication with the acquisition module the categorization module the attribute generator the pre processor the challenge generator the response analyzer the learning module and the API module . In some embodiments the components and are configured to manipulate i.e. store query update and or delete data stored in the verification data store using programmatic operations.

The data stored by the verification data store may include information generated received or sent by the verification engine and or its constituent components including the acquisition module the categorization module the attribute generator the pre processor the challenge generator the response analyzer the learning module and the API module . In some embodiments the verification data store may include an ontology database or graph which describes all of the main categories and subcategories and their relationships to one another and the challenge generator may reference this table when selecting the first and second image categories.

For example the verification data store in cooperation with the verification engine maintains a collection of image records containing graphical images categorized based on an ontological classification scheme. The image records may additionally or alternatively be organized based on stored attributes associated with the graphical images included in the records. The verification data store may also store information related to challenge requests challenges challenge responses image attributes metadata learning data image evidence etc. as discussed in further detail elsewhere herein.

The verification engine is software code logic or routines for verifying that a user device which is seeking access to a software service is being operated by a person. In some embodiments the verification engine can generate a challenge send it to the user device for presentation to the user operating the user device receive a challenge response from the user device and analyze the challenge response to determine whether a person is operating the user device . The verification engine may also advantageously perform additional processing to categorize an image and or determine an image attribute based on the user s response.

In addition to its conventional meaning a challenge includes a request for a user to perform a specified action. In some embodiments the challenge includes one or more challenge parameters and data describing a plurality of images. The data describing the plurality of images may be instances of the images themselves electronic references indicating an electronic location of the images such as uniform resource locators URL a combination of the foregoing etc. The challenge parameter may be an instruction for the user to perform a certain action in association with the images in the challenge. For example the challenge parameter may request a user to select or sort e.g. associate rank or otherwise organize one or more of the images as described in further detail below with reference to for example. By way of further illustration the challenge parameter may require the person to select the two or more first images that belong to the first image category and not select the one or more second images that belong to the one or more second image categories and a requirement that the user selection select the one or more second images that belong to the one or more second image categories and not select the two or more first images that belong to the first image category.

The verification engine may generate the challenge responsive to receiving a challenge request or may autonomously generate the challenge. In some embodiments the verification engine may receive a challenge request from another entity of the system such as a user device or the application server via the communication unit and the network . For example the user device or the application server may transmit a challenge request in the form of an http request and the verification engine may respond by generating and sending a challenge in the form of an http response. Other communication protocols such as those described with reference to the network may also be used to send and receive a challenge request a challenge and a challenge response.

In some embodiments such as the example embodiments depicted in the verification engine may interact and communicate with one or more instances of the application engine the verification data store and the user application . The verification engine may be stored and operable on any of the entities coupled to the network such as the verification server the application server and or a user device .

In the embodiment depicted in the verification engine includes an acquisition module a categorization module an attribute generator a pre processor a challenge generator a response analyzer a learning module and an API module that communicate over a software communication mechanism . The software communication mechanism may be an object bus such as CORBA direct socket communication such as TCP IP sockets among software modules remote procedure calls UDP broadcasts and receipts HTTP connections function or procedure calls etc. Further any or all of the communication could be secure SSH HTTPS etc. . The software communication mechanism can be implemented on any underlying hardware such as a network the Internet a bus a combination thereof etc.

In some embodiments the components and or of the verification engine are coupled via the processor for electronic communication with one another and the memory the communication unit and or the verification data store . In some embodiments these components may provide data directly to one another. In other embodiments these components and or may store data in the memory and or verification data store for access and retrieval by the other components and or . For example any of the components and or may communicate with the memory and or the verification data store to store and access data. In another example one or more of the components and or may be stored and operable on disparate computing devices distributed over the network and may communicate and exchange data via the network .

The verification engine and its respective sub components and may be sets of instructions stored in the memory and executable by the processor for communication with the other components of the verification server may be implemented via one or more application specific integrated circuits ASICs coupled to the bus for cooperation and communication with the other components of the server sets of instructions stored in one or more discrete memory devices e.g. a PROM FPROM ROM that are coupled to the bus for cooperation and communication with the other components of the server a combination thereof etc. In some implementations one or more components of the verification engine the acquisition module the categorization module the attribute generator the pre processor the challenge generator the response analyzer the learning module and the API module are sets of instructions executable by the processor to provide their functionality. In other implementations one or more of these components and are stored in the memory of the server and are accessible and executable by the processor to provide their functionality. In any of the foregoing implementations these components and may be adapted for cooperation and communication with the processor and other components of the server .

It should be understood that the embodiment depicted in is provided by way of example and that other configurations for the verification engine are possible and contemplated. For example some or all of the components and of the verification engine may be combined or segmented into further components. Additionally the verification engine or aspects thereof may be integrated into other software such as the application engine or applications operated by the application server the search server or the image server .

The acquisition module is software code logic or routines for acquiring image related information. In some embodiments the acquisition module is an aggregator that aggregates image related information from one or more information sources coupled to the network . An information source may be a computing and or storage device capable of storing and providing access to information including image data. The image related information aggregated from the information sources by the acquisition module may include electronic references to images information describing the images and the objects depicted by the images instances of the images themselves etc. In some embodiments the image related information may include category information for the images. For example the images may depict various objects which are categorized into various categories and the acquisition module may aggregate the images as well as category information for those images. Images aggregated by the acquisition module that have been previously categorized are also referred to herein as pre categorized images. The images aggregated by the acquisition module may have any format including for example raster formats vector formats compound formats stereo formats or the like. As a further example the images may be Joint Photographic Experts Group JPEG images Tagged Image File Format images TIFF raw images Portable Network Graphics PNG images Graphics Interchange Format GIF images bitmap images Scalable Vector Graphics SVG graphics Portable Document Format PDF graphics etc.

In some embodiments the image related information aggregated by the acquisition module from the one or more information sources may include attributes for the images being aggregated. An attribute may describe a quality or property of an image or the objects depicted by the image. For example an attribute may describe the image s resolution color depth creation date exposure information camera or lens information format distortion value etc. an object s size shape weight cost price age texture color sheen structure configuration material an overall perception or look and feel of the image or object s depicted thereby or the like. An attribute may have an associated attribute value to quantify the attribute.

The acquisition module may aggregate local information sources or information sources distributed across a network e.g. network . The acquisition module may store the image related information aggregated by it in the verification data store for access and retrieval by the other components and of verification engine or may provide it directly to one or more of these components and . For example the acquisition module may store a collection of records in the verification data store which include the images attributes and category information. In some embodiments the acquisition module may fetch images from unaffiliated websites e.g. via URIs so they may be served by the verification engine in association with a challenge. This is advantageous because it makes it difficult for an agent attempting to circumvent the challenge to backtrack the images to their original sources e.g. URIs .

The categorization module is software code logic or routines for categorizing images. In some embodiments the categorization module interacts with the acquisition module to categorize images once they have been aggregated by the acquisition module . For example the acquisition module may send images to the categorization module along with any descriptive information associated with those images such as metadata attributes category information etc. and the categorization module may categorize the images by storing them in the verification data store according to various categories. In another example the categorization module may retrieve the aggregated information from the verification data store to categorize it.

The categorization module may categorize an image into more than one category. In some embodiments the categorization module may use a taxonomy ontological classification scheme to categorize an image. For example an image may be classified into ordered categories such as a series of categories of increasing precision. By way of illustration an image may depict a Philips screwdriver and the categorization module may categorize the image into the following series of categories hardware tools hand tools screw drivers Philips head screw drivers where the hardware category in this example may be interchangeably referred to herein as the main category or the general category and its subsequent categories as subcategories or more precise categories. The categorization module may categorize an image using multiple classification schemes hierarchies which may be loosely related. For example the categorization module may categorize an image depicting running shoes as sporting equipment and clothing which may be categories respectively belonging to different or loosely related classification schemes hierarchies.

To categorize an image the categorization module may store the image in association with a category series of categories two or more unrelated or loosely related categories taxonomy etc. For example the categorization module may store the image in the verification data store along with data describing the category series of categories etc. that the image belongs to. The categorization module may also store other information related to the image such as attribute information in the verification data store . In some embodiments not category information may be available for an image and the categorization module may store the image in the verification data store as uncategorized. In other embodiments an image may only have weak or unreliable category information associated with it and the categorization module may unofficially weakly categorize the image. In these latter embodiments the image may be regarded as not categorized until stronger evidence has been gathered as discussed in further detail below with regard to the learning module and for example.

The attribute generator is software code logic or routines for determining attributes for the images. As described above an attribute may describe a quality of an image or the objects depicted by the image. For a given image the attribute generator may use any available attribute information as aggregated by the acquisition module and or the image data of the image to determine attributes and corresponding attribute values for the image.

In some embodiments the attribute generator may determine a profile attribute and value for each image stored in the verification data store based on the image data of the image. The profile value may reflect an overall perception or quality of the image. The profile value may be based one or more of a property of the object depicted by the image a category of the image and or the image s lighting balance tone contrast brightness colors exposure quality resolution sharpness etc. or other similar attributes. The profile values of the images may be used to compare the images to one another to determine which images are easily detectable as similar or different in nature.

In some embodiments the attribute generator cooperates with the acquisition module and or the categorization module to determine attribute for the images as they are aggregated and or categorized by the acquisition module and categorization module respectively. The attribute generator may receive image related information directly from the acquisition module and or the categorization module or may retrieve the image related information from the verification data store or the other entities of the system .

The pre processor is software code logic or routines for processing images for obscurity. In some embodiments the pre processor manipulates the image data of an image to make the contents of image more difficult for a software application to process and determine the objects it depicts without rendering the image unrecognizable to a human user. For example the pre processor can process the image to the extent that it cannot be used to recover the image using the functionality of a search engine e.g. . In this example the search engine may accept an image as a search input and may be able to identify images on the network that are the same or substantially similar to the input image e.g. that depict the same or substantially similar objects as the input image . Pre processing the images can prevent an agent such as an Internet bot or a web crawler from being able to use them in cooperation with the search engine to reliably retrieve unprocessed instances of images and or information characterizing the objects in those images. Thus pre processing the images can reduce the probability of the agent automatically determining the contents of an image and using this determination to successfully complete a challenge as described in further detail below. When obscuring an image the pre process may create a duplicate instance of the original image and then manipulate the underlying data of the image to homogenize it thus rendering its contents less recognizable to a software application attempting to reverse process the image. For instance to obscure an image the pre processor may resample reformat resize blur filter pixelate de saturate or otherwise process the data.

The pre processor may pre process an image once it has been aggregated by the acquisition module categorized by the categorization module or after attributes for the image have been determined by the attribute generator . In some embodiments the pre processor receives the image directly from the acquisition module the categorization module and or the attribute generator . In other embodiments the pre processor retrieves the image from the verification data store .

The challenge generator is software code logic or routines for receiving a challenge request and generating and sending a challenge. In some embodiments the challenge generator is coupled to the network via the communication unit to receive a challenge request. In some embodiments the challenge request may be generated by and received from a user device . In other embodiments the challenge request may be generated by and received from the application server . In yet other embodiments no challenge request is received and the verification engine programmatically generates and sends a challenge.

In some embodiments responsive to receiving a challenge request the challenge generator may parse the request for information identifying the user and the user s location. For example the challenge request may include location information for the user such as an IP address positioning system coordinates etc. and the challenge generator may use the location information to formulate the challenge. In some embodiments the challenge generator is capable of determining the location approximate location of a user device using an IP address of a user device by cross referencing the IP address with other information sources such as internet server provider databases internet registries etc. coupled to the network . In other embodiments the challenge generator can interact with a geolocation engine operable by a third party server not shown coupled to the network to process signal information transmitted between the user device and a plurality of transmission nodes of the mobile network using multilateration or triangulation to determine the geographic location of a user device .

In some embodiments the challenge generated by the challenge generator may be a challenge for the user to distinguish between images included in the challenge based on a particular property associated with one or more of the images. By way of example the property may be a category or categories the images belong to or in some instances objects depicted by images attributes attributable to the objects of the images or the like. For instance the challenge generator may select a first set of images that depict objects that are generally different in some quantifiable way but share a similar property select one or more second images depicting objects that do not share the similar property with the first set of images i.e. that are different in some quantifiable way from the first set of objects based on the property and may include an instruction for the user to select based on the property the one or more images that are different in some quantifiable way or the set of images that are the similar in some quantifiable way.

In an embodiment where the property which distinguishes the images included in the challenge is a category the images belong to the challenge generator selects two or more first images from a first image category and one or more second images from one or more second image categories. The first image category and the one or more second image categories can be determined by the challenge generator at random or based on their relationship to one another. For example the verification data store may store a taxonomy describing how strongly various categories are related to one another if at all and the challenge generator may select images from the first image categories and the one or more second categories based on the taxonomy. Categorization of images is discussed further above with reference to and below with reference to for example. In an example embodiment where the challenge being generated instructs the user to select the images that do not belong to the first image category the number of first images selected exceeds the number of second images selected. However it should be understood that many different variations of challenges are contemplated and any number of images may be selected for inclusion in the challenge by the challenge generator and the mix between images selected from the first image category and the one or more second image categories can vary depending on the purpose of the challenge.

When selecting the images to be included in a challenge the challenge generator may also include the attributes for those images as generated by the attribute generator or determined by the acquisition module . For example the challenge generator may select the images based on a description of what they depict profile values metadata or of the other attributes discussed above for example with reference to the acquisition module or the attribute generator .

Selecting the images based on attributes is advantageous as it can further frustrate the processing of the images by a software program that is posing as a human operating as proxy for a human. For instance the challenge can include an image that is different from other images in the challenge e.g. an image of a spatula versus images of a wrench screwdriver and hammer etc. based on an attribute or category that is not easily discernible by a sophisticated agent such as an Internet bot can include images to be ranked based on an attribute that is not easily discernible by the agent e.g. the weight of the objects depicted by the images the relative sizes of the objects depicted by the images the price of the objects depicted by the images etc. or the like.

In some embodiments the challenge generator may select images from one or more categories that have widely disparate attribute values e.g. profile values weight values price values size values etc. which can result in the selection of images that depict objects that a human can discern as belonging various categories but that appear unrelated from a data analysis perspective. This can make it highly improbable for an agent such as a software program to deduce based on an analysis of these images that these images belong to the same category. In other embodiments the challenge generator may select images from two or more image categories which all have substantially similar or the same attribute values e.g. profile values which results in the selection of images that a human can discern as belonging to different categories but which appear to all be substantially similar to a software program e.g. Internet bot analyzing the images. Beneficially this can greatly reduce the probability of the software program circumventing the challenge by emulating human behavior and correctly answering the challenge.

The challenge generator can in some embodiments generate a challenge based on attributes of the objects depicted by the images. To do so the challenge generator may select using a certain attribute two or more first images having certain attribute values for that attribute. The pre determined attributes values can respectively reflect qualities of the objects depicted by the images. In some embodiments the attribute values may be pre determined by the attribute generator . For example the challenge could include two or more images depicting objects having a certain attribute and values for that attribute and a challenge parameter instructing the user to select or sort the images in a particular order based on that the values the user perceives the objects to have for that attribute. The attribute may for instance be the size or weight of the objects depicted by the images and the challenge parameter may instruct the user to select or sort the images in order of increasing size or weight. In a further example the challenge could include images of a bottle of shampoo a 5 gallon bucket of water a horse and a house all of which have an associated size attribute value as well as an instruction for the user to select the images in order of increasing size. Another example may include generating a challenge having images depicting various products e.g. a loaf of bread a gallon of milk a half gallon of premium ice cream and a whole ham etc. and asking the user to order the products by price. In this example the challenge generator could retrieve a current price for those items from a server hosting an online marketplace or the acquisition module could refresh the image records stored in the verification data store with updated pricing information at regular intervals based on the information it aggregates.

In yet another example the challenge may be generated to include two or more first images whose values for a particular attribute are similar or the same and one or more second images whose values for that attribute differ significantly from those of the first images. The first images may for instance depict objects that are substantially similar or same in size weight or price etc. second image s may depict an object s that is are substantially different in size weight or price etc. from the first images and the challenge may instruct the user to identify which of the images are the most different in size weight or price etc. It should be understood that the attributes used by the challenge generator for image selection may reflect any quality or property of the objects depicted by the images.

A challenge generated by challenge generator may also include one or more undetermined images such as an uncategorized image or an image that has an undetermined attribute. In addition to its conventional meaning the term uncategorized can also include images that may be weakly categorized or unofficially categorized into one or more categories as discussed elsewhere herein. Likewise the phrase undetermined attribute in additional to its conventional meaning may include an attribute for which a quantity value has been weakly or unofficially determined. The verification data store may store data indicating what attributes have been determined for a given image to what level an image has been categorized not at all weakly unofficially to what level an attribute value has been determined not at all weakly unofficially or the like and the challenge generator may query the verification data store for the one more images that are uncategorized or have a particular attribute value that has not yet been determined for it e.g. by the attribute generator .

Including one or more uncategorized images or one or more images for which an attribute has not yet been determined in a challenge is advantageous as it can leverage input provided by the user to categorize the image s or determine an attribute and a corresponding attribute value for the image s . For example the challenge generator may generate and send a challenge for display to a user which includes three images selected from a first image category one image selected from a second image category that is distinct from the first image category an uncategorized image and an challenge parameter instructing the user to select the image s that does do not belong to the first image category. If the user provides input selecting the uncategorized image as not belonging to the first image category evidence that the uncategorized image does not belong to the first image category can be stored by the response analyzer in the verification data store in association with the uncategorized image. However if the user provides input associating the image with the first category which in this example would be not selecting image evidence associating the uncategorized image with the first image category may be stored by the response analyzer in the verification data store in association with the uncategorized image. The learning module in cooperation with the categorization module may the use this evidence to categorize the uncategorized image into an applicable category. Additional examples of leveraging the user input provided in a challenge response to determine an image category or attribute for an image are provided below with reference to the learning module and for example.

To send the challenge the challenge generator may in some embodiments cooperate with the application engine . For example the challenge generator may transmit the challenge to the application engine and the application engine may forward it to the user device for presentation to the user . In yet other embodiments the challenge generator may transmit the challenge directly to the user device via the network . Other configurations are also contemplated and fall within the scope of this disclosure.

In response to receiving the challenge the user application operating on the user device may present the challenge to a user via one or more user interfaces. Various example interfaces are described below with reference to at least . The challenge sent by the challenge generator may include presentational information and the user application may use the presentational information to form the look and feel of the user interfaces. For example the electronic file s or data stream s may be formatted using a markup language e.g. HTML XML etc. style sheets e.g. CSS XSL etc. graphics and or scripts e.g. JavaScript ActionScript etc. and the user application may interpret the interface instructions and render an interactive Web User Interface WUI for display on a user device based thereon. In other embodiments the user application may determine the formatting and look and feel of the user interfaces independently or the presentation information may be provided by the application engine . Using the user interfaces presented by the user application the user can input commands to complete the challenge as discussed in further detail below.

The response analyzer is software code logic or routines for determining a result of a challenge based on a challenge response. In some embodiments the challenge response may include user input such as a user selection and the response analyzer may compare this user input to a challenge parameter used by the challenge generator to generate the challenge to determine if the user successfully completed the challenge. For instance the response analyzer can determine the result of the challenge to be successful if the challenge parameter of the challenge is satisfied by user input included in the challenge response and unsuccessful if it is not.

In some embodiments the response analyzer may determine a result for the challenge by interpreting the user input to identify which if any of the images the user selected or sorted and then assessing whether the image or images selected by the user if any satisfies the challenge parameter. In some embodiments none of the images may meet the requirements of the challenge and a non selection can satisfy the challenge parameter. In other embodiments the challenge parameter may require the user to sort images into corresponding categories indicate which image or images do not belong to a particular category rank the images in a particular order based on an attribute etc. and the response analyzer may identify how the images were interacted with in the challenge response and compare it to the challenge parameter to determine whether the challenge was completed successfully.

Additional examples variations structure and functionality of the response analyzer are discussed with reference to for example.

The learning module is software code logic or routines for determining an undetermined property for an image based on a challenge response. In some embodiments the response analyzer signals the learning module to perform this determination. For example the challenge response may contain data that can be used for determining a previously un established image property such as an image category or an attribute and the response analyzer upon detecting this information may signal the learning module to process it. In other embodiments another module such as a controller module not shown may signal the learning module or the learning module can perform this functionality independently.

The property determination performed by the learning module can include categorizing an uncategorized image or determining an undetermined attribute for an image. In some embodiments the property determined by the learning module can reflect an actual factual property associated with the object depicted by the image such as an object s relative weight size etc. as discussed elsewhere herein. In other embodiments the property determined by the learning module can reflect a user s perception about the object depicted by the image. For example in response to challenging to the user to rank an uncategorized image by price value the learning module may deduce how much the object depicted by the image is worth or should cost. As a further example a challenge could include images of a paper back book and hard cover book and the learning module could determine based on the challenge response whether the user perceives the paper back or hard cover book to be worth more. This is advantageous as the user perception information determined by the learning module can be used by retail services to market products based on their customer s actual perceptions of those products.

A threshold may govern how the learning module performs the categorizing or attribute determination. For example the threshold may request a certain amount of evidence be collected justifying the category or attribute before the learning module can categorize or determine the attribute for the image. The threshold may require a certain number of challenge responses associating an image with a particular category or establish a value for a particular attribute. The threshold may also require that any supportive evidence outweigh contradictory evidence by a certain amount before the learning module can categorize or determine the attribute for the image.

By way of example a particular uncategorized image may have been included in series of challenges sent to various users over a period of time. The challenge responses received in reply to those challenges may have associated the uncategorized image with a hardware . . . tools hand tools category six times and a home furniture . . . bar stools category once. The threshold may require that the uncategorized image be associated with the same category at least six times with no more than one conflict association before the image can be formally categorized into that category. In this example since the threshold has been satisfied the learning module categorizes the image into the image category for example by updating a record stored in the verification data store for that image.

In some embodiments the learning module stores in the verification data store user input provided to associate an image with a particular category or establish a value for a particular attribute regardless of whether it is contradictory with other evidence that has been stored for that image and can use this information going forward to make a formal determination. For instance in an embodiment where the challenge response positively associates an uncategorized image with a particular image category the learning module may use the following example threshold algorithm to categorize it. In this example a positive association is evidence for the item belonging to a particular category and in every more general related category. For example if the particular category is hand tools than the more general related categories may be hardware tools. The positive association is also evidence against any unrelated categories e.g. kitchen utensils but may be neutral for more precise categories e.g. screwdrivers .

More specifically a positive association of an image with a particular category can increment an evidence counter for that image and category by 1. However for the categories that are neither more general nor more precise relative to that category the evidence counters for that image and those categories can be reduced by 0.5. Further a negative association of an image with a particular category can reduce the evidence counter for that image and category by 0.5. However for all other categories the evidence counters for that image and those categories can be incremented by 0.1.

Once an evidence counter for an image and a category reaches a pre determined threshold value e.g. 100 then the learning module may categorize the image. In some embodiments to reduce the effect of possible false negative or positive associations a limited number of conflicting associations may be allowed without affecting the evidence counter. It should be understood that the incrementing and reduction values described above are provided by way of example and other values may be used. Moreover like all embodiments discussed herein the above embodiments are provided by way of illustration and other techniques drawn from areas such as machine learning and statistics may be used by the learning module to determine an undetermined property for an image based on a challenge response.

Additional examples variations structure and functionality of the learning module are discussed below with reference to for example.

The API module is software code logic or routines for interfacing with and providing the functionality of the verification engine to an external software application such as the application engine or the user application . In some embodiments the API module relays requests and responses from the external software application to the appropriate components of the verification engine for processing. For example in an implementation where the application engine and the verification engine resides on distinct servers coupled via the network the application engine may interface with the verification engine via the API module . The API module may be electronically communicatively coupled to the other components of the verification engine to relay information. For example the API module can receive a challenge request via the network and the communication unit from an external software application signal the challenge generator to generate a challenge based thereon receive the challenge from the challenge generator and relay the challenge to the software application. The API module may also provide access to data stored in the verification data store to the external software application. In some embodiments the API module may require the external software application to authenticate using a standard authentication protocol to utilize its functionality.

Referring now to various example methods are described. In particular is a flowchart of an example method for challenging a user seeking access to a software service. In the depicted embodiment the method begins by receiving a challenge request to verify a person is operating a user device . The challenge request may be received from a client device such as a user device the application server or any another computing device coupled to the network . In some embodiments the verification engine receives the challenge request from the application engine of the application server . For example a person the user of the user device may request access to a service operated by the application server and to verify that the person user is actually operating the user device application engine may generate and send a challenge request to the verification engine or . In other embodiments the verification engine may receive the challenge request directly via the network from a user application operating on a user device .

The method may also begin automatically. For example a batch process performing the operations of the method may be executed at various intervals e.g. every few minutes hourly daily weekly etc. and the method may begin by performing the operations of block .

The method continues by selecting two or more first images from a first image category and selecting one or more second images from one or more second image categories. In some embodiments the verification engine maintains a collection of image records containing graphical images classified into categories such as the first and second image categories based on the objects depicted by the images as discussed in further detail above.

The method then generates and sends a challenge including the first and second images to a user device for presentation to a user e.g. the person . In some embodiments the challenge may be generated by the challenge generator of the verification engine . The challenge may be generated to include a challenge parameter such as an instruction describing an action for the user to perform in association with the first and second images. For example the challenge includes an instruction for the user to select the images which belong or do not belong to a particular category. In further examples the challenge may include an instruction for the user to select all of the images which belong to the first image category or select the image s which do not belong to the first image category. To send the challenge the verification engine may send the challenge to the application engine of the application server for transmission via the network to the user device of the user may transmit the challenge directly to the user device of the user via the network or the like.

The method then receives a challenge response from the user device of the user . In some embodiments the challenge response may describe the action performed by the user in association with the images included in the challenge such as a user selection of at least one image from among the two or more first images and the one or more second images. For example the challenge response may include data describing which image s were selected not selected by the user . In some embodiments the response analyzer of the verification engine may receive the challenge response. For instance the response analyzer may receive the challenge response from the application engine of the application server from the user device or from another computing device coupled to the network .

Next the method determines the result of the challenge. The result of the challenge can be determined to be successful if the challenge parameter of the challenge is satisfied by the challenge response and unsuccessful if it wasn t. In some embodiments the verification engine can compare the challenge response to the challenge to make this determination. For example if the challenge includes an instruction for the user to perform a particular action in association with the images included in the challenge the response analyzer can analyze user input selection included in the challenge response to determine whether or not the user performed the action as instructed. As a further example if the challenge included an instruction for the user to identify the image s that do not belong to the first image category the response analyzer analyzes the challenge response to determine image s that were selected by the user and whether selected image s belong to the first image category. In this example if the selected image s do belong to the first category then the response analyzer determines that the challenge is not been satisfied. However if the selected image s do not the response analyzer determines that the challenge has been satisfied.

In block the method provides authorization for the user device to access a software service based on the results determined in block . For example the method may authorize the user if the result of the challenge is determined to be successful in block . In some embodiments to authorize the user the response analyzer sends a confirmation signal to the application engine or the user application confirming that the challenge has been satisfied. The method is then complete and ends.

The method begins by receiving a challenge request as described above with reference to and then continues by selecting two or more first images from the first image category based on attribute values pre determined for those images. The attribute values may be pre determined to reflect various qualities of the objects depicted by the images and the method may use these pre determined attribute values to select images from the first category that are distinctive. This is advantageous because it can reduce the probability of an agent such as a robotic software application like an Internet bot or a web crawler determining which images belong to the first category based on their visual similarity while still allowing a human user easily determine the images that belong to the first category.

The method then selects one or more second images from the second image category based on attribute values pre determined for those images. As described previously the attribute values may be pre determined to reflect various qualities of the objects depicted by the images. In some embodiments each second image is selected to have an attribute value that is the same as or similar to one or more of the attribute values associated with the first images. Selecting a second image to have an attribute value similar to or the same as one or more of the attribute values associated with the first images is advantageous because to a software application such as an Internet bot the second image s would to appear to be similar to at least one of the first images based on a data comparison but can easily be distinguished from the first images by human because the object it depicts belongs to a different category.

Next the method selects one or more uncategorized images. The one or more uncategorized images may be selected based on pre determined attribute values at random based on evidence that the one or more uncategorized images should be categorized in the first or second image category a combination of the foregoing etc.

Next the method generates and sends a challenge for presentation to a user . For example the challenge generator can select the first and second images based on their corresponding pre determined attributes values select the one or more uncategorized images and then generate the challenge based thereon. The challenge may be generated to include an instruction describing an action for the user to perform in association with the first second and uncategorized images. For example the challenge may include an instruction for the user to select the images which belong or do not belong to a particular category as discussed above with reference to at least . To send the challenge the verification engine may send the challenge to the application engine of the application server for transmission via the network to the user device of the user may transmit the challenge directly to the user device of the user via the network or the like.

The method then receives a challenge response and determines the result of the challenge as described above with reference to . If the result is determined to be un successful e.g. by the response analyzer then the method terminates. If the result is determine to be successful e.g. by the response analyzer the method continues by providing authorization. In some embodiments the method provides authorization by sending a confirmation signal to the entity of the system that sent the challenge request. For example upon determining the result to be successful in blocks and the response analyzer may send a confirmation signal to the application engine with the user application confirming that the user successfully completed the challenge and indicating that the user is most likely human.

Next the method analyzes the challenge response to determine whether the uncategorized images were associated with the first image category in the challenge response. If so the method stores evidence that uncategorized images are associated with the first image category and determines whether an evidence threshold has been met to categorize the uncategorized image s into the first image category. In some embodiments the threshold may only require a single association be made by a user in order for the image to be categorized in the first image category and the method may assign the uncategorized image to the first image category based on the result determined in block or the evidence stored for the result . In other embodiments the threshold may require more than one association to have been made in order to make the assignment in block . For example the method may query a data store for evidence from challenge responses that were previously received and which associated the uncategorized image with the first image category and may determine the evidence threshold to be met based on the evidence retrieved and or the result determined in block or the evidence for the result and categorize the uncategorized image based thereon.

In some embodiments to avoid falsely categorizing the uncategorized image s a plurality of associations e.g. 2 to 200 or more could be required to satisfy the evidence threshold in block . Further a non association conflicting association of the uncategorized image s may not be definitive evidence that the uncategorized image s do not belong in the first image category. Rather using the evidence stored the data store for the uncategorized image s the associations and non associations of the uncategorized image s may both be analyzed and if enough associations are received to overcome any non association conflicting association the uncategorized image s may still be categorized in the first image category.

In some embodiments the learning module performs the operations in blocks and . If in block the method determines that the uncategorized image s are not associated with the first image category in the challenge response the method stores evidence of such and then terminates.

To further illustrate various aspects of the method the following example is provided. The challenge sent to the user in block may instruct the user to indicate which of the images included in the challenge do not belong to the first image category. Upon receiving the challenge the user application may display the images to the user and request the user indicate which images do not belong to the first category. The user may then select the second image s but leave the first and uncategorized images unselected and the user application may generate and send a challenge response to the verification engine indicating such. Responsive to receiving the challenge response the response analyzer may compare the user s selection with the challenge instruction that only the images that do not belong to the first image category be selected and determine that the user successfully completed the challenge. The learning module can then analyze the challenge response and determine that since the user did not select the uncategorized image s the user implicitly associated the image s with the first image category and stores evidence of this association in the verification data store . Next the learning module can determine whether the total evidence stored in the data store for the uncategorized image s is sufficient to justify formally categorizing them into the first image category. In this example during numerous previous iterations of the method the uncategorized image s were associated with the first image category four times not associated with the first image category one time and associated with a conflicting category once. The threshold may require that if any conflicting evidence exists a certain ratio of associations to non associations conflicting associations must be met such as 10 to 1. Since the 10 to 1 ratio has not been met in this example the learning module forgoes categorizing the uncategorized image s .

The method begins by acquiring images. In some embodiments the method can acquire categorize the images and then store the images by category. For example the acquisition module of the verification engine may search various information sources e.g. the search server the image server etc. for images and the categorization module may determine categorization information for the images categorize the images based on the categorization information and then store the images in the data store by category. In other embodiments the method can acquire images that have been pre categorized and store the images based on their pre categorization. For example the application engine may provide an e commerce marketplace for selling various products and may store images of those products in an image data store not shown such as a data store that is the same or substantially similar to the image data store along with information describing attributes and categories for the objects depicted in those images. The acquisition module may aggregate the images or electronic references thereto and their corresponding attribute and category information from this image data store and store the images and information in the verification data store .

Next the method determines and stores attribute values for the images. In some embodiments the attribute generator determines the attribute values for the images and stores them in the verification data store . For example a single attribute value or a plurality of attribute values can be generated by the attribute generator for each image depending on the objects depicted by each image.

The method can then process the images for obscurity. For example the method can create a duplicate instance of each image and manipulating the data thereof to obscure the contents of the image from a data perspective. For instance the pre processor may resample reformat blur pixelate de saturate or otherwise process the data of each image to produce an image that is more difficult for an agent such as an automated program like an Internet bot to analyze and determine its content but that depicts objects that are still easily recognizable to a human.

The method continues by receiving a challenge request in a manner similar to or the same as block described above with reference to and determines one or more challenge parameters for the challenge. In some embodiments the challenge generator determines one or more challenge parameters. The one or more challenge parameters govern the nature of the challenge and the requirement for its successful completion. In some embodiments the challenge parameters determine the type of challenge what images should be sent to the user what instruction or instruction should be sent to the user the difficulty or complexity of the challenge etc. Various examples of the different types of challenges that can be performed by the system are discussed elsewhere herein.

Next the method determines the first image category and verifies whether the first image category is valid for the locale of the user . For example users in one region or country may be able to readily discern objects belonging to a particular category while users in a different region or country may not and the method can accommodate for this by selecting a category based on the user s locale. In some embodiments a table cross referencing image categories with valid invalid locales is maintained in the verification data store and the challenge generator queries this table to verify that the first image category to be used is valid for the user s locale.

The method continues by selecting two or more first images from the first image category based on the attribute values pre determined for those images as previously discussed above. Next the method determines the second image category. In some embodiments to determine the first and second image categories the challenge generator selects the categories at random. In other embodiments to determine the first and second image categories the challenge generator selects categories that are sufficiently distinct so as not to provide images that could conceivably belong to either the first or second categories.

Next as previously discussed above the method performs the operations of blocks and . In block if the method determines that the user did not successfully complete the challenge the method proceeds to block and determines whether a subsequent challenge should be generated and send to the user. If so the method repeats by returning to block . If not the method terminates.

The method begins by receiving a challenge request as described above with reference to and then continues by selecting two or more first images based on attribute values pre determined for those images and selecting a second image with an unknown attribute value. In some embodiments the challenge generator performs the selection and selects the two or more first images based on pre determined parameter. For example the criteria may require the images to depict objects having common attributes e.g. weight size age functionality texture etc. but with different values for those attributes and the challenge generator may select the two or more first images based on the attributes and values. For instance the criteria may specify that each of the first images depict an object having a discernible weight but with a different weight value from the other first images and the challenge generator may select five images depicting five different objects that range from light e.g. 1 lb. to heavy e.g. 1 ton .

Next the method generates and sends a challenge including the first and second images for display to a user. The user may be the user associated with the challenge request. The challenge may include an instruction requesting the user to select or sort e.g. associate rank or otherwise organize the images in a specified order. For example the challenge may instruct user to select or sort the images in ascending descending order of weight size age or any other applicable attribute.

Responsive to sending the challenge in block the method receives a challenge response describing the selection or sorting performed by the user and determines a result of the challenge. In some instances the response analyzer of the verification engine may receive the challenge response and make the determination . The challenge response may describe the action performed by the user in association with the images included in the challenge. For example the challenge response may include data describing the order in which the images were selected or sorted. The method may compare the action performed by the user to the instruction included in the challenge to score the user s performance. In some embodiments the method may allow for a small amount of user error when determining whether the user successfully completed the challenge. For example if the user selected or sorted at least 70 of the first images correctly the method may determine a successful result. In other examples a successful result may require that the user select or sort e.g. associate rank or otherwise organize at least 75 80 85 90 95 100 etc. of the first images correctly. Other percentages or criteria are also contemplated.

Next the method authorizes the user based on the result as described above with reference to at least and then determines an attribute value for the second image based on the result. In some embodiments if the result was unsuccessful the method omits the determination and terminates. In other embodiments if the result was successful the method determines an attribute value for the second image based on the pre determined attributes used to select the first images and the order in which the second image was selected or sorted e.g. associated ranked or otherwise organize relative to the first images in the challenge response. For example if the first images were selected based on the weight of the objects they depict the attribute determined for the second image would for the weight of the object depicted by it and the value for this attribute would be based on how it was selected or sorted relative to the first images. By way of illustration if the first images depict objects that appear to be roughly the same size in the images but to a user are discernible as having different sizes e.g. a doll a bicycle a car a tractor a house the second image depicts a chair and the challenge response orders the second image in between the image of the doll and the image of a bicycle the attribute value determined for the second image would reflect that it is smaller than a bicycle and bigger than a doll. Once the operations in block are complete the method is complete and ends.

It should be understood that the examples and example embodiments described herein are provided by way of illustration and should not be considered limiting. Moreover while the example methods are described within the context of first and second images and first and second image categories it should be understood that any number of images and categories may be used. Moreover the usage of the terms first second etc. does not necessarily imply a specific order or rank and is used in some cases to help the reader discern between various objects items elements etc.

Additionally it should be understood that the methods are provided by way of example and the other variations and combinations of these methods as well as other methods are contemplated. For example various operations of the method may be expanded upon by corresponding operations of the methods and or . In another example the various operations of the method such as the image selection and attribute determination blocks may be substituted for similar operations discussed with reference to methods and or . In other examples other method variations may be produced by concatenating and or substituting various blocks all of which are encompassed by the present disclosure. Further it should be understood that in some instances the methods may be iterated multiple times until a successful result has been achieved.

In following the instruction included in the challenge region a user using input device of his her user device has selected image tiles and as not belonging to the first image category. If the user then selects the user selectable button labeled Submit the user application generates a challenge response indicating that the images displayed in the image tiles and were selected by the user and then sends this challenge response via the network to the verification engine . As a further example since a user selected image tile of a chair which reflects an uncategorized image as not belonging to the first category e.g. hand tools the response analyzer may store evidence of such for later use when determining a proper category for the image.

While the challenge depicted in the challenge region includes five images the challenge may include any number of categorized or uncategorized images which can be displayed to the user in the challenge region . For example the challenge may include sixteen images with thirteen being selected from a first image category and three being selected from one or more other image categories.

In the user interface which may be generated and displayed by the user application includes a window having the challenge region and user selectable buttons described above with reference to . As with in the depicted embodiment depicted in there are five image tiles. Three of the image tiles represent images selected from a first image category. More specifically three of the image tiles display images of hand tools selected from a hardware tools hand tools category The other two image tiles and respectively represent an image selected from a second image category and an uncategorized image.

However in contrast with the image tile including the uncategorized image depicts a hand tool that could be appropriately associated with the images belonging to the first image category. As such following the instruction included in the challenge region a user using input device of his her user device has only selected image tile as not belonging to the first image category thus implying that the uncategorized image represented in image tile belongs to the first image category. If the user then selects the user selectable button labeled Submit the user application generates a challenge response indicating that the image displayed in the image tile was selected by the user and then sends this challenge response via the network to the verification engine . Upon receiving the challenge response the response analyzer may store evidence that the image of the wrench should be categorized in the first image category e.g. as a hand tool within the main hardware category and if an evidence threshold has been met may proceed to categorize the image of the wrench into the first image category.

It should also be understood that the user interfaces and are provided by way of example and that many other user interface configurations are also contemplated. For example the user challenge region and user selectable buttons may be integrated into a log in interface with interface elements for the user to input user credentials. In other examples the user challenge region and user selectable buttons may be integrated into an entry portal of an online service e.g. webpage start page etc. operated by the application server search server image server user device or other entity coupled to the network . In these or other examples user interfaces may include additional information elements have a variety of distinct formats positions within the window and or combinations or may exclude various elements or information all of which are encompassed by the scope of the present disclosure.

Various example embodiments for verifying that a user device which is seeking access to a software service is being operated by a person have been described. In the above description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the disclosure. It should be understood that the technology described in the various example embodiments can be practiced without these specific details. In other instances structures and devices were shown in block diagram form in order to avoid obscuring the disclosure. For example the present disclosure was described in some embodiments above with reference to user interfaces and particular hardware. However the present disclosure applies to any type of computing device that can receive data and commands and any devices providing services. Moreover the present disclosure was described above primarily in the context of challenge response testing. However it should be understood that the present disclosure applies to any type of communication between nodes of a network.

To ease description some elements of the system may be referred to using the labels first second third etc. These labels are intended to help to distinguish the elements but do not necessarily imply any particular order or ranking unless indicated otherwise. Additionally reference in the specification to one embodiment an embodiment or some embodiments means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the disclosure. The appearances of the phrase in one embodiment or in some embodiments in various places in the specification are not necessarily all referring to the same embodiment s .

Some portions of the detailed descriptions above are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as identifying or ranking or processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present disclosure also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards flash memories including USB keys with non volatile memory or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The disclosure can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the disclosure is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the disclosure can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems wireless adapters and Ethernet cards are just a few of the currently available types of network adapters.

Finally the algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps blocks. The required structure for a variety of these systems will appear from the description above. In addition the present disclosure is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the disclosure as described herein.

It is intended that the scope of the disclosure be limited not by this detailed description but rather by the claims of this application. As will be understood by those familiar with the art the present disclosure may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. Likewise the particular naming and division of the modules routines features attributes methodologies and other aspects are not mandatory or significant and the mechanisms that implement the present disclosure or its features may have different names divisions and or formats. Furthermore it should be understood that the modules routines features attributes methodologies and other aspects of the disclosure can be implemented as software hardware firmware or any combination of the three. Also wherever a component an example of which is a module of the present disclosure is implemented as software the component can be implemented as a standalone program as part of a larger program as a plurality of separate programs as a statically or dynamically linked library as a kernel loadable module as a device driver and or in every and any other way. Additionally the disclosure is in no way limited to implementation in any specific programming language or for any specific operating system or environment. Accordingly the disclosure is intended to be illustrative but not limiting of the subject matter set forth in the following claims.

