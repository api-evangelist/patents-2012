---

title: Automated firmware settings management
abstract: Systems and methods are described for managing computing resources. In one embodiment, groupings of computer resources having common firmware settings are maintained based on an abstraction firmware framework representing associations between vendor-specific firmware settings and abstracted firmware settings that provide a degree of independence from specific vendor-specific firmware settings. In response to a request for a computer resource with a specified abstracted firmware configuration, it is determined which of the groupings can support the specified abstracted firmware configuration based on at least one criterion for managing the computer resources in accordance with the abstraction firmware framework.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09471536&OS=09471536&RS=09471536
owner: Amazon Technologies, Inc.
number: 09471536
owner_city: Seattle
owner_country: US
publication_date: 20121206
---
A data center is a facility that houses computer systems and various networking storage and other related components. Many organizations and businesses operate and maintain data centers to provide computing and information services to support their day to day operations. Data centers may also provide computing services on a permanent or an as needed basis to businesses and individuals as a remote computing service or to provide platforms as a service or software as a service e.g. cloud computing . The computing resources provided by a data center may include various types of resources such as data processing resources data storage resources data communication resources and the like.

To facilitate increased utilization of data center resources virtualization technologies may allow a single physical computing machine to host one or more instances of virtual machines VMs that appear and operate as independent computer machines to a remotely connected computer user. With virtualization the single physical computing device can create maintain or delete virtual machines in a dynamic manner. When a customer of a data center requests a new virtual machine instance the data center may provide a virtual machine management service that identifies a slot for executing the new instance. Customers may sometimes request changes to a virtual machine instance or request a particular configuration. Some changes may require updates to firmware a combination of software and hardware such as a hardware device with data stored in read only memory.

The following detailed description is directed to technologies for providing a service that implements one or more levels of abstraction for updating various computer firmware settings. Many computer settings can only be altered for example via firmware or Basic Input Output System BIOS updates that may be vendor specific. One issue that may arise when altering such settings is during testing of new hardware or when operating hardware in a computing environment such as a data center. In the examples described herein a data center is one example environment in which the described embodiments can be implemented. However the described concepts can apply generally to other computing environments for example across multiple data centers or locations.

Because of the limitations typically involved with modifying firmware settings it can be difficult to automate the testing and verification of settings that are controlled by firmware such as for example Non Uniform Memory Access NUMA memory speed power settings and the like. It can also be difficult to automate and manage the configuration of such firmware settings in a production capacity.

The present disclosure describes a firmware abstraction mechanism for a service that provides one or more levels of abstraction for changing various firmware settings. Such a firmware abstraction mechanism can include the creation and management of workflows for firmware settings by querying and changing firmware settings mapping the settings to specific hardware changing and managing the settings in a controlled manner and removing bringing affected devices back into service. The firmware abstraction mechanism can be used as part of a test workflow for verifying performance and operation of different firmware configurations. The firmware abstraction mechanism can also be used as part of a production workflow to configure capacity at runtime so that various system configurations with different firmware settings can be available for customers.

A user administrator service or any computing resource in computing environment may send a request to a firmware settings framework for a resource instance with a particular firmware setting. In one embodiment firmware settings framework may maintain a record of groupings of computing resources that have been determined to be capable of meeting a predetermined baseline firmware configuration. By maintaining such groupings computing firmware settings framework can efficiently identify and allocate computing resources for responding to firmware setting requests. Such settings may be requested directly by a customer of the data center by an administrator of the data center a service or any computing resource within the data center such as server . Server may also send a request on behalf of itself or on behalf of other servers.

In response to the request for firmware settings firmware settings framework may access a list of available firmware baseline configurations. As used herein firmware can be any combination of software and hardware typically programs or data written in permanent storage e.g. read only memory ROM programmable read only memory PROM erasable programmable read only memory EPROM NAND or other non volatile storage on a device . The list of available firmware baseline configurations may be prioritized based on factors such as cost and policy information. Firmware settings framework may also access information describing verification results and verification schedules. Firmware settings framework may send information regarding the available firmware baseline configurations to the requestor.

In some embodiments firmware settings framework may receive a request for one or more firmware capacity groupings based on a new firmware setting. In response firmware settings framework may determine which if any of the plurality of available firmware capacity groupings that may already be able to provide the new firmware setting. Firmware settings framework may determine that such a grouping already exists by reviewing the list of available firmware baseline configurations and requirements for verification of the new firmware setting. If such a grouping does not exist then firmware settings framework may perform or cause performance of one or more verification tasks to determine that the new firmware setting meets established performance and capacity requirements. Once verification has been performed a new grouping can be formed consisting of resources that have incorporated the new firmware setting. If such a grouping already exists then firmware settings framework may send information to the requestor regarding the existing grouping and the members of the group.

In some embodiments firmware settings framework may send information regarding requirements for verification of the new firmware setting to a resource such as server computer if the new firmware setting is to be incorporated in the resource. The resource may perform verification tasks and send the results of the verification tasks to firmware settings framework . Firmware settings framework may then approve or disapprove the results and create a firmware capacity grouping. As an example a server computer may be configured to support VM instances with a baseline configuration that includes a specified firmware setting. The server computer will not be able to host VM instances with a different firmware setting requirement unless the server computer s firmware settings have been changed. Once the server computer has been changed and the update has been verified firmware settings framework can determine that the server computer can now support VM instances with the updated setting requirement. Firmware settings framework can then include the server computer in a capacity pool of server computers that can support such VM instances.

As described above firmware is typically specific to vendor implementation. One of the issues raised by settings that are firmware dependent is the testing of computing configurations. To thoroughly test computing configurations it is desirable to iterate test conditions through the various possible firmware settings. Firmware settings may require vendor specific procedures or necessitate the reboot of hardware to a particular execution environment. After such changes another reboot may be required. Some devices may provide a number of firmware customization settings that may be accessed through various means. Some examples of firmware controlled settings include the enabling of clock frequency scaling e.g. Intel Turbo symmetric multithreading e.g. Intel hyper threading and NUMA settings.

In a data center environment it is desirable to test computing configurations by iterating through various settings including firmware settings in a controlled way to determine optimal settings for a particular workload or VM instance type. When new hardware configurations are added in response to requests for unique firmware settings fleet fragmentation and proliferation can result. By testing computing configurations it is possible to achieve greater integration of the computing configuration into the data center s products and services. And by testing a variety of configurations a given set of hardware may be determined to be able to support a number of different firmware settings. Pools or groupings of computing resources can be identified based on such capabilities and maintained based on frequently used settings and configurations.

In some cases a customer may request a particular setting that requires a change to a firmware setting that is not currently provided by the data center. A service in the data center may be implemented in one or more computing devices. The service may be configured to determine a suitable computing device can potentially accommodate the setting initiate a workflow to update and validate the particular setting and report that the update has been incorporated when the computing device is ready to provide the particular setting to the customer. The particular setting may also be made available to other customers who may request similar settings.

In various embodiments a firmware abstraction framework such as firmware settings framework of may be implemented in one or more computing devices and configured to receive requests for computing settings and determine one or more firmware settings that will incorporate the requested computing setting. For example the firmware abstraction framework may map requests for computing settings to actual settings that can be implemented in firmware settings e.g. NUMA to interleaved memory .

The firmware abstraction framework may create workflows to update and validate specific settings on specific resources i.e. servers . The firmware abstraction framework may identify one or more resources that already includes the requested setting or identify one or more settings that can be updated to provide the requested setting. For example the firmware abstraction framework may track pools of resources i.e. servers that can support a given settings configuration. The firmware abstraction framework may create also workflows to update and validate specific settings on specific computing resources.

The firmware abstraction framework may also be configured to optimize the placement for requested resources that have particular firmware settings requirements based on various factors such as minimization of disruption to existing services. The firmware framework may thus manage data center workflows to optimize the firmware updates and computing resource tracking capabilities.

Management of the firmware setting is also useful for managing devices that are associated with firmware updates such as flash storage devices. For example flash devices have variations in write endurance and a firmware framework can track and manage the number of write erase cycles on the devices and limit or throttle the number of times firmware is updated on a particular device.

Firmware settings can be an important aspect of correct operation of the operating system and an incorrect or incompatible setting can disable a computing resource or otherwise render it unusable. Furthermore firmware settings have the potential to cause physical damage to devices or to affect hardware reliability because the firmware settings can set controls for hardware such as clock rate and thermal throttling. The firmware abstraction framework can be configured to manage such hardware settings so that failure can be minimized. For example the firmware abstraction framework can determine how often to perform firmware updates on a given device and the conditions for testing the firmware settings. The firmware abstraction framework can also look for settings that may result in various blacklist behaviors that are to be avoided by the managed devices.

As discussed above firmware is often vendor specific and in one embodiment the firmware abstraction framework can implement an application programming interface API to provide an interface by which vendor specific settings can be translated or mapped into a set of abstracted settings that are not vendor specific. In this way customers need only identify the abstracted firmware settings and need not be concerned with hardware specific settings that may vary across vendors. Such an API can implement interfaces for common denominators across a data center s computing resources in a way that provides commonality and long term compatibility for firmware settings regardless of the data center s hardware resources at any given time.

In some embodiments the firmware abstraction framework may be configured to interact with a test framework that implements a mechanism for tests and verification of assets in a data center. For example when a request for a computing setting is received and it is determined that the computing setting requires firmware changes that have not been previously verified the firmware abstraction framework can identify a set of firmware settings that needs to be tested and verified to confirm that the settings meet data center criteria. The firmware abstraction framework can also determine which of the settings are best suited to comply with the requested computing setting. The firmware settings to be tested can be sent to a test service to carry out the tests.

In some embodiments the firmware abstraction framework may be configured to include an expert system and a knowledge base to provide a decision making capability regarding the search and selection of firmware settings. The expert system can consider factors such as system throughput processor utilization and network bandwidth. Furthermore the firmware abstraction framework may employ one or more fitness functions to determine how close a given configuration is to achieving one or more system criteria. A configuration management mechanism may be used to perform permutation testing and determine optimal search settings. In one embodiment a genetic algorithm may be used as a search heuristic to efficiently determine searches for satisfactory firmware settings. In other embodiments other search functions or combinations of search functions can be used such as a simulated annealing algorithm or a Hidden Markov Model algorithm.

In one example use case a customer may request options for implementing a computing resource. In response the firmware abstraction framework may determine if the data center has the capacity to fulfill the request and select a suitable computing device. The firmware abstraction framework may take the computing device out of service update the firmware and reboot the computing device. The firmware abstraction framework may then perform verification of the changes and update configuration information to track the new configuration.

The firmware abstraction framework can include a workflow management component that may be configured to select candidate computing devices or resources and to move VM instances between computing devices as necessary.

In some embodiments the firmware abstraction framework can also include a billing component. In one embodiment a pricing structure can be determined based on the settings selected by a customer. For example a baseline price can be charged for standard computing configurations and a premium price may be charged for special configurations that are not supported by a standard resource pool or an existing resource and otherwise result in special provisioning to accommodate the request. For example the dedication of a computing device with a unique configuration may result in an underutilization of the device especially if additional VM instances cannot be hosted on the device. The premium price can include a set fee or an hourly premium or a combination of the two.

Thus in various embodiments the firmware abstraction framework may be used to update and manage firmware changes across the entire fleet of computing resources in a data center.

Various aspects of the disclosure are now described with regard to certain examples and embodiments which are intended to illustrate but not to limit the disclosure. It should be appreciated that the subject matter presented herein may be implemented as a computer process a computer controlled apparatus a computing system or an article of manufacture such as a computer readable storage medium. While the subject matter described herein is presented in the general context of program modules that execute on one or more computing devices those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

Those skilled in the art will also appreciate that the subject matter described herein may be practiced on or in conjunction with other computer system configurations beyond those described herein including multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers handheld computers personal digital assistants e readers cellular telephone devices special purposed hardware devices network appliances and the like. The embodiments described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

In the following detailed description references are made to the accompanying drawings that form a part hereof and that show by way of illustration specific embodiments or examples. The drawings herein are not drawn to scale. Like numerals represent like elements throughout the several figures.

Data center may be configured to provide computing resources for executing applications on a permanent or an as needed basis. The computing resources provided by data center may include various types of resources such as data processing resources data storage resources data communication resources and the like. Each type of computing resource may be general purpose or may be available in a number of specific configurations. For example data processing resources may be available as virtual machine instances. The instances may be configured to execute applications including Web servers application servers media servers database servers and the like. Data storage resources may include file storage devices block storage devices and the like.

Each type or configuration of computing resource may be available in different sizes such as large resources consisting of many processor cores large amounts of memory and or large storage capacity and small resources consisting of fewer processor cores smaller amounts of memory and or smaller storage capacity. Customers may choose to allocate a number of small processing resources as Web servers and or one large processing resource as a database server for example.

Data center may include servers which may be referred herein singularly as a server or in the plural as the servers that provide computing resources available as virtual machine instances which may be referred herein singularly as a virtual machine instance or in the plural as the virtual machine instances . The virtual machine instances may be configured to execute applications including Web servers application servers media servers database servers and the like. Other resources that may be provided include data storage resources not shown and may include hard drives solid state storage drives or other storage devices and the like.

The availability of virtualization technologies for computing hardware has provided benefits for providing large scale computing resources for customers and allowing computing resources to be efficiently and securely shared between multiple customers. For example virtualization technologies such as those provided by VMWare or other virtualization systems may allow a physical computing device to be shared among multiple users by providing each user with one or more virtual machine instances hosted by the physical computing device. A virtual machine instance may be a software emulation of a particular physical computing system that acts as a distinct logical computing system. Such a virtual machine instance provides isolation among multiple operating systems sharing a given physical computing resource. Furthermore some virtualization technologies may provide virtual resources that span one or more physical resources such as a single virtual machine instance with multiple virtual processors that spans multiple distinct physical computing systems.

Referring to communications network may for example be a publicly accessible network of linked networks and possibly operated by various distinct parties such as the Internet. In other embodiments communications network may be a private network such as for example a corporate or university network that is wholly or partially inaccessible to non privileged users. In still other embodiments communications network may include one or more private networks with access to and or from the Internet.

Communication network may provide access to computers . User computers may be computers utilized by customers or other customers of data center . For instance user computer or may be a server a desktop or laptop personal computer a tablet computer a wireless telephone a personal digital assistant PDA an e book reader a game console a set top box or any other computing device capable of accessing data center . User computer or may connect directly to the Internet e.g. via a cable modem or a Digital Subscriber Line DSL . Although only two user computers and are depicted it should be appreciated that there may be multiple user computers.

User computers may also be utilized to configure aspects of the computing resources provided by data center . In this regard data center might provide a Web interface through which aspects of its operation may be configured through the use of a Web browser application program executing on user computer . Alternatively a stand alone application program executing on user computer might access an application programming interface API exposed by data center for performing the configuration operations. Other mechanisms for configuring the operation of the data center including deploying updates to an application might also be utilized.

Servers shown in may be standard servers configured appropriately for providing the computing resources described above and may provide computing resources for executing one or more applications. In one embodiment the computing resources may be virtual machine instances . In the example of virtual machine instances each of the servers may be configured to execute an instance manager or which may be referred herein singularly as an instance manager or in the plural as the instance managers capable of executing the virtual machine instances . The instance managers may be a virtual machine monitor VMM or another type of program configured to enable the execution of virtual machine instances on server for example. As discussed above each of the virtual machine instances may be configured to execute all or a portion of an application.

It should be appreciated that although the embodiments disclosed above discuss the context of virtual machine instances other types of implementations can be utilized with the concepts and technologies disclosed herein. For example the embodiments disclosed herein might also be utilized with computing systems that do not utilize virtual machine instances.

In the example data center shown in a router may be utilized to interconnect the servers and . Router may also be connected to gateway which is connected to communications network . Router may manage communications within networks in data center for example by forwarding packets or other data communications as appropriate based on characteristics of such communications e.g. header information including source and or destination addresses protocol identifiers etc. and or the characteristics of the private network e.g. routes based on network topology etc. . It will be appreciated that for the sake of simplicity various aspects of the computing systems and other devices of this example are illustrated without showing certain conventional details. Additional computing systems and other devices may be interconnected in other embodiments and may be interconnected in different ways.

It should be appreciated that the network topology illustrated in has been greatly simplified and that many more networks and networking devices may be utilized to interconnect the various computing systems disclosed herein. These network topologies and devices should be apparent to those skilled in the art.

It should also be appreciated that data center described in is merely illustrative and that other implementations might be utilized. Additionally it should be appreciated that the functionality disclosed herein might be implemented in software hardware or a combination of software and hardware. Other implementations should be apparent to those skilled in the art. It should also be appreciated that a server gateway or other computing device may comprise any combination of hardware or software that can interact and perform the described types of functionality including without limitation desktop or other computers database servers network storage devices and other network devices PDAs tablets cellphones wireless phones pagers electronic organizers Internet appliances television based systems e.g. using set top boxes and or personal digital video recorders and various other consumer products that include appropriate communication capabilities. In addition the functionality provided by the illustrated modules may in some embodiments be combined in fewer modules or distributed in additional modules. Similarly in some embodiments the functionality of some of the illustrated modules may not be provided and or other additional functionality may be available.

The capacity of purchased computing resources provided by data center can be scaled in response to demand. In this regard scaling refers to the process of instantiating which may also be referred to herein as launching or creating or terminating which may also be referred to herein as de scaling instances of computing resources in response to demand. In this manner the capacity of resources purchased by a customer of data center can be scaled on demand.

Auto scaling is one mechanism for scaling computing resources in response to increases or lulls in demand for the resources. Auto scaling allows customers of data center to configure data center to scale their purchased computing resources according to conditions defined by the customer. For instance rules may be defined for scaling up capacity in a particular manner in response to the occurrence of specified conditions such as a spike in demand. Similarly rules might also be defined to scale down capacity in a particular manner in response to the occurrence of other conditions such as a lull in demand. The mechanisms disclosed herein for launching virtual machine instances might be utilized when instances are manually launched by a customer or when instances are launched by an auto scaling component in data center .

Data center may also be configured with a deployment component to assist customers in the deployment of new instances of computing resources. The deployment component may receive a configuration from a customer that includes data describing how new instances should be configured. For example the configuration might specify one or more applications or software components that should be installed in new instances provide scripts and or other types of code to be executed in new instances and other types of information. The deployment component utilizes the customer provided configuration to launch and configure customer workloads on computing resources.

In computing environments such as those described herein firmware is generally program code and data stored in persistent memory devices such as ROM EPROM or flash memory. Changing the firmware of a device can be a fairly infrequent occurrence in most cases. Firmware such as the ROM BIOS of a computer typically configure functions of a device s hardware. Although firmware configuration has important ramifications for the system s operating system and thus the computer system s operation most systems lack a mechanism for updating and managing firmware in an automated and organized way. Firmware is typically updated manually using a utility program usually during the bootup sequence. Some firmware in standalone devices rarely gets updated.

Computing devices in particular in a data center scenario may include a wide variety of hardware and software options that can be configured by firmware. A data center must track and manage the configurations and verify compatibility between the different configurations. In an embodiment an automated firmware abstraction framework may include one or more software layers for abstracting vendor specific firmware settings. In many computers operating systems will run in conjunction with services provided by the system BIOS which interfaces with the computing hardware. In various embodiments an automated firmware abstraction framework may include one or more software layers that interacts with the system BIOS and other firmware utility programs using a standard interface. In an embodiment the layers of the automated firmware abstraction framework provides an abstraction model to the systems that run on it by providing a set of services and functions that the executing systems can use. In this way the executing systems need not deal with the specifics of the firmware but simply interact with the abstraction model.

By using the standard interfaces provided by the automated firmware abstraction framework it is possible to make changes to the underlying computing devices and their firmware without updating software at higher levels. In this way compatibility can be maintained across services provided in a data center while vendor specific changes are incorporated.

Some of the parameters that may be configured by an automated firmware abstraction framework may include but are not limited to memory interleaving processor clock frequency scaling NIC parameters hard drive parameters access modes ports and the like.

Server computer may send a request for an updated computing configuration to firmware settings framework . Firmware settings framework may send information to server computer indicating applicable computing firmware groupings if any exist. If they do not exist firmware settings framework may identify requirements for establishing a grouping of server computers that can support the updated computing configuration. For example requirements may include device hardware and any software or firmware that needs to be installed or execution of a test to verify that a virtual computing instance of a particular type can function with updated computing configuration. The information may also indicate when evaluation tasks can be performed. For example the information may include an evaluation schedule that minimizes potential disruptions to existing services being provided to customers.

In one embodiment the information describing the computing firmware groupings may be prioritized based on one or more criteria. For example the computing firmware groupings may be prioritized based on costs associated with providing the computing firmware groupings or based on policies such as which computing firmware groupings have the highest demand.

In some embodiments the request for the updated computing configuration may be sent to firmware settings framework from server computer on behalf of one of the other server computers and . In other embodiments a third party such as a service executing on one of the server computers and or executing on another computing device may send the request on behalf of one or more of the server computers and .

Firmware settings framework may cause the conduct of an evaluation and determine which if any of the requirements that can be met or exceeded by existing server computers. For example server computer may be determined to be a candidate for incorporating the computing configuration and tasked with conducting an evaluation and determine which if any of the requirements that it can meet or exceed. Server computer can optionally perform verification tasks that it can perform without jeopardizing its ability to continue uninterrupted hosting of its occupant VM instances since server computer may already be a member of one or more computing firmware groupings and may currently host one or more virtual machines. Server computer may also obtain additional details for verification from firmware settings framework or from some other source indicated by firmware settings framework in .

Server computer may optionally send a request to join one or more computing firmware groupings to firmware settings framework . Server computer may optionally include the cost of verifying server computer s ability to join each proposed computing firmware grouping. Firmware settings framework may then evaluate the request and determine whether to allow server computer to proceed. Firmware settings framework can make this determination using a number of factors. For example firmware settings framework may assess global considerations such as the number of other server computers making requests and the number of available computing firmware groupings that may be rendered unavailable while server computer as well as other server computers perform verification tests.

Firmware settings framework may determine if the proposed computing firmware groupings can accept additional members if any potential disruptions to existing services are acceptable and make other determinations as necessary. Based on the determinations firmware settings framework may send an indication to proceed to server computer . Server computer in response to receiving the indication to proceed may then execute necessary verification tasks. The verification tasks may include but are not limited to running software tests running VM instances or other workloads that simulate customer use cases and gathering the results of the tests and use cases. Once the verification tasks have been completed server computer may send the results to firmware settings framework for review of the results and determination as to which computing firmware groupings that server computer will be allowed to join.

Firmware settings framework may analyze the information provided by server computer including the test results. Based on the received information and additional factors as necessary the firmware settings framework may approve or disapprove admission to one or more of the requested computing firmware groupings. Firmware settings framework may for example consider admission approval disapproval decisions based on the computing firmware groupings that still have room for additional server computers availability objectives for various computing resources and server administration policies. After sending the approval disapproval information by firmware settings framework server computer may be designated as being associated with each of the approved computing firmware groupings. Firmware settings framework may optionally disassociate server computer from some computing firmware groupings. For example firmware settings framework may have implemented policies to remove server computers from less valuable rare pools or overpopulated pools.

By using a predetermined set of baseline configurations and established tests for verifying compliance with the configurations computing firmware groupings can be efficiently maintained and newly added functionality can be tracked by adding computing firmware groupings as needed. Additionally instead of taking server computers offline and temporarily out of a computing firmware grouping to verify added functionality verification tests can be structured so that server computers can run the tests while they are hosting virtual services and without disrupting the hosted services.

In some embodiments firmware settings framework can use policies and evaluation criteria to drive the computing firmware grouping population to support certain computing resource management objectives. In one embodiment computing firmware groupings can be assigned different weights to influence requests submitted by server computers. For example weights can be assigned so that computing firmware groupings are populated in a more cost effective manner according to administrative policies or to evacuate server computers that have been identified for eventual removal from service. For instance older servers that are scheduled to be lease returned can routinely be denied permission to join computing firmware groupings until the older servers eventually become unoccupied at which point they can be lease returned.

In some embodiments computing firmware groupings can be managed so that various availability objectives can be achieved. For example weights can be assigned to computing firmware groupings so that computing firmware grouping availability can provide that at any point in time an attempt to find a computing firmware grouping that provides functionality set X has a Y chance of succeeding. Data for determining the values of X and Y can be based on a predetermined policy. For example one such policy may be that a predetermined amount of reserve instance capacity for a given set of attributes should be maintained. Other examples include ensuring that certain customer usage patterns can be supported. For example one such usage pattern can be for each capacity pool containing instances owned by entity Z the computing firmware groupings is managed such that an additional Q of instances can be accommodated. As another example firmware settings framework can determine that the available servers in a certain computing firmware grouping are too low and should be increased. In other embodiments historical data can be used to determine a computing firmware grouping management policy.

Firmware settings framework may reside on one or more server computers or other computing resources in a data center. Firmware settings framework may in some embodiments be managed by a VMM or other management software executing in the data center. Firmware settings framework may also execute on one or more virtual machines.

Referring to operation begins the operational procedure. Operation may be followed by operation . Operation illustrates receiving a request for a computing resource with a desired computing attribute. In an embodiment the request may be received in a computing environment comprising a plurality of computing devices providing computing resources.

Operation may be followed by operation . Operation illustrates identifying at least one of the plurality of computing devices to provide the hardware specific firmware settings. The requested computing resource may be deployed on the identified computing device.

Operation may be followed by operation . Operation illustrates translating the requested computing attribute to corresponding hardware specific firmware settings on the identified computing device. In some embodiments the translating may be performed based on predetermined relationships between hardware specific firmware settings and abstracted firmware settings that correspond to the hardware specific firmware settings.

Operation may be followed by operation . If the firmware settings are not implemented on the identified computing device then operation may be followed by operation . Operation illustrates implementing and verifying the hardware specific firmware settings on the identified computing device. For example the hardware specific firmware settings can be verified on the identified computing device and the requested computing resource can be provided on the identified computing device. However it is possible that the identified computing device with the hardware specific firmware settings does not meet applicable requirements and the requestor may be informed that the desired computing attribute cannot be provided. In some embodiments additional candidate computing devices may be identified and verified to select a device that can satisfy the applicable requirements.

If the firmware settings are implemented on the identified computing device then operation may be followed by operation . Operation illustrates providing the requested computing resource on the identified computing device. Operation may be followed by operation .

Referring to operation begins the operational procedure. Operation may be followed by operation . Operation illustrates maintaining mappings between a plurality of computing settings of a plurality of computing devices in a computing environment and corresponding firmware settings of the one or more computing devices in the computing environment. In one embodiment the mappings may be representative of a relationship between hardware specific firmware settings and abstracted firmware settings that are independent of the hardware specific firmware settings. For example the abstracted firmware settings may provide at least a degree of independence from specific hardware implementations by providing stable abstracted parameters that can be translated to a hardware specific firmware settings without having to consider the details of the hardware specific firmware settings.

Operation may be followed by operation . Operation illustrates receiving a request for a computing attribute related to one of the plurality of computing settings.

Operation may be followed by operation . If it is determined that none of the mappings corresponds to the requested computing attribute then operation may be followed by operation . Operation illustrates initiating a remediation process. In one embodiment the remediation process can include causing execution of a process to create and verify a new mapping between the computing setting and one or more corresponding firmware settings. For example the computing setting can be verified on a set of computing resources with a corresponding firmware setting and a new mapping can be added. However it is possible that the requested updated configuration does not meet applicable requirements and the mapping can indicate that the requested updated configuration is not valid.

If a mapping does exist then operation may be followed by operation . Operation illustrates selecting one of the mappings to provide the requested computing attribute. Operation may be followed by operation .

Referring to operation begins the operational procedure. Operation may be followed by operation . Operation illustrates forming groupings of computing devices in a computing environment comprising a plurality of computing devices providing computing resources. In one embodiment the groupings may have common computing attributes corresponding to one or more firmware settings of an abstraction firmware framework. Additionally the abstraction firmware framework may represent relationships between hardware specific firmware settings and abstracted firmware settings that are independent of the hardware specific firmware settings.

Operation may be followed by operation . Operation illustrates receiving a request for a computing attribute. Operation may be followed by operation . Operation illustrates identifying at least one of the firmware settings that correspond to the requested computing attribute.

Operation may be followed by operation . If it is determined that none of the groupings can support the identified at least one firmware setting then operation may be followed by operation . Operation illustrates creating a new grouping when it is determined that none of the groupings can support the identified at least one firmware setting.

If a grouping can support the identified at least one firmware setting then operation may be followed by operation . Operation illustrates providing the requested computing attribute. For example one of the computing devices in the grouping that can support the firmware setting can be selected to provide the requested computing attribute. Operation may be followed by operation .

Each of the processes methods and algorithms described in the preceding sections may be embodied in and fully or partially automated by code modules executed by one or more computers or computer processors. The code modules may be stored on any type of non transitory computer readable medium or computer storage device such as hard drives solid state memory optical disc and or the like. The processes and algorithms may be implemented partially or wholly in application specific circuitry. The results of the disclosed processes and process steps may be stored persistently or otherwise in any type of non transitory computer storage such as e.g. volatile or non volatile storage.

The various features and processes described above may be used independently of one another or may be combined in various ways. All possible combinations and subcombinations are intended to fall within the scope of this disclosure. In addition certain method or process blocks may be omitted in some implementations. The methods and processes described herein are also not limited to any particular sequence and the blocks or states relating thereto can be performed in other sequences that are appropriate. For example described blocks or states may be performed in an order other than that specifically disclosed or multiple blocks or states may be combined in a single block or state. The example blocks or states may be performed in serial in parallel or in some other manner. Blocks or states may be added to or removed from the disclosed example embodiments. The example systems and components described herein may be configured differently than described. For example elements may be added to removed from or rearranged compared to the disclosed example embodiments.

It will also be appreciated that various items are illustrated as being stored in memory or on storage while being used and that these items or portions of thereof may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively in other embodiments some or all of the software modules and or systems may execute in memory on another device and communicate with the illustrated computing systems via inter computer communication. Furthermore in some embodiments some or all of the systems and or modules may be implemented or provided in other ways such as at least partially in firmware and or hardware including but not limited to one or more application specific integrated circuits ASICs standard integrated circuits controllers e.g. by executing appropriate instructions and including microcontrollers and or embedded controllers field programmable gate arrays FPGAs complex programmable logic devices CPLDs etc. Some or all of the modules systems and data structures may also be stored e.g. as software instructions or structured data on a computer readable medium such as a hard disk a memory a network or a portable media article to be read by an appropriate drive or via an appropriate connection. The systems modules and data structures may also be transmitted as generated data signals e.g. as part of a carrier wave or other analog or digital propagated signal on a variety of computer readable transmission media including wireless based and wired cable based media and may take a variety of forms e.g. as part of a single or multiplexed analog signal or as multiple discrete digital packets or frames . Such computer program products may also take other forms in other embodiments. Accordingly the present invention may be practiced with other computer system configurations.

Conditional language used herein such as among others can could might may e.g. and the like unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without author input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment. The terms comprising including having and the like are synonymous and are used inclusively in an open ended fashion and do not exclude additional elements features acts operations and so forth. Also the term or is used in its inclusive sense and not in its exclusive sense so that when used for example to connect a list of elements the term or means one some or all of the elements in the list.

While certain example embodiments have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the inventions disclosed herein. Thus nothing in the foregoing description is intended to imply that any particular feature characteristic step module or block is necessary or indispensable. Indeed the novel methods and systems described herein may be embodied in a variety of other forms furthermore various omissions substitutions and changes in the form of the methods and systems described herein may be made without departing from the spirit of the inventions disclosed herein. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of certain of the inventions disclosed herein.

