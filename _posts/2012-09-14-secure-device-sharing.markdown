---

title: Secure device sharing
abstract: A device and method for placing the device in a locked state having an associated set of permitted tasks so as to permit the device owner to share the device with others but maintain security over aspects of the device. A task change request is evaluated to determine whether the requested task is permitted and, if so, the requested task is allowed; if not, then an authorization process is invoked to prompt the user to input authorization data. Upon verification of the authorization data, the device may be unlocked and the requested change implemented. The permitted tasks may designate specific applications, specific operations or functions within applications or at the operating system level, one or more currently open windows, and other levels of granularity.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08713475&OS=08713475&RS=08713475
owner: BlackBerry Limited
number: 08713475
owner_city: Waterloo
owner_country: CA
publication_date: 20120914
---
The present application is a continuation application of U.S. patent application Ser. No. 13 316 835 filed Dec. 12 2011. U.S. patent application Ser. No. 13 316 835 is a continuation application of U.S. patent application Ser. No. 11 344 072 filed Feb. 1 2006. The contents of both documents are hereby incorporated herein by reference.

The present application relates to electronic user interactive devices and in particular to methods and systems for enabling sharing of such devices with other users without compromising security.

Security is an issue with most sophisticated electronic devices especially handheld or mobile devices. Over time these devices have begun to offer greater levels of functionality and a wider range of applications including gaming voice call capability e mail instant messaging and document creation. This has led to a greater desire to share the devices with others for limited purposes. For example a device owner may only wish to share the device with colleagues for the purpose of allowing them to view a particular e mail message. As another example the device owner may only wish to share the device with children for the purpose of gaming without allowing them access to e mail or other messaging applications. In yet another example the device owner may wish to share the device with a colleague to make a voice call without allowing access to e mail or other applications.

Accordingly it would be advantageous to provide a method or mechanism to facilitate sharing of a device without compromising security.

The present application provides a device and a method for placing a device in a locked state having an associated set of permitted tasks so as to permit the device owner to share the device with others but maintain security over aspects of the device. The user of a locked device may only perform tasks that are permitted without unlocking the device. A task change request is evaluated to determine whether the requested task is permitted and if not then an authorization window is opened to prompt the user to input authorization data. Upon verification of the authorization data the device may be unlocked and the requested change executed. The permitted tasks may designate specific applications specific operations or functions within applications or at the operating system level one or more currently open windows or other levels of granularity. Task change API calls by a task changer such as a task switcher or window launcher may be evaluated by a process control level of the operating system to determine whether the requested task change is permitted. If the task is not permitted then the API call may be failed and the task changer may re call the task change API supplemented with an argument containing the authorization data input by the user.

In one aspect the present application provides a method of securing an electronic device to enable a user to share the device with another person. The device has an operating system and the device is placed in a locked state. The locked state is associated with permitted task information. The method includes steps of receiving a user request to activate a selected task identifying the locked state of the device and determining whether the selected task is permitted based upon the permitted task information and if so activating the selected task.

In another aspect the present application provides an electronic device. The device has a locked state and an unlocked state. The locked state is associated with permitted task information. The device includes a main body having a user input device a display memory and a processor operatively coupled to the user input device the display and the memory. It also includes an operating system running on the processor for managing input and output through the user input device and the display and providing a platform for operation of application programs. The operating system is configured to receive a user request to change to a selected task. The device also includes a task request component for identifying that the device is in the locked state and for determining whether the selected task is permitted based upon the permitted task information and if so activating the selected task.

In another aspect the present application describes a method of securing an electronic device to enable a user to share the device with another person. The device has an operating system. The method includes the steps of receiving a request to lock the device setting a lock indicator to establish the locked state of the device and associating permitted task information with a locked state of the device. The method also includes steps of receiving a user request to activate a selected task identifying the locked state of the device and reading the permitted task information and determining whether the selected task is permitted based upon the permitted task information and if so activating the selected task.

In yet another aspect the present application provides an electronic device. The device has a locked state and an unlocked state. The device includes a main body housing a user input device a display memory and a processor operatively coupled to the user input device the display and the memory. The device also includes an operating system running on the processor for managing input and output through the user input device and the display and providing a platform for operation of application programs wherein the operating system is configured to receive a user request to change to a selected task. Also includes in the device are a locking component for receiving a request to lock the device setting a lock indicator to establish the locked state of the device and associating permitted task information with the locked state of the device and a task request component for identifying that the device is in the locked state and for determining whether the selected task is permitted based upon the permitted task information and if so activating the selected task.

In yet a further aspect the present application provides a computer program product for securing an electronic device to enable a user to share the device with another person. The computer program product includes a computer readable medium having recorded thereon computer executable instructions. The electronic device has an operating system and the computer executable instructions include computer executable instructions for receiving a request to lock the device computer executable instructions for setting a lock indicator to establish the locked state of the device and computer executable instructions for associating permitted task information with a locked state of the device. The computer executable instructions also include computer executable instructions for receiving a user request to activate a selected task computer executable instructions for identifying the locked state of the device and computer executable instructions for reading the permitted task information and determining whether the selected task is permitted based upon the permitted task information and if so activating the selected task.

Other aspects and features of the present application will be apparent to those of ordinary skill in the art from a review of the following detailed description when considered in conjunction with the drawings.

The following description of one or more specific embodiments does not limit the implementation to any particular computer programming language or system architecture. Moreover the present application may be embodied within a variety of user devices including mobile devices handheld devices mobile telephones personal digital assistants PDAs and other such devices. In some embodiments the present application may be implemented in stationary devices like desktop computers. References herein to a device are meant to encompass all such possibilities.

Portions of the method and device described herein may be implemented in software. In this regard the description below makes reference to many software elements that may be labeled as modules components etc. It will be appreciated that some of the described modules components programming objects etc. or other software elements herein may in some cases be implemented together as a single module component application subroutine object etc. or separately and the precise implementation is a matter of design choice. It will also be appreciated that in many cases the described modules or components may be implemented within the operating system itself but are shown separately for ease of discussion. References to a module or component or other software element are not intended to limit the nature of the computer programming implementation.

Those skilled in the art will appreciate that any references below to a window in a display or the opening of a window are meant in the generic sense of a task window in a graphical user interface and are not intended to imply any association with the Microsoft Corporation or with the Microsoft Windows operating system marketed by Microsoft Corporation. The present application is not intended to be limited to particular types of operating systems and in particular to any Microsoft Windows operating system.

Referring now to the drawings is a block diagram of an example embodiment of a user device . In the example embodiment the user device is a two way mobile communication device having data and possibly also voice communication capabilities. In an example embodiment the device has the capability to communicate with other computer systems via a network. Depending on the functionality provided by the device in various embodiments the device may be a data communication device a multiple mode communication device configured for both data and voice communication a mobile telephone a PDA enabled for wireless communication or a computer system with a wireless modem among other things.

In this embodiment the device includes a communication subsystem . In one embodiment the communication subsystem may include a receiver a transmitter and associated components such as one or more preferably embedded or internal antenna elements and a processing module such as a digital signal processor DSP . As will be apparent to those skilled in the field of communications the particular design of the communication subsystem will be dependent upon the communication network in which the device is intended to operate.

Signals received by the device from a wireless communication network are input to the receiver of the communication subsystem which may perform such common receiver functions as signal amplification frequency down conversion filtering channel selection and the like. In a similar manner signals to be transmitted are processed including modulation and encoding for example by the DSP and input to the transmitter for digital to analog conversion frequency up conversion filtering amplification and transmission over the wireless communication network .

The device includes a microprocessor that controls the overall operation of the device. The microprocessor interacts with the communications subsystem and also interacts with further device subsystems such as a graphics subsystem flash memory random access memory RAM auxiliary input output I O subsystems serial port keyboard or keypad speaker microphone a short range communications subsystem and any other device subsystems generally designated as . The graphics subsystem interacts with the display and renders graphics or text upon the display .

Operating system software and various software applications used by the microprocessor are in one example embodiment stored in a persistent store such as flash memory or similar storage element. Those skilled in the art will appreciate that the operating system software applications or parts thereof may be temporarily loaded into a volatile store such as RAM . It is contemplated that received communication signals may also be stored to RAM .

The microprocessor in addition to its operating system functions preferably enables execution of software applications on the device. A predetermined set of software applications which control basic device operations including data and voice communication applications for example will normally be installed on the device during manufacture. Further software applications may also be loaded onto the device through the network an auxiliary I O subsystem serial port short range communications subsystem or any other suitable subsystem and installed by a user in the RAM or a non volatile store for execution by the microprocessor .

In a data communication mode a received signal such as a text message or Web page download will be processed by the communication subsystem and input to the microprocessor which will preferably further process the received signal for output to the display through the graphics subsystem or alternatively to an auxiliary I O device . A user of device may also compose data items within a software application such as email messages for example using the keyboard in conjunction with the display and possibly an auxiliary I O device such as for example a thumbwheel. Such composed items may then be transmitted over a communication network through the communication subsystem .

The serial port in would normally be implemented in a personal digital assistant PDA type communication device for which synchronization with a user s desktop computer not shown may be desirable but is an optional device component. Such a port would enable a user to set preferences through an external device or software application and would extend the capabilities of the device by providing for information or software downloads to the device other than through a wireless communication network.

A short range communications subsystem is a further component which may provide for communication between the device and different systems or devices which need not necessarily be similar devices. For example the subsystem may include an infrared device and associated circuits and components or a Bluetooth communication module to provide for communication with similarly enabled systems and devices. The device may be a handheld device.

Wireless mobile network is in an example embodiment a wireless packet data network e.g. Mobitex or DataTAC which provides radio coverage to mobile devices . Wireless mobile network may also be a voice and data network such as GSM Global System for Mobile Communication and GPRS General Packet Radio System CDMA Code Division Multiple Access or various other third generation networks such as EDGE Enhanced Data rates for GSM Evolution or UMTS Universal Mobile Telecommunications Systems .

The device shown in further includes a task change module or task changer for receiving a user request to change the active task. In one aspect the task changer receives the user request to change the active task and initiates an operating system level instruction to trigger the task change in response to the user request. Example embodiments of such a task change module include a task switcher and a window launcher .

The task switcher may respond to requests to change from one open task to another open task. In one example the task switcher may initiate changes in the active window shown on a display in response to user requests. For example two application programs may be open in two separate windows within the display an active window being layered on top of an inactive window. In another example a single application program or multiple instances of a single application program may result in two or more open windows only one of which is active at a given time. User input and interaction is with the active window and therefore its associated application is the active application. To change the active application or window a user may initiate a task change request. By way of example in a Microsoft Windows operating system environment a task change may be requested through a mouse click upon a button on a task bar showing the available open windows. Alternatively a user may change the active window by depressing the Alt key and Tab key at the same time. In another example a user may initiate a task change by attempting to minimize close or exit from a window thereby switching the active window to the next open window or the desktop if no open windows remain .

The window launcher responds to user requests to initiate a new task. In particular in one embodiment the window launcher initiates a new instance of an application program in response to a user request. The launch of a new instance of an application program results in the opening of a new window and the designation of the newly opened window as the active window in the display. The window launcher may also be used by an active application program to start a new task. For example within a word processing program a user request to open a new document or an existing document causes the launch of a new window. Similarly within an e mail messaging program clicking on a message in an inbox view launches a new window for displaying the selected message. Within the displayed message selection of a reply or forward button or menu item launches yet another window for composing the reply or forward message.

In another aspect references to a task changer or task change module are intended to encompass the object or software element at an application level or operating system level for initiating instructions to execute an operation within a specific application. For example in an e mail application a user may request a certain function like forwarding a message replying to a message opening a message through an appropriate user input like clicking on a designated icon . The task changer is the software object or element that responds to that user input to execute or implement the requested operation or task. The task changer typically calls an application programming interface API instruction to implement or execute the requested function.

The term task change or task changer as used herein is meant to encompass both a change in the active window as between two or more open windows and the launch or opening of a new window. In some embodiments it is also meant to encompass selection of a specific operation within an application where the operation implements an application specific feature.

The task switcher and or window launcher may include a locking component . The locking component enables a user to place the device in a locked state thereby preventing task changes or limiting the permitted task changes. For example in one embodiment in a locked state the user will be unable to change the active window or open a new window. In another embodiment the user may be permitted to change the active window to other open windows but may be prevented from launching new windows. In yet another embodiment the locked state may be associated with a set of permitted tasks or a set of impermissible tasks and the requested change may be evaluated to determine whether it is permitted.

In some embodiments the device may further include stored profile data . The profile data may define the permitted and or impermissible tasks associated with a locked state. In one embodiment the profile data may include permitted application programs. For example the profile data may list a phone application program and or various games application programs but may not include an e mail or messaging application word processing applications and or systems level applications such as control panel or uninstall facilities. In a locked state the user can only activate one of the permitted programs included in the profile data . Those skilled in the art will appreciate that rather than indicating permitted applications the profile data may indicate the impermissible applications.

In another embodiment the profile data may contain user profiles where each user profile has an associated predefined set of permitted tasks or applications. For example one profile may lock the user into a voice call application program. Another profile may only permit the user to activate games programs. Yet another profile may lock the device to the then active window open on the device. This latter type of lock may be useful when reading an e mail message opened in the active window thereby allowing the user to scroll through the message but preventing access to other e mail messages on the device and or preventing forwarding or replying to the e mail message being viewed.

In yet another embodiment the profile data may include a dynamic list of permitted applications that may be selected by the user when locking the device . In this embodiment the user has the ability to custom select the permitted applications and or tasks for a particular locked state. For example the locking component may provide the user with a picklist of application programs from which to select one or more permitted applications and the user s selections may be stored in the profile data .

In yet a further embodiment the profile data may indicate permitted tasks within an application program. For example within a voice call program the permitted tasks may include answering calls and initiating emergency calls but may prevent initiating non emergency voice calls or access to voicemail. In another example within an e mail application program the profile data may permit opening messages which may involve the opening of a new window but may not permit the sending of messages or the moving of or deletion of messages. It will be appreciated that implementing an embodiment of the present application wherein permitted tasks may be specific to operations or functions within an application program may require that portions of the locking component be implemented within the application program itself.

Reference is now made to which diagrammatically shows an architecture of one embodiment of a mobile device providing for secure sharing. The architecture includes the operating system that serves as a platform for running the software applications shown individually as . The operating system also manages the receipt of input signals from user input devices such as the keyboard auxiliary I O ports and or other such device subsystems . It also manages the output of data to the display for rendering windows and other display elements.

The architecture may include the task switcher and or the window launcher . shows the locking component within each of the task switcher and the window launcher although it will be appreciated that this component may be implemented as a separate module or component.

The task switcher and window launcher may in some situations communicate with the operating system through a process control layer . The process control layer provides application programming interfaces APIs for directing the operating system to implement task change operations. The process control layer may further manage the lock state of the device and enforce profile related permissions while the device is in a locked state. Accordingly the process control layer may read or query the profile data .

The process control layer may provide a lock enabled API for requesting task changes while the device is in a locked state. Such a lock enabled API call may take the form 

The process control layer may be configured to prevent the task switcher and or window launcher from calling certain basic APIs in the event that the device is in a locked state. If the device is in a locked state then the process control layer may first determine whether the proposed task change is permitted or not by consulting the profile data . If the task is permitted then the process control layer may pass the API call to the operating system . If it is not permitted the process control layer may fail the API call i.e. refuse the requested task change. The failure of the requested task change may prompt the locking component to obtain user authorization to unlock the device in order to allow the requested task change to occur. For example the locking component may then recognize the necessity of using a lock enabled API for implementing the requested task change.

It will be appreciated that the process control layer may need to watch for a number of API calls to determine whether they should be permitted while in a locked state. For example a request to minimize a window thereby possibly changing the active window a request to close a window and thereby change the active window a request to launch an instance of a new application and requests to open a new window within an active application are all possible API calls that may be monitored by the process control layer .

A front view of the display of one embodiment of the mobile device having sharing security is shown in . The display is filled with an active window that includes a header or status bar situated at the top of the window. The window may include a scrollable portion . The header may include an exit or close button for closing out the window a toggle button to alternate between the full view shown and a tiled view in which the window only occupies a portion of the display and a minimize button for shrinking the current window and bringing another window forward as the active window. In one embodiment the header may further include a lock indicator to indicate that the device is in a locked state. In yet another embodiment a user may click upon the lock indicator to trigger the locking component to bring up a user authorization window for unlocking the device or altering the profile data .

Reference is now made to which shows in flowchart form an embodiment of a method for locking a device for sharing purposes. The method begins in step with the receipt of a lock request. The lock request input may come from the user through the selection of a lock option on a pull down menu a key combination clicking a lock icon or in any other manner in which the user may input a lock request.

In step upon receipt of the lock request the locking component determines whether the device is already in a locked state. This may be indicated by a flag or other mechanism that the locking component may check. In some embodiments the locking component may query the process control layer as to the state of the device.

If the device is already in a locked state then the lock request is failed. If the device is in an unlocked state then the method continues to step . At step the locking component launches an authorization window. Through the authorization window the locking component receives password input as indicated in step . The authorization window may prompt the user to input a password. The password may be requested twice to confirm accuracy if the password is being established for the first time instead of being compared against an existing password. Although not shown in in some embodiments the password must match an existing password stored in memory on the device and associated with an authorized user of the device. In such an embodiment an incorrect password may fail the operation and the method may be discontinued.

In step the user may designate permissible and or impermissible tasks associated with the locked state. In one embodiment this designation is automated and the user does not actively select the permitted tasks. In another embodiment the user selects a lock profile wherein each lock profile has an associated set of permissible tasks. An example lock profile may be friend profile that allows access to games Internet browser voice call applications etc. but blocks the user from applications such as instant messaging e mail and or systems applications. In yet another embodiment the user selects individual applications or tasks that the user wishes to permit while locked. In this latter case the selected applications or tasks may be stored as a current profile or current permitted tasks within the profile data .

In step based upon the permitted tasks established in step the device evaluates whether the current active task or application is a permitted task or application. If not then in step the user is prompted to close the task or application prior to locking the device. If the user elects not to close the impermissible task then step cancels the lock request and exits the method . Otherwise step leads back to step once the task is closed to evaluate whether the new current active task if any is a permitted task. It will be appreciated that in some embodiments the method may include an automated maximizing of the current active task so that the window associated with the current active task fills the display thereby preventing unauthorized reading of any windows that may be tiled underneath the active window and which may not be permitted tasks. The maximization of window size may occur in step or following step or elsewhere in the method .

Assuming that the current active task if any is a permitted task then the method continues in step wherein the device is placed in a locked state. This may in some embodiments involve instructing the process control layer to lock the device which may include setting a lock flag or other indicator.

Reference is now made to which shows in flowchart form an embodiment of a method for managing task change requests in a locked device. The method begins with the receipt of a task change request in step . The task change request may come from a variety of sources as discussed above. For example the user may attempt to launch a new application from a start menu or icon. The user may also attempt to open a new window by selecting an operation within an application that results in the launch of a new window. In yet another example the user may attempt to switch between two open windows thereby changing the active window. This latter circumstance may arise from a key combination like Alt Tab selecting the other window from a menu or task bar or minimizing or closing the current active window. Other circumstances that may give rise to receipt of a task change request will be understood by those of ordinary skill in the art.

In step the device evaluates whether it is in a locked state. If not then the device implements the task change at step . If the device is in a locked state then in step the requested task change is evaluated to determine whether it is a permitted task. If the task change is a permitted task then the method proceeds to step to implement the requested task change.

If the task is not permitted then at step an authorization window is displayed to the user. The authorization window may prompt the user to input a password or other authorization data. In some embodiments the user may be required to input biometric data such as a fingerprint retinal scan voice sample or other such data through an appropriate I O device. At step the device receives the input data such as a password and at step the input data is validated. This step may involve comparing the input data with stored authorization data such as a password. If the input data is not validated then in step a failure message or signal may be output and the user may be prompted to re attempt his or her input. Accordingly the method may return to step or alternatively step . If the user is unable to input a valid password or other authorization data then the user may cancel the task change request and exit the method . In some embodiments the user may be limited to a maximum number of attempts and the device may have a lock down or erasure policy associated with more than the maximum number of unsuccessful attempts to unlock the device as will be understood by those skilled in the art.

If the data is validated in step then the method proceeds to step whereupon the device is unlocked. In some embodiments unlocking the device may involve resetting a flag or other lock indicator. The method then proceeds to step where the requested change is implemented.

In another embodiment step does not involve disabling the locked state of the device. One possibility is that the successful validation of the input data in step leads to a one time authorization of the operation or task change despite the locked state. It will be appreciated that any subsequent attempt to change from a permitted task to this requested task will necessitate re authorization. Another possibility is that the successful validation of the input data in step may lead to a modification to the permitted tasks stored in the profile data. The user may be presented with a dialog box or window that asks whether the user would like to make the requested task one of the permitted tasks for the locked state. If the locked state is associated with a specific user profile then the user profile may be updated to add the requested task as a permitted task. Other possibilities will be apparent to those of ordinary skill in the art.

Reference is now made to which shows in flowchart form an embodiment of a method of managing task change requests in a locked device. The task change request is received in step . The task change request may be handled by the task changer which may in some embodiments include the task switcher and or the window launcher . Either of these modules may call an API to instruct the operating system to change the task as shown in step . This task change API call may be initially evaluated by the process control layer at step . The process control layer assesses whether the device is locked in step . If not then it passes the task change request to the operating system for implementation as shown in step .

If the device is found to be locked in step for example by checking a flag or other lock indicator then in step the process control layer checks the profile data to determine whether the requested task change is a permitted task change. This evaluation as to whether the task is permitted as shown in step may be based upon the identity of the application program requested the type of task or operation being performed or other factors. If the task is found to be permissible then the method continues to step whereupon the task change API call is passed through to the operating system for implementation of the requested change.

If the task is impermissible then in step the process control layer may return a call failure message to the task switcher or window launcher as the case may be. The call failure message may be recognized by the locking component as an indication that the device is locked and that the requested task change is impermissible according to the profile data associated with the current lock state. Accordingly in step the locking component launches an authorization window to prompt the user to provide input authorization data such as a password. Through the authorization window the locking component receives user input in step . As noted above in some cases the input may be biometric. In many embodiments the user input may be a password string.

In step the task switcher or window launcher re requests the task change but in this instance the request includes the input authorization data obtained in step . For example the task change API may include the authorization e.g. password data as an argument in the call. This API call having password data is received by the process control layer in step and the password argument is evaluated to determine whether it is valid. If the password is validated then in step the lock state may be disabled and the method proceeds to step to implement the requested task change. Otherwise a password failure message may be displayed in step and the user may be given another opportunity to input the password in step . Those skilled in the art will appreciated that certain limits may be imposed upon the number of attempts to enter a correct password.

Reference is now made to which diagrammatically shows an architecture of one embodiment of a mobile device providing for secure sharing. This embodiment provides for application feature specific secure sharing through implementation of some or all aspects of the secure sharing within a specific application i.e. at the application level. Those skilled in the art will appreciate that this embodiment involves implementation within the application itself and therefore involves coding and re compiling of the application program whereas the above described embodiments were application independent and were implemented at the operating system level. By way of non limiting example the application may be an e mail application program.

The application includes a lock module for managing user interface with the locking operation. For example the lock module may generate a user authorization interface for receiving user password input as described above.

The application also includes a process control module for recognizing the state of the device as locked or unlocked and for enforcing the lock restrictions with respect to specific tasks or operations. The profile data which may be loaded into RAM memory or stored in permanent memory may contain a set of permitted or impermissible tasks or operations. As discussed in greater detail above the set of permitted or impermissible tasks or operations may be associated with pre defined user profiles or may be specified by the authorized user during the locking process.

In one example embodiment the application is an e mail application program. The impermissible tasks or operations may include for example forwarding replying to composing opening deleting moving or otherwise dealing with messages. In will be appreciated that these impermissible operations or tasks may not necessarily require the opening of a new window on the display so the task switcher or window launcher may not necessarily be involved in executing the operation.

The user may request or initiate the operation or task by selecting a menu item clicking an icon associated with the operation or otherwise providing user input to trigger the operation. In one embodiment the API for executing the requested operation is customized to call a lock verification API which causes the process control module to evaluate the lock state of the device the requested operation and the permitted or impermissible tasks to determine whether to authorize the operation or instruct the lock module to obtain authorization input. If the latter then the authorization input is then verified either by the lock module or the process control module and if verified the process control module allows execution of the requested operation. As discussed above verification of the authorization input for enabling an otherwise impermissible operation may result in a one time permission of the operation a change to the permitted tasks or a disabling of the lock state.

Those skilled in the art will also appreciate that a number of the steps described in the foregoing methods may be performed contemporaneously or in an alternative order without significantly affecting the operation of the method depending upon the implementation. Various alternative implementations will be understood by those persons ordinarily skilled in the field of computer programming.

The teachings of the present application may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. Certain adaptations and modifications will be obvious to those skilled in the art. The above discussed embodiments are considered to be illustrative and not restrictive.

