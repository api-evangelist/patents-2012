---

title: Pipelining protocols in misaligned buffer cases
abstract: Systems, methods and articles of manufacture are disclosed for effecting a desired collective operation on a parallel computing system that includes multiple compute nodes. The compute nodes may pipeline multiple collective operations to effect the desired collective operation. To select protocols suitable for the multiple collective operations, the compute nodes may also perform additional collective operations. The compute nodes may pipeline the multiple collective operations and/or the additional collective operations to effect the desired collective operation more efficiently.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08589584&OS=08589584&RS=08589584
owner: International Business Machines Corporation
number: 08589584
owner_city: Armonk
owner_country: US
publication_date: 20121116
---
This application is a continuation of co pending U.S. patent application Ser. No. 12 769 972 filed Apr. 29 2010. The aforementioned related patent application is herein incorporated by reference in its entirety.

Embodiments of the invention relate generally to parallel processing and more particularly to collective operations on a parallel computing system.

Powerful computers may be designed as highly parallel systems where the processing activity of hundreds if not thousands of processors CPUs are coordinated to perform computing tasks. These systems are highly useful for a broad variety of applications including financial modeling hydrodynamics quantum chemistry astronomy weather modeling and prediction geological modeling prime number factoring image processing e.g. CGI animations and rendering to name but a few examples.

For example one family of parallel computing systems has been and continues to be developed by International Business Machines IBM under the name Blue Genet. The Blue Gene L architecture provides a scalable parallel computer that may be configured with a maximum of 65 536 2 compute nodes. Each compute node includes a single application specific integrated circuit ASIC with 2 CPU s and memory. The Blue Gene L architecture has been successful and on Oct. 27 2005 IBM announced that a Blue Gene L system had reached an operational speed of 280.6 teraflops 280.6 trillion floating point operations per second making it the fastest computer in the world at that time. Further as of June 2005 Blue Gene L installations at various sites world wide were among five out of the ten top most powerful computers in the world.

IBM has developed a successor to the Blue Gene L system named Blue Gene P. Blue Gene P is designed to be the first computer system to operate at a sustained 1 petaflops 1 quadrillion floating point operations per second . Like the Blue Gene L system the Blue Gene P system is scalable with a projected maximum of 73 728 compute nodes. Each compute node in Blue Gene P is designed to include a single application specific integrated circuit ASIC with 4 CPU s and memory. A complete Blue Gene P system is designed to include 72 racks with 32 node boards per rack.

In addition to the Blue Gene architecture developed by IBM other highly parallel computer systems have been and are being developed. For example a Beowulf cluster may be built from a collection of commodity off the shelf personal computers. In a Beowulf cluster individual computer systems are connected using local area network technology e.g. Ethernet and system software is used to execute programs written for parallel processing on the cluster.

The compute nodes in a parallel system communicate with one another over one or more communication networks. For example the compute nodes of a Blue Gene L system are interconnected using five specialized networks. The primary communication strategy for the Blue Gene L system is message passing over a torus network i.e. a set of point to point links between pairs of nodes . The torus network allows application programs developed for parallel processing systems to use high level interfaces such as Message Passing Interface MPI and Aggregate Remote Memory Copy Interface ARMCI to perform computing tasks and to distribute data among a set of compute nodes. Other parallel architectures e.g. a Beowulf cluster also use MPI and ARMCI for data communication between compute nodes. Of course other message passing interfaces have been and are being developed. Low level network interfaces communicate higher level messages using small messages known as packets. Typically MPI messages are encapsulated in a set of packets which are transmitted from a source node to a destination node over a communications network e.g. the torus network of a Blue Gene system .

A message passing protocol is a set of instructions specifying how to create a set of packets from a message and how to reconstruct the message from a packet stream. Message passing protocols may be used to transmit packets in different ways depending on the desired communication characteristics. In a parallel system where a compute node has multiple communication links to other nodes each compute node can send a point to point message to any other node.

One embodiment of the invention includes a method for performing a specified collective operation on a parallel computer comprising a plurality of compute nodes each compute node having at least a processor and a memory. The method may generally include performing a first collective operation by a source node and a plurality of target nodes to determine a characteristic of each of the target nodes selecting a target protocol based on the characteristic of each of the target nodes and performing the specified collective operation by the source node and the plurality of target nodes using the target protocol. The method may further include performing a second collective operation by one of the target nodes and a plurality of downstream nodes to determine a characteristic of each of the downstream nodes. From the plurality of protocols a downstream protocol is selected based on the characteristic of each of the downstream nodes and the specified collective operation is performed by the target node and the plurality of downstream nodes using the downstream protocol.

Another embodiment of the invention includes a computer readable storage medium containing a program which when executed performs an operation to effect a specified collective operation on a parallel computer comprising a plurality of compute nodes. The operation may generally include performing a first collective operation by a source node and a plurality of target nodes to determine a characteristic of each of the target nodes selecting a target protocol based on the characteristic of each of the target nodes and performing the specified collective operation by the source node and the plurality of target nodes using the target protocol. The operation may also include performing a second collective operation by one of the target nodes and a plurality of downstream nodes to determine a characteristic of each of the downstream nodes. From the plurality of protocols a downstream protocol is selected based on the characteristic of each of the downstream nodes and the specified collective operation is performed by the target node and the plurality of downstream nodes using the downstream protocol.

Another embodiment of the invention includes a parallel computing system. The parallel computing system may include a plurality of compute nodes each having at least a processor and a memory. A source node of the plurality of compute nodes may be configured to perform an operation to effect a specified collective operation. The operation itself may generally include performing a first collective operation by a source node and a plurality of target nodes to determine a characteristic of each of the target nodes selecting a target protocol based on the characteristic of each of the target nodes and performing the specified collective operation by the source node and the plurality of target nodes using the target protocol. The operation may also include performing a second collective operation by one of the target nodes and a plurality of downstream nodes to determine a characteristic of each of the downstream nodes. From the plurality of protocols a downstream protocol is selected based on the characteristic of each of the downstream nodes and the specified collective operation is performed by the target node and the plurality of downstream nodes using the downstream protocol.

Embodiments of the invention perform collective operations on compute nodes of a parallel computer using a set of collective protocols. Parallel computing systems often include collective protocols each of which provide particular advantages e.g. transfer speed and constraints e.g. requiring buffers of compute nodes to be 16 byte aligned requiring a message size of under 208 bytes etc. . As used herein a collective protocol refers to a message passing protocol used by a collective operation. A collective operation is a message passing instruction that is executed simultaneously or approximately so by all the compute nodes of an operational group of compute nodes. Such an operational group may include all the compute nodes in the parallel computer or a subset of all the compute nodes. An operational group may be implemented for example as an MPI communicator. 

Examples of collective operations include a broadcast operation a reduce operation and an allreduce operation. A broadcast operation is a collective operation for moving data among compute nodes of an operational group. A reduce operation is a collective operation that executes arithmetic or logical functions on data distributed among the compute notes of an operational group. An allreduce operation functions as a reduce followed by a broadcast to store the result of the reduce operation in the result buffer of each process . Further depending on the implementation of the allreduce operation the allreduce operation may be more efficient than the reduce followed by the broadcast.

Some collective operations have a single originating or receiving process running on a particular node in an operational group. For example in a broadcast operation the process on the compute note that distributes the data to all the other compute nodes is an originating process. In a gather operation the process on the compute node that receives data from all the other compute nodes is a receiving process. The compute node on which such an originating or receiving process runs is referred to as a logical root. The originating or receiving process may also be referred to as the root process.

Selecting a suitable protocol for a given collective operation may require the root process to have nonlocal knowledge i.e. knowledge about other compute nodes of the operational group. For example a broadcast operation may use either a memfifo protocol or a direct put dput protocol. The dput protocol puts data into the memory of destination nodes but requires the buffers of all the destination nodes to be aligned e.g. 16 byte aligned . The memfifo protocol puts data into a reception fifo of the destination nodes which may be slower than the dput protocol but does not require the buffers to be aligned. To select the suitable protocol for the broadcast operation i.e. dput or memfifo each node needs to know whether all of the other nodes in the operational group have buffers that are 16 byte aligned. Accordingly the compute nodes in the operational group prior to the actual collective operation i.e. the broadcast perform an additional collective operation to collect the nonlocal knowledge about 16 byte alignment. This additional collective operation may be referred to as a pre allreduce operation. If the pre allreduce operation reveals that all of the destination nodes have 16 byte aligned buffers each node may enter the broadcast operation using the dput protocol. On the other hand if the pre allreduce operation reveals that one or more of the destination node has a buffer that is not 16 byte aligned each node may enter the broadcast using the memfifo protocol.

Although the pre allreduce operation allows the compute nodes to enter the broadcast using the suitable protocol the pre allreduce operation creates additional latency. In certain cases such as in broadcasting small messages this additional latency may be substantial relative to the latency of the broadcast . Further if a particular node is delayed in entering a collective operation other nodes in the operational group are also delayed in performing the collective operation.

In one embodiment to reduce the latency of some collective operations the compute nodes pipeline the additional collective operation i.e. the collective operation to determine alignment and or the actual collective operation. For example to effect a collective operation for an operational group of compute nodes the compute nodes may segment the operational group into multiple neighborhoods and stagger multiple collective operations amongst the neighborhoods. Each neighborhood may correspond to a line of nodes in a torus network. Advantageously a late arriving node i.e. a compute node that is delayed in entering a collective operation delays only nodes in the immediate neighborhood and any downstream neighborhood s of the late arriving node rather than all other nodes in the operational group. Consequently the parallel computing system may perform collective operations and select suitable protocols more efficiently.

In the following reference is made to embodiments of the invention. However it should be understood that the invention is not limited to specific described embodiments. Instead any combination of the following features and elements whether related to different embodiments or not is contemplated to implement and practice the invention. Furthermore although embodiments of the invention may achieve advantages over other possible solutions and or over the prior art whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus the following aspects features embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim s . Likewise reference to the invention shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim s .

One embodiment of the invention is implemented as a program product for use with a computer system. The program s of the program product defines functions of the embodiments including the methods described herein and can be contained on a variety of computer readable storage media. Illustrative computer readable storage media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive on which information is permanently stored ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive on which alterable information is stored. Such computer readable storage media when carrying computer readable instructions that direct the functions of the present invention are embodiments of the present invention. Other media include communications media through which information is conveyed to a computer such as through a computer or telephone network including wireless communications networks. The latter embodiment specifically includes transmitting information to from the Internet and other networks. Such communications media when carrying computer readable instructions that direct the functions of the present invention are embodiments of the present invention. Broadly computer readable storage media and communications media may be referred to herein as computer readable media.

In general the routines executed to implement the embodiments of the invention may be part of an operating system or a specific application component program module object or sequence of instructions. The computer program of the present invention typically is comprised of a multitude of instructions that will be translated by the native computer into a machine readable format and hence executable instructions. Also programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature that follows is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

As shown computer system includes a compute core having a number of compute nodes arranged in a regular array or matrix which perform the useful work performed by system . The operation of computer system including compute core may be controlled by control subsystem . Various additional processors in front end nodes may perform auxiliary data processing functions and file servers provide an interface to data storage devices such as disk based storage A B or other I O not shown . Functional network provides the primary data communication path among compute core and other system components. For example data stored in storage devices attached to file servers is loaded and stored to other system components through functional network .

Also as shown compute core includes I O nodes A C and compute nodes A I. Compute nodes provide the processing capacity of parallel system and are configured to execute applications written for parallel processing. I O nodes handle I O operations on behalf of compute nodes . Each I O node may include a processor and interface hardware that handles I O operations for a set of N compute nodes the I O node and its respective set of N compute nodes are referred to as a Pset. Compute core contains M Psets A C each including a single I O node and N compute nodes for a total of M N compute nodes . The product M N can be very large. For example in one implementation M 1024 1K and N 64 for a total of 64K compute nodes.

In general application programming code and other data input required by compute core to execute user applications as well as data output produced by the compute core is communicated over functional network . The compute nodes within a Pset communicate with the corresponding I O node over a corresponding local I O tree network A C. The I O nodes in turn are connected to functional network over which they communicate with I O devices attached to file servers or with other system components. Thus the local I O tree networks may be viewed logically as extensions of functional network and like functional network are used for data I O although they are physically separated from functional network .

Control subsystem directs the operation of the compute nodes in compute core . Control subsystem is a computer that includes a processor or processors internal memory and local storage . An attached console may be used by a system administrator or similar person. Control subsystem may also include an internal database which maintains state information for the compute nodes in core and an application which may be configured to among other things control the allocation of hardware in compute core direct the loading of data on compute nodes and perform diagnostic and maintenance functions.

Control subsystem communicates control and state information with the nodes of compute core over control system network . Network is coupled to a set of hardware controllers A C. Each hardware controller communicates with the nodes of a respective Pset over a corresponding local hardware control network A C. The hardware controllers and local hardware control networks are logically an extension of control system network although physically separate.

In addition to control subsystem front end nodes provide computer systems used to perform auxiliary functions which for efficiency or otherwise are best performed outside compute core . Functions which involve substantial I O operations are generally performed in the front end nodes. For example interactive data input application code editing or other user interface functions are generally handled by front end nodes as is application code compilation. Front end nodes are connected to functional network and may communicate with file servers .

In one embodiment compute nodes are arranged logically in a three dimensional torus where each compute node may be identified using an x y and z coordinate. is a conceptual illustration of a three dimensional torus network of system according to one embodiment of the invention. More specifically illustrates a 4 4 4 torus of compute nodes in which the interior nodes are omitted for clarity. Although shows a 4 4 4 torus having 64 nodes it will be understood that the actual number of compute nodes in a parallel computing system is typically much larger. For example a complete Blue Gene L system includes 65 536 compute nodes. Each compute node in torus includes a set of six node to node communication links A F which allows each compute nodes in torus to communicate with its six immediate neighbors two nodes in each of the x y and z coordinate dimensions.

As used herein the term torus includes any regular pattern of nodes and inter nodal data communications paths in more than one dimension such that each node has a defined set of neighbors and for any given node it is possible to determine the set of neighbors of that node. A neighbor of a given node is any node which is linked to the given node by a direct inter nodal data communications path. That is a path which does not have to traverse another node. The compute nodes may be linked in a three dimensional torus as shown in but may also be configured to have more or fewer dimensions. Also it is not necessarily the case that a given node s neighbors are the physically closest nodes to the given node although it is generally desirable to arrange the nodes in such a manner insofar as possible.

In one embodiment the compute nodes in any one of the x y or z dimensions form a torus in that dimension because the point to point communication links logically wrap around. For example this is represented in by links D E and F which wrap around from a last node in the x y and z dimensions to a first node. Thus although node appears to be at a corner of the torus node to node links A F link node to nodes D E and F in the x y and Z dimensions of torus .

As described functional network may service many I O nodes and each I O node is shared by multiple compute nodes . Thus it is apparent that the I O resources of parallel system are relatively sparse when compared to computing resources. Although it is a general purpose computing machine parallel system is designed for maximum efficiency in applications which are computationally intense.

As shown in memory stores an operating system image an application code image and user application data structures as required. Some portion of memory may be allocated as a file cache i.e. a cache of data read from or to be written to an I O file. Operating system image provides a copy of a simplified function operating system running on compute node . Operating system image may includes a minimal set of functions required to support operation of the compute node . In a Blue Gene system for example operating system image contains a version of the Linux operating system customized to run on compute node . Of course other operating systems may be used and further it is not necessary that all nodes employ the same operating system. Also note Linux is a registered trademark of Linus Torvalds in the United States and other countries. 

Application code image represents a copy of the application code being executed by compute node . Application code image may include a copy of a computer program being executed by system but where the program is very large and complex it may be subdivided into portions which are executed by different compute nodes . Memory may also include a call return stack for storing the states of procedures which must be returned to which is shown separate from application code image although it may be considered part of application code state data.

As part of ongoing operations application may be configured to transmit messages from compute node to other compute nodes in parallel system . For example the high level MPI call of MPI Send may be used by application to transmit a message from one compute node to another. On the other side of the communication the receiving node may call use the MPI call MPI Recieve to receive and process the message. As described above in a Blue Gene system the external data interface may be configured to transmit the high level MPI message by encapsulating it within a set of packets and transmitting the packets of over the torus network of point to point links. Other parallel systems also include a mechanism for transmitting messages between different compute nodes. For example nodes in a Beowulf cluster may communicate using a using a high speed Ethernet style network.

As described above the dput protocol may be faster than the memfifo protocol but the dput protocol may only be used when all receiving nodes have a buffer that is 16 byte aligned. Because the NACK received from compute node indicates that compute node has a buffer that is not 16 byte aligned the compute nodes of the immediate neighborhood i.e. nodes should perform the broadcast operation using the memfifo protocol rather than the dput protocol.

In one embodiment each receiving node may perform a pre allreduce operation and a subsequent broadcast operation with the downstream neighborhood of the respective receiving node. For example the compute node may perform a pre allreduce operation with other compute nodes of its downstream neighborhood i.e. nodes and . Similarly compute node may perform a pre allreduce operation with nodes and . Further compute node may perform a pre allreduce operation with nodes and . To facilitate understanding of the disclosure illustrate the pre allreduce operation for the downstream neighborhood of compute node according to one embodiment of the invention.

In one embodiment each compute node may enter a pre allreduce operation with its downstream neighborhood prior to receiving all or any of the broadcast message M from an upstream node. For example as shown in compute node need not wait to receive the broadcast message M before asking whether compute nodes and have buffers that are 16 byte aligned.

In one embodiment the above described step of each receiving node performing a pre allreduce operation and the subsequent broadcast operation may be repeated in a recursive manner for neighborhoods further downstream. For example as shown in compute node may perform a pre allreduce with compute node . Similarly compute node may perform a pre allreduce with compute node . Likewise compute node may perform a pre allreduce with compute node . In this manner the compute nodes perform collective operations that are staggered in time relative to one another all to effect an overall collective operation such as broadcasting the message M to all compute nodes . Advantageously the compute nodes may reduce the latency associated with effecting the overall collective operation.

As described above illustrates the pre allreduce operation for the downstream neighborhood of compute node according to one embodiment of the invention. In the example illustrated in the compute node receives ACKs from compute nodes and respectively. Accordingly the compute nodes and may perform the broadcast operation using the dput protocol. As shown in the compute node broadcasts the message M to the compute nodes and using the dput protocol. For example the compute node may use a direct put descriptor to broadcast a source buffer of the compute node down its line of the torus network. The broadcast operation on the compute node is complete when the entire source buffer has been injected onto the torus network. On the receiving nodes and the broadcast operation is complete when the reception counter hits zero indicating that the entire destination buffer has been written. The receiving nodes and may then free the allocated reception counter.

In one embodiment a compute node that is delayed in entering a collective operation may delay other compute nodes that have already entered the collective operation. For example illustrates compute node entering a pre allreduce operation involving compute node according to one embodiment of the invention. Similarly compute node enters a pre allreduce operation with compute node while compute node enters a pre allreduce operation with compute node . Unlike compute nodes and however compute node is delayed in entering the collective operation with compute node . That is compute node is delayed in sending an ACK or NACK to the compute node . Advantageously by pipelining collective operations using the techniques disclosed herein the late arrival of the compute node to the collective operation only delays the message M being transmitted from the compute node to the compute node . That is the late arrival of the compute node does not delay the message M from being transmitted from the compute node to every other compute node . Much to the contrary compute nodes and can receive the message M prior to the compute node arriving at the pre allreduce collective. Further compute nodes and can exit the pre allreduce broadcast operations prior to the arrival of the compute node . And as shown in once the compute node arrives the compute node may send an ACK to the compute node and exit the pre allreduce collective. As shown in the compute node may broadcast the message M which is already available at the compute node at this point to the compute node and exit the broadcast collective. Once the compute node has received the message M the compute node can also exit the broadcast collective.

As shown in after receiving the NACK from the compute node the compute node may broadcast the message M to compute node and to compute nodes and using the memfifo protocol. Compute node may then broadcast the message M to compute nodes and to compute nodes and using the dput protocol assuming of course that compute nodes and also have buffers that are 16 byte aligned . Advantageously by using the techniques described herein the compute nodes may stagger multiple collective operations to effect an overall collective operation with reduced latency.

Assume that the target protocol is the memfifo protocol. At step the application performs a second collective operation using the target protocol to effect the collective operation for each target node. For example the application may perform a broadcast operation involving the source node and the target nodes and using the memfifo protocol. At step the application performs a third collective operation involving one of the target nodes and downstream nodes i.e. that are downstream from the target node to determine a characteristic of each downstream node. For example the application may perform a pre allreduce to determine whether each downstream node has a buffer that is 16 byte aligned.

At step the application selects a target protocol e.g. the dput protocol based on the characteristic of each downstream node. At step the application performs a fourth collective operation using the downstream protocol to effect the collective operation for each downstream node. For example the application may perform a broadcast operation involving the target node and the downstream nodes and using the dput protocol. After the step the method terminates.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

Advantageously embodiments of the invention provide techniques for performing a desired collective operation on a parallel computing system that includes multiple compute nodes. The compute nodes may perform multiple collective operations to effect the desired collective operation. To select protocols suitable for the multiple collective operations the compute nodes may also perform additional collective operations. The compute nodes may also pipeline the multiple collective operations and or the additional collective operations based on neighborhoods derived from the network topology of the compute nodes. Advantageously the desired collective operation may be performed more efficiently on the parallel computing system.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

