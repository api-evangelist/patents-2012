---

title: Resource management with dynamic resource budgeting
abstract: A method for resource management of a data processing system is described. According to one embodiment, a request is received via a programming interface from a program to modify a resource budget assigned to the program, where the resource budget specifies an amount of resources of the data processing system the program can utilize during an execution of the program. It is determined whether the program is entitled to modify the resource budget based on entitlement associated with the program. The resource budget for the program is modified if it is determined the program is entitled to modify the resource budget and the modified resource budget is enforced against the program during the execution of the program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09286120&OS=09286120&RS=09286120
owner: Apple Inc.
number: 09286120
owner_city: Cupertino
owner_country: US
publication_date: 20120830
---
This application claims the benefit of U.S. Provisional Patent Application No. 61 657 523 filed Jun. 8 2012 which is incorporated by reference herein in its entirety.

Embodiments of the present invention relate generally to data processing systems. More particularly embodiments of the invention relate to resource management of data processing systems.

As more and more services are becoming available for small or mobile devices the number of applications running in a single device has increased significantly. Usually a small or mobile device is used mostly for certain specific applications while being equipped with general purpose computing capabilities. For example it is common to find a mobile phone device that also runs a browser application a gaming application and a media player application etc. On the other hand a mobile video player device may run a gaming application and or an email application in addition to a video application. Normally multiple applications or processes in the same device compete with each other by sharing the same memory resources embedded inside the device.

These applications or processes consume resources of the device such as central process units CPUs memory input output etc. These consumed resources can compete for the resources needed for the user application work and can result in user interface glitches the device feeling sluggish slow to respond to touches and or the device locking up if there are insufficient resources available to be applied to the user application process. Typically when an application or process is launched a fixed set of resources may be applied to the application or process in which the application or process cannot consume more than the assigned fixed set of resources during the execution. Such a mechanism may not be sufficiently flexible under certain circumstances. For example an application such as photo editing software may temporarily require a large amount of memory to edit an album. If such a large amount of memory exceeds the ordinary memory usage associated with the application the application may not be able to acquire it even though the memory resources are widely available in a data processing system.

Various embodiments and aspects of the inventions will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

Techniques for managing resources of a data processing system with dynamic resource budgeting are described herein. According to some embodiments a framework is designed to allow a program e.g. an application or a process to communicate with a resource manager of an operating system of a data processing system to allow the program to temporarily modify a resource budget associated with the program. Such a modification of a resource budget may be performed on a program wide or per thread basis which may be determined based on entitlement of the program or thread. According to one embodiment a program may call the programming interface to request its resource budget to be modified. In response to the request received via the programming interface the resource manager determines whether the entitlement of the program allows the program such a modification. If the entitlement of the program allows the resource manager may modify the resource budget of the program and enforce the modified resource budget against the program going forward.

During the execution of the program according to one embodiment a resource usage of the program may be monitored which may be configurable based on a profile associated with the program where the profile of the program includes information indicating whether such a resource usage monitoring is enabled as well as certain entitlements of the program. Alternatively the profile may further include information specifying certain parameters to be monitored such as a type of resource amount of resource and elapsed time of consumption of resource etc. If the resource usage of the program exceeds its resource budget an alert and or an exception may be generated. In addition a diagnostic report may be created having information identifying at least the alert and or exception as well as the reason or reasons causing the alert and or exception. The diagnostic report may further identify the type of resources that have been violated and the action or actions performed by the program at the point in time. The diagnostic report may also include certain operating states or statuses of other components of the data processing system at the point in time. The diagnostic report may be saved in a non volatile storage of the data processing system and possibly also transmitted to a remote device over a network for further analysis.

According to one embodiment each of programs running within system is associated with a resource budget that specifies an amount of resources that can be utilized by the programs during their respective execution. Initially when a program is developed or installed within system a default resource budget for the program may be determined and stored as part of resource budgets managed by resource budget manager . The initial resource budget is referred to herein as a default resource budget. Such a default resource budget may be identical or different amongst the same or different types of programs which may be specified via their respective program profiles .

According to one embodiment a program profile may include entitlement information of the program indicating what an associated program is entitled to do or acquire during an execution of the program. The entitlement of a program may be determined by an authority entity e.g. Apple Inc. associated with system . For example prior to installing a particular program within system the program may be approved or certified by the authority of system and the entitlement and or default resource budget may also be determined at the time. The entitlement information of a program may be embedded within an executable image of the program such as a header or metadata of the program. For example an application may be associated with a resource budget specifying that the application can only use 50 of total available CPU time during its normal execution which may be determined based on the entitlement specified within its profile. Resource budgets and profiles may be stored in a non volatile memory and loaded into a system memory during the execution of programs by a processor of system . Resource budgets and profiles may be implemented as a single database or multiple databases located either locally or remotely.

According to one embodiment resource manager further includes a resource usage monitor and a diagnostic report generator . Resource usage monitor is configured to monitor resource usages of programs against their respective resource budgets . If a resource usage of a program exceeds a limit set by its respective resource budget an alert or an exception may be generated. For example a user may be alerted with a warning message displayed which may provide an opportunity for the user to change the behavior of the program in order to reduce the resource usage by the program. Alternatively the program may be terminated with or without a warning message to the user. Furthermore the program may automatically respond to the alert without involving the user. Whether to provide a program with a warning message or to terminate the program in response to a violation of the associated resource budget may be configured via its program profile or entitlement.

In addition according to one embodiment a diagnostic report may be optionally generated by diagnostic report generator . Such a diagnostic report may be generated regardless whether the program has been terminated. Diagnostic report may include the alert or exception generated in response to the violation of the resource budget. Diagnostic report may further include information describing the overall operating environment at the point in time of the resource usage violation e.g. one or more reasons that may possibly have caused the resource usage violation including at least one of the time the resource usage violation occurred the amount of resource usage violation e.g. a percentage over the associated resource budget types of actions or function calls performed by the program a stack trace or multiple stack traces of the program overall resource usage by other or related components of the system operating states or statuses of other or related components of the system history of resource usage by the program etc.

In one embodiment the monitoring of resource usage of programs may be selectively performed on a per program basis. For example a program profile of a program may include an attribute or metadata indicating whether the resource usage monitoring is enabled on the program in which case resource usage monitor will monitor the resource usage of the program. Alternatively the program profile may further include information specifying certain parameters to be monitored such as a type of resource amount of resource and elapsed time of consumption of resource etc. A diagnostic report for a program may be generated when the resource monitoring is enabled by the corresponding program profile. Diagnostic report may be stored in a non volatile storage within system and subsequently transmitted to a backend server over network . Backend server may be a remote or centralized management server associated with the authority associated with the system. Alternatively backend server may be a server associated with the corresponding program e.g. developers who developed the program . The diagnostic report may be utilized for analysis or bug fixing. Network may be local area network LAN a wide area network WAN such as the Internet or a combination of both. Information of diagnostic report may further be fed back e.g. via programming interface to the corresponding program or programs . Programming interface may also be used by a program to enable or disable the resource monitoring performed by resource usage monitor during the execution of the program.

According to one embodiment programming interface is configured to allow programs to communicate with resource manager or vice versa. Programming interface may be an application programming interface API such as for example a public API to allow an application such as a third party application to communicate with resource manager . Programming interface may also be an internal programming interface e.g. special private interface or SPI to allow a process e.g. system process such as a daemon to communicate with resource manager . During an execution of a program the program can communicate with resource manager via programming interface to request to modify its resource budget that is different from its default or current resource budget.

In response to the request budget manager is configured to examine a profile e.g. profiles associated with the program to determine whether the program is entitled to modify its resource budget. In one embodiment the profile of a program includes entitlement information of the program having information indicating whether and by how much the corresponding program is entitled to modify e.g. temporarily modify its resource budget which may be determined by the authority of system . If it is determined that the program is entitled to modify its resource budget budget manager is to modify the resource budget e.g. resource budgets associated with the program based on the request. Thereafter resource usage monitor is to monitor the execution of the program in view of the modified or updated resource budget.

For example a photo application may have a default resource budget that permits it to utilize no more than 50 of total available CPU time during normal operations. When the photo application performs a photo database management operation e.g. albums configuration it may require more CPU time e.g. 100 CPU time for a short period of time. In this example the photo application may communicate with resource manager to request more CPU time than its default budget allows. In one embodiment the request for more CPU time may specify a new amount of resource or resources required and a period of time for consumption of the new amount of resources. If it is determined that the photo application is entitled to modify its resource budget the resource budget is modified or updated based on the request. Thus a program dynamically updates its runtime resource consumption profile via programming interface .

According to one embodiment if it is determined that a program is not entitled to modify its resource budget based on its entitlement the request may be denied. Alternatively if it is determined that a program is not entitled to modify its resource budget resource budget manager determines whether the request is to reduce or increase the resource budget from the current resource budget of the program. If so resource budget manager may allow such a modification even if the entitlement of the program does not allow and resource usage monitor enforces the reduced resource budget against the program going forward accordingly.

According to a further embodiment the request does not need to specify an amount of resources to be modified it may simply specify or indicate an operating state or role the program is transitioning to. Based on this information resource budget manager determines a new resource budget for the new operating state or new role. If the program is entitled to modify its resource budget the resource budget of the program will be updated accordingly. Thus a program does not need to know or specify the resource budget that is required for the new operating state or role it is up to budget resource manager to determine the new resource budget based on a set of rules or heuristics not shown that specify what resource budget is needed for a particular operating state a particular role and or a particular behavior of a particular type of a program.

For example a program normally operating in the background can communicate with resource manager via programming interface indicating that the program is transitioning to operate in the foreground without specifying an amount of new resources needed. In response budget manager determines a new resource budget for such a program which operates in the foreground based on a set of rules and modifies the resource budget associated with the program accordingly. Similarly when the program subsequently transitions to operate in the background the program may communicate with resource manager again via programming interface to restore the initial resource budget or further modify the current resource budget to a new resource budget.

In another example a photo application may communicate with resource manager via programming interface to inform resource manager that the photo application is to perform a photo album management process on a specified amount of photos. In response budget manager determines an amount of resource or resources required for such a photo process and how long such a resource is required for given amount of photos. Budget manager then modifies the resource budget for the program accordingly.

Note that throughout this application the term of resource budget refers to a certain amount of resources a program can acquire or utilize during an execution of the program which may be predefined as a default resource budget or dynamically determined or modified during the execution. If the program attempts to request more resources than its resource budget allows either the request is denied or an alert is generated or both. The term of program refers to an application or related applications a process or related processes e.g. system processes a thread or a stream of related threads e.g. child threads associated with a parent thread or the like. The term of resource refers to any hardware and or software resources such as a central processing unit CPU memory input output IO power consumption network connections network bandwidth rights to access certain libraries applications processes and or certain kernel functionalities of the operating system etc.

In one embodiment system includes processor and peripheral interface also referred to herein as a chipset to couple various components to processor including memory and devices via a bus or an interconnect. Processor may represent a single processor or multiple processors with a single processor core or multiple processor cores included therein. Processor may represent one or more general purpose processors such as a microprocessor a central processing unit CPU or the like. More particularly processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processor may also be one or more special purpose processors such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP a network processor a graphics processor a network processor a communications processor a cryptographic processor a co processor an embedded processor or any other type of logic capable of processing instructions. Processor is configured to execute instructions for performing the operations and steps discussed herein.

Peripheral interface may include memory control hub MCH and input output control hub ICH . Peripheral interface may include a memory controller not shown that communicates with a memory . Peripheral interface may also include a graphics interface that communicates with graphics subsystem which may include a display controller and or a display device. Peripheral interface may communicate with graphics device via an accelerated graphics port AGP a peripheral component interconnect PCI express bus or other types of interconnects.

An MCH is sometimes referred to as a Northbridge and an ICH is sometimes referred to as a Southbridge. As used herein the terms MCH ICH Northbridge and Southbridge are intended to be interpreted broadly to cover various chips whose functions include passing interrupt signals toward a processor. In some embodiments the MCH may be integrated with processor . In such a configuration peripheral interface operates as an interface chip performing some functions of the MCH and ICH. Furthermore a graphics accelerator may be integrated within the MCH or processor .

Memory may include one or more volatile storage or memory devices such as random access memory RAM dynamic RAM DRAM synchronous DRAM SDRAM static RAM SRAM or other types of storage devices. Memory may store information including sequences of instructions that are executed by processor or any other device. For example executable code and or data of a variety of operating systems device drivers firmware e.g. input output basic system or BIOS and or applications can be loaded in memory and executed by processor . An operating system can be any kind of operating systems such as for example Windows operating system from Microsoft Mac OS iOS from Apple Android from Google Linux Unix or other real time or embedded operating systems such as VxWorks.

Peripheral interface may provide an interface to IO devices such as devices including wireless transceiver s input device s audio IO device s and other IO devices . Wireless transceiver may be a WiFi transceiver an infrared transceiver a Bluetooth transceiver a WiMax transceiver a wireless cellular telephony transceiver a satellite transceiver e.g. a global positioning system GPS transceiver or a combination thereof. Input device s may include a mouse a touch pad a touch sensitive screen which may be integrated with display device a pointer device such as a stylus and or a keyboard e.g. physical keyboard or a virtual keyboard displayed as part of a touch sensitive screen . For example input device may include a touch screen controller coupled to a touch screen. The touch screen and touch screen controller can for example detect contact and movement or break thereof using any of a plurality of touch sensitivity technologies including but not limited to capacitive resistive infrared and surface acoustic wave technologies as well as other proximity sensor arrays or other elements for determining one or more points of contact with the touch screen.

Audio IO may include a speaker and or a microphone to facilitate voice enabled functions such as voice recognition voice replication digital recording and or telephony functions. Other optional devices may include a storage device e.g. a hard drive a flash memory device universal serial bus USB port s parallel port s serial port s a printer a network interface a bus bridge e.g. a PCI PCI bridge sensor s e.g. a motion sensor a light sensor a proximity sensor etc. or a combination thereof. Optional devices may further include an imaging processing subsystem e.g. a camera which may include an optical sensor such as a charged coupled device CCD or a complementary metal oxide semiconductor CMOS optical sensor utilized to facilitate camera functions such as recording photographs and video clips.

Note that while system illustrates various components of a data processing system it is not intended to represent any particular architecture or manner of interconnecting the components as such details are not germane to embodiments of the present invention. It will also be appreciated that network computers handheld computers mobile phones and other data processing systems which have fewer components or perhaps more components may also be used with embodiments of the invention.

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as those set forth in the claims below refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The techniques shown in the figures can be implemented using code and data stored and executed on one or more electronic devices. Such electronic devices store and communicate internally and or with other electronic devices over a network code and data using computer readable media such as non transitory computer readable storage media e.g. magnetic disks optical disks random access memory read only memory flash memory devices phase change memory and transitory computer readable transmission media e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals digital signals .

The processes or methods depicted in the preceding figures may be performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. firmware software e.g. embodied on a non transitory computer readable medium or a combination of both. Although the processes or methods are described above in terms of some sequential operations it should be appreciated that some of the operations described may be performed in a different order. Moreover some operations may be performed in parallel rather than sequentially.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

