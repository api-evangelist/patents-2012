---

title: Techniques for dynamic physical memory partitioning
abstract: Various embodiments are presented herein that reallocate partitions of a shared physical memory between processing units. An apparatus and a computer-implemented method may determine an amount of memory space in the physical memory allocated to a first processing unit during system initialization. The determined amount of the memory space may be consolidated. The consolidated memory space may be allocated to the second processing unit during runtime. Other embodiments are described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09274839&OS=09274839&RS=09274839
owner: INTEL CORPORATION
number: 09274839
owner_city: Santa Clara
owner_country: US
publication_date: 20120927
---
Computing systems often use shared memory between the central processing unit and the graphical processing unit. Currently the physical memory of the computing system is assigned at the time the computing system initialization. For example one portion of memory is statically assigned for use by the central processing unit while another portion is statically assigned for use by the graphical processing unit. Because the memory is statically assigned at system initialization e.g. system boot up if it is later determined during runtime that either the central processing unit or the graphical processing unit needs additional physical memory it is not possible using currently available solutions to fulfill that need because the static allocation of physical memory cannot be changed during runtime.

Current solutions to accommodate an application s need for more memory are often inefficient reduce system performance and or reduce the number of simultaneously running applications. Accordingly there may be a need for improved techniques to solve these and other problems.

Embodiments are generally directed to memory allocation techniques during runtime. Currently static memory space may only be allocated during system initialization. System initialization may comprise the time period when a computing system loads an operating system onto memory and the basic input output system on the computing system is reactivated. System initialization may occur as soon as the computing system is turned on and may be referred to as system boot up or system startup. Once the operating system is loaded system initialization is complete and runtime begins. Runtime may comprise the time period after system initiation occurs and continues until the system is closed and or turned off.

Some embodiments are particularly directed to memory allocation techniques arranged to dynamically allocate static memory space from a first processing unit to a second processing unit during runtime. In one embodiment for example a memory partitioning manager may determine that a second processing unit needs more memory. Instead of waiting until the system reinitializes the memory partitioning manager may determine an amount of memory space in the physical memory currently allocated to a first processing unit to reallocate to a second processing unit during runtime. The memory partitioning manager may consolidate the memory space during runtime in order to allocate the second processing unit with more memory. As current memory allocation often results in a first processing unit having available or unused allocated static memory space while a second processing unit needs more memory space to run an application the embodiments described herein can reallocate the static memory space from the first processing unit to the second processing unit during runtime. By reallocating static memory space to the processing units during runtime the distribution of physical memory may lead to more efficient memory allocation while reducing or removing latencies associated with re initializing a system platform.

A computing platform may include a physical memory. The physical memory may be shared by one or more processing units. The shared physical memory may be divided into various memory spaces which are allocated to a processing unit. The terms memory and memory space may be used interchangeably throughout this disclosure. For example if a computing system includes a graphical processing unit and a central processing unit the physical memory region may be divided into a first memory space allocated to the graphical processing unit and a second memory space allocated to the central processing unit.

The computing platform may include multiple processing units such as a central processing unit a graphical processing unit a digital signal processing unit and or a network processing unit. A processing unit may include a processor circuit. A central processing unit and a network processing unit execute instructions by performing basic arithmetical and logical operations. A graphical processing unit manipulates and alters memory to accelerate creation of images which can be output to a display. A digital signal processing unit manipulates by filtering and compressing analog information signals.

A processing unit may run one or more system entities such as an application or an operating system. When a system entity is run on a processing unit the system entity may use memory space in the physical memory allocated to that processing unit. Currently when a processing unit uses all of the allocated static memory space the processing unit cannot be allocated more memory space as the shared physical memory cannot be repartitioned during runtime.

Historically each processing unit was a discrete physical unit located on a separate silicon die. The discrete processing unit included its own memory which was often attached directly to the processing unit. As a result the processing units did not have electrical access to one another s memory. As such there was no way for the processing units to share memory resources.

Currently the processing units are often integrated onto the same silicon die. As the processing units are in the same physical space the processing units have electrical access to same physical memory and that physical memory is shared. However even though the processing units have access to the shared physical memory the system entities such as but not limited to the basic input output system the operating system three dimensional run time applications and application interfaces are still using the memory allocated to the processing unit as if the shared physical memory is a separate physical memory. As such at system initiation the basic input output system defines a certain amount of memory for each processing unit and currently there is no way to dynamically reallocate the shared physical memory allocation during runtime. So instead of reallocating the memory the processing unit uses virtual memory or closes system entities that use the processing unit s allocated memory space in order for the current system entity to continue running.

The current method of using virtual memory causes reduced performance of the computing system. Other methods such as paging a processing unit also reduce performance of the system. Additionally methods such as reducing the number of simultaneous applications that can run on the processing unit are inefficient as memory space allocated to a different processing unit may be available.

To solve these and other problems embodiments dynamically reallocate static memory space within the shared physical memory from a first processing unit to a second processing unit during runtime. A memory partitioning manager may be included in the computing system to determine an amount of memory space in a physical memory allocated to a first processing unit to reallocate to the second processing unit. The memory partitioning manager may communicate with the processing units to ensure that any system entities currently running on the first processing unit are completed prior to reallocating the determined amount of memory space to the second processing unit. Without the use of a memory partitioning manager ensuring that system entities are not currently running on the memory space allocated to the first processing unit the reallocation of static memory space may cause system failure.

Once the first processing unit communicates with the memory partitioning manager that no system entities are currently running the memory partitioning manager may consolidate the determined amount of static memory space during runtime. The consolidated memory space may be allocated to the second processing unit. By dynamically responding during runtime to the second processing unit s need for more memory the system may efficiently use the memory space within the shared physical memory.

Accordingly various embodiments describe repartitioning and reallocating memory space in a shared physical memory during runtime. By using a memory partitioning manager to repartition memory space the allocation of the shared physical memory to processing units may be efficient. For example as the current allocation of memory space is static a first processing unit may have available allocated memory space while a second processing unit may need more memory space to run an application. In the embodiments described herein memory space in the shared physical memory may be reallocated from a first processing unit to a second processing unit during runtime which most efficiently preserves power and performance.

An apparatus may include a processor circuit and a memory partitioning manager operative on the processor circuit. The memory partitioning manager may repartition a physical memory with a first memory space allocated to a first processing unit and a second memory space allocated to a second processing unit. The memory partitioning manager may determine the amount of first memory space to allocate to the second processing unit and may consolidate the first memory space during runtime. The memory partitioning manager may allocate contiguous consolidated memory space to the second processing unit.

The memory partitioning manager may be a component of a memory partitioning manager execution context. In an embodiment the memory partitioning manager execution context may be a virtual machine monitor. A virtual machine monitor may comprise a virtual machine or host operating system which allows a computing device to support a plurality of identical execution environments. In an alternate embodiment the memory partitioning manager execution context may run on the central processing unit as a software component run on an operating system or run as a hardware unit. The memory partitioning manager may repartition the physical memory so that more memory space may be allocated to a processing unit. For example the memory partitioning manager may initiate actions to change memory allocations based on detected needs of the system. Alternatively or in addition the memory partitioning manager may respond to requests from system entities such as applications or operating systems to alter the shared physical memory allocation.

The embodiments described herein may provide several advantages over conventional memory allocation techniques. By reallocating memory space from a first processing unit to a second processing unit the shared physical memory is used more efficiently. A more efficient use of memory space may increase the speed of an individual application and or a collective group of applications. Additionally a more efficient use of memory space may allow more applications to run simultaneously. For example the number of applications simultaneously running on a processing unit and using memory space may not need to be reduced in order for another application to run on the processing unit and use the memory space. Instead available memory space allocated to a different processing unit may be reallocated during runtime. By reallocating memory to a processing unit during runtime instead of waiting until the system reinitializes current methods which cause a reduction in system performance may be unnecessary. Some current methods which reduce system performance such as using virtual memory or paging graphical processing unit memory resources may be avoidable. Further by reallocating memory space during runtime power may be conserved as unneeded memory may be powered down during runtime instead of waiting until the system reinitializes. Reduced power consumption may be especially advantageous when the system is operating on battery power because it can extend the life of the battery.

Reference is now made to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding thereof. It may be evident however that the novel embodiments can be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate a description thereof. The intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the claimed subject matter.

A graphical processing unit may manipulate and alter memory to accelerate the creation of images available for output to a display. A graphical processing unit efficiently manipulates computer graphics by performing computationally intensive calculations at a rapid speed. A graphical processing unit quickly processes large blocks of data in parallel. A central processing unit may execute instructions by performing basic arithmetical and logical operations. Although not shown in the system may additionally or alternatively include processing units such as but not limited to a digital signal processing unit and or a network processing unit.

The shared physical memory may include memory space allocated to a processing unit. For example in the shared physical memory may include memory space allocated to a graphical processing unit portion and a central processing unit portion . Although not pictured in alternate embodiments the shared physical memory may include memory space allocated to other processing units implemented by the system such as a digital signal processing unit and or a network processing unit on the system for example.

The system may include a memory partitioning manager execution context . The memory partitioning manager execution context may be implemented in a variety of ways. In an embodiment the memory partitioning manager execution context may be implemented as a virtual machine monitor. As a virtual machine monitor the memory partitioning manager execution context may coordinate the various virtual machines running on system . For example the memory partitioning manager execution context may coordinate with a virtual machine which changes the operating system running on the system . A virtual machine may comprise a software implementation of a computing device that executes programs like a physical computing device. For example a virtual machine may support the execution of an operating system. In an alternate embodiment the memory partitioning manager execution context may be implemented to run on the central processing unit as a software component. In another alternate embodiment the memory partitioning manager execution context may be implemented to run on an operating system a driver or a microcontroller such as a power control unit or a manageability engine. In yet another embodiment the memory partitioning manager execution context may run as a hardware unit with a register interface exposed to software control. The embodiments are not limited in this respect.

The memory partitioning manager execution context may include a memory partitioning manager . The memory partitioning manager may be responsible for repartitioning the physical memory so that more or less shared physical memory is allocated to the processing units during runtime. The memory partitioning manager may initiate actions to change memory allocation of the physical memory during runtime based on detected needs of the system. The memory partitioning manager may respond to requests from system entities such as but not limited to applications or operating systems to alter the allocation of the shared physical memory during runtime. Alternatively or additionally the memory partitioning manager may respond to requests from a processing unit to obtain more memory during runtime. The memory partitioning manager may run on one of a central processing unit a graphics driver a logic circuit or an operating system.

The system may include one or more system entities which run on a processing unit and use the memory space of the shared physical memory allocated to the processing unit. A system entity may include but is not limited to an application a driver and or an operating system. For example the system entity may be an application used to create or update multimedia such as three dimensional games and or videos. The application may include a task or function such as but not limited to a two dimensional texture application a three dimensional texture application a sound effect application and a shading application. Alternatively the system entity may include an operating system such as Unix or Windows .

The system may include a graphics driver . In operation a system entity may call the graphics driver to present frame s of video content. The graphics driver may handle the presenting of a frame to a display . The system may also be communicatively coupled with the digital display .

The shared physical memory may be repartitioned. When the first processing unit needs more memory the shared physical memory may be repartitioned as shown in . Shared physical memory is a separate state from shared physical memory and the system can be either the state shown in shared physical memory or the state shown in shared physical memory . As shown in the shared physical memory the first processing unit or a system entity running on the first processing unit may request more memory space. The memory partitioning manager may request an amount of static memory space currently allocated to the second processing unit be reallocated to the first processing unit .

Currently the static memory space may not be reallocated during runtime. Without the use of a memory partitioning manager the reallocation of the static memory may not be possible without causing system failure. The memory partitioning manager may communicate with the first processing unit and the second processing unit . This communication may ensure that system entities currently running on the second processing unit are completed so that the requested amount of static memory space currently allocated to the second processing unit may be reallocated to the first processing unit without causing a system failure.

The shared memory allocation depicts the new desired partitioning of the memory space allocated to the first processing unit and the second processing unit . The memory space allocated from the second processing unit to the first processing unit is contiguous memory space. For example 128 MB of first memory space may be requested to be reallocated from the second processing unit to the first processing unit . The 128 MB of memory space of the second processing unit is the 128 MB of memory space contiguous to the memory space of the first processing unit .

The logic flow may receive a request for memory space for a processing unit at block . The memory partitioning manager execution context may receive a request to repartition the shared physical memory. The request may be sent from a system entity such as but not limited to an operating system a driver or an application. The system entity may run using a processing unit . The system entity may use memory space of the shared physical memory which is allocated to the processing unit . However the memory space in the shared physical memory allocated to the processing unit may be full. In order for the system entity to run on the processing unit the system entity may request more memory space be allocated to the processing unit .

For example a three dimensional application may detect that more physical memory is needed in order for a graphical processing unit to run the three dimensional application and contain or hold textures for a three dimensional image. The graphics driver may initiate a repartitioning request. The graphics driver may be notified of how much physical memory is currently allocated to the graphical processing unit . The graphics driver may be notified from either the operating system the graphical processing unit or the memory partitioning manager . As the three dimensional application may create or destroy resources and may perform operations that consume memory allocated to the graphical processing unit the graphics driver may track how much memory is being used on the graphical processing unit by these operations. When the amount of memory needed by the three dimensional application created resources and operations on the graphical processing unit exceeds the amount of physical memory currently allocated to the graphical processing unit the graphics driver may signal the memory partitioning manager to request additional physical memory. Similarly when the amount of memory needed drops below a currently allocated physical memory threshold amount for the graphical processing unit the graphics driver can notify the memory partitioning manager that the graphical processing unit can use less physical memory.

When the driver determines the graphics processing unit portion of the shared physical memory is full the current command buffer may be flushed to the graphics processing unit for execution. The graphical processing unit may successfully execute the command buffer prior to the three dimensional application sending a request to the memory partitioning manager for more memory.

In an alternate embodiment instead of an application requesting more memory an operating system may request more memory. The operating system may monitor an application s demands on physical memory and the operating system may request that the memory partitioning manager repartition the physical memory based on an application s needs.

In yet another alternate embodiment a user may request reallocation of the shared physical memory . A system may support a manual configuration mode during runtime whereby a user specifies the preferred partitioning of the shared physical memory for the system . The user may specify the shared physical memory allocation via an interface such as but not limited to a control panel a keyboard a joystick and or a touch screen. Once specified the memory partitioning manager may receive a request to reallocate the shared physical memory to adhere to the user s request. As a result users may run applications that fall completely outside of existing application profiles without requiring the system to reinitialize.

For example a user may prefer the use of the graphical processing unit over the central processing unit . The user may use an input device to provide the preferred memory allocation to the memory partitioning manager . The user may provide the preferred memory allocation at any time e.g. at both system initialization or during runtime. Therefore when the graphical processing unit needs more memory the memory partitioning manager may send a request to the central processing unit to make available memory space to reallocate to the graphical processing unit.

In another alternative embodiment the request to reallocate the shared physical memory may be based on an application specific profile. Anytime during the running of the system an application may be loaded as a system entity and the application may include an application specific profile. The application specific profile may request a change to the distribution of the physical memory during runtime. The memory partitioning manager may receive the request from the application specific profile to reallocate the memory space in the shared physical memory .

The logic flow may determine whether there is unallocated memory space in the shared physical memory at block . The memory partitioning manager may receive the request. The memory partitioning manager may determine whether there is available memory space to allocate to the processing unit . The memory partitioning manager may determine whether more memory space is available by identifying any unallocated memory space in the shared physical memory .

When the memory partitioning manager determines that there is unallocated memory the logic flow may allocate the unallocated memory to the processing unit at block . The memory partitioning manager may allocate the available unallocated memory space to the processing unit by reprogramming hardware registers associated with the processing unit . For example a processing unit may maintain a pair of memory address range registers that define a set of available addressable physical memory. The processing unit may have a first register for a starting address and a second register for an ending address. When physical memory partitioning changes the memory partitioning manager may write new values to these registers for each affected processing unit .

In one embodiment after the new values are written the processing unit may receive an interrupt notification of a change to these registers that is handled by a software component running on the processing unit . The software component may update its locally maintained information about the valid addressable memory space. In an alternate embodiment after the new values are written the memory partitioning manager may update the registers and notify the software components on the affected processing units via a software message. In yet another alternative embodiment the software component may be responsible for maintaining the available memory space and may poll the hardware registers periodically to determine if the allocation of the memory space has changed.

The logic flow may respond with an amount and location of the allocated memory space at block . The memory partitioning manager may send a response to the requestor with the amount of the memory space to be allocated to the processing unit . In an embodiment the memory partitioning manager may send an asynchronous response to the requestor. As the memory partitioning manager determined that the shared physical memory included unallocated memory space the memory partitioning manager may allocate all or some portion of the unallocated memory space to the processing unit . For example the memory partitioning manager may allocate the minimum amount of memory space needed by the processing unit to run a system entity. The amount allocated by the memory partitioning manager may be equal to the amount requested by a user and or sufficient to run the system entity.

Alternatively the amount allocated by the memory partitioning manager may be less than the requested amount and or an insufficient amount to run the system entity. The memory partitioning manager may request memory from other processing units. For example the memory partitioning manager may determine that there is no unallocated physical memory space. As more memory is needed the logic flow may send a request to at least one other processing unit to use less memory at block . In an embodiment the memory partitioning manager may send an asynchronous request.

In an optional embodiment the logic flow may determine whether at least one other processing unit is currently using more than a threshold amount for that processing unit at block . The memory partitioning manager may determine whether another processing unit is using and or allocated more than a threshold or minimum amount for that processing unit. For example the memory partitioning manager may assign a threshold amount of memory space of the shared physical memory allocated to a processing unit. Alternatively the threshold amount may be assigned by a user of the system . In yet another alternative example the threshold amount may be assigned by an operating system or an application specific profile. Based on the threshold amount the memory partitioning manger may determine that a processing unit such as the graphical processing memory is currently allocated more memory space than a threshold amount. As a result the memory partitioning manager may request that the graphical processing memory use less memory. The memory partition manager may request that the graphical processing unit reduce the allocated memory space by a certain amount. The embodiments are not limited to the example above.

The logic flow may send a response that no memory space is available at block . For example a system entity may have sent a request for more memory space. The memory partitioning manager may determine at block that there is no unallocated memory space or not a sufficient amount of unallocated memory space. The memory partitioning manager may determine at block that no processing unit is currently using more than a threshold amount. As a result the memory partitioning manager may respond to the request that no memory space is available to allocate to the processing unit.

The logic flow may send an asynchronous request to at least one other processing unit to reduce the amount of memory space at block . The memory partitioning manager may send an asynchronous request to at least one other processing unit to use less memory space based on the determination that all the shared physical memory has been allocated at block . Optionally the memory partitioning manager may send an asynchronous request to a processing unit to use less memory space based on the determination that the processing unit is using more than a threshold amount.

The logic flow may send a response that no memory space is currently available but memory space may become available at block . The memory partitioning manager may make a callback to the requestor when it determines whether memory space can be allocated to the processing unit . For example the memory partitioning manager may send a response to a system entity that initiated the request for more memory space for the processing unit. The memory partitioning manager may respond that no memory space is currently available but that the memory partitioning manager will asynchronously send a message to the system entity if and or when memory space becomes available.

The logic flow may determine whether at least one other processing unit was able to make available memory space within the shared physical memory at block . If another processing unit was able to make available memory space within the shared physical memory then the logic flow may respond with an amount of the allocated memory space at block . The response may inform the requestor that the memory partitioning manger may allocate the available memory space to the processing unit . As a result of the newly allocated memory the system entity may run on the processing unit .

Alternatively if no processing unit made available memory space in the shared physical memory the logic flow may respond that no memory space is available at block . For example no processing unit may be using more than its minimum amount threshold. In this case the system may be running optimally with all memory completely utilized despite the fact that one or more processing units could benefit from more memory.

In the illustrated embodiment shown in the logic flow may determine an amount of memory space to be reallocated at block . The memory partitioning manager may determine the amount of memory space based on a request received from a processing unit. The memory partitioning manager may identify when and which processing unit should reduce a determined amount of allocated memory. For example the memory partitioning manager may identify when a processing unit is allocated more than a minimum threshold amount of the shared physical memory . In another example the memory partitioning manager may receive a request for more memory space and determine that the amount of memory space allocated to a particular processing unit should be decreased based on an application profile or user request.

The logic flow may send a request to reduce memory space utilized by a processing unit at block . The memory partitioning manager may send the request to a processing unit. Alternatively the memory partitioning manager may send the request to an entity managing a processing unit. For example if the memory partitioning manager requests that the graphical processing unit reduce its allocated memory space in the shared physical memory then the memory partitioning manager may send the request to a graphics driver or an operating system managing the graphical processing unit . Alternatively if the memory partitioning manager requests that the central processing unit reduce its allocated memory space in the shared physical memory then the memory partitioning manager may send the request to an operating system managing the central processing unit .

The request sent from the memory partitioning manager may include an amount by which to reduce the memory space allocated to a processing unit. In an embodiment the memory partitioning manager may request that the processing unit reduce its utilization of the memory space by an entire amount needed by a system entity in . In another embodiment the memory partitioning manager may request less than the full amount of memory space requested in . For example the memory partitioning manager may allocate some memory space from unallocated memory space. Alternatively the memory partitioning manager may allocate memory space from another processing unit.

The logic flow may receive a response that the memory space allocated to the processing unit will be reduced at block . The memory partitioning manager may receive a response that the entity managing the processing unit will asynchronously reduce the amount of memory space allocated to the processing unit in the shared physical memory . The entity managing the processing unit may asynchronously reduce the memory space by a determined amount within the processing unit s allocated portion of the shared physical memory .

If there is insufficient available memory space within the processing unit s portion of the physical memory memory space may be made available as further discussed in . Once there is available memory space within the processing unit s portion of the shared physical memory the processing unit may send a request to the memory partitioning manager to consolidate the shared physical memory .

The logic flow may receive a request to consolidate the determined amount of memory space at block . The memory partitioning manager may receive a request to consolidate the memory space after the entity managing the processing unit makes available the requested amount of memory space. The memory partitioning manager may receive a consolidation request to consolidate the available memory space in order to reparation the shared physical memory .

The logic flow may consolidate the determined amount of memory space at block . The memory partitioning manager may consolidate the determined amount of memory space by copying memory resources in the memory space to be allocated to a second processing unit into the available memory spaces which will remain allocated to the first processing unit. Memory resources may be information and or memory arrays within the memory space. The memory space to be allocated to the second processing unit may be the determined amount of memory space allocated to the first processing unit requested by the memory partitioning manager. The memory resources within the determined amount of the memory space may be copied into the available memory space which will remain allocated to the first processing unit. This rearranging may place the available memory spaces in the determined amount of memory space to be allocated to the second processing unit. The memory resources in the determined amount of memory space may be copied to memory space that will remain allocated to the first processing unit.

For example at system initialization megabytes 0 to 100 may be allocated to a first processing unit and megabytes 100 to 200 may be allocated to a second processing unit. The memory partitioning manager may send a request to reallocate 20 megabytes of the first processing unit s memory space to the second processing unit. The first processing unit may make available memory within the first processing unit s portion of the shared physical memory . The memory spaces made available by the entity managing the first processing unit may be located throughout the memory space allocated to the processing unit. For example the 20 available megabytes of memory space made available may be located throughout the 0 to 100 megabytes of memory. However in order to reallocate 20 megabytes of memory space from the first processing unit to the second processing unit the memory space in the first processing unit needs to be contiguous with the memory space in the second processing unit. Accordingly megabytes 80 100 are contiguous in order to allocate the 20 megabytes from the first processing unit to the second processing unit. The memory partitioning manager may consolidate memory space allocated to the first processing unit by copying memory resources in megabytes 80 100 into available memory spaces in megabytes 0 80.

In another embodiment the memory partitioning manager may consolidate the determined amount of memory space by remapping physical pages. In other words the physical pages in the memory space to be reallocated to another processing unit may be remapped. The remapping of physical pages in virtual memory may preclude the need for copying as processing units often use a virtual address space through a paging structure to map memory addresses used by software e.g. virtual addresses into physical addresses used by hardware to locate the actual memory contents. For example a virtual address of 0x50000 may translate via the page tables into physical memory address 0xfe804200. In the case where a system is virtualized with operating systems running as virtual machines there is an additional level of translation. The physical address as viewed by the virtual machine may not necessary match the actual physical address used by the hardware. An additional layer of translation may be maintained by the virtual memory manager. If the memory partitioning manager is operating within the virtual memory manager or can communicate with the virtual memory manager then the memory partitioning manager may cause the virtual machines physical memory reference of 0xfe804200 to point to a different physical page then 0xfe804200. Therefore if a processing unit needed physical address 0xfe804200 in order to have a contiguous memory region the memory partitioning manger as part of the virtual memory manager may allow the processing unit to perceive physical address 0xfe804200 as available when in fact this address was translated into some other available physical page.

The logic flow may reallocate the consolidated memory space at block . Once the memory partitioning manager consolidates the memory space the shared physical memory may be dynamically repartitioned. The memory partitioning manager may dynamically allocate the determined memory space to the other processing unit during runtime. In an embodiment the hardware range registers may be updated as discussed above. The registers may be used to enforce access protections between processing units. In the virtual memory manager remapping case discussed above the processing units may have full range access to the entire physical memory space and security controls may be enforced via the virtual memory manager or some other mechanism.

The memory partitioning manager may send a request to the graphics driver to reduce the memory space utilized by the graphical processing unit . The graphics driver may receive the request to reduce the memory space allocated to the graphical processing unit in the shared physical memory . The request may include an amount by which to reduce the memory space.

The graphics driver may respond to the memory partitioning manager indicating that the memory space allocated to the graphical processing unit will be reduced. The graphics driver may send a request to the graphical processing unit to determine when the graphical processing unit has finished its current task.

The graphical processing unit may wait until the graphical processing unit portion of the shared physical memory that needs to be released is no longer active e.g. is no longer being used. The graphical processing unit may wait until a task is completed prior to reducing memory space in order to ensure that the system remains synchronized. By ensuring synchronization the reduction of memory space allocated to a processing unit may be a seamless process. As a result all tasks may be completed without failure and or without the system freezing. For example the graphics driver may wait unit the current frame received by the graphical processing unit has completed rendering all active rendering contexts prior to reducing the graphical processing unit portion of the shared physical memory .

Once the graphical processing unit has completed the tasks the graphics processing unit may send the graphics driver a notification that the current tasks are completed. The graphics driver may make available the requested amount of memory space in the graphical processing unit portion of the shared physical memory currently allocated to the graphical processing unit . The memory space may be made available by freeing memory resources copying memory resources or paging memory resources to a non volatile long term storage such as but not limited to a magnetic or hard disk. Memory resources may be information and or memory arrays within the memory space. For example the graphical processing unit may make available memory space by deleting memory resources or memory arrays in the physical memory that are no longer being used and or are no longer needed. In an alternate example the graphical processing unit may page the memory resources to a magnetic disk.

Once the memory space is available the graphics driver may send a request to the memory partitioning manager to consolidate the memory space that was made available by graphics driver . The memory partitioning manager may consolidate the memory space thus repartitioning the shared physical memory . The memory partitioning manager may consolidate the requested memory space and the requested amount of memory space may be allocated to another processing unit as discussed in .

After the repartitioning the graphics driver may rearrange 535 any memory resources which were displaced to make available memory space. The graphics driver may manage copying the memory resources into memory space allocated to the graphical processing unit according to existing methods.

In the shared physical memory the memory partitioning manager may receive a request for more memory for the central processing unit . The memory partitioning manager may determine an amount of memory space to allocate to the graphical processing unit . The memory partitioning manager may request an amount of a first memory space currently allocated to the central processing memory unit to be reallocated to the graphical processing unit . The shared physical memory depicts the new desired partitioning of the memory space allocated to the central processing unit . Graphical processing unit may be allocated the memory space and also newly allocated memory space . The shared physical memory illustrates the amount of memory to be repartitioned from the central processing unit portion of the shared physical memory to the graphical processing unit portion of the shared physical memory . For example 128 MB of first memory space may be reallocated from the central processing unit to the graphical processing unit .

In the shared physical memory memory resources from the memory space allocated to the central processing unit may be copied to virtual memory in order to reduce the amount of memory space needed by the central processing unit . In an embodiment the memory resources from the memory space allocated to the central processing unit may include memory arrays memory information and or memory content. Memory space from the central processing unit portion of the shared physical memory may be made available by an entity managing the central processing unit such as but not limited to a graphics driver or a system entity such as an operating system. The entity managing the central processing unit may copy memory resources from the central processing unit portion into paged memory on a non volatile long term storage such as but not limited to a magnetic or hard disk until the central processing unit portion has sufficient memory space available to be reallocated to the graphical processing unit . In an embodiment the entity managing the central processing unit may copy memory resources from the central processing unit portion into any type of backup storage device that is accessible to the central processing unit . The non volatile long term storage or backup storage device may be larger but have a slower processing speed than the shared physical memory .

As a processing unit uses contiguous memory space the memory space which is now available within the central processing unit memory space may be made into a memory space contiguous to the memory space allocated to the graphical processing unit . In the shared physical memory the memory partitioning manager may copy memory resources from the memory space to be allocated to the graphical processing unit to the available memory space which will remain allocated to the central processing unit . For example the memory resources from memory page of the memory space to be reallocated to the graphical processing unit may be copied into the available memory page in the memory space which will remain allocated to the central processing unit . By copying the memory resources from memory page into available memory page which will remain allocated to the central processing unit the memory space contiguous to the graphical processing unit portion may become available. Once the memory space is available memory space it may be repartitioned to be part of the graphical processing unit portion .

In the shared physical memory the memory space requested for the graphical processing unit may be dynamically reallocated to the graphical processing unit during runtime. The memory partitioning manager may dynamically allocate the memory space to the graphical processing unit during runtime. The graphical processing unit and or the entity managing the graphical processing unit may control the graphical processing unit portion of the shared physical memory including the requested memory space .

After the memory space is dynamically reallocated to the graphical processing unit during runtime any memory resources of the central processing unit that were stored in the paged memory on a storage device such as but not limited to non volatile long term memory or a magnetic disk may be transferred back to the central processing unit portion of the shared physical memory . In an embodiment the memory resources may be transferred back into a different part or region of the memory space of the central processing unit portion than where the memory resources were originally located. The entity managing the central processing unit may copy the memory resources into various memory pages in the memory space allocated to the central processing unit via on demand paging as per current methods. In an embodiment a system entity such as the operating system may manage the memory space according to current methods. Current methods may include but are not limited to copying memory resources into physical memory for disk on demand at the time a program requests the resources.

Various embodiments may be implemented using hardware elements software elements or a combination of both. Examples of hardware elements may include processors microprocessors circuits circuit elements e.g. transistors resistors capacitors inductors and so forth integrated circuits application specific integrated circuits ASIC programmable logic devices PLD digital signal processors DSP field programmable gate array FPGA logic gates registers semiconductor device chips microchips chip sets and so forth. Examples of software may include software components programs applications computer programs application programs system programs machine programs operating system software middleware firmware software modules routines subroutines functions methods procedures software interfaces application programming interfaces instruction sets computing code computer code code segments computer code segments words values symbols or any combination thereof. Determining whether an embodiment is implemented using hardware elements and or software elements may vary in accordance with any number of factors such as desired computational rate power levels heat tolerances processing cycle budget input data rates output data rates memory resources data bus speeds and other design or performance constraints.

In embodiments system comprises a platform coupled to a display . Platform may receive content from a content device such as content services device s or content delivery device s or other similar content sources. A navigation controller comprising one or more navigation features may be used to interact with for example platform and or display . Each of these components is described in more detail below.

In embodiments platform may comprise any combination of a chipset processor s memory storage graphics subsystem applications and or radio . Chipset may provide intercommunication among processor memory storage graphics subsystem applications and or radio . For example chipset may include a storage adapter not depicted capable of providing intercommunication with storage .

Processor s may be implemented as Complex Instruction Set Computer CISC or Reduced Instruction Set Computer RISC processors x86 instruction set compatible processors multi core or any other microprocessor or central processing unit. In embodiments processor s may comprise dual core processor s dual core mobile processor s and so forth.

Memory may be implemented as a volatile memory device such as but not limited to a Random Access Memory RAM Dynamic Random Access Memory DRAM or Static RAM SRAM .

Storage may be implemented as a non volatile storage device such as but not limited to a magnetic disk drive optical disk drive tape drive an internal storage device an attached storage device flash memory battery backed up SDRAM synchronous DRAM and or a network accessible storage device. In embodiments storage may comprise technology to increase the storage performance enhanced protection for valuable digital media when multiple hard drives are included for example.

Graphics subsystem may perform processing of images such as still or video for display. Graphics subsystem may be a graphical processing unit GPU or a visual processing unit VPU for example. An analog or digital interface may be used to communicatively couple graphics subsystem and display . For example the interface may be any of a High Definition Multimedia Interface DisplayPort wireless HDMI and or wireless HD compliant techniques. Graphics subsystem could be integrated into processor or chipset . Graphics subsystem could be a stand alone card communicatively coupled to chipset .

The graphics and or video processing techniques described herein may be implemented in various hardware architectures. For example graphics and or video functionality may be integrated within a chipset. Alternatively a discrete graphics and or video processor may be used. As still another embodiment the graphics and or video functions may be implemented by a general purpose processor including a multi core processor. In a further embodiment the functions may be implemented in a consumer electronics device.

Radio may include one or more radios capable of transmitting and receiving signals using various suitable wireless communications techniques. For example the radio may include a radio receiver. Such techniques may involve communications across one or more wireless networks. Exemplary wireless networks include but are not limited to wireless local area networks WLANs wireless personal area networks WPANs wireless metropolitan area network WMANs cellular networks and satellite networks. In communicating across such networks radio may operate in accordance with one or more applicable standards in any version.

In embodiments display may comprise any television type monitor or display. Display may comprise for example a computer display screen touch screen display video monitor television like device and or a television. Display may be digital and or analog. In embodiments display may be a holographic display. Also display may be a transparent surface that may receive a visual projection. Such projections may convey various forms of information images and or objects. For example such projections may be a visual overlay for a mobile augmented reality MAR application. Under the control of one or more software applications platform may display user interface on display .

In embodiments content services device s may be hosted by any national international and or independent service and thus accessible to platform via the Internet for example. Content services device s may be coupled to platform and or to display . Platform and or content services device s may be coupled to a network to communicate e.g. send and or receive media information to and from network . Content delivery device s also may be coupled to platform and or to display .

In embodiments content services device s may comprise a cable television box personal computer network telephone Internet enabled devices or appliance capable of delivering digital information and or content and any other similar device capable of unidirectionally or bidirectionally communicating content between content providers and platform and display via network or directly. It will be appreciated that the content may be communicated unidirectionally and or bidirectionally to and from any one of the components in system and a content provider via network . Examples of content may include any media information including for example video music medical and gaming information and so forth.

Content services device s receives content such as cable television programming including media information digital information and or other content. Examples of content providers may include any cable or satellite television or radio or Internet content providers. The provided examples are not meant to limit embodiments of the invention.

In embodiments platform may receive control signals from navigation controller having one or more navigation features. The navigation features of controller may be used to interact with user interface for example. In embodiments navigation controller may be a pointing device that may be a computer hardware component specifically human interface device that allows a user to input spatial e.g. continuous and multi dimensional data into a computer. Many systems such as graphical user interfaces GUI and televisions and monitors allow the user to control and provide data to the computer or television using physical gestures.

Movements of the navigation features of controller may be echoed on a display e.g. display by movements of a pointer cursor focus ring or other visual indicators displayed on the display. For example under the control of software applications the navigation features located on navigation controller may be mapped to virtual navigation features displayed on user interface for example. In embodiments controller may not be a separate component but integrated into platform and or display . Embodiments however are not limited to the elements or in the context shown or described herein.

In embodiments drivers not shown may comprise technology to enable users to instantly turn on and off platform like a television with the touch of a button after system initialization when enabled for example. Program logic may allow platform to stream content to media adaptors or other content services device s or content delivery device s when the platform is turned off. In addition chip set may comprise hardware and or software support for 5.1 surround sound audio and or high definition 6.1 surround sound audio for example. Drivers may include a graphics driver for integrated graphics platforms. In embodiments the graphics driver may comprise a peripheral component interconnect PCI Express graphics card.

In various embodiments any one or more of the components shown in system may be integrated. For example platform and content services device s may be integrated or platform and content delivery device s may be integrated or platform content services device s and content delivery device s may be integrated for example. In various embodiments platform and display may be an integrated unit. Display and content service device s may be integrated or display and content delivery device s may be integrated for example. These examples are not meant to limit the invention.

In various embodiments system may be implemented as a wireless system a wired system or a combination of both. When implemented as a wireless system system may include components and interfaces suitable for communicating over a wireless shared media such as one or more antennas transmitters receivers transceivers amplifiers filters control logic and so forth. An example of wireless shared media may include portions of a wireless spectrum such as the RF spectrum and so forth. When implemented as a wired system system may include components and interfaces suitable for communicating over wired communications media such as input output I O adapters physical connectors to connect the I O adapter with a corresponding wired communications medium a network interface card NIC disc controller video controller audio controller and so forth. Examples of wired communications media may include a wire cable metal leads printed circuit board PCB backplane switch fabric semiconductor material twisted pair wire co axial cable fiber optics and so forth.

Platform may establish one or more logical or physical channels to communicate information. The information may include media information and control information. Media information may refer to any data representing content meant for a user. Examples of content may include for example data from a voice conversation videoconference streaming video electronic mail email message voice mail message alphanumeric symbols graphics image video text and so forth. Data from a voice conversation may be for example speech information silence periods background noise comfort noise tones and so forth. Control information may refer to any data representing commands instructions or control words meant for an automated system. For example control information may be used to route media information through a system or instruct a node to process the media information in a predetermined manner. The embodiments however are not limited to the elements or in the context shown or described in .

As shown in the communications architecture comprises includes one or more clients and servers . The clients and the servers are operatively connected to one or more respective client data stores and server data stores that can be employed to store information local to the respective clients and servers such as cookies and or associated contextual information.

The clients and the servers may communicate information between each other using a communication framework . The communications framework may implement any well known communications techniques and protocols. The communications framework may be implemented as a packet switched network e.g. public networks such as the Internet private networks such as an enterprise intranet and so forth a circuit switched network e.g. the public switched telephone network or a combination of a packet switched network and a circuit switched network with suitable gateways and translators .

Various embodiments may be implemented using hardware elements software elements or a combination of both. Examples of hardware elements may include processors microprocessors circuits circuit elements e.g. transistors resistors capacitors inductors and so forth integrated circuits application specific integrated circuits ASIC programmable logic devices PLD digital signal processors DSP field programmable gate array FPGA logic gates registers semiconductor device chips microchips chip sets and so forth. Examples of software may include software components programs applications computer programs application programs system programs machine programs operating system software middleware firmware software modules routines subroutines functions methods procedures software interfaces application programming interfaces instruction sets computing code computer code code segments computer code segments words values symbols or any combination thereof. Determining whether an embodiment is implemented using hardware elements and or software elements may vary in accordance with any number of factors such as desired computational rate power levels heat tolerances processing cycle budget input data rates output data rates memory resources data bus speeds and other design or performance constraints.

Some embodiments may be described using the expression one embodiment or an embodiment along with their derivatives. These terms mean that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment. Further some embodiments may be described using the expression coupled and connected along with their derivatives. These terms are not necessarily intended as synonyms for each other. For example some embodiments may be described using the terms connected and or coupled to indicate that two or more elements are in direct physical or electrical contact with each other. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other.

It is emphasized that the Abstract of the Disclosure is provided to allow a reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate embodiment. In the appended claims the terms including and in which are used as the plain English equivalents of the respective terms comprising and wherein respectively. Moreover the terms first second third and so forth are used merely as labels and are not intended to impose numerical requirements on their objects.

In some embodiments a computer implemented method may include determining an amount of a memory space in a physical memory allocated to a first processing unit during system initialization consolidating the determined amount of the memory space and reallocating the consolidated memory space to the second processing unit during runtime. A request to allocate memory space to a second processing unit may be received. It may be determined whether the physical memory includes unallocated memory space. It may be determined whether the first processing unit includes available memory space. It may be determined whether the memory space allocated to the first processing unit exceeds a threshold. Physical pages from the determined amount of the memory space may be remapped. Memory resources may be copied into a non volatile long term storage to make available memory space within the first processing unit. Memory resources within the determined amount of the memory space may be copied into available memory space allocated to the first processing unit. A request to reallocate the physical memory during runtime may be received based on a user created profile for allocation of the physical memory an application specific profile or on dynamic determinations by a system entity. In an embodiment the system entity may be an operating system.

In an embodiment an apparatus may include a plurality of processing units and a memory partitioning manager operative on the at least one of the plurality of processing units to repartition a physical memory comprising a first memory space allocated to a first processing unit and a second memory space allocated to a second processing unit. The memory partitioning manager may be operative to determine an amount of the first memory space to be reallocated to the second processing unit and reallocate the determined amount of the first memory space to the second processing unit during runtime. The memory partitioning manager may be operative to consolidate the determined amount of first memory space. The memory partitioning manager may be operative to receive a request to allocate memory space to the second processing unit. The memory partitioning manager may be operative to determine whether the first processing unit includes available memory space. The memory partitioning manager may run on a virtual machine monitor. The memory partitioning manager may run on one of a central processing unit a graphics driver a logic circuit or an operating system. The memory partitioning manager may be operative to determine whether the first memory space allocated to the first processing unit exceeds a threshold. The memory partitioning manager may be operative to remap physical pages from the determined amount of the memory space. The apparatus may include a digital display operatively coupled to at least one of the plurality of processing units.

In various embodiments at least one machine readable medium may include a plurality of instructions that in response to being executed on a computing device cause the computing device to request an amount of a memory space in a physical memory allocated to a first processing unit to be reallocated to a second processing unit consolidate the requested amount of the memory space in the physical memory allocated to the first processing unit during runtime and reallocate the consolidated memory space to the second processing unit. The at least one machine readable medium may include a plurality of instructions that in response to being executed on a computing device cause the computing device to determine whether the physical memory includes unallocated memory space. The at least one machine readable medium may include a plurality of instructions that in response to being executed on a computing device cause the computing device to determine whether the memory space allocated to the first processing unit exceeds a threshold. The at least one machine readable medium may include a plurality of instructions that in response to being executed on a computing device cause the computing device to remap physical pages from the requested amount of the memory space. The at least one machine readable medium may include a plurality of instructions that in response to being executed on a computing device cause the computing device to copy memory resources into a non volatile long term memory to make available memory space within the first processing unit.

In some embodiments a system may include plurality of processing units a digital display operatively coupled to at least one of the plurality of processing units and a memory partitioning manager on at least one of the plurality of processing units to reallocate a first memory space in a physical memory space allocated to a first processing unit and a second memory space in the physical memory space allocated to a second processing unit. The memory partitioning manager may be operative to determine an amount of the first memory space to allocate to the second processing unit consolidate the determined amount of first memory space and reallocate the consolidated first memory space to the second processing unit. The system may include a radio receiver operatively coupled to at least one of the plurality of processing units. The memory partitioning manager may be operative to copy memory resources into a non volatile long term memory to make available memory space within the first processing unit. The memory partitioning manager may be operative to copy memory resources within the determined amount of the first memory space into available memory space allocated to the first processing unit. The system may include a third memory space in the physical memory space and the memory partitioning manager operative to determine an amount of the third memory space to allocate to a third processing unit consolidate the determined amount of third memory space and reallocate the consolidated third memory space to the third processing unit.

What has been described above includes examples of the disclosed architecture. It is of course not possible to describe every conceivable combination of components and or methodologies but one of ordinary skill in the art may recognize that many further combinations and permutations are possible. Accordingly the novel architecture is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims.

