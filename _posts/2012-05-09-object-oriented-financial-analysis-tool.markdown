---

title: Object oriented financial analysis tool
abstract: A financial analysis program includes an object oriented architecture having a number of abstract classes associated with performing financial calculations. The abstract classes include an instruments class that defines a number of financial instruments in a hierarchical manner. The abstract classes also include a models class that defines a number of objects or functions used to perform financial calculations. The program also includes an interface to allow a user to pass instrument parameters to the objects or functions and execute the object or function using the instrument parameters.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08326750&OS=08326750&RS=08326750
owner: The MathWorks, Inc.
number: 08326750
owner_city: Natick
owner_country: US
publication_date: 20120509
---
This application is a continuation of U.S. patent application Ser. No. 13 285 374 filed Oct. 31 2011 which is a continuation of U.S. patent application Ser. No. 11 873 698 filed Oct. 17 2007 now U.S. Pat. No. 8 060 421 the disclosures of which are incorporated by reference herein in their entirety.

Financial data is often analyzed to gain information of interest. For example assets in a portfolio are often analyzed to minimize risk in the portfolio and optimize return. As another example pricing a bond may involve complex data analysis that takes into consideration a number of factors e.g. yield maturity date risk etc. associated with the bond. Financial analysis programs are often used to perform these tasks. However such financial programs are often inefficient and suffer from interoperability issues between various tools or functions.

For example considerable data input is often required in order for a user to perform a particular function that may be repeated many times. Such data input is typically time consuming and inefficient. In addition each particular function may have a different input mechanism associated with performing the desired calculation. This may make it difficult for the user to interact with the program to perform multiple calculations. Still further different tools or functions within a program often perform similar processing with respect to analyzing financial data. However due to interoperability issues one tool or function cannot typically use a structure or function associated with another tool function.

The following detailed description of exemplary embodiments refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements. Also the following detailed description does not limit the invention.

Systems and methods described herein provide a number of financial tools or programs organized in a hierarchical object oriented system. The object oriented system includes an extensible architecture that allows the financial tools to be flexible. The object oriented system also enhances usability and interoperability between various tools.

User device may include a computer device such as a desktop computer a personal computer a laptop computer a client a server a mainframe a personal digital assistant PDA a web enabled cellular telephone a smart phone or another computation or communication device that executes instructions to perform one or more activities and or functions as described below.

Server may include one or more server entities that provide access to various financial analysis programs. For example in one implementation server may be configured to store and or provide access to one or more financial application programs or tools. In an exemplary implementation the financial application programs associated with server may be written using an object oriented architecture that provides for extensibility of various functions as well as interoperability between programs as described in detail below. The financial application programs may also be written using standardized or uniform input mechanisms to allow for simplified use by an inexperienced user.

Network may include a local area network LAN a wide area network WAN a metropolitan area network MAN a telephone network such as the Public Switched Telephone Network PSTN or a cellular telephone network an intranet the Internet a wireless network an optical network a combination of networks etc. Network may be a hardwired network using wired conductors and or optical fibers and or may be a wireless network using free space optical radio frequency RF and or acoustic transmission paths. In one implementation network may be a substantially open public network such as the Internet. In another implementation network may be a more restricted network such as a corporate virtual network. Implementations of networks and or devices operating on networks described herein are not limited to any particular data type protocol architecture configuration etc. In one implementation user device and server may connect to network via wired and or wireless connections.

In one implementation user device may store a number of applications associated with performing financial calculations. In another implementation user device may access a number of financial applications maintained on server via network . If the financial applications are stored in user device server and network may be omitted and user device may function as a standalone device when performing financial calculations.

As described above user device may store financial modeling and analysis programs that provide the user with the ability to perform any number of financial analysis programs functions. In some implementations the financial modeling and analysis programs may be accessible to various user devices such as user device remotely such as via network .

In either case user device and or server may provide or support a technical computing environment TCE for performing financial analysis and modeling. A technical computing environment as the term is used herein is to be broadly interpreted to include hardware and or software based logic that provides a computing environment or platform that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that required the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In some implementations a TCE may be single device. In other implementations a TCE may include a number of distributed processing devices that each perform a portion of the processing for the TCE.

In one implementation the TCE may include a dynamically typed language that can be used to express problems and or solutions in mathematical notations familiar to those of skill in the relevant arts. For example the TCE may use an array as a basic element where the array may not require dimensioning. In addition the TCE may be adapted to perform matrix and or vector formulations that can be used for data analysis data visualization application development simulation modeling algorithm development etc. These matrix and or vector formulations may be used in many areas such as statistics finance image processing signal processing control design life sciences education discrete event analysis and or design state based analysis and or design etc.

The TCE may further provide mathematical functions and or graphical tools e.g. for creating plots surfaces images volumetric representations etc. . In one implementation the TCE may provide these functions and or tools using toolboxes e.g. toolboxes for financial analysis and modeling signal processing image processing data plotting parallel processing etc. . In another implementation the TCE may provide these functions as block sets. In still another implementation the TCE may provide these functions in another way such as via a library etc. The TCE may also be implemented as a text based environment a graphically based environment or another type of environment such as a hybrid environment that is both text and graphically based.

In other embodiments the TCE may be implemented using one or more text based products. For example a text based TCE may be implemented using products such as but not limited to MATLAB software by The MathWorks Inc. Octave Python Comsol Script MATRIXx from National Instruments Mathematica from Wolfram Research Inc. Mathcad from Mathsoft Engineering Education Inc. Maple from Maplesoft Extend from Imagine That Inc. Scilab from The French Institution for Research in Computer Science and Control INRIA Virtuoso from Cadence or Modelica or Dymola from Dynasim. The text based TCE may support one or more commands that support parallel processing.

In still other embodiments the TCE may be implemented using a graphically based products such as but not limited to Simulink software Stateflow software SimEvents software etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments Dymola by Dynasim SoftWIRE by Measurement Computing WiT by DALSA Coreco VEE Pro or SystemVue by Agilent Vision Program Manager from PPT Vision Khoros from Khoral Research Gedae by Gedae Inc. Scicos from INRIA Virtuoso from Cadence Rational Rose from IBM Rhopsody or Tau from Telelogic Ptolemy from the University of California at Berkeley or aspects of a Unified Modeling Language UML or SysML environment. The graphically based TCE may support parallel processing using one or more distributed processing devices.

In still further embodiments methods and systems described herein may be implemented in a language that is compatible with a product that includes a TCE such as one or more of the above identified text based or graphically based TCEs. For example MATLAB a text based TCE may use a first command to represent an array of data and a second command to transpose the array. Another product that may or may not include a TCE may be MATLAB compatible and may be able to use the array command the array transpose command or other MATLAB commands. For example the product may use the MATLAB commands to perform parallel processing.

Still further embodiments may be implemented in a hybrid TCE that combines features of a text based and graphically based TCE. In one implementation one TCE may operate on top of the other TCE. For example a text based TCE e.g. MATLAB may operate as a foundation and a graphically based TCE e.g. Simulink may operate on top of MATLAB and may take advantage of text based features e.g. commands to provide a user with a graphical user interface and graphical outputs e.g. graphical displays for data .

As described above systems and techniques described herein may process financial data to obtain information of interest to a user. In some implementations aspects described herein may be performed via for example a web service. For example the web service may provide user device and or server with one or more programs provided by a program provider. The term web service as used herein may be a software application that allows machine to machine communication over a network such as network . For example a server may communicate with a client using an application programming interface API that the client accesses over the network. In one embodiment the server may exchange hypertext markup language HTML extensible markup language XML or other types of messages with the client using industry compatible standards such as simple object access protocol SOAP and or proprietary standards. A web service may further include network services that can be described using industry standard specifications such as web service definition language WSDL and or proprietary specifications.

Processor may include a processor microprocessor or processing logic that may interpret and execute instructions. Main memory may include a random access memory RAM or another type of dynamic storage device that may store information and instructions for execution by processor . ROM may include a ROM device or another type of static storage device that may store static information and instructions for use by processor . Storage device may include a magnetic and or optical recording medium and its corresponding drive.

Input device may include a mechanism that permits an operator to input information to user device server such as a keyboard a mouse a pen voice recognition and or biometric mechanisms etc. Output device may include a mechanism that outputs information to the operator including a display a printer a speaker etc. Communication interface may include any transceiver like mechanism that enables user device server to communicate with other devices and or systems. For example communication interface may include mechanisms for communicating with other devices such as other user devices via a network.

As will be described in detail below user device server consistent with exemplary embodiments may perform certain processing related operations. User device server may perform these operations in response to processor executing software instructions contained in a computer readable medium such as memory . A computer readable medium may be defined as a physical or logical memory device. The software instructions may be read into memory from another computer readable medium such as data storage device or from another device via communication interface . The software instructions contained in memory may cause processor to perform processes that will be described later. Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus embodiments described herein are not limited to any specific combination of hardware circuitry and software.

Although shows exemplary components of the user device server in other implementations user device server may contain fewer different or additional components than depicted in . In still other implementations one or more components of user device server may perform the tasks performed by one or more other components of user device server .

Financial toolbox may include a number of functions and or programs used to for example optimize portfolios estimate risk analyze interest rate levels price equity derivatives and handle financial time series data. Derivatives toolbox may include a number of functions and or programs used to for example analyze and model equity and fixed income derivatives and securities contingent on interest rates. Fixed income toolbox may include a number of functions and or programs used to for example provide fixed income modeling and analysis. For example the fixed income toolbox may include programs and or functions for determining the price yield and cash flow for many types of fixed income securities such as mortgage backed securities corporate bonds treasury bonds municipal bonds certificates of deposits and treasury bills. GARCH toolbox may include a number of functions and or programs specific to volatility modeling that includes for example Monte Carlo simulation of univariate returns minimum mean square error forecasts and pre and post estimation diagnostic and hypothesis testing. Datafeed toolbox may include a number of functions and or programs that provide access to live market data time series data and historical market data for use in complex financial and analytical models. For example datafeed toolbox may retrieve data such as live data feeds RSS feeds e.g. rich site summary feeds really simple syndication feeds resource description framework site summary feeds financial data feeds e.g. from Bloomberg Reuters etc. and or retrieve other data live or historical from other sources or databases. The data retrieved by datafeed toolbox may be operated on by various algorithms functions or models within financial modeling and analysis programs . Each of the functions and or programs included in financial modeling and analysis programs may be implemented using an object oriented architecture that is both robust and extensible as described in detail below.

From FINOBJ a number of abstract classes may be defined. In an exemplary implementation instruments class instrument components class models class and model utilities class may function as classes that define various characteristics for elements used by financial modeling and analysis programs .

Instruments class may represent various types of financial instruments bonds options stocks etc. . Instrument components class may include objects data and or other structures used to extend functionality associated with any of the instruments in instruments class . Models class may represent various algorithms functions or structures used to perform financial analysis. Model utilities class includes objects data and or other structures that may be used by models in models class to perform various financial calculations.

The base classes and illustrated in act as building blocks for more complex instruments functionality. For example each of classes and shown in may be broken down into individual instruments or objects having particular properties. In each case the individual instruments or objects of architecture allow for interoperability between functions performed by various ones of toolboxes and in .

Object oriented architecture may be executed using a distributed and or parallel computing environment such as in a TCE described above or in any other distributed computing environment in which a number of distributed processing devices may each perform a portion of the processing in parallel or series with processing performed by other ones of the processing devices.

Processing may begin by defining a single financial object i.e. FINOBJ and a number of abstract classes e.g. classes and associated with FINOBJ act . For example as described above FINOBJ may be the high level abstract object associated with performing all or most of the functions in financial modeling and analysis programs e.g. various programs in one or more of toolboxes and . Based on the desired functionality associated with toolboxes and the program developer may identify base classes that will function as the building blocks for more complex instruments and functions associated with performing analysis associated with financial data.

In this example assume that instruments class instrument components class models class and model utilities class as illustrated in are defined as the base classes from which more complex elements will be generated defined. It should be understood that these classes are exemplary only and other classes and or additional classes may be defined based on the particular functionality associated with financial modeling and analysis program .

After the classes have been defined each of the classes i.e. classes and may be broken down into relevant subclasses objects or elements act . For example instruments class may be broken down into a number of abstract classes that define various instruments upon which financial modeling and analysis programs perform data analysis. In an exemplary implementation instruments class may be broken down into three abstract classes derivatives equity and debt. schematically illustrates the derivatives equity and debt classes derived from instruments class . These three classes provide a classification mechanism that can be used to distinguish one type of instrument from another type of instrument. Similar to the discussion above with respect to classes and these three abstract classes i.e. derivatives equity and debt are exemplary only and other classes and or additional abstract classes may be defined based on the particular functionality associated with the financial modeling and analysis programs . The derivatives equity and debt instrument classes will be described briefly below.

A debt instrument is an investment in which an investor loans money to an entity for a predetermined period of time in exchange for earning a specified rate of interest on the investment. Equity refers to ownership. Stocks common or preferred are often referred to as a type of equity. Therefore equity instruments entitle the holder of the instrument to some type of ownership. A derivative is a financial instrument whose characteristics and value depends on or derives from the characteristics and value of an underlier. An underlier as described in detail below is an instrument or variable upon which the value of a derivative depends. In an exemplary implementation no distinction is made between a debt derivative and an equity derivative. That is if an instrument complies with the definition of a derivative it will be classified as such. In another implementation distinctions may be made between types of derivatives and or financial instruments. For example a distinction can be made between a debt derivative and an equity derivative.

In some implementations a hybrid class not shown in may be defined for instruments that have varying combinations of the above categories. In other implementations specific instruments having a hybrid nature may be defined as belonging to one of the other three classes i.e. debt derivatives or equity .

Returning to after the instrument classes are defined the instrument classes may be further broken down into individual instruments for each of the abstract classes act . In an exemplary implementation the debt class may be broken down to include the following bond certificate of deposit cd fixed floater mortgage backed security mbs step coupon and treasury bill tbill . These instruments each represent a type of debt instrument. The derivatives class may be broken down to include the following caps cash flow floors future option and swap. The equity class may be broken down to include common stock. A number of the individual instruments for each of the derivatives equity and debt classes are illustrated in . It should be understood that additional instruments for each of these classes may also be provided based on the particular functions associated with financial modeling and analysis programs .

Once the individual instrument classes are created properties that are specific to a specific type of financial instrument e.g. stock bond option etc may be assigned to the individual instruments. In other words various properties make up a specification for a particular instrument. In an exemplary implementation an instrument may contain a number of types of properties e.g. five or more . A first property associated with an instrument may be a class identifier property. The class identifier may be used to distinguish one instrument from another instrument in architecture . Therefore each class identifier may include a unique identifier and a description. For example the class identifier property may include a Committee on Uniform Security Identification Procedures CUSIP 9 digit alphanumeric security identifier for each instrument. The description associated with the identifier may be used to further identify what the specific class represents.

A second property associated with an instrument is an underlier. An underlier also referred to as an underlying instrument is an instrument or variable upon which the value of a derivative instrument depends. That is an underlying instrument property name may indicate the type of instrument upon which the derivative depends. For example a bond may be the underlying instrument upon which an option on a bond depends. It should be noted that not all derivative instruments may be composed of physical underliers. For example an interest rate cap caps instrument may be characterized as a portfolio of call options on zero coupon bonds. Therefore similar to an option on a bond the underlying instrument of an interest rate cap is a bond. However instead of containing a property that accepts a bond object the caps class contains properties that may also be found in a bond class.

A third property associated with an instrument is a specification property. Specification properties may be properties other than identifiers underliers instrument components described below and application data described below that specify the characteristics of an instrument.

A fourth property associated with an instrument is a date format property. The data format property allows the user to specify the particular date format to be used when entering and displaying dates. For example in Europe a user may prefer to display dates in a day month year format. The format in this case would be dd mm yyyy where dd represents the day mm represents the month and yyyy represents the year. In the United States however a user may prefer to display dates in a month day year format. The format in this case would be mm dd yyyy. Allowing the user to specify the particular format for date information enables a user to more easily enter date information for performing financial calculations and simplifies the user s ability to execute various complex financial calculations using different tools within financial modeling and analysis programs .

A fifth property associated with an instrument is an applications data property. The applications data property may be a storage mechanism for dissimilar kinds of data. This property may allow a user to store data that is relevant to an instrument or specific to an application that the instrument class may need but was not originally designed to handle. It should be noted that not all objects may contain an applications data property. For example models class and model utilities class may not possess this property.

A sixth property associated with an instrument is an instrument component. An instrument component enhances an instrument by adding different functionality components to a simpler class such as instrument classes. In some implementations the instruments components property may be defined as an abstract class as illustrated by instrument components class .

As described above various properties make up a specification for a particular instrument. Exemplary syntax associated with a caps instrument is shown below.

As shown above the caps instrument includes a class identifier i.e. identifier and description field along with specification properties i.e. market strike settle maturity reset basis and face fields a date format property and an application data property i.e. AppData . These fields may be used to define the particular caps instrument. The date format property as described above allows the user to specify the particular date format to be used when entering and displaying dates.

After the individual instruments have been defined one or more of the instruments may be further broken down into sub instruments act . For example the option instrument under the derivatives class may include the following exemplary sub instruments asian barrier bond option compound lookback stock option swap option. A number of these sub instruments are illustrated in under the option instrument. These sub instruments may have additional properties associated with performing various financial calculations. The details of these properties are not described in detail herein to not unduly obscure the thrust of the invention. However additional sub instruments may be created for other individual instruments based on the particular functions that may be performed by various ones of toolboxes and .

In order to provide allowances for various functionality and future enhancements to architecture such as the addition of new functions the elements objects illustrated in and other elements objects described in below may be designed to take advantage of not only inheritance but also object composition. Object composition refers to the creation of new or more complex functionality by assembling objects. Instrument objects such as those illustrated in function as the backbone of architecture . However instrument objects alone may not provide adequate functionality to meet the demands associated with modeling and analysis in various areas in finance. To resolve this issue instrument components class may be designed to provide an avenue to enhance simple instrument objects to meet the needs of different users.

For example two types of analyses typically exist in finance ex ante and ex post. Ex ante analysis refers to analysis performed beforehand and ex post analysis refers to analysis performed after the fact e.g. retrospective analysis after some event date . One example of ex ante analysis would be valuing a stock and then comparing the predicted results to the stock s actual price. Ex post analysis looks back and determines what would have been the best course of action given what actually happened. An example of ex post analysis is value at risk VaR analysis which estimates the probability of portfolio losses based on the statistical analysis of historical price trends and volatilities.

In an exemplary implementation instruments class and associated methods functions provide support mainly for ex ante analysis although it is possible to perform some limited ex post analysis due to the properties and nature of their designs. Since ex post analysis is often performed on market data such as historical time series information processing may return to act to define instruments components class to include a market class as illustrated in . The market class may be defined to support basic time series information and analysis. In an exemplary implementation the market class may include a price property to handle time series data. As described above the properties make up a specification for a particular instrument or class. Exemplary syntax associated with a market class is shown below.

As shown above the market class includes a class identifier i.e. identifier and description field along with price field valuation date field date format field and applications data field. The time component associated with the data stored in the price field may be stored in the valuation date field. In some implementations the market object itself may not inherently support time series data manipulations such as those found in various financial time series tools. However in other implementations the market class may include methods functions that can be used to perform financial time series manipulations.

Referring back to at act models class may be broken down to include a number of objects associated with the modeling functions to be performed by various programs functions in toolboxes and . For example models class may be broken down to include a number of objects used to create a number of financial trees such as a Black Derman Toy BDT forward rate tree object a Black Karasinski BK forward rate tree object a Cox Ross Rubinstein CRR price tree object an equal probability EQP price tree object a Heath Jarrow Morton HJM cash flow tree object a Hull White HW cash flow tree object and an implied trinomial ITT price tree object. Models class may also be defined to include an interest term ratespec structure object. These objects are illustrated in and may be used to perform various financial functions across a number of the various toolboxes and as described in more detail below.

Models utilities class may also be broken down to include a number of objects associated with the models defined under the models class act . For example model utilities class may be broken down to include the following objects a time object for a BDT tree BDTtimespec a BDT interest rate volatility process object bdtvolspec a time object for a BK tree bktimespec a cash flow tree object cashflowtree a time object for an EQP tree eqptimespec a time object for an HJM tree hjmtimespec an HJM forward rate volatility process object hjmvolspec a time object for an HW tree hwtimespec a price tree object pricetree and a BK or HW interest rate volatility process object volspecbkhw . A number of these objects are illustrated in . In an exemplary implementation some of the individual objects in the model utilities class may be further defined.

For example the cash flow tree object may be subdivided into a BDT cash flow tree object a BK cash flow tree object an HJM cash flow tree object and an HW cash flow tree object. Further the price tree object may be broken down into a BDT price tree object a BK price tree object a CRR price tree object an EQP price tree object an HJM price tree object an HW price tree object and an ITT price tree object. The interest rate volatility process object volspecbkhw may be broken down into a BK interest rate volatility process object and an HW interest rate volatility process object. Still further the time object for an EQP tree equitytimespec may be broken down into a time object for a CRR tree crtimespec a time object for an EQP tree eqptimespec and a time object for an ITT tree itttimespec . A number of these objects are illustrated in . These objects may be used to aid in performing perform various financial calculations as described in detail below.

The various classes i.e. classes and illustrated in and their sub classes objects illustrated in provide a framework for performing various analysis techniques regarding financial data. For example once an instrument object is specified or instantiated valuation of that instrument is possible. Valuation is accomplished via the methodologies associated with each instrument class which may require additional parameters besides those in the instrument specifications. In an exemplary implementation methods for performing various financial calculations in object oriented architecture may be invoked via the syntax instrument.method name The particular methods may be derived from the functions that are to be provided in the various toolboxes e.g. toolboxes and . Since valuation of an instrument often constitutes calculating a price or price sensitivities these operations will be common methods for all the instrument classes. In other words various methods functions and objects in object oriented architecture may be used across all of toolboxes and resulting in efficient processing associated with financial modeling and analysis programs . In addition to common methods each instrument may have other specific methods for calculating yields zero rates etc. Again the available methods for each instrument class will be determined by the desired functionality associated with the various toolboxes e.g. toolboxes and for that instrument type.

In this embodiment the bond option object includes a class identifier property e.g. identifier and description along with various specification data defining the bond strike information settle information exercise dates and option specification information. Valuation for the bond option class may be invoked using either of the following outputs method name mfcs extra parameters . . . or outputs mfcs.method name extra parameters . . . The first syntax may be compatible with an existing financial analysis program e.g. financial tools available from The MathWorks Inc. and the second syntax may be associated with object oriented architecture that may be compatible with existing tools as well as new financial analysis tools available in financial modeling and analysis programs . In other words object oriented architecture may be compatible with existing financial tools in some implementations while also being useful for providing an architecture for new programs and functionality.

Models class as described above may be used to further enhance valuation methods by providing specialized functionality that may be instantiated and passed directly to a valuation method along in the argument list. For instance one can value a bond by common price yield formulas but alternative pricing methods can be based on different models such as a HJM interest rate tree. Exemplary syntax for an HJM tree object is shown below.

In an exemplary implementation models are passed as the first argument to methods such as via the following syntax p ob.Bond.price hjm . Models may also be represented by any data type in MATLAB software e.g. vectors function handles etc .

Model utilities class as described above may be used to enhance models class in a manner similar to instrument components class enhancing instruments class . For example model utilities class may leverage object composition techniques to enhance various models. Further combining various model utilities provides further specialization of valuation methods.

Object oriented architecture may also define portfolios and a universe to aid in performing various financial functions. A portfolio may be a collection or group of assets. Two fundamental properties of a portfolio may be the asset and the quantity of the asset. The quantity of each asset can be expressed as an amount of each asset holdings or as a percentage of the total amount of all the assets weights . These two aspects of a portfolio make up a basic portfolio class. Exemplary syntax of a portfolio class is shown below.

As illustrated the portfolio class includes a class identifier e.g. identifier and description an assets field a quantity field and a quantity type field. The asset property is designed to handle a heterogeneous group of assets which includes not only instrument objects but also other portfolio objects. In other implementations the holdings may be stored with the asset itself e.g. by using a holdings property in the instrument classes . The quantity property may store the number of holdings of each asset or the weights percentages of each asset. In order to specify the type of the quantity the QuantityType property must be set either to Weights or Holdings .

Valuation of a portfolio may be accomplished via the methods functions of the portfolio class. Standard operations such as pricing of the portfolio and calculation of the sensitivities generation of efficient frontiers and portfolio allocation routines may be used to perform these functions.

The ability to extract specific instruments from a portfolio can be accomplished via a universe class object. An analogous example of a universe object is a structured query language SQL statement that specifies the criteria for extracting specific elements from a database. A universe object like the SQL statement specifies the criteria for extracting specific instruments elements from a portfolio database . For example a universe object may operate in conjunction with a portfolio object and extract from the portfolio all instruments of the class bond and option with settlement dates after for example Jan. 1 2007 and which are call options.

Set operations union intersection etc may also be performed on different universe objects to create a subset of criteria for portfolio instrument extraction. For example universe object A may specify the extraction of all bonds and options and universe object B may specify the extraction of any instrument with a settlement date after Jan. 1 2007 and any instrument that is a call option. The union of universe objects A and B results in a single universe object whose criteria for extraction from a portfolio object instruments of the class bond and option with settlement dates after Jan. 1 2007 and which are call options.

As discussed above object oriented architecture may include other functionality based on the particular requirements associated with financial modeling and analysis programs . For example in some implementations a blotter object may be implemented in object oriented architecture . A blotter object may store a record of trades and the details of the trades made over a period of time usually one trading day . The details of a trade will include such things as the time price order size and a specification of whether it was a buy or sell order. The blotter object may be created through a trading software program that records the trades made through a data feed that may be part of datafeed toolbox . The main purpose of a trade blotter is to carefully document the trades so that they can be reviewed and confirmed by the trader or the brokerage firm. The blotter is used in the stock market foreign exchange market and the bond market and can be customized based on the needs of the user.

As described above object oriented architecture provides a robust design for a number of extensible tools that can provide for analyzing a large number of financial products. In addition the object oriented architecture may allow users to develop their own instruments models and analysis algorithms using the basic building blocks discussed above. In other words object oriented architecture provides a platform for any number of existing tools and future tools associated with performing financial analysis.

The user may then set various properties associated with the bond such as the settlement date data of maturity period basis face value etc. to the desired constant values act . These properties may also be set via one or more GUIs that facilitate entry of this information. In alternative implementations the user may enter the desired information via command line syntactical inputs. The user may then set the variable property i.e. coupon rate in this example to three different values act . The particular toolbox e.g. one of toolboxes may then execute the desired function i.e. calculate the bond price based on the three different coupon rates act .

The variable property is shown in bold above. The user may provide three different coupon rates such as 0.0400 0.0500 and 0.0600 which may then be inserted into the function when running the pricing calculation.

In this manner the common portion of the function has been defined as an instrument object and the user may simply enter different coupon rates as arguments for the coupon rate. Similarly object composition e.g. combining objects into more complex ones via vectorization may also enable an instrument or model to achieve rapid prototyping advantages. In addition multiple scenarios may be generated without compromising underlying models.

For example suppose that the user wishes to calculate an option on three different bonds. In this case the user may set various properties as constant i.e. strike price settlement date exercise dates etc. and provide variable information corresponding to each particular bond of interest. Exemplary syntax for performing this operation is illustrated below.

The variable property is shown in bold above. The user may then select three different bond objects to be used for this financial bond object calculation. In this manner object oriented architecture simplifies the running of multiple scenarios by extracting common portions of functions that are to be used and defining these common portions as objects.

As described above a GUI associated with financial modeling and analysis programs may be used to aid a user in performing various financial calculations via user device and or server . Referring to assume that a user at user device wishes to input data for execution by financial modeling and analysis programs which may be executed by a TCE or any other environment platform at server . In this case server may provide GUI which includes a user identification ID area and a password area for allowing the user to enter an ID and or password. In some implementations GUI may also include an input area that allows a user to specify a number of processors to use when executing financial modeling and analysis programs . For example exemplary implementations may use a number of distributed processing devices e.g. a grid of parallel processors to perform the financial processing. Input area may also allow the user to specify an input data file for execution by financial modeling and analysis programs . The input data file may identify a location of a number of data sets for which the user wishes to run financial calculations. User input area may also include an area for allowing the user to specify which particular program e.g. which of toolboxes and that the user wishes to run. It should be understood that a similar GUI may be provided when the user is executing financial modeling and analysis programs locally at user device Q.

Once the user has selected the particular program GUI may provide a number of drop down menus that facilitate entry of the particular information for execution by the desired program. For example in an exemplary implementation the GUI provided by financial modeling and analysis programs may be use a standardized input argument interface for input parameters values or other information for execution by a particular function. In addition the GUI may provide a standardized date input interface for allowing the user to enter date information associated with performing various financial calculations for each of the toolboxes and . Using such standardized interfaces greatly simplifies use of financial modeling and analysis programs .

In addition financial modeling and analysis programs may provide an interface for inputting for example Excel files or other types of financial application files. Such files are commonly used in finance. Therefore providing an interface for inputting Excel files or other financial type files or outputting information to such files enhances the functionality associated with financial modeling and analysis programs .

As described above object oriented architecture may be executed using a distributed and or parallel computing environment. In some implementations distributed computing may enhance the performance associated with executing various financial calculations. For example instrument functions or methods may distribute the financial calculation workload to various clients processing devices to perform certain tasks and then aggregate the results to produce a final result.

Systems and techniques described herein provide for processing financial data to obtain information of interest. Using an object oriented architecture allows for increased flexibility interoperability between programs and ease of use.

The foregoing description of exemplary embodiments provides illustration and description but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention. For example while exemplary classes instruments objects and functions have been described above in other embodiments other classes instruments objects and functions may be used based on the particular system requirements.

In addition exemplary syntax has been described above that is compatible with MATLAB . In other implementations other syntax such as Java compatible syntax may be used in object oriented architecture .

In some implementations various portions of object oriented architecture may be encrypted by a compiler used in connection with financial modeling and analysis programs . Such encryption may protect the design and or algorithms used to construct instruments models etc.

In addition in some implementations various portions of object oriented architecture may be implemented as add ins or plug ins to a conventional spreadsheet application such as Excel. For example object oriented architecture may be used in connection with MATLAB Builder for Excel to convert various algorithms associated with object oriented architecture into independent Excel add ins.

In addition object oriented architecture may also be used in conjunction with MATLAB Builder for .NET which extends the MATLAB compiler with tools for automatically generating independent .NET assemblies or Common Object Model COM objects from models or algorithms associated with or generated by object oriented architecture . A .NET assembly may be called from C VB.NET or any other Common Language Specification CLS compliant language. A COM object may be called from any COM compliant technology such as Visual Basic ASP and Microsoft Excel.

In still other implementations object oriented architecture may be used in conjunction with MATLAB Builder for Java which allows a user to integrate MATLAB applications or in this case integrate algorithms or models designed with object oriented architecture into a number of Java programs. In such implementations a user may create a Java wrapper around the application algorithms models etc. associated with object oriented architecture . MATLAB based Java classes may then be deployed on for example desktop machines or Web servers.

In addition object oriented architecture may be used with a number of simulation engines such as a Monte Carlo simulation engine implementing stochastic differential equations. Such simulation engines could then be used by algorithms functions or methods associated with various objects in object oriented architecture e.g. instrument objects portfolio objects market objects etc.

Still further while series of acts have been described with regard to the order of the acts may be modified in other embodiments. Further non dependent acts may be performed in parallel.

It will be apparent that aspects as described above may be implemented in many different forms of software firmware and hardware in the embodiments illustrated in the figures. The actual software code or specialized control hardware used to implement aspects described herein is not limiting of the invention. Thus the operation and behavior of the aspects were described without reference to the specific software code it being understood that one would be able to design software and control hardware to implement the aspects based on the description herein.

Further certain portions of the invention may be implemented as logic that performs one or more functions. This logic may include hardware such as a processor a microprocessor an application specific integrated circuit or a field programmable gate array software or a combination of hardware and software.

No element act or instruction used in the present application should be construed as critical or essential to the invention unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

