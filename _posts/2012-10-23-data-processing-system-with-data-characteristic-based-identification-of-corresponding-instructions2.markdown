---

title: Data processing system with data characteristic based identification of corresponding instructions
abstract: Some methods, computer program products, and data processing nodes identify a data unit in a data memory that is to be operated upon by a processor circuit, and uses a characteristic of the data unit to identify what instruction(s) within an instruction memory is be executed by the processor circuit to perform an operation upon the data unit. The data memory may be local to the processor circuit, and the instruction memory may be remotely accessible to the processor circuit through a data network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09632787&OS=09632787&RS=09632787
owner: CA, Inc.
number: 09632787
owner_city: Islandia
owner_country: US
publication_date: 20121023
---
The present disclosure relates to data processing systems and more specifically to operations and methods for fetching instructions from memory.

Known data processing systems process data through a sequence of operations that include 1 fetching an instruction from memory 2 decoding the instruction to identify an address to a location in memory for data that is to be operated upon by the instruction 3 fetching the data from the memory 4 performing the instruction to operate on the data and 5 then storing communicating the result. The instructions and memory may reside in the same memory. However databases and other large data applications have led to architectures where the instructions reside in memory that is local to the processor while the data resides in remote data memories that are network accessible to the processor.

One embodiment of the disclosure is directed to a method that includes selecting a data unit from among a plurality of data units in a data memory that is to be operated upon by a processor circuit. An instruction is identified among a plurality of instructions in an instruction memory responsive to a characteristic of the data unit. The instruction is requested from the instruction memory for execution by the processor circuit to operate on the data unit.

In a further embodiment content of the data unit is examined to identify a network address for accessing the instruction memory of an instruction storage node through a data network. The instruction is retrieved from the address within the instruction memory by communicating a message through the data network that is directed to the network address and requests retrieval of the instruction from the instruction memory of the instruction storage node. An address of the instruction may be determined responsive to the value of a plurality of defined bit locations of the data unit and other bit locations of the data unit may be used to determine a data value that is be operated on by the instruction.

In a further embodiment a characteristic of the data unit is used to determine an execution cycle rate at which the instruction will be scheduled for execution by the processor circuit and the address of the instruction is determined in response to the execution cycle rate. Alternatively or additionally a characteristic of the data unit is used to determine an execution priority level at which the instruction will be prioritized for execution by the processor circuit and the address of the instruction is determined in response to the execution priority level.

Another embodiment of the disclosure is directed to a computer program product that includes a computer readable storage medium having computer readable program code embodied therein. Computer readable program code is configured to select a data unit from among a plurality of data units in a data memory that is to be operated upon by a processor circuit. Other computer readable program code is configured to identify an instruction among a plurality of instructions in an instruction memory responsive to a characteristic of the data unit. Other computer readable program code is configured to request the instruction from the instruction memory for execution by the processor circuit to operate on the data unit.

Another embodiment of the disclosure is directed to a data processing node that includes a network interface a data memory and a processor circuit. The network interface communicates through a data network with an instruction memory. The data memory includes a plurality of data units. The processor circuit selects a data unit from among the plurality of data units in the data memory identifies an instruction among a plurality of instructions in the instruction memory responsive to a characteristic of the data unit and requests the instruction from the instruction memory for execution by the processor circuit to operate on the data unit.

Embodiments of the present disclosure will be described more fully hereinafter with reference to the accompanying drawings. Other embodiments may take many different forms and should not be construed as limited to the embodiments set forth herein. Like numbers refer to like elements throughout.

As explained above some databases and other large data applications have led to computer architectures where instructions reside in memory that is local to the processor while data resides in remote data memories e.g. servers that are accessible to the processor over a data network. Although locating instructions near the processor can reduce instruction access times and provide tight coupling between the processor and instructions it may not be feasible to share such instructions among a plurality of networked processors. Moreover the remoteness of the data memory from the processor can increase data access time and slow data processing performance for data intensive applications.

In various present embodiments the order of operations of known systems for accessing instructions and then data is reversed. An operating system OS microcode or other instructions performed by a data processing node identifies a data unit in a data memory that is to be operated upon by a processor circuit and then identifies what instruction s within an instruction memory is be executed by the processor circuit to perform an operation upon the data unit. The data memory may be local to the processor circuit and the instruction memory may be remotely accessible to the processor circuit through a data network.

As used herein a data unit is any length of data bits that are operated upon e.g. an arithmetic operation during one or more cycles of a processor circuit or other instruction execution circuit that is executing one or more instructions. Data units in a data memory may have the same or differing bit lengths. Instructions in an instruction memory may also have the same or differing bit lengths.

The instruction storage node includes instructions in an instruction memory that are executable by the processor circuit to operate on the data units in the data memory . In contrast to the data memory that is locally attached to the processor circuit the instruction memory is remotely connected to the processor circuit through the data network . Locally connecting the data memory to the processor circuit can reduce data memory access times and provide tight coupling between the processor circuit and data units. Because instructions are made available through the networked instruction storage node the instructions can be efficiently shared among a plurality of the data processing nodes . Thus for example a database application which can benefit from high throughput and or low latency processing of larger quantities of data and from networked sharing of instructions may be effectively hosted on the data processing system of .

The data network may be a personal area network e.g. USB or Firewire network a local area network e.g. IEEE 802.11 a storage area network a metropolitan area network a wide area network and or other public e.g. Internet and or private networks. The storage area network SAN is a dedicated network between the data processing node and instruction storage node that provides access to consolidated block level data storage to make storage devices such as disk arrays and tape libraries of the instruction storage node appear like locally attached devices to the data processing node . The data network may include wired and or wireless e.g. cellular network wireless local area network wireless metropolitan area network satellite network etc. air interface communication connections.

Although various embodiments are described in the context of identifying an instruction responsive to a characteristic of a data unit these embodiments are not limited to using a single data unit to identify a single instruction. Instead a plurality of data units may be used to identify a single instruction a single instruction may be used to identify a plurality of instructions or any other number of data units may be used to identify any other number of instructions.

The address of the instruction within the instruction memory may be determined by the processor circuit by examining content of the data unit. illustrates example operations to identify an instruction in the instruction memory responsive to content of the data unit. The operations may be performed by the processor circuit of the data processing node . The data unit is received block from the data memory . A network address is identified block from the content of the data unit that enables communication e.g. routing of the instruction request message through the data network to the instruction storage node and further identifies a location of the instruction in the instruction memory that is to be retrieved and communicated to the data processing node that sent the message. The processor circuit communicates block a message through the data network that is directed to the network address and requests retrieval of the instruction from the instruction memory of the instruction storage node .

What information is identified for obtaining an instruction will vary based on the type or sequence of communications used by the processor to obtain instructions from the instruction memory . The network address may include a Uniform Resource Locator URL address. The message communicated to the instruction storage node may include an URL address that identifies a location of a network accessible file within the instruction memory that contains the instruction. The message may contain a file read request message that identifies the URL address of the file that is to be accessed on the instruction storage node .

The network accessible file may contain other instructions that are to be executed to operate on the data unit or on a plurality of data units. For example a first instruction in the file within the instruction memory may be retrieved and executed to operate on the data unit a next sequentially occurring instruction in the file may be retrieved and executed to operate on a next sequentially occurring data unit in the data memory and so on with further sequentially occurring instructions in the file being retrieved and sequentially executed to operate on further sequentially occurring data units in the data memory . Alternatively the first instruction in the file may be used to operate on a plurality of sequentially occurring or other identified data units.

Each data unit may include an instruction pointer that is embedded in each respective data unit e.g. stored within or adjacent to contiguous addressable locations of the data unit in the data memory or otherwise logically associated with the data unit. The length of the data unit may correspond to the number of bits that the processor circuit fetches with each memory access cycle. Alternatively a group of data units may be associated with a same instruction pointer. In one embodiment when examining the content of the data unit to identify block the address to the instruction within the instruction memory the processor circuit determines the address to the instruction responsive to a plurality of defined bit locations of the data unit and determines a data content portion of the data unit that is to be operated upon by the instruction responsive to other defined bit locations of the data unit. The processor circuit may thereby for example interpret a numeric value defined by a first group of bit locations of the data unit as an address of the instruction and interpret a numeric value defined by a second group of bit locations of the data unit which may or may not overlap the first group of bit locations as defining a data value that is to be operated upon by the addressed instruction.

Different configuration files may be associated with different data units and the processor circuit may identify locations of instructions that are to be fetched to operate on the respective data units responsive to information in the respective configuration files. For example the data memory can include a plurality of configuration files that are associated with different groups of the plurality of instructions in the instruction memory . When examining the content of the data unit to identify block the address to the instruction within the instruction memory the processor circuit selects one of the plurality of configuration files responsive to the content of the data unit and identifies the address to the instruction within the structure memory responsive to information contained in the one of the plurality of configuration files that was selected.

Alternatively a single configuration file may contain information items that each identify a location of an instruction that is to be executed to operate on a corresponding data unit. The processor circuit can identify which of the information items in the configuration file is associated with a particular ones of the data units responsive to characteristics of the particular data unit. For example the data memory can include a configuration file that identifies addresses of instructions in the instruction memory . When examining the content of the data unit to identify block the address to the instruction within the instruction memory the processor circuit determines a location within the configuration file responsive to the content of the data unit. An information item is obtained from the location within the configuration file and the address to the instruction in the instruction memory is identified in response to the information item.

The processor circuit may identify characteristics of a data unit e.g. classify the data unit as one of a plurality of defined types and use the identified characteristics to identify a location of instructions that are to be obtained from the instruction memory to operate on the data unit.

Execution of different data units by the processor circuit may be managed according to defined execution priority levels. The locations of instructions that are to be obtained from the instruction memory to operate on the corresponding data units may be determined responsive to their associated execution priority levels. Referring to one of a plurality of defined execution priority levels at which the instruction will be prioritized for execution by the processor circuit is determined block responsive to the characteristic of the data unit. The address to the instruction in the instruction memory is identified block responsive to the one of the plurality of defined execution priority levels.

Different data units or groups of data units may be scheduled for execution by the processor circuit at different execution cycle rates. The locations of instructions that are to be obtained from the instruction memory to operate on the corresponding data units may be determined responsive to their associated scheduled execution cycle rates. Referring to one of a plurality of defined execution cycle rates at which the instruction will be scheduled for execution by the processor circuit is determined block responsive to the characteristic of the data unit. The address to the instruction in the instruction memory is identified block responsive to the one of the plurality of defined execution cycle rates.

The processor circuit may receive the data unit and a pointer to the instruction in the instruction memory through an application program interface e.g. command line interface a machine to machine application interface etc. .

As will be appreciated by one skilled in the art aspects of the present disclosure may be illustrated and described herein in any of a number of patentable classes or context including any new and useful process machine manufacture or composition of matter or any new and useful improvement thereof. Accordingly aspects of the present disclosure may be implemented in entirely hardware entirely software including firmware resident software micro code etc. or combining software and hardware implementation that may all generally be referred to herein as a circuit module component or system. Furthermore aspects of the present disclosure may take the form of a computer program product embodied in one or more computer readable media having computer readable program code embodied thereon.

Any combination of one or more computer readable media may be utilized. The computer readable media may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an appropriate optical fiber with a buffered repeater a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device. Program code embodied on a computer readable signal medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages including an object oriented programming language such as Java Scala Smalltalk Eiffel JADE Emerald C C VB.NET Python or the like conventional procedural programming languages such as the C programming language Visual Basic Fortran 2003 Perl COBOL 2002 PHP ABAP dynamic programming languages such as Python Ruby and Groovy or other programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider or in a cloud computing environment or offered as a service such as a Software as a Service SaaS .

Aspects of the present disclosure are described herein with reference to flowchart illustrations and or block diagrams of methods apparatuses systems and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable instruction execution apparatus create a mechanism for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable storage medium that when executed can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions when stored in the computer readable storage medium produce an article of manufacture including instructions which when executed cause a computer to implement the function act specified in the flowchart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer other programmable instruction execution apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatuses or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various aspects of the present disclosure. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular aspects only and is not intended to be limiting of the disclosure. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of any means or step plus function elements in the claims below are intended to include any disclosed structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present disclosure has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the disclosure in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the disclosure. The aspects of the disclosure herein were chosen and described in order to best explain the principles of the disclosure and the practical application and to enable others of ordinary skill in the art to understand the disclosure with various modifications as are suited to the particular use contemplated.

