---

title: Source code analysis of inter-related code bases
abstract: A method and system for analyzing source code is disclosed. A computer identifies a call in a first source code to an application programming interface in a second source code. Responsive to identifying the call in the first source code to the application programming interface in the second source code, the computer determines whether a set of policies for calls to application programming interfaces includes a policy for calls to the application programming interface. Responsive to a determination that the set of policies for calls to application programming interfaces does not include the policy for calls to the application programming interface, the computer generates the policy for calls to the application programming interface and adds the generated policy to the set of policies for calls to application programming interfaces.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09021592&OS=09021592&RS=09021592
owner: International Business Machines Corporation
number: 09021592
owner_city: Armonk
owner_country: US
publication_date: 20120712
---
The disclosure relates generally to analyzing source code and in particular to managing policies for calls in the source code. Still more particularly the present disclosure relates to a method system and computer program product for managing a policy for a call in a first source code to a function in a second source code based on information from a trace of the second source code.

Data processing systems provide computing resources such as a computer that includes a central processing unit and computer memory. Executable programs are executed by the central processing unit in the computer using the computer memory. The executable programs store and use data in the form of data structures located in the computer memory. During execution of the executable programs the information in these data structures may become corrupted by unforeseen errors in the executable programs and also by unforeseen malevolent uses of the executable programs Responsive to the corruption of a data structure a subsequent error is likely to occur at unexpected points of execution in the program. Further in the case of an unforeseen malevolent use of an executable program the unforeseen malevolent use may result in critical security issues.

Static analysis of source code vulnerabilities is a process for assessing risk for vulnerabilities of executable programs by analyzing the source code or compiled form of the executable program. One technique within the field of static analysis includes a process for identifying potentially malicious data entering a program then determining where the data flows within the program for the purpose of identifying security vulnerabilities. This process for identifying security vulnerabilities using static analysis is called data flow analysis. Data flow analysis tools use parsers to generate a data flow graph of the program being analyzed. Data flow analysis tools also use pre defined application programming interface API policies that identify the expected behavior of each application programming interface utilized by the program being analyzed as well as potential vulnerabilities. Data flow analysis tools traverse the generated graph of an application to identify instances where potentially malicious data may reach an application programming interface that has been identified as vulnerable to malicious data. However gaps may exist in the number of application programming interfaces for which a policy exists identifying the expected behavior. For example all of the application programming interfaces that are in use by external applications may not be known when a data flow analysis tool runs. Further a data flow analysis tool may only be able to create a partial graph of the data flows of an application due to not having access to all of the source code used by application programming interfaces of the application.

Therefore it would be advantageous to have a method apparatus and computer program product that takes into account at least some of the issues discussed above as well as possibly other issues.

In one illustrative embodiment a method data processing system and computer program product for analyzing source code is provided. A data processing system identifies a call in a first source code to an application programming interface in a second source code. Responsive to identifying the call in the first source code to the application programming interface in the second source code the data processing system determines whether a set of policies for calls to application programming interfaces includes a policy for calls to the application programming interface. Responsive to a determination that the set of policies for calls to application programming interfaces does not include the policy for calls to the application programming interface the data processing system generates the policy for calls to the application programming interface and adds the generated policy to the set of policies for calls to application programming interfaces.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute on one or more computers. For example the program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The illustrative embodiments recognize and take into account that existing data flow analysis tools are available for analyzing source code. In particular these data flow analysis tools parse the source code and identify traces of possible data flows in the source code. More particularly these data flow analysis tools analyze the traces of possible data flows in the source code for possible malicious acts.

With reference now to the figures and in particular with reference to an illustration of components involved in analyzing source code in a data processing environment is depicted in accordance with an illustrative embodiment. In this illustrative example data processing system is present in data processing environment . Data processing system may comprise a set of computers. A set as used herein with reference to items means one or more items. For example set of computers is one or more computers. When more than one computer is present in data processing system those computers may be in communication with each other. This communication may be facilitated through a medium such as a network. This network may be for example without limitation a local area network a wide area network an intranet the internet and some other suitable type of network.

In these illustrative examples source code may be located in data processing system . Source code may comprise a number of source code modules such as first source code and second source code . Code written in source code modules in source code may be written in any programming language suitable for execution on data processing systems such as data processing system . For example a programming language for code in source code may define syntax for creating data structures and calling functions in source code . The syntax used to define data structures and call functions may vary significantly between different programming languages. For example some object oriented programming languages may use classes that comprise data and functions instead of defining data structures and classes separately as does other programming languages.

As depicted source code comprises first source code and may also comprise second source code . In these illustrative examples first source code and second source code may or may not be present during a process for analyzing source code. For example first source code may be source code of an application second source code may be source code of a library used by first source code . In these illustrative examples first source code comprises application programming interface which makes calls to other application programming interfaces. For example call in first source code may be a call to application programming interface in second source code . As depicted subsequent to a call to application programming interface in second source code application programming interface may also make calls to other application programming interfaces and execute code that may be used to perform a malicious act. For example call in second source code may be a call to another interface in second source code that comprises code that could be used to perform a malicious act . In this example code that could be used to perform a malicious act may include management of a customer account or any other act that could be malicious if done improperly such as by using inaccurate or malicious data.

In these illustrative examples policies for calls to application programming interfaces may include first policy for application programming interface and also may include second policy for application programming interface . However in a process for analyzing source code policy and policy may not exist when the process starts. For example policies for calls to application programming interfaces may have gaps where one or more application programming interfaces does not have a policy. As depicted policy includes identifier of the application programming interfaces for which policy applies and policy includes identifier of the application programming interfaces for which policy applies. Identifier may point to application programming interface and identifier may point to application programming interface . As also depicted policy includes type of malicious act that may be performed if indicator is set and policy includes type of malicious act that may be performed if indicator is set. Responsive to a determination that the application programming interface identified by identifier may be used to perform type of malicious act indicator may be set. As another example responsive to a determination that the application programming interface identified by identifier may not be used to perform type of malicious act indicator may be unset. In these illustrative examples setting an indicator such as indicator and indicator is an indication that the type of malicious act for which they refer may occur. In these illustrative examples unsetting an indicator such as indicator and indicator is an indication that the type of malicious act for which they refer may not occur.

Source code trace generator is present in data processing system and may be used in a process to generate a data flow graph of source code such as trace for application programming interface . As depicted trace for application programming interface generated by source code trace generator may include actions that are taken by taken by source code such as actions taken by first source code and actions that are taken by second source code . For example actions may include call in application programming interface call in application programming interface and a use of code that could be used to perform a malicious act . In the case of use of code that could be used to perform a malicious act actions may include malicious act of type . For example type for malicious act may be a call to an application programming interface having a policy that indicates the application programming interface may be used to perform a malicious act. Type may also be a type of malicious act performed by code found in a traced application programming interface such as a possibly inappropriate use of data processing system by un validated data. For example un validated data may be data that has been identified in the trace as being passed from application programming interface to application programming interface .

Trace analyzer is also present in data processing system and may be used in processes for analyzing trace for application programming interface . For example trace analyzer may be used in a process to generate policies for gaps in policies for calls to application programming interfaces . In this example trace analyzer may identify a use of application programming interface by an action in actions that includes call to application programming interface by application programming interface . Further in this example subsequent to the identification of the use trace analyzer may then identify if there is a policy in policies for calls to application programming interfaces . Still further in this example if there is no policy for application programming interface trace analyzer may generate policy for application programming interface using default policy for calls to application interfaces . In these illustrative examples default policy for calls to application interfaces may include one or more types of malicious acts and indicators for the one or more types of malicious acts identifying whether the default for each type of malicious act is set or unset by default.

Trace analyzer may also be used in a process to manage policies for application programming interfaces such as policy and policy . For example in a first analysis of first source code by trace analyzer policy for application programming interface may comprise indicator as being set indicating that type of malicious act may exist. In this example second source code was not available during the first analysis. Responsive to the unavailability default policy for calls to application interfaces is used by the process to set indicator . Subsequent to setting indicator the process then set indicator for policy for application programming interface based on the action in actions indicating that that application programming interface calls application programming interface . Further in this example subsequent to a second analysis by trace analyzer that includes an indication that indicator should be unset trace analyzer may then unset indicator . For example during the second analysis a selection by a user may have manually unset indicator or second source code may have been made available for source code trace generator and trace analyzer during the second analysis. Another example of a reason to unset and indicator that a type of malicious act has occurred is the identification of an action in actions that verifies data passed to the application programming interface.

As depicted type of malicious act and type of malicious act may include a use of devices such as storage device network memory or processor use in data processing system and any other malicious act that may be performed by source code . For example without limitation type of malicious act may be an un authorized use of a resource an un authorized deletion copying or modification of a data structure in memory and an un authorized sending of messages over a network.

The illustration of data processing environment in is not meant to imply physical or architectural limitations to the manner in which an illustrative embodiment may be implemented. Other components in addition to and or in place of the ones illustrated may be used. Some components may be unnecessary. Also the blocks are presented to illustrate some functional components. One or more of these functional components may be combined divided or combined and divided into different blocks when implementing an illustrative embodiment.

For example data processing system may include use of local area network LAN a wide area network WAN an intranet the Internet or some combination thereof. In this example an analysis of source code may combine another analysis by trace analyzer from another data processing system.

Turning next to an illustrative example of source code analyzed by a source code analysis process is depicted in accordance with an illustrative embodiment. Source code is an example of source code in . In particular application source code is an example of first source code in and library source code is an example of second source code in . More particularly function setParameters is an example of application programming interface in . Still more particularly function setEmployeeName is an example of application programming interface in .

In this illustrative example program statements are present in function setParameters . As depicted program statement is for receiving a string called employeeName. As also depicted program statement creates boolean variable verifiedName and sets verifiedName to true. As further depicted program statement calls function applicationNameVerificationEnabled which subsequently returns a result used to determine if function setParameters should verify employeeName and if so use function verifyEmplyeeName to verify employeeName. Responsive to the result of the verification of employeeName by function verifyEmployeeName boolean verifiedName is then set or unset using the result to indicate the validity of employeeName. As still further depicted program statement uses boolean verifiedName to determine if function setParameters should call function setEmployeeName or call function reportAsInvalid .

In this illustrative example program statements are present in function setEmployeeName . As depicted program statement is for receiving a string called employeeName. As also depicted program statement creates boolean variable verifiedName and sets verifiedName to true. As further depicted program statement calls function libraryNameVerificationEnabled which subsequently returns a result used to determine if function setEmployeeName should verify employeeName and if so use function verifyEmplyeeName to verify employeeName. Responsive to the result of the verification of employeeName by function verifyEmployeeName boolean verifiedName is then set or unset using the result to indicate the validity of employeeName. As still further depicted program statement uses boolean verifiedName to determine if function setEmployeeName should perform program statements and or program statement for calling function reportAsInvalid . Responsive to verifiedName being set function setEmployeeName performs program statement and program statement to generate string sqlStatement using function generateSqlStatement and then calls function executeSqlStatement to make a request by a database to perform generated sqlStatement. For example generated sqlStatement may be a structured query language SQL statement for placing employeeName in a database.

As depicted program statements in function setParameters and program statements in function setEmployeeName may be used by source code trace generator in to create trace for application programming interface in . As also depicted the actions taken by program statements and may be used by trace analyzer in to manage policies for calls to application programming interfaces in .

With reference now to an illustrative example of a flowchart of a process for generating a policy for calls to an application programming interface is depicted in accordance with an illustrative embodiment. The steps in may be implemented in data processing environment in . In particular the steps may be implemented in software hardware or a combination of the two in data processing system in by source code trace generator in and by trace analyzer in .

The process begins by identify a call in a first source code to an application programming interface in a second source code step . For example the process may identify call in in first source code in to application programming interface in in second source code in . In this illustrative example responsive to the process identifying the call in the first source code to the application programming interface in the second source code the process then determines whether a set of policies for calls to application programming interfaces includes a policy for calls to the application programming interface in step . For example the process may search through policies for calls to application programming interfaces in for a policy associated with application programming interface such as policy in or policy in .

As depicted in response to a determination by the process that the set of policies for calls to application programming interfaces does not include the policy for calls to the application programming interface the process then generates the policy for calls to the application programming interface step . As also depicted the process then adds the generated policy to the set of policies for calls to application programming interfaces step with the process terminating thereafter.

With reference now to an illustrative example of a flowchart of a process for managing a policy for calls to an application programming interface according to an analysis of the source code in the application programming interface is depicted in accordance with an illustrative embodiment. The steps in may be implemented in data processing environment in . In particular the steps may be implemented in software hardware or a combination of the two in data processing system in by source code trace generator in and by trace analyzer in .

The process begins by identify a call in a first source code to an application programming interface in a second source code wherein the first source code is a first module and the second source code is one or more modules of a library of modules step . The process next determines whether a set of policies for calls to application programming interfaces includes a policy for calls to the application programming interface in response to identifying the call in the first source code to the application programming interface in the second source code step . In response to a determination that the set of policies for calls to application programming interfaces does not include the policy for calls to the application programming interface the process generates the policy for calls to the application programming interface using a default policy for identifying calls to newly identified application programming interfaces as calls to application programming interfaces that are potentially vulnerable to malicious attacks step . The process then adds the generated policy to the set of policies for calls to application programming interfaces step .

As depicted the process also generates a trace for the application programming interface in the second source code wherein the trace comprises actions that may be taken when the application programming interface is called step . The process analyzes the trace for the application programming interface in the second source code to determine whether the application programming interface can be used to perform one or more types of malicious acts based on the whether the actions in the trace for the application programming interface include one or more actions that can perform the one or more types of malicious acts step .

In this illustrative example responsive to a determination that the application programming interface cannot be used to perform a particular type of malicious act the process modifies the policy for calls to the application programming interface to indicate the type of malicious act that cannot be performed by calls to the application programming interface step . Further in this illustrative example responsive to a determination that the application programming interface can be used to perform the particular type of malicious act the process modifies the policy for calls to the application programming interface to indicate the type of malicious act that can be performed by calls to the application programming interface step with the process terminating thereafter.

With reference now to an illustrative example of a flowchart of a process for managing policies for a set of calls to an application programming interface according to an analysis of the source code in the application programming interface is depicted in accordance with an illustrative embodiment. The steps in may be implemented in data processing environment in . In particular the steps may be implemented in software hardware or a combination of the two in data processing system in by source code trace generator in and by trace analyzer in .

The process begins by identifying a set of application programming interfaces in a first source code that call an application programming interface in a second source code based on a trace for each application programming interface in the first source code step . As depicted responsive to a determination that the application programming interface in the second source code cannot be used to perform a particular type of malicious act the process modifies policies for the set of application programming interfaces in the first source code that call the application programming interface in a second source code to indicate the type of malicious act that cannot be performed by calls to the application programming interface in the second source code step .

In this illustrative example responsive to a determination that the application programming interface in the second source code can be used to perform the particular type of malicious act the process modifies policies for the set of application programming interfaces in the first source code that call the application programming interface in a second source code to indicate the type of malicious act that can be performed by calls to the application programming interface in the second source code step with the process terminating thereafter.

Referring to a block diagram of a computer or data processing system is shown in which aspects of the present invention may be implemented. This system is an example of a computer which may be used to implement components of such as source code trace generator trace analyzer and data processing system and in which computer usable code or instructions implementing the processes for embodiments of the present invention may be located.

In the depicted example the data processing system of employs a hub architecture including north bridge and memory controller hub NB MCH and south bridge and input output I O controller hub SB ICH . Processing unit main memory and graphics processor are connected to NB MCH . Graphics processor may be connected to NB MCH through an accelerated graphics port AGP .

In the depicted example local area network LAN adapter connects to SB ICH . Audio adapter keyboard and mouse adapter modem read only memory ROM disk CD ROM universal serial bus USB ports and other communication ports and PCI PCIe devices connect to SB ICH through bus and bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash binary input output system BIOS .

Disk and CD ROM connect to SB ICH through bus . Disk and CD ROM may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. Super I O SIO device may be connected to SB ICH .

An operating system runs on processing unit and coordinates and provides control of various components within the data processing system of . As a client the operating system may be a commercially available operating system such as Microsoft Windows Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on the data processing system Java is a trademark of Sun Microsystems Inc. in the United States other countries or both .

As a server the data processing system of may be for example an IBM eServer pSeries computer system running the Advanced Interactive Executive AIX operating system or the LINUX operating system eServer pSeries and AIX are trademarks of International Business Machines Corporation in the United States other countries or both while LINUX is a trademark of Linus Torvalds in the United States other countries or both . The data processing system may be a symmetric multiprocessor SMP system including a plurality of processors in processing unit . Alternatively a single processor system may be employed.

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as disk and may be loaded into main memory for execution by processing unit . The processes for embodiments of the present invention are performed by processing unit using computer usable program code which may be located in a memory such as for example main memory ROM or in one or more peripheral devices such as for example disk and CD ROM .

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

Thus illustrative embodiments of the present invention provide a computer implemented method data processing system and computer program product for managing policies for calls in a first source code to a function in a second source code based on information from a trace of the second source code.

The flowcharts and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

