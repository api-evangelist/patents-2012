---

title: Method and system for controlling and accessing content servers
abstract: A method and system for controlling provisioning and access to cache servers with an application programming interface (API). The API includes components for performing various actions including: (i) prepopulating content on at least one cache server from a content server; (ii) expiring content on at least one cache server; (iii) pinning content in a memory of at least one cache server; (iv) assigning resources on at least one cache server in accordance with a quota; (v) retrieving content from at least one cache server; and (vi) flushing deleted content from at least one selected cache. The API may include a security layer. The security layer determines whether a requestor has permission to cause the requested action to be performed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09628549&OS=09628549&RS=09628549
owner: F5 Networks, Inc.
number: 09628549
owner_city: Seattle
owner_country: US
publication_date: 20120518
---
This utility patent application is a continuation of U.S. patent application Ser. No. 10 077 689 filed on Feb. 15 2002 entitled Method and System For Controlling and Accessing Content Servers the benefit of which is claimed under 35 U.S.C. 120 and which is incorporated by reference herein in its entirety.

This application relates generally to controlling and updating geographically distributed servers on a network and more specifically to providing access to content servers.

Often source files for Web content servers are coded by multiple programmers on remotely located stage source servers. It is not unusual for one or more programmers to code HTML files on one source server while one or more other programmers create executable and or image files on another source server. To provide new or updated content typically modified or created files are distributed to content servers. Historically the distribution of a set of updated or new files from remotely located source servers through the Internet to content servers has proven to be a difficult task. This task has been further complicated by the lack of control of and access to the content servers.

In accordance with the present invention there is provided a method and system for controlling and accessing content servers. An application programming interface API hereinafter sometimes referred to as interface receives a request sent from a requestor. The interface is associated with or provides access to one or more content servers. The interface exposes components for manipulating its associated content servers. The interface may be used to perform actions including at least one of prepopulating content on a cache server from content on a content server expiring content on a cache server pinning content in memory of a cache server employing a quota to assign resources on a cache server retrieving content from a cache server and flushing deleted content from a cache server.

In one aspect of the invention each component of the interface provides a particular feature. The prepopulating component prepopulates content on an associated content server. For example it may fill cache entries on a cache server with content. The expiration component expires content on an associated content server. For example it may expire one or more cache entries on a cache server. The pinning component pins in memory particular content. For example it may pin one or more cache entries on a cache server such that they are not replaced by subsequent cache entries. The quota component assigns resources of an associated content server. For example the quota component may assign a number of cache entries to cache the content of a particular vendor. The flushing component eliminates content on an associated content server. For example it may remove cache entries on a cache server. The content component provides access to content on an associated content server. For example it may forward a request for content to a cache server.

In another aspect of the invention a transceiver provides a request from a requestor to the API and receives content from at least one cache server in response to the request. The request may include one or more actions to be performed by the API. The transceiver may receive content from the API and forward the content to the requestor.

In another aspect of the invention the security layer may determine whether a requestor has permission to perform an action. If the requestor does not have permission it may discard a request with or without sending an error message to the requestor.

In another aspect of the invention the associated content server is located in a foreign network. That is it is located in a network that is logically separate from the one in which the interface is located. The interface may send messages to the associated content server using another interface located in the foreign network.

In another aspect of the invention the components of the interface are distributed among a plurality of computers.

Aspects of the invention may be embodied in software and or hardware and on a computer readable medium and or in a modulated data signal.

These and various other features as well as advantages which characterize the present invention will be apparent from a reading of the following detailed description and a review of the associated drawings.

In the following detailed description of exemplary embodiments of the invention reference is made to the accompanied drawings which form a part hereof and which are shown by way of illustration specific exemplary embodiments of which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention and it is to be understood that other embodiments may be utilized and other changes may be made without departing from the spirit or scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims.

In the following description first an illustrative operating environment in which the invention may be practiced is disclosed. Then an illustrative arrangement and interaction of elements using within an operating environment is described. Next an illustrative interface for accessing content servers is disclosed. Finally methods for using an interface to access one or more content servers are described.

As such it will be appreciated that the Internet itself may be formed from a vast number of such interconnected networks computers and routers. Generally the term Internet refers to the worldwide collection of networks gateways routers and computers that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers including thousands of commercial government educational and other computer systems that route data and messages. An embodiment of the invention may be practiced over the Internet without departing from the spirit or scope of the invention.

The media used to transmit information in communication links as described above illustrates one type of computer readable media namely communication media. Generally computer readable media includes any media that can be accessed by a computing device. Computer readable media may include computer storage media communication media or any combination thereof.

Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example communication media includes wired media such as twisted pair coaxial cable fiber optics wave guides and other wired media and wireless media such as acoustic RF infrared and other wireless media.

The Internet has recently seen explosive growth by virtue of its ability to link computers located throughout the world. As the Internet has grown so has the WWW. Generally the WWW is the total set of interlinked hypertext documents residing on HTTP hypertext transport protocol servers around the world. Documents on the WWW called pages or Web pages are typically written in HTML Hypertext Markup Language or some other markup language identified by URLs Uniform Resource Locators that specify the particular machine and pathname by which a file can be accessed and transmitted from server to end user using HTTP. Codes called tags embedded in an HTML document associate particular words and images in the document with URLs so that a user can access another file which may literally be halfway around the world at the press of a key or the click of a mouse. These files may contain text in a variety of fonts and styles graphics images movie files media clips and sounds as well as Java applets ActiveX controls or other embedded software programs that execute when the user activates them. A user visiting a Web page also may be able to download files from an FTP site and send messages to other users via email by using links on the Web page.

A server providing a WWW site as the server described in more detail in conjunction with may is a computer connected to the Internet having storage facilities for storing hypertext documents for a WWW site and running administrative software for handling requests for the stored hypertext documents. A hypertext document normally includes a number of hyperlinks i.e. highlighted portions of text which link the document to another hypertext document possibly stored at a WWW site elsewhere on the Internet. Each hyperlink is associated with a URL that provides the location of the linked document on a server connected to the Internet and describes the document. Thus whenever a hypertext document is retrieved from any WWW server the document is considered to be retrieved from the WWW. As is known to those skilled in the art a WWW server may also include facilities for storing and transmitting application programs such as application programs written in the JAVA programming language from Sun Microsystems for execution on a remote computer. Likewise a WWW server may also include facilities for executing scripts and other application programs on the WWW server itself.

A user may retrieve hypertext documents from the WWW via a WWW browser application program located on a wired or wireless device. A WWW browser such as Netscape s NAVIGATOR or Microsoft s INTERNET EXPLORER is a software application program for providing a graphical user interface to the WWW. Upon request from the user via the WWW browser the WWW browser accesses and retrieves the desired hypertext document from the appropriate WWW server using the URL for the document and HTTP. HTTP is a higher level protocol than TCP IP and is designed specifically for the requirements of the WWW. HTTP is used to carry requests from a browser to a Web server and to transport pages from Web servers back to the requesting browser or client. The WWW browser may also retrieve application programs from the WWW server such as JAVA applets for execution on a client computer.

Those of ordinary skill in the art will appreciate that the server may include many more components than those shown in . However the components shown are sufficient to disclose an illustrative environment for practicing the present invention. As shown in server is connected to WAN LAN or other communications network via network interface unit . Those of ordinary skill in the art will appreciate that network interface unit includes the necessary circuitry for connecting server to WAN LAN and is constructed for use with various communication protocols including the TCP IP protocol. Typically network interface unit is a card contained within server .

Server also includes processing unit video display adapter and a mass memory all connected via bus . The mass memory generally includes random access memory RAM read only memory ROM and one or more permanent mass storage devices such as hard disk drive a tape drive not shown optical drive such as a CD ROM DVD ROM drive and or a floppy disk drive not shown . The mass memory stores operating system for controlling the operation of server . It will be appreciated that this component may comprise a general purpose server operating system as is known to those of ordinary skill in the art such as UNIX LINUX or Microsoft WINDOWS NT . Basic input output system BIOS is also provided for controlling the low level operation of server .

The mass memory as described above illustrates another type of computer readable media namely computer storage media. Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Examples of computer storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by a computing device.

The mass memory may also store program code and data for providing a WWW site. More specifically the mass memory may store applications including WWW server application program and programs . WWW server application program includes computer executable instructions which when executed by server generate WWW browser displays including performing the logic described above. Server may include a JAVA virtual machine an SMTP handler application for transmitting and receiving email an HTTP handler application for receiving and handing HTTP requests JAVA applets for transmission to a WWW browser executing on a client computer and an HTTPS handler application for handling secure connections. The HTTPS handler application may be used for communication with an external security application to send and receive sensitive information such as credit card information in a secure fashion.

Server also comprises input output interface for communicating with external devices such as a mouse keyboard scanner or other input devices not shown in . Likewise server may further comprise additional mass storage facilities such as optical drive and hard disk drive . Hard disk drive is utilized by server to store among other things application programs databases and program data used by WWW server application program . For example customer databases product databases image databases and relational databases may be stored.

Client computer also includes BIOS processing unit video display adapter and memory. The memory generally includes RAM ROM and a permanent mass storage device such as a disk drive. The memory stores operating system and programs for controlling the operation of client computer . The memory also includes WWW browser such as Netscape s NAVIGATOR or Microsoft s INTERNET EXPLORER browsers for accessing the WWW. It will be appreciated that these components may be stored on a computer readable medium and loaded into memory of client computer using a drive mechanism associated with the computer readable medium such as a floppy disk drive not shown optical drive such as a CD ROM DVD ROM drive and or hard disk drive . Input output interface may also be provided for receiving input from a mouse keyboard or other input device. The memory network interface unit video display adapter and input output interface are all connected to processing unit via bus . Other peripherals may also be connected to processing unit in a similar manner.

As will be recognized from the discussion below aspects of the invention may be embodied on server on client computer or on some combination thereof. For example programming steps may be contained in programs and or programs .

Content servers include any server capable of sending content to a requesting device such as client computer . Two such types of content servers are a cache server such as cache server and an origin server such as origin server . Generally origin servers are servers which store original as compared to cached content. The content stored may be used to generate other content. For example an origin server may include a database i.e. original content having entries about the status of orders. A customer may query the origin server to determine the status of an order placed by the customer. In response to the customer s query a Web page may be generated that in addition to the relevant order status includes advertisements notices and or other information that may be useful to the customer. To conserve storage space and compute resources such a page is typically generated on request by a program executing on the origin server.

Information about products such as a product brochure published into a Web page on the other hand may be statically stored and not require additional generation. That is the published Web page showing the product brochure may have no other elements that need to be generated. This is what is generally referred to as a static Web page. Such pages may be created by a Web page developer and then distributed to content servers.

In contrast to origin servers cache servers cache content and send it to requestors upon request. Generally cache servers do not generate any additional content than the content they cache although doing so would not be outside the spirit or scope of this invention . The content may be a copy of content on other servers such as an origin server a content publishing system such as content distributor or another cache. By caching frequently requested content a cache server may greatly decrease the time between a request and a response to the request known as response latency . Typically a client such as client computer may be unaware that the content server responding is a cache server rather than an origin server.

Origin servers such as origin servers and may be coupled more directly to the Internet or they may be coupled to the Internet through a server array controller such as server array controller . Server array controller may cause origin servers to appear to requestors as a single origin server. It does this by redirecting a message directed to it to one of origin servers . It may redirect such messages based on many metrics including load balancing metrics. It may perform network address translation NAT and or other translations such as port address translation PAT to maintain the appearance of being a single origin server. Each origin server in could be replaced with a server array controller controlling an array of origin servers without departing from the spirit or scope of the invention.

Likewise each cache server such as one of cache servers and may be coupled more directly to the Internet or may be coupled to the Internet through a cache controller such as cache controller . Cache controller may cause cache servers to appear to requestors as a single unified cache. Similar to a server array controller it does this by redirecting a message directed to it to one of cache servers . It may redirect such messages based on many metrics including load balancing metrics. It may perform network address translation NAT and or other translations such as port address translation PAT to maintain the appearance of being a single cache server. Each cache server in could be replaced with a cache controller controlling an array of cache servers without departing from the spirit or scope of the invention. It will be recognized that a cache controller may simply be a server array controller configured to provide access to cache servers.

Cache servers may be arranged in arrays such as cache servers and . A device connected to Internet such as a domain name system DNS server not shown may receive domain name requests from a client or a local domain name system LDNS server. The device may direct the client to a cache server or an origin server by returning an IP address associated with the cache or origin server. The device may direct requests depending on network traffic network topology capacity of servers content requested and a host of other load balancing metrics. The cache servers of cache servers may be located in one geographical location or may be spread to many different locations. Cache servers may be coupled to Internet through firewalls or other packet filtering systems for security and or other reasons.

Content distributor is a content publishing system. It may provide an automated way for distributing versions of content. For example it may link to source servers upon which programmers code HTML executable and or image files. Automatically or upon command it may gather new or updated content from the source servers. It may store the new or updated content using versioning. Then it may deliver the new or updated content to content servers. It may coordinate bringing origin servers offline and online and expiring versions of content

Administrator computer is an electronic device used to access and control content on content servers. Some of the aspects of content servers that administrator computer controls and accesses are described in more detail in conjunction with . Briefly administrator computer may be used to prepopulate content expire content pin certain content into memory set quotas and otherwise manipulate cache servers. Administrator computer may also be used to take origin servers offline or bring them online. It may also be used to update content on the origin servers. An exemplary electronic device that may perform the services of administrator computer is client computer of configured with appropriate software and hardware.

Client computer requests content from content servers. An application that may be used to request content is a WWW browser application as described in detail in conjunction with .

Administrator computer and client computer may be implemented using any devices capable of connecting with Internet and executing instructions. Such devices may include devices that typically connect using a wired communications medium such as personal computers multiprocessor systems microprocessor based or programmable consumer electronics network PCs and the like. Such devices may also include devices that typically connect using a wireless communications medium such as cell phones smart phones pagers walkie talkies radio frequency RF devices infrared IR devices CBs integrated devices combining one or more of the preceding devices and the like. In addition administrator computer and client computer may also include any device that is capable of connecting using a wired or wireless communication medium such as PDAs POCKET PCs wearable computers and other devices mentioned above that are equipped to use a wired and or wireless communications medium. An exemplary client that may connect with Internet is client computer of .

Gateway relays messages between foreign network and Internet . Such messages may be used to update content servers on foreign network . Gateway may be a special purpose gateway constructed specially to pass such update messages or it may be a gateway that passes many types of messages including update messages.

Foreign network is described in more detail in conjunction with . Briefly foreign network may be any network that can be coupled to Internet through a gateway such as gateway .

Several of the components shown in have a component or subcomponent associated with them labeled INT which stands for interface. In one embodiment of the invention the interface for like components is similar. That is the interface for origin servers and is identical while the interface for cache controller is different than the interface for the origin servers. Likewise the interface for gateway is different than that for server array controller .

In another embodiment of the invention the interface for each component is identical. In this embodiment however the interface behaves differently depending on which component it interfaces for. For example instead of creating a different interface for each component and placing these different interfaces in separate executables a single interface may be created that can then be distributed to any kind of component and configured to operate appropriately with that component. Interfaces are described in more detail in conjunction with . Briefly an interface may include a communications layer a security layer content server manipulation components a content interface component and a content server communication layer. Each interface contains information needed or necessary to propagate a message such as an update or expire message to the components or network for which it acts as an interface.

The network shown in might be used when a company provides a dial in service. When a user dials into the service using for example client computer the user is connected to a private network. As long as the user accesses content within the network traffic from and to the user stays within the network shown. When a user tries to access content on another network such as Internet a determination may be made as to whether that content already exists within the private network on an origin server such as origin server s or on a cache server. If it is determined that the content does exist within the network the client is directed to the appropriate content server otherwise the client s request is forwarded to an external network such as Internet to fulfill the request.

Client computers and are coupled to wide area network of foreign network . They may request content that is supplied by a content server within foreign network or a content server foreign to foreign network . Physically client computers and are similar to client computer of .

Interface provides an interface between foreign network and Internet . Interface includes information regarding content servers located in foreign network and how messages may be sent to them. It may be used by a content publishing server or an administrative computer to update or manipulate content servers within foreign network . For example it may receive an expiration message sent from content distributor or administrator computer of . It may then use its knowledge of cache servers on foreign network to propagate the expiration message to cache servers in foreign network .

Additionally interface may be used when a requestor from another network requests content from foreign network . Upon receipt of a request interface may determine a suitable cache server to service the request.

Similarly interface may be used when a requestor within foreign network requests content from a server on Internet . Interface may intercept such a request determine that a server within foreign network has the requested content and refer the request to the determined server.

Cache server is coupled to interface and WAN and performs the functions of a cache server such as cache server of . It may be closely coupled to interface as shown in so that interface may quickly retrieve and send content from cache server in response to a request.

Cache servers on foreign network may be arranged in arrays such as cache servers . A device connected to wide area network such as a domain name system DNS server not shown may receive domain name requests from a client or a local domain name system LDNS server. The device may direct the client to a cache server or an origin server by returning an IP address associated with the cache or origin server. The device may direct requests depending on network traffic network topology capacity of servers content requested and a host of other load balancing metrics. Cache servers may be located in one geographical location or may be spread to many different locations. Cache servers may be coupled to wide area network through firewalls or other packet filtering systems for security and or other reasons.

Server array controllers and make cache servers and respectively each appear to requestors as a single unified cache similar to how cache controller makes cache servers appear to requestors as a single unified cache. Server array controller may have requests for content that were previously directed at interface directed to it while server array controller may have requests for content directed to a server on wide area network directed to it.

Origin server s are optional. That is they may not exist on foreign network at all. When they do exist they may operate similar to origin server as described in more detail in conjunction with .

Wide area network couples various components of together. It may be implemented in wired and or wireless technologies. In another embodiment of the invention wide area network is replaced with a local area network or a wide area network and one or more local area networks. A network exemplary of a wide area network is WAN LAN of .

TCP IP stack includes the suite of protocols used to communicate with other computers as described in more detail in conjunction with . In essence TCP IP stack uses TCP IP packets and procedures to transmit and receive messages. A higher level protocol such as HTTP not shown may use TCP IP to transmit and receive messages in interface .

Security layer receives messages from TCP IP stack and determines whether the sender has permission for a requested activity. Security layer may access a database not shown or component to determine the permissions of the requestor. To send and receive messages security layer may use any available security algorithm including public key private key encryption using Rivest Shamir Adleman RSA or Pretty Good Privacy PGP Data Encryption Standard DES or some other encryption method. Alternatively security layer may use no encryption to send or receive messages. Security layer may be implemented as a software module subroutine component and or in hardware. It will be appreciated that security layer may be part of a software program that implements interface .

After security layer performs its functions a message that has passed through it may be sent to one or more of the components shown in . What each of these components does will be described next.

Prepopulate component causes cache entries on one or more cache servers to be updated with new content as appropriate. A cache entry also called entry is associated with a subset of content and may include fields including an expiration field and or a time to live field. An example of a subset of content to which a cache entry may be associated is a Web page. Prepopulating may occur either by pushing the content to a cache server or by expiring a set of cache entries on a cache server and requesting that the cache server request the expired entries i.e. pull the content from one or more other servers. Prepopulate component facilitates this updating of content. For example referring to the interface on cache controller may receive a request from content distributor to prepopulate entries on the cache servers it controls e.g. cache servers . After passing through TCP IP stack and security layer this request may be delivered to prepopulate component . Prepopulate component uses data that indicates which cache servers are affected i.e. cache servers and begins updating content on those cache servers. In doing so it may establish a communications session with the requestor content distributor in which it receives new content that content distributor wants to update cache entries with. Cache controller could then push this content to cache servers .

Alternatively prepopulate component of cache controller may receive a list of cache entries which should be updated on cache servers . Prepopulate component may then use expire component to expire the listed entries. Afterwards prepopulate component may use commands component to send a command to the caches to pull expired content. Instead prepopulate component may interact more directly with cache servers . It may send expiration messages without using expire component . It may also send a pull command to the caches without using commands component .

Prepopulate component may execute as part of an interface serving a single cache server such as cache server . In this case prepopulate component may use information about the caches it services only one to send messages and commands appropriately. Alternatively prepopulate component may be located on a gateway such as gateway . Gateway is coupled to foreign network and sends messages to it as appropriate. Foreign network includes another interface interface that is used to propagate messages and commands to content servers on foreign network . The interface on gateway may have information about interface such as its capabilities and may work in conjunction with interface to update content on content servers on foreign network .

Prepopulate component may be part of the interface servicing an origin server such as origin server . In this case prepopulate component may determine that it should not be used to update content on an origin server. In such cases it may ignore such a command or send the requestor an error.

In one embodiment of the invention a requestor to update content such as content distributor or administrator computer has detailed knowledge about the kind of devices behind each interface to which it sends update requests. Using this knowledge it sends one message to interfaces servicing origin servers a different message to interfaces servicing a cache server yet a different message to interfaces on server array controllers or cache controllers and yet a different message to interfaces on gateways.

In another embodiment of the invention the requestor simply knows where each interface is located and sends the same message to each interface. Each interface is then able to determine how to deal with the message e.g. whether to expire and update cache entries on one or more associated cache servers and or whether to update content on one or more associated origin servers. In other words the interface includes the smarts to determine how to react to a message based on the resources for which it acts as an interface.

Expire component may be used to expire cache entries on a cache server. Simply expiring a cache entry does not mean necessarily that the content associated with the entry will be immediately requested by the cache server. Rather it simply indicates to a cache server that it may need to check for new content if a request for content in the entry is received. For various reasons such a request may or may not come and waiting until such a request does come may make more efficient use of network bandwidth. Expire component may use commands component in sending expiration commands or it may interact more directly with one or more cache servers.

Pin component may be used to pin content onto a cache server. Cache servers have limited storage resources. That is they have a limited main memory size and or hard drive size. When a cache server has used its available storage resources and it receives a request for content that it does not have it must determine which cache entry or entries will be removed to make room for the entry caching the content requested. A company using a cache server to cache content may desire to have certain content always available on a storage resource on a cache server. For example the company may desire to have its home page always available on a cache server. Specifying that certain content should remain on a cache server and should not be removed for other requested content may be accomplished by use of pin component . Pin component instructs a cache server that it may not remove pinned cached content to make room for other content. Rather the cache server must remove other cached content even if accessed more recently to make room for the other content.

Pinning may be specified at various levels of granularity. For example at one level of granularity a cache server may be instructed to keep certain content in its storage resources. The cache server may determine whether it should store the content in RAM and or on a mass storage device as long as it keeps the content stored where it can retrieve it. At another level of granularity a cache server may be instructed to keep certain content in main memory and to keep other content at least on a hard drive.

Pinning may be done on a customer by customer basis. For example several companies may share a cache server. Each company may be allotted a specific portion of the cache server s resources. Within this portion each company may specify that certain content be pinned in storage resources.

Quota component may be used to assign resources on a customer by customer basis. Through quota component a requestor may specify how much of a cache server s resources may be devoted to each customer. Resources include main memory disk space compute cycles queues and any other resources a cache server may have.

Flush component may be used to eliminate content from a cache server. For example a customer may desire to have a certain hierarchy of Web pages eliminated from all cache servers. A requestor may specify this hierarchy using flush component . Flush component then instructs the caches it interfaces for to remove these pages. Flush component may be used in conjunction with updating content on origin servers. For example after an update to origin servers entire content hierarchies may be eliminated. Since such entries should never be requested again they may be flushed to free resources. Alternatively flush component may instruct the caches it interfaces for to expire cache entries associated with the content a requestor instructs to flush.

Content component may be used to serve content to a requestor. For example a requestor such as client computer of may request content from a content server. Such requests and responses to such requests could be routed through content component . When content component is part of the interface for a cache controller it could for example include load balancing algorithms for determining to which cache server of a cache server array the request should be sent.

Commands component may be used to send commands to and receive responses from one or more content servers. A command may come from an outside requestor such as content distributor or administrator computer from another component or from an inside requestor such as another content server for which commands component is part of an interface. Some exemplary commands that may be sent through commands component include commands to take offline or bring online certain content servers commands requesting statistical data from content servers commands placing content servers in alternate modes such as a different cache entry replacement scheme to use when low on resources and other commands or instructions useful in managing a content server.

The components of may be exposed as part of an application programming interface API . That is a developer may have a set of executables objects or dynamic link libraries DLLs that allow the developer to call methods of the components. Using the API the developer may use the components shown in to develop custom applications which include a combination of the features available.

The components may be implemented in software as components modules or subroutines in hardware or some combination thereof. They may have subparts in common with each other such as shared DLLs subroutines etc. They may also be distributed across multiple computers. That is one component may reside on one computer while another component may reside on another computer. A component may access or use another component using a remote procedure call RPC . Together the components may be referred to as a component layer. One software and or hardware application may include security layer the components and content server communication layer .

Content server communication layer relays messages from the components to content servers or another interface. It also relays messages from content servers or another interface to the components. It may include a TCP IP stack or other communications protocol for communicating. It may send data encrypted or unencrypted.

At block a message is received that is directed at a content server for which the interface provides access. For example referring to the interface of cache server receives a prepopulate message directed at cache server . For purposes of this example assume that the message comes from content distributor .

At block a determination is made as to whether the sender of the message has permission to have the requested action performed. If the sender has permission processing branches to block otherwise processing branches to block . For example security layer of determines whether content distributor of has permission to cause cache server to prepopulate cache entries.

At block the message may be discarded and an error message may be sent to the sender. This block is reached if it is determined that the sender did not have permission to cause the action requested to be performed. A security log may be kept of senders of requests and the actions they request. The error message may be sent to inform the sender that it did not have permissions to cause the action to be performed. For example referring to security layer discards the message from content distributor of because it did not have permission to cause cache server to prepopulate cache entries.

At block the appropriate component to send the message to is determined and the message is sent to the determined component. This process is described in more detail in conjunction with . Briefly one of the components of is selected depending on characteristics of the request and the message is sent to the component selected.

At block the process ends. At this point a message has been received by an interface. The interface has determined whether the sender has permission to cause the action requested to be performed. If the sender did not have permission the message was discarded and an error message may be sent to the sender. If the sender did have permission an appropriate component for handling the message was determined and the message was sent to that component. The process above may be repeated for each message received at an interface.

At block a determination is made as to whether the message is to prepopulate a cache server. If so processing branches to block otherwise processing branches to block . For example referring to a message is sent from content distributor . The message arrives at the interface of cache controller . If the message is to prepopulate a cache server the message is sent to prepopulate component of .

At block the message is sent to prepopulate component . Prepopulate component determines whether a push or pull of content will be done on the cache servers with which it is associated and acts accordingly by expiring content and instructing caches servers to pull content or by pushing the content to the cache servers. For example content distributor may send content to push onto cache servers with a prepopulate command. Upon receipt of the command and content prepopulate component pushes the content to cache servers.

At block a determination is made as to whether the message is to expire cache entries on a cache server. If so processing branches to block otherwise processing branches to block . For example if the message sent from content distributor is to expire cache entries the message is sent to expire component of .

At block the message to expire cache entries is sent to expire component . Expire component then determines which cache servers it is associated with are affected by the expired cache entries and sends expiration messages to them appropriately.

At block a determination is made as to whether the message is to pin content on a cache server. If so processing branches to block otherwise processing branches to block . For example if the message sent from content distributor is to pin content on a cache server the message is sent to pin component of .

At block the message is sent to pin component . Pin component sends messages appropriately to cause cache servers it is associated with to pin or lock certain cache content into main memory or into mass memory associated with the cache server. Pinning of content may be done in conjunction with quotas in which a customer specifies that with the resources it is given certain content should be pinned into memory or in mass memory.

At block a determination is made as to whether the message is to set a quota on a content server. If so processing branches to block otherwise processing branches to block . For example if the message sent from content distributor is to set a quota for a particular customer the message is sent to quota component of .

At block the message is sent to quota component . Quota component determines the appropriate associated cache servers that are affected by the quota message and sends messages to them that includes instructions for updated quota requirements.

At block a determination is made as to whether the message is to flush cache entries on a cache server. If so processing branches to block otherwise processing branches to block . For example if the message sent from content distributor is to flush cache entries the message is sent to flush component of .

At block a message is sent to flush component . Flush component determines which cache servers which with it is associated are affected by the flush request and sends messages to them instructing them to flush certain cache entries.

At block a determination is made as to whether the message is a request for content. If so processing branches to block otherwise processing branches to block . For example if the message sent from content distributor is a request for content the message is sent to content component of .

At block a message is sent to content component . Content component selects a content server to send the request to and forwards the request appropriately. It then sends the response sent from the selected content server to the requestor.

At block a determination is made as to whether the message is a command message not serviced by another component. If so processing branches to block otherwise processing branches to block . For example if the message sent from content distributor is for a command or request not serviced by another component the message is sent to commands component of .

At block the message is sent to commands component . Commands component determines whether the requested command is supported or not. If it is supported it sends messages to one or more content servers to fulfill the command. If it is not supported it may discard the message and possibly send a response to the requestor indicating that the command is not supported. An example of a command that may come to commands component is one to cause a content server to go offline or online. This may be used for example to update content on content servers.

At block the process returns to the calling process. At this point a determination has been made for an appropriate component to handle a message. The message has been sent to the appropriate component. Error messages may have been generated and sent to the sender of the message. The component selected to handle the message has interacted with content servers to fulfill the request or command delivered in the message. The process above may be called for each message received at an interface.

It will be recognized that a message may include multiple commands or requests. When a message includes multiple commands or requests the whole message may be sent to each component which then parses out the part or parts applicable to it or the message may be divides into pieces with each piece sent to an applicable component.

With each message sent from a component to a content server an error condition may occur. The component may deal with the error condition and or send a message to the requestor informing the requestor of the error condition.

The various embodiments of the invention may be implemented as a sequence of computer implemented steps or program modules running on a computing system and or as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system implementing the invention. In light of this disclosure it will be recognized by one skilled in the art that the functions and operation of the various embodiments disclosed may be implemented in software in firmware in special purpose digital logic or any combination thereof without deviating from the spirit or scope of the present invention.

The above specification examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit or scope of the invention the invention resides in the claims hereinafter appended.

