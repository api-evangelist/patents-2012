---

title: Selectively enabling packet concatenation based on a transaction boundary
abstract: A system, apparatus, and method are directed towards selectively combining data into a packet to modify a number of packets transmitted over a network based on a detection of a transaction boundary. If it is determined to concatenate the data, such concatenation may continue until an acknowledgement (ACK) is received, or a predetermined amount of data is concatenated in the packet, or a transaction boundary is detected. If at least one of these conditions is satisfied, concatenation may be inhibited, and the packet may be sent. Concatenation is then re-enabled. In one embodiment, Nagle's algorithm is used for concatenating data into a packet. In one embodiment, an ACK may be sent based on a write completion indicator included within a packet. Receipt of the ACK may disable concatenation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08611222&OS=08611222&RS=08611222
owner: F5 Networks, Inc.
number: 08611222
owner_city: Seattle
owner_country: US
publication_date: 20120822
---
The present application is a continuation of application Ser. No. 11 366 367 filed on Mar. 2 2006 which claims priority from provisional application Ser. No. 60 764 005 entitled Selectively Enabling Packet Concatenation Based On Transaction Boundaries filed on Feb. 1 2006 the benefit of the earlier filing date of which is hereby claimed at least under 35 U.S.C. 119 e and 120 and where each are further incorporated herein by reference.

The invention relates generally to communicating content over a network and more particularly but not exclusively to selectively determining whether to concatenate data into a packet based on a transaction boundary.

Nagle s algorithm concatenates data into a packet to modify a number of packets transmitted over a network. Nagle s algorithm typically concatenates data into a packet until an acknowledgement ACK is received or a predetermined amount of data is concatenated in the packet. Subsequently the packet is transmitted over the network. Nagle s algorithm named after John Nagle is described in Request for Comments RFC 896 available at http www.faqs.org rfcs rfc896.html .

Some TCP stacks may also implement a Delayed ACK algorithm. The Delayed ACK algorithm is directed towards minimizing network traffic when many small packets may require many ACK responses. The Delayed ACK algorithm sends an ACK after every two packets have been received or based on a timing event. In one embodiment the Delayed ACK algorithm may send an ACK after 200 msec has elapsed if it has not detected the receipt of a second packet. The Delayed ACK algorithm is described in RFC 1122 available at http www.faqs.org rfcs rfc1122.html .

While the use of Nagle s algorithm may improve behavior for a network interactions between Nagle s algorithm and the Delayed ACK algorithm may cause an extra delay in a sending of a packet. Because Nagle s algorithm waits for an ACK before sending a packet the operation of the Delayed ACK algorithm may cause an undesirable delay in packet transmission. For example Nagle s algorithm may wait until a delayed ACK is received before sending the packet even though the transaction is complete. This delay may be particularly egregious for a transaction based protocol where multiple transactions may be sent in the same session. An example of such a protocol is persistent HTTP 1.1. This situation is documented in http www.w3.org Protocols HTTP Performance Nagle.

Therefore there is a need in the industry to improve how network packets are managed. Thus it is with respect to these considerations and others that the present invention has been made.

The invention now will be described more fully hereinafter with reference to the accompanying drawings which form a part hereof and which show by way of illustration specific exemplary embodiments by which the invention may be practiced. This invention may however be embodied in many different forms and should not be construed as limited to the embodiments set forth herein rather these embodiments are provided so that this disclosure will be thorough and complete and will fully convey the scope of the invention to those skilled in the art. Among other things the invention may be embodied as methods or devices. Accordingly the invention may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment combining software and hardware aspects. The following detailed description is therefore not to be taken in a limiting sense.

Throughout the specification and claims the following terms take the meanings explicitly associated herein unless the context clearly dictates otherwise. The phrase in one embodiment as used herein does not necessarily refer to the same embodiment though it may. As used herein the term or is an inclusive or operator and is equivalent to the term and or unless the context clearly dictates otherwise. The term based on is not exclusive and allows for being based on additional factors not described unless the context clearly dictates otherwise. In addition throughout the specification the meaning of a an and the include plural references. The meaning of in includes in and on. 

As used herein a transaction is an application defined logically related grouping of network records at the application layer OSI Layer 7 . For example a logically related grouping of network records at the application layer may be defined by the HyperText Transfer Protocol HTTP HTTP 1.1 TELNET File Transfer Protocol FTP Simple Mail Transfer Protocol SMTP or the like. The logically related grouping of network records are embodied by data transmitted at the transport layer OSI Layer 4 and or the network layer OSI Layer 3 . For example the data transmitted at these layers may include Internet Protocol IP packets Transmission Control Protocol TCP packets User Datagram Protocol UDP Real time Transport Protocol RTP packets or the like.

As used herein a transaction boundary is an indication of a transition between one transaction and another transaction. As used herein a transaction aware device TAD is any computing device that is arranged to use information associated with syntax and or semantics of a layer 7 application protocol to detect a transaction.

As used herein packets are the data transmitted at the network layer OSI Layer 3 and or the transport layer OSI Layer 4 and the associated records realized at the application layer OSI Layer 7 .

Briefly stated the invention is directed towards a system apparatus and method for selectively combining data into a packet to modify a number of packets transmitted over a network based on a detection of a transaction boundary. As such awareness of the higher level transaction boundaries e.g. at an application layer OSI Layer 7 may be utilized to determine how data may be segmented at lower layers such as at the transport layer or the network layer and to provide a more optimal segmentation of data.

In one embodiment a transaction boundary may be determined by detecting an indicator of an end of a transaction. To detect the end of the transaction a length of a transaction included in a record and or protocol header of a packet is received. A plurality of packets is also received. If a length of the plurality of packets equals the length of the transaction then an indicator of the end of the transaction is provided. In another embodiment the end of the transaction is based on an end of transaction record such as an end of file EOF indicator within a packet. In one embodiment an indicator of the end of the transaction may be received from another component network device application or the like. For example the other component network device application or the like may indicate the end of the transaction a flush of a buffer of data to be sent or the like through an application programming interface API or the like.

In another embodiment a transaction boundary may be determined by detecting an indicator of a beginning of a transaction. In one embodiment the beginning of the transaction may be indicated by a flag within a packet. In one embodiment an indicator of the beginning of the transaction may be received from another component network device application or the like.

In one embodiment if it is determined to concatenate the data such concatenation may continue until an acknowledgement ACK is received or a predetermined amount of data is concatenated in the packet or a transaction boundary is detected. The ACK may include any record packet that indicates a response to previously sent information. In one embodiment if at least one of these conditions is satisfied the packet may be enabled to be transmitted over the network. In one embodiment data is concatenated until a timeout event occurs. In one embodiment Nagle s algorithm or an algorithm substantially adhering to Nagle s algorithm may be used for concatenating data into the packet.

Upon detecting the transaction boundary the invention may inhibit e.g. disable concatenation of data into a packet. Disabling concatenation may result in sending the data over the network virtually as soon as the data is available. Sending of the data virtually at once may also result in sending of a short packet. A short packet is a packet that may include less than a predetermined amount of data to be concatenated into the packet.

Concatenation may then be re enabled. In one embodiment concatenation may be re enabled before a subsequent transaction begins. For example concatenation may be re enabled upon receipt of an ACK for a previous packet sent upon detection of another transaction boundary based on an occurrence of a timeout event upon receipt of an indication to re enable concatenation from another component network device application or the like.

In an alternate embodiment an ACK may be sent virtually immediately based on a write completion indicator included within a packet. Receipt of the ACK may also disable concatenation. In one embodiment a write completion is indicated based on a variety of events including when a current write buffer is full at an end of a write operation at an end of a transaction upon closing an application or the like. A write completion may be indicated by a push flag within a packet.

In one embodiment the invention determines an amount of time to delay sending an ACK at least partly based on the write completion indicator. In one embodiment a first packet is received. If a write completion indicator is detected in the first packet the ACK may be sent virtually immediately. Otherwise if a second packet is received or a timeout event occurs the ACK may also be sent. Upon receipt of the ACK another packet which may include concatenated data may be sent over the network.

In one embodiment the present invention may be implemented on a TAD. The TAD may include a client a proxy a server or the like.

As shown in the figure system includes client device network traffic management device TMD and server devices . Client device is in communication with TMD and server device through network . TMD is in further communication with server devices . Although not shown TMD may be in communication with server devices through a network infrastructure that is similar to network .

Generally client device may include virtually any computing device capable of connecting to another computing device to send and receive information including web requests for information from a server and the like. The set of such devices may include devices that typically connect using a wired communications medium such as personal computers multiprocessor systems microprocessor based or programmable consumer electronics network PCs and the like. The set of such devices may also include devices that typically connect using a wireless communications medium such as cell phones smart phones radio frequency RF devices infrared IR devices integrated devices combining one or more of the preceding devices or virtually any mobile device. Similarly client device may be any device that is capable of connecting using a wired or wireless communication medium such as a PDA POCKET PC wearable computer and any other device that is equipped to communicate over a wired and or wireless communication medium.

Client device may further include a client application that is configured to manage various actions. Moreover client device may also include a web browser application that is configured to enable an end user to interact with other devices and applications over network .

Client device may communicate with network employing a variety of network interfaces and associated communication protocols. Client device may for example use various dial up mechanisms with a Serial Line IP SLIP protocol Point to Point Protocol PPP and the like. As such client device may transfer content at a low transfer rate with potentially high latencies. For example client device may transfer data at about 14.4 to about 46 kbps or potentially more. In another embodiment client device may employ a higher speed cable Digital Subscriber Line DSL modem Integrated Services Digital Network ISDN interface ISDN terminal adapter or the like. As such client device may be considered to transfer data using a high bandwidth interface varying from about 32 kbps to over about 622 Mbps although such rates are highly variable and may change with technology.

Network is configured to couple client device with other network devices such as TMD server device or the like. Network is enabled to employ any form of computer readable media for communicating information from one electronic device to another. In one embodiment network is the Internet and may include local area networks LANs wide area networks WANs direct connections such as through a universal serial bus USB port other fauns of computer readable media or any combination thereof. On an interconnected set of LANs including those based on differing architectures and protocols a router may act as a link between LANs to enable messages to be sent from one to another. Also communication links within LANs typically include twisted wire pair or coaxial cable while communication links between networks may utilize analog telephone lines full or fractional dedicated digital lines including T T T and T Integrated Services Digital Networks ISDNs Digital Subscriber Lines DSLs wireless links including satellite links or other communications links known to those skilled in the art.

Network may further employ a plurality of wireless access technologies including but not limited to 2nd 2G 3rd 3G generation radio access for cellular systems Wireless LAN Wireless Router WR mesh and the like. Access technologies such as 2G 3G and future access networks may enable wide area coverage for network devices such as client device and the like with various degrees of mobility. For example network may enable a radio connection through a radio network access such as Global System for Mobil communication GSM General Packet Radio Services GPRS Enhanced Data GSM Environment EDGE Wideband Code Division Multiple Access WCDMA and the like.

Furthermore remote computers and other related electronic devices could be remotely connected to either LANs or WANs via a modem and temporary telephone link. In essence network includes any communication method by which information may travel between client device and TMD .

Additionally network may include communication media that typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave data signal or other transport mechanism and includes any information delivery media. The terms modulated data signal and carrier wave signal includes a signal that has one or more of its characteristics set or changed in such a manner as to encode information instructions data and the like in the signal. By way of example communication media includes wired media such as but not limited to twisted pair coaxial cable fiber optics wave guides and other wired media and wireless media such as but not limited to acoustic RF infrared and other wireless media.

TMD includes virtually any device that manages network traffic. Such devices include for example routers proxies transparent proxies firewalls load balancers cache devices application accelerators devices that perform network address translation any combination of the preceding devices or the like. TMD may control for example the flow of data packets delivered to or forwarded from an array of server devices such as server devices . TMD may direct a request for a resource to a particular server device based on network traffic network topology capacity of a server content requested and a host of other traffic distribution mechanisms. TMD may receive data packets from and transmit data packets to the Internet an intranet or a local area network accessible through another network. TMD may recognize packets that are part of the same communication flow and or stream and may perform special processing on such packets such as directing them to the same server device so that state information is maintained. TMD also may support a wide variety of network applications such as Web browsing email telephony streaming multimedia and other traffic that is sent in packets. The BIG IP family of traffic managers by F5 Networks of Seattle Wash. are examples of TMDs. In one embodiment TMDs may be integrated with one or more of servers and provide content or services in addition to the TMD functions described herein.

TMD may receive requests from client device . TMD may select a server device from server devices to forward the request. TMD may employ any of a variety of criteria and mechanisms to select the server including those mentioned above load balancing mechanisms and the like. TMD may receive a response to the request and forward the response to client device .

In one embodiment server devices may be geographically distributed from each other. In one embodiment TMD may make a decision as to which server device is best configured to respond to a request from client based on whether the client is connected to the network with a high bandwidth connection. TMD may then either forward a communication to the selected server device or cause the client request to be redirected to the selected server. HTTP redirection may be used to redirect the client request in one embodiment.

TMD may be implemented using one or more personal computers server devices multiprocessor systems microprocessor based or programmable consumer electronics network PCs radio frequency RF devices infrared IR devices integrated devices combining one or more of the preceding devices and the like. Such devices may be implemented solely in hardware or in hardware and software. For example such devices may include some application specific integrated circuits ASICs coupled to one or more microprocessors. The ASICs may be used to provide a high speed switch fabric while the microprocessors may perform higher layer processing of packets. An embodiment of a network device that could be used as TMD is network device of configured with appropriate software.

Servers may include any computing device capable of communicating packets to another network device. Each packet may convey a piece of information. A packet may be sent for handshaking i.e. to establish a connection or to acknowledge receipt of data. The packet may include information such as a request a response or the like. Generally packets received by server devices will be formatted according to TCP IP but they could also be formatted using another transport protocol such as SCTP X.25 NetBEUI IPX SPX token ring similar IPv4 6 protocols and the like. Moreover the packets may be communicated between server devices TMD and client device employing HTTP HTTPS and the like.

In one embodiment server devices are configured to operate as a website server. However server devices are not limited to web server devices and may also operate a messaging server a File Transfer Protocol FTP server a database server content server and the like. Additionally each of server devices may be configured to perform a different operation. Thus for example back end server device may be configured as a messaging server while back end server device is configured as a database server. Moreover while server devices may operate as other than a website they may still be enabled to receive an HTTP communication.

Devices that may operate as server devices include personal computers desktop computers multiprocessor systems microprocessor based or programmable consumer electronics network PCs server devices and the like.

A network device such as client device TMD or at least one of server devices may determine a transaction boundary associated with a network connection. In one embodiment the network device may be a transaction aware device TAD . In one embodiment TMD may determine the transaction boundary by inspecting a flow of data packets delivered to or forwarded from an array of server devices such as server devices . For example TMD may detect a length of a transaction a flag an EOF indicator or the like included in a packet of the flow of data packets.

In one embodiment client device TMD and server devices may determine the transaction boundary by receiving an indicator of the transaction boundary from another component network device application or the like. For example an application may indicate the transaction boundary through an application programming interface API or the like.

Based in part on a determination of the transaction boundary a network device may selectively enable a concatenation of data into a packet to modify a number of packets transmitted or to not concatenate the data and rather immediately send data over the network when it is available. In one embodiment the network device may also receive an indication to re enable concatenation from another component another network device another application or the like. In another embodiment a first network device may determine the transaction boundary and may provide the determined information to a second network device. Based in part on the received information the second network device may selectively enable or disable a concatenation.

It is further noted that terms such as client and server device as used herein are functions within a device. As such virtually any device may be configured to operate as a client device a server device or even include both a client and a server device function. Furthermore where two or more peers are employed any one of them may be designated as a client or as a server and be configured to confirm to the teachings of the present invention.

Network device includes processing unit video display adapter and a mass memory all in communication with each other via bus . The mass memory generally includes RAM ROM and one or more permanent mass storage devices such as hard disk drive tape drive optical drive and or floppy disk drive. The mass memory stores operating system for controlling the operation of network device . Operating system may further include networking components . Network device may also include concatenation manager CM .

As illustrated in network device also can communicate with the Internet or some other communications network such as network in via network interface unit which is constructed for use with various communication protocols including the TCP IP protocol. Network interface unit is sometimes known as a transceiver transceiving device or network interface card NIC .

The mass memory as described above illustrates another type of computer readable media namely computer storage media. Computer storage media may include volatile nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Examples of computer storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by a computing device.

The mass memory also stores program code and data. One or more applications are loaded into mass memory and run on operating system . Examples of application programs may include email programs routing programs schedulers calendars database programs word processing programs HTTP programs traffic management programs security programs and so forth.

Network device may also include an SMTP handler application for transmitting and receiving e mail an HTTP handler application for receiving and handing HTTP requests and an HTTPS handler application for handling secure connections. The HTTPS handler application may initiate communication with an external application in a secure fashion. Moreover network device may further include applications that support virtually any secure connection including TLS TTLS EAP SSL IPSec and the like. Similarly network device may include applications that support a variety of tunneling mechanisms such as VPN PPP L2TP and so forth.

Network device may also include input output interface for communicating with external devices such as a mouse keyboard scanner or other input devices not shown in . Likewise network device may further include additional mass storage facilities such as CD ROM DVD ROM drive and hard disk drive . Hard disk drive may be utilized to store among other things application programs databases and the like.

In one embodiment the network device includes at least one Application Specific Integrated Circuit ASIC chip not shown coupled to bus . The ASIC chip can include logic that performs some of the actions of network device . For example in one embodiment the ASIC chip can perform a number of packet processing functions for incoming and or outgoing packets. In one embodiment the ASIC chip can perform at least a portion of the logic to enable the operation of CM .

In one embodiment network device can further include one or more field programmable gate arrays FPGA not shown instead of or in addition to the ASIC chip. A number of functions of the network device can be performed by the ASIC chip the FPGA by CPU with instructions stored in memory or by any combination of the ASIC chip FPGA and CPU.

Networking components may include for example various components to manage operations of an Open Systems Interconnection OSI network stack including Internet Protocol IP TCP UDP SSL HTTP content encoding e.g. content compression and similar network related services. Networking components may include a send queue enabled to buffer messages and or data before sending the messages over a network. Networking components may utilize a transceiver such as network interface unit to send the messages over the network. Networking components may be enabled to employ a concatenation of data into a packet to modify a number of packets and or payload size of the packets transmitted over a network. Networking components may provide a mechanism for enabling the concatenation or enabling immediately sending data when it is available e.g. absent of concatenation .

CM may be configured to receive various network information from networking components . Based in part on the received information from networking components CM may determine an existence of a transaction boundary. The information may be gathered for example by networking components based on received packets sent packets or the like. In another embodiment a separate component not shown may be configured to determine the transaction boundary and to expose the transaction boundary information to CM . In one embodiment an indicator of the transaction boundary may be received from another component such as one of applications another network device or the like. For example one of applications or the like may indicate the end of the transaction a flush of a buffer of data to be sent or the like through an application programming interface API or the like.

CM may enable the transaction boundary determination to be configurable. For example CM may provide an interface or the like which enables a user and or another computing device to provide a set of application level protocols to be inspected. In one embodiment application level protocols are defined at the application layer OSI Layer 7 . The type of application level protocol may be determined by the data included in a transferred packet and or the port utilized by the network connection. Examples of various types of application level protocols include but are not limited to HTTP HTTPS SMTP FTP NNTP or the like.

CM may be enabled to selectively concatenate data into a packet based on the detection of the transaction boundary. CM may selectively concatenate data received from networking components applications or the like. CM may employ a process such as described in conjunction with .

In one embodiment CM may be enabled to send virtually immediately an ACK based on a write completion indicator included within a packet. CM may detect the write completion indicator based on information received from networking components or the like. CM may employ a process such as described in conjunction with .

Although illustrated in as distinct components networking components and CM may be arranged combined or the like in any of a variety of ways without departing from the scope of the invention. For example networking components and CM may be configured to operate a single component. Moreover networking components and CM may reside within operating system . Furthermore in one embodiment networking components and CM may reside on different devices such as TMD of server devices or client device . In one embodiment CM may be configured to receive various network information from networking components through a network communication or the like.

Signal flow begins at time where data is concatenated into a packet e.g. full packet to modify a number of packets transmitted over a network and the data is sent. For example data may be concatenated into the packet until a predetermined amount of data is reached e.g. packet is full . As shown at time the packet is full and thus ready for sending. Processing then continues to time .

At time the packet is received. In one embodiment a Delayed ACK algorithm may operate to delay sending an ACK for the received packet until after a second data packet is received or after a timeout event occurs. In one embodiment the timeout event occurs after about 200 msecs. Processing then continues to time .

At time another packet e.g. short packet is filled with data and a transaction boundary is detected. Upon detecting the transaction boundary the invention may inhibit e.g. disable concatenation of data into a packet. Disabling concatenation may result in sending the data over the network virtually as soon as the data is available. As shown sending of the data may also result in sending of a short packet. Processing then continues to time .

At time the timeout event occurs and the delayed ACK is sent. In one embodiment the delayed ACK is sent in accordance with the Delayed ACK algorithm. The delayed ACK may be a particular type of packet a packet including a particular type of data protocol and or record header or the like. Processing then continues to time .

At time the delayed ACK is received and concatenation may be re enabled upon receipt of the ACK. In another embodiment concatenation may be re enabled upon detection of another transaction boundary based on an occurrence of a timeout event upon receipt of an indication to re enable concatenation from another component network device application or the like. In another embodiment concatenation may occur after time . Processing then continues to time .

At time the short packet is received and processed. For example the short packet may be utilized to complete a transaction. Processing may continue to another time step for further processing.

Signal flow begins at time where data has been concatenated into a packet e.g. full packet to modify a number of packets transmitted over a network and the data is sent. For example data may be concatenated into the packet until a predetermined amount of data is reached. As shown the packet is full and thus ready for sending. Also as shown the full packet includes a write completion indicator. In one embodiment the write completion is indicated based on a variety of events including when a current write buffer is full at an end of a write operation at an end of a transaction upon closing an application or the like. The write completion may be also indicated by a push flag within the packet. Processing then continues to time .

At time the packet is received. In one embodiment the invention may determine an amount of time to delay sending an ACK at least partly based on the write completion indicator included within the packet received. In one embodiment if a write completion indicator is not detected a Delayed ACK algorithm may operate to delay sending an ACK for the received packet until after a second data packet is received or after a timeout event occurs. As shown the write completion indicator is detected in the packet and the ACK is sent virtually immediately. Processing then continues to time .

At time another packet e.g. short packet is filled with data. A concatenation algorithm substantially similar to Nagle s algorithm may continue concatenation until an acknowledgement ACK is received or a predetermined amount of data is concatenated in the packet. As shown because the predetermined amount of data has not been sent and an ACK has not been received the short packet is not sent at time . Processing then continues to time .

At time the immediately sent ACK is received thereby enabling the sending of the short packet in accordance with an algorithm substantially similar to Nagle s algorithm. As shown there may be a delay between time and time . However in one embodiment this delay may be less then another delay in the absence of an immediately sent ACK e.g. when a delayed ACK is sent . The short packet is then received for further processing at time . Processing may continue to another time step for further processing.

The operation of certain aspects of the invention will now be described with respect to . illustrates a logical flow diagram generally showing one embodiment of a process for selectively enabling network packet concatenation based on a detection of a transaction boundary. Process of may be implemented for example within CM of .

Process begins after a start block at block where a data is received. In one embodiment the data may be included in a received packet. The packet may be received from a network device a calling process a network component such as networking component of or the like. A packet s predetermined size packet buffer may be as large as an MSS. A packet may include data up to a predetermined amount of data. Processing then continues to decision block .

At decision block a determination is made whether a buffer for a packet to be sent is full. In one embodiment it is determined whether the packet to be sent has accumulated a predetermined amount of data. If the packet to be sent has accumulated the predetermined amount of data then processing continues to block . Otherwise processing continues to decision block . In one embodiment not shown processing may also continue to block if a timeout event occurs.

At decision block a determination is made whether an ACK has been received. An ACK may be received for a previously sent packet. In one embodiment the sending of the ACK may have been delayed based on a Delay ACK algorithm. An ACK may be a particular type of packet a packet including a particular type of data protocol and or record header or the like. If the ACK has been received then processing continues to block . Otherwise processing continues to decision block .

At decision bock a determination is made whether data should be combined concatenated and or coalesced into a packet based on a detection of a transaction boundary. In one embodiment the transaction boundary may be determined by detecting an indicator of an end of a transaction. To detect the end of the transaction a length of a transaction included in a protocol and or record header of a packet may be received. In one embodiment the length of the transaction may be included in the data and or packet received at block . After determining the length of the transaction a plurality of packets is received. For example the plurality of packets may be associated to the data and or packet received at block . If a length of the plurality of packets equals the length of the transaction an indicator of the end of the transaction is provided thereby indicating that the transaction boundary is detected.

In another embodiment the end of the transaction is based on an end of file EOF indicator within a packet. For example if the EOF indicator is included within the data and or packet received at block then the transaction boundary is detected. In one embodiment an indicator of the end of the transaction may be received from another component network device application or the like.

In another embodiment a transaction boundary may be determined by detecting an indicator of a beginning of a transaction. In one embodiment the beginning of the transaction may be indicated by a flag within the data and or packet received at block . In one embodiment an indicator of the beginning of the transaction may be received from another component network device application or the like.

If it is determined that the transaction boundary is detected then processing continues to block . Otherwise processing continues to block .

At block data is concatenated into the packet to be sent. For example data may be concatenated into the packet until a predetermined amount of data is reached. In one embodiment a data of a first packet is concatenated with another data. The other data may be provided by a second packet a networking component another component a network API call or the like. In one embodiment the concatenated data is stored in the first packet. In another embodiment data of the first packet is combined and or coalesced with data of the second packet and stored in the first packet. The combined and or coalesced result may be further processed by compressing encrypting encoding interleaving the result or the like. Therefore concatenation combination and or coalescing of the data further modifies the number of packets and or a network packet s data payload size sent over the network. In one embodiment data of a subsequent received packet may be buffered into the packet until the packet buffer is full. Processing then loops back to block .

In an alternate embodiment at block data is instead coalesced into the packet and processing may wait for a predetermined time period. For example the data may be coalesced until a timeout even occurs or the like and then subsequently sent over the network. In one embodiment the time period may be selectively modified by selectively reducing the time period or selectively extending the time period or the like. Processing then loops back to block .

At block the packet is sent. The sending of the packet may differ depending on whether the buffer is full an ACK is received a timeout event occurs or whether the transaction boundary is detected. For example if the packet buffer is full or the transaction boundary is detected or a timeout event occurs then the packet may be sent as is and the received data may be enabled for subsequent processing at block . If the packet buffer is not full then extra data may also be padded into the packet to be sent. Processing then continues to block .

At block and in one embodiment concatenation is enabled. In one embodiment concatenation may be enabled by enabling an operating system to employ the present invention. In one embodiment concatenation may be re enabled before a subsequent transaction begins. For example concatenation may be re enabled upon receipt of an ACK for a previous packet sent upon detection of another transaction boundary based on an occurrence of a timeout event upon receipt of an indication to re enable concatenation from another component network device application or the like. Processing then returns to a calling process for further processing.

In an alternate embodiment block may occur between block and decision block . In this embodiment data may be concatenated into the packet to be sent as soon as it is available.

Process begins after a start block at block where a first packet is received. The first packet may be received from a network device a calling process a network component such as networking component of or the like. Processing then continues to decision block .

At decision block it is determined whether the first packet includes a write completion indicator. In one embodiment a write completion is indicated based on a variety of events including when a current write buffer is full at an end of a write operation at an end of a transaction upon closing an application or the like. In one embodiment a write completion may be indicated by a push flag within the first packet. In one embodiment the invention determines an amount of time to delay sending an ACK at least partly based on the write completion indicator. If it is determined that the packet includes a write completion indicator processing then continues to block . Otherwise processing continues to block .

At block processing waits for a receipt of a second packet or for a timeout event to occur. If a second packet is received or a timeout event occurs processing continues to block . At block the ACK may be sent. In one embodiment the ACK may be sent to the sender of the first and or second packet.

In one embodiment not shown receipt of the ACK may disable concatenation. Receipt of the ACK may also enable another packet which may include concatenated data to be sent over the network.

It will be understood that each block of the flowchart illustration and combinations of blocks in the flowchart illustration can be implemented by computer program instructions. These program instructions may be provided to a processor to produce a machine such that the instructions which execute on the processor create means for implementing the actions specified in the flowchart block or blocks. The computer program instructions may be executed by a processor to cause a series of operational steps to be performed by the processor to produce a computer implemented process such that the instructions which execute on the processor to provide steps for implementing the actions specified in the flowchart block or blocks.

Accordingly blocks of the flowchart illustration support combinations of means for performing the specified actions combinations of steps for performing the specified actions and program instruction means for performing the specified actions. It will also be understood that each block of the flowchart illustration and combinations of blocks in the flowchart illustration can be implemented by special purpose hardware based systems which perform the specified actions or steps or combinations of special purpose hardware and computer instructions.

The above specification examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention the invention resides in the claims hereinafter appended.

