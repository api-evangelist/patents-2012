---

title: Testing disk drives shared by multiple processors in a supercomputer complex
abstract: An interface node selects a logical block address that corresponds to a contiguous memory location located on a storage device that is accessible by multiple interface nodes. The interface node retrieves a logical block address status indicator from a shared memory area and determines, based upon the logical block status indicator, whether the logical block address is utilized by a different interface node. If the logical block address is not utilized by a different interface node, the interface node tests the corresponding contiguous memory location.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09021321&OS=09021321&RS=09021321
owner: International Business Machines Corporation
number: 09021321
owner_city: Armonk
owner_country: US
publication_date: 20121210
---
The present disclosure relates to testing disk drives shared by multiple processors in a supercomputer complex. More particularly the present disclosure relates to using a shared memory to prevent write collisions between multiple interface nodes when testing shared disk drives.

Supercomputer complexes typically include a substantial amount of processors that are utilized for highly calculation intensive tasks such as quantum physics problems weather forecasting climate research oil and gas exploration molecular modeling etc. In a supercomputer complex multiple processors may share a direct access storage device DASD domain which includes multiple storage devices configured in an array format. As such a supercomputer complex may also include interface nodes to manage data traffic between the processors and the DASD.

According to one embodiment of the present disclosure an approach is provided in which an interface node selects a logical block address that corresponds to a contiguous memory location located on a storage device that is accessible by multiple interface nodes. The interface node retrieves a logical block address status indicator from a shared memory area and determines based upon the logical block status indicator whether the logical block address is utilized by a different interface node. If the logical block address is not utilized by a different interface node the interface node tests the corresponding contiguous memory location.

The foregoing is a summary and thus contains by necessity simplifications generalizations and omissions of detail consequently those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects inventive features and advantages of the present disclosure as defined solely by the claims will become apparent in the non limiting detailed description set forth below.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the disclosure. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present disclosure has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the disclosure in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the disclosure. The embodiment was chosen and described in order to best explain the principles of the disclosure and the practical application and to enable others of ordinary skill in the art to understand the disclosure for various embodiments with various modifications as are suited to the particular use contemplated.

As will be appreciated by one skilled in the art aspects of the present disclosure may be embodied as a system method or computer program product. Accordingly aspects of the present disclosure may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present disclosure may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present disclosure are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The following detailed description will generally follow the summary of the disclosure as set forth above further explaining and expanding the definitions of the various aspects and embodiments of the disclosure as necessary.

A requirement of supercomputer complex is to ensure that physical disk arrays are functioning properly such as ensuring that memory locations are not stuck at a 1 or a 0 and or ensuring that their addressing logic is functioning correctly. As such interface nodes and include disk exercisers and respectively to randomly select logical block addresses and write read compare data to one of physical disk arrays s contiguous memory locations corresponding to the selected logical block addresses. Disk exercisers and may be software modules hardware modules or a combination of software modules and hardware modules.

Each of disk exercisers and utilize a random signal number generator to randomly select a logical block address and in turn randomly test various contiguous memory locations within physical disk arrays . In order to avoid write conflicts between interface nodes and disk exercisers and utilize shared memory to synchronize rule changes and or inform each other as to their particular logical block address utilization.

In one embodiment disk exercisers and employ a message passing approach e.g. message passing application programming interface MAPI to communicate with a shared memory construct shared memory . In this embodiment disk exerciser may randomly select a logical block address corresponding to a contiguous memory location within storage device and send a message to shared memory via API interface to determine whether interface node is currently utilizing the selected logical block address see and corresponding text for further details . Disk exerciser receives a logical block status indicator back from shared memory via API interface that indicates whether the selected logical block address is locked by a different interface node interface node . If the logical block address is not locked disk exerciser sends a lock message to shared memory to lock the logical block address see and corresponding text for further details and proceeds to write read compare data to the contiguous memory location in storage device see and corresponding text for further details . In another embodiment interface node and interface node communicate with shared memory using other approaches such as through a memory controller module.

Concurrently disk exerciser receives a random number from random number generator and generates a logical block address. In one embodiment disk exerciser generates the same logical block address that was locked by disk exerciser discussed above. In this embodiment when disk exerciser checks the availability of the logical block address via address check message disk exerciser receives a response that indicates an addressing conflict the logical block address is already locked . As such disk exerciser receives a different random number from random number generator and generates a different logical block address. In one embodiment disk exerciser re seeds random number generator when the number of address conflicts reaches a threshold see and corresponding text for further details .

Disk exerciser in turn sends a message to shared memory via an API interface to check whether the different logical block address is available LBA check message . If the different logical block address is available disk exerciser sends LBA lock message to lock the different logical block address from interface node s usage. In turn disk exerciser tests contiguous memory location via write and read to determine whether the contiguous memory location is functioning properly e.g. no stuck bits . When disk exerciser is finished testing contiguous memory location disk exerciser sends address LBA release message to release the lock on the different logical block address.

Column includes the interface node identifier of the interface node that has a lock on a particular logical block address. Columns and include the starting address and ending address of the locked logical block address. In one embodiment shared memory may include a LBA integer number column instead of columns and to identify the logical block addresses by their corresponding integer indexes. And column includes lock times that an interface node locks a particular logical block address.

The disk exerciser generates an address range logical block address according to the random number at step and at step checks shared memory to determine whether the generated logical block address is allocated e.g. utilized by a different interface node . For example a different interface node may be in the middle of testing a contiguous memory location that corresponds to the generated logical block address.

A determination is made as to whether the logical block address is available decision . For example the disk exerciser may send a message such as LBA check message shown in via an API interface to a shared memory construct. If the logical block address is not available decision branches to the No branch whereupon the disk exerciser increments conflict counter at step which counts the consecutive amount of times that the disk exerciser encounters conflicts with acquiring a lock on a generated logical block address.

A determination is made as to whether conflict counter reached a threshold decision . If conflict counter reached a threshold decision branches to the No branch whereupon the disk exerciser receives a different random number from random number generator based upon the same seed value that was provided in step discussed above step . However if the conflict counter reached the threshold decision ranches to the Yes branch whereupon the disk exerciser re seeds random number generator at step .

Referring back to decision when the disk exerciser determines that the logical block address is available decision branches to the Yes branch whereupon the disk exerciser clears conflict counter at step . The disk exerciser sends a logical block address lock message e.g. LBA lock message shown in to shared memory at step which prohibits other interface nodes from accessing a contiguous memory location corresponding to the logical block address. In one embodiment shared memory includes a table that tracks logical block address locks according to interface nodes see and corresponding text for further details .

In turn the disk exerciser performs a write read compare test on the contiguous memory location included in storage device that corresponds to the logical block address step . The disk exerciser sends a logical block address release message e.g. LBA release message shown in to shared memory at step which releases the lock on the logical block address and allows other interface nodes to capture the logical block address.

A determination is made as to whether the contiguous memory location test passed decision . If the contiguous memory location passed decision branches to the PASS branch. However if the contiguous memory location test failed decision branches to the Fail branch whereupon the disk exerciser generates an error message at step indicating the failing contiguous memory locations.

A determination is made as to whether to continue testing contiguous memory locations decision . If the disk exerciser should continue to test contiguous memory locations decision branches to the Yes branch which loops back to receive another random number and test a corresponding logical block address contiguous memory locations. This looping continues until the disk exerciser should terminate at which point decision branches to the No branch whereupon processing ends at .

Northbridge and Southbridge connect to each other using bus . In one embodiment the bus is a Direct Media Interface DMI bus that transfers data at high speeds in each direction between Northbridge and Southbridge . In another embodiment a Peripheral Component Interconnect PCI bus connects the Northbridge and the Southbridge. Southbridge also known as the I O Controller Hub ICH is a chip that generally implements capabilities that operate at slower speeds than the capabilities provided by the Northbridge. Southbridge typically provides various busses used to connect various components. These busses include for example PCI and PCI Express busses an ISA bus a System Management Bus SMBus or SMB and or a Low Pin Count LPC bus. The LPC bus often connects low bandwidth devices such as boot ROM and legacy I O devices using a super I O chip . The legacy I O devices can include for example serial and parallel ports keyboard mouse and or a floppy disk controller. The LPC bus also connects Southbridge to Trusted Platform Module TPM . Other components often included in Southbridge include a Direct Memory Access DMA controller a Programmable Interrupt Controller PIC and a storage device controller which connects Southbridge to nonvolatile storage device such as a hard disk drive using bus .

ExpressCard is a slot that connects hot pluggable devices to the information handling system. ExpressCard supports both PCI Express and USB connectivity as it connects to Southbridge using both the Universal Serial Bus USB the PCI Express bus. Southbridge includes USB Controller that provides USB connectivity to devices that connect to the USB. These devices include webcam camera infrared IR receiver keyboard and trackpad and Bluetooth device which provides for wireless personal area networks PANs . USB Controller also provides USB connectivity to other miscellaneous USB connected devices such as a mouse removable nonvolatile storage device modems network cards ISDN connectors fax printers USB hubs and many other types of USB connected devices. While removable nonvolatile storage device is shown as a USB connected device removable nonvolatile storage device could be connected using a different interface such as a Firewire interface etcetera.

Wireless Local Area Network LAN device connects to Southbridge via the PCI or PCI Express bus . LAN device typically implements one of the IEEE 802.11 standards of over the air modulation techniques that all use the same protocol to wireless communicate between information handling system and another computer system or device. Optical storage device connects to Southbridge using Serial ATA SATA bus . Serial ATA adapters and devices communicate over a high speed serial link. The Serial ATA bus also connects Southbridge to other forms of storage devices such as hard disk drives. Audio circuitry such as a sound card connects to Southbridge via bus . Audio circuitry also provides functionality such as audio line in and optical digital audio in port optical digital output and headphone jack internal speakers and internal microphone . Ethernet controller connects to Southbridge using a bus such as the PCI or PCI Express bus. Ethernet controller connects information handling system to a computer network such as a Local Area Network LAN the Internet and other public and private computer networks.

While shows one information handling system an information handling system may take many forms. For example an information handling system may take the form of a desktop server portable laptop notebook or other form factor computer or data processing system. In addition an information handling system may take other form factors such as a personal digital assistant PDA a gaming device ATM machine a portable telephone device a communication device or other devices that include a processor and memory.

While particular embodiments of the present disclosure have been shown and described it will be obvious to those skilled in the art that based upon the teachings herein that changes and modifications may be made without departing from this disclosure and its broader aspects. Therefore the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this disclosure. Furthermore it is to be understood that the disclosure is solely defined by the appended claims. It will be understood by those with skill in the art that if a specific number of an introduced claim element is intended such intent will be explicitly recited in the claim and in the absence of such recitation no such limitation is present. For non limiting example as an aid to understanding the following appended claims contain usage of the introductory phrases at least one and one or more to introduce claim elements. However the use of such phrases should not be construed to imply that the introduction of a claim element by the indefinite articles a or an limits any particular claim containing such introduced claim element to disclosures containing only one such element even when the same claim includes the introductory phrases one or more or at least one and indefinite articles such as a or an the same holds true for the use in the claims of definite articles.

