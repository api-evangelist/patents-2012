---

title: Dynamic quests in game
abstract: Methods, systems, and computer programs are presented for executing a game and for creating computer-generated game quests, which are referred to as dynamic quests. One method includes an operation for identifying a template for creating a dynamic quest. The dynamic quest includes quest tasks and quest rewards, which are provided to a player upon completion of the quest tasks in the game. The template includes template tasks and template rewards. Further, the method includes an operation for selecting one or more template tasks for the quest tasks, and an operation for selecting one or more template rewards for the quest rewards. The dynamic quest is created in the game with the selected one or more template tasks and the selected one or more template rewards.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09174128&OS=09174128&RS=09174128
owner: Zynga Inc.
number: 09174128
owner_city: San Francisco
owner_country: US
publication_date: 20120426
---
The present embodiments relate to methods for executing games in a distributed environment and more particularly methods systems and computer programs for creating computer generated quests in a game.

Same games provide challenges to players where the challenges entail the completion of one or more tasks within the game. As the player completes each challenge the player receives rewards and new challenges are provided to continue the game. The challenges sometimes referred to as quests are typically created by development engineers that manually draft tens or hundreds or maybe even thousands of different challenges for the players. A large number of available challenges in the game makes more difficult that players run out of challenges which would cause players to leave the game because there is nothing else to do in the game. After a while some experienced players may run out of challenges causing these experienced players to leave the game.

Additionally some players may dislike some of the challenges offered by the game causing these players to ignore these disliked challenges and continue looking for new challenges that are more appealing. However creating challenges is a time consuming task that requires human intervention.

In order to keep expert players engaged in the game and to provide challenges to the liking of every player a system is desired that would create a large amount of challenges at a minimum cost in order to keep players engaged in the game for longer periods of time.

Embodiments of the disclosure provide methods systems and computer programs for executing a game and for creating computer generated game quests also referred to as dynamic quests.

It should be appreciated that the present embodiments can be implemented in numerous ways such as a process an apparatus a system a device or a method on a computer readable medium. Several embodiments are described below.

In one embodiment a method for executing an online game is provided and the method includes an operation for identifying a template for creating a dynamic quest. The dynamic quest includes one or more quest tasks and one or more quest rewards which are provided to a player upon completion of the one or more quest tasks in the online game. In addition the template includes a plurality of template tasks and a plurality of template rewards. Further the method includes an operation for selecting one or more template tasks for the quest tasks and an operation for selecting one or more template rewards for the quest rewards. The dynamic quest is created in the online game with the selected one or more template tasks and the selected one or more template rewards and the operations of the method are executed by a processor.

In another embodiment a distributed game server includes a game engine module and a quest engine module. The game engine module provides online game capabilities to a plurality of users and the quest engine module assigns quests to users of the online game. The quests include crafted quests which are created manually and dynamic quests which are created by the quest engine module based on a template from a plurality of templates. Each dynamic quest includes one or more quest tasks and one or more quest rewards which are provided to a player upon completion of the one or more quest tasks in the online game. In addition each template from the plurality of templates includes a plurality of template tasks and a plurality of template rewards.

In yet another embodiment a computer program embedded in a non transitory computer readable storage medium when executed by one or more processors for executing an online game is provided. The computer program comprises program instructions for identifying a template for generating a dynamic quest. The dynamic quest includes one or more quest tasks and one or more quest rewards which are provided to a player upon completion of the one or more quest tasks in the online game. The template includes a plurality of template tasks and a plurality of template rewards. The computer program further includes program instructions for selecting one or more template tasks for the quest tasks and program instructions for selecting one or more template rewards for the quest rewards. The dynamic quest is created in the online game with the selected one or more template tasks and the selected one or more template rewards.

Other aspects will become apparent from the following detailed description taken in conjunction with the accompanying drawings.

The following embodiments describe methods computer programs systems and apparatus for creating computer generated quests in a game. Embodiments provide the ability to generate a large number of quests e.g. 80 000 or more without a person having to create each quest manually. The quests may be generated on demand on a server and then propagated to the clients or may be buffered in advance of the player needing the assignment of a new quest.

It will be apparent that the present embodiments may be practiced without some or all of these specific details. In other instances well known process operations have not been described in detail in order not to unnecessarily obscure the present embodiments.

The embodiment of shows a screen capture for the game Pioneer Trail formerly known as FrontierVille provided by Zynga Inc. the assignee of the present application but the principles presented herein may be applied to other online games as well as to games that are not played online.

The Pioneer Trail is a simulation role playing video game available for play on social networking sites. The player plays the role of a pioneer of the American old west and utilizes an avatar which resembles a pioneer. The player may complete collections which may be traded for coins experience points XP decorations livestock trees craftable items energy and horseshoes rare money that can be bought with real money . The player may also finish goals which include tasks such as gathering money buying energy clearing land chopping down trees raising livestock and trees creating items such as beds furniture and clobbering unwanted pests like bears snakes foxes and groundhogs. Eventually the player may acquire a spouse and have children.

Other tasks include collecting from buildings building inns wagons general stores cabins schools chicken coops barns trading posts barber shops churches and sawmills as well as seeding growing and harvesting crops. Coins enable the player to purchase decorations buildings crops trees and animals. Horseshoes which can be earned in game or purchased through real world cash or credit allow the player to buy mules and horses paint buckets hand drills nails bricks hammers etc. These items are essential for completing certain goals. Friends may also gift some items to the player which is referred to herein as a viral interaction.

Crops may be planted and must be harvested before they wither and the crops with longer maturation times provide larger payoffs. Harvesting may trigger encounters with ground hogs which must be clobbered to avoid using extra energy within their area of influence. Clobbering pests and harvesting crops yield coins XP and food. Food can be used to get energy which is necessary to do many actions in the game. Energy can be purchased in exchange for food or horseshoes. When the player runs out of energy the player must either purchase more energy with food or horseshoes or wait for more energy to build up over time.

Animals may be purchased and harvested routinely for resources or sold outright for a large one time reward. The animals start out as juveniles and must be fed several times to grow into adults. Players can also plant fruit trees such as cherry apple pear peach apricot etc. and their fruits may be collected when the trees reach maturity.

As the player advances in the game the player acquires assets which can take multiple forms. In one embodiment assets include first virtual currency asset second virtual currency wood asset food asset energy asset sheep asset haystack asset dancing bear asset badges badge collections temporally tiered levels bonuses promotions penalties digital content e.g. image files icons audio files video files gifts tokens honor title rewards invitation permissions avatars rally points diaries footprints trophies competitions engagement modes user difficulty modes e.g. novice intermediate expert stars medals gems pets exploration quests etc. Each asset can be used for one or more purposes. For example first virtual currency can be used during the game to make progress also referred to herein as advancement. The first virtual currency can be used to acquire assets e.g. animals or crops to remove an obstacle in the game e.g. enabling progress that would otherwise be blocked or to complete a task e.g. finish decorating a house .

In particular embodiments the first and the second virtual currencies are used for different purposes although some assets may be bought with either of the currencies. The first virtual currency has a higher purchasing value than the second virtual currency. For example the first virtual currency can unblock some obstacles in the game that the second virtual currency cannot. Although a small amount of first virtual currency may be given to the player as the game starts a player needs to purchase more first virtual currency with real currency also referred to herein as legal currency real world currency or real cash. This provides a revenue stream for the online game provider.

Some multiuser online games are styled after casino gambling games e.g. poker roulette slot machines etc. . In a gambling game players generally obtain virtual currency for their character s use in the gambling game. In some gambling games and in other online games players purchase virtual currency in exchange for legal currency where the legal currency is transferred using a credit debit or charge card transaction conveyed over a financial network. In such games the virtual currency may be represented by virtual poker chips or by a number or a value stored by the server for that player s benefit. A player interacts with the game server such that the player or a character controlled by the player plays a gambling game in hopes of increasing the amount of virtual currency.

In one embodiment the online game includes quests which may also be referred to as missions goals challenges etc. The quests identify one or more tasks that the player must complete before the quest is considered satisfied or finished. For example a request may require three tasks chopping down a tree feeding an animal and planting an apple tree. Upon completion of the quest the player is rewarded in some fashion such as getting a new asset increasing the amount of energy getting more virtual currency etc. As the player completes tasks and quests the game score is increased and as the game score increases the experience level may also increase.

Clicking on inventory icon causes the online game to display a list of all the items or assets owned by the player. In addition clicking on marketplace icon takes the player to a virtual marketplace where assets can be acquired. As described above assets can be from within different categories such as crops trees animals buildings decorations energy special items weapons etc. Each category includes a plurality of assets within the category. For example the animal category includes ducks chickens goats sheep pigs etc. Some of the items within a category can be freely acquired by the player while purchasing of some items can be blocked until certain game condition is met such as reaching some score finishing a quest purchasing the ability to unblock the blocked item etc.

In one embodiment avatar may be personalized by the player i.e. the avatar is defined by a personal expression configured by the player. The personal expression may include type of skin hair color mouth eyes gender age clothing etc. In one embodiment the personal expression can be improved by acquiring personal expression assets such as fancy clothing e.g. shoes suits hats . Acquisition of personal expression items is made with virtual currency in one embodiment.

In one embodiment the online game is an online social game which leverages social relationships between the player and other online game players socially linked to the player. For example the player may add a neighbor to the game by inviting a friend from a social networking site. There are several online social networks run and maintained by various companies and any one of these companies can provide access to social graph data. One such company without limitation to others may include Facebook. Once a friend accepts being a neighbor a social relationship is established in the game where the game played by the player and the game played by the neighbor can interact with each other. For example the player may visit the home of the neighbor and perform some game activities therein and will be rewarded for doing so. Some of the quests in the game may include social activities that promote the interaction between players. For example one quest may include planting tomatoes in the neighbor s farm. Therefore the social interaction can provide advancement for the player and for the neighbor.

It is noted that the embodiments illustrated in are exemplary. Other embodiments may utilize different assets quests social interactions etc. The embodiments illustrated in should therefore not be interpreted to be exclusive or limiting but rather exemplary or illustrative.

The crafted quest of includes title e.g. Takin The Weight fiction one or more tasks one or more rewards and a hint . It is noted that the embodiment illustrated in is exemplary. Other embodiments may utilize additional elements or may include fewer or more items than the ones included in . The embodiment illustrated in should therefore not be interpreted to be exclusive or limiting but rather exemplary or illustrative.

The fiction is a sort textual description that provides background information regarding the quest to be performed. For example the section may describe a problem with the player s avatar or with some other character in the game which requires the player to perform some tasks in order to solve this problem.

Each task includes an action that must be performed by the user in the game. In one embodiment some tasks are related to an object and completion of the tasks requires performing an action on the object. For example one object may be a cow and a related task may be tending the cow. Other tasks do not require performing an action on an object such as for example visiting a neighbor. 

The action may have to be done once or may have to be repeated multiple times in order to complete the task in the quest. A counter indicates how many times the player has performed the action and the total number of times required to complete this task e.g. 5 30 means that the player has performed the action such as clearing wildflowers 5 times out of 30 . Further the task includes an unlock option to complete e.g. unlock the task by spending game currency e.g. gold horseshoes . In one embodiment an icon is associated with the task and provides a graphical representation related to the task.

Some tasks may be viral tasks which require the cooperation from another player. In one embodiment a button provides the player the option to open a dialogue to originate a request for one or more friends to help with the viral task.

A quest may include one or more non viral tasks and one or more viral tasks. It is noted that the embodiment illustrated in is exemplary. Other embodiments may utilize a different number of tasks and different types of tasks. For example in one embodiment the quest includes one non viral task and one viral task but other combinations are also possible. One quest may include non viral tasks exclusively and another quest may include viral tasks exclusively. The embodiments illustrated in should therefore not be interpreted to be exclusive or limiting but rather exemplary or illustrative.

In one embodiment the quest includes a hint that gives the player a clue on how to complete one or more of the tasks. Further the quest includes one or more rewards which the player gains when the quest is completed e.g. all the tasks are completed. The reward may include a new asset for the player or an increase in one or more of the assets currently owned by the player. For example the reward may include adding virtual currency adding energy to play the game getting a new cow obtaining an item for a collection in the game etc.

Advanced players may complete all the game crafted quests and run out of things to do. With dynamic quest generation advanced players do not run out of quests to perform because the system generates new quests as needed.

The quest generation system utilizes a plurality of quest templates which can be customized to generate thousands or millions of different quests. Each template offers a plurality of different elements and a few of those elements are selected to generate a quest. During dynamic quest generation the quest generation system selects one or more of the tasks in the template to create the dynamic quest.

In one embodiment a template to generate dynamic quests includes a plurality of titles a plurality of fictions a plurality of tasks a plurality of viral tasks and a plurality of rewards . Each title provides a textual description for the dynamic quest and one of the titles from the template e.g. Help Aunt Lucy is selected for the new dynamic quest.

The fiction provides a textual description that is added to the dynamic quest e.g. Aunt Lucy is sick. She needs food and medicine. Bring food and medicine to Aunt Lucy and is presented to the user when the dynamic quest is given. More details on an example of a dynamic quest are provided below with reference to . In one embodiment the fictions and the titles are generic so any title and any fiction may be combined with any task and any reward. In another embodiment certain fictions may only be used with certain titles and some titles may only be used with a predetermined set of the possible fictions.

In one embodiment each task includes a plurality of objects a plurality of icons and a plurality of hints . The object e.g. watermelon refers to an item in the game that is associated with the task to be performed. For each object there are one or more possible actions e.g. Harvest 10 watermelons that may be performed on the object. In one embodiment the icons are not associated with the object and in another embodiment the icons are related to the object. For example a figure of a watermelon may be an icon for the watermelon object. In addition in another embodiment hints e.g. Go to market to purchase watermelon seeds are provided to guide the user towards the completion of the task. The hint may be related to the object or may be a generic hint.

Viral tasks include tasks that require a social interaction with a friend playing the game. In one embodiment a viral task may also be associated with an object. For example a viral task may be ask friends for wood boards where the wood boards are objects associated with the viral task. In another embodiment the viral task is not associated with an object e.g. Get 3 helping hands .

In one embodiment the rewards include a plurality of reward items and each reward item e.g. a coin has an associated reward icon e.g. image of a coin or coins symbolizing currency .

In one embodiment each template is associated with a theme and the tasks generated with the template relate to the underlying template theme. In one embodiment the theme is selected from a group consisting of animals cooking farming building gambling games of chance puzzles fighting battles strategy fantasy cops and robbers or cleaning but other themes are also possible.

It is noted that the embodiment illustrated in is exemplary. Other embodiments may utilize different fields additional fields fewer fields or the same fields arranged in a different fashion. The embodiment illustrated in should therefore not be interpreted to be exclusive or limiting but rather exemplary or illustrative.

The dynamic quest includes title fiction a plurality of tasks and rewards and and timer indicating how much time is left for finishing the quest. In one embodiment one icon is presented for each of the tasks. Some quests have a timer or deadline for finishing the quest and the player is given a fixed amount of time to finish all the tasks in the quest.

In one embodiment the player has the ability to abandon a quest if the player does not desire to complete the quest. A new quest may then be generated for the player. To avoid having a player abandoning too many quests the player gets charged with some penalty after abandoning a predetermined number of quests. In one embodiment the penalty gets bigger as the number of abandoned quests grows. In one embodiment the counter of abandoned quests may be reset or decreased after the player completes one or several quests. The penalty may be the loss of some game currency or some other game asset. In another embodiment a player that abandons a predetermined amount of quests gets charged a penalty for getting new quests.

Dynamic quests may be utilized not only with experienced users but also with beginner and intermediate users because quests may be dynamically generated at any time during the game. If the game does not have many crafted quests the use of dynamic quests enable players to stay interested in the game and play for a longer period of time.

The user game may include dynamic quests DQ e.g. DQ DQ DQ and DQ47 or crafted quests CQ e.g. CQ CQ CQ and CQ56 . The distributed game server includes a game engine and a quest engine . The game engine provides the computing resources required to play one or more online games by a plurality of users. The game engine is also referred to as the game server and more details are provided below with reference to .

Game data for the players is kept in a database and is accessible by at least the game engine and the quest engine . The game data includes a profile of the user experience level inventory of assets dynamic quests pending crafted quests pending etc.

The quest engine manages the operation of game quests including the creation monitoring deletion expiration and buffering of quests. The quest engine includes a quest manager a quest generator and several databases containing quest data. The quest manager manages the quest system and interfaces with the game engine the quest generator and quest databases. In addition the quest manager access different types of game related information such as game data and game status .

The game engine sends quest related requests to the request manager and may also access the quest data directly from the quest databases. The quest manager performs the quest related operations requested by the game engine and returns the appropriate data or status information to the game engine.

It is undesirable that the player waits a long time to obtain new dynamic quests after the previous quest is completed. In one embodiment a buffer defined to hold 3 or more quests is kept for each player. The quest databases include a quest buffer database a crafted quest database a dynamic quest database and a quest template database . The quest buffer database includes dynamically generated quests which are readily available in case a user requests a new quest. In one embodiment the buffered quests are placed in the database indexed by user which means that the system generates quests with each user in mind taking into account the game status the profile information of the user and the game history of the user. In one embodiment 3 quests are buffered per user but other number of buffered quests is also possible. Further the system may create a different number of buffered quests according to the level of the user or the past history of the user. For example the system may offer a larger number of quests for a very active user while offering fewer quests if any for players with low activity or with a beginner status.

In another embodiment the system creates a pool of quests that are made available to whichever user requests a new quest. This way it is easier to guarantee that quests are available for any requesting user. Of course the system may utilize a quest delivery algorithm to filter the buffered quests in order to assign quests that are not repetitive too difficult or too easy to the same user. For example the system may select one quest from the buffer and see if the selected quest matches a quest assignment criteria before delivering the quest to the player. If the criteria is met the quest is delivered. Otherwise the process is repeated with other quests extracted from the buffer until a quest meets the quest assignment criteria.

The crafted quest database includes crafted quests that have been created by game developers such as for example some quests created before the game is made available to players. Of course other additional crafted quests may be added to the crafted quest database over time.

The dynamic quest database contains as its name indicates dynamic quests generated by the system. In one embodiment dynamic quests are added to the system over time. The dynamic quests can be transferred from the quest buffer database or may be created by the quest generator and added to the dynamic quest database . In one embodiment the dynamic quests are deleted from the database a predefined amount of time after completion e.g. a week six months a year etc. and in another embodiment the completed dynamic quests are kept in the database.

The quest template database holds the quest templates utilized to generate dynamic quests. When the quest generator receives a request to provide a new dynamic quest the quest generator generates a new quest and places the new quest in the quest buffer database or in the dynamic quest database. The quest generator utilizes game history and other game related information such as user profile user social data etc. to generate the quests. More details are provided below with reference to regarding the methods for generating dynamic quests.

In addition the quest generator periodically checks the quest buffer database and creates new dynamic quests to add to the quest buffer database as needed. In one embodiment the quest buffer database includes three dynamic quests per user and the quest generator adds new dynamic quests to the quest buffer database so each user has three buffered dynamic quests.

In one embodiment when a problem is detected with the generation of dynamic quests e.g. a template used to generate quests has been found defective the quest generator performs a cleanup operation of the quest buffer database by deleting the suspect dynamic quests from the buffer. After the suspect dynamic quests are eliminated the quest generator proceeds to generate new dynamic quests in order to fill the buffer.

One of the advantages of generating dynamic quests in the distributed game server is that a malicious player does not have the opportunity to perform malicious operations on the quest generating system which may be the case if the quests were generated at the client. For example a malicious user may be able to generate easy quests that would produce a large amount of undeserved rewards. By generating the dynamic quests in the game server platform the opportunity for malicious users to generate improper dynamic quests is eliminated or greatly reduced.

In one embodiment the quest generator utilizes a caching mechanism to recycle dynamic quests in order to assign the same dynamic quests to multiple users. This reduces the amount of CPU required by the quest generator because the number of generated dynamic quests is reduced due to the reuse of some or all of the dynamic quests. In this embodiment a pool of dynamic quest is generated and then when the player requests a new quest the new dynamic quest is taken from the pool of dynamic quests. Of course the system keeps track of the quests already served to a particular user in order to avoid repetition.

It is noted that the embodiments illustrated in are exemplary. Other embodiments may utilize different elements or the functionality of one or more elements may be combined or distributed over a different number of components. The embodiments illustrated in should therefore not be interpreted to be exclusive or limiting but rather exemplary or illustrative.

In one embodiment the crafted quest data includes a list of crafted quests e.g. CQ6 CQ17 etc. that have been completed or that are in progress. The asset data includes the items owned by the player in the game such as building materials food housing spouse or other non player characters etc. The achievement data includes a list of accomplishments in the game such as experience level badges earned gifts received collections completed or in progress etc.

In one embodiment the player is able to perform the crafted quests and the dynamic quests simultaneously that is the user may alternate performing tasks of dynamic quests with task from crafted quests. For example in some games were the player has a Homestead the same Homestead is utilized for performing dynamic and crafted quests.

Further it is not desirable to have to fetch data from the templates when the user is playing the game. Therefore in one embodiment all the data required for performing the dynamic quest is kept in the dynamic quest data structure.

In one embodiment the dynamic quest includes the title one or more fictions the starting time the completion deadline if any one or more hints the template utilized to generate the dynamic quest the difficulty level one or more rewards one or more tasks etc. In one embodiment each task is associated with an object an action associated with that object an icon the number of times the task has to be repeated for completion of the requirement in the dynamic quest the number of times that the task has been completed e.g. 3 out of 20 the cost in virtual currency required to unlock the task e.g. how much would cost the player to unlock this task and consider it complete without having to actually perform the task etc. In addition some of the tasks may be viral tasks and may include viral information not shown such as date of the viral request friends that received the viral request etc.

It is noted that the embodiment illustrated in is exemplary. Other embodiments may utilize different fields or arrange the fields in different fashion. The embodiment illustrated in should therefore not be interpreted to be exclusive or limiting but rather exemplary or illustrative.

In one embodiment the data structure for holding a dynamic quest is defined in programming language as follows 

From operation the method continues to operation where one or more tasks are selected for inclusion in the new dynamic quest. In one embodiment the tasks are selected at random but other criteria may also be possible. In another embodiment a random generated quest is checked to determine if the task has been utilized recently to generate another dynamic quest for this player. If the task has been recently used the task is discarded and a new random task is generated. The process is repeated until the dynamic quest is completed with all the necessary tasks.

In one embodiment the quest manager checks whether the player has the ability to perform the selected tasks. If the player does not have the ability to perform these selected tasks e.g. the player does not have the ability to get an item to complete the task or does not have the required experience level the task is discarded and a new task is selected for the dynamic quest.

In one embodiment the quest generator checks that the new tasks have not been utilized for a predetermined number of most recent dynamic quests. For example the quest manager checks that a new task is not one of the last three tasks assigned to the player although a different number of tasks may be utilized in order to provide a different degree of variety.

From operation the method continues to operation where one or more viral tasks are generated from the template. As in the case of non viral tasks the system also checks that the generated viral task has not been assigned to the player recently in order to provide variety in the game.

Further in operation the difficulty of the selected tasks i.e. the difficulty of the dynamic quest is calculated in order to generate an appropriate reward which is appropriate for the difficulty of the dynamic quest. In one embodiment the difficulty of each task is calculated based on the cost in virtual currency to unlock the task without having to actually perform the task. For example if a task requires 4 horseshoes to unlock the difficulty will be based on the horseshoes.

In another embodiment the system tracks the completion rates of the assigned tasks as well as the abandonment rate for those tasks. The difficulty of each of the tasks is then calculated based on performance parameters such as completion rate timing required to completion abandonment rate order in which tasks are completed within the quest cost to unlock the task etc.

From operation the method continues to operation where the reward is selected based on the difficulty of the selected tasks. In addition the reward includes a certain degree of randomness to provide interest in the game so the player sometimes get larger rewards although sometimes the player may get smaller rewards.

After selecting the reward the method flows to operation where title and fiction are selected for the quest. In one embodiment the title and the fiction are selected at random. From operation the method continues to operation where the quest is either given to the player or placed in a buffer for later delivery when the player requests a new dynamic task.

From operation the method flows to operation where one or more template tasks are selected for inclusion in the new dynamic quest being created e.g. one of the tasks in quest template of . After selecting the tasks one or more template rewards are selected in operation . The selected template rewards are included in the generated dynamic quest.

From operation the method flows to operation where the dynamic quest is created in the online game. The created dynamic quests includes the selected one or more template tasks and the selected one or more template rewards. In one embodiment the operations of the method are executed by a processor.

After the quest manager receives the new dynamic quest from the quest generator the quest manager sends the dynamic quest to the game engine which makes the new dynamic quest available to the player.

When a quest times out e.g. the deadline to finish the quest has passed without the player completing the quest or when a player abandons the quest the game engine notifies the quest manager that the quest has timeout or has been abandoned. The quest manager logs that the quest has timed out or has been abandoned and proceeds to delete the dynamic quest from the database of pending dynamic quests . After the dynamic quest is being deleted the quest manager sends a confirmation to the game engine.

The quest manager checks periodically the availability of dynamic quests in the buffer. For each player the quest manager checks if there is additional space in the buffer for a new dynamic quest. For example in one embodiment each user has room in the buffer for three dynamic quests. Therefore if a user has less than three dynamic quests in the buffer the quest manager requests a new dynamic quest to the quest generator. In response the quest generator adds the new dynamic quest to the buffer of the player .

When the quest manager detects that a new quest is required e.g. because the number of quests is below a desired threshold because a player needs a quest because the buffer for the player has room for another quest or because a shared pool of quests has room for new quests etc. the quest manager sends a request for a new quest to quest generator . After the quest generator creates the new quest as described above the quest is added to the game which causes the game state to be updated with the new quest. For example the new quest is presented to the user or is placed in storage waiting for the proper time to present the new quest to the user such as when the user clicks in an object of the game e.g. a letter a non player character etc. that causes the presentation of the quest to the player.

It is noted that the embodiments illustrated in are exemplary and some operations may be omitted and some added so long as the functionality of generating dynamic quests is provided. Other embodiments may utilize different interfaces perform operations in a different order or utilize different data structures. The embodiments illustrated in should therefore not be interpreted to be exclusive or limiting but rather exemplary or illustrative.

When a player provides an input into the player s client device the client device may in response send a message via the communications network to the social networking server. The social networking server may update the player profile save the message to a database send messages to other players etc. The social gaming network may include a social graph database which stores player relationships social player profiles player messages and player social data.

The gaming servers host one or more gaming applications and perform the computations necessary to provide the gaming features to the players and clients. One or more gaming databases store data related to the gaming services such as the gaming applications and modules virtual gaming environment data player gaming session data player scores player virtual gaming profiles game stage levels etc. The gaming servers may utilize the data from the gaming databases to perform the computations related to providing gaming services for the players.

Quest Servers manage the quest system in the game including the creation tracking expiration abandonment and deletion of crafted quests and dynamic quests. A quest database includes the crafted and dynamic quests in use in the social gaming network. In addition a quest buffer database holds a buffer of dynamically generated quests available in order to provide quick service to players that requests new quests.

Each game server has access to one or more game databases for keeping game data. In addition a single database can store game data for one or more online games. Each game server may also include one or more levels of caching. Game data cache is a game data cache for the game data stored in game databases . For increased performance caching may be performed in several levels of caching. For instance data more frequently used is stored in a high priority cache while data requiring less access during a session will be cached and updated less frequently.

The number of game servers changes over time as the gaming platform is an extensible platform that changes the number of game servers according to the load on the gaming infrastructure. As a result the number of game servers will be higher during peak playing times and the number of game servers will be lower during off peak hours. In one embodiment the increase or decrease of bandwidth is executed automatically based on current line usage or based on historical data.

One or more social network management servers provide support for the social features incorporated into the online games. The social network management servers access social data from one or more social networks via Application Programming Interfaces API made available by the social network providers. An example of a social network is Facebook but it is possible to have other embodiments implemented in other social networks. Each social network includes social data and this social data or a fraction of the social data is made available via API . As in the case of the game servers the number of social network management servers that are active at a point in time changes according to the load on the infrastructure. As the demand for social data increases the number of social network management servers increases. Social network management servers cache user data in database and social data in database . The social data may include the social networks where a player is present the social relationships for the player the frequency of interaction of the player with the social network and with other players etc. Additionally the user data kept in database may include the player s name demographics e mail games played frequency of access to the game infrastructure etc.

It is noted that the embodiment illustrated in is an exemplary online gaming infrastructure. Other embodiments may utilize different types of servers databases APIs etc. and the functionality of several servers can be provided by a single server or the functionality can be spread across a plurality of distributed servers. The embodiment illustrated in should therefore not be interpreted to be exclusive or limiting but rather exemplary or illustrative.

One or more links couple a server or a client to network . In particular embodiments one or more links each includes one or more wired wireless or optical links . In particular embodiments one or more links each includes an intranet an extranet a VPN a LAN a WLAN a WAN a MAN a portion of the Internet or another link or a combination of two or more such links .

Each server may be a stand alone server or may be a distributed server spanning multiple computers or multiple datacenters. Servers may be of various types such as for example and without limitation quest server web server news server mail server message server advertising server file server application server exchange server database server or proxy server. Each server may include hardware software embedded logic components or a combination of two or more such components for carrying out the appropriate functionalities implemented or supported by server . For example a web server is generally capable of hosting websites containing web pages or particular elements of web pages. More specifically a web server may host HyperText Markup Language HTML files or other file types or may dynamically create or constitute files upon a request and communicate them to clients in response to Hypertext Transfer Protocol HTTP or other requests from clients . A mail server is generally capable of providing electronic mail services to various clients . A database server is generally capable of providing an interface for managing data stored in one or more data stores.

In particular embodiments one or more data storages may be communicatively linked to one or more severs via one or more links . Data storages may be used to store various types of information. The information stored in data storages may be organized according to specific data structures. In particular embodiments each data storage may be a relational database. Particular embodiments may provide interfaces that enable servers or clients to manage e.g. retrieve modify add or delete the information stored in data storage .

In particular embodiments each client may be an electronic device including hardware software or embedded logic components or a combination of two or more such components and capable of carrying out the appropriate functionalities implemented or supported by client . For example and without limitation a client may be a desktop computer system a notebook computer system a notebook computer system a handheld electronic device or a mobile telephone. A client may enable a network player at client to access network . A client may enable its player to communicate with other players at other clients . Further each client may be a computing device such as a desktop computer or a work station or a mobile device such as a notebook computer a network computer or a smart telephone.

In particular embodiments a client may have a web browser such as Microsoft Internet Explorer Google Chrome Or Mozilla Firefox and may have one or more add ons plug ins or other extensions. A player at client may enter a Uniform Resource Locator URL or other address directing the web browser to a server and the web browser may generate a Hyper Text Transfer Protocol HTTP request and communicate the HTTP request to server . Server may accept the HTTP request and communicate to client one or more Hyper Text Markup Language HTML files responsive to the HTTP request. Client may render a web page based on the HTML files from server for presentation to the user. The present disclosure contemplates any suitable web page files. As an example and not by way of limitation web pages may render from HTML files Extensible Hyper Text Markup Language XHTML files or Extensible Markup Language XML files according to particular needs. Such pages may also execute scripts such as for example and without limitation those written in Javascript Java Microsoft Silverlight combinations of markup language and scripts such as AJAX Asynchronous Javascript and XML and the like. Herein reference to a web page encompasses one or more corresponding web page files which a browser may use to render the web page and vice versa where appropriate.

Web browser may be adapted for the type of client where the web browser executes. For example a web browser residing on a desktop computer may differ e.g. in functionalities from a web browser residing on a mobile device. A user of a social networking system may access the website via web browser .

As example and not by way of limitation computer system may be an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server or a combination of two or more of these. Where appropriate computer system may include one or more computer systems be stand alone or distributed span multiple locations span multiple machines or reside in a cloud which may include one or more cloud components in one or more networks. The one or more computer systems may perform in real time or in batch mode one or more operations of one or more methods described or illustrated herein.

In particular embodiments computer system includes a processor memory storage an input output I O interface a communication interface and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement embodiments may be implemented with any suitable computer system having any suitable number of any suitable components in any suitable arrangement.

In particular embodiments processor includes hardware for executing instructions such as those making up a computer program. As an example and not by way of limitation to execute instructions processor may retrieve or fetch the instructions from an internal register an internal cache memory or storage decode and execute them and then write one or more results to an internal register an internal cache memory or storage . The present disclosure contemplates processor including any suitable number of any suitable internal registers where appropriate. Where appropriate processor may include one or more arithmetic logic units ALUs be a multi core processor or include one or more processors . Although this disclosure describes and illustrates a particular processor this disclosure contemplates any suitable processor.

In particular embodiments memory includes main memory for storing instructions for processor to execute or data that can be manipulated by processor . As an example and not by way of limitation computer system may load instructions from storage or another source such as for example another computer system to memory . Processor may then load the instructions from memory to an internal register or internal cache. During or after execution of the instructions processor may write one or more results which may be intermediate or final results to the internal register or internal cache. Processor may then write one or more of those results to memory . One or more memory buses which may each include an address bus and a data bus may couple processor to memory . Bus may include one or more memory buses as described below. One or more memory management units MMUs reside between processor and memory and facilitate accesses to memory requested by processor . Memory includes random access memory RAM .

As an example and not by way of limitation storage may include a Hard Disk Drive HDD a floppy disk drive flash memory an optical disc a magneto optical disc magnetic tape or a Universal Serial Bus USB drive or a combination of two or more of these. Storage may include removable or non removable or fixed media where appropriate. In particular embodiments storage includes read only memory ROM . Where appropriate this ROM may be mask programmed ROM programmable ROM PROM erasable PROM EPROM electrically erasable PROM EEPROM electrically alterable ROM EAROM or flash memory or a combination of two or more of these.

In particular embodiments I O interface includes hardware software or both providing one or more interfaces for communication between computer system and one or more I O devices. One or more of these I O devices may enable communication between a person and computer system . As an example and not by way of limitation an I O device may include a keyboard keypad microphone monitor mouse printer scanner speaker still camera stylus tablet touch screen trackball video camera another suitable I O device or a combination of two or more of these.

Communication interface includes hardware software or both providing one or more interfaces for communication between computer system and one or more other computer systems on one or more networks. As an example and not by way of limitation communication interface may include a network interface controller NIC or network adapter for communicating with an Ethernet or other wire based network or a wireless NIC WNIC or wireless adapter for communicating with a wireless network such as a WI FI network. As an example computer system may communicate with a wireless PAN WPAN such as for example a BLUETOOTH WPAN a WI FI network a WI MAX network a cellular telephone network such as for example a Global System for Mobile Communications GSM network or other suitable wireless network or a combination of two or more of these.

In particular embodiments bus includes hardware software or both coupling components of computer system to each other. As an example and not by way of limitation bus may include an Accelerated Graphics Port AGP or other graphics bus an Enhanced Industry Standard Architecture EISA bus a front side bus FSB a HYPERTRANSPORT HT interconnect an Industry Standard Architecture ISA bus an INFINIBAND interconnect a low pin count LPC bus a memory bus a Micro Channel Architecture MCA bus a Peripheral Component Interconnect PCI bus a PCI Express PCI X bus a serial advanced technology attachment SATA bus a Video Electronics Standards Association local VLB bus or another suitable bus or a combination of two or more of these. Bus may include one or more buses where appropriate. Although this disclosure describes and illustrates a particular bus this disclosure contemplates any suitable bus or interconnect.

Herein reference to a computer readable storage medium encompasses one or more non transitory tangible computer readable storage media possessing structure that may store a computer program or data. As an example and not by way of limitation a computer readable storage medium may include a semiconductor based or other integrated circuit IC such as for example a field programmable gate array FPGA or an application specific IC ASIC a hard disk an HDD a hybrid hard drive HHD an optical disc an optical disc drive ODD a magneto optical disc a magneto optical drive a floppy disk a floppy disk drive FDD magnetic tape a holographic storage medium a solid state drive SSD a RAM drive a Secure Digital card a Secure Digital drive or another suitable computer readable storage medium or a combination of two or more of these where appropriate. Herein reference to a computer readable storage medium excludes any medium that is not eligible for patent protection under 35 U.S.C. 101.

One or more embodiments can also be fabricated as computer readable code on a non transitory computer readable medium. Herein reference to software may encompass one or more applications bytecode one or more computer programs one or more executables one or more instructions logic machine code one or more scripts or source code and vice versa where appropriate.

The present disclosure encompasses all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend.

