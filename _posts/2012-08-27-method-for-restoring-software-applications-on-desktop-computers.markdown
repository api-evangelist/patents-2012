---

title: Method for restoring software applications on desktop computers
abstract: An automated method is provided for restoring software applications installed on a desktop computer. Information identifying an inventory of software applications resident on the computer is stored locally in a file on the computer. In response to a request to restore applications, the inventory is compared to a master library of known software applications, and those applications in the inventory that are found in the library are selected and downloaded onto the computer to complete the restoration process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09213534&OS=09213534&RS=09213534
owner: THE BOEING COMPANY
number: 09213534
owner_city: Chicago
owner_country: US
publication_date: 20120827
---
This application is a continuation of U.S. patent application Ser. No. 11 340 804 filed Jan. 25 2006 now U.S. Pat. No. 8 261 253 and entitled METHOD FOR RESTORING SOFTWARE APPLICATIONS ON DESKTOP COMPUTERS the disclosure of which is hereby incorporated by reference in its entirety.

This invention generally relates to maintenance of software applications especially those installed in desktop computers in networked systems and deals more particularly with a method for restoring applications previously installed on the computers.

Software applications resident on desktop computers in networked systems frequently require updates or restoration for a variety of reasons. The applications may become damaged or corrupted and components such as drivers may be occasionally lost. Moreover upgrades of hardware components of the computer may necessitate compatible software upgrades.

The problem of maintaining software applications for user clients in large network systems is problematic for system administrators since they do not always know which software applications and versions thereof are installed in each of the desktop computers in the network. Similarly administrators do not always know which of the computers may have received hardware changes requiring related software upgrades. Likewise when a client replaces a desktop computer the administrator is faced with the problem of determining which version of a software application should be installed on the new computer. This process of determining which software applications and versions should be restored on computers is time consuming and requires manual effort by system administrators.

Accordingly there is a need in the art for a method for restoring software applications on desktop computers which overcomes the deficiencies of the prior art discussed above. The present invention is directed toward satisfying this need.

In accordance with one aspect of the invention a method is provided for restoring software applications installed on a desktop computer comprising the steps of storing information representing an inventory of the applications installed on the computer providing a library of known software applications receiving a request to restore one or more applications on the computer and restoring those applications in the stored inventory that are present in the library.

The method of the present invention is implemented automatically and without manual intervention of a system administrator. Applications installed on each desktop computer are tracked on the computer in a local file that is used to support the detection process in which all the applications are detected and are stored for future reference.

The method of the present invention employs predefined scripted elements to examine each desktop client for all known applications that are installed on the client s computer. The installed application information is collected and stored in a database. When a request is received to restore applications onto the client the previously stored client application information is compared against a library of all known software applications. The application library is typically managed by an administrator who imposes rules on the use of each application in the library. The process restores all previously detected applications that are found within the software application library consistent with the imposed by the system administrator. The automatic detection and restoration process can be run from within a networked system or from a non networked environment such as a USB drive or a DVD.

In accordance with another aspect of the invention a method is provided for restoring software applications installed on a desktop computer comprising the steps of providing a library of software applications storing information on the computer identifying the software applications installed on the computer reading the stored information matching the applications identified by the information that has been with the applications in the library and installing software applications from the library based on resulting matches.

In accordance with still another aspect of the invention a method is provided for restoring software applications installed on a computer comprising the steps of generating a database representing an inventory of software applications previously installed on the computer generating a master library of software applications that include the software applications previously installed in the computer receiving a request to restore the previously installed applications on the computer querying the database to detect the applications previously installed in the computer comparing the detected applications with the applications in the master library and restoring applications on the computer based on the results of the comparison.

Various additional objects features and advantages of the present invention can be more fully appreciated with reference to the detailed description and accompanying drawings that follow.

The present invention relates to a method for restoring application software on desktop computers typically found in networked systems. As used herein desktop computers refers to personal computers such as those used in enterprise systems which may be non mobile desktop computers or portable laptop computers. Also as used herein the terms restoration or restoring refer to restoring or replacing current or later versions of software applications or components thereof. As will be discussed later in more detail the method of the present invention is preferably conducted automatically under software control with intervention by a system administrator on an as needed basis. For convenience the automated method of the present invention software express SE . The software express includes a detection and restoration component that functions to inventory applications on the desktop computer. This inventory is matched against a master library of applications. When a desktop computer is either reloaded or refreshed for a newer device the software express restores all previously detected applications that are found within the master library. This component of the software express effectively integrates detections installation and delivery of the managed master application library.

It should be noted here that although the following description explains the use of the SE in the context of a networked system the SE can also be run from a non networked environment such as from a USE drive or a DVD.

Referring to a master library of all known software applications is compiled at step . These applications comprise all of the software applications that may be used within the network and typically may include multiple versions of the same application. At step the SE stores all applications on the client s desktop in a database as the inventory that exists in the client s desktop at a particular point of time. This stored inventory information is later used in the restoration process. At step the database is updated as needed to reflect any new software applications that might be added to the client s computer. At the SE receives a request to refresh or restore applications previously existing on the desktop computer. The SE responds to the restore request at step by detecting the current applications on the desktop and then at step by comparing the detecting current applications with applications present in the master library. At step the SE selects the applications in the master library that are to be used in the desktop restoration. Finally at step the SE installs the selected applications from the master library onto the client s desktop.

The software application detection process used by the SE is shown in more detail in . As will be discussed below the SE uses predefined scripted elements to examine the desktop client for all known applications installed on the desktop. Once this data is collected it is placed in a SQI database. When the user or administrator needs to restore applications onto the client desktop they execute the SE detection restoration subcomponent. This subcomponent of the SE examines the previously recorded client application data and compares it against the master application library data. The application library data is managed by one or more administrators that place rules on each application item. For example if the SE detects application X version 1 2 3 4 5 but is instructed to restore only application X version 6 this is accomplished through the detection restoration subcomponent.

A client user controls a desktop computer which interfaces with the SE through a software express interface . The interface includes appropriate screen icons and menus allowing the client to interface with the SE. A master library of application files is resident in a server . Server is communicatively connected with a server in which the SE application inventory information is stored and server which facilitates local site hosting processes . The server is coupled through a client management interface and SE interface to other desktop computers in the network. Users or programmers developing new software applications submit a request through a hosting process to have the new application hosted in SE. The hosted application within the SE requires an application APP wrapper. The wrapper is built with key elements that support the detection process using a standard certification and testing process. During the alpha phase detection elements are added to the application script which is then tested and promoted into data. During the beta phase of the development the application is certified by the developer and then moved into production .

The SE includes a software update feature that provides automated application update and restoration support. The SE utilizes header commands within its APP wrapper and MSI Windows Installer format data stored on the workstation to identify installed applications. The SE update allows installed applications to be tracked on the computer in a local file. The local file can be used to support the detection process and aid in identifying application upgrades and restorations. Automated upgrades or restorations can be initiated from the SE graphical user interface GUI or from a command line interface.

The operation of the SE update feature will now be described in more detail. Every hosted application within the SE system requires an application APP wrapper. Each APP wrapper contains a header and script body. The APP header contains the basic information for the application and is the section most important to application detection within the SE software update process. The header commands within the APP wrapper may be used to support application detection on the computer. The header commands may include for example KeyId AltId ProductVersion KeyFile Uninstall and Reinstall.

In order to support application detection the APP wrappers must have at least a valid KeyId and ProductVersion command. The KeyId command is the primary identifier of the APP and should be defined with a valid GUID value before the application can be detected. In order to support the release of upgrades the ProductVersion command should have the proper application version set in accordance with standard versioning rules. The need for implementing the remaining commands is dependent on the type of application installation being wrapped and how that application is supported within the SE.

As the application is wrapped the APP file SE wrapper is configured to support the SE software update detection which is based on the following checks for the application on the client 

The above checks are applied to the following SE commands supported with in the header of the APP files Software Express wrapper .

Examples of each check type KeyFile KeyID Uninstall and Reinstall AltID and Check are provided below wherein the following terms shall have the following corresponding meanings.

KeyID This field is used to support the SE software update Detection that identifies an application using a GUID global unique identifier . This command is specific to the script header in the APP files. The command is used to identify the SE APP script for the SE detection restoration and upgrade process.

KeyFile The full path to the file directory or registry value that uniquely identifies the application is installed on the client. This identifier is used to detect whether an application is installed on the workstation. It is used to support the SE software update detection application inventory function. This command is set in the script header of an APP File.

Uninstall The uninstall command can be used in the header of the script to support the removal of the application from the desktop. It also enables the right click uninstall option in the graphical user interface when selecting an application or Go Uninstall from the Menu Bar . This command is specific to the script header in APP files.

Reinstall The Reinstall command can be used in the header of a script to control the action and mode of a script when that script is inserted into the Shopping Cart .

Check This header command is used for validation checks in APP FLD or APG files. It is useful for restricting or granting access to software based on any SE variable or workstation configuration. If the logic comparison s validates to true the user can access the object. If the logic comparison s fail the user cannot see the object through the user interface or install it using the installer command line utility. This optional command is specific to the script header in APP FLD and APG files. It should be noted here that the Check command can be optionally extended with an additional parameter that allows a text message to be displayed to the user. This can be used to display a message about the restriction and or direct the user to take further action. When the check command is used with the parameter displaying a text message that message will be appended to the message defined in the TIP header. If the TIP header is not defined then the message from the check command will be used.

ProductVersion The value of the ProductVersion is the version of the product in string format. The format of the string is as follows major.minor.build The first field is the major version and has a maximum value of 255. The second field is the minor version and has a maximum value of 255. The third field is called the build version or the update version and has a maximum value of 65 535. It should be noted here that the Windows Installer uses only the first three fields of the product version. If a fourth field is included the Windows installer ignores the fourth field.

In the case of MSI supported installations if the application installation is a self contained MSI then KeyId and ProductVersion commands should be set in the header. The KeyId command should be set to the MSI Product Code and the ProductVersion command set to the MSI 3 digit version number. The SE software update will automatically link the KeyId GUID to any installed MSI product codes with the same GUID values. The ProductVersion is used to match the wrapper with the correct MSI version number and identify if the installed version earlier later or the same.

This Example shows the attributes needed in the script header to enable an application to be detected on the client by the SE update software component. In this script the KeyID attribute is used from the MSI Product Code as the signature to detect if the application is installed on the client.

In this example the uninstall command also uses the Product Code to determine if the application is installed on the client. When the SE software update component is ran it will evaluate the uninstall command and if it returns true which it should if the application is installed the application will show up in the Available Items tab in the SE update software cart.

Once the script has the necessary header information and is moved into a SE production folder at the next inventory cycle the script header information will be read and placed in the master application list for that site. The location of the master application list Detect.Dat file is specified in the serverfile entry in the xSetup.ini and Installer.ini under the Detect section.

This example shows the attributes used in the script header to enable this application to be detected on the client by the SE update software component. In this example the Uninstall attribute is used to detect the application signature on the client.

In the script header below the Uninstall line is checking a variable UnistChk to see if the registry value stored in the variable is present on the client PC s registry. If the registry value exists in the client s registry then a state of True is returned to the system and will enable this application to be included in the SE update software process. This scripts application identifier is the path to the 13B81D14 BE13 438E 935A 5089B332670C registry key on the client.

In this example the uninstall command uses the Product Code to determine if the application is installed on the client. When the SE update software component is run it will evaluate the uninstall command and if it returns true which it should if the application is installed the application will show up in the Available Items tab in the SE update Software Cart.

In the case of non MSI supported installations along with the KeyId and ProductVersion Commands at least one valid Uninstall Reinstall KeyFile command must be set. The Uninstall Reinstall and KeyFile commands contain the ability to check for file directory or registry values to determine if the application is installed. Only one of these commands is necessary to detect the installation of an application. If the SE APP wrapper supports uninstall or reinstall then the user need not take further action. If the wrapper does not support uninstall or Reinstall then the user must use the KeyFile command. In any event when multiple versions of the same application are available the test used within the commands should be specific enough to isolate the application version if the test is not specific enough then the application wrapper may not be able to support the upgrade of the application.

This Example shows the attributes needed in the script header to enable an application to be detected on the client by the SE update software component in this script the KeyFile attribute is used in conjunction with the KeyID attribute to detect the application on the client. Note that if the application being wrapped is a MSI Microsoft Windows Installer application the MSI product code GUID must be used as the KeyID in the script for that application.

In the example shown below the keyfile identifier is the path to the C Program Files AppTest App 1 TEST.DLL file on the client. Because the Test.DLL is not a MSI application it is necessary to also include a KeyID GUID in the script header.

Once the script has the necessary header information and is moved into an SE production folder at the next inventory cycle the script header information will be read and placed in the master application list for that site. The location of the master application list Detect.Dat file is specified in the serverfile entry in the xSetup.ini and Installer.ini under the Detect section.

The following are examples showing use of the KeyFile as a detection method. Note here that Keyfile should only be used if the script does not contain an Uninstall command.

It should be noted here that preferably the method should be selected that provides the highest accuracy of determining if the value exists on the workstation that identifies a particular application is installed on the workstation. SE variables should be used in the KeyFile path statement if the application file being used is in the C WINNT directory then the WinDir variable should be used to account for change in the directory structure going from Windows 2000 to Windows XP.

This example shows which attributes are used in the script header to enable the application to be detected on the client by the SE update software component. In this example the Uninstall attribute is used in conjunction with the KeyID attribute to detect the application signature on the client.

The script header information below shows the Uninstall line checks for a string value on the client PC s registry. If the registry value exists in the client s registry then a state of True is returned to the system and will enable this application to be included in the Software Express update software process. This scripts application identifier is the path to the The Example APP 4 is installed string value in the Testing value registry key on the client PC.

In this example the uninstall command uses a registry value to determine if the application is installed on the client. When the SE update software component is run if there is an associated KeyID in the script header and the uninstall command returns true which it should if the application is installed the application will show up in the Available items tab in the SE update Software cart.

If the wrapper is supporting an upgrade to an existing APP or MSI installation the user should include an AltId command for each previous KeyId or unique MSI Product Codes. If the MSI product code is used it is not necessary to retain arty APP wrappers for the previous application versions since the workstation will be queried directly for that MSI product code.

This example below shows the attributes in the script header that enables a previous version of an application to be detected on the client using the SE update software component and offer an upgrade to the newer version of that application.

In this example the AltId attribute is used to detect the previous version of the application signature on the client. For this example if the MyApp Ver1.0 is installed on the client and a newer version MyApp Ver2.0 has just been released into production and you want to offer MyApp Ver2.0 to those users you would need to add the AItID in the header of the new script which referenced the KeyID of the previous version.

When users run the SE update software component and selects the upgrade option they should have the newer application available for them to install. It should be noted here that there may be circumstances when the upgrade can show up in the Restricted Items tab if the client does not meet the necessary criteria for example if there s a restriction placed on the application OS Global Group License etc. .

To satisfy a requirement that SE detects applications that are not in hosted in SE and have the ability to display information to users about those detected applications the following example shows what information has to be present in the script header to accomplish the task.

In this example shown below header information is used to display a message to the user using the Check command.

SE utilizes the Check command to restrict or grant access to applications that are host in the interface if the user or workstation meets the criteria of the check. Scripts are provided for applications in SE as well as for applications not in SE. The format for the Check command can be structured differently for scripts detecting applications not in SE and the name of the .app will be different for scripts that only contain message text information Message.app .

The following are examples of the use of KeyFile as a detection method. Note here that Keyfile should only be used if the script does not contain an Uninstall command.

It should be noted here that the method selected for use should that which provides the highest accuracy of determining if the value exists on the workstation that identifies a particular application is installed on the workstation. SE variables in the KeyFile path statement should nbe used. If the application file being used is in the C WINNT directory then the WinDir variable should be used to account for change in the directory structure going from Windows 2000 to Windows XP.

After running the software update option if the user uninstalls the application and runs the SE Software Update option information about that application will show up in the Software Restore tab. This information is available because the application is in the list contained in the local.dat file but has not been detected on the client.

Any applications showing in the Software Restore tab are available for the user to install. Clicking on the Add To Cart button will insert all applications displayed on that tab into the SE Software Cart.

Clicking on the start button will start the install process of any applications added to the SE Software Cart. The Software Cart is the same cart that is used to install applications from the SE GUI.

The Software Restores window displays any applications that need to be restored to the desktop computer.

The Restricted Restores window displays any applications that need to be restored to the desktop computer. However these applications can not be installed on the user s desktop because the application is restricted for install or the application does not support the user s Operating System.

The Unavailable Items window displays a list of applications found on the user s desktop computer. These are applications that have been detected on the user s computer but are not associated to a SE application install.

Every SE instance must have a correctly configured configuration file. Settings within the configuration file depict what options are available within the SE instance. Before SE software updates can be turned on for an instance a master detection file must be built and distributed to each SE instance. The master detection file is a filtered list of APP headers built from a database that contains all of the known APP headers within the SE. The location of the master list is be specified in the server field of the configuration file. To support restoration the configuration file must have the local field updated with a path to a filename on the computer. The SE software update system will write to this file location every time an application detection process is run updating the file with the latest details about installed applications found within the master list and any applications installed from MSI.

The table shown below provides an illustration of the Detect section and the attributes that should to be added to the xSetup.ini and Installer.ini to support the SE software update function.

Although this invention has been described with respect to certain exemplary embodiments it is to be understood that the specific embodiments are for purposes of illustration and not limitation as other variations will occur to those of skill in the art.

