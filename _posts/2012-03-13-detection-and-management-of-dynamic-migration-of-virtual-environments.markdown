---

title: Detection and management of dynamic migration of virtual environments
abstract: A mechanism is provided to detect that a dynamic migration of a virtual environment is in progress or has been executed during a hardware or software scan without requiring instrumentation of applications running within the virtual machine. The mechanism relies on a particular sequencing and usage of application programming interfaces and commands that scanning technology provides, associated with the modularity of the scans and on the external virtual machine enabler component running on the host. The mechanism may detect a dynamic migration and take proper actions based on the system configuration. The actions may include discarding the output of the scan executed across a dynamic migration and repeat the scan. The actions may also include notifying the initialization subsystem of the non-migration-safe application to execute a script or program to address migration safety issues. One particular program or script may be an agent ID regeneration program or script.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08402462&OS=08402462&RS=08402462
owner: International Business Machines Corporation
number: 08402462
owner_city: Armonk
owner_country: US
publication_date: 20120313
---
This application is a continuation of application Ser. No. 12 348 396 Filed Jan. 5 2009 status pending.

The preset application relates generally to an improved data processing apparatus and method and more specifically to efficient detection and management of dynamic migration of virtual environments.

Logical partitioning LPAR is the ability to make a server run as if it were two or more independent servers. When one partitions a server one divides the resources on the server into subsets called logical partitions. Processors memory and input output devices are examples of resources that can be assigned to logical partitions. A logical partition runs as an independent logical server with the processor memory and I O resources allocated to it. Examples of the kinds of software that can be installed and run on logical partitions include the AIX i5 OS and Linux operating systems and Virtual I O Server software AIX and i5 OS axe trademarks of International Business Machines Corporation in the United States other countries or both LINUX is a trademark of Linus Torvalds in the United States other countries or both.

Although each logical partition may act as an independent server the logical partitions on a physical server can share some kinds of resources with each other. The ability to share resources among many logical partitions allows increased resource utilisation on the server by shifting the server resources to where they are needed.

A processor is a device that processes programmed instructions. The more processors assigned to a logical partition the greater the number of concurrent operations the logical partition can run at any given time. Dedicated processors are whole processors that are assigned to a single partition. Shared processors are physical processors whose processing capacity is shared among multiple logical partitions. The shared processor pool includes all processors on the server that are not dedicated to specific logical partitions. Each logical partition that uses the shared processor pool is assigned a specific amount of processor power from the shared processor pool. If the logical partition needs more processor power than its assigned amount the logical partition is set by default to use the unused processor power in the shared processor pool. The amount of processor power that the logical partition can use is limited only by the virtual processor settings of the logical partition and the amount of unused processor power available in the shared processor pool.

In this case the server firmware provides virtualization of resources to the operating systems partitions running on the server. Visualization is an abstraction layer that allows multiple virtual environments possibly with heterogeneous operating systems to run in isolation side by side on the same physical machine. Virtualization decouples the physical hardware from the operating systems and hides physical information and resources. Each partition or virtual environment runs as if it is executing on its own dedicated machine even though the physical resources are virtualized and may be assigned from a shared pool of resources. For this reason a partition or virtual environment may also be referred to as a virtual machine VM . Therefore the terms logical partition virtual environment and virtual machine may be used interchangeably in this disclosure.

In some visualization technology resources may be dynamically allocated and de allocated Also some virtualization technology includes dynamic migration which may dynamically move live running virtual machines from one host to another while maintaining continuous service availability. Dynamic migration may move a virtual environment from one time slice of a processor to another from one processor to another from one blade to another within the same server chassis or even from one server chassis to another with visualization the idea of what is a host depends on how the hardware resources are partitioned.

The abstraction and decoupling combined with dynamic migration may introduce new scenarios in customer environments. For example dynamic migration of virtual environments without suspending or stopping the virtual machine may pose new challenges in current system management processes. In fact running in a virtual environment it may be difficult if not impossible to detect that a dynamic migration is in progress or has been executed.

Most applications can simply stay unaware of the ongoing migration and thus run safely in this scenario. However some management applications can neither ignore nor easily solve associated problems. For instance applications that rely on the virtual machine or host capacity are not migration safe. As an example for a licensing control application a hardware scan can provide inconsistent capacity information if such a scan happens across a dynamic migration. Such a scenario may lead to an incorrect licensing computation.

In one illustrative embodiment a method in a data processing system is provided for detecting and managing dynamic migration of virtual environments. The method comprises retrieving a host component identifier to form a first retrieved host component identifier performing a physical environment scan retrieving the host component identifier to form a second retrieved host component identifier and responsive to the second retrieved host component identifier being different from the first retrieved host component identifier detecting a dynamic migration of a virtual environment and performing at least one action to manage the dynamic migration of the virtual environment.

In other illustrative embodiments a computer program product comprising a computer useable or readable medium having a computer readable program is provided. The computer readable program when executed on a computing device causes the computing device to perform various ones and combinations of the operations outlined above with regard to the method illustrative embodiment.

In yet another illustrative embodiment a system apparatus is provided. The system apparatus may comprise one or more processors and a memory coupled to the one or more processors. The memory may comprise instructions which when executed by the one or more processors cause the one or more processors to perform various ones and combinations of the operations outlined above with regard to the method illustrative embodiment.

These and other features and advantages of the present invention will be described in or will become apparent to those of ordinary skill in the art in view of the following detailed description of the example embodiments of the present invention.

The illustrative embodiments provide a mechanism for efficient detection and management of dynamic migration of virtual environments. The illustrative embodiments may be utilized in many different types of data processing environments including a distributed data processing environment a single data processing device or the like. In order to provide a context for the description of the specific elements and functionality of the illustrative embodiments is provided hereafter as an example environment in which aspects of the illustrative embodiments may be implemented. While the description following will focus primarily on a single data processing device implementation this is only an example and is not intended to state or imply any limitation with regard to the features of the present invention.

Referring now to the drawings and in particular to there is depicted a block diagram of a data processing system with which aspects of the illustrative embodiments may be utilized. As shown data processing system includes processor cards . Each of processor cards includes a processor and. a cache memory. For example processor card contains processor and cache memory and processor card contains processor and cache memory

Processor cards are connected to main bus . Main bus supports a system planar that contains processor cards and memory cards . The system planar also contains data switch and memory controller cache . Memory controller cache supports memory cards that include local memory having multiple dual in line memory modules DIMMs .

Data switch connects to bus bridge and bus bridge located within a native I O NIO planar . As shown bus bridge connects to peripheral components interconnect PCI bridges and via system bus . PCI bridge connects to a variety of I O devices via PCI bus . As shown hard disk may be connected to PCI bus via small computer system interface SCSI host adapter . A graphics adapter may be directly or indirectly connected to PCI bus . PCI bridge provides connections for external data streams through network adapter and adapter card slots via PCI bus .

An industry standard architecture ISA bus connects to PCI bus via ISA bridge . ISA bridge provides interconnection capabilities through NIO controller having serial connections Serial and Serial . A floppy drive connection keyboard connection and mouse connection are provided by NIO controller to allow data processing system to accept data input from a user via a corresponding input device. In addition non volatile RAM NVRAM which connects to ISA bus provides a non volatile memory for preserving certain types of data from system disruptions or system failures such as power supply problems. A system firmware is also connected to ISA bus for implementing the initial Basic Input Output System BIOS functions. A service processor connects to ISA bus to provide functionality for system diagnostics or system servicing.

Each operating system OS is stored on hard disk which may also provide storage for additional application software for execution by data processing system . NVRAM is used to store system variables and error information for field replaceable unit FRU isolation. During system startup the bootstrap program loads the server firmware and initiates a virtual environment container for each virtual environment in which an operating system and one or more applications execute. A container is a class or data structure that implements predefined rules that specify a runtime environment. These rules may include for example security concurrency life cycle management transaction deployment and other services. A container may provide application programming interfaces APIs for interacting with the operating system and hardware.

To load the operating systems the bootstrap program first locates an operating system kernel type from hard disk loads the OS into memory and jumps to an initial address provided by the operating system kernel. Typically each operating system is loaded into random access memory RAM of its respective virtual environment as partitioned and allocated by the visualization technology within the server firmware. Once loaded and initialized each operating system controls the execution of programs and may provide services such as resource allocation scheduling input output control and data management.

The illustrative embodiment may be embodied in a variety of data processing systems utilizing a number of different hardware configurations and software such as bootstrap programs and operating systems. The data processing system may be for example a stand alone system or part of a network such as a local area network LAN or a wide area network WAN .

Dynamic migration of virtual environment functionality exists within server firmware software and server firmware software . Virtual environment includes an operating system and at least one application running in a virtual environment container on server firmware software and hardware platform . Virtual environment includes an operating system and at least one application running in a virtual environment container on server firmware software and hardware platform . Dynamic migration functionality allows virtual environment to migrate to server on hardware platform .

Many applications can simply stay unaware of an ongoing migration however other applications can neither ignore nor easily solve problems that may occur due to dynamic migration from one server environment to another. For example applications that rely on the host capacity e.g. computation power are not migration safe. As a specific example for a licensing control application the hardware scan may provide inconsistent capacity if such a scan happens across a dynamic migration. Such a scenario may lead to incorrect licensing computation.

One way to address this issue is to instrument each of the applications that are not migration safe to intercept specific events that the virtualization technology may trigger inside the virtual machine container. Thus these events may alert about an ongoing migration. However this instrumentation must be done for every virtualization technology and besides being a slow and computationally intensive process not every virtualization technology provides an instrumentation software development kit SDK therefore such instrumentation may be difficult to implement.

In accordance with an illustrative embodiment a mechanism is provided to detect that a dynamic migration of a virtual environment is in progress or has been executed during a hardware or software scan without requiring instrumentation of applications running within the virtual machine. The mechanism relies on a particular sequencing and usage of application programming interfaces APIs and commands that scanning technology provides associated with the modularity of the scans and on the external virtual machine enabler component running on the host. Examples of scanning technologies include Tivoli Common Inventory Technology CIT for example. In the depicted example an external component runs on the host and not inside the VM.

The mechanism may detect a dynamic migration and take proper actions based on the system configuration. The actions may include discarding the output of the scan executed across a dynamic migration and repeat the scan. The actions may also include notifying the initialization subsystem of the non migration safe application to execute a script or program to address migration safety issues. One particular program or script may be an agent identifier ID regeneration program or script.

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable radio frequency RF etc.

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The illustrative embodiments are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to the illustrative embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

Operation begins and the virtual machine motion safe scan retrieves the host component identifier ID block . The host component ID contains the list of all and only the real system information such as for example machine serial number type and model. The retrieval of the host component ID is an extremely quick scan compared to the regular full scan thanks to the modularity of the scan engine. Thereafter the virtual machine motion safe scan performs the desired hardware OS scan block . Then the virtual machine motion safe scan retrieves the host component ID again block .

The scan then determines whether the host component ID retrieved in block is different from the host component ID retrieved in block block . If the retrieved host component IDs are not different then operation ends. Otherwise if the retrieved host component IDs are different in block the scan returns a specific error block such as RC INCONSISTENT OUTPUT and generates output block . Optionally and not shown the virtual machine motion safe scan may send a signal such as for example SIGHUP to the calling application.

Thereafter the virtual machine motion safe scan determines whether to repeat the scan block . The virtual machine motion safe scan may receive in the call from the calling application a Boolean parameter that identifies whether to repeat the scan if virtual machine motion is detected. Thus the determination in block may simply examine the parameter e.g. RepeatScanIfVMotionDetected to determine whether to repeat the scan. If the virtual machine motion safe scan determines to repeat the scan operation returns to block to retrieve the host component ID.

If the virtual machine motion safe scan determines to not repeat the scan the virtual machine motion safe scan determines whether to notify the non migration safe application that migration of a virtual machine has been detected block . The virtual machine motion safe scan may receive in the call from the calling application a Boolean parameter that identifies whether to notify if virtual machine motion is detected. Thus the determination in block may simply examine the parameter e.g. NotifyIfVMotionDetected to determine whether to notify the non migration safe application. If the virtual machine motion safe scan determines to not notify the application operation ends. If the scan determines to notify the non migration safe application in block the scan triggers an agent ID regeneration process block which will be described in further detail below with reference to . The scan may also provide additional information like the host component ID retrieved in block date time etc. Thereafter operation ends.

Then the agent ID regeneration process determines whether an exit condition exists block . An exit condition may be for example a specific instruction or command to end the agent ID regeneration process. If an exit condition does not exist the agent ID regeneration process determines whether a hardware OS scan has detected a virtual machine migration and thus triggered agent ID regeneration block . If a HW OS scan has not triggered agent ID regeneration operation returns to block to determine whether an exit condition exists.

If a HW OS scan has triggered the agent ID regeneration process in block the agent ID regeneration process executes the program script block . Then the agent ID regeneration process notifies the management infrastructure to which the agent belongs block . Thereafter operation returns to block to determine whether an exit condition exists.

In one example scenario a license management application an agent is an example of a non migration safe application. A license management application like Tivoli License Manager from IBM is typically made up of a server component where all collected metrics about license usage are aggregated and several agents which run on all the operating systems where license metrics have to he collected. The agent is the part of the license management application which collects metrics and the management infrastructure is the server part of the license management application which receives all collected license metrics from the different agents. As some modern and sophisticated licensing models are bound to the capacity of the machine e.g. for a given software you pay license fees depending on the number of processors of the machine on which the software runs it is imperative to support such models that a licensing agent non migration safe application is able to detect such altered conditions and communicate e.g. thru the notification of an occurred agent ID regeneration process them to the licensing server or management infrastructure .

Returning to block if an exit condition does exist the agent ID regeneration process deregisters the program script block . Thereafter operation ends.

Thus the illustrative embodiments provide mechanisms to detect that a dynamic migration of a virtual environment is in progress or has been executed during a hardware or software scan without requiring instrumentation of applications running within the virtual machine. The mechanism relies on a particular sequencing and usage of application programming interfaces and commands that scanning technology provides associated with the modularity of the scans and on the external virtual machine enabler component running on the host. The mechanism may detect a dynamic migration and take proper actions based on the system configuration.

The actions may include discarding the output of the scan executed across a dynamic migration and repeat the scan. The actions may also include notifying the initialization subsystem of the non migration safe application to execute a script or program to address migration safety issues. One particular program or script may be an agent ID regeneration program or script.

The implementation described above with respect to the illustrative embodiments has a twofold benefit because it prevents an incorrect behavior of the application e.g. bad licensing aggregation that is performing the HW OS scan and also propagates the detection which allows other applications to take proper action. The implementation does not require instrumentation of the specific application against a specific virtualization technology but leverages underlying capabilities modularity VM enabler component host guest communication information publishing of the hardware scanning solution e.g. CIT .

A similar approach can be foreseen for application visualization technologies like for example workload partition WPAR or the detection of other scenarios that cannot be supported due to isolation and unavailable information naming in a virtual environments such as VM cloning.

As noted above it should be appreciated that the illustrative embodiments may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In one example embodiment the mechanisms of the illustrative embodiments are implemented in software or program code which includes but is not limited to firmware resident software microcode etc.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

