---

title: Rule authoring for events in a grid environment
abstract: A rules engine can be initialized as part of an object grid, wherein the rules engine is executable code executing using computer resources. The rules engine updates a business mapper. The rules engine receives a business rule definition to form a business rule. The rules engine determines business terms are present in the business rule. The rules engine converts the business terms to technical terms based on the business mapper, responsive to a determination that business terms are present. The rules engine determines that the business rule comprises a temporal rule. The rules engine receives rule criteria, wherein the rule criteria is at least one selected from the group consisting of frequency, delay and timing dependency, responsive to the determination that the business rule is a temporal rule. The rules engine stores the business rule to the rules engine. The rules engine publishes the business rule to a publish-subscribe topic.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09361648&OS=09361648&RS=09361648
owner: International Business Machines Corporation
number: 09361648
owner_city: Armonk
owner_country: US
publication_date: 20120430
---
This application is related to commonly assigned and co pending U.S. patent application Ser. No. 12 899 637 entitled RULE AUTHORING FOR EVENTS IN A GRID ENVIRONMENT filed on Oct. 7 2010 and hereby incorporated by reference.

The present invention relates generally to a computer implemented method for defining data processing system rules based on business terms. More specifically the present invention relates to creating rules in a networked environment in a scalable manner.

Modern uses of networked computers leverage grid computer resources that can rely on plural Java virtual machines to provide a distributed cache of objects including executable objects and data only objects. Java is a trademark of Oracle Corp. in the United States other countries or both.

The operation of the grid is controlled by for example objects described using the Java programming language. Java relies on a grammar reserved words and style that are generally unfamiliar among business people. The gap in knowledge among business people forces them to rely on specialized staff to explain the content of such objects as well as modify objects to address business goals. The reliance on technical terms in such objects can create delays in an organization s staff in revising objects to address changing business needs since two people typically are needed to make adjustments.

A technical term is a word defined in technical dictionaries an error message reserved word or mnemonic phrase. Such terms can be defined in programming language specifications or industry standards within engineering mechanical or scientific industries. On the other hand a business term is an expression of status that describes business conditions risks or opportunities in a language that can be spoken. A business term can be any part of speech or phrase. A business term may include trademarks as well as proper nouns such as personal names places and the like. Some business terms may correspond to or map to technical terms. Some business terms may be identical to the technical term with which it corresponds. However a more common arrangement is that a technical term is different from the business term to which it corresponds.

A way to harmonize the disparate terminologies as well as assure robust operation of responses to changing business environment could be helpful.

The present invention provides a computer implemented method to install a rule to an object grid. A rules engine can be initialized in an object grid wherein the rules engine is computer resources executing executable code. The computer through use of its resources executes the rules engine to update a business mapper. The rules engine receives a business rule definition to form a business rule. The rules engine determines that business terms are present in the business rule. The rules engine converts the business terms to technical terms based on the business mapper responsive to a determination that business terms are present. The rules engine determines that the business rule comprises a temporal rule. The rules engine receives rule criteria wherein the rule criteria is at least one selected from the group consisting of frequency delay and timing dependency responsive to the determination that the business rule is a temporal rule. The rules engine stores the business rule to the rules engine. The rules engine publishes the business rule to a publish subscribe topic.

With reference now to the figures and in particular with reference to a block diagram of a data processing system is shown in which aspects of an illustrative embodiment may be implemented. Data processing system is an example of a computer in which code or instructions implementing the processes of the present invention may be located. In the depicted example data processing system employs a hub architecture including a north bridge and memory controller hub NB MCH and a south bridge and input output I O controller hub SB ICH . Processor main memory and graphics processor connect to north bridge and memory controller hub . Graphics processor may connect to the NB MCH through an accelerated graphics port AGP for example.

In the depicted example local area network LAN adapter connects to south bridge and I O controller hub and audio adapter keyboard and mouse adapter modem read only memory ROM hard disk drive HDD CD ROM drive universal serial bus USB ports and other communications ports and PCI PCIe devices connect to south bridge and I O controller hub through bus and bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash binary input output system BIOS . Hard disk drive and CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. A super I O SIO device may be connected to south bridge and I O controller hub .

An operating system runs on processor and coordinates and provides control of various components within data processing system in . The operating system may be a commercially available operating system such as Microsoft Windows XP. Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both. An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system .

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as hard disk drive and may be loaded into main memory for execution by processor . The processes of the present invention can be performed by processor using computer implemented instructions which may be located in a memory such as for example main memory read only memory or in one or more peripheral devices.

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory and the like may be used in addition to or in place of the hardware depicted in . In addition the processes of the illustrative embodiments may be applied to a multiprocessor data processing system.

In some illustrative examples data processing system may be a personal digital assistant PDA which is configured with flash memory to provide non volatile memory for storing operating system files and or user generated data. A bus system may be comprised of one or more buses such as a system bus an I O bus and a PCI bus. Of course the bus system may be implemented using any type of communications fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communication unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. A memory may be for example main memory or a cache such as found in north bridge and memory controller hub . A processing unit may include one or more processors or CPUs. The depicted example in is not meant to imply architectural limitations. For example data processing system also may be a tablet computer laptop computer or telephone device in addition to taking the form of a PDA.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a method. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The illustrative embodiments permit technical descriptions of objects to be understandable and changeable by business people. Further temporal rules may be implemented in a rules engine to permit historical events to influence operation of data processing systems to improve for example business continuity and or profit. A rules engine is a virtual machine that in response to receiving an event tests the event against business rules in order to determine whether to further process steps including for example modifying working memory transmitting an event to an object grid or making a report to a user interface. An example of a rules engine is IBM WebSphere ILOG JRules or Java rules engine a business rule management system BRMS that enables both business and IT users to write and maintain the logic applied by applications that automatically implement decisions. In the case of Jrules the virtual machine may be a Java virtual machine JVM . WebSphere is a trademark of IBM.

An object grid client has a table that associates the names of incoming events with the specific rules engines that have subscribed to receive the data within that event. For example object grid client relies on name table to lookup a rules engine name to which to direct the event. After obtaining a rules engine name the object grid client can look up a partition corresponding to the rules engine name in hash table . The partition is a unique identifier of the partition within the object grid. The partition may include an IP address. In addition the partition may include an identifier of which partition among several at the IP address is the specific one hosting the rules engine.

Next the object grid client may rely on object request broker ORB to form the partition and data into an Internet Inter ORB Protocol IIOP message. The IIOP message is an event that carries the event name and the data object. However in addition the IIOP includes the rules engine name which is used by server ORBs to route the IIOP message to the correct rules engine.

At the center of a Java run time environment is the JVM which supports all aspects of Java s environment including its architecture security features mobility across networks and platform independence.

The JVM is a virtual computer that is a computer that is specified abstractly. Nevertheless the JVM relies on computer resources such as working memory which may be a pool of physical memory such as main memory of . The specification defines certain features that every JVM must implement with some range of design choices that may depend upon the platform on which the JVM is designed to execute. For example all JVMs must execute Java bytecodes and may use a range of techniques to execute the instructions represented by the bytecodes. A JVM may be implemented completely in software or somewhat in hardware. This flexibility allows different JVMs to be designed for mainframe computers and PDAs.

The JVM is the name of a virtual computer component that actually executes Java programs. Java programs are not run directly by the central processor but instead by the JVM which is itself software running on the processor. Examples of Java programs include rules engine application code and object grid agent . The JVM allows Java programs to be executed on a different platform as opposed to only the one platform for which the code was compiled. Java programs are compiled for the JVM. In this manner Java is able to support applications for many types of data processing systems which may contain a variety of central processing units and operating systems architectures. To enable a Java application to execute on different types of data processing systems a compiler typically generates an architecture neutral file format. The compiled code is executable on many processors given the presence of the Java run time system. The Java compiler generates bytecode instructions that are nonspecific to a particular computer architecture. A bytecode is a machine independent code generated by the Java compiler and executed by a Java interpreter. A Java interpreter is part of the JVM that alternately decodes and interprets a bytecode or bytecodes. These bytecode instructions are designed to be easy to interpret on any computer and easily translated on the fly into native machine code. Bytecodes may be translated into native code by a just in time compiler or JIT.

A JVM loads class files and executes the bytecodes within them. The class files are loaded by a class loader in the JVM. The class loader loads class files from an application and the class files from the Java application programming interfaces APIs which are needed by the application. The execution engine that executes the bytecodes may vary across platforms and implementations.

One type of software based execution engine is a just in time compiler. With this type of execution the bytecodes of a method are compiled to native machine code upon successful fulfillment of some type of criteria for jitting a method. The native machine code for the method is then cached and reused upon the next invocation of the method. The execution engine may also be implemented in hardware and embedded on a chip so that the Java bytecodes are executed natively. JVMs usually interpret bytecodes but JVMs may also use other techniques such as just in time compiling to execute bytecodes.

When an application is executed on a JVM that is implemented in software on a platform specific operating system a Java application may interact with the host operating system by invoking native methods. A Java method is written in the Java language compiled to bytecodes and stored in class files. A native method is written in some other language and compiled to the native machine code of a particular processor. Native methods are stored in a dynamically linked library whose exact form is platform specific.

The operation of JVMs supports the object grid environment. An object grid or object grid environment can include a collection of Java objects that are hosted on at least two data processing systems coupled together by a network. The object grid has at least two core features. First the object grid replicates objects including their state in different locations. Second the object grid load balances work among objects so that additional computer resources can be added in a manner that permits the object grid to scale its processing memory and storage according to the needs of the customers that rely on the object grid. Computer resources are at least memory and processing units available on a dedicated or timeshared basis. A processing unit can be a single core to a multiprocessor computer. Computer resources can include storage in disk media as well as virtualized storage backed by volatile memory non volatile memory and block devices. In addition computer resources can include access to networks and other I O.

A grid partition object is a Java object that provides uninterruptible services to enterprises. The grid partition object coordinates with additional grid objects to replicate functions of an object so that there are plural instances of the object. Accordingly if a JVM fails an instance of the object may be able to rely on replicated state information to carry on the functions of the object that were supported by the failed JVM. For example object grid partition may be an instance of an object supported in JVM which in turn relies on computer resources such as working memory of data processing machine . Object grid partition may contain Java programs such as rules engine application code and object grid agent .

The data processing system may receive an IIOP message. ORB can initially process the IIOP message by relying on a rules engine name to lookup an applicable partition that hosts the rules engine. ORB may rely on engine table to locate the address for an unlocked partition. The IIOP message can be queued in response to a partition being in a locked state. When the partition is free the object request broker can dispatch a processor to perform the rules engine. Accordingly the engine table is used to initiate processing by an instantiated engine having the name of the rules engine described in the IIOP message. If the table has a null address for any looked up rules engine object grid partition may instantiate a rules engine having the rules engine name.

Thus object grid partition uses engine table to select among rules engines for example rules engine and rules engine in order to obtain processing resources as well as any state recorded within working memory and working memory . The rules engines can be JRules engines explained further below. A rules set may define criteria for handling events directed to a JRules engine. The rules engine in whatever form incorporates data structures of business rules and a business mapper for example as described below with reference to .

JVM may be remote from JVM and JVM and itself carry instances of objects that replicate those within object grid partition . Similarly to enhance redundancy and robustness a separate data processing system may support JVM . Objects may rely on bus to connect to network to transport state serialized objects and events between data processing systems and .

A distributed java object is a Java object that is hosted on a data processing system and has a replicated copy hosted on a second data processing system.

Events arriving to a JVM can be processed for example by event interface . An event interface combines an object grid agent with network interface code such as object grid agent . The event interface can convert events that arrive using formats such as for example Hypertext Transport Protocol HTTP Simple Mail Transport Protocol SMTP File Transport Protocol FTP Java Message Service JMS Simple Object Access Protocol SOAP Relational Database Management System RDBMS and eXtensible Stylesheet Language XSL and the like. The event interface places the event in a bus and or network.

The application code in the partition receives events from a network. Each event holds a flattened object. Application code can convert the event payload into a Java object and send the object through the network. Accordingly the networked object grid agents may coordinate and exchange events as an object grid. Object grid agent may adapt events received from a bus for further processing by application code. Conversely application code may rely on object grid agent to place events onto the bus. Thus the events can be accessible by the object grid.

An event is a message that includes at least a name and data corresponding to the name. The name can be one that is mapped to the specific business name on which the business rules are written. In other words the name can be correlated to a matching business term using a business mapper as explained further below. The message can be carried in a variety of packets and formats. Some packets or other organizing structures for an event are hypertext transport protocol HTTP transport control protocol and internet protocol TCP IP and Java Message Service JMS formats. A network of computers may support the transport of events among its constituent devices by relying on message oriented middleware MOM . MOM is a system where messages are exchanged asynchronously between computers on a store and forward basis. An example of MOM is IBM Websphere Message Queue MQ . Each application that relies on MOM can have an associated MOM software component locally present on the computer that hosts the application. In the IBM Message Queue the event or message can include an MQ message descriptor and the message data.

A network of computers that each host MOM can work in a distributed manner to pass events or messages within the network. Such a network may support a publish subscribe or pub sub arrangement of distributing messages. A publish subscribe topic is a federated system of distributing information among software components. One client entity may register its subject interests for example A and B for example in a pub sub queue. A queue can be called toys. Another queue can be called books. The queue keeps a list of subscribers. When the queue gets something on a topic it distributes that event to all subscribers registered with it. Accordingly the client or application that registers interest to receive messages according to criteria is called a subscriber. On the other hand a publisher is the application which transmits events or messages that are associated with one or more topics. Message oriented middleware and publish subscribe services can be implemented for example in the manner described by WebSphere MQ V7.0 Features and Enhancements January 2009 which is hereby incorporated by reference.

The rules set that is bound to a rules engine is made up of two parts namely the business rules and the business mapper. Each is exemplified as for example business rule of and business mapper of respectively.

A business rule may be understood with reference to temporal rules and process rules. A temporal rule is a conditional statement that inter relates one or more events on the basis of time frequency and or order to determine if a condition is met. An example of a temporal rule may detect potential fraudulent use of a credit card. The rule can trigger further action such as a fraud alert in response to two uses of a specific credit card within a frequency period at a gas station. The frequency period may be intervals of use from 0 to 600 seconds between events concerning the credit card and the gas station. A business rule may reference data objects which are themselves human readable. Each data reference within the data objects may be mapped to technical names. Accordingly the native names of the business rule may be understandable to business people. In addition the mapping may offer a way to supplement the meaning of such data with technical counterparts as described below with reference to .

A process rule is a rule that defines the order in which a data processing system performs its functions including for example I O and data access. Among the functions may be for example publishing an event. Accordingly a grid object may receive events through a subscription and transmit additional events in response to receiving events.

A business rule then is at least one temporal or business rule expressed in business terms. A business rule definition is a business rule that is described according to the syntax of the applicable business language for example BAL using business terms.

A business specialist may create business rules by stating a condition using a drop down list or other list selection mechanism to choose from available business terms. Accordingly the borrower can be one option among several presented in a drop down list within business rule dialog of . Further refinement and narrowing of a condition can be performed using mathematical or Boolean connectors between the business terms. Further drop down lists can be used to select Boolean terms such as and or and not to couple business terms together.

Next a JVM may update a business mapper step . Updating the business mapper may include a rules engine instantiation of one or more JVMs to operate as repositories that map technical features of the object grid environment to corresponding business terms for example by relying on array of . One or more objects may publish and or subscribe to events to the business mapper.

Next a rules engine may receive a business rule definition step . The business rule definition may be a file edited by a user a rule automatically generated and forwarded to the rules engine or a combination of the two. The business rule definition is explained further above with respect to . Next the rules engine may determine if the business rule has business terms present in it step . If step is a positive determination then the rules engine may convert the business terms to technical terms step . Converting the business terms to technical terms may be based on the business mapper.

Following step and a negative result to step the rules engine may determine whether the business rule comprises a temporal rule step . If the business rule includes a temporal rule the rules engine may receive rule criteria step . The rule criteria may be at least one selected from the group consisting of frequency delay and timing dependency. Accordingly the rules engine may receive frequency delay or timing dependencies for the temporal rule step .

However a negative determination at step may result in receiving a description of a first step step . The rules engine may iteratively receive additional steps. Accordingly the rules engine may receive descriptions of subsequent steps step .

Following either step or the rules engine may store or replicate the business rule to the rules engine step . The rule though initially edited or received as a business rule can be stored or otherwise converted using the technical terms corresponding to business terms in the business rule. Accordingly the rule thus stored is in a form that can be executed within a rules engine. Optionally the rules engine may replicate the business rule to other parts of the grid environment. Next the rules engine may publish the business rule to a publish subscribe topic step . Processing terminates thereafter.

Next the rules engine may determine if the event matches a rule criterion step . This step may be performed by comparing an event history to the rule criterion. If the event fails to match step may be repeated. However if the event matches a rule criterion the rules engine may determine whether any rule triggers a process rule step . If no rules trigger a process rule step may be repeated. However if a rule is triggered the rules engine may execute the process rule or rules step . By execute it is meant that the rules engine may obtain computer resources within the data processing system that supports the rules engine. On the other hand executing can also include recruiting another Java object in a second data processing system to perform the process rule. A Java object may add the process rule to an agenda. An agenda is a queue that prioritizes process rules in an order for execution.

Next the rules engine may determine whether the process rule requires outputting a stream to a business user step . A stream is an event or message that transports text or images meaningful to a human. A stream can be a message suitable for display to a dialog box. The stream can be an email. If the process rule requires outputting the stream to a business user the rules engine may filter the stream through a business mapper step .

Following step or a negative result at step the rules engine may trigger publication step . Accordingly in response to a positive result at step the rules engine publishes the event step . After step or a negative outcome at step the rules engine may continue processing at step . Process may repeat indefinitely.

It can be appreciated that the event can be published as a newly added business rule. As such the business rule can be subscribed to via a publish subscribe topic.

The illustrative embodiments may permit collaboration of Java objects in several data processing systems to respond to events by posting events within a publish subscribe exchange of events or messages. Such events may be resiliently stored as a business object capable of creating its own events for example through the use of an object grid client as a object constructor of an object having its own unique name. Terminology of the technical rule is expressed as business terms and accordingly their use in business rules permits additional classes of personnel to edit such business rules without resorting to dictionaries or specialized staff. Furthermore outcomes of rules can be filtered or otherwise converted to a form that may be rendered to a client or browsers in a manner familiar to business people. In addition further objects can be created in response to events received and processed by the combination of Jrules engines and grid object clients. Consequently the events issuing from the new objects may be consumed by additional rules engines. Accordingly the illustrative embodiments leverage staff to modify a resilient and scalable object grid.

The flowcharts and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustrations and combinations of blocks in the block diagrams and or flowchart illustrations can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

