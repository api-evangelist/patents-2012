---

title: Retrieving historical object-related configuration data
abstract: A method for historically synchronizing configuration data of a computer network is provided. A network management server collects from a first database a first plurality of configuration tables corresponding to a plurality of entities in the computer network according to a hierarchy of the entities when an entity in the computer network has changed. The network management server identifies the entity that has changed. The network management server adds a history identifier to an entity configuration table of the first plurality of configuration tables. The entity configuration table corresponds to the entity that has changed. The network management server updates a second plurality of configuration tables in a second database with the first plurality of configuration tables.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08775372&OS=08775372&RS=08775372
owner: Red Hat Israel, Ltd.
number: 08775372
owner_city: Raanana
owner_country: IL
publication_date: 20121101
---
Embodiments of the present invention relate to computer networks and more specifically to a method and system for managing and retrieving historical configuration and statistical data of a computer network.

Organizations currently use complex computer networks comprised of multiple resources such as real and virtual machines and associated real and virtual hosts and peripheral devices respectively. These virtual machines hosts and devices may be integrated into clusters and clusters further integrated into data centers. The data centers may be further integrated into a cloud. A system administrator that operates a network management system may have such duties as allocating system resources quickly and efficiently to keep such systems running smoothly. When a problem with one or more resources occurs the network management system needs to quickly identify the problem resource s and allocate more or alternative resources.

A centralized data collection database may be employed by the network management system to track configuration data of computer system entities and statistical data associated with each of the computer system entities. Unfortunately these databases may include a large amount of redundant configuration data stored in configuration and or related statistical table. Such an explosion of redundant data may result in slow database access and data retrieval times to create system congestion and reduced system response time. Further storing very large amounts of data as a result of creating and maintaining a multiplicity of virtual machines and resources may result in the need for additional data storage devices thus increasing system costs.

Methods and systems for historically synchronizing configuration data of a computer network are described herein. A network management server collects from a first non historical database a first plurality of configuration tables corresponding to a plurality of entities in the computer network according to a hierarchy of the entities when an entity in the computer network has changed. The network management server identifies the entity that has changed. The network management server assigns a unique history identifier to a history identifier field in an entity configuration table of the first plurality of configuration tables corresponding to the entity that has changed. The network management server updates a second plurality of configuration tables in a second historical database with the first plurality of configuration tables. The entities may be computer system or computer network entities e.g. virtual machines hosts machines clusters of hosts data centers etc. . The historical identifier may be a binary number representing a snapshot id of a particular entity e.g. a virtual machine at a particular moment in time.

In an embodiment the first plurality of configuration tables may be traversed in order from higher complexity entities to lower complexity entities.

In one embodiment statistical tables corresponding to the configuration tables may be collected and assigned the corresponding historical identifier and the second database may be updated accordingly. In this way the second database becomes a historical database.

Methods and systems for retrieving historical data from a historical database are described herein. The network management server retrieves an entity configuration table in the historical database arranged according to a hierarchy of entities the entity configuration table comprising a history identifier field corresponding to a most recent version of an entity. The network management server retrieves an entity statistical table from the database the entity statistical table comprising a version field corresponding to the most recent version of the entity. The network management server joins the entity configuration table using a unique entity identifier stored in an entity identifier field as a primary key with the entity statistical table using a unique entity identifier field as a foreign key to create a joined table. The network management server extracts configuration data and or statistical data from the joined table corresponding to the entity. The network management server presents the configuration data and or statistical data on a display to a user.

In one embodiment the network management server successively joins a plurality of configuration tables using a history identifier stored in a corresponding identifier field as a foreign key with a plurality of statistical tables with the version field as a primary key for successive higher level entities in the hierarchy to create a second joined table. The network management server extracts configuration data and or statistical data from the second joined table corresponding to the entities in the hierarchy. The network management server presents the statistical data based on versions of the entity for each row on a display to the user to provide a snapshot of the system at a specific point in time and trends of the system.

Embodiments of the present disclosure that create and extract data from a historical database may derive trend data over time for one or more entities e.g. virtual machines hosts machines clusters of hosts data centers etc. to identify and correct problems in a computer network before or when they occur. Employing the historical database in this manner can provide for offloading and re allocating resources to considerably reduce congestion and thus processing time in a network management server and the computer network as a whole.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

In one embodiment the computer system entities comprising the one or more data centers may be one or more clusters of one or more host machines also referred to as a host . In one embodiment the one or more hosts may each comprise one or more virtual machines . The servers the data centers the clusters and the hosts may be connected by a network . Each of the servers and the hosts may be a computing device such as for example desktop computers personal computers PCs server computers mobile phones palm sized computing devices personal digital assistants PDAs tablet devices etc. Each of the servers and the hosts may include one or more central processing units CPUs e.g. respectively configured to store and read data and programs from a corresponding memory respectively and control corresponding peripheral devices e.g. .

In embodiments the host may be for example a server computer a gateway computer or any other suitable computer system that is configurable for operating as a host. The host may comprise an operating system and a hardware platform. The host operating system may include Microsoft Windows Linux Solaris Mac OS or any other suitable operating system for managing operations on the host

The hardware platform may include one or more central processing units CPUs memory and peripheral devices . The devices may be comprised of one or more hardware and software devices which may be located internally and externally to the host . Examples of the devices may include network interface controllers sound or video adaptors photo video cameras printer devices keyboards displays or any other suitable device intended to be coupled to a computer system. Examples of the memory may include random access memory RAM non volatile storage memory e.g. Flash EEPROM solid state drives SSD etc. magnetic storage memory e.g. one or more hard drives optical memory e.g. CDs DVD BlueRay drives etc. etc.

The host may be configured with one or more virtual machines VMs . A VM e.g. is a portion of software that when executed on appropriate hardware creates an environment allowing the virtualization of an actual physical computer system. The VM may function as a self contained platform comprising one or more virtual CPUs not shown virtual memory not shown and virtual devices not shown running under the control of a guest operating system . The guest operating systems may be the same or different operating system from the host operating system . Similar to the host operating system the guest operating system may include Microsoft Windows Linux Solaris Mac OS or any other suitable operating system for managing operations associated with a virtualization environment.

The hypervisor which emulates the underlying hardware platform for the VMs is provided and may run on the host OS . A hypervisor is also known as a virtual machine monitor VMM a kernel based hypervisor or a host operating system. The hypervisor may support multiple VMs residing on the host . Alternatively more than one hypervisor not shown may be provided to support multiple VMs residing on the host . The hypervisor is configured to emulate the one or more virtual CPUs the virtual memory and virtual peripheral devices in cooperation with the virtual device drivers not shown residing on a virtual machine e.g. .

In one embodiment the hypervisor may be configured to provide a data monitor daemon comprising a plurality of threads processes of execution e.g. Java applets not shown for monitoring and collecting configuration data and statistical data of computer system entities e.g. CPU memory devices OSs associated with the host and the VMs including the host and of the VMs themselves . The data monitor daemon is configured to sample configuration data e.g. a historical identifier an entity object identifier operating system entity type memory size etc. of the computer system entities followed by statistical data e.g. a historical identifier an entity object identifier status cpu usage memory usage configuration version etc. associated with the computer system entities at periodic intervals e.g. once per minute per hour per day etc. depending on a type of computer system entity .

The network management database server is configured to obtain the periodically sampled configuration data and associated statistical data from the data monitor daemon e.g. at the periodic intervals and store the collected data in a plurality of tables in a network management database . The tables in the network management database are organized according to a hierarchy of computer system entities. The hierarchy of entities may be based on an ordering from higher complexity entities to lower complexity entities. The order may be for example by data center clusters of hosts hosts devices associated with corresponding hosts virtual machines associated with corresponding hosts and virtual devices associated with corresponding virtual machines etc. For each computer system entity there is at least one table each for configuration data and statistical data. Every row in one of the tables corresponds to an individual polling of configuration or statistical parameters of a monitored entity for a specific collection time.

In one embodiment queries submitted by the network management server NMS for data may be directed to the network management database under the control of the network management database server using an application programming interface API . In one embodiment queries to the network management database may be in a form of structured query language SQL . In one embodiment a version of SQL employed may be Java database connectivity JDBC .

In one embodiment the network management server NMS may be configured to communicate with the data centers the clusters and the hosts over the network . In embodiments the network management server NMS may be configured to communicate with the network management database server through the API using JDBC either indirectly over the network directly over a wired or wireless LAN or WAN or may be integrated with the network management data server . The NMS may include a computing machine such as for example a server computer a gateway computer or any other suitable computer system that is configurable for operating as an NMS . The NMS comprises an NMS operating system OS and a hardware platform. The NMS operating system may include Microsoft Windows Linux Solaris Mac OS or any other suitable operating system for managing operations on the NMS .

The hardware platform may include one or more central processing units CPUs memory and devices . The devices may be comprised of one or more hardware and software devices which may be located internally and externally to the NMS . An example of the devices e.g. may include a network interface controller NIC such as an Ethernet network card for communication over the network . The network may be a private network e.g. a local area network LAN wide area network WAN intranet etc. or a public network e.g. the Internet .

Other examples of the devices may include sound or video adaptors photo video cameras printer devices keyboards displays or any other suitable device intended to be coupled to a computer system. Examples of the memory include random access memory RAM non volatile storage memory e.g. Flash EEPROM solid state drives SSD etc. magnetic storage memory e.g. one or more hard drives and optical memory e.g. CDs DVD BlueRay drives etc. .

In one embodiment the NMS is configured to monitor and collect configuration and statistical data associated with the computer system entities e.g. the data centers the clusters the hosts and the VMs from the network management database via an extract transform and load ETL agent . As used herein extract transform and load ETL refers to a process that involves extracting data from outside sources e.g. the network management database transforming the data to fit operational needs e.g. identify historical trends of the state of computer system entities and loading the transformed data into an end target i.e. the historical database .

In an embodiment the ETL agent is configured to collect the non historically organized configuration data and statistical data associated with the computer system entities from the network management database . The configuration data is collected whenever a state e.g. installation removal or change of a parameter of one or more computer system entities changes i.e. not for every sampling of data . The ETL agent and the data monitor daemons in contrast collect statistical data once every sampling period. The ETL agent is further configured to identify the one or more computer system entities that have changed state to assign a unique history identifier e.g. version number that increases with each change of state of an entity to a history identifier field in a corresponding configuration table and statistical table collected from the network management database and to update a corresponding configuration table and statistical table in a historical database .

The database is historical in the sense that the unique history identifier may be employed by a history database retrieval manager to retrieve and present configuration data and or statistical data on a display to the user e.g. a network system administrator to provide a snapshot of the system at a specific point in time. In an embodiment the history database retrieval manager may be configured to request successive joins from the historical database using the history identifier stored in identifier fields of configuration tables as foreign keys with version fields as primary keys in corresponding statistical tables for successive higher level entities in the hierarchy to create joined tables that identify trend data over time for one or more computer system entities. In another sense the database is organized historically by means of the historical identifiers associated with corresponding computer system entities.

In one embodiment method begins when at block configuration synchronization is performed. The ETL agent collects from a first database a first plurality of configuration tables corresponding to a plurality of entities in a computer network according to a hierarchy of the entities when an entity in the computer network has changed. In one embodiment a data monitor daemon receives a notification that a computer entity e.g. the VM has changed state e.g. received additional virtual memory . The network management database sever automatically collects a current set of samples of configuration data and statistical data for all computer system entities of the system . The network management database sever notifies the ETL agent that a change of state of the VM has occurred. In response the ETL agent transmits a JDBC SQL query message to the API of network management database server to collect the complete set of configuration tables from the network management database according to a hierarchy of the entities.

In one embodiment the system configuration tables are collected in a top down order from higher complexity entities to lower complexity entities. An example of a top down order may be by data center clusters of hosts hosts devices associated with corresponding hosts virtual machines associated with corresponding hosts and virtual devices associated with corresponding virtual machines. This is in order to create a historical version of the system configuration tables that corresponds to the changes that have occurred in top level entities. A collection of statistical tables corresponding to the entities in the configuration tables may also be collected following the collection of all configuration tables in the hierarchy e.g. a configuration synchronization followed by a statistical synchronization of collection of entities in order to permit insertion of history version fields with latest values e.g. virtual machines configuration followed by virtual machine statistics .

At block the ETL agent identifies the entity e.g. VM that has changed. In one embodiment configuration data of the entity that has changed state e.g. the amount of virtual memory allocated to the VM may be transmitted in a message by the corresponding data monitor daemon to the network management database server for later transmission to the ETL agent during execution of block . In another embodiment the corresponding data monitor daemon may be configured to asynchronously transmit the change in state of the entity over the network directly to the ETL agent . In one embodiment this asynchronous message may be employed by the ETL agent to trigger the collection of samples of configuration data and statistical data.

At block the ETL agent adds a unique history identifier e.g. a binary number corresponding to an integer for example defined as or enumerated as VM version2 to a history identifier field in an entity configuration table of the first plurality of configuration tables corresponding to the entity that has changed. In one embodiment the most recent version of the unique history identifier may be higher in value than a previous version of the unique history identifier e.g. VM version1 . In one embodiment the unique history identifier changes version only when a parameter in a table associated with the entity e.g. VM has changed.

The network management server updates a second plurality of configuration tables in a second database with the first plurality of configuration tables. Each of the tables comprises a history id field respectively for storing unique history version identifiers. The unique history version identifiers of each of the tables are retrieved for each sample period. Every time a statistical synchronization is performed a most recent value in the history id field e.g. 308 for that virtual machine is inserted into a vm configuration version field e.g. 314 to permit trend reporting. When for example virtual memory is added to VM then the ETL agent assigns VM version2 to history id field and in all subsequent statistical synchronizations the new value of the history id field e.g 308 will be inserted into a corresponding vm con figuration version field e.g. .

At block the ETL agent updates a second plurality of configuration tables in a second database with the first plurality of configuration tables. In one embodiment the ETL agent updates a complete system set of configuration tables in the historical database with the complete set of configuration tables previously collected from the network management database except with the updated history identifier field of the computer system entity e.g. VM that has changed state e.g. the history id field of table .

In one embodiment at block a statistical synchronization is performed. The ETL agent collects from the first database i.e. the network management server a first plurality of statistical tables corresponding to the first plurality of configuration tables. At block the ETL agent adds the unique history identifier e.g. VM version2 to a version field e.g. vm configuration version in an entity statistical table e.g. of the first plurality of statistical tables corresponding to a most recent value of the unique history identifier of an entity to create an updated plurality of statistical tables e.g. the most recent value for each vm history id field may be inserted into a corresponding vm statistics vm configuration version field . In one embodiment at block the ETL agent may add the unique history identifier by first performing a join of the retrieved most recent value of the configuration table corresponding to the entity that has changed e.g. VM using an entity identifier field e.g. vm id in the configuration table with the corresponding statistical table using the corresponding entity identifier field e.g. vm id in the statistical table to create a joined table. The ETL agent may then extract the unique history identifier e.g. VM version2 from the history identifier field of the joined table. At block the ETL agent may then store the unique history identifier in the version field of the statistical table . At block the ETL agent updates all statistical tables in a second database based on the updated plurality of statistical tables i.e. the history database .

In one embodiment method begins when at block the historical database retrieval manager retrieves an entity configuration table in a database arranged according to a hierarchy of entities the entity configuration table comprising a history identifier field corresponding to a most recent version of an entity. For example the historical database retrieval manager may retrieve the entity configuration table corresponding to a VM e.g. VM from the historical database . At block the historical database retrieval manager retrieves an entity statistical table from the database the entity statistical table comprising a version field corresponding to the most recent version of the entity. For example the historical database retrieval manager may retrieve the entity statistical table corresponding to a VM e.g. VM from the historical database . At block the historical database retrieval manager joins the entity configuration table e.g. using a unique entity identifier stored in a unique entity identifier field e.g. as a primary key with the entity statistical table e.g. using a unique entity identifier field e.g. as a foreign key to created a joined table not shown . At block the historical database retrieval manager extracts at least one of configuration data or statistical data from the joined table corresponding to the entity e.g. VM . The historical database retrieval manager presents the at least one of configuration data or statistical data on a display e.g. to a user e.g. .

In one embodiment the entity historical table e.g. may comprise a field for storing an identifier corresponding to a version of a higher level entity e.g. and in the hierarchy. In one embodiment the entity statistical table e.g. may comprise a field for storing an identifier corresponding to a version of a higher level entity e.g. in the hierarchy. In one embodiment the historical database retrieval manager may successively join a plurality of configuration tables using a history identifier stored in a corresponding identifier field as the primary foreign key with a plurality of statistical tables with the version field as the primary key for successive higher level entities in the hierarchy to create a second joined table. For example the historical database retrieval manager may join VM configuration table using key with the VM statistical table using foreign key to obtain the virtual machine e.g. . Then the historical database retrieval manager may join VM configuration table using key with the corresponding cluster configuration table using primary key corresponding to the respective cluster e.g. and from that to the data center e.g. . These combined tables not shown may be further combined with corresponding statistical tables and or other configuration tables e.g. corresponding to the virtual machine not shown to obtain and present configuration data and or statistical data of the entire hierarchy of computer system entities in the system to provide a snapshot of the system at a specific point in time. The extracted data may further be employed to ascertain trend data over time for an entity. For example a chart may be displayed on the display to the user that indicates the amount of virtual memory over time for a specific virtual machine e.g. . This may be employed to ascertain load distribution or determine if virtual memory is being consistently under deployed or over deployed. In response the user e.g. a system administrator may direct the system to add or subtract virtual memory respectively to better distribute the load.

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computer RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. Processing device is configured to execute processing logic for implementing at least one of the ETL agent or the historical database retrieval manager for performing the operations and steps discussed herein.

Computer system may further include a network interface device . Computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

Data storage device may include a machine readable storage medium or more specifically a computer readable storage medium having one or more sets of instructions i.e. processing logic embodying any one or more of the methodologies of functions described herein. The processing logic may also reside completely or at least partially within main memory and or within processing device during execution thereof by computer system main memory and processing device also constituting machine readable storage media. The processing logic may further be transmitted or received over a network via network interface device .

Machine readable storage medium may also be used to store the device queue manager logic persistently. While machine readable storage medium is shown in an exemplary embodiment to be a single medium the term machine readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable storage medium shall also be taken to include any medium that is capable of storing or encoding a set of instruction for execution by the machine and that causes the machine to perform any one or more of the methodologies of the present invention. The term machine readable storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

The components and other features described herein can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICs FPGAs DSPs or similar devices. In addition these components can be implemented as firmware or functional circuitry within hardware devices. Further these components can be implemented in any combination of hardware devices and software components.

Some portions of the detailed descriptions are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as enabling transmitting requesting identifying querying retrieving forwarding determining passing processing disabling or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the present invention also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards flash memory devices including universal serial bus USB storage devices e.g. USB key devices or any type of media suitable for storing electronic instructions each of which may be coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will be apparent from the description above. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. Although the present invention has been described with reference to specific exemplary embodiments it will be recognized that the invention is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

