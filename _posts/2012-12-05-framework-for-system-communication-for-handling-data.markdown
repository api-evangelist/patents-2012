---

title: Framework for system communication for handling data
abstract: Techniques for making internal data from a source application available through an application programming interface (“API”). Embodiments may analyze a source application to determine a storage location and a first storage format of internal data, wherein the source application does not provide an API through which the internal data is accessible. Embodiments may then extract the internal data from the storage location, and convert the extracted data from the first storage format to a common storage format. Embodiments may then provide an API to make the converted data available.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09189299&OS=09189299&RS=09189299
owner: International Business Machines Corporation
number: 09189299
owner_city: Armonk
owner_country: US
publication_date: 20121205
---
This application is a continuation of co pending U.S. patent application Ser. No. 12 956 082 filed Nov. 30 2010. The aforementioned related patent application is herein incorporated by reference in its entirety.

Embodiments of the invention relate to data management and more particularly to providing an application programming interface hereinafter API for the internal data of a source application.

Many production environments include older software applications that are still in use but are no longer in development. While these older software applications may be functioning properly in their originally intended role often times a business may wish to modify these applications to introduce new features. For instance the business may wish to add a reporting mechanism to a software application that generates and maintains a set of data. However such modifications are often difficult. For instance the business may not have access to the source code for the original application. As a second example even if the source code is available the architecture used to develop the original application may not easily support the introduction of new features. Continuing this example this problem may be compounded if the software developers are no longer familiar with the programming language the source code for the older software application is written in. Additionally even creating an external tool to construct reports using the data may be difficult since the older software application may not provide an API for accessing the data.

Embodiments of the invention provide methods systems and products for making data maintained by a source application accessible. The method system and product include identifying internal data maintained by a source application that is not exposed to any external application via any application programming interface API provided by the source application. Such identification includes identifying a location where the source application maintains the internal data and determining a first format the source application maintains the internal data in. The method system and product further include retrieving the data from the identified location and then converting the retrieved data from the determined first format to a common format. Upon converting the data the method system and product include providing an API through which the converted data may be accessed.

It can often be difficult to modify existing applications to include additional functionality. This is particular true with existing applications that were written some time ago and have been out of the development phase for a substantial period of time. For instance the developers wishing to make the modification may not have access to the source code of the existing application or if they do they may be unfamiliar with the source code or even the language the source code is written in. Even creating an external tool to perform the additional function may be difficult particularly in the case where the existing applications do not feature an application programming interface hereinafter API for accessing the required data from the existing application.

As an example an existing application may perform rebate processing for customers of a business. For the purposes of this example assume that the source code for the existing application is not available for modification. In this example the existing application may accept a rebate submission from a customer and upon determining the submission is valid may issue a rebate to the customer. However assume for purposes of this example the existing application has no reporting functionality e.g. to generate a report showing approved rebate submissions vs. denied rebate submissions and further assume that the existing application does not provide an API for accessing the data relating to rebate processing e.g. a number of submissions that the existing application denied . In such an example the business may wish to add reporting functionality to the existing application. However because the source code for the existing application is not available and because the existing application does not provide an API for accessing rebate processing data such a modification may be difficult for developers to implement.

Embodiments of the invention provide an information discovery component which may provide an API for particular data in existing software applications which do not have a native API for the particular data. Embodiments may analyze an existing application to determine a storage location for desired data. Examples of storage locations in this context include without limitation data stored on a disk and data contained in system memory. In one embodiment the information discovery component may monitor actions taken by the existing software application to determine the storage location of the desired data. Additionally embodiments may determine a format the data is stored in. For example the information discovery component may monitor actions taken by the existing software application to determine a particular data structure that is used to store the data. Upon determining whether the data is stored and what format the data is stored in embodiments may retrieve the data from the determined location. Embodiments of the invention may then convert the data from the determined format to a common format. Once the data is converted to the common format embodiments may provide an API through which users and other applications may access the converted data. By doing this embodiments of the invention may provide an API for the internal data of an existing application data which otherwise would be unavailable to users and applications outside of the existing application.

In the following reference is made to embodiments of the invention. However it should be understood that the invention is not limited to specific described embodiments. Instead any combination of the following features and elements whether related to different embodiments or not is contemplated to implement and practice the invention. Furthermore although embodiments of the invention may achieve advantages over other possible solutions and or over the prior art whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus the following aspects features embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim s . Likewise reference to the invention shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim s .

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Embodiments of the invention may be provided to end users through a cloud computing infrastructure. Cloud computing generally refers to the provision of scalable computing resources as a service over a network. More formally cloud computing may be defined as a computing capability that provides an abstraction between the computing resource and its underlying technical architecture e.g. servers storage networks enabling convenient on demand network access to a shared pool of configurable computing resources that can be rapidly provisioned and released with minimal management effort or service provider interaction. Thus cloud computing allows a user to access virtual computing resources e.g. storage data applications and even complete virtualized computing systems in the cloud without regard for the underlying physical systems or locations of those systems used to provide the computing resources.

Typically cloud computing resources are provided to a user on a pay per use basis where users are charged only for the computing resources actually used e.g. an amount of storage space consumed by a user or a number of virtualized systems instantiated by the user . A user can access any of the resources that reside in the cloud at any time and from anywhere across the Internet. In context of the present invention a user may access applications e.g. the information discovery component or related data available in the cloud. For example the information discovery component could execute on a computing system in the cloud and provide an API for one or more source applications executing on computing systems in the cloud. In such a case the information discovery component could retrieve data from the source applications and store the retrieved data at a storage location in the cloud. The information discovery component may then provide an API through which target applications may access the retrieved data. Doing so allows the target applications to access data from the source applications from any computing system attached to a network connected to the cloud e.g. the Internet .

Referring now to is a block diagram illustrating a configuration for an information discovery component according to one embodiment of the present invention. As shown the system contains source applications communicatively coupled to an information discovery component . As used herein a source application generally refers to any software application which maintains some internal data but does not provide an API for the internal data. As an example a rebate processing application may generally receive requests for rebate redemptions and upon determining that a particular redemption request is valid may grant a rebate for the request. In such an example the application may maintain internal data on requests that are denied but may not make this internal data available through an API. Furthermore it is entirely possible that a source application as defined herein may provide some sort of API but that the provided API may not make particular internal data available. In such a scenario even though the application does provide an API of sorts the application may still be qualified as a source application.

The information discovery component may generally monitor the actions taken by a source application to identify internal data maintained by the source application. For example the information discovery component may determine that source application A maintains its internal data by writing the data to a file on a hard disk whereas source application B maintains its internal data in a data structure in system memory. The information discovery component may further determine a storage format that the data is stored in. For example if the source application is a rebate processing application the information discovery component may determine that the source application maintains rebate redemptions requests in a file on a hard disk in the format of .

Upon identifying the internal data of a source application the information discovery component may retrieve the internal data from the determined storage location e.g. system memory . Once the internal data is retrieved the information discovery component may convert the retrieved data from the determined format to a common format and store the converted data in a target repository . In one embodiment the target repository is a database which is used to store the extracted data. In such an embodiment the information discovery component may extract the internal data from the source application and convert the extracted data into a format consistent with the database schema. For instance for extracted data in the format of the information discovery component may insert each of the data values into a respective database column e.g. a RequestID column a TimeReceived column and a Status column . The information discovery component may then provide an API through which applications may access the data in the target repository i.e. in this example the database .

Additionally the information discovery component may be configured to extract data from multiple source applications and multiple instances of the same source application and to convert the extracted data into a common format. The information discovery component may then consolidate the converted data in the target repository . Once the data is converted and stored in the target repository the information discovery component may provide an API through which one or more target applications may access the consolidated data in the target repository .

Advantageously by doing this the information discovery component may effectively provide an API for data in existing software applications for which the software applications themselves do not provide an API. As such embodiments may enable the modification of existing software applications even when the source code of the existing software applications is unavailable and even when the existing software applications do not provide an API for the desired internal data. Continuing the above example of a rebate processing application embodiments of the invention may be used to add reporting functionality to the application by extracting the relevant internal data from the rebate processing application and then making this data available for reporting functions by providing an API for the target repository . Advantageously embodiments may save substantial time and resources for developers by enabling the modification of existing software applications modifications which otherwise may consume a substantial amount of developer time and resources or where the source code for the existing application is not available may not be feasibly possible.

The CPU generally retrieves and executes programming instructions stored in the memory . Similarly the CPU stores and retrieves application data residing in the memory . An interconnect not shown may be used to transmit programming instructions and application data between the CPU storage I O devices network interface and memory . CPU is included to be representative of a single CPU multiple CPUs a single CPU having multiple processing cores and the like. Furthermore CPU may be any processor capable of performing the functions described herein. Although memory is shown as a single entity memory may include one or more memory devices having blocks of memory associated with physical addresses such as random access memory RAM read only memory ROM flash memory or other types of volatile and or non volatile memory. Storage such as a hard disk drive solid state device SSD or flash memory storage drive may store non volatile data. Furthermore as will be understood by one of ordinary skill in the art any computer system capable of performing the functions described herein may be used.

In the pictured embodiment memory contains a plurality of source applications an information discovery component a target repository and an operating system . The target repository is generally used for storing data. In one embodiment the information discovery component may extract data from the source applications convert the extracted data to a common format and may store the converted data in the target repository . Generally the operating system may be any operating system capable of performing the functions described herein. Furthermore although various elements are shown as residing in memory on the information discovery system such a depiction is without limitation. Of course one of ordinary skill in the art will recognize that the source applications information discovery component and target repository may reside on more than one computer system and that such a depiction is for illustrative purposes only.

Generally the information discovery component may analyze the source applications to identify internal data of the applications . For instance the information discovery component may determine characteristics of the source applications such as memory usage and areas of memory that are used by the application. The information discovery component may then use such information to determine what internal data to extract from the source application and where such internal data is stored. Additionally the information discovery component may monitor one or more actions taken by the source application to identify the internal data and where the data is stored. As an example if the information discovery component determines a source application is consistently writing data to a particular file on the hard disk e.g. storage the information discovery component may determine that the source application is storing internal data in the particular file. In this example the information discovery component may then parse the data contained in the file to determine a format of the data.

The information discovery component may then extract the internal data of the source application . As an example if the information discovery component determined that an exemplary source application stores its internal data as a data structure in system memory the information discovery component may then read the data from the memory location. Upon extracting the internal data the information discovery component may convert the data to a common format and may store the converted data in the target repository . Continuing the above example the information discovery component may retrieve hexadecimal values from the determined memory location and may convert these values into their decimal equivalents. The information discovery component may then store these converted decimal values in a target repository such as a database. Once the converted values are stored in the target repository the information discovery component may provide an API through which users and applications may the converted values.

Advantageously embodiments of the invention may be used to provide an API for internal data in an existing software application for which the software application does not provide an API. That is although the existing application e.g. source application may calculate and maintain certain internal data the application may not provide any mechanism for outside entities e.g. users applications etc. to access this internal data. As such by providing an API through which external entities may access this internal data embodiments of the invention enable access to the internal data values of the existing software application without modifying the existing software application itself. This is advantageous because by using embodiments of the invention additional functionality may be added to the existing software application even though the existing application itself does not provide any API to support such additional functionality.

Thus as an example once embodiments provide the API through which the internal data of the existing application may be accessed an external reporting tool may be developed to generate reports using the internal data. In this way a reporting mechanism may be added to an existing software application without modifying the existing application itself and even though the existing application provides no API for accessing the data used in the reports. As such embodiments of the invention may save substantial amounts of development time and cost that may otherwise be spent modifying the existing software application and may enable the addition of new functionality for existing software in situations where it would otherwise be infeasible to add the new functionality. For example in a situation where the source code for the existing software application is unavailable adding the additional functionality e.g. a reporting mechanism to the application itself may be impractical or even impossible. However by using embodiments of the invention external tools may be created to use the API provided by the information discovery component which may add additional functionality to an existing software application.

Furthermore because embodiments of the invention provide an API through which data may be accessed by external entities embodiments provide the additional advantage of promoting a modular software design even for software application that were not originally designed with this concept in mind. That is multiple external tools may be designed to utilize the provided API and these external tools may be easily added removed and replaced from service. As such even though the original existing software application may not have been created with a modular design in mind at least not for the particular internal data being extracted embodiments of the invention enable the modular modification of the existing software application by providing an API through which the internal data may be accessed.

The information discovery component then retrieves the source application data from the determined location step . As discussed above the determined location may generally be any location in which data may be stored. Examples of such a location include without limitation system storage e.g. storage and system memory e.g. memory . Upon retrieving the source application data the information discovery component stores the retrieved data in a target data store step . In one embodiment the target data store e.g. target repository is a database. Additionally as discussed above the information discovery component may also be configured to convert the extract data to a common format before storing the data in the target data store. Once the data is stored the information discovery component continues to monitor the determined location for changes to the data step and the method ends.

In one embodiment the information discovery component analyzes the source application by monitoring one or more actions taken by the source application. For example if the information discovery component determines that the source application consistently writes to a particular file on the system storage the information discovery component may determine that the internal data is stored in the particular file. The information discovery component may then determine a format the internal data is stored in. For example continuing the above example of a rebate processing application the information discovery component may monitor incoming requests for the rebate processing application and may cross reference information from these requests e.g. a request ID identifying a particular request with the stored internal data to determine the storage format of the internal data.

Upon analyzing the source application the information discovery component retrieves the internal data from the determined location step . Once the data is retrieved the information discovery component converts the retrieved data into a common format step . Generally the common format may be any format which is usable by the requesting target applications requesting the converted data. The information discovery component then makes the converted data available by providing an API through which target applications may access the data step . In one embodiment the information discovery component additionally stores the converted data in a target repository . Furthermore as discussed above the provided API may be any API which is usable by the requesting target applications but ideally should be consistent with the common format of the converted data.

At some later point in time a target application submits a request for particular data using the provided API step . As an example the target application may be a reporting tool created to generate reports using the extracted internal data. Upon receiving the request the information discovery component sends the requested data to the target application step . In one embodiment of the invention the information discovery component may perform authentication and authorization functions for the target application before sending the requested data to the target application. Once the requested data is transmitted from information discovery component to the target application the method ends.

Once the information discovery component analyzes the application the information discovery component retrieves the internal data from the identified location step . The information discovery component then stores the retrieved data in a consolidated repository step . In one embodiment the information discovery component first converts the retrieved data to a common format before storing the data in the consolidated repository. As discussed above the common format is generally any format which may be used for storing the extracted data. Additionally in a preferred embodiment the common format should generally be consistent with any API provided by the information discovery component .

The information discovery component then determines whether there are more instances of the application to process step . If the information discovery component determines there are more instances of the application left to process the method begins again at step with the next instance of the application. If instead the information discovery component determines that there are no more instances of the application to process the information discovery component provides an API to make the data in the consolidated repository available step . Once the information discovery component provides the API for the consolidated repository the method ends.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

