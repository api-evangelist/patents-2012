---

title: Dynamic customization of pluggable service by users
abstract: Downloadable pluggable services and methods of distributing the same are described. The downloadable pluggable services may correspond to communication services that can be downloaded to upgrade a communication system. The downloadable pluggable services may include a number of component parts that can be distributed among various servers in the communication system being upgraded along with instructions that enable the component parts to instruct each server in the communication system to operate in a coordinated fashion so as to provide the downloaded service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09116772&OS=09116772&RS=09116772
owner: Avaya Inc.
number: 09116772
owner_city: Basking Ridge
owner_country: US
publication_date: 20120922
---
The present disclosure is generally directed toward communications and more specifically toward communication systems and methods.

Communication systems have been developed to deliver modular applications that are sequenced or named as part of normal call signaling. The promise to these systems is that many applications can be written for a variety of solution spaces. Heretofore an application server has only been able to provide one sophisticated application with releases that occur at best on a semi annual basis.

In most communication systems call treatment features are currently provided by a single monolithic feature server. Adding a new or upgrading an existing call treatment feature on a server requires a new version of software and requires the customer to upgrade the entire server. Such upgrades can cause operational downtime and can have impacts that are not limited to users of the new upgraded feature. In other words current communication systems do not enable convenient system upgrades nor do they enable simple upgrades on a per user basis.

To achieve more rapid development an ecosystem that allows for the independent development and deployment of applications is desired.

It is with respect to the above issues and other problems that the embodiments presented herein were contemplated. In particular embodiments of the present disclosure propose the ability to among other things allow different users of the same communication system to have different services and different versions the same service made available to them. Specifically different subsets of users can have different services and or service versions made available to them where the services include for instance a call processing piece user interface piece and management piece.

In some embodiments this is made possible by the fact that a communication system administrator can download a new service or new version of an existing service and the necessary portions of that service or version are installed at the appropriate devices in the communication system. The administrator can then assign the new service or service version to specific users or groups of users but exclude other users or groups of users.

One advantage of the present disclosure is that a new version of a service can be tested out on a single user rather than testing the new version of the service system wide as is currently required. Because the new version of the service can be slowly rolled out e.g. for a single user at a time there is a much smaller impact associated with service upgrades. Furthermore the bugs can be worked out for a small group of users before upgrading all users of the system.

It is another aspect of the present disclosure to provide the ability to have a hot deploy no downtime during the upgrade of a new service version or a completely new service.

As one example of a hot deployment of a service a user that receives an upgrade may have that upgrade assigned to them during a call and the upgrade will be completed in the background during the call such that once the user is done with the call the new service is readily available. In particular the upgrade process enables each component of the new service to be distributed to the appropriate component and installed without replacing the previous version of the same service. Therefore if the service happens to be deployed while an affected user is in the middle of a call the affected user will continue that call using the old service version. After the user has completed the call the user will have access to the new version of the service.

Furthermore a service can be assigned to a small set of users. When it becomes desirable to move the service to a bigger group of users all that is required is to change permissions for the newly assigned individuals. There is no need to deploy any further software on every user s device and again this can be done during runtime.

As can be appreciated a new service should be considered an upgrade of the existing overall general functionality. Therefore embodiments of the present disclosure cover both upgrades to existing services as well as new services.

In some embodiments a pluggable service includes a call processing component a user component a management component and a template component. In some embodiments the template component is what gets added to plugged into the existing templates based on the new service version. As used herein a template may comprise multiple template components where each template component corresponds to different deployed service or service version. Administrators create one or more templates with specific services enabled and specific configuration settings for those services. By creating this template and assigning it to one or more users the administrator is able to control exactly what services and settings each user receives. Therefore the administrator gets to select a service version or groups of service versions on behalf of the user.

If an administrator defines via the templates that a user is allowed to have one of multiple different service versions then the user may be allowed to select which service version he she uses. In this example the templates allow the system administrator to define which versions a user is allowed to use and the users can then select which specific version of a service they actually use via the user interface component.

In some embodiments a pluggable service may have its different components packaged into a specific file format such as a JAR or WAR file. For instance a Dynamic Device Pairing DDP service jar may include a call processing piece a service rule piece a user portal interface piece the system manager s or administrator s piece and perhaps other components e.g. country specific components language components etc. . Instead of including all possible sub components e.g. all skins all languages into the overall service jar the user could pick and chose the ones he she wants resulting in a very specialized service. For instance if the user wants a Swedish look and feel to their user portal he she could specify that when ordering the overall service and the entity which distributes the service would build the service with only that skin. Other pieces could be changed as well for example the service rule. Dynamic customization allows a service to have multiple personalities that can be tailored to individual customers. The customer might want to affect that behavior as well.

Other aspects of the present disclosure include the ability for an independent party to develop localization packages for the customer to download as well as the concept of pluggable licensing.

Here the customer or system administrator would be able to specify customization of a pluggable service at ordering time e.g. how many users can use the service which users will use the service etc. . It may also be possible to include the license in the service or different sub components of the service and dynamically create the appropriate bundle at ordering time.

Another aspect of the present disclosure is that there may be data attributes defined by or for a service. In some embodiments each attribute has the listed levels in the hierarchy and a factory default may be used. Administrators and users are allowed to configure this same data. In general the user configured value will override the admin value but the administrator can specify that a certain piece of data is not user configurable or only user configurable within a predetermined range.

Yet another aspect of the present disclosure is to avoid the need to use a substantial amount of html code to paint or render a screen for a user in connection with providing a service. In particular an eXtensible Markup Language XML can be used to define the data that will be manipulated by a system administrator or user. The html code can be pre stored on a system manager of the communication system. The updates provided by a pluggable service only has to define in an abstract language what data the html code is required to look at and then the html code is used to look at the abstract language to perform the defined functions.

Because the attribute definitions describing what is going to be displayed requires less code space than the html code itself the pluggable service can be kept at a minimal size. Another benefit is ease of development of a new service. For example only data elements need to be defined rather than developing testing and delivering html code.

In accordance with at least some embodiments of the present disclosure a method is provided which generally comprises 

receiving a request from a customer to obtain a downloadable pluggable service for a communication system of the customer 

in response to receiving the request preparing the downloadable pluggable service wherein preparing the downloadable pluggable service includes obtaining a first and second sub component that are packaged into a single object wherein the first sub component includes instructions for operating a first server of the customer s communication system and wherein the second sub component includes instructions for operating a second server of the customer s communication system and

In accordance with at least some embodiments of the present disclosure a method is provided which generally comprises 

defining for a first user or group of users in the plurality of users a first set of enabled services that the first user or group of users is allowed to access from the communication system 

defining for a second user or group of users in the plurality of users a second set of enabled services that the second user or group of users is allowed to access from the communication system wherein the first set of enabled services differs from the second set of enabled services by at least one service and

enforcing the first and second sets of enabled services for the first and second users or group of users use of the communication system.

In accordance with at least some embodiments of the present disclosure a method is provided which generally comprises 

loading the service for the first user onto one or more servers without requiring the first user to log off or discontinue a communication session.

Although embodiments of the present disclosure will be primarily described in connection with communication services or communication systems it should be appreciated that services as used herein can include any type of feature or feature set that is made available to a user or group of users either within a single enterprise or within multiple enterprises. Non limiting examples of services include communication services e.g. call routing services call enhancing features conferencing services security encryption services firewall services multi media communication services collaboration services etc. http type services e.g. web browsing services web collaboration services etc. media services data storage services and any other service that can be supported or provided by a server or collection of servers that provide users or client devices with content or features to enhance operations of the client device or systems exposed to the client device.

Furthermore the term server as used herein should be understood to include any server collection of servers processors within a server blades within a server one or more virtual machines being executed by a server containers or processes being executed by a server etc. In other words servers are not necessarily limited to individual hardware components with dedicated processors and memory. Servers are also not limited to a particular type of container executed by a server such as a J2EE server or any other version of a Java EE server. Non limiting examples of containers that may be executed by or constitute a server include application containers e.g. Java Virtual Machines applet containers e.g. web browsers or applet viewers Enterprise JavaBeans EJB containers web containers Application Programming Interfaces APIs and the like.

The phrases at least one one or more and and or are open ended expressions that are both conjunctive and disjunctive in operation. For example each of the expressions at least one of A B and C at least one of A B or C one or more of A B and C one or more of A B or C and A B and or C means A alone B alone C alone A and B together A and C together B and C together or A B and C together.

The term a or an entity refers to one or more of that entity. As such the terms a or an one or more and at least one can be used interchangeably herein. It is also to be noted that the terms comprising including and having can be used interchangeably.

The term automatic and variations thereof as used herein refers to any process or operation done without material human input when the process or operation is performed. However a process or operation can be automatic even though performance of the process or operation uses material or immaterial human input if the input is received before performance of the process or operation. Human input is deemed to be material if such input influences how the process or operation will be performed. Human input that consents to the performance of the process or operation is not deemed to be material .

The term computer readable medium as used herein refers to any tangible storage that participates in providing instructions to a processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example NVRAM or magnetic or optical disks. Volatile media includes dynamic memory such as main memory. Common forms of computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium magneto optical medium a CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM a solid state medium like a memory card any other memory chip or cartridge or any other medium from which a computer can read. When the computer readable media is configured as a database it is to be understood that the database may be any type of database such as relational hierarchical object oriented and or the like. Accordingly the disclosure is considered to include a tangible storage medium and prior art recognized equivalents and successor media in which the software implementations of the present disclosure are stored.

The terms determine calculate and compute and variations thereof as used herein are used interchangeably and include any type of methodology process mathematical operation or technique.

The term module as used herein refers to any known or later developed hardware software firmware artificial intelligence fuzzy logic or combination of hardware and software that is capable of performing the functionality associated with that element. Also while the disclosure is described in terms of exemplary embodiments it should be appreciated that individual aspects of the disclosure can be separately claimed.

The ensuing description provides embodiments only and is not intended to limit the scope applicability or configuration of the claims. Rather the ensuing description will provide those skilled in the art with an enabling description for implementing the embodiments. It being understood that various changes may be made in the function and arrangement of elements without departing from the spirit and scope of the appended claims.

The communication network may be packet switched and or circuit switched. An illustrative communication network includes without limitation a Wide Area Network WAN such as the Internet a Local Area Network LAN a Personal Area Network PAN a Public Switched Telephone Network PSTN a Plain Old Telephone Service POTS network a cellular communications network an IP Multimedia Subsystem IMS network a SIP network a Voice over IP VoIP network or combinations thereof. In one configuration the communication network is a public network supporting the TCP IP suite of protocols. Communications supported by the communication network include real time near real time and non real time communications. For instance the communication network may support voice video text web conferencing or any combination of media.

The service warehouse may provide a location where customers N can view and ultimately purchase services. Examples of services that may be offered by the service warehouse include communication services media services management services data storage services processing services combinations thereof and any other automated or computer implemented service. In some embodiments the service warehouse may provide access to its services via one or more web pages served by a web server or group of web servers. The service warehouse may provide customers N with the ability to view various services offered by the service warehouse though known web based communication protocols e.g. http secure http etc. . The customers N may comprise one or more client devices with a web browser application executed thereon that allows user or system administrators at the customer site to view and purchase services from the service warehouse .

As will be discussed in further detail herein the service warehouse may comprise the functionality to receive an order for one or more services from a customer N automatically prepare one or more downloadable pluggable services and send the downloadable pluggable services to the ordering customer N via the communication network . In some embodiments the service warehouse may provide the ordered service s to the customer N via the same or similar protocol used by the customer N to order the service s . It may also be possible for the service warehouse to provide the ordered service s to the customer N in the same communication session during which the order was received. In other words the service warehouse may deliver the ordered service s via the same port negotiated during the web based communication session that was used to order the service s . This provides a simple and efficient way of delivering services from the service warehouse to the customer N.

It should be appreciated that the service warehouse may be distributed. Although embodiments of the present disclosure will refer to a single service warehouse as the mechanism by which services are delivered to customers it should be appreciated that the embodiments claimed herein are not so limited. For instance multiple service warehouses may be executed by multiple different servers in either an autonomous or coordinated fashion. One customer may communicate with one instance of the service warehouse whereas another customer may communicate with another instance of the service warehouse .

With reference now to additional details of a service warehouse will be described in accordance with embodiments of the present disclosure. A service warehouse may comprise a customer portal an object delivery interface an object generator and an object sub component library and repository . Although the customer portal and object delivery interface are depicted as being separate and distinct components which they may be it should be appreciated that some instances of a service warehouse may comprise a single component that acts as both a customer portal and object delivery interface .

The customer portal provides the service warehouse with the ability to expose available services to customers N as well as receive orders for services from customers N. In some embodiments the customer portal may comprise a web interface e.g. one or more web pages configured to be provided to the customer N via a markup language for example a web server a group of web servers a communication port a communication socket or any other combination of hardware and or software components that enable a customer N to remotely view contents of the service warehouse .

More specifically the customer portal may enable a customer N to view contents of the object sub component library and repository or a listing of services that can be provided to the customer N via sub components listed within the sub component library and stored in the object sub component library and repository . Some non limiting examples of services that can be displayed to a customer N via the customer portal and therefore ordered by the customer include one or more communication services such as a voicemail service a call forwarding service a dynamic device pairing service a call routing service an extension to cellular service a speech to text service a text to speech service a call recording service a media library an Interactive Voice Response IVR service a conferencing service or the like.

While the customer portal enables a customer N to view and order services the object generator is responsible for fulfilling service orders. Specifically if a customer N places an order for a particular service or set of services the object generator is invoked to gather the necessary sub components from the object sub component library and repository and bundle the sub components into an object that is deliverable directly to the customer N via the communication network . Even more specifically when the object generator receives an order for a service the object generator is configured to determine the type of service that has been ordered and also determine which sub components will be required to ultimately provide the ordered service to the ordering customer. It should be appreciated that the number and type of sub components required to provide a particular service to a particular customer may depend upon the type of equipment being used by the customer the nature of the ordered service the number of licenses of the service that have been ordered e.g. how many users at the customer site will use the service and a number of other factors.

In some embodiments an object may be custom built by the object generator to accommodate one or more customer specific requests for the service. As a non limiting example assume that a customer has just ordered a new communication service that will have a number of sub components such as a user portal sub component a call processing sub component an administrative or system management sub component and a user interface sub component. One or more of these sub components may be customized by the object generator to accommodate the specific version of the servers or processors that will ultimately execute each sub component as well as accommodate any special requests made by the ordering customer e.g. language requests look and feel requests default rules preferences etc. . The object generator is capable of retrieving the appropriate sub components by referring to the sub component library and from that sub component library determining which sub components will properly provide the service that has been ordered by the customer.

One non limiting example of an object that may be generated by the object generator is depicted in . As discussed above the object created by the object generator may comprise one or more sub components that will enable various different servers at the customer s premises to operate in a coordinated fashion to provide the ordered service. Some examples of sub components that may be included in an object used to deliver a communication service include without limitation a user portal sub component a call processing sub component and a system manager sub component . Although not depicted the object may also comprise a license sub component that defines the customer s entitlements for using the service e.g. the number of users that can be assigned the service . The object generated by the object generator may also include deployment instructions that when followed will enable the successful deployment of the object at the customer s premises by distributing the sub components to the appropriate locations servers.

It should be appreciated that the sub components may be stored in memory of the service warehouse as files executables or the like and the sub component library may simply correspond to a listing or table of the various sub components stored in memory. The sub component library may also provide links or addresses that can be used by the object generator to locate and retrieve the corresponding sub components from memory. In other words the sub component library may include a listing of sub components as well as indexing mechanisms used to locate the sub components in storage.

The object delivery interface of the service warehouse provides the object generator with the ability to deliver the object to a customer N via the communication network . In some embodiments the object delivery interface may occupy the same hardware components e.g. socket port network interface card etc. as the customer portal . In some embodiments the object delivery interface is different from the customer portal . In either implementation the object delivery interface may be configured to package or encapsulate the object generated by the object generator into one or more communication packets or files that are deliverable over the communication network . The object delivery interface may also comprise the capability to locate and transmit the object to the ordering customer.

With reference now to additional details of an illustrative customer premises will be described in accordance with embodiments of the present disclosure. The customer premises may in some embodiments correspond to an enterprise network that is owned and operated by a single customer . In other words a single customer may own lease or otherwise solely control the operation and or maintenance of the communication devices contained within the boundaries of the customer premises . Such a customer premises is commonly referred to as an enterprise network. The enterprise network may be distributed e.g. a WAN or it may be confined to a single location e.g. a LAN . In other embodiments multiple customers N share some or all of the components of the customer premises .

The premises may correspond to an enterprise network and in some embodiments may comprise a network boundary device that includes a server table a communication server one or more servers e.g. application servers feature servers etc. capable of providing one or multiple services to users one or more internal communication devices a data store one or more user portal servers one or more system manager servers and one or multiple other servers . Some or all of the components of the premises may be interconnected by a trusted or secure or private Local Area Network LAN . Some or all of the functions depicted in may be co hosted and or co resident on a single server. The depiction of components in and the other figures provided herein are generally intended to be a logical depiction of the components of the system. It should be appreciated that an enterprise network or multiple enterprise networks may comprise multiple LANs connected via a WAN such as the communication network . A single enterprise communication network is depicted in and described herein for ease of understanding and simplicity and in no way is intended to limit embodiments of the present invention to a single enterprise network .

The LAN can be secured from intrusion by untrusted parties by a gateway and or firewall located between the LAN and communication network . In some embodiments the boundary device may include the functionality of the gateway and or firewall. In some embodiments a separate gateway or firewall may be provided between the boundary device and the communication network .

Although only a single instance of each server e.g. a single communications server a single application server a single user portal and a single system manager is depicted in two or more instances of any server type may be provided in a single enterprise network or across multiple separate LANs owned and operated by a single enterprise but separated by communication network . In configurations where an enterprise or an enterprise network includes two or more servers of a single type e.g. multiple communication servers each server may comprise similar functionality but may be provisioned for providing its features to only a subset of all enterprise users. In particular as a non limiting example a first communications server may be authoritative for and service a first subset of enterprise users whereas a second communications server may be authoritative for and service a second subset of enterprise users where the first and second subsets of users generally do not share a common user. This is one reason why the network boundary device may be provided with a server table the server table may comprise the information that maps a user to their authoritative communication server .

Additionally multiple servers can support a common user community. For example in geo redundant and other applications where users aren t necessarily bound to a single application server there may be a cluster of equivalent servers where a user can be serviced by any server in the cluster.

The communications server can include a Private Branch eXchange PBX an enterprise switch an enterprise server components or applications executed within a server a virtual machine provided by a server combinations thereof or other type of telecommunications system switch or server. The communication server is in some embodiments configured to enable the execution of telecommunication functions such as the suite of applications and services made available via Avaya Aura platform of Avaya Inc. including Communication Manager Avaya Aura Communication Manager Avaya IP Office Communication Manager Branch Session Manager MultiVantage Express and combinations thereof.

In accordance with at least some embodiments of the present disclosure the mapping of user identities within a communication request does not necessarily have to occur at the network boundary device . For instance the mapping between an authoritative communication server and a user may occur behind the network boundary device within the enterprise network . In some embodiments the network boundary device may include functionality similar to a Session Border Controller SBC a firewall gateway or any other device that provides security and or translation capabilities.

In some embodiments network boundary device is responsible for initially routing communications within the enterprise network to the communications server responsible for servicing a particular user involved in a communication session. For example if a first enterprise user is being called by an external communication device then the network boundary device may initially receive the inbound call determine that the call is directed toward the first enterprise user reference the server table to identify the authoritative communications server for the first enterprise user and route the inbound call to the authoritative communications server . Likewise communications between internal enterprise users e.g. internal communication devices may first be serviced by the originating user s authoritative communications server during the origination phase of communications set up. After the origination phase is complete the authoritative communications server of the terminating or called user may be invoked to complete the termination phase of communications set up. In some embodiments the communications server for the originating and terminating user may be the same but this is not necessarily required. In situations where more than two enterprise users are involved in a communication session authoritative communications servers for each of the involved users may be employed without departing from the scope of the present invention. Additionally the authoritative communications servers for each user may be in the same enterprise network or in different enterprise networks which are owned by a common enterprise but are separated by the communication network .

Each communications server may include a service selector user preferences an object unpacker and an object distributor . As can be appreciated various modules of the communications server do not necessarily need to be implemented on the same server. Instead the modules of the communication server can be implemented in one or more different servers or in different processors within the same server.

The service selector provides the communication server with the ability to route user requests to the appropriate servers within the network . Specifically the service selector may be invoked in response to receiving a request to initiate a communication session e.g. an INVITE message in a SIP environment an HTTP GET request an inbound or outbound phone call an email message a Short Message Service SMS message etc. or a request for some other type of information e.g. a request for presence information such as via a SUBSCRIBE message a database query etc. . Once invoked the service selector may be configured to refer to the user preferences to determine which server is to be activated next. For example the communication server may receive a SIP message and the service selector may refer to the user preferences to determine which server is to receive the SIP message next. More specifically the communication server may be configured to establish a chain of Back to Back User Agents B2BUAs in at least one of a data and media path of a communication session by sequencing each B2BUA into an application sequence one by one until the entire application sequence has been constructed.

The user preferences for a communication server contains the service preferences for each user for which it is authoritative. In the example of a communications service the user preferences may define which applications from the application server should be invoked for a particular user s application sequence. Other types of user preferences may include User Interface preferences data retrieval preferences presence information and privacy preferences and the like. In some embodiments the user preferences may be in a table format and may be provisioned by users and or by administrative personnel. The user preferences for a particular user are referenced by the service selector to determine which if any services and what components of that service e.g. sub components should be invoked for the user. Again referring to the communication type service the service selector may be configured to provide communication features directly into the communication session or determine an application sequence that will be invoked during set up and used during the communication session.

The object unpacker and object distributor can be used by the communication server to handle objects that are received from the service warehouse . It should be appreciated that the object unpacker and object distributor does not necessarily need to reside in the same server such as the communication server . For instance both the object unpacker and object distributor can be resident on the system manager . As another example the object distributor may be provided in the system manager and each server that receives a sub component e.g. may have its own object unpacker .

In some embodiments when the service warehouse generates and sends an object to the enterprise the boundary device may route the message s containing the object to the communication server . As can be seen in an object may comprise multiple constituent parts such as a user portal sub component a set of deployment instructions a call processing sub component and a system manager sub component . Each of these sub components may specifically designed to be sent to and executed by a different server.

Accordingly once received at the communication server the object unpacker is configured to identify the various constituent parts of the object and extract them from the object . In some embodiments each sub component of the object may correspond to a different file executable e.g. instruction set set of files or set of executables. Unpacking the object may simply correspond to the object unpacker extracting each file executable corresponding to each sub component and temporarily storing the extracted file executable at memory in the communication server .

The object unpacker may then invoke the object distributor to distribute the various sub components to the appropriate servers in accordance with the deployment instructions contained within the object . More specifically the object distributor may refer to the deployment instructions and cause the call processing sub component to be deployed to either the application server e.g. as an application sub component or another part of the communication server . The user portal sub component may be deployed to the user portal e.g. as a user portal sub component . The system manager sub component may be deployed to the system manager server e.g. as a system manager sub component . Once deployed by the object distributor each sub component of the now deployed object can be executed by its corresponding server. In some embodiments the deployed sub components can work in cooperation with one another to provide the full functionality of a service.

As a non limiting example if the downloaded object corresponds to a new communication application e.g. a call recording service a dynamic device pairing service a call forwarding service a voicemail service a call log service a caller identification service an encryption service etc. when such a service is needed for a user during a communication session the user may be provided with the service by the combined execution of each sub component on each server . More specifically the call processing sub component stored on and executed by the application server may be the sub component that is sequenced into the communication session as a B2BUA. The user portal sub component may enable a user to view and or configure the particular service his her preferences for the service and perform other functions related to the service e.g. via a web based user interface . The system manager sub component may enable the user and or a system administrator e.g. an administrator of the enterprise network to control permissions and or user access to the service. Much like the user portal sub component the system manager sub component may also be made available via a web based user interface or the like.

As will be described in further detail herein even though the object is deployed throughout the network e.g. for a customer it may be possible to limit which users are allowed to access and use the service or service version. In other words users of the network may not necessarily have access to every service deployed in the network and some users may have access to different services or service versions than other users.

Although only one communication server two application servers one user portal server and one system manager server are depicted one skilled in the art will appreciate the one two three or more of any type of server can be provided and each server may be configured to provide one or more of the functions discussed herein.

The applications that can be included in a particular application sequence e.g. via the communication server and application server are generally included to accommodate the user s preferences and to provide communication services in accordance therewith. It should be appreciated however that the user preferences in some embodiments are only within the bounds of services enabled for the user by the system administrator. Furthermore some services assigned by the administrator may not be capable of being disabled by the user based on user preferences e.g. mandatory call recording services assigned to the user by the administrator may not be capable of being disabled .

Applications may vary according to media type function and the like. Exemplary types of applications that can be provided via the sub components include without limitation an EC 500 application a call setup application a voicemail application an email application a voice application a video application a text application a conferencing application a call recording application a communication log service a security application an encryption application a collaboration application a whiteboard application mobility applications presence applications media applications messaging applications bridging applications and any other type of application that can supplement or enhance communications. Additionally one two three or more applications of a given type can be included in a single application sequence without departing from the scope of the present invention.

The communication server application server user portal server and system manager server may correspond to but a few types of servers that can be deployed in the network . Other servers may be provided that includes other sub component types . Suitable examples of such servers and or sub component types include without limitation management servers agents user provisioned data stores serviceability servers agents media processing servers agents Voice eXtensible Markup Language VXML stores content stores email servers voicemail servers calendaring servers conferencing servers presence servers and other types of servers known to provide particular services to client devices. In some embodiments the other servers may also be considered application servers which provide one or more applications for use in a communication session.

The internal communication devices can be similar or identical to communication devices outside the network except the internal communication devices are provisioned and often owned by the enterprise administering the network . Illustrative types of communication devices include without limitation cellular phones smartphones laptops Personal Computers PCs Personal Digital Assistants PDAs digital phones analog phones and or any other type of capable phone softphone or digital telephone. Examples of suitable telephones include the 1600 2400 4600 5400 5600 9600 9620 9630 9640 9640G 9650 9608 9611 9621 9641 and Quick Edition telephones IP wireless telephones such as Avaya Inc. s IP DECT phones video phones such as Avaya Inc. s Videophone and softphones such as Avaya Flare .

The data store can be configured to includes enterprise subscriber information such as name job title electronic address information e.g. telephone number email address instant messaging handle direct dial extension and the like subscriber contact lists e.g. contact name and electronic address information other employee records user preferences and the like. Information contained in the data store can be made available to one or more of the servers via various types of databases servers etc.

The various servers and components depicted in may be implemented separately i.e. on different servers or together i.e. on a single server . In particular two or more depicted components e.g. communication server and application server may be implemented on a single server without departing from the scope of the present invention. Thus a single device may provide the functionality of several components depicted separately in FIG. . As another example the boundary device and communication server may be implemented on a single device.

As can be seen in a particular sub component deployed on a server e.g. a system manager sub component deployed on the system manager server may correspond to a particular service type and version of that service type. Several different service types or different versions of the same service type can be deployed on a single server without departing from the scope of the present disclosure. Service types may be broadly defined e.g. communication service web service media service etc. or narrowly defined as a specific product offered by a specific company e.g. Avaya one X Communicator Avaya one X Mobile Avaya IP Office AvayaLive Connect Avaya Aura Conferencing Unified Messaging Avaya Flare Experience WebEx Collaboration Services speech analytics or data mining services such as those provided by Aurix etc. . If sub components of a common service type and version of that service type are provided on multiple different servers then those sub components may cause the different servers to cooperate with one another in a way that seamlessly provides the common service type and version of that service type. Although not shown it should be appreciated that templates see can be administered and assigned to users on the system manager . Those administered templates can then be accessed by other servers to determine the services versions available to a given user.

As mentioned above although a licensing sub component is not depicted a licensing sub component can be also deployed perhaps on a licensing server. Other servers e.g. system manager can then check with the licensing server to make sure the appropriate licenses are present to allow the user of that service. This license information could include the number of users that can have the service assigned in the template and system manager would not allow more users to be assigned the service than allowed by the licensing sub component.

Referring back to it has already been described how an object may comprise a plurality of sub components and a set of deployment instructions that when followed or executed by the object distributor cause the various sub components to be distributed to different servers in a network . In some embodiments the deployment instructions in addition to containing instructions to deploy the object once downloaded by a customer N may also contain other information that described the object . More specifically the deployment instructions may also include product documentation user manuals administration manuals configuration guidelines and any other type of data that describes the object. In some embodiments the deployment instructions may be provided in the form of one or more Enterprise Archive EAR files and or a Web application Archive WAR files. Likewise the sub components can also be packaged in the object as one or more EAR and or WAR files.

An EAR file is a file format used by Java EE for packaging one or more modules into a single archive so that the deployment of the various parts of that single archive on a single server can occur simultaneously and coherently. Thus once an EAR file of a particular sub components has been directed to a particular server e.g. a user portal sub component has been deployed to the user portal server in accordance with the deployment instructions the inherent nature of the EAR file will cause that particular sub component to be deployed within the particular server seamlessly. Similar to an EAR file a WAR file is a Java Archive JAR file used to distribute a collection of JavaServer Pages Java Servlets Java classes XML files tag libraries static web pages HTML and related files and other resources that together constitute a web application. The JAR file format used by the WAR file is an archive file format used to aggregate many Java class files and associated metadata and resources into one file to easily distribute the application software or libraries on the Java platform.

In some embodiments some of the sub components of the object may be packaged as an EAR file while other sub components of the object may be packaged as a WAR file. The type of file used for the sub component will depend on the nature of the sub component and the capabilities of the server that will eventually receive and deploy the sub component. As a non limiting example the call processing sub component and deployment instructions may be provided as EAR files whereas the system manager sub component and user portal sub component may be provided as WAR files.

With reference now to additional details of a template that can be used to control per user access to a service or per customer access to a shared service will be described in accordance with at least some embodiments of the present disclosure. Although many details of the template will be described in connection with controlling per user access to services it should be appreciated that teachings with respect to per user access can be easily applied to per customer access to a shared service . Furthermore although the template will be described with respect to a particular structure e.g. a table structure it should be appreciated that embodiments of the present disclosure are not so limited. More specifically any type of data structure or collection of data structures can be used to provide the features of the template discussed herein.

A template may comprise a number of data fields that can be provisioned by an end user of a service and or by a system administrator. The types of data fields that may be included in the template include without limitation a user identifier field and a plurality of service identifier fields .

The user identifier field may identify a particular user in an enterprise network. For example the user identifier field may identify an employee of a customer N a customer of a business an administrator of a business a group of employees a group of customers etc. The user identifier field may also be used as an identifier of customers if a communication service is shared amongst a plurality of different customers. Any string of numbers characters symbols bits or the like can be used to uniquely identify a user or customer in the user identifier field . Examples of data that can be used to identify a user include without limitation name address social security number employee number title aliases e.g. Address of Record AoR etc. Examples of data that can be used to identify a customer include without limitation company name company abbreviations trademarks numbers etc.

Each service identifier fields may correspond to a different service that is available to a user by virtue of the fact that a corresponding object has been downloaded at the network and the required sub components have been distributed to the appropriate servers within the network . Once an object is downloaded and deployed at the network a new field that identifies the service provided by the object may be added to the template .

Default settings for user access to a service may be defined within the downloaded object e.g. via the deployment instructions and or they may be defined by rules created by a system administrator of the network . As an example the default settings for user access may define that no user is allowed access to the corresponding service. Representation of such a permission or lack thereof is depicted with respect to the first communication service identified in the first service identifier field for user .

As another example the purchaser of the service from the service warehouse e.g. an administrator of network may define which users will initially be allowed to use the service at the time of purchase. The object generator at the service warehouse may construct the object in accordance with the purchaser s request. In particular the deployment instructions may define that when the newly created field is created in the template only the users identified by the purchaser will have access to the service. All other users will not be allowed access to the service.

In the depicted table structure the intersection between a user s row and the service type s column may be used to define what access permissions the user is allowed to have with respect to the service. These permissions may be statically defined for a specific version of the service type. Alternatively the permissions may comprise a wildcard value that defines the user is allowed to access a range of versions of the corresponding service type e.g. any version earlier than version X . Alternatively the permissions may comprise a value that allows the user to access any version or the latest version of a particular service.

An advantage to using the template is that different users of the same enterprise and within the same network can have different access permissions for a service. As can be seen in the example of user is allowed access to version 1.0 of communication service identified in field whereas user is allowed access to version 1.1 of the same communication service. The field also defines that group A of users are not allowed any access to communication service but group B is allowed access to version 3.1 of the same communication service. If there is a conflict between permissions defined individually for a user versus permissions defined on a group basis for the same user e.g. user is a part of group A then the permissions may be controlled by the user s individually defined permissions. It may be advantageous however to have certain conflicts be controlled by group permissions rather than individual permissions.

In some embodiments the template may be included in the user preferences and may be referred to by the service selector when determining which service types and versions thereof a user is allowed to access. While the template may be provided as part of the user preferences it may be possible to restrict a user from changing editing or writing data to some or all of the template . In other words just because the template is included in the user preferences does not necessarily make the entire template available to the user for editing. It may be possible however to allow the user to edit portions of the template within certain parameters that are either defined by the network administrator or the provider of the service e.g. the operator of the service warehouse .

With reference now to a data structure used to allow the hierarchical definition and alteration of rules with respect to a service will be described in accordance with at least some embodiments of the present disclosure. The data structure may be integrated into the template or it may be separate from the template . As an example if user defines certain rules for communication service within data structure those user defined rules may either be copied into the intersection of user l s row and field . Alternatively a pointer from the intersection of user s row and field may point to the corresponding location in data structure . The data structure may be included in the user preferences or made available to the service selector remotely.

In some embodiments the data structure comprises hierarchically structured rules that enable a user to define any type of operating parameter rule or permission with respect to a particular service as long as it is within a permissible set of rules defined hierarchically by the provider of the service and the network administrator. More specifically the data structure may comprise for each service available within a network a first layer of rules a second layer of rules a third layer of rules a fourth layer of rules etc. In some embodiments the first layer of rules comprises provider defined rules for the particular service the second layer of rules comprises administrator defined rules for the service the third layer of rules comprises either user defined rules group defined rules or default rules for the service and the fourth layer of rules comprises user defined rules within the group defined rules .

The first layer of rules may control options available to the lower layers of rules. As an example if the provider defines that a particular service can have one of three types of user interfaces e.g. three different skins for a web interface then the administrator users and groups may be allowed to pick which of the three interfaces are to be used by a particular user when accessing the service.

The second layer of rules further refine the first layer of rules but cannot broaden or extend beyond the first layer of rules . Continuing the above example the administrator may define within the administrator rules that only the first and second types of user interfaces will be made available to users for the particular service. The administrator is not allowed to define a fourth interface type outside of the interface types defined by the provider.

Similar to the second layer of rules the third layer of rules can further refine the second layer of rules and first layer of rules but not broaden or extend beyond the first and second layer of rules . Again continuing the interface example the user may be allowed to select between the first and second types of user interfaces for the particular service. The user is not allowed to select the third interface because it has been restricted by the administrator and is not allowed to select a fourth interface because it has not been enabled by the provider. The user rule may specifically define the user s selection for the service or it may refer to the default rules if the user has not defined their selection.

Much like the user rules the group rules and user rules may be used by users or groups of users to further refine a preference for a service or an aspect of a service. It should be appreciated that the rules defined within the data structure are not limited to defining which interface a users employs to access a service. To provide another use case for the data structure a provider may provide a service to a customer via a downloadable object . The service may correspond to a particular communication service type e.g. dynamic device pairing routing rules EC500 etc. .

Consider for example that the particular communication service type is a first communication service and the first communication service has 10 different versions. The latest versions e.g. versions 9 and 10 are supported by the service provider and the earliest versions e.g. versions 1 and 2 are no longer supported by the service provider. In this scenario the provider may define within the first layer of rules that only versions 3 10 of the service are available. Continuing this scenario the administrator may only have purchased licenses to versions 7 9 for all users and may only have purchased a license to version 10 for user e.g. a test user . The administrator can define within the second layer of rules that versions 7 9 are available to all users of the network whereas version 10 is only available to user . The administrator may also define the version of the service that will be used if a user does not select a service version for their use e.g. via default rules . Any user or user group will then be allowed to select a specific version of the service among versions 7 9 while user will be allowed to select a specific version of the service among versions 7 10. This enables the system administrator to test out new versions of a service without having to purchase a license for the service for every user in the network . It also allows each user to have some latitude in selecting the version of the service that they employ. Thus early adopter type users are allowed to select newer versions of the service whereas late adopter type users are allowed to keep using the older version to which they have grown accustomed.

With reference now to a method of receiving and fulfilling an order for a service such as a communication service will be described in accordance with at least some embodiments of the present disclosure. The method begins when an order for a service is received at the service warehouse step . In some embodiments the order for a service may be received via the customer portal e.g. as a web based request .

The method continues with the object generator analyzing the order to determine parameters of the requested service step . Specifically the object generator may determine from the parameters of the request what service has been requested what version of the service has been requested what sub components are required to build the specified version of the service what deployment instructions will be required to properly distribute the sub components at the purchaser s premises how many licenses for the service have been purchased which users will initially be permitted access to the service which users will initially be denied access to the service provider rules for the service and or what types of servers the purchaser has at their premises to support the service. Additionally in some embodiments the order may include metadata that describes one or more aspects of the current service and or the desired service. For example an order may comprise metadata describing whether or not a particular existing service or components of that service have certain capabilities such as High Availability HA capabilities. The metadata contained within the order may help define which types of updates are available to or required by the customer to successfully update the service.

Based on the analysis of the order the object generator prepares the downloadable object in accordance with the parameters of the request step . Specifically the object generator retrieves the required sub components and builds the object . The sub components may be packaged within the object as one or more of an EAR file and WAR file. Moreover the deployment instructions may be packaged as an executable EAR file WAR file text file or the like.

The retrieved sub components may then be packaged into the object and prepared for transmission to the purchaser customer via the communication network step . In this step the object generator may prepare the object as one or more packets to be transmitted via a communications channel established over the communication network between the service warehouse and the customer . This may include attaching the object to one or more electronic messages e.g. an email message SMS message or the like packetizing the object into one or more packets that are capable of transmission across the communication network or the like. The object generator and or object delivery interface may perform the packaging step.

Thereafter the downloadable object is delivered from the object delivery interface to the purchaser via the communication network step . As discussed above this transmission step may include sending one or more electronic messages or packets that include some or all of the object .

With reference now to a method of deploying and installing a downloadable object will be described in accordance with embodiments of the present disclosure. The method is initiated when a customer e.g. a system administrator of one or more networks provides an order for a service such as a communication service step . After the order for the service has been placed the steps of are performed and the customer waits until the downloadable object is received at the network . The downloadable object may initially be received at the boundary device and may subsequently be routed to the communication server where it is initially downloaded e.g. stored in persistent or temporary memory on the communication server or some other server step .

The next step is for the object unpacker and or object distributor to analyze the deployment instructions to determine the contents of the object and where each sub component is to be directed within the network step . Based on the deployment instructions the various sub components of the object are deployed to their corresponding servers within the network step . Upon receiving the sub component the receiving server will unpack the sub component e.g. unpack the EAR or WAR file and install it within the server according to the instructions contained within the sub component step . As a non limiting example the user portal sub component may be deployed to the user portal server where it is stored as sub component the call processing sub component may be deployed to the application server where it is stored as sub component and the system manager sub component may be deployed to the system manager server where it is stored as sub component .

With reference now to a method of customizing a downloadable object will be described in accordance with embodiments of the present disclosure. The method begins much like the method of with a customer placing an order for a service such as a communication service step . The method continues with the object generator receiving information regarding the default features to be included in the communication service along with default rules that will cause the service to behave in accordance with the default features step . In some embodiments the default features may comprise a set of base rules and or a range of rules that define acceptable or unacceptable use. Moreover the default features may define which sub components are provided for the service unless specialized sub component are requested or ordered.

The object generator then compares the default features of the service as determined in step with the features defined by the purchaser in step to determine if a customized service is to be generated specifically for this order step . In some embodiments the purchaser may not define any special features for the service in which case default features and default rules may be used for the generation of the object step . In some embodiments the purchaser may define one or more customized aspects of the service that are different from the default features of the service or the purchaser may define that certain users are to receive default features of the service and other users are to receive customized features step .

When the purchased service comprises one or more customized features the object generator may retrieve the necessary sub components and alter the sub components themselves deployment instructions for the object provider rules and or default rules for the service. After the required features and rules have been selected the object generator may build the downloadable object in accordance with the selected features step .

With reference now to a method of deploying a service during system run time will be described in accordance with embodiments of the present disclosure. Although the method will be described in connection with a communication service it should be appreciated that embodiments of the present disclosure are not limited to communication services and may be employed with the run time deployment of any type of service such as web based services media services presence services etc.

The method is initiated when a new service is received at the purchaser s premises e.g. some component of network step . The object unpacker and or object distributor may be configured to identify which entities e.g. users within the network are to receive the service or be allowed access to the service once installed step . Prior to installing the various sub components of the service the object distributor may further determine whether any identified entity is currently using an older version of the service that has just been received step . More specifically if a service has been upgraded or replaced by the newly downloaded service the object distributor may determine whether any user identified set to receive the service is currently using an older version of that service.

If the query of step is answered negatively then the method proceeds with the object distributor distributing the sub components of the object in the normal fashion and each server that receives a sub component is allowed to immediately install its corresponding sub component and make the installed sub component available to any user upon request step .

However if the query of step is answered negatively the method continues with the object distributor distributing the sub components to the appropriate servers but additional mechanisms are invoked to ensure that the user s currently using the old version of the service are not interrupted. Specifically the object distributor may distribute the various sub components of the object to the servers and the servers may install the new sub components. At the same time the users currently using the old service version are allowed to continue using the service until they have completed its use step . This may be accomplished in a number of ways. For example the object distributor may instruct the server that receives the sub component to download and install the sub component but only use the sub component for new requests for the service step . In other words requests for a service that were received prior to the server receiving the sub component may continue to be processed by the old version of the service e.g. the old sub component .

This may also be accomplished by informing the service selector that messages received in connection with an old communication session e.g. a session established prior to receiving and downloading the object should continue to be routed to the servers and sub components that were initially invoked for the communication session. The service selector may be instructed to only invoke the new sub components for communication sessions established after the installation of the sub components for the new service. This enables the new service to be used by users after they have finished using the old service even if the old service version was in use during the download and installation of the sub components of the new service step .

To provide a more concrete but non limiting example consider a new voicemail system being received at the communication server and that new voicemail system is to replace an older voicemail system. If an object containing the sub components for the new voicemail system is received while a first user is currently using the old voicemail system the object distributor may still cause the necessary sub components to be distributed to the corresponding servers where they are installed. This distribution and installation may occur while the first user is currently using the old voicemail system. A second user may try to connect to the voicemail system while the first user is still using the old voicemail system and the service selector may connect the second user with the new voicemail system even though the first user is still using the old voicemail system. This routing may occur due to the service selector referring to the user preferences and the version definitions provided in the template . This may also occur for other users that were not using the old voicemail system while the new voicemail system was being installed. Once the first user has completed his her session with the old voicemail system any new requests from the first user to connect with the voicemail system will be routed by the service selector to the sub components that provide the new voicemail system. Accordingly the first user is not interrupted during the installation of the new voicemail system and other users are immediately able to access the new voicemail system once it has been installed.

Another example scenario may occur whereby a user continues to use an older version of a service even after a newer version of the same service has been installed. Specifically as long as the user is assigned to use the older version rather than the newer version that user may continue to use the older version instead of the newer version.

With reference now to a method of upgrading a service will be described in accordance with embodiments of the present disclosure. The method begins when a new service is received at a customer s premises step . The method continues with the object unpacker and or object distributor identifying the entities to receive the new service step . This information may be defined within the object e.g. via the deployment instructions or it may be defined in some other location e.g. within the system manager sub component . Based on the information obtained in step the object distributor builds a template or adds a field to an existing template such that the template defines the permissions for the new service among various entities within the network step .

After the template has been built or updated the object distributor causes the new service to be distributed to the appropriate servers and installed therein such that the new service is made available within the network step . Once installed the service selector is capable of applying enforcing the rules defined within the template as well as rules contained within any other data structure defining user permissions and the like to any request for that service step . As an example if a user attempts to make an outgoing phone call after the new service has been installed and the new service corresponds to a call recording type service a speech to text service a conversational analytics service or the like then the service selector may upon receiving the message that initiates the call route the message through one or more sub components so that the new version of the service is used for the user s outgoing call.

Over time the template may be updated to add a user to the new service remove a user from the new service add a group to the new service remove a group from the new service etc. Changes to the template may be initiated via a user interacting with the system manager sub component the user portal sub component or any other module within the network that enables the viewing and editing of the template . If it is determined that a change to the template is required step the system manager sub component and or the user portal sub component may instruct the communication server to update the corresponding fields in the template if the template is being maintained at the communication server . In any event the server responsible for managing the template will be instructed to update the template to reflect the change step . Thereafter the method returns to step .

In some embodiments rather than returning directly to step an additional step of removing uninstalling may be performed. Specifically after every user of a communication system has been migrated away from an old service version the old service version and all associated sub components may be uninstalled from their corresponding servers.

In some embodiments individual components may be upgraded during a service upgrade rather than upgrading every component of the service. More specifically if the original service has a first call processing component a first user portal component and a first licensing component e.g. for 10 users the original service may be upgraded to an upgraded service by simply updating one or more of the original service s components. As an example if a customer only wants to upgrade the license part of their service it may only be necessary to update the licensing component of the service to a second licensing component e.g. for 20 users without having to updating any other component of the service. It should be appreciated that depending upon which component of the service is upgraded the costs associated with that service may need to be adjusted.

With reference now to a method of hierarchically structuring attributes or rules for a service will be described in accordance with embodiments of the present disclosure. In some embodiments the service and the object representing the service is built and delivered to a customer with a first level of attribute permissions step . This first level of attribute permissions may correspond to provider rules and may be default rules or a range or rules. In some embodiments the purchaser may define during the ordering process that a second level of attribute permissions should be included in the object step . Alternatively or in addition the purchaser may define the second level of attribute permissions after the object is received at the network . Regardless of when the second level of attribute permissions are defined the second level of attribute permissions are created within the data structure to further refine or limit the first level of attribute permissions .

The method continues by determining if any more levels of attribute permissions will be incorporated into the data structure to further limit the second level of attribute permissions step . If this query is answered affirmatively a next level of attribute permissions are defined for the service step . Steps and may be repeated as necessary until the desired number of hierarchical levels are created. Once all desired levels of attribute permissions have been created the method continues with the construction of the data structure that hierarchically orders the attributes based on the defined levels step . Thus the first level of attribute permissions define the broadest bounds of the attribute permissions e.g. as a range or list of permissible attributes and the lower levels of the attribute permissions further define the attributes or rules within the boundaries of all higher levels of attribute permissions.

In the foregoing description for the purposes of illustration methods were described in a particular order. It should be appreciated that in alternate embodiments the methods may be performed in a different order than that described. It should also be appreciated that the methods described above may be performed by hardware components or may be embodied in sequences of machine executable instructions which may be used to cause a machine such as a general purpose or special purpose processor GPU or CPU or logic circuits programmed with the instructions to perform the methods FPGA . These machine executable instructions may be stored on one or more machine readable mediums such as CD ROMs or other type of optical disks floppy diskettes ROMs RAMs EPROMs EEPROMs magnetic or optical cards flash memory or other types of machine readable mediums suitable for storing electronic instructions. Alternatively the methods may be performed by a combination of hardware and software.

Specific details were given in the description to provide a thorough understanding of the embodiments. However it will be understood by one of ordinary skill in the art that the embodiments may be practiced without these specific details. For example circuits may be shown in block diagrams in order not to obscure the embodiments in unnecessary detail. In other instances well known circuits processes algorithms structures and techniques may be shown without unnecessary detail in order to avoid obscuring the embodiments.

Also it is noted that the embodiments were described as a process which is depicted as a flowchart a flow diagram a data flow diagram a structure diagram or a block diagram. Although a flowchart may describe the operations as a sequential process many of the operations can be performed in parallel or concurrently. In addition the order of the operations may be re arranged. A process is terminated when its operations are completed but could have additional steps not included in the figure. A process may correspond to a method a function a procedure a subroutine a subprogram etc. When a process corresponds to a function its termination corresponds to a return of the function to the calling function or the main function.

Furthermore embodiments may be implemented by hardware software firmware middleware microcode hardware description languages or any combination thereof. When implemented in software firmware middleware or microcode the program code or code segments to perform the necessary tasks may be stored in a machine readable medium such as storage medium. A processor s may perform the necessary tasks. A code segment may represent a procedure a function a subprogram a program a routine a subroutine a module a software package a class or any combination of instructions data structures or program statements. A code segment may be coupled to another code segment or a hardware circuit by passing and or receiving information data arguments parameters or memory contents. Information arguments parameters data etc. may be passed forwarded or transmitted via any suitable means including memory sharing message passing token passing network transmission etc.

While illustrative embodiments of the disclosure have been described in detail herein it is to be understood that the inventive concepts may be otherwise variously embodied and employed and that the appended claims are intended to be construed to include such variations except as limited by the prior art.

