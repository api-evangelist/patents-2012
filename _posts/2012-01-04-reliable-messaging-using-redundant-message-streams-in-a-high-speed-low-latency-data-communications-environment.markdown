---

title: Reliable messaging using redundant message streams in a high speed, low latency data communications environment
abstract: A method includes receiving active application messages that are part of an active message stream in a subscribing client device from an active feed adapter. Each active application message is characterized by an active source stream identifier, an active source stream sequence number, and an active message sequence number. The method includes receiving, in response to a failover from the active feed adapter to a backup feed adapter, backup application messages in the subscribing client device from the backup feed adapter. Each backup application message is characterized by a backup source stream identifier, a backup source stream sequence number, and a backup message sequence number. The method includes administering, by the subscribing client device, the backup application messages in dependence upon the active stream source identifier, the active stream source sequence number, the backup stream source identifier, and the backup stream source sequence number.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08549168&OS=08549168&RS=08549168
owner: International Business Machines Corporation
number: 08549168
owner_city: Armonk
owner_country: US
publication_date: 20120104
---
This application is a continuation of U.S. patent application Ser. No. 11 426 849 entitled RELIABLE MESSAGING USING REDUNDANT MESSAGE STREAMS IN A HIGH SPEED LOW LATENCY DATA COMMUNICATIONS ENVIRONMENT filed Jun. 27 2006 now allowed.

Embodiments of the inventive subject matter generally relate to the field of data processing or more specifically methods apparatus and products for reliable messaging using redundant message streams in a high speed low latency data communications environment.

Messaging environments are generally available to provide data communication between message sending devices and message receiving devices using application messages. An application message is a quantity of data that includes one or more data fields and is passed from a message producer installed on a message sending device to a message consumer installed on a message receiving device. An application message is a form of message recognized by application software operating in the application layer of a data communication protocol stack as contrasted for example with a transport message or network message which are forms of messages recognized in the transport layer and the network layer respectively. An application message may represent for example numeric or textual information images encrypted information and computer program instructions.

A messaging environment may support point to point messaging publish and subscribe messaging or both. In a point to point messaging environment a message producer may address an application message to a single message consumer. In a publish and subscribe messaging environment a message producer may publish an application message to a particular channel or topic and any message consumer that subscribes to that channel or topic receives the message. Because message producers and message consumers communicate indirectly with each other via a channel or topic in a publish and subscribe environment message transmission is decoupled from message reception. As a consequence neither producers nor consumers need to maintain state about each other and dependencies between the interacting participants are reduced or eliminated. A publish and subscribe environment may therefore allow message publishers and message subscribers to operate asynchronously.

For further explanation of a messaging environment sets forth a block diagram illustrating a typical messaging environment for data communications that includes a message sending device a message receiving device and a message administration server . The message sending device is a computer device having installed upon it a message producer a set of computer program instructions configured for transmitting application messages to the message administration server for delivery to a message receiving device. In the example of the message producer transmits application messages to the message administration server on a message stream . The message sending device may produce the transmitted messages by generating the application messages from data of the message sending device itself or data received from some other source. The message receiving device is a computer device having installed upon it a message consumer a set of computer program instructions configured for receiving application messages from the message administration server . In the example of the message consumer receives the application messages from the message administration server on a message stream . In the example of the message stream and the message stream are data communication channels implemented using for example the User Datagram Protocol UDP and the Internet Protocol IP .

In either a point to point messaging environment or a publish and subscribe messaging environment the application messages transmitted from message sending devices to message receiving devices typically pass through the message administration server . The message administration server is computer device having installed upon it a message administration module computer program instructions configured for administering the messages transmitted from the message producer to the message consumer . Examples of message administration modules may include the IBM WebSphere MQ the Open Message Queue from Sun Microsystems and the OpenJMS from The OpenJMS Group. In a point to point messaging environment the message administration module provides message queuing for the message consumer as the message administration module receives application messages addressed to the consumer from various message providers. In a publish and subscribe messaging environment the message administration module administers the various channels or topics to which message producers publish and message consumers subscribe. In either message environment the message administration module may also provide security services to ensure that the only messages arriving at the messaging consumer from the message producer are those messages that the message consumer is authorized to receive and that the message producer is authorized to send. Moreover the message administration module may also coordinate providing to the message consumer backup messages from a backup message producer in the event that a failure occurs on the message producer .

Current messaging environments such as for example the one described above with reference to have certain drawbacks. Application messages transmitted to a message administration server from a message sending device for delivery to a message receiving device are delayed in the message administration server until the message administration server can process the messages. The message processing that occurs in the message administration server increases the overall messaging latency of the messaging environment and decreases the overall speed for transmitting data in the data communications environment. Messaging latency is the time period beginning when a message producer transmits an application message and ending when a message consumer receives the application message.

In many data communication environments even slight increases in messaging latency are costly. Consider for example a financial market data environment. A financial market data environment is a data processing environment used to communicate information about financial markets and participants in financial markets. In a financial market data environment an application message is commonly referred to as a tick and represents financial market data such as for example financial quotes or financial news. Financial quotes include bid and ask prices for any given financial security. A bid refers to the highest price a buyer is willing to pay for a security. An ask refers to the lowest price a seller is willing to accept for a security. In a financial market data environment a message producer may provide quotes for the purchase or sale of financial securities based on real time financial market conditions and a message consumer may buy and sell financial securities based on financial quotes. When a message consumer buys or sells a financial security based on the quoted price provided by the message producer the ability of a message consumer to obtain the bid or ask in the quote for the financial security is largely influenced by messaging latency in the financial market data environment. The higher the messaging latency the less likely a buy or sell order generated by the message consumer will execute at or near the price stated in the financial quote. In fact a highly volatile security may fluctuate in price dramatically over a time period of a few seconds.

Current solutions to reduce messaging latency are to remove the message administration server from the messaging environment. In such current solutions the message sending devices send application messages directly to message receiving devices. The drawback to such current solutions is that removing the message administration server removes the administration functionality provided by the message administration server from the messaging environment. Current solutions therefore effectively offer no solution in messaging environments where the administrative functions of a message administration server are required. Consider again the financial market data environment example from above. In such an exemplary financial market data environment consider that a message receiving device is only authorized to receive financial quotes on certain financial securities or only authorized to receive financial quotes that are at least fifteen minutes old. Removing the message administration server from such a financial market data environment removes the ability to administer the messages received by the message receiving device from the message sending device in the financial market data environment.

An additional drawback to current messaging environments such as for example the one describe above with reference to involves the situation in which a message administration server receives application messages from both an active message sending device and a backup message sending device and each message sending device generates the application messages from data received from a plurality of sub sources. As each message sending device generates the application messages each message is assigned a message sequence number. Because no guarantee exists that each message sending device will process the data received from the plurality of sub sources in the same order the message sending devices often assign the same message sequence number to messages containing different data. When the active message sending device fails the message administration server receives application messages generated from the backup message sending device and must perform data recovery to identify lost or duplicate data. Because each message sending device may assign the same message sequence number to messages containing different data message administration servers in current messaging environments cannot rely on the message sequence number to perform data recovery such as eliminating duplicate application messages received from the backup message sending device. Rather message administration servers must examine the entire contents of each message to determine whether a message administration server has received a duplicate application message during failover. Examining the entire contents of the application message however greatly increases messaging latency during a failover from an active message sending device to a backup message sending device. A need therefore exists to more efficiently ensure correct and consistent data identification by the message administration server of the contents of the application messages to perform data recovery.

In some example embodiments a method includes receiving active application messages that are part of an active message stream in a subscribing client device from an active feed adapter. Each active application message is characterized by an active source stream identifier an active source stream sequence number and an active message sequence number. The method includes receiving in response to a failover from the active feed adapter to a backup feed adapter backup application messages that are part of a backup message stream in the subscribing client device from the backup feed adapter. Each backup application message is characterized by a backup source stream identifier a backup source stream sequence number and a backup message sequence number. The method includes administering by the subscribing client device the backup application messages in dependence upon the active stream source identifier the active stream source sequence number the backup stream source identifier and the backup stream source sequence number. The method also includes receiving by the subscribing client device and from the backup feed adapter the backup application messages in response to the backup feed adapter receiving an administrative application message and an active message sequence number that specifies a point in a transmission sequence where the active feed adapter will transmit the administrative application message to the subscribing client device and in response to the backup feed adapter identifying a backup message sequence number of a most recent backup application message processed in the backup feed adapter prior to receiving the administrative application message and in response to the backup feed adapter determining that the backup feed adapter is capable of synchronizing transmission of the administrative application message to the subscribing client device on the backup message stream in dependence upon the received active message sequence number the backup sequence number of the most recent message transmitted to the client device and a predetermined synchronization sequence number threshold.

The description that follows includes exemplary systems methods techniques instruction sequences and computer program products that embody techniques of the present inventive subject matter. However it is understood that the described embodiments may be practiced without these specific details.

Exemplary methods apparatus and products for reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . sets forth a network and block diagram illustrating an exemplary computer data processing system for reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention. The system of operates generally for reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention as follows. A stream administration server brokers establishment of an active message stream to a subscribing client device from an active feed adapter . The active message stream is capable of communicating active application messages where each active application message is characterized by an active source stream identifier an active source stream sequence number and an active message sequence number. The stream administration server brokers establishment of a backup message stream to the subscribing client device from a backup feed adapter . The backup message stream is capable of communicating backup application messages representing duplicates of the active application messages wherein each backup application message is characterized by a backup source stream identifier a backup source stream sequence number and a backup message sequence number. Messaging middleware of the subscribing client device receives the active application messages from the active feed adapter . The messaging middleware of the subscribing client device receives the backup application messages from the backup feed adapter in response to a failover from the active feed adapter to the backup feed adapter . The messaging middleware of the subscribing client device administers the backup application messages in dependence upon the active stream source identifier the active stream source sequence number the backup stream source identifier and the backup stream source sequence number.

The high speed low latency data communications environment illustrated in includes a high speed low latency data communications network . The network includes an active feed adapter a backup feed adapter a stream administration server and a subscribing client device as well as the infrastructure for connecting such devices together for data communications. The network of is termed high speed low latency because the application messages sent between devices connected to the network on message streams administered by the stream administration server bypass the stream administration server . For example the application messages on the active message stream from the active feed adapter to the subscribing client device bypass the stream administration server . Similarly the application messages on the backup message stream from the backup feed adapter to the subscribing client device bypass the stream administration server . Although such messages are not delayed for processing in the stream administration server the stream administration server retains administration of the streams between devices connected to the high speed low latency data communications network .

Further contributing to the high speed low latency nature of network readers will note that the network does not include a router that is a computer networking device whose primary function is to forward data packets across a network toward their destinations. Rather each device provides its own routing functionality for data communication through a direct connection with the other devices connected to the network . Because the network does not include a computer networking device dedicated to routing data packets the network of may be referred to as a minimally routed network. Although the exemplary network illustrated in does not include a router such a minimally routed network is for explanation only. In fact some high speed low latency networks useful in reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention may include a router.

As mentioned above the high speed low latency data communications environment depicted in includes two message streams . A message stream is a data communication channel between a communications endpoint of a sending device and a communications endpoint of at least one receiving device. A communications endpoint is composed of a network address and a port for a sending device or a receiving device. A message stream may be implemented as a multicast data communication channel. In a multicast data communication channel a one to many relationship exists between a destination address for a message and the communication endpoints of receiving devices. That is each destination address identifies a set of communication endpoints for receiving devices to which each message of the stream is replicated. A multicast data communication channel may be implemented using for example the User Datagram Protocol UDP and the Internet Protocol IP . In addition to a multicast data communication channel the message stream may be implemented as a unicast data communication channel. In a unicast data communication channel a one to one relationship exists between a destination address for a message and a communication endpoint of a receiving device. That is each destination address uniquely identifies a single communication endpoint of single receiving device. A unicast data communication channel may be implemented using for example the Transmission Control Protocol TCP and IP.

The exemplary system of includes a stream administration server connected to the high speed low latency data communications network through a wireline connection . The stream administration server of is a computer device having installed upon it a stream administration module a feed adapter library an authentication module an authorization module and an authorization policy . A stream administration module is a set of computer program instructions configured for reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention. The stream administration module operates generally for reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention by brokering establishment of an active message stream to a subscribing client device from an active feed adapter and brokering establishment of a backup message stream to the subscribing client device from a backup feed adapter . In addition the stream administration module may administer the message streams by providing security services such as authenticating the subscribing client device and authorizing the subscribing client device to receive application messages from the feed adapters on the message streams .

The communications between the stream administration module and the feed adapters may be implemented using a feed adapter library . The feed adapter library is a set of functions contained in dynamically linked libraries or statically linked libraries available to the stream administration module through a feed adapter library API . Through the feed adapter library the stream administration module of the stream administration server may administer the feed adapters including providing to the feed adapters the request for a message stream from a subscribing client device. Functions of the feed adapter library used by the stream administration module may communicate with the active feed adapter through network by calling member methods of a CORBA object calling member methods of remote objects using the Java Remote Method Invocation RMI API using web services or any other communication implementation as will occur to those of skill in the art.

CORBA refers to the Common Object Request Broker Architecture a computer industry specifications for interoperable enterprise applications produced by the Object Management Group OMG . CORBA is a standard for remote procedure invocation first published by the OMG in 1991. CORBA can be considered a kind of object oriented way of making remote procedure calls although CORBA supports features that do not exist in conventional RPC. CORBA uses a declarative language the Interface Definition Language IDL to describe an object s interface. Interface descriptions in IDL are compiled to generate stubs for the client side and skeletons on the server side. Using this generated code remote method invocations effected in object oriented programming languages such as C or Java look like invocations of local member methods in local objects.

The Java Remote Method Invocation API is a Java application programming interface for performing remote procedural calls published by Sun Microsystems . The Java RMI API is an object oriented way of making remote procedure calls between Java objects existing in separate Java Virtual Machines that typically run on separate computers. The Java RMI API uses a remote procedure object interface to describe remote objects that reside on the server. Remote procedure object interfaces are published in an RMI registry where Java clients can obtain a reference to the remote interface of a remote Java object. Using compiled stubs for the client side and skeletons on the server side to provide the network connection operations the Java RMI allows a Java client to access a remote Java object just like any other local Java object.

In addition to administering the feed adapters the stream administration module of administers the message streams by providing security services such as for example authenticating the subscribing client device and authorizing the subscribing client device to receive application messages from the feed adapters on the message streams . The authentication module of is a set of computer program instructions capable of providing authentication security services to the stream administration module through an exposed authentication application programming interface API . Authentication is a process verifying the identity of an entity. In the exemplary system of the authentication module verifies the identity of the subscribing client device . The authentication module may provide authentication security services using a variety of security infrastructures such as for example shared secret key infrastructure or a public key infrastructure.

The authorization module of is a set of computer program instructions capable of providing authorization security services to the stream administration module through an exposed authorization API . Authorization is a process of only allowing resources to be used by resource consumers that have been granted authority to use the resources. In the example of the authorization module identifies the application messages that the subscribing client device is authorized to receive on the message streams . The authorization module of provides authorization security services using an authorization policy . The authorization policy is a set of rules governing the privileges of authenticated entities to send or receive application messages on a message stream. In a financial market data environment for example an authenticated entity may be authorized to receive application messages that include financial quotes for some financial securities but not other securities. The authorization policy may grant privileges on the basis of an individual entity or an entity s membership in a group.

In the exemplary system of active feed adapter is connected to the high speed low latency data communications network through a wireline connection . The active feed adapter is a computer device having the capabilities of converting application messages on active feed adapter source streams having a first format to application messages on a active feed adapter output stream having a second format and transmitting the application messages on the active feed adapter output stream to subscribing client devices. The active feed adapter source streams of are message streams from a feed source to the active feed adapter . The active feed adapter output stream of is a message stream administered by the stream administration server from the active feed adapter to the subscribing client device . Although active feed adapter receives application messages having a first format on the active feed adapter source streams and transmits application messages having a second format on the active feed adapter output stream readers will note that application messages received on a feed adapter source stream are referred to in this specification as source stream messages to distinguish such messages from the application messages transmitted to a subscribing client device on a feed adapter output stream.

In the example of the active feed adapter receives active source stream messages on the active feed adapter source streams from a feed source . The feed source is a computer device capable of aggregating data into source stream messages and transmitting the messages to a feed adapter on one or more feed adapter source streams. In a financial market data environment for example a feed source may be implemented as a feed source controlled by the Options Price Reporting Authority OPRA . OPRA is the securities information processor for financial market information generated by the trading of securities options in the United States. The core information that OPRA disseminates is last sale reports and quotations. Other examples of feed sources in financial market data environment may include feed sources controlled by the Consolidated Tape Association CTA or The Nasdaq Stock Market Inc. The CTA oversees the dissemination of real time trade and quote information in New York Stock Exchange and American Stock Exchange listed securities. The Nasdaq Stock Market Inc. operates the NASDAQ Market Center.sup. which is an electronic screen based equity securities market in the United States. In a financial market data environment a feed adapter source stream is referred to as a financial market data feed. 

Readers will note that illustrates two active feed adapter source streams . Each feed adapter source stream of is identified in the active feed adapter by an active source stream identifier. The feed source of may transmit source stream messages to the active feed adapter using more than one feed adapter source stream because the bandwidth required to transmit the messages on a single source stream is not available. In a financial market data environment for example a feed source may transmit ticks for financial securities whose ticker symbol begins with the letters A through M on one message stream and transmit ticks for the financial securities that begin with the letters N through Z on another message stream.

The active feed adapter of has installed upon it a conversion module a converter table converter functions messages message model messaging middleware and a transport engine . The conversion module is a set of computer program instructions for converting source stream messages received on the active feed adapter source streams having a first format into application messages having a second format for transmission to subscribing devices on the active feed adapter output stream .

Furthermore the conversion module is a set of computer program instructions for reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention. The conversion module operates generally for reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention by receiving active source stream messages on a plurality of feed adapter source streams where each active source stream message is characterized by an active source stream sequence number for the feed adapter source stream on which the active source stream message was received converting each active source stream message to an active application message including adding to the contents of each active source stream message the value of the active source stream identifier for the feed adapter source stream on which the active source stream message was received in the active feed adapter and an active message sequence number receiving an administrative source stream message on a feed adapter source stream and converting the administrative source stream message into an administrative application message.

The conversion module converts application messages from the first format to the second format according to the converter table . The converter table of is a table that specifies the converter functions capable of converting an application message from one format to another format. Utilizing multiple converter tables the conversion module may convert messages from a variety of input formats to a variety of output formats. In the example of the converter table specifies the converter functions capable of converting the active source stream messages received from the active feed adapter source streams having the first format to application messages having the second format for transmission to subscribing client devices on the active feed adapter output stream . That is the converter table specifics the converter functions capable of converting an active source stream message to an active application message including adding to the contents of each active source stream message the value of the active source stream identifier for the feed adapter source stream on which the active source stream message was received in the active feed adapter and an active message sequence number. In addition the converter table specifies the converter functions capable of converting an administrative source stream message into an administrative application message. An administrative source stream message is an application message received from a feed source that contains administrative information. The converter table of may be implemented using a structured document such as for example an extensible Markup Language XML document.

The converter functions of are functions capable of converting data fields in an application message from one format to another format or converting values of data fields from one value to another value. Converter functions may for example convert a 16 bit integer to a 32 bit integer convert a number stored in a string field to a 64 bit double floating point value increase the value of a particular data field by one or any other conversion as will occur to those of skill in the art. The conversion module of accesses the converter functions through a set of converter function APIs exposed by the converter functions .

In the example of conversion module uses the converter functions to convert active source stream messages to active application messages . The application messages of represent the active application messages for transmission to the subscribing client device . The format of the messages is specified in the message model . The message model is metadata that defines the structure and the format of the messages . The message model may be attached to and transmitted along with the application messages to the subscribing client device . More often however the subscribing client device and the feed adapters may receive the message model or its identifier from the stream administration server when the stream administration server brokers the message stream . A message model may be implemented using a structured document such as for example an XML document a Java object C object or any other implementation as will occur to those of skill in the art.

Before the conversion module of performs data processing on the source stream messages the conversion module receives the source stream messages from the feed source . The conversion module of may receive the source stream messages through a receiving transport engine not shown of the active feed adapter . The receiving transport engine is a software module that operates in the transport layer of the network stack and may be implemented according to the TCP IP protocols UDP IP protocols or any other data communication protocol as will occur to those of skill in the art. The receiving transport engine may provide the received source stream messages directly to the conversion module or to the messaging middleware which in turn provides the source stream messages to the conversion module.

The messaging middleware of is a software component that provides high availability services between the active feed adapter the backup feed adapter and the subscribing client device and provides synchronization services between the active feed adapter and the backup feed adapter . Messaging middleware of provides synchronization services through a data communications channel between the active feed adapter and the backup feed adapter using for example member methods of an RMI object member methods of a CORBA object web services or any other communication implementation as will occur to those of skill in the art. After the conversion module of receives application messages from the feed source and performs data processing on the application messages the messaging middleware receives the application messages from the conversion module and provides the received application messages to the transport engine for transmission to a subscribing client device on the active feed adapter output stream . The conversion module interacts with the messaging middleware through a messaging middleware API exposed by the messaging middleware .

In addition the messaging middleware of includes a set of computer program instructions configured for reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention. The messaging middleware of operates generally for reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention by identifying a value for an active message sequence number that specifies a point in a transmission sequence when the active feed adapter will transmit the administrative application message to the subscribing client device transmitting to the backup feed adapter the administrative application message and the value for the identified active message sequence number and transmitting to the subscribing client device the administrative application message on the active message stream at the point in the transmission sequence identified by the active message sequence number.

The transport engine of is a software component operating in the transport and network layers of the OSI protocol stack promulgated by the International Organization for Standardization. The transport engine provides data communications services between network connected devices. The transport engine may be implemented according to the UDP IP protocols TCP IP protocols or any other data communications protocols as will occur to those of skill in the art. The transport engine includes a set of computer program instructions capable of encapsulating the application messages provided by the messaging middleware into packets and transmitting the packets through the active message stream to the subscribing client device . The messaging middleware operates the transport engine through a transport API exposed by the transport engine .

In the exemplary system of backup feed adapter is connected to the high speed low latency data communications network through a wireline connection . The backup feed adapter is a computer device having the capabilities of converting backup messages on backup feed adapter source streams having a first format to backup messages on a backup feed adapter output stream having a second format and transmitting the backup messages on the backup feed adapter output stream to subscribing client devices. The backup feed adapter source streams are message streams from the feed source to the backup feed adapter . The backup feed adapter output stream is a message stream administered by the stream administration server from the backup feed adapter to the subscribing client device .

The backup feed adapter of has installed upon it a conversion module a converter table converter functions that expose converter function APIs backup application messages for transmission from the backup feed adapter to the subscribing client device message model messaging middleware that exposes messaging middleware API and a transport engine that exposes a transport engine API . The components installed on the backup feed adapter operate in a manner similar to the components installed on the active feed adapter .

In addition the messaging middleware of the backup feed adapter of includes a set of computer program instructions for reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention. The messaging middleware of operates generally for reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention by receiving from the active feed adapter an administrative application message and a value for an active message sequence number that specifies a point in a transmission sequence when the active feed adapter will transmit the administrative application message to the subscribing client device identifying a value for a backup message sequence number of a most recent backup application message processed in the backup feed adapter prior to receiving the administrative application message and determining whether the backup feed adapter is capable of synchronizing transmission of the administrative application message to the subscribing client device on the backup message stream in dependence upon the value for the received active message sequence number the value for the backup sequence number of the most recent message transmitted to the client device and a predetermined synchronization sequence number threshold adding a backup message sequence number to the contents of the administrative application message having a value that matches the value of the active message sequence number transmitting to the subscribing client device the administrative application message in sequence with the other backup application messages slowing down the transmission rate at which the backup feed adapter transmits the backup application message to the subscribing client device and negotiating with the active feed adapter another message sequence number for synchronizing transmission of the administrative application messages to the subscribing client device.

The subscribing client device in exemplary system of connects to the high speed low latency data communications network through a wireline connection . The subscribing client device of is a computer device capable of subscribing to the message streams transmitted by various feed adapters. In a financial market data environment for example a subscribing client device may subscribe to a tick to receive the bid and ask prices for a particular security on a message stream provided by a feed adapter controlled by a financial securities broker.

In the example of the subscribing client device has installed upon it an application a message library a stream administration library messaging middleware and a transport engine . The application of is a software component that processes data contained in the application messages received from one of the feed adapters . The application may process the data for utilization by the subscribing client device itself for contributing the data to another feed adapter or for contributing the data to some other device. In a financial market data environment the application installed on the subscribing client device may be a program trading application that buys or sells financial securities based on the quoted prices contained in ticks. The application may also be a value adding application that contributes information to a tick such as for example the best bid and ask prices for a particular security that is not typically included in the ticks provided by the feed source . The subscribing client device may then transmit the ticks to a feed adapter for resale to other subscribing client devices.

In the example of the application messages represent application messages received from one of the feed adapters and having a format specified by the message model . The application of processes the data contained in the application messages using the message library . The message library is a set of functions that are computer program instructions for creating accessing and manipulating messages according to the message model . The message library is accessible to the application through a message API exposed by the message library .

The communications between the subscribing client device and the stream administration server may be implemented using a stream administration library . The stream administration library is a set of functions contained in dynamically linked libraries or statically linked libraries available to the application through a stream administration library API . Through the stream administration library the application of the subscribing client device may for example request to subscribe to messages from a feed adapter modify an existing message subscription or cancel a message subscription. Functions of the stream administration library used by the application may communicate with the stream administration server through network by calling member methods of a CORBA object calling member methods of remote objects using the Java RMI API using web services or any other communication implementation as will occur to those of skill in the art.

Before the application processes the data contained in the messages the application receives the messages from the messaging middleware which in turn receives the application messages from one of the feed adapter through the transport engine . The messaging middleware is a software component that provides high availability services between the subscribing client device the active feed adapter and the backup feed adapter . In addition the messaging middleware provides message administration services for the stream administration server . Such message administration services may include restricting the ability of the application to send and receive messages on a message stream to messages that satisfy certain constraints. The application and the stream administration library interact with the messaging middleware through a messaging middleware API .

In addition the messaging middleware of includes a set of computer program instructions for reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention. The messaging middleware of operates generally for reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention by receiving the active application messages from the active feed adapter receiving in response to a failover from the active feed adapter to the backup feed adapter the backup application messages in the messaging middleware of the subscribing client device from the backup feed adapter and administering by the messaging middleware of the subscribing client device backup application messages in dependence upon the active stream source identifier the active stream source sequence number the backup stream source identifier and the backup stream source sequence number.

The transport engine of is a software component operating in the transport and network layers of the OSI protocol stack promulgated by the International Organization for Standardization. The transport engine provides data communications services between network connected devices. The transport engine may be implemented according to the UDP IP protocols TCP IP protocols or any other data communications protocols as will occur to those of skill in the art. The transport engine is a software component that includes a set of computer program instructions for receiving packets through the message streams from the feed adapters unencapsulating the application messages from the received packets and providing the application messages to the messaging middleware . The messaging middleware operates the transport engine through a transport API exposed by the transport engine .

The servers and other devices illustrated in the exemplary system of are for explanation not for limitation. Devices useful in reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention may be implemented using general purpose computers such as for example computer servers or workstations hand held computer devices such as for example Personal Digital Assistants PDAs or mobile phones or any other automated computing machinery configured for data processing according to embodiments of the present invention as will occur to those of skill in the art.

The arrangement of servers and other devices making up the exemplary system illustrated in are for explanation not for limitation. Although the connections to the network of are depicted and described in terms of wireline connections readers will note that wireless connections may also be useful according to various embodiments of the present invention. Furthermore data processing systems useful according to various embodiments of the present invention may include additional servers routers other devices and peer to peer architectures not shown in as will occur to those of skill in the art. Networks in such data processing systems may support many data communications protocols including for example Transmission Control Protocol TCP Internet Protocol IP HyperText Transfer Protocol HTTP Wireless Access Protocol WAP Handheld Device Transport Protocol HDTP and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Reliable messaging using redundant message streams in a high speed low latency data communications environment in accordance with the present invention in some embodiments may be implemented with one or more subscribing client devices stream administration servers and feed adapters computers that is automated computing machinery. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an example of a subscribing client device useful in reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention. The subscribing client device of includes at least one computer processor or CPU as well as random access memory RAM which is connected through a high speed memory bus and bus adapter to processor and to other components of the subscribing client device.

Stored in RAM are an application application messages message model a message library a messaging middleware a stream administration library and a transport engine . Each application message is a quantity of data that includes one or more data fields and is transmitted from one device to another on a message stream. Application messages are typically created and processed by applications operating in application layers above the network and transport layers of a network protocol stack. As mentioned above an application message may represent numeric or textual information images encrypted information computer program instructions and so on. In a financial market data environment for example a message is commonly referred to as a tick and represents financial market data such as for example financial quotes or financial news. Each application message may be implemented using a structured document such as for example an XML document a Java object C object or any other implementation as will occur to those of skill in the art. The message model is metadata that defines the structure and format of the messages . The message model may also be implemented using a structured document such as for example an XML document a Java object C object or any other implementation as will occur to those of skill in the art. The application the message library the messaging middleware the stream administration library and the transport engine illustrated in are software components that is computer program instructions that operate as described above with reference to .

Also stored in RAM is an operating system . Operating systems useful in subscribing client devices according to embodiments of the present invention include UNIX Linux Microsoft NT IBM s AIX IBM s i5 OS and others as will occur to those of skill in the art. The operating system the application the messages the message model the message library the messaging middleware and the transport engine in the example of are shown in RAM but many components of such software typically are stored in non volatile memory also for example on a disk drive .

The exemplary subscribing client device of includes bus adapter a computer hardware component that contains drive electronics for high speed buses the front side bus the video bus and the memory bus as well as drive electronics for the slower expansion bus . Examples of bus adapters useful in subscribing client devices useful according to embodiments of the present invention include the Intel Northbridge the Intel Memory Controller Hub the Intel Southbridge and the Intel I O Controller Hub. Examples of expansion buses useful in subscribing client devices useful according to embodiments of the present invention may include Peripheral Component Interconnect PCI buses and PCI Express PCIe buses.

The exemplary subscribing client device of also includes disk drive adapter coupled through expansion bus and bus adapter to processor and other components of the exemplary subscribing client device . Disk drive adapter connects non volatile data storage to the exemplary subscribing client device in the form of disk drive . Disk drive adapters useful in subscribing client devices include Integrated Drive Electronics IDE adapters Small Computer System Interface SCSI adapters and others as will occur to those of skill in the art. In addition non volatile computer memory may be implemented for a subscribing client device as an optical disk drive electrically erasable programmable read only memory so called EEPROM or Flash memory RAM drives and so on as will occur to those of skill in the art.

The exemplary subscribing client device of includes one or more input output I O adapters . I O adapters in subscribing client devices implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice. The exemplary subscribing client device of includes a video adapter which is an example of an I O adapter specially designed for graphic output to a display device such as a display screen or computer monitor. Video adapter is connected to processor through a high speed video bus bus adapter and the front side bus which is also a high speed bus.

The exemplary subscribing client device of includes a communications adapter for data communications with other computers and for data communications with a high speed low latency data communications network . Such data communications may be carried out serially through RS 232 connections through external buses such as a Universal Serial Bus USB through data communications networks such as IP data communications networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a data communications network. Examples of communications adapters useful for reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention include modems for wired dial up communications IEEE 802.3 Ethernet adapters for wired data communications network communications and IEEE 802.11b adapters for wireless data communications network communications.

Although is discussed with reference to exemplary subscribing client devices readers will note that automated computing machinery comprising exemplary stream administration servers and exemplary feed adapters useful in reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention are similar to the exemplary subscribing client device of . That is such exemplary stream administration servers and feed adapters include one or more processors bus adapters buses RAM video adapters communications adapters I O adapters disk drive adapters and other components similar to the exemplary subscribing client device of as will occur to those of skill in the art.

For further explanation sets forth a flowchart illustrating an exemplary method for reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention. The method of includes brokering by a stream administration server establishment of an active message stream to a subscribing client device from an active feed adapter. The active message stream of represents a data communication channel between a communications endpoint of a subscribing client device and a communications endpoint of a feed adapter. A message stream may be implemented as a multicast data communication channel using the UDP IP protocols or a unicast data communication channel using TCP IP protocols as discussed above with reference to .

In the example of the active message stream is capable of communicating active application messages from the active feed adapter to the subscribing client device. The active application messages represent application messages received by a subscribing client device from an active feed adapter. Each active application message of is characterized by an active source stream identifier an active source stream sequence number and an active message sequence number . The active source stream identifier represents a feed adapter source stream through which the active feed adapter received an active source stream message that was converted into the active application message . The active source stream sequence number represents the sequence number that uniquely identifies the active source stream message that was converted in to the active application message among other active source stream messages received by the active feed adapter on the same source stream. The active source stream sequence number also provides the relative transmission order for a particular active source stream message with respect to the other active source stream messages received in the active feed adapter. The active message sequence number represents a sequence number that uniquely identifies the active application message among other application messages transmitted from a particular active feed adapter. Similar to the active source stream sequence number the active message sequence number also provides the relative transmission order for a particular active application message with respect to the other active application messages transmitted from the active feed adapter.

In the method of brokering by a stream administration server establishment of an active message stream to a subscribing client device from an active feed adapter may be carried out by receiving a subscription request from a subscribing client device to subscribe to messages from a feed adapter. The subscription request may be implemented as an XML document a call to a member method of a RMI object on the subscribing client device or any other implementation as will occur to those of skill in the art. The subscription request may include topics of the messages that the subscribing client device requests to receive from the feed adapter. A topic represents the characteristics of the messages that the subscribing client device requests. Using a topic a subscribing client device may specify the group of messages for receipt from the feed adapter. In a financial market data environment for example a subscribing client device may use a topic to request ticks from an OPRA feed source that contains quotes of an IBM option traded on the Chicago Board Options Exchange CBOE that includes the best bid and best ask for the IBM option on the CBOE.

Brokering by a stream administration server establishment of an active message stream to a subscribing client device from an active feed adapter according to the method of may also include providing the subscribing client device a destination address for the feed adapter. The destination address for the feed adapter is a multicast address or a unicast address used by the subscribing client device to listen for messages from a feed adapter. Using the destination address provided by the stream administration server the subscribing client device may establish the active message stream from the feed adapter to the subscribing client device.

Before the stream administration server provides the destination address for the feed adapter the stream administration server in the example of may perform several security services to ensure that the subscribing client device only receives messages from the feed adapter for which the subscribing client device is authorized to receive. In the method of brokering by a stream administration server establishment of an active message stream to a subscribing client device from an active feed adapter may also be carried out by authenticating the subscribing client device and authorizing the subscribing client device to receive messages from the feed adapter on the message stream . Authenticating the subscribing client device may be carried out by verifying client security credentials provided by the subscribing client device with the subscription request. The client security credentials may be implemented as a digital signature in a public key infrastructure a security token or any other security data as will occur to those of skill in the art for authenticating the identity of the originator of the subscription request. Authorizing the subscribing client device to receive messages from the feed adapter on the message stream may be carried out by identifying the privileges associated with the authenticated subscribing client device in dependence upon an authorization policy. An authorization policy is a set of rules governing the privileges of authenticated subscribing client devices requesting to receive data from a feed adapter 

The method of also includes brokering by the stream administration server establishment of a backup message stream to the subscribing client device from a backup feed adapter. In the example of brokering by the stream administration server establishment of a backup message stream to the subscribing client device from a backup feed adapter may be carried out in a manner similar to brokering by a stream administration server establishment of an active message stream to a subscribing client device from an active feed adapter as described above.

The backup message stream of represents a data communication channel between a communications endpoint of a subscribing client device and a communications endpoint of a feed adapter. In the example of the backup message stream is capable of communicating backup application messages from the backup feed adapter to the subscribing client device. The backup application messages represent application messages received by a subscribing client device from a backup feed adapter. Each backup application message of is characterized by a backup source stream identifier a backup source stream sequence number and a backup message sequence number . The backup source stream identifier represents a feed adapter source stream through which the backup feed adapter received a backup source stream message that was converted into the backup application message . The backup source stream sequence number is the sequence number that uniquely identifies the backup source stream message that was converted into the backup application message among other backup source stream messages received by the backup feed adapter on a particular source stream. The backup source stream sequence number also provides the relative transmission order for a particular backup source stream message with respect to the other backup source stream messages received in the backup feed adapter. The backup message sequence number is a sequence number that uniquely identifies the backup application message among other application messages transmitted from a particular backup feed adapter. A backup message sequence number also provides the relative transmission order for a particular backup application message with respect to the other backup application messages transmitted from the backup feed adapter.

In the example of at least some of the backup application messages represent duplicates of active application messages previously received in the messaging middleware of the subscribing client device. As mentioned above there is no guarantee that the active feed adapter and the backup feed adapter will convert the source stream messages into application messages in the same order. The subscribing client device therefore cannot rely only on the message sequence numbers to identify duplicate messages. The subscribing client device may however rely on the source stream identifiers and the source stream sequence numbers to identify duplicate messages because the contents of an active application message having a particular combination of values for the active source stream identifier and the active source stream sequence number is duplicated by the contents of a backup application message having the same combination of values for the backup source stream identifier and the active source stream sequence number .

The method of also includes receiving the active application messages in messaging middleware of the subscribing client device from the active feed adapter. Receiving the active application messages in messaging middleware of the subscribing client device from the active feed adapter according to the method of may be carried out by receiving transport packets such as for example TCP packets or UDP packets that contain the active application messages and unencapsulating the messages from the transport packets.

The method of also includes receiving in response to a failover from the active feed adapter to the backup feed adapter the backup application messages in the messaging middleware of the subscribing client device from the backup feed adapter. Failover is the process of transitioning from a failed active component to a redundant backup component. Failover may result from a hardware or software failure on the active feed adapter damage to the network infrastructure connected to the active feed adapter or any other cause as will occur to those of skill in the art. Receiving in response to a failover from the active feed adapter to the backup feed adapter the backup application messages in the messaging middleware of the subscribing client device from the backup feed adapter according to the method of may be carried out by receiving transport packets such as for example TCP packets or UDP packets from the backup feed adapter that contain the backup application messages and unencapsulating the messages from the transport packets.

The method of also includes administering by the messaging middleware of the subscribing client device backup application messages in dependence upon the active stream source identifier the active stream source sequence number the backup stream source identifier and the backup stream source sequence number . Administering the backup application messages according to the method of may be carried out by identifying whether a received backup application message is a duplicate of a previously received active application message and discarding the backup application message if backup application message is a duplicate of a previously received active application message. The messaging middleware of the subscribing client device may identify whether a backup application message is a duplicate of a previously received active application message by comparing values for the backup source stream identifier and the backup source stream sequence number of a backup application message with the values of the active source stream identifier and the active source stream sequence number of the previously received active application messages . A backup application message is a duplicate of an active application message if a previously received active application message has the same combination of values for the active source stream identifier and the active source stream sequence number as the combination of values for the backup source stream identifier and the backup source stream sequence number of the backup application message .

Readers will note that carrying out administering the backup application messages according to the method of by discarding the backup application message if backup application message is a duplicate of a previously received active application message is for explanation and not for limitation. In fact administering the backup application messages according to the method of may also be carried out by discarding the previously received active application messages if a duplicate backup application message has been received and passing the duplicate backup application message to application software for further data processing that operates in the application layer of a network protocol stack.

As mentioned above a feed adapter converts source stream messages into applications messages for transmission to a subscribing client device. For further explanation therefore sets forth a flowchart illustrating a further exemplary method for reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention that includes receiving in the active feed adapter active source stream messages on a plurality of feed adapter source streams and converting by the active feed adapter each active source stream message to an active application message .

The example of includes two active feed adapter source streams a first active feed adapter source stream and a second active feed adapter source stream . Each active feed adapter source stream is a message stream from a feed source to the active feed adapter. The feed source transmits active source stream messages to the active feed adapter on the two active feed adapter source streams . As mentioned above a feed source may transmit application messages to the active feed adapter using more than one message stream because the bandwidth required to transmit the messages on a single message stream is not available. In a financial market data environment for example a feed source may transmit ticks for financial securities that begin with the letters A through M on one message stream and transmit ticks for the financial securities that begin with the letters N through Z on another message stream. For redundancy both message streams may be transmitted to an active feed adapter and a backup feed adapter.

In the example of each feed adapter source stream is identified in the active feed adapter by an active source stream identifier . The active source stream identifier represents the source stream through which the active feed adapter received a particular active source stream message . Each active source stream message of is characterized by an active source stream sequence number for the feed adapter source stream on which the active source stream message was received. The active source stream sequence number represents the sequence number that uniquely identifies the active source stream message among the other active source stream messages received by the active feed adapter on a particular source stream. The active source stream sequence number also provides the relative transmission order for a particular active source stream message with respect to the other active source stream messages received in the active feed adapter.

Because the feed source typically assigns the same sequence numbers to the messages transmitted on each of the active feed adapter source streams the active feed adapter cannot unique identify the active source stream messages using only active source stream sequence number . Consider for example a financial market data environment in which a feed source provides an active feed adapter ticks through two feed adapter source streams. The feed source may transmit to the active feed adapter a tick for IBM on the first feed adapter source stream using a source stream sequence number of 1 and transmit a tick for SUNW on the second feed adapter source stream also using a source stream sequence number of 1. Because both ticks have a source stream sequence number of 1 the feed adapter cannot uniquely identify a tick using only the source stream sequence number.

Combining the active source stream identifier with the active source stream sequence number however does provide the feed adapter with the ability to unique identify active source stream messages . Continuing with the example from above consider that the active feed adapter assigns a value of 1 to the active source stream identifier for the first feed adapter source stream and a value of 2 to the active source stream identifier for the second feed adapter source stream. A value of 1 for the active source stream identifier and a value of 1 for the active source stream sequence number uniquely identifies the tick for IBM on the active feed adapter. Similarly a value of 2 for the active source stream identifier and a value of 1 for the active source stream sequence number uniquely identifies the tick for SUNW on the active feed adapter.

The method of also includes converting by the active feed adapter each active source stream message to an active application message . Converting by the active feed adapter each active source stream message to an active application message according to the method of includes adding to the contents of each active source stream message the value of the active source stream identifier for the feed adapter source stream on which the active source stream message was received in the active feed adapter and an active message sequence number . In the method of converting by the active feed adapter each active source stream message to an active application message may also be carried out by calling converter functions capable of converting source stream messages having a first format to application messages having a second format. The second format of the application messages is specified using a message model . As mentioned above the message model represents metadata that defines the structure and the format of the active application messages into which the active feed adapter converts the active source stream messages .

As explained above the active application messages of represent application messages received by a subscribing client device from an active feed adapter. The active application messages result from an active feed adapter converting active source stream messages that arrive on a plurality of feed adapter source streams according to the message model . Each active application message of is characterized by an active source stream identifier an active source stream sequence number and an active message sequence number .

The method of is described with reference to active feed adapters active source stream messages on a plurality of feed adapter source streams active source stream identifier active source stream sequence number active application messages active message sequence numbers and so on. Readers will note however that exemplary methods for reliable messaging using redundant message streams in a high speed low latency data communications environment that include receiving in the backup feed adapter backup source stream messages on a plurality of feed adapter source streams each feed adapter source stream identified in the backup feed adapter by a backup source stream identifier each backup source stream message characterized by a backup source stream sequence number for the feed adapter source stream on which the backup source stream message was received and converting by the backup feed adapter each backup source stream message to a backup application message including adding to the contents of each backup source stream message the value of the backup source stream identifier for the feed adapter source stream on which the backup source stream message was received in the backup feed adapter and a backup message sequence number operate in a manner similar to the method of .

Often an active feed adapter receives an administrative message from the feed source that the active feed adapter passes along to the subscribing client device. Because the subscribing client device needs to be able to obtain the administrative message from both the active feed adapter and a backup feed adapter in the same relative transmission order the active feed adapter synchronizes delivery of the administrative message to the subscribing client device with the backup feed adapter. For further explanation therefore sets forth a flowchart illustrating a further exemplary method for reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention that includes transmitting by the active feed adapter to the backup feed adapter an administrative application message and a value for an active message sequence number that specifies a point in a transmission sequence when the active feed adapter will transmit the administrative application message to the subscribing client device.

The method of includes receiving in the active feed adapter an administrative source stream message on a feed adapter source stream . The feed adapter source stream represents a message stream from a feed source to the active feed adapter. The administrative source stream message represents a source stream message that contains administrative information communicated from the feed source to a feed adapter. Examples of administrative information may include information stating that the feed source will shut down at 5 00 pm that the source stream sequence numbers be reset to 1000 after 100 more messages that a failover at the feed source has occurred and any other administrative information as will occur to those of skill in the art.

The method of also includes converting by the active feed adapter the administrative source stream message into an administrative application message . The administrative application message of represents an administrative source stream message that the feed adapter converted according to a message model for transmission to a subscribing client device. Converting by the active feed adapter the administrative source stream message into an administrative application message according to the methods of may be carried out by calling converter functions capable of converting source stream messages having a first format to application messages having a second format. The second format the format of the administrative application message is specified using a message model . As mentioned above the message model represents metadata that defines the structure and the format of the administrative application messages into which the active feed adapter converts the administrative source stream message .

In the method of converting by the active feed adapter the administrative source stream message into an administrative application message includes identifying a value for an active message sequence number that specifies a point in a transmission sequence when the active feed adapter will transmit the administrative application message to the subscribing client device. Identifying an active message sequence number according to the method of may be carried out by identifying the value for the active message sequence number of the most recent application message processed by the active feed adapter and adding a predetermined number to the identified value. The predetermined number should be high enough to produce a value for the active message sequence number that specifies a point far enough ahead in the transmission sequence to permit the backup feed adapter to synchronize with the active feed adapter.

The method of also includes transmitting by the active feed adapter to the backup feed adapter the administrative application message and the value for the identified active message sequence number . Transmitting by the active feed adapter to the backup feed adapter the administrative application message and the value for the identified active message sequence number according to the method of may be carried out by transmitting the administrative application message and the value for the identified active message sequence number by calling member methods of CORBA objects calling member methods of remote objects using the Java RMI API using web services or any other communication implementation as will occur to those of skill in the art.

The method of also includes transmitting by the active feed adapter to the subscribing client device the administrative application message on the active message stream at the point in the transmission sequence identified by the active message sequence number . Transmitting by the active feed adapter to the subscribing client device the administrative application message on the active message stream at the point in the transmission sequence identified by the active message sequence number may be carried out by encapsulating the administrative application message into transport packets such as for example TCP packets or UDP packets when a value for a current message for transmission matches the value for the active message sequence number and transmitting the transport packets to the subscribing client device using for example the TCP IP protocols or the UDP IP protocols. The current message for transmission is a location in computer memory that specifies the current application message being processed by the active feed adapter for transmission to the subscribing client device by storing the active message sequence number of the current application message being processed by the active feed adapter for transmission.

As mentioned above the active feed adapter transmits an administrative application message and a value for the active message sequence number to the backup feed adapter in order to synchronize transmission of the administrative application message to a subscribing client device. For further explanation therefore sets forth a flowchart illustrating a further exemplary method for reliable messaging using redundant message streams in a high speed low latency data communications environment according to embodiments of the present invention that includes receiving in the backup feed adapter from the active feed adapter an administrative application message and a value for an active message sequence number that specifies a point in a transmission sequence when the active feed adapter will transmit the administrative application message to the subscribing client device. The administrative application message of represents an administrative source stream message that a feed adapter converted according to a message model for transmission to a subscribing client device.

The method of also includes identifying by the backup feed adapter a value for a backup message sequence number of a most recent backup application message processed in the backup feed adapter prior to receiving the administrative application message . Identifying by the backup feed adapter a value for a backup message sequence number of a most recent backup application message processed in the backup feed adapter prior to receiving the administrative application message may be carried out by retrieving the value from a current message for processing when the backup feed adapter receives the administrative application message from the active feed adapter. The current message for processing of is a location in computer memory that specifies the current message being processed by the backup feed adapter by storing the value for the backup message sequence number of the current message being processed by the backup feed adapter.

The method of also includes determining by the backup feed adapter whether the backup feed adapter is capable of synchronizing transmission of the administrative application message to the subscribing client device on the backup message stream in dependence upon the value for the received active message sequence number the value for the backup sequence number of the most recent message transmitted to the client device and a predetermined synchronization sequence number threshold . The predetermined synchronization sequence number threshold is a value that specifies whether value for the received active message sequence number is far enough ahead in the transmission sequence such that the backup feed adapter has enough time to synchronize transmission of the administrative application message with the transmission of the administrative application message by the active feed adapter.

In the method of determining whether the backup feed adapter is capable of synchronizing transmission of the administrative application message to the subscribing client device on the backup message stream may be carried out by comparing the predetermined synchronization sequence number threshold with the difference between the value for the received active message sequence number and the value for the backup sequence number of the most recent message transmitted to the client device. In such an exemplary embodiment if the predetermined synchronization sequence number threshold exceeds the difference between the value for the received active message sequence number and the value for the backup sequence number of the most recent message transmitted to the client device then the backup feed adapter is capable of synchronizing transmission of the administrative application message to the subscribing client device on the backup message stream. The backup feed adapter however is not capable of synchronizing transmission of the administrative application message to the subscribing client device on the backup message stream in such an exemplary embodiment if the predetermined synchronization sequence number threshold does not exceed the difference between the value for the received active message sequence number and the value for the backup sequence number of the most recent message transmitted to the client device.

The method of includes adding by the backup feed adapter a backup message sequence number to the contents of the administrative application message having a value that matches the value of the active message sequence number and transmitting by the backup feed adapter to the subscribing client device the administrative application message in sequence with the other backup application messages when the backup feed adapter is capable of synchronizing transmission of the administrative application message to the subscribing client device on the backup message stream. In the method of adding by the backup feed adapter a backup message sequence number to the contents of the administrative application message having a value that matches the value of the active message sequence number may be carried out by storing the value of the active message sequence number in a data field of the administrative application message that corresponds to the backup message sequence number using a message model that specifies the format of the administrative application message .

In the method of transmitting by the backup feed adapter to the subscribing client device the administrative application message in sequence with the other backup application messages may be carried out by encapsulating the administrative application message into transport packets such as for example TCP packets or UDP packets when a value for a current message for transmission matches the value for the backup message sequence number added to the message and transmitting the transport packets to the subscribing client device using for example the TCP IP protocols or the UDP IP protocols. The current message for transmission is a location in computer memory that specifies the current application message being processed by the active feed adapter for transmission to the subscribing client device by storing the backup message sequence number of the current application message being processed by the backup feed adapter for transmission.

The method of also includes slowing down by the backup feed adapter the transmission rate at which the backup feed adapter transmits the backup application message to the subscribing client device and negotiating by the backup feed adapter with the active feed adapter another message sequence number for synchronizing transmission of the administrative application messages to the subscribing client device when the backup feed adapter is not capable of synchronizing transmission of the administrative application message to the subscribing client device on the backup message stream. In the method of slowing down by the backup feed adapter the transmission rate at which the backup feed adapter transmits the backup application messages to the subscribing client device may be carried out by repeated pausing transmission of backup application messages for a predetermined time period. The backup feed adapter may pause transmission after transmitting each backup application message after transmitting every other backup application message or any other frequency as will occur to those of skill in the art.

In the method of negotiating by the backup feed adapter with the active feed adapter another message sequence number for synchronizing transmission of the administrative application messages to the subscribing client device may be carried out by transmitting to the active feed adapter a request for the active feed adapter to provide another value for the active message sequence number used for synchronizing transmission of the administrative application message with transmission of the administrative application message by the active feed adapter. Negotiating by the backup feed adapter with the active feed adapter another message sequence number for synchronizing transmission of the administrative application messages to the subscribing client device according to the method of may also be carried out by identifying a new value for the active message sequence number that specifies a point in a transmission sequence when the active feed adapter will transmit the administrative application message to the subscribing client device that provides time for the backup feed adapter to synchronize transmission of the administrative application message with transmission of the administrative application message by the active feed adapter. Negotiating by the backup feed adapter with the active feed adapter another message sequence number for synchronizing transmission of the administrative application messages to the subscribing client device according to the method of may further be carried out by transmitting the new value for the active message sequence number to the active feed adapter.

In view of the explanations set forth above in this document readers will recognize that practicing reliable messaging using redundant message streams in a high speed low latency data communications environment to embodiments of the present invention provides the following benefits 

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for reliable messaging using redundant message streams in a high speed low latency data communications environment. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on signal bearing media for use with any suitable data processing system. Such signal bearing media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

While the embodiments are described with reference to various implementations and exploitations it will be understood that these embodiments are illustrative and that the scope of the inventive subject matter is not limited to them. In general techniques for reliable messaging as described herein may be implemented with facilities consistent with any hardware system or hardware systems. Many variations modifications additions and improvements are possible.

Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the inventive subject matter. In general structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements may fall within the scope of the inventive subject matter.

