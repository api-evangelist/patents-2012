---

title: Interoperability format translation and transformation between IFC architectural design file and simulation file formats
abstract: Automatically translating a building architecture file format (Industry Foundation Class) to a simulation file, in one aspect, may extract data and metadata used by a target simulation tool from a building architecture file. Interoperability data objects may be created and the extracted data is stored in the interoperability data objects. A model translation procedure may be prepared to identify a mapping from a Model View Definition to a translation and transformation function. The extracted data may be transformed using the data stored in the interoperability data objects, an input Model View Definition template, and the translation and transformation function to convert the extracted data to correct geometric values needed for a target simulation file format used by the target simulation tool. The simulation file in the target simulation file format may be generated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08930418&OS=08930418&RS=08930418
owner: International Business Machines Corporation
number: 08930418
owner_city: Armonk
owner_country: US
publication_date: 20121114
---
This application is a continuation of U.S. patent application Ser. No. 13 648 798 filed Oct. 10 2012 which claims the benefit of U.S. Provisional Application No. 61 659 134 filed on Jun. 13 2012 the entire content and disclosure of each of which is incorporated herein by reference.

This invention was made with Government support under Grant No. DE EE0004261 awarded by Department of Energy. The Government has certain rights in this invention. IBM Contract No. 4352 IBM DOE 4261 

The present application relates generally to computers and computer applications and more particularly to interoperability format translation and transformation between Industry Foundation Class IFC architectural design file and simulation file formats such as EnergyPlus and or Radiance.

In Building Information Modeling BIM various tools are used throughout various BIM phases such as architecture design construction simulation and operations and others in generating electronic or digital representations of physical and functional characteristics of a facility or building and managing them. Each tool used in one or more of those phases has its own file and data format. There is no standard other than Industry Foundation Class IFC and for the most part no interoperability among the tools. BIM Tools and File formats used by BIM tools e.g. include design tools such as Autodesk AutoCAD using .DWG and .DWF formats Revit using .RVT and .RFA formats Google Sketchup using .SKP format simulation tools such as EnergyPlus an energy simulation tool using .IDF format Radiance a lighting simulation tool using .RAD format CONTAM an airflow contaminant simulation using .PRJ format. For the BIM life cycle all those different kinds of file formats need to be supported. However no interoperability between various BIM tools of different phases of the BIM Lifecycle

Moreover little has been done to convert architecture design IFC file format to EnergyPlus .IDF file format which is used by one of the popular energy simulation tools i.e. EnergyPlus. One of the reasons is that it is quite complex both on the input and the output sides. For more description of EnergyPlus see http appsl.eere.energy.gov buildings energyplus energyplus about.cfm. note the blank spaces are added in the URL so that the text does not automatically convert to a hypertext link in order to comply with the USPTO requirement that the specification does not contain an embedded hypertext .

On the input side there are complexities in processing the input files. First the architecture design files in IFC or in IFCXML which can be converted from an IFC file using existing conversion tools are huge and very difficult to parse. An average size of IFC file could be several hundreds of Mega bytes. Conventional desktop computers are limited with memory and central processing unit CPU power and unable to read in the entire file and keep it in the memory to query the elements e.g. parsing using DOM parser for IFCXML files. Instead the files must be parsed in an iterative way. What makes the matter more complicated is the enclosing IFC element that references the smaller or atomic elements often defined after the smaller or atomic elements which are defined first in the files. Therefore multiple passes of parsing must be executed to finally obtain the value in the targeted atomic elements.

On the output side there are other complexities too. In the building domain multiple representations of a building object are possible. Intelligence is required to select only those necessary objects required by the simulation tools for an area e.g. energy simulation. Unnecessary objects in the output file can potentially increase the size of the file and consequently increase the computational time and resources significantly while adding no value to the simulations. In addition data needs to be transformed and translated to be used by the simulation tools. Furthermore it is difficult to identify the necessary mapping from the Model View Definition MVD to create the necessary the translation and transformation functions for a target simulation tool e.g. EnergyPlus for energy simulation and Radiance for lighting simulation

In summary architectural design files e.g. IFC have different file formats from the files that simulation tools use e.g. energy simulation files as such EnergyPlus IDF files. Currently EnergyPlus IDF files can be manually created for EnergyPlus to use. However this manual process is time consuming and requires significant domain knowledge in both the simulation areas e.g. energy simulation and or lighting simulation as well as the simulation tools e.g. EnergyPlus and or Radiance. In an example of a classroom setting an estimated 100 hours per student was spent in using the data in architectural design file in IFC to manually create an .IDF file for use by EnergyPlus to run energy simulation. Hence current manual efforts in translation and transformation input files and producing output files for numerous different building information models are both difficult and inefficient. Moreover there is no automated way to extract data to create energy simulation files.

A method of automatically translating and transforming a building architecture file format to a simulation file in one aspect may comprise extracting from a building architecture file data and metadata used by a target simulation tool e.g. energy simulation tool EnergyPlus and or lighting simulation tool Radiance. The method may also comprise creating interoperability data objects and storing the extracted data in the interoperability data objects. The method may further comprise preparing a model translation procedure to identify a mapping from a Model View Definition to a translation and transformation function. The method may also comprise transforming the extracted data using the data stored in the interoperability data objects an input Model View Definition template and the translation and transformation function to convert the extracted data to correct geometric values needed for a target simulation file format used by the target simulation tool. The method may also comprise generating the simulation file in the target simulation file format.

A method of automatically translating and transforming a building architecture file format to a simulation file in another aspect may comprise extracting geometry data metadata and context data from an Industry Foundation Class architectural design file the geometry data metadata and context data selected based on a Model View Definition template. The method may also comprise storing the extracted data as interoperability data objects. The method may further comprise identifying a mapping from the Model View Definition template to one or more format translation and transformation functions. The method may also comprise translating and transformation the data stored as the interoperability data objects by executing said one or more format translation and transformation functions into a selected target simulation tool format.

A system for automatically translating and transforming a building architecture file format to a simulation file in one aspect may comprise an extract data module operable to extract from an input building architecture file data and metadata used by a target simulation tool. The system may also comprise a create interoperability data object module operable to create interoperability data objects and store the extracted data in the interoperability data objects. The system may further comprise a prepare model translation procedure module operable to prepare a model translation procedure to identify a mapping from a Model View Definition to a translation and transformation function. The system may also comprise a convert data module operable to transform the extracted data using the data stored in the interoperability data objects an input Model View Definition template and the translation and transformation function to convert the extracted data to correct geometric values needed for a target simulation file format used by the target simulation tool. The system may also comprise a targeted output file generation module operable to generate the simulation file in the target simulation file format.

A computer readable storage medium storing a program of instructions executable by a machine to perform one or more methods described herein also may be provided.

Further features as well as the structure and operation of various embodiments are described in detail below with reference to the accompanying drawings. In the drawings like reference numbers indicate identical or functionally similar elements.

An embodiment of the present disclosure provides a mechanism for interoperability and format translation of building architecture design files e.g. IFC and other file formats used by building simulation tools such as energy and lighting simulation tools e.g. EnergyPlus Radiance via the use of industry standard format i.e. Model View Definition MVD . For example the mechanism of the present disclosure may properly and flexibly convert the IFC files to generate energy simulation EnergyPlus file format IDF and lighting simulation Radiance .RAD file formats. In another embodiment of the present disclosure the generated energy simulation EnergyPlus file format IDF can then be used to generate lighting simulation Radiance .RAD file formats.

In one embodiment of the present disclosure a process of creating other file formats from design files are automated by programmably extracting metadata other context information and selected actual values parsed from design files IFC . An embodiment of the present disclosure enables the use of standard formats e.g. IFC and Model View Definition MVD for the building design space to eliminate the need to build tools for various formats. An embodiment of the present disclosure also provides reconfigurable building information exchange and formats and template based mapping for enhanced user interface.

Briefly building information modeling BIM refers to a process of creating and managing digital or electronic representations of corresponding physical facilities or buildings. The BIM models are typically computer generated.

Industry Foundation Classes IFC is a current data model standard used in architecture design file registered with ISO as ISO16739 and written in EXPRESS language. IFCXML is a schema of IFC in extensible markup language XML format see http buildingsmart tech.org ifcXML IFC2x3 FINAL IFC2x3.xsd .

Model View Definition MVD is an IFC View Definition that defines a subset of the IFC schema needed to satisfy one or many exchange requirements of the Architecture Engineering Construction AEC industry. MVD is a standard methodology and format documenting software implementation requirements for standard IFC based data exchange adopted by the buildingSMART International in the spring of 2005. Information Delivery Manual IDM also ISO DIS 29481 describes a method used and propagated by buildingSMART to define such exchange requirements See http www.buildingsmart tech.org specifications ifc view definition .

BIMserver is a building information model server BIMserver.org . BIMserver currently supports IFC2x3 model with set of functions for querying and managing IFC elements e.g. data model querying merging basic model validation version control basic access control via user authentication and model translation to ifcXML CoBIE CityGML Collada and KML.

The translate transform functionality or module in one embodiment of the present disclosure is presented that may extract data metadata and context from a set of selected IFC elements of input files to create interoperability data objects. In one embodiment this selection and data extraction process outputs only the necessary data metadata and context to conserve both resources and processing time. The methodology of the present disclosure in one embodiment also prepares a model translation procedure to identify the mapping from the Model View Definition to create the translation and transformation functions. Data is translated and transformed by executing the translating and transforming functions using data stored in the interoperability data objects and Model View Definition Templates to perform template based data conversion to the correct geometric values. Desired output is produced in the target simulation file format e.g. .IDF .RAD . Table 1 shows example source and target formats in format translation of the present disclosure in one embodiment.

An interoperability data object creation module in one embodiment may store the data values parsed and extracted by the data extraction module in an intermediate data structures referred to as interoperability data objects in the present disclosure. The interoperability data objects of the present disclosure in one embodiment contain or hold geometric data values the metadata and context data from the design tool files e.g. IFC XML files. The data contained in the interoperability data objects are used for data conversion by a convert translation transformation data module .

A model translation preparation module in one embodiment may use a standard Model View Definition MVD for format translation. The model translation preparation module in one embodiment identifies the necessary mapping from a MVD to format translation and transformation functions. For instance the model translation preparation module uses a Model View Definition Template MVDTemplate to create translation function definitions and fills in the translation functions with data e.g. by invoking APIs provided by the interoperability data object creation module . The template can be used by third party vendors to translate into other output formats as needed.

Base standards for MVD define a subset of the IFC schema that satisfies one or more data exchange requirements http buildingsmart.com standards mvd . MVDTemplate of the present disclosure in one embodiment defines an exemplar set of required data needed for format translation and transformation using an MVD instance. MVDTemplates may be extended or refined according to desired implementation and data schema.

A data conversion translation transformation module in one embodiment converts the data to the geometric value using the format translation and transformation functions based on the offset clipping rotation etc. to properly represent the placement on an energy simulation model file. A file generation module in one embodiment takes input from both the interoperability data objects and MVDTemplates .

This file generation module in one embodiment generates the appropriate simulation file format based on the data converted and grouped together e.g. for geometric viewing purpose by the data conversion module .

Energy simulation data objects in one embodiment of the present disclosure store data needed to create energy simulation output files e.g. building building surface construction location material zone simulation control etc. These objects in one embodiment are used to create EnergyPlus EP .IDF file as a sample implementation. The data to be stored in the energy simulation data objects are extracted from selected elements of the IFC and or IFC XML files in one embodiment of the present disclosure.

Lighting data objects in one embodiment store data needed to create lighting simulation output files e.g. interior surface polygon light source color texture surface properties etc. These objects can be used to create Radiance .RAD file. The data to be stored in the lighting data objects are extracted from selected elements of the IFC and or IFC XML files in one embodiment of the present disclosure.

Airflow data objects in one embodiment of the present disclosure store data needed to create airflow simulation output files e.g. contaminants data simplified HVAC information airflow network pressure initial value schedule geometry etc. These objects can be used to create CONTAM file .PRJ . The data to be stored in the airflow data objects are extracted from selected elements of the IFC and or IFC XML files in one embodiment of the present disclosure.

At for each wall in the input file parse one wall at a time by reading the input file iteratively and extracting various data elements related to a wall using an XML parser e.g. Simple API for XML SAX parser and applying the parsing rules. The parsing rules are defined in an MVDTemplate as a sequential procedure to identify link and translate IFC elements. The parsing may start out with an element that represents the wall element and then iteratively parsing sub elements pointed to by this enclosing wall element via identifiers IDs which are unique identification numbers of IFC elements. In one aspect the parsing rules may deal with large building design files e.g. in IFC XML format and handle the way the elements are read in reversed order where the enclosing element read in after the enclosed elements. In one embodiment of the present disclosure recursive elements searching methods may be utilized.

At as each relevant element is encountered during the parsing data from the relevant element is extracted and corresponding one or more interoperability data objects are filled in with the data.

At a model translation procedure is prepared to identify a mapping from a Model View Definition MVD to one or more translation and transformation functions. For example the mapping s could be one or more function calls that read and translate IFC data to IDF data for EnergyPlus energy simulation tool . The preparation at includes using the MVDTemplate to create translation function definitions and filling in the translation functions with data from the interoperability data objects that correspond to the definitions in the MVDTemplate. In one embodiment the translation functions may be filled in with data e.g. by invoking data query APIs of the interoperability data objects or similar services.

The processing shown in and are repeated for all walls. Thus at if there are more walls to process then the logic returns to . If all walls have been processed at the data stored in interoperability data objects is converted using the MVDTemplate. The conversion function takes various data from IFC and generates pre defined data by mapping IFC data.

At simulation output files are generated. The conversion functions create files using standard file input output methods.

At a model translation procedure is prepared to identify a mapping from a Model View Definition MVD to one or more translation and transformation functions. The preparation at in one embodiment includes using the MVDTemplate to create translation function definitions and filling in the translation functions with data from the interoperability data objects that correspond to the definitions is the MVDTemplate.

The processing shown in and are repeated for all walls. Thus at if there are more walls to process then the logic returns to . If all walls have been processed at the data stored in interoperability is converted using the MVDTemplate.

The MVD mapping template of a specific tool in MVDTemplate is used to create translation and transformation function definition templates. For example the translation and transformation function template in MVDTemplate reusable for one or more simulation tools e.g. EnergyPlus and Radiance etc. are filled in with the data in the interoperability data objects e.g. by invoking one or more interoperability data objects query APIs. The MVD mapping template of a specific tool in MVDTemplate requires domain knowledge to define by selecting certain required elements from the entire set of elements as defined by the tool e.g. EnergyPlus based on the standard MVD. Further translation and transformation function template is adaptable to changes. In case of any future changes in geometric representations by IFC only a single set of the translation and transformation function template need to be modified to adapt to new changes and can then be used again for multiple simulation tools.

A translation function 1 takes geometry material properties and other related data 2 transforms and translates the data with pre defined rules generated using MVDTemplate 3 produces geometric data needed in a format that a said tool can use as an input. The output from a set of translation functions are combined to create an executable simulation input to a tool e.g. EnergyPlus for energy simulation.

The geometric data values e.g. Cartesian points etc. needed in the output file is produced by running the translation and transformation functions to produce the converted data. That is an output file which is compatible to use with one or more building simulation tools is generated e.g. by running the translation and transformation functions using the extracted data and the template to fill in the Model View Definition Template instance . In one embodiment of the present disclosure converted data is data in memory not necessary in the right data format that can be consumed by a simulation tool and output file is consumable data by a simulation tool.

The following illustrates examples of a source IFC XML testing file and the corresponding output file for instance used and generated according to or . They show an example output as a result of the parsing and creating a set of IFC interoperability data objects for use by the translation formation functions in one embodiment of the present disclosure. The below example shows parsing of 7 walls two completely parsed Basic walls first wall Id i132903 second wall Id i133141 in its entirety plus 5 more walls with only the top level element of i133088 i133201 i133262 i133342 and i57108 .

Another example translation function is for an air flow simulation using CONTAM. The translation function takes a set of enclosing wall elements to create a zone for air flow in at . The said translation function uses Cartesian coordinates from the extracted walls to create a 2 dimensional zone boundary. For example after parsing geometry data from elements that are extracted in the interoperability objects in at the translation function similar to in uses a set of geometry data to calculate projected 2 dimensional view of a room. The calculated edge points of the projected room then are expressed in 2 dimensional Cartesian points which then may be converted to a zone definition in CONTAM data model. A leak entry in CONTAM model can also be extracted from various building elements described in IFC components such as fenestration surfaces and open vents. The translation function takes the size of the said components calculates the leak coefficient of each component and generates input data for CONTAM simulation.

Table 4 shows contents of example interoperability data objects e.g. shown at as created by the module shown at .

The computer system may be described in the general context of computer system executable instructions such as program modules being executed by a computer system. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types. The computer system may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment program modules may be located in both local and remote computer system storage media including memory storage devices.

The components of computer system may include but are not limited to one or more processors or processing units a system memory and a bus that couples various system components including system memory to processor . The processor may include one or more components of a translation transformation module that performs the methods described herein. The module may be programmed into the integrated circuits of the processor or loaded from memory storage device or network or combinations thereof.

Bus may represent one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnects PCI bus.

Computer system may include a variety of computer system readable media. Such media may be any available media that is accessible by computer system and it may include both volatile and non volatile media removable and non removable media.

System memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory or others. Computer system may further include other removable non removable volatile non volatile computer system storage media. By way of example only storage system can be provided for reading from and writing to a non removable non volatile magnetic media e.g. a hard drive . Although not shown a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more data media interfaces.

Computer system may also communicate with one or more external devices such as a keyboard a pointing device a display etc. one or more devices that enable a user to interact with computer system and or any devices e.g. network card modem etc. that enable computer system to communicate with one or more other computing devices. Such communication can occur via Input Output I O interfaces .

Still yet computer system can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted network adapter communicates with the other components of computer system via bus . It should be understood that although not shown other hardware and or software components could be used in conjunction with computer system. Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems etc.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages a scripting language such as Perl VBS or similar languages and or functional languages such as Lisp and ML and logic oriented languages such as Prolog. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The computer program product may comprise all the respective features enabling the implementation of the methodology described herein and which when loaded in a computer system is able to carry out the methods. Computer program software program program or software in the present context means any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation and or b reproduction in a different material form.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements if any in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

Various aspects of the present disclosure may be embodied as a program software or computer instructions embodied in a computer or machine usable or readable medium which causes the computer or machine to perform the steps of the method when executed on the computer processor and or machine. A program storage device readable by a machine tangibly embodying a program of instructions executable by the machine to perform various functionalities and methods described in the present disclosure is also provided.

The system and method of the present disclosure may be implemented and run on a general purpose computer or special purpose computer system. The terms computer system and computer network as may be used in the present application may include a variety of combinations of fixed and or portable computer hardware software peripherals and storage devices. The computer system may include a plurality of individual components that are networked or otherwise linked to perform collaboratively or may include one or more stand alone components. The hardware and software components of the computer system of the present application may include and may be included within fixed and portable devices such as desktop laptop and or server. A module may be a component of a device software program or system that implements some functionality which can be embodied as software hardware firmware electronic circuitry or etc.

The embodiments described above are illustrative examples and it should not be construed that the present invention is limited to these particular embodiments. Thus various changes and modifications may be effected by one skilled in the art without departing from the spirit or scope of the invention as defined in the appended claims.

