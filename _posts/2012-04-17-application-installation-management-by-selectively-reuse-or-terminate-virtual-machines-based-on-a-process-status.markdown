---

title: Application installation management by selectively reuse or terminate virtual machines based on a process status
abstract: Example systems and methods of managing installation of applications are described. In one implementation, a repository stores data associated with multiple application instances. An orchestrator analyzes application instances running on multiple provisioned virtual machines and identifies at least one unused virtual machine among the multiple provisioned virtual machines. The orchestrator terminates processes running on the unused virtual machine and clears data associated with the unused virtual machine. The cleared virtual machine is added to a virtual machine pool for use by another application instance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08997093&OS=08997093&RS=08997093
owner: SAP SE
number: 08997093
owner_city: Walldorf
owner_country: DE
publication_date: 20120417
---
The present disclosure relates generally to the management of applications and more specifically to installing and configuring multiple applications.

Many computing systems allow users to manage applications running thereon. In some situations users of these computing systems require significant knowledge and time to effectively manage the applications. Further since different users may implement and manage applications utilizing different techniques changes to the computing system may require different users to perform different activities based on a particular application s configuration and operation.

In some computing systems applications are run on one or more virtual machines. A virtual machine includes for example a software implementation of a computing system or operating system that supports applications in a manner similar to a physical computing device. A particular computing system can implement multiple virtual machines each of which are capable of running one or more applications. Users desiring to run applications on a virtual machine typically require specific expertise to properly deploy applications and manage their operation on the virtual machine.

The description that follows includes illustrative systems methods techniques instruction sequences and computing machine program products that embody illustrative embodiments. In the following description for purposes of explanation numerous specific details are set forth in order to provide an understanding of various embodiments of the inventive subject matter. It will be evident however to those skilled in the art that embodiments of the inventive subject matter may be practiced without these specific details. In general well known instruction instances protocols structures and techniques have not been shown in detail.

At least some of the embodiments described herein provide a platform and various techniques for managing the installation of one or more applications. These embodiments discuss by way of example the installation and management of applications running on one or more virtual machines. Some embodiments describe an example platform that allows users to deploy multiple applications in a managed environment. For example this platform allows the users to configure applications start applications suspend applications and stop applications. Additionally the platform may support the monitoring the status or health of an application running on one or more systems or virtual machines. Embodiments of the platform are capable of scaling in capacity and performance to support changes in the number of running applications and the resource requirements of those applications.

The systems and methods described herein may also support the management and re use of virtual machines in a secure manner. For example when a virtual machine is no longer used by an instance of an application the virtual machine may be cleared of all old data and reconfigured for use by a different application instance. Rather than terminating the existing virtual machine and provisioning a new virtual machine which uses significant computational resources the existing virtual machine is re used without termination.

Some embodiments described herein simplify the preparation and management of system resources from the end user s perspective. The end user includes for example a person desiring to run an application on a virtual machine who does not have the knowledge to properly deploy applications and manage their operation on the virtual machine. These tasks often performed by developers or administrators with specialized knowledge are managed and performed on behalf of the end user by the methods and systems described herein. For example some embodiments perform a significant portion of the tasks associated with preparing physical and virtual resources for running applications. Additionally these embodiments perform many of the management tasks and operating system specific tasks associated with running applications on one or more virtual machines such that the end user is not responsible for those tasks.

The application management platform may include a load balancer and an orchestrator . The load balancer receives requests and other information from user systems . The load balancer analyzes the received request and may route the request to one of multiple virtual machines hosting an application associated with the request. If multiple virtual machines are hosting a particular application the load balancer will route the received request in a manner that load balances the application tasks across the multiple virtual machines . Additionally the load balancer may communicate with other modules and components in the application management platform to manage or assist with managing the operation of the system and the applications running on the virtual machines .

The orchestrator coordinates the operation of various tasks and operations associated with managing the applications running on the virtual machines . For example the orchestrator manages the provisioning of one or more virtual machines on which one or more applications are hosted. The orchestrator also stores information e.g. status information associated with the virtual machines to manage the multiple applications. That information is communicated from the orchestrator to the load balancer such that the load balancer can apply the information to load balance application tasks and requests across the virtual machines .

In some embodiments the orchestrator reads and updates runtime states and configuration associated with the virtual machines and the applications hosted thereon. Additionally the orchestrator may communicate directly with specific virtual machines as necessary to request application specific information associated with an application hosted on the specific virtual machine .

The application management platform may also include a monitoring module that monitors the operation of the virtual machines . Information obtained by the monitoring module may be provided to the orchestrator and the load balancer for use in load balancing and other application management tasks. A repository stores various information received by and generated by the applications components and modules associated with the methods and systems discussed herein. For example the repository may store application binaries configuration information runtime state information and the like.

The repository is accessed by multiple components and modules such as the orchestrator the monitoring module and the virtual machines . The repository may also be referred to as a repository server. As shown in the orchestrator and the monitoring module each communicate with the load balancer the virtual machines and the repository .

In the example of the application management platform includes multiple virtual machines . The individual virtual machines are identified as and . A particular embodiment may include any number of individual virtual machines operating at a specific time. The number of operating virtual machines typically changes over time as new virtual machines are provisioned or terminated based on the changing needs of the end users the systems utilizing the virtual machines and the like.

The domain manager starts pauses and stops running applications e.g. instances of applications running on the virtual machines . The domain manager may also obtain status information from applications running on the virtual machines . The repository client communicates with repository to for example store data to repository and access data from repository . The deployment module performs various tasks associated with the deployment of applications. For example the deployment module may communicate various application binary artifacts within the application management platform . As discussed herein an application component is a logical entity that has a name and abstracts various binaries associated with the component. A binary artifact is a file that is for example communicated by the deployment module within the application management platform .

In some embodiments the orchestrator includes a virtual machine pool that contains information regarding virtual machines that are available to run instances of applications. The virtual machine pool may also contain other information associated with the virtual machines such as virtual machine configuration data. The virtual machine pool is discussed in greater detail herein.

The method continues by determining whether an archive transformation is needed at . In some embodiments applications can be provisioned when they are in a particular format. The application management platform supports multiple formats. Therefore certain formats need to be transformed into the particular format for provisioning of the application. This transformation includes repackaging the applications or application components such that the applications can be provisioned onto a virtual machine within the application management platform . In some embodiments this transformation is performed once e.g. during application deployment such that the single transformation can support the starting of multiple instances of the application. If the method determines that an archive transformation is needed at the application archive is transformed to correspond to the characteristics of the platform. If no transformation is needed method skips operation and continues to to store the application archive and configuration data in the repository. Once stored in the repository the application archive and configuration data is accessible by virtual machines and other components or applications in the application management platform .

In a particular example the request to start an instance of an application is received from a user or another system. In some implementations the requested application may already be running on one or more virtual machines. However an additional virtual machine may be necessary to adequately service an additional instance of the application. The method also identifies application code for the requested application stored in the repository. This application code includes for example binary files that will be used by the new virtual machine to host one or more instances of the application. The request to start an instance of an application received at triggers the method to identify and access the appropriate application code and other data necessary to start the instance of the application. The user or system requesting the application is not required to identify the application code or other data. Instead the application platform management system performs these functions in response to the request.

The method continues by selecting a virtual machine template based on the requested application at . The virtual machine template provides information necessary to provision a new virtual machine and configure the new virtual machine to host the requested application. In some embodiments the virtual machine template is a binary file that represents a virtual machine image which may include a guest operating system and any applications used to manage the virtual machine. The binary file may also include ping infrastructure data virtualization environment status reporting applications log forwarding applications for centralizing log data and hooks that the virtualization environment can use to execute applications on the virtual machine. In some embodiments the virtual machine template further includes information related to the configuration of the virtual machine hardware such as a number of CPUs central processing units number of cores memory size empty disk volume size and the like. The appropriate virtual machine template is selected at based on configuration information that is stored during the deployment procedure such as the method discussed herein with respect to .

Using the virtual machine template and the received application code the method provisions a new virtual machine at to run the requested application. After provisioning the new virtual machine the method makes the new virtual machine available to start running one or more instances of the requested application at . Additionally the method provisions the instance of the requested application on the new virtual machine at . Provisioning the instance of the requested application includes starting stopping and monitoring the application as well as registering the application with the load balancer.

After the new application instance is created on the new virtual machine the method invokes a process on the new virtual machine to monitor operation of the new application instance at . Additionally the method notifies a load balancer that the new application instance is available to serve end user requests at . This allows the load balancer to distribute application processing requirements across multiple virtual machines which includes the newly provisioned virtual machine. The method then creates an in memory representation of the new application instance at . In some embodiments this in memory representation of the new application instance is updated based on operation of the new application instance. For example the in memory representation may be updated on a regular basis to represent the current operating status of the new application instance. Additionally the in memory representation may be updated each time operation of the new application instance is paused stopped or restarted.

A time based trigger is used to update the runtime states and configurations at periodic intervals. When an update is triggered at the orchestrator communicates with the virtual machine to receive updated state and configuration information associated with the virtual machine at . The orchestrator then updates the stored virtual machine runtime states and configurations at . Additionally the orchestrator notifies a load balancer of the updated virtual machine runtime states and configurations at . This updated information allows the load balancer to better allocate application requests and other resource related tasks among the various virtual machines. For example if a particular virtual machine has little remaining computing capacity the load balance may shift a portion of the tasks associated with the particular virtual machine to a different virtual machine to better distribute the load across multiple virtual machines.

Initially the method identifies multiple provisioned virtual machines based on for example information stored in repository . In some embodiments the repository stores information about currently provisioned virtual machines running within application management platform . In other embodiments one or more other components or systems store information regarding the currently provisioned virtual machines. The method analyzes any application instances running on each of the provisioned virtual machines at to determine the status e.g. active or inactive of the application instances. For example the virtual machine monitor regularly monitors application processes and sends that information to the orchestrator . The orchestrator uses the information from the virtual machine monitor as well as information received from the monitoring module to determine the status of each application instance. In some situations a particular virtual machine may not be running any application instances. Further some virtual machines may include one or more instances of applications that were started on the virtual machine but no longer active. For example inactive application instances may include instances of applications that were deployed but are not registered in the load balancer . This may occur due to an application failure manual stoppage of the application by a user and the like.

The method determines at whether any of the provisioned virtual machines are unused i.e. not running any active application instances . If no unused virtual machines are identified method ends. In some embodiments method is initiated at periodic intervals to identify unused virtual machines. If one or more unused virtual machines are identified the method terminates any application instances and processes running on the unused virtual machine at . In some embodiments method terminates all processes that were installed during provisioning of the application instance. Additionally data associated with the unused virtual machine is cleared at . The cleared data includes for example application settings application data and configuration information.

The method continues by determining whether the unused virtual machine was successfully cleared of all data at which includes successfully terminating all application instances and processes. If the unused virtual machine was successfully cleared the cleared virtual machine is added to a virtual machine pool at . The virtual machine pool contains information relating to any number of virtual machines that are available to run instances of applications. The virtual machine pool may also contain other information associated with the virtual machines such as virtual machine configuration data. In some embodiments the virtual machine pool is contained within the orchestrator as shown in by reference indicator . In other embodiments the virtual machine pool is contained in another component module or system.

If at the unused virtual machine was not successfully cleared the unused virtual machine is terminated at . For example if any user processes remain active after the application instance is stopped the virtual machine is terminated. These active processes may indicate a malfunctioning application malfunctioning process or a malicious process. Rather than continuing to use the virtual machine with uncleared processes the method terminates the virtual machine to minimize the likelihood of problems with running other instances of applications.

If at an appropriate virtual machine is identified in the virtual machine pool the method selects a particular virtual machine from the virtual machine pool at . If only one virtual machine is appropriate for the requested application instance that virtual machine is selected. If multiple virtual machines are appropriate for the requested virtual machine pool the method selects one of the multiple virtual machines to run the requested application instance. Any selection technique may be applied to select one of the multiple virtual machines. In some embodiments the first virtual machine on the list of multiple virtual machines is selected.

After selecting a virtual machine from the virtual machine pool the method calculates a provisioning plan for provisioning the application instance on the selected virtual machine at . The provisioning plan includes configuration information that is communicated to the selected virtual machine at . The configuration information includes for example information for configuring the virtual machine such that the application instance is properly handled by the virtual machine. Additionally the provisioning plan may include a sequence of scripts to be executed locations of software packages designations of necessary services and the like. In some embodiments the provisioning plan is calculated by cloud controller contained in the orchestrator . After the virtual machine is appropriately configured the method provisions the application instance on the selected virtual machine at . The new instance of the application is then started on the selected virtual machine at .

In some embodiments the cloud controller contained in the orchestrator prepares the data and other information necessary for provisioning the application instance on the selected virtual machine. The cloud controller also triggers starting of the application instance on the selected virtual machine through a secure connection. After starting the application instance the cloud controller awaits the results associated with the running of the application instance.

In some embodiments orchestrator communicates with the provisioning module in a particular virtual machine . A similar module runs on each virtual machine and accepts communications from a trusted component within the orchestrator such as the cloud controller . These communications between the orchestrator and the virtual machine may use an API application programming interface with multiple methods. The multiple methods include for example a method that bootstraps provisioning scripts and related information from the repository to a file system associated with the virtual machine. Other methods associated with the API execute scripts on a virtual machine that return strings containing process exit code process output and error logs. Additional methods associated with the API transfer files to the file system of the virtual machine and get files from the file system of the virtual machine. The communications between the orchestrator and the virtual machine may include certificates which are maintained in key stores to provide secure communications.

The machine is capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine. Further while only a single machine is illustrated the term machine shall also be taken to include any collection of machines that individually or jointly execute a set or multiple sets of instructions to perform any one or more of the methodologies discussed herein.

The example of the processing system includes a processor for example a central processing unit CPU a graphics processing unit GPU or both a main memory for example random access memory and static memory for example static random access memory which communicate with each other via bus . The processing system may further include video display unit for example a plasma display a liquid crystal display LCD or a cathode ray tube CRT . The processing system also includes an alphanumeric input device for example a keyboard a user interface UI navigation device for example a mouse a disk drive unit a signal generation device for example a speaker and a network interface device .

The disk drive unit a type of non volatile memory storage includes a machine readable medium on which is stored one or more sets of data structures and instructions for example software embodying or utilized by any one or more of the methodologies or functions described herein. The data structures and instructions may also reside completely or at least partially within the main memory the static memory and or within the processor during execution thereof by processing system with the main memory and processor also constituting machine readable tangible media.

The data structures and instructions may further be transmitted or received over a computer network via network interface device utilizing any one of a number of well known transfer protocols for example HyperText Transfer Protocol HTTP .

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules for example code embodied on a machine readable medium or in a transmission signal or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems for example the processing system or one or more hardware modules of a computer system for example a processor or a group of processors may be configured by software for example an application or application portion as a hardware module that operates to perform certain operations as described herein.

In various embodiments a hardware module may be implemented mechanically or electronically. For example a hardware module may include dedicated circuitry or logic that is permanently configured for example as a special purpose processor such as a field programmable gate array FPGA or an application specific integrated circuit ASIC to perform certain operations. A hardware module may also include programmable logic or circuitry for example as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry for example configured by software may be driven by cost and time considerations.

Accordingly the term hardware module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured for example hardwired or temporarily configured for example programmed to operate in a certain manner and or to perform certain operations described herein. Considering embodiments in which hardware modules are temporarily configured for example programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where the hardware modules include a general purpose processor that is configured using software the general purpose processor may be configured as respective different hardware modules at different times. Software may accordingly configure a processor for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Modules can provide information to and receive information from other modules. For example the described modules may be regarded as being communicatively coupled. Where multiples of such hardware modules exist contemporaneously communications may be achieved through signal transmissions such as for example over appropriate circuits and buses that connect the modules. In embodiments in which multiple modules are configured or instantiated at different times communications between such modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple modules have access. For example one module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further module may then at a later time access the memory device to retrieve and process the stored output. Modules may also initiate communications with input or output devices and can operate on a resource for example a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured for example by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments include processor implemented modules.

Similarly the methods described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or more processors or processor implemented modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processors may be located in a single location for example within a home environment within an office environment or as a server farm while in other embodiments the processors may be distributed across a number of locations.

While the embodiments are described with reference to various implementations and exploitations it will be understood that these embodiments are illustrative and that the scope of claims provided below is not limited to the embodiments described herein. In general the techniques described herein may be implemented with facilities consistent with any hardware system or hardware systems defined herein. Many variations modifications additions and improvements are possible.

Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the claims. In general structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the claims and their equivalents.

