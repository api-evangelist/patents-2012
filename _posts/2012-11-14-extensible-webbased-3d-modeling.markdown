---

title: Extensible web-based 3D modeling
abstract: A system for extending the functionality of a web-based, three-dimensional modeling in a browser application is stored as instructions on a computer-readable medium. The instructions include an interface module that may receive user commands from the browser application that define a script including functions to modify or create a 3D model. The script instructions may cause a rendering of the 3D model to be displayed in a window controlled by the browser application. A modeling engine as a compiled browser plug-in may extends the functionality of the browser application. Further, the modeling engine may include functions to interpret model data corresponding to a 3D model and render the 3D model in accordance with the script. Further instructions include a script interface layer that may expose the modeling engine functions to the interface module for use by the script functions. The script functions extend the modeling engine functions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09256453&OS=09256453&RS=09256453
owner: Trimble Navigation Limited
number: 09256453
owner_city: Sunnyvale
owner_country: US
publication_date: 20121114
---
This application claims the benefit of U.S. Provisional Patent Application No. 61 559 934 filed on Nov. 15 2011 entitled Extensible Web Based 3D Modeling the disclosure of which is hereby expressly incorporated herein by reference.

This disclosure relates to a system and method for developing three dimensional models of graphical objects and in particular to an extensible web based system and method for developing three dimensional graphic objects.

The background description provided herein is for the purpose of generally presenting the context of the disclosure. Work of the presently named inventors to the extent it is described in this background section as well as aspects of the description that may not otherwise qualify as prior art at the time of filing are neither expressly nor impliedly admitted as prior art against the present disclosure.

Today professional as well as non professional users in a variety of different fields such as engineering architecture automotive design graphic design advertising fashion design medicine etc. can develop three dimensional 3D models of buildings vehicles and other objects using 3D modeling software that operates on a computing device. A user typically interacts with 3D modeling software via input devices such as a keyboard mouse trackball and or stylus and the drafting document is displayed on a graphical display device such as a computer monitor or screen.

In general 3D modeling software allows a user to draw various three dimensional shapes directly or by defining two dimensional faces that make up 3D shapes apply colors and or textures to the shapes move scale rotate and skew the shapes etc. 3D modeling software typically provides the user with stock objects e.g. 3D shapes such as spheres or parallelepipeds and or two dimensional 2D shapes such as arcs circles rectangles and other known geometric shapes and or provides tools to create such objects. Further 3D modeling software typically allows users to save models as files that conform to a certain predefined format. To share models users transmit to each other files with the corresponding model data or upload the files to data servers.

Users usually develop 3D models by sequentially entering various drawing and image manipulation commands via a graphical user interface GUI . For example to model a two story building a user may first draw a four wall structure draw a door in one of the walls then draw several windows in the walls etc. The user may then paint or texture the walls the roof and other portions of the model. Many objects may need to be repeatedly drawn within a three dimensional object. For the two story building a particular style of window may need to be drawn several times within the various floors of the building a particular style of roof may be repeated across a wide area shutters or other decorative structures may need to be repeatedly placed next to the windows etc. Accordingly it may take a significant amount of time for a user or group of users to develop a complex and detailed model that includes actions or objects that need to be repeated many times to complete the building.

The features and advantages described in this summary and the following detailed description are not all inclusive. Many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims hereof. Additionally other embodiments may omit one or more or all of the features and advantages described in this summary.

In an embodiment a tangible non transitory computer readable medium stores instructions for three dimensional 3D modeling in a browser application and executes on a processor of a computing device. The instructions may comprise an interface module that executes on the processor to receive user commands from the browser application. The commands may define a script including functions to modify or create a 3D model and cause a rendering of the 3D model to be displayed in a window controlled by the browser application. Further instructions include a modeling engine that executes on the processor as a compiled plug in component of the browser application. The modeling engine may extend the functionality of the browser application and include functions to interpret model data corresponding to a 3D model and to render the 3D model in accordance with the script. Still further instructions include a script interface layer that executes on the processor to expose the modeling engine functions to the interface module for use by the script functions. The script functions may extend the modeling engine functions.

In a further embodiment a computing device for extending functions of a 3D modeling system may comprise a network interface coupled to a communication network a processor a memory coupled to the processor and a display device coupled to the processor. Further a browser application stored in the memory may execute on the processor to retrieve content from remote hosts via the communications network interface and render the retrieved content on the display device. A 3D modeling software module stored in the memory may execute on the processor and include components. For example the components may include an interface module that executes on the processor to receive user commands from the browser application. The commands may define a script including functions to modify or create a 3D model and cause a rendering of the 3D model to be displayed in a window controlled by the browser application. A modeling engine module may execute on the processor as a compiled plug in component of the browser application. The modeling engine may extend the functionality of the browser application and include functions that cause the processor to interpret model data corresponding to a 3D model and to render the 3D model on the display device in accordance with the script. Further a script interface layer may execute on the processor to expose the modeling engine functions to the interface module for use by the script functions. The script functions may extend the modeling engine functions.

In a still further embodiment a method for extending functions of a browser based 3D modeling system in a computing device operating on a communication network and having a memory and a processor may comprise several steps. For example the method may receive a 3D modeling engine from a backend server at a browser application. The 3D modeling engine may be received as a compiled plugin including functions to extend the functionality of the browser application and include an interface layer that exposes the 3D modeling engine functions for use by a script. The method may also receive via a user interface of a browser application a user command for authoring the script. The script may include instructions that refer to the 3D modeling engine functions and the functions may modify respective portions of model data to change one or more of dimensionality positioning and color of a 3D model component. The method may also send the script to a backend database. The script may be executed to extend the 3D modeling engine functions.

The figures depict a preferred embodiment of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

In embodiments described below a script interface layer of a web based 3D modeling engine operating in a web browser application on a client device allows a user to develop additional operations to extend the functionality of the engine. The 3D modeling engine may be implemented as a browser plugin and include compiled instructions that are executable by a processor of a client device. The engine may provide functions for creating and manipulating objects in a 3D modeling environment applying colors and textures to the shapes etc. The script interface layer may expose functions of the engine to add scripts that are interpretable by a component of the layer to provide additional 3D modeling functions. For example the script interface layer may expose certain classes and method within those classes to define additional operations that a user can perform within a web based 3D modeling user interface by accessing the classes. For example using the script interface layer a user may create scripts that define an icons within a toolbar of the user interface that when selected adds a non standard 3D shape to the drawing.

As a browser plugin the user can access modeling functionality without launching a separate application and in some implementations without installing compiled software components on the client device. The 3D modeling software module or simply the modeling software generally allows the user to create and edit 3D models of buildings vehicles items of furniture and other objects using various controls provided via the browser application for manipulating component 3D shapes and or 2D faces defining interactions between the components grouping the components into composite components etc. The modeling software also allows the user to rotate a 3D model displayed in a browser application window change the angle and the distance of the viewpoint relative to the model and otherwise control the manner in which the model is rendered on a user interface of the client device. The modeling software may receive user commands via the browser application for modifying the 3D model generate a representation of the desired modifications also referred to below as mutations of the model and when used in a collaborative environment cause the modifications to the 3D model to be synchronized with at least one other client device see U.S. patent application Ser. No. 13 169 705 filed Jun. 27 2011 entitled Collaborative Development of a Model on a Network the entire disclosure of which is hereby expressly incorporated herein by reference . The 3D model may be stored in a computer memory as data that specifies multiple simple e.g. cuboids spheres and aggregate components having groups of simple components and modifications to the 3D model may include modifications of dimensionality positioning color or texture and other properties of some or all of the components described by the model data.

To operate as a part of a web browser application the 3D modeling software module includes components to display a user interface through a document object model DOM of a browser application or through a window controlled by the browser application the networking functions of the client device on which the browser application executes and the graphics functions provided by the browser application or an extension plugin of the browser application. To support extensibility of the 3D modeling software a script interface layer may be implemented as a separate compiled software module or as part of the 3D modeling software module.

Referring to techniques for extending the functionality of a web based modeling system may be implemented in a communication system for example. In an embodiment the communication system includes a client device and a communication network to which the client device is communicatively coupled. In operation a user operating the client device develops a model of an object or a group of objects. The communication system may also include a modeling server in which a scripting engine facilitates creating and sharing scripts during the model development process. The modeling server may be coupled to the client device via the communication network . Further in an embodiment the communication system includes a model database to store model data corresponding to various 3D models and a script database to store various user defined scripts .

The client device includes a central processing unit CPU having one or more processors to execute computer readable instructions a random access memory RAM unit to store data and instructions during operation program storage including persistent memory to store software applications shared software components such as Dynamic link Libraries DLLs and other programs executed by the CPU data storage including persistent memory to store data used by the programs stored in the program storage and a network interface to support wired and or wireless communications with the modeling server and other devices operating on the network . By way of example the program storage and the data storage may be implemented on a hard disk drive HDD coupled to the CPU via a bus. Generally speaking each of the components and may be implemented in any suitable manner as a single module multiple modules or a component of another module. Further the memory components such as the RAM the program storage and the data storage may include any suitable type of tangible non transitory computer readable medium.

In the example implementation of the client device is a personal computer PC . However in general the client device may be any suitable stationary or portable computing device such as a tablet PC a smart phone etc. Although the computing device in the example of includes both storage and processing components the client device in other embodiments can be a so called thin client that depends on another computing device for certain computing and or storage functions. For example in one such embodiment the data storage and the program storage are external to the computing device and are connected to the client device via a network link. Further the client device may be coupled to an input device and an output device . The input device may include for example a pointing device such as a mouse a keyboard a touch screen a trackball device a digitizing tablet or a microphone and the output device may include an LCD display device a touch screen or another suitable output device. Using the input device and the output device a user can access a graphical user interface GUI of the client device .

With continued reference to the program storage may store a browser application for retrieving content from hosts operating on the network interpreting and rendering the content supporting various user interactions with the retrieved content and providing an interface to author scripts to manipulate the content. Several examples related to browser functionality are discussed in more detail below with reference to . In some embodiments the program storage stores a 3D modeling software module that implements a scripting interface layer and executes in the browser application to develop both 3D models and scripts to develop format and manipulate the 3D models. In other embodiments the modeling client may be stored in the RAM during runtime and not stored in persistent memory. For example the modeling engine may be downloaded from the modeling server each time a user develops a 3D model at the client device . To this end the modeling server may include tangible non transitory computer readable medium on which the instructions of the modeling client and script interface layer are stored.

As explained below the modeling client may include a set of compiled instructions executable directly on the CPU a set of instructions stored on a computer readable medium and interpretable by the browser application at runtime to be executed on the CPU or both. Generally speaking the modeling client provides a set of modeling controls to generate position and variously adjust three dimensional objects apply textures to the shapes or surfaces define interactions between shapes etc. Furthermore the script interface layer may expose functions and methods of the modeling engine so that a user may author various scripts to create and manipulate shapes.

With reference to a computing environment may include an operating system which may be any suitable operating system such as Android Windows Linux Mac OS Android iOS etc. In general the operating system may include functions and support drivers for scheduling and executing tasks obtaining memory resources accessing the file system as well as input devices output devices display devices and other peripheral devices exchanging messages between tasks etc. The operating system may include networking functions to support wired and or wireless communications with other network devices. For example the networking functions may include device drivers to support network cards or other network interface modules such as the network interface illustrated in for example.

In the computing environment a browser application executes on the operating system to provide browser functionality which may include core browser functionality user interface features and optionally one or several additional features such as playback of certain multimedia content for example. Generally speaking core browser functionality may include messaging according to such communication protocols as Internet Protocol IP Transmission Control Protocol TCP User Datagram Protocol UDP Secure Socket Layer SSL and Hypertext Transfer Protocol HTTP parsing of content provided in a mark up language e.g. Hypertext Markup Language or HTML and scripts provided in a scripting language e.g. JavaScript authentication management of digital certificates for SSL communications caching web content and managing the cache etc. In other embodiments however at least some of the messaging functionality may be provided by the operating system e.g. by the networking functions . Further depending on the implementation the core browser functionality may include rendering images provided in a standard image format such as BMP JPEG or GIF for example as well as playing back audio files or feeds and displaying video content provided in respective audio and video formats. An interface for a modeling client may be implemented as a component of the browser . The browser interface may allow a user to interact with functions of a modeling client to create and edit scripts specify target hosts and resources view the rendered content select links control interactive content etc. The browser and interface may also use functions provided by the operating system for generating viewing windows displaying user controls processing events related to the displayed user controls etc.

The modeling client may be provided as a plugin that extends the functionality of the browser . A modeling client may include a scripting Application Programming Interface API and a modeling engine . In particular the modeling client may include compiled code with functions that may be invoked by the browser . The modeling client can be installed in the computing environment only after a user of the corresponding computing device agrees to the terms of use of the modeling client . The modeling client may correspond to the 3D modeling software module and may be provided by the modeling server to the client device in response to a request from the client device .

The modeling client may include a modeling engine and a scripting component . In one embodiment the browser interface receives events and data from and provides content to the browser module . For example the browser interface may receive keyboard events mouse click events touch screen gesture events voice commands packets received from network devices via the network functions relevant events of the OS etc. The browser interface may provide data such as a raster image of a 3D model to the browser module route events originating in the modeling client to the browser permit a user to create and edit a script etc. In general the browser interface may facilitate various interactions between the browser the modeling client and a scripting API as described herein.

The modeling engine interprets model data to generate a raster image of the corresponding 3D model creates new components in response to commands received via the browser interface modifies model data to add remove resize retexture and otherwise update selected components and provides other functionality for developing 3D models. Using the interface to interact with the modeling engine a user may generate and position 3D shapes and in some cases 2D shapes apply colors and or textures to various shapes move scale rotate and skew the shapes group shapes to define aggregate model components etc.

The scripting API provides an interface via which certain functionality and data structures of the modeling client are made accessible to other programs so that the functionality of the modeling client can be extended to include additional features. The interface provided by the scripting API may be consistent with a scripting language supported by the browser application and the browser application may include a script interpreter to interpret at runtime and execute instructions in a scripting language. For example in an embodiment the browser and the scripting API support Javascript instructions.

A collaboration function may allow users to select various mechanisms for resolving or preventing conflicts between concurrent edits of models and scripts . Users may select the desired mechanisms programmatically for example via additional scripts compatible with the script based collaboration function . In an embodiment the collaboration function includes a locking function to lock the model or a component of the model or a script so as to reserve the model script or the component for editing. In response to a user activating the locking function the collaboration function may generate a locking notification to notify one or more client devices that the script component has been locked. Various other functions may allow client devices to modify the same script component in parallel without locking the component and allow users to select various mechanisms for resolving or preventing conflicts between concurrent edits.

Each of the components may be provided as a respective set of compiled instructions within the modeling client . In another embodiment the modeling client initially may be provided with the modeling engine and interface module and the collaboration function may be provided in the form of additional compiled instructions in response to a separate request from the client device.

The 3D modeling sub system includes a browser application in which a 3D modeling engine may operate as a plugin implemented at least partially as a set of compiled instructions. The 3D modeling engine may be provided as a dynamic link library DLL for example. Typically the functions of the 3D modeling engine may execute at the same speed as the browser application . Moreover the 3D modeling engine may be provided as a file stored in a predefined location which the browser application always queries upon launch to detect the presence of and automatically load files conforming to a certain format.

The 3D modeling engine may be platform specific and can be provided in different formats for different operating systems. In some embodiments the 3D modeling engine utilizes graphics functions provided as a part of the browser application or externally to the browser application . For example the 3D modeling engine may use cross platform APIs for efficiently rendering graphics such as OpenGL . More specifically the 3D modeling engine may interpret model data which may include descriptions of various 3D and or 2D shapes that make up the corresponding 3D model stored in any suitable format including a proprietary format defined specifically for 3D model data and invoke various functions of the OpenGL API for drawing lines points and other basic primitives to efficiently generate raster images. The OpenGL API in turn may utilize the available graphics hardware such a GPU transparently to the 3D modeling engine . In response to receiving a user interface event from the browser application indicating that the 3D model is to be rotated the 3D modeling engine may re interpret the model data to determine which combination of geometric primitives describes the new perspective view of the 3D model and invoke the corresponding OpenGL functions. In addition to interpreting model data the 3D modeling engine may provide functionality similar to that of the modeling engine described in relation to above.

The 3D modeling sub system also may include a script interface component to facilitate the interaction of the 3D modeling engine with the user interface module of the browser application and provide a framework for efficiently adding extensions to the available 3D modeling functionality. More specifically the script interface component may include a low level engine API one or several browser specific components a glue layer and a script API . The browser specific components may include for example an ActiveX component configured to wrap or operate as a proxy for the functions of the 3D modeling engine so as to operate specifically in an ActiveX framework if the browser application is a Microsoft Explorer browser or a compatible application. As another example the component may be a Netscape Plugin Application Programming Interface NPAPI component. Depending on the implementation of the browser application one of the browser specific components may be active when 3D modeling functionality of the modeling sub system is invoked while the other browser specific components may remain inactive.

The low level engine API provides an interface between the 3D browser specific components and the 3D modeling engine so that the same 3D modeling engine can be used in multiple or all browser applications which in some cases are provided by different manufacturers. For example in an embodiment the same 3D modeling engine can be used in a Microsoft Explorer Mozilla Firefox Safari or a Google Chrome browser application and a respective one of the browser specific components makes the 3D modeling engine compatible with the corresponding framework via the low level engine API .

The glue layer may be implemented in an Interface Description Language IDL for example to bridge browser specific components with the script API which provides access to at least some functions of the 3D modeling engine and in some cases other functions exposed by the browser application via a scripting language interpretable by the browser application at runtime. The script API may be provided in JavaScript for example. Generally speaking the script API allows users to efficiently extend customize and configure the 3D modeling engine via various scripts .

In an embodiment 3D modeling engine includes collaborative functionality. In another embodiment however the 3D modeling engine does not include collaborative functionality and the script API is used to add collaborative functionality to the 3D modeling sub system via one of the scripts . For example referring back to the scripting API in the computing environment may be similar to the script API and the collaboration function may be developed as discussed above to add collaborative functionality to the modeling engine . In yet another embodiment the 3D modeling engine provides several different mechanisms that can be used for collaborative modeling on a communication network and the script API is used by one of the scripts to select and access the desired mechanism.

The user interface module may define user interface functions for 3D modeling in the browser application . More specifically the user interface module may provide functions for manipulating objects e.g. drag drop highlight within a window which the browser application allocates and controls for 3D modeling. Further the user interface module may provide various interactive controls displayed within the window. These interactive controls may be for example icons on which a user may click to select stock objects texture or color objects rotate objects scale objects etc. The user interface module may also include functions to author a script within a window of the browser. The script may include instructions that also manipulate or create objects using the 3D modeling engine . For example the script instructions may cause the modeling engine to interpret model data to determine a combination of geometric primitives and invoke a corresponding OpenGL function to make changes to the displayed model. The user interface module may also use a function of a script to access another function of the 3D modeling engine to add an interactive control within the window. These scripts may define JavaScript functions that implement various interactive controls and functions of the 3D modeling engine to draw format or edit components of a 3D model. The user interface module may be implemented using a suitable Software Development Kit SDK for developing front end scripts such as Asynchronous JavaScript and XML AJAX instructions that run on different types of browser applications. In an embodiment the user interface module is implemented using Google Web Toolkit GWT .

The devices discussed above may be used to provide extensible functionality to a web based 3D modeling system. While the extension of the web based modeling system is discussed below in relation to 3D models these or similar techniques also may be applied to 2D drawings and other types of data. For ease of explanation the scenario is discussed with reference to the client device and the modeling server of .

According to an example scenario user Abby operating the client device begins to develop a 3D model as illustrated in . The model may include a house component and a garage component . Each of the components and in turn may include several sub components. For example the house component includes a door walls including a southern wall S an eastern wall E and a roof . A garage component may include a roof a door and walls including a southern wall S and an eastern wall E. The model may also include other components such as windows and a chimney. According to one embodiment each of the components illustrated in is made up of one or more elements such as 3D geographic shapes cuboids spheres pyramids etc. In another embodiment the components of may be generated using groups of two dimensional faces squares circles triangles etc.

The modeling client may generate components of the model using the web based 3D modeling system according to commands received from user Abby. For example to draw the roof Abby may draw multiple shapes and group the shapes using the user interface of the modeling client e.g. by selecting several shapes with a mouse and activating an icon for generating a group of selected shapes . In general a model can have nested components at multiple levels. For example Abby may group several shapes to define a window frame component then group the window frame component with several 3D shapes to define a window component create several instances of the window component and group these several instances into a larger multiple windows component etc.

The script interface layer may allow a user to define a script including instructions that via the script interface layer call functions of the 3D modeling software module to provide additional functionality to the module and the web based 3D modeling system generally. With reference to the scripts may be related to various user controls drawing functions application skins etc. as represented by various icons within a user interface for the web based 3D modeling system . In some embodiments a user may define a script that combines components as groups including multiple 3D shapes and possibly other components and then generate multiple instances of the defined component. For example an interactive control may cause the browser to interpret instructions that instantiate a script interface window . The window may provide the user with a text area to author a script that includes method and functions of the 3D modeling engine plug in e.g. as exposed via the script interface layer API and A B of as described herein . One example of a script defined by the user may include JavaScript instructions to draw a roof component e.g. roof of and an icon as an interactive control corresponding to the script . When a user selects the interactive control icon corresponding to the script the instructions of the script may cause the processor via the browser to execute interpret instructions of the script and draw the roof component . In further embodiments when a user later edits an instance of a script or a component the changes are automatically applied to other instances.

In an embodiment the modeling client utilizes the data structure to represent a selected component of the model in a serialized format. Generally speaking by generating a serialized representation a component branch a device operating in a collaborative development environment permits another device such as a client device or a modeling server to properly resolve conflicts and address collisions between modifications submitted at several devices. A serialized representation and operational transformation OT techniques may allow client devices to modify the same component in parallel without locking the component. A serialized representation of a branch may include a sequence of basic 3D shapes cuboids spheres etc. that make up the corresponding component.

A script may be developed collaboratively as well. If two users collaboratively edit version V of a line of the script such as function drawRoof int x int y int z modifications to the script may be expressed as text editing commands e.g. insert delete replace etc. applied at specific character positions within the script. For example a first user may wish to replace the word draw in the tenth through thirteenth bytes of the line with the word create. A second user may wish to insert the world string q following the nineteenth byte of the line according to the same version V of the line. If the command from the first user is applied to the line before the second user modification the unmodified command from the second user is then applied to the wrong portion of the line. However the commands from the first user and the second user can be easily reconciled by modifying the index at which the new word is to be inserted. In fact in the example above regardless of the order in which the two users submit modifications to the line the conflict between the two commands is easily resolved if the version V to which the corresponding command is applied is known. Thus modifications to documents in which data is represented linearly e.g. JavaScript text documents or in terms of numbered cells e.g. spreadsheets can be concurrently performed using indexing relative to a known version of the document. It is noted that this approach is compatible with lock based as well as lock free collaborative development.

The modeling client may provide a library of functions which may be invoked by the browser at runtime by various scripts that are authored by a user or users managed by the extensions manager and stored in a remote database . The scripts extend the modeling client s basic library of functions. A script API may extend the functionality of the corresponding 3D modeling engine . In an embodiment the modeling client also exposes a library of collaboration functions via a collaboration API. The collaboration API may be provided as a component of the scripting API . The library of functions may include for example a drawBox function to generate a first type of basic shape and a drawCircle function to generate a second type of basic shape and a group geometry function to group the 3D shapes under the root node etc. Users may then use the scripting API to develop a script that uses several of the basic functions to create a component includes several basic 3D shapes. The developed script may also be associated with an interactive control such as the icon . At runtime the icon may be displayed within the user interface . A user may select the icon associated with the script and cause the browser to execute interpret the functions described in the developed script .

In an embodiment the collaboration API provides a transform function which a script or a compiled program may invoke with a parameter list that includes the identifier of an entity e.g. a component an element such as a 3D basic shape etc. a transformation operation selected from a predefined list e.g. translate rotate scale and a user identifier. The collaboration API also provides a new component function to add a definition and or an instance of a component under the root node . The new component function may be invoked with a definition of the new component a user identifier and a component identifier. Also the collaboration API may include functions start edit edit and end edit which the corresponding script invokes when a user begins to edit a component edits the components and completes editing the component respectively. In an embodiment invoking the function start edit causes the collaboration API to automatically lock the component and invoking the function end edit causes the collaboration API to automatically unlock the component.

The profile may also include data about models the user has created and data about models the user has purchased and or downloaded. For example a user may have unrestricted rights to download edit and or share models that the user created which models are identified in the data . Additionally in an embodiment the user may choose the rights associated with any particular model that the user created and the rights associated with each model created by the user may be recorded in the data . The data by comparison may include records related to models that the user has purchased from for example an online marketplace of models or records related to models that user has downloaded or to which the user has been given rights by the model s creator.

Of course the profile also includes data and related to the scripts . For example the profile includes data related to scripts created by the user. Like the models indicated by the data the scripts indicated in the data may be downloadable editable or sharable by the user because the user created the scripts. In an embodiment the user may choose the rights associated with a particular script that the user created and the rights associated with each script created by the user may be recorded in the data . The data may record scripts that the user has purchased in embodiments implementing a marketplace for scripts i.e. a means for users to buy and or sell scripts .

It is not always necessary or desirable however for a user to have installed all of the scripts that the user created e.g. the scripts indicated in the data or the scripts that the user downloaded and or purchased e.g. the scripts indicated in the data . For example a user may create an script solely for the purpose of selling it or making it otherwise available to other users without the user choosing to install the script on the device on which the user runs the 3D modeling application. For this reason in an embodiment the profile additionally includes data indicating scripts that are currently installed on the user s client device. Thus any particular script may be indicated in the data as created by the user but not indicated in the data as installed to run on the user s client device. As a result a user may experience a seamless transition between experiences on multiple client devices. That is the user may install one or more scripts to run with the client on the user s tablet computer e.g. the client device and the scripts may be automatically installed to run with the client on the user s desktop computer e.g. the client device upon the user logging into the user s profile.

Abby may also create an extension S which may also be stored as one of the extension scripts A on the laptop computer . In some embodiments the user may select the interactive control to display the script interface window within the interface . After creating the extension S Abby may activate a control in the 3D modeling application plug in A to upload the extension S to the extension database . Accordingly the software may contact the extension manager via the network and may transmit the extension S to the server for storage in the database . The extension manager may instruct the profile manager to update Abby s profile to indicate e.g. in the data that Abby has uploaded the extension S. If Abby installs the extension S on the laptop computer the extension manager may instruct the profile manager to update Abby s profile to indicate e.g. in the data that Abby has installed the extension S. At the end of Abby s session using the laptop computer or after a time period or immediately the profile manager may update Abby s profile in the profile database .

Later Abby may use her tablet computer . The tablet computer has installed on it browser software B which is configured to run an installed 3D modeling application plug in B and an installed script API B for exposing functions of the 3D modeling plug in B to develop various scripts that may be executed interpreted by the browser B. Abby may enter her identification and authentication information into an interface of the plug in B. The information may be transmitted from the tablet to the server and in particular to the profile manager which may receive the identification and authentication information and associate the tablet computer with Abby s profile . The profile manager may read the data indicating that Abby has previously installed extensions A E and S. In an embodiment the profile manager may request from the tablet computer data indicating scripts B installed on the tablet computer and may instruct the extension manager to transmit to the tablet computer any extensions indicated in the data but not installed on the tablet computer . In another embodiment the profile manager may send to the tablet computer a list of extensions indicated in the data and the tablet computer may send a request for extensions not present among the extensions B. In response to the request the extension manager may transmit to the tablet computer the requested extensions. For example when Abby begins using the tablet computer the scripts B may include only the extension A. Upon receiving the data from the profile manager indicating that extensions A E and S are installed the tablet computer may request extensions B E and S from the extension manager . Some or all of this process may occur without any intervention by Abby. That is the process may be automatic and transparent to the user. In further embodiments the extensions may be shared with other users through the script database via the network .

At block an interactive control may cause a browser A B to execute interpret instructions that instantiate the script interface window within a user interface . The window may provide an interface for the user with the classes and methods of the 3D modeling engine that are exposed through the script interface layer API A B. At block a user may develop a script . The script may include methods from classes exposed via the script interface layer API A B. In some embodiments the exposed classes include methods to draw basic shapes e.g. a cube cylinder sphere etc. as well as methods to combine the shapes into a composite shape add textures and skins to the shapes etc. A script may include a combination of several functions that are exposed to a user in the window via the script interface layer API A B. At block the method may execute instructions to store the developed script in a backend database of the modeling system . In some embodiments the method may execute instructions to cause the developed script to be communicated to the script database via the network . In other embodiments the method may store the developed script locally within the client within a data storage component such as the model script data storage are A.

At block an interactive control may cause the browser A B to access the modeling server via the network . As described above in relation to B and C the 3D Modeling System components i.e. a modeling client modeling engine may be requested by the browser as a plug in component for the browser. In some embodiments login information may be provided to the backend server in order to access the server s or as the client device requests the 3D Modeling System components from the server s to launch the user interface on a client device. At block accessing the backend server for the 3D Modeling System components and may also cause the method to access a user profile corresponding to the login information. As described in relation to the user profile information may correspond to or be associated with data identifying scripts created purchased and installed by the user as well as icons for the scripts . At block the method may use the data and to determine which scripts stored within the script database correspond to the data . For example each script may include an identifier or other information that correlates the login information to the script. At block the method may retrieve the scripts corresponding to the login information. In some embodiments the scripts corresponding to the data are retrieved from the script repository with other 3D Modeling System components i.e. a modeling client modeling engine that are loaded into the program memory of the client device as a browser plug in in block . In other embodiments the scripts corresponding to the data are stored locally e.g. at the client device A B and activated when the 3D Modeling System components are loaded into program memory as a browser plug in at block . At block the method may send the retrieved scripts to the client. The modeling components and may also be sent to the client at bock . At block both the modeling components and may be loaded into the program memory as a browser plug in and the retrieved scripts may be loaded as an extension of the plug in.

The following additional considerations apply to the foregoing discussion. Throughout this specification plural instances may implement components operations or structures described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations one or more of the individual operations may be performed concurrently and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in example configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the subject matter herein.

For example the network may include but is not limited to any combination of a LAN a MAN a WAN a mobile a wired or wireless network a private network or a virtual private network. Moreover while only one client device is illustrated in and two devices are illustrated in to simplify and clarify the description it is understood that any number of client computers or display devices are supported and can be in communication with the server .

Additionally certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code stored on a machine readable medium or hardware modules. A hardware module is tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. a standalone client or server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In various embodiments a hardware module may be implemented mechanically or electronically. For example a hardware module may comprise dedicated circuitry or logic that is permanently configured e.g. as a special purpose processor such as a field programmable gate array FPGA or an application specific integrated circuit ASIC to perform certain operations. A hardware module may also comprise programmable logic or circuitry e.g. as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the term hardware should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner or to perform certain operations described herein. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where the hardware modules comprise a general purpose processor configured using software the general purpose processor may be configured as respective different hardware modules at different times. Software may accordingly configure a processor for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Hardware and software modules can provide information to and receive information from other hardware and or software modules. Accordingly the described hardware modules may be regarded as being communicatively coupled. Where multiple of such hardware or software modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses that connect the hardware or software modules. In embodiments in which multiple hardware modules or software are configured or instantiated at different times communications between such hardware or software modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple hardware or software modules have access. For example one hardware or software module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware or software module may then at a later time access the memory device to retrieve and process the stored output. Hardware and software modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments comprise processor implemented modules.

Similarly the methods or routines described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or processors or processor implemented hardware modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processor or processors may be located in a single location e.g. within a home environment an office environment or as a server farm while in other embodiments the processors may be distributed across a number of locations.

The one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as a software as a service SaaS . For example at least some of the operations may be performed by a group of computers as examples of machines including processors these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. application program interfaces APIs . 

The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the one or more processors or processor implemented modules may be located in a single geographic location e.g. within a home environment an office environment or a server farm . In other example embodiments the one or more processors or processor implemented modules may be distributed across a number of geographic locations.

Some portions of this specification are presented in terms of algorithms or symbolic representations of operations on data stored as bits or binary digital signals within a machine memory e.g. a computer memory . These algorithms or symbolic representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. As used herein an algorithm or a routine is a self consistent sequence of operations or similar processing leading to a desired result. In this context algorithms routines and operations involve physical manipulation of physical quantities. Typically but not necessarily such quantities may take the form of electrical magnetic or optical signals capable of being stored accessed transferred combined compared or otherwise manipulated by a machine. It is convenient at times principally for reasons of common usage to refer to such signals using words such as data content bits values elements symbols characters terms numbers numerals or the like. These words however are merely convenient labels and are to be associated with appropriate physical quantities.

Unless specifically stated otherwise discussions herein using words such as processing computing calculating determining presenting displaying or the like may refer to actions or processes of a machine e.g. a computer that manipulates or transforms data represented as physical e.g. electronic magnetic or optical quantities within one or more memories e.g. volatile memory non volatile memory or a combination thereof registers or other machine components that receive store transmit or display information.

As used herein any reference to one embodiment or an embodiment means that a particular element feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Some embodiments may be described using the expression coupled and connected along with their derivatives. For example some embodiments may be described using the term coupled to indicate that two or more elements are in direct physical or electrical contact. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other. The embodiments are not limited in this context.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a process method article or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process method article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present .

In addition use of the a or an are employed to describe elements and components of the embodiments herein. This is done merely for convenience and to give a general sense of the description. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.

Still further the figures depict preferred embodiments of a web based 3D modeling system for purposes of illustration only. One of ordinary skill in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein.

Upon reading this disclosure those of skill in the art will appreciate still additional alternative structural and functional designs for a system and a process for providing an extensible framework for web based 3D modeling through the disclosed principles herein. Thus while particular embodiments and applications have been illustrated and described it is to be understood that the disclosed embodiments are not limited to the precise construction and components disclosed herein. Various modifications changes and variations which will be apparent to those skilled in the art may be made in the arrangement operation and details of the method and apparatus disclosed herein without departing from the spirit and scope defined in the appended claims.

