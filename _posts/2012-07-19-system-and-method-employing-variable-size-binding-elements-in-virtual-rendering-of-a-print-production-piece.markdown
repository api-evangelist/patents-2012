---

title: System and method employing variable size binding elements in virtual rendering of a print production piece
abstract: A system and method for a pre-print, three-dimensional virtual rendering of a print piece are disclosed. A plurality of modular/pipelined architectural layers are managed, operated, and organized by a controller. A product definition is provided to a job ticket adaptation layer where it is transformed into a physical model. The physical model is then transformed into a display model via the product model layer. The display model is transformed into a scene that can be displayed on a graphical user interface as a three dimensional virtual rendering by a rendering layer, where the rendering includes one or more binding elements to satisfy the product definition. The binding elements may include 3D binding models as well as 2D textures on 3D surfaces to simulate 3D models.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09105116&OS=09105116&RS=09105116
owner: Xerox Corporation
number: 09105116
owner_city: Norwalk
owner_country: US
publication_date: 20120719
---
This application is a continuation in part of and claims priority from U.S. patent application Ser. No. 13 239 988 entitled SYSTEM AND METHOD EMPLOYING VARIABLE SIZE BINDING ELEMENTS IN VIRTUAL RENDERING OF A PRINT PRODUCTION PIECE filed Sep. 22 2011 by Robert J. Rolleston et al. which is hereby incorporated by reference in its entirety.

Cross reference is made to the following application which is hereby incorporated by reference in its entirety for its teachings U.S. Patent Application Publication No. 2006 0114490 U.S. Ser. No. 11 001 431 entitled SYSTEM AND METHOD FOR DOCUMENT PRODUCTION VISUALIZATION filed Dec. 1 2004 by Robert J. Rolleston. Cross reference is also made to the following concurrently filed applications that are each hereby incorporated by reference in their entirety 

a U.S. patent application Ser. No. 13 239 894 for a SYSTEM ARCHITECTURE FOR VIRTUAL RENDERING OF A PRINT PRODUCTION PIECE by R. Rolleston et al. filed Sep. 22 2011 

b U.S. patent application Ser. No. 13 239 908 for a SYSTEM AND METHOD EMPLOYING 3D MODELS IN VIRTUAL RENDERING OF A PRINT PRODUCTION PIECE by R. Rolleston et al. filed Sep. 22 2011 

c U.S. patent application Ser. No. 13 239 946 for a SYSTEM AND METHOD EMPLOYING SEGMENTED MODELS OF BINDING ELEMENTS IN VIRTUAL RENDERING OF A PRINT PRODUCTION PIECE by R. Rolleston et al. filed Sep. 22 2011 

d U.S. patent application Ser. No. 13 239 960 for a SYSTEM AND METHOD EMPLOYING RING TYPE BINDING ELEMENTS IN VIRTUAL RENDERING OF A PRINT PRODUCTION PIECE by R. Rolleston et al. filed Sep. 22 2011 

e U.S. patent application Ser. No. 13 240 019 for a SYSTEM AND METHOD EMPLOYING VARIABLE SIZE MECHANICAL BINDING ELEMENTS IN VIRTUAL RENDERING OF A PRINT PRODUCTION PIECE by R. Rolleston et al. filed Sep. 22 2011 and

f U.S. patent application Ser. No. 13 239 932 for a SYSTEM AND METHOD EMPLOYING TEXTURE TO SIMULATE BINDING ELEMENTS IN VIRTUAL RENDERING OF A PRINT PRODUCTION PIECE by R. Rolleston et al. filed Sep. 22 2011.

The teachings provided herein are directed generally to pre print virtual rendering and depiction of a print job. The method and apparatus disclosed herein include a print system architecture and methodology for Document Production Visualization DPV for viewing of a document as a 3D image which can be inspected manipulated and modified by an end user before committing the job to print out. More particularly a modular architecture for document production visualization is disclosed which may be implemented as a stand alone application or as a client server application which supports the input of different product formats as the print job definition and allows for the plug in use of different 3D rendering engines. Additionally a system and method for managing and adjusting 3D models of binding elements is disclosed.

The printing industry is in a rapid state of change. The economics of the print market are forcing print manufactures to adopt such practices as lean manufacturing and computer integrated manufacturing CIM from order entry to delivery and invoice. Job definition format JDF and job management format JMF are two technical standards being proposed to help ease the flow of data information and content within and among the printing industry. The job definition format and job management format standards are perceived as enablers for the printing industry to move to a computer integrated manufacturing type of production process.

Thus the printing industry is always looking for ways to improve how it conducts business. Of particular interest are ways to reduce production costs and improve efficiency. The system and methods disclosed herein transform the current production print practice by creating an easy to use document production visualization system.

The existing technologies that produce virtual renderings of a finished print piece are generally limited to providing only a two dimensional perspective. There are a few applications that provide a 3D rendering but they are commonly implemented as a vector graphics based animation application with full screen navigation interfaces graphic illustrations and simple interactivity in an antialiased resizable file format that is small enough to stream across a normal modem connection e.g. FLASH or high level computer programming languages that allow small application programs to be downloaded from a server to a client along with data that each program processes e.g. JAVA and may require users to install undesirable plug ins or run special applications. Thus there exists a need for a system architecture that allows for a true 3D rendering in a browser with the ability to utilize various input formats and components e.g. JDF PDF output rendering engines e.g. JAVA3D FLASH Silverlight HTML5 SVG and provide for flexibility of deployment e.g. stand alone application or client server .

The systems and methods disclosed below and generally referred to herein as a document production visualization DPV system has the value of allowing print buyers and print suppliers to deal with the growing complexity of the data and information associated with on demand digital printing. U.S. patent application Ser. No. 11 001 431 incorporated by reference above describes a system and method for the animated viewing of a 3D image of a document. Moreover the system disclosed herein leverages the virtual reality computing power typically available on today s computer workstations and allows for a bi directional flow of information. One aspect of document production visualization is the virtual rendering of the document being described by a job definition format JDF or similar standardized input. This virtual rendering has the advantage of allowing the user to see and even manipulate in 3D the document before further time and materials are committed to a proofing or production process. The document may be viewed as it will appear in its final finished form or alternatively at any stage of a given production process. Also provided are software controls so a user may interact with and modify the 3D image depiction of the document directly altering the job definition format instructions and thereby indirectly altering the actual completed final delivered physical print piece result.

The following summary is provided to facilitate an understanding of some of the innovative aspects unique to the teachings herein and is not intended to be limiting. A full appreciation of the various aspects of the embodiments disclosed herein is gained by taking the entire specification claims drawings and abstract together as a whole.

One aspect of the following disclosure describes improved document production visualization systems and methods.

It is another aspect of the teachings herein to provide for a system that can be implemented as either a stand alone application or a client server application.

It is a further aspect of the teachings herein to provide bi directional flow of information such that a user can alter a three dimensional virtual image display of a print piece and those alterations could be fed backwards through the system to alter the product definition.

It is a further aspect of the teachings herein to describe a system and method for managing and creating 3D models of binding objects of various types e.g. coil comb spring clips paper clips bulldog clips rings including O and D shapes staples Velobind glue tape etc. and the customization of said 3D models.

Disclosed herein is a modular document production visualization system comprising a controller a print product definition a plurality of architecture layers managed and organized by the controller wherein the plurality of architecture layers include a print job ticket adaptation layer a physical model layer a display model layer and a rendering layer the print job ticket adaptation layer transforming the print product definition into a physical model the physical model layer transforming the physical model into a display model and the display model layer transforming the display model into a scene displayed as a three dimensional virtual rendering of the print product definition by the rendering layer on a graphical user interface.

Also disclosed herein is a document production visualization method comprising transforming a print product definition into a physical model utilizing a job ticket adaptation layer transforming the physical model into a display model utilizing a physical model layer transforming the display model into a scene utilizing a display model layer and displaying said scene as a three dimensional virtual rendering utilizing a rendering layer transform to a graphical user interface.

Further disclosed herein is a computer storage medium for generation of a three dimensional virtual rendering the computer usable medium embodying computer program code the computer program code comprising computer executable instructions configured for receiving as input a print product definition and generating a physical model from the print product definition utilizing a job ticket adaptation layer. The method also entails generating a display model from the physical model utilizing a physical model layer and generating a scene from the display model utilizing a display model layer. The scene is displayed as a three dimensional virtual rendering of the print product definition on a graphical user interface utilizing a rendering layer. The method includes providing a controller configured to organize and manage the job ticket adaptation layer the physical model layer the display model layer and the rendering layer.

The aforementioned aspects and other objectives and advantages of the disclosed embodiments can be achieved as described in further detail below.

In there is depicted an exemplary system upon which the following disclosure and methodology may be implemented. It is to be understood that certain aspects of the system would operate in accordance with pre programmed instructions stored on various media and used to operate a local or networked computer system to carry out such features and perhaps across a plurality of interconnected computers at a time. Such a system might include a commercially available personal computer with appropriate graphics rendering capability that can also be associated with a computer storage medium e.g. removable disk or similar portable media RAM ROM and other non transitory means for storing digital information that may be at least read by a computer or similar memory devices and where the system is accessible perhaps via an Internet or intranet for submission of print jobs. It is also contemplated that one or more aspects of the system may be implemented on a dedicated computer workstation such as depicted in . Such a system may be embodied solely in a stand alone workstation as well.

Initially the content for a printing job pages documents etc. is provided by the customer in a print product definition form acceptable to the system. Although depicted as an Internet connection it will be appreciated that various computer storage media and communication techniques may be available for a user to supply the necessary printing job content in a digital form. A networked processor such as a server operates in accordance with suitable pre programmed software which may also be obtained from such computer storage media to store the content for the printing job in a computer storage medium such as memory and to carry out the conversion of the data into suitable objects for virtual rendering on a workstation or similar device with a display.

In one embodiment of the document production visualization system a customization module or service may be employed where a core component of the customization module is a CustomizationService which will be used by the system. The CustomizationService will provide a set of methods to retrieve meta data for a particular model to transform a particular model with given values for the properties etc. A customization servlet may be used as an entry point for the preview system tool and will navigate through a set of web pages for getting the values for the parameters supported by the model. The servlet may also transform the model based on the parameter values provided by the user and store the content as a HTTP session attribute.

As will be appreciated the manner in which a client server model divides the functionality of the system and methods disclosed herein is dependent upon a number of factors including the storage capability processing power communication speed etc. for the client and server. Thus the customization service and its associated operations may reside on the server in one embodiment on the client in another embodiment and may even be shared between the client an server.

Depending upon the environment and the requirements of the document production visualization system the other functions described herein may be similarly directed to the server or the client or may even be configured as a stand alone application operating without interaction with a server. In yet another embodiment the system could be configured as primarily a server based application that simply provides the rasterized pages as you need them.

It should also be recognized that the embodiments and alternatives disclosed herein further contemplate that the system may provide the ability perhaps through a user interface or similar input feature to change a binding element via another service operating on the client. Thus the system would be able to provide updates to not only the 3D and 2D objects but also to page images and other objects that could be changed.

Considering an exemplary embodiment as set forth in workstation provides a graphical user interface in the form of a display a keyboard and a mouse or similar pointing device or as will be understood by one skilled in the art any device for capturing and communicating user gestures of commands including but not limited to scroll keys F or Function keys mouse pads styli track balls wands microphone audio commands touchscreens e.g. touch sensitive user interface iPad smartphone etc. Once the user has approved the 3D virtual rendering for production the approved job definition format JDF and associated virtual rendering data is again stored or updated on memory . Subsequently the pressman or production planner may access the information stored in memory to review the job prior to during and or after production on the printer .

A display model layer then transforms the display model into a scene that when transformed by rendering layer can be displayed on a graphical user interface GUI as a 3D display rendering for viewing by the user via display . The rendering layer adapts to a given rendering package e.g. Java3D in one embodiment and may be implemented as a set of extensions of display model layer classes and other classes as needed. The user may then manipulate the perspective of the displayed 3D rendering through use of user gestures to zoom pan rotate turn pages etc. The display model layer also responds to requests from the rendering layer to update spatial relationships in response to user gestures. The system can be configured to support a bi directional flow of information such that the user may also alter attributes of the 3D rendering as desired changes to the print job and such changes then fed backwards through the system in order to produce an updated product definition that may be stored in memory and or passed on to the printer.

In one embodiment the document production visualization DPV system is comprised of four architectural layers a controller and various utility and graphical user interface GUI software modules. The system may be partitioned into a plurality of modules and third party components. Each of the modules may be organized as a project of an integrated development environment such as NetBeans integrated development environment project e.g. www.netbeans.org Eclipse IDE and VisualStudio. The controller organizes and manages the architectural layers to present the virtual job artifacts and to respond to user gestures. The architecture however is generally made up of the layers and controller.

The physical model is designed to convey all of the physical aspects of a job that the document production visualization system needs and or can understand to enable visualization of the job. The physical model avoids binding the document production visualization system too closely to any specific job specification language or format and as such thereby enables the document production visualization system to be adapted via an implementation of the job ticket adaptation layer to any desired job specification language or format. The physical model per se may be a data structure. Thus there are other software modules which provide the behavior to extract page images from PDF files to construct 3D models of bindings and to manage the display model .

The display model is a representation of a job using abstractions that represent various artifacts produced by the job in a form that is independent of the particular rendering package used. The display model was also created in order to avoid binding the document production visualization system too closely to a specific rendering package and as such enables the document production visualization system to be adapted via the rendering layer to any desired rendering package. The display model per se may be implemented largely as a data structure. Thus there are also other software modules which provide the behavior required to drive the rendering layer.

The rendering layer adapts the document production visualization system to a given rendering package e.g. Java3D in one implementation . The rendering layer is implemented as a set of extensions of display model layer classes and other classes as needed.

Due to the modularity of the architecture for the document production visualization system a range of implementations can be achieved from integrating all of the architectural layers into a single stand alone application to splitting the layers e.g. job ticket adaption layer physical model layer display model layer and rendering layer across computational platforms to achieve a client server application. The client server implementation may be any of a number of possible configurations for example a client where only the 3D rendering occurs on the client or as a thick client wherein the user gestures and display state are also managed on the client. Also contemplated is a super thin client where for example Flash or Java is employed to serve up renderings of the objects in the visualization. In the alternative a super thick client may be employed possibly even as a stand alone application noted herein. From the various alternatives suggested it will be appreciated that in a client server configuration various segmentations of functionality between the client and server may be used to implement the document production visualization system.

As a further example because of the modularity of the disclosed architecture a range of implementations are possible in what may be referred to as a split pipeline approach. All the layers functions described above can be integrated into a single stand alone application. The client server split supports different divisions of functionality between the client and server. Referring briefly to two possible client server implementations are contrasted. One embodiment rightmost uses a thick client implementation where much of the processing is handled by the client. Another embodiment leftmost may utilize a thin client which may employ a common display model manger on the server and only the 3D rendering on the client. The thin client implementation has the advantage of using common display model code for different graphics rending engines but requires communications of all user gestures from the client back to the server. The thick client ties display model manager much closer to the 3D rendering on the client. This has the advantage of having all the user gestures and display state managed on the client but requires more code re write or duplication for each type of rendering engine supported.

Referring next to within the document production visualization system there is a data construct roughly equivalent to the Section Name from Adobe Acrobat or the Input Resource Component from the job definition format JDF . This data construct is the notion of a block e.g. within the physical model data structure. Illustrated in is a physical model represented by physical model blocks PM blocks as used in the makeup of a scene . The physical model blocks represent in the illustrated scene a set of adjoining sheets of the same media with the same orientation. Thus one can trace this construct all the way back to the original page description file PDF where the media type size orientation etc. was defined for any particular set of pages and to the creation of the job definition format JDF where more media attributes color finish thickness etc. . . . could be defined. The example document shown in is a book but other print pieces may be also be represented by the system using a physical model . The example depicted here in is comprised of pages 1 6 that are provided in 8.5 11 portrait mode page 7 which is provided in 11 17 landscape mode and pages 8 9 which are provided once again in 8.5 11 portrait mode. Thus the book is represented by various physical model blocks including in the depicted example an optional cover block 8.5 11 pages blocks and an 11 17 landscape block and an optional back cover block . These mixed page sizes will have the effect of creating different Pages Sections within the Adobe job definition format JDF and different Blocks within the document production visualization system. Although the media change here is page size and page orientation any change in media should typically result in different page sections and blocks.

Each physical model block is then mapped to at least three display model blocks and depending on the status of the block opened closed and turning or more as needed. The display model blocks being six sided objects front back left right top and bottom are be displayed by the rendering layer in a scene with the visibility of each block determined based upon its presence on the right left or turning collections of blocks. These three display model blocks for each physical model block are necessarily associated with the three physical positions needed for 3D display of a set of pages e.g. stack on right stack on left or rotating turning.

The left model blocks by default have the same dimensions as the media but do not have a defined thickness until they are made visible. Thus display model block is not created until it is needed. The rotating display model block by default has the same dimensions as the media and a height of one sheet. However in other scenarios the rotating block can also be a collection of blocks of different sizes. So for example suppose a user selects to go straight from the front to the next to last page in the document. Then it would be necessary to turn all the 8.5 11 blocks and all the 11 17 blocks and some of the remaining 8.5 11 pages to conform to the animation of turning a number of pages at once. This display model block is created only for animation. The right display model block by default has the same dimensions as the media and is initially visible. When the book is opened to the right display model block the showing face data is fetched and made visible. The side faces are almost always visible. The height for the right display model block is calculated by multiplying the page count times media thickness for each block on the right and then summing them for a total thickness.

It is recognized that the similar attributes can be assigned for documents bound on any edge or any corner. The display model blocks can be assigned different physical attributes of the final book such as dimensions face material texture media stiffness etc. Display model blocks can be assigned different face materials. Material or textures that are defined and will be assigned as front image or back image because these faces are rendered at all times and thus need to be fetched and displayed.

The view of the book can then be updated by turning to page 7 and slightly changing the viewing angle as shown by the example depicted in . The scene of shows in a 3D rendering much as a user would find the book exhibited. More specifically the multi block book of opened to a boundary between the top block and middle block . In this scene the back left display model of the physical model block page 6 back and the front of the middle physical model block page 7 front are visible. The remaining physical model block depictions are still not visible although they do have a representation within the display model block data structure because they are obscured by the larger page in front. The only part of the following pages that could be visible from this view is the bottom edge. However there are so few pages as to make perceiving this part of the remaining physical model block depictions difficult and of little value. In one embodiment the user can if needed zoom in on the bottom edge to see these thin blocks.

Considering now the same state of the book e.g. open to page 7 but viewed from behind the scene appears as depicted in the display window of . In this scene a user can now see the back of the last physical model block the back pages on 8.5 11 sheets block which partially covers the depicted back of the middle physical model block the 11 17 landscape sheet block . While not shown here a page turning operation as initiated by user gestures on an interface or within the window creates blocks which are only visible during the animation sequence. They then lay on top of the left or right block as appropriate where they briefly obscure the underlying block s then become invisible as the right and left blocks are updated appropriately.

Illustrated in is a detailed flow chart of several operations illustrating logical operational steps of a method for generating a 3D virtual rendering of a proposed print job using the document production visualization system depicted in . As will be understood by one skilled in the art the method can be implemented in the context of a computer usable and or readable storage medium i.e. fixed in a non transitory state for some period of time that contains a program or software application. A user provides a printing job as a well defined product definition to the system as indicated in step . The job ticket adaptation layer allows for the product definition to be provided as job definition format JDF or as any other descriptive job ticket or template without having to make changes alterations additions or modifications to other parts of the system. As represented by step a job ticket adaptation layer transforms the provided product description into a physical model utilizing any appropriate data transformation methodology such as extensible stylesheet language transformations XSLT . The transformation resolves the product description into artifacts that are then utilized to create a description of the physical attributes of the desired product piece i.e. the physical model .

As represented by step of the physical model layer transforms the physical model into a display model . The display model is then transformed by the display model layer into a scene containing information regarding elements in the scene and their spatial relationships as indicated by step . The scene can then be displayed on a graphical user interface GUI indicated by step by utilizing the rendering layer that transforms the display model into operations on a graphic library. The separation of the display model from the rendering of a scene allows for different rendering engines e.g. JAVA3D FLASH Google O3D HTML 5 etc. to be connected and employed as required without the need to make any changes alterations additions or modifications to other parts of the system. The rendering layer is responsible for maintaining the state of the display model to accurately reflect what is being displayed at a particular moment. The rendering layer is also capable of receiving user gestures that manipulate the objects in the scene and sending requests to the display layer to change the objects or spatial relationships within the scene .

Shown below is one exemplary embodiment of a data structure for a finished document. In this example there is the high level scene within which there is one book The book contains a black coil binding and four blocks . The first block is a single sheet constituting the clear transparent cover. The second block is a single light yellow sheet constituting the title page. The third and fourth blocks are white paper but with different dimensions. Finally there is a list of the holes required to hold the pages within the coil binding.

In one embodiment the document production visualization DPV systems and methods disclosed herein may be employed to move from a portable document format PDF to a job definition format JDF and then into data structures for a DPV system. The following description will briefly describe an example of how a PDF is converted to JDF how JDFs are modified and examined and then the transformation of data structures from JDF to the physical model and display model data structures. In the various examples set forth below for the DPV the examples started as PDF files. These PDF files were used as the basis for creating JDF files using Adobe Acrobat Pro. In some cases the JDF files were then modified using the JDF Editor V2.1.3.50 from CIP4 or on some occasions the XML was hand edited. For example the Adobe Acrobat software using a Create New Job Definition dialog window may be used to create edit a JDF file.

Once created the JDF can be examined with a JDF Editor. Upon opening the JDF with for example a CIP4 editor the information is displayed as illustrated in the example of . provides an exemplary view of the CIP4 JDF Editor in use to view the content of a JDF file. Three different Page Sections from the Adobe Acrobat tool are referenced as three different Input Resource Components in region . The first Input Resource component corresponds to pages 1 6 of the original PDF which was the first Page Section in Adobe Acrobat. Notice that the DescriptiveName Page Section has been preserved. A similar examination of the next two Input Resource components shows similar information and selecting the corresponding element in the tree view section would allow examination of specifics relative to such components e.g. color intent layout intent runlist layout elements etc. . JDF represents the three input Page Sections as components in the Resource Pool . The corresponding XML representation is 

Information under Component ID ID20090307 is the reference to the first six pages of the PDF. There is also a DescriptiveName PageSection which could have been modified in the Adobe JDF Editor tool. In particular the first component is 

This first component can again be recognized as the first Page Section from Adobe Acrobat or the Input Resource Component from the JDF editor or the first six 8.5 11 pages from the original PDF document. The underlined text above indicates the page range JDF counts from 0 whereas PDF counts from 1 the source PDF and the finished dimensions. All three of these data fields are used by the DPV system. Within the DPV system there is a data construct roughly equivalent to the Section Name from Adobe Acrobat or the Input Resource Component from the JDF editor or the Component from the JDF XML this is the notion of a Block within the PM data structure which was described earlier in Sections 1.1 and 1.2 above.

A physical model or PM for Physical Product Model block represents a set of adjoining sheets of the same media as depicted for example in left side . In other words one can trace this construct all the way back to the original PDF where the media type size orientation was defined for any particular set of pages and to the creation of the JDF where more media attributes color finish thickness plex etc. . . . could be defined.

A display block or DM for Display Model is a six sided object to be displayed and forms the basic building block in relation to the DPV system. A physical model block is generally mapped to up to three display model blocks depending on the status of the block for example opened closed and turning . Blocks can be assigned different faces materials or textures that are defined and will be assigned as front image or back image because these faces are rendered at all times and thus need to be fetched and displayed. Thus each PM block would have corresponding DM data elements shown in right side .

Briefly referring to once again display model data elements or blocks and are illustrated for a single physical model block of book or bound document . All the display model blocks in the system are part of the scene graph. In this way the graphics rendering engine determines what part of what block is visible at any given time. For the example discussed this results in the renderings shown in the windows of top opened and back views respectively . More specifically block represents the left block by default and has the same dimensions as the media but doesn t have a height. This is not created until it is needed. Block represents the rotating model block by default and has the same dimensions as the media and a height of one sheet. This is created only for animation. Lastly block represents a right block by default and also has the same dimensions as the media. Block is initially visible. When the document or book is opened to the block the showing faces are visible. The side faces are always visible and the height is calculated by multiplying page count by the media thickness. While not specifically illustrated it will be appreciated from the discussion of element a page turn creates blocks which are only visible during the animation e.g. turning sequence. Subsequent to the page turn the left or right blocks are laid on top of the turned page where they obscure the underlying block update the thickness and surface images and the turning blocks become invisible.

As will be further appreciated from the example described above the document production visualization system is also able to illustrate or simulate the appearance of various binding means and mechanisms that may be applied to the documents that are being visualized.

Having described the general nature of the document product visualization system e.g. and associated architecture e.g. the following disclosure is directed to further aspects and alternative embodiments that may be included with the disclosed system to enable the rendering of display model items.

One difficulty with systems which support a 3D virtual rendering of a finished document is the multitude of different binding types e.g. coil comb wire comb plastic ring clip staples etc which come in different sizes length diameter pitch color etc. The 3D rendering system may need access to several thousand different 3D models depending upon the specifics of a particular shop configuration. Aspects of the system and methods described herein provide for the efficient storage and subsequent presentation of realistic 3D models for a number of binding types with a large assortment of customization attributes.

In one embodiment there are generally two operations involved in the creation of the necessary 3D objects 

Considering the example embodiment of a coil object there are base objects created for coil bindings of pitch 2.5 3.0 4.0 and 5.0 coils inch. These values were chosen by exploring what coil bindings are generally available today and it will be recognized that alternative pitches may be used. The real time manipulation of the base element into the desired final object entails manipulation of a base object and assembly into a final element. Such real time manipulation allows for choice of diameter color and length of the final 3D coil bind object and permits the rapid alteration thereof via input from a user interface e.g. change color . In order to have some control over the size of the base model repository one embodiment limits these variables to an enumerated set although it is conceivable that one or more variables may be entirely user controlled. For example the color value could be any defined RGB value. The diameter however was limited to commercially available sizes whereas the length is limited to an integer number of base units for ease of the current implementation but this is not a requirement.

For the example of a coil object the total number of combinations is on the order of 7 color 14 length 6 diameter 4 pitch 2352. The disclosed embodiment permits the accurate rendering of all of these possible combinations using only four base models e.g. one for each pitch . It is further contemplated that a slightly more complex model may be employed such that a single pitch model may be used and through the use of a stretching operation the pitch could be further varied to achieve a plurality of different or even customized pitches. Such a configuration would further reduce the storage requirements for base model data but is also contemplated to increase the computational demand on the processor s in order to customize the model and render the visualization. It is further envisioned that any of the parameters may be adjusted in real time or defined as pre built models.

To enable rendering of 3D elements the system employs a small base component for each type of binding along with associated meta data and then programmatically combines modified versions of the base element to create a new 3D object which meets the required specifications for the elements. The types of base models and the modifications which can be performed vary across the different binding types as will be described in more detail below. In one embodiment the base elements are stored in a standard format COLLADA open standard schema for exchanging digital assets among graphics software applications which is XML based but other formats could be used. To create a specific binding element the XML data file and associated meta information are read and the data values polygon vertices colors textures etc are replicated and modified to create a new 3D object. This new 3D object may be a single COLLADA XML object that is delivered to the graphics rendering system for placement within the document production visualization scene.

The meta data file will contain information about what properties of the 3D object can be modified and an enumerated set of values for each of those properties. In one embodiment the creation and updating of the objects may be accomplished using standard tools such as 3dsMax Google Sketch UP and Blender. In one embodiment these operations are expected to be done off line and used to populate a repository storing 3D binding objects for example the model repository illustrated in . Similarly the meta data file associated with each object will be created off line. The end use of the repository will be within the visualization system as further represented in where the DPV system is depicted as including model transforms a rendering means and a customization service . In the embodiment of the DPV system requests an object from the CustomizationService with certain parameters e.g. type color diameter length for incorporation into a visualization.

The CustomizationService and repository will reside on a server in one embodiment but may be part of a single application as well. One embodiment of the repository includes all objects necessary to meet the documented binding technologies and methods but it is easily extensible to include other binding objects. An illustration of an exemplary model repository is found in as noted above. The CustomizationService interface defines an application programming interface available to the system to interact with the customization module. The overloaded transform methods return customized binding objects e.g. 2D 3D by transforming the requested base model object with the given property values e.g. JDF specifications .

As will be further appreciated an independent method or procedure may be employed to return the meta data defined for a particular binding object for a given object type or name. A model transformer class may be used to provide support for simple transformations such as setting the color of a binding object scaling the object in a particular axis etc. Model specific and complex transformations can be implemented as individual classes that take care of model specific rules and conditions for the property changes. For example a transformer to lengthen a spiral binding model will specifically define the method to modify the length of the object and may have a set of dependency transformers that will shape up the object to a specific size and shape before the main transformer can act. A meta data schema is bound to a set of java types with a model representing the root element of the meta data and property representing each property declared in the meta xml and class representing each modifier transformer declared in the meta xml.

Each model in the repository has a collection of artifacts . It is required to have at least one object and the associated meta file of information about the object. As described herein the binder requirement specification may be defined by user interaction with at least a menu provided by a graphical user interface wherein the user not only selects the type of binding to be applied but similarly identifies characteristics of the binding e.g. color size etc. . The disclosed system needs to be able to adapt the job or binding object based upon changes to the job description thus the controller supports the bi directional flow of information with the graphical user interface. Moreover the binder requirement specification is defined with values used to modify properties as provided by the meta data in interaction with the graphical user interface menu.

As further described the system includes a base model repository e.g. where at least a portion of each of the plurality of 3D binding elements and associated meta data are managed by the controller. And as noted above the system may be implemented as a plurality of architecture layers managed and organized by the controller including a print job ticket adaptation layer a physical model layer and a display model layer the print job ticket adaptation layer transforming the print product definition into a physical model the physical model layer transforming the physical model into a display model retrieving the 3D binding elements and associated meta data from the model repository as per the binder requirement specification and the display model layer transforming the display model into the print product display model that can be displayed as the virtual 3D rendering of the print product and binder. In one embodiment the graphical user interface receives input in the form of user gestures in interaction with the graphical user interface menu where the input is subsequently used to modify properties provided by the model. As will be further appreciated the Document Production Visualization DPV system may be developed using a software tool to facilitate the creation and management of binding objects themselves as well as the database or repository of objects elements.

Other binding model types that may employ base models in accordance with the various embodiments described herein include spiral binder comb binder plastic comb binder wire comb binder staple stitch tape binder ring or container staple tape glue stitching saddle stitching round head fastener 2 prong fastener VeloBind spring clips bulldog clips various forms of paper clips O rings rings nickel rings b rings brass fasteners etc. For purposes of clarification VeloBind is a binding type that involves punching several holes along the edge of an unbound document then a strip of plastic with extending tines inserted into the holes from the top of the book and a strip with corresponding holes is placed on the back with the tines extending through. Document is placed in a machine that clamps the document while the excess length of the tines is cut and the remaining tine tips melted to complete the bind. VeloBind is a trademark of the General Binding Corporation. Binding models may also be employed to represent embossing foils special inks or stickers applied to the document. Several examples of the information that may be employed in the creation of display models for such bindings is found in the following Table 1.

The base models of the 3D binding elements may be created in a number of ways using any of a variety of 3D design software packages. It will be appreciated however that specific operations are applicable to the creation of base models for other 3D binding types for example comb bindings wire and plastic channel clamp bindings and the like dependent upon the design tool being used. Although a coil binding element is referred to herein as an example it will be appreciated that the use of base models applies to a number of binding types as more specifically set forth below.

Having established the base models by any of several possible methods it is then possible to manipulate the base models. For example the method described below customizes a base or unit model of coil binding based on the requirement specification. The base models are created and exported in a format called COLLADA spec by Khronos group which is an XML format. Changing the values of the elements in the XML will change the model s look and shape. Listed below is an edited version of a Collada .dae file. The following features are noted 

The following example of a file listing produces the representation of a coil segment as illustrated in .

The Coil binds binding elements are available in different lengths colors diameter and possibly pitch values. Although described relative to one of several pre determined pitch values it is further contemplated that the use of a stretching operation may further eliminate the need to include several pitch models for certain bindings where the pitch itself is a function of a stretch factor applied to a common single pitch base model. Other than the pitch property all the other properties are transformed or customized programmatically in response to the job description. And for each property a transformer class is defined to handle that particular property. In other words property transformers are provided for color length diameter and pitch. A simple transformer used to change the color of the model just changes the values of diffuse and ambient components in the effect profile defined. This is a generic transformer applicable to any COLLADA model that uses phong technique to define material color. Relative to diameter the base model is assumed to have a diameter of 1 inch. The transformer customizes the diameter by scaling up or down the coil s X and Z axes uniformly assumed that an objects length runs through the Y axis .

The basic idea of elongation of this type of object is by appending the unit base model a number of times until the desired length is achieved see e.g. contrast between . Basic length transformation does not apply to coils. There are two things to be taken care for coils. First the second coil object to be appended should be mirrored on the X axis so that it fits with the first coil s end. Next the second coil should begin where the first coil ends. For coils the delta or the thickness of the wire is also to be taken care of so that the final coil looks like a single piece i.e. the starting face of the second coil perfectly matches with the ending face of the first coil. The adjustments described are done for each base model appended and finally a coil model of desired length is obtained.

In summary the print document production visualization system includes a controller for controlling and carrying out the various transforms a print product definition determined for example by the job description and a binder requirement specification the details of which are similarly set forth in the job description. In order to produce a visualization of the required binding the system also includes a repository such as a memory for storing a plurality of 3D binding elements and associated meta data managed by the controller where the controller is configured to transform the binding elements and associated meta data as specified by the binder requirement specification into a 3D binder display model for inclusion in the transformation of the print product definition including the binder requirement into a print product display model displayed as a virtual 3D rendering of the print product and binder by rendering on a graphical user interface. As will be further appreciated the binder display model may be retained or stored as only a portion of the binder element and the system produces a print product display model displayed as a virtual 3D rendering of the print product and associated binder by building multiple binders based upon the partial models for rendering on a graphical user interface.

Also described herein is a method or process operating on a computer system or controller for print document production visualization. The method includes receiving and storing in a repository of base models in a computer memory at least one 3D binding element model and associated meta data. The method then receives a print product definition and a binder requirement specification. This information is employed along with the base models to transform a 3D binding element model in the repository and associated meta data into a 3D binder display model as specified by the binder requirement specification. Then the print product definition is transformed into a 3D display model including the 3D binder display model to provide a 3D virtual rendering of the print product definition on a graphical user interface. As will be appreciated user interaction with the graphical user interface menu provides input to the binder requirement specification or it is defined within the JDF or derived from document properties such as the size of the document.

Referring to and C D one aspect of the 3D bindings is the replication of model segments with possible rotations around the Y axis to align ends in order to provide a rendering of the binding over the desired length e.g. an edge of a bound document . This applies to other bindings which have these properties and for which coils and combs are described herein as examples The following description pertains to an exemplary embodiment for a coil binding but aspects thereof are applicable to other 3D binding elements such as combs plastic and wire types etc. Coil or spiral bindings come in assorted lengths colors diameters and pitch e.g. coils inch . Illustrative examples of several coil bindings are depicted in . However the proto object or base model for a coil binding has just a single or at most a few cycles an example of which is shown in .

As will be appreciated the base model of a coil binding element includes a defined shape which in the example is reflected by structure having surface structure components . The coil binding model has an axis and defined end points where the model may be interfaced with additional model segments in order to produce a binding of a specified length as illustrated in the window of .

As previously mentioned the pitch of a coil is not programmatically customized in one embodiment although possible using a stretch operation but an appropriate COLLADA model for the given pitch value is loaded from the repository. This is done by a script which returns the filename of an appropriate COLLADA file based on the property values e.g. pitch supplied. As illustrated for example in the user interface screen of the document production visualization objects for a coil binding type are listed in region . In the lower left region of the interface screen in the properties of an exemplary coil binding are listed. The objects represented as COLLADA files are indeed those that are used for creation of and stored in the repository for access by the visualization system when a user has selected a coil binding for a job. It will also be appreciated that although only four exemplary files are illustrated in a plurality of coil comb and other types of binding files may be included in the repository as discussed herein and as reflected in .

Considering also depicted therein are illustrations of a plastic comb type binding. The base model of a comb binding element includes a defined shape which in the example is reflected by structure having surface structure components . The coil binding model has an axis and defined end points where the model may be interfaced with additional model segments in order to produce a comb binding of a specified length as illustrated in the window of

When the CustomizationService is run for example with a request for a red 6 inch pitch of 2.5 diameter of 1.0 inch coil binding the object is generated and returned is for display. The object is created by programmatically modifying the geometry and scene values that are encoded in the base model. This may include modifying the vertices normals positions and colors of one or more geometries in the proto object in order to place the object in the scene as needed. It will also be recognized that different types of binding objects will have different meta files proto objects and code to combine and modify the proto objects into new single objects. Examples of coil and comb bindings are illustrated in and B respectively where it is apparent that the geometries of the proto object have indeed been modified in accordance with the scene.

Another binding attribute is illustrated by reference to various types of ring binding components e.g. 3 ring binders as depicted in for example where the size spacing and location of a required number of rings e.g. ring binders and nickel rings is incorporated in the rendering of the print product. This applies to other bindings which have similar properties and ring binders are example embodiments that will be further discussed herein.

More specifically this ring binding type may be provided for visualization in the disclosed systems and methods as a single or multi ring type binder that is capable of holding a number of documents or pages with different thicknesses and any of a number of ring positions. The ring binders come in three general types O Ring and D Ring binders with associated metal connectors and covers as depicted in as well as loose page bindings using a single Nickel Ring as depicted in . While the O Ring and D Ring systems exhibit different motions when opening and closing they have very similar structures overall and the variations between the types have simple differences in the shape of the ring used to bind. For O Rings the shape is a simple circular ring whereas for D Rings the rings are of a general D shape. For O Ring binders the rings are generally fastened to a metallic plate which is fixed to a spine of the binder whereas for D Ring binders the rings are generally fastened to a plate which is generally fixed to the inside of the back cover of the binder adjacent the spine. The Nickel Ring is a single ring with no metal connecting spine.

In the ring binders the rings come in different sizes typical diameter values 0.5 0.75 1.0 1.5 2.0 3.0 inches etc. and the folder may have N number of rings where N is any positive natural value commonly 3 rings . There are a variety of ring binders with different number of rings positioned in very many possible ways. It is also possible that rings may be employed without a plate for binding manuals and other documents. Accordingly the size and positioning of the rings must be individually customizable to assure the greatest flexibility in a document production visualization system.

Referring to as with the prior binding types there are two principal steps involved in the creation of the 3D objects necessary to represent the ring type binders. Preparation of a base model or objects created for O and D ring bindings include various ring diameters or sizes such as 1 1 2 and 3 . For each size there may also be a metallic plate that approximately matches the ring diameter. As noted above for the O ring binder the rings and associated plate are attached to a spine whereas for the D ring binder they are attached to the back cover. And the cover size is generally a function of the size and calculated thickness of the book.

Referring to real time creation of a 3D object of the ring binder to match the desired document thickness and length is based upon selection of a base object or model to match the document thickness T and then the base model is appended a number of times e.g. as required based on the document length with associated spacing metallic or plastic plate block without a ring between each ring as requested by the job description. It is further noted that while a conventional 3 ring binder is depicted the number of rings N is specified by the binder requirement specification where N is any positive integer. More specifically ring elements along with associated backing plate portions and the non ring portions of the backing plate are used to construct the ring binder for visualization. As shown the number of rings and spacing therebetween may be customized by the selection of the appropriate model. illustrates a visualization of a document bound using a ring binder as described where the ring binder is an O ring type having a backing plate affixed or mounted along the spine of the cover and where the three rings are illustrated as passing through the pages of the document. As illustrated the ring elements are held in a spaced apart relationship by the backing plate elements .

Referring to real time creation of a 3D object of the D ring binder to match the desired document thickness and length is based upon selection of a base object or model to match the document thickness T and then the base model is appended as required based on the document length with associated spacing block that does not have a ring as required by the job description. It is further noted that while a conventional 3 ring binder is depicted the number of rings N is again specified by the binder requirement specification where N is any positive integer. illustrates a visualization of a document bound using a D ring binder as described. As illustrated the three ring elements are held in a spaced apart relationship by the spacing block or backing plate elements .

Lastly considering depicted therein is a display window illustrating a virtual binding ring that may be used for binding documents. Creation of a 3D object of the binding ring to match the desired document thickness is based upon selection of an object or model to match the document thickness T . It is further noted that while a single binder is depicted for example in the number of rings N is again specified by the binder requirement specification where N is any positive integer. Moreover although reflects a single rind binding the corner of the document pages it is possible that one or more rings may also bind pages along an edge thereof.

In summary the print document production visualization methods disclosed herein may also include creating a multi component 3D ring binding element repository in a memory managed by a controller having access to the memory where the repository includes 3D ring binding element models for each type of ring binding available for visualization along with associated meta data. In response to a print product definition including or in association with a ring binder requirement specification the multi component 3D ring binding element model is transformed using associated meta data from the repository into a multi component 3D ring binder display model as specified by the ring binder requirement specification and the print product definition. And the print product definition is further transformed into a 3D display model including the multi component 3D ring binder display model to provide a 3D virtual rendering of the print product definition on a graphical user interface.

As discussed in more detail below the method for presenting a virtual representation of a ring bound document may also employ a 2D binder display model to represent at least a portion of the ring binder requirement e.g. the hole through which a ring of said ring binder would pass as a 2D rendering associated with a 3D surface of the print product. Once again the ring binder definitions may be provided to the system via a user interface and thereby become part of the print product definition or can be derived from properties of the document or defined with a set of default values. Moreover the interface may permit the user via user gestures in interaction with the graphical user interface to select one or more characteristics of the binder e.g. ring type shape O or D ring finish nickel chrome etc. ring size binder cover color etc . Creation of the repository for the ring type binding would thereby include for each of the binding types creating a plurality of 3D binding elements. And particularly for the ring binders having a backing plate and cover a plurality of objects including a variable size element such as a backing plate spacer s . The variable size elements include the binder ring and binder plate components matched size according to ring diameter where the size may be determined as a function of the thickness of the document s to be included in the binder.

When considering various clip bindings e.g. Paper clips Spring clips Bulldog clips one important aspect of each clip binding is the spacing between two pre build faces with an appropriately scaled connector. This applies to various clip type bindings which have these properties. For purposes of illustration the following disclosure applies to particular clips but will be appreciated as relevant to a number of clip type bindings or other bindings having similar characteristics and example embodiments.

As mentioned above another binding type that may be handled in accordance with aspects of the disclosed embodiments is a spring clip or similar binding element e.g. bulldog binding paper clip etc. . Referring to these figures show examples of clips associated with document pages as will be discussed in more detail below relative to the specific examples. In order to present such bindings in a document production visualization system the components of such bindings need to be adjustable so as to permit them to be properly displayed in the product visualization for user review. Moreover the clip type bindings further impact the page layout much in the same way that punched holes may impact the layout for a ring bound document and the visualization system needs to reflect such impacts in the virtual rendering of the document and associated clips. Once again while it may be possible to provide detailed simulations for all such clips at least one embodiment of the visualization system disclosed herein contemplates pre construction of such clips and the like via components that may then be appropriately modeled and sized when rendered for visualization.

Considering for example spring clips as illustrated in and one difficulty with systems which support a true 3D virtual rendering of a finished document is the creation of a 3D model of a spring clip that is capable of holding any number of documents with different thicknesses T . It will be appreciated that in reality the angles of the clip handles and outermost legs will vary with document thickness. These variations in angle present a problem in the real time construction of 3D objects. Accordingly a method for easily modifying a few base models e.g. different clip sizes to accommodate different thickness of documents has been employed to present a reasonable approximation to the true physical clip.

Spring clip binders come in a set of finite sizes width capacity 2 1 etc. . The size of any one clip is related to the width of the clip and the maximum thickness or capacity which the clip can hold. Creating 3D models which have the proper clip end opening e.g. to match a given document thickness T and creating the corresponding angles of the handles is difficult. Hence the disclosed embodiment employs independent components to represent a clip including a variable thickness connector plate and fixed angle handles to easily create a realistic rendition of a binder clip in use. The variable thickness connector plate is modified in real time to match the thickness of the document and is then attached to two fixed handles to create a single 3D object for rendering. The handles are chosen from a set of pre built objects to best match the thickness of the document. The handles are kept at a fixed angle in accordance with the disclosed embodiment although it would be contemplated that several angles of handles may be used based upon the number of documents bound by the spring clip. Also although not specifically discussed it will be appreciated that a bulldog clip or paper clip may be similarly employed where a variable size component is connected between fixed or standard sized ends or legs in order to permit virtual rendering of the binding type.

The document production visualization system brings the interactive 3D graphics into a browser based server client system and further permits the visualization of a wide range of binding types. For the representation of clips there are two principal operations involved in the creation of the necessary 3D objects the offline design and preparation of a base element followed by real time creation of a single 3D object of the spring clip binder to match a desired document thickness.

In one embodiment as represented by a pair of handle objects are first created for clip bindings of widths 1 and 2 for example. For each size there are both front and back handle objects created. In addition a default connector plate of matching width and variable thickness is created for each clip size. Next the real time creation of a single 3D object of the clip to match the desired document thickness is accomplished using the following general steps 

Referring briefly to front top and side views respectively the location of a single binder clip on a document is illustrated. As discussed above the width thickness T of the clip is variable whereas the other dimensions size of legs extending along the top and bottom pages and associated handles is dependent upon the basic clip size selected by a user in setting up the printing job. As further illustrated in the exemplary visualization of a rendered version of the resulting 3D models is shown. Referring briefly to a user display window showing a virtual rendering of a document that is bound using two clips along the top edge of the document having pages opened is illustrated. As will be appreciated when bound by clips the document is unable to be opened within block offset region and further includes a bend offset region where the pages are bent about the ends of the spring clip legs. The dimensions e.g. width of the block and bend offsets are a function of clip size and may also be impacted by the number of pages the paper stock etc. For example as the number of pages approach the clip capacity the bend offset may be increased.

In an alternate embodiment another possible method to construct spring clips for accurate rendering would be to build or model a clip having hinges. The purpose of the hinges would be to hide the possible gaps formed by the rotations of the handles in the embodiment described above. With this method the connecting plate would be kept at a fixed size and built in real time to match the true size of the clips. A simple schematic of such a construction is shown in the views of . It will be further appreciated that the alternative components legs hinges and backing member as depicted in may also be suitable for the visualization of a paper clip or a bulldog type clip where the clip itself is essentially a spring loaded hinge biasing the two legs into contact with the pages or items therebetween.

As disclosed relative to the spring clip binding print document production visualization method comprises creating an adjustable or directly proportional sized variable sized 3D binding element repository in a memory managed by a controller having access to the memory where the repository includes at least one basic 3D binding element model for each type of adjustable and directly proportional sized binding available for visualization along with associated meta data. For clarification variable sized is intended to indicate that the binding model permits the binding to be rendered in direct proportion to the thickness of the document versus selection of a pre defined binding size suitable for the document. In other words rendering the binding would include adjusting a dimension of the binding in proportion to the thickness T of the document being bound. Upon receiving a print product definition and a binder requirement specification the stored model is employed for transforming the adjustable directly proportional sized 3D binding element model or at least the adjustable portion s thereof and associated meta data from the repository into the desired directly proportional sized 3D binder display model as specified by the binder requirement specification and the print product definition. And the print product definition is transformed into a 3D display model including the adjustable directly proportional sized 3D binder display model to provide a 3D virtual rendering of the print product definition on a graphical user interface.

Once again the binder details may be input via the user interface particularly via user interaction with a graphical user interface. As noted the directly proportional sized binding may be selected from a spring clip type of binding a bulldog clip and a paper clip or similar items. For each of these types of bindings the directly proportional sized 3D binding element represents a binding model having a variable size element e.g. a connector plate of a spring clip type of binding .

As previously noted a print document production visualization system that is suitable for rendering directly proportional size binding elements may include a controller along with a repository storing a plurality of directly proportional size 3D binding elements and models and associated meta data managed by the controller. The controller is configured to transform the binding elements and associated meta data as specified by the binder requirement specification into a directly proportional size 3D binder display model for inclusion in the transformation of the print product definition into a print product display model displayed as a virtual 3D rendering of the print product and directly proportional size binder by rendering on a graphical user interface. Again the directly proportional size binder requirement specification may be defined by user interaction with at least a menu provided by a graphical user interface and the system may be further configured to support a bi directional flow of information with the graphical user interface in order to iteratively select and modify the directly proportional size binder.

In the embodiment for virtual representation of a BullDog like clip binding element as represented by a pair of handle objects are first created for clip bindings having approximate widths of 1 and 2 for example. For each size both front and back handle objects are created. The handle objects include handle tab page plate and a spring section in combination and which are connected by a default connector of matching width to the spring section . As with the spring clip the connector is of variable thickness and is created for each clip size. Next the real time creation of a single 3D object of the clip to match the desired document thickness is accomplished using general steps as outlined for the variable size or directly proportional size clips 

Referring briefly to front top and side views respectively the location of a single Bulldog clip on a document is illustrated. As discussed above the width thickness T of the clip is variable whereas the other dimensions size of handle objects extending along the top and bottom pages is dependent upon the basic clip size selected by a user in setting up the printing job. As further illustrated in the exemplary visualizations of a rendered version of the resulting 3D model for the Bulldog clip is shown. In a manner similar to that discussed above relative to spring clips when bound by clip the document is unable to be opened within block offset region and further includes a bend offset region where the pages are bent about the ends of the clip handle objects. In addition to the dimensions of the connector being adjusted by the number of pages in the document the dimensions e.g. width of the block and bend offsets are a function of the clip size and may also be impacted by the number of pages the paper stock etc. For example as the number of pages approach the clip capacity the bend offset may be increased due to the fact that it may be more difficult to fold or bend the large number of pages. As will be appreciated the block and bend offsets are a factor that is incorporated into the model for the clips in order assure that the virtual representation of the 3D bound document is accurate.

Another type of variable or directly proportional sized 3D binding element is a bent wire or sometimes plastic fastener typically referred to as a paperclip such as that illustrated in although it will be appreciated that various designs and sizes of paper clips are available and may also be incorporated as models in accordance with the systems and methods disclosed herein. Referring to in the embodiment for virtual representation of a paperclip binding element a pair of face objects are first created for the paperclip bindings having approximate lengths of about 1 2 inches and widths of about inches for example. The diameter or gauge of the wire may also be adjusted for the models using a larger diameter wire for the larger paperclips. This may be accomplished by using different models or may be similarly enabled using a common model and a scaling operation. For each size both front and back face objects are created. In a simplistic model the front and back face object portions of the clip may be the same. The face objects each include a U shaped loop and are connected by a default connector of matching wire gauge. Connector is of variable length and may be created for each clip size. Real time creation of a single 3D object of the clip to match the desired document thickness is accomplished using general steps as outlined above for the other directly proportional size clips 

Referring briefly to represent the front top and side views respectively. is an enlarged view of the clipped edge of and is a view of the back of document pages bound with the paper clip. The location of a single paperclip on a plurality of document pages is illustrated.

An alternative paperclip model is represented in the lower portions of C and E below the break lines where the model employs slightly different sized face objects for the front and back as well as assures that the connector is placed at an angle across the thickness of the documents as illustrated specifically at the bottom of .

As previously discussed the width thickness T of the clip is variable whereas the other dimensions size of face objects extending along the top and bottom pages of the document are dependent upon the paperclip size selected by a user in setting up the printing job. As further illustrated in the exemplary visualization of a rendered version of the resulting 3D model for the paperclip is shown. In a manner similar to that discussed above relative to other clips when bound by paperclips the document being rendered will further include a block offset region and a bend offset region where the pages are bent about the ends of the paperclip faces.

In addition to the various alternatives noted with respect to the clip binding models described above further illustrate a number of alternative methods that the clips may be modeled. The various examples depicted in the figures are for spring clip bindings but it will be appreciated that some of the alternatives presented may be applicable to other types or styles of clips.

Referring to depicted therein is a series of spring type clips of varying capacities for document pages. In this model approach a number of clip models are used each being applicable to a particular document thickness. In other words independent models are built for a finite set of document page thicknesses and when the binding clip is to be depicted in the virtual scene the model that is the best fit is chosen where the thickness is between Tand T. Although the figure depicts a total of five discrete models it will be further appreciated that the total number of models may determined in accordance with a visual quality metric. Event though a number of models may be used in this alternative the models would be built and further adjustments could be made to each model.

Referring next to a physics model may also be used to represent the interaction between elements of the clips or other binding components. For example using a series of control points the rigid handle is associated with the flexible clip legs . The handle and clip legs then may be adjusted in real time as they pivot or move about the hinge point that is defined by the control points and the clip flexes at locations for example. In the model depicted in this figure the elements of the model respond in real time as part of the virtual rendering using physical parameters. The control points respond to forces applied to them and the model itself would require mathematical modeling of the component that is to be modeled in order to assure correct rendering for visualization. It will be appreciated that a physical model may be employed for the spring clips as well as a number of other bindings discussed herein but that the use of such models may be much more computationally intensive than fixed models albeit likely yielding highly realistic results.

In considering the manner by which alternative binding mechanisms may be rendered for visualization in a document production visualization system several alternative binding elements include common characteristics. For example staples stitches and brass fasteners are generally objects having portions that appear on the two faces of a document and a variable connector portion to adjust the thickness of the connector. With these types of bindings however the connector piece is generally not visible in the finished product. The center connector piece can be built and customized as requested or alternatively this connector piece does not have to be part of the 3D model. As will be appreciated from the clip type bindings discussed above in the case of the alternative binding elements it is again the stretching of the center portion or the distance between the top and bottom portions of the binding model that occurs in the rendering whereas the two end portions are located on the paper surface. One familiar with these alternative binding techniques will also appreciate that this applies to other bindings which have similar properties.

As with the prior binding types there are two principal steps involved in the creation of the 3D objects necessary to represent staples. Referring to and preparation of a base model or objects for staples includes a set of common sizes for the top and bottom portions of the staple as well as a set of different finishing options e.g. flat or crowned crimp for the staple bottom. Relative to staples and other bindings or treatments applied to a surface the design and operation of the model is as illustrated where the staples may be represented as true 3D objects. The staple models are designed and built such that the separation distance between the front and back segment is easily customized. Staples as illustrated in the figures support 3D virtual rendering of a finished document through the creation of a 3D model of the staple that is capable of holding any number of documents with different thicknesses T . While staples come in different sizes to be matched according to the thickness T the representation can avoid the selection of a particular size and simply represent staples using a common model that shows a top and crimped bottom ends . Creating 3D models which have the proper clip spacing between the top and crimped sections e.g. to match a given document thickness T is accomplished using independent components to represent a staple including a non visible variable thickness connector. As with the other variable thickness binding elements described above the variable thickness is modified in real time to match the thickness of the document and is then attached to the scene as a single 3D object for rendering such as depicted in . The parameters associated with the staples further include those which indicate orientation location spacing etc.

The key variables for staple binding elements to be customized in real time are 1 the number of staples 2 the location of the staples 3 the color of the staples and 3 the distance between the top and bottom to match the thickness T of the document. Continuing with reference to when the Customization Service is run for example with a request for a staple model which is a set of three Crown crimped staples of length 0.5 thickness 0.3 dark grey in color and located at Y 3.0 0.0 3.0 inches where Y offsets are relative to the center of the page and refer to the center of the staple . It will also be appreciated that the model for staples contemplates a thickness for the top and crimped portions of the staple respectively where the thickness is a function of the wire sized used for the staple as well as the crimping method e.g. folded flat crowned . The model which is generated and returned is shown in . Referring to this single figure contains a single model with six pieces with the pieces constituting the front and back of three staples. The base staple model was chosen to match the crimping style and staple size and then modified to have the correct opening e.g. to match the document thickness T the requested color and then replicated to provide staples at each of the requested locations.

This single model is then placed in the scene as illustrated in the result being the top and bottom of the staple models appearing to be on the front and back of the document shown without document in . The center connecting pieces are not visible as they are embedded within the paper. Alternatively these connecting pieces could have been part of the model but still would not be visible when rendered in the scene.

As with the prior binding types there are two principal steps involved in the creation of the 3D objects necessary to represent brass fasteners. Referring to preparation of a base model or objects for brass fasteners includes a set of common sizes for the top or head of the fastener and the associated gauge of the metal prongs that are folded over the rear of the document. Although described herein relative to a conventional two prong brass fastener it will be appreciated that similar models may also be developed for Acco fasteners that are commonly used for legal documents and other binders e.g. inserted through punched holes . Relative to fasteners and other bindings or treatments applied to a surface the design and operation of the model is as depicted in where the fasteners are represented as true 3D objects. The brass fastener models are designed and built such that the separation distance between the front and back pieces is easily customized. Fasteners as illustrated in support 3D virtual rendering of a finished document through the creation of a 3D model of the fastener that is capable of holding any number of pages thereby resulting in documents with different thicknesses T . While fasteners come in a range of sizes to be matched according to the thickness T the representation can avoid the selection of a particular size and simply represent the bras fasteners using a common model that shows a top and bent or crimped bottom prongs . Creating 3D models involves determining the proper spacing between the top and crimped prong sections e.g. to match a given document thickness T . Hence the disclosed fastener embodiment employs independent components to represent a brass fastener including a non visible variable thickness connector in a manner similar to that disclosed above with staples. As with the other variable thickness binding elements the variable thickness is modified in real time to match the thickness of the document and is then attached or added to the scene as a single 3D object for rendering. The parameters associated with the fasteners similarly include those which indicate their location spacing etc.

For the fasteners the key variables to be customized in real time are 1 the number of fasteners 2 the location of the fasteners 3 the color material of the fasteners e.g. brass steel 3 the distance between the top and bottom to match the thickness of the document and possibly the fastener type e.g. round head T head Acco etc. . When the CustomizationService is run for example with a request for a brass fastener model which is a set of three Brass Fasteners with inch heads thickness 0.3 dark grey in color and located at Y 3.0 0.0 3.0 inches the model which is generated and returned is shown in . Referring to this exemplary display window contains a single model with the pieces constituting the entire brass fastener including the middle connector . The base brass fastener model has been chosen to match the head size and then modified to have the correct opening e.g. to match the document thickness the requested color and then replicated to provide fasteners at each of the requested locations.

This single model is then placed in the scene the result being the top and bottom of the fastener models appearing to be on the front and back of the document. A brass fastener model placed in a scene with a document is shown in . Even though they are part of the model the center connecting pieces are not visible as they are embedded within the paper. Alternatively as described above these connecting pieces could have been omitted from the model.

There are a class of binding objects which hold a set of sheets together along or by the edges of the documents. Some of the most common types of edge holding bindings include 

All of these types of bindings share some common structural features. For example they are placed along the length of the bound edge and thus must vary in length. They can be applied to a continuum of document thicknesses up to the physical limits of holding pages in place and as a result must be modeled with variable thickness. Many of the edge holding bindings come in assorted materials for color texture gauge etc. Thus they must have models of assorted physical properties. The edge bindings typically cause the resulting pages to bend in a very similar fashion when the document is opened thus can share common animation behavior models. The various edge holding binding types differ mostly in the way they are placed on the document including along the spine only e.g. glue thus have only a spine piece along the faces only e.g. Velo thus require two opposing and equal pieces and along the spine and faces e.g. tape . Some such as Perfect Bind may have large covers associated with them as well and would thereby require connecting the three pieces together.

It will be appreciated that the model is stretched along one axis e.g. Y axis to match the length of the edge of the document pages being bound as well as a stretching of the spine dimension of the model to match the thickness of the document. As with the prior examples this also applies to other bindings which have similar properties. Velo tape and glue are example embodiments but similar techniques may be considered to represent other alternatives.

As with the prior binding types there are two principal steps involved in the creation of the 3D objects necessary to represent tape binding. Preparation of a base model for tape includes a basic structure with the shape of tape when used to bound a document. Relative to glue bindings or treatments applied to the edge of document the design and operation of the model is as depicted in where the tape is represented as a true 3D object. While it will be appreciated that the tape binding may be simulated possibly using a 2D texture as described below the 3D tape model is designed and built such that the separation distance or width of the spine between the front and back flap portions is easily customized and the length of the tape can be scaled to match the length of the document. Tape binder as illustrated in supports 3D virtual rendering of a finished tape bound document through the creation of a 3D model of the tape that is suitable for holding documents with different thicknesses T as shown by binding width . The tape comes in one or more widths and an excess not used to cover the thickness of the document overlaps or extends into flaps and the representation can avoid the selection of a particular size and simply represent the tape binding as a model that shows a top spine extending into flaps on the top and bottom of the document. As with the other variable thickness binding elements the thickness of the tape is adjusted according to the tape width spine plus both flaps so that the tape is depicted as covering the edge and extending into the Block or Xoffset region as shown in and the width of this region may be modified in real time in accordance with the thickness of the document before being added to the scene as a single 3D object for rendering. Although the tape thickness is generally on the order of a document page it may also be modeled so as to be correctly represented on the surface of the 3D rendering. As noted above the length of the tape binding would generally match the length of the documents being bound. The key variables to be customized in real time for the tape binding are 1 the length 2 the color of the tape and 3 the distance between the front and back segments to match the thickness of the document which also includes a stretching of the spine portion to match as well. When the CustomizationService is run for example with a request for a tape model which is 11 inches long thickness 0.3 red in color the model which is generated and returned is shown in . Referring to this single figure contains a single model with the pieces constituting the entire piece of tape as it will wrap around the document. The tape model has been modified to have the correct opening e.g. to match the document thickness the requested color and the required length.

This single model is then placed in the scene the result being the front back and spine portions of the model appear to wrap around the edge of the document. A tape binding model placed in a scene with a document is shown in .

As with the prior binding types there are two principal steps involved in the creation of the 3D objects necessary to represent Velo binding. Preparation of a base model for Velo includes a basic structure with the shape of the front and back plastic pieces when used to bind a document. Relative to Velo and similar bindings or treatments applied to the edge of document the design and operation of the model is as depicted in where the tape is represented as a true 3D object. The Velo model is designed and built such that the separation distance between the front and back page plates is easily customized and the length of the object can be scaled to match the length of the document. Alternatively the length can be constrained to a set of fixed values commonly available. Velo binder as illustrated in supports 3D virtual rendering of a finished Velo bound document through the creation of a 3D model of the binder that is suitable for holding documents with different thicknesses T as shown by binding width . The binder comes in one and possibly more widths and the representation can simply present the binding as a model that shows a top and bottom page plates on the surfaces of the document. As with the other variable thickness binding elements the thickness of the Velo binder is adjusted but is not visible and the width of this region represented by may be modified in real time in accordance with the thickness of the document before being added to the scene as a single 3D object for rendering. The thickness of the page plates is generally the same it may also be modeled in 3D so as to be correctly represented on the surface of the 3D rendering. As noted above the length of the Velo binding would generally match or be close to the length of the documents being bound.

For Velo binding key variables to be customized in real time include 1 the length 2 the color of the Velo and 3 the distance between the front and back segments to match the thickness of the document. In the case of Velo bindings there is no spine portion to match as well as there is for glue or tape. When the CustomizationService is run for example with a request for a Velo model which is 11 inches long thickness 0.3 red in color the model which is generated and returned is shown in . Referring next to this single figure contains a single model with the two pieces constituting the entire object as it will be placed around and adjacent an edge of the document. The Velo model has been modified to have the correct opening e.g. to match the document thickness T the requested color and the required length. An alternative embodiment may include the ability to specify the surface characteristics e.g. texture of the plastic Velo bind pieces.

This single model is then placed in the scene the result being the front and back pieces of the model appear to crimp or compress the edge of the document. A Velo binding model placed in a scene with a document is shown in . In reality there are center connecting pieces which are not visible when the Velo bind is assembled with a document as they are embedded within the paper. Alternatively these connecting pieces could have been included with the model. Such an alternative is similar to that presented above in the brass fasteners example.

As with the prior edge binding types there are two principal steps involved in the creation of the 3D objects necessary to represent a glue binding. Preparation of a base model for glue includes a basic structure with the shape of glue when it is applied to the edge of bound a document. Relative to glue type bindings or treatments applied to the edge of document the design and operation of the model is as depicted in where the glue is represented as a true 3D object. The glue model is designed and built such that the it is easily customized to match the dimensions of the spine of the document . The glue binding as illustrated in supports 3D virtual rendering of a finished glue bound document through the creation of a 3D model of the glue that is suitable for holding documents with different thicknesses T . Representation of the glue or adhesive can simply present the binding as a model that shows the adhesive applied along the edge of the document pages. As with the other variable thickness binding elements the thickness is adjusted in real time in accordance with the thickness of the document T before being added to the scene as a single 3D object for rendering. As noted above the length of the Velo binding would generally match or be close to the length of the documents being bound. It should also be noted that the block offset for the glue binding is zero because it is applied to the page edges and that while the bendoffset is not equal to zero for a glue binding it is very small and can be reflected in the virtual model in that manner.

The key variables to be customized in real time are 1 the length 2 the color of the glue and 3 the distance between the front and back segments or width of the spine. When the CustomizationService is run for example with a request for a glue model which is 11 inches long thickness 0.3 red in color the model which is generated and returned is shown in . Referring to this figure contains a single object constituting the glue which would be applied along the spine of the document. The glue model has been modified to have the correct size e.g. to match the dimensions of the spine and the requested color.

This single model is then placed in the scene the result being the that the model appears to adhere to the edge of the document. In reality the glue would be impregnated a small distance into the document. This affect can be simulated by adjusting the thickness of the model and its placement in space relative to the edge of the stack of paper. A glue binding model placed in a scene with a document is shown in .

Having described the general operation of the document production visualization system for a binding the following disclosure is directed to additional features and functions associated with specific binding types. As may be recognized from the foregoing description in a 3D binding representation the binding also has an associated hole or holes through which the binding must pass. While it is possible to render a 3D binding in a realistic manner the rendering of holes in association with such binders presents increased complexity particularly due to the multitude of different hole shapes sizes and patterns which are possible. Some binding types e.g. coil comb wire comb plastic ring require the presence of holes in the media and these binding types may come in different lengths or pitches. The media may have any of a number of hole patterns and the holes may be located along any edge of the document. In one embodiment the system and method use 2D images represented as surface textures on the front and back of 3D objects to represent holes and generates these images under programmatic control so that any hole pattern can be supported without having to create and maintain a database of hundreds of pre defined images.

It should also be appreciated that staples and similar low profile or surface binding types such as tape glue stitching and various prong type fasteners may also be represented as 2D images which approximate in appearance the 3D objects e.g. pages which they are displayed as binding. The system and methods described also use 2D images as surface textures on the front and back of 3D objects to represent stitching etc. Again the system generates these images under programmatic control so that any staple stitch or other binding pattern can be supported without having to create and maintain a database of hundreds of images thereby permitting the efficient storage of binding models associated with such binding types.

The embodiments described herein solve the problem of presenting a pseudo realistic rendering of holes staples stitches and other bindings in pages with an efficient use of texture maps generated in real time in response to the document description. In one embodiment the system generates an image to be used as a texture map on a page surface. The page surface image is clear except where the holes or surface bindings are located where they are represented as colored or shaded areas. For example the color of holes is matched to the background grey of the scene to create the visual appearance of looking thru the document to the background. The color of the staples is black or grey to match the actual appearance and similar coloration may be applied for stitching etc. In these embodiments the images are computed in real time in response to a set of parameters and then compressed as PNG or similar image types for transmission. The parameters specify such things as the size of the necessary texture map e.g. to fit the page and the geometry of the hole pattern staple stitching etc.

Referring to see also B C the system and methods employs 2D images to represent 3D features. For example with specific reference to which depict a wire comb binder depicts holes for a spiral wire binder where the holes are depicted as textures on a 3D surface to represent a 3D hole object in the scene. Since the holes are not true 3D objects close examination will reveal that one can not look thru the holes. As can be seen in bindings which use the holes will be cut off at the surface of the virtual page instead of going thru the virtual page. However the ability to see where holes will be on the page and to see if holes and bindings such as the wire comb binding are potentially impacting any content is easily accomplished using this technique.

When the CustomizationService discussed above is run the request for a hole pattern which is a set of rectangular holes of size 0.15 0.35 light grey in color starting in the lower left corner with pitch of 2 to place on a 8.5 11 page with a margin of 0.5 the image which is generated and returned is shown in . The holes as will be appreciated are matched to the pitch of the binding which is also depicted in . In the event of a spiral binding for example as described above the request may be for a hole pattern which is a set of round holes of size 0.35 red in color starting in the lower left corner with pitch of 2 to place on a 8.5 11 page with a margin of 1.5 the image which is generated and returned as shown in .

The images of contain the textures which will be mapped to the front and back of the displayed pages e.g. . The right half of each image is the front of the document the holes will be adjacent the left edge and the left half of the image contains the hole pattern for the back of a page where the holes will appear adjacent the right edge. As illustrated in a rendered document with holes displayed in a 2D manner provides ample indication of the nature of the holes and associated binding. While only the lower left portion of a document is shown in the rectangular holes necessary for the wire comb binding are clearly depicted. Moreover the job further included a 3 hole pattern for holding the document in a ring binder and the relative position of the circular hole for the ring binder can be seen in the face of the top page as well.

Some documents may contain different size pages yet a virtual representation of a set of punched holes in a document of mixed size pages should have a consistent hole pattern for each page. When applying the textures to a page care must be taken therefore to use the same image size for each page. In this case the size of the image used as the texture map for holes must be calculated for all the different page sizes that may be present in a document. If the image is scaled to map onto each page the hole positions may change with page size. The hole image textures are clipped into the surfaces as textures and are not scaled to fit any arbitrary size page. In the current embodiment the hole images are set to match the smallest size sheet and the sheets are center aligned. It is contemplated that other embodiments may use other rules for alignment of sheets within the document and the location of holes. Indeed these preferences should be part of the job description and properly reflected in any rendering.

Relative to staples and other bindings or treatments applied to a surface for example as depicted in since the staples are not represented as true 3D objects in the displayed windows shown close examination will reveal that the staples have no real height above the surface of the page as real staples do or as the staples disclosed above for 3D models would. However the ability to see where staples will be located on the page and to see if staples are occluding any content is easily accomplished using this technique.

When the CustomizationService is run with a request for a staple pattern such as a set of six Crown crimped staples of length 0.5 thickness 0.3 dark grey in color located 0.03 from the left edge of a 8.5 11 page the image which is generated and returned is shown in . Referring to this single figure contains images of the textures which will be mapped to the front rightmost and back leftmost pages. In the right half of the image the staple image texture will be along the left edge and in the left half of the image the sample pattern for the back of a page is depicted where the rounded ends crown crimping of the staple will appear adjacent the right edge.

An example of a document rendered by the document production visualization system with staples is shown in . In each case staples are shown adjacent an edge of the document . The staples may be rendered in a contrasting color e.g. red to increase visibility in the visualization. Referring to a corner staple document is shown as may have been selected as an option from a user menu presented on the graphical user interface. In this case the back crimping of the staple is visible. Considering some bound documents may contain different size pages . A physical representation of a set of staples in a document of mixed size pages should have the same staple location for each page. When applying the textures to the pages care must be taken to use the same image size for each page. An example of such a document is shown where there is a request for two staples adjacent the left edge. The upper staple is just above the man s head in the page content whereas the lower staple is just below the word Our in the page content. In the case of mixed size pages the image used as the texture map for staples must be calculated for all the pages. If the image is scaled to map onto each page the staple positions will change with page size. The staple image textures are clipped into the surfaces as textures and are not scaled to fit any arbitrary size page. In one embodiment the staple images may be set to match the smallest size sheet and the sheets are center aligned such as illustrated in the visualization seen in the display window of . Other embodiments could use other rules for alignment of sheets within the document and the location of staples. Indeed these preferences should be part of the job description and properly reflected in any rendering.

Relative to the display of holes and various low profile or surface applied bindings the print document production visualization system again including a controller a print product definition and a binder requirement specification would employ a plurality of binding elements and associated meta data managed by the controller the controller configured to transform the binding elements and associated meta data as specified by the binder requirement specification into a 2D binder display model for inclusion in the transformation of the print product definition into a print product display model that can be displayed as a virtual rendering on a graphical user interface. As noted the binder requirement specification is provided within the print product definition and may be defined by user interaction with a graphical user interface menu provided by the graphical user interface e.g. in . Thus the system enables an efficient means of using a 2D binder display model to represent the binder requirement as a 2D rendering associated with a 3D surface of the print product. Again the binder requirement specification whether holes staples stitches etc. is defined with values used to modify properties as provided by the meta data in interaction with the graphical user interface menu. In other words the graphical user interface is configured to provide or present values from user gestures in interaction with graphical user interface menu the values being used to select or modify properties provided by the meta data associated with the 2D elements.

Although not intended to be an exhaustive list and other types of 2D representations are contemplated other bindings may be represented using 2D textures to render the elements and associated meta data including holes and staples tape glue stitching saddle stitching round head fasteners 2 prong fasteners and VeloBind. Further contemplated are 2D binding elements that may be represented include embossing foils special inks or stickers and labels applied to the document.

The models for each of the binding elements and other 2D features are as previously disclosed managed by the controller in a model repository. Moreover architecture layers of the system are managed and organized by the controller including a print job ticket adaptation layer a physical model layer and a display model layer where the print job ticket adaptation layer is configured to transform the print product definition into a physical model the physical model layer is configured to transform the physical model into a display model pulling the 2D binding elements and associated meta data from the model repository as per the binder requirement specification and the display model layer is configured to transform the display model into the print product display model that can be displayed as a virtual 3D rendering with associated 2D elements on the graphical user interface.

As will be further appreciated the method of operating the system for generation of a three dimensional virtual rendering of a document having such binding features includes not only storing the 2D binding elements and associated meta data in a repository but also transforming the 2D binding element and associated meta data into a 2D binder display model in response to the binder requirement specification and transforming the print product definition into a 3D display model including incorporating the 2D binder display model in a 3D virtual rendering of the print product definition on the graphical user interface. More specifically the 2D binder display model is employed to represent the binder requirement as a 2D rendering associated with a 3D surface of the print product being displayed. The graphical interface may be further employed to interact with a menu on the graphical user interface and may interactively update the display model layer in response to requests from the rendering layer to update spatial relationships in response to the user gestures.

Referring again to depicted therein is a model for example illustrating the ring elements along with associated backing plate portions and the non ring portions of the backing plate . As shown the number of rings and spacing therebetween may be customized by the selection of the appropriate model. illustrates a visualization of a document bound using a ring binder as described where the ring binder is an D ring type having a backing plate affixed or mounted along the spine of the cover and where the three rings are illustrated as passing through the pages of the document. As illustrated the ring elements are held in a spaced apart relationship by the backing plate elements. As described above relative to the 2D models the holes in the pages into which the rings appear to pass may be 2D textures applied to the surface of the pages in order to provide the appearance of a hole.

Within the Job definition format JDF construct described above a BindingIntent Input Resource may be employed to define the type of binding to be used with a job. The amount of specificity can vary from job to job and the binding may be used to characterize as little as placement corner versus edge for example or additional more specific attributes. Any required details of any particular binding can be 

For the first case above it is straight forward to set the default values such that they will always result in a request for which a complete 3D binding model can be constructed. However such a strategy may result in unsatisfactory results both in rendering and in actual production. For example defining the same length diameter color pitch of a WireComb model to use in all cases independent of the height and thickness of the document or shop capabilities could lead to a finished document specification that cannot be produced or will not result in a satisfactory output for the customer. This is also not done in production shops common sense will intervene and the operator will choose an in stock or alternative binding to best fit the document.

For the second case above it is possible to derive a 3D binding object specification which has no 3D object available. The most common case is that of very thick documents. It is possible that a very thick document cannot realistically be bound with the requested binding type. In other words the Binding Customization Service is not able to produce a viable 3D model per the specification as the requested parameters are outside of the range of allowed values.

In the third case above it is quite possible to request a BindingIntent for which the system has no existing model. This is especially true if the Job definition format is imported from an external source and not controlled programmatically or internally to correspond the printing shop capabilities.

As previously described the rendering of various binding types often dealt with customizing a base object to match a very wide range of binding requests. While that remains the primary intent the current embodiment is intended to address how to handle the case when there is no available binding model to satisfy the request. One solution involves breaking down the binding requirement into one of a plurality of fundamental or default bindings and behaviors. There are four fundamental types of bindings behaviors for which a taxonomy is presented in Table 2.

As depicted in the leftmost column of Table 2 the primary binding location is in either the Edge or the Corner. In the case of an edge the binding object will align with one four defined edge left L top T right R or bottom B of the document and pages will turn relative to that edge. In the case of a corner binding specification the binding object is located at the defined corner upper left UL upper right UR lower right LR or lower left LL and pages will turn relative to the defined corner. The primary binding behavior in the taxonomy is either Flex or Flat. In the case of Flex the pages are fixed together at the binding location and must be bent or flexed to open. In the case Flat the pages are loose and will lie in two flat stacks when open.

In the situation when the requested binding object model cannot be constructed the disclosed embodiment operates to construct or customize a very simple rectangular solid of the dimensions defined in the Default Object column of Table 2. In other words the default binding used to represent a binding object that is unavailable may be a representation of the default binder in a manner that contrasts with the print product to draw a viewer s attention to the default binding In another embodiment it is possible to invoke a constraint solver to fulfill as many of the requested parameters as possible and to derive the remaining parameters or use assigned default values.

In yet another embodiment the simple object can be a fixed solid color. Further embodiments for representation of a default binding object include having the object colored with a fixed pattern or even contain an animated pattern the latter embodiments purposely intended to draw a viewer s attention to the presence of the default binding object. The size of the object is also not narrowly defined but can be chosen to fit as closely to the requested object size or not as desired. As noted in the note in the Default Object column of Table 2 it is believed preferable that the default object be created such that it is n larger than the thickness of the document to insure that the object it clearly visible.

Referring next to depicted therein are exemplary illustrations of several of the disclosed embodiments for providing a default 3D rendering of a binding object. Displayed in is a default binding object for a corner bound document . In the event there is not an available or suitable 3D model a simple cube was used in the scene. For example if a paper clip had been requested for a thick document the viewer can easily see that the requested PaperClip is not a viable binding. Like shows the same corner flex type of binding but now shows the document pages as bent when the document is open and the integrated behavior e.g. placement and rotation in the scene of the default binding object is characterized even though the actual object is not depicted.

Considering next in combination with the spring clip of is presented for comparison against . As an example a desired binding may be for a single clip in the center of the top edge. In the event no model could be generated to represent such a binding a textured rectangular solid of approximately the desired dimensions was created and placed in the scene. This allows the user to easily see that there is some type of binding object in use but that the system was not able to produce a viable model. Similarly in the coil binding requested is not available in the desired pitch so a default box of approximately the correct size e.g. length to approximately match document edge and width which exceeds the document thickness and with the requested color e.g. a color and or pattern in contrast with the document is created and placed in the scene to represent the requested binding and to indicate that the requested binding is not available.

As described above the default 3D binding objects are employed as part of the method of generating a three dimensional virtual rendering of a document having a binding requirement that is not available for display. The computer would receive a print product definition including a binder requirement specification for at least one binding object and in response would retrieve from a binder base model repository stored in the computer memory a default 3D binding element suitable to represent the binder requirement and meta data associated therewith. The print product definition is then transformed into a 3D display model including the default 3D binder display model as a 3D virtual rendering of the print product definition on a graphical user interface.

In yet a further embodiment it is contemplated that if the Job Definition were to carry an extra piece of information as to what type of binding behavior was associated with the requested binding then it would be possible to construct a scene with proper page behavior and a default binding object to represent the character of the unavailable binding. This would be possible even for cases where the details of the binding mechanism were not known to the visualization system cases where there is no 3D model available. The job simply has to carry the additional information associated with the binding to define it as one of the four types presented in Table 2 e.g. Edge Flex Edge Flat Corner Flex or Corner Flat . With such information a proper page opening behavior can be animated Flat Flex and a representative binding object placed properly in the scene Edge Corner . Note that the job must also contain the additional information about which edge or corner is bound e.g. part of the JDF Binding Intent Location value .

It will be appreciated that various of the above disclosed embodiments and other features and functions or alternatives thereof may be desirably combined into many other different systems or applications. Also various presently unforeseen or unanticipated alternatives modifications variations or improvements therein may be subsequently made by those skilled in the art which are also intended to be encompassed by the following claims.

