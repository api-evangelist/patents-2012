---

title: Using transmission control protocol/internet protocol (TCP/IP) to setup high speed out of band data communication connections
abstract: A method establishes a transport layer connection between a first system and a second system. The establishment of the transport layer connection includes identifying a remote direct memory access (RDMA) connection between the first system and the second system. After establishing to transport layer connection, the first and second systems exchange data using the RDMA connection identified in establishing the transport layer connection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09178966&OS=09178966&RS=09178966
owner: International Business Machines Corporation
number: 09178966
owner_city: Armonk
owner_country: US
publication_date: 20120317
---
The present application is a Continuation of U.S. application Ser. No. 13 246 028 filed Sep. 27 2011 and titled Using Transmission Control Protocol Internet Protocol TCP IP to Setup High Speed Out of Band Data Communication Connections.

The present invention relates generally to the field of data communication and networking and more particularly to methods that use Transmission Control Protocol Internet Protocol TCP IP to setup high speed out of band data communication connections.

InfiniBand and Remote Direct Memory Access RDMA are existing known technologies for high speed connectivity between hosts and servers. These technologies are implemented in a networking environment with additional hardware and corresponding software including drivers and application programming interfaces. This means that using these high speed technologies requires server programs applications and clients to code to specific APIs to exploit them. For example instead of sockets User Direct Access Programming Library UDAPL would be used to communicate using InfiniBand .

There is a large existing base of servers applications and clients that are coded to the TCP IP sockets interface for communication. For these programs to exploit high speed interconnects in the current art significant rewriting of their communications methods would be required. This is a major undertaking and may not even be practical in some cases for example legacy applications whose source code or coding skill is lost .

The current state of the art for this problem is Sockets Direct Protocol SDP which bypasses TCP IP and provides an alternative protocol stack underneath the sockets layer. This allows applications which are coded to the widely adopted Sockets standard to run unmodified and the SDP stack under the sockets layer handles all the communication. However there also exists a large legacy installed base of firewalls load balancers and other technologies that businesses rely on to manage and secure their networks. These technologies rely on the ability to manage TCP IP setup flows to perform their function. Because SDP dispenses with these flows these network elements would have to be reinvented for SDP. Additionally many TCP IP stacks are mature products with built in security quality of service tracing auditing etc. capabilities that would have to be reinvented for SDP.

Because of these limitations SDP is generally seen as suitable for tightly coupled high performance networking not for multi tier business environments with complicated security and quality of service requirements.

Embodiments of the present invention provide methods of providing high speed direct memory access communication between legacy systems transparently to those legacy systems. A method according to an embodiment of the present invention establishes a transport layer connection between a first system and a second system. The establishment of the transport layer connection includes identifying a remote direct memory access RDMA connection between the first system and the second system. After establishing a transport layer connection the first and second systems exchange data using the RDMA connection identified in establishing the transport layer connection. The transport layer connection stays active though idle while the out of band communication over the RDMA connection proceeds.

In some embodiments the first and second systems exchange RDMA connection identification parameters during a transport layer setup process between the first system and the second system. For example the first system may send a Transport Control Protocol Internet Protocol TCP IP SYN message to the second system. The SYN message includes options identifying an RDMA over converged Ethernet RoCE address for the first system. In response to receiving the SYN message the second system may send a TCP IP SYN ACK message to the first system. The SYN ACK message includes options identifying a RoCE address a queue pair QP number a remote memory buffer RMB key and RMB indexing information for the second system. In response to receiving the SYN ACK message the first system may send a TCP IP ACK message to the second system. The ACK message includes options identifying a QP number an RMB key and RMB indexing information for the first system.

Referring now to the drawings and first to a system is designated generally by the numeral . System includes a first local area network LAN and a second LAN . In the embodiment of LANs and are Ethernet networks. LAN includes several host systems . Similarly LAN includes several host systems . Host systems and may be comprise any suitable computing devices such as personal computers. LANs and are connected to the Internet by means of routers and respectively.

Host system also includes software components indicated generally at including an operating system and at least one application . Operating system includes various programs such as device drivers data and data structures that manage hardware resources such as network interface card and provide common services for various application programs such as application . Application may be any program such as a web browser email client or the like.

Embodiments of the present invention enable end to end connections across LAN LAN and or Internet between application processes running on host systems and or . According to the present invention application may communicate with applications running on other host systems using either TCP IP connections or remote direct memory access RDMA connections. To enable TCP IP connections operating system includes a protocol stack which includes among other components an IP layer and a TCP layer . Protocol stack includes executable code and data structures associated with the kernel of operating system . The code resides in memory locations associated with the kernel. The data structures are portions of memory that are used by protocol stack code to retain static and dynamic variables.

IP layer receives IP packets from lower level protocol layers of protocol stack and sends TCP segments to TCP layer . TCP layer sends data packets to appropriate sockets . Operating system and application create a socket. Generally a socket is a data structure in the kernel that provides an input and output channel for a process or thread of application . Operating system maps a socket to a particular application process or thread. The kernel of operating system is involved in processing data packets through each layer of protocol stack . Each socket is identified by tuple including a source IP address a source port number a destination IP address and a destination port number.

RDMA connections allow application to write data directly to and read data directly from memory associated with applications running on other hosts systems and or without involvement of the kernel of operating system in the transfer of data. To enable such direct transfers operating system includes a queue pair QP and a remote memory buffer RMB allocated to each RDMA connection. Each QP includes a send queue and receive queue . An RDMA connection is identified by as source QP number a source RMB index a destination QP number and a destination RMB index.

As will be described in detail hereinafter embodiments of the present invention identify an RDMA connection during the setup of TCP IP connection between host and a remote host or and then perform the actual data communication between host and the remote host using the RDMA connection identified during the TCP IP connection setup. Embodiments of the present invention provide a new option type in the IP header format.

Referring to an Internet Protocol version 4 IPv4 header according to an embodiment of the present invention is illustrated. IP header has twelve mandatory fields and optional options extensions. The twelve mandatory fields are version header length differentiated services total length identification flags fragment offset time to live protocol header checksum source IP address and destination IP address .

Header length is a 4 bit field that specifies the number of 32 bit words in header . The minimum header length is five and the maximum header length is fifteen. Thus ten 32 bit words are available for options extensions. Protocol is an 8 bit field that specifies the protocol used in the data portion of the IP datagram which according to embodiments of the present invention is TCP.

According to embodiments of the present invention the options extensions include RDMA connection information. An 8 bit kind field identifies the option kind as RDMA. IP currently specifies several kind codes. Any unassigned kind code may be used to specify RDMA. An 8 bit length field specifies the length of the RDMA connection information. An RDMA connection parameters field contains the parameters that identify the RDMA connection. The parameters and the length of the RDMA options extensions depend on the context of the IP header. RDMA connection parameters field may include padding to fill unused space in the options portion of the header. It should be recognized that RDMA options may be implemented using Internet Protocol version 6 IPv6 extension headers which follow the IPv6 header. Alternatively RDMA options may be included in a TCP header rather than in an IP header.

After having completed the TCP IP three way hand shake server sends to client using the RoCE connection an RDMA confirmation message . In response to receiving confirmation message client sends to server again using the RoCE connection an RDMA reply . Then client and server begin data flows over the RoCE connection as indicated at .

According to embodiments of the present invention after the RoCE connection is established all data flows occur over RoCE. As will be described in detail hereinafter when both client and server finish sending data over the RoCE connection they terminate the TCP IP connection. However client and server wait a predetermined amount of time before terminating the RoCE connection.

If as determined at decision block the SYN ACK message does include the RDMA option the client determines at decision block if the there is an existing RoCE connection with this server. It will be recalled that a RoCE connection is identified by a RoCE address which includes the MAC address and GID and a QP number. If there is an existing RoCE connection with this server processing proceeds to which will be described below. If there is not an existing RoCE connection with this server the client saves the server s RDMA connection parameters at block . Then the client allocates a QP and an RMB for the connection associates its QP with the server s QP and selects RMB indexing information for the connection at block . The client then sends to the server a TCP IP ACK message with the RDMA option including its QP number RMB index and RMB key at block . The client sets its QP state to ready to receive and starts a confirmation timer at block and waits to receive an RDMA confirmation over the RoCE connection. The purpose of this confirmation is to verify that it is possible to communicate over the QPs. If the client receives a confirmation from the server as determined at decision block before the confirmation reply timer times out at decision block the client sets its QP state to ready to receive and sends a reply to the server over RoCE at block . Then the data flow for the TCP IP connection starts over the RoCE connection at block . If the client does not receive a confirmation from the server as determined at decision block before the confirmation reply timer times out at decision block the data flow starts over the TCP IP connection at block .

Referring back to decision block if there is an existing RoCE connection with this server the client determines at decision block if the SYN ACK from the server includes a new RMB if so the client saves the server s new RMB index and new RMB key at block . Then the client determines as indicated at decision block whether or not to allocate a new RMB. The determination may be based upon whether existing RMB is full or upon some other policy. If the determination is to allocate a new RMB the client allocates a new RMB and selects RMB indexing information at block and sends an ACK to the server that includes the RDMA option with the existing QP number new RMB key and new RMB index at block . If at decision block the client determines not to allocate a new RMB the client selects a new RMB index for the session at block and sends an ACK to the server that includes the RDMA option with the existing QP number RMB key and the new RMB index at block . Then the TCP IP data flow starts over the RoCE connection at block .

Returning to decision block if the SYN message does include the RDMA option the server determines at decision block if it has an existing RoCE connection with this client. If there is an existing RoCE connection with this client processing proceeds to which will be described below. If the server does not have an existing RoCE connection with this client the server saves the client s RoCE address allocates a QP and an RMB and selects RMB indexing information at block . Then the server sends to the client a TCP IP SYN ACK message with the RDMA option including the server s RoCE address QP number RMB key and RMB index and set its QP state to initialized at block . The server then waits for a TCP IP ACK message from the client. When as determined at decision block the server receives the ACK the server determines at decision block if the ACK message includes the RDMA option. In some cases either an RDMA aware server or client may opt not to use a RoCE connection and instead use a TCP IP connection for the data flow. If the ACK message does not include to RDMA option the server starts the data flow using the TCP IP connection at block . If as determined at decision block the ACK message does include the RDMA option the server associates its QP with the client s QP and sets its QP state to ready to send at block . Then the server sends a confirmation message to the client over the RoCE connection and starts a confirmation reply timer at block . If the server receives a confirmation reply from the client as determined at decision block before the confirmation timer times out at decision block the server starts the data flow for the TCP IP connection over the RoCE connection at block . If the server does not receive a confirmation reply from the client as determined at decision block before the confirmation timer times out at decision block the data flow starts over the TCP IP connection at block .

Referring back to decision block if there is an existing RoCE connection with this client processing proceeds to . The server determines at decision block whether or not to allocate a new RMB for the connection. If the server determines to allocate a new RMB the server allocates a new RMB and selects a new RMB index at block . Then the server sends a TCP IP SYN ACK message to the client with an RDMA option including the server s RoCE address existing QP number new RMB key and new RMB index at block . If as determined at decision block the server determines not to allocate a new RMB the server selects a new RMB index at block . Then the server sends to the client a TCP IP SYN ACK message with an RDMA option including the server s RoCE address existing QP number RMB key and new RMB index at block . After sending the TCP IP SYN ACK message at block of block the server waits for a TCP IP ACK message from the client at decision block . If as determined at decision block the TCP IP ACK message includes the RDMA option the TCP IP data flow starts over the RoCE connection at block . If the TCP IP ACL message does not include the RDMA option the TCP IP data flow starts over the TCP IP connection as indicated at block .

Peripheral component interconnect PCI bus bridge connected to I O bus provides an interface to PCI local bus . A number of modems may be connected to PCI local bus . Typical PCI bus implementations will support four PCI expansion slots or add in connectors. Communications links to networks may be provided through a modem or a network adapter connected to PCI local bus through add in boards. Additional PCI bus bridges and provide interfaces for additional PCI local buses and respectively from which additional modems or network adapters may be supported. In this manner data processing system allows connections to multiple network computers. A memory mapped graphics adapter and hard disk may also be connected to I O bus as depicted either directly or indirectly.

Those of ordinary skill in the art will appreciate that the hardware depicted in may vary. For example other peripheral devices such as optical disk drives and the like also may be used in addition to or in place of the hardware depicted. The depicted example is not meant to imply architectural limitations with respect to the present invention.

The data processing system depicted in may be for example an IBM System z server a product of International Business Machines Corporation in Armonk N.Y. running the Advanced Interactive Executive AIX operating system or LINUX operating system.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium or media having computer readable program code embodied thereon.

Any combination of one or more computer readable medium or media may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The computer program instructions comprising the program code for carrying out aspects of the present invention may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the foregoing flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the foregoing flowchart and or block diagram block or blocks.

The flowcharts and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

From the foregoing it will be apparent to those skilled in the art that systems and methods according to the present invention are well adapted to overcome the shortcomings of the prior art. While the present invention has been described with reference to presently preferred embodiments those skilled in the art given the benefit of the foregoing description will recognize alternative embodiments. Accordingly the foregoing description is intended for purposes of illustration and not of limitation.

