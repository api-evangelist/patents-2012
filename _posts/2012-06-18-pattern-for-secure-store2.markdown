---

title: Pattern for secure store
abstract: A computer system, computer product, and method for accessing a secure store, which includes receiving a request to access a secure store, checking the file path of the request to make sure it exists in the secure store, verifying security parameters from the process at the file system filter layer, saving the PID of the process by the file system filter layer, comparing the saved PID to the process's PID, and allowing the process to access the path in the secure store specified in the request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09659183&OS=09659183&RS=09659183
owner: Honeywell International Inc.
number: 09659183
owner_city: Morristown
owner_country: US
publication_date: 20120618
---
The present invention provides a secure system and method for determining whether an item is warranty eligible.

Companies including manufacturers and vendors of products warranty their products including but not limited to hardware and software components. The warranties for products are often handled by an after sales department such as customer support. When a product requires replacement or maintenance the validity of the warranty determines whether the expense is covered by the guarantor of the warranty. To determine whether a product is under warranty it is not enough to track only the warranty period for example by correlating the warranty number to its validity period. However many products including but not limited to hardware components have maximum usage numbers that contribute to whether an item is covered under a warranty. If the maximum usage has been exceeded a unit may not be covered.

Although a warranty number is public the maximum usage number is often confidential so that a user cannot access it and manipulate it.

A need therefore exists for a system and method of storing confidential warranty related information including but not limited to the maximum usage number for a given component.

An object of the present invention is to provide a secure system and method for determining whether an item is warranty eligible.

In an embodiment of the present information warranty information including but not limited to the maximum usage number and the warranty number and term is protected in a secure store. This security store is queried by an application executed on a processor which satisfies the security credentials of the server housing the security store.

In an embodiment of the present invention the security credentials are not known to the user of an application that checks confidential data in the secure store. Disseminating security credentials beyond authorized personnel represents a security risk. Further the security credentials are not entered by the user even an authorized user and in an embodiment of the present invention embedded in the application itself that accesses the secure store.

In a further embodiment of the present invention the license key is embedded in the device manufacture data. The application accesses the license key from the manufacture data via a private interface. The license key is then encrypted to security parameters by a mathematical algorithm familiar to one of skill in the art including but not limited to SHA MDS and or CRC. When the encrypted security parameters are passed to the file system layer they are decrypted to the license key using the same algorithm s . Thus in this embodiment at both the license key and the mathematical algorithm are needed in order to access to pass through this level of verification to the secure store.

Additionally in an embodiment of the present invention the ability for a user to unmount or format the secure partition where the secure store is housed is disabled from the user perspective. Disabling this functionality enhances security because the uninterrupted and unchanged connection to the secure partition enables the processor on the client making this connection to log all activity because this partition will be continuously watched by the system.

In an embodiment of the present invention because the secure partition cannot be unmounted or formatted by a user for the purposes of in house maintenance the partition can be formatted through a developer s bootload. Thus for example if the secure partition becomes corrupted and must be formatted to restore the integrity of the data a developer can modify the partition can modify the partition via the bootloader when the operating system is launched.

In an embodiment of the present invention the secure store is accessed by an application that is verified both by the security parameters that it passes the file system filter and by the PID assigned to the application program . In an embodiment of the present invention this application encrypts the license key embedded in the device manufacture data and this encrypted value comprises the security parameters that are passed to the file system filter. At this level the security parameters are decrypted to access the license key which is verified by the file system filter.

In an embodiment of the present invention the application the program that accesses the security store is comprised of computer readable code and is executed on a processor on a client. The computer code is stored on one or more memory resources that are is accessible to the client processor. The location of the resource s can be internal and or external to the client.

In an embodiment of the present invention before accessing the stored data in the secure store the application i.e. the program initiates a security process. First the security parameters passed by the program are verified by a file system filter layer on the secure partition. If the parameters pass the verification by the file system filter layer on this file system level the file system filter layer saves the application s process identification PID .

In an embodiment of the present invention when the application the originating program after completion of the security sub program requests access to confidential information including the warranty information in the secure store the file system filter layer first checks that the PID has been saved. The application can continue if and only if the PID is saved. Otherwise the information request is rejected. This originating program cannot run without a PID.

In an embodiment of the present invention once the originating program accesses the security store the program terminates. If the application seeks to access the security store at another point the security sub process verification of the security parameters in the program and logging of the program s PID and additional security check for the logged PID must complete before the originating program can access the security store.

The present invention provides a secure system and method for determining whether an item is warranty eligible.

The present invention offers a tiered security approach to protecting information including but not limited to information regarding whether a warranty for a product is still valid such as the usage information and warranty number and term. An application utilizing a traditional application programming interface API to access the secure store housing this information could present a security risk. A traditional API passes security parameters to access secure information and these parameters are entered by a user. Giving security parameters to a user adds a level of exposure to the secure store. Thus as discussed later in an embodiment of the present invention the security parameters are embedded in an application. In an embodiment of the present invention this security measure is not the only security measure the program passes to gain access to the secure store.

In an embodiment of the present invention the interactions of the user with the system are further limited by disabling the ability of the user to format or dismount the secure partition that houses the security store. In fact the partition cannot be dismounted or formatted from the application level. Limiting this access has at least two advantages 1 the data in the secure store is further protected and 2 the computer system upon which the secure store is mounted can accurately monitor and log the activity in the secure store. When a partition is unmounted the client that later mounts the partition is unaware of the activities within the partition during the time that the partition was unmounted. This knowledge gap compromises the security of the system in cases where the secure partition is hacked when it is unmounted and the data and or its integrity is compromised.

In an embodiment of the present invention because the secure partition cannot be unmounted or formatted by a user for the purposes of in house maintenance the partition can be formatted through a developer s bootload. Thus for example if the secure partition becomes corrupted and must be formatted to restore the integrity of the data a developer can modify the partition can modify the partition via the bootloader when the operating system is launched.

A client executes a program to connect to the secure partition on server . In the network connection between the server and the client is accomplished via a LAN. However the client can connect to the server using any connection known to one of skill in the art including but not limited to a WAN a VPN a private frame relay and or the Internet.

In certain embodiments the program logic including code may be stored in the storage . In certain other embodiments the program logic may be implemented in the circuitry . Therefore while shows the program logic separately from the other elements the program logic may be implemented in the memory and or the circuitry .

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system . Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

Using the processing resources of a client to execute software computer readable code or instructions does not limit where this code is can be stored. Referring to in one example a computer program product includes for instance one or more non transitory computer readable storage media to store computer readable program code means or logic thereon to provide and facilitate one or more aspects of the present invention.

Program code embodied on a computer readable medium may be transmitted using an appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language assembler or similar programming languages.

The program code may execute entirely on one resource such as the server the client or partly on various resources.

One or more aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowcharts and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

In addition to the above one or more aspects of the present invention may be provided offered deployed managed serviced etc. by a service provider who offers management of customer environments. For instance the service provider can create maintain support etc. computer code and or a computer infrastructure that performs one or more aspects of the present invention for one or more customers. In return the service provider may receive payment from the customer under a subscription and or fee agreement as examples. Additionally or alternatively the service provider may receive payment from the sale of advertising content to one or more third parties.

In one aspect of the present invention an application may be deployed for performing one or more aspects of the present invention. As one example the deploying of an application comprises providing computer infrastructure operable to perform one or more aspects of the present invention.

As a further aspect of the present invention a computing infrastructure may be deployed comprising integrating computer readable code into a computing system in which the code in combination with the computing system is capable of performing one or more aspects of the present invention.

As yet a further aspect of the present invention a process for integrating computing infrastructure comprising integrating computer readable code into a computer system may be provided. The computer system comprises a computer readable medium in which the computer medium comprises one or more aspects of the present invention. The code in combination with the computer system is capable of performing one or more aspects of the present invention.

Further a data processing system suitable for storing and or executing program code is usable that includes at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements include for instance local memory employed during actual execution of the program code bulk storage and cache memory which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input Output or I O devices including but not limited to keyboards displays pointing devices DASD tape CDs DVDs thumb drives and other memory media etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the available types of network adapters.

Although the architectures depicted in are non limiting examples for ease of understanding only these figures are referenced throughout a workflow of an embodiment of the present invention.

To initiate the query process the client executes a program application . The program is initiated S and executes on a client processor and is comprised of computer readable code. The computer code is stored on one or more memory resources that are is accessible to the client processor. The location of the resource s can be internal and or external to the client .

First the program registers on the file system layer and the security parameters are passed to the file system filter layer S . Once the security parameters are passed to the file system filter layer attempts to verify the passed security parameters S .

If these parameters are verified by the file system filter layer the PID of the program is saved S on a memory resource in the physical machine where the file system filter layer resides and or on a memory resource that is accessible to the file system filter layer via a communications connection. If the security parameters are incorrect or absent the application fails to register at the file system filter layer S .

An application may attempt to bypass the security at the file system filter layer and directly access the security store. Such an application is seen in S . This application did not register at the file system filter layer S and did not pass security parameters that were verified S . This application is included in to demonstrate the operation of the security features of the embodiment when an application fails to clear the security at the file system filter level before attempting to access the secure store.

The registration of the application to the file system filter layer may be handled as part of the security routine or as part of a subroutine. One of skill in the art will recognize that the use of a sub routine to accomplish tasks that feed into the master routine is just a programming preference. Further embodiments of the present invention incorporate the security check by the file system filter layer into a single programming routine and or use a separate routine. is shows some steps as a part of the same routine that can be separated into sub routines in further embodiments just for the sake of clarifying the different security measures involved in accessing the secure store. Additionally the check for a logged PID which is discussed later is represented as a subroutine in this embodiment. However one of skill is the art will recognize that this is one of many potential programming choices in structuring this workflow.

In an embodiment of the present invention the security parameters are an encrypted license key. This license key is embedded in the device manufacture data for example for a hardware component. The program accesses the embedded data to retrieve the license key via a secure connection including but not limited to a private interface created by the executed computer code the application. After the license key is retrieved it is encrypted by a mathematical algorithm. Various mathematical encryption algorithms are known to one of skill in the art and can be employed by this process. Encryption algorithms that can be used to encrypt the license key include but are not limited to SHA MDS and or CDC.

When the security parameters comprise an encrypted license key the file system filter layer decrypts the security parameters to verify the license key. For decryption the same algorithm that was used in encryption is employed. In this embodiment only a program with both the correct encryption algorithm and the license can gain access to the secure store.

Returning to after logging the PID S the program attempts to access read write a file in the secure store S . The application that failed to register S and the application that bypassed registration S also attempts to access a file in the secure store S . First the path of the file is checked to see if the file is in the secure store S . If the path is to the secure store a security subroutine is executed S to check the PID of the application against the PID stored by the file system filter layer S . The subroutine checks whether the PID of the application matches the stored PID S . If the PIDs match the query for example to retrieve warranty information is given access to the secure store S and the program runtime executes S . After the runtime is complete the program terminates S . Once the secure store s warranty information is retrieved by an application that passes the security in order to complete a new query the same security routine repeats. Each instance of the application will have a different PID so for a match to occur the PID of the new instance is logged at the file system filter layer.

If the PID of the application does not match the saved PID which is the case both with the application that bypassed the security at the file system filter layer S and the application where the security parameters were not verified S the application fails to access the secure store S . The program runs S and terminates without having accessed the secure store S .

If the file that the application is attempting to access is not in the secure store but located in a different partition the file system layer check is bypassed S . The application accesses another non secure partition S where the application runtime completes S and the program terminates S .

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below if any are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiments were chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiment with various modifications as are suited to the particular use contemplated.

Although the present invention has been described in relation to particular embodiments thereof many other variations and modifications will become apparent to those skilled in the art. As such it will be readily evident to one of skill in the art based on the detailed description of the presently preferred embodiment of the system and method explained herein that different embodiments can be realized.

Although the present invention has been described in relation to securing warranty information one of skill in the art will recognize that the security measures disclosed are applicable to protect access to sensitive information across different applications and industries. The use of the system and method is described relative to protecting warranty information but is not limited to this application.

