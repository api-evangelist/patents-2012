---

title: Composite nested streams
abstract: Reshaping of streams is provided to facilitate utilizing the streams without rapidly increasing memory requirements as the size of the stream increases. The streams can be pushed to alternative storage upon being reshaped, for example, such as to a persistent storage. If the streams lose structure, for example if a hierarchical stream is reshaped into a flat structure for storage in a database, structural information can be stored along with the streams and utilized to shape the stream to its original structure upon request for data, for example. Streams can be pulled from an exposing device or application, and portions of the stream can be transformed and stored according to a set of stop elements; the stop elements can be associated with functions that take action on the stream upon reaching a stop element, such as transforming and storing a portion thereof.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08423588&OS=08423588&RS=08423588
owner: Microsoft Corporation
number: 08423588
owner_city: Redmond
owner_country: US
publication_date: 20120302
---
This application is a continuation of and claims priority to U.S. patent application Ser. No. 11 782 627 now U.S. Pat. No. 8 156 149 filed Jul. 24 2007 and entitled COMPOSITE NESTED STREAMS. The disclosure of the above identified application is hereby incorporated by reference in its entirety as if set forth herein in full.

The evolution of computers and networking technologies from high cost low performance data processing systems to low cost high performance communication problem solving and entertainment systems has provided a cost effective and time saving means to lessen the burden of performing every day tasks such as correspondence bill paying shopping budgeting information and gathering etc. For example a computing system interfaced to the Internet by way of wire or wireless technology can provide a user with a channel for nearly instantaneous access to a wealth of information from a repository of web sites and servers located around the world. Such a system as well allows a user to not only gather information but also to provide information to disparate sources. As such online data storing management and accessing has become increasingly popular.

Consumer data can be stored in a variety of formats offering access to a plurality of entities. Extensible markup language XML and other data storage access and management technologies have emerged to provide a hierarchical structure to data the hierarchical structure provides an intuitive format to the data to facilitate programmatic access thereto. Both hierarchical and relational storage have benefits and drawbacks. One drawback of XML is that XML data is typically stored in memory to facilitate programmatic access which can become burdensome if the XML file is too large to fit in memory and or is streamed in from an external data source. Relational data however can be stored persistently and queried when desired without utilizing a significant portion of volatile storage.

However XML queries can be more efficient due to the storage in volatile memory and XML can be friendlier in regard to providing programmatic access but as XML files become large processing and storing them in volatile memory can have a negative affect on system resources. XML is desirable as a method for storing accessing and communicating data thus allowing data in XML format or other nested hierarchical format to be seamlessly and efficiently stored in a persistent storage such as relational storage while maintaining its hierarchical structure can satisfy the current deficiencies of the language. Current systems aim to store XML code in the database itself but this requires extra steps of indexing the data as it comes in and allowing queries on the index which may or may not produce desired results. This can also damage the hierarchical order of the XML depending on how the document or stream is broken up and stored. One issue that has been heretofore unsolved is how to process a nested stream such as XML into a differently shaped stream such as a relational database stream while staying true to the hierarchy and order.

The following presents a simplified summary in order to provide a basic understanding of some aspects described herein. This summary is not an extensive overview nor is intended to identify key critical elements or to delineate the scope of the various aspects described herein. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

Reshaping of nested streams into other structures and formats is provided to facilitate alternative storage thereof in one embodiment. The stream can be in substantially any nested hierarchical format such as extensible markup language XML for example and can be output to substantially any format. The output format can be flat for example such that the nesting hierarchy and order of the original stream can be preserved using data relating to the flat structure. The input stream can be consumed and transformed upon consumption to a disparate format. The disparately formatted stream can be pushed to one or more output streams to facilitate alternative storage of the stream for example.

In one embodiment the input stream can be a nested stream such as XML and storage thereof to a relational database can be desired. This can be advantageous as relational databases can typically offer persistent storage thus taking the stream out of volatile memory for conservation of memory. In this embodiment the nested stream can be read and interpreted for indication of one or more stop elements consumption of which can cause an action on the stream. The action can be a transformation of a portion of the stream to a disparate structure for storage of the portion. In one embodiment a specified portion can be transformed into a relational format utilizing primary and or foreign keys to preserve the hierarchy of the stream. Additionally the stream can be read one full XML element at a time to facilitate asynchronous processing and storage thereof within the relational data store without sacrificing hierarchy and order of the data. In this regard the data can be restructured to its original form in the stream for processing access requests to the data.

To the accomplishment of the foregoing and related ends certain illustrative aspects are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways which can be practiced all of which are intended to be covered herein. Other advantages and novel features may become apparent from the following detailed description when considered in conjunction with the drawings.

Processing of data streams into disparately structured data streams is provided to facilitate alternative storage thereof. Such restructuring can be seamless to an accessing entity such that access can be provided to the disparately structured data stream in the substantially the same manner as for the original data stream. Additionally requests for access can be made in substantially the same manner regardless of the structure of the disparately structured stream. In this regard the stream can be restructured and stored in another format or multiple other formats but accessed in the same manner. It is to be appreciated that the accessing entity can also request access to the data using methods related to the disparate structure of the data.

In one embodiment the data stream can be read such as by subscription and or pulled such as by request response from a data source. The stream can be transformed into one or more streams of disparate structure and or format the disparately structured formatted stream can be pulled by or pushed to another data reader for example. This can be useful in a scenario where a data stream is large and or increasing in size such that a finite amount of memory is challenged. In this scenario the data stream can be consumed and off loaded into a disk storage type of format. The component or application reading the stream then can have a finite amount of memory and can leverage one or more other components applications having virtually infinite storage for instance. In one example an extensible markup language XML document stream can be read and transformed into multiple tables and rows in a relational database. The transformation can preserve the order and layout of the XML while breaking the document into logical structures for storage in the database. As mentioned a call to an application to retrieve the XML can produce the same result whether or not the XML has been transformed into relational database tables rows.

Various aspects of the subject disclosure are now described with reference to the annexed drawings wherein like numerals refer to like or corresponding elements throughout. It should be understood however that the drawings and detailed description relating thereto are not intended to limit the claimed subject matter to the particular form disclosed. Rather the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the claimed subject matter.

Now turning to the figures illustrates a system that facilitates transforming a data stream into one or more disparately formatted structured data streams. A composite stream transformation component is provided that takes a data stream as input e.g. by subscription and or request response and transforms the stream into one or more disparately formatted or structured streams. In one embodiment the data stream is provided as input into main memory of the composite stream transformation component . The composite stream transformation component can read the stream and transform the stream into one or more disparately formatted structures for storage in an alternative medium for example. This can facilitate off loading the stream to handle memory constraints in this regard the data stream can be large and the composite stream transformation component can have a finite memory for example. Off loading the stream to other storage in a different format can allow the data to be retained having little effect on the composite stream transformation component memory or a component application implementing such functionality.

When transforming the data stream to another format and storing it in a disparate medium the composite stream transformation component can keep the logical structure of data. Thus when a request for the data is processed the data can be obtained from the disparate storage medium and transformed from the disparate format to the original format as if the alternative transformation and storage were not performed. In this way the process can be seamless to a requesting entity. This storage transformation process however can allow large data streams normally loaded into memory to be off loaded for access thereof where the memory cannot efficiently handle the data stream. In addition providing an off loading format with efficient querying capability can make the transformation process more seamless such as a relational database.

In one embodiment the data stream can be an XML stream for example. The stream can be a large file and or an infinite stream such as a stock news ticker for instance . As the file increases in size or as the stream keeps pushing data out the available memory of the composite stream transformation component or an application running the component can continually decrease. However in some applications a full load of the XML stream in memory is desired for subsequent data access retrieval. Thus off loading the stream to a more fixed storage medium such as a disk can allow the stream to be continually consumed without dropping portions of the stream or pausing to archive the data. In one embodiment the data can off loaded to a relational database thus providing efficient querying capabilities as well. This can make the process seamless to a user of the data for example. In this embodiment the data can be consumed by an application or user from the composite stream transformation component which consumes the data from the data stream. Access to the data can be provided regardless of whether the portion of the stream requested is in memory of the composite stream transformation component and or in off loaded storage.

It is to be appreciated that this is one embodiment of a use case pertaining to the subject matter described herein. Other formats can be used for both the incoming and outgoing data streams. Additionally one or more outgoing data streams can be an input data stream to another composite stream transformation component . As mentioned above the transformation process can retain the structure of the data. In the XML example the hierarchy and order of items in the file can be retained when transforming the data to relational database tables and rows for example. Thus requesting the data can produce the database stored data in substantially the same format as if the data was retrieved from the original data stream. Additionally requests for data can be in the form of XML and or relational database query in the XML example provided for instance.

Referring to a system for transforming a data stream into one or more data store entries is displayed. A composite stream transformation component is displayed that inputs a data stream transforms the stream or a portion thereof and outputs the transformation to a data stream store in one or more output data streams. In one embodiment the data stream input into the composite stream transformation component can be a constant stream or a large file. The composite stream transformation component can transform the data stream into one or more output streams. The output streams can be in the format of data stream store for example. The output streams can be stored in the data stream store and dropped from the memory of the composite stream transformation component . In this regard neither the stream as input nor the streams as output are retained in the composite stream transformation component .

The data stream input into the composite stream transformation component can come by way of subscription e.g. notification events of new data and or callback behavior and or as response to a request from the composite stream transformation component or other component for instance . For example the input can be a file such as a data file too large for composite stream transformation component memory and or a constantly updating stream. It is to be appreciated that the subject matter described herein is operable with substantially any size or type of file rather large files can facilitate discussion of one useful embodiment. Example input can be substantially any streaming data such as a news stock ticker a media file such as audio and or video sensor data such as for many automation architectures medical information such as patient data scrolling in a hospital room for example airspace flight data such as positions and other metrics and or the like. To this end the input data can also be substantially any data that can be taken as a function of time as well such as fitness data computer input data simulation data driving data network traffic data and or the like for example.

In one embodiment only some of the data can be desired such that the composite stream transformation component can retain the desired data and discard extraneous data. It is to be appreciated that the composite stream transformation component need not necessarily actively discard the extraneous data rather the stream can be read and does not need to be stored in the first place in this regard the extraneous data can simply be ignored. In this embodiment the composite stream transformation component can stop the stream at points of interest and transform the portion until an identifier is reached indicating the end of the point of interest. This process can continue while the stream is live e.g. constantly updating and or offering connection thereto for example . In one embodiment the points of interest can correspond to a single output stream for example. In one embodiment the point of interest can trigger an event in the composite stream transformation component to stop the stream and begin transformation for example.

Additionally the data stream being input can be nested and or have a hierarchical structure such that points of interest can occur before one point of interest ends. To preserve the structure of the data stream the composite stream transformation component can transform the stream as mentioned to disparate output streams relating to the points of interest. In this regard a hierarchical nested structure can be maintained when storing the stream in a flat structure. For example a stream can be opened for a point of interest and another point of interest can appear opening another stream for the second point of interest. The stream for the second point can close e.g. by an ending indicator for the point of interest causing the output stream related to the second point of interest to be completely transformed and closed. Information pertaining to the other open streams can also be written to identify the second point of interest as related a child for example to the stream still open. Subsequently an ending indicator for the first stream can be reached causing the first stream to be completely transformed and closed.

In one embodiment the data stream input is hierarchical such as an XML stream or document having a plurality of tags indicating starting and ending of elements. The elements can be nested such to indicate hierarchy. The stream can be input into the composite stream transformation component e.g. by pulling or pushing and the start end tags can be consumed until a point of interest element is reached. Subsequently a stream relating to the element can be opened and data consumed corresponding to the element can be transformed to a disparate structure such as a relational database table row and output accordingly. In one embodiment the data stream store can be a relational database having tables relating to points of interest and rows comprising the related data for example the data stream store can be distributed as well . Thus the composite stream transformation component can open a stream relating to a table corresponding to an element or point of interest. If another point of interest is consumed before the first is closed by an end tag in the XML example a new stream can be opened corresponding to a table relating to the second point of interest. When an ending element is encountered for the second stream the desired related data can be output to the stream and hence as rows to the database table for example . The output can include for example data regarding the first point of interest to indicate hierarchy e.g. that the second point of interest is a child of the first point of interest . Subsequently an end tag for the first point of interest can be reached causing the related stream to be written and closed.

It is to be appreciated that error checking can be present in the transformations performed by the composite stream transformation component as well such that for example where an end tag for the first point of interest is reached before the end tag for the second point of interest indicating a nesting error the second point of interest can be closed. Additionally the output stream can be in substantially any format or architecture where the format or architecture is different from the data stream as input such as relational flat file tab delimited file comma separated value file JavaScript object notation JSON representational state transfer REST XML etc. . Additionally as mentioned elements can be ignored and thus not included in the output stream for instance. Also accessing mechanisms can be implemented to allow access to data stored in the output format from requests based on the input format. Moreover the composite stream transformation component can be configurable and or utilized with an interface to provide customization thereof. Additionally inference can be used to define transformations at least in part based on previous uses for example. In one embodiment of the subject matter as described the composite stream transformation component can comprise a reader for the data stream as well as a reader for the streams output to the data stream store . The reader of the data stream can read an entire available segment of the stream for example and the reader for the output streams can traverse the read stream one element at a time. Thus in the XML example an available portion of the stream can be read by the composite stream transformation component and then elements can be traversed one by one to create the output streams for the data stream store .

Turning now to a system for storing a data input stream in a stream data store and providing access thereto is shown. A composite stream transformation component is provided that pulls or is pushed a data stream and outputs a transformed version of the stream to one or more data stream store s . Additionally an application is provided that requests access to a portion of the data in the data stream. In one embodiment the composite stream transformation component receives a data stream as input and transforms the stream to one or more disparate formats for storage thereof in data stream store s the transformation can shred the stream for relevant portions thereof for example. The application can desire access to a portion of the stream. In one embodiment the request for access can be in a format corresponding to a format of the original data stream. The composite stream transformation component can interpret the request and access the data stream store s such as by query for example to obtain the desired data. It is to be appreciated that if the data is in the composite stream transformation component such as part of a point of interest being transformed the composite stream transformation component can return directly from the data stream as well.

For example as mentioned the data stream can be a news ticker implemented in really simple syndication RSS an embodiment of XML . As the news ticker stream comes in as the data stream input into the composite stream transformation component the data can be consumed looking for a point of interest for instance. The points of interest can be defined by the application . In this regard there can be a composite stream transformation component specific to a given application for example. In addition multiple composite stream transformation components can pull on or receive subscription notifications from one data stream and output one or more streams accordingly for example. In one embodiment there can be some information in a stream the application does not need to access and or the composite stream transformation component deems unnecessary such as keywords related news stories or other information that can be specific to one embodiment. Thus the composite stream transformation component can define stops in the stream to correspond to points of interest and specify portions of the stream to be extracted at the points of interest. In this regard consuming a point of interest can trigger an event such as a callback function for example to process the data in the stream relating to the point of interest. In this example the composite stream transformation component can detect the point of interest and extract relevant information outputting such to one or more data streams into one or more data stream store s for example. Additionally as mentioned the composite stream transformation component can transform the stream such that the hierarchical structure is preserved. For example RSS and XML can have nested related elements such to create a hierarchy of elements. The hierarchy can be preserved by storing relationship related information such as parent child and or sibling information with a point of interest when outputting to the data stream store s .

The application can request a portion of the data stream as stored in the data stream store s for example. The request can be processed by the composite stream transformation component for instance by querying the data stream store s for the requested data. In one embodiment the resulting data can be transformed into the type and or format of the original stream to make the transformation seamless to outside applications and other requestors for example. In this regard the composite stream transformation component can have finite memory as streams can be discarded once output to the data stream store s for example. As mentioned where the data has a hierarchical or nested format this format can be preserved in the data stream store s . For example where the store s are relational databases primary keys can be defined in a table related to a point of interest and utilized by other tables related to children or nested points of interest as a field thereof for example to keep the relationship hierarchy. In this regard a query from the composite stream transformation component to the data stream store s can render one or more database rows in this example. The row can have a related key that can be utilized to locate information about parents or children of the element in the original hierarchy for example.

Referring now to a system for transforming streams and providing subsequent access to stream data is displayed. A composite stream transformation component is provided having a source stream input component that takes a stream as input a stream transformation component that transforms the input stream to at least one disparate format a store stream output component that outputs the disparately formatted streams to one or more outputs or stores and a data access component that facilitates subsequent access to the data. In one embodiment the source stream input component can pull a source data stream and stop upon reaching the start or end of a point of interest. The transformation component can transform the stream or a portion thereof e.g. relevant fields to a disparate format and or architecture and the store stream output component can store the transformed streams. Subsequently the data access component can field requests for data and return appropriate results.

The source stream input component can take a stream as input by substantially any method including request response subscription request resulting in notification of new data for example pulling a specified portion etc. In one embodiment the source stream input component pulls the stream as a result of a request from one or more components or applications for example. Additionally the source stream input component can pull for data for example based in part on a pull request to a disparate data store that houses data output by the store data output component for example. In another embodiment the source stream input component can stop the stream for example upon reaching a desired item an item of interest for example . Upon stopping the stream for instance the item of interest can be read in full e.g. until an element indicating the end of the item of interest or incrementally until an end point is reached.

The stream transformation component can consume the stream data the data can be related to one or more points of interest for example. The consumed data or a portion thereof can be transformed to one or more disparate types for input into a disparate structure for example. The disparate structure can be stored such to allow virtually endless storage for example thus allowing the stream to be accessible while not increasingly utilizing memory of a component such as the composite stream transformation component . In fact once the stream is input and transformed the stream can be output by the store stream output component for example and then disposed of. Thus the memory of the composite stream transformation component or a system component or application associated therewith can be finite since neither the input stream nor the output stream remains in memory. In this regard the stream transformation component can be considered a reader in effect as well like the source stream input component . While the source stream input component can consume an available portion of the stream which can be one or more elements the stream transformation component can advance the consumed stream an element at a time transforming selected portions for output thereof to the store stream output component . The dual or multiple reading can have a domino effect for example where a component or application can cause the stream transformation component to read an element such as by accessing the data stream store or store stream output component for example which can cause the source stream input component to read a portion of the data input stream for instance.

The store stream output component can persist the transformed instances of the stream to one or more disparate storage types formats on one or more disparate storage devices for example to facilitate long term storage redundant storage and or alternative storage of the data stream for example. The output format can be substantially any output format and a hierarchical structure of the data if existent can be maintained. Additionally where the input data is relational the relationships can be maintained in the transformation and output of the data by the store stream output component as well. For example where the data is related by primary and or foreign keys the key information can be use to provide a hierarchy to the data when stored in a hierarchical or nested format such as XML for example. The stream store output component can output the data in a number of streams and the streams can correspond to one or more entities related to the store as well. Conversely for example where the data is output to a relational database streams can be open by the store stream output component for each element of interest for example. The stream can relate to and insert data as a row within a table for example. In this regard items of interest can be stored together in the table and keys can be used to retain nesting and or hierarchical format of the input data stream.

The data access component can facilitate subsequent access of the data stored in the data stream stores by the stream store output component for example. In one embodiment the data can be returned in substantially the same format as it was in the input data stream for example. Thus where the data in the input data stream was hierarchical in nature the hierarchy can be retained even where the data is output to a flat format such as a relational database or file based format . One way to effectuate this while still providing efficient transformation of the stream is to allow the stream transformation component to retrieve a complete row as a stream. This correlates to receiving an entire stream of related elements in a single retrieval such that the order can be preserved but stream processing and transformation can continue with respect to the stream. In XML for example this can entail reading an entire point of interest tag which can comprise other point of interest tags before processing such to retain the hierarchy and order. In this regard the point of interest stream can be processed together as a group and stream input transformation can continue. In one embodiment the first point of interest reached in each case can be read as a single row ensuring that the hierarchy is maintained for the highest level items on down. Additionally other schemes can be utilized as well for example for higher level nodes that are not high in number in the stream but have a number of children. In this regard the children can be read as single rows along with embedded points of interest . It is to be appreciated that this can be configurable and or machine learning can be utilized to decide efficient methods of using this technology.

Additionally the data can be flat in the input stream and going to a hierarchical structure or another flat structure for example . Where the data was flat in the input data stream and perhaps had a relational aspect to it the relationships between the data can be retained for example if the data is stored in a hierarchical format such as by nesting for example . Similar methods can be used to effectuate this converse behavior as well. For this reason when data access is requested from the data access component it can be returned in substantially the same format as it originally came in as the structure of the data can be retained in other formats using other syntax for instance.

Now referring to a system for transforming an XML stream into a relational database is illustrated as one example embodiment of the subject matter described herein. In this example a data stream is provided in a nested format such as XML which is consumed by a composite stream transformation component . The composite stream transformation component transforms the data and outputs it on one or more streams into a data stream store which stores the streams in a relational database in this example to facilitate subsequent querying thereof. The example provides database tables for items similar items location and map info the composite stream transformation component can identify stops in the XML stream relating to the elements that correspond to the table as well as identify wanted information from the elements of interest. The following pseudo code can facilitate this functionality where the XML stream can be named expo.xml. 

The following pseudo code can be used to implement the portion of the composite stream transformation component that reads the XML stream.

In this regard a stream comprising a row can be formulated of related elements of the XML stream such as an item of interest and its children . Thus a pulling a stream can return a single row with the related XML elements. This can facilitate efficiently parsing the XML stream and retaining its hierarchical order by allowing consumption of the stream while processing each row since the row is kept together the hierarchy and order can be maintained. As described above multiple schemes can be implemented to decide where this functionality should be implemented. For example the first point of interest in each read can be read as a row to ensure all children hierarchy and order are retained. However where the first point of interest is large and the transformation must wait a while before receiving the end tag a child point of interest can be used instead. It is to be appreciated that one or more points of interest can be read as a row along with the embedded points of interest related thereto. Additionally inference can be used to determine which points of interest must be read as a single row in this regard. This can be coded according to the following pseudo code implemented within the XDataRow class represented in some of the foregoing pseudo code for example.

The aforementioned systems architectures and the like have been described with respect to interaction between several components. It should be appreciated that such systems and components can include those components or sub components specified therein some of the specified components or sub components and or additional components. Sub components could also be implemented as components communicatively coupled to other components rather than included within parent components. Further yet one or more components and or sub components may be combined into a single component to provide aggregate functionality. Communication between systems components and or sub components can be accomplished in accordance with either a push and or pull model. The components may also interact with one or more other components not specifically described herein for the sake of brevity but known by those of skill in the art.

Furthermore as will be appreciated various portions of the disclosed systems and methods may include or consist of artificial intelligence machine learning or knowledge or rule based components sub components processes means methodologies or mechanisms e.g. support vector machines neural networks expert systems Bayesian belief networks fuzzy logic data fusion engines classifiers . . . . Such components inter alia can automate certain mechanisms or processes performed thereby to make portions of the systems and methods more adaptive as well as efficient and intelligent for instance by inferring actions based on contextual information. By way of example and not limitation such mechanism can be employed with respect to generation of materialized views and the like.

In view of the exemplary systems described supra methodologies that may be implemented in accordance with the disclosed subject matter will be better appreciated with reference to the flow charts of . While for purposes of simplicity of explanation the methodologies are shown and described as a series of blocks it is to be understood and appreciated that the claimed subject matter is not limited by the order of the blocks as some blocks may occur in different orders and or concurrently with other blocks from what is depicted and described herein. Moreover not all illustrated blocks may be required to implement the methodologies described hereinafter.

At the data stream is pulled in a first format. As described this can be the result of a pull request from another entity such as for a portion element or entirety of the stream . The data stream can be substantially any stream in substantially any format. As described the stream can be for many purposes comprising many different data contents or mixtures thereof. The data can be pulled as it comes in via a notification event for example or request response behavior. At the pulled data stream is read until a point of interest is consumed. If no such point exists the data can be continually pulled and read until such point is reached. The point of interest can relate to an element or attribute of the data string for example and can act as a trigger to perform some function on the stream. For instance the consumption of a point of interest can cause a portion of the stream to be transformed into a different structure at .

Such transformation can keep a structure of the first format upon transformation such as a relational or hierarchical structure whatever structure the first format can have . This can be done in a number of ways depending on the original and stored structures of the data. In one embodiment the data can be XML formatted data for example having a plurality of start and end tags indicating elements where the elements can be nested to form a hierarchical structure. This structure can represent a relationship between the elements for example. In this embodiment the stream can be transformed to a different structure or the same structure on a different storage medium for example . Storing the XML in a relational database however can retain structure using keys such as primary and foreign keys to relate the data to one another such that subsequent retrieval can form the data in substantially the same format as received in the original stream preserving order and hierarchy for example . Additionally the converse storage of relational data to XML for example can utilize hierarchical structure to preserve key usage. It is to be appreciated that there are many other examples and methods for different formats for example taking an XML stream to a flat text file other fields or indicators unique identifiers can be used to relate data to its hierarchical structure. At the data is output in the second format. As mentioned this can be to utilize a persistent storage for example so long as the stream is consumed and output to a different format and or location. The output can also utilize one or more streams into one or more sources for redundant multiple and or alternative storage schemes.

At the callback functions are defined specified to output data to the stream. For example the function can be implemented such that it is accessible upon reaching a stop element. The function can be coded to perform a variety of output tasks related to the stream data for example. In one embodiment the callback function can open an output stream and write data to it according to a transformation scheme. Thus in a file to database implementation the database connection can be opened unless globally opened already the query string for insertion can be formulated and executed with the input stream data. Other tasks can be performed by the function as well for example if deletion of rows or creation of a new table is desired for example. At reading can begin on the input stream and the architecture can be utilized to perform the described functionality.

At a request is received for one or more elements in the stream. The elements can be determined according to the interpreted stream in this regard the stream can be requested one element at a time after the available portion is pulled. Additionally the available portion can be pulled as a result of the request for the one or more elements. At the requested elements are transmitted to the requestor. In one embodiment the requestor can output the requested elements to an output stream as further described herein for example.

As used herein the terms component system and the like are intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an instance an executable a thread of execution a program and or a computer. By way of illustration both an application running on a computer and the computer can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

The word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs. Furthermore examples are provided solely for purposes of clarity and understanding and are not meant to limit the subject innovation or relevant portion thereof in any manner. It is to be appreciated that a myriad of additional or alternate examples could have been presented but have been omitted for purposes of brevity.

Furthermore all or portions of the subject innovation may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed innovation. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device or media. For example computer readable media can include but are not limited to magnetic storage devices e.g. hard disk floppy disk magnetic strips . . . optical disks e.g. compact disk CD digital versatile disk DVD . . . smart cards and flash memory devices e.g. card stick key drive . . . . Additionally it should be appreciated that a carrier wave can be employed to carry computer readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network LAN . Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

In order to provide a context for the various aspects of the disclosed subject matter as well as the following discussion are intended to provide a brief general description of a suitable environment in which the various aspects of the disclosed subject matter may be implemented. While the subject matter has been described above in the general context of computer executable instructions of a program that runs on one or more computers those skilled in the art will recognize that the subject innovation also may be implemented in combination with other program modules. Generally program modules include routines programs components data structures etc. that perform particular tasks and or implement particular abstract data types. Moreover those skilled in the art will appreciate that the systems methods may be practiced with other computer system configurations including single processor multiprocessor or multi core processor computer systems mini computing devices mainframe computers as well as personal computers hand held computing devices e.g. personal digital assistant PDA phone watch . . . microprocessor based or programmable consumer or industrial electronics and the like. The illustrated aspects may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. However some if not all aspects of the claimed subject matter can be practiced on stand alone computers. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

With reference to an exemplary environment for implementing various aspects disclosed herein includes a computer e.g. desktop laptop server hand held programmable consumer or industrial electronics . . . . The computer includes a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various available microprocessors. It is to be appreciated that dual microprocessors multi core and other multiprocessor architectures can be employed as the processing unit .

The system memory includes volatile and nonvolatile memory. The basic input output system BIOS containing the basic routines to transfer information between elements within the computer such as during start up is stored in nonvolatile memory. By way of illustration and not limitation nonvolatile memory can include read only memory ROM . Volatile memory includes random access memory RAM which can act as external cache memory to facilitate processing.

Computer also includes removable non removable volatile non volatile computer storage media. illustrates for example mass storage . Mass storage includes but is not limited to devices like a magnetic or optical disk drive floppy disk drive flash memory or memory stick. In addition mass storage can include storage media separately or in combination with other storage media.

The computer also includes one or more interface components that are communicatively coupled to the bus and facilitate interaction with the computer . By way of example the interface component can be a port e.g. serial parallel PCMCIA USB FireWire . . . or an interface card e.g. sound video network . . . or the like. The interface component can receive input and provide output wired or wirelessly . For instance input can be received from devices including but not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone joystick game pad satellite dish scanner camera other computer and the like. Output can also be supplied by the computer to output device s via interface component . Output devices can include displays e.g. CRT LCD plasma . . . speakers printers and other computers among other things.

The system includes a communication framework that can be employed to facilitate communications between the client s and the server s . Here the client s can correspond to program application components and the server s can provide the functionality of the interface and optionally the storage system as previously described. The client s are operatively connected to one or more client data store s that can be employed to store information local to the client s . Similarly the server s are operatively connected to one or more server data store s that can be employed to store information local to the servers .

By way of example client s can read transform and output one or more data streams to a persistent centralized storage. The client s can temporarily consume a data stream and transform it into a more persistent format while preserving order and hierarchy present in the stream. The client s can output the transformed stream across the communication framework to one or more server s and or the data store s associated therewith. Additionally one or more client s can request access to the data stored in data store s across communication framework . The requested data can be retrieved from the data store s by one or more server s and transformed back into the format of the original data stream. Subsequently the restructured data can be sent back to the client s from the server s in substantially the same format as it was in the original data stream.

What has been described above includes examples of aspects of the claimed subject matter. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the claimed subject matter but one of ordinary skill in the art may recognize that many further combinations and permutations of the disclosed subject matter are possible. Accordingly the disclosed subject matter is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the terms includes has or having or variations in form thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

