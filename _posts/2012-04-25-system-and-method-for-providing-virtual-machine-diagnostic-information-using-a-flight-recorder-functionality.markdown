---

title: System and method for providing virtual machine diagnostic information using a flight recorder functionality
abstract: A system and method for providing virtual machine diagnostic information. In accordance with an embodiment, a “flight recorder”, for use with a virtual machine, such as a Java virtual machine (JVM), allows a system administrator, software developer or other user experiencing a system problem to “go back in time” and analyze what happened right before a particular problem occurred in their system, and/or obtain an extremely detailed level of profiling without impacting system performance. The flight recorder does this by being tightly integrated into the core of the JVM itself, and by being very conscious of its performance overhead. This allows the flight recorder to provide a large amount of information on the inner workings of the JVM, and on Java programs running in the JVM.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08924789&OS=08924789&RS=08924789
owner: Oracle International Corporation
number: 08924789
owner_city: Redwood Shores
owner_country: US
publication_date: 20120425
---
This application claims the benefit of priority to U.S. Provisional Patent Application titled SYSTEM AND METHOD FOR PROVIDING VIRTUAL MACHINE DIAGNOSTIC INFORMATION USING A FLIGHT RECORDER FUNCTIONALITY Application No. 61 478 851 filed Apr. 25 2011 which application is incorporated herein by reference.

This application is related to U.S. patent application titled DIAGNOSTIC FRAMEWORK FOR USE WITH APPLICATION SERVERS AND VIRTUAL MACHINES application Ser. No. 13 111 612 filed May 19 2011 which application is incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The invention is generally related to virtual machines such as Java virtual machines and is particularly related to a system and method for providing virtual machine diagnostic information using a flight recorder functionality.

A virtual machine such as a Java virtual machine JVM allows for portability of software applications between different underlying computer architectures hardware platforms and operating systems. Examples of JVMs include Oracle JRockit and Oracle Hotspot. In the context of an application server environment such as Oracle WebLogic Server the JVM provides a uniform layer of abstraction between the hardware platform and the application server or any compiled software applications running thereon. An important aspect of any such environment is the ability to identify problems that may manifest at the application level down to any underlying issues in the application server and or virtual machine.

Disclosed herein is a system and method for providing virtual machine diagnostic information. In accordance with an embodiment a flight recorder for use with a virtual machine such as a Java virtual machine JVM allows a system administrator software developer or other user experiencing a system problem to go back in time and analyze what happened right before a particular problem occurred in their system and or obtain an extremely detailed level of profiling without impacting system performance. The flight recorder does this by being tightly integrated into the core of the JVM itself and by being very conscious of its performance overhead. This allows the flight recorder to provide a large amount of information on the inner workings of the JVM and on Java programs running in the JVM.

As described above an important aspect of any environment that includes an application server and a virtual machine is the ability to identify problems that may manifest at the application level down to any underlying issues in the virtual machine. To address this disclosed herein is a system and method for providing virtual machine diagnostic information. In accordance with an embodiment a flight recorder referred to herein in some instances as JRockit Flight Recorder Java Flight Recorder or Flight Recorder for use with a virtual machine such as a Java virtual machine JVM allows a system administrator software developer or other user experiencing a system problem to go back in time and analyze what happened right before a particular problem occurred in their system and or obtain an extremely detailed level of profiling without impacting system performance.

In accordance with an embodiment the flight recorder does this by being tightly integrated into the core of the virtual machine itself and by being very conscious of its performance overhead. This allows the flight recorder to provide a large amount of information on the inner workings of the virtual machine and on applications e.g. Java programs running in the virtual machine. A user can then utilize this information for profiling and for root cause analysis of problems with the system or with software applications running thereon. Furthermore the flight recorder can be enabled at all times without causing performance overhead even in a heavily loaded live production environment.

In accordance with an embodiment the flight recorder can be tightly integrated into e.g. an Oracle Fusion Middleware or Oracle WebLogic family of application server products to provide a full stack view of such a system. This allows for collection of diagnostically important information to be made available to the user both at a high level regarding components such as Java servlets and database executions and also at a lower level including fine grained information on thread synchronization and garbage collections. Additional information describing the use of flight recorder with a WebLogic application server environment is provided in U.S. Patent Application titled DIAGNOSTIC FRAMEWORK FOR USE WITH APPLICATION SERVERS AND VIRTUAL MACHINES application Ser. No. 13 111 612 filed May 19 2011.

During execution of the applications running on the computer the flight recorder engine receives event inputs from one or more event sources such as Java API events JVM events and virtualization OS events and combines or merges several of these input events e.g. by merging application events with JVM events into a coordinated ordered stream for subsequent use in outputting diagnostic information to the mission control client.

For example in accordance with an embodiment virtualization OS events can be provided as input to the flight recorder from the operating system or from other processes such as information from the virtualization layer used to run the virtual machine or information such as scheduling decisions by the operating system. In accordance with an embodiment the system can use a communication channel such as that described in U.S. Patent Application titled SYSTEM AND METHOD TO IMPROVE MEMORY USAGE IN VIRTUAL MACHINES RUNNING AS HYPERVISOR GUESTS application Ser. No. 12 205 467 filed Sep. 5 2008 and subsequently published as U.S. Publication No. 2009 007077 and which is incorporated herein by reference to communicate information to and from the virtual machine.

Additional examples of the types of input information which can be received by the flight recorder engine include network congestion and resends on the TCP IP level InfiniBand communication problems and efficiencies and networked file system problems.

In accordance with an embodiment the flight recorder engine produces an output that includes diagnostic information e.g. as a flight recording file which can be later analyzed by the user using the mission control client.

Flight recorder functionality is useful in a variety of ways including by way of example Profiling because the flight recorder continuously saves large amounts of data about the running system it can operate as a profiler. Profiling information can include thread samples which show where the program spends its time as well as lock profiles and garbage collection details Black Box Problem Analysis the flight recorder can operate as a black box similar to an airplane black box continuously saving information to a circular buffer. This information then can be accessed whenever an anomaly is detected which can be essential to quickly finding performance issues in a deployed system and Support Debugging the fight recorder can be used to provide information that a support engineer e.g. an Oracle support personnel can recognize as important clues for diagnosing issues with the system and or software.

In accordance with an embodiment the flight recorder includes an application program interface API that is configured according to a plurality of event definitions so that the API can recognize different event types. As recognized events are received at the flight recorder initially the flight recorder puts the received event data into the virtual machine s thread local buffers which eliminates the need to synchronize between threads for every event and greatly improves throughput. When a thread local buffer has been filled the data is transferred to global buffer entries within a global buffer including pointers between the global buffer entries where appropriate . When this occurs synchronization is necessary between the threads but because different thread local buffers fill up at different rates lock contention is rare. Eventually the global buffer will itself run out of space at which point its contents can be written to a disk or other form of storage. Since writing to disk is expensive it is preferable if this happens as seldom as possible. The information stored on disk can be stored as a flight recording file for later analysis using the mission control client.

As described above in accordance with an embodiment the flight recorder includes an API that is configured according to a plurality of event definitions so that the API recognizes different event types. This allows a user such as a system administrator or developer to register additional types of events with the API e.g. additional Java API event types so that those events can be recognized by the flight recorder and used in creating diagnostic information.

In accordance with an embodiment in addition to name and time stamps most events also have information on the thread in which the event occurred the stack trace at the time the event was captured and the duration of the event in some instances with nanosecond precision . Requestable events are those events that the recording engine can poll with a certain frequency the simplest example of this being the CPU load event a user can configure the recording engine to poll for this event once every second. By using the information available in an event the flight recorder can provide output to reconstruct in detail what happened during program execution.

Since as described above all of the events pass through the thread buffer and are time stamped application events such as HTTP GET can be associated with corresponding virtual machine JVM events such as WAIT READ. This allows the flight recorder to present an accurate view of related events as they occur within the stack which provides more useful information to user. One of the principles underlying the flight recorder is that every piece of data it captures is an event wherein an event is something that happens in a running application at a specific point in time.

In accordance with an embodiment events from the virtual machine and from a Java application can be merged so they are stored in the same queue and so they can be correlated with one another from the highest level down to the lowest lock taking. For example in a web application environment a web request may trigger an event. When the web request is answered with a response it triggers a second event. The system can determine not only how long the request took to process but also all of the things that happened within the system in processing the request. The system can also include explicit support for event relations e.g. that a web request has a database query associated with it which allows the information to be reported on the related actions. In accordance with an embodiment event producers can use fields to tag different types of event with information that can be used to associate events together e.g. a URI or a transaction ID and then find all other events that occurred within a particular timeframe or the same thread. In accordance with an embodiment the system can determine that events that occur within a same timeframe and same thread are probably related and utilize this knowledge in preparing the diagnostic output.

Examples of the different event types which can be recorded by flight recorder include miscellaneous informational events Java and JVM synchronization events Java and JVM thread events file and socket I O events class loading unloading GC events codegen opt events and GC MM Allocation events. In accordance with an embodiment the system also allows the user to declare new event types for example by modifying an jfr events declare.h file which in turn modifies the flight recorder API. Macros can be provided to assist in this process. Complex events such as arrays may require producing binary data by hand. The Java API allows for other systems such as other Oracle products to produce events which can then be identified and recorded by the flight recorder. show example event definitions including begin end event timed event and instant event in accordance with an embodiment.

In accordance with an embodiment the flight recorder is designed to keep its own overhead as low as possible. Testing has shown that when default settings are used performance impact can be less than one percent. Since the flight recorder is able to monitor the running system at an extremely high level of detail this produces an enormous amount of data that is costly to handle. Accordingly one approach to improved performance is limiting the amount of data to just that information relevant to the current profiling run. In accordance with an embodiment the flight recorder filters data as early as possible to maintain low overhead. This can be done two different ways First by limiting which type of events are actually captured the user can control this information in detail when they start the recording Second by only recording events with durations exceeding a certain threshold then in most cases very short events are not of any interest and can be discarded. This effectively limits the amount of data the flight recorder must handle. If the user wants to capture more data they can change the threshold.

In accordance with an embodiment the flight recording file is created in a proprietary binary format that is both extremely compact efficient for the applications to read from and write to and includes metadata that allows the flight recording file to be self describing and easily rendered.

In accordance with other embodiments a user can configure the flight recorder so that it does not write any data to disk. Instead in this mode the global buffer acts as a circular buffer with its oldest flight recorded data being dropped when the buffer becomes full. This very low overhead operating mode still collects all of the vital data necessary for root cause problem analysis since the most recent data is always available in the global buffer it can be written to disk upon demand whenever operations or surveillance systems detect a problem.

In accordance with an embodiment the flight recorder can be configured through the use of command line options a console or a combination thereof. Depending on the particular embodiment some aspects of the flight recorder may only be configurable at virtual machine startup while others may be re configurable at later times. Examples of configurable aspects include buffer size repository location and continuous recording settings. Examples of command line configuration options in accordance with an embodiment include those shown below 

It will be evident that the above examples are provided for purposes of illustration and that in accordance with other embodiments different examples of configurable aspects and or command line options can be provided.

In accordance with an embodiment parallel recordings can be made without extra effort. Every recording has its own event settings and the actual data is the set of all enabled events in the running recordings. A recording is stored as one or more chunks every chunk is independent and chunks can be merged to a single .jfr file. In accordance with various embodiments chunks can also be streamed over JMX and the flight recorder can perform background recordings to RAM or to disk.

In accordance with an embodiment the user can control the flight recorder and recording process including reviewing diagnostic information provided by the flight recorder using the mission control client which provides a tools suite that the user can use to monitor manage profile and eliminate memory leaks in their applications without introducing the performance overhead normally associated with these types of tools. show an example of a mission control client user interface for use with the flight recorder in accordance with an embodiment.

The present invention may be conveniently implemented using one or more conventional general purpose or specialized digital computer computing device machine or microprocessor including one or more processors memory and or non transitory computer readable storage media programmed according to the teachings of the present disclosure. Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure as will be apparent to those skilled in the software art.

In some embodiments the present invention includes a computer program product which is a non transitory storage medium or computer readable medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the present invention. The storage medium can include but is not limited to any type of disk including floppy disks optical discs DVD CD ROMs microdrive and magneto optical disks ROMs RAMs EPROMs EEPROMs DRAMs VRAMs flash memory devices magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data.

The foregoing description of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations will be apparent to the practitioner skilled in the art. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications that are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalence.

