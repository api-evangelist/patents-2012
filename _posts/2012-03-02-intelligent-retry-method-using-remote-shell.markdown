---

title: Intelligent retry method using remote shell
abstract: Method for issuing and monitoring a remote batch job, method for processing a batch job, and system for processing a remote batch job. The method for issuing and monitoring a remote batch job includes formatting a command to be sent to a remote server to include a sequence identification composed of an issuing server identification and a time stamp, forwarding the command from the issuing server to the remote server for processing, and determining success or failure of the processing of the command at the remote server. When the failure of the processing of the command at the remote server is determined, the method further includes instructing the remote server to retry the command processing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08782647&OS=08782647&RS=08782647
owner: International Business Machines Corporation
number: 08782647
owner_city: Armonk
owner_country: US
publication_date: 20120302
---
This application is a continuation of U.S. patent application Ser. No. 11 847 060 entitled Intelligent Retry Method Using Remote Shell and filed Aug. 29 2007 the disclosure of which is incorporated herein by reference in its entirety.

The invention is directed to a method using remote execute commands e.g. remote shell commands secure shell commands program function using distributed component object model to ensure completion of program script or commands on a remote server.

A server client type system is a computing architecture generally implemented over a computer network and is well known for performing a wide range of applications. A client server can be composed of a number of nodes e.g. two two tiered system or more which allow devices to share files and resources. In this regard client software e.g. on a user s computer can send data requests to one or more connected servers e.g. direct connection or via the Internet. In turn the servers e.g. web database and or mail server can accept these requests process them and return the requested information to the client. Moreover the servers can request completion of certain programs scripts or commands on another server.

A command line program such as remote shell RSH can be utilized to execute shell commands and to achieve remote control between two servers. As an RSH command which can be used in both a UNIX and Windows environment identifies the host remote server user and the desired command shell commands can be executed as another user and or on another computer across a computer network.

However in executing synchronous processing between server systems using remote shell commands network communication quality may often become a problem. For example in the case of executing processing A on server in response to a request from server using a remote shell command it may not be known e.g. whether processing was successful on server or whether the remote shell command failed. Moreover as there is no way to know whether the execution status of processing A on server retrial cannot be performed from server . Thus one processing failure can lead to the failure of the entire task and no context sensitive recovery will be performed.

One proposed solution to the above noted problem for ascertaining whether remote command or program have been processed is to execute interlock processing between a client and server via a network e.g. an integrated job scheduler or a system management software. However as these devices can be extremely expensive and difficult to use e.g. detailed operational design is required as are the necessary skills to perform the design in order to actually introduce them into operation a simpler solution is desired.

According to an aspect of the invention a method is provided for issuing and monitoring a remote batch job. The method includes formatting a command to be sent to a remote server to include a sequence identification composed of an issuing server identification and a time stamp forwarding the command from the issuing server to the remote server for processing and determining success or failure of the processing of the command at the remote server. When the failure of the processing of the command at the remote server is determined the method further includes instructing the remote server to retry the command processing.

In accordance with another aspect of the invention a method is provided for processing a batch job. The method includes receiving a command for processing from a remote server the command being formatted to include a sequence identification composed of an identification of the remote server and a time stamp and informing the remote server of success or failure in processing the command. When the remote server is informed of the failure of the processing of the command the instructions include receiving instructions from the remote server to retry the command processing.

According to still yet another aspect of the invention a system is provided for processing a remote batch job. The system includes a first server structured and arranged to receive and process commands a second server remote from the first server structured and arranged to format a command for processing in the first server to include a sequence identification composed of an identification of the second server and a time stamp and a communication path coupling the first server to the second server. The first server includes a device to send a confirmation of success or failure in the processing of the command to the second server and the second server includes a device for instructing the first server to retry processing of the command after receipt of the confirmation of failure in the processing of the command.

The invention is directed to a method based on a remote shell RSH a secure shell SSH or a program function using distributed component object model DCOM . These commands are remote execute commands for script based batch processing that normally come with an operating system OS and or other similar remote control methods enabling inexpensive yet highly reliable processing that responds to the deterioration of communication quality. While RSH can operate in both a UNIX and Windows environment SSH may be limited to operating in a UNIX environment while DCOM may be limited to operating in a Windows environment.

Thus the invention provides a highly reliable remote batch job execution method by minimizing changes in commands of batch processing including remote executions that have already been created using existing remote communication technologies such as RSH SSH and DCOM.

Remote shell commands are generally executed in the format of RSH XXXXX YYYYY in which XXXXX identifies a program script or command on the remote server and YYYYY identifies parameters which can be multiple specified parameters. According to the invention the parameters YYYYY for the scripts to be executed on the remote server side can be provided either with a sequence ID uniquely decided by the remote or execution server or with an execution time. Further as the sequence ID can be processed and or utilized by the remote server as a file name e.g. ID file on the remote server a status inquiry can be made regarding the processing of the executing specified script on the remote server and the status can be recorded. As a result of this inquiry a determination can be made whether processing invoked at a certain time has been successful has failed has not been executed or is being executed and processing may be performed accordingly.

The server invoking or issuing the command to the remote server can reissue the command so the remote server is instructed to continue retrying until processing of the command succeeds. This may be advantageous since there is no concern the same processing will be repeated when retrial is performed due to communication failure. Further to ensure the appropriate command has been sent a check digit of the character code of the script name or a parameter that follows RSH as the final parameter can be added to the command line. Thus even in the event an incorrect command is sent e.g. due to communication failure execution on the remote server can be prevented or deterred. This allows the RSH execution server to execute the script and to concentrate on retrying correctly issued commands.

The invention can take the form of an entirely hardware embodiment or an embodiment containing both hardware and software elements any of which is referred generally as file management program . The hardware and software elements include a computer infrastructure configured to implement the functionality of the present invention. The computer infrastructure may take the form of any conventional computer system platform or environment. The software elements may be firmware resident software microcode etc. Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

In embodiments a service provider such as a Solution Integrator could offer to perform the processes described herein. In this case the service provider can create maintain deploy support etc. a computer infrastructure that performs the process steps of the invention for one or more customers. In return the service provider can receive payment from the customer s under a subscription and or fee agreement.

A flow diagram of an exemplary overview of the invention is illustrated in and can be implemented in an architecture composed of a server for issuing remote execute commands e.g. shell commands and a server for executing remote processing of the commands. The dashed line represents a network communication path between server and server which can be formed by any suitable communication path including wireless communication enabling an exchange of data between servers and . When server issues a program script or command e.g. a remote shell RSH or secure shell SSH command in a UNIX environment at step e.g. to be executed by server . In the UNIX environment each OS command can be replaced with a user defined command or function referred to as an ALIAS function . In a normal case RSH is used on script code not on binary code because RSH is an OS command not an application programming interface API .

According to an embodiment of the invention a sequence ID and or a check digit can be added to the command line as an additional parameter. A number for the sequence ID may be selected to ensure its uniqueness among the multiple servers executing remote shell commands and multiple processing within the same server. Moreover the sequence ID can be processed or utilized by server as a file name e.g. ID file on server . By way of non limiting example the number for the sequence ID or ID file on server can be selected to be server ID i.e. server year month date hour minute second random number s . At step a determination can be made whether the command was successfully executed. If successful the process is completed at step whereas if not successful the process may return to step so an instruction to retry the command can be issued to remote server . Thus in accordance with the invention server monitors the success failure of the execution of the command processed in the remote server .

In server a determination may be made at step whether the ID file exists on server . In this regard server can process the sequence ID in the command line as a file name ID file to be found on server . When the ID file exists on server the ID file is checked at step and a status of the command is determined at step . If the command is already executed the process can proceed to step to determine the success or failure of the processing of the command. If the command is successfully executed the result may be returned to server at step . If the processing of the command failed the processing is re executed at step and the result is returned to server at step . If at step it is determined the command is being executed the process can wait for completion of the command at step . In this regard a polling of the contents of the ID file can be performed at intervals of a few seconds. The results can then be returned to server at step . When the ID file at step is determined not to exist the ID file can be created at step and the command may be processed at step . The result can then be returned to server at step . Thus server informs server of progress and successful completion of the remote execute command thereby avoiding unnecessary commands for retrying.

A more detailed flow of the internal processing of server is illustrated in . At step server can issue a request for execution by server of a program script or command in a UNIX environment e.g. a remote execute command such as a remote shell RSH or a secure shell SSH command. The command format for such a command can be e.g. RSH remote server IP address I IRSHR execution user ID executable file name ID file name parameter 1 2 3 . . . check digit . Further in a Windows environment an upper level batch file can be utilized and the command format can be e.g. RSH remote server IP address I execution user ID irshr.bat executable file name ID file name parameter 1 2 3 . . . check digit . The execution user ID can be for remote execution and placed on remote server and the ID file name on server can correspond to the sequence ID and the command can be formatted to include the ID file name and or the check digit. Processing of the requested command is to be performed in server and the success or failure of the command i.e. was the command successfully issued to server is determined at step . When network communication quality is poor the flow represented by the dashed line i.e. network communication may fail. If the command is determined to have failed e.g. due to poor transmission of data or any other reason the process can return to step to again request execution of the command and retrying may be unconditionally performed until the command is successfully forwarded to remote server . If the command was successful a determination can be made at step whether the remote processing of the command at server was successful. In this regard server is informed of the success or failure of the remote processing through receipt of a return code of the command from server which can be utilized for determining the success or failure of the execution of the command at server . Thus results of remote executions can be judged or evaluated by receiving remote server message output e.g. through an echo command by command execution server . If successful the process is completed at step . However if execution fails the process proceeds to step to determine whether to retry executing the command. Further the number of times to perform retrial or the execution timeout period can be specified in setting file . If the set number of tries has been used or an execution timeout period has been exhausted it is no longer possible to retry executing the command the process is completed at step . Should any tries or time remain the process can return to step to again request execution of the command.

A detailed flow of the internal processing in server is illustrated in . In server all parameters may be picked up when executing a specified file normally a program script command etc. and the check digits in the command format can be checked in response to receiving the command e.g. remote execute command from server . At step a determination is made whether the check digit is confirmed or valid because no processing should be performed if the check digit is invalid. If determined to be invalid the result is output by echo command to server at step . The echo command can be utilized since remote shell cannot return the status of remote execution. By informing server of the failure server can avoid making an incorrect decision even if commands cannot be exchanged properly due to the deterioration of communication quality. While it can be acceptable to misidentify a success as an error misidentifying an error as a success should be avoided.

If the check digit is deemed correct in server a determination is made at step whether a temporary file exists corresponding to ID file the sequence ID . If such a file exists it may be assumed processing has at least begun. In this event the ID file can be checked at step and the status of the ID file can be determined at step e.g. has the command already been executed or is the command being executed. If the ID file does not exist processing can be considered to have not yet been executed and an ID file is created at step and the processing may be executed at step . At step the process checks to ensure the success conditions have been met and thereafter the processing result is recorded in the ID file at step and the result is sent to server by an echo command at step .

If a determination is made from step that processing has already been executed a determination of whether the processing was successful may be made at step . If successful the result may be promptly sent to server by an echo command at step . If the processing failed the processing can be retried at step and thereafter the process check to ensure the success conditions have been met at step record the processing result in the ID file at step and send the result to server by an echo command at step . Moreover depending on the processing content e.g. cases such as multiple processing being bundled together such that a portion of the processing may be successful execution of the processing may continue at step and after confirming the conditions for considering the processing to be successful are finally met at step a judgment of success or failure can be made and the appropriate result may be is promptly sent to server by an echo command at step . If the determination from step is the command is being executed the process can wait for completion of the command at step . In this regard a polling of the contents of the ID file can be performed at intervals of a few seconds. The results can be sent to server by an echo command at step .

With the above exemplary flow retrial can be performed as long as time permits or a number of retries remain the setting file in server without concern as to the status of the communication with server or the execution of unnecessary processing in server . In this way the invention allows for an improvement in the reliability of remote processing.

Further because processing dates of temporary files i.e. ID files on server are made clear by their file names it may be advantageous to collectively delete files 2 or 3 days later by simply filtering the files according to their file names. In this way the invention can avoid forcibly deleting temporary files on server when performing remote execution which enables easier housekeeping than with the scheduler associated with the OS. Additionally it can be helpful for analysis at the time of the occurrence of problems. Further since only a minimal amount of information is contained in files accumulated files will not take up an inordinate amount of disk space.

In an alternative embodiment the invention can utilize a tentative program script or command name referred to as an Intelligent Remote Shell IRSH which can be operated in both a UNIX and a Windows environment. When implemented in a UNIX environment a command wrapper can be placed on both the command issuing side server and on the batch executing side server and no change may be required on parent scripts by the system administrator. When implemented in a Windows environment a command wrapper can be placed on both the command issuing side server and on the batch executing side server and the RSH command statements of parent scripts that call for RSH commands can be changed to IRSH commands so the system administrator may only need to change the command from rsh to irsht.bat. The command wrapper automatically performs retrial of remote execution processing realizing processing that can respond to RSH command failures resulting from the deterioration of communication quality. Further the command wrapper can include a file for setting the number of times to perform retrial the timeout period the presence or absence of the batch for result confirmation on the remote execution side and to check the digit calculation method etc. By editing this file the processing method can be changed.

According to this exemplary embodiment the script in server requires almost no code rewriting since the command wrapper performs the RSH processing in through automatic retrial by simply rewriting the existing RSH command to IRSH see e.g. .

Further the exemplary detailed flow of server utilizing IRSH commands is illustrated in in which an IRSH receiving side controller is illustrated within the dashed box. The exemplary flow illustrated in corresponds to the flow illustrated in except the flow utilizes the above noted IRSH command rather than the RSH command of . With regard to processing in server the remote execution batch processing and the result confirmation batch are put into server . Thus the name of the program is only used in the IRSH transmitting side controller see such that remote control programs upper batch program do not use the program name e.g. irshr.bat for Windows and irshr.sh for UNIX . Therefore the same script as is conventionally used can be utilized.

While the invention has been described in terms of embodiments those skilled in the art will recognize that the invention can be practiced with modifications and in the spirit and scope of the appended claims.

