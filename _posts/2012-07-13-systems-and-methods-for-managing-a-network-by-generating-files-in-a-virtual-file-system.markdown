---

title: Systems and methods for managing a network by generating files in a virtual file system
abstract: Systems and methods for generating files in a virtual file system in the memory of a network system are discussed. The network system receives a filename including at least one file metadata. The file metadata includes a file size of the file, a random seed for generating content of the file, and modification information of the file. File content for the file may be generated based on the filename. The file content may then be provided to the network system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08560579&OS=08560579&RS=08560579
owner: Google Inc.
number: 08560579
owner_city: Mountain View
owner_country: US
publication_date: 20120713
---
This application claims the benefit under 35 U.S.C. 119 e of U.S. Provisional Application No. 61 578 661 filed Dec. 21 2011 which is hereby incorporated by reference herein in its entirety.

This disclosure relates to a method and system for managing a network by generating files in a virtual file system. More particularly this disclosure relates to generating and verifying content of a file in a virtual file system using characteristics of the file.

As the global demand for accessing online content increases multiple network systems are needed to provide the content. Network systems send and replicate data among one another in order to deliver the same data globally e.g. to other networks. The amount of data transferred between network systems is usually large which can take a considerable amount of time to transfer and can be costly in terms of bandwidth usage. In some cases the total network bandwidth of the network systems can limit the amount of data sent at a time and affect other services and applications running in the network systems.

Network bandwidth is an important commodity that can be optimized for example for usage and allocation. In order to optimize network bandwidth processes may be used to determine network bandwidth limit and capacity and test the network in situations where future demands exceed or differ from current demands. Such processes should be performed with as little impact as possible on the network systems and the applications and services running on the network systems. Techniques described herein may be used to test the network while taking into consideration resources and applications running on the network systems.

Accordingly some implementations relate to a non transitory computer readable medium that stores computer executable instructions which when executed by a processor cause the processor to carry out a method for generating content of a file in an in memory file system. A filename is received comprising at least one file metadata. The file metadata includes a file size of the file a random seed for generating content of the file and modification information of the file. File content for a file is generated based on the filename and the file content is provided to the network system.

Some implementations relate to a non transitory computer readable medium that stores computer executable instructions which when executed by a processor cause the processor to carry out a method for verifying content of a file in an in memory file system. The network system receives a file and determines a filename of the file. File metadata is determined from the filename of the file. The file metadata includes a file size of the file a random seed for generating content of the file and modification information of the file. File content of the file is then verified based on the file metadata and the filename of the file.

Some implementations relate to systems for generating content of a file in an in memory file system. The system includes a processor and memory which stores computer executable instructions. When the instructions are executed by the processor the processor directs the system to receive a filename comprising at least one file metadata. The file metadata includes a file size of the file a random seed for generating content of the file and modification information of the file. The system is also directed to generate file content for a file based on the filename and provide file content to the system.

Some implementations relate to systems for verifying content of a file in an in memory file system. The system includes a processor and memory which stores computer executable instructions. When the instructions are executed by the processor the processor directs the system to receive a file and determine a filename of the file. The system also determines file metadata from the filename of the file. The file metadata includes a file size of the file a random seed for generating content of the file and modification information of the file. File content of the file is verified based on the file metadata and the filename of the file.

Some implementations relate to systems for generating content of a file in an in memory file system. The system includes a first computer system and a second computer system. The first computer system includes a processor and memory which contains instructions that when executed by the processor cause the processor to direct the first computer system to receive a filename. The filename includes at least one file metadata. The file metadata includes a file size of the file a random seed for generating content of the file and modification information of the file. The system generates file content based on the filename of the file and provides the file content back to the system. The second computer system includes a processor and memory which contains instructions that when executed by the processor cause the processor to direct the second computer system to receive file content of a file. The system determines a filename of the file and determines file metadata from the filename of the file. The file metadata includes a file size of the file a random seed for generating content of the file and modification information of the file. The system then verifies the file content of the file based on the file metadata and the filename of the file.

To provide an overall understanding of the disclosure certain illustrative implementations will now be described including systems and methods for generating files in a virtual file system. However it will be understood by one of ordinary skill in the art that the systems and methods described herein may be adapted and modified as is appropriate for the application being addressed and that the systems and methods described herein may be employed in other suitable applications including networked computing systems data center systems and cloud computing systems and that such other additions and modifications will not depart from the scope thereof.

In order to determine network capacity and bandwidth of network data transfers between multiple network systems are performed. The data transfers may be used to test single or multiple routes through network between the different network systems. For example data from network system is sent over network to network system . The data sent between the network systems may include data files stored within network system . Systems and applications within network system provide the data files which are received by network system .

Network system may include processor memory and storage system . Data bus and communication path may allow communication between each of these components together in any combination and is not limited to the components shown in . For example multiple processors memories and storage systems may be used. Each storage system may include a different or similar file system . A common API or a set of APIs may be provided on network system to access data files on each of the storage systems for any file system . Furthermore each storage system may include multiple file systems on the same storage system . This allows different types of data to be managed differently by a particular file system .

Processor in network system may act as the control circuitry which reads instructions from either memory or storage system to perform the operations of network system . Memory includes non transitory memory which may be implemented as volatile or non volatile memory such as FLASH memory ROM RAM or other memory storing technologies. Storage system includes non transitory data storing devices such as electromagnetic storage devices mechanical storage devices and volatile or non volatile storage devices. Storage system may also be connected to network system through network .

When a transfer of data is performed between multiple network systems such as between network systems and the data is provided by storage system . The performance of the data transfer is dependent on performance characteristics of storage system and file system that provides the data being transferred. Examples of performance characteristics are characteristics of the storage system such as access times seek times transfer times of each read and write access from storage system and network related overheads of storage system if storage system communicates through a network and software overheads of storage system or file system such as execution time of firmware in storage system or execution time of the file system API when accessing files within storage system . For example the data transfer rate of transferring a data file may be based on read write transfer rates read write seek times and read write access times of accessing data files within storage system .

The performance characteristics of storage system may limit the maximum transfer rate of a data transfer preventing network from being tested for its maximum network capacity. Furthermore it may be difficult to determine the network capacity of network because storage system may not contain enough stored data to meet the maximum network capacity of network . Therefore in some implementations a virtual file system may be implemented by computing system to generate and verify data files to determine the network capacity of network . Memory may be used to store the generated data files instead of storage system . Memory may have better performance characteristics than storage system allowing higher maximum transfer rates to be achieved which can meet the maximum network capacity of network . Moreover by using memory data transfers which test the network capacity and bandwidth of network may be offloaded from storage system onto memory freeing up valuable resources of storage system for other applications in the network systems. Additionally by using a virtual file system the throughput of network system factoring out delays of storage system and file system may be determined. This allows us to determine the true performance of an application or service without delays introduced by storage system or file system .

Similar to a file system on a storage system the virtual file system provides information about test files managed by the virtual file system . The difference is that the test files on the virtual file system do not necessarily correspond to actual files stored in memory . The test files are created on demand when an application requests a test file through the API for the virtual file system . Test files unlike regular files may include only the filename and may be missing certain file characteristics of the test file such as the content of the test file .

The content of test file may be generated on demand thereby allowing the content to not be stored in memory which would utilize valuable memory space. In some implementations only the requested content of test file needs to be generated and not the entire test file which reduces memory consumption. In some implementations the entire test file may be generated when a request for test file is received. Generating the content of a test file on demand also allows the virtual file system to generate an unlimited amount of data to be transferred along with a virtually unlimited number of test files since the only data which needs to be stored are the filenames of test files . Though test files may be generated by the virtual file system file characteristics of test file may be generated allowing test file to be used like a regular data file .

Like filenames of regular files a filename is a string of characters which identifies a test file and is unique within a virtual file system . An example of a filename of a test file is shown in which includes multiple fields also known as metadata within the filename that describes certain properties of test file . The different fields may include a virtual file system identifier a source identifier a transfer ID a timestamp a file size and a random number generator seed . Each field is included as part of the absolute path of the test file or as part of the name of the test file . Each of the fields provides details to the virtual file system on how to handle test file . Applications which request test files from the virtual file system use these fields to process test file . The other file characteristics of test file may be generated based on the multiple fields of filename .

Virtual file system identifier indicates whether a file received by a network system such as network systems or was generated by a virtual file system . By using a special keyword such as virtual applications may filter out and identify that the received file is a test file and process it accordingly. For example a network system may track test files more easily since all of the test files would have virtual in its absolute path. Real files and test files may be differentiated based on identifying the virtual file system identifier . Furthermore when system resources or data transfers of other applications require more utilization of network or network systems or the virtual file system identifier may identify test files and either cancel or pause the applications which are using these test files .

Source identifier indicates the source network system such as network system from which test file was generated. By identifying the source network system which test file came from debugging of errors may be performed by traced back from the destination network system to the source network system. Source identifier also allows applications to identify network systems which have a virtual file system . If more test files are requested an application knows that an identified source network system such as source network system may provide them.

Transfer ID allows an application to track sessions from which test files were created. For example if a request to generate a thousand test files was received by virtual file system virtual file system may set transfer ID to a specific identification value such as transfer2321 . Each of the test files generated may have the same transfer ID within its absolute path allowing applications to identify and track the test files related to the specific transfer ID .

Timestamp corresponds to the file time and date . Since test file may have file characteristics stored in virtual file system file characteristics may need to be generated. One of these file characteristics may be file dates . Timestamp may be used as file date of test file . If an application requests file date timestamp may be used to generate file date .

File size identifies the size of test file . In a file from a non virtual file system the file size would be a file characteristic which corresponds to the size of the content of the file . However since the test file may not have content stored in memory the file size may be used to generate the actual file size of test file .

Random number generator seed provides a seed value for a random number generator to generate content of test file . The random number generator may be implemented as a pseudorandom number generator such as a deterministic random bit generator which receives the random number generator seed value and provides deterministic pseudorandom values. This allows virtual file system to generate and reproduce content of test file at different instances when needed.

A pre determined data size of test files is determined to be generated and is produced by virtual file system . Filename which includes the random number generator seed and file size may be used to generate data content for each test file and using a pseudorandom number generator. These test files and are then transferred over network and received by network system and stored into memory . Receiving network system receives test files and processes them using its own virtual file system . Test files and may be identified using filename of test file and . For example filename may include virtual file system identifier indicating to virtual file system that a received data file is a test file . Network system may then utilize filename of test file to verify contents of the received test file . Since filename includes random number generator seed and file size a pseudorandom number generator may be used to generate verification data content of received test file and verify the contents of the received test files . If contents of the received test file and the generated verification data content do not match a failure notification may be generated indicating a failure has occurred during the transfer.

In some implementations a master system may be implemented to configure both the sending network system and the receiving network system for the transfer. The master system may then be configured to determine the network capacity and bandwidth of the network . The failure notification of the network systems and may be received by the master system to determine the appropriate actions to take such as determining where the error in the transfer occurred or determining the network capacity of the network.

In some implementations the pre determined data size of test files may be set to infinite or a large value which may not be met. The amount of data to be sent may be based on determining whether a pre determined network capacity or bandwidth threshold has been met. Data for test files would be generated and transferred until an indication that one of the thresholds has been met. For example if the network bandwidth value settles at a specific value for a pre determined amount of time then the network bandwidth and capacity limit may have been reached and the value of the network bandwidth or capacity may be determined by the settled value.

A request for a test file may include a read offset and read request length. The read offset provides a method for requesting certain parts of test file . For example the read offset allows a request for file content starting at the middle of test file . The read offset may be used with random number generator seed to determine where in the sequence of content generated by a pseudorandom number generator to start generating file content . The read request length provides a method for requesting a certain amount of data from test file . For example if test file has a file size of 50 megabytes the read length may be set to 20 megabytes allowing a request for only 20 megabytes of test file . The read request length may also be used by the pseudorandom number generator to generate only a certain amount of file content . Either one or both of the read offset and read request length may be omitted in the request. An omitted read offset or read request length may be set as a default value. For example if the read offset and read request length is omitted the request may receive the entire file content of test file . If the read offset is omitted the read offset may be set to the beginning of test file . If the read request length is omitted the read request may be set to the amount of data between the read offset and the end of test file .

In some implementations virtual file system may determine if a valid read offset or read request length was requested. The read offset and the read request length may be compared with file size of test file . If the read offset added to the read request length is greater than file size of test file then the request is invalid and a failure notification may be generated indicating to the requestor that an error has occurred.

It will be apparent to one of ordinary skill in the art that aspects of the present disclosure as described above may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement aspects consistent with the principles of the disclosure is not limiting of the invention. Thus the operation and behavior of the aspects of the disclosure were described without reference to the specific software code it being understood that one of ordinary skill in the art would be able to design software and control hardware to implement the aspects based on the description herein.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. Further certain portions of the disclosure may be implemented as logic or a component that performs one or more functions. This logic may include hardware such as an application specific integrated circuit or a field programmable gate array software or a combination of hardware and software.

While operations are depicted as being performed either by a file system or a separate application which uses an API to access the file system the operations may be performed by either the file system or application and may be performed in conjunction with one other.

