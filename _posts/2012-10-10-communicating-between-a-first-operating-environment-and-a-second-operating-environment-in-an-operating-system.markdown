---

title: Communicating between a first operating environment and a second operating environment in an operating system
abstract: An apparatus for communicating between a first operating environment and a second operating environment in an operating system includes a storage device storing machine-readable code and a processor executing the machine-readable code. The machine-readable code includes a receiving module receiving a request in a first operating environment from an application executing in a second operating environment. The first and second operating environments are provided by a common operating system. The request is communicated through a first communication path. The machine-readable code includes a response module sending a response from the first operating environment to the application in the second operating environment through a second communication path distinct from the first communication path.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08959533&OS=08959533&RS=08959533
owner: Lenovo (Singapore) PTE. Ltd.
number: 08959533
owner_city: Tech Park
owner_country: SG
publication_date: 20121010
---
The subject matter disclosed herein relates to operating systems and more particularly relates to communicating between operating environments in an operating system.

The proliferation of portable computing devices has led to an increase in applications and operating systems that offer functionality and user interfaces such as touch interfaces designed for these devices. For example certain versions of the Windows operating system from Microsoft caters to both desktop computers and portable computing devices.

These versions of Windows may include two operating environments an operating environment referred to as Modern UI environment with a touch friendly simplified user interface and a traditional desktop environment. Each environment may have its own applications for execution in the respective environment.

Based on the foregoing discussion the inventors have recognized a need for an apparatus system and method for communicating between a first operating environment and a second operating environment in an operating system. Beneficially such an apparatus system and method would an application executing in the second operating environment to communicate with the first operating environment.

The embodiments of the present subject matter have been developed in response to the present state of the art and in particular in response to the problems and needs in the art that have not yet been fully solved by currently available operating systems. Accordingly the embodiments have been developed to provide a method apparatus and system for inserting user targeted web resources into browser navigation memory.

An apparatus is provided that in one embodiment includes a storage device storing machine readable code and a processor executing the machine readable code. In one embodiment the machine readable code includes a receiving module receiving a request in a first operating environment from an application executing in a second operating environment. The first and second operating environments may be provided by a common operating system. The request may be communicated through a first communication path. In one embodiment the machine readable code includes a response module sending a response from the first operating environment to the application in the second operating environment through a second communication path distinct from the first communication path.

A method is also presented that in the disclosed embodiments substantially includes the steps to carry out the functions presented above with respect to the operation of the described apparatus. In one embodiment the method includes receiving a request in a first operating environment from an application executing in a second operating environment. The first and second operating environments may be provided by a common operating system. The request may be communicated through a first communication path. In one embodiment the method includes sending a response from the first operating environment to the application in the second operating environment through a second communication path distinct from the first communication path.

A computer program product including a storage device storing machine readable code executed by a processor to perform operations is also presented. In one embodiment the operations include determining whether a web resource is a user targeted web resource. The web resource may be loaded in a web browser. In one embodiment the operations include inserting a record of the web resource into navigation memory of the web browser in response to determining that the web resource is a user targeted web resource.

References throughout this specification to features advantages or similar language do not imply that all of the features and advantages may be realized in any single embodiment. Rather language referring to the features and advantages is understood to mean that a specific feature advantage or characteristic is included in at least one embodiment. Thus discussion of the features and advantages and similar language throughout this specification may but do not necessarily refer to the same embodiment.

Furthermore the described features advantages and characteristics of the embodiments may be combined in any suitable manner. One skilled in the relevant art will recognize that the embodiments may be practiced without one or more of the specific features or advantages of a particular embodiment. In other instances additional features and advantages may be recognized in certain embodiments that may not be present in all embodiments.

These features and advantages of the embodiments will become more fully apparent from the following description and appended claims or may be learned by the practice of the embodiments as set forth hereinafter.

As will be appreciated by one skilled in the art aspects of the embodiments may be embodied as a system method or program product. Accordingly embodiments may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore embodiments may take the form of a program product embodied in one or more storage devices storing machine readable code. The storage devices may be tangible non transitory and or non transmission.

Many of the functional units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Modules may also be implemented in machine readable code and or software for execution by various types of processors. An identified module of machine readable code may for instance comprise one or more physical or logical blocks of executable code which may for instance be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which when joined logically together comprise the module and achieve the stated purpose for the module.

Indeed a module of machine readable code may be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices and may exist at least partially merely as electronic signals on a system or network. Where a module or portions of a module are implemented in software the software portions are stored on one or more storage devices.

Any combination of one or more machine readable medium may be utilized. The machine readable storage medium may be a machine readable signal medium or a storage device. The machine readable medium may be a storage device storing the machine readable code. The storage device may be for example but not limited to an electronic magnetic optical electromagnetic infrared holographic micromechanical or semiconductor system apparatus or device or any suitable combination of the foregoing.

More specific examples a non exhaustive list of the storage device would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this file a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A machine readable signal medium may include a propagated data signal with machine readable code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A machine readable signal medium may be any storage device that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device. Machine readable code embodied on a storage device may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable Radio Frequency RF etc. or any suitable combination of the foregoing.

Machine readable code for carrying out operations for embodiments may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The machine readable code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Reference throughout this specification to one embodiment an embodiment or similar language means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. Thus appearances of the phrases in one embodiment in an embodiment and similar language throughout this specification may but do not necessarily all refer to the same embodiment but mean one or more but not all embodiments unless expressly specified otherwise. The terms including comprising having and variations thereof mean including but not limited to unless expressly specified otherwise. An enumerated listing of items does not imply that any or all of the items are mutually exclusive unless expressly specified otherwise. The terms a an and the also refer to one or more unless expressly specified otherwise.

Furthermore the described features structures or characteristics of the embodiments may be combined in any suitable manner. In the following description numerous specific details are provided such as examples of programming software modules user selections network transactions database queries database structures hardware modules hardware circuits hardware chips etc. to provide a thorough understanding of embodiments. One skilled in the relevant art will recognize however that embodiments may be practiced without one or more of the specific details or with other methods components materials and so forth. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of an embodiment.

Aspects of the embodiments are described below with reference to schematic flowchart diagrams and or schematic block diagrams of methods apparatuses systems and program products according to embodiments. It will be understood that each block of the schematic flowchart diagrams and or schematic block diagrams and combinations of blocks in the schematic flowchart diagrams and or schematic block diagrams can be implemented by machine readable code. These machine readable code may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the schematic flowchart diagrams and or schematic block diagrams block or blocks.

The machine readable code may also be stored in a storage device that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the storage device produce an article of manufacture including instructions which implement the function act specified in the schematic flowchart diagrams and or schematic block diagrams block or blocks.

The machine readable code may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the program code which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The schematic flowchart diagrams and or schematic block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of apparatuses systems methods and program products according to various embodiments. In this regard each block in the schematic flowchart diagrams and or schematic block diagrams may represent a module segment or portion of code which comprises one or more executable instructions of the program code for implementing the specified logical function s .

It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the Figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. Other steps and methods may be conceived that are equivalent in function logic or effect to one or more blocks or portions thereof of the illustrated Figures.

Although various arrow types and line types may be employed in the flowchart and or block diagrams they are understood not to limit the scope of the corresponding embodiments. Indeed some arrows or other connectors may be used to indicate only the logical flow of the depicted embodiment. For instance an arrow may indicate a waiting or monitoring period of unspecified duration between enumerated steps of the depicted embodiment. It will also be noted that each block of the block diagrams and or flowchart diagrams and combinations of blocks in the block diagrams and or flowchart diagrams can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and machine readable code.

The processor memory the IO module the BIOS module the USB module the storage module the network module the PCIe module referred to herein as components may be fabricated of semiconductor gates on one or more semiconductor substrates. Each semiconductor substrate may be packaged in one or more semiconductor devices mounted on circuit cards. Connections between the components may be through semiconductor metal layers substrate to substrate wiring circuit card traces and or wires connecting the semiconductor devices.

The memory stores computer readable programs. The processor executes the computer readable programs as is well known to those skilled in the art. The computer readable programs may be tangibly stored in the storage module . The storage module may comprise at least one Solid State Device SSD . In addition the storage module may include a hard disk drive an optical storage device a holographic storage device a micromechanical storage device or the like.

The processor may include integrated cache to reduce the average time to access memory . The integrated cache may store copies of instructions and data from the most frequently used memory locations. The processor may communicate with the memory .

In addition the processor may communicate with the IO module . The IO module may support and communicate with the BIOS module the network module the PCIe module and the storage module .

The PCIe module may communicate with the IO module for transferring data or power to peripheral devices. The PCIe module may include a PCIe bus for attaching the peripheral devices. The PCIe bus can logically connect several peripheral devices over the same set of connections. The peripherals may be selected from a printer a scanner or the like. The PCIe module may also comprise an expansion card as is well known to those skilled in the art. In one embodiment the PCIe module is in communication with a display. Specifically in one embodiment the PCIe module comprises a PCIe expansion card in communication with the display. In one embodiment the PCIe expansion card comprises a PCIe Mini Card. The display may be a cathode ray tube CRT a liquid crystal display LCD monitor or the like.

The BIOS module may communicate instructions through the IO module to boot the information handling device so that computer readable software instructions stored on the storage module can load execute and assume control of the information handling device . The BIOS module may comprise a coded program embedded on a chipset that recognizes and controls various devices that make up the information handling device . The BIOS module may refer to various approaches to providing a firmware interface for booting an information handling device including traditional BIOS unified extensible firmware interface UEFI Open Firmware and others. The BIOS module in one embodiment includes a storage device that stores the relevant instructions for booting. The storage device may be a solid state storage device such as Flash memory. The BIOS module may be a solid state storage device with relevant code that is attached to a motherboard of the information handling device .

The network module may communicate with the IO module to allow the information handling device to communicate with other devices over a network. The devices may include routers bridges computers printers and the like. The USB module may communicate with one or more USB compatible devices over a USB bus.

The operating system manages software and hardware resources of an information handling device as is known in the art. The operating system may perform virtual memory management and memory allocation may support networking may provide a file system and the like. In one embodiment the operating system is an operating system with a desktop environment as a first operating environment and touch input enabled environment as a second operating environment . In one embodiment the operating system is a Windows operating system as described below. The Windows operating system may be a Windows 8 or later edition operating system that includes a Modern UI operating environment and a desktop environment as described below.

The information handling device may include memory a storage device storing computer readable programs and a processor that executes the computer readable programs as is known to those skilled in the art. The information handling device may include at least a portion of the components of the information handling device depicted in . For example executable code of the operating system may be stored on the storage module loaded in memory and executed by the processor. The information handling device may be a portable or handheld device such as a personal desktop assistant PDA a tablet computer a slate computer an e Book reader a mobile phone a smartphone and the like. In one embodiment the information handling device may be a desktop computer a portable computer a laptop computer a server a mainframe computer and the like.

The operating system includes a first operating environment . The first operating environment in one embodiment is a desktop environment. The desktop environment may be an operating environment having a desktop style graphical user interface. The desktop style graphical user interface may include icons for files folders programs and the like. In one embodiment the desktop environment is a desktop environment provided by a Windows 8 or later edition operating system as described above.

The operating system includes a second operating environment . The second operating environment may be an operating environment having characteristics suited for mobile applications. For example the second operating environment may be a touch input enabled environment and may have a graphical user interface with simplified tiles representing applications. In one embodiment the second operating environment is a Modern UI environment provided by a Windows 8 or later edition operating system as described above. The Modern UI environment may also be known as a Metro environment a Modern UI Style environment and the like. The graphical user interface may incorporate the Modern UI also known as Metro design language.

In one embodiment the operating system switches between a first operating environment mode and a second operating environment mode. For example in the first operating environment mode the operating system may primarily execute the first operating environment and in the second operating environment mode the operating system may primarily execute the second operating environment . In one embodiment when the operating system is primarily executing the second operating environment certain processes threads functionality and the like of the first operating environment may continue running in the background of the operating system . In one embodiment when the operating system is primarily executing the second operating environment the operating system one or more of displays the graphical user interface of the second operating environment executes and or is able to execute applications of the second operating environment and devotes greater resources to the second operating environment in comparison with the first operating environment . The operating system may also allow a user to switch between the first and second operating environment modes.

As depicted one or more applications execute in the second operating environment . In one embodiment applications executing in one or more of the first operating environment and the second operating environment are operating environment specific meaning that without customization applications of the second operating environment do not execute in the first operating environment and applications of the first operating environment do not execute in the second operating environment . In one embodiment the application is a Windows Modern UI application which may also be referred to as a Modern UI Style application a Metro Application and the like.

In some embodiments the first operating environment has greater access to certain types of information of the operating system and hardware of the information handling device. For example the first operating environment as described above may be a desktop environment with access to hardware information system information driver information the registry and the like. In one embodiment communication is limited from applications executing in the second operating environment with the first operating environment . For example in certain embodiments device drivers may allow for some communication from the first operating environment with a limited number of applications running in the second operating environment . However device drivers are typically used for hardware communication not software inter process communication. Furthermore the operating system in some embodiments may provide for communication between the first and second operating environments with network communication. However a web service may be needed to enable network communication.

Therefore the operating system includes a communication apparatus to one or more of facilitate enable and manage communication between the first and second operating environments . The communication apparatus may be embodied as a desktop service a process or the like. In one embodiment the communication apparatus continues to run while the operating system is in second operating environment mode. Although in the depicted embodiment a single application is depicted the second operating environment may include multiple applications communicating with the communication apparatus .

Applications running in the second operating environment may communicate using a first communication path with the communication apparatus running in the first operating environment . Moreover the communication apparatus communicates with applications in the second operating environment using a second communication path different from the first communication path . For example an application may request certain information from the first operating environment using the first communication path and the communication apparatus may communicate the requested information to the application through the second communication path . The communication apparatus may enable or disable certain software features on behalf of the application launch an application launch a web site perform a network request and the like in response to receiving a message from the application . The communication apparatus may provide communication for any suitable number of applications executing in the second operating environment .

In one embodiment the communication apparatus continues to run e.g. as a desktop service while the operating system is in the second operating environment mode. The communication apparatus may enable communication for the application while the operating system is in the second operating environment mode and the application executes in the second operating environment .

The first and second communication paths may be pre existing communication paths that are part of the operating system and accessible by both of the first and second operating environments . In one embodiment the first communication path is an event tracing tool implemented by the operating system . The event tracing tool may be used by the operating system to log and trace events from applications drivers and the like. In a further embodiment the event tracing tool is Event Tracing for Windows ETW . In one embodiment the second communication path is a N Uniform Resource Identifier URI scheme. A URI is a character string identifying a resource. With a URI scheme an application may register with the operating system to become the handler for a particular URI scheme name. According to the URI scheme the application may be launched and or notified in response to an invocation of the particular URI scheme name. For example for the URI scheme name mailto an application may open a new e mail message so that the user can compose an e mail. One a URI scheme name is registered and associated with the application the communication apparatus may communicate using the URI scheme by invoking the URI scheme name. This would allow the communication apparatus to pass the application a query string with certain information. The communication apparatus may also use the URI scheme to notify the application to check a predetermined file for more information.

In the system of the depicted embodiment the first communication path is ETW and the Modern UI application communicates with the communication apparatus using ETW . As described below the communication apparatus may create an ETW session through an operating system Application Programming Interface API . The communication apparatus may create a listener on the ETW session to be notified of events written to the ETW. The operating system may notify the communication apparatus through the listener whenever an event is written to the ETW session from the Modern UI application .

As described below in the depicted embodiment the communication apparatus communicates with the Modern UI application using a URI scheme . The Modern UI application may register with the operating system to be the default handler for a particular URI scheme name. The communication apparatus may invoke the URI scheme with the registered URI scheme name for the Modern UI application to notify the Modern UI application that updated information is available.

The receiving module in one embodiment receives a request in a first operating environment from an application executing in a second operating environment . The first and second operating environments may be provided by a common operating system as described above. The operating system may be in a second operating environment mode when the receiving module receives the request. For example the operating system may be displaying a graphical user interface of the second operating environment may be executing applications of the second operating environment and the like while the operating system is in the second operating environment mode.

In one embodiment the request includes one or more information identifiers. The information identifiers may specify information to send to the application . In one embodiment the information identifiers may specify a particular type of information. The request may subscribe the application to receive information of the particular type in the future without the application having to initiate any future contact with the receiving module . The particular types of information requested by the application may include but is not limited to driver information hardware information registry information serial numbers and the like. In one embodiment the request includes a unique identifier for the application such as a Global Unique Identifier GUID .

The request may also include a Uniform Resource Identifier URI scheme identifier. The URI scheme identifier may identify a URI scheme associated with the application. For example the URI scheme identifier may identify a particular URI scheme name to which the application is registered.

The request may be communicated through a first communication path . In one embodiment the first communication path is a one way communication path from the second operating environment to the first operating environment . As described above the first communication path may be an event tracing tool implemented by the operating system such as Event Tracing for Windows ETW . The receiving module may start an ETW session through an operating system Application Programming Interface API and allow applications having certain predetermined unique identifiers e.g. the GUID of the application to have access to ETW to log events. The receiving module may create a listener on this ETW session. The application may send a request using ETW by writing an event to ETW. The operating system may notify the receiving module through the listener when the event is written to ETW and the receiving module may receive the request by obtaining the event from the listener on the ETW session. In one embodiment the receiving module is notified of each event written to ETW and the receiving module may parse the events and search for events from applications executing in the second operating environment . In other embodiments the receiving module is notified of events written by applications .

The response module in one embodiment sends a response from the first operating environment to the application in the second operating environment through a second communication path distinct from the first communication path . In one embodiment the second communication path is a Uniform Resource Identifier URI scheme as described above. A message sent according to the URI scheme may include the URI scheme name and a query having one or more parameters. If the application has registered with the operating system for a particular URI scheme name any message sent to the URI scheme name with a URI scheme will be directed by the operating system to the associated application .

The response module may determine the information requested from the request obtain the information and send the response accordingly. The response module may send a single response to a request from the application or as described below may send recurring messages with requested information in response to the application being registered to receive certain information.

The application in one embodiment registers with the operating system to be the default handler for a particular URI scheme name. The application may pass the URI scheme name in the initial request to the receiving module as described above. Consequently the response module may send the response to the application using the URI scheme by invoking the URI scheme using the URI scheme name. The response module may pass a certain amount of parameters to the application in the query of the URI scheme message.

To communicate more information than that allowed by the parameters in the URI scheme the response module may create and maintain information for the application in a file which the application may access. The application may check the file in response to the response module using the URI scheme with the URL of the application . The file may be located in a predetermined location known by the application according to a policy. For example the response module may create a folder in the file system that is named according to the unique identifier of the application and the policy may specify that the application will access the file from a folder named according to the unique identifier. Thus the response may indicate the requested information whether in one or more of the URI scheme message parameters and in the associated file.

The response module may communicate through one or more of the parameters in the URI scheme query and the file the information requested by the application such as hardware information driver information passwords serial numbers authentication information registry information and the like. In one embodiment the response module communicates information related to Windows Active Directory which manages security and authentication. For example in one embodiment the application registers to receive certain information such as registry changes file changes operating system notification and the like. The response module may monitor the registry the files the operating system and the like for changes. When a change occurs the response module may communicate to the application with information on the changes.

After sending a request the application may be configured to run synchronously and wait for the response from the response module to be received or the application may run asynchronously without waiting for the response. When the application receives the response the application may then process the message content of the response and act accordingly such as referencing the file obtaining information from the parameters in the URI scheme message and the like. The application may ignore the response or use it as a means of synchronization to know when the initial request was completed.

The registration module in one embodiment registers an application in response to the receiving module receiving a request from the application . The registration module may register the application by associating the URI scheme with the application and by identifying information to communicate to the application of the particular type. For example the registration module may maintain a record of one or more applications with information such as the application s unique identifier the URI scheme name associated with the application particular types of information requested by the application and the like. Responses communicated by the response module may indicate information requested by the application.

By requesting certain types of information an application may subscribe to this information and the response module may communicate the requested information as it becomes available. The registration module may record registration information of the applications in a file the registry and the like. The registration may persist across device restarts.

The un registration module in one embodiment un registers the application in response to the receiving module receiving an un registration request from the application . The response module may discontinue sending information of the particular type to the application in response to the un registration module un registering the application . Un registering a particular application may include deleting information for that application from the record stored by the registration module maintaining the information but indicating that the application is inactive and the like.

The URI registration module in one embodiment registers an application with the operating system to become the handler for a particular URI scheme name. This registration may allow the communication apparatus to pass URI scheme messages to the application and to notify the application to check a predetermined file for more information.

The sending module in one embodiment sends a request to the communication apparatus . The request may include one or more information identifiers a GUID associated with the application a URI scheme identifier such as a URI scheme name and the like as described above. The sending module may send a request using ETW as described above. For example the sending module may write an event to ETW using an API provided by the operating system .

The application receiving module in one embodiment receives a response from the communication apparatus . In one embodiment the response may include requested information. In one embodiment the response may notify the application receiving module to check the predetermined file for the requested information as described above.

The registration module identifies the particular type of information for communication to the application based on the one or more information identifiers. The response module monitors for information of the particular type. For example the response module may monitor the registry for registry changes or a certain file for file changes. If the response module does not detect information of the particular type the response module continues to monitor for the information. If the response module detects information of the particular type the response module responds to the application with the information. The response module responds using the URI scheme.

If the un registration module does not receive an un registration request the method ends. If the un registration module receives an un registration request the un registration module unregisters the application and the method ends.

Embodiments may be practiced in other specific forms. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

