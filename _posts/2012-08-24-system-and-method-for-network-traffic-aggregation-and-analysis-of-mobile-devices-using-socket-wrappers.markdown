---

title: System and method for network traffic aggregation and analysis of mobile devices using socket wrappers
abstract: This disclosure describes systems, methods, and apparatus for per-application network traffic monitoring by extending socket functionality to include socket wrappers able to identify network traffic volume, applications responsible for the traffic, the network being loaded, and distinguish between internal device traffic and external network traffic. Network traffic shaping can then be carried out by managing an offending application's traffic. A disclosed method includes loading a call intercept library prior to loading any core libraries of an operating system, calling a socket wrapper, calling a socket by way of functions of at least one of the core libraries, and receiving at least one data packet, from a responding application external to the communications device, at the socket. The method may also include trapping a call, to read the at least one data packet; and releasing the call to the socket so the data packet is read by the destination application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09106542&OS=09106542&RS=09106542
owner: Qualcomm Innovation Center, Inc.
number: 09106542
owner_city: San Diego
owner_country: US
publication_date: 20120824
---
The present disclosure relates generally to wireless mobile devices. In particular but not by way of limitation the present disclosure relates to systems methods and apparatuses for monitoring network traffic on a per application and per network basis.

The widespread use of smartphones and cell based WIFI hotspots has led to an explosion in signaling and data traffic on cellular networks. One way to manage this explosion is to identify and address applications that overuse the data network. There are current solutions that monitor network usage on a per device basis but these solutions suffer from the challenge of correlating whole device usage to single application usages.

While there are some solutions that can monitor per application network loading at the network layer the data includes traffic that is internal to the phone e.g. application to application traffic . Thus their measurements of network traffic are skewed upwards by the inclusion of internal device traffic and can create false positives when identifying network abusive applications. These solutions also suffer from an inability to distinguish between applications that are responsible for downloaded network traffic incoming traffic .

Exemplary embodiments of the present invention that are shown in the drawings are summarized below. These and other embodiments are more fully described in the Detailed Description section. It is to be understood however that there is no intention to limit the invention to the forms described in this Summary of the Invention or in the Detailed Description. One skilled in the art can recognize that there are numerous modifications equivalents and alternative constructions that fall within the spirit and scope of the invention as expressed in the claims.

Some aspects of the disclosure may be characterized as a communication apparatus for monitoring applications. The communication apparatus may comprise a network interface configured to receive a data packet from a network. The communication apparatus may further comprise a memory for storing a plurality of core libraries and a call intercept library. A further aspects of the communication apparatus can include a processor for running a library load module configured to load the call intercept library and any of the plurality of core libraries an application configured to read and process the data packet a socket based in one of the plurality of core libraries and a socket wrapper based in the call intercept library. The call intercept library can load before any of the plurality of core libraries. The socket can be configured to be called by the application using functionality of one of the plurality of core libraries after the network interface receives the data packet and to receive the data packet from the network interface. The socket wrapper can be configured to trap a call from the application to the socket in order to read the data packet. The socket wrapper can also be configured to ascertain a number of bytes in the data packet. The socket wrap can further be configured to release the call to the socket so that the application can read the data packet. The communication apparatus can further include a call analyzer module configured to determine a network traffic load attributable to the application based at least on the number of bytes in the data packet.

In some aspects the socket wrapper may identify the network interface through which the data packet arrived. The call analyzer module may further determine whether the data packet originated internally or externally to the communication apparatus. The call analyzer module may also be configured to identify the destination application.

Other aspects of the disclosure may also be characterized as a method of monitoring network abusing applications via methods at an OS layer of a communication device. The method may comprise loading a call intercept library prior to loading any core libraries of the OS and calling a socket wrapper by way of functions of the call intercept library. The method may also include calling a socket by way of functions of at least one of the core libraries and receiving at least one data packet from a responding application external to the communication device at the socket. The method may also include trapping a call from a destination application of the communications device to read the at least one data packet. The method may additionally include extracting a number of bytes from the at least one data packet and releasing the call to the socket so that the at least one data packet is read by the destination application.

In some aspects the method further includes identifying a network interface through which the at least one data packet traveled. Other aspects include determining whether the at least one data packet originated internally or externally to the communications device. In other aspects the method identifies the destination application for the one or more data packets.

Other aspects of the disclosure can be characterized as a non transitory tangible computer readable storage medium encoded with processor readable instructions to perform a method for identifying network abusing applications on a communication apparatus. The method can include loading a call intercept library prior to loading any core libraries of the OS and calling a socket wrapper by way of functions of the call intercept library. The method may also include calling a socket by way of functions of at least one of the core libraries. The method may further include trapping a call from an originating application to transmit at least one data packet and extracting a number of bytes from the at least one data packet. Finally the method may release the call to the socket so as to allow the socket to release the at least one data packet for transmission.

Still other aspects of the disclosure can be characterized as a communication apparatus for monitoring network abusing applications. The communication apparatus can include the following a means for loading a call intercept library prior to loading any core libraries of the OS a means for calling a socket wrapper by way of functions of the call intercept library a means for calling a socket by way of functions of at least one of the core libraries a means for trapping a call from an originating application to transmit at least one data packet a means for extracting a number of bytes from the at least one data packet a means for releasing the call to the socket so as to allow the socket to release the at least one data packet for transmission to another socket of the communication apparatus and a means for identifying network abusing applications based on at least the number of bytes.

The word exemplary is used herein to mean serving as an example instance or illustration. Any embodiment described herein as exemplary is not necessarily to be construed as preferred or advantageous over other embodiments.

A communication channel or channel can be a logical data connection that can be used to exchange data without storage of that data. A channel has two end points called sockets. Each socket is identified by an IP address or a name in the case of local sockets a family e.g. Internet v4 or v6 a local domain etc. a port or port number and a transportation protocol e.g. Transmission Control Protocol TCP or User Datagram Protocol UDP . The IP address can include a local address and a remote address where the local address can be used to identify the source of outgoing data packets or the destination of incoming data packets. The remote address can be used to identify the destination of outgoing packets or the source of incoming packets. As examples of port numbers a news server typically is assigned port number a POP server is assigned port number and an SMTP server is assigned port number . A socket typically enables communications between devices but a pair of sockets can also enable communications between applications on the same device. Sockets distribute data packets to the correct application as those packets arrive through a channel.

The following discussion often discusses a pair of devices in communication with each other. In most situations where a first device communicates with a second device one of the two devices initiates the communication and the other device responds to an initiation action. As such devices that communicate with each other in this disclosure will be described in terms of an initiating device and a responding device. It will be recognized that either device can be the initiating or responding device and that these roles can switch over time. In some cases the initiating device may be a client and the responding device may be a host in a client host relationship. For instance a user device such as a smartphone can be the client initiating device and a remote web server can be the host responding device . In others the initiating device may be a peer device and the responding device may be a peer device and these roles can switch depending on the circumstances. For instance a user device such as a smartphone can be a first peer initiating device and another user device such as a tablet computer can be a second peer responding device or vice versa. These examples are illustrative only and one of skill in the art will recognize that other variations of initiating and responding devices are also possible. In some cases communication may be one way and thus the responding device can be replaced by a receiving device e.g. where a server initiates an unrequested download to a client . As such the responding devices described herein can be considered synonymous with receiving devices.

In some embodiments this disclosure is related to monitoring network usage for a mobile computing device such as a smartphone tablet computer or ultrabook. In particular some embodiments describe systems methods and apparatus for monitoring network traffic on a per application basis and with identification of the networks that a given application is using e.g. Ethernet WIFI cellular 3G 4G etc. . This enables identification of applications that put the greatest burden on a network the network being burdened by certain applications and the degree of the burden. Accurate identifications are also made since some embodiments of this disclosure distinguish internal device traffic from network traffic thus avoiding false positives which would otherwise cause overestimates of network traffic.

Current solutions have tried to work within a typical framework as illustrated by the abstraction of a software stack and associated hardware layer e.g. the ANDROID stack . The stack includes an applications layer having a plurality of applications . . . and a library load module an application framework layer having a plurality of application programming interfaces API s . . . an operating system OS layer including core libraries and add on or overwrite libraries and a kernel layer including a network stack filters and various driver modules e.g. display keypad camera WIFI memory audio . The hardware layer includes among other components a plurality of network interfaces only four of many possible network interfaces are illustrated . It should be understood that the illustrated software stack illustrated in as well as those illustrated in are not limited to the layers and features that are illustrated as some layers and features may not be illustrated or described in order to simplify this disclosure. For instance driver modules a common feature of the kernel layer are not illustrated or discussed.

When an application such as an originating application seeks to communicate with a remote application on a responding device not illustrated e.g. a website on a remote web server the originating application makes a call to the OS to send one or more data packets . In other words the application calls the socket and the socket is created via functionality of the core libraries where the core libraries describe programming methods including those for creating and using sockets. A set of network interface selection rules or a routing table determines which of a plurality of network interfaces will be used to establish the communication to the remote application. For instance the set of network interface selection rules may determine that the socket is to use the WIFI network interface .

The OS assigns the socket among other things a local socket address identifying the source of the communication by IP address and port number and a remote socket address identifying the destination of the communication by IP address and port number . Each network assigns an IP address to the corresponding network interface and the OS can assign one of these IP addresses to the socket once the OS decides which network interface the socket is to use in this case the WIFI network interface . This IP address can be part of the local socket address and identifies not only the socket but also the network interface to be used for transmission of the one or more data packets . The OS can assign the socket an arbitrary port number selected from a list of available port numbers on the initiating device. The port number in conjunction with the IP address and possibly other parameters identifies the socket .

If a transport protocol for the socket is TCP then data packets are streamed and the OS can assign the local socket address when a connection with the responding device is established. If the transport protocol is UDP then datagrams are sent to the responding device and the OS can assign the local socket address to the socket when the first datagram is sent.

The socket can also be assigned a remote socket address including an IP address of the responding device and a port number for an application running on the responding device. The remote socket address may be extracted from a memory of the initiating device or in the alternative a DNS query can be performed to retrieve an IP address and port number.

Once a connection has been made in TCP the responding device can send data packets back to the socket using the local socket address appended to one or more data packets to direct responses back to the initiating device. In the case of UDP the responding device can extract the local socket address from the one or more data packets and use the local socket address to respond to the socket .

While data packets pass from the socket to the responding device filters can measure a number of bytes in the one or more data packets . Via the filters of the kernel layer the OS also monitors metadata associated with the socket including a process ID of the process that owns the socket and a socket descriptor assigned to the socket . When the one or more data packets are accessed by the filters the filters access the metadata using the socket descriptor as a key to lookup the data. In this fashion the filters have access to the process ID and can therefore identify which application . . . sent the one or more data packets e.g. the originating application . The filters can also identify which network interface the one or more data packets are traveling through e.g. the WIFI network interface .

The local socket address includes an IP address which identifies which of the network interfaces is being used for the communication e.g. the WIFI network interface . By identifying the amount of traffic associated with the socket as well as which of the applications . . . is responsible for the traffic and which of the network interfaces is being used applications . . . that excessively use the network for outbound traffic can be identified hereinafter referred to as network abusing applications .

However the filters are not effective to identify network abusing applications when traffic is inbound. Inbound traffic or downloading is the more common use of the network by an initiating device and thus the more important for identifying network abusing applications. The reason that the filters are ineffective to determine network download traffic on a per application basis is illustrated in .

The kernel layer can include a mapping of the IP address and port number assigned to the socket that identifies the originating application. However the IP address and port number do not indicate to the filters which application is the originating application . In this description the remote device sending the one or more inbound data packets will be referred to as the responding device e.g. where a remote web server responds to a client request and the local device receiving the one or more inbound data packets will be referred to as the initiating device e.g. a client that made a request to a remote web server . However one of skill in the art will recognize that the so called responding device could also be an initiating device and the so called initiating device could be a responding device or merely a receiving device.

Filters can count a number of bytes in the one or more inbound packets and identify which of a plurality of network interfaces is being used e.g. the WIFI network interface . For instance where the communication was established via the WIFI network interface traffic from the responding device will enter the initiating device via the WIFI network interface . However since the filters exist in the kernel layer and are processed by the kernel they have access only to the metadata in the one or more inbound data packets which only includes an IP address and port number of the socket not the mapping that identifies the originating application associated with the socket . In other words the filters do not have access to the process ID or user ID of the originating application . The mapping is maintained in the OS and is not easily accessible when the filters are processed by the kernel. Filters are thus ineffective at identifying network abusing applications for inbound traffic downloads .

To more accurately assess network traffic and to do so on a per application basis for both inbound and outbound traffic this disclosure enables network traffic monitoring at an OS layer rather than by filters in a kernel layer. Various embodiments of such network traffic monitoring systems methods and apparatus are illustrated in .

An applications layer includes a plurality of applications . . . where n is a positive integer representing a number of applications along with a call analyzer module . The plurality of applications . . . are often written in Java and can include applications such as an e mail client an SMS program a calendar maps a browser contacts a phone and many others. The call analyzer module uses information provided by the call intercept library to determine a number of bytes in each of the one or more data packets as well as to identify the application sending receiving each packet e.g. . The call analyzer module can also determine which network interface is being or will be used to transmit each of the one or more data packets . Through this analysis the call analyzer module can identify network abusing applications and determine what if any actions to take to improve network usage e.g. throttling network access for network abusing applications .

The application framework layer can include a plurality of application programming interfaces APIs . . . at least one for each application in the plurality of applications . . . . The application framework layer can act as an interface between the applications layer and the OS layer . Each one of the plurality of applications . . . can have one or more corresponding APIs . . . used to interact with the OS layer . Developers can use previously developed APIs . . . or components thereof to construct new or modified APIs.

The OS layer includes an OS having core libraries e.g. System C Media Surface Manager LibWebCore SGL 3D FreeType and SQLite to name a few . Core libraries can function to play audio files render graphics and enable web browsing to name just a few exemplary functions. The functionality of these core libraries can be extended or replaced via optional add on or overwrite libraries e.g. a graphics library or phonebook library created by applications developers developers via the applications framework layer . The OS can in one embodiment be an ANDROID operating system.

The originating application can make a call to transmit one or more data packets and this call can create the socket via functionality of one or more of the plurality of core libraries . Along with creating the socket functionality of one or more of the plurality of core libraries assigns a source IP address to the socket where the source IP address is the local IP address generally not publicly routable that a network assigned to the WIFI network interface or whichever network interface the OS decides to send the one or more data packets through . For instance where it is determined that the one or more data packets will traverse the WIFI network interface the source IP address for the socket can be the local IP address that the WIFI network assigned to the WIFI network interface . In some cases a public IP address can be assigned to one of the network interfaces such as when a cellular network operator assigns a public IP address to a device on its cellular interface.

The core libraries can provide methods or functionality to generate at least one socket when one of the applications . . . seeks to communicate with a responding device not illustrated or with another one of the applications . . . within the initiating device. When the originating application e.g. a social media web based application seeks to communicate with a responding device e.g. a remote web server and a remote application of the responding device e.g. the social media website operating on the remote web server the originating application can make a call to the OS requesting transmission of the one or more data packets .

The socket wrapper can trap the call before the socket passes the one or more data packets to the network stack and can analyze the one or more data packets to obtain information related to one or more of the following 1 a number of bytes per data packet 2 which of the one or more applications . . . is the source of the one or more data packets via a user ID and or process ID 3 which network interface will be used to transmit the one or more data packets via the source IP address of the socket and 4 whether the one or more data packets are destined for a responding device or another application . . . internal to the initiating device via metadata indicating a type of socket address type of socket or socket family this situation is discussed further with reference to . This functionality is an extension of the core libraries functionality that replaces the functionality of the socket with that of a call intercept library .

When the one or more data packets are passed from the originating application to the socket the OS can switch contexts to that of the originating application which owns the socket a context that the socket wrapper also runs in. The socket wrapper can trap a call to the socket to transmit the one or more data packets . Having trapped the call and running in the context of the originating application the socket wrapper can access metadata of the originating application which includes a process ID and or user ID that identify the originating application . In some cases a database of the OS can be used to lookup a name of the originating application the application that owns the context in which the socket and socket wrapper operate in based on the process ID and or user ID.

The OS assigns a socket descriptor to the socket when the socket is created. The kernel maintains a mapping of the socket descriptor to socket metadata as well as methods enabling the socket wrapper to query the kernel for the socket metadata thus giving the socket wrapper access to information such as the socket descriptor local and remote IP addresses and socket family to name a few.

The functionality of the socket wrapper can be enabled by scripting the call intercept library to have a priority in loading over the core libraries . In other words the OS layer can load the call intercept library before it loads the core libraries thus enabling the socket wrapper to trap the call and analyze the one or more data packets before the socket passes them to the network stack . This priority in loading can be carried out via the library load module .

The socket wrapper can provide the aforementioned information including the socket and application metadata to the call analyzer module which can use this information to identify network abusing applications and do so with increased accuracy since internal traffic is not counted as network traffic. In particular the call analyzer module can determine a number of bytes in each one of the one or more data packets . It can also determine which network interface e.g. WIFI network interface the one or more data packets are traversing by looking at the source IP address of the socket . Recall that this is because the source IP address of the socket is also the IP address of the network interface used to transmit the one or more data packets e.g. WIFI network interface .

The call analyzer module can also use the information to identify the originating application via the process ID and or user ID associated with the originating application . The socket wrapper has access to the process ID and or the user ID since it is created in the context of the originating application . In comparison filters are not created in the context of the originating application and therefore do not have access to the process ID and user ID of the originating application . A database of the OS can be used to lookup a name of the originating application based on the process ID and or user ID provided to the call analyzer module by the socket wrapper . The call analyzer module can distinguish internal versus external traffic based on the family or type or style of socket which in one embodiment can be extracted from metadata of the socket . With this information the call analyzer module can determine if the originating application is generating high network traffic loads and what networks the originating application is burdening.

Once the call is released from the socket wrapper and reaches the OS the socket establishes communication with the responding device in TCP or begins transmitting datagrams in UDP to the responding device. The one or more data packets can pass through the network stack of the kernel layer where the network stack provides a software interface between the software stack and the network interfaces in hardware. The network stack can include but is not limited to network protocols such as TCP and UDP an internet protocol IP or network layer and a link layer. The kernel layer also acts as an abstraction layer between the hardware layer and the rest of the software stack.

The one or more data packets can exit the software stack and pass through one of the network interfaces of the hardware layer en route to the responding device. In this particular example the one or more data packets are traversing the WIFI network interface to reach the responding device but in other embodiments the cellular network interface Ethernet network interface or BLUETOOTH network interface could also be traversed. The cellular network interface and WIFI network interface are often used for client host type communications while the Ethernet network interface is often used for client host or peer to peer communications. The BLUETOOTH network interface is often used for peer to peer communications. However these types of communications are not limiting nor do the network interfaces make up an exclusive list of those that can be implemented.

As seen the call intercept library the socket wrapper and the call analyzer module do not influence the call the socket or the transmission of the one or more data packets . In other words trapping the call and analyzing the information before transmission is performed such that the user experience is not degraded. However if the call analyzer module identifies a network abusive application and determines to take action regarding the same then there are embodiments where various aspects of the software stack may be influenced shut down curtailed or otherwise modified.

While current devices typically do not enable two networks to be used simultaneously e.g. WIFI and 4G or UMTS and CDMA products in development do have such functionality. For instance transmission of a stream of data packets may be distributed between two or more networks e.g. 3G and 4G cellular networks .

For inbound traffic e.g. downloads illustrates one embodiment of a software stack configured to identify network abusing applications. Traditionally one or more inbound data packets destined for a destination application are received at one of a plurality of network interfaces e.g. the WIFI network interface in the illustrated embodiment and enter the software stack via a network stack . The one or more data packets queue at a socket created by an OS and are read by the destination application in response to a read call not illustrated made by the destination application and received at the socket .

However here the first socket functionality is replaced by a custom function in the form of an at least one socket wrapper of a call intercept library . When the destination application makes a call to read the first socket the call is trapped by the socket wrapper allowing the socket wrapper to analyze the one or more data packets at the first socket before they are read by the destination application . When finished the socket wrapper releases the call thus enabling the destination application to read the one or more data packets from the socket .

Analyzing the one or more data packets at the socket can include obtaining information related to one or more of the following 1 a number of bytes per data packet 2 which of the one or more applications . . . the one or more data packets destined for via a user ID and or process ID 3 which network interface was used to receive the one or more data packets via the source IP address of the socket and 4 whether the one or more data packets are inbound from a responding device or from another application . . . internal to the initiating device via metadata indicating a socket address type of socket or socket family this situation is discussed further with reference to .

When the one or more inbound data packets are inbound to the socket the OS can switch contexts to that of the destination application which owns the socket a context that the socket wrapper also runs in. The socket wrapper can trap a call to read the socket . Having trapped the call and running in the context of the destination application the socket wrapper can access metadata of the destination application which includes a process ID and or user ID that identify the destination application . In some cases a database of the OS can be used to lookup a name of the destination application the application that owns the context in which the socket and socket wrapper operate in based on the process ID and or user ID. The filters in contrast are not created in the context of the destination application and therefore do not have access to the destination application metadata and the included process ID and or user ID.

The OS assigns a socket descriptor to the socket when the socket is created. The kernel maintains a mapping of the socket descriptor to socket metadata as well as methods enabling the socket wrapper to query the kernel for the socket metadata thus giving the socket wrapper access to information such as the socket descriptor local and remote IP addresses and socket family to name a few.

The at least one socket wrapper can provide this information including the socket and application metadata to a call analyzer module which can identify network abusing applications and do so with increased accuracy. In particular the call analyzer module can identify a number of bytes in each one of the one or more data packets . It can also determine which network interface e.g. WIFI network interface the one or more data packets are traversing by looking at the destination IP address of the one or more data packets . The destination IP address is the local IP address generally not publicly routable that the network e.g. WIFI assigned to the network interface e.g. WIFI network interface traversed by the one or more data packets . In one embodiment the call analyzer module can use the source IP address of the one or more data packets to identify the remote device that sent the one or more data packets in case the remote device is blacklisted or otherwise an undesirable source.

Internal versus external traffic can be distinguished based on the socket family or type. For instance the call analyzer module can extract the socket type from metadata of the socket to determine whether the socket is an endpoint for internal or external communications.

With this information the call analyzer module can determine if the destination application is downloading excessive volumes of data and can determine what networks the destination application is burdening. As in the case of outbound traffic the call analyzer module can again ignore internal traffic thus providing more accurate monitoring of network usage on a per application basis.

While have discussed the situations of inbound and outbound traffic independently it will be understood that the call analyzer modules are configured to identify network abusive applications based on analysis of inbound and outbound traffic.

The socket wrapper can provide this information to a call analyzer module which can determine that the one or more data packets are not relevant to identifying network abusive applications since the one or more data packets are internally directed. In particular the call analyzer module can determine from the type of socket address type of socket or socket family that the one or more data packets are destined for another application of the initiating device or another socket e.g. second socket of the initiating device rather than a responding device and therefore these one or more data packets can be ignored when counting bytes for identification of network abusing applications.

Once the socket wrapper has trapped the call and extracted the above noted information the call is allowed to reach the OS and the call creates the first socket . The first socket then transmits the one or more data packets to the second socket via the filters .

In one embodiment not illustrated the one or more data packets can be routed through the socket wrapper en route to the other application from the second socket . In such an embodiment the socket wrapper can analyze the data packets before they reach the first socket . This is one way that the socket wrapper can differentiate local versus outbound inbound traffic and thereby only pass information to the call analyzer module regarding outbound inbound traffic.

A number of bytes in the data packet can be extracted while the network interface e.g. through which the data packet arrived can also be identified . The destination application can be identified as well as identification as to whether the data packet is external or internal traffic originating from another application within the same device such as is illustrated in . With the number of bytes from the data packet and optionally other information extracted from the data packet and the socket a network abusing application can be identified . Once such identification has taken place or at the same time or even before the identification but after the trapping of the call the socket wrapper can release the call so that the destination application can read the data packet.

Identifying the network interface through which the at least one data packet traveled can involve identification via an IP address in metadata of the socket. Identifying the destination application can look at metadata associated with the destination application in whose context the socket wrapper runs. This metadata may include a process ID or user ID that can be mapped to the destination application. Access to this metadata is only available to operations at the OS level e.g. the socket wrapper in and in particular to those operations running in the context of the destination application. Such access is unique to operations running at the OS level for incoming data packets and thus the identify operation cannot be performed by filters operating at the kernel level e.g. filters . Furthermore the socket wrapper can look at a type or family of the socket as recorded in metadata of the socket to determine whether the data packet is part of internal or external traffic .

Data extracted from the one or more data packets can be passed to a call analyzer module e.g. for analysis and identification of network abusive applications . The number of bytes the network interface through which the data packet traveled or an IP address corresponding to the network interface the destination application or a process ID corresponding to the destination application and the type or family of the socket can all be passed to the call analyzer module in support of the identification .

A number of bytes in the data packet can be extracted while the network interface e.g. through which the data packet arrived can also be identified . The originating application can be identified as well as identification as to whether the data packet is external or internal traffic destined for another application within the same device such as is illustrated in . With the number of bytes from the data packet and optionally other information extracted from the data packet and the socket a network abusing application can be identified . Once such identification has taken place or at the same time or even before the identification but after the trapping of the call the socket wrapper can release the call so that the data packet can be transmitted.

Identifying the network interface through which the at least one data packet will travel can involve identification via an IP address in metadata of the socket. Identifying the originating application can look at metadata associated with the originating application in whose context the socket wrapper runs. This metadata may include a process ID or user ID that can be mapped to the originating application. Access to this metadata is only available to operations at the OS level and in particular to those operations running in the context of the originating application. Such access is unique to operations running at the OS level for incoming data packets and thus the identify operation cannot be performed by the filters operating at the kernel level for incoming data packets. Furthermore the socket wrapper can look at a type of family of the socket as recorded in metadata of the socket to determine whether the one or more data packets are part of internal or external traffic .

The order of operations illustrated in are illustrative only and not intended to limit the scope of various orders of operations that are envisioned. For instance the identification of network abusive applications and can be carried out before after or in parallel with the release of the call and .

In any of the above noted embodiments once an application has been identified as a network abusive application a variety of remedies can be carried out. The network abusive application can have its communications redirected to a different network or split between multiple networks. The network abusive application s communications can be throttled or limited. In some cases only downloads or only uploads may be redirected to a different network or be throttled. In some cases identification of network abusive applications can be used by developers in order to modify applications to more efficiently or fairly use network bandwidth. These are just a few non limiting examples of remedies for network abusive application and a variety of other remedies are also envisioned.

The systems and methods described herein can be implemented in a machine such as a computer system in addition to the specific physical devices described herein. shows a diagrammatic representation of one embodiment of a machine in the exemplary form of a computer system within which a set of instructions can execute for causing a device to perform or execute any one or more of the aspects and or methodologies of the present disclosure. The components in are examples only and do not limit the scope of use or functionality of any hardware software embedded logic component or a combination of two or more such components implementing particular embodiments. Exemplary computer systems include but are not limited to desktop computers laptop computers netbooks ultrabooks PDAs tablet computers smartphones media phones and cellular phones.

Computer system may include a processor a memory and a storage that communicate with each other and with other components via a bus . The processor may implement the functionality described in the methods of . The processor may also implement the functionality of the following applications . . . . . . and . . . . The processor may also implement the functionality of the call intercept libraries and the socket wrappers . Furthermore the functionality of the call analyzer module can be embodied by the processor . The memory or the storage can store information that the socket wrappers extract from the sockets or from the one or more outbound data packets inbound data packets or data packets that are routed to other applications within the device. Data describing the applications that the call analyzer modules identify as network abusing applications can also be stored in the memory and or storage . As another example the call intercept library and the plurality of core libraries can be stored in the memory and or storage .

The bus may also link a display one or more input devices which may for example include a keypad a keyboard a mouse a stylus etc. one or more output devices one or more storage devices and various tangible storage media . All of these elements may interface directly or via one or more interfaces or adaptors to the bus . For instance the various tangible storage media can interface with the bus via storage medium interface . In some embodiments the tangible storage media can embody and implement the methods described with reference to .

The computer system may have any suitable physical form including but not limited to one or more integrated circuits ICs printed circuit boards PCBs mobile handheld devices such as mobile telephones or PDAs laptop or notebook computers distributed computer systems computing grids or servers. For instance examples of the computer system include but are not limited to computer systems implementing the software stacks and hardware layers illustrated in . The initiating devices and receiving devices herein disclosed are further examples of the computer system .

Processor s or central processing unit s CPU s optionally contains a cache memory unit for temporary local storage of instructions data or computer addresses. In one case the processor s can store in cache a destination address of outbound data packets including a destination IP address and a destination port. Processor s are configured to assist in execution of computer readable instructions. Computer system may provide functionality as a result of the processor s executing software embodied in one or more tangible computer readable storage media such as memory storage storage devices and or tangible storage media . The tangible computer readable media may store software that implements particular embodiments and processor s may execute the software. In some embodiments this software may carry out the functionality of the call intercept libraries or that of the call analyzer modules . Memory may read the software from one or more other computer readable media such as mass storage device s or from one or more other sources through a suitable interface such as network interface . The network interface may take the form of any of the various network interfaces described with reference to e.g. a WIFI network interface . The software may cause processor s to carry out one or more processes or one or more steps of one or more processes described or illustrated herein. Carrying out such processes or steps may include defining data structures stored in memory and modifying the data structures as directed by the software.

The memory may include various components e.g. machine readable media including but not limited to a random access memory component e.g. RAM e.g. a static RAM SRAM a dynamic RAM DRAM etc. a read only component e.g. ROM and any combinations thereof. ROM may act to communicate data and instructions unidirectionally to processor s and RAM may act to communicate data and instructions bidirectionally with processor s . ROM and RAM may include any suitable tangible computer readable media described below. In one example a basic input output system BIOS including basic routines that help to transfer information between elements within computer system such as during start up may be stored in the memory .

Fixed storage is connected bidirectionally to processor s optionally through storage control unit . Fixed storage provides additional data storage capacity and may also include any suitable tangible computer readable media described herein. Storage may be used to store operating system EXECs executables data APV applications application programs and the like. EXECs and or the APV applications can be embodied by any one or more of applications . . . . . . and . . . . Often although not always storage is a secondary storage medium such as a hard disk that is slower than primary storage e.g. memory . Storage can also include an optical disk drive a solid state memory device e.g. flash based systems or a combination of any of the above. Information in storage may in appropriate cases be incorporated as virtual memory in memory .

In one example storage device s may be removably interfaced with computer system e.g. via an external port connector not shown via a storage device interface . Particularly storage device s and an associated machine readable medium may provide nonvolatile and or volatile storage of machine readable instructions data structures program modules and or other data for the computer system . In one example software may reside completely or partially within a machine readable medium on storage device s . In another example software may reside completely or partially within processor s .

Bus connects a wide variety of subsystems. Herein reference to a bus may encompass one or more digital signal lines serving a common function where appropriate. Bus may be any of several types of bus structures including but not limited to a memory bus a memory controller a peripheral bus a local bus and any combinations thereof using any of a variety of bus architectures. As an example and not by way of limitation such architectures include an Industry Standard Architecture ISA bus an Enhanced ISA EISA bus a Micro Channel Architecture MCA bus a Video Electronics Standards Association local bus VLB a Peripheral Component Interconnect PCI bus a PCI Express PCI X bus an Accelerated Graphics Port AGP bus HyperTransport HTX bus serial advanced technology attachment SATA bus and any combinations thereof.

Computer system may also include an input device . In one example a user of computer system may enter commands and or other information into computer system via input device s . For instance a user may input a domain name or GOOGLE search into an input device such as a keyboard. Alternatively a web search may be performed via voice commands using an input device such as a microphone. Examples of an input device s include but are not limited to an alpha numeric input device e.g. a keyboard a pointing device e.g. a mouse or touchpad a touchpad a joystick a gamepad an audio input device e.g. a microphone a voice response system etc. an optical scanner a video or still image capture device e.g. a camera and any combinations thereof. Input device s may be interfaced to bus via any of a variety of input interfaces e.g. input interface including but not limited to serial parallel game port USB FIREWIRE THUNDERBOLT or any combination of the above.

In particular embodiments when computer system is connected to network computer system may communicate with other devices specifically mobile devices and enterprise systems connected to network . For instance an initiating device and a responding device can communicate via the network . Communications to and from computer system may be sent through network interface e.g. network interfaces . For example network interface may receive incoming communications such as requests or responses from a responding device in the form of one or more data packets such as Internet Protocol IP packets from network and computer system may store the incoming communications in memory for processing. Computer system may similarly store outgoing communications such as requests or responses to other devices in the form of one or more data packets in memory and communicated to network from network interface . Processor s may access these communication packets stored in memory for processing. For instance the processor s may analyze outbound data packets to identify a network interface that is to be traversed by the outbound data packets.

Examples of the network interface include but are not limited to a network interface card a modem and any combination thereof. Examples of a network or network segment include but are not limited to a wide area network WAN e.g. the Internet an enterprise network a local area network LAN e.g. a network associated with an office a building a campus or other relatively small geographic space a telephone network a direct connection between two computing devices and any combinations thereof. A network such as network may employ a wired and or a wireless mode of communication including WIFI and cellular networks. In general any network topology may be used.

Information and data can be displayed through a display . Examples of a display include but are not limited to a liquid crystal display LCD an organic liquid crystal display OLED a cathode ray tube CRT a plasma display and any combinations thereof. The display can interface to the processor s memory and fixed storage as well as other devices such as input device s via the bus . The display is linked to the bus via a video interface and transport of data between the display and the bus can be controlled via the graphics control . The display can present rendered graphics and text generated by the one or more applications . . . . . . and . . . 

In addition to a display computer system may include one or more other peripheral output devices including but not limited to an audio speaker a printer and any combinations thereof. Such peripheral output devices may be connected to the bus via an output interface . Examples of an output interface include but are not limited to a serial port a parallel connection a USB port a FIREWIRE port a THUNDERBOLT port and any combinations thereof.

In addition or as an alternative computer system may provide functionality as a result of logic hardwired or otherwise embodied in a circuit which may operate in place of or together with software to execute one or more processes or one or more steps of one or more processes described or illustrated herein. Reference to software in this disclosure may encompass logic and reference to logic may encompass software. Moreover reference to a computer readable medium may encompass a circuit such as an IC storing software for execution a circuit embodying logic for execution or both where appropriate. The present disclosure encompasses any suitable combination of hardware software firmware or a combination thereof.

Those of skill in the art will understand that information and signals may be represented using any of a variety of different technologies and techniques. For example data instructions commands information signals bits symbols and chips that may be referenced throughout the above description may be represented by voltages currents electromagnetic waves magnetic fields or particles optical fields or particles or any combination thereof.

Those of skill in the art will further appreciate that the various illustrative logical blocks modules circuits and algorithm steps described in connection with the embodiments disclosed herein may be implemented as electronic hardware computer software firmware or combinations of these. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules circuits and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware software or firmware depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention.

The various illustrative logical blocks modules and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

The steps of a method or algorithm described in connection with the embodiments disclosed herein e.g. may be embodied directly in hardware in a software module executed by a processor in a firmware module executed by a processor or in a combination of these. A software module may reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of storage medium known in the art. An exemplary storage medium is coupled to the processor such the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an ASIC. The ASIC may reside in a user terminal. In the alternative the processor and the storage medium may reside as discrete components in a user terminal.

The previous description of the disclosed embodiments is provided to enable any person skilled in the art to make or use the present invention. Various modifications to these embodiments will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other embodiments without departing from the spirit or scope of the invention. Thus the present invention is not intended to be limited to the embodiments shown herein but is to be accorded the widest scope consistent with the principles and novel features disclosed herein.

