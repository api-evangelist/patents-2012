---

title: Block level backup and restore
abstract: For block level backup, a full image level backup is created of a file system from production storage at a production server to random access storage at a backup server. A mounted image is created from the full image that exposes a block level representation of the file system of the production server for read operations in a file level format. File enumeration is performed on the mounted image for files. Block level read operations are monitored while the files are being enumerated. During monitoring, blocks that are read for the read operations are marked as meta-data blocks. Blocks that are not marked as meta-data blocks are identified as data blocks. The data blocks are migrated to sequential storage, while leaving the meta-data blocks on the random access storage, wherein the data blocks form a backup image.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08812446&OS=08812446&RS=08812446
owner: International Business Machines Corporation
number: 08812446
owner_city: Armonk
owner_country: US
publication_date: 20120524
---
This application is a continuation of U.S. patent application Ser. No. 13 243 789 filed on Sep. 23 2011 which application is incorporated herein by reference in its entirety.

Embodiments of the invention relate to block level backup and restore. In particular embodiments relate to file system agnostic image backup on sequential devices to facilitate efficient file level retrieval.

Production servers store production data in production storage. Periodically the production data is copied to backup storage at a backup server. The production data may be copied as an image. The terms image block level backup and snapshot are used to represent technology that refers to the process of protecting live production servers using software or hardware without interfering with the production servers. The technology captures a point in time representation of the production data from a production server in a lower level of the storage stack and represents the production data in storage blocks that are agnostic to upper storage layers e.g. volume managers file systems etc. .

Some production servers perform file level backups of images from production servers to a backup server. Some of the production servers may have millions of files which cause the creation of large indices in backup processes while other production servers include applications e.g. database applications that physically use large files which causes backup processes to backup those files frequently.

In addition virtualization vendors have introduced Application Programming Interfaces APIs that provide capabilities to perform off host block level incremental backups. Such off host processes are becoming popular and some backup vendors have created products to interact with those APIs e.g. to allow off host block level backups of virtual machines and deprecate the usage of traditional file level backup in guest production servers.

With the growing popularity of hardware snapshots and the support of incremental capacities in some hardware storage devices it also becomes more convenient to backup production data using hardware snapshots and off loading the production data into software based solutions in block representation thus creating block level images in contrast to legacy file level backups.

While storage devices are becoming less expensive there is a price gap between different backup storage technologies such as random access devices e.g. disk devices and sequential devices e.g. tape drives . With growing storage requirements customers are using data reduction technologies to production data i.e. primary data and backup data and information is stored on sequential devices due to price especially when the amount of time that the backup data needs to be kept on those devices and the size of the backup data is large.

When performing file level recovery from images backup data is typically retrieved from the image in several steps. First there is a need to enumerate the list of files e.g. with a Dir command . Second a specific file or files to be retrieved are selected. Third the data blocks of the specific file or files that need recovery are retrieved. While the data blocks of the files themselves are typically located sequentially because of the locality of reference nature of modern file systems the meta data blocks to enumerate the files in most cases are not kept in sequential order and are located on different areas of the volume holding the files.

Provided is a method computer program product and system for block level backup. A full image level backup is created of a file system from production storage at a production server to random access storage at a backup server. A mounted image is created from the full image that exposes a block level representation of the file system of the production server for accesses for read operations in a file level format. File enumeration is performed on the mounted image for files. Block level read operations are monitored while the files are being enumerated. During monitoring blocks that are read for the read operations are marked as meta data blocks. Blocks that are not marked as meta data blocks are identified as data blocks. The data blocks are migrated to sequential storage while leaving the meta data blocks on the random access storage wherein the data blocks form a backup image.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

Embodiments of the invention store meta data blocks on random access storage while storing associated data blocks on sequential storage. Storing the meta data blocks on the random access storage leads to efficient restore of the data blocks on the sequential storage taking into account that analysis on the meta data block may create more efficient data blocks reads . For example embodiments may store backed up meta data blocks on disk and store backed up image data blocks on tape. Embodiments lead to a more efficient reading process because embodiments prepare and read the blocks in efficient order and browse through the files to find the right file to restore from the disk and this browsing is not influenced by tape performance which depends on tape characteristics.

Each production server . . . includes a file level filter . . . a production backup process . . . and an Operating System OS . . . . Each production server . . . is coupled to production storage . . . . Each production server . . . has a file system . . . in its corresponding production storage . . . . In certain embodiments the production storage comprises one or more production storage devices.

The backup server includes a server backup process a mount process also referred to as a block level exposure process and an Operating System OS . The backup server is coupled to random access storage e.g. disk media and sequential storage e.g. tape media . In certain embodiments the random access storage comprises one or more random access storage devices. In certain embodiments the sequential storage comprises one or more sequential storage devices.

In the network backup environment the production servers . . . backup the data in backup objects stored in the production storage . . . to the backup server . The backup server maintains a database of backup objects providing information on stored backup objects. The production servers . . . may restore files from the backup objects maintained by the backup server .

The backup objects for a volume include a full volume backup object as of an initial point in time and delta backups that capture changes to the volume as of the initial point in time at different points in time. The delta backups may comprise an incremental backup or differential backup. An incremental backup at a point in time comprises a backup object having files that have changed between the point in time of the last taken incremental backup or full volume backup whichever is more recent and the point in time of the incremental backup. A differential backup comprises a backup taken of a volume as of a point in time of the last full volume backup so a differential backup set has all files that have changed between the point in time of the differential backup and the last full volume backup. In order to achieve the block level storage separation between meta data blocks and data blocks the data is captured from production storage . . . into random access storage using block level technology with the ability to monitor the changes in file information i.e. list of files that are changed on top of the blocks that are captured . Also the mount process is a block level exposure utility that exposes a block level representation of the captured block level image. Such an exposed block level image represents a file system . . . of a particular production server . . . for accesses for read operations by the Operating System OS . . . at the production server . . . . The mount process monitors read operations against the backed up image and reports the blocks that are read. Also the server backup process is a migration process that moves selectable blocks from the random access storage into the sequential storage .

To support block level incremental backups and efficient file level recovery from block level backup images a file level filter . . . is installed on each production server . . . . The file level filter . . . captures changes at the file system level in the file system . . . . The file level filter . . . finds the files that have changed between incremental snapshots. The file level filter . . . reports the list of changed files to the mount process and the mount process performs an enumeration process against the changed files on a mounted volume to make sure that the underlined blocks are marked as meta data blocks and thus are not moved from random access storage to sequential storage . In virtual environments there may be remote insertion of in guest scripts to guest production servers . . . . In cases in which a block includes both meta data and data the block is treated as a meta data block.

In block the mount process starts block level monitoring of read operations against the mounted image.

In block the mount process performs file enumeration on the mounted image for all files. In certain embodiments the mount process performs any known search in a tree technique e.g. a Breadth first Search BFS or Depth First Search DFS on the file level tree. During enumeration the mount process reads the meta data blocks but not the data blocks . In certain embodiments the mount process performs a DIR S command in a Windows OS Windows is a are registered trademark of Microsoft Corporation in the United States and other countries. 

In block the mount process monitors the block level read operations while the files are being enumerated and marks the read blocks as meta data blocks. The blocks that are not marked are data blocks. In particular the read operations reference meta data blocks so the blocks that are read are identified as meta data blocks. That is during monitoring the mount process marks blocks that are read for the read operations as meta data blocks and the remaining blocks that are not marked are identified as data blocks.

In block once the enumeration is complete the server backup process migrates the data blocks i.e. the blocks that are not marked as meta data blocks forming the backup image to sequential storage . In certain embodiments the meta data blocks remain in the random access storage . In block optionally the meta data blocks are moved to a permanent random access location from the random access storage to the sequential storage in one chunk. In certain embodiments the data blocks that are on random access storage may be migrated as one batch to the sequential storage . In certain embodiments the data blocks that are on random access storage may be left on random access storage and then for a restore operation they do not need to be retrieved. In various embodiments a batch may be a full image an incremental image a differential image or a generation image i.e. full image associated set of incremental or differential images or any combination of such.

In block the mount process uses the incremental image to create a mounted i.e. exposed image that exposes a block level representation of the file system of a particular production server to present to the OS at the production server a file system that can be accessed for read or read operations in a file level format. In certain alternative embodiments the mounted image may be used for accesses for read write operations.

In block the mount process starts block level monitoring of read operations against the mounted image.

In block the mount process performs file enumeration on the mounted image for files that have changed as reported by the file level filter . . . for incremental changes . In certain embodiments the file level filter . . . provides the mount process with a list of files that were changed. In certain alternative embodiments other technology may be used to find the list of changed filed e.g. modified date archive bit etc. . The mount process performs reads against sub folders of the files up to the root folder. The mount process reads the relevant meta data blocks but not the data blocks .

In block the mount process monitors the block level read operations while the files that have changed are being enumerated and marks the read blocks as meta data blocks.

In block the server backup process migrates the data blocks i.e. the blocks that are not marked as meta data blocks to sequential storage while optionally leaving the meta data blocks in random access storage . That is in certain embodiments the meta data blocks remain in the random access storage and in certain alternative embodiments the meta data blocks are moved to a permanent random access location from the random access storage to the sequential storage in one chunk. In certain embodiments the data blocks that are on random access storage may be migrated as one batch to the sequential storage . In certain embodiments the data blocks that are on random access storage may be left on random access storage and then for restore they do not need to be retrieved. In various embodiments a batch may be a full image an incremental image a differential image or a generation image i.e. full image associated set of incremental or differential images or any combination of such.

In block optionally the file level filter . . . releases entries kept in a file change facility up to the point in time of the incremental image.

In block in response to the meta data blocks being stored in the random access storage while the data blocks are stored on the sequential storage the mount process uses the meta data blocks of the backed up image to create a mounted i.e. exposed image that exposes a block level representation of the file system . . . of the particular production server . . . to present to the OS . . . at the production server . . . a file system for accesses for read operations in a file level format. In certain alternative embodiments the mounted image may be used for accesses for read write operations.

At this point the sequential storage is not accessed except to retrieve meta data blocks stored in the sequential storage as a chunk with a single command before the restore process .

In block in response to user requests any none data related operations against the mounted image are performed with data blocks being read from the random access storage . Examples of non data related operations include explore search or enumeration of files from the mounted image by accessing the meta data blocks stored on random access storage . In block to restore the specific file the server backup process reads data blocks from the sequential storage directly to the production storage . . . random access storage .

In certain embodiments assuming that data blocks in legacy file systems are kept in sequential order the read process is sequential. In certain embodiments there may be a read a head mechanism to enhance read performance from sequential storage .

In block the either deletes the data blocks and meta data blocks that relate to the appropriate images on the list and re creates these images or creates new synthetic full images from the relevant data blocks and meta data blocks. In certain embodiments the server backup process automatically knows to re create these deleted images. In certain embodiments the server backup process creates new synthetic full images from the relevant data blocks and meta data blocks. The determination of whether to re create the deleted images or create new synthetic full images depends on the server backup process image management characteristics e.g. this is a constant operation per type of environment we use . When creating a synthetic full image the backup server process may parse all meta data blocks reconstruct the new syntactic full meta data blocks first and and as a secondary stage perform gathering of the data blocks based on the order of the data blocks on the sequential storage to leverage the locality of reference in the sequential storage .

Unlike the agnostic system described herein other technologies require specific knowledge of the file system and other Operating System OS specific storage layers and are sensitive to changes in storage layers such as new Operating Systems new file systems etc. Also some of the upper level layers may be proprietary and thus the information is not publicly available. Such procedures may not fit solutions that aim to support a variety of environments.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device solid state memory magnetic tape or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be coupled to or connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the embodiments of the invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational processing e.g. operations or steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The code implementing the described operations may further be implemented in hardware logic or circuitry e.g. an integrated circuit chip Programmable Gate Array PGA Application Specific Integrated Circuit ASIC etc. The hardware logic may be coupled to a processor to perform operations.

Input Output I O devices including but not limited to keyboards displays pointing devices etc. may be coupled to the system either directly or through intervening I O controllers .

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters .

The computer architecture may be coupled to storage e.g. a non volatile storage area such as magnetic disk drives optical disk drives a tape drive etc. . The storage may comprise an internal storage device or an attached or network accessible storage. Computer programs in storage may be loaded into the memory elements and executed by a processor in a manner known in the art.

The computer architecture may include fewer components than illustrated additional components not illustrated herein or some combination of the components illustrated and additional components. The computer architecture may comprise any computing device known in the art such as a mainframe server personal computer workstation laptop handheld computer telephony device network appliance virtualization device storage controller etc.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of embodiments of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiments were chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

The foregoing description of embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the embodiments to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the embodiments be limited not by this detailed description but rather by the claims appended hereto. The above specification examples and data provide a complete description of the manufacture and use of the composition of the embodiments. Since many embodiments may be made without departing from the spirit and scope of the invention the embodiments reside in the claims hereinafter appended or any subsequently filed claims and their equivalents.

