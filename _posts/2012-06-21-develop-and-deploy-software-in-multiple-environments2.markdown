---

title: Develop and deploy software in multiple environments
abstract: Developing, deploying, and operating an application in a plurality of environments is disclosed, including: defining runtime specific configuration information for a plurality of environments, wherein the runtime environment specific configuration includes topology configuration and security configuration, wherein the runtime environment specific configuration information is stored separately from other configuration information and is protected by an identity management system; executing an application in one of the plurality of environments, wherein execution of the application is controlled by a first role; and presenting a credential associated with the first role to the identity management system to obtain a portion of the runtime environment specific configuration information corresponding to the environment associated with the executing application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09542566&OS=09542566&RS=09542566
owner: Alibaba.com Limited
number: 09542566
owner_city: Cayman Islands
owner_country: unknown
publication_date: 20120621
---
This application claims priority to U.S. Provisional Patent Application No. 61 501 132 entitled DEVELOP AND DEPLOY SOFTWARE IN MULTIPLE ENVIRONMENTS filed Jun. 24 2011 which is incorporated herein by reference for all purposes.

In traditional development and deployment technologies configuration information including security information was deployed to and persistently stored at systems on which one or more instances of one or more types of environments are to be run. Since these systems were potentially shared among different types of environments users from the different environments may edit the source code of the configuration information that was shared at least in part among the different environments. However problems arise when a user from a first type of environment edits the source code in a way that may detrimentally affect the configuration for a second type of environment.

Furthermore writing a generic application that works for all environments is not easy. Some traditional approaches are error prone. For example one way is to edit etc hosts files to resolve hostname issues. This usually only works for advanced developers. An alternative approach is to put many if else in the configuration information source code to differentiate the handling of different types of environment data. This approach creates a lot of code paths that will only execute in one type of environment and makes testing debugging in one type of environment e.g. development for issues from another type of environment e.g. production extremely difficult.

The invention can be implemented in numerous ways including as a process an apparatus a system a composition of matter a computer program product embodied on a computer readable storage medium and or a processor such as a processor configured to execute instructions stored on and or provided by a memory coupled to the processor. In this specification these implementations or any other form that the invention may take may be referred to as techniques. In general the order of the steps of disclosed processes may be altered within the scope of the invention. Unless stated otherwise a component such as a processor or a memory described as being configured to perform a task may be implemented as a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. As used herein the term processor refers to one or more devices circuits and or processing cores configured to process data such as computer program instructions.

A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.

Traditional development and deployment technologies are often suited for use in statically configured environments. As used herein an environment refers to one or more physical or virtual devices used to run a certain type of application. For example a production environment is used to run a production type of application e.g. application released to the customers and a development environment is used to run a development type of application e.g. application that is still being developed and not yet released to the customers . These traditional technologies however are often inadequate for managing and protecting configuration information effectively across multiple environments. Examples of configuration information include security information and topology information. Examples of environments include the development environment the quality assurance QA environment and the production environment. It is even more challenging to use the traditional technologies in dynamic environments such as cloud based environments. Amazon Web Services AWS is one example of a dynamic environment. Configuration information is often environment specific. For example in the development environment there is usually a single server with different applications services that bind to different ports and so the localhost address is usually used unlike the multiple virtual internet protocols IPs that are typically used in the production environment . In the QA environment there is typically a single instance of the application running for testing purposes unlike the multiple instances of the application that are typically used in the production environment . In the production environment there are typically multiple virtual IPs VIP and multiple instances of the application.

A technique of developing deploying and operating an application in a plurality of environments is described herein. In various embodiments configuration information to be used during runtime is defined for each of a plurality of environment types. For example a set of configuration information specific to a development environment is defined a set of configuration information specific a production environment is defined and a set of configuration information specific to a QA environment is defined. Examples of a set of configuration information include security configuration and topology configuration. In some embodiments the sets of environment specific configuration information is stored separately from other configuration information e.g. web application data that may or may not be specific to different environments and is also protected by an identity management system. In some embodiments the sets of environment specific configuration information are stored in a central configuration information management system and or remotely from the other configuration data. By storing the sets of environment specific configuration information in a central manner the sets of configuration information may be easily located for updating or other purposes.

In various embodiments the identity management system that protects the sets of environment specific configuration information may permit only a limited set of security roles to access and modify the sets of configuration information. For example this limited set of security roles such as a security manager role may modify the configuration information at the central configuration management system. In various embodiments the identity management system that protects the sets of environment specific configuration information may permit another set of security roles to access the sets of configuration information during for example runtime but not to modify the configuration information. For example this other set of security roles is associated with roles that are responsible with running instances of various environments such as a production application manager and may submit appropriate credentials to access the set of configuration information for which they have the required privilege level from the central configuration information management system when they wish to start an instance of a particular environment. For example a security role associated with managing the production environment may have credentials to access the set of production environment specific configuration information but may not have the credentials to access the set of QA environment specific configuration information. In various embodiments the security roles that may access and modify the sets of environment specific configuration information are different from the security roles that may only access the sets of environment specific configuration information. As such leaks of security keys may be avoided by assigning different security roles among a team of users a few of which may be assigned the role of a security manager who may modify the sets of environment specific configuration information while the other users who are primarily involved with running the environments may be assigned environment specific manager roles that may only read the sets of configuration information associated with their respective environment.

In some embodiments the identity management system permits users associated with environment specific roles e.g. production application manager role and QA application manager role to only access but not modify the sets of environment specific configuration information stored at central configuration information management system . One or more users may possess security manager role by virtue of having the appropriate credentials passwords and or other form of authentication for logging on as a security manager role. Users with security manager role have the required privilege level to access the sets of environment specific configuration information such as the set of production configuration information and the set of QA environment configuration information that are shown in the example and to modify these sets of configuration information at this central location if desired. In some embodiments each set of environment specific configuration information comprises one or more files. In various embodiments each set of environment specific configuration information includes at least topology configuration and security configuration for that environment. As used herein topology configuration refers to configurations used to access systems associated with the environment externally e.g. http https VIP hostname port etc. and configurations used to access components in the deployment internally such as static files load balancers remote services database log file location etc. . For example the topology configuration may comprise a script that determines which port each component used in an application runs on. For example the following sample script may be used to form a URL for accessing certain configuration widget . Thus the wildcard CNAME such as .liujin.vendio.us maps to the developer box and forms URLs for application components such as https share.vendio.liujin.vendio.us 100 widget.js. In some embodiments the set of environment specific configuration information for a particular type of environment may include alternative topology or security configurations to be used by different instances applications of the same environment. As used herein security configuration refers to configurations used to access protected internal sources and or protected third party application programming interfaces APIs such as secret keys and URLs used by third parties e.g. Facebook Twitter Amazon AWS Bitly etc. . In various embodiments users who do not have security manager role cannot access central configuration information management system to modify the sets of environment specific configuration information stored at central configuration information management system . In various embodiments prior to runtime copies of the sets of environment specific configuration information are not stored at locations other than central configuration information management system and or they are not stored with other configuration data e.g. web application configuration . Then during runtime of one or more environments e.g. when applications are to be instantiated in the one or more environments the sets of environment specific configuration information are retrieved by system s associated with environments and stored locally e.g. and temporarily at the systems.

Production environment is managed by users with production application manager role . For example applications instantiated in production environment may be implemented as Web Application Archive WAR files running inside standard one or more Java 2 Platform Enterprise Edition J2EE web containers. In this example production environment is accessible at an URL such as www.app.com i.e. www.app.com is the external access point for that instance of production environment . Users with production application manager role may instantiate an application in production environment . In various embodiments users associated with production application manager role have the required privilege level to perform read only access to central configuration information management system and the set of production environment configuration information but not sets of configuration information specific to environments other than production stored thereof. Users with production application manager role or any other environment specific application manager roles are typically different from users with security manager role . So users typically with production application manger role are only permitted by the identity management system to read the set of production environment configuration information stored at central configuration information management system but are not permitted to modify the set of configuration information as users with security manager role can. When a user associated with production application manager role wishes to instantiate an application in production environment during runtime the user may submit over a network e.g. the Internet the appropriate credentials password and or any other type of authentication to identify himself or itself if the user is a machine operator as having production application manager role to the identity management system and in return the identity management system will grant the user read only access to central configuration information management system to obtain the set of production environment configuration information. The set of production environment configuration information may include the security keys e.g. passwords credentials authentication information needed to access internal services or third party services such as cloud services e.g. which are accessed over a network and or topology configuration such as how the application is to access systems e.g. load balancers web servers associated with production environment externally that are needed to enable the application to run properly. For example cloud services may include Amazon AWS third party APIs and remote databases. In the example at least a portion of cloud services may be accessed at URLs app.data or qa.data. In this example the retrieved set of production environment configuration information is to be used with the web application configuration data e.g. WAR files to complete the instantiation of the production application. In some embodiments the retrieved set of production environment configuration information is stored temporarily e.g. temporarily stored in memory as opposed to persistently store on disk with production environment during runtime of the application.

QA environment is managed by users with QA application manager role in manners similar to how QA environment is managed by users with production environment role . For example applications instantiated in QA environment may be implemented as WAR files running inside standard one or more J2EE web containers. In this example QA environment is accessible at an URL such as www.test.com i.e. www.test.com is the external access point for that instance of QA environment . Users with QA application manager role may instantiate an application in QA environment . In various embodiments users associated with QA application manager role have the required privilege level to perform read only access to central configuration information management system and the set of QA environment configuration information but not sets of configuration information specific to environments other than QA stored thereof. Users with QA application manager role or any other environment specific application manager roles are typically different from users with security manager role . So users typically with QA application manger role are only permitted by the identity management system to read the set of QA environment configuration information stored at central configuration information management system but are not permitted to modify the set of configuration information as users with security manager role can. When a user associated with QA application manager role wishes to instantiate an application in QA environment during runtime the user may submit over a network e.g. the Internet the appropriate credentials password and or any other type of authentication to identify himself to possess QA application manager role to the identity management system and in return the identity management system will grant the user read only access to central configuration information management system to obtain the set of QA environment configuration information. The set of QA environment configuration information may include the security keys e.g. passwords credentials authentication information needed to access internal services or third party services such as cloud services e.g. which are accessed over a network and or topology configuration such as how the application is to access systems e.g. load balancers web servers associated with QA environment externally that are needed to enable the application to run properly. For example cloud services may include Amazon AWS third party APIs and remote databases. In the example at least a portion of cloud services may be accessed at URLs app.data or qa.data. In this example the retrieved set of QA environment configuration information is to be used with the web application configuration data e.g. WAR files to complete the instantiation of the QA application. In some embodiments the retrieved set of QA environment configuration information is stored temporarily as opposed to persistently with QA environment during runtime of the application.

By keeping the sets of environment specific configuration information separate from the other configuration data and also managed by different security roles than those primarily associated with managing the specific environments the sets of environment specific configuration information can be centrally updated by limited users and the updated sets of environment specific configuration information may be managed to being only distributed to specific environments during runtime. Such a system may prevent undesired leaking of security keys across different environments and provide easier management of sets of environment specific configuration information across multiple environments.

In the example the application is represented by the contents within the box depicted for production environment . In the example the topology configuration of set of production environment configuration information may dictate that the application may be externally accessed at URL www.app.com should utilize load balancer that distributes workload across two computers Computer and Computer should use service SVC comprising the service supported by cloud services at URL svc1.app.com and should access database service SVC at URL svc2.app.com SVC represents service and SVC and SVC represent two separate sub services with different endpoint names . In the example security configuration of set of production environment configuration information includes security keys to be used to access cloud services for service SVC and security keys to be used to access database service SVC . Each of security keys and may comprise a credential password and or other form of authentication. In some embodiments a copy of set of production environment configuration information is temporarily stored e.g. in memory with production environment during the runtime of this application.

At runtime environment specific configuration information is defined for a plurality of environments wherein the runtime environment specific configuration information includes topology configuration and security configuration wherein the runtime environment specific configuration information is stored separately from other configuration information and is protected by an identity management system. In some embodiments a set of configuration information is defined for each different type of environment. For example each set of configuration information may include topology configuration and security configuration for the corresponding environment type. Examples of types of environments include production development QA and clone. The sets of environment specific configuration information are stored separately from other configuration data that is used to instantiate an application in a particular environment. The sets of environment specific configuration information are protected by an identity management system that permits one set of users associated with one type of security role e.g. an environment specific security role with privileges to only read one or more of the sets of configuration information and another set of users associated with another type of security role e.g. security manager role with privileges to read and also modify one or more of the sets of configuration information. In some embodiments a user may comprise a human operator or a machine operator e.g. a computer program . In some embodiments the privilege level of a security role may be indicated by at least the credentials associated with that role.

At an application in one of the plurality of environments is executed wherein execution of the application is controlled by a first role. In some embodiments during runtime an application is executed in one of the types of environments for which a set of environment specific configuration information was defined. In some embodiments the application is executed as a result of a user of the first role entering the computer commands and or making one or more selections at a device associated with executing the application. In some embodiments this user has a security role that is associated with the environment in which the application is executing.

At a credential associated with the first role is presented to the identity management system to obtain a portion of the runtime environment specific configuration corresponding to the environment associated with the executing application. In some embodiments credentials e.g. and or a password or any other form of authentication associated with the user s role is presented to the identity management system that protects the sets of environment specific configuration information. In the event that the identity management system authenticates the user then identity management system will grant the user access to retrieve the set of configuration information associated with the environment in which the application is executing. In some embodiments a copy of the retrieved set of environment specific configuration information may be stored local to the user and or the systems on which the application is executing. The application may use environment specific topology configuration and security configuration of the retrieved set of environment specific configuration to receive external communication traffic and access via authentication with security keys to internal components in the deployment.

In various embodiments the technologies utilized in process include one or more of the following Java J2EE Apache Maven Spring Framework Linux Windows Apache Tomcat Jetty cloud services e.g. AWS domain name server service DNS SRV records for dynamic routing to hosts and dynamic version based routing DNS wild card suffixes that allow an application to address multiple VIPs to point to the same developer box configuration system based on Amazon S3 or local files or LDAP etc. .

At an application in an environment is instantiated. In some embodiments an application is instantiated in a particular type of environment e.g. production development QA by a user with a security role associated with that type of environment e.g. production application manager a development application manager and a QA application manager . Instantiating the application includes creating an application using any type of appropriate build framework. For example one can create a web application using Maven and wire the application level configuration via Spring Framework.

During runtime application security keys and logging configuration are loaded in approximately real time from resources outside of the WAR at startup because security and topology configuration information are not stored with WAR files where the code bootstrap fetches a URL for runtime configuration. For example in an embodiment of a development environment a configuration file location e.g. file project.basedir runtimeConfig.properties is passed in as a parameter for the command that invokes the application. In an embodiment of a production environment a URL to the configuration parameters e.g. http s3.amazon bucket prod.env is passed in as the command line parameter that invokes the application. In each environment the security role used to launch the application is required to have access privilege to the configuration URL in order to successfully read and process the configurations. Built in access control e.g. an identity management system such as file system access control S3 control or AWS access control can be used for controlling access to the environment specific configuration information. Further since the underlying JAVA code for processing the configurations can process file protocol and HTTP protocol transparently no if else is required for configuration processing based on different environments.

At configuration information specific to the environment is retrieved. In some embodiments the configuration information including topology configuration and security configuration specific to the environment is retrieved from a location different than where other configuration data is stored. In some embodiments the configuration information specific to the environment is stored with configuration information specific to one or more different environments at a central configuration information management system that is protected by an identity management system. The identity management system can ensure that only those with the right level of privileges can access the environment specific configuration information so as to prevent leaking of sensitive information such as security key to users without the required privilege level credentials. In this example the user that launched the application during runtime may submit credentials to the identity management system to access the appropriate configuration information specific to the environment. If the user becomes authenticated at the identity management system the identity management system grants the user access to retrieve the appropriate configuration information specific to the environment.

In this example each set of environment specific configuration information is stored in a runtimeConfig.properties file. In some embodiments the configuration service that pulls the set of configuration information specific to the environment defined in the runtimeConfig.properties understands where how to pull the configuration for the application for the specific environment.

In order to support multiple environments and individualized environments for developers in some embodiments the above runtimeConfig.properties needs to be parameterized. Parameterizing a runtimeConfig.properties file includes in some embodiments to have a filter run across a template file so that the file is correct for a particular environment. If Maven build system is used this file can be filtered with different maven profiles for example different profiles for different environments such as QA development production etc. by replacing the parameters in the file to generate the final property file for runtime to use for a particular environment.

The following is an example runtimeConfig.properties file storing security and topology configuration information for a particular environment 

In this example sensitive information such as security keys and environment specific information such as topology configuration may be configured differently for different environments.

In some embodiments the production environment runtime configuration file is handled differently than at least one of the runtime configuration files for another type of environment. Since the file contains the security keys and production topology wiring data it may be given extra protection and therefore access to it may be restricted to fewer users with greater access privilege levels such as for example users associated with the security manager role.

At the application is built. If the approach described above where the appropriate environment specific runtimeConfig.properties file is retrieved is followed the application built with the retrieved configuration information and other configuration data would be generic and contain little if any condition execution statements e.g. if else statements in its startup configuration portion.

At the retrieved configuration information is written to one or more local locations. For management purposes in some embodiments the retrieved runtimeConfig.properties file is stored temporarily to one or more local locations so that it may be read locally for an environment with many defaults. In some other embodiments the retrieved runtimeConfig.properties file is not stored locally but rather the file is retrieved from the central configuration information management system each time that it is needed by the application.

At the application is deployed and runtime parameters are imported into the application. The application is deployed and in some embodiments the template runtimeConfig.properties file is filtered depending on mode to be correct for the particular environment. This is to say that the application will then have the proper runtime configuration data once started. It will understand how to talk to each other component that is participated in the same deployment. The security on keys in the runtimeConfig.properties file and other configuration data for application component may be used to access protected sources such as Facebook APIs database access information etc.

The techniques described above support providing runtime configuration information for various types of environments e.g. production QA development and also supports separating security roles for users who may access and modify sets of environment specific configuration information and also users who may only access but not modify the sets of configuration information e.g. during the execution of an application in a particular type of environment .

Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive.

