---

title: Systems and methods for performing backup operations of virtual machine files
abstract: Backup systems and methods are disclosed for a virtual computing environment. Certain examples include a system having a backup management server that communicates with a host server having at least one virtual machine. The management server coordinates with the host server to perform backup copies of entire virtual machine disks from outside the guest operating system of the virtual machine. In certain examples, such backup systems further utilize a volume shadow copy service executing on the host server to quiesce virtual machine applications to put data in a consistent state to be backed up. The backup system then utilizes hypervisor snapshot capabilities of the host server to record intended changes to the virtual machine disk files while such files are being copied (e.g., backed up) by the host server. Such recorded changes can be later committed to the virtual machine disk files once the backup operation has completed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08335902&OS=08335902&RS=08335902
owner: Vizioncore, Inc.
number: 08335902
owner_city: Buffalo Grove
owner_country: US
publication_date: 20120416
---
This application is a continuation of U.S. patent application Ser. No. 13 244 167 filed on Sep. 23 2011 entitled Systems And Methods For Performing Backup Operations Of Virtual Machine Files now U.S. Pat. No. 8 166 265 which is a continuation of U.S. patent application Ser. No. 12 182 364 filed on Jul. 30 2008 entitled Systems And Methods For Performing Backup Operations Of Virtual Machine Files now U.S. Pat. No. 8 046 550 which claims the benefit of priority under 35 U.S.C. 119 e of U.S. Provisional Patent Application No. 61 080 531 filed on Jul. 14 2008 entitled Systems and Methods for Performing Storage Operations in a Virtual Computing Environment the entirety of each of the foregoing provisional and nonprovisional applications is hereby incorporated by reference herein to be considered part of this specification.

Embodiments of the invention relate to performing storage operations in a virtual environment and in particular to performing backup operations of one or more virtual machines.

Many companies take advantage of virtualization solutions to consolidate several specialized physical servers and workstations into fewer servers running virtual machines. Each virtual machine can be configured with its own set of virtual hardware e.g. processor memory ports and the like such that specialized services that each of the previous physical machines performed can be run in their native operating system. In particular a virtualization layer or hypervisor allocates the computing resources of one or more host servers into one or more virtual machines and further provides for isolation between such virtual machines. In such a manner the virtual machine is a representation of a physical machine by software.

Associated with each virtual machine is at least one virtual machine disk that is located in one or more files in a datastore. The virtual machine disk can be copied moved backed up or the like similar to a general data file. However when a virtual machine is powered on or executing on the host computer the virtual machine disk is generally locked against access from outside the virtual machine. As a result to perform a full backup of a virtual machine disk certain conventional backup systems and methods require powering down the virtual machine prior to performing the backup operation.

To avoid the costly downtime in powering down a virtual machine certain systems perform backup operations from inside the guest operating system of the virtual machine. This approach however also has significant drawbacks in that such backup copies being performed from within the guest operating system cannot capture a backup of the entire virtual machine.

Given the aforementioned issues and challenges a need exists for systems and methods for performing backup operations in a virtual computing environment from outside a guest operating system. Moreover there is a need for performing backup copies of virtual machine disks without powering down the respective virtual machine s while maintaining data consistency to provide a clean consistent image when backing up a virtual machine from a hypervisor.

In view of the foregoing certain embodiments of the invention disclosed herein provide a backup tool that allows for the performance of automated backups of virtual machines. In particular certain embodiments of the invention provide systems and methods for the synchronization of shadow copy services with hypervisor external snapshot capabilities to perform the backup of one or more virtual machines.

For instance in certain embodiments of the invention one or more of the above described needs is satisfied through a backup system comprising a backup management server that communicates with a host server to perform backup copies of entire virtual machine disks from outside the guest operating system. In certain embodiments such backup systems utilize a volume shadow copy service executing on the host server to quiesce virtual machine applications to put data in a consistent state to be backed up. The backup system then utilizes hypervisor snapshot capabilities of the host server to record intended changes to virtual machine disk files while such files are being copied e.g. backed up by the host server.

In certain embodiments of the invention a method is disclosed for performing one or more storage operations in a virtual computing environment. The method comprises receiving a request to back up a virtual machine having a guest operating system and being associated with a host server. The method further comprises instructing a shadow copy process to quiesce write requests by application s executing on the virtual machine and creating a hypervisor snapshot of a virtual machine disk file associated with the virtual machine the virtual machine disk file being maintained in a datastore.

Following the creation of the hypervisor snapshot write requests are resumed by the application s executing on the virtual machine and the method records with the hypervisor snapshot changes intended to be made to the virtual machine disk file based on the resumed write requests. Moreover the method includes creating a backup copy of the virtual machine disk file without powering down the virtual machine the backup copy of the virtual machine disk file being created from outside the guest operating system. Following the creation of the backup copy the method then commits the changes recorded with the hypervisor snapshot to the virtual machine disk file.

In certain embodiments a system is disclosed for performing storage operations in a virtualized computing environment. The system comprises a host computer a shadow copy module and a management module. The host computer includes a virtual machine having a guest operating system that accesses resources of the host computer through at least a hypervisor layer. The shadow copy module which executes on the host computer quiesces write requests of application s executing on the guest operating system of the virtual machine.

The management module is in network communication with the host computer and is configured to i receive a request to perform a backup copy of virtual disk file s of the virtual machine ii instruct the shadow copy module to quiesce the write requests of the application s iii instruct the hypervisor layer of the host computer to create a snapshot file of the virtual disk file s of the virtual machine the snapshot file being configured to record changes intended to the virtual disk file s during copying of the virtual disk file s iv instruct the host computer to create a backup copy of the virtual disk file s and v instruct the host computer to commit to the virtual disk file s the changes recorded by the snapshot file during the creation of the backup copy and thereafter to allow write access to the virtual disk file s by the application s executing on the guest operating system.

In certain embodiments a system is disclosed for performing storage operations in a virtualized computing environment. The system comprises means for hosting a virtual machine having a guest operating system that accesses resources of the hosting means through at least a hypervisor layer. The system further comprises means for quiescing write requests of application s executing on the guest operating system of the virtual machine.

Moreover the system comprises means for managing a backup of virtual disk file s of the virtual machine the managing means being further configured to i receive a request to perform a backup copy of virtual disk file s of the virtual machine ii instruct the quiescing means to quiesce the write requests of the application s iii instruct the hypervisor layer of the hosting means to create a snapshot file of the virtual disk file s of the virtual machine the snapshot file being configured to record changes intended to the virtual disk file s during copying of the virtual disk file s iv instruct the hosting means to create a backup copy of the virtual disk file s and v instruct the hosting means to commit to the virtual disk file s the changes recorded by the snapshot file during the creation of the backup copy and thereafter to allow write access to the virtual disk file s by the application s executing on the guest operating system.

For purposes of summarizing the disclosure certain aspects advantages and novel features of the inventions have been described herein. It is to be understood that not necessarily all such advantages may be achieved in accordance with any particular embodiment of the invention. Thus the invention may be embodied or carried out in a manner that achieves or optimizes one advantage or group of advantages as taught herein without necessarily achieving other advantages as may be taught or suggested herein.

Certain embodiments of the invention disclosed herein provide for the automatic backup of virtual machines without powering down the virtual machines thereby avoiding significant interruption of performance of the virtual machine. Moreover certain embodiments of the invention advantageously utilize shadow copy services on a host system to pause virtual machine application writes in order to provide a transitionally consistent backup image of a virtual machine disk for a backup process executing from outside the guest operating system of the virtual machine.

For example certain embodiments of the invention include a system comprising a backup management server that communicates with a host server to perform backup copies of entire virtual machine disks from outside the guest operating system. In certain embodiments such backup systems utilize a volume shadow copy service executing on the host server to quiesce applications running on the virtual machine in order to put data into a consistent state. The backup system then utilizes external hypervisor snapshot capabilities of the host server to record and later commit changes intended to the virtual machine disk files while such files are being backed up by the host server. In this manner a backup of an entire virtual machine disk can be obtained without powering down the virtual machine.

The features of the systems and methods will now be described with reference to the drawings summarized above. Throughout the drawings reference numbers are re used to indicate correspondence between referenced elements. The drawings associated descriptions and specific implementations are provided to illustrate embodiments of the invention and not to limit the scope of the disclosure.

In addition methods and processes described herein are not limited to any particular sequence and the blocks or states relating thereto can be performed in other sequences that are appropriate. For example described blocks or states may be performed in an order other than that specifically disclosed or multiple blocks or states may be combined in a single block or state.

As shown in the backup system includes a host server in communication with a datastore . In certain embodiments the host server comprises one or more computing devices configured to host one or more virtual machines executing on top of a hypervisor . In certain embodiments the hypervisor is configured to decouple the physical hardware of the host server from the operating system s of the virtual machine s . Such abstraction allows for example for multiple virtual machines with heterogeneous operating systems and applications to run in isolation on the same physical machine.

As discussed the hypervisor comprises a virtualization platform that allows for multiple operating systems to run on a host computer at the same time. For instance the hypervisor can comprise a thin piece of software that runs directly on top of the hardware platform of the host server and virtualizes resources of the machine e.g. a native or bare metal hypervisor . In such embodiments the virtual machine s can run with their respective operating systems on the hypervisor without the need for a host operating system. Examples of such bare metal hypervisors can include but are not limited to ESX SERVER by VMware Inc. Palo Alto Calif. XEN and XENSERVER by Citrix Systems Inc. Fort Lauderdale Fla. ORACLE VM by Oracle Corporation Redwood City Calif. HYPER V by Microsoft Corporation Redmond Wash. VIRTUOZZO by Parallels Inc. Switzerland or the like.

In yet other embodiments the host server can include a hosted architecture in which the hypervisor runs within a host operating system environment. In such embodiments the hypervisor can rely on the host operating system for device support and or physical resource management. Examples of such hosted hypervisors can include but are not limited to VMWARE WORKSTATION and VMWARE SERVER by VMware Inc. VIRTUAL SERVER by Microsoft Corporation PARALLELS WORKSTATION by Parallels Inc. or the like.

The hypervisor in certain embodiments of the invention is capable of creating a snapshot of a virtual file system and or one or more virtual disk files in order to record changes intended to such files during a certain period of time e.g. during a backup operation .

In certain embodiments each virtual machine comprises an operating system and associated applications which typically operate at a user level. That is in such embodiments the virtual machine accesses the resources e.g. privileged resources of the host server through the hypervisor .

The host server communicates with the datastore to access data stored in one or more virtual machine files. For instance the datastore can comprise one or more virtual machine file systems that maintain virtual disk files for each of the virtual machines on the host server . In certain embodiments the virtual machine file system comprises a VMWARE VMFS cluster file system provided by VMware Inc. In such embodiments the VMFS cluster file system enables multiple host servers e.g. with installations of ESX server to have concurrent access to the same virtual machine storage and provides on disk distributed locking to ensure that the same virtual machine is not powered on by multiple servers at the same time.

The datastore can comprise any type of formatted logical container for holding virtual machine files and can exist on a physical storage resource including one or more of the following local disks e.g. local small computer system interface SCSI disks of the host server a disk array a storage area network SAN e.g. fiber channel an iSCSI disk area network attached storage NAS arrays network file system NFS or the like. In certain embodiments the virtual machine s uses a virtual hard disk residing on the datastore to store its operating system program files and other data associated with its activities.

The backup system further includes a management server in communication with the host server through a network . In certain embodiments the management server coordinates the backup operations of the virtual machine disk files through the host server . In certain embodiments the management server can comprise any computing device capable of executing a backup tool such as for example a WINDOWS based server or the like for performing the backup functions described herein.

In certain embodiments and as discussed in more detail herein the management server coordinates with a volume shadow copy service VSS installed on the virtual machine s and or host server such as the VSS service offered by MICROSOFT with the creation of a hypervisor snapshot in backing up of one or more virtual disk files .

For example the hypervisor can be configured to create the snapshot of a virtual file system and or one or more virtual disks in order to record changes intended to such data during a certain period of time e.g. during a backup operation . In certain embodiments after creating the snapshot the hypervisor then redirects and or queues writes directed from applications on the virtual machine to the virtual disk file s . At a subsequent time e.g. when the backup process is complete the intended changes are then committed to the virtual disk file s . Moreover because the hypervisor coordinates the snapshot functions from outside the guest operating system of the virtual machine a complete and consistent image of the virtual disk is able to be obtained without powering down the virtual machine .

As further illustrated in the backup system includes a backup or target server for storing backup files such as a backup of one or more of the virtual disk files . As shown the backup server is coupled to the network and can directly communicate therethrough with the management server . In certain embodiments the backup server comprises a WINDOWS based backup server. In yet other embodiments the backup server can comprise a LINUX based server an ESX server combinations of the same or the like.

As shown the network provides a wired and or wireless communication medium between the host server the management server and or the backup server . In certain embodiments the network can comprise a local area network LAN . In yet other embodiments the network can comprise one or more of the following internet intranet wide area network WAN public network combinations of the same or the like. In addition connectivity to the network may be through for example remote modem Ethernet token ring fiber distributed datalink interface FDDI asynchronous transfer mode ATM combinations of the same or the like.

Although the backup system has been described with reference to particular arrangements other embodiments of the invention can comprise more or fewer components. For example in certain embodiments the backup system can function without the backup server and backup files can be stored to the datastore or a local storage device directly coupled to the management server or host system .

In yet other embodiments the host server can comprise a plurality of servers in a clustered arrangement such that the computing and memory resources of the clustered servers are shared by one or more virtual machines . Moreover in certain embodiments a portion or all of the backup tool maintained by the management server can reside on the host server and or the backup server .

As shown the backup system comprises a host server A that communicates through a fiber switch with a datastore . In particular the host server includes a virtual machine A and a virtual machine B running on a hypervisor such as the VMware ESX hypervisor.

In certain embodiments the datastore comprises a SAN or like shared storage network that includes a plurality of virtual machine file systems storing data for a plurality of virtual machines executing on a plurality of host servers. In particular a VMFS A stores data related to the virtual machine executing on the host server .

The VMFS further includes a plurality of files related to the virtual machine . A VM A.VMDK file includes the virtual hard drive for the virtual machine . In certain embodiments most of a .VMDK file s content comprises the data of the virtual machine while a small portion is allotted to overhead of the virtual machine. If the virtual machine is connected directly to a physical disk rather than to a virtual disk the .VMDK file can also store information about the partitions the particular virtual machine is allowed to access.

In certain embodiments the VM A.VMDK file can be a dynamic virtual disk in which the disk grows as the disk inside the guest operating system of the virtual machine grows. In yet other embodiments the VM A.VMDK file can comprise a fixed size virtual disk. In certain embodiments of the invention the virtual disk of a single virtual machine can comprise multiple .VMDK files. For instance an administrator or other user can specify a maximum size of each .VMDK file e.g. 2 GB chunks . In such embodiments the number of .VMDK files depends on the size of the virtual disk.

The datastore also comprises a VM A.VMX file which includes configuration data for the virtual machine . The datastore further includes additional virtual machine file systems including VMFS B VMFS C and VMFS D . In particular the VMFS stores virtual machine files related to the virtual machine on the host server . The VMFS stores virtual machine files related to a virtual machine C on a host server B . The VMFS D stores virtual machine files related to a virtual machine D on a host server D .

Moreover in certain embodiments either or both of the host servers and can comprise an ESX server or other like virtualization platform such as those described above for running their respective virtual machines.

In certain embodiments the backup module comprises the VRANGER PRO software tool available from Vizioncore Inc. Buffalo Grove Ill. . For instance the backup module can execute on a WINDOWS based server to perform automated backup of virtual machines running in the VMware ESX server environment. In yet other embodiments all or a portion of the backup module can be executed on one or more host servers.

The management server further includes one or more binary files . In certain embodiments the binary files can be injected into the host server to perform one or more functions relating to the backup of one or more virtual machine files. For instance the binary files comprise a compression binary file that can be used to inject a compression engine into the host server for compressing a backup file prior to transmitting the backup file to storage.

The management server further includes a user interface module for displaying to and or receiving from a user information relating to operation of the management server . In certain embodiments the user interface module causes the display of one or more windows for obtaining user input and or outputting status information with respect to the virtual environment.

In certain embodiments in preparation for performing a backup operation of the virtual machine the backup module of the management server is configured to initiate a VSS service on the host server to temporarily quiesce write requests from application s executing on the virtual machine . For instance in certain embodiments the VSS service can comprise the VSS service available from MICROSOFT. In certain embodiments the backup module comprises a driver that communicates with the VSS service on the host server to initiate the service.

The backup module further coordinates with the hypervisor layer of the host server to open an external hypervisor snapshot on the datastore e.g. on the SAN to record changes to the virtual machine disk files during copying and or backup of the VM A.VMDK and or VM A.VMX files relating to the virtual machine . For instance in embodiments wherein the hypervisor layer comprises an ESX SERVER platform the hypervisor layer can create a vmsnap of the virtual machine data.

The backup system further includes a backup server for storing the backed up virtual machine files. For instance the backup server stores a VM A backup file comprising a backup of one or more files relating to the virtual machine on the host server . In certain embodiments the VM A backup file comprises a full backup of the entire virtual disk of the virtual machine . Moreover in certain embodiments the VM A backup file is advantageously compressed prior to being received by the backup server .

In yet other embodiments the backup system can comprise other types of destination storage devices and or storage networks for receiving the VM A backup file . For instance the backup module can cause the VM A backup file to be stored in the datastore such as in a new technology file system NTFS or other location.

Although the backup system has been described with reference to particular arrangements other embodiments of the invention can differ. For example the datastore can comprise a virtual machine file system that stores data for a plurality of virtual machines executing on any of the host servers and .

Moreover the management server may further optionally comprise and or communicate with a preferences database for scheduling the backup of one or more virtual machines. Furthermore the management server can maintain a catalog or index of backup archives and or facilitate restore operations with respect to the backup archives.

The backup process begins with Block in which write requests from applications running on the virtual machine are temporarily quiesced. In certain embodiments a shadow copy service e.g. VSS service installed on the virtual machine and or host server instructs writers from the virtual machine application s to quiesce their data and to temporarily freeze requestor I O write requests.

At Block activity is flushed from memory of the virtual machine on the host system to disk e.g. to the VM A.VMDK file on the datastore . At that point the virtual machine file system is frozen to ensure that the file system metadata is written and that the data is written in a consistent order.

At Block the backup module instructs the host server to create a hypervisor snapshot of the virtual machine file system . In particular the hypervisor snapshot provides a means for recording or queuing changes intended to be made to the virtual machine files while the virtual machine files are being backed up. That is in certain embodiments creating the hypervisor snapshot allows for the obtaining and or unlocking of the virtual machine files e.g. VM A.VMDK file and or VM A.VMX file for backup and prevents changes from being made to the virtual machine files by other applications running on the virtual machine . For instance the virtual machine files may be unlocked with respect to the virtual machine for read only access by backup tools for performing the requested backup operation.

Once the hypervisor snapshot is created the shadow copy process is allowed to proceed Block and to thaw the file system by releasing the application writers from their temporary inactive phase Block . The hypervisor snapshot then houses any additional changes directed to the virtual machine files after the writers are released and during the unlock phase of the virtual machine files. In certain preferred embodiments the shadow copy process is allowed to proceed concurrently with the maintaining of the snapshot and is structured such that the shadow copy process automatically deletes the generated shadow copy once the copy process has completed.

At Block the host server performs a copy of the virtual machine files obtained from the virtual machine file system and unlocked upon the creation of the hypervisor snapshot . In certain embodiments such copying by the host server includes loading the virtual machine files into memory of the host server and compressing the files prior to writing the files to disk e.g. as the VM A backup file to backup server . For instance the backup module and or management server can instruct processes executing on the host server to read one or more blocks from the virtual machine file s for copying to compress the copied blocks and to transport the compressed copied blocks through a pipeline to the intended destination.

In certain embodiments the backup module and or management server injects one or more binary files into the host server memory to perform the copy and or compression processes. In certain preferred embodiments once the copy and or compression processes have completed the injected binary files are removed from the host server .

In certain embodiments the copy process of Block advantageously reduces backup time and or resources by compressing the backup data in memory prior to being written to disk e.g. on the backup server . For instance the backup process may comprise taking a 10 GB virtual disk compressing the backup file in memory and transmitting the backup file as a 4 GB file to the datastore .

As discussed above during the copy process of Block the virtual machine files are not available for writing with respect to applications running on the virtual machine . Rather the hypervisor snapshot maintains a record of changes directed to the virtual machine files based on write requests and or data modification operations received from one or more virtual machine applications.

Once the copy process of Block is complete the changes housed by the hypervisor snapshot are committed to the original virtual machine files Block . In certain embodiments the backup module causes the host server to execute a committing algorithm to merge the recorded changes to the virtual machine files. For example in embodiments of the invention operating in an ESX SERVER environment the VMware application programming interface API RemoveSnapshot Task can be used to commit the changes recorded by the hypervisor snapshot . In certain embodiments the commit algorithms are selected to reduce downtime experienced by the virtual machine while the recorded write operations are being committed to the virtual machine files. Moreover during the commit phase additional writes received from the virtual machine applications can be temporarily queued until they too are committed to the virtual machine files.

After the writes and or data modification operations are committed the virtual machine files are returned to their original state and locked once again for normal access by applications of the virtual machine . At this point the virtual machine files are again available to be written to by the virtual machine applications.

Although the backup process has been described with reference to particular blocks and states other embodiments of the invention can comprise more or fewer blocks or states. For instance in certain embodiments the copying of the virtual machine files e.g. Block is performed using the VMware Consolidated Backup VCB tool in connection with the quiescing services of the VSS service . In yet other embodiments the management server can perform the creation and or compression of the backup file instead or or in combination with the host server .

At Block the host server receives a request from the management server to back up the virtual machine . In certain embodiments the request is based on a backup schedule or other retention policy maintained and or accessed by the management server . In yet other embodiments the backup request is initiated by a user.

At Block the backup module initiates the MICROSOFT VSS service residing on the host server . For instance the backup module can comprise a driver for communicating with and causing the VSS service to enumerate the application writers on the virtual machine gather writer metadata and prepare the virtual machine for shadow copy creation.

At Block the VSS service temporarily quiesces write requests from applications executing on the virtual machine . In certain embodiments the VSS service causes the application writer s to create an XML description of the backup components to the VSS service and also defines the restore method for the writers.

The VSS service also notifies the application writer s to prepare their data for making a shadow copy. In certain embodiments the writer s prepare their data in whatever way is appropriate such as for example completing all open transactions rolling transaction logs and or flushing caches. When the data is prepared for shadow copy creation each writer sends a notification to the VSS service .

Upon receiving the notifications from the virtual machine application writers the VSS service initiates the commit shadow copy phase and instructs the application writers to quiesce their data and temporarily freeze any I O write requests. In certain embodiments during this process I O read requests by the virtual machine applications are still possible since no modification of the virtual machine files occurs.

In certain embodiments the application freeze is not permitted to last longer than sixty seconds in order to reduce undesired downtime of the virtual machine . In other embodiments the application freeze can be of a longer duration.

During this time data is also flushed from the buffer memory of the VMFS to disk Block after which the VMFS is frozen to ensure that file system metadata is written and that the data is written in a consistent order Block .

At Block the backup module issues a call to unlock the virtual machine disk VMDK files for read only purposes and to create the hypervisor snapshot of the VMFS . In certain embodiments the backup module uses a VMware API to instruct a VMware sync driver to open the hypervisor snapshot to create a point in time copy of the VMFS . Moreover in certain embodiments although the VMDK files are unlocked for read only purposes with respect to the processes performing the backup operation the hypervisor can retain full read write access to the unlocked VMDK files.

In certain embodiments the snapshot comprises a VMDK file or a .REDO log for housing subsequent changes directed to the VMDK files during processing. For instance in an ESX server environment one or more redo log files e.g. VM A 001.VMDK can be created automatically by the hypervisor or other module when the virtual machine has one or more corresponding snapshots open. The redo log file s then store changes made to the virtual disk e.g. VM A.VMDK while the virtual machine is still running. For instance in certain embodiments the hypervisor redirects any write requests or data modification requests intended for the virtual disk to the redo log file while the virtual disk is unlocked for backup.

Once the snapshot is generated the VSS service is allowed to continue to create a non persistent shadow copy of the VMFS . In certain embodiments the backup module initiates the VSS service in an auto release mode thereby ensuring that the created shadow copy will be non persistent and will automatically delete itself upon completion e.g. prior to the committing of the changes to the VMDK . Moreover because the shadow copy is created after the hypervisor snapshot is generated the backup copy of the virtual machine disk does not include the shadow copy data.

With the snapshot open and ready to house requested changes to the VMDK files the VSS service thaws the VMFS file system and releases the application writers from their temporary inactive phase Block . Queued write I Os are then completed.

In certain embodiments the VSS service can also query one or more writers to confirm that the write I Os were successfully held during the freeze. If the writes were not successfully held the VSS service can notify the backup module and the backup process can be aborted and or restarted.

Once the application writers are released the snapshot is configured to house any changes directed to the VM A.VMDK Block until the changes are committed to the VMDK file and the VMDK file is restored to its original state. As discussed above in certain embodiments Block comprises the hypervisor redirecting or recording writes received from virtual machine applications to the snapshot file redo log file or like data structure.

At Block while the snapshot is open and housing the changes to the VMDK file the host server begins compressing and creating a backup of the VMDK file. In certain embodiments the VMDK file is read into memory in one or more portions and is compressed to eliminate white space as well as shrink the data size.

In certain embodiments the backup module manages the compression process by injecting the compression binary file into the host system . As discussed above performing such compression in memory of the host system substantially reduces the time required to perform the backup operation as well as reduces resource consumption in performing the backup operation.

In certain embodiments as the copying and compression is taking place the compressed backup data is streamed e.g. through a pipeline configuration to a backup location such as the backup server received from the backup module Block . In certain embodiments the backup location can comprise a WINDOWS or LINUX destination or can comprise a particular VMFS or logical unit number LUN .

Once compression of the VMDK backup file is complete the changes recorded by the hypervisor snapshot are committed to the original VMDK file Block . In certain embodiments the VMware API RemoveSnapshot Task is used to commit the changes to the VMDK file. In certain preferred embodiments the committing algorithm is structured to reduce downtime for the virtual machine as the changes are being committed to the VMDK file.

At Block once the changes are committed to the VMDK file the VMDK file is returned by the host server to its original state and is locked once again for general operation and write access by the virtual machine applications. The backup process then proceeds with Block to complete the transfer of the compressed file to the destination location.

At Block the backup module receives restore information for the VM A backup file . For example the restore information can be used in a restore process and can include for example who performed the backup compression information encryption information list of files file size information last modified and or access times file metadata combinations of the same and the like. In certain embodiments at least a portion of the restore information is received from an administrator in an information file that is associated with the backup file.

Although the backup process has been described with reference to particular blocks and states other embodiments of the invention can comprise different blocks and or arrangements. For instance in certain embodiments the backup process can be performed without compression and or with encryption. In yet other embodiments the hypervisor snapshot can comprise a plurality of snapshot files for recording intended changes to the virtual disk files or other like information while the virtual disk files are unlocked for backup purposes.

As shown the backup option window is configured to receive information from a user and or administrator to define backup criteria. Such criteria can include for example instructions regarding evaluating free space on a destination disk compression updating results varying write speeds combinations of the same and the like. In particular the backup option window includes an enable VSS option that can be selected when preparing for a backup operation. In certain embodiments when the option is selected the backup system proceeds with using a volume shadow copy service to prepare one or more virtual machines to be backed up as described in more detail herein.

Although the backup option window is depicted with respect to a particular arrangement other embodiments of such a window can be used that contain more or fewer options. For example the backup option window can further include options relating to the performance of other types of backup operations such as for example incremental and or differential backup operations.

Certain embodiments of the invention can be embodied as methods and systems for practicing those methods. Embodiments of the invention can also be embodied in the form of computer program code embodied in tangible media such as floppy diskettes CD ROMs hard drives a thumb drive DVD data discs or any other computer readable storage medium wherein when the computer program code is loaded into and executed by a computer the computer becomes an apparatus for practicing embodiments of the invention. The program code encoded in tangible media creates the means for causing the computer to perform the various steps of such embodiments of the invention. When implemented on a general purpose microprocessor the computer program code combines with the microprocessor to provide a unique device that operates analogously to specific circuits.

Moreover certain embodiments of the invention are described above reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the acts specified in the flowchart and or block diagram block or blocks.

While certain embodiments of the inventions have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the disclosure. Indeed the novel methods and systems described herein may be embodied in a variety of other forms furthermore various omissions substitutions and changes in the form of the methods and systems described herein may be made without departing from the spirit of the disclosure. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of the disclosure.

