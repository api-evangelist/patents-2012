---

title: Profiling application code to identify code portions for FPGA implementation
abstract: Application code is analyzed to determine if a hardware library could accelerate its execution. In particular, application code can be analyzed to identify calls to application programming interfaces (APIs) or other functions that have a hardware library implementation. The code can be analyzed to identify the frequency of such calls. Information from the hardware library can indicate characteristics of the library, such as its size, power consumption and FPGA resource usage. Information about the execution pattern of the application code also can be useful. This information, along with information about other concurrent processes using the FPGA resources, can be used to select a hardware library to implement functions called in the application code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09298438&OS=09298438&RS=09298438
owner: Microsoft Technology Licensing, LLC
number: 09298438
owner_city: Redmond
owner_country: US
publication_date: 20120620
---
In most general purpose computers an operating system is the primary software that manages access to resources within the computer. The primary resources are the central processing unit CPU which executes application programs designed to run on the computer main memory and storage. In some computer architectures additional processing units such as multiple cores in a processor and or additional processors called co processors may be present. Examples of such co processors include a graphic processing unit GPU and a digital signal processor DSP . The operating system also manages access to these resources by multiple processes.

A field programmable gate array FPGA is a kind of logic device that is commonly used in specialized computing devices. An FPGA typically is used to perform a specific dedicated function for which a gate array is particularly well suited. FPGAs typically are found in peripheral devices or other specialized hardware such as a printed circuit board connected to and accessed through a system bus such as a PCI bus. In general such devices are programmed once and used many times. Because these devices are programmable they have an advantage over other specialized logic devices in that they can be updated in the field.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

One or more field programmable gate arrays FPGA can be used as a shared programmable co processor resource in a general purpose computing system. An FPGA can be programmed to perform functions which in turn can be associated with one or more processes. With multiple processes the FPGA can be shared and a process is assigned to at least one portion of the FPGA during a time slot in which to access the FPGA. Programs written in a hardware description language for programming the FPGA are made available as a hardware library. The operating system manages allocating the FPGA resources to processes programming the FPGA in accordance with the functions to be performed by the processes using the FPGA and scheduling use of the FPGA by these processes.

The use of a hardware library by an application can be explicit or the application code can be analyzed to determine if a hardware library could accelerate its execution. In particular application code can be analyzed to identify calls to application programming interfaces APIs or other functions that have a hardware library implementation. The code can be analyzed to identify the frequency of such calls. Information from the hardware library can indicate characteristics of the library such as its size power consumption and FPGA resource usage. Information about the execution pattern of the application code also can be useful. This information along with information about other concurrent processes using the FPGA resources can be used to select a hardware library to implement functions called in the application code.

In the following description reference is made to the accompanying drawings which form a part hereof and in which are shown by way of illustration specific example implementations of this technique. It is understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the disclosure.

The following section provides a brief general description of an example computing environment in which an operating system for managing use of FPGA resources can be implemented. The system can be implemented with numerous general purpose or special purpose computing devices. Examples of well known computing devices that may be suitable include but are not limited to personal computers server computers hand held or laptop devices for example media players notebook computers cellular phones personal data assistants voice recorders multiprocessor systems microprocessor based systems set top boxes game consoles programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

With reference to an example computing environment includes a computing device . In a basic configuration computing device includes at least one processing unit such as a typical central processing unit CPU of a general purpose computer and memory .

The computing device may include multiple processing units and or additional co processing units such as a graphics processing unit GPU . The computing device also includes one or more field programmable gate arrays FPGA denoted as FPGA unit which is available as a shared among processes running on the computer co processing resource. An FPGA may reside in its own CPU socket or on a separate card plugged into an expansion slot such as a Peripheral Component Interconnect Express PCI E slot. By providing such an FPGA unit a variety of functions that are well suited for implementation by a gate array can be implemented with the resulting benefit of hardware acceleration.

Depending on the configuration of the processing unit and the FPGA unit the unit or each functional unit within it has an associated input output channel for communication with host operating system processes. For example a memory region dedicated to the functional unit and shared between it and a process using that functional unit can be provided. A sort of request queue and response queue also can be used to enable asynchronous invocation of operations implemented in the FPGA unit. Additionally state of the functional units in the FPGA unit for a process can be saved to and restored from a memory region for the functional unit and that process. Alternatively other techniques can be used to ensure that the functional unit is in a known state before it is used by its process.

Depending on the configuration and type of computing device memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. This configuration of a processing unit co processor and memory is illustrated in by dashed line .

Computing device may also have additional resources and devices. For example computing device may include additional storage removable and or non removable including but not limited to magnetic or optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer program instructions data files data structures program modules or other data. Memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computing device . Any such computer storage media may be part of computing device .

Computing device also can include communications connection s that allow the device to communicate with other devices over a communication medium. The implementation of the communications connection is dependent on the kind of communication medium being accessed by the computing device as it provides an interface to such a medium to permit transmission and or reception of data over the communication medium. A communication medium typically carries computer program instructions data files data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

Computing device may have various input device s such as a keyboard mouse pen camera touch input device and so on. Output device s such as a display speakers a printer and so on may also be included. All of these devices are well known in the art and need not be discussed at length here.

Applications executed on a computing device are implemented using computer executable instructions and or computer interpreted instructions such as program modules that are processed by the computing device. Generally program modules include routines programs objects components data structures and so on that when processed by a processing unit instruct the processing unit to perform particular tasks or implement particular abstract data types. In a distributed computing environment such tasks can be performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

An operating system executed on a computing device manages access to the various resources of the computer device by processes. Typically running an application on the computer system causes one or more processes to be created with each process being allocated to different resources over time. If a resource is shared among processes and if the processes cannot share the resource concurrently then the operating system schedules access to the resource over time. One of such resources is the FPGA unit of which can include one or more discrete FPGA s.

Referring to one of the resources within the FPGA unit is one or more groups of programmable gates herein called functional units. Each functional unit is defined by a set of gates and or other resources in the gate array. In general functional units are nonoverlapping i.e. do not share programmable elements within the gate array. For example as illustrated schematically in functional units and are non overlapping. Most FPGAs have only one functional unit. The FPGA unit in however can have one or more FPGAs. With multiple FPGAs each FPGA can be considered a functional unit. Referring to each functional unit is a resource that can be assigned to one or more processes programmed by the operating system using a hardware library that implements an operation and then used by the processes assigned to it to perform the operation. Referring to as an example an application can use conventional software libraries and FPGA hardware libraries to perform various operations. If an application relies on a hardware library then the operating system uses the hardware library to program the FPGA resources to allow the application to use the library. The FPGA can be programmed prior to the application beginning execution. If an FPGA can be reprogrammed quickly enough the library can be loaded into the FPGA in a scheduling quantum of the operating system. The operating system also executes software commands from the application and software libraries on the CPU . When the application makes calls to functions performed by a software library the operating system executes the function from the software library on the CPU . When the application makes calls to functions performed by the FPGA the operating system ensures that the FPGA is programmed using the hardware library and executes the function using the FPGA.

To illustrate how different functional units can be used over time reference is now made to . In at time T functional units and are being used. At time T functional units and are being used. At time T functional units and are again being used. At time T functional unit can be assigned to process P and functional unit can be assigned to process P. At time T process P may be inactive and process P can use functional unit and process P can use functional unit . At time T another process can start using functional unit such as process P and process P can be active again at use functional unit . With current FPGA implementations the use of multiple functional units at the same time by different processes implies the use of multiple FPGAs. To the extent that an FPGA can support multiple functional units being used by different processes at the same time these functional units can be on the same FPGA. Effectively the operating system is statistically multiplexing the FPGA in both time and space.

To allow such usage of the FPGA resources by different processes over time the operating system has a scheduler that determines which process has access to the FPGA resources at each scheduling quantum i.e. time period and when an FPGA functional unit will be programmed with a hardware library so that the functional unit is available to be used by that process. Thus an implementation of a scheduler for the FPGA unit is dependent in part on the nature of the FPGA unit and the one or more FPGAs it includes. Factors related to the FPGAs to be considered include but are not limited to the following. For example in some cases an entire FPGA is refreshed to program a functional unit if one functional unit cannot be programmed independently of other functional units. Another consideration is the speed with which a functional unit can be programmed and whether programming of a functional unit prevents other functional units from being used during that programming phase. Another factor to consider is whether processes can share a hardware library by sharing a functional unit. The scheduler also takes into account such factors as the number of concurrent processes application performance guarantees priority of applications process context switching costs access to memory and buses and availability of software libraries if no functional unit is available within the FPGA unit.

There may be other instances where the FPGA unit provides a general purpose facility to applications or the operating system which therefore are scheduled for the length of an application instantiation. For example custom network protocols or offloading can be offered as an accelerated service on the FPGA unit. System calls or standard library calls normally executed in a general purpose CPU can be accelerated using the FPGA unit instead. Further the operating system can multiplex the CPU based on preferences for process priority. In another instance the operating system can use a profile of an application generated statically or dynamically to predict the functionality best suited for running on an FPGA unit and then pre load that functionality so that it is available for scheduling. By using the profile as a guide the operating system can ensure there is both space and time available on the FPGA unit to accelerate the application. Finally the operating system can use simple hints from the application to know when to schedule time on the FPGA unit. For example certain calls into the operating system system calls can denote long delays calls to disk or the network which provides a hint that the FPGA unit can be free for some amount of time for other threads or processes to use. Therefore the operating system uses a variety of hints and preferences to create a schedule to multiplex access to the FPGA unit. Because the operating system controls the scheduler it has detailed knowledge of executing and pending work available hardware libraries and time it takes to program an FPGA. Therefore it can use this knowledge to determine which processes leverage the FPGA during execution.

Having now described a general overview of such computer architecture an example implementation of code profiling will now be described.

Referring now to a code analyzer receives the application code . The code analyzer also has access to the hardware library or at least an index for the hardware library to identify available hardware libraries. The code analyzer identifies hardware libraries that are available to implement various functions within the application code . The information about the hardware libraries that can be provided includes but is not limited to code size power consumption data resource data indicating which slices of the FPGA are used etc. The code analyzer also can output information about the frequency of calls made to such a hardware library.

A selection module receives the information about the hardware libraries and the information about the calls made the libraries to make a selection about which hardware libraries are to be used. The selection module also can receive data from a scheduler for example about other concurrent processes to assist in this selection. Other data about the execution pattern from prior executions of the application code also can be used to assist in this selection. Given the input information the selection module provides an output indicating the hardware libraries that have been selected to assist in accelerating processing by the application code .

The code analyzer can be implemented in any of a variety of conventional ways for identifying calls to a library. In this case the calls are being made to a library with a hardware implementation. In one example the code analyzer searches the application code for references to functions or objects having implementations in the hardware library and outputs information about those hardware libraries. In another example the code analyzer identifies traps into the operating system which denote system calls. If operating system functionality has been offloaded onto an FPGA the traps can be redirected to different code paths within the operating system by rewriting the registers used to pass data into the kernel with hints or appropriate data for a call to an FPGA.

A flowchart for an example implementation of the selection module will now be described in connection with . After receiving the output of the code analyzer identifying the available hardware libraries the selection module accesses information about the hardware libraries such as the code size power consumption FPGA resource consumption and the like. Information about the frequency of calls to this library in the code is received . If there are concurrent processes using the FPGA this information also is received . Finally information about the execution pattern of the application code including the number of times the library has been invoked in prior executions of the application code is received . Using the variety of received information one or more of the available hardware libraries can be selected .

Any specific process to implement such selection is dependent on the application and type of FPGA resources being used. In the simplest case the hardware libraries can be selected for use if there are no conflicts with other processes in using the FPGA resources and if the projected utilization of the FPGA resources is estimated to provide better acceleration of the application than if a software library were used instead.

The terms article of manufacture process machine and composition of matter in the preambles of the appended claims are intended to limit the claims to subject matter deemed to fall within the scope of patentable subject matter defined by the use of these terms in 35 U.S.C. 101.

Any or all of the aforementioned alternate embodiments described herein may be used in any combination desired to form additional hybrid embodiments. It should be understood that the subject matter defined in the appended claims is not necessarily limited to the specific implementations described above. The specific implementations described above are disclosed as examples only.

