---

title: Centralized operation management
abstract: A novel security framework that is part of an operating system of a device is provided. The framework includes a security assessor that performs security policy assessments for different operations that need to be performed with respect to an application executing on the device. Examples of such operations include the installation of the application, execution of the application, and the opening of content files (e.g., opening of documents) by the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09137261&OS=09137261&RS=09137261
owner: APPLE INC.
number: 09137261
owner_city: Cupertino
owner_country: US
publication_date: 20120921
---
This present application claims the benefit of U.S. Provisional Patent Application 61 595 021 filed Feb. 3 2012. U.S. Provisional Patent Applications 61 595 021 is incorporated herein by reference.

The identity and authenticity of programs stored and running on a computer system is a fundamental security issue for users. Essentially users want the programs with which they interact to perform as the programs are advertised. Users may encounter problems when they trust a specific program while the program behaves in an unexpected way. In some situations the program may have been deliberately altered or a virus or other security issue may be present. More often than not the program simply behaves differently than the user initially expected because it does not come from a trusted source it has been altered at some point rendering it incompatible with other components or it is ineffective for some other reasons.

Running on modern computers are thus a slew of security programs attempting to address this problem. Each of these applications addresses a set of security needs of the computer. They include anti virus applications firewalls malware detection programs signature checking mechanisms etc. Some of these programs are offered as part of the operating system some are integrated into Internet browsers while others are purchased or even downloaded from third party vendors.

However these programs are not consistent mechanisms for establishing authentication of identities. They cannot be relied upon to comprehensively check all operations running in the operating system even though any operation running in the system may introduce data objects that come from untrustworthy sources and damage the computer. These processes often fail to perform optimally in the operating system and slow down the overall system speed. The hodge podge nature of these security programs makes it difficult or impossible to introduce a set of uniform security interface programming for software developers. Worse yet some of these hodge podge assortments of security assessment programs may have come from sources that have yet to be properly certified as trustworthy.

What is needed is consistent mechanism for establishing authentication of identities. Specifically what is needed is a security assessment mechanism that is fully integrated with the operating system to offer consistent performance comprehensive examination of operations taking place in the operating system and uniform software development support.

Some embodiments of the invention provide a novel security framework for a device. In some embodiments this framework is part of the operating system of the device. The framework of some embodiments includes a security assessor that performs security policy assessments for different operations that need to be performed with respect to an application executing on the device. Examples of such operations include the installation and execution of the application and the opening of content files e.g. opening of documents by the application.

In some embodiments the device has an operation initiator that receives requests for different operations with respect to the application. Upon receiving such a request the operation initiator directs the security assessor to check the viability of the requested operation based on security policy rules that are stored in a security policy data storage. Security policy rules in some embodiments are used to check on the validity of the downloaded programs to verify the source or publisher of the program etc. If a security policy rule allows the requested operation the security assessor informs the operation initiator that the operation has been approved and the operation initiator directs the appropriate operation handler e.g. installer executor or file opener to perform the requested operation.

In some embodiments the security policies are embodied in different rules or instructions that are stored in a rules database. The rules in the rules database specify what is required of data objects e.g. program code or documents to open in order for them to comply with the computer s security policy. In some embodiments the rules database includes different tables in order to make queries on the rules database more efficient. An authority table and a cache table are two examples of such tables.

Assessing the security of a data object under a security policy in some embodiments requires examining the authority table s entries in the rules database in the order set forth by their priorities. For any given security assessment for a data object in these embodiments lower priority rules become applicable only when higher priority rules are not applicable. A higher priority rule supersedes lower priority rules where they overlap. Hence any change to a higher priority rule potentially changes the applicability of lower priority rules.

The operation initiator in some embodiments performs the security assessment for each operation that is requested for the application. In other embodiments the operation initiator performs the security assessment only for some of the operations that are requested for the application. For instance in some embodiments the assessment is performed only for the installation of a newly received application or only for the initial opening of a newly received file by the application. To facilitate this approach the device of some embodiments associates a tag with newly received applications and newly received files when such files are first loaded onto the device or opened for the first time e.g. first downloaded through a network or through a peripheral interface of the device .

The security assessor of some embodiments approve or disapprove the validity of one or more data files by verifying the validity of a data structure such as an archive containing the data files. In such some embodiments the archives carry signature of identity which can be used to securely authenticate the data files and identify the source of the data files included in those archives. More specifically the operating system of these embodiments includes rules in the rules database that approve or disapprove documents or data files based on the signature embedded in the archive structures containing those documents or data files. A document in an approved archive is automatically approved.

The preceding Summary is intended to serve as a brief introduction to some embodiments of the invention. It is not meant to be an introduction or overview of all inventive subject matter disclosed in this document. The Detailed Description that follows and the Drawings that are referred to in the Detailed Description will further describe the embodiments described in the Summary as well as other embodiments. Accordingly to understand all the embodiments described by this document a full review of the Summary Detailed Description and the Drawings is needed. Moreover the claimed subject matters are not to be limited by the illustrative details in the Summary Detailed Description and the Drawings but rather are to be defined by the appended claims because the claimed subject matters can be embodied in other specific forms without departing from the spirit of the subject matters.

In the following description numerous details are set forth for the purpose of explanation. However one of ordinary skill in the art will realize that the invention may be practiced without the use of these specific details. In other instances well known structures and devices are shown in block diagram form in order not to obscure the description of the invention with unnecessary detail.

As illustrated in the operating system includes the security assessor a rules database an operation initiator an operation requestor an installation module an execution module and a content opening module . also illustrates an application and a data file for which the operating system assesses the security policy. The security assessor and the rules database are part of a security framework that provides application programming interface API .

The operating system is a set of programs that manages computer hardware resources and provides common services for different software application programs. The operating system acts as an intermediary between application programs and computer hardware for functions such as input output and memory allocation. In some embodiments the application code of a program is executed by the hardware and interacts with the operating system through interrupts received from the operating system or calls made to the operating system.

The application is an executable data object for operating and performing functions on the operating system. Examples of application include word processors web browsers games media editing applications etc. In some embodiments the application is an installation program that installs one or more executable programs on the computer the operating system is running.

In some embodiments the application embeds one or more signatures of identity to allow a user of the application to determine the authenticity of the application. A signature that is embedded in the application is a secured identifier of the source or the publisher of the application. A data object e.g. an application is signed when a signature is generated based on the content of the data object by using a secret private key that is known only to the signer of the data object. Such a signature is therefore capable of identifying the signer or the source of the data object and protecting the integrity of the data object. To authenticate the signature of a data object i.e. to verify that the signature is indeed generated off the data object by its purported source signer the recipient of the data object i.e. the operating system uses a public key to authenticate the signature along with the content of the data object. The public key is known to have come from the purported source signer and the recipient can independently verify that the public key is indeed issued by the purported source signer e.g. by querying a trusted certificate authority or by checking the recipient s own database. 

In some embodiments a signature of a data object is extracted from a public key certificate that is associated with the data object. A public key certificate also known as a digital certificate or identity certificate is an electronic document which uses a digital signature to bind a public key with an identity information such as the name of a person or an organization their address and so forth. The certificate can be used to verify that a public key belongs to an individual. The signatures on a certificate are attestations by the certificate signer that the identity information and the public key belong together. A signature that is generated or signed based on both the content of the application data object and the information in the certificate when authenticated attests that the content of the application data object has not been tempered with and that the information in the certificate is genuine. In addition to the signature and the source identifiers e.g. the vendor ID and the public key the certificate also includes information on how the signature can be authenticated e.g. the ID of the algorithm that is used to generate the signature .

In the example of the operating system performs the signature authentication operation. In some embodiments the operating system prevents the application from executing or installing if the operating system fails to authenticate the application s signature. In some embodiments the operating system prevents the operations of even an authenticated application to proceed unless the application is from an origin that has been determined to be trustworthy according to a set of security policies.

The data file is a data object associated with one or more applications that can execute in the operating system. Examples of data file include text files word processor documents spreadsheets media files etc. The data file is read or opened by an application capable of reading or opening the data file. In some embodiments the data file includes documents that do not include signatures or certificates. The data file can also be placed in an archive structure so that the data file can be associated with signatures or certificates. below describe how the security assessor of some embodiments handles data files in data archives.

The installation module is a module within the operating system that oversees the installation of applications such as application . In some embodiments the installation module waits for a proceed command from the operation initiator before it starts processing the application for installation through the operating system. In some of these embodiments the installation module passes the application data object to the security assessor for verifying the application s signature as well as its compliance with a set of requirements according to a set of security policies. The installation module proceeds to install the application only when it receives a communication from the operation initiator indicating that the application is authenticated and its source is verified.

The execution module is a module within the operating system that launches applications such as the application for execution in the operating system . Like the installation module the execution module in some embodiments waits for a proceed command from the operation initiator before it launches the application for execution through the operating system . In some of these embodiments the execution module passes the application data object to the security assessor for verifying the application s signature and for satisfying a set of requirements according to a set of security policies. The execution module proceeds to execute the application only when it receives a launch command from the operation initiator after the application has been authenticated and its source verified.

The content opening module is a module within the operating system that oversees the opening of data file . In some embodiments opening content involves an operation that identifies a suitable application for the content in the data file and then delivers the content to the application. As mentioned above the content of the data file may or may not be accompanied by a signature and may or may not need to be authenticated. For documents that need to be authenticated the document is passed to the security assessor in order to verify the document s signature and to satisfy a set of requirements according to a set of security policies. The content opening module proceeds to open the document data file only when it receives a launch command from the operation initiator after data file has been authenticated and its source verified.

In some embodiments the opening of the data file is associated with the execution of an application. The content opening module in some of these embodiments first identifies the application for opening the data file . If the application identified by the content opening module is already executing in the operating system the content opening module delivers the data file to the execution module to be executed. If the identified application is not currently being executed the content opening module causes the execution module to start executing the application. The execution of the identified application takes place only after the operating system has determined that the application is authenticated and its source is verified.

The operation requestor is a module that requests the performance of a particular operation by the operating system . Such operations can include installing an application executing an application opening data files etc. In some embodiments the operation requestor is a user interface such as a GUI that receives a user command for opening a document or executing a particular application e.g. by selecting a graphical icon for a document or an application . The operation requestor can also be a different program executing within the operating system and making a request to the operation initiator for the operation to be performed. In some embodiments the operation requestor also receives notification from the operation initiator if the security policy of the operating system would not allow the operation to take place e.g. the signature of the application fails to be authenticated or if the source of the application is not trusted. 

The operation initiator is a module that enforces the security policy of the operating system by allowing or preventing a particular operation to take place. The operation initiator receives a request for the particular operation from the operation requestor . Based on the request the operation initiator obtains the necessary data objects e.g. the application or the data file . The operation initiator then requests the security assessor to assess the requested operation under the security policies of the operating system . The operation initiator also passes the received data object to the security assessor as part of the requested security assessment operations.

The security assessor is a module that determines whether an operation complies with the security policies of the operating system. The security assessor receives a query from the operation initiator requesting assessment of the security policy concerning a particular operation. The security assessor determines whether the operation complies with the security policies by examining data objects associated with the operation. For instance request based on an operation to install the application may include several data objects for the security assessor to examine e.g. installation files of an installation package for the application as well as the installation program itself . In another example a request for opening the data file by application may include data objects for both the executable program of application and the data file to be examined by the security assessor . In some embodiments the application and the data file are referred to as the subject of the security assessment. The security assessor then responds to the query received from the operation initiator . For example if the particular operation satisfies the requirements of the security policy the security assessor informs the operation initiator that the security policy is satisfied. On the other hand if the particular operation fails to satisfy the requirements of the security policy the security assessor responds to the operation initiator that the particular operation has failed the security policy.

In some embodiments the security assessor and the rules database are implemented as part of the security framework that performs security assessment for the operating system . Other components of the operating system can use the security API provided by the security framework to perform security assessment of the operations. In the example of the operation initiator is a component of the operating system that communicates with the security assessor through the API .

Once the operation initiator receives the response from the security assessor for the query the operation initiator enforces the security policy by allowing or not allowing e.g. preventing the particular operation to proceed. If the operation is allowed to proceed the operation initiator causes the installation module the execution module or the content opening module to start performing the operation requested by the operation requestor . If the operation is not allowed the operation initiator notifies the operation requestor which in turn notifies the user and terminates the requested operation. below describes an example process that is performed by the operation initiator .

A signature embedded in a data object when authenticated by its recipient verifies that the data object is from a particular source. In some embodiments the security assessor authenticates the signature in the data object and ascertains the source of the data object. A data object that fails to produce a signature that can be authenticated e.g. being defective or incomplete by the security assessor is likely to be from an untrustworthy source. In such a situation the security assessor under the security policies of the operating system informs the operation initiator to prevent the data object from being executed or opened. In some embodiments a document or program with a signature that fails to be authenticated can never be allowed to proceed. Conversely if the security assessor is able to authenticate the signature of the data object the security assessor may inform the operation initiator that it is safe to proceed with the requested operation assuming that other requirements under the security policy are also met e.g. if the source of the data object is trustworthy .

The security policy implemented by some embodiments examines different data objects differently. For some types of data objects security policies of the operating system may have further requirements that need to be satisfied in addition to authentication of a signature. For instance the security policies may require authentication of a signature based on a chain of certificates or require the source of the data object to be a particular vendor even if the code signature authenticates successfully . In some embodiments security policies can be altered by the user. For example a trusted administrator of a computer may change the security policies of the operating system such that the security assessor would accept a particular data object without verifying or authenticating any signatures. In some embodiments the security assessor can be arbitrarily programmed to implement any security policy regarding any data object that is submitted by the operation initiator .

In some embodiments the security policies used to assess a data object are implemented as a set of instructions that the security assessor executes in order to determine whether a data object complies with the security policies. In the example operating system of the set of instructions implementing the security policies is stored in the rules database . The security assessor retrieves the set of instructions from the rules database and uses the retrieved instructions to i analyze the data object e.g. to determine whether the source of the data object is acceptable and to ii issue a response to the operation initiator based on the analysis. Each set of one or more rules stored in the rules database is sometimes referred to as a code requirement because it specifies what is required of a data object e.g. an executable program code such as application or data file in order for it to comply with the security policy of the operating system. below describes an example process performed by the security assessor . Code requirements will be described below in further details by reference to .

The rules database is a database that stores the sets of instructions for implementing the security policies of the operating system . The security assessor retrieves the sets of instructions from the rules database in order to respond to the security query made by the operation initiator . The rules database is further described below by reference to .

The process starts when it receives at an operation request e.g. from the operation requestor . In some embodiments the request is a user command for opening a document or executing an application. The request may also be prompted by a currently executing application or system process for performing a particular operation in the operating system.

Next the process passes at the request to the security assessor. In the example of the request also includes data objects e.g. the application or the data file that are required for the security assessor to assess the security of the request under the security policy. For example an operation request initiated by a user command to open a document may require multiple data objects to be passed to the security assessor because in some cases opening a document requires invocation of an application and therefore the request passed to the security assessor would include file handles of both the document and the application.

The process next receives at the response from the security assessor e.g. and determines at whether to approve the requested operation. In some embodiments the response from the security assessor indicates e.g. by informing the operation initiator whether the request has passed the security policy of the operating system. The process in some embodiments let the requested operation proceed if the response indicates that the request has passed the security assessment e.g. having an authenticated signature and coming from a permissible source . The process in some embodiments terminates or suspends the requested operation if the response indicates otherwise e.g. the security assessor cannot authenticate the signature or the data object does not come from a permissible source. 

If the request is approved the process passes at the request to an operation handler capable of receiving the request and performing the approved operation. As illustrated in several operation handlers are capable of receiving requests and performing operations including the installation module the execution module and the content opening module . After passing the request to the operation handler the process ends.

On the other hand if the process does not approve the request it returns at a default message to the operation requestor e.g. of FIG. which in turn notifies the user not shown . Furthermore the process does not pass the request to the operation handler when the request is not approved. Thus none of the operation handlers such as and will perform the requested operation when the request is not approved. After returning the default message to the operation requestor the process ends.

Some embodiments perform variations of the process . For example the specific operations of the process may not be performed in the exact order shown and described. The specific operations may not be performed in one continuous series of operations and different specific operations may be performed in different embodiments.

The process starts when it receives at a request from the operation initiator. The request indicates that a security assessment is required for a particular requested operation.

Next the process queries at the rules database to find a match. The process examines entries in the rules database for rules that match or are applicable to the request. A rule that does not match the request cannot be used to make a security assessment for the request. For example a rule for checking an application with a specific name cannot be used to check an application with a different name. As will be discussed further below multiple entries in the rules database may simultaneously match the request and only the rule with the highest priority will be applied.

The process then determines at whether a matching or applicable rule has been found in the rules database. If the process finds at least one matching rule the process proceeds to . Otherwise the process proceeds to .

At the process returns a default response to the operation initiator to indicate that there are no applicable rules or instructions regarding the request. In some embodiments the default security policy is to disallow a request for an operation that has no matching rules in the rules database. In some embodiments the default security policy allows requests that are not specifically prohibited by the rules database. In some embodiments the default policy requires the operating system to notify the user. After returning the default response the process ends.

At the process makes the security assessment regarding the request. In some embodiments the process performs the security assessment by applying the matching rules or the applicable set of instructions to the data objects associated with the request e.g. application and or data file . In some embodiments the matching set of rules executes in the security assessor as an executable program. In some embodiments the matching set of rules causes the security assessor to make the security assessment based on variables such as the source of the data object the identity of the data object and the type of the data object.

Once the security assessment has been made the process returns at the security assessment to the operation initiator to decide whether or not to allow the requested operation to proceed. The process ends after it has returned the security assessment to the operation initiator.

Some embodiments perform variations of the process . For example the specific operations of the process may not be performed in the exact order shown and described. The specific operations may not be performed in one continuous series of operations and different specific operations may be performed in different embodiments.

The operation initiator then makes a request operation 2 to the security assessor to assess the security of installing Application X under the security policies of the operating system. In some embodiments this request to the security assessor includes handles to data objects that are necessary for installing Application X such as installation files and packages.

The security assessor upon receiving the request queries operation 3 the rules database for rules or instructions that match the installation request under the security policy. The rules database provides operation 4 the rules or instructions that match the query in its database to the security assessor . This query process between the security assessor and the rules database continues until a matching rule is found in the rules database or a determination is made that there is no applicable rule in the rules database.

Once a matching rule has been found the security assessor performs a security assessment by applying the matching rules to the data objects related to the installation of Application X. In some embodiments the rules take the form of program instructions for processing the data objects and determining whether the data objects comply with the security policies of the operating system. The processing of the data objects in some embodiments includes verifying within the data objects signatures related to the installation of Application X. In some embodiments compliance with the security policies is determined based on whether the signature has authenticated successfully and whether the signature is from a trusted source. The security assessment is then communicated back to the operation initiator operation 5 . In the example illustrated in the security assessor indicates that it is OK to install Application X. This is the security assessment because data objects related to the installation of Application X have been found to comply with the security polices stored in the rules database.

After receiving the security assessment that it is OK to install Application X the operation initiator commands the installation module to launch the installer and install Application X into the computer. The dashed lines around execution module and content opening module indicate that this operation does not involve those two modules.

The operation initiator then makes a request operation 2 to the security assessor to assess the security of executing Application X under the security policies of the operating system. In some embodiments this request includes handles to data objects that are necessary for executing Application X such as the executable machine code of Application X.

The security assessor upon receiving the request queries operation 3 the rules database for rules or instructions that match the request to execute the application under the security policy. The rules database provides operation 4 the rules or instructions that satisfy the query in its database to the security assessor . This query process between the security assessor and the rules database continues until a matching rule is found in the rules database or a determination is made that there is no applicable rule in the rules database.

Once a matching rule has been found the security assessor performs a security assessment by applying the matching rules to the data objects related to the execution of Application X. In some embodiments the rules take the form of program instructions for processing the data objects and determining whether the data objects comply with the security policies of the operating system. The processing of the data objects in some embodiments includes verifying within the data objects signatures related to the execution of Application X. In some embodiments compliance with the security policies is determined based on whether the signature has authenticated successfully and whether the signature is from a trusted source. The security assessment is then communicated back to the operation initiator operation 5 . In the example of the security assessor indicates that it is OK to execute Application X. This is the security assessment because data objects related to the execution of Application X have been found to comply with the security polices stored in the rules database.

After receiving the security assessment that it is OK to execute Application X the operation initiator commands the execution module to launch Application X. The dashed lines around installation module and content opening module indicates that this operation does not involve those two modules.

The operation initiator then makes a request operation 2 to the security assessor to assess the security of opening data file X under the security policies of the operating system. In some embodiments this request includes handles to data file X. If data file X is a document that is to be opened by application Y then this request in some embodiments also includes handles to the executable binary files of application Y. In this instance both document X and application Y are considered necessary data objects for opening document X. Therefore the security assessment is performed on both of these data objects. However in some embodiments the application necessary for opening data file X is already executing and thus has already passed a security assessment such as in the example of . Therefore only the handle for data file X is passed to the security assessor as part of the request.

The security assessor upon receiving the request queries operation 3 the rules database for rules or instructions that matches the document opening request under the security policy. The rules database provides operation 4 the rules or instructions in its database to the security assessor . This query process between the security assessor and the rules database continues until a matching rule is found in the rules database or until a determination is made that there is no applicable rule in the rules database.

Once a matching rule has been found the security assessor applies the matching rules to the data objects related to opening the data file X e.g. application Y . In some embodiments the rules take the form of program instructions that process the data objects and make a determination as to whether those data objects comply with the security policies of the operating system. The processing of the data objects in some embodiments includes verifying signatures within the data objects related to opening of data file X. The determination is made in some embodiments based on whether the signature has authenticated successfully and whether the signature is from a trusted source. The security assessment is then communicated back to the operation initiator operation 5 . In the example of the security assessor indicates that it is OK to open data file X. This is the security assessment because the data objects related to the opening of data file X e.g. data file X itself and application Y have been found to comply with the security polices stored in the rules database.

After receiving the security assessment that it is OK to open data file X the operation initiator commands the content opening module to launch Application X. The dashed lines around the execution module and the installation module indicate that this operation does not involve those two modules. In some embodiments when the opening of a document requires the execution of an application that is not currently being executed in the computer the operation initiator will also launch the execution module .

In the examples described above data objects associated with requested operations are assessed according to the security policies of the operating system. These security policies are embodied in different rules or instructions stored in the rules database. The security policies of the operating system are thus a set of programmable rules that controls the operations taking place in the operating system but is not part of the programs of the operating system itself. As will be discussed in Section II C these security policies of the operating system can be altered by users or vendor of the computer system.

In some embodiments the rules database includes different tables in order to make queries on the rules database more efficient. Two such tables an authority table and a cache table are described below.

The rules database in some embodiments includes an authority table. In such some embodiments the authority table contains the rules that the security assessor retrieves for determining whether to allow a particular operation to take place in an operating system. The rules in the authority table specify what is required of data objects e.g. program code or documents to open in order for them to comply with the computer s security policy. Hence each set of one or more of these rules is referred to as a code requirement in some embodiments.

Code requirements can express arbitrary conditions on the certificates used to sign the subject such as requiring the vendor ID and or the public key in the certificate to belong to a particular trusted source. Code requirement can also require other things such as entries in configuration dictionaries that are integral parts of these programs. For example a code requirement may state must have an entitlement permitting address book use entitlements being one of those configuration dictionaries specified by some for inclusion in programs which has nothing to do with its signature.

As illustrated a storage device stores the authority table which includes several entries or records including records and . The records express several security policies including polices and . Each record or entry also includes a set of fields . The fields are labeled Rule 1 to Rule n . The field is labeled Action .

Each field of a record is a set of rules or instructions that directs the security assessor of the operating system to perform a set of logical or arithmetic operations and make a decision according to the set of logical or arithmetic operations. For example the X in the field of the record can be a set of operations that check to see if the security assessment is for an application the Y in the field of the record can be a set of operations that checks expiration date of the certificate the Z in the field of the record can be a rule that verifies whether the application is from a trusted vendor or source while the W in the field can be a rule that checks whether a file being opened is a file downloaded from the Internet. An entry does not have to have all fields filled. For example the entry has only one filled rule field . The instruction in that field for record can be a check of whether a document that is requested to be opened is downloaded from Internet.

The different sets of instructions in the different fields of a record jointly make a single determination. This single determination is used to decide whether the action stated in the Action field should be undertaken. For example the approve in the action field of the record would cause the security assessor to approve the request to launch a particular application if the data object being evaluated is an application has a certificate that has been verified under X.509 standard and comes from a trusted vendor. On the other hand while the disapprove of the entry would cause the security assessor to disapprove a request to open a particular content item if it is downloaded from the Internet.

Such a collection of instructions or requirements constitutes a security policy. In the example of the rules or instructions in the record constitute security policy A the rules or instructions in the record constitute security policy B and the rules or instructions in the record constitute security policy C . In some embodiments a security policy is a collection of rules that span two or more records in the authority table. Such an authority table is further discussed below by reference to .

In some embodiments some of the rules are for matching and some of the rules are for verification. The rules for matching determine whether the particular entry is applicable to the request for the security assessment. The rules for verification determine whether the request complies with the security policy embodied by the particular entry or record of the rules table. For example a rule that rejects a type of data object from a particular vendor is a rule for verification while a rule that limits the applicability of the rule to gaming applications is a rule for matching.

In addition to rule fields and a field for action some embodiments include other fields. conceptually illustrates an authority table that is similar to the authority table except that in addition to the rule fields and the action field illustrated in the authority table includes an additional field. The authority table also has a number of entries and each entry has a number of fields . These fields include rule fields and an action field . Unlike the authority table however each entry in the authority table also includes a priority field .

The priority field of some embodiments decides which entry in the authority table will be examined first for finding rules that matches the request. Entries with higher priority value in the priority field will be examined before entries with lower priority values. As illustrated in record has a priority value of 1.75 in the priority field while record has a priority value of 1.25. The record will therefore be searched before the record while the record having a priority value of 2.70 will be searched before both records and . Priority of entries can be expressed in other ways e.g. by using integer number by arranging the entries in a linked list from highest priority to the lowest priority or by sorting the entries according to priority. 

For any given security assessment request multiple entries of the authority table may match the request. However in some embodiments the security assessor stops searching the authority table when a matching entry is found. For example for a search that could have multiple matches the security assessor will simply use the first matching entry which is the highest priority matching entry. The use of a priority field therefore alleviates the possibility of multiple matches ensuring that only a single matching entry is used for the security assessment.

In the examples of an entry in an authority table includes several fields including several rule fields that each contains a set of instructions for performing a set of logical or arithmetic operations. However some embodiments express the sets of instructions of all the rule fields as a single rule and have only a single rule field in the authority table. The single rule field in a record of the authority table encompasses all of the necessary instructions for making the security assessment under a particular security policy.

The code requirement that includes rule field for each record or entry includes all of the necessary instructions for performing a security assessment for a request including both matching and verifying instructions. In some embodiments the code requirement as mentioned before can be a set of one or more concatenated rules. In such some embodiments the code requirement applies to the requested data object in order to validate the source of the data object. For example a set of instructions in the code requirement that includes rule field for entry can make each of the following determinations 1 whether the request for the security assessment is for an application 2 whether the application is from a trusted vendor or source and 3 whether the source identifying information in the certificate e.g. vendor ID public key etc. indeed belongs to the trusted vendor or source. Only when each of the three determinations satisfies its corresponding rule will the action in the action field be applied. On the other hand when one or more of the three determinations fail to satisfy its corresponding rule the action field of the record will not be applied. Thus the action prescribed by the action field is based on the single rule for the record and would be communicated to the security assessor e.g. approval or disapproval of the requested action .

The authority table can have different formats from those that are illustrated in . For example an authority table entry in some embodiment can include a field called disable such that when the disable field contains a certain value the entry can be skipped and the security assessor will not consider the entry in the search.

As mentioned earlier by reference to the security policies of the operating system are expressed by the rules and instructions in the rules database. In some embodiments each entry in the authority table is sufficient to express one particular security policy e.g. allowing only applications that have a valid signature from a specific vendor . In some embodiments a security policy can be expressed by two or more entries in the authority table.

The 2 D Venn diagram includes three ovals . The 3 D diagram illustrates the same three ovals in a three dimensional fashion. The oval represents the rules with priority P1 the oval represents the rules with priority P5 and the oval represents the rules with priority P8.

The 2 D Venn diagram thus illustrates the logical relationships among the three authority table entries. Within the Venn diagram the oval encompasses the ovals and and the oval encompasses the oval . This corresponds to the logical relationships between the rules in the three records where the applicability of the P1 rule all word processing apps with valid certificate from company X is a subset of the applicability of P5 rule apps from company X and the applicability of the P5 rule is a subset of the applicable of P8 rule all apps .

The 3 D diagram illustrates how the use of the priority field in the authority table decides which of the rules within the security policy should be applied to make the security assessment. As illustrated the oval is the highest and corresponds to the highest priority rule P1 in the security policy . The oval is the second highest and corresponds to the next highest priority rule P5 in the security policy . The oval is the lowest and corresponds to the lowest priority rule P8 in the security policy . A higher priority rule supersedes lower priority rules where they intersect just as higher priority ovals overshadow lower priority ovals whenever they intersect. The applicability of higher priority rules effectively punches holes in the applicability of the lower priority rules.

The security policy thus can be constructed using multiple entries in the authority table without logical inconsistency when performing security assessments. The use of the priority field resolves the issue of which rules to use when different entries in the authority table apply to the same request.

The Venn diagram includes three ovals . The 3 D diagram illustrates the same three ovals in a three dimensional fashion. The oval represents the rules with priority P1 the oval represents the rules with priority P5 and the oval represents the rules with priority P8.

The 2 D Venn diagram thus illustrates the logical relationships among the three authority table entries. Within the Venn diagram the oval encompasses the oval while the oval overlaps both the ovals and . This corresponds to the logical relationships between the rules in the three records. Specifically the applicability of the P1 rule all word processing apps with valid certificate is a subset of the applicability of the P8 rule all apps with valid certificate . The applicability of the P5 rule nothing from company X intersects both the P1 and P8 records without being their subset or their superset.

The 3 D diagram illustrates how the use of the priority field in the authority table decides which of the rules within the security policy should be applied to make the security assessment. As illustrated the oval is the highest and corresponds to the highest priority rule P1 in the security policy . The oval is the second highest and corresponds to the next highest priority rule P5 in the security policy . The oval is the lowest and corresponds to the lowest priority rule P8 in the security policy . A higher priority rule supersedes lower priority rules when they intersect just as higher priority oval overshadows lower priority ovals whenever they intersect.

The security policy thus can be constructed using multiple entries in the authority table without logical inconsistency when performing security assessment. The use of the priority field resolves the issue of which rules to use when different entries in the authority table apply to the same request. For example a request for a word processor with a valid certificate from company X would result in the word processor being approved since the rule for all word processing apps with valid certificate has higher priority than nothing from company X . As another example a request for a web browser application with a valid certificate from company X would not be approved because the rule for nothing from company X has a higher priority than all apps with valid certificate .

For some embodiments conceptually illustrates a process for performing a security assessment by using the authority table. The process receives a security assessment request and matches entries or records of the authority table with the request. The process then performs the security assessment by verifying whether the data object of the request complies with the code requirement stored in the authority table.

The process starts when it receives at a query or a request to make a security assessment. The request is accompanied by a data object e.g. an application program code an installation package or a document to be opened to which the code requirement stored in the authority table will be applied.

The process next extracts at a code signature from the data object. In some embodiments the signature is extracted from a public key certificate issued by the source of the data object. The process then determines at whether the extracted signature is authenticated. In some embodiments a separate module in the security assessor performs the code signature authentication e.g. code signature verifier module . Once the code signature has been extracted the process uses the code signature verifier module to check whether the code signature has been authenticated successfully. If the signature authenticates successfully the process proceeds to . If the signature does not authenticate successfully the process ends.

The process next finds at the highest priority entry in the authority table. In some embodiments the process compares the priority fields of each entry in the authority table in order to determine which entry has the highest priority. The process then determines at whether the entry has been found. In some embodiments this is accomplished by recording which entries have already been examined. If all of the entries in the authority table have already been examined then there is no more entry to be found. If the highest priority entry is found the process proceeds to . If there is no more entry to be examined in the authority table the process ends.

At the process retrieves the code requirement from the authority table entry that was found. The process then uses at the retrieved code requirement to verify the source of the data object. Such verification can include the verification of the vendor ID and the expiration date of the certificate that is used to generate the signature. The retrieved code requirement is also used to verify other required attributes of the data object attributes such as type of the data object name of the data object or any other attributes that can be associated with a data object. Thus for example even if the process is able to authenticate the signature from the data object the process can still reject the data object if it does not satisfy the code requirement e.g. if it does not possess the correct type or does not come from a source that is deemed trustworthy .

The process then determines at whether the code requirement matches or is applicable to the query. A security assessment cannot be made based on a code requirement that is not applicable to the request. Some embodiments do not check the applicability of the code requirement until this point of the process because the applicability of a code requirement sometimes cannot be determined until the process has used the code requirement to process the data object of the request. In some embodiments the process checks the applicability of the code requirement as soon as sufficient information is available. If the code requirement matches i.e. is applicable the query the process proceeds to . Otherwise the process proceeds to .

At the process searches the authority table for the next highest priority entry. Some embodiments mark the higher prior entries that were previously examined and the next highest priority entry is simply the highest priority entry that has not been marked. The process next determines at whether the entry is found. If so the process returns to . Otherwise the process ends.

At the process uses the code requirement to determine the action that should be undertaken by the operation initiator. In some embodiments this action is specified by the action field of the matched entry i.e. to approve or disapprove depending on whether data object has satisfied the code requirement. After responding to the request the process ends.

Performing security assessment using entries in the authority table in some embodiments can include many computations. A rule that verifies information embedded in a certificate can include computationally intensive operations in some embodiments. Furthermore traversal across many entries in the authority table may be necessary to complete a search for an entry that matches the request. For example to ensure that a request has no matching entries a complete traversal of the authority table may be necessary. Some embodiments save security assessment time by performing security assessment operations only on data objects that have not yet been assessed. In other words query is made to the authority table only when an application program is launched for the first time or only when a data file is opened for the first time.

To further accelerate security assessment operations the rules database of some embodiments incorporates a cache table in addition to the authority table. In some embodiments a cache table stores the required action for a data object in an address location indexed by a hash value that is unique to that data object. For example a unique code directory hash value can be computed for an application program or a data file. Thus a request for a security assessment for execution or installation of an application or opening an archive will be described in more detail below in Section IV by reference to requires only the computation of the hash value of the application executable the installation file or the archive. The action e.g. approve or disapprove is then retrieved from the address location of the cache table pointed to by the hash index value.

Unlike a query of the authority table a query of the cache table does not require traversal of multiple entries nor lengthy computation according to the rules. A request for assessment of an operation involving a data object that has a corresponding entry in the cache table can thus be greatly accelerated. In some embodiments a request for a security assessment first attempts to find a matching entry in the cache table before searching the authority table. A cache table is also called an object table since each entry in the cache table corresponds to one data object e.g. an application executable or a document . Since users tend to interact with data objects that they have recently interacted with and hence with entries in the cache table the use of the cache table significantly reduces security assessment time.

For some embodiments illustrates a rules database that includes an authority table and a cache table . The figure also illustrates example entries of the cache table and the relationships between the cache table entries and the authority table entries. In some embodiments the authority table and the cache table are stored in separate physical storages while in other embodiments the authority table and the cache table are stored in a single physical storage.

The authority table has the same format and content as the authority table of including record entries a priority field a rule field and an action field .

The cache table includes three entries . Unlike the entries of the authority table the entries of the cache table do not include a rule field. However the cache table includes other fields including a hash ID field an expiration date field an action field and a reference field .

The entry of the cache table is based on a data object data object A that matches the entry of the authority table . The entry of the cache table is based on another data object data object B that matches the entry of the authority table . In some embodiments these cache table entries are made when security assessment requests are made based on data objects A and B. The entry is based on a data object data object C that does not match any entry in the authority table . The negative entry is made in the cache table when the authority table fails to yield a matching rule for a security assessment request that involves data object C. Therefore the existence of such a negative entry in the cache table prevents a long exhaustive search of the authority table .

The negative entry of the cache table does not inherit any fields from the authority table because it is generated from an object without a matching entry in the authority table . In some embodiments the negative entry includes an indication that this is a negative entry and that there is no matching entry in the authority table for the data object. In some such embodiments the authority table contains virtual entries that are not normally processed but serve as anchors for negative entries in the cache table to refer back. In other words cache records that are created as the result of determining that no rules apply i.e. negative entries would refer to a virtual no authority rule stored in the authority table i.e. virtual entries . This is primarily done to ensure consistency in the data structures and does not affect the visible behavior of these embodiments.

The action field in a cache table entry records the action that was actually taken for a data object. This action is based on the application of the matching rules stored in the authority table approving or not approving the data object. For example the action field of the cache table entry indicates don t approve for object B. This indicates that the matching rule for object B stored in authority table entry assesses object B as failing to meet its code requirement and that object B was disapproved. A retrieval of this entry in the cache table by the next request based on object B would then also be disapproved. In other words the action field of each cache table entry stores the security assessment of the data object of that entry.

The expiration date field indicates when a cache entry has expired. In some embodiments the expiration date of a cache table entry for a data object is determined by the content of the data object. Some embodiments use the expiration date of the data object s certificate as the expiration date in the cache entry. For data objects whose signature is derived from a chain of certificates the expiration date of the certificate that expires the earliest will be used in some of these embodiments. In some embodiments the expiration date is determined by the rules in the authority table and inserted into cache table when a cache table entry is created. In some embodiments the operating system specifies the expiration date on its own based on information other than the certificates of the data objects. Such information in some embodiments can be a default value supplied by vendors the type of the requested operation or any other information available to the operating system.

In some embodiments a security assessor checks the expiration date field of a cache table entry before applying the entry. A cache table entry that has expired according to the expiration date will be ignored and treated as a cache miss by the security assessor. This prevents the security assessor from making an incorrect security assessment based on obsolete entries in the cache table . In some embodiments an expired cache table entry is purged when it is accessed. Some embodiments include a purging mechanism that periodically checks the cache table for expired entries and remove them from the table.

The hash ID field stores a hash value. In some embodiments the hash ID field of a cache table entry stores a value that is associated with a hash of the data object of the cache table entry. Some other embodiments do not include this field in the cache table.

In some embodiments the reference field stores a link back to the entry in the authority table. Specifically the reference field of each cache table entry stores a link back to the authority table entry that is used to generate cache table entry i.e. the rules of the authority table entry is used to perform security assessment of the data object associated with the cache table entry . For example the reference field of the cache table entry would indicate that the cache table entry it is generated from the authority table entry and that the reference field of the cache table entry would indicate that the cache table entry is generated from the authority table entry .

Some embodiments use the reference field in the cache table to purge cache table of entries that have become obsolete due to changes in the authority table. In some embodiments the cache table also includes a priority field that is inherited from the authority table not illustrated . Some embodiments use the priority field in the cache table to purge cache table of entries that have become obsolete due to changes in the authority table. The purging of cache table entries will be further described below in Section II C and by reference to .

In some embodiments the cache table includes other fields. The content of some of these cache table fields are inherited from the authority table entry that is used to create the cache table entry. In some embodiments the entries in the cache table are not necessarily contiguous as their addresses are determined by hash values of the data objects that are used to produce those entries. In some embodiments the hash value for a data object is produced by performing a hash operation on the data object. In some embodiments the hashing operation produces a hash value that uniquely identifies the data object from any other data object. In some embodiments the hashing operation includes an incremental hashing operation. Descriptions of incremental hashing operation can be found in e.g. U.S. Pat. No. 7 103 779 which is hereby incorporated by reference.

In some embodiments the hashing operation includes a code directory hashing operation. Code directory hash is a unique value in some embodiments that refers to every unique entry in the cache table. Therefore each data object with its corresponding code requirement is uniquely identified in the cache table by a unique code directory hash. Descriptions of hash of code directory and its functions can be found in U.S. Patent Publication 2008 0168553 which is hereby incorporated by reference.

In the example of the entry for object A is stored at a location that is indexed by a hash value of the object A the entry for object B is stored at a location that is indexed by a hash value of the object B and the entry for object C is stored at a location that is indexed by a hash value of the object C.

For some embodiments illustrates a security assessor that uses both the authority table and the cache table for making a security assessment based on a request from an operation initiator. As illustrated the security assessor receives a request from an operation initiator and queries both an authority table and a cache table . The security assessor includes a query manager for querying the authority table and a query manager for querying the cache table. The security assessor also includes a processor and a cache table record generator . The query manager for querying the authority table also includes a rules engine a record selector and a signature verifier .

The operation initiator makes security assessment requests and waits for the results of the security assessments to come from the processor of the security assessor. The processor receives the security assessment requests from the operation initiator . Based on this received security assessment request the processor communicates with both query managers for authority table and for cache table in order to determine whether to approve the security assessment request. It also uses the cache table record generator to generate new cache entries when there is a cache miss in the cache table . The cache table record generator is also used to generate an address to the physical memory of the cache table by hashing data objects that are the subject of the request i.e. program codes or documents. 

The query manger for querying the cache table provides an interface between the processor and the physical memory that contains the cache table . The query manager for querying the authority table provides an interface between the processor and the physical memory that contains the authority table . The query manager also uses the record selector to select and retrieve an entry from the authority table . The retrieved entry is then relayed to the rules engine to be parsed and executed. In some embodiments the query manager uses the signature verifier to verify the code signature of the data object. In such some embodiments if the code signature fails to authenticate properly for any reason the security assessor returns a disapproval message to the operation initiator . In some embodiments the functionalities of the rules engine the record selector and the signature verifier are performed by the processor instead of the query manager .

The signature verifier module authenticates the code signature of the data object. In some embodiments the signature verifier module authenticates the signature by using the information in a public key certificate as well as the content of the data object itself. The signature verifier module performs the signature authentication operation according to a signature authentication algorithm that is identified by the certificate. Upon the completion of the signature authentication process the signature verifier module informs the security assessor whether the signature of the data object was successfully authenticated.

The security assessor includes a query manager for the authority table a hash module a memory interface and an expiration date extraction module . For some embodiments the query manager is similar to the query manager in while the functions of the hash module and the expiration date extraction module are performed by a processor similar to the processor of . Security assessor also includes other modules such as a signature verifier module which are not shown for the purpose of simplification of the figure.

The operation initiator makes a request to the security assessor for a security assessment regarding an operation that requires the use of a data object data object X . The data object is relayed to several modules in the security assessor including the query manager the hash module and the expiration date extraction module . The query manager finds an entry from the authority table that matches the data object . The query manager then applies the rules of the matching entry to determine the appropriate action for the data object . This action taken by the query manager forms the action field for a new cache table entry .

The hash module receives the data object and performs a hash operation on the received data object. In some embodiments the hash operation is an incremental hashing operation. The hash module produces a unique code directory hash value that serves as index index for X for specifying a location in the cache table for the newly created cache table entry for the data object X. The memory interface then uses this value as a physical address for the cache table. In some embodiments this uniquely generated code directory hash value will be stored in the Hash ID field of the entry for data object X.

The expiration date extraction module which also receives the data object computes or extracts the expiration date from the data object . In some embodiments the expiration date of a data object is specified by the certificate that is used to generate the signature of the data object. A data object may have its signature derived from more than one certificate or even a chain of certificates. For such a data object some embodiments use the earliest expiration date among these certificates as the expiration for the cache table entry. The extracted expiration date becomes the expiration date field . In some embodiments the expiration date extraction module uses other information as the basis for determining expiration dates. In some other embodiments the expiration date field is inherited from the authority table and not computed by the expiration date extraction module .

The action field and the expiration date field are concatenated together to form a new cache table entry for the data object X along with a hash ID field and a reference field for the data object X. The cache table has two other entries for two other objects entry for data object Y and entry for object Z .

In some embodiments the contents of a cache table can be shared across different computers running similar operating systems. A computer can import a cache table that is generated by another computer or a pre packaged cache table that is supplied by the vendor of the operating system. A computer using such a pre filled cache table can immediately accelerate its security assessment operations without having to generate its own cache entries.

For some embodiments conceptually illustrates a process that uses both the authority table and the cache table for performing a security assessment. The process first attempts to find a matching entry in the cache table. If the process is not able to find such an entry in the cache table i.e. cache miss it will query the authority table to find a matching entry instead. The querying of the authority table results in a new entry in the cache table. This process is performed by the security assessor of the operating system in some embodiments.

The process starts when a request for an operation e.g. executing an application installing an application or opening a document is made by the operation initiator. The process receives at this request along with the data object that is needed by the requested operation.

The process next determines at a hash value for the data object i.e. the unique code directory hash value . The hash value is computed in some embodiments by an incremental hashing operation. The computed hash value acts as an index for locating the entry in the cache table for the data object. Next the process determines at whether it is able to find a cache table entry by using the hash value. This determination in some embodiments is based on whether there is a valid entry stored at the location pointed to by the hash value. In some of these embodiments each cache table entry is associated with a bit that indicates whether the cache table entry is valid or not. A cache table entry is not valid if it has not been filled by a cache entry for a data object or if the cache table entry has been purged and not yet filled with a new cache entry. If the process is able to find a valid entry using the hash value of the data object cache hit the process proceeds to . Otherwise cache miss the process proceeds to .

At the process determines the response to the security assessment request based on the content of the matching cache table entry. The process then determines at whether the response is an approval of the requested operation. If the response approves the operation the process proceeds to in which the operation initiator passes the request to an operation handler such as the execution module the installation module or the content opening module of . If the response does not approve the operation the operation initiator stops the operation from proceeding by not passing the request to the operation handler. After responding to the operation initiator based on the contents of the cache table entry the process ends.

At the process queries the authority table because of the cache miss at the cache table. In some embodiments this operation is performed by the process of which searches the authority table for an entry that matches the request.

Next the process determines at whether it was able to find a matching entry in the authority table. If so the process proceeds to . Otherwise the process proceeds to to create a negative cache entry for the data object and then ends. The negative cache entry for the data object as discussed above enables the security assessor to quickly ascertain that the security policies of the operating system do not have rules that are applicable to the particular request.

At the process determines a response from the matching entry of the authority table. The process next creates at a new entry in the cache table based on this matching entry from the authority table. The process then proceeds to to determine whether to approve or disapprove the requested operation. After responding to the operation initiator based on the contents of the authority table entry the process ends.

In some embodiments users with sufficient privileges are allowed to make changes to the rules database by adding deleting or modifying entries in the authority table. For example a user with administrator privilege may bypass signature authentication for executing a particular application. The user can do so by adding a higher priority entry into the authority table that supersedes lower priority rules and thereby allowing the particular application to be executed.

However as shown in above a security policy often includes a number of table entries that are linked together by priorities. Therefore assessing a data object under a security policy requires examining these table entries in the order set forth by their priorities. For any given security assessment for a data object lower priority rules become applicable only when higher priority rules are not applicable. Hence any change to a higher priority rule potentially changes the applicability of lower priority rules.

Since the cache table stores cache entries that reflect the applicability of the rules prior to the change in the authority table in some embodiments a change in the authority table of a particular priority triggers the purging of all equal or lower priority entries in the cache table. For example a new authority table entry with priority value 2.3 would trigger the purging of all cache table entries with priorities values equal to or lower than 2.3. In some embodiments this purging process uses the reference field e.g. of in each of the cache table entries to learn the priority of the authority table entry that is used to create the cache table entry. In some other embodiments each cache table entry carries a priority field that is inherited from the authority table for this purpose.

In some embodiments a negative cache entry is assumed to have the lowest priority. Since a negative entry is the cache table entry of a data object that does not have a matching entry in the authority table any change in the authority table may affect the data object of the negative entry i.e. the change in the authority potentially causes the data object to have a matching entry in the authority table thus making the negative entry obsolete. In some of these embodiments any change to the authority table always causes negative cache entries to be purged.

For some embodiments conceptually illustrates a process that maintains the rules table following a change in the rules database by an administrative user. The process purges the lower priority entries from the cache table. The process starts when a privileged user e.g. administrator makes a change to the rules database. The process receives at the rule change from the privileged user and determines at whether the rule change is to a rule that is already in the authority table. If the rule change is to a rule that is already in an authority table entry the process proceeds to to update the authority table entry. If not the process proceeds to to make a new entry in the authority table.

The process next determines at whether there are entries in the rules database with lower priority than the newly added or updated rule. If so the process proceeds to . Otherwise the process ends.

At the process deletes all lower priority entries in the cache table. In some embodiments the process examines all occupied entries in the cache table and purges entries with priorities lower than or equal to the newly added or updated authority table entry. After deleting all lower priority cache table entries including any negative entries the process ends.

Some of the embodiments described above use certificates that are embedded in data objects for making a security assessment about these data objects. In most instances these methods rely on identifiers that are provided by the source of these data objects e.g. signatures and vendor IDs in certificates . However these source provided identifiers are not always available or reliable. Thus in addition to or instead of relying on these source provided identifiers for performing the security assessment the operating system of some embodiments provides its own identifier for the data objects. In some of these embodiments the operating system associates a tag with data objects that are imported from external sources such as the Internet a USB flash drive or through any other peripheral interface of the device. The tag includes a quarantine bit to indicate that the data object is from an external source. The presence of the quarantine bit further indicates that the system has not performed security assessment on the data object. Once the operating system has performed security assessment on the data object the tag is updated e.g. by removing the quarantine bit to indicate that the data object has already been assessed under the security policy of the operating system and that the data object has passed or failed the security policy of the operating system.

The network interface provides the communication interface between the computer and the outside world via a network. The network allows the computer to communicate over the Internet and access data objects such as application files and content files from other computers. These content files can be text files word processor documents spreadsheets media files etc. Application files can include installation and program files. These application and content files can then be downloaded onto the computer . Though not shown in the figure the computer can also download data objects from external sources other than the Internet such as an external flash drive .

The application is a program or a set of processes that are currently running on the computer via the operating system. The application can be an Internet browser a word processor a video game a media editing application or any program that can operate on the computer . The application can perform operations that require communication over the Internet including downloading data objects from sources over the Internet via the network interface. Once the files have been downloaded the application stores the downloaded files in the storage device . In some embodiments the downloaded files must go through tag module before being stored.

The tag module associates each downloaded file with a tag. In some embodiments such a tag includes a quarantine bit to indicate that the downloaded file is from an external source and has not been examined under the security policy of the operating system. In some embodiments the tag module inserts or appends the tag onto the downloaded file. In some embodiments the tag module maintains a tag table that records which files are from the Internet or other external sources. Other processes or modules running on the computer can access the tag table to find out which files or data objects are tagged as being from the external sources such as the Internet. Some embodiments associate a tag with a file from the external source as soon as it is downloaded by the application and before the file is stored in the storage device .

The storage device stores various data objects for the computer . These data objects can include content files and application files that are downloaded from Internet or other external sources. In some embodiments these downloaded applications and content files are associated with tags that are supplied by the tag module .

Once downloaded files are stored and tagged the operating system can perform a security assessment based on security policies that consider whether a data object is downloaded or not. illustrates an operating system whose security policy requires checking for presence of tags or quarantine bits. Specifically the operating system includes a mechanism for identifying whether a data object is tagged or not before performing security assessment operations. The security assessment operations are similar to those described in Sections I and II above.

As illustrated the operating system includes an operation requestor a security assessor a rules database and an operation initiator . The operation initiator includes a processor and a tag identifier module . The operating system also includes an installation module and a content opening module .

In some embodiments the operating system is similar to the operating system of . Specifically the operation requestor like the operation requestor makes requests for performance of operations to the operation initiator . Like the installation module and the content opening module the installation module and the content opening module are the operation handlers that receive the approved requests and perform the approved operation.

The security assessor and the rules database perform similar operations as the security assessor and the rules database illustrated in . The functions of the security assessor and the rules database are also described above in Section II by reference to . For example the rules database includes both an authority table and a cache table in some embodiments. In some embodiments the security assessor performs security assessment of the tagged object based on user input. For example upon receiving a request for security assessment for a tagged object the security assessor informs the user that the requested operation involves a downloaded object and asks the user whether to proceed knowing the risks.

The operation initiator like the operation initiator enforces the security policy of the operating system by allowing or disallowing a particular operation to take place. It receives a request for the particular operation from the operation requestor and requests the security assessor to assess the requested operation under the security policies of the operating system . However unlike the operation initiator of the operation initiator checks whether the data object for the requested operation is tagged as being from the Internet or any other external sources. Data objects that are tagged as being from an external source e.g. tagged with a quarantine bit are subject to security assessment. In order to avoid repeated security assessment on data objects that have already been assessed some embodiments update the tag after the security assessment to indicate that the data object has already been previously assessed. Some embodiments accomplish this by removing the quarantine bit. In some embodiments the updated tag also indicates whether the data object has passed or failed the previous security assessment.

In the example of the tag identifier module inside the operation initiator checks the tag and reports to the processor module . In the operating system the security assessor does not make its security assessment based on the tag. It is the processor within the operation initiator that uses the tag to decide whether to proceed with the requested operation. In some of these embodiments the operation initiator proceeds with security assessment only if the data object associated with the requested operation is tagged as being from an external source and that it has never been assessed. If the data object is not tagged as such e.g. if the quarantine bit has been removed or if data object is already tagged as having been previously assessed the operation initiator will not request the security assessor to perform security assessment.

If the request for security assessment has been made the security assessor queries the rules database operation 5 . The rules database provides operation 6 the rules or instructions in its database to the security assessor . This query process between the security assessor and the rules database continues until a matching rule is found in the rules database or until a determination is made that there is no applicable rule in the rules database.

Once a matching rule has been found the security assessor applies the matching rule to the data objects related to the installation of Application X. The security assessment is then communicated back to the operation initiator operation 7 . In the example of the communication from the security assessor back to the operation initiator indicates that it is OK to install Application X as data objects related to the installation of Application X has been found to comply with the security polices stored in the rules database.

Upon knowing that Application X has passed the security assessment performed by the security assessor the processor determines whether to proceed with the installation of Application X. In addition to the security assessment made by the security assessor the processor in some embodiments considers whether Application X is tagged or not. If the processor decides that it is OK to proceed with the installation of Application X it sends a command to the installation module to launch the installation of the Application X operation 8 . The dashed lines around the content opening module indicate that it is not involved in this operation.

If the request for security assessment has been made the security assessor then queries the rules database operation 5 . The rules database provides operation 6 the rules or instructions in its database to the security assessor . This query process between the security assessor and the rules database continues until a matching rule is found in the rules database or until a determination is made that there is no applicable rule in the rules database.

Once a matching rule has been found the security assessor applies the matching rules to the data objects related to the opening of data file X. The security assessment is then communicated back to the operation initiator operation 7 . In the example of the communication from the security assessor back to the operation initiator indicates that it is OK to open data file X as data file X has been found to comply with the security polices stored in the rules database.

Upon knowing that data file X has passed the security assessment performed by the security assessor the processor determines whether to proceed with the opening of data file X. In addition to the security assessment made by the security assessor the processor in some embodiments also considers whether data file X is tagged or not. If the processor decides that it is OK to proceed with the opening of data file X it sends a command to the content opening module to launch the opening of data file X operation 8 . The dashed lines around the installation module indicate that it is not involved in this operation.

For some embodiments illustrates an operating system that includes a rules database with rules for processing tags associated with downloaded data objects. The operation initiator in some such embodiments does not check the tag of the data object that is associated with the requested operation. Like the operating system the operating system includes an operation requestor a security assessor a rules database and an operation initiator . The operating system also includes an installation module and a content opening module .

The operation initiator receives requests for operations from the operation requestor and makes requests for security assessments to the security assessor . However unlike the operation initiator the operation initiator does not perform checking of download tags.

The security assessor receives the requests for security assessments from the operation initiator and queries the rules database for rules that match the data object associated with each security assessment request.

The rules database stores the rules for performing the security assessment. Unlike the rules database the rules database also includes rules for analyzing data objects to see if they are tagged. If the data object is tagged some embodiments then proceed to apply the rules in the rules database to perform security assessment on the data object and approve disapprove the requested operation. In some embodiments the rules database includes both an authority table and a cache table as described earlier in Section II. For example a data object that was disapproved by an earlier security assessment because of its quarantine bit can have a cache entry with an action field that disapproves the data object.

Since a signature for identifying the source of a data object is derived partly based on the content of the data object signatures can be used to test whether the data object has been altered. This also means that a data object whose content is frequently changed by users e.g. a document cannot have its own signature. However a data file can be placed in a structure such as an archive that is capable of carrying a certificate that includes a signature. Such a signature can be used to securely identify the source of the data files in the structure. In some embodiments the operating system includes rules in the rule database that approve or disapprove documents or data files based on the identifiers in the certificates embedded in the archive structures. A document in an approved archive is considered by some of these embodiments to be approved as well.

The network interface provides the communication interface between the computer and the outside world via a network. The network allows the computer to communicate over the Internet and access data objects such as data archives from other computers. The content of these archives can be text files word processor documents spreadsheets media files etc. The content of these archives can also be executable applications or application installation files. Some or all of these data archives have certificates with signatures that identify their source. A data archive can contain one piece of content such as data archive or multiple pieces of contents or files such as data archive . Though not shown in the figure the computer can also access data archives from other computers through other means of data communication such as an external flash drive.

The application is a program or a set of processes that are currently running on the computer via the operating system. The application can be an Internet browser a word processor a video game a media editing application or any programs that can operate in the computer . The application can perform operations that require communication with the Internet including downloading the data archives from the Internet via the network interface .

Once the data archives have been downloaded the application stores the downloaded files in the storage device . The storing operation of data archives into the storage device is similar to the storing operation of tagged or quarantined data as described earlier by reference to . The storage device stores the data archives. Once the data archives are stored the operating system can perform security assessments by authenticating the signatures and examining the certificates embedded in the data archives.

The operating system includes an operation requestor a security assessor a rules database an operation initiator and a content opening module . The operating system also has access to the storage device which stores several data archives including the data archive . In some embodiments the storage device includes the storage of which stores data archives downloaded from the Internet or other external sources.

In some embodiments the operating system is similar to the operating system of . Specifically the operation requestor like the operation requestor makes requests for performance of operations to the operation initiator . The operation initiator receives the request from the operation requestor and makes a request for a security assessment to the security assessor . In the example illustrated by the request is for opening a document or data file that is embedded in the data archive . The operation initiator makes the request to the security assessor by passing the data archive to the security assessor. Once the operation initiator receives the response from the security assessor it either launches the content opening module or terminates the requested operation based on the security assessment.

The security assessor and the rules database perform similar operations as the security assessor and the rules database . In some embodiments the rules database includes both an authority table and a cache table as described above in Section II by reference to . In order to securely identify the source of data files or documents the security assessor authenticates the signature before applying rules stored in the rules database .

The content opening module is similar to the content opening module of . Once it receives the launch command from the operation initiator the content opening module proceeds to open the requested data file. In the example of the data file requested to be opened is in the data archive which is stored in the storage device . To open the data file the content opening module in some embodiments extracts the data file from the archive structure and then opens the data file e.g. by sending the data file to an application that is needed to open the data file .

For some embodiments conceptually illustrates a process that performs security assessments of document opening operations. Specifically the process is performed by an operating system for making the security assessment determination based on certificates with signatures embedded in data archives.

The process starts when it receives a request for opening a data file or document . The process receives at the document that is requested to be opened. The process then determines at whether the document is of a safe type. In some embodiments documents or files of types that are considered unlikely to harm a computer are permitted to be opened regardless of its source. For example text files are considered safe and require no signature or other identifications of source. If the document is considered to be of a safe type the process proceeds to to pass the document to an operation handler such as the content opening module of for opening the document. If the document is not considered to be of a safe type the process proceeds to . Documents that are executable are not considered safe in some embodiments. Non executable documents of certain types also require source verification in some embodiments since such non executable documents are capable of carrying malicious code that may harm the computer through applications that open and use those documents.

Next the process determines at whether a document is in an archive. As mentioned above some data files or documents do not have a source identifying signature but data files can be placed in an archive structure that carries a signature. However in some embodiments documents of certain types can include signatures of their own without being in an archive e.g. documents that are rarely changed can carry a signature that tests whether the file has been altered . If the document is in an archive the process proceeds to . Otherwise the process proceeds to to perform a security assessment of the document by itself.

At the process performs security assessment based on the document s own certificate. The operation includes the authentication of the signature of the document that is embedded in the certificate of the document as well as additional security assessments based on other information in the certificate. In some embodiments the process queries the rules database for matching rules that can be used to make a security assessment on the document. This operation in some embodiments includes applying code requirements to the document. The code requirements can include instructions to examine certificates embedded in the document and to check if the source is trusted. After performing the security assessment the process determines at whether to approve the document for opening based on the matching rules. If so the process passes at the document to an operation handler such as the content opening module of for opening. Otherwise the process ends.

At the process performs security assessment based on the archive s certificate. The operation includes the authentication of the signature that is embedded in the certificate of the archive as well as additional security assessments based on other information in the certificate. In some embodiments the process queries the rules database for matching rules that can be used to make a security assessment on the archive. This operation in some embodiments includes applying code requirements to the archive. The code requirements can include instructions to examine certificates in the archive and check if the source is trusted. The process then determines at whether to approve the archive and hence all the documents in the archive for opening based on the matching rules. If so the process passes at the document to an operation handler such as the content opening module of for opening. Otherwise the process ends.

Many of the above described features and applications are implemented as software processes that are specified as a set of instructions recorded on a computer readable storage medium also referred to as computer readable medium . When these instructions are executed by one or more computational or processing unit s e.g. one or more processors cores of processors or other processing units they cause the processing unit s to perform the actions indicated in the instructions. Examples of computer readable media include but are not limited to CD ROMs flash drives random access memory RAM chips hard drives erasable programmable read only memories EPROMs electrically erasable programmable read only memories EEPROMs etc. The computer readable media does not include carrier waves and electronic signals passing wirelessly or over wired connections.

In this specification the term software is meant to include firmware residing in read only memory or applications stored in magnetic storage which can be read into memory for processing by a processor. Also in some embodiments multiple software inventions can be implemented as sub parts of a larger program while remaining distinct software inventions. In some embodiments multiple software inventions can also be implemented as separate programs. Finally any combination of separate programs that together implement a software invention described here is within the scope of the invention. In some embodiments the software programs when installed to operate on one or more electronic systems define one or more specific machine implementations that execute and perform the operations of the software programs.

The bus collectively represents all system peripheral and chipset buses that communicatively connect the numerous internal devices of the electronic system . For instance the bus communicatively connects the processing unit s with the read only memory the GPU the system memory and the permanent storage device .

From these various memory units the processing unit s retrieves instructions to execute and data to process in order to execute the processes of the invention. The processing unit s may be a single processor or a multi core processor in different embodiments. Some instructions are passed to and executed by the GPU . The GPU can offload various computations or complement the image processing provided by the processing unit s . In some embodiments such functionality can be provided using CoreImage s kernel shading language.

The read only memory ROM stores static data and instructions that are needed by the processing unit s and other modules of the electronic system. The permanent storage device on the other hand is a read and write memory device. This device is a non volatile memory unit that stores instructions and data even when the electronic system is off. Some embodiments of the invention use a mass storage device such as a magnetic or optical disk and its corresponding disk drive as the permanent storage device .

Other embodiments use a removable storage device such as a floppy disk flash memory device etc. and its corresponding disk drive as the permanent storage device. Like the permanent storage device the system memory is a read and write memory device. However unlike storage device the system memory is a volatile read and write memory such a random access memory. The system memory stores some of the instructions and data that the processor needs at runtime. In some embodiments the invention s processes are stored in the system memory the permanent storage device and or the read only memory . For example the various memory units include instructions for processing multimedia clips in accordance with some embodiments. From these various memory units the processing unit s retrieves instructions to execute and data to process in order to execute the processes of some embodiments.

The bus also connects to the input and output devices and . The input devices enable the user to communicate information and select commands to the electronic system. The input devices include alphanumeric keyboards and pointing devices also called cursor control devices cameras e.g. webcams microphones or similar devices for receiving voice commands etc. The output devices display images generated by the electronic system or otherwise output data. The output devices include printers and display devices such as cathode ray tubes CRT or liquid crystal displays LCD as well as speakers or similar audio output devices. Some embodiments include devices such as a touchscreen that function as both input and output devices.

Finally as shown in bus also couples electronic system to a network through a network adapter not shown . In this manner the computer can be a part of a network of computers such as a local area network LAN a wide area network WAN an intranet or a network of networks such as the Internet . Any or all components of electronic system may be used in conjunction with the invention.

Some embodiments include electronic components such as microprocessors storage and memory that store computer program instructions in a machine readable or computer readable medium alternatively referred to as computer readable storage media machine readable media or machine readable storage media . Some examples of such computer readable media include RAM ROM read only compact discs CD ROM recordable compact discs CD R rewritable compact discs CD RW read only digital versatile discs e.g. DVD ROM dual layer DVD ROM a variety of recordable rewritable DVDs e.g. DVD RAM DVD RW DVD RW etc. flash memory e.g. SD cards mini SD cards micro SD cards etc. magnetic and or solid state hard drives read only and recordable Blu Ray discs ultra density optical discs any other optical or magnetic media and floppy disks. The computer readable media may store a computer program that is executable by at least one processing unit and includes sets of instructions for performing various operations. Examples of computer programs or computer code include machine code such as is produced by a compiler and files including higher level code that are executed by a computer an electronic component or a microprocessor using an interpreter.

While the above discussion primarily refers to microprocessor or multi core processors that execute software some embodiments are performed by one or more integrated circuits such as application specific integrated circuits ASICs or field programmable gate arrays FPGAs . In some embodiments such integrated circuits execute instructions that are stored on the circuit itself. In addition some embodiments execute software stored in programmable logic devices PLDs ROM or RAM devices.

As used in this specification and any claims of this application the terms computer server processor and memory all refer to electronic or other technological devices. These terms exclude people or groups of people. For the purposes of the specification the terms display or displaying means displaying on an electronic device. As used in this specification and any claims of this application the terms computer readable medium computer readable media and machine readable medium are entirely restricted to tangible physical objects that store information in a form that is readable by a computer. These terms exclude any wireless signals wired download signals and any other ephemeral signals.

While the invention has been described with reference to numerous specific details one of ordinary skill in the art will recognize that the invention can be embodied in other specific forms without departing from the spirit of the invention. In addition at least some of the figures including and conceptually illustrate processes. The specific operations of these processes may not be performed in the exact order shown and described. The specific operations may not be performed in one continuous series of operations and different specific operations may be performed in different embodiments. Furthermore the process could be implemented using several sub processes or as part of a larger macro process. Thus one of ordinary skill in the art would understand that the invention is not to be limited by the foregoing illustrative details but rather is to be defined by the appended claims.

