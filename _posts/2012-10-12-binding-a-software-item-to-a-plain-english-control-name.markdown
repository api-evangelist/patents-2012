---

title: Binding a software item to a plain english control name
abstract: In a method of binding a software item to a plain English name, a user input of a plain English control name is received into a test file. A user interface under test is automatically searched for a control corresponding to the plain English control name. The corresponding control in the software item under test is automatically bound to the plain English control name.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08949794&OS=08949794&RS=08949794
owner: VMware, Inc.
number: 08949794
owner_city: Palo Alto
owner_country: US
publication_date: 20121012
---
This Application is related to U.S. patent application Ser. No. 13 650 386 by David Gibbens et al. filed on Oct. 12 2012 entitled SOFTWARE TEST AUTOMATION and assigned to the assignee of the present application to the extent not repeated herein the contents of this related patent application are hereby incorporated herein by reference.

This Application is related to U.S. patent application Ser. No. 13 650 415 by David Gibbens filed on Oct. 12 2012 entitled ALTERING A TEST and assigned to the assignee of the present application to the extent not repeated herein the contents of this related patent application are hereby incorporated herein by reference.

This Application is related to U.S. patent application Ser. No. 13 650 455 by Callistus Clark Schissel et al. filed on Oct. 12 2012 entitled SCHEDULED SOFTWARE ITEM TESTING and assigned to the assignee of the present application to the extent not repeated herein the contents of this related patent application are hereby incorporated herein by reference.

This Application is related to U.S. patent application Ser. No. 13 650 555 by David Gibbens et al. filed on Oct. 12 2012 entitled SOFTWARE DEVELOPMENT KIT TESTING and assigned to the assignee of the present application to the extent not repeated herein the contents of this related patent application are hereby incorporated herein by reference.

This Application is related to U.S. patent application Ser. No. 13 650 608 by Sean McDonald et al. filed on Oct. 12 2012 entitled CLOUD BASED SOFTWARE TESTING and assigned to the assignee of the present application to the extent not repeated herein the contents of this related patent application are hereby incorporated herein by reference.

This Application is related to U.S. patent application Ser. No. 13 650 746 by David Gibbens et al. filed on Oct. 12 2012 entitled TEST CREATION WITH EXECUTION and assigned to the assignee of the present application to the extent not repeated herein the contents of this related patent application are hereby incorporated herein by reference.

This Application is related to U.S. patent application Ser. No. 13 650 860 by Callistus Clark Schissel et al. filed on Oct. 12 2012 entitled CAPTURING TEST DATA ASSOCIATED WITH ERROR CONDITIONS IN SOFTWARE ITEM TESTING and assigned to the assignee of the present application to the extent not repeated herein the contents of this related patent application are hereby incorporated herein by reference.

This Application is related to U.S. patent application Ser. No. 13 650 969 by Mark Tempel et al. filed on Oct. 12 2012 entitled TEST ENVIRONMENT MANAGED WITHIN TESTS and assigned to the assignee of the present application to the extent not repeated herein the contents of this related patent application are hereby incorporated herein by reference.

Testing often consumes a considerable amount of time when developing software. Typically a programming background is required to create automated tests for software applications application programming interfaces software development kits web services and websites. Most test applications require users to learn a specific language to write tests. In addition when a new instance build version etc. of a product is developed new or modified tests may be required to ensure that the new instance of the product performs correctly.

Reference will now be made in detail to various embodiments examples of which are illustrated in the accompanying drawings. While various embodiments are discussed herein it will be understood that they are not intended to be limiting. On the contrary the presented embodiments are intended to cover alternatives modifications and equivalents which may be included within the spirit and scope the various embodiments as defined by the appended claims. Furthermore in this Description of Embodiments numerous specific details are set forth in order to provide a thorough understanding. However embodiments may be practiced without one or more of these specific details. In other instances well known methods procedures components and circuits have not been described in detail as not to unnecessarily obscure aspects of the described embodiments.

Unless specifically stated otherwise as apparent from the following discussions it is appreciated that throughout the present Description of Embodiments discussions utilizing terms such as accepting accessing annotating binding capturing checking conducting continuing creating determining embedding executing forwarding implementing indicating initiating invoking maintaining pausing presenting receiving referencing resuming retrying reverting searching starting stopping storing terminating testing traversing validating verifying or the like often refer to the actions and processes of an electronic computing device or system such as a virtual machine among others of a distributed computing system. The electronic computing device system transmits receives stores manipulates and or transforms signals represented as physical electrical quantities within the circuits components logic and the like of the electronic computing device system into other signals similarly represented as physical electrical quantities within the electronic computing device system or within or transmitted to other electronic computing devices systems.

Herein various systems methods and techniques for providing a test framework are described. As discussed herein the testing framework is flexible such that tests may be performed on various software items at various levels e.g. a user interface UI a web browser interface an application programming interface API etc. and perform various operations e.g. test for conformity test for bugs test operational reliability requirement testing performance testing etc. .

A framework for integrated test FIT is a tool used to create automated tests. Conventionally a FIT can be thought of as a stack with a static framework layer upon which a dynamic i.e. customizable fixture layer sits upon which static test layer sits. With a conventional FIT programmers write tests for the fixture layer and the fixture layer gathers data from HTML files to perform actions. In the conventional FIT the fixture layer is tied to a specific instance of a software item version build within a version or the like and often requires changing whenever a product revision takes place or a new build of an existing version of a software item is produced. This programming aspect is a deterrent from adopting a new testing framework such as a conventional FIT as the time required to learn a custom programming language and its syntax in order to program or alter fixture layers of a conventional FIT can be considerable. Due to the custom programming requirements many testers hire professional programmers to write tests for the fixture layer of a FIT for a particular software item under test. This can be costly. The amount of custom programming and associated cost and time can also be a deterrent to change between instances builds and versions of software items as more changes typically equate to a greater re write time for the dynamic fixture layer used to test the changes.

With continued reference to custom action layer can be used to create custom actions that can then be called by tests in test layer . This allows test layer to remain static or relatively static from version to version and build to build of a software item with changes being handled through revisions to the custom actions of custom action layer . This also allows data formats to be basic and consistent across all test types for a variety of software items and different instances e.g. version s or build s within a version of those software items. Thus testing framework as described herein allows a user to write a test for test layer and a product fixture layer once and then easily change custom action enabled test cases within custom action layer when an instance of a software item under test of changes.

In an embodiment computing environment A comprises framework user interface generator user interface and software item under test . In some embodiments computing environment A further includes a virtual machine generator . Although not depicted it should be appreciated that computing environment A includes one or more processors and storage e.g. memory disk storage etc. .

Framework as discussed herein is operable to test a software item under test and comprises various layers including a custom action layer . User interface generator may create a user interface for a remote or local user. In other words user interface generator pushes a user interface to a user running a test on the local computing environment A or a target computing environment . It should be understood by those skilled in the art that a target computing environment may be a real or virtual machine a server a personal computer or any other type of computing environment.

A local user of computing environment A may utilize user interface to run tests on a software item under test . Software item under test may comprise software local to computing environment A or software on a target computing environment . Computing environment A may import some or all of the software item under test from a target computing environment . Lastly virtual machine generator when included is operable to create a specified virtual machine platform in computing environment A or a target computing environment on which a software item may be tested.

Cloud based computing environment B can be utilized in the same manner as computing environment A. In other words computing environment B can be accessed remotely from a target computing environment to create modify portions of framework located within computing environment B or on a target computing environment which may be local or remote from a user . In an embodiment a user can remotely perform all testing in a cloud computing environment B. It should be appreciated that access and configuration of one or more resources of cloud based computing environment B may be provisioned in response to payment of a fee by a user and or as a fee based service.

In an embodiment a library may contain one or a plurality e.g. two hundreds thousands or more of custom action enabled test cases for a particular product. Each custom action enabled test case may comprise a plurality of custom actions . Libraries custom action enabled test cases and custom actions may be created edited stored and utilized independently of each other. For example one custom action enabled test case may be a part of multiple libraries . Similarly one custom action may be used in a plurality of custom action enabled test cases .

With references to FIGS. and A F the test framework described herein comprises a custom action layer operable to run custom action enabled test cases and custom actions . In an embodiment a custom action layer is positioned between a test layer and at least one fixture layer e.g. product fixture layer base fixture layer . In some embodiments the test layer and product fixture layer surrounding a custom action layer remain static i.e. substantially persistent . As an example a static test layer may sit upon a dynamic custom action layer which sits upon a static product fixture layer which sits upon a static base fixture layer which in turn sits upon a static framework layer . Custom actions written in the custom action layer are defined in the natural language of the software item under test . In other words after a programmer writes an interface between a custom action layer and a fixture layer e.g. or a novice that only knows how to write custom actions may write custom action enabled test cases for the software item under test via input of natural language information and other parameters into fields via one or more graphical user interfaces provided by user interface generator . GUIs and of are some examples of such user interfaces that may be generated by user interface generator .

Still referring to in an embodiment a custom action enabled test case comprises one or more lines actions subjects and values which cause the custom action enabled test case to perform one or more actions . Actions are comprised of both fixture actions which are substantially persistent and custom actions which are dynamic. Custom action enabled test cases can be run automatically i.e. they may be automated when invoked by a test from test layer .

With reference to in some embodiments a custom action enabled test case can be written simply by entering parameters see e.g. into fields on lines . Custom testing agent GUI illustrates an example which may be utilized to input parameters into lines e.g. A and B . In various embodiments custom testing agent GUI can test lines for syntax errors as shown in to see if they will operate correctly during a test. It should be noted that in some embodiments custom actions are executed in response to a user input instructing a check of whether the custom action enabled test case custom action or a sub portion of either e.g. a line will execute correctly while in other embodiments a user interface may automatically validate such execution of a line of a custom action or a custom action enabled test case in response to completion of entries of all required parameters into the line. As an example by inclusion of check marks shows that lines A C and D have validated as being executed successfully while line B which does not have a check mark has not executed. In message window has been presented following the successful validation of the execution of a row such as row D.

In reference to in an embodiment a new test type GUI is created by user interface generator and presented as a user interface via which a user can create a custom action enabled test case . In some embodiments at least one base test type is provided to a user. For example base test types which custom action enabled test cases are based upon may include but are not limited to user interface tests web browser tests API tests software development kit SDK tests a product specific test etc. As examples user interface tests can manipulate and run tests against a user interface such as the Windows desk top while web browser tests can test websites and web services using various browsers. As is illustrated in in some embodiments a user is presented with the option to create a completely new custom action enabled test case or to choose to modify a stored custom action enabled test case or base test type .

With continued reference to product specific tests provide users with additional custom actions . As discussed above product specific tests may also be utilized as a base test type . Product specific tests may be unique to a product and may be based on i.e. an extension of another test. In other words a product specific test includes all of the fixture actions and custom actions in from a base test type as well as additional fixture actions and custom actions specific to the product test type. As examples a Protect test is based on a user interface test while testing VMware Go test is based on a web browser test . As described herein products may include but are not limited to applications user interfaces APIs websites web services SDKs custom products etc. It should be understood that a specific product test type may also be a base test type itself i.e. it is both a specific product test type and a base test type .

As discussed briefly above in some embodiments custom action enabled test cases may be stored independently of libraries of custom action enabled test cases . For example a single custom action enabled test case may be used in a plurality e.g. two hundreds thousands or more of libraries . Thus by changing a single custom action enabled test case every library containing that custom action enabled test case will have changed. If a custom action enabled test case is deleted every library that contained that custom action enabled test case will no longer be able to access that custom action enabled test case . In some embodiments a notice may be sent to a user indicating that a custom action enabled test case has been deleted or cannot be found. Via the custom action layer custom action enabled test cases reduce the size of a test e.g. a test in a test layer from for example hundreds or thousands of operations e.g. operations to be performed at a fixture layer to a fewer number of custom actions . Moreover the language in which custom actions and custom action enabled test cases are written in is easier to comprehend than a specific programming language e.g. C C Java used for writing typical tests in a test layer . This allows a non programmer to create or modify many tests quickly.

Referring to FIGS. A and C F collections of actions may be chosen for various products and used in various custom action enabled test cases . In one embodiment a line also referred to as a step or row of a custom action enabled test case comprises three parameters 1 an action e.g. a name a reference to an action etc. 2 a subject and 3 a value . A subject refers to an object or software item under test and a value indicates what to change the subject to and or check the subject against. In an embodiment subjects and values are comma delimited lists of key value pairs. Consider an embodiment where a user enters a custom action as the action. The custom action performs at least one operation or step command etc. on a subject . A feature of custom actions is that parameters are expressed in natural language type words. Because of this custom actions are easily maintainable as they do not require code to be written or compiled before being run.

Custom actions may be stored and used independently of custom action enabled test cases and or libraries. For example a user may create and or edit a custom action . In various embodiments a custom action may be modified e.g. given a description modifying a name etc. via a GUI such as custom action editor . While the custom testing agent GUI allows a user to modify custom action enabled test cases the custom action editor allows a user to modify custom actions . A user may store a custom action independently of a custom action enabled test case . In one embodiment when a user is creating a custom action enabled test case they may simply insert or incorporate a stored custom action . This allows a user to edit every custom action enabled test case that incorporates a particular custom action by editing only the particular custom action . In some embodiments a user will be notified if a custom action has been deleted edited or cannot be found.

Referring again to and also to in an embodiment a user interface is created by user interface generator . For example a user interface may present a custom testing agent graphical user interface GUI that allows a user to enter a series of custom test actions and or create a custom action enabled test case . GUI of is one example of such a GUI. Custom testing agent GUI may allow a user to save store custom action enabled test cases in a library open libraries of custom action enabled test cases and run custom action enabled test cases .

As illustrated in and custom testing agent GUI also allows a user to check a line of a custom action enabled test case for syntax errors valid parameters etc. In some embodiments custom testing agent GUI allows users to run lines of a custom action enabled test case . In some embodiments custom testing agent GUI may be executed from a command line or as part of an automated build process. As illustrated in in some embodiments auto completion options are employed and presented such that when a user types a portion of a parameter the custom testing agent GUI predicts and presents one or a list of parameters the user is beginning to enter without the user completely typing in a parameter .

A test case can take hours or days to run. In various embodiments described herein when a test case is running and finds an error the test case pauses in an active state i.e. a state where data created edited by a test remains available and allows a user to edit the paused test case by selecting option and then continue running the test without restarting test case . In some embodiments a test case is maintained in an active state within a cloud computing environment B in which the test case is running. In some embodiments a state of a virtual machine upon which a test is running is maintained while a test is paused. As briefly discussed in the Custom Action section it should be understood that in some embodiments both test cases and custom actions may be modified. If a custom action is modified all subsequent calls to that custom action will reflect the change. It should further be appreciated that a test case may include a custom action and thus be a custom action enabled test case or may include no custom actions. As such error conditions that a user is permitted to alter while a test is maintained in an active state include errors in custom actions within a test case and errors in portions of a test case which do not involve a custom action.

As shown in in various embodiments when an error is found while a test case is running the test case pauses. In other words when an error is found a test case stops executing actions but remains active. In various embodiments while a test case is paused registers variables and parameters maintain the state they were in when the test paused. In some embodiments all prior testing information up to the occurrence of the error condition is maintained. For example this information may be maintained and accessed via a GUI or portion thereof such as test suite which lists all tests which have been executed or are scheduled to be executed.

Error conditions that may cause a test case to pause include but are not limited to not being able to find an item of software e.g. software item under test at a prescribed location not being able to find a network connection attempting to use an invalid value not being able to access a machine or data action syntax errors etc. Thus it should be appreciated that error illustrated in is presented by way of example and not of limitation and is only one of several types of error conditions that may cause execution of test case to pause.

In various embodiments test case can be run through a GUI such as a test runner or from within a custom testing agent GUI . Although shows a test runner running a test it should be understood that a test case can be run from elsewhere including but not limited to GUIs a command line as part of a build process etc. In various embodiments screen shots of can be captured during the running of a test case e.g. by a test runner . In some embodiments test runner is operable to create and provide a log of real time action execution results . It should be understood that screen shots may be accessed without using a hyperlink.

As is illustrated in in various embodiments when an error occurs a failure prompt may be provided. Example failure prompt prompts a user to select a user selectable option of a plurality of user selectable options which include but are not limited to 1 fix the current action or active test 2 retry the current action 3 resume the active test or 4 terminate the active test . Example failure prompt may also show a detailed description of the error that occurred. It should be understood that actions provided by failure prompt e.g. etc. may be added edited created or removed in various embodiments. Moreover in an embodiment a user may have the option to set whether test runner prompts a user upon the occurrence of an error.

In an embodiment a user may alter a test by selecting fix an action from failure prompt . Such selection allows editing while the executing test case is paused. In various embodiments a user may edit parameters values within variables software items etc. while a test case is paused. Editing may be performed using custom testing agent GUI or another test editor. Custom testing agent GUI may in some embodiments show a test case in which actions were performed successfully and which caused an error. For example an action execution error may be indicated by an object such as a red X and a successfully executed action may be indicated by an object such as a green check mark. In some embodiments the execution of an alteration to a test is validated while a test case is maintained in an active state. Also an alteration entered via a user interface that facilitates entry of the alteration and validation of the execution of the alteration may be accepted. For example a custom testing agent GUI is one example of such a user interface that may be utilized to alter a test and employ syntax error checking auto completion etc.

In an example screen shot is shown in which a GUI labeled New Machine Group has appeared. In this example a custom action was attempting to access a GUI labeled Machine Group. Thus in this example an error occurred when the custom action could not find the GUI Machine Group and a screen shot was captured. In some embodiments a plurality of screen shots may be captured and stored. For example a user may wish to view screen shots captured prior to error .

In some embodiments a user may check for syntax errors while editing a parameter e.g. while changing a subject or custom action . Because the test is still active and paused in various embodiments after a user performs an edit a user is prompted with failure prompt or otherwise to retry resume or terminate a test case . In one example if an error is fixed and the test case completes successfully log may record the number of actions with errors that occurred and the number of actions that were fixed.

For example shows a result summary that comprises information including but not limited to the type of machine that the test was run on test duration the start and stop times of the test the number of test suites e.g. test cases run the number of test suites that were successful failed and or did not run the number of actions performed e.g. did not fail and did not contained any validation the number of actions that passed e.g. contained validation the number of actions that were fixed the number of actions that failed etc.

With reference again to in an embodiment a user may retry an action . For example if an action attempts to perform an operation on a machine that is not yet available the user may retry that action when the machine becomes available and the test case may continue to run.

In one embodiment a user may resume a test . For example after a test case pauses due to an error a user may try to resume the custom action enabled test case after waiting for a period of time. In an embodiment a test may resume at the point where the error occurred. In other embodiments a test may resume at a point prior to where the error occurred. In one example after altering a test to fix an error a test may be resumed at the point when the error occurred or at a point previous to when the error occurred. In one embodiment by resuming a test a failure is accepted as a valid failure. In an embodiment the error or a description thereof is shown by failure prompt and or log .

In one embodiment a user may terminate a test upon the occurrence of an error. Terminating a test causes the test to stop running. In some embodiments the active state is maintained after a test case is terminated.

The following discussion sets forth in detail the operation of some example methods of operation of embodiments. With reference to B and flow diagrams and illustrate example procedures used by various embodiments. Flow diagrams and include some procedures that in various embodiments are carried out by a processor under the control of computer readable and computer executable instructions. In this fashion procedures described herein and in conjunction with flow diagrams and are or may be implemented using a computer in various embodiments. The computer readable and computer executable instructions can reside in any tangible computer readable storage media. Some non limiting examples of tangible computer readable storage media include random access memory read only memory magnetic disks and optical disks any or all of which may be employed with a computing environment A B . The computer readable and computer executable instructions which reside on tangible computer readable storage media are used to control or operate in conjunction with for example one or some combination of processors of the computing environment A B . It is appreciated that the processor s may be physical or virtual or some combination thereof it should also be appreciated that a virtual processor is implemented on physical hardware . Although specific procedures are disclosed in flow diagrams and such procedures are examples. That is embodiments are well suited to performing various other procedures or variations of the procedures recited in flow diagrams and . Likewise in some embodiments the procedures in flow diagrams and may be performed in an order different than presented and or not all of the procedures described in one or more of these flow diagrams may be performed. It is further appreciated that procedures described in flow diagrams and may be implemented in hardware or a combination of hardware with firmware and or software. In some embodiments one or more of the procedures described in flow diagrams and may be implemented in response to payment of a fee and or implemented within or via a cloud based computing environment in response to payment of a fee and or as part of a fee based service.

At procedure of flow diagram in one embodiment user interface generator presents a custom testing agent user interface e.g. GUI of for entry of a custom action . As has been discussed in various embodiments user interface generator may be implemented as a portion of computing environment A or as a portion of cloud computing environment B.

In an embodiment a custom testing agent GUI allows a user to write test and or execute a step of a custom action enabled test case . A custom action enabled test case may be written by entering an action see e.g. a subject and a value into a line of a custom action enabled test case. In some embodiments actions subjects and values may be chosen from a list . In other embodiments auto completion options are employed such that when a user types a portion of a parameter the custom testing agent GUI predicts one or more parameters the user is beginning to enter without the user completely typing in the parameter .

In various embodiments separate fields are provided for the entry of parameters . In an embodiment a first field for entry of an action to be performed is presented. For example custom testing agent GUI comprises a space to enter an action . A second field for entry of subject e.g. a software item under test on which the action i.e. operation is to be performed is presented. For example custom testing agent GUI comprises a space to enter a subject . A third field for entry of a value which is to be tested against or changed based upon the action entered into the first field is presented. For example custom testing agent GUI comprises a space to enter a value .

At procedure of flow diagram in one embodiment responsive to receipt of a sub portion of a line of the custom action via the user interface the sub portion is automatically checked for errors in syntax . Additionally or alternatively the sub portion may be checked for auto completion options . For example while entering a parameter a yellow exclamation mark will appear as the user types and highlight the syntax errors missing parameters invalid parameters and or unnecessary parameters present during each character typed to verify whether the line i.e. custom action will operate correctly when run. While a user is creating a custom action enabled test case when a syntax error is found parameters are missing or parameters are incorrectly included a user may hover over an error and a description of an error may appear. In one embodiment parameters that are invalid are highlighted. For example an invalid parameter may be shown in red text. In an embodiment a line refers to a line of code for example a custom action subject and value . In various embodiments auto completion options are presented. For example selectable parameter auto completion options may be provided to a user when the user enters a sub portion of a parameter .

At procedure of flow diagram when included in one embodiment responsive to a completed entry of the line via the user interface the execution of the line of the custom action is validated for proper execution without errors. The validation may be implemented automatically in response to completion of entry of all parameters on the line or in response to a user request for such validation. For example once all parameters are entered a custom testing agent GUI may automatically check that the line will operate correctly when run. In another embodiment line can be validated and executed individually after creation.

At procedure of flow diagram when included in one embodiment the custom action is stored as a selectable action in a dynamic layer of a testing infrastructure which is associated with a particular instance e.g. version or build within a version of a software item under test . For example users may store custom test actions custom action enabled test cases and libraries to be run by a custom action layer comprised within a framework . In an embodiment custom actions custom action enabled test cases and libraries may be stored on a user owned computer system. A user owned computer system may be a target computing environment or a computing environment A that includes testing framework . In some embodiments any authorized user owned computer system may add delete or edit custom actions custom action enabled test cases and or libraries of custom action enabled test cases . In another embodiment custom actions custom action enabled test cases and libraries can be added deleted edited and stored on a cloud based computing environment B by an authorized user.

At procedure of flow diagram when included in one embodiment a second user interface in which the stored custom action is available for selection as an executable testing action in a static layer of a testing infrastructure is presented. For example user interface generator can generate a user interface for entry of a test for test layer of framework and a stored custom test action may be entered as a line of the test and then executed at completion of entry and or whenever the test is run.

At procedure of flow diagram when included in one embodiment a user modification of the stored custom action is accepted at a time after storing of the stored custom action . In other words a user may edit a custom action a custom action enabled test case or a library after it has been saved.

At procedure of flow diagram in one embodiment in response to occurrence of an error condition during an automated test of a software item the test is maintained in an active state. In one embodiment a test e.g. a custom action a custom action enabled test case a test fixture etc. is maintained in an active state within a computing environment A B in which the test is running. In one embodiment a state of a virtual machine e.g. A etc. upon which a test is running is maintained.

In an embodiment maintaining the test in an active state refers to when the test is paused at the point in the test where the error condition occurred. For instance when an error occurs a test is paused so that the test may be resumed without restarting the test. In one embodiment an alteration to the test is accepted while the test is in this paused state. For example a custom testing agent GUI or another means of data entry may be used to alter a test while the test is paused.

In one embodiment testing of the software item then continues using the altered test. In other words a test resumes i.e. continues from the point at which it was paused in an active state such as at the point where an error occurred. In other embodiments a test may resume from a point prior to the error occurring. In one embodiment all prior testing information up to the occurrence of an error condition is maintained. As an example data changed or used during the test may be maintained when a test is paused or after a test is terminated.

At procedure of flow diagram an alteration to a test is accepted. For example a custom testing agent GUI or another means of data entry may be used to receive an alteration to the test while the test is paused. In various embodiments an execution of an alteration to a test is validated while the test is maintained in an active state. For example while the test is maintained in an active state a user may alter a test e.g. via custom testing agent GUI and check whether a test will perform correctly e.g. check for syntax errors conformity successful execution etc. . In various embodiments an alteration to a test is accepted via a user interface which facilitates entry of the alteration and validation of the execution of the alteration. In one embodiment an alteration comprising a change to a custom action of a custom action layer of a testing framework is accepted. In some examples a custom action may be added removed deleted or altered. In some examples a test may be fixed wherein the test does not comprise custom actions . In an example embodiment shown in a failure prompt is provided that allows a user to perform operations on a test.

At procedure of flow diagram the test is continued using the altered test. As discussed herein in one embodiment a test is continued from a point in the test where the error occurred. In another embodiment a test is continued from a point in the test prior to when the error occurred. A user may be able to choose where to continue a test from in some embodiments. For example a system may store screen shots and a user may view the stored screen shots . The screen shots may assist a user in determining what point in a test to continue the test from.

At procedure of flow diagram in one embodiment an automated test of a software item using a test e.g. a custom action enabled test case a custom action etc. of a testing framework is initiated.

At procedure of flow diagram in one embodiment a test within a computing environment e.g. A B in which the test is being conducted is paused. For example in one embodiment a test is maintained in an active state within a cloud computing environment B in which the test is running. In one embodiment all prior testing information up to the occurrence of the error condition is maintained while a test is paused. As examples prior testing information includes but is not limited to data in memory values within variables parameters log information etc.

At procedure of flow diagram in one embodiment an alteration to a test is accepted while the test is paused. For example a custom testing agent GUI or another means of data entry may be used to alter a test while the test is paused. In one embodiment the portion of the test which is altered by accepting the alteration is not a custom action for example the test may not even include a custom action . In another embodiment the accepted alteration does comprise a change to a custom action of a custom action layer of a testing framework . When the custom action is altered every instance of the test which uses that alteration will immediately be altered in the same manner when the altered custom action is utilized. In this manner an error is corrected only one time instead of many times. This reduces time in correcting such errors and also eliminates additional testing interruptions for the same error condition.

At procedure of flow diagram in one embodiment a test is continued using the altered test. In one embodiment a test is continued i.e. resumed from a point in the test prior to where an error occurred while in another embodiment a test is continued from the point in the test where the error occurred. In other embodiments the test may be continued from before the point in the test where the error occurred.

At procedure of flow diagram in one embodiment a test is paused within a computing environment in which the test is being conducted in response to an occurrence of an error condition during an automated test of a software item.

At procedure of flow diagram in one embodiment a plurality of user selectable options with respect to a paused test are presented.

At procedure of flow diagram in one embodiment an action with respect to a paused test is implemented in response to receipt of a selection of one of a plurality of user selectable options . In one embodiment the action is terminating the test. As an example a user may select an option via a GUI to terminate the test. After termination the test cannot be continued and instead must be restarted. In one embodiment the action comprises resuming a test from a point of an error while accepting the error as a legitimate issue in the software item under test. For example in some embodiments only particular types of errors will cause a test to pause and upon determining the cause of the error a user may elect to continue the test without altering the test.

In one embodiment the action comprises retrying a test action that caused an error condition to occur in an attempt at reproduction of an error condition . For example the error may have occurred because it was waiting for access to a machine or data that did not become available in time. In that example retrying may allow the test to run without errors after a test can access a machine or data. In other embodiments a user may fix a test and retry the test from the beginning or from a particular point in the test.

In one embodiment a user interface in which a portion of a test may be altered is presented while the test remains paused. For example a user may be presented with a custom action testing GUI a test editor or some other type of user interface with which to fix a test.

In an embodiment task scheduling computing environment A task scheduling cloud computing environment B is operable to perform continual testing. When testing on staged environments issues existing on the live environment can go unnoticed. For example a scheduled backup may not appear as a possible error in a staged testing environment. Task scheduling computing environment A task scheduling cloud computing environment B is operable to perform tests and verify the operational status of a production infrastructure prior to and post deployment i.e. tests continue to be performed post deployment which may help in determining the cause of errors in a non staged environment . Moreover task scheduling computing environment A task scheduling cloud computing environment B may send the test results to a specified electronic notification location or locations e.g. one or more of an electronic mail address addresses a social network a wiki a flat file a spread sheet a network storage location etc. . For example task scheduling computing environment A task scheduling cloud computing environment B is operable to send a screen shot log or some other documentation of an error condition. By conducting a test with a testing framework at a particular time e.g. by using a task scheduler potentially intermittent issues may be recognized and reported.

In an embodiment a task scheduler initiates a test also referred to herein as an operational check at specified intervals. For instance a task scheduler may initiate a test every ten minutes or every two hours e.g. a recurring test . In one embodiment the test is initiated immediately at a scheduled time in the future or at a recurrence interval e.g. every 10 minutes every 2 hours etc. .

Not only is a test initiated by the task scheduler able to check whether a machine is operational it also has the flexibility of the testing framework and its layers e.g. fixtures and custom action layer and test layer . This way various test types such as user interface tests web browser tests and product specific tests may be run. It should be appreciated that the tests written to perform these scheduling and monitoring functions are composed in the same commonly used language as test cases . In some embodiments task computing environment A task scheduling cloud computing environment B is operable to verify certificates. For example if Microsoft Task Scheduler is being used as task scheduler task scheduling computing environment A task scheduling cloud computing environment B can verify certificates for the Internet Information Services current tool.

Various embodiments of the testing framework discussed in the sections above may be scheduled. For instance in response to an error during a scheduled test the test may be paused within a task scheduling computing environment A task scheduling cloud computing environment B. That is in one embodiment a test is paused when an error occurs. In one embodiment the task scheduler or other portion of the computing environment which is managing a test can send notification to a specified electronic notification location or locations e.g. one or more of an electronic mail address addresses a social network a wiki a flat file a spread sheet a network storage location etc. while the test is paused. For example this may comprise sending an electronic message email to an electronic mail address while the test is maintained in an active or paused state. Additionally in some embodiments a single computing environment within which a test is to be performed is specified. Similarly a plurality of computing environments within which a test is to be performed is specified.

Task scheduling computing environment A task scheduling cloud computing environment B can be viewed as a monitoring tool and a testing tool. I.e. in addition to executing recurring tests to check whether an environment is running collections of these test results can be accumulated over time. That is to say the recorded history of tests executed on a recurring basis itself provides a unique measurement of functionality and performance measurements sampled over time. This time sampling is unique and provides insights into patterns or periods of instability in an environment.

The following discussion sets forth in detail the operation of some example methods of operation of embodiments. With reference to and flow diagrams and illustrate example procedures used by various embodiments. Flow diagrams and include some procedures that in various embodiments are carried out by a processor under the control of computer readable and computer executable instructions. In this fashion procedures described herein and in conjunction with flow diagrams and are or may be implemented using a computer in various embodiments. The computer readable and computer executable instructions can reside in any tangible computer readable storage media. Some non limiting examples of tangible computer readable storage media include random access memory read only memory magnetic disks and optical disks any or all of which may be employed with a computing environment A B . The computer readable and computer executable instructions which reside on tangible computer readable storage media are used to control or operate in conjunction with for example one or some combination of processors of the computing environment A B . It is appreciated that the processor s may be physical or virtual or some combination thereof it should also be appreciated that a virtual processor is implemented on physical hardware . Although specific procedures are disclosed in flow diagrams and such procedures are examples. That is embodiments are well suited to performing various other procedures or variations of the procedures recited in flow diagrams and . Likewise in some embodiments the procedures in flow diagrams and may be performed in an order different than presented and or not all of the procedures described in one or more of these flow diagrams may be performed. It is further appreciated that procedures described in flow diagrams and may be implemented in hardware or a combination of hardware with firmware and or software. In some embodiments one or more of the procedures described in flow diagrams and may be implemented in response to payment of a fee and or implemented within or via a cloud based computing environment in response to payment of a fee and or as part of a fee based service.

At procedure of flow diagram in one embodiment a graphical user interface is presented for scheduling a test of a software item. In an embodiment graphical user interface generator and or a task scheduler within a computing environment A B operate to provide a user interface e.g. GUI comprising test information and or actions. This GUI may be utilized to receive user input for scheduling initiation of a test of a software item.

At procedure of flow diagram in one embodiment specified information regarding conduct of a test is received via the presented graphical user interface. The specified information includes a test time for initiating the test. In one embodiment a task scheduler initiates a test according to a received test time. The specified test time may be an immediate time a time in the future or a recurrence interval upon which the test time is to recur after the scheduled time. For example a GUI such as GUI allows a user to specify whether a test will be performed immediately sometime in the future or at a recurring time e.g. every ten minutes two hours daily weekly monthly etc. .

In various embodiments specified information regarding the conduct of a test which is received via the GUI may include a selection of a single computing environment within which a test is to be performed on a software item or a selection of a plurality of computing environments within which a test is to be performed on a software item. The specified information may include one or more specified electronic notification locations e.g. one or more of an electronic mail address addresses a social network a wiki a flat file a spread sheet a network storage location etc. to which testing results for the scheduled test are to be sent.

At procedure of flow diagram in one embodiment the test is initiated at the test time that was received via the graphical user interface. For example a test is initiated by a task scheduler at a time indicated by the specified time received. In an embodiment this ensures that the operational status of an environment under test is checked. It should be appreciated that an environment under test may be a test environment or a live production environment.

At procedure of flow diagram in one embodiment the method as described in procedures further includes sending results of the test to one or more specified electronic notification locations e.g. one or more of an electronic mail address addresses a social network a wiki a flat file a spread sheet a network storage location etc. in response to completion of the test. In an embodiment a testing log see e.g. or portion thereof e.g. a derivation of a log such as a summary may be sent to the specified electronic notification location s . In some embodiments the method described in procedures can further send multiple messages results to at least one specified electronic notification location.

At procedure of flow diagram in one embodiment the method as described in procedures further includes sending a report of an error condition if an error condition occurs during testing to one or more specified electronic notification locations e.g. one or more of an electronic mail address addresses a social network a wiki a flat file a spread sheet a network storage location etc. in response to an error condition occurring during the test. For example in an embodiment a screen shot such as screen shot of the error condition if an error condition occurs is sent to the specified electronic notification locations.

At procedure of flow diagram in one embodiment the method as described in procedure further includes maintaining the test in an active state without terminating the test in response to the occurrence of an error condition. For example when an error occurs a test may be paused while an email is sent and may stay paused for a pre specified period of time to permit a user time to access the test for purposes of altering and continuing the test or debugging the environment in the state of the error condition. As discussed above maintaining a test in an active state may comprise storing various register values prior testing information data etc. such that a test may be resumed.

At procedure of flow diagram in one embodiment an automated test of a software item is initiated at a prescheduled time. As discussed above in an embodiment a test may be initiated by a task scheduler such as Microsoft Task Scheduler. GUI represents a non limiting example of a GUI which may be presented by a user interface generator and utilized to receive user input to task scheduler . In some embodiments in addition to being scheduled for initiation at a particular time an automated test may be scheduled to be initiated on a recurring basis after the prescheduled time.

In some embodiments an automated test may be initiated in accordance with direction from a task scheduler . In an embodiment for example task scheduler initiates an automated test of a software item within a preselected computing environment at a preselected time. The preselected test time may include but is not limited to when a specific system event occurs at a user specified time date at a user specified time date and on a user selected recurring interval when a machine or machines enters an idle state when a system is booted when a user logs on when a Terminal Server session changes state etc.

At procedure of flow diagram in one embodiment the test is paused within a computing environment in which the test is being conducted in response to occurrence of an error condition during the test. By pausing the test in response to occurrence of an error condition during the test certain actions may be performed before the test is resumed. For instance while a test is paused in response to an error condition during a test a report of the error condition may be sent to a specified electronic notification location or locations e.g. one or more of an electronic mail address addresses a social network a wiki a flat file a spread sheet a network storage location etc. . In one example all prior testing information is maintained up to the occurrence of the error condition. In one embodiment a test is maintained in an active state within a computing environment A B in which the test is running. Pausing the test may facilitate a user altering a portion of the test and resuming the test using the altered version of the test.

At procedure of flow diagram in one embodiment results of the test are sent to a specified electronic notification location or locations e.g. one or more of an electronic mail address addresses a social network a wiki a flat file a spread sheet a network storage location etc. in response to completion of the test. For example a screen shot a log or portion thereof or other information may be sent to an electronic mail address after a test completes or is terminated. In various embodiments results of the test include summaries of actions performed or modification to tests made during the running of a test and such summaries may be sent to an electronic notification location as part of a log or independent of a log .

In various embodiments described herein when an error condition such as error occurs during a test of a software item one or more of a variety of actions can automatically be taken in order to capture test data that is associated with the error condition. The nature of action s and the nature of the test data to be captured may vary in some embodiments based on the particulars of the actual software item under test.

As has been previously described with respect to a chronological log is maintained of testing actions performed during a test of a software item . In some embodiments when an error occurs during a test of a software item log is annotated see e.g. annotation in in a manner which describes the error which has occurred. It is appreciated that this annotation appears in the chronological order of where the error occurred during the testing.

In some embodiments as illustrated in test summary information which may include a variety of statistics about the test may be included in log or in some embodiments may be generated separately of log . For example shows a result summary that may comprise information including but not limited to the type of machine that the test was run on test duration the start and stop times of the test the number of test suites e.g. test cases run the number of test suites that were successful failed and or did not run the number of actions performed e.g. did not fail and did not contain any validation the number of actions that passed e.g. contained validation the number of actions that were fixed the number of actions that failed etc.

In some embodiments as has been previously described a screen shot may be captured of an execution state of software item upon the occurrence of the error condition while a test e.g. a test is being run on a software item under test . It is appreciated that the test may be paused while the screen shot is captured. Screen shot of illustrates one non limiting example of such a screen shot. Screen shots such as screen shot are automatically captured when a software item under test lends itself to documenting an error condition through such a screen shot capture. That is screen shot capture is associated with errors that occur during the testing of GUI applications in a graphical operating system such as Microsoft s Windows operating system or Web applications that operate through a Web browser such as Google Chrome Mozilla Firefox Microsoft Internet Explorer Apple Safari Opera and the like. Such screen shots can facilitate error analysis with respect to a test. At the same time a log from the software item under test may be captured or at least a snap shot of it may be captured at the time of occurrence of the error condition.

Similarly when a test case is being run against a software item under test which does not lend itself to screen shot capture i.e. the software item or portion of the software item under test does not involve a user interface a software item log file from the operation of the software item may be captured or at least a snap shot of the software item log file may be captured at the time of occurrence of the error.

In some embodiments a hyperlink may be embedded in a test file at the point of occurrence of or associated with an error in the chronological listing of the actions performed and logged during a test of a software item. The hyperlink may be a link to additional captured data regarding the error condition such as but not limited to a screen shot of a GUI a snap shot of a software item log or a combination of a screen shot with log files.

The following discussion sets forth in detail the operation of some example methods of operation of embodiments. With reference to and flow diagrams and illustrate example procedures used by various embodiments. Flow diagrams and include some procedures that in various embodiments are carried out by a processor under the control of computer readable and computer executable instructions. In this fashion procedures described herein and in conjunction with flow diagrams and are or may be implemented using a computer in various embodiments. The computer readable and computer executable instructions can reside in any tangible computer readable storage media. Some non limiting examples of tangible computer readable storage media include random access memory read only memory magnetic disks and optical disks any or all of which may be employed with a computing environment A B A B . The computer readable and computer executable instructions which reside on tangible computer readable storage media are used to control or operate in conjunction with for example one or some combination of processors of the computing environment A B A B . It is appreciated that the processor s may be physical or virtual or some combination thereof it should also be appreciated that a virtual processor is implemented on physical hardware . Although specific procedures are disclosed in flow diagrams and such procedures are examples. That is embodiments are well suited to performing various other procedures or variations of the procedures recited in flow diagrams and . Likewise in some embodiments the procedures in flow diagrams and may be performed in an order different than presented and or not all of the procedures described in one or more of these flow diagrams may be performed. It is further appreciated that procedures described in flow diagrams and may be implemented in hardware or a combination of hardware with firmware and or software. In some embodiments one or more of the procedures described in flow diagrams and may be implemented in response to payment of a fee and or implemented within or via a cloud based computing environment in response to payment of a fee and or as part of a fee based service.

At procedure of flow diagram in one embodiment an automated test of a software item is conducted. This can be any of the tests previously discussed and described herein such as a test case for example. The automated test of the software item may be conducted utilizing a computing environment such as any of computing environments A B A B or the like and may utilize a real or virtual machine as a device under test.

At procedure of flow diagram in one embodiment test data associated with an error condition is captured in response to an occurrence of the error condition during a test. As previously described the test data associated with the error condition may comprise a capture of one or more of a test log of actions performed during the test which may be annotated with a description of the error condition a summary of statistics regarding the test which may be included as a part of the test log a screen shot of an execution state of the software item upon occurrence of the error condition e.g. a screen shot of a GUI such as screen shot a device under test log file or snap shot thereof reflective of the time of occurrence of the error condition a software item log file from the software item under test or snap shot thereof reflective of the time of occurrence of the error condition. In the case of a test log of actions performed during the test the test log e.g. log may or may not be annotated with a description of the error condition e.g. an annotation in the manner of annotation . Additionally or alternatively the test log e.g. log may include a hyperlink e.g. hyperlink that provides a link from a point in the test log associated with the error condition to additional captured data regarding the error condition. Some non limiting examples of additional information which may be assessed via such a hyperlink include but are not limited to a screen shot of a GUI at the time of the error condition a software item log file or snap shot thereof at the time of occurrence of the error condition or a combination of a screen shot with log files.

At procedure of flow diagram in one embodiment a portion of the captured test data is forwarded to one or more designated electronic notification locations. Such electronic notification location s may be input and thus designated by a user via a user interface such as user interface or other user interface provided by a computing environment A B A B . Some non limiting examples of electronic notification locations that all or some portion of the captured test data may be forwarded to include but are not limited to one or more of an electronic mail address addresses a social network a wiki a flat file a spread sheet and a network storage location.

At procedure of flow diagram in one embodiment an automated test of a software item is conducted within a computing environment. This can be any of the tests previously discussed and described herein such as a test case for example. The automated test of the software item may be conducted utilizing or within a computing environment such as any of computing environments A B A B or the like and may utilize a real or virtual machine as a device under test.

At procedure of flow diagram in one embodiment responsive to occurrence of an error condition during the test documentation of an execution state associated with the software item is automatically captured at a time of occurrence of the error condition. This documentation is automatically captured in response to an occurrence of the error condition during the test. This may comprise capture of one or more of a screen shot of an execution state of the software item upon occurrence of the error condition e.g. a screen shot of a GUI such as screen shot a device under test log file or snap shot thereof reflective of the time of occurrence of the error condition a software item log file from the software item under test or snap shot thereof reflective of the time of occurrence of the error condition.

At procedure of flow diagram in one embodiment the captured documentation of the execution state associated with the software item is automatically electronically forwarded to one or more designated electronic notification locations. Such electronic notification location s may be input and thus designated by a user via a user interface such as user interface or other user interface provided by a computing environment A B A B . Some non limiting examples of electronic notification locations that all or some portion of the captured documentation of the execution state may be forwarded to include but are not limited to one or more of an electronic mail address addresses a social network a wiki a flat file a spread sheet and a network storage location. The actual captured documentation may be forwarded a hyperlink to the captured documentation of the execution state may be forwarded or a hyperlink to the captured documentation of the execution state may be included in a document that is forwarded. In one embodiment for example a hyperlink or multiple hyperlinks to captured documentation may be embedded in a document such as a log of testing actions performed during the test and the document may be electronically forwarded to one or more designated electronic notification locations. Hyperlink in is one example of such an embedded hyperlink.

At procedure of flow diagram in one embodiment an automated test of a software item is conducted. This can be any of the tests previously discussed and described herein such as a test case for example. The automated test of the software item may be conducted utilizing or within a computing environment such as any of computing environments A B A B or the like and may utilize a real or virtual machine as a device under test.

At procedure of flow diagram in one embodiment an error condition occurs during the testing and in response to the occurrence of the error condition a plurality of procedures and are performed.

At procedure of flow diagram in one embodiment a description of the error condition is automatically annotated into a test log of actions performed during the test. This annotation creates an annotated test log. With reference to log includes annotation and is an example of an annotated test log.

At procedure of flow diagram in one embodiment documentation of an execution state associated with the software item is automatically captured at a time of occurrence of the error condition. This documentation is automatically captured in response to an occurrence of the error condition during the test and may comprise a capture of one or more of a screen shot of an execution state of the software item upon occurrence of the error condition e.g. a screen shot of a GUI such as screen shot a device under test log file or snap shot thereof reflective of the time of occurrence of the error condition a software item log file from the software item under test or snap shot thereof reflective of the time of occurrence of the error condition.

At procedure of flow diagram in one embodiment a hyperlink to the captured documentation is automatically embedded within the annotated test log. In one embodiment for example a hyperlink or multiple hyperlinks to captured documentation may be embedded in a document such as a log of testing actions performed during the test and the document may be electronically forwarded to one or more designated electronic notification locations. Hyperlink in is one example of such an embedded hyperlink which electronically references captured documentation. Such a hyperlink allows an individual to easily and quickly access additional information about an error condition while reviewing a test log.

In one embodiment the flow diagram as described in procedures and further includes automatically electronically forwarding the annotated test log to one or more designated electronic notification locations. Such electronic notification location s may be input and thus designated by a user via a user interface such as user interface or other user interface provided by a computing environment A B A B . Some non limiting examples of electronic notification locations that the annotated test log may be forwarded to include but are not limited to one or more of an electronic mail address addresses a social network a wiki a flat file a spread sheet and a network storage location.

Typically specialized knowledge and expertise is required to properly test a software development kit SDK . Testing an SDK typically involves developing a basic application to invoke the exposed methods of the SDK and expose callback methods from the SDK. Conventionally each time a developer needs to test a different aspect of the SDK a code change and re compile of the test application is required. Embodiments described herein eliminate the requirement for such re compiling and allow for creating tests using natural language rather than a programming language.

In various embodiments both positive and negative tests may be validated. A negative test is a test where a failure is the expected output. For example failures may be verified and the handling of those failures may be verified. A positive test is a test where a success is the expected output. In some embodiments a test comprises a combination of both positive and negative tests. In other embodiments only a positive test or only a negative test is performed.

In some embodiments a user may describe actions using an SDK application programming interface API . In other words using embodiments described herein a test author can write test cases using an API manual. Thus the natural language is bound to the API.

The following discussion sets forth in detail the operation of some example methods of operation of embodiments. With reference to flow diagram illustrates example procedures used by various embodiments. Flow diagram includes some procedures that in various embodiments are carried out by a processor under the control of computer readable and computer executable instructions. In this fashion procedures described herein and in conjunction with flow diagram are or may be implemented using a computer in various embodiments. The computer readable and computer executable instructions can reside in any tangible computer readable storage media. Some non limiting examples of tangible computer readable storage media include random access memory read only memory magnetic disks and optical disks any or all of which may be employed with a computing environment A B A B . The computer readable and computer executable instructions which reside on tangible computer readable storage media are used to control or operate in conjunction with for example one or some combination of processors of the computing environment A B A B . It is appreciated that the processor s may be physical or virtual or some combination thereof it should also be appreciated that a virtual processor is implemented on physical hardware . Although specific procedures are disclosed in flow diagram such procedures are examples. That is embodiments are well suited to performing various other procedures or variations of the procedures recited in flow diagram . Likewise in some embodiments the procedures in flow diagram may be performed in an order different than presented and or not all of the procedures described in one or more of these flow diagrams may be performed. It is further appreciated that procedures described in flow diagram may be implemented in hardware or a combination of hardware with firmware and or software. In some embodiments one or more of the procedures described in flow diagram may be implemented in response to payment of a fee and or implemented within or via a cloud based computing environment in response to payment of a fee and or as part of a fee based service.

At procedure of flow diagram in one embodiment a graphical user interface is presented for initializing a test of an SDK. In an embodiment graphical user interface generator comprised within a task scheduling computing environment A or a task scheduling cloud based computing environment B provides a user interface comprising test information and or actions.

At procedure of flow diagram in one embodiment natural language is bound to an application programming interface. For example rather than learning a programming language to write code for testing the SDK the same commonly used for writing test cases may be used to write the tests for the SDK.

At procedure of flow diagram in one embodiment an output of the SDK is verified. The output may be a positive or a negative output. For instance a failure may be expected and as such the test will verify a failure occurred. Moreover a test may verify that the failure was handled correctly by an error handler.

At procedure of flow diagram in one embodiment when included each entry point into an SDK is invoked. For example an application may be written to invoke each entry point into an SDK.

At procedure of flow diagram in one embodiment when included interactions are tested with the SDK. As discussed herein positive and negative interactions may be tested with an SDK. In some embodiments the output of an SDK is expected to be positive. In other embodiments the output of an SDK is expected to be negative. Moreover in some embodiments an error handler is expected to operate in a particular manner. In various embodiments the SDK test is operable to verify that an error handler performed correctly.

At procedure of flow diagram in one embodiment when included callbacks from the SDK back to entry points in an application are tested. In one embodiment parameter values generated by the SDK passed to the callbacks are tested. In one embodiment when included a sequence of callbacks that an SDK makes to the application are tested. For example a test may verify that event A occurs before event B and that event B occurs before event C. In one embodiment testing that the SDK does not make particular callbacks to the application is performed. For example a test may determine whether or not a particular event occurred. In one embodiment testing a set of callbacks from the SDK to the application without regard to a sequence is performed. For example event A may have occurred five times event B may have occurred four times event C may have occurred zero times and any number of any other events may have occurred.

In some embodiments described herein test frameworks B manage test cases test execution and test infrastructure. In other embodiments discussed herein a test framework C is utilized in which tests themselves are responsible for managing the test environment they will be executing the test against. For example when test collateral exists in a plurality of target computing environment virtual machines e.g. two dozens hundreds or thousands of virtual machines managing the test environment within the plurality of virtual machines allows one or more test cases to run within the same test environment across the dozen of machines. In various embodiments this includes reverting virtual machine snapshots and or starting and stopping virtual machines. In some embodiments a test does not know beforehand the specific details of the testing environment it will be running in. Thus in some examples providing a test environment e.g. test environment of a test is allowed to run in a predetermined testing environment.

When managing a testing environment certain modifications may be implemented which are not in test cases as described elsewhere herein. For instance modification may exist with respect to test a particular environment that may need to be stopped and then restarted. In some embodiments snap shots are taken of a virtual environment and sent back to a test. In various embodiments commands and or actions for altering a testing environment are written in the same commonly used language as custom actions and or as test cases

For tests to run against any test environment in one embodiment the use of at least one global variable file that describes the test environment is utilized. Tests may use generic references to machine names which are defined in a global variable file e.g. an environment file . If a portion of underlying infrastructure is changed e.g. a global variable file the change impacts every test that utilizes that portion of underlying infrastructure.

In one embodiment a test is vendor agnostic. In other words a test framework C that is capable of modifying test environments may operate on any type of machine operating system API application etc. In other embodiments a test framework C is designed to operate on a particular type of virtual machine operating system application etc.

In one embodiment a graphical user interface GUI is presented to initialize a test. In one embodiment the same or another GUI is presented for the entry of parameters for a test environment . For example a GUI may be presented such that a user can enter a command to shut off revert or start a particular virtual machine.

In some embodiments some or all of the actions and processes described herein with respect to a test environment being managed within a test are performed on a physical computing environment A. In some embodiments some or all of the actions and processes described herein with respect to a test environment being managed within a test are performed in a cloud based environment such as cloud based computing environment B.

The following discussion sets forth in detail the operation of some example methods of operation of embodiments. With reference to flow diagram illustrates example procedures used by various embodiments. Flow diagram includes some procedures that in various embodiments are carried out by a processor under the control of computer readable and computer executable instructions. In this fashion procedures described herein and in conjunction with flow diagram are or may be implemented using a computer in various embodiments. The computer readable and computer executable instructions can reside in any tangible computer readable storage media. Some non limiting examples of tangible computer readable storage media include random access memory read only memory magnetic disks and optical disks any or all of which may be employed with a computing environment A B A B A B . The computer readable and computer executable instructions which reside on tangible computer readable storage media are used to control or operate in conjunction with for example one or some combination of processors of the computing environment A B A B A B . It is appreciated that the processor s may be physical or virtual or some combination thereof it should also be appreciated that a virtual processor is implemented on physical hardware . Although specific procedures are disclosed in flow diagram such procedures are examples. That is embodiments are well suited to performing various other procedures or variations of the procedures recited in flow diagram . Likewise in some embodiments the procedures in flow diagram may be performed in an order different than presented and or not all of the procedures described in one or more of these flow diagrams may be performed. It is further appreciated that procedures described in flow diagram may be implemented in hardware or a combination of hardware with firmware and or software. In some embodiments one or more of the procedures described in flow diagram may be implemented in response to payment of a fee and or implemented within or via a cloud based computing environment in response to payment of a fee and or as part of a fee based service.

At procedure of flow diagram in one embodiment a test is initialized. This can comprise presentation of a GUI via which the test is may be initialized. In an embodiment the initialized test manages the test environment that the test executes test cases against during run time. In one embodiment a test is performed on a physical computing environment A while in another embodiment a test is performed in a cloud based computing environment B. In some cases a test may be performed on both a physical computing environment A and a cloud based computing environment B.

In one embodiment the test modifies a test environment such that the test begins in a predetermined test environment . For example if a test requires a virtual machine to be shut off the test will modify test environment such that the virtual machine is shut off. If a test requires a virtual machine to be powered on at a specific snapshot the test will modify test environment such that the virtual machine is reverted to the specific snapshot and powered on. If a test requires a plurality of virtual machines in various operational states the test will modify test environment such that the plurality of virtual machines be in their required initialized state.

In one embodiment the test which manages test environment is written in the same commonly used language as a test that does not manage a test environment

At procedure of flow diagram in one embodiment at least one global variable file is accessed by the test. In an embodiment a global variable file describes test environment . It should be appreciated that in a cloud based computing environment B a test can dynamically acquire create and or provision the required systems and likewise dynamically dispose of the systems upon test completion. It should also be made clear that there is no direct dependency or binding to any specific instance of a system required to perform a test. A global variable adds a layer of abstraction wherein a user may use a generic reference to a machine or plurality of machines and global variable file will assist in translating the machine references into specific machines available in the test environment .

At procedure of flow diagram in one embodiment when included virtual machine snapshots are reverted. In an embodiment snapshots of a virtual machine are reverted such that the test may guarantee the virtual machines are in a known state. In an embodiment the virtual machine may be a target computing environment such as target computing environment of .

At procedure of flow diagram in one embodiment when included at least one virtual machine is started. For example managing a testing environment may include tests that require at least one virtual machine e.g. A B to be starting up and or recently started in order to perform a test.

At procedure of flow diagram in one embodiment when included at least one virtual machine is stopped. For example managing a testing environment may include tests that require at least one virtual machine e.g. A B to be stopped in order to perform a test.

In various embodiments framework comprises a test editor e.g. custom testing action GUI custom action editor etc. that performs real time validation and execution of a test while the test is being written.

With references again to in some embodiments as a user enters custom actions into a line in a test editor the lines are continuously being verified for syntax errors and completeness. In other words after a portion of a parameter is entered into a test e.g. test case that portion of a parameter is tested for syntax errors and completeness. If a syntax error is found an indication is provided such as an exclamation point as shown in . In some embodiments syntax verification and test execution are performed upon the entry of an action .

In one embodiment once a line is entered i.e. complete and free from syntax errors a user may execute that line e.g. execute that custom action via the test editor to verify the intended logic. In some embodiments execution is performed automatically after a line is found to be free from syntax errors . A user may execute multiple lines to verify the intended logic for each line in a test. In one example a test will indicate whether it will execute successfully and is free from syntax errors and logic errors thus reducing test creation time. It should be appreciated that via the test editor a user may select any line or combination of lines for execution at any time without restriction.

In one embodiment when every line of a test is executed in order to verify logic the entire test is run. In other words in addition to each line being verified by execution each action is also performed when executed. For example shows a custom action editor . In the first row the action WaitWindowExit has been verified and executed. When verifying whether action Click performs the correct action it is also executed i.e. run . As another example shows a plurality of lines . If the lines comprise an entire test by verifying each line in order the entire test has been run. In one embodiment an indication of a completed test is presented if a test is complete after every line is entered and verified i.e. executed .

The following discussion sets forth in detail the operation of some example methods of operation of embodiments. With reference to flow diagram illustrates example procedures used by various embodiments. Flow diagram includes some procedures that in various embodiments are carried out by a processor under the control of computer readable and computer executable instructions. In this fashion procedures described herein and in conjunction with flow diagram are or may be implemented using a computer in various embodiments. The computer readable and computer executable instructions can reside in any tangible computer readable storage media. Some non limiting examples of tangible computer readable storage media include random access memory read only memory magnetic disks and optical disks any or all of which may be employed with a computing environment A B A B . The computer readable and computer executable instructions which reside on tangible computer readable storage media are used to control or operate in conjunction with for example one or some combination of processors of the computing environment A B A B . It is appreciated that the processor s may be physical or virtual or some combination thereof it should also be appreciated that a virtual processor is implemented on physical hardware . Although specific procedures are disclosed in flow diagram such procedures are examples. That is embodiments are well suited to performing various other procedures or variations of the procedures recited in flow diagram . Likewise in some embodiments the procedures in flow diagram may be performed in an order different than presented and or not all of the procedures described in one or more of these flow diagrams may be performed. It is further appreciated that procedures described in flow diagram may be implemented in hardware or a combination of hardware with firmware and or software. In some embodiments one or more of the procedures described in flow diagram may be implemented in response to payment of a fee and or implemented within or via a cloud based computing environment in response to payment of a fee and or as part of a fee based service.

At procedure of flow diagram in one embodiment a portion of a line of a test case for a software item is received.

At procedure of flow diagram in one embodiment syntax is validated upon entry of a portion of a line . In one embodiment the parameters entered into line are tested for syntax errors upon the entry of each character. In one embodiment an indication of an error based on syntax is presented prior to execution of said line in said test case .

At procedure of flow diagram in one embodiment a line is executed after the syntax of that line is validated. For example upon entry of a custom action the custom action is executed run. In an embodiment a line custom action is executed automatically after the line custom action passes a test for syntax errors . In another embodiment a line is executed after a user chooses to execute the line .

At procedure of flow diagram in one embodiment any error based on execution is indicated. This can include but is not limited to indicating an error based on syntax. For example in some embodiments an exclamation point or an error symbol is presented upon determining the presence of a syntax error .

At procedure of flow diagram in one embodiment when included any error that occurs while executing a line is indicated. For example if a line references a GUI that is not available upon execution of that line an indication that the GUI is not available e.g. of is presented.

Typically conventional user interface automation is difficult to write and costly to maintain. However embodiments of framework discussed herein provide for user interface changes including but not limited to moving elements renaming elements changing text etc. In an embodiment a language evaluator interprets an entry and then performs user interface tree searches by combining a plurality of user interface properties for an intuitive user automation experience. Moreover in an embodiment debugging a user interface does not need to be performed before a search.

A language evaluator may identify a control e.g. an edit control by using the name of the label control adjacent to the edit control and perform multi step user interface tree searches for controls buried inside of panes by referencing the appearance of the control instead of the unique identification of the control.

In an embodiment a user may enter plain English search term into language evaluator . Using plain English term a linkage is built at run time to a control . This way a user does not need to know the underlying structure of an application. A user may access a control of an application simply by describing a control .

In an embodiment language evaluator combines parameters to pin a control in the software item under test . Parameters include but are not limited to type label appearance size associated text location on screen etc. In one example a tree of controls is searched for controls using a combination of parameters. In other words language evaluator can find a control based on a description of the appearance of that control .

In one embodiment a tree is searched for a control in a user interface in real time. For example a test may click on menu then file then new then finally machine group. Typically coding this action would require knowledge of performing tree searches. In an embodiment by entering plain English words the tree is searched. In this example language evaluator will search tree and find machine group within new which is within file which is within menu. 

The following discussion sets forth in detail the operation of some example methods of operation of embodiments. With reference to flow diagram illustrates example procedures used by various embodiments. Flow diagram includes some procedures that in various embodiments are carried out by a processor under the control of computer readable and computer executable instructions. In this fashion procedures described herein and in conjunction with flow diagram are or may be implemented using a computer in various embodiments. The computer readable and computer executable instructions can reside in any tangible computer readable storage media. Some non limiting examples of tangible computer readable storage media include random access memory read only memory magnetic disks and optical disks any or all of which may be employed with a computing environment A B A B A B . The computer readable and computer executable instructions which reside on tangible computer readable storage media are used to control or operate in conjunction with for example one or some combination of processors of the computing environment A B A B A B . It is appreciated that the processor s may be physical or virtual or some combination thereof it should also be appreciated that a virtual processor is implemented on physical hardware . Although specific procedures are disclosed in flow diagram such procedures are examples. That is embodiments are well suited to performing various other procedures or variations of the procedures recited in flow diagram . Likewise in some embodiments the procedures in flow diagram may be performed in an order different than presented and or not all of the procedures described in one or more of these flow diagrams may be performed. It is further appreciated that procedures described in flow diagram may be implemented in hardware or a combination of hardware with firmware and or software. In some embodiments one or more of the procedures described in flow diagram may be implemented in response to payment of a fee and or implemented within or via a cloud based computing environment in response to payment of a fee and or as part of a fee based service.

At procedure of flow diagram in one embodiment a user input of a plain English control name is received into a test file. In some embodiments a user input is entered into a search bar. In other embodiments a user input may comprise a selection from a list.

At procedure of flow diagram in one embodiment a user interface under test is automatically searched for a control corresponding to the plain English control name. In one embodiment searching a user interface comprises traversing a tree of controls. In one embodiment searching a user interface comprises scanning parameters within trees . For example while scanning a tree parameters within an item in the tree may be scanned to determine whether the control has been found. In one embodiment debugging does not need to be performed before a search. In some examples a user interface must be debugged before a control can be bound to a plain English name.

At procedure of flow diagram in one embodiment a control in the software item under test is dynamically bound to the plain English control name. In one embodiment binding a plain English control name to a software item under test comprises determining the location of a control . In one example searching and or binding occur in real time.

Numerous embodiments have been described herein as examples and many embodiments are also more fully described under distinct headings. Embodiments were presented in this manner for purposes of clarity and such presentation is not meant to imply that embodiments described in isolation from other embodiments are not interoperable. To the contrary it should be appreciated that the embodiments described herein may be combined in a variety of combinations with one another and that such combinations of the embodiments described herein are fully anticipated. Some non limiting examples of such combinations of the embodiments and concepts describe herein include but are not limited to combining embodiments discussed in the Custom Actions section with embodiments discussed in the Scheduled Software Item Testing section combining embodiments discussed in the Custom Editors section with embodiments discussed in the Altering a Test while a Test is in an Active State section further combining with embodiments discussed in the Software Development Kit Testing section etc.

Example embodiments of the subject matter are thus described. Although various embodiments have been described in a language specific to structural features and or methodological acts it is to be understood that the appended claims are not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims and their equivalents.

