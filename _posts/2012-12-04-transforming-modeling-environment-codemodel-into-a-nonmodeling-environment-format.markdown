---

title: Transforming modeling environment code/model into a non-modeling environment format
abstract: A device receives code in a modeling environment format, receives a model in the modeling environment format, and receives relationships information associated with one or more relationships between the code and the model. The device combines the code, the model, and the relationships information to generate an output file in a non-modeling environment format, and outputs or stores the output file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09098291&OS=09098291&RS=09098291
owner: The MathWorks, Inc.
number: 09098291
owner_city: Natick
owner_country: US
publication_date: 20121204
---
The accompanying drawings which are incorporated in and constitute a part of this specification illustrate one or more implementations and together with the description explain these implementations. In the drawings 

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

A technical computing environment TCE may provide a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that requires the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In one example a TCE may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations.

Code generated by the TCE may be tested to determine whether the code will function properly e.g. when executed . In one example the code may be validated by determining traceability between the generated code and a model generated by the TCE. The TCE may permit a user of the TCE to navigate between the generated code and the model in order to determine traceability. However such navigation is permissible only within the TCE.

Systems and or methods described herein may transform modeling environment code and or a model into a non modeling environment format file. In one example the non modeling environment format file may be viewed in any web browser and may include interrelationships between the code and the model. The non modeling environment format file may enable a user to view the code the model and the interrelationships without the need of a modeling environment such as a TCE.

As further shown in the transform component may receive code generated by the TCE a model generated by the TCE and information associated with relationships between the TCE code and the TCE model. The TCE code may include text based code that may require further processing to execute binary code that may be executed text files that may be executed in conjunction with other executables a graphical model one or more combinations of the aforementioned etc. In one example the TCE code may be in a format viewable by the TCE. The TCE model may include a textual model a block diagram model with one or more model elements e.g. blocks one or more inputs and one or more outputs a combination of a textual model and a graphical model etc. Each of the model elements may include a representation e.g. a block of a hardware device a subsystem another model etc. of a system being modeled by the TCE. The relationships information may include information identifying characters in the TCE code blocks in the TCE model actions associated between the TCE code and the TCE model e.g. a selection of a block in the TCE model may cause corresponding lines of the TCE code to be highlighted and vice versa etc.

As further shown in the transform component may receive inputs from a user of the TCE. In one example the inputs may include information identifying portions of the TCE code and or the TCE model to include in or exclude from a transformed output file. The transform component may combine e.g. based on the inputs the TCE code the TCE model and the relationships information to generate an output file in a non modeling environment format e.g. a non TCE format a modeling environment different than the TCE etc. . The transform component may output e.g. display and or store the output file. In one example the output file when executed may display a code panel e.g. a window for displaying the TCE code e.g. in the non TCE format and a model panel for displaying the TCE model e.g. in the non TCE format . Alternatively or additionally the output file when executed may display a code navigation panel that enables a user to navigate the TCE code displayed in the code panel and a model navigation panel that enables a user to navigate the TCE model displayed in the model panel.

The terms code and program code as used herein are to be used interchangeably and are to be broadly interpreted to include text based code that may not require further processing to execute e.g. C code Hardware Description Language HDL code very high speed integrated circuits VHSIC HDL VHDL code Verilog Java and or other types of hardware or software based code that may be compiled and or synthesized binary code that may be executed e.g. executable files that may directly be executed by an operating system bitstream files that can be used to configure a field programmable gate array FPGA Java byte code object files combined together with linker directives source code makefiles etc. text files that may be executed in conjunction with other executables e.g. Python text files a collection of dynamic link library DLL files with text based combining configuration information that connects pre compiled modules an extensible markup language XML file describing module linkage etc. etc. In one example code may include different combinations of the above identified classes e.g. text based code binary code text files etc. . Alternatively or additionally code may include code generated using a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations. Alternatively or additionally code may be of any type such as function script object etc. and a portion of code may include one or more characters lines etc. of the code.

Client device may include one or more devices that are capable of communicating with server device via network . For example client device may include a laptop computer a personal computer a tablet computer a desktop computer a workstation computer a smart phone a personal digital assistant PDA and or other computation and communication devices.

Server device may include one or more server devices or other types of computation and communication devices that gather process and or provide information in a manner described herein. Server device may include a device that is capable of communicating with client device e.g. via network . In one example server device may include one or more laptop computers personal computers workstation computers servers central processing units CPUs graphical processing units GPUs application specific integrated circuits ASICs field programmable gate arrays FPGAs etc. and or software e.g. a simulator executing on the aforementioned devices. In one example server device may include TCE and may perform some or all of the functionality described herein for client device . Alternatively server device may be omitted and client device may perform all of the functionality described herein for client device .

Network may include a network such as a local area network LAN a wide area network WAN a metropolitan area network MAN a telephone network such as the Public Switched Telephone Network PSTN an intranet the Internet or a combination of networks.

TCE may be provided within a computer readable medium of client device . Alternatively or additionally TCE may be provided in another device e.g. server device that is accessible by client device . TCE may include hardware or a combination of hardware and software that provides a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that required the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In one implementation TCE may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations. One or more portions of TCE may be provided as software as service.

For example TCE may use an array as a basic element where the array may not require dimensioning. These arrays may be used to support array based programming where an operation may apply to an entire set of values included in the arrays. Array based programming may allow array based operations to be treated as high level programming that may allow for example operations to be performed on entire aggregations of data without having to resort to explicit loops of individual non array operations. In addition TCE may be adapted to perform matrix and or vector formulations that can be used for data analysis data visualization application development simulation modeling algorithm development etc. These matrix and or vector formulations may be used in many areas such as statistics image processing signal processing control design life sciences modeling discrete event analysis and or design state based analysis and or design etc.

TCE may further provide mathematical functions and or graphical tools e.g. for creating plots surfaces images volumetric representations etc. . In one implementation TCE may provide these functions and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . Alternatively or additionally TCE may provide these functions as block sets or in another way such as via a library etc.

TCE may be implemented as a text based environment e.g. MATLAB software Octave Python Comsol Script MATRIXx from National Instruments Mathematica from Wolfram Research Inc. Mathcad from Mathsoft Engineering Education Inc. Maple from Maplesoft Extend from Imagine That Inc. Scilab from The French Institution for Research in Computer Science and Control INRIA Virtuoso from Cadence Modelica or Dymola from Dynasim etc. a graphically based environment e.g. Simulink software Stateflow software SimEvents software Simscape software etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments Dymola by Dynasim SoftWIRE by Measurement Computing WiT by DALSA Coreco VEE Pro or SystemVue by Agilent Vision Program Manager from PPT Vision Khoros from Khoral Research Gedae by Gedae Inc. Scicos from INRIA Virtuoso from Cadence Rational Rose from IBM Rhopsody or Tau from Telelogic Ptolemy from the University of California at Berkeley aspects of a Unified Modeling Language UML or SysML environment etc. or another type of environment such as a hybrid environment that includes one or more of the above referenced text based environments and one or more of the above referenced graphically based environments.

TCE may include a programming language e.g. the MATLAB language that may be used to express problems and or solutions in mathematical notations. The programming language may be dynamically typed and or array based. In a dynamically typed array based computing language data may be contained in arrays and data types of the data may be determined e.g. assigned at program execution time.

For example suppose a program written in a dynamically typed array based computing language includes the following statements 

Now suppose the program is executed for example in a TCE such as TCE . During run time when the statement A hello is executed the data type of variable A may be a string data type. Later when the statement A int32 1 2 is executed the data type of variable A may be a 1 by 2 array containing elements whose data type are 32 bit integers. Later when the statement A 1.1 2.2 3.3 is executed since the language is dynamically typed the data type of variable A may be changed from the above 1 by 2 array to a 1 by 3 array containing elements whose data types are floating point. As can be seen by this example data in a program written in a dynamically typed array based computing language may be contained in an array. Moreover the data type of the data may be determined during execution of the program. Thus in a dynamically type array based computing language data may be represented by arrays and data types of data may be determined at run time.

TCE may provide mathematical routines and a high level programming language suitable for non professional programmers and may provide graphical tools that may be used for creating plots surfaces images volumetric representations or other representations. TCE may provide these routines and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . TCE may also provide these routines in other ways such as for example via a library local or remote database e.g. a database operating in a computing cloud remote procedure calls RPCs and or an application programming interface API . TCE may be configured to improve runtime performance when performing computing operations. For example TCE may include a just in time JIT compiler.

Although shows example components of environment in other implementations environment may include fewer components different components differently arranged components and or additional components than those depicted in . Alternatively or additionally one or more components of environment may perform one or more other tasks described as being performed by one or more other components of environment .

Processing unit may include one or more processors microprocessors or other types of processing units that may interpret and execute instructions. Main memory may include one or more random access memories RAMs or other types of dynamic storage devices that may store information and or instructions for execution by processing unit . ROM may include one or more ROM devices or other types of static storage devices that may store static information and or instructions for use by processing unit . Storage device may include a magnetic and or optical recording medium and its corresponding drive.

Input device may include a mechanism that permits a user to input information to device such as a keyboard a camera an accelerometer a gyroscope a mouse a pen a microphone voice recognition and or biometric mechanisms a remote control a touch screen a neural interface etc. Output device may include a mechanism that outputs information to the user including a display a printer a speaker etc. Communication interface may include any transceiver like mechanism that enables device to communicate with other devices networks and or systems. For example communication interface may include mechanisms for communicating with another device or system via a network.

As described herein device may perform certain operations in response to processing unit executing software instructions contained in a computer readable medium such as main memory . A computer readable medium may be defined as a non transitory memory device. A memory device may include space within a single physical memory device or spread across multiple physical memory devices. The software instructions may be read into main memory from another computer readable medium such as storage device or from another device via communication interface . The software instructions contained in main memory may cause processing unit to perform processes described herein. Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

Although shows example components of device in other implementations device may include fewer components different components differently arranged components and or additional components than depicted in . Alternatively or additionally one or more components of device may perform one or more other tasks described as being performed by one or more other components of device .

Block diagram editor may include hardware or a combination of hardware and software that may be used to graphically specify models of dynamic systems. In one implementation block diagram editor may permit a user to perform actions such as construct edit display annotate save execute and or print a graphical model e.g. a block diagram that visually and or pictorially represents a dynamic system . In another implementation block diagram editor may permit a user to create and or store data relating to graphical entities .

A textual interface may be provided to permit interaction with block diagram editor . A user may write scripts that perform automatic editing operations on a model using the textual interface. For example the textual interface may provide a set of windows that may act as a canvas for the model and may permit user interaction with the model. A model may include one or more windows depending on whether the model is partitioned into multiple hierarchical levels.

Graphical entities may include hardware or a combination of hardware and software that may provide entities e.g. signal lines buses etc. that represent how data may be communicated between functional and or non functional units and blocks of a model. Blocks may include fundamental mathematical elements of a block diagram model.

Execution engine may include hardware or a combination of hardware and software that may process a graphical model to produce simulation results may convert the graphical model into executable code and or may perform other analyses and or related tasks. In one implementation for a block diagram graphical model execution engine may translate the block diagram into executable entities e.g. units of execution following the layout of the block diagram. The executable entities may be compiled and or executed on a device e.g. client device to implement the functionality specified by the model.

Graphical models may include entities with relationships between the entities and the relationships and or the entities may have attributes associated with them. The entities may include model elements such as blocks and ports. The relationships may include model elements such as lines e.g. connector lines and references. The attributes may include model elements such as value information and meta information for the model element associated with the attributes. Graphical models may be associated with configuration information. The configuration information may include information for the graphical model such as model execution information e.g. numerical integration schemes fundamental execution period etc. model diagnostic information e.g. whether an algebraic loop should be considered an error or result in a warning model optimization information e.g. whether model elements should share memory during execution model processing information e.g. whether common functionality should be shared in code that is generated for a model etc.

Additionally or alternatively a graphical model may have executable semantics and or may be executable. An executable graphical model may be a time based block diagram. A time based block diagram may consist for example of blocks e.g. blocks connected by lines e.g. connector lines . The blocks may consist of elemental dynamic systems such as a differential equation system e.g. to specify continuous time behavior a difference equation system e.g. to specify discrete time behavior an algebraic equation system e.g. to specify constraints a state transition system e.g. to specify finite state machine behavior an event based system e.g. to specify discrete event behavior etc. The lines may represent signals e.g. to specify input output relations between blocks or to specify execution dependencies between blocks variables e.g. to specify information shared between blocks physical connections e.g. to specify electrical wires pipes with volume flow rigid mechanical connections etc. etc. The attributes may consist of meta information such as sample times dimensions complexity whether there is an imaginary component to a value data type etc. associated with the model elements.

In a time based block diagram ports may be associated with blocks e.g. blocks . A relationship between two ports may be created by connecting a line e.g. a connector line between the two ports. Lines may also or alternatively be connected to other lines for example by creating branch points. For instance three or more ports can be connected by connecting a line to each of the ports and by connecting each of the lines to a common branch point for all of the lines. A common branch point for the lines that represent physical connections may be a dynamic system e.g. by summing all variables of a certain type to 0 or by equating all variables of a certain type . A port may be an input port an output port an enable port a trigger port a function call port a publish port a subscribe port an exception port an error port a physics port an entity flow port a data flow port a control flow port etc.

Relationships between blocks e.g. blocks may be causal and or non causal. For example a model may include a block that represents a continuous time integration block that may be causally related to a data logging block by using a line e.g. a connector line to connect an output port of the continuous time integration block to an input port of the data logging block. Further during execution of the model the value stored by the continuous time integrator may change as the current time of the execution progresses. The value of the state of the continuous time integrator may be available on the output port and the connection with the input port of the data logging block may make this value available to the data logging block.

A sample time may be associated with the elements of a graphical model. For example a graphical model may include a block e.g. block with a continuous sample time such as a continuous time integration block that may integrate an input value as time of execution progresses. This integration may be specified by a differential equation. During execution the continuous time behavior may be approximated by a numerical integration scheme that is part of a numerical solver. The numerical solver may take discrete steps to advance the execution time and these discrete steps may be constant during an execution e.g. fixed step integration or may be variable during an execution e.g. variable step integration .

Alternatively or additionally a graphical model may include a block e.g. block with a discrete sample time such as a unit delay block that may output values of a corresponding input after a specific delay. This delay may be a time interval and this interval may determine a sample time of the block. During execution the unit delay block may be evaluated each time the execution time has reached a point in time where an output of the unit delay block may change. These points in time may be statically determined based on a scheduling analysis of the graphical model before starting execution.

Alternatively or additionally a graphical model may include a block e.g. block with an asynchronous sample time such as a function call generator block that may schedule a connected block to be evaluated at a non periodic time. During execution a function call generator block may evaluate an input and when the input attains a specific value when the execution time has reached a point in time the function call generator block may schedule a connected block e.g. a function call block to be evaluated at this point in time and before advancing execution time.

Further the values of attributes of a graphical model may be inferred from other elements of the graphical model or attributes of the graphical model. For example the graphical model may include a block e.g. block such as a unit delay block that may have an attribute that specifies a sample time of the block. When a graphical model has an execution attribute that specifies a fundamental execution period the sample time of the unit delay block may be inferred from this fundamental execution period.

As another example the graphical model may include two unit delay blocks e.g. blocks where the output of the first of the two unit delay blocks is connected to the input of the second of the two unit delay block. The sample time of the first unit delay block may be inferred from the sample time of the second unit delay block. This inference may be performed by propagation of model element attributes such that after evaluating the sample time attribute of the second unit delay block a graph search may proceed by evaluating the sample time attribute of the first unit delay block since it is directly connected to the second unit delay block.

The values of attributes of a graphical model may be set to characteristics settings such as one or more inherited settings one or more default settings etc. For example the data type of a variable that is associated with a block e.g. block may be set to a default such as a double. Because of the default setting an alternate data type e.g. a single an integer a fixed point etc. may be inferred based on attributes of elements that the graphical model comprises e.g. the data type of a variable associated with a connected block and or attributes of the graphical model. As another example the sample time of a block may be set to be inherited. In case of an inherited sample time a specific sample time may be inferred based on attributes of elements that the graphical model comprises and or attributes of the graphical model e.g. a fundamental execution period .

Although shows example functional components of TCE in other implementations TCE may include fewer functional components different functional components differently arranged functional components and or additional functional components than depicted in . Alternatively or additionally one or more functional components of TCE may perform one or more other tasks described as being performed by one or more other functional components of TCE .

As further shown in transform component may receive code generated by TCE a model generated by TCE and information associated with relationships between TCE code and TCE model . In one example transform component may receive TCE code TCE model and relationships information when a user of TCE selects a command to generate a transformed output file. TCE code may include text based code that may require further processing to execute binary code that may be executed text files that may be executed in conjunction with other executables a graphical model one or more combinations of the aforementioned etc. In one example TCE code may be in a format that is viewable only within TCE as indicated by reference number . TCE model may include a textual model a block diagram model with one or more model elements e.g. blocks one or more inputs and one or more outputs a combination of a textual model and a graphical model etc. Each of the model elements may include a representation e.g. a block of a hardware device a subsystem another model etc. of a system being modeled by TCE . In one example TCE model may be in a format that is viewable only within TCE as indicated by reference number .

Relationships information may include information identifying one or more characters in TCE code blocks in TCE model relationships between TCE code and TCE model e.g. a selection of a block in TCE model may cause corresponding lines of TCE code to be highlighted mappings between TCE code and TCE model e.g. a block in TCE model may be mapped to particular portions of TCE code etc. In one example relationships information may be in a format that is viewable only within TCE as indicated by reference number .

As further shown in transform component may receive inputs from a user of TCE e.g. via an input device . In one example implementation inputs may include information identifying portions of TCE code and or TCE model to include in or exclude from a transformed output file. For example if the transformed output file is to be provided to a potential buyer or reviewer and the user of TCE does not wish to reveal trade secrets in TCE code and or TCE model inputs may be used to limit information provided to the buyer reviewer. In such a situation inputs may be used to provide enough information in the transformed output file so that the buyer reviewer knows generally how TCE code and or TCE model operate and what outputs are generated by TCE code and or TCE model . However inputs may prevent the buyer reviewer from copying TCE code and or TCE model and from reproducing the outputs generated by TCE code and or TCE model .

Transform component may combine e.g. based on inputs TCE code TCE model and relationships information to generate an output file in a non modeling environment format e.g. a non TCE format such as a web format a hypertext markup language HTML format a Portable Document Format PDF etc. . Transform component may output e.g. display and or store output file . In one example output file when executed may display a code panel for displaying TCE code e.g. in non TCE format and or a model panel for displaying TCE model e.g. in non TCE format . Alternatively or additionally output file when executed may display a code navigation panel that enables a user to navigate TCE code displayed in the code panel and or a model navigation panel that enables a user to navigate TCE model displayed in the model panel.

Alternatively or additionally output file when executed may display an integrated report that includes TCE code in non TCE format and TCE model in non TCE format . For example the integrated report may be in a format e.g. a web format a HTML format a PDF etc. that is viewable in a web browser and may be self contained e.g. suitable for a program that combines files together into a single zip file archive of TCE code and TCE model . The integrated report may be opened and reviewed without the need for a modeling environment e.g. TCE and may enable the reviewer to trace TCE code to TCE model from the code panel.

Alternatively or additionally display of output file may enable a reviewer of output file to see the relationships e.g. as set forth in relationships information between TCE code and TCE model . A portion of TCE code may include relationships with one or more portions e.g. blocks of TCE model and a portion of TCE model may include relationships with one or more portions of TCE code . The reviewer may interact with output file to see the relationships and may utilize the relationships to determine traceability between TCE code and TCE model without being in a modeling environment e.g. TCE . In one example if a relationship does not exist between a portion of TCE code and TCE model or between a portion of TCE model and TCE code output file may display an explanation as to why the relationship does not exist e.g. may display an error message indicating an untraceable line block etc. .

Alternatively or additionally the reviewer may add comments and or notations to the displayed output file . The comments and or notations may be imported into TCE and may be utilized to edit or review TCE code and or TCE model within TCE . The reviewer may zoom in or out of any portion of the displayed output file such as zooming in on a portion of the model presented in the model panel. If the user zooms in on a portion of the model presented in the model panel output file may modify the information displayed for the model based on the zooming operation.

Alternatively or additionally output file may enable TCE code and or TCE model to be reviewed without utilizing a modeling environment e.g. TCE that may require a license and consume an inordinate amount of computing resources. Output file may be provided in a neutral media environment format e.g. a web HTML PDF etc. format so that output file may be easily imported into an environment that does not support the modeling environment.

Alternatively or additionally output file may enable TCE code and or TCE model to be archived for the future. For example if TCE code and or TCE model relate to a product that has a lifetime of fifty 50 years and there is an issue toward the end of the product s life output file may be utilized to investigate the issue. The modeling environment used to create TCE code and or TCE model may not exist and thus TCE code and or TCE model may not be recovered. However the neutral media environment format of output file may enable TCE code and or TCE model to be analyzed even far into the future.

Alternatively or additionally output file when executed may provide enough information so that a buyer reviewer of TCE code and or TCE model knows generally how TCE code and or TCE model operate and what outputs are generated by TCE code and or TCE model . However output file may prevent the buyer reviewer from copying TCE code and or TCE model and from reproducing the outputs generated by TCE code and or TCE model . For example output file may display portions of TCE code e.g. an algorithm but may not display data used in the portions of TCE code e.g. a parameter or a data set needed to execute the algorithm . In another example output file may display one or more links to portions of TCE code that may be securely executed so that the buyer reviewer may not be able to see all of TCE code but may still have access to the functionality.

Alternatively or additionally output file may when executed may display information associated with multiple TCE codes and multiple TCE models . For example a user may generate a first TCE code and a first TCE model and then may change the first TCE code or the first TCE model to generate a second TCE code and a second TCE model . The second TCE code TCE model may be a different version of the first TCE code TCE model . In such a situation output file may display first information associated with the first TCE code TCE model and second information associated with the second TCE code TCE model . The user may compare the first information and the second information to determine the effect of the change to the first TCE code TCE model . This may enable the user to compare different versions of TCE code and or TCE model in an efficient manner. For example the comparison may enable the user to determine what is new what is deleted what is changed etc. in a color coded fashion.

In one example implementation transform component of TCE may receive a model generated via TCE e.g. TCE model . Transform component may semantically process TCE model to generate derived information and one or more relationships e.g. relationships information between TCE model and the derived information. In one example when processing TCE model transform component may compile TCE model to infer data types in TCE model order execution of two or more elements of TCE model infer dimensions in TCE model etc. Alternatively or additionally when processing TCE model transform component may optimize TCE model via loop unrolling inlining outlining expression unfolding etc. The derived information may include TCE code simulation results coverage results verification results etc.

Transform component may store via TCE the relationship s in a format e.g. output file that enables a general purpose environment to read the relationship s and to navigate between TCE model and the derived information using the relationship s . In one example the general purpose environment may include a web browser. The format may enable the general purpose environment to read the relationship s and to navigate between the model and the derived information using the relationship s without semantic processing of TCE model .

Although shows example operations capable of being performed by TCE in other implementations TCE may perform fewer operations different operations and or additional operations than depicted in . Alternatively or additionally one or more components of may perform one or more other tasks described as being performed by one or more other components of .

Media file creator component may receive TCE code and may convert one or more portions of TCE code into a media file . Media file may include a file in a media format such as for example a PDF a word processing format an HTML format etc. In one example media file creator component may tag one or more portions of TCE code and may translate the tagged portions into media file . As further shown in media file creator component may provide media file to combiner component .

Interactive graphic file creator component may receive TCE model and may convert one or more portions of TCE model into an interactive graphic file . Interactive graphic file may include a file in an interactive graphic format such as for example a scalable vector graphics SVG format an interactive PDF etc. In one example interactive graphic file may include an image capturing format that enables a user to zoom in and out of the captured images of TCE model without a loss of quality. Alternatively or additionally interactive graphic file creator component may receive a textual based a graphical based or a textual and graphical based TCE model . As further shown in interactive graphic file creator component may provide interactive graphic file to combiner component .

Script file creator component may receive relationships information and may convert relationships information into a script file . Script file may include a file in a script format such as for example a JavaScript format a Windows script format a Unix script format Extensible Markup Language XML format etc. In one example script file may include a data set that provides relationships between portions of TCE code a data set that provides relationships between blocks of TCE model a mapping file that maps the data set for TCE code with the data set for TCE model etc. Script file may enable the information displayed by output file to react to any gestures or actions e.g. selection a mouse click a sliding gesture etc. that may be performed on the information by a user of output file .

For example the user may select e.g. with a mouse a block of TCE model displayed by output file and script file may identify and display information associated with the selected block. Script file may also identify e.g. highlight lines of TCE code displayed by output file associated with the selected block. Alternatively or additionally TCE code and TCE model may be hierarchical e.g. TCE model may include sub blocks and TCE code may include doe modules . As the user navigates to a particular hierarchy of TCE model script file may adjust the display of TCE code to show a portion of TCE code related to the particular hierarchy of TCE model . Alternatively or additionally a block of TCE model may include behavior associated with the block data associated with the block a parameter associated with the block analysis information e.g. coverage results associated with the block etc. When the user selects the block interactive graphic file may display default information associated with the block and may enable the user to change the information displayed for the block. If the user hovers over the block for a particular time period additional information associated with the block may be displayed. Further examples of such gestures are provided below in connection with for example one or more of . As further shown in script file creator component may provide script file to combiner component .

Combiner component may receive media file interactive graphic file script file and inputs . Combiner component may combine e.g. based on inputs media file interactive graphic file and script file to generate output file in a non modeling environment format e.g. non TCE format . In one example combiner component may utilize inputs to determine portions of media file interactive graphic file and script file to include in or exclude from output file . Combiner component may output e.g. display and or store output file . In one example implementation combiner component may automatically test media file interactive graphic file script file and or output file to determine whether traceability exists between media file and interactive graphic file . Alternatively or additionally a user may manually test output file to determine whether traceability exists between media file and interactive graphic file e.g. by selecting links blocks etc. and verifying that traceability is correct .

Although shows example functional components of transform component in other implementations transform component may include fewer functional components different functional components differently arranged functional components and or additional functional components than depicted in . Alternatively or additionally one or more functional components of transform component may perform one or more other tasks described as being performed by one or more other functional components of transform component .

As shown in user interface may include a variety of information associated with output file . For example user interface may include a code navigation panel a code panel a model navigation panel and a model panel .

Code navigation panel may enable a user to navigate a representation e.g. media file of TCE code provided in code panel . For example code navigation panel may include links to reports e.g. subsystem report traceability report etc. that may be displayed in code panel and a list of generated files e.g. main files model files data files utility files etc. that may be displayed in code panel . As further shown in code navigation panel may include code navigation buttons that control backward and forward navigation through information displayed in code panel .

Code panel may include a representation e.g. media file of TCE code . In one example code panel may display information associated with a report that is selected in code navigation panel e.g. a Code Generation Report for a fuel system . Alternatively or additionally code panel may display information associated with a generated file that is selected in code navigation panel . Alternatively or additionally code panel may display TCE code information associated with a portion of TCE model selected in model navigation panel and or model panel .

Model navigation panel may enable a user to navigate a representation e.g. interactive graphic file of TCE model provided in model panel . For example model navigation panel may include a directory of elements e.g. blocks provided in the representation of TCE model displayed in model panel .

Model panel may include a representation e.g. interactive graphic file of TCE model . In one example model panel may display information associated with an element that is selected from the directory of model navigation panel e.g. a Fault Tolerant Fuel Control System . Alternatively or additionally model panel may display TCE model information associated with a portion of TCE code selected in code navigation panel and or code panel . As further shown in model panel may include model navigation buttons that control navigation through information displayed in model panel .

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

As shown in user interface may include a variety of information associated with output file . For example user interface may include code navigation panel code panel model navigation panel and model panel . Code navigation panel code panel model navigation panel and model panel may include the features described above in connection with for example .

As further shown in a user of user interface may select any block in TCE model displayed in model panel . In one example the user may select a subsystem block of TCE model as indicated by reference number . Upon selection of the subsystem block script file may determine portion s of TCE code that are related to the subsystem block. As shown in script file may indicate e.g. highlight and display the determined portion s of TCE code as indicated by reference number . Script file may also include an explanation of the relationship between the determined portion s of TCE code and the subsystem block. In one example if multiple portions of TCE code are indicated e.g. highlighted and cannot be displayed in code panel at the same time user interface may include a mechanism e.g. a button a link etc. to navigate e.g. scroll through the highlighted portions of TCE code . In one implementation script file may utilize different colors for highlighting e.g. as selected by a user or different mechanisms to distinguish displayed information e.g. different fonts different colors etc. .

As further shown in script file may update model panel to display a portion of TCE model that relates to the subsystem block e.g. a Fuel Rate Control Subystem rather than the Fault Tolerant Fuel Control System. Script file may update code navigation panel to highlight and display a model file e.g. sldemo fuelsys.c as indicated by reference number . Script file may update model navigation panel to highlight and display the subsystem name e.g. fuel rate control in the model hierarchical tree as indicated by reference number . Such an arrangement may provide traceability from TCE model to TCE code .

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

As shown in user interface may include a variety of information associated with output file . For example user interface may include code navigation panel code panel model navigation panel and model panel . Code navigation panel code panel model navigation panel and model panel may include the features described above in connection with for example one or more of .

As further shown in a user of user interface may select any line of TCE code displayed in code panel . In one example the user may select a fuel rate control link e.g. a hyperlink of TCE code as indicated by reference number . Upon selection of the fuel rate control hyperlink of TCE code script file may determine block s of TCE model that are related to the selected hyperlink. Script file may indicate e.g. highlight and display the determined block s of TCE model as indicated by reference number . Script file may also provide an explanation of the relationship between the selected hyperlink of TCE code and the determined block s of TCE model . In one example if multiple blocks of TCE model are highlighted and cannot be displayed in model panel at the same time user interface may include a mechanism e.g. a button a link etc. to scroll through the highlighted blocks of TCE model .

As further shown in script file may update model navigation panel to highlight a name e.g. sldemo fuelsys in the model hierarchical tree that is a parent of the highlighted block of TCE model as indicated by reference number . Such an arrangement may provide traceability from TCE code to TCE model .

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

As shown in user interface may include a variety of information associated with output file . For example user interface may include code navigation panel code panel model navigation panel and model panel . Code navigation panel code panel model navigation panel and model panel may include the features described above in connection with for example one or more of .

As further shown in a user of user interface may select any line of TCE code displayed in code panel . In one example the user may select a state chart link e.g. a hyperlink of TCE code as indicated by reference number . Upon selection of the state chart hyperlink of TCE code script file may determine state chart block s of TCE model that are related to the selected hyperlink. Script file may indicate e.g. highlight and display the determined state chart block s of TCE model as indicated by reference number . Script file may also provide an explanation of the relationship between the selected hyperlink of TCE code and the determined state chart block s of TCE model . In one example if multiple state chart blocks of TCE model are highlighted and cannot be displayed in model panel at the same time user interface may include a mechanism e.g. a button a link etc. to scroll through the highlighted blocks of TCE model .

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

As shown in user interface may include a variety of information associated with output file . For example user interface may include code navigation panel code panel model navigation panel and model panel . Code navigation panel code panel model navigation panel and model panel may include the features described above in connection with for example one or more of .

As further shown in a user of user interface may select any line of TCE code displayed in code panel . In one example the user may select a block link e.g. a hyperlink of TCE code as indicated by reference number . Upon selection of the function block hyperlink of TCE code script file may determine function block s of TCE model that are related to the selected hyperlink. Script file may indicate e.g. highlight and display the determined function block s of TCE model as indicated by reference number . Script file may also provide an explanation of the relationship between the selected hyperlink of TCE code and the determined function block s of TCE model . In one example if multiple function blocks of TCE model are highlighted and cannot be displayed in model panel at the same time user interface may include a mechanism e.g. a button a link etc. to scroll through the highlighted blocks of TCE model .

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

As shown in user interface may include a variety of information associated with output file . For example user interface may include code navigation panel code panel model navigation panel and model panel . Code navigation panel code panel model navigation panel and model panel may include the features described above in connection with for example one or more of .

As further shown in a user of user interface may select a block of TCE model displayed in model panel . In one example the user may select a particular block of TCE model as indicated by reference number . Upon selection of the particular block of TCE model script file may determine portion s of TCE code that are related to the selected block. Script file may highlight and display the determined portion s of TCE code as indicated by reference number . In one example if multiple portions of TCE code are highlighted and cannot be displayed in code panel at the same time user interface may include a mechanism e.g. a button a link etc. to scroll through the highlighted portions of TCE code .

As further shown in script file may update code navigation panel to include links to referenced model reports as indicated by reference number . The referenced model reports may be associated with the particular block selected in TCE model . In order to see a model associated with one of the referenced model reports the user may select one of the links e.g. rtwdemo cppencap refbot of the referenced model reports. When the user selects one of the links the referenced model report associated with the selected link may be displayed to the user.

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

As shown in user interface may include a variety of information associated with output file . For example user interface may include code navigation panel code panel model navigation panel and model panel . Code navigation panel code panel model navigation panel and model panel may include the features described above in connection with for example one or more of .

Generated TCE code for a subsystem of TCE model may be similar to generated TCE code for the entire TCE model . The generated TCE code for the subsystem may only be traceable to the subsystem and blocks provided below the subsystem. As further shown in model panel may display the subsystem e.g. a Fuel Rate Calculation subsystem and model navigation panel may display a name of the subsystem e.g. fuel calc in the directory tree as indicated by reference number .

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

As shown in user interface may include a variety of information associated with output file . For example user interface may include code navigation panel code panel model navigation panel and model panel . Code navigation panel code panel model navigation panel and model panel may include the features described above in connection with for example one or more of .

As further shown in user interface may provide a different layout of panels for users with wide screens. For example user interface may horizontally align code navigation panel code panel model navigation panel and model panel from left to right. Alternatively user interface may horizontally align code navigation panel code panel model navigation panel and model panel in any particular order. Alternatively user interface may display one or more panels and the user may navigate to non displayed panels by a gesture e.g. a swipe from left to right or right to left .

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

As shown in user interface may include a variety of information associated with output file . For example user interface may include code navigation panel code panel model navigation panel and model panel . Code navigation panel code panel model navigation panel and model panel may include the features described above in connection with for example one or more of .

As further shown in user interface may provide a different layout for panels . For example the links to the reports may be removed from code navigation panel and may instead be displayed as tabs . Code navigation panel may be provided within code panel e.g. as a pull down list to conserve space. Model navigation panel may be provided within model panel e.g. as a pull down list to conserve space. Code panel and model panel may be arranged in a side by side manner.

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

As shown in process may include receiving code in a modeling environment format block receiving a model in a modeling environment format block and receiving information associated with relationships between the code and the model block . For example in an implementation described above in connection with transform component may receive code generated by TCE model generated by TCE and information associated with relationships between TCE code and TCE model . TCE code may be in a format that is viewable only within TCE e.g. a web format a HTML format a PDF etc. as indicated by reference number . TCE model may include a block diagram model with one or more model elements e.g. blocks one or more inputs and one or more outputs. TCE model may be in a format that is viewable only within TCE e.g. a web format a HTML format a PDF etc. as indicated by reference number . Relationships information may include information identifying one or more characters in TCE code blocks in TCE model relationships between TCE code and TCE model e.g. a selection of a block in TCE model may cause corresponding lines of TCE code to be highlighted mappings between TCE code and TCE model e.g. a block in TCE model may be mapped to particular portions of TCE code etc.

As further shown in process may include combining the code the model and the relationships information to generate an output file in a non modeling environment format block and outputting and or storing the output file block . For example in an implementation described above in connection with transform component may combine e.g. based on inputs TCE code TCE model and relationships information to generate output file in a non modeling environment format e.g. a non TCE format . Transform component may output e.g. display and or store output file . In one example output file when executed may display a code panel for displaying TCE code e.g. in non TCE format and a model panel for displaying TCE model e.g. in non TCE format . Alternatively or additionally output file when executed may display a code navigation panel that enables a user to navigate TCE code displayed in the code panel and a model navigation panel that enables a user to navigate TCE model displayed in the model panel.

Process block may include the process blocks depicted in . As shown in process block may include generating a media file from the code block generating an interactive graphic file from the model block generating a script file from the relationships information block and combining the media file the interactive graphic file and the script file to generate the output file in the non modeling environment format block . For example in an implementation described above in connection with media file creator component may receive TCE code and may convert one or more portions of TCE code into media file . Interactive graphic file creator component may receive TCE model and may convert one or more portions of TCE model into interactive graphic file . Script file creator component may receive relationships information and may convert relationships information into script file . Combiner component may receive media file interactive graphic file script file and inputs . Combiner component may combine e.g. based on inputs media file interactive graphic file and script file to generate output file in a non modeling environment format e.g. non TCE format .

Process block may include the process blocks depicted in . As shown in process block may include displaying the code in the non modeling environment format in a first panel block displaying the model in the non modeling environment format in a second panel block displaying code navigation elements in a third panel block and displaying model navigation elements in a fourth panel block . For example in an implementation described above in connection with user interface may include code navigation panel code panel model navigation panel and model panel . Code navigation panel may enable a user to navigate a representation e.g. media file of TCE code provided in code panel . Code panel may include a representation e.g. media file of TCE code . Model navigation panel may enable a user to navigate a representation e.g. interactive graphic file of TCE model provided in model panel . Model panel may include a representation e.g. interactive graphic file of TCE model .

Systems and or methods described herein may transform modeling environment code and or a model into a non modeling environment format file. In one example the non modeling environment format file may be viewed in any web browser and may include interrelationships between the code and the model. The non modeling environment format file may enable a user to view the code the model and the interrelationships without the need of a modeling environment such as a TCE.

The foregoing description of implementations provides illustration and description but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the implementations.

For example while series of blocks have been described with regard to the blocks and or the order of the blocks may be modified in other implementations. Further non dependent blocks may be performed in parallel.

It will be apparent that example aspects as described above may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement these aspects should not be construed as limiting. Thus the operation and behavior of the aspects were described without reference to the specific software code it being understood that software and control hardware could be designed to implement the aspects based on the description herein.

Further certain portions of the implementations may be implemented as a component that performs one or more functions. This component may include hardware such as a processor an application specific integrated circuit ASIC or a field programmable gate array FPGA or a combination of hardware and software.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the disclosure of the specification. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification. Although each dependent claim listed below may directly depend on only one other claim the disclosure of the specification includes each dependent claim in combination with every other claim in the claim set.

No element act or instruction used in the present application should be construed as critical or essential unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

