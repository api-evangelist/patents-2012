---

title: System and method for authorizing and connecting application developers and users
abstract: A system and method for authorizing application use of a user that can include creating a developer account associated with an application of an application platform; receiving an authorization request to authorize the application to act on a user account; creating a subaccount of a user, wherein the subaccount is associated with the developer account; creating an authorization record, that includes setting a permission profile for the subaccount; and returning a subaccount identifier to the developer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09336500&OS=09336500&RS=09336500
owner: Twilio, Inc.
number: 09336500
owner_city: San Francisco
owner_country: US
publication_date: 20120921
---
This application claims the benefit of U.S. Provisional Application No. 61 537 207 titled SYSTEM AND METHOD OF AUTHORIZATION AND CONNECTION BETWEEN APPLICATION DEVELOPERS AND USERS filed 21 Sep. 2011 and U.S. Provisional Application No. 61 621 867 titled SYSTEM AND METHOD OF AUTHORIZATION AND CONNECTION BETWEEN APPLICATION DEVELOPERS AND USERS filed 9 Apr. 2012 which are incorporated in their entirety by this reference.

This invention relates generally to the telephony field and more specifically to a new and useful system and method for authorizing and connecting application developers and users in the telephony field.

In recent years there has been an explosion of interest in customized application software executable on one or more types of devices including personal computers and mobile devices. In the telephony market however the development of an application ecosystem has been stunted in part by the lack of an efficient system and or method for managing relationships between the software developers and the application users. In particular given that many telephony services are priced at variable rates many talented software developers are trying their hand creating easier to manage flat fee applications for sale. In effect the complexities of telephonic billing act as an artificial barrier to entry against application developers who lack the resources and desire to compete with established telecommunications players in the commercial domain of the latter. Given the importance of communications however there is a great need for attracting more developers and applications into the telephony marketplace. Thus there is a need in the telephony field to create a new and useful system and method for authorizing and connecting application developers and users. This invention provides such a new and useful system and method.

The following description of the preferred embodiments of the invention is not intended to limit the invention to these preferred embodiments but rather to enable any person skilled in the art to make and use this invention.

As shown in the API of the preferred embodiment functions to permit one or more developers DEV A DEV B DEV C to independently and efficiently create software programs for telephonic applications including but not limited to telephony based voice calls internet based voice calls video calls video streams video sessions screen sharing screen sharing streams screen sharing sessions SMS messaging MMS messaging IP based messaging proprietary messaging alternative messaging or any suitable form of communication. The applications can be stored and retrievable in a database or databases not shown and made accessible to one or more users or purchasers. Applications may be stored in the database as a Uniform Resource Identifier URI reference to an application hosted by the developer or alternative. The URI will preferably reference the application located on a server maintained by the developer. Preferably the applications APP A APP B APP C created by the developers can be associated with a user account of each respective developer. In one variation of the system of the preferred embodiment each application can be uniquely identified according to its own user account. Alternatively each application can be uniquely identifiable but remain associated with one or more user accounts of the respective developer.

The system of the preferred embodiment can further accommodate one or more users USER USER who can be independent third parties including individuals or businesses that desire to use a selected application for a particular purpose. A user preferably has an account. As shown in the users of the system of the preferred embodiment can be associated with the applications through one or more subaccounts APP A APP B APP C . A user may additionally be associated with a plurality of subaccounts for various applications as shown for USER . Thus a single user can use a single user account to use multiple applications developed by different developers. Subaccounts are preferably child accounts linked to a main account of the user . The subaccounts may alternatively be defined within parameters of the user account. Subaccounts are preferably associated with an application provided by a developer account. Alternatively the subaccounts can be uniquely associated with each application or each developer or any suitable combination thereof. In another alternative the subaccounts can be configured as partitions or uniquely identifiable portions of the parent account application . In one variation of the system of the preferred embodiment each application can be associated with a unique developer account on the one hand and one or more unique user subaccounts on the other hand such that each developer can create an application account associated with multiple users subaccounts.

As shown in the system of the preferred embodiment can facilitate management and interaction between the developers and the users through the creation of the subaccounts and through a delegation process and a user authorization process described in more detail below. Permissions are preferably granted for an application or developer account to operate on a user account. These permissions are preferably defined with respect to the subaccount of the user associated with the particular application. Preferably the developer can create a list of delegable items or permissions such as for example read only access to the API e.g. log access event or message access full access to the API e.g. making calls sending SMS messages purchasing or modifying phone numbers and access to all caller ids. In other words permissions preferably can define how an application may access data or act on behalf of a subaccount of a user. The subaccounts may additionally be configured for customized use of an application. In one variation the system and method of a preferred embodiment may be integrated with a system or method substantially similar to the one described in published U.S. Patent Application No. 2011 0283259 titled METHOD AND SYSTEM FOR CREATING A PLATFORM APPLICATION WITH MULTIPLE APPLETS filed 14 Jun. 2011 assigned to the assignee of the present application and hereby incorporated in its entirety by this reference.

As used herein API configuration s are preferably RESTful in nature and the applications also preferably observe the principles of a RESTful design. RESTful is understood in this document to describe a Representational State Transfer architecture as is known in the art. The RESTful HTTP requests are preferably stateless thus each message communicated from the call router to the application server preferably contains all necessary information for operation of the application server and response generation of the application server. Hardware communications elements such as routers and servers preferably do not need to remember or store previous communications to be aware of the state. Documents media and application state are preferably viewed as addressable resources combined with data provide to the resource via request parameter such as HTTP GET or HTTP POST parameters or request body contents. Such request data may include an updated representation of the call resource or other call state data generated as a result of call router operation such as digits pressed on the keypad or audio recordings generated.

State information included with each request can include a unique call identifier call status data such as whether the call is in progress or completed the caller ID of the caller the phone number called geographic data about the callers and or any suitable data. Alternatively a varying level of a RESTful communication statelessness can be used such as by using cookies session tracking or any suitable devices to simulate a normal website visitor model. Preferably data sent with each request can fully enable the application server to determine the next state of the call to execute. RESTfulness preferably does not preclude using external datasource such as a database to lookup additional data to log call meta data or determine application logic.

In other variations of the system of the preferred embodiment the website can request or require of the user the creation of a separate user account which can be configured as a subaccount associated with the developer s account application as described above. The subaccount of the preferred embodiment can be configured with one or more permissions restrictions delegations and the like for establishing the boundaries of the application s permitted usage of the subaccount . The permitted usage preferably specifies the ways in which the application associated with the subaccount can interact with or on behalf of the user account. Alternatively or additionally the permitted usage may determine what actions or features of the application a subaccount may use. schematically represent variations of the system of the preferred embodiment. As shown in multiple independent applications can be simultaneously authorized and the use of subaccounts prevents data sharing between the applications. As an example the respective applications will not have access to call records SMS records or phone numbers of other developer authorized applications.

In one variation of the system of the preferred embodiment data flow call records SMS records phone records between an account and a subaccount can be asymmetrical and or restricted in that data relating to the subaccount can be accessed by the account . Alternatively certain permissions can allow for the flow of data in whole or in part from the account to one or more subaccounts or between sibling subaccounts . In another alternative access to all caller ids as shown in lets an application use a phone number of a parent account or sibling subaccount as the caller ID for a phone call or message placed by the subaccount affiliated with the application. In another alternative the owner of the account can reconfigure or redefine the permission profile of the subaccount including expanding or limiting the permissions and authorizations of the subaccount as well as complete revocation or termination of the subaccount .

As shown in another variation of the system of the preferred embodiment can include an account ID module that functions to receive one or more passwords or secure IDs and correlate the received passwords to one or more permission sets . Preferably the account ID module can be disposed at or in communication with the API and or an account database . Preferably the account ID module can be stateless and receive the passwords pass the passwords to the account database and receive any associated permissions in response thereto. The receipt and transmission of the passwords and the associated permissions can be accomplished through HTTP HTTPS or any other suitable transport layer protocol s. Preferably all account data is maintained in a secured and or encrypted format and the account ID module does not have to encrypt decrypt any transmitted data. For example the passwords can include one or more tokens containing unique or quasi unique identifying information that can be passed through the preferred system with little risk of compromising the information contained therein. Similarly the permissions associated with the passwords can include a second token or a hash of the password token and the permission set data which can also be passed through the preferred system in the same manner. As shown in there is preferably a one to one correlation between the password and its associated permissions . Moreover there is not necessarily the same correlation between a user account and the permissions as the user account can include a single user ID having multiple passwords each of which is associated with a set of permissions . As an example each of the subaccount users shown in can be associated with a different password for the user account . Accordingly upon entry of each password the users are associated with one or more features or aspects of the subaccounts through the corresponding set of permissions .

Additional aspects of the system of the preferred embodiment are shown in which is a schematic block diagram illustrating one example environment in which users developers and API providers can create sell and use applications of the type described above. As shown a control module or market can interface with one or more developers attempting to create and or distribute their application content. Preferably the control module functions to distribute and account for one or more applications created by the developers . The control module of the preferred embodiment can include one or more computers servers or a distributed network of computers and servers accessible by one or more users. Alternatively the control module can reside entirely in a cloud system. The control module of the preferred embodiment can also include software development assistance. As an example the control module can include for example Twilio brand customized software solutions configured to assist developers in the creation of applications suited for use with one or more Twilio brand APIs.

The system of the preferred embodiment can also include a server A or storage system such as a cloud based storage system for one or more applications shown A D created by the developers and hosted by the control module . The server A of the system of the preferred embodiment functions to host and or electronically distribute the applications to users . In one variation of the system of the preferred embodiment the control module can be integrated with the server A. Alternatively the control module can include a front end developer interface and backend accounting and system management module s separate and distinct from the server A.

In the system of the preferred embodiment shown in users A through D can be individual and or corporate consumers of telephony applications of the type described above. For example the users might have interests in applications relating to voice or SMS communications customer relations management enterprise communications or any other suitable application for which the API is suited. While the developers associated with the applications might have a strong affinity for software development the commercial management and widespread distribution of an application might not interest all developers . As such the system of the preferred embodiment shown in permits the users to pay one or more variable rate type fees i.e. fees based on allocated minutes data permissions restrictions and the like to the control module which is more readily adapted for management of such a complex commercial environment. The fees may be collected for usage of a specific subaccount of an application or more preferably for the consolidated usage of all subaccounts and the user account. For example a user account may use two different applications i.e. has two subaccounts and may additionally have its own application using the platform and the user account can pay a single fee. The control module can then compensate the developers in response to the variable rate fees received from the users for the usage of the various applications . The compensation may be in credit or as a monetary transaction . In one alternative the control module can compensate the developers in proportion to the number of applications hosted on the server A. Alternatively the control module can compensate the developers in proportion to the amount of variable rate fees consumed by the users of the respective applications . As an example if user A pays 20.00 per month to the control module for data consumption related to application A then the control module can compensate the developer of application A in some proportional amount i.e. a fixed or variable percentage of the fees received per application.

Aspects of the system of the preferred embodiment can be configured in a computer readable medium storing computer readable instructions. The instructions are preferably executed by computer executable components that are preferably integrated with the API the application s the subaccount s the control module and or server A. The computer readable medium can be stored on any suitable computer readable media such as RAMs ROMs flash memory EEPROMs optical devices CD or DVD hard drives floppy drives or any suitable device. The computer executable component is preferably a processor but the instructions can alternatively or additionally be executed by any suitable dedicated hardware device.

The system of the preferred embodiment in its various aspects and variations can be configured to perform one or more methods of the preferred embodiment. As shown in a method for authorizing and connecting application developers and users of a preferred embodiment can include creating a developer account associated with an application S receiving an authorization request to authorize the application to act on a user account S creating a subaccount for a user wherein the subaccount is associated with the developer account S creating an authorization record associated with a subaccount S and returning a subaccount identifier S. The method functions to enable app developers on an application platform to allow users with their own account to use an instance of the developer s application. The use of subaccounts has many benefits such as segregating user data enabling varying levels of functionality according to a permission profile easier fee management and other benefits. One benefit of the system and methods of the preferred embodiments is conferred by the use of subaccounts which permits a user to distribute his or her authorizations and or application to a number of developers while protecting against the inadvertent sharing of application related information. If a developer authorizes multiple independent applications the user of sub accounts prevents data such as call records SMS records and phone numbers that are used by one application from being seen or modified by another application. The method is preferably performed by a system as described above at an application platform and the application platform is preferably a telephony application platform such as the one provided by the assignee of the present application.

Step S which includes creating a developer account associated with an application functions to assist in hosting distributing and accounting for any application s created by a developer. The developer account is preferably the account mechanism within an application platform from which a developer may manage account settings and application settings. A developer account may be substantially similar to a user account but a developer account is distinguished by including an application that may include subaccounts. In one variation of the method of the preferred embodiment the developer account can itself be a subaccount of a second developer account i.e. the developer account is a user subaccount of the second developer account . Thus a developer can nest different applications subaccounts within a larger account framework. Creating a developer account can additionally include setting subaccount settings for a developer account. The subaccount settings may determine permission profiles resources to support subaccount creation process and any suitable parameter of an application. The resources to support subaccount creation process preferably include URIs for the application authorization callbacks deauthorize callbacks and or any suitable URIs of the application. As described later the application platform preferably returns the authorization record to the authorization callback URI of the developer. As noted above suitable applications can include for example software or other machine executable instructions that use an API of the type described above. Example applications can include but are not limited to telephony based voice calls internet based voice calls video calls video streams video sessions screen sharing screen sharing streams screen sharing sessions SMS messaging MMS messaging alternative messaging or any suitable form of communication. Applications of the method of the preferred embodiment can include targeted and or selected access to a REST API of the type described herein and the applications preferably obey the principles of RESTful design described in detail above.

Step S which includes receiving an authorization request to authorize the application to act on a user account functions to initialize the subaccount creation process. The authorization request may be formed as a request to create a subaccount of an application. The authorization request is preferably initialized by receiving an HTTP request at the application platform. The authorization request preferably includes an application or developer identifier and may additionally include user account information. The developer account or application to associate with the received subaccount creation request may alternatively be determined in any suitable manner. A user action preferably initiates the sending of the subaccount creation request. In one variation of the method of the preferred embodiment the user can locate an application on a website or other service provided by the application developer. Alternatively the user can access the developer application on a centralized server market or control module associated with the API of the type described above.

The interface presented to the user during the authorization subaccount creation process can be through an interface provided by the application platform or alternatively through a third party site or application. In one variation a user will click on or activate a link from a developer website which will open or redirect the user to a page of the application platform. In this variation the application platform will be visible to the user. In another variation a user will interact with an application or site of the developer and the developer site will use an API to programmatically communicate with the application platform and to begin the authorization process. In this variation the application platform and the authorization process can be transparent to the user.

Step S which includes creating a subaccount for a user wherein the subaccount is associated with the developer account functions to create a subaccount of the user account and associate the user and the subaccount with an application. Creating a subaccount further functions to separate the functional authorizations of the user from those of the main account developer account or application thereby permitting a developer to partition and commercialize his or her application using the API. In a variation of associating the subaccount with the developer account the subaccount may be associated with an application of the developer account.

The subaccount can be uniquely associated with a user account. As used herein the term user can include any individual corporation or artificial entity acting either individually or collectively that is interested in the operation and or consumption of one or more applications. In the application platform a user preferably has a user account or will have a user account created on behalf of the user. Alternatively the subaccount may be the only account record in the application platform for a particular user. Preferably the user expresses an interest in acquiring access to an application. The user the application developer account or any suitable entity will initiate a the authorization process by submitting an authorization request in Step S. As a result a subaccount can be created. The application platform or developer site may perform any suitable form of user authentication authorization. In the case where the application platform has usage fees payment information may be collected from the user. As shown in the subaccount creation process can include authorizing creating a user account creating an authorization record creating a subaccount and or any suitable subaccount step. The steps of creating a subaccount can be performed in any suitable order with using any suitable step to gate proceeding to the next step. Similarly the steps may alternatively be performed substantially simultaneously.

Step S which includes creating an authorization record associated with the subaccount functions to create a mechanism that a developer can use to act on behalf of a subaccount or enable a subaccount application. Preferably a user or client on behalf of a user e.g. developer site completes the steps necessary for the application platform to authorize the user to the application and or developer. The authorization record can include a user identification an application identification and a permission profile including any one or more permissions granted to the user for the identified application. The authorization record can additionally include the password or secure ID SID that acts as a token to later authorize subaccount actions. Preferably the authorization record can be stored on the application server in a separate database. Alternatively the authorization record can be stored in any suitable location including in a server or market type environment of the type described above.

Additionally Step S preferably includes setting a permission profile associated with the subaccount which functions to establish the boundaries of the application s permitted usage of the user s subaccount. A permission profile of a subaccount or listing of requested and or potential permissions can be directly associated with the application. Suitable and or possible permissions can include for example read only access full read write access making calls sending SMS messages purchasing or modifying phone numbers and or access to all caller ids. Read write access in some variations may allow an application to perform metered API calls on behalf of a user account. For example in a telephony platform an application may make phone calls that will count against the usage of the user account and not the developer account. In one variation of the method of the preferred embodiment data flow call records SMS records phone records between a developer account and a subaccount can be asymmetrical and or restricted in that data relating to the subaccount can be accessed by the account. Alternatively certain permissions can allow for the flow of data in whole or in part from the account to one or more subaccounts or between sibling subaccounts. In another alternative access to all caller ids lets an application use a phone number of a parent account or sibling subaccount as the caller ID for a phone call or message placed by the subaccount affiliated with the application. In another alternative permissions may set usage limits or set parameters that determine characteristics of how permissions are interpreted when being enforced. For example a number for how many usage based API calls can be made by an application may be set. As a result the application can preferably make no more than that number of API calls on behalf of the subaccount. The permission profile may be specified in the subaccount creation request default to a particular setting require user input in an interface use permission profile specified for the application developer account and or be determined in any suitable manner. Permissions may be set as a group either allowing all requested permissions for an application or denying all permissions. Alternatively permissions may be set individually allowing a user to set permissions in a piecemeal fashion.

In one alternative variation a permission profile for the application or a developer account can be used in setting a permission profile of a subaccount. A developer permission profile is preferably created when creating or editing the settings of an application of a developer account. A developer permission profile may be used in combination with a subaccount permission profile. In one variation the permission profile created for an application may be the permission profile used for all subaccounts associated with the application. In another variation the intersection of permission profiles for an application and a subaccount may be the permissions used for a subaccount. For example an application may allow API calls of the type A B and C and a user may set a subaccount to allow API calls of type A B and D. As a result the subaccount will be allowed to use API calls of type A and B. The permission profile can function to determine the scope and boundaries of an application s access to a user s account and thus define the functional and commercial relationship between the developer application and the user. Other permission limits may additionally be included in the permission profile such as usage limits e.g. number of phone calls or whitelisted or blacklisted actions for a subaccount.

Step S which includes returning a subaccount identifier functions to verify and confirm to the developer that the user has been granted access and or asserted permissions relating to the developer account. The subaccount identifier is preferably transmitted electronically to the developer as confirmation of the user authorization permission access. The subaccount identification can be transmitted to a developer website through an authorization callback URI. Preferably the authorization record or at least a portion of the authorization record the SID acts as the subaccount identifier. The SID is preferably returned as a parameter transmitted to the authorization callback URI. A developer will preferably retrieve the authorization record or SID and store that for application use. The subaccount identifier may alternatively be stored for access by the developer account or communicated for use by the developer in any suitable manner. The subaccount identifier can preferably be used by the developer to enable the subaccount to use their application with the privileges and permissions established for the subaccount.

As shown in a method of a preferred embodiment may additionally include allowing subaccount usage by an application in accordance with the authorization record S. Use of the subaccount resources by an application is preferably limited by the permission profile for the subaccount the application and or the user account. Use of the application preferably includes receiving an API request made on behalf of a subaccount associated with an application. The subaccount identifier and more preferably the SID is used in combination with an application or developer account password or authentication token to permit the subaccount to utilize the designated REST API resources associated with the permissions and application. As shown in a SID in combination with an authentication token can be used to determine the permissions for that request. A server of the application platform preferably verifies that the given application has been granted authorization to the resource or permission to perform an action. For example an analytics application may make REST API GET requests for a call list specifying account auth token and the SID of the subaccount of interest. If the permission profile of the subaccount allows access to the call list of the user account then the analytics application receives the call list resources. As another example a telephony application may make REST API requests to send a SMS message on behalf of a user specifying account auth token and the SID of the subaccount of interest. If the permission profile of the subaccount allows write write access to send an SMS message on behalf of the user account then the telephony platform will send the message.

A method of a preferred embodiment may additionally include facilitating a marketplace control as shown in which functions to manage the marketplace operational tasks that can be associated with subaccount usage. Facilitating marketplace control preferably includes retrieving market fees and dispersing fees to a developer account. A control module preferably schedules or carries out fee retrieval routines. Fees may be collected from user accounts and or developer accounts. According to any compensation arrangements the control module can transfer fees to the developers. As the subaccounts are separate from the developer account the usage and metering of the subaccounts preferably occurs independently from the developer account such that each subaccount may be held accountable for individual use of the application. Moreover as the subaccounts are owned by the user the usage and metering of the subaccounts preferably is included in the usage accrued by the user account.

In another variation of the method of the preferred embodiment the user can revoke and or modify the permission profile for an application previously authorized thereby preventing further usage of the REST API resources by the designated application. In another variation of the method of the preferred embodiment the method can further include verifying at a server such as the application server that the permissions were properly granted by the user and properly asserted by the application.

Decision block S of the method of the preferred embodiment queries whether the user has authorized the application to access his or her account. If the response is affirmative then as shown in the method of the preferred embodiment proceeds to block S in which the application is assigned a unique identification representing a subaccount of the user account. If the response to decision block S is negative then the method of the preferred embodiment proceeds to block S in which the user is engaged to sign up with the API provider. The dialogue between the user and the API provider which can be the assignee of the present application can occur through any suitable communication means including on the API developer website or on a dedicated portion or link from the developer s website. When the dialogue occurs on the developer s website the developer preferably communicates with the API provider site through an API enabling the creation and assignment of subaccounts. As previously noted the user may come across the application on a third party or developer website through a developer communication such as an email or on another commercial store for applications. In such an event the third party vendor developer or otherwise can redirect the user to the website of the API provider for proper authentication and registration of the user.

As shown in in these variations of the method of the preferred embodiment if the user does not have an existing account for identification delegation and authorization purposes then he or she is asked to create such an account in block S. Conversely if the user does have an existing account then the method of the preferred embodiment invites him or her to login at block S thereby accessing his or her identification delegation and authorization profile. In another variation of the method of the preferred embodiment a user login can be conditioned upon one or more application conditions such as for example whether the application requires an incoming phone number for operation. In such a case the method of the preferred embodiment can require that the user either purchase a phone number for use with the application or select an existing phone number to be associated with the use of the application.

Following a login by the user block S of the method of the preferred embodiment queries whether the requested permissions have been granted to the application by the user that is whether the application possesses the proper authorization to access the user account in the manner requested. In another variation of the method of the preferred embodiment block S can additionally include comparing a permission profile established by the developer with a permission profile asserted by the user. As shown in if the response to the query in block S is negative then the user session is terminated at block S. Alternatively the user can be referred to another opportunity to upgrade his or her permission profile to meet those required by the application. For example if the user has only purchased a read only permission but the application requires full read write then the method of the preferred embodiment can offer the user the opportunity to upgrade his or her account to access the desired application.

An alternative embodiment preferably implements the above methods in a computer readable medium storing computer readable instructions. The instructions are preferably executed by computer executable components preferably integrated with a system of an application platform API provider. The computer readable medium may be stored on any suitable computer readable media such as RAMs ROMs flash memory EEPROMs optical devices CD or DVD hard drives floppy drives or any suitable device. The computer executable component is preferably a processor but the instructions may alternatively or additionally be executed by any suitable dedicated hardware device.

As a person skilled in the art will recognize from the previous detailed description and from the figures and claims modifications and changes can be made to the preferred embodiments of the invention without departing from the scope of this invention defined in the following claims.

