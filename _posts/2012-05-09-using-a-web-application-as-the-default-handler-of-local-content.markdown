---

title: Using a web application as the default handler of local content
abstract: A method includes registering a web application, which is executable through a web browser, as a default file handler of a particular type of locally-stored files. A computing device provides a file manager interface that is configured to facilitate interaction, by a user, with a local filesystem of the computing device. The file manager interface receives a user selection of a file included in the local filesystem, where the file belongs to the particular type of files. Based on the user's selection, a user selectable action element is provided in the file manager interface to invoke the registered web application to handle the selected file. The file manager interface receives a user selection of the user selectable action element; and in response to the user selection of the user selectable action element the registered web application is automatically invoked to handle the selected file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09002808&OS=09002808&RS=09002808
owner: Google Inc.
number: 09002808
owner_city: Mountain View
owner_country: US
publication_date: 20120509
---
This is a continuation in part of U.S. patent application Ser. No. 13 369 893 filed on Feb. 9 2012 and entitled SECURE LOCAL ACCESS BY REMOTE CONTENT . This application claims the benefit under 35 U.S.C. 119 e of U.S. Provisional Patent Application Ser. No. 61 484 192 filed on May 9 2011 and entitled Using An Online Web Application As The Default Handler Of Local Content. The disclosure of each of the above referenced applications is incorporated by reference herein in its entirety.

Use of the Internet and the World Wide Web continues to grow at a rapid pace. This growth is due in part to an increase in availability of data networks that computing device users may use to access the Internet and the World Wide Web. For instance in addition to using conventional wired networks computing device users may access the Internet and the World Wide Web through Wi Fi hotspots and various types of wireless data networks among a number of other possible approaches. These data access networks e.g. for accessing the Internet and the World Wide Web continue to become more readily available and provide ever increasing data bandwidth capabilities. Additionally the variety of user computing devices that users may employ to connect with such data access networks continues to increase as well. Such devices may include personal computers laptops computers and mobile computing devices such as netbook computers cellular phones smartphones and tablet computers as well as a number of other devices.

The increase in availability of data access networks the corresponding increase in the capabilities of those networks and the increased variety of user computing devices have at least in part allowed for changes in how users interact with their computing device as well allowing for changes in network based web based resources that are available to computing device users. One such change is the advent of web based applications as compared to native applications. Another such change is an increase in the number and variety of resources websites that are available. These resources as some examples provide computing device users with the ability to interact socially share digital pictures share videos and store data.

Generally a web based application is an application that is run within a Web browser on a computing device. Such web based applications typically include both a client side component on the user device and a server side component e.g. on a website or server corresponding with the web based application as compared to native applications that are locally installed on a computing device. Depending on the particular application the client side component may include only a brief description of the application with the functionality of the web based application being controlled by the server side component such as using code that is executable by a web browser such as HTML HTML5 and or JavaScript among a number of other alternatives collectively Web based coding technologies . Furthermore websites that provide other web based resources to computing device users such as those described above may also be implemented using Web based coding technologies.

In order to provide security for computing device users locally stored data when accessing remotely stored content Web based coding technologies either explicitly prohibit or significantly restrict access to local resources of user computing devices such as general access to local filesystems. These restrictions reduce the risk of malicious activity such as a virus being placed on a user s computer or a malicious actor stealing personal information from a user s computer as some examples. These security measures however also prohibit or significantly restrict computing device users from providing remotely stored content e.g. web based applications and or other web based content access to locally stored information without using individual dedicated interfaces for each web based application or resource which may be inconvenient.

In a first general aspect computer implemented method includes registering a web application which is executable through a web browser as a default file handler of a particular type of locally stored files. A computing device provides a file manager interface where the file manager interface is configured to facilitate interaction by a user with a local filesystem of the computing device. The file manager interface receives a user selection of a file included in the local filesystem where the file belongs to the particular type of files. Based on the user selection of the file of the particular type a user selectable action element is provided in the file manager interface to invoke the registered web application to handle the selected file. The file manager interface receives a user selection of the user selectable action element and in response to the user selection of the user selectable action element the registered web application is automatically invoked to handle the selected file.

Implementations can include one or more of the following features. For example invoking the registered web application can include opening the web application in the web browser and opening the selected file in the web application. Invoking the registered web application can include opening the web application in the web browser and uploading the selected file to a server that hosts the web application.

The method can include determining that the selected file belongs to the particular type based on an extension of a name of the file. Registering the web application can include installing a web browser extension that registers the web application as the default file handler. The file manager interface can include a first sandboxed sub process of a privileged web browser interface. Handling the selected file can include providing access to the selected file by the web application in a second sandboxed sub process of the privileged web browser interface. Access to the one or more selected items by the remotely stored content can be provided in a sandboxed sub process of the file manager interface. Providing the user selectable action element receiving the user selection of the user selectable action element and automatically invoking the registered web application to handle the selected file can be implemented by an extension of the file manager interface.

Providing the user selectable action element to invoke the registered web application to handle the selected file can include providing a plurality of action buttons corresponding with different registered web applications to invoke the registered web application to handle the selected file and receiving the user selection of the user selectable action element can include receiving a user selection of one of the plurality of action buttons. The method can further include in response to registering the web application dynamically assigning the web application access permissions to files belonging to the particular type and which are accessible in the local filesystem. Invoking the registered web application can include opening the web application in the web browser and the method can further include dynamically revoking the assigned access permissions in response to completion of the uploading of the selected file. The method can further include dynamically revoking the assigned access permissions in response to the user deselecting the selected file. The access permissions can be dynamically assigned and dynamically revoked by a privileged browser process of the computing device.

In another general aspect a computing device includes a data storage device storing files that are accessible via a local filesystem and a non transitory computer readable medium having instructions stored on it where the instructions when executed by a processor cause at least one processor of the computing device to register a web application which is executable through a web browser executed by the computing device as a default file handler of a particular type of locally stored files provide a file manager interface the file tanager interface being configured to facilitate interaction by a user with the local filesystem receive by the file manager interface a user selection of a file included in the local filesystem where the file belongs to the particular type of files based on the user selection of the file of the particular type provide in the file manager interface a user selectable action element to invoke the registered web application to handle the selected file receive by the file manager interface a user selection of the user selectable action element and in response to the user selection of the user selectable action element automatically invoke the registered web application to handle the selected file.

Implementations can include one or more of the following features. For example the data storage device can include one or more of a hard disk drive a network share a solid state disk and a peripheral data storage device. The peripheral storage device can include one of Universal Serial Bus drive a Secure Digital memory card a digital camera and a digital media player.

In another general aspect a non transitory machine readable medium has instructions stored on it where the instructions when executed by a processor cause a computing device to register a web application which is executable through a web browser as a default file handler of a particular type of locally stored files provide by the computing device a file manager interface the file manager interface being configured to facilitate interaction by a user with a local filesystem of the computing device receive by the file manager interface a user selection of a file included in the local filesystem wherein the file belongs to the particular type of files based on the user selection of the file of the particular type provide in the file manager interface a user selectable action element to invoke the registered web application to handle the selected file receive by the file manager interface a user selection of the user selectable action element and in response to the user selection of the user selectable action element automatically invoking the registered web application to handle the selected file.

Implementations can include one or more of the following features. For example invoking the registered web application can include opening the web application in the web browser and uploading the selected file to a server that hosts the web application. The file manager interface can include a first sandboxed sub process of a privileged web browser interface and handling the selected file can include providing access to the selected file by the web application in a second sandboxed sub process of the privileged web browser interface.

This document describes systems and techniques for using a web application as a default handler of local content and relates to providing web applications e.g. remotely stored web applications secure access to locally stored data files of a local filesystem implemented on a computing device. For purposes of this disclosure a local filesystem of a given computing device may include information e.g. file allocation tables and or data files that is accessible either directly or indirectly to a user of the given computing device. Such a local filesystem may be a subset of a larger filesystem e.g. an operating system filesystem where the larger filesystem includes content that is not typically accessible to user of the computing device. Such inaccessible content may include for example operating system binaries and device drivers as well as other information that is not accessible to users of a given computing device. As described herein such local filesystems may be implemented across a number of devices e.g. hard disk drives solid state disks optical disks network shares and or one or more peripheral devices that are locally mounted and shared on a given computing device.

A web browser executed by a client device can receive code e.g. HTML code and Javascript from a remote server e.g. a remote server that hosts a website and can execute the received code on the client device for the benefit of a user of the client device.

In various implementations the web browser may include or be associated with one or more web applications. In this context a web application may be configured to perform a single task or multiple tasks for a user. In such an implementation the web application may be configured to be executed or interpreted by the web browser. This is compared with native applications that include machine executable code and are configured to be executed directly by a processor or via the operating system of the client device whereas a web application may be incapable of execution or display without the aid of the web browser. Thus web applications can be run inside a browser with a dedicated user interface and may provide functionality and an experience that is more rich and interactive than a standalone website but are less cumbersome and monolithic than a desktop application. Examples of web applications include games photo editors and video players that are run inside the browser.

Web applications can be hosted web applications installable web applications or packaged web applications. Hosted web applications may include at least a portion of a web site that itself includes web pages plus some metadata that may be especially pertinent to the web application or to the user of the web application to allow the web application to perform some particular functionality for the user.

Installable web applications are a way of making a browser treat certain websites like applications. Many installable web applications are hosted web applications with extra metadata such as a small manifest file that describes the application . Packaged web applications are a type of installable web applications. Packaged applications can be thought of as web applications whose code is bundled so that the user can download all of the content of the web application for execution by the browser. A packaged web application may not need to have network access to perform its functionality for the user and rather may be executed successfully by the browser locally on the computing device without access to a network. Packaged web applications have the option of using extension application programming interfaces APIs allowing packaged apps to change the way the browser behaves or looks.

In various examples the web browser may include or be configured to interact with one or more browser extensions. In this context a browser extension may include one or more web pages packaged or grouped together as a definable whole and configured to extend the functionality to the web browser. As described herein browser extensions are small software programs that can modify and enhance the functionality of a web browser. They may be written using web technologies such as HTML JavaScript and CSS. Extensions may have little or no user interface. Extensions may provide a user interface icon or other user interface that may modify a browser s chrome which is defined herein to include an area outside of a webpage displayed in the browser such as the borders of a web browser window which include the window frames menus toolbars and scroll bars . Installation of an extension also may be used to extend the functionality of a browser e.g. to grant permission to the browser or web applications executed by the browser to perform actions that would ordinarily be forbidden but for the installation of the extension.

Thus browser extensions also provide extra functionality to a browser but generally unlike web applications there is little or no user interface component to the functionality provided by an extension. Instead browser extensions extend the functionality of the browser and the websites being viewed in it. For example browser extensions can extend the functionality of the browser by adding a new button to the address bar such as an ever present currency converter. Buttons like this can also apply to the current website being viewed for example clicking the currency converter button can convert all prices on the website presented to a user into a currency chosen by the user. In another example an extension can be installed so that when a user hovers a cursor over a thumbnail image on a webpage executed by a browser a larger size version of the image is displayed until the user moves the cursor away from the image. In another example an extension may be installed to embed a mail this button next to every link in every page. Compared to web applications extensions generally cut across websites and web applications. Extensions are usually in effect across all websites though some are site specific . Web applications do not combine with other apps in this way. Rather web applications run standalone like any regular website. Packaged web applications and installable web applications are also different from browser extensions because they present very different user interfaces.

 Packaged web applications in contrast to browser extensions may look and feel like regular web applications with a big screen design and rich user interface. Both extensions and packaged web applications may bundle all their files into a single file that a user downloads and installs. This bundling means that unlike ordinary web applications extensions and packaged web applications do not need to depend on content from the web. Browser extensions packaged web applications and installable web applications may be distributed via a trusted web store or via individual websites.

Throughout this document the terms browser application secure browser process privileged browser process browser process web browser and web browser application may be used interchangeably to refer to the same thing. A browser application may be an application configured to run on a computing device and render web content both remote and local such as web pages web applications and a file manager interface as some examples. In an example implementation content rendered by the browser application may be rendered in respective sub processes of a secure browser process where each sub process runs separately from other sub processes associated with the browser.

As is described herein each of the browser sub processes e.g. a file manager interface and a remote content access process that are used to provide a web application with remote content secure access to locally stored files may operate as a respective sandboxed sub process of a privileged browser process. Alternatively a remote content access process may operate as a sandboxed sub process of the file manager interface. As the term is used herein a sandboxed sub process is an unprivileged process that is subject to but isolated from a main privileged browser process e.g. the browser process that is able to access system resources and is also isolated from an underlying operating system of a computing device on which the browser application is implemented. In other implementations a file manager interface and a file handler process such as described herein may operate as a sandboxed sub processes of an underlying operating system. Sandboxing may be accomplished by a privileged browser process for example by limiting or preventing access to the resources of the browser process resources of the underlying operating system and or resources of the associated computing device e.g. filesystems system calls etc. by the sandboxed sub processes. Sandboxed processes also may be isolated from one another where any communication between different sandboxed processes may be facilitated by a privileged browser process.

Throughout this document the terms extension and browser extension may be used interchangeably to refer to the same thing. The term extension may also be used to refer to an extension for a file manager interface. In one example a browser extension may be delivered to a computing device for installation as an installation package that includes a zipped bundle of files e.g. compressed archive file and a header that includes some metadata about the extension. A properly formed extension when unpacked and installed in the browser adds functionality to the browser application. Alternatively in some implementations such as those described herein an extension may add functionality to a file manager interface instead of or in addition to adding functionality to the browser application. In some implementations extensions may operate as webpages e.g. may be implemented as local web content and may have access to all of the application programming interfaces APIs that the browser application provides to webpages and or web content.

The types of data files of an extension application that can make up a zipped file bundle of an extension installation package may include hypertext mark up language HTML cascading style sheets CSS JavaScript images and other types of files including web related computer language content and or code such as JavaScript Object Notation JSON objects. JSON objects that may be part of an extension installation package include a manifest data file and a catalog data file. In an example implementation a manifest file may be a JSON formatted file that includes a plurality of information fields that are used to define the corresponding extension. These fields may include a name field a version field as well as one or more fields that indicate any APIs the extension wishes to have access to.

For instance in an example implementation a file handler API may be provided in a computing device that allows an extension developer to extend the functionality of a file manager interface to provide browser executed web applications e.g. remotely stored web applications with secure access to files stored in a local filesystem of the computing device e.g. content that is directly or indirectly accessible by a user of the computing device through the file manager interface such as using the techniques described herein. In such approaches the manifest file for a given extension may indicate declare that it requires access to the file handler API in order to extend the functionality of for instance a file manager interface of an associated computing device.

A manifest file may also include fields that define the types of actions the extension will take in the browser and or file manager interface such as displaying icons or buttons for example. A catalog file in one example may be a JSON formatted file that includes a plurality of key value pairs that may be used for internationalization of the browser extension included in its corresponding browser extension installation package.

In an example implementation image files included in an extension installation package may include icons as well as image files that are used by the extension when it is rendered in the browser and or the file manager interface. The image files may be in a number of formats such as ICO GIF JPG and PNG among a number of other possible formats.

As shown in the computing device includes a privileged browser process e.g. as discussed above a file manager interface a remote content access process and a local filesystem e.g. user accessible content . In an example implementation the file manager interface may be implemented as a sandboxed sub process of the privileged browser process . Further the file manager interface may produce a graphical user interface GUI on the computing device that allows a user to interact with the local filesystem such as by selecting file folders and or data files that are included in the local filesystem and or performing and or initiating other actions on the local filesystem such a viewing a file for example. In some implementations the file manager interface may implemented as local web content. In other implementations the file manager interface may be implemented as a local native application. Of course a number of other approaches may also be used to implement the file manager interface .

In the computing device the file manager interface may include a file handler extension that extends the functionality of the file manager interface to allow a user to provide remotely stored content e.g. websites and or web applications secure access to locally stored information via the file manager interface . For instance using the approaches described herein the file handler extension e.g. in conjunction with an API of the privileged browser process may allow a user to upload files included in the local filesystem to a website e.g. upload digital photos to a photo sharing site without having to use a dedicated interface of the photo sharing site where the website is included in remotely stored content on the server . In other embodiments the file handler extension may allow a user to open a document file for editing using a web based word processor application e.g. remotely stored content from the file manager interface without having to use a dedicated interface of the web based word processor application. In still other embodiments the file handler extension may allow a user to provide the remote content secure access to the local filesystem to perform other actions such as create a new file or traverse sub folders of a selected file folder as two examples. It will be appreciated that the file manager interface may include multiple file handler extensions where each of the file handler extensions corresponds with a respective set of file types and respective remotely stored content.

In an example implementation a user may install a given extension on the computing device where the given extension extends the functionality of the privileged browser process and or the file manager interface to allow for secure interaction with the remote content in response to user actions in the file manager interface . As described herein the remote content may be for example a website or a web application. In this example the given extension as part of its manifest file may declare a file handler API of the privileged browser process. where the file handler API extends the functionality e.g. adds functionality using the file handler extension of the file manager interface .

The specific functionality that is to be added by the file handler extension may be defined by files that are included in the given extension s installation package. For instance a manifest file of the given extension may indicate one or more file types to which the added functionality corresponds. A manifest file for a web application that the user desires to install also may one or more file types to which the added functionality corresponds. The manifest file may also indicate one or more actions that may be performed on the file types to which it applies as well as define buttons icons or other user selectable action elements menu items double click responses or an in place viewer editor as some examples that may be selected to initiate respective corresponding actions. Additionally the files of the given extension may also include an HTML file that implements respective functions for carrying out the one or more actions indicated in the manifest file. In such an approach a user clicking a button or icon corresponding with a specific action indicated in the manifest file may result in the corresponding function in the HTML file being called.

Code for an example manifest file for a web application to register the web application as a default file handler for one or more particular types of files is shown below in Table 1.

It should be appreciated that the code shown in Table 1 can be part of a larger manifest for the web application and is shown here for example purposes only. Additionally it should be appreciated that the code shown in Table 1 can be considered as code for a file handler extension that can be part of the installation package for the web application and which extends the functionality of the file manger interface for advantageous use by the web application. Thus the code shown in Table 1 can be a code snippet of an extension of a larger body of code for the web application and is shown here to provide an example of how the web application can be registered as a default file handler for particular type s of locally stored files so that a user may advantageously use the web application as a default file handler for the particular type s of locally stored files.

In the example manifest of Table 1 line 2 of the manifest allows a user or a developer of the web application to define a name the extension of the file manager interface . Line 4 of the manifest is the beginning of code that defines the functionality provided by the extension.

Line 6 of the manifest allows the user or the developer to define a function that can performed on locally stored files as a result of the installation of the extension shown in Table 1. Line 7 of the manifest allows the user or the developer to define a title of the extension that can be displayed in the file manager interface e.g. in association with a button the user may select to initiate the function defined in line 6 of the manifest. Line 8 of the manifest allows the user or the developer to define types of files e.g. those file types listed in lines 9 10 and 11 of the manifest that can be handled by the registered web application via the file manager interface as a result of installation of the extension shown in Table 1. As shown in lines 9 10 and 11 of the manifest the types of files to be handled by the registered web application can be defined by the filename extension of the files. For example files having the extensions jpg jpeg and png can be defined in lines 9 10 and 11 as types of files to be handled by the web application. In other implementations types of files can be defined by other attributes e.g. their content which may be determined based on their MIME type or their location within a local filesystem e.g. as defined by folders of the filesystem .

Line 15 of the manifest can allow the user or the developer to define the permissions that are granted to the web application upon installation of the extension shown in the manifest shown in Table 1. For example line 16 of the manifest grants permission to the web application to use fileBrowserHandler extension so that the web application can access locally stored files of the types defined in lines 9 10 and 11 through the file manager interface . Lines 18 19 and 20 allow the user to define user interface elements for display in the file manager interface which may be used by the user to access the functionality provided by the extension shown in Table 1.

For purposes of illustration and clarity in the example implementations described herein user selectable action elements are generally illustrated and described as action buttons. It will be appreciated however that other techniques such as those indicated above may be used to implement such user selectable action elements.

As an example the manifest file of the given extension may specify an upload action that is to be applied to a particular type of files e.g. digital image file types in one implementation including specifying text and or an icon to display on a corresponding button for initiating the upload action. In such an approach the user may select a digital image file in the file manager interface . In response to the selection of the digital image file within the file manager interface the added functionality of the given extension may cause an upload button to be displayed in the file manager interface s GUI. The user then may click the upload button which may call a corresponding HTML function that carries out the upload action for the selected image file to a corresponding web application. In the example shown in the operations included in the HTML function that carries out the upload action may be performed by the remote content access process which may be a sandboxed sub process of the privileged browser process or a sandboxed sub process of the file manager interface .

In an example implementation each device of the storage device may implement a file allocation table FAT which is used to index map where information is stored in the associated storage device. Each device of the data storage devices may also implement one or more data storage partitions that are indexed in the respective FAT where the data storage partitions are used to store data files such as in a hierarchical file folder structure. Other approaches may be used to implement the local filesystem of the computing device . In the approaches described herein web applications may be given permission e.g. by a file handler extension to access particular types of data files and or specific portions of a FAT where those permission is are limited by a specific action to be performed and may also be limited by the specific files and or file folders that are selected by a user in connection with the specific action. For instance if a user wants to upload a specific file in the local filesystem to a web application using the file handler extension the web application may only be given read access to that specific file and not given any access to a corresponding FAT.

As shown in the privileged browser process may be operationally coupled with the local filesystem the file manager interface and the remote content access process . In such an arrangement as previously discussed the file manager interface and the remote content access process may be respective sandboxed sub processes of the privileged browser process . Alternatively the remote content access process may be a sandboxed sub process of the file manager interface .

In the arrangement shown in the privileged browser process includes a permissions map . In an example implementation the browser process may be configured to assign access permissions for resources of the computing device such as for items included in the local filesystem . In some implementations the browser process may keep track of assigned access permissions in the permissions map . Such access permissions may be assigned as part of the operation of a file hander extension such as the file handler extension . In such arrangements sandboxed sub processes such as the file manager interface and the remote content access process may only access resources of the computing device in accordance with respective permissions assigned to them and listed in the permissions table .

For instance using the previously discussed example of a user uploading a specific file in the local filesystem to a website using the file handler extension not shown in when the user clicks an upload button provided by the file handler extension the privileged browser process may dynamically assign the remote content access process read only access to the file being uploaded and update the permissions map to reflect the assigned permission. In other situations such as those described herein other permissions may be assigned. For instance the file handler extension process may be configured to assign access permissions that are appropriate for a given action to be performed by the remote content e.g. read and write permissions for a file that is to be edited .

In the above example once the read only access is assigned the web application i.e. the remote content that the selected file is being uploaded to may access the file via the remote content access process which now has permission to read the file. Once the selected file is uploaded the privileged browser process may dynamically revoke the read only access of the remote content access process to the selected file and update the permissions map to remove the previously assigned permission. Further once the selected file is uploaded the privileged browser process may terminate the remote content process . It will be appreciated that the exact permissions that are assigned and the items to which those permissions are assigned will depend at least on the particular situation and the action being performed by the file handler extension .

As shown in the file manager interface includes a tab that indicates a specific location in a filesystem of a computing device such as the local filesystem shown in . In this instance the tab indicates local as being illustrative that this example is discussed herein with reference to the local filesystem shown in . The file manager interface also includes column headings in row which include Name Type Size and Date. The column headings in row signify data file and or file folder properties for items associated with included in the current location file folder of the local filesystem and are respectively listed in those columns for each item as appropriate.

In the arrangement shown in files that are included in the current location local of the local filesystem are listed in rows and . The listed files include four file folders respectively a DOCS file folder a PICTURES file folder a MUSIC file folder and a VIDEOS file folder. Each of these items is indicated as type FOLDER in the Type column from row . In the DOCS file folder is indicated as being selected such as may be accomplished by a user selecting the DOCS file folder with a pointing device not shown . Based on the user s selection of the DOCS file folder a file handler extension such as the file handler extension may extend the functionality of the file manager interface using the techniques described herein so as to provide action buttons and in the file manager interface . As shown in the action button is labeled UPLOAD while the action button is labeled as CREATE. 

In this example the file handler extension e.g. in a manifest file may associate files with type FOLDER with the UPLOAD button and CREATE button where a user selecting either of those buttons results in a respective corresponding function being called that carries out an associated action on the selected item or items . In other implementations the action buttons and may be defined in respective manifest files of different file handler extensions.

In one example if a user selects the UPLOAD button after selecting the DOCS file folder a function may be called that uploads any data files in the DOCS file folder to a web based data storage service. In this example a remote content access process such as the remote content access process may be launched. That remote content access process may then be dynamically assigned read only permissions for any data file included in the DOCS file folder such as by a privileged browser process and the assigned permissions may be included in an associated permissions table such as described herein. Additionally in certain implementations the remote content access process may also be assigned read only permission for data files that are included in sub folders of the DOCS file folder.

After data files from the DOCS file folder are uploaded in accordance with the function that is called by selection of the UPLOAD button the read only permission for data files in the DOCS file folder and sub folders if appropriate may be dynamically revoked by a privileged browser process and removed from an associated permissions table . In other implementations the read only permission may be dynamically revoked when the user deselects the DOCS file folder. Such approaches may allow remotely stored content the web based data storage service limited read only access only to the files it is uploading thus avoiding exposing the entire filesystem to the remote content and accordingly reducing potential security risks.

In another example if a user selects the CREATE button after selecting the DOCS file folder a function of a file handler extension may be called that allows the user to create a new document file in the DOCS file folder using a web based word processing application. In this example a remote content access process such as the remote content access process may be launched and that process may be dynamically assigned file creation and deletion permission for the DOCS file folder such as by a privileged browser process where the file creation and deletion permission is included in an associated permissions table. Such file creation and deletion permission may also implicitly include read and write access for the DOCS file folder. Additionally in some implementations the remote content access process may also be assigned file creation and deletion permission for sub folders of the DOCS folder.

After creating a new document file such as in accordance with the function that is called by selection of the CREATE button e.g. after saving and closing the new document the file creation and deletion permission for the DOCS file folder and sub folders if appropriate may be dynamically revoked by a privileged browser process and removed from an associated permissions table. In other implementations the file creation and deletion permission may be dynamically revoked when the user deselects die DOCS file folder. Such approaches allow a web application e.g. the web based word processor web application limited file creation and deletion permission access to only the DOCS file folder which may include sub folders thus avoiding exposing the entire filesystem including a parent file folder of the DOCS file folder to the remote content and as a result reducing potential security risks.

As shown in the file manager interface includes a tab that indicates a specific location in a filesystem of a computing device such as the local filesystem shown in . In this instance the tab indicates local DOCS which may be the DOCS file folder discussed above with respect to row in . In like fashion as the file manager interface the file manager interface also includes column headings in row which include the Name Type Size and Date attribute headings.

In the arrangement shown in items that are included in the DOCS file folder are listed in rows and . The listed items include respectively a SUB DOCS file folder and three document files DOC A DOC B and DOC C. The SUB DOCS file folder is indicated as Type FOLDER and each of the document files is indicated as Type DOC in the Type column from row . In DOC B is indicated as being selected such as selected by a user. Based on a user s selection of DOC B a file handler extension such as the file handler extension may extend the functionality of the file manager interface using the techniques described herein so as to provide action buttons and in the file manager interface . As shown in the action button is labeled UPLOAD while the action button is labeled as EDIT. 

In this example the file handler extension e.g. in a manifest file may associate file in a local filesystem that belong to the DOC type with the UPLOAD button and the EDIT button where a user selecting either of those buttons results in a respective corresponding function being called that carries out an associated action on the selected item or items . Files that belong to the DOC type can be determined based on a filename extension of the file. For examples all files having a name .doc which represents is a wildcard character may be determined to belong to the DOC type. In other implementations rather than using the filename extension to determine the type of a selected file the content of a selected file i.e. MIME type may be used e.g. by the file handier extension the type to which the selected file belongs and to determine available actions for the selected file.

Depending on the particular implementation the function associated with the UPLOAD button may be the same function that is associated with the UPLOAD button or it may be a different function that is defined in a different file handler extension. Depending on the particular implementation the action buttons and may be defined in a manifest file of a single file handler extension or they may be defined in respective manifest files of different file handler extensions.

In one example if a user selects the UPLOAD button after selecting DOC B a function may be called that uploads DOC B to a web based data storage service. In this example a remote content access process such as the remote content access process may be launched. That remote content access process may then be dynamically assigned read only permission for only DOC B such as by a privileged browser process and the assigned permission may be included in an associated permissions table.

After uploading DOC B in accordance with the function that is called by selection of the UPLOAD button the read only permission for DOC B may be dynamically revoked by a privileged browser process and removed from an associated permissions table . In other implementations the read only permission may be dynamically revoked when the user deselects DOC B. Such approaches may allow remotely stored content the web based data storage service limited read only access only to DOC B thus avoiding exposing the entire filesystem including any of the file folders e.g. as indexed or mapped in an associated FAT to the remote content and as a result reducing potential security risks.

In another example if a user selects the EDIT button after selecting the DOCS file folder a function may be called that allows the user to edit DOC B using a web based word processing web application. In this example a remote content access process such as the remote content access process may be launched and that process may be dynamically assigned read and write permission for DOC B such as by a privileged browser process where the read and write permission is included in an associated permissions table.

After editing DOC B such as in accordance with the function that is called by selection of the EDIT button e.g. after saving and or closing DOC B the read and write permission for DOC B may be dynamically revoked by a privileged browser process and removed from an associated permissions table. In other implementations the read and write permission may be dynamically revoked when the user deselects DOC B in the file manager interface . Such approaches allow remotely stored content e.g. the web based word processor read and write access to only DOC B thus avoiding exposing the entire filesystem including a parent file folder of the DOCS file folder or any of an associate FAT to the remote content and as a result reducing potential security risks.

As shown in the file manager interface includes a tab that indicates a specific location in a filesystem of a computing device such as the local filesystem . In this instance the tab indicates media 189A F430 which may be a variety of different media files and a variety of different types of media files. In like fashion as the file manager interface the file manager interface also includes column headings in row which include the Name Size and Date attribute headings. The file manager interface also includes a Preview pane that may be used to preview the display of one or more media files whose attributes are listed in the Name Size and Date columns of the interface .

In the arrangement shown in different files along with their attributes are listed in rows of the interface . The interface also includes a user selectable action element that can be used to invoke a registered web application to handle a file that is selected from the files displayed in the interface . As shown in user selectable action element is labeled Upload to Picasa. 

In this example the file handler extension e.g. in a manifest file such as the manifest file shown in Table 1 may associate one or more user selected files in a local filesystem that belong to the jpg type with the Upload to Picasa button where a use s selection of button results in a respective corresponding function being called that carries out an associated action on the selected item or items . Files that belong to the jpg type can be determined based on a filename extension of the file. For examples all files having a name .jpg which represents is a wildcard character may be determined to belong to the jpg type.

The Upload to Picasa button may be defined in a manifest file of a file handler extension such as the manifest file shown in Table 1. A user can select one or more locally stored files that belong to a particular type of file that is defined in a manifest. For example as shown in the file IMG5640.jpg is shown as having been selected by a user by virtue of it being highlighted within the plurality of files shown in the interface . If a user selects the Upload to Picasa button after selecting IMG5640.jpg a web application that has been registered by installation of the file handler extension may be automatically invoked to handle the selected file. For example by selecting the Upload to Picasa button after selecting IMG5640.jpg the file IMG5640.jpg may be automatically uploaded to a picasa.com web application which may provide photo editing or photo organizational tools.

By selecting one or more files displayed in the file manager interface and selecting the user selectable action element a remote content access process such as the remote content access process may be launched. That remote content access process may then be dynamically assigned appropriate local file access permission s for only the selected one or more files where the permission s depend on the requested privileges requested in the manifest. For example in some implementations the remote content access process may be assigned read only permission for the selected files. The dynamic assignment of the appropriate file access permission s can be assigned by a privileged browser process and the assigned permission s may be included in an associated permissions table.

After uploading IMG5640.jpg to the Picasa web application in accordance with the function that is called by selection of the Upload to Picasa button the local file access permission s for IMG5640.jpg may be dynamically revoked by a privileged browser process and removed from an associated permissions table . In other implementations the local file access permission s may be dynamically revoked when the user deselects IMG5640.jpg. Such approaches may allow remotely stored content e.g. a web based data storage service limited e.g. read only access only to IMG5640.jpg thus avoiding exposing the entire filesystem including any of the file folders e.g. as indexed or mapped in an associated FAT to the remote content and as a result reducing potential security risks.

As illustrated in the method includes at block registering a web application which is executable through a web browser as a default file handler of a particular type of locally stored files. At block the method includes providing by a computing device a file manager interface the file manager interface being configured to facilitate interaction by a user with a local filesystem of the computing device. At block the method includes receiving by the file manager interface a user selection of a file included id the local filesystem wherein the file belongs to the particular type of files. At block the method includes based on the user selection of the file of the particular type providing in the file manager interface a user selectable action element to invoke the registered web application to handle the selected file. At block the method includes receiving by the file manager interface a user selection of the user selectable action element. At block the method includes in response to the user selection of the user selectable action element automatically invoking the registered web application to handle the selected file.

Computing device includes a processor memory a storage device a high speed interface connecting to memory and high speed expansion ports and a low speed interface connecting to low speed bus and storage device . Each of the components and are interconnected using various busses and may be mounted on a common motherboard or in other manners as appropriate. The processor can process instructions for execution within the computing device including instructions stored in the memory or on the storage device to display graphical information for a GUI on an external input output device such as display coupled to high speed interface . In other implementations multiple processors and or multiple buses may be used as appropriate along with multiple memories and types of memory. Also multiple computing devices may be connected with each device providing portions of the necessary operations e.g. as a server bank a group of blade servers or a multi processor system .

The memory stores information within the computing device . In one implementation the memory is a volatile memory unit or units. In another implementation the memory is a non volatile memory unit or units. The memory may also be another form of computer readable medium such as a magnetic or optical disk.

The storage device is capable of providing mass storage for the computing device . In one implementation the storage device may be or contain a computer readable medium such as a floppy disk device a hard disk device an optical disk device or a tape device a flash memory or other similar solid state memory device or an array of devices including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory the storage device or memory on processor .

The high speed controller manages bandwidth intensive operation is for the computing device while the low speed controller manages lower bandwidth intensive operations. Such allocation of functions is exemplary only. In one implementation the high speed controller is coupled to memory display e.g. through a graphics processor or accelerator and to high speed expansion ports which may accept various expansion cards not shown . In the implementation low speed controller is coupled to storage device and low speed expansion port . The low speed expansion port which may include various communication ports e.g. USB Bluetooth Ethernet wireless Ethernet may be coupled to one or more input output devices such as a keyboard a pointing device a scanner or a networking device such as a switch or router e.g. through a network adapter.

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a standard server or multiple times in a group of such servers. It may also be implemented as part of a rack server system . In addition it may be implemented in a personal computer such as a laptop computer . Alternatively components from computing device may be combined with other components in a mobile device not shown such as device . Each of such devices may contain one or more of computing device and an entire system may be made up of multiple computing devices communicating with each other.

Computing device includes a processor memory an input output device such as a display a communication interface and a transceiver among other components. The device may also be provided with a storage device such as a microdrive or other device to provide additional storage. Each of the components and are interconnected using various buses and several of the components may be mounted on a common motherboard or in other manners as appropriate.

The processor can execute instructions within the computing device including instructions stored in the memory . The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The processor may provide for example for coordination of the other components of the device such as control of user interfaces applications run by device and wireless communication by device .

Processor may communicate with a user through control interface and display interface coupled to a display . The display may be for example a TFT LCD Thin Film Transistor Liquid Crystal Display or an OLED Organic Light Emitting Diode display or other appropriate display technology. The display interface may comprise appropriate circuitry for driving the display to present graphical and other information to a user. The control interface may receive commands from a user and convert them for submission to the processor . In addition an external interface may be provide in communication with processor so as to enable near area communication of device with other devices. External interface may provide for example for wired communication in some implementations or for wireless communication in other implementations and multiple interfaces may also be used.

The memory stores information within the computing device . The memory can be implemented as one or more of a computer readable medium or media a volatile memory unit or units or a non volatile memory unit or units. Expansion memory may also be provided and connected to device through expansion interface which may include for example a SIMM Single In Line Memory Module card interface. Such expansion memory may provide extra storage space for device or may also store applications or other information for device . Specifically expansion memory may include instructions to carry out or supplement the processes described above and may include security information also. Thus for example expansion memory may be provide as a security module for device and may be programmed with instructions that permit secure use of device . In addition secure applications may be provided via the SIMM cards along with additional information such as placing identifying information on the SIMM card in a non hackable manner.

The memory may include for example flash memory and or NVRAM memory as discussed below. In one implementation a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory expansion memory or memory on processor that may be received for example over transceiver or external interface .

Device may communicate wirelessly through communication interface which may include digital signal processing circuitry where necessary. Communication interface may provide for communications under various modes or protocols such as GSM voice calls SMS EMS or MMS messaging CDMA TDMA PDC WCDMA CDMA2000 or GPRS among others. Such communication may occur for example through radio frequency transceiver . In addition short range communication may occur such as using a Bluetooth WiFi or other such transceiver not shown . In addition GPS Global Positioning System receiver module may provide additional navigation and location related wireless data to device which may be used as appropriate by applications running on device .

Device may also communicate audibly using audio codec which may receive spoken information from a user and convert it to usable digital information. Audio codec may likewise generate audible sound for a user such as through a speaker e.g. in a handset of device . Such sound may include sound from voice telephone calls may include recorded sound e.g. voice messages music files etc. and may also include sound generated by applications operating on device .

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a cellular telephone . It may also be implemented as part of a smart phone personal digital assistant or other similar mobile device.

Various implementations of the systems and techniques described here can be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium computer readable medium refers to any computer program product apparatus and or device e.g. magnetic disks optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described here can be implemented on a computer having a display device e.g. a CRT cathode ray tube ort CD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The systems and techniques described here can be implemented in a computing device that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the systems and techniques described here or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN and the Internet.

The computing device can include clients and server. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server irises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

A number of implementations have been described. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of the invention.

In addition the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. In addition other steps may be provided or steps may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other implementations are within the scope of the following claims.

