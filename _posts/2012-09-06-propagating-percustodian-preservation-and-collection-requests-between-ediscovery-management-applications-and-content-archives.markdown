---

title: Propagating per-custodian preservation and collection requests between ediscovery management applications and content archives
abstract: A method, computer program product, and system for defining custodianship of content in an electronic discovery management system, and maintaining custodianship definitions in an external content archive, the custodianship specifying at least one parameter of a first custodian to associate the content with the first custodian. Responsive to receiving a request to perform an operation on the content associated with the first custodian, the request is modified with the at least one parameter of the first custodian and at least one property of the content in the content archive, the at least one parameter and at the least one property being consumable by the content archive. The modified request is sent to the content archive, which is configured to, responsive to receiving the modified request, perform the operation on the content associated with the first custodian.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08745008&OS=08745008&RS=08745008
owner: International Business Machines Corporation
number: 08745008
owner_city: Armonk
owner_country: US
publication_date: 20120906
---
Disclosed herein are techniques to define custodianship of content in an electronic discovery management system and enforce the custodianship of the content in a content archive.

An electronic discovery management system EMS is generally used to manage all aspects of the electronic discovery eDiscovery process by providing a system to store and track information related to legal matters within an organization. For example an EMS may for many different legal matters identify selection criteria for electronic documents subject to a hold in the legal matter and identify custodians associated with the electronic documents e.g. authors or recipients of an email . The EMS may then manage workflows surrounding the legal matters in order to preserve and collect evidence.

Custodianship may generally be defined as what content belongs to or is associated with which person. Attempts to define custodianship at the content archive result in complex and unusable solutions due to the fact that legal staff needs to interact with information technology IT staff in order to create a definition of custodianship inside a content archive before a collection plan can be executed. It may be impossible to predefine custodianship rules which fit all eDiscovery scenarios.

On the other extreme attempts to fully delegate the management of per custodian preservation requests to EMS applications or integration infrastructure external to the content archive leads to lack of custodian visibility inside review tools working on top of the content archive and lack in granularity in audit trail information how many content items were put on hold for a particular custodian within a particular preservation plan . These tools may not know which data belongs to which custodian because this knowledge is owned by the EMS. Furthermore this solution leads to unclear audit trails and unnecessary performance hits during hold or release stages in the content archive.

Embodiments disclosed herein describe a computer implemented method computer program product and system to define custodianship of content in an electronic discovery management system and maintain custodianship definitions at a content archive external to the electronic discovery management system by defining in the electronic discovery management system custodianship of content the content being stored the content archive and the custodianship specifying at least one parameter of a first custodian to associate the content with the first custodian. The operation responsive to receiving a request to perform an operation on the content associated with the first custodian modifies the request in the electronic discovery management system with the at least one parameter of the first custodian and at least one property of the content in the content archive the at least one parameter and at the least one property of the content in the content archive being consumable by the content archive. The operation then sends the modified request to the content archive the content archive being configured to responsive to receiving the modified request perform the operation on the content associated with the first custodian.

Embodiments disclosed herein propose a content archive application hereinafter content archive designed to support per custodian preservation requests and an electronic discovery eDiscovery management system EMS capable of using the content archive in an efficient manner through the new integration approach between these applications. In one embodiment the EMS supplies the custodianship definition to the content archive in the form of search criteria. The content archive which is generally external to the EMS provides the data model containing the notion of a custodian and is able to associate the search results of a multi custodian search query with a custodian object in a single pass. By modeling the application architecture in this manner the performance impact of a hold or a release request for a preservation plan containing a large number of custodians will be more efficient and review and analysis tools can rely on a robust custodianship definition and releasing content per custodian can be done in an efficient manner.

Typically eDiscovery practices do not rely on a universal definition of custodianship but rather define custodianship on a case by case basis. For example 

Case B requires preservation of all files archived from a marketing file share to a content archive which have been updated by John Smith.

Case D requires preservation of all files from John Smith s home folder on a departmental file share.

In all cases the custodian is the same John Smith. Content archives must provide a certain level of support for custodianship i.e. handle operations for multiple custodians efficiently in order to be considered eDiscovery capable. This is needed for the ability to i efficiently put on hold and release from hold all content belonging to a given custodian within a multi custodian preservation plan where in some cases custodians may be released one by one ii communicate audit trail information per custodian such as how many files were put on hold for a given custodian within a preservation plan such that legal department members are aware of these actions iii group and search files per custodian in review tools sitting on top of archives and iv efficiently handle situations where content belongs to multiple custodians within the same preservation plan where the content may be released only if there are no more custodians to whom the content belongs listed in the preservation plan. A preservation plan is a task that executes a hold and later a release against a particular system containing query parameters and a list of custodians.

In order to meet these requirements embodiments disclosed herein define custodianship in the EMS which is passed to the content archive in some embodiments through an API of the content archive . The content archive is designed to have a notion of a custodian which in some embodiments is a database object a folder or a tag containing custodian information or pointing to an object containing such information but the content archive does not manage the definition of a custodian as the definition of a custodian is managed by the EMS. The content archive performs per custodian preservation using the custodian definitions provided by the EMS for each preservation plan. While processing results the content archive creates custodian objects for each custodian and associates the content with them. If the content belongs to more than one custodian it is associated with more than one custodian object. By designing the application architecture in such a manner analysis and review tools can rely on explicit custodian objects when grouping and filtering the content. Additionally it is easy to release content belonging to a particular custodian by deleting the folder and all associations if the content is not associated with any other custodians within a given preservation plan it will be released from the preservation plan. In sum the EMS is responsible for defining custodianship and the content archive is responsible for enforcing custodianship. The content archive s hold execution capability is designed so that it can aggregate multiple custodian search parameters into a single query and then efficiently process the results associating content items it found with proper custodians.

In the following reference is made to embodiments of the disclosure. However it should be understood that the disclosure is not limited to specific described embodiments. Instead any combination of the following features and elements whether related to different embodiments or not is contemplated to implement and practice the disclosure. Furthermore although embodiments of the disclosure may achieve advantages over other possible solutions and or over the prior art whether or not a particular advantage is achieved by a given embodiment is not limiting of the disclosure. Thus the following aspects features embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim s . Likewise reference to the invention shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim s .

As will be appreciated by one skilled in the art aspects of the present disclosure may be embodied as a system method or computer program product. Accordingly aspects of the present disclosure may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present disclosure may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present disclosure are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Embodiments disclosed herein may be provided to end users through a cloud computing infrastructure. Cloud computing generally refers to the provision of scalable computing resources as a service over a network. More formally cloud computing may be defined as a computing capability that provides an abstraction between the computing resource and its underlying technical architecture e.g. servers storage networks enabling convenient on demand network access to a shared pool of configurable computing resources that can be rapidly provisioned and released with minimal management effort or service provider interaction. Thus cloud computing allows a user to access virtual computing resources e.g. storage data applications and even complete virtualized computing systems in the cloud without regard for the underlying physical systems or locations of those systems used to provide the computing resources.

Typically cloud computing resources are provided to a user on a pay per use basis where users are charged only for the computing resources actually used e.g. an amount of storage space consumed by a user or a number of virtualized systems instantiated by the user . A user can access any of the resources that reside in the cloud at any time and from anywhere across the Internet. In context of the present disclosure a user may access applications such as an eDiscovery application or related data available in the cloud. For example the eDiscovery application could execute on a computing system in the cloud and receive a request to create a multi custodian preservation plan. In such a case the eDiscovery application could define the custodianship and store data related to the preservation plan at a storage location in the cloud. Doing so allows a user to access this information from any computing system attached to a network connected to the cloud e.g. the Internet .

The computer generally includes a processor connected via a bus to a memory a network interface device a storage an input device and an output device . The computer is generally under the control of any suitable commercially available or open source operating system supporting the functions disclosed herein. The processor is included to be representative of a single CPU multiple CPUs a single CPU having multiple processing cores and the like. Similarly the memory may be a random access memory. While the memory is shown as a single entity it should be understood that the memory may comprise a plurality of modules and that the memory may exist at multiple levels from high speed registers and caches to lower speed but larger DRAM chips. The network interface device may be any type of network communications device allowing the computer to communicate with other computers via the network .

The storage may be a hard disk drive storage device. Although the storage is shown as a single unit the storage may be a combination of fixed and or removable storage devices such as fixed disc drives removable memory cards optical storage flash memory or solid state storage devices SSD . The memory and the storage may be part of one virtual address space spanning multiple primary and secondary storage devices.

The input device may be any device for providing input to the computer . For example a keyboard keypad light pen touch screen track ball or speech recognition unit audio video player and the like may be used. The output device may be any device for providing output to a user of the computer . For example the output device may be any conventional display screen or set of speakers along with their respective interface cards i.e. video cards and sound cards. Although shown separately from the input device the output device and input device may be combined. For example a display screen with an integrated touch screen a display with an integrated keyboard or a speech recognition unit combined with a text speech converter may be used.

As shown the memory contains eDiscovery application . The eDiscovery application may be used to manage all aspects of the eDiscovery process. The eDiscovery application may provide a method to store and track information related to legal matters within an organization. The eDiscovery application may also define workflows for each of the processes within a legal matter provides mechanisms to issue notices and alerts related to steps in the workflow and methods to track progress of items within the workflow. Further the eDiscovery application may define custodianship of content located in a content archive . In some embodiments the eDiscovery application stores the custodianship information in the custodian data . One example of an eDiscovery management application is IBM Atlas eDiscovery Process Management. IBM is a trademark of International Business Machines Corporation registered in many jurisdictions worldwide. 

As shown the memory also contains archive application . The archive application is generally configured to provide tools to access and manage a content archive for example the content archive . The archive application may contain a content management layer a search engine a content index and at least one application programming interface API . The archive application may also contain and manage data structures related to legal matters and custodians for storage in the content archive . For example the archive application may receive a request from the eDiscovery application in the form of a query and perform an operation on the content in the content archive .

The archive application may associate content in the content archive with a custodian object in the content archive whereby the content is subject to a preservation plan and not deleted or modified until a request to release the content from the preservation plan is communicated by the eDiscovery application to the archive application . The archive application may also be configured to return information on the content stored in the content archive responsive to a request received from the eDiscovery application . One example of an archive application is IBM Smart Archive.

As shown the storage contains the content archive . The content archive is a storage unit for the long term retention of data. Although the content archive is pictured as a relational database the content archive may take any form suitable to archive data. The content archive may be configured to store any type of data including but not limited to emails files and instant messaging logs. As shown the storage also contains the custodian data . The custodian data is a repository used to store custodianship associations. Although the custodian data is pictured as a relational database it may take any form suitable to store data including but not limited other database formats content metadata within content management platforms or flat files. The custodian data may associate any information related to a person in the custodian record including but not limited to name unique identifiers and other personal attributes. In some embodiments the custodian data is part of a larger database managed by the eDiscovery application .

Although depicted as residing on the computer the eDiscovery application the archive application the content archive and the custodian data may reside on different computers different memories and storage units within the same computer or any combination thereof. Furthermore some features may be managed by both the archive application or the eDiscovery application and the data used and generated by these applications may be stored in different locations such as the content archive and the custodian data . For example a query may be generated by the eDiscovery application or it may be generated by the archive application . However the eDiscovery application always manages the definition of custodianship and the content archive enforces the definition of custodianship as well as stores the custodianship associations.

At step the eDiscovery application receives a request from a user to perform an operation on content in the content archive . The request may be to create a preservation plan release content for one or more custodians from a preservation plan or perform a search on the content managed by the content archive. The operation could be for example to create a preservation plan containing custodians Joseph Amino and another employee Pat Rose putting all of their data meeting the request criteria on hold. Placing content on hold indicates that the content will not be deleted or altered while the content is subject to the hold. The request may specify a plurality of properties of the content including but not limited to a content type a date range of the content keywords and location of the content. For example the request could specify selection criteria to select content of type email sent or received by the custodians i.e. Joseph Amino and Pat Rose which were generated between Jan. 1 2001 and Jan. 1 2003. Alternatively the request may specify any email which the custodians have viewed were copied cc on or blind copied bcc on. Any possible combination of criteria may be used and any examples used herein should not be considered limiting of the disclosure. At step discussed in further detail with reference to the request is resolved in the eDiscovery management system. In some embodiments the eDiscovery application performs the functionality of step by resolving the request into archive application API calls. For example eDiscovery application may need to retrieve and resolve dynamic variables from the custodian data in order to prepare data for an API call to the archive application . Once the request has been resolved at step the eDiscovery application sends the request to the archive application in a format consumable by the archive application to instruct the archive application to perform the requested operation. For example the archive application and the eDiscovery application may not have consistent variable table and column names which need to be reconciled so that the two applications may communicate. At step described in further detail with reference to the archive application performs the requested operation.

The employee ID and custodian ID fields are parameters used to uniquely identify a person in the eDiscovery application and by the archive application respectively. At step the eDiscovery application will resolve request values based on the request parameters. For example if the request specifies Joseph Amino the eDiscovery application will query a person table in the custodian data to retrieve the parameters associated with his record. The eDiscovery application may therefore retrieve Joseph Amino s first and last name employee identification number personal folder location and custodian ID. At step the eDiscovery application resolves the request to include the resolved request parameters which may now appear as 

By operating in such a manner the eDiscovery application as manager of custodianship definitions may provide custodianship data compatible with both the eDiscovery application as well as the archive application . At step the eDiscovery application determines whether the request specifies additional custodians. If the request specifies additional custodians the eDiscovery application returns to step . In the example given above the original request specifies Pat Rose so the method would be executed again for the custodian Pat Rose. Otherwise the method ends.

At step the archive application executes the generated query against the content archive to obtain a content result set. The result set will include pointers to content from the content archive which meets the query criteria. At step the archive application executes a loop containing steps for each content in the result set. At step the archive application creates a matter record entry which may comprise creating an entry in the matter table. At step the archive application creates a plan record entry which may comprise creating a record in the plan table. At step the archive application creates a custodian record for each custodian specified in the result set in the content archive which may include updating the custodian table with an entry for each custodian. In some embodiments this step further comprises creating a folder in the content archive and appending metadata to the folder including but not limited to the custodian first name last name and employee ID to facilitate analysis and review and make a user interface more readable. At step the archive application associates the content with the custodian object by creating custodian content records by adding the custodian ID and the content ID to the CustodianContent table. By creating these associations the archive application may specify that the content is on hold and shall not be deleted. It is of note that the same content may be associated with multiple custodians. At step the archive application determines whether more content remains in the result set. If more content remains the archive application returns to step . Otherwise the method ends. Although the embodiment depicted in executes each of the steps in the loop in some embodiments each of the steps may not be executed if corresponding records exist in the database tables. The archive application may contain logic to determine whether such records exist. For example the archive application may determine whether a custodian record already exists for Joseph Amino before creating a custodian record for Joseph Amino in the custodian table. Therefore if a record for Joseph Amino already exists in the custodian table of the content archive for example he is already under Preservation Plan A when a request is received to place Joseph Amino under a new Preservation Plan B the archive application may create the Preservation Plan B record in the preservation plan table not create a new record for Joseph Amino in the custodian table and create the appropriate custodian content entries in the CustodianContent table.

Once a hold operation is completed as described herein the archive application has enough information to decide which content should not be deleted as part of a normal retention disposition cycle. As an example suppose a timer task wants to determine what content should not be disposed of The task may query the CustodianContent table to select distinct contentIDs. All items with contentIDs retrieved by this query belong to a preservation plan so they should not be subject to a standard retention disposition.

Advantageously the archive application now has a notion of custodianship. The content in the content archive is tagged by custodian and indirectly by a preservation plan. As a result operations which require filtering content by custodianship are easy to execute. The operations may include retrieving all content associated with a custodian retrieving content counts per custodian retrieving all content under a preservation plan and retrieving content totals per preservation plan. Even a search within content belonging to a custodian may become simpler as the archive application can first filter the subset of the content belonging to a particular custodian then perform a search based on a smaller subset of data. For example a user may request the number of files on hold for every custodian. The archive application can define an API CustodianTotal getTotalsForPlan planId . The input is plan ID the output is an array of CustodianTotal objects each object containing custodianID and total number of documents per custodian. On implementation side the archive application finds all custodian objects for a plan and count the number of content associations for each object. Additionally the API can have a method int getTotalForPlanAndCustodian planId custodianId which counts only one total for a single custodian.

The application architecture disclosed herein places responsibility for defining custodianship with an eDiscovery management system but the eDiscovery management system does not manage custodians directly in the content archive. The content archive has a capability to manage custodians efficiently per custodian support but does not manage the definition of custodians. The architecture disclosed herein results in significant performance gains increased process transparency simplicity of design and improves the quality of content analysis and review.

Embodiments disclosed herein allow for simple and robust integrated solutions in the eDiscovery area making other integration attempts obsolete saving maintenance and installation costs. Embodiments disclosed herein may significantly increase the transparency of eDiscovery requests resulting in less likelihood of errors thus reducing an entity s legal risks. By defining the application architecture as disclosed herein there may be a significantly smaller performance hit on email and file archives when performing large eDiscovery requests. Finally embodiments disclosed herein provide better capabilities for analysis and review tools deployed on top of archives due to explicit custodianship relationships existing in the content archive.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present disclosure. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

While the foregoing is directed to embodiments of the present disclosure other and further embodiments of the disclosure may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

