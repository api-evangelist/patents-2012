---

title: Programmatic modification of a message flow during runtime
abstract: A message flow within a message broker can be identified. The message flow can include nodes and connections. The nodes can include a reflective node, a pre-defined node and a user-defined node. The message broker can be an intermediary computer program code able to translate a message from a first formal messaging protocol to a second formal messaging protocol. The code can be stored within a computer readable medium. The reflective node within the message flow can be selected. The reflective node can be associated with an external resource which can be an executable code. The external resource can be executed which can result in the modifying of the structure of the message flow. The modification can occur during runtime. The modification can include node and/or connection adding, altering, and deleting.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08627337&OS=08627337&RS=08627337
owner: International Business Machines Corporation
number: 08627337
owner_city: Armonk
owner_country: US
publication_date: 20120224
---
This application is a continuation of U.S. patent application Ser. No. 12 966 726 filed Dec. 13 2010 pending which is incorporated herein in its entirety.

The present invention relates to the field of message passing and more particularly to programmatic modification of a message flow during runtime.

Application integration at a high level can refer to a solution that can be implemented to integrate software applications within and between organizations. Historically application integration focused on the integration of legacy software applications such as between different departments divisions within companies or new acquisitions. Within an organization these applications often vary considerably across departments can exist on different platforms can be written in different programming languages and can use different data formats. Integrating the applications within a Service Oriented Architecture can be a practical and cost effective solution over the alternative of re writing the existing applications.

Within SOA infrastructures message passing can be an integral component which can give rise to flexible reusable and robust application integration. Message passing typically includes a message broker which can perform a multitude of message handling operations. That is the message broker can facilitate inter application communication within the organization. The message broker can process messages within message flows which are currently static. That is the message flow cannot be dynamically self regulating and or responsive to messages internal states context and stimuli.

Current solutions for improving message flow processing include manually modifying a message flow. For example a message flow design can be modified by a middleware analyst in response to performance metrics which can indicate a bottleneck. Manually modified message flows must be redeployed and continually optimized through human intervention. This approach can be time consuming and error prone which can significantly impact infrastructure costs.

One aspect of the present invention can include a method a computer program product a system and an apparatus for programmatic modification of a message flow during runtime. A message flow within a message broker can be identified. The message flow can include nodes and connections. The nodes can include a reflective node a pre defined node and a user defined node. The message broker can be an intermediary computer program code able to translate a message from a first formal messaging protocol to a second formal messaging protocol. The code can be stored within a computer readable medium. The reflective node within the message flow can be selected. The reflective node can be associated with an external resource which can be an executable code. The external resource can be executed which can result in the modifying of the structure of the message flow. The modification can occur during runtime. The modification can include node and or connection adding altering and deleting.

Another aspect of the present invention can include a system for programmatically modifying a message flow during runtime. In this aspect a flow engine can be able to execute a message flow including a node a connection and a reflective node. The flow engine can be associated with a message broker. The reflective node can be associated with an external resource. The external resource can be an executable code able to structurally modify the message flow. The message queue can be configured to persist a message which can be associated with an application. The application can be a computer program code stored within a computer readable medium. The application can be associated with an application server. The configuration setting can link the reflective node to the external resource and or a parameter. The parameter can be an execution setting value.

The present disclosure is a solution for programmatic modification of a message flow during runtime. In the solution a message flow can be structurally modified during runtime in response to one or more operational inputs. Operational inputs can include but is not limited to metrics states context stimuli and the like. Structural modification can include but is not limited to node manipulation e.g. addition alteration deletion connection manipulation e.g. insertion modification deletion bend point manipulation and the like. In one embodiment a reflective node within a message flow can permit the execution of structural application programming interface API facilities which can modify the message flow at runtime. In the embodiment the reflective node can be linked to a timeout node which can provide periodic triggering of reflective node functionality.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions.

These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

As used herein a message flow can be a software construct including two or more nodes capable of performing a set of actions upon a message. The message flow nodes can be connected via a connection. A connection can be a linkage between nodes of a message flow which a message can be conveyed. Nodes can be an executable software entity able to process a portion of a message. Nodes can be associated with a terminal which can permit node linking. The terminal can be inputs outputs and the like. Nodes can include but is not limited to pre defined e.g. built in nodes user defined nodes a subflow and the like. Node functionality can include but is not limited to message processing message transformation message routing aggregation filtering and the like.

As used herein a message can be an application message conveyed from an application to another application. The message can be an automatically generated digital artifact conforming to one or more traditional and or proprietary formats. In one instance the message can be an Extensible Markup Language XML message.

An application can be a software program within an application messaging infrastructure. Application messaging infrastructure can be a hardware software platform for permitting the loose coupling of applications over a message passing bus. In one instance the application messaging infrastructure can include a Service Oriented Architecture SOA . It should be appreciated that message flow within method can be present within a distributed computing environment network computing environment cloud computing environment and the like.

In step a message flow within a message broker can be selected. Selection can be performed based on one or more criteria including but not limited to performance metrics message flow complexity owner and the like. In step the selected message flow can be executed. Execution can be performed in real time within a dynamic computing environment. In step a reflective node within the message can be selected. The reflected node can be selected based on execution order periodic node selection and the like. The reflective node can be pre defined user defined a subflow and the like.

In step the selected reflective node can be executed. Execution can include performing programmatic actions associated with an external resource. The executable resource can be an external resource can be an executable entity including but not limited to an executable code application programming interface API and the like. Executable code can include but is not limited to JAVA C Practical Extraction and Reporting Language PERL and the like.

In step the reflective node can evaluate the message flow structure execution and or performance. Structural evaluation can include but is not limited to traditional and or proprietary analysis to determine structural improvements and or optimizations. Evaluation of message flow evaluation can include but is not limited to execution connection examination node activity and the like. Evaluation of message flow performance can include but is not limited to collecting metrics analyzing execution metrics and the like.

In step if the evaluation of the message flow indicated the flow is not optimized the method can proceed to step else return to step . In step the message flow can be structurally modified during runtime to improve performance. In one embodiment the message flow can be modified and redeployed automatically. In step structural modification can be optionally logged. Message flow modifications can be recorded as an original message flow structure deltas and the like. Modifications can permit auditing change tracking and the like.

In step an optimized flow can be generated from structural modifications. To ensure operability the optimized flow can be subjected to consistency tests syntax testing and the like. In one instance testing can be performed automatically in response to the generation of the optimized flow. In another instance testing can be performed manually via a message flow software tool.

In step the identified message flow can be replaced in with the optimized flow during runtime. In one instance the selected message flow structure can be dynamically modified and utilized in real time. In the instance the message flow can be altered and redeployed automatically. In one configuration of the instance message flow runtime state can be maintained permitting message processing state to be persisted. In step if more message flows are available the method can return to step else continue to step . In step the method can end.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. Method can be performed for multiple message flows simultaneously. That is message flow optimization can be performed in parallel enabling rapid improvements to be achieved. In one embodiment method can be iteratively executed allowing message flows to be continually optimized due to environmental requirements and or changes.

It should be understood that in scenario message flow can be visually represented as a directed graph . Message flow can be visually presented within an interface of a message flow editor e.g. interface . In the scenario nodes can be represented as graphical icons. Message flow connections e.g. routes can be represented by directed lines . Dashed lines can represent dynamically inserted connections resulting from the execution of node . Dotted line can represent a deleted connection between node resulting from the node execution.

In scenario a message flow can include nodes linked via connections . Nodes can be present within flow which can be linked together by connection . Node can trigger periodic evaluation of flow through executable code associated with the node . When necessary e.g. performance problems flow can be structurally modified during runtime. In the scenario flow can be modified through the addition of nodes and connections . Connection can be removed creating a new message flow connection linking node to via node and connection . That is a new route e.g. connection and can be created.

Node can be linked via connection which can permit node to accommodate multiple connections. Node selection can be performed based on terminal configuration e.g. inputs and or outputs . Criteria for node selection can include but is not limited to input output quantity processing capabilities and the like. In one embodiment node linking can be automatically verified ensuring message flow operability. In one instance alternate linking can be performed to enable robust improvements to a flow . In the instance an alternative output of a node can be identified and a link can be established from the node to another appropriate node.

In one instance node can be a timeout node activating execution of node periodically. In the instance node timeout value can be an automatically and or manually determined value.

In one instance node can be a dynamic flow update node associated with an application programming interface API . In the instance node can execute a JAVA API functionality permitting structural modification of the message flow .

In scenario a flow engine can permit iterative improvement of message flow to be achieved. Flow engine can be a component of a message broker associated with a messaging architecture. Message flow can be continually improved utilizing real time metrics . In the scenario collected metrics can be employed as input parameters for driving message flow optimization. Metrics can include but is not limited to throughput individual node performance route performance metrics flow response time and the like. Metrics can be collected from engine logging resources external programs and the like.

Message flow can be received as input by flow engine . Engine can utilize metrics to determine appropriate structural changes. For instance when a message flow route performs below a threshold value engine can execute a programmatic restructuring. Changes to message flow can be persisted as an output from engine which can be an optimized flow . Optimized flow can be a structurally different message flow from message flow . Flow can be generated in real time in response to metrics . In one instance flow can be tested prior to deployment to determine performance change characteristics. In the instance when flow can performance surpasses message flow the message flow can be deployed.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. In one instance scenario can permit the modification of a different message flow. In the instance message flow can insert a reflective node into the different message flow permitting the different message flow to perform self modifications.

Broker server can be a hardware software component able to receive and transmit message . Server can include but is not limited to flow engine message queue message flow node library data store interface and the like. Server functionality can include but is not limited to message translation message validation message transformation message routing and the like. In one instance server can be a component of an IBM WEBSPHERE MESSAGE BROKER. That is server can be a component of an enterprise service bus.

Flow engine can be a hardware software component for altering message flow during runtime. Flow engine can include but is not limited to analytics engine flow manipulator auditing manager configuration settings and the like. Flow functionality can include but is not limited to flow manipulation flow analysis flow validation error handling flow message security and the like. In one instance flow engine can be a network element within a distributed computing environment.

Analytics engine can be a hardware software entity able to assess message flow performance. Engine functionality can include but is not limited to metric collection flow analytics and the like. Engine can perform flow analytics upon flow and or an optimized flow. In one instance engine can be an external component associated with a network computing environment.

Flow manipulator can be a hardware software component able to adjust flow during runtime in response to one or more conditions. Manipulator functionality can include but is not limited to node manipulation connection adjustment and the like. Node manipulation can include but is not limited to node insertion modification and deletion. Connection adjustment can include but is not limited to connection addition adjustment and removal. In one instance manipulator can select a node from node library when insertion of a node is necessary. In the instance pre configured node can be inserted into message flow .

Auditing manager can be a hardware software entity able to track message flow changes. Manager functionality can include but is not limited to logging audit reporting change history and the like. Manager tracking can include node level tracking flow revision tracking and the like. In one instance manager can permit changes to a message flow to be reverted.

Configuration settings can be a collection of settings for controlling the behavior of engine . Settings can include but is not limited to node identification values message flow identification executable code identifiers parameters metrics settings security settings business rules and the like. In one embodiment settings can permit reflective node to be linked with an executable code. For instance setting can allow a reflective node e.g. Ref A to be associated with an executable code e.g. Exe B and a set of parameters e.g. Param A .

Message queue can be a programmatic queue able to temporarily persist message and or message . Queue can receive message which can be stored for processing by message flow . Queue can be a queue associated with a message broker. Queue can include but is not limited to a stack queue heap and the like. Queue processing order can include but is not limited to Last In First Out LIFO First In First Out FIFO and the like.

Message flow can be a software construct able to process message . Message flow can include but is not limited to node reflective node and the like. Message flow logic can include but is not limited to Extended Structured Query Language ESQL JAVA Extensible Style sheet Language for Transformations XSLT and the like.

Node library can be a software artifact for storing node which can be utilized to dynamically modify message flow during runtime. Node can include but is not limited to a pre defined node e.g. filter node a user defined node and the like. Library can be automatically and or manually populated. In one instance library can be stored within data store and or an external repository.

Data store can be a hardware software entity capable of persisting executable code . Data store can include but is not limited to a Storage Area Network SAN Network Attached Storage NAS and the like. Data store can include but is not limited to a Relational Database Management System RDMS Object Oriented Database Management System OODBMS and the like.

Executable code can be a programmatic resource able to dynamically modify message flow . Code can be stored as programmatic instructions binary code and the like. Code can be associated with permissions access control lists ACL settings and the like. In one instance code can be stored within data store . In the instance code can be stored within a database structure e.g. table .

Interface can be a user interface for configuring resources within system . Interface can permit presentation and or modification of configuration settings message message flow reflective node . In one instance interface can be associated with an IBM WEBSPHERE BROKER message flow editor. In the instance interface can be an IBM WEBSPHERE MESSAGE BROKERS EXPLORER software. Interface can be a graphical user interface voice user interface text based user interface mixed mode interface and the like.

Application server can be a hardware software platform for executing application . Server can include but is not limited to application message queue not shown configuration settings and the like. Server can be a traditional and or proprietary execution environment. In one instance server can be an IBM WEBSPHERE APPLICATION SERVER.

Network can be a hardware software entity for communicatively linking system components in real time or near real time. Network can include but is not limited to wired technologies wireless technologies and the like. Network can be but is not limited to Local Area Network LAN Wide Area Network WAN Metropolitan Area Network MAN and the like.

Drawings presented herein are for illustrated purposes only and should not be construed to limit the invention in any regard. Server can be a component of a distributed computing environment networking computing environment cloud computing environment and the like. System architecture can include publish subscribe distributed publish subscribe and the like. In one instance server functionality can be a portion of a Web enabled Service. It should be appreciated that system can be associated with one or more protocols including but not limited to Simple Object Access Protocol SOAP Transport Control Protocol TCP Internet Protocol IP Hypertext Transport Protocol Extensible Markup Language Remote Procedure Call XML RPC and the like.

The flowchart and block diagrams in the illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

