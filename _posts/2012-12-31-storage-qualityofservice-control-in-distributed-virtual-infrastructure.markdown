---

title: Storage quality-of-service control in distributed virtual infrastructure
abstract: Techniques for delivering and measuring storage quality-of-service to virtual machines in a distributed virtual infrastructure. In one example, a method comprises the following steps. A controller obtains quality-of-service data from at least a portion of components of a distributed virtual infrastructure, wherein the components of the distributed virtual infrastructure comprise one or more storage units, one or more processing units, and one or more switches operatively coupled to form the distributed virtual infrastructure. The controller manages at least one input/output request throughout a path defined by at least one of the one or more processing units, at least one of the one or more switches, and at least one of the one or more storage units, based on at least a portion of the collected quality-of-service data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09274817&OS=09274817&RS=09274817
owner: EMC Corporation
number: 09274817
owner_city: Hopkinton
owner_country: US
publication_date: 20121231
---
The field relates to computing systems implemented via a distributed virtual infrastructure and more particularly to techniques for delivering and measuring storage quality of service to virtual machines in such a distributed virtual infrastructure.

In a distributed virtual infrastructure characterized by arrays of virtual storage devices logical units or LUNs being accessed by virtual computing devices virtual machines or VMs there is an inability to ensure quality of service QoS delivery from the storage arrays to the VMs.

Traditionally servers were attached to a storage network and LUNs were allocated to the servers. Examples of such storage networks include for example an Internet Small Computer System Interface iSCSI network a Fibre Channel FC network a Fibre Channel over Ethernet FCoE network and an Infiniband network. In these traditional systems the required network bandwidth and load on storage in terms of input output operations per second or IOPS was fairly consistent and predictable.

However in a virtualized environment issues associated with VM over subscription i.e. running too many VMs on too few physical processing devices VM abstraction i.e. not being able to easily determine which physical processing devices are hosting which VMs and VM explosion i.e. a rapid instantiation of a large number of VMs make it difficult to diagnose performance contention issues.

Embodiments of the invention provide techniques for delivering and measuring storage quality of service to virtual machines in a distributed virtual infrastructure.

In one embodiment a method comprises the following steps. A controller obtains quality of service data from at least a portion of components of a distributed virtual infrastructure wherein the components of the distributed virtual infrastructure comprise one or more storage units one or more processing units and one or more switches operatively coupled to form the distributed virtual infrastructure. The controller manages at least one input output request throughout a path defined by at least one of the one or more processing units at least one of the one or more switches and at least one of the one or more storage units based on at least a portion of the collected quality of service data.

In another embodiment a computer program product is provided which comprises a processor readable storage medium having encoded therein executable code of one or more software programs. The one or more software programs when executed by at least one processor implement steps of the above described method.

In yet another embodiment an apparatus comprises a memory and a processor operatively coupled to the memory and configured to perform steps of the above described method.

Advantageously illustrative embodiments described herein provide techniques for ensuring quality of service delivery from the storage arrays to the virtual machines in a distributed virtual infrastructure and thus improving the diagnosis of performance contention issues.

These and other features and advantages of the present invention will become more readily apparent from the accompanying drawings and the following detailed description.

Embodiments of the present invention will be described herein with reference to exemplary computing systems and data storage systems and associated servers computers storage units and devices and other processing devices. It is to be appreciated however that embodiments of the invention are not restricted to use with the particular illustrative system and device configurations shown. Moreover the phrases computing system and data storage system as used herein are intended to be broadly construed so as to encompass for example private or public cloud computing or storage systems as well as other types of systems comprising distributed virtual infrastructure. However a given embodiment may more generally comprise any arrangement of one or more processing devices.

As used herein the term cloud refers to a collective computing infrastructure that implements a cloud computing paradigm. For example as per the National Institute of Standards and Technology NIST Special Publication No. 800 145 cloud computing is a model for enabling ubiquitous convenient on demand network access to a shared pool of configurable computing resources e.g. networks servers storage applications and services that can be rapidly provisioned and released with minimal management effort or service provider interaction.

As used herein the phrase quality of service QoS refers to resource control mechanisms. For example QoS is the ability to provide different resource reservation priorities to different entities such as but not limited to applications users devices and data flows or to guarantee a certain level of performance to one or more of such entities. By way of example only a required bit rate delay jitter packet dropping probability and or bit error rate may be guaranteed.

Although system elements and are shown as separate elements in these elements or portions thereof may be implemented at least in part on a common processing platform. In other embodiments one or more of the system elements and may each be implemented on a separate processing platform such as the processing platform to be described below in conjunction with . For example the cloud infrastructure may be implemented on a first processing device of a first processing platform and the storage QoS controller may be implemented on a second processing device of a second processing platform. It is also to be understood that a given embodiment of the system may include multiple instances of the system elements and although only single instances of such elements are shown in the system diagram for clarity and simplicity of illustration.

As shown in the cloud infrastructure corresponding to in comprises virtual machines VMs . . . N implemented using a hypervisor . The hypervisor as mentioned above is an example of what is more generally referred to herein as virtualization infrastructure. The hypervisor runs on physical infrastructure e.g. such as may include CPUs and or storage devices in . The cloud infrastructure further comprises sets of applications . . . N running on respective ones of the virtual machines . . . N utilizing associated LUs under the control of the hypervisor .

Although only a single hypervisor is shown in the example of a given embodiment of cloud infrastructure configured in accordance with an embodiment of the invention may include multiple hypervisors each running on its own physical infrastructure. Portions of that physical infrastructure might be virtualized.

As is known virtual machines are logical processing elements that may be instantiated on one or more physical processing elements e.g. servers computers processing devices . That is a virtual machine generally refers to a software implementation of a machine i.e. a computer that executes programs in a manner similar to that of a physical machine. Thus different virtual machines can run different operating systems and multiple applications on the same physical computer. Virtualization is implemented by the hypervisor which as shown in is directly inserted on top of the computer hardware in order to allocate hardware resources of the physical computer physical infrastructure dynamically and transparently. The hypervisor affords the ability for multiple operating systems to run concurrently on a single physical computer and share hardware resources with each other. The hypervisor thus also manages disk I O scheduling associated with the workloads performed by each virtual machine.

An example of a commercially available hypervisor platform that may be used to implement portions of the cloud infrastructure in one or more embodiments of the invention is the VMware vSphere which may have an associated virtual infrastructure management system such as the VMware vCenter . The underlying physical infrastructure may comprise one or more distributed processing platforms that include storage products such as VNX and Symmetrix VMAX both commercially available from EMC Corporation of Hopkinton Mass. A variety of other storage products may be utilized to implement at least a portion of the cloud infrastructure .

An example of a processing platform on which the cloud infrastructure and or the storage QoS controller of may be implemented is processing platform shown in . The processing platform in this embodiment comprises at least a portion of the system and includes a plurality of servers denoted . . . P and a plurality of storage arrays . . . Q which communicate with one another over a network . One or more of the elements of system may therefore each run on one or more storage arrays servers computers or other processing platform elements each of which may be viewed as an example of what is more generally referred to herein as a processing device. As illustrated in such a device generally comprises at least one processor and an associated memory and implements one or more functional modules for controlling certain features of system . Again multiple elements or modules may be implemented by a single processing device in a given embodiment.

The server in the processing platform comprises a processor coupled to a memory . The processor may comprise a microprocessor a microcontroller an application specific integrated circuit ASIC a field programmable gate array FPGA or other type of processing circuitry as well as portions or combinations of such circuitry elements. The memory may be viewed as an example of what is more generally referred to herein as a computer program product. A computer program product comprises a processor readable storage medium which is a non transitory medium having encoded therein executable code of one or more software programs. Such a memory may comprise electronic memory such as random access memory RAM read only memory ROM or other types of memory in any combination. The computer program code when executed by a processing device such as the server causes the device to perform functions associated with one or more of the elements of system . One skilled in the art would be readily able to implement such software given the teachings provided herein. Other examples of computer program products embodying embodiments of the invention may include for example optical or magnetic disks.

Also included in the server is network interface circuitry which is used to interface the server with the network and other system components. Such circuitry may comprise conventional transceivers of a type well known in the art.

The other servers and the storage arrays of the processing platform are assumed to be configured in a manner similar to that shown for server in the figure.

The processing platform shown in may comprise additional known components such as batch processing systems parallel processing systems physical machines virtual machines virtual switches storage volumes logical units etc. Again the particular processing platform shown in is presented by way of example only and system of may include additional or alternative processing platforms as well as numerous distinct processing platforms in any combination.

Also numerous other arrangements of servers computers storage devices or other components are possible in system . Such components can communicate with other elements of the system over any type of network such as a wide area network WAN a local area network LAN a satellite network a telephone or cable network a storage network e.g. FC a converged network e.g. FCoE or Infiniband or various portions or combinations of these and other types of networks.

Illustrative details of the storage QoS controller as well as operations of elements of controller will now be described with reference to .

More specifically the control system comprises a logical layer a virtual layer and a physical layer . The logical layer comprises a storage QoS controller which corresponds to the storage QoS controller in . The controller inter alia delivers and measures storage QoS from storage arrays to VMs in the system . The virtual layer comprises VMs software defined SD switches and virtual storage entities LUNs hosted by storage arrays . The physical layer comprises a plurality of network switches including an Ethernet switch an FC switch an FCoE switch and an Infiniband switch . The physical layer also comprises servers and storage arrays . It is to be appreciated that the virtual layer and the physical layer may comprise other components not expressly shown in for example but not limited to switches for other network protocols and processing devices other than servers and storage arrays.

Furthermore it is to be appreciated that in one or more embodiments the system may comprise any number not just the number illustrated in of severs with virtual hypervisors deployed on the servers and VMs deployed across hypervisors via server virtualization . The system may also comprise any number not just the number illustrated in of storage arrays with virtual storage entities e.g. LUNs allocated on the storage arrays via storage virtualization . Further the system may comprise any number not just the number illustrated in of switches through that connect servers and storage arrays including but not limited to Ethernet FC FCoE and Infiniband. The switches through are abstracted to software defined switches by applying software defined networking SDN or network virtualization techniques. Still further the storage QoS controller manages QoS control over the other components servers VMs storage arrays LUNs switches in system based on for example knowledge of QoS capacities and real time I O traffic awareness.

In one embodiment the control system is part of a data center whereby customers access computing and or storage services provided via resources such as the servers VMs storage arrays LUNs and switches of system .

As shown storage QoS controller comprises several main modules an integrated QoS array control module a network QoS control module a storage QoS hypervisor control module a QoS measurement and analysis module a security module a virtual volume module and an access layer virtualization module . It is to be appreciated that the controller may comprise other modules and functions not expressly shown in as well as comprise a subset of the modules and functions that are expressly shown in .

The integrated QoS array control module operates on the virtual storage entities and the storage arrays . More specifically the module collects QoS information and monitors usage from individual storage arrays and is also used to guide storage provisioning considering QoS besides capacity . In one embodiment the module is implemented as a thin layer of storage management e.g. integrate with UniSphere Remote or Navisphere QoS Manager commercially available from EMC Corporation of Hopkinton Mass. with which virtual hypervisors interact for storage related tasks instead of directly with individuals storage arrays.

The network QoS control module operates on the switches and through . More specifically the module applies the SDN software defined network methodology to various types of storage networks generalization and optimization by employing OpenFlow type technologies as a basis of integrated network resource scheduling. Additionally in accordance with embodiments of the invention existing OpenFlow can be improved to support priority based optimization for iSCSI NFS Network File System CIFS Common Internet File System data flow natively recognizing . Besides separation of the control and data planes SDN is used as a scheduling mechanism so the network paths can be recomputed on the fly thus avoiding or at least reducing packet loss or congestion.

The storage QoS hypervisor control module operates on the VMs and the servers . More specifically the module implements QoS management for virtual hypervisors such as for example VMware Storage I O Control SIOC Network I O Control NIOC and Powerpath commercially available from EMC Corporation of Hopkinton Mass. Moreover virtual adapters can be implemented in accordance with module to achieve both multi tenancy and performance efficiencies.

The QoS measurement and analysis module allows VMs to issue a group of collaborating I O workloads to fully understand and exploit the I O scheduling characteristics of the storage arrays and hypervisors and assist the development and improvement of storage products with respect to multi tenancy scope. Information generated by module can serve as a feedback to storage servers for further improvement. With the identified knowledge of the I O scheduler the system can measure I O service level agreement SLA compliance of the storage arrays in a fine grained manner. The module can also perform trend and root cause analysis as well as fault management operations. The module operates across all components of the control system .

The security module prevents security attacks against the controller and in general the control system . For example the security module prevents attacks against QoS and protects targets such as network QoS control module and its functions. The security module also provides protections for the other modules in the controller and the components of the control system .

The virtual volume module operates on the VMs the SD switches the virtual storage entities the servers and the storage arrays . More specifically the module provides the VMs in the control system with visibility to the storage arrays . The module may comprise features which introduce LUN sub LUN type mapping for VMFS VMDK Virtual Machine File System Virtual Machine Disk so that the VMDK is offloaded to one or more storage arrays and can be managed by a VNX system directly.

The access layer virtualization module operates on the VMs the SD switches and the servers . More specifically the module provides the VMs in the control system with visibility to other components in the control system e.g. network switches through SD switches etc. The module can comprise features such as but not limited to VN TagNEPA Virtual Ethernet Port Aggregator NPIV N Port ID Virtualization VNPort to bring VM visibility to network switches and storage arrays.

Given the illustrative system architecture in various methodologies employed therein are now described in the context of .

Accordingly as depicted in step of methodology the storage arrays report QoS status to the integrated QoS array controller A which then updates the QoS knowledge database B in step .

It is to be appreciated that while methodology illustrates QoS data being reported from the storage array to the controller the other components of the control system including but not limited to the various switches and VMs are configured to report QoS data to the controller for storage and use in managing requests sent throughout the system.

In step one or more VMs request provisioning of one or more storage arrays from the integrated QoS array controller A wherein the provisioning request includes one or more QoS requirements. There are several sets of metrics that can be used for QoS requirements. For example the classical set is comprised of throughput input output operations per second or TOPS response time milliseconds or ms and bandwidth Megabytes per second or MB s . An email application may have a QoS target response time less than 30 ms or a backup application may have another bandwidth of greater than or equal to 20 MB s. Another example metric set is more business oriented for example by claiming a given I O packet is for Oracle logs or Microsoft Exchange.

The integrated QoS array controller A then checks in step with the QoS knowledge database B for the QoS availability of the storage arrays based on the QoS status reported and stored in the database.

In step the QoS knowledge database B replies to the integrated QoS array controller A with the best fit storage array s that can accommodate the provisioning request from the one or more VMs i.e. the storage array s that can best meet or exceed the QoS requirements specified by the one or more VMs . The integrated QoS array controller A then provisions the storage request in step using the one or more selected storage arrays and informs the VM of the provisioning result in step .

A provisioning example is as follows. The controller A sends a request e.g. create a new LUN with thick provisioning with 100 GB Gigabytes reserved space and with I O response time less than or equal to 40 ms desired directly to a storage array while no other modules in system would necessarily be involved. The request is sent via any type of interfaces provided by storage array e.g. REST representational state transfer CLI command line interface SOAP simple object access protocol etc. The new LUN will be used by VM directly or indirectly via a hypervisor on a server .

The SD switch in step recognizes that the read request is to a particular storage array and relays the request with a high priority status to the storage array . It is to be understood that the priority status policy or rule is set to switch by controller which will be enforced by switch until it is changed by controller again.

In step the storage array encapsulates the data requested by the read request with a given storage protocol header e.g. iSCSI and in step also encapsulates the data with an identifier of the requesting VM e.g. VN Tag which is managed by the access layer virtualization module or by the virtual volume module when a network is not involved . The encapsulated data is sent from the storage array to the SD switch .

In step the SD switch recognizes the storage protocol header and places the data into a group with a high priority status. Likewise in step the SD switch recognizes the requesting VM identifier.

In step the SD switch consults with the integrated QoS network controller to determine the corresponding service level associated with the particular VM identified by the recognized VM identifier. Note that if the SD switch has previously determined the service level associated with the VM e.g. it may have recently processed another read request for this particular VM this information can be cached at the SD switch . As such the SD switch would not have to perform step if it has the information already cached. The SD switch in step then schedules delivery of the data and then delivers it based on the appropriate service level determined in step .

Advantageously as illustratively explained herein in accordance with one or more embodiments of the invention the integrated storage QoS controller provides a feasible and practical way to ensure storage QoS delivery in data processing systems such as data centers. The power of storage arrays is maximized by aggregating and consolidating QoS resources from individual arrays. VMs can run in an isolated manner with performance assurance with visibility to networks and storage arrays via technologies like VN Tag NPIV vVol . Software defined networking methodology is applied to all types of networks to perform unified management with prioritized optimization for storage protocols e.g. iSCSI NFS based on protocol recognition. With QoS measurement and analysis it is possible to exploit I O scheduling characteristics locate problems bottlenecks and prevent attacks against QoS e.g. side channel .

The storage QoS controller improves efficiency to meet demands. It obtains more information about the infrastructure. The controller is a tool that focuses on optimization besides allocation with insight into providers and consumers of those resources and their relationships. Also both real time and historical information is used to manage dynamic resources such as IOPS and network bandwidth. The controller traces connectivity from VMs to storage providing end to end visibility from VMs to hosts to network to storage as well as top to bottom visibility within the virtualization host from guest operating system OS to VM to virtual network interface cards NICs host bus adaptors HBAs and switches to the physical host server.

Furthermore the storage QoS controller embodiments advantageously provide overall QoS control over components e.g. VMs servers switches storage arrays LUNs along the entire path of an I O request I O path based on for example QoS status or knowledge of storage arrays as provider networks as logistics and hypervisors as retailer . It is to be appreciated that data delivery with QoS assurance cannot be achieved if QoS control is done in isolation as it is done in existing QoS approaches but can only be assured when QoS control is a collaborative process throughout the entirety of the I O path as is done in embodiments of the invention.

It should again be emphasized that the above described embodiments of the invention are presented for purposes of illustration only. Many variations may be made in the particular arrangements shown. For example although described in the context of particular system and device configurations the techniques are applicable to a wide variety of other types of information processing systems computing systems data storage systems processing devices and distributed virtual infrastructure arrangements. In addition any simplifying assumptions made above in the course of describing the illustrative embodiments should also be viewed as exemplary rather than as requirements or limitations of the invention. Numerous other alternative embodiments within the scope of the appended claims will be readily apparent to those skilled in the art.

