---

title: Resource tracking
abstract: Clients may subscribe to resources for the purpose of receiving notifications of changes in the resource (e.g., a file is added to a shared folder). Storing subscriptions within persistent storage provides data security in the event of a service failure, at the cost of high latency in accessing subscription data. An efficient method for tracking a resource is provided herein. A subscription service creates subscriptions and monitors resources for a client. Upon a subscribed resource change, a notification service stores a notification of the change into a queue associated with the client. Efficient resource tracking is achieved because notification and subscription data is stored in low latency soft memory. The notification service is configured to detect a failure in the notification service and/or subscription service. In the event a service fails, the client provides a recovery mechanism by resubscribing to resources with which the client has an interest.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09413588&OS=09413588&RS=09413588
owner: Microsoft Technology Licensing, LLC
number: 09413588
owner_city: Redmond
owner_country: US
publication_date: 20121210
---
This application is a continuation of U.S. application Ser. No. 12 245 972 filed on Oct. 6 2008 entitled RESOURCE TRACKING at least some of which may be incorporated herein.

Many clients utilize information provided by remote resources. For example a client e.g. cell phone personal computer PDA web browser etc. may express interest in a remote resource e.g. e mail service shared folder social networking profile etc. by creating a subscription to the remote resource within a cloud computing environment. When the state of the remote resource changes a notification is provided to clients subscribed to the remote resource. The notification may inform the client to update information stored on the client relating to the remote resource. For example a user subscribes through a PDA to a work file folder. When the contents of the work file folder change the PDA is notified of the change. This allows the PDA to take appropriate action such as initiating synchronization with the work file folder. A common approach for managing subscriptions is to store subscription information in persistent stores e.g. a database . This allows recovery of subscription data if a failure occurs with a service facilitating subscriptions and or notifications.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

As more resource become available for clients to utilize an efficient system for managing information between the client and the resource is desirable. Common subscription services allow a client to express interest in a specified resource as a subscription. The subscription service may monitor the subscribed resource for changes. A change in a resource may comprise an adding of a new file to shared folder or an update to a profile within a social network for example. Once a change in state of the resource occurs the subscription service may inform subscribing clients of the change e.g. the subscription service invokes a notification service to provide a notification of the change to the client . Subscriptions mitigate computing resource because a client receives information regarding subscribed resource instead of all available resources. Without subscriptions a service providing information of all available resource to all available clients could be overwhelmed as more clients and resources participate with the service.

Current subscription services and or notification services store subscription and or notification data within persistent storage e.g. a database stored on a hard disk . Storing data in persistent storage is a way to protect the data in the event a service consuming the data fails. The data in persistent storage may be unaffected by the service failing e.g. the runtime fails the server reboots etc. because it is not stored in volatile memory. A drawback to using persistent storage is the high latency of persistent storage. In contrast soft memory e.g. RAM volatile memory etc. has a low latency but is susceptible to data loss upon a service failure. The low latency allows for an efficient system to manage a large number of services resources and or resource changes.

An alternative technique for tracking a resource is provided herein. A notification service and a subscription service are utilized to accomplish resource tracking. The notification service creates a queue corresponding to the client. When a message is received regarding information about queue ownership the notification service stores a notification within the queue about the information. It may be appreciated that information about queue ownership may comprise but is not limited to a change in a subscribed resource a service failure a peer to peer invite and or any other information associated with the client services and or resources.

The subscription service provides a mechanism for a client to subscribe to a resource. The subscription service monitors the resource and distributes information to the notification service of resource changes. The client is configured to periodically send requests to the notification service to extract notifications from the queue associated with the client. The client may access the notification service and or subscription service through one or more protocols e.g. a generic protocol HTTP TPC etc. . Soft memory is used to store data associated with the notification service and or the subscription service e.g. queue data subscription data etc. . Clients can efficiently track changes to resources because data may be accessed e.g. notifications created and stored in memory notifications extracted from memory subscriptions created and stored in memory etc. within the low latency soft memory as compared with high latency persistent storage.

To overcome issues with recovering from a failure of the notifications service and or the subscription service the client is configured to store relevant information e.g. what resources are subscribed to etc. . This allows the client to resubscribe to resources in the event a service fails. To aid in detecting a failure the notification service is configured with a current notification service identifier. If the notification service fails and restarts a new current notification service identifier is assigned to the notification service. The notification service can detect a failure by comparing the current notification service identifier stored at notification service with an identifier comprised within a request from the client e.g. client sends a request with an identifier indentifying the notification service . If the identifier and the current notification service identifier do not match then a failure is determined and the queue is assumed to be lost due to being stored in soft memory. To recover the notification service creates a new queue and instructs the client to resubscribe to resources. The notification service is further configured to provide a notification to the client to resubscribe to resources if the subscription service fails.

Storing notification and subscription data in soft memory allows for efficient management of tracking a resource and providing notifications due to the low latency of soft memory. As a safeguard to recovering from data loss in soft memory clients store some recovery information so that the client can restore subscriptions and receive lost notifications due to a failure.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are illustrated in block diagram form in order to facilitate describing the claimed subject matter.

A growing number of resources are available with which clients may interact. For example a cloud computing environment provides computing services that clients may access. A client may be a web browser a cell phone a personal computer and or any other entity that is capable of communicating with the services e.g. a resource available within a mesh . Examples of a resource e.g. a service may be a shared file folder a profile in a social networking utility a shared calendar and or any other service available with which a client may interact. One way a client may interact with a resource is through subscribing to the resource. By subscribing to the resource the client is notified of changes to the resource for example a file is added to a file folder or a profile is updated on a social networking utility.

One or more services may be used to facilitate resource subscriptions and notifications of changes. These services may be spread across multiple separate servers. Currently when a client expresses interest in a resource e.g. the client sends a request for a subscription service to create a subscription to the resource a service may store the subscription data and or notifications within persistent storage e.g. a database stored on a hard disk . This allows the service to recover from service failures without data loss. One drawback is that persistent storage has a high latency which may diminish the efficiency of the service as more clients and resources participate.

As provided herein a resource may be efficiently track for a client through a notification service and a subscription service. The subscription service manages subscriptions for multiple clients with multiple resource interests. A subscription may comprise a reference to a queue associated with the client that is to be notified of resource changes and a URL associated with the resource to be monitored. The notification service facilitates the creation storage and delivery of notifications to clients. Notifications may comprise information about a change in a subscribed resource a service failure etc.

The subscription service is configured to create a subscription for a client that expresses interest in a resource. The subscription service monitors the resource for changes. Upon a change in the resource the subscription service distributes information of the resource change to the notification service. The subscription service may instruct the notification service into which queue to store a notification of the resource change. Subscriptions are managed in an efficient manner because the client is not overwhelmed with notifications of resources changes with which the client is not interested. Secondly the subscription service may associate a time to live with resources and clients. If the time to live expires due to inactivity e.g. falls below a predetermined threshold then the resource or client is removed therefore the subscription service is not burdened by outdated subscriptions.

The notification service is configured to create a queue associated with a client upon request from the client. The notification service stores within the queue information regarding the ownership of the queue. Information regarding the ownership of the queue may comprise a change in a subscribed resource a service failure a peer to peer invite and or other information associated with the client services and or resources. For example a subscription service may detect a subscribed resource has changed. The subscription service informs the notification service of the resource change and instructs the notification service into which queue to store a notification. The notification service creates a notification of the change and stores the notification in the queue associated with the client subscribed to the resource. The client is then able to retrieve the notification from the queue and take further appropriate action.

A client may be configured to store some information regarding subscription and notification data. This information may be used as a recovery mechanism. In case a service fails the client has enough information to resubscribe to resources with which the client is interested. The client stores recovery information because the notification service data and the subscription service data is stored within volatile memory to mitigate latency issues with persistent storage.

The client may be further configured to send a request to the notification service. The request may comprise an instruction to create a queue an instruction to extract a notification from the queue an identifier corresponding to a notification service identifier and or a queue identifier corresponding to a queue associated with the client. A request to extract a notification from the queue provides a delivery mechanism for a client to receive information regarding resource changes service failures and or other relevant information to queue ownership.

The client may also send a request to the subscription service the request comprising a resource that is to be monitored and a queue identifier associated with a queue that is to be notified of changes to the monitored resource. The request provides the subscription service with information about which resource to monitor and where to send information of changes to the monitored resource.

Because notification data and subscription data are stored in volatile memory the notification service may be configured to determine a notification service failure and or a subscription service failure. This allows recovery measures to be taken if a queue and or subscriptions are lost. To detect a subscription service failure the notification service is configured to watch for a loss in subscriptions or the subscription service. The notification service may be further configured to receive messages of subscription data loss. Upon receiving a message that the subscription service failed the notification service stores a notification into one or more queues associated with clients associated with the subscription service e.g. the subscription service hosted subscriptions for the client . The notification may comprise a message that the subscription service failed and an instruction for the client to resubscribe to resources with which the client is interested.

To accomplish determining a notification service failure the notification service comprises a current notification service identifier. The current notification service identifier may be a distinct value associated with a particular runtime instance of the notification service. A new value may be assigned to the current notification service identifier if the notification service fails and restarts. A request from a client comprises an identifier corresponding to the current notification service identifier. The notification service is able to detect a failure if the identifier from the request does not match the current notification service identifier.

For example when a notification service starts up a new value is assigned to a current notification service identifier. If the notification service fails and restarts a new value is assigned to the current notification service identifier. When the client sends a request with an identifier the notification service determines whether values of the identifier and the current notification service identifier match. If the values match then a notification service failure has not occurred. If the values do not match then the notification service may assume a previous failure and restart e.g. a new value was assigned to the current notification service identifier .

Upon making a determination the values match e.g. the notification service has not failed the notification service process the request. If the values do not match the notification service assumes a notification service failure and the queue was lost. The notification service creates a new queue with a new queue identifier. The notification service stores a notification into the new queue. The notification may comprise a message that the notification service failed an instruction to resubscribe to one or more resources the new queue identifier and or the current notification service identifier. Upon receiving the notification the client refreshes all or substantially all its state since the lost queue could have comprised one or more notifications of change. Additionally the client may resubscribe to resources because the client locally stores some subscription data so that the new queue can keep track of these subscriptions going forward.

One embodiment of tracking a resource is illustrated by an exemplary method in . At the method begins. At a subscription regarding a resource to be monitored for changes is obtained. For example a client may express an interest in a resource. The client sends a request to create a subscription to the resource to a subscription service. The request may comprise information regarding the resource e.g. a URL to resource and information regarding a destination for the subscription service to distribute messages of resources change to e.g. a queue identifier a notification service identifier etc. . The subscription service may store the subscription in a list of subscriptions. The subscription service may use the list of subscriptions to determine which resources to monitor and where to distribute information regarding resource changes.

At information regarding a change in status of the resource is provided to a notification service. Once the subscription is obtained the resource may be monitored for changes e.g. a subscription service listens for messages that a resource changed the subscription service check a resource to see if there is a change etc. . Upon a detection of a resource change the subscription service sends information of the change to the notification service. The subscription service may send the information periodically when a change of a resource is detected and or arbitrarily. The information may be sent from the subscription service monitoring the resource to the notification service.

At into which of a plurality of queues a notification regarding the change of status of the resource is to be stored is specified to the notification service. The notification service is informed which queue to store a notification because the notification service may host multiple queues corresponding to multiple clients. When a resource changes the notification service notifies clients that are subscribed to the changed resource not the clients without subscriptions. For example a subscription service may send a message to the notification service to store a notification within one or more queues corresponding to clients subscribed to a resource that changed. The message may comprise one or more queue identifiers identifying the queues within which a notification is to be stored.

At the notification service stores the notification of resource status change into the specified queue. The notification service may add additional information into the notification. At upon receiving a request from a client the notification is extracted from the specified queue corresponding to the client. The queue corresponding to the client may have been created in response to the client requesting the notification service to create a queue. In response to the request the notification service may have created a queue with a queue identifier. Further requests such as may comprise the queue identifier and or an identifier associated with the notification service. This allows the notification service to extract messages from the appropriate queue that corresponds to the client making the request. The queue identifier allows the notification service to store the notification in the appropriate queue even though the notification service may host multiple queues for multiple clients.

The client may periodically or arbitrarily send requests to the notification service. The request may comprise an instruction to create a queue an instruction to extract a notification from the queue an identifier corresponding to a notification service identifier and or a queue identifier corresponding to a queue associated with the client. The client is able to efficiently track subscribed resources because the client can request notifications to be extracted from the appropriate queue. At the method ends.

A second embodiment of tracking a resource is illustrated by an exemplary method in . At a client requests a notification service to create a queue. At the notification service creates the queue in soft memory e.g. volatile RAM memory and informs the client of the queue and a queue identifier. The queue identifier is used by the client and a subscription service when communicating with the notification service. For example at the client periodically checks the queue for notifications. When checking the queue the client may send a request comprising the queue identifier and or other information to the notification service. In another example the subscription service send a message to the notification service which may comprise the queue identifier used to identify which queue within which to store a notification.

At the client requests the subscription service to create a subscription to a resource that is to be monitored. The request may comprise information regarding the queue e.g. a queue identifier that is to be informed of changes to the resource and or information regarding the resource e.g. a URL of the resource . The information regarding the resource is sent because the subscription service is able to distinguish the resource from a multitude of available resources. The information regarding the queue is sent because the notification service may host a plurality of queue for multiple clients. Notifications of a change in subscribed resource may be sent to the clients subscribing to the resource e.g. a notification stored in the corresponding queue with no notification sent to non subscribing clients.

At the subscription service creates in soft memory the subscription to the resource . The subscription service may maintain a subscription lists comprising one or more subscriptions. The subscription may be stored within the list. The subscription may comprise the information regarding the resource and the queue . At the subscription service monitors the resource for changes. Upon a change in the resource the subscription service informs the notification service of the change. The subscription service may send information of the change and or the information of which queue to store a notification within. It may be appreciated that the subscription service may also provide information of a failure of a subscription a failure of the subscription service and or other relevant information to the notification service. The subscription service continues monitoring the resource and or other subscribed resources.

At the notification service creates a notification of the change in the resource in queue . This allows the client to check the queue to the notification regarding the change in resource . It may be appreciated that the notification service may provide additional information and or additional notification comprising a service failure message an identifier a peer to peer request and or other relevant information regarding the ownership of the queue .

A client may be one of a plurality of clients that are associated with the system . Client send a request to the notification service the request comprising an instruction to create a queue associated with client . The notification service creates a queue associated with client . The notification service may associate a TTL time to live value the queue wherein if the TTL times out then the queue and or the client are removed from then notification service . This allows the notification service to remove expired client information to improve efficiency.

Once the queue is created the notification service assigns a queue identifier with the queue and notifies the client of the queue identifier and or an identifier for the client to use when sending requests to the notification service . The client may periodically send a request to the notification service . The request may comprise the identifier associated with the notification service the queue identifier and or an instruction e.g. a instruction for the notficiation service to remove a notification such as notification from the queue .

The client may send a request to the subscription service to create a subscription to one or more resources e.g. a subscription to a resource x and a subscription to a resource y . Resource x and resource y may be two of a plurality of available resources that the client may subscribe to. The client may send the queue identifier corresponding to queue and instruct the subscription service to inform the queue of changes to the subscribed resources. For example the subscription service may create a subscription entry and a subscription entry with corresponding TTL time to live values. Subscription entry may correspond to queue and resource x . Subscription entry may correspond to queue and resource y . The subscription service may monitor resource x and monitor resource y for changes.

Upon detecting a change in one of the monitored resources the subscription service sends information to the notification service of a change in the monitored resource. The information may comprise information regarding the change in the monitored resource and which queue to store a notification within. The subscription service may also send information regarding a failure in a subscription and or subscription service. Once the notification service receives information the notification stores a notification within the appropriate queue corresponding to a client that subscribed to the resource.

Client may comprise monitored resources information . The monitored resources information may be used by the client for recovery purposes. For example if the notification service determines a failure of the notification service and or the subscription service then the client may receive a notification of a failure and an instruction to resubscribe to resources the client is interested in e.g. resource x and resource y . If the client receives a notification of a notification service failure e.g. a queue loss then the client refreshes all its state since the lost queue could have comprised one or more notifications of change. Additionally the client may resubscribe to resource x and resource y because the client locally stores some subscription data e.g. the monitored resources information so that the new queue can keep track of these subscriptions going forward.

The subscription service creates subscriptions corresponding to a client and a resource. For example a subscription comprises a reference to a work phone list resources accessible within a cloud computing environment. The subscription further comprises a reference to queue since queue is to be notified when the work phone list resource changes. Therefore client will receive notifications of resource changes through the notifications within queue . The subscription service monitors the work phone list for changes e.g. a new contact is added to the phone list . Upon a change in the work phone list resource the subscription service informs the notification service to stores a notification within queue about the new contact.

In another example client requests the notification service to create queue . The client next request the subscription service to create a subscription to a stock quotes resource within the cloud computing environment. The subscription service monitors the stock quotes resource for changes. Upon noticing a change e.g. an alert is available that stock X is up the subscription service informs the notification service to stores a notification within queue that stock X is up. The next time client checks queue for notifications stock X is up may be extracted.

The client sends a request to a subscription service . The request instructs the subscription service to create a subscription to a resource. The subscription service creates the subscription S and sends a message that the subscription S was created. The notification service watches for a loss of the subscription S. The client receives a notification that the subscription S was created.

At a failure occurs of the subscription service . A failure may occur because the subscription service runtime fails a server hosting the subscription service fails and or any other reason. At the notification service determines that the subscription service failed. The notification service stores a notification in queue Q that subscription S was lost. The client sends a request to the notification service to extract one or more notifications within the queue Q. The client receives the notification that subscription S was lost.

At a subscription service is restarted. To recover from the loss of subscription S the client sends a request for the subscription service to create a new subscription S . The subscription service creates the new subscription S and sends a message that the subscription S was created. The notification service watches for a loss of the new subscription S . The client receives a notification that the new subscription S was created.

A client sends a request to the notification service . The request instructs the notification service to create a queue. The notification service creates a queue Q. The queue Q is configured with a queue identifier QC 1 of 1. When a queue is created it is assigned a queue identifier that may be distinctive from other queue identifiers.

The notification service stores a notification comprising a message that queue Q was created the queue identifier to be used by the client when referencing the queue Q associated with the client and or an identifier to be used when sending requests to the notification service the identifier correlating to the current notification service identifier. The client receives the notification . The client may be configured to check the queue Q for notifications by sending a request to the notification service . The request may comprise an instruction for the notification service to extract a notification from the queue Q the identifier and or the queue identifier. For example the client sends a request to the notification service . Upon receiving the request the notification service determines that there are no notifications within the queue Q. The notification service informs the client that the queue Q is empty.

When the notification service receives a request from the client the notification service extracts the identifier. The notification service compares the identifier with the current notification service identifier. This allows the notification service to determine if there has been a notification service failure. If a failure occurs it may be assumed that the notification service has restarted and was assigned a new value for the current notification service identifier. Because the client does not have information regarding the new value yet the client will send with the next request the old value as the identifier. If the value of the identifier and the new value of the current notification service identifier do not match then it may be assumed that the notification service failed and restarted.

For example the notification service fails at . Once the notification service restarts a new value NSI 231 is assigned to the current notification service identifier. When the client sends a request to check the queue Q for notifications the notification service makes a determination at that the identifier sent with the request NSI 100 does not match the current notification service identifier NSI 231 . Because a mismatch was determined the notification service creates a new queue Q with a queue identifier QC 2 . The notification service stores a notification comprising information that queue Q was lost Q was created the queue identifier QC 2 that is to be used to reference which queue to extract notifications from and or an identifier corresponding to the value of the current notification service identifier.

The client receives the notification . Upon receiving the notification the client refreshes all or substantially all its state since the queue Q was lost and could have comprised one or more notifications of change. Additionally the client may resubscribe to resources because the client locally stores some subscription data so that the new queue Q can keep track of these subscriptions going forward.

Still another embodiment involves a computer readable medium comprising processor executable instructions configured to implement one or more of the techniques presented herein. An exemplary computer readable medium that may be devised in these ways is illustrated in wherein the implementation comprises a computer readable medium e.g. a CD R DVD R or a platter of a hard disk drive on which is encoded computer readable data . This computer readable data in turn comprises a set of computer instructions configured to operate according to one or more of the principles set forth herein. In one such embodiment the processor executable instructions may be configured to perform a method such as the exemplary method of for example. In another such embodiment the processor executable instructions may be configured to implement a system such as the exemplary system of for example. Many such computer readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

