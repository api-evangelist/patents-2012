---

title: Method for multiple projector display using a GPU frame buffer
abstract: A primary image is transformed into secondary images for projection, via first and second frame buffers and view projection matrixes. To do so, a first image is loaded into the first frame buffer. A calibration data set, including the view projection matrixes, is loaded into an application. The matrixes are operable to divide and transform a primary image into secondary images that can be projected in an overlapping manner onto a projection screen, providing a corrected reconstruction of the primary image. The first image is rendered from the first frame buffer into the second images, by using the application to apply the calibration data set. The second images are loaded into a second frame buffer, which can be coupled to the video projectors.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09035969&OS=09035969&RS=09035969
owner: Seiko Epson Corporation
number: 09035969
owner_city: Tokyo
owner_country: JP
publication_date: 20121129
---
The display hardware technology in a typical computer video card continues to develop at a rapid rate. Such developments have resulted in increased 2D and 3D graphics processing power large onboard memories for handling high resolution content and support for multiple display outputs. With lower device costs today s video hardware coupled with multiple display devices is becoming common. Tight driver integration within operating systems to support said video hardware has allowed the user to access many desktops on multiple screens. This provides several work surfaces to place and operate with applications.

Multiple monitors attached to a video card may be grouped physically and then logically within a computer operating system to define a virtual desktop. The combined resolutions of the multiple displays form a virtual desktop environment providing large views of the operating system windows. Some display hardware vendors have provided as many as 6 outputs on a single graphics card offering many monitor display configurations.

Using projectors instead of monitors as the display output device it is possible to create a seamless display for the large virtual desktop content. Ideally such a system would include an easy calibration and processing mechanism to correct for the overlapping regions among the projectors outputs.

A method is described to provide automatic and seamless blending of the output from multiple overlapping video projectors to form a cohesive seamless display using a graphics pipeline enabled with a modifiable render buffer prior to final video signal output to a set of connected projectors. This method extends an existing and previously disclosed projector platform and the scope of this document assumes a familiarity with that and related multi projector display technologies in this area including EPSON s view projection matrix.

Other objects and attainments together with a fuller understanding of the invention will become apparent and appreciated by referring to the following description and claims taken in conjunction with the accompanying drawings.

In some embodiments a method for preparing an image for projection is provided. A first image is loaded into a first frame buffer. A calibration data set is loaded into an application. The calibration data set includes a plurality of view projection matrixes. The view projection matrixes are operable to divide and transform a primary image into a plurality of secondary images. The secondary images are projected by respective video projectors in an overlapping manner onto a projection screen thereby providing a corrected reconstruction of the primary image.

The first image is rendered from the first frame buffer into a plurality of second images. The rendering is accomplished by using the application to apply the calibration data set. Each of the second images corresponds to a respective one of the video projectors. The second images are loaded into a second frame buffer. The second frame buffer is configured to couple to the respective video projectors.

In some embodiments a non transient tangible computer readable medium is provided. The medium has thereupon instructions for a computer. The computer loads a first image into a first frame buffer. A calibration data set is loaded into an application. The calibration data set includes a plurality of view projection matrixes. The view projection matrixes are operable to transform a primary image into a plurality of secondary images that are projected by respective video projectors in an overlapping manner onto a projection screen as a corrected reconstruction of the primary image.

The first image is rendered from the first frame buffer into a plurality of second images. This rendering is by using the application and the calibration data set to divide and transform the first image into the plurality of second images. Each of the second images corresponds to a respective one of the video projectors. The second images are loaded into a second frame buffer. The second frame buffer is configured to couple to the respective video projectors.

In some embodiments a system for projecting an image is provided. The system includes a plurality of video projectors a first frame buffer a second frame buffer a memory and a computer. The video projectors are arranged to project respective images in an overlapping manner onto a projection screen. The computer is coupled to the first frame buffer the second frame buffer and the memory. The second frame buffer is coupled to the video projectors. The computer is programmed to load a first image into the first frame buffer. A calibration data set is loaded into the memory. The calibration data set includes a plurality of view projection matrixes. The view projection matrixes are operable to divide and transform a primary image into a plurality of secondary images that are projected by the video projectors in an overlapping manner onto a projection screen. Thereby a corrected reconstruction of the primary image is provided.

The first image is rendered from the first frame buffer into a plurality of second images as a result of applying the calibration data set. Each of the second images corresponds to a respective one of the video projectors. The second images are loaded into the second frame buffer for projection.

Other aspects and advantages of the embodiments will become apparent from the following detailed description taken in conjunction with the accompanying drawings which illustrate by way of example the principles of the described embodiments.

Detailed illustrative embodiments are disclosed herein. However specific functional details disclosed herein are merely representative for purposes of describing embodiments. Embodiments may however be embodied in many alternate forms and should not be construed as limited to only the embodiments set forth herein.

It should be understood that although the terms first second etc. may be used herein to describe various steps or calculations these steps or calculations should not be limited by these terms. These terms are only used to distinguish one step or calculation from another. For example a first calculation could be termed a second calculation and similarly a second step could be termed a first step without departing from the scope of this disclosure. As used herein the term and or and the symbol includes any and all combinations of one or more of the associated listed items.

As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises comprising includes and or including when used herein specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof. Therefore the terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting.

It should also be noted that in some alternative implementations the functions acts noted may occur out of the order noted in the figures. For example two figures shown in succession may in fact be executed substantially concurrently or may sometimes be executed in the reverse order depending upon the functionality acts involved.

In various embodiments an image from a first frame buffer is divided into multiple regions and transformed into a plurality of images loaded into a second frame buffer as a result of applying a calibration data set with a plurality of view projection matrixes. Multiple video projectors are aimed at a projection screen. Each video projector projects a respective one of the transformed images from the second frame buffer onto the screen. The images are projected in an overlapping manner such that the original image from the first frame buffer is seamlessly reconstructed on the projection screen.

The embodiments for the projection system described herein provides a seamless unified display across overlapping output from a set of commodity projectors has already been well defined in prior disclosures. The calibration component of the system and as outlined in is known. The calibration component is described in U.S. Pat. Nos. 8 102 332 and 7 901 094 which are hereby incorporated by reference in their entirety for all purposes. Essentially the calibration component of the system can provide a calibration data set that includes projection matrixes. The view projection matrixes are operable to divide and transform a primary image into a plurality of secondary images. The secondary images are projected by respective video projectors in an overlapping manner onto a projection screen and provide a corrected reconstruction of the primary image.

The present disclosure discusses improvements in a video card GPU graphics processing unit and processing pipeline which can aid a new playback mechanism to provide a similar seamless display on the projectors but can source content from any graphics card host process i.e. the operating system windows manager or application . This replaces the prior system s player module see which required specialized content inputs and replaces any operating system desktop warping hooks to gain access to low level desktop content.

As seen in the operating system and the typical video card manage and maintain mappings between display output devices one example shown and operating system desktops . In general each desktop is managed and rendered through the graphics card pipeline to a private buffer for output on a corresponding display device .

For example four display screens are connected to a video card . These screens are enumerated by the operating system and the user is allowed to create four desktops with a desirable output resolution for each display device . The desktops may be logically configured relative to one another within the operating system window manager to form a rectangle virtual desktop surface. This provides the operating system with information so that a mouse pointer moved passed the edge of one desktop may for example be transferred to the appropriate next desktop.

In this configuration content is provided to the video card and rendered through the graphics pipeline . Such rendered content is stored within an application s screen buffers which are assembled into appropriate render buffers for final display on the output devices . A player application for example can utilize all the operating system desktops so that the player application can control the rendered content to all the render buffers thus ensuring output on desired display screens. The trouble with this configuration is that the player application running within the operating system must be supplied with the content to render through the graphics pipeline . Operating system content and third party applications tend to operate with their own graphics pipeline instance. In addition buffers are located within their own memory location and on the video card in a private context. In this configuration the content is unavailable to the player application. This configuration is challenging for multi projector display solutions that are required to operate with all computer application content.

In the alternate configuration as described herein the player application takes advantage of an alternate configuration for video card and processing pipeline shown in . In this example the video card is configured again with hardware outputs e.g. video output that connect to multiple display devices one example shown . However unlike the typical video card the logical display configuration of these output devices is handled by the graphics card driver and not the operating system. The graphics card i.e. video card provides a single large render buffer to the operating system as if a single large resolution display were connected. In this configuration the operating system s virtual desktop is a high resolution union of the individual display screen resolutions.

A render buffer within the video card is divided prior to final frame output to each display screen according to the resolution display characteristic of each display screen. One element of this pipeline is that the render buffer is accessible by a buffer processing module which acts on the render buffer and forwards the results to a final frames module for division among each display screen output i.e. division among the plurality of video outputs shown as the video output . The render buffer can be considered to have a first frame buffer and the final frames module can be considered to have a second frame buffer. The buffer processing module is controlled by a player application running on the host computing device and in cooperation with a graphics card pipeline application programming interface API . This buffer processing module as used within this disclosure provides blending warping screen overlays and other operations using a view projection matrix to form the seamless multi projector display.

Since the operating system desktop and all running applications operate within the normal graphics pipeline their final rendered content is placed into a render buffer hosted by the video card. The buffer is typically private and is passed directly to video signal processors that divide output signals to the displays. Here the buffer is accessible and read by an application controlled buffer processing module which can use a separate graphics pipeline to change or alter the content before passing the final result to the video signal processors. This feature allows access to any content input or generated by the GPU and thus provides a framework for adding a seamless multi projector display solution. It should be appreciated that render buffer and or buffer processing module are not limited to placement on graphics card . In alternative embodiments render buffer and or buffer processing module may be placed external to graphics card e.g. on another video or graphics card.

When the render frame player application described here begins operation i.e. invoked by the user or launched as a system process player application loads a calibration dataset containing a view projection matrix for each display screen created by a prior calibration method for example using the calibration component of the system of . This may be a calibration dataset selected by a user or from a previously configured setting in some embodiments. As each view projection matrix is loaded a logical offset within the render buffer for each associated display screen is computed.

Next the specialized buffer processing graphics pipeline context is established for the player application . This configures the render frame player application to host the buffer processing module on the video card and not use the native graphics pipeline . The render frame player does not necessarily provide an application window within the operating system but could provide one for adapting operational settings. In one embodiment the render frame player is essentially an OpenGL application with a specialized graphics context maintained on the video card .

A fragment shader and vertex shader are provided and loaded into the GPU by the render frame player . Like the projection system s player application these modules will apply a calibration data set utilizing the view projection matrixes to perform the geometric transforms and apply appropriate blending ramps black level adjustments and color adjustments necessary on the source content to provide a seamless display when output on the connected projectors .

For each projector and view projection matrix the render frame player configures the buffer processing module to source content from the appropriate location within the accessible render buffer . Since it is likely unknown when content is written into the accessible render buffer by graphics pipelines used by the operating system or application windows the method processes the accessible render buffer on a fixed rate schedule i.e. frames per second process according to some video card signal such as during a vertical sync interval or some externally directed signal. The processing involves dividing and transformation of source content from the render buffer to the final frame output according to a setup display characteristic as configured within each view projection matrix with the assistance of vertex and fragment shaders. The process ends when the render frame player application is stopped. illustrate aspects of the rendering and display processes and shows an embodiment of a method for preparing an image for projection.

In a primary image is loaded into a first frame buffer . In one embodiment the first frame buffer includes or is included in the accessible render buffer see . If the image were projected by a single projector onto a projection screen the image would appear as shown in i.e. a corrected reconstructed image.

In a frame buffer is shown symbolically divided into a plurality of regions in this example four regions as indicated by the buffer division dashed lines . A person skilled in the art can readily devise such a buffer division using address ranges and memory cells in the electronic circuitry and in the software and or firmware operating the buffer. If the projectors outputting their respective buffer regions were perfectly aligned without overlap a displayed image as projected onto a projection screen with simple division of the primary source content would match the image shown in . The primary image from is shown in symbolically divided into the same number of secondary images in this example four secondary images corresponding to the symbolic division of the frame buffer .

The division of the frame buffer is performed by the graphics card at final output and directs each buffer region to a projector output see . The application operates on the content of the entire first frame buffer to compose the entire second frame buffer. Since the divisions of the second frame buffer are known by the application secondary images are composed to fill each divided region. Each associated secondary image can thus addresses every pixel of a particular target projector. Note that each pixel of a secondary image is constructed through the application player process by sourcing content from the entire scene i.e. entire first image buffer . For example the view projection matrix for projector one may source some pixel data from the first image buffer that is also sourced by the view projection matrix for projector two i.e. in a blending regions etc. .

Edge blending is applied along edges of the subregion i.e. along edges of the respective secondary image. When the secondary images are projected in an overlapping manner onto the projection screen the edge blending smooths brightness levels in the overlapping of the secondary images and results in an even transition from one of the secondary images to another of the secondary images.

In various embodiments one or more of warping edge blending blending ramps black level adjustments and color adjustments as applied along overlapping edges of the secondary images results in matching at the regions of mutual overlap when the secondary images are projected onto the projection screen. It should be appreciated that depending on the situation one or a combination of these features present in the view projection matrixes and or the calibration data set may be effective at providing a seamless or essentially seamless reconstructed primary image when the secondary images are projected.

For contrast if the view projection matrixes were not applied to the divided primary image the overlap of the secondary images on the projection screen would not accurately reproduce the primary image. Various defects would appear in an un corrected reconstruction of the primary image. Overlap regions would appear as bright seams in the reconstruction of the primary image. Gaps between projected secondary images could appear in the reconstruction of the primary image. Curvature distortion could appear along edges of and throughout secondary images. Misalignment could appear along portions of opposed edges of paired secondary images. Mismatch in brightness between or among the secondary images could occur. These and other defects in what would be uncorrected reconstructions of the primary image are accounted for and corrected by the application of the view projection matrixes blending ramps color adjustments and other calibration data set information.

Various embodiments include arrangements for two projectors three projectors four projectors etc. The calibration data set and view projection matrixes may correct for lens distortion placement distortion different brightness levels in projectors arising from aging components differing brands or models of projectors and may correct for differing alignments of the projectors relative to the projection screen differing resolutions differing magnification factors among the projectors and so on.

To prepare an image for projection through multiple video projectors embodiments of the method shown in may be applied. Embodiments of the method may be practiced using the calibration data set of the first and second frame buffers of and the multiple video projectors of . The calibration data set may be built based on analyzing at least one test image as projected onto a projection screen by at least one of the video projectors. In one embodiment a calibration process applies several test images which are projected one by one from each projector.

In a block the first image is loaded into the first frame buffer. For example the first image may be a primary image. The first frame buffer may be the accessible render buffer on a graphics processing unit or elsewhere on the video card of in some embodiments.

In a block of the calibration data set is loaded. The calibration data set includes view projection matrixes. For example the view projection matrixes may be determined generated or created using the calibration component of the system of . The calibration data set may be loaded into a memory coupled to a computer. For example in one embodiment the calibration data set is loaded into an application such as the player application of . In other embodiments portions of the calibration data set such as the view projection matrix are also transferred loaded into the graphics card for processing use by the fragment shader and vertex sharer elements.

In a block of the first image is rendered into second images. The second images correspond to respective video projectors. For example the second images may be secondary images. The first image may be rendered into a plurality of second images by using the application to apply the calibration data set. The application and the calibration data set may be used to divide and transform the first image into the plurality of second images. The calibration data set may be applied within a buffer processing module such as the buffer processing module of the video card which receives the first image from the first frame buffer.

In a block the second images are loaded into the second frame buffer. The second frame buffer may be coupled to the respective video projectors for example by the video output of . The second frame buffer may be included in the final frames module on the video card or in a graphics processing unit. The second frame buffer may receive secondary images such as the second image from the buffer processing module . Each of the secondary images may be written into the second frame buffer with a respective logical offset associated with a respective display screen output.

Thus various embodiments disclosed herein prepare an image for projecting or result in an image being displayed on a projection screen as a corrected reconstructed image. Various embodiments make use of a first frame buffer a second frame buffer and view projection matrixes.

In one embodiment steps and occur essentially simultaneously. In other words the secondary images are actually logical representations of the divided regions of the second frame buffer. The rendering or composing of the primary image in a first frame buffer to the second frame buffer occurs through the fragment and vertex shaders one projector region at a time . These shaders apply each projector s specific view projection matrix and blending elements adjusting source content and preparing each pixel of the second frame buffer associated with the target projector.

With the above embodiments in mind it should be understood that the embodiments might employ various computer implemented operations involving data stored in computer systems. These operations are those requiring physical manipulation of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. Further the manipulations performed are often referred to in terms such as producing identifying determining or comparing. Any of the operations described herein that form part of the embodiments are useful machine operations. The embodiments also relate to a device or an apparatus for performing these operations. The apparatus can be specially constructed for the required purpose or the apparatus can be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines can be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations.

The embodiments can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data which can be thereafter read by a computer system. Examples of the computer readable medium include hard drives network attached storage NAS read only memory random access memory CD ROMs CD Rs CD RWs magnetic tapes and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion. Embodiments described herein may be practiced with various computer system configurations including hand held devices tablets microprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. The embodiments can also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a wire based or wireless network.

Although the method operations were described in a specific order it should be understood that other operations may be performed in between described operations described operations may be adjusted so that they occur at slightly different times or the described operations may be distributed in a system which allows the occurrence of the processing operations at various intervals associated with the processing.

While the system and method has been described in conjunction with several specific embodiments it is evident to those skilled in the art that many further alternatives modifications and variations will be apparent in light of the foregoing description. Thus the embodiments described herein are intended to embrace all such alternatives modifications applications and variations as may fall within the spirit and scope of the appended claims.

