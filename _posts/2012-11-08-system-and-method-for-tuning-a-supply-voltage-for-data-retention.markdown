---

title: System and method for tuning a supply voltage for data retention
abstract: A processor and a system are provided for tuning a supply voltage for data retention. The contents of data storage circuitry are read and a data verification indication corresponding to the contents is computed. Then, the supply voltage provided to the data storage circuitry is reduced to a low voltage level that is intended to retain the contents of the data storage circuitry.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08879350&OS=08879350&RS=08879350
owner: NVIDIA Corporation
number: 08879350
owner_city: Santa Clara
owner_country: US
publication_date: 20121108
---
This invention was made with Government support under Agreement No. HR0011 10 9 0008 awarded by DARPA. The Government has certain rights in the invention.

Processors used in smartphones tablets laptops and other mobile devices enter sleep modes to reduce power consumption and extend the time between battery recharging. When a sleep mode is entered the power supply to circuitry is temporarily disconnected from the power network by gating off the circuitry. When the sleep mode is exited the power supply is restored to the circuitry by disabling the gating off and reconnecting the circuitry to the power network.

When the power supply is disconnected from storage circuitry such as static random access memory SRAM the data stored in the SRAM is typically not retained. Therefore power gating is sometimes not applied to storage circuitry so that the data is retained through the sleep mode and can be read after the sleep mode is exited. In other situations the data stored in an on chip SRAM is saved to external memory prior to entering the sleep mode and the data is restored to the on chip SRAM from the external memory after the sleep mode is exited. The save and restore approach has latency and power overhead which may cause that approach to be deemed unacceptable when the amount of time spent in the sleep mode is short. Thus there is a need for addressing the issue of data retention and or other issues associated with the prior art.

A system and method are provided for tuning a supply voltage for data retention. The contents of data storage circuitry are read and a data verification indication corresponding to the contents is computed. Then the supply voltage provided to the data storage circuitry is reduced to a low voltage level that is intended to retain the contents of the data storage circuitry.

As previously explained when the power supply is disconnected from storage circuitry such as SRAM the data stored in the SRAM is typically not retained. Therefore power gating is not a reliable technique for ensuring that data is retained through a low power mode such as a sleep mode. If data storage is necessary an alternate technique of storing the contents of the SRAM to external memory prior to entering the sleep mode and later restoring the contents to the on chip SRAM from the external memory is effective when the amount of time spent in the sleep mode is long. Because writing and reading external memory can consume more energy compared with simply retaining the contents of the SRAM over a short time period by maintaining the normal operating voltage level the amount of time spent in the sleep mode should be several times longer than the time needed to perform the storing and restoring. Otherwise the energy consumed by the saving and restoring operations may exceed the energy saved during the sleep mode.

An alternative to the save and restore approach that may be employed for short sleep mode use cases is to lower the supply voltage to the minimum voltage needed to retain state in on chip storage elements SRAMs latches and flip flops a so called low voltage retention mode. Since leakage current has a strong dependence on supply voltage the approach is very effective at reducing energy. However one challenge with this approach is determining the minimum safe voltage for data retention particularly with SRAMs because the minimum safe voltage is very dependent on device variation in individual SRAM cells.

Determination of the minimum voltage level for which the entire contents of the data storage circuitry are retained is challenging. The minimum voltage level may vary from one integrated circuit device to another and even from each bit of storage within a single SRAM to another due to variations in circuit characteristics resulting from fabrication technology and or the age of the integrated circuit device. The minimum voltage level may also vary due to environmental conditions specific to the data storage circuitry at a particular point in time such as temperature.

At step the contents of the data storage circuitry are restored before proceeding to step . The contents may be restored based on a combination of the data verification indication and the current contents of the data storage circuitry that differ compared with the contents of the data storage circuitry prior to the start of the low voltage retention mode. Restoration of the contents may be performed by either software or circuitry.

More illustrative information will now be set forth regarding various optional architectures and features with which the foregoing framework may or may not be implemented per the desires of the user. It should be strongly noted that the following information is set forth for illustrative purposes and should not be construed as limiting in any manner. Any of the following features may be optionally incorporated with or without the exclusion of other features described.

When a low voltage retention mode is initiated i.e. the low voltage retention mode input signal to the voltage supply control unit is asserted the data retention unit reads the contents of the data storage circuitry . In one embodiment the voltage supply control unit walks through the addresses of the data storage circuitry in sequence to read the entire contents of the data storage circuitry . The contents are provided by the data storage circuitry to the data verification indication computation unit via the data connection. The data verification indication computation unit is configured by the voltage supply control unit to compute the data verification indication corresponding to the contents. Computation of the data verification indication may occur in parallel with reading of the contents from the data storage circuitry . When multiple data storage circuitries are instantiated within an integrated circuit data verification indications may be computed in parallel for one or more of the multiple data storage circuitries .

When computation of the data verification indication is completed the voltage supply control unit configures the data storage circuitry to use the low voltage level instead of the normal operating voltage level. The low voltage level is set to a value that is intended to cause the content of the data storage circuitry to be retained. However when the low voltage level is used there is a risk that the contents will not be retained and one or more bits of the contents may be inverted e.g. a 0 becomes a 1 or vice versa. The data verification indication may be used to determine whether the contents have been retained by the data storage circuitry following a period of the low voltage retention mode operation.

When a low voltage retention mode is exited i.e. the low voltage retention mode input signal to the voltage supply control unit is negated the voltage supply control unit configures the data storage circuitry to use the normal operating voltage level instead of the low voltage level. Then the data retention unit reads the contents of the data storage circuitry . The contents are provided by the data storage circuitry to the data verification indication computation unit via the data connection. The data verification indication computation unit is configured by the voltage supply control unit to verify the contents using the data verification indication. The data verification indication computation unit generates a result indicating whether an error is detected meaning that the current contents of the data storage circuitry are different compared with the contents of the data storage circuitry prior to the reduction of the supply voltage to the low voltage level during a period of low voltage retention mode operation. The data verification indication computation unit provides the result to the voltage supply control unit and the data restore engine via the error connection.

When the result indicates that the contents of the data storage circuitry were retained correctly the voltage supply control unit may adjust the low voltage level by decreasing the low voltage level. In one embodiment the voltage supply control unit may decrease the low voltage level based on results received for multiple periods of low voltage retention mode operation. Reducing the low voltage level further decreases the power consumed by the data storage circuitry during periods of low voltage retention mode operation.

When the result indicates that the contents of the data storage circuitry were not retained the voltage supply control unit may adjust the low voltage level by increasing the low voltage level. The amount by which the low voltage level is increased may be predetermined programmed or dynamically determined by the voltage supply control unit . The voltage supply control unit may determine the adjustment amount based on the results received for multiple periods of low voltage mode operation the number of errors indicated by the result environmental conditions or the like.

By adjusting the low voltage level the voltage supply control unit dynamically tunes the supply voltage used during low voltage retention modes to retain the contents of storage circuitry. In one embodiment the contents of the data storage circuitry are not saved to or restored from external memory. The data verification indication may be efficiently computed and stored within the same integrated circuit that contains the data storage circuitry and one or more sub units within the data retention unit .

When the result indicates an error i.e. that the contents of the data storage circuitry were not retained the data restore engine may be configured to restore the contents of the data storage circuitry using the current contents of the data storage circuitry and the data verification indication. The data restore engine may be implemented as software firmware or circuitry. In one embodiment when an error is indicated a reboot of the system that includes the data storage circuitry is enforced and the low voltage level may be adjusted to a higher value.

The bits read from the data storage circuitry are input to the LFSR at the input and after k cycles the contents of the flip flops represent the checkbits. The checkbits are a data verification indication that may be computed by the data verification indication computation unit . In one embodiment the LFSR is unrolled to match the word size of the data storage circuitry so that each word read from the data storage circuitry may be input to the LFSR at the input . For an example of LFSR unrolling see R. Micheloni R. Ravasio A. Marelli E. Alice V. Altieri A. Bovino L. Crippa E. Di Martino L. D Onofrio A. Gambardella E. Grillea G. Guerra D. Kim C. Missiroli I. Motta A. Prisco G. Ragone M. Romano M. Sangalli P. Sauro M. Scotti and S. Won A 4 Gb 2b cell NAND Flash Memory with Embedded 5b BCH ECC for 36 MB s System Read Throughput presented at the Solid State Circuits Conference 2006. ISSCC 20062006 pp. 497 506 which is hereby incorporated by reference in its entirety. In one embodiment a Bose Chaudhuri and Hocquenghem BCH error code is generated by the data verification indication computation unit as the data verification indication. See for example Hocquenghem A. September 1959 Codes correcteurs d erreurs in French Paris 2 147 156 and Bose R. C. Ray Chaudhuri D. K. March 1960 On A Class of Error Correcting Binary Group Codes 3 1 68 79 which are hereby incorporated by reference in their entirety.

The data verification indication computation unit may be configured to store the data verification indication in the flip flops during the period of low voltage retention mode operation. The data verification indication should be stored in a reliable storage resource. If the flip flops within the data verification indication computation unit are not configured to retain their contents during the low voltage retention mode then the contents of the flip flops may be saved to a reliable storage resource prior to entering the low voltage retention mode and restored to the flip flops after exiting the low voltage retention mode.

In one embodiment the flip flops that compute and or store the data verification indication are also used to store patterns needed when built in self test operations are performed on the data storage circuitry . Although built in self test circuitry may be used to verify whether data storage and or retention has failed the contents of the data storage circuitry are destroyed when built in self test operations are performed. Therefore some restore mechanism is needed when built in self test operations are used and the contents are needed following the built in self test operations.

When the data verification indication computation unit is configured to perform verification of the current contents of the data storage circuitry the bits read from the data storage circuitry are input to the LFSR at the input . Note that when the data verification indication is stored in the flip flops within the verification indication computation unit and retained during the low voltage retention mode and therefore does not need to be input to the LFSR at the input . The value stored in the flip flops after the bits read from the data storage circuitry are input to the LFSR represents a verification result indicating whether or not the contents of the data storage circuitry were retained.

In one embodiment the data verification indication is stored in a reliable storage resource and is read from the reliable storage resource and input at the input before or after the bits that are read from the data storage circuitry . The value stored in the flip flops after the data verification indication and the bits read from the data storage circuitry are input to the LFSR represents a verification result indicating whether or not the contents of the data storage circuitry were retained.

In one embodiment when all bits of the verification result equal zero then no error occurred and the contents of the data storage circuitry were retained. When one or more bits equal one instead of zero Berlekamp and Chien algorithms may be used by the data verification indication computation unit to correct the contents i.e. restore the contents. See for example Berlekamp Elwyn R. 1967 . Factoring Polynomials Over Finite Fields . 46 1853 1859 which is hereby incorporated by reference in its entirety. See for example Chien R. T. October 1964 Cyclic Decoding Procedures for the Bose Chaudhuri Hocquenghem Codes IT 10 4 357 363 which is hereby incorporated by reference in its entirety.

At step the contents of the data storage circuitry are verified by the data retention unit using the stored error detection code. A result of the verification indicates whether the contents of the data storage circuitry were retained during the time when the supply voltage provided to the data storage circuitry was at the low voltage level. If at step the result indicates that the contents of the data storage circuitry were retained then at step exiting of the low voltage retention mode is performed. Otherwise at step the data retention unit increases the low voltage level that is provided to the data storage circuitry during low voltage retention mode operation. Restoration of the contents may be performed by either software including firmware or circuitry.

At step if the data restore engine is not included in the data retention unit or the data retention unit is not otherwise configured to restore the contents of the data storage circuitry then the restore operation is performed by software and or firmware. At step the system including the data storage circuitry is restarted if necessary and software performs the restore operation. Otherwise at step the contents of the data storage circuitry are restored by the data retention unit before proceeding to step . At step the low voltage retention mode is exited.

In one example the data storage circuitry is an SRAM configured to store 2048 bits and the SRAM operates at 500 MHz. Computation of the data verification indication may be performed in 4.1 microseconds allowing the low voltage retention mode operation to begin in 4.1 microseconds. When the data storage circuitry is instantiated within a graphics processor the graphics processor may enter and exit the low voltage retention mode operation after each frame is rendered. For example at 60 Hz frame rates the graphics processor has 16.67 milliseconds to render each frame. When rendering is completed in a few milliseconds or less or even several milliseconds the graphics processor may operate in the low voltage retention mode to conserve power. The data storage circuitry within the graphics processor may be configured to use a low voltage level during the periods of low voltage retention mode operation because the entry and exit latency for the low voltage retention mode operation is short in comparison with the time available to render the frames. Instantiations of data storage circuitry within an integrated circuit such as a processor or more specifically a graphics processor may include caches and register files. An example of a parallel processing unit PPU that may include one or more instances of data storage circuitry and associated data retention units is described in further detail. The PPU may be configured to operate in a low voltage retention mode.

In one embodiment the PPU includes an input output I O unit configured to transmit and receive communications i.e. commands data etc. from a central processing unit CPU not shown over the system bus . The I O unit may implement a Peripheral Component Interconnect Express PCIe interface for communications over a PCIe bus. In alternative embodiments the I O unit may implement other types of well known bus interfaces.

The PPU also includes a host interface unit that decodes the commands and transmits the commands to the grid management unit or other units of the PPU e.g. memory interface as the commands may specify. The host interface unit is configured to route communications between and among the various logical units of the PPU .

In one embodiment a program encoded as a command stream is written to a buffer by the CPU. The buffer is a region in memory e.g. memory or system memory that is accessible i.e. read write by both the CPU and the PPU . The CPU writes the command stream to the buffer and then transmits a pointer to the start of the command stream to the PPU . The host interface unit provides the grid management unit GMU with pointers to one or more streams. The GMU selects one or more streams and is configured to organize the selected streams as a pool of pending grids. The pool of pending grids may include new grids that have not yet been selected for execution and grids that have been partially executed and have been suspended.

A work distribution unit that is coupled between the GMU and the SMs manages a pool of active grids selecting and dispatching active grids for execution by the SMs . Pending grids are transferred to the active grid pool by the GMU when a pending grid is eligible to execute i.e. has no unresolved data dependencies. An active grid is transferred to the pending pool when execution of the active grid is blocked by a dependency. When execution of a grid is completed the grid is removed from the active grid pool by the work distribution unit . In addition to receiving grids from the host interface unit and the work distribution unit the GMU also receives grids that are dynamically generated by the SMs during execution of a grid. These dynamically generated grids join the other pending grids in the pending grid pool.

In one embodiment the CPU executes a driver kernel that implements an application programming interface API that enables one or more applications executing on the CPU to schedule operations for execution on the PPU . An application may include instructions i.e. API calls that cause the driver kernel to generate one or more grids for execution. In one embodiment the PPU implements a SIMD Single Instruction Multiple Data architecture where each thread block i.e. warp in a grid is concurrently executed on a different data set by different threads in the thread block. The driver kernel defines thread blocks that are comprised of k related threads such that threads in the same thread block may exchange data through shared memory. In one embodiment a thread block comprises 32 related threads and a grid is an array of one or more thread blocks that execute the same stream and the different thread blocks may exchange data through global memory.

In one embodiment the PPU comprises X SMs X . For example the PPU may include 15 distinct SMs . Each SM is multi threaded and configured to execute a plurality of threads e.g. 32 threads from a particular thread block concurrently. Each of the SMs is connected to a level two L2 cache via a crossbar or other type of interconnect network . The L2 cache is connected to one or more memory interfaces . Memory interfaces implement 16 32 64 128 bit data buses or the like for high speed data transfer. In one embodiment the PPU comprises U memory interfaces U where each memory interface U is connected to a corresponding memory device U . For example PPU may be connected to up to 6 memory devices such as graphics double data rate version 5 synchronous dynamic random access memory GDDR5 SDRAM .

In one embodiment the PPU implements a multi level memory hierarchy. The memory is located off chip in SDRAM coupled to the PPU . Data from the memory may be fetched and stored in the L2 cache which is located on chip and is shared between the various SMs . In one embodiment each of the SMs also implements an L1 cache. The L1 cache is private memory that is dedicated to a particular SM . Each of the L1 caches is coupled to the shared L2 cache . Data from the L2 cache may be fetched and stored in each of the L1 caches for processing in the functional units of the SMs .

In one embodiment the PPU comprises a graphics processing unit GPU . The PPU is configured to receive commands that specify shader programs for processing graphics data. Graphics data may be defined as a set of primitives such as points lines triangles quads triangle strips and the like. Typically a primitive includes data that specifies a number of vertices for the primitive e.g. in a model space coordinate system as well as attributes associated with each vertex of the primitive. The PPU can be configured to process the graphics primitives to generate a frame buffer i.e. pixel data for each of the pixels of the display . The driver kernel implements a graphics processing pipeline such as the graphics processing pipeline defined by the OpenGL API.

An application writes model data for a scene i.e. a collection of vertices and attributes to memory. The model data defines each of the objects that may be visible on a display. The application then makes an API call to the driver kernel that requests the model data to be rendered and displayed. The driver kernel reads the model data and writes commands to the buffer to perform one or more operations to process the model data. The commands may encode different shader programs including one or more of a vertex shader hull shader geometry shader pixel shader etc. For example the GMU may configure one or more SMs to execute a vertex shader program that processes a number of vertices defined by the model data. In one embodiment the GMU may configure different SMs to execute different shader programs concurrently. For example a first subset of SMs may be configured to execute a vertex shader program while a second subset of SMs may be configured to execute a pixel shader program. The first subset of SMs processes vertex data to produce processed vertex data and writes the processed vertex data to the L2 cache and or the memory . After the processed vertex data is rasterized i.e. transformed from three dimensional data into two dimensional data in screen space to produce fragment data the second subset of SMs executes a pixel shader to produce processed fragment data which is then blended with other processed fragment data and written to the frame buffer in memory . The vertex shader program and pixel shader program may execute concurrently processing different data from the same scene in a pipelined fashion until all of the model data for the scene has been rendered to the frame buffer. Then the contents of the frame buffer are transmitted to a display controller for display on a display device.

The PPU may be included in a desktop computer a laptop computer a tablet computer a smart phone e.g. a wireless hand held device personal digital assistant PDA a digital camera a hand held electronic device and the like. In one embodiment the PPU is embodied on a single semiconductor substrate. In another embodiment the PPU is included in a system on a chip SoC along with one or more other logic units such as a reduced instruction set computer RISC CPU a memory management unit MMU a digital to analog converter DAC and the like.

In one embodiment the PPU may be included on a graphics card that includes one or more memory devices such as GDDR5 SDRAM. The graphics card may be configured to interface with a PCIe slot on a motherboard of a desktop computer that includes e.g. a northbridge chipset and a southbridge chipset. In yet another embodiment the PPU may be an integrated graphics processing unit iGPU included in the chipset i.e. Northbridge of the motherboard.

As described above the work distribution unit dispatches active grids for execution on one or more SMs of the PPU . The scheduler unit receives the grids from the work distribution unit and manages instruction scheduling for one or more thread blocks of each active grid. The scheduler unit schedules threads for execution in groups of parallel threads where each group is called a warp. In one embodiment each warp includes 32 threads. The scheduler unit may manage a plurality of different thread blocks allocating the thread blocks to warps for execution and then scheduling instructions from the plurality of different warps on the various functional units i.e. cores DPUs SFUs and LSUs during each clock cycle.

In one embodiment each scheduler unit includes one or more instruction dispatch units . Each dispatch unit is configured to transmit instructions to one or more of the functional units. In the embodiment shown in the scheduler unit includes two dispatch units that enable two different instructions from the same warp to be dispatched during each clock cycle. In alternative embodiments each scheduler unit may include a single dispatch unit or additional dispatch units .

Each SM includes a register file that provides a set of registers for the functional units of the SM . In one embodiment the register file is divided between each of the functional units such that each functional unit is allocated a dedicated portion of the register file . In another embodiment the register file is divided between the different warps being executed by the SM . The register file provides temporary storage for operands connected to the data paths of the functional units.

Each SM comprises L processing cores . In one embodiment the SM includes a large number e.g. 192 etc. of distinct processing cores . Each core is a fully pipelined single precision processing unit that includes a floating point arithmetic logic unit and an integer arithmetic logic unit. In one embodiment the floating point arithmetic logic units implement the IEEE 754 2008 standard for floating point arithmetic. Each SM also comprises M DPUs that implement double precision floating point arithmetic N SFUs that perform special functions e.g. copy rectangle pixel blending operations and the like and P LSUs that implement load and store operations between the shared memory L1 cache and the register file . In one embodiment the SM includes 64 DPUs 32 SFUs and 32 LSUs .

Each SM includes an interconnect network that connects each of the functional units to the register file and the shared memory L1 cache . In one embodiment the interconnect network is a crossbar that can be configured to connect any of the functional units to any of the registers in the register file or the memory locations in shared memory L1 cache .

In one embodiment the SM is implemented within a GPU. In such an embodiment the SM comprises J texture units . The texture units are configured to load texture maps i.e. a 2D array of texels from the memory and sample the texture maps to produce sampled texture values for use in shader programs. The texture units implement texture operations such as anti aliasing operations using mip maps i.e. texture maps of varying levels of detail . In one embodiment the SM includes 16 texture units .

The PPU described above may be configured to perform highly parallel computations much faster than conventional CPUs. Parallel computing has advantages in graphics processing data compression biometrics stream processing algorithms and the like.

The system also includes input devices a graphics processor and a display i.e. a conventional CRT cathode ray tube LCD liquid crystal display LED light emitting diode plasma display or the like. User input may be received from the input devices e.g. keyboard mouse touchpad microphone and the like. In one embodiment the graphics processor may include a plurality of shader modules a rasterization module etc. Each of the foregoing modules may even be situated on a single semiconductor platform to form a graphics processing unit GPU .

In the present description a single semiconductor platform may refer to a sole unitary semiconductor based integrated circuit or chip. It should be noted that the term single semiconductor platform may also refer to multi chip modules with increased connectivity which simulate on chip operation and make substantial improvements over utilizing a conventional central processing unit CPU and bus implementation. Of course the various modules may also be situated separately or in various combinations of semiconductor platforms per the desires of the user.

The system may also include a secondary storage . The secondary storage includes for example a hard disk drive and or a removable storage drive representing a floppy disk drive a magnetic tape drive a compact disk drive digital versatile disk DVD drive recording device universal serial bus USB flash memory. The removable storage drive reads from and or writes to a removable storage unit in a well known manner.

Computer programs or computer control logic algorithms may be stored in the main memory and or the secondary storage . Such computer programs when executed enable the system to perform various functions. The memory the storage and or any other storage are possible examples of computer readable media.

In one embodiment the architecture and or functionality of the various previous figures may be implemented in the context of the central processor the graphics processor an integrated circuit not shown that is capable of at least a portion of the capabilities of both the central processor and the graphics processor a chipset i.e. a group of integrated circuits designed to work and sold as a unit for performing related functions etc. and or any other integrated circuit for that matter.

Still yet the architecture and or functionality of the various previous figures may be implemented in the context of a general computer system a circuit board system a game console system dedicated for entertainment purposes an application specific system and or any other desired system. For example the system may take the form of a desktop computer laptop computer server workstation game consoles embedded system and or any other type of logic. Still yet the system may take the form of various other devices including but not limited to a personal digital assistant PDA device a mobile phone device a television etc.

Further while not shown the system may be coupled to a network e.g. a telecommunications network local area network LAN wireless network wide area network WAN such as the Internet peer to peer network cable network or the like for communication purposes.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of a preferred embodiment should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

