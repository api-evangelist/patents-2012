---

title: System and method for securing and tracking files
abstract: A method, system and computer program product for securing and tracking restricted files stored in a data processing system is provided. The data processing system is connected to a server for sharing information. An entity requesting to access a restricted file is authenticated, based on certain policies defined by a system administrator. Further, the system maintains a log of operations executed on the restricted file, and sends a record of the log to the server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08892879&OS=08892879&RS=08892879
owner: 
number: 08892879
owner_city: 
owner_country: 
publication_date: 20120509
---
The current application is a divisional application of patent application titled SYSTEM AND METHOD FOR SECURING AND TRACKING FILES filed on Apr. 10 2007 application Ser. No. 11 784 923 now U.S. Pat. No. 8 191 162 which is incorporated by reference herein.

The present invention relates in general to the field of data security and more specifically to securing and tracking data in a Data Processing System DPS .

One of the most valuable assets of an organization is its data. Data can be structured data or unstructured data. The structured data is the data stored in a database such as Oracle database. Examples of structured data can be employee name address salary information and so forth. The unstructured data includes files stored in the hard drives of users or in a network. Examples of unstructured data include document files such as Microsoft Word Adobe PDF Microsoft Excel Google Spreadsheets Microsoft PowerPoint media files source code files and so forth.

With an increase in the number of employees working in the organization preventing unauthorized access to unstructured data and structured data in a flat file format becomes a challenge. Moreover the organization needs to prevent unauthorized use of the data by authenticated users. In order to address these challenges various methods for data security exist.

One of the conventional methods for securing data involves making the data accessible only to authenticated users where a user s credentials are authenticated before providing access to the data. However once authenticated the user can execute undesirable operations on the data. Moreover the operations executed on the data cannot be tracked.

Another conventional method for securing data involves restricting the operations that an authenticated user can execute on the data. These restrictions may comprise restricting the authenticated user to the following operations 

copying the data saving the data in a new file and printing the data. However these restrictions can decrease the efficiency of the authenticated user.

In light of the forgoing discussion a need exists for a method and system for securing and tracking data. The method and system should provide access only to authenticated users. The method and system should also be capable of tracking any unauthorized operations executed on the data. Further there is an ongoing need to reduce restrictions on authenticated users without compromising the security of the data. The present invention addresses such needs.

An object of the present invention is to provide a method system and computer program product to secure restricted files.

Yet another object of the present invention is to provide access to the restricted files only to authenticated users.

Still another object of the present invention is to reduce restrictions on authenticated users without compromising the security of the restricted files.

In order to achieve the foregoing objectives and in accordance with the purpose of various embodiments of the present invention as broadly described herein various embodiments of the present invention provide a method system and computer program product for securing a restricted file in a Data Processing System DPS . The restricted file is stored in an encrypted format in the DPS which is connected to a server. A software application in the DPS sends a first request to execute a first set of operations on the restricted file. Thereafter the software application is authenticated. If the authentication of the software is successful the content of the restricted file is decrypted. Subsequently the decrypted content is provided to the software application. The software application sends a second request to execute a second set of operations on the restricted file. Thereafter the software application is authenticated again. If the authentication is successful the software application can execute the second set of operations. However the content of the restricted file is encrypted and saved in the memory of the DPS.

In accordance with an embodiment of the present invention the system tracks the restricted file stored in the DPS. The system maintains a log of operations performed on the restricted file. Further the system sends a record that includes the log and properties of the restricted file to the server.

Various embodiments of the present invention provide a method and system for securing and tracking restricted files stored in a Data Processing System DPS . The DPS is connected to a server for sharing information. An entity requesting access to a restricted file is authenticated based on policies defined by a system administrator. Additionally a log of operations executed on the restricted file is maintained by the system. Thereafter the system sends a record of the log to the server.

DPS comprises one or more entities which can be software applications. Examples of software applications include but are not limited to compilers visual studio editors Source Control Manager SCM plug ins and Integrated Drive Electronics interceptors.

Further DPS comprises a memory and a restricted file stored in memory . Examples of memory include but are not limited to a hard drive a Random Access Memory RAM a Read Only Memory ROM and a flash memory. Restricted file is a file that an organization desires to protect from unauthorized access and operations. In an embodiment of the present invention restricted file is stored in memory in an encrypted format. Each restricted file has a unique identifier.

DPS further comprises a filter manager driver a kernel component a user component a crypting module and a port . In an embodiment of the present invention file manager driver is a module that intercepts requests sent by entity to a file system. Filter manager driver is configured to receive a request from entity and forward the request to kernel component . Kernel component responds to the request after communicating with user component through port . In an embodiment of the present invention kernel component and user component are software modules. Crypting module is configured to encrypt and decrypt restricted file . With reference to crypting module is plugged into kernel component . In another embodiment of the present invention crypting module is a part of kernel component . Further crypting module is a software module that can use a crypting algorithm such as Blowfish and the like. In an embodiment of the present invention port is a virtual data connection used by user component and kernel component to exchange data directly.

In addition DPS comprises a New Technology File System NTFS driver and a File Allocation Table FAT driver . NTFS is a standard file system of Microsoft Windows NT and its descendants Windows 2000 Windows XP and so on. NTFS driver is a software program that allows Linux software to access NTFS. Similarly FAT driver is a portable driver that is configured to access media formatted with the Microsoft FAT file system. FAT driver provides services to read and write existing files as well as to create and delete new files and directories. In an embodiment of the present invention the system administrator defines policies pertaining to restricted file . These policies are stored in server . Further the system administrator can change the policies stored in server .

In order to provide the above functions user component and kernel component include various elements. Details of these elements have been provided in conjunction with .

In an embodiment of the present invention user component communicates with server for the first time when user component starts bootstrapping. Bootstrapping is a process in which a module initiates for the first time. User component sends a request to server to receive the policies set by the system administrator. Server sends the policies to user component . Thereafter user component gets updated policies from server regularly after a predefined interval of time. The predefined interval of time starts from the moment when user component is updated for the first time during bootstrapping. In an embodiment of the present invention the policies can be in an XML format as follows 

At step it is verified whether the authentication is successful. In an embodiment of the present invention this verification is performed by user component . If the authentication fails the first set of operations are not performed on restricted file and an error message is generated. If the authentication is successful user component communicates this to kernel component . Kernel component sends a request to filter manager driver to receive restricted file . Filter manager driver retrieves restricted file from memory through NTFS driver . Thereafter restricted file is forwarded to kernel component which sends restricted file to crypting module . Subsequently at step the content of restricted file is decrypted. In an embodiment of the present invention the decryption is performed by crypting module . The decrypted content is forwarded to kernel component . Thereafter forwarding module sends the decrypted content to entity . In an embodiment of the present invention forwarding module sends the decrypted content to filter manager driver which sends the decrypted content to entity .

At step a second request from entity is received by kernel component . The second request is received to execute at least one operation from a second set of operations on restricted file . In an embodiment of the present invention the second set of operations includes writing on restricted file copying the content of restricted file saving restricted file in a new location and the like.

At step the content of restricted file is encrypted. In an embodiment of the present invention the encryption process is performed by crypting module . At step the at least one operation is executed on the encrypted content. The at least one operation can be for example storing the encrypted content in memory for which the encrypted content is sent to memory by NTFS driver . NTFS driver receives the encrypted content from filter manager driver which receives the encrypted content from crypting module . Thus the file cannot be misused since only the encrypted version is available to the entity to perform the second set of operations.

In an embodiment of the present invention entity sends a request to create a restricted file . This request is received by filter manager driver which then sends the request to kernel component . Upon receipt of the request kernel component requests user component to authenticate entity . In an embodiment of the present invention the authentication is performed by authentication module . If the authentication fails the request is not executed. If the authentication succeeds user component creates a unique ID for restricted file . Thereafter a notice of the operation performed on restricted file is sent to user component which maintains a log of the operations performed on restricted file . User component asynchronously sends a record to server . This record comprises the log and a set of properties associated with restricted file . In an embodiment of the present invention the record comprises the following 

At step entity is authenticated. In an embodiment of the present invention kernel component sends a request to user component for authenticating entity . The request comprises a process identifier associated with entity . User component identifies entity from the process identifier. Further authentication module performs the authentication of entity . The authentication is based on a set of policies received by user component from server . The set of policies also includes a list of authorized entities. At step it is verified whether the authentication is successful. If the authentication fails an error message is generated and user component is notified at step . If the authentication is successful user component sends a message pertaining to the successful authentication to kernel component . Thereafter kernel component sends a request to user component to cache header data of restricted file . Subsequently at step user component caches the header data. In an embodiment of the present invention the header can be stored on server or on DPU . Further filter manager driver sends a request to NTFS driver to retrieve restricted file . In response NTFS driver retrieves restricted file from memory and provides restricted file to filter manager driver . At step the content of restricted file is decrypted. In an embodiment of the present invention the decryption is performed by crypting module . The decrypted content is sent to filter manager driver by forwarding module . Thereafter filter manager driver forwards the decrypted content to entity wherein the open and read operations are executed on the restricted file .

In an embodiment of the present invention the header data is not decrypted by crypting module . This prevents any secure data stored in the header data from being interpreted by entity . After decrypting the content of restricted file step is performed. At step user component is notified about the successful execution of the first set of operations. Step is performed by kernel component in an embodiment of the present invention. Further logging module maintains a log pertaining to the operations performed on restricted file . In an embodiment of the present invention the log is asynchronously forwarded to server .

At step kernel component receives a second request from entity for executing at least one operation of a second set of operations on restricted file . The second set of operations can involve writing on restricted file copying the content of restricted file and saving restricted file in a new location.

Consider for example that the second request pertains to writing on restricted file . In an embodiment of the present invention filter manager driver receives the second request and forwards it to kernel component . Subsequently kernel component sends a request to user component in order to authenticate entity for the second request. In an embodiment of the present invention the flow of the second request via various components is similar to the flow of the first set of requests. At step entity is authenticated to perform the second request. In an embodiment of the present invention the authentication is performed by authentication module . In an embodiment of the present invention the process of authentication is similar to the authentication process described at step . This authentication is based on the policies received by user component from server . At step the result of the authentication is verified. If the authentication process fails an error message is generated and user component is notified at step . If the authentication is successful step is performed. At step kernel component receives the cached header from user component . At step the content of restricted file is encrypted. In an embodiment of the present invention the process of encryption is performed by crypting module . Subsequently a unique identifier is associated with the contents of restricted file at step . In an embodiment of the present invention the unique identifier is generated when restricted file is created. In an embodiment of the present invention the cached header data comprises the unique identifier of restricted file . The unique identifier is embedded into the encrypted content. The unique identifier facilitates in identifying and tracking all the operations performed on restricted file . In an embodiment of the present invention the process of embedding is performed by kernel component . Further the cached header and the encrypted content of restricted file are stored in memory . At step kernel component communicates the writing operation performed on restricted file to user component . Thus the file is protected since only the encrypted version is subject to the second operation.

In an embodiment of the present invention the second request pertains to copying content of restricted file . Filter manager driver receives the second request and sends the second request to kernel component . Kernel component sends the second request to user component to authenticate the second request. In an embodiment of the present invention the flow of the second request via various components is similar to the flow of the first set of requests.

At step entity is authenticated. In an embodiment of the present invention the authentication is performed by authentication module . This authentication is based on the policies received by user component from server . Subsequently the result of the authentication is verified at step . If the authentication process fails an error message is generated and user component is notified at step . If the authentication is successful step is performed. At step kernel component receives the cached header from user component . At step the content of restricted file is encrypted by crypting module in an embodiment of the present invention. In an embodiment of the present invention the encrypted content is copied in a clipboard. Subsequently a unique identifier is associated with the contents of restricted file at step . In an embodiment of the present invention the unique identifier is generated when restricted file is created. In an embodiment of the present invention cached header data comprises the unique identifier of restricted file . The unique identifier is embedded into the encrypted content. In an embodiment of the present invention embedding is performed by kernel component . Thereafter kernel component communicates the copying operation performed on restricted file to user component at step .

In yet another embodiment of the present invention a second request to save restricted file in a new location is received at step . In an embodiment of the present invention filter manager driver receives the second request. Subsequently the second request is sent to kernel component by file manager driver . Kernel component sends a request to user component to authenticate the second request. In an embodiment of the present invention the flow of the second request via various components is similar to the flow of the first set of requests. At step entity is authenticated. In an embodiment of the present invention the authentication process is performed by authentication module . This authentication is based on the policies that are received by user component from server . Subsequently the result of the authentication is verified at step . If the authentication process fails an error message is generated and user component is notified at step . If the process of authentication is successful step is performed. At step kernel component receives the cached header from user component . At step the content of restricted file is encrypted by crypting module . In an embodiment of the present invention the encryption process is performed by crypting module . Subsequently a unique identifier is associated with the contents of restricted file at step . In an embodiment of the present invention the unique identifier is generated when restricted file is created. In an embodiment of the present invention the cached header data comprises the unique identifier of restricted file . The unique identifier is embedded into the encrypted content. In an embodiment of the present invention the process of embedding is performed by kernel component . At step kernel component communicates the information to user component that restricted file has been saved in the new location.

In yet another embodiment of the present invention when the second request pertains to printing the content of restricted file an open operation is performed on restricted file . Consequently user component creates a file object in a file collection associated with the project to which restricted file belongs. Thereafter a count of restricted files which are open on DPU is incremented by user component . If the count is greater than zero the process of printing the content of restricted file is disabled. In an embodiment of the present invention any count greater than zero can be used to disable printing. If the policies are set to facilitate the process of printing restricted file the process of printing the content of restricted file is enabled.

In an embodiment of the present invention user component is configured to prevent a predefined set of restricted entities from writing on and reading restricted file . For example software applications such as WinZip explorer.exe outlook.exe internet explorere.exe and so forth belong to the predefined set of restricted entities. Restricted entities can open a file but cannot read its contents. In an embodiment of the present invention on receiving a request from the restricted entity kernel component sends the encrypted content of restricted file to the restricted entity. Therefore the restricted entity can view the encrypted content but can not read the decrypted contents of the restricted file.

In an embodiment of the present invention the method described in is performed for a limited period of time when user component is disconnected from server . This limited period of time is defined by the system administrator. User component maintains the record that has to be sent to server in a queue. Thereafter once the connection between user component and server is established user component sends the record to server .

In an embodiment of the present invention DPS may not include user component kernel component and crypting module . In such cases entity sends a request to an open restricted file . When the restricted file is opened however the encrypted content of restricted file is not visible. In such a case a link to server is provided to a user of DPS . The user can use the link to download user component kernel component and crypting module on DPS . After the process of downloading is completed all the operations performed on restricted file are notified to user component . User component maintains a log pertaining to the operations performed on restricted file . User component sends a record comprising the log to server asynchronously.

In an embodiment of the present invention a scheme of policies is provided in order to synchronize between user component and server . In an embodiment of the present invention the scheme has the following XML format 

In an embodiment of the present invention user component is disconnected from server . In this event information to be sent to server is logged up in a queue. Thereafter the information is sent to server after user component and server are connected. In an embodiment of the present invention the information sent to server has the following XML format

In an embodiment of the present invention kernel component uses a command to authorize a request made by entity to user component . User component authorizes the request after performing a series of checks.

If all of the checks are successful user component returns TRUE otherwise it returns FALSE . In an embodiment of the present invention user component performs the following checks 

In an embodiment of the present invention the command input by kernel component and the output sent by user component is as follows 

In an embodiment of the present invention a command is issued by kernel component to notify user component about operations performed on restricted file . In this case the command input by kernel component and the output sent by user component is as follows 

The return value of this command from the user component service will be 0 if the user component successfully registers the event.

In an embodiment of the present invention a command is issued by kernel component to obtain the header data of restricted file from user component . The header is embedded by kernel component in restricted file . In an embodiment of the present invention the command supports two modes the first mode being an Exist mode and the second mode being a New mode. In the Exist mode user component obtains the header from the cache. In the case of the new mode user component constructs a new header adds it to the cache and returns the header to kernel component . In this case the command input by kernel component and the output sent by user component is as follows Input

In an embodiment of the present invention a command is sent by a plugin to the user component when an editor is opened. The editor may be a third party component that enables editing of restricted file . Examples of the editor include Eclipse Visual Studio Emacs and so forth. The command notifies the user component that zafe plugin is enabled in the editor. In an embodiment of the invention zafe plugin is a Zafesoft proprietary software code installed in the editor.

In an embodiment of the present invention a command is used by kernel component to set restricted file header information into the cache of user component . Kernel component needs to preserve the header of restricted file in the cache thereby protecting restricted file from scenarios where the content of restricted file is initially saved in a temporary file and then renamed in its original filename. In such a case the command input by kernel component and the output sent by user component is as follows 

The return value of this command from user component is 0 if restricted file belongs to a project and the header is successfully set and 1 if restricted file does not belong to a project.

In an embodiment of the present invention a command is sent by the plugin to user component when the editor is closed.

A command is used by entity to communicate the opening of restricted file . In an embodiment of the present invention entity is an IDE plug in. IDE is an Integrated Development Environment such as Eclipse. User component creates a file object if it has not already been created in a file collection associated with the project. User component increments the active file count which denotes the number of restricted files that are open on DPS . If this count is greater than zero the printing process is disabled. Kernel component also increments the reference count of restricted file in the file object.

 0 if the user component is able to successfully register the opening of the file 1 otherwise. For example in case restricted file path is invalid.

A command is used by entity to communicate information pertaining to the closing of restricted file . In an embodiment of the present invention entity is an IDE plug in. This command is used by the IDE plug in to communicate the closing operation of the IDE. User component decrements the reference count of the file stored in the file object. If this count becomes zero user component removes the file object from the file collection associated with the project thereby decrementing the active file count. If this count becomes zero the printing process is enabled.

The return value of this command from user component is 0 if the user component is able to successfully register the closing of the file. 1 otherwise e.g. restricted file path is invalid.

A command is used by entity to communicate the pasting of content of restricted file . In an embodiment of the present invention entity is an IDE plug in. User component sets a flag in the file object associated with restricted file thereby incrementing the active file count. If this count is greater than zero the printing process is disabled.

The return value of this command from user component is 0 if the user component is able to mark restricted file as ForceZafe. 1 otherwise e.g. restricted file path is invalid.

A command is used by entity to obtain a communication port for creating a socket through which communication with user component takes place. In an embodiment of the present invention entity is an IDE plug in. User component finds a socket port on the machine and creates a socket by using its port number. User component also creates a thread which serves commands from this socket.

The return value of this command from user component is its socket port number on which communication between user component and kernel component will interact.

In an embodiment of the present invention user component uses an Application Programming Interface API to receive policies from server . The API returns the policies to user component . In an embodiment of the present invention the policies have the following XML format 

In an embodiment of the present invention an API is called by user component to receive an update on the policy relating to a project from server . Whenever a predefined time lapses user component calls this API. Thereafter user component communicates the time at which the policies relating to each project were last modified. This time is communicated at the previous call. Thereafter server on receiving the call compares the time at which the call was received with the actual value of the database relating to every project. If there is any change server returns all the policies pertaining to a particular project to user component . In this case the output from the API has the following XML format 

In an embodiment of the present invention an API is called by user component to obtain a list of projects pertaining to a user of DPS . In such a case the output from the API has the following XML format 

In an embodiment of the present invention an API is called by user component to check if server is running and reachable. The API returns true value if server is reachable.

Various embodiments of the present invention provide a method and system in which access to a restricted file is only provided to an authenticated entity. When an entity attempts to access the restricted file the entity is authenticated by a user component. Access to the restricted file is provided only if the authentication is successful.

In accordance with various embodiments of the present invention an authenticated entity can execute only authorized operations on the restricted file. Each time an entity attempts to perform an operation on the restricted file the entity is authenticated with respect to that operation. The entity is allowed to perform the operation only upon successful authentication.

Various embodiments of the present invention provide secure access to a restricted file without imposing unnecessary restrictions on an entity. Upon authentication the entity is allowed to perform a certain set of operations on the restricted file. This is achieved by encrypting and decrypting the content of the restricted file as required even when the entity is authenticated.

Furthermore the user component maintains a log of operations performed on a restricted file thereby keeping a track of the performed operations. The user component sends a record which includes the log to a server.

The method and system as described in the present invention or any of its components may be embodied in the form of a data processing system. Typical examples of a data processing system include a general purpose computer a programmed microprocessor a micro controller a peripheral integrated circuit element and other devices or arrangements of devices that are capable of implementing the acts constituting the method of the present invention.

The data processing system comprises a computer an input device a display unit the Internet and a microprocessor. The microprocessor is connected to a communication bus. The computer also comprises a memory which may include Random Access Memory RAM and Read Only Memory ROM . The data processing system also comprises a storage device which can be a hard disk drive or a removable storage drive such as a floppy disk drive optical disk drive and so forth. The storage device can also be other similar means for loading computer programs or other instructions into the computer system.

The data processing system executes computer readable program code that is stored in one or more storage elements in order to process input data. These storage elements may also hold data or other information as desired and may also be in the form of an information source or a physical memory element in the processing machine.

The computer readable program code may include various commands instructing the processing machine to perform specific tasks such as the acts constituting the method of the present invention. The computer readable program code may be in the form of a software program and the software may be in various forms such as system software or application software. Further the software may be in the form of a collection of separate programs a program module with a larger program or a portion of a program module. The software may also include modular programming in the form of object oriented programming. The processing of input data by the processing machine may be in response to user commands to results of previous processing or in response to a request made by another processing machine.

While embodiments of the present invention have been illustrated and described it will be clear that the present invention is not limited to these embodiments only. Numerous modifications changes variations substitutions and equivalents will be apparent to those skilled in the art without departing from the spirit and scope of the present invention as described in the claims.

