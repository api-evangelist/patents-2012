---

title: System and methods for delivering advanced natural language interaction applications
abstract: A system for delivering advanced natural language interaction applications, comprising a dialog interface module, a natural language interaction engine, a solution data repository component operating comprising at least one domain model, at least one language model, and a plurality of flow elements and rules for managing interactions with users, and an interface software module. Upon receipt of a request from a user via a network, the dialog interface module preprocesses the request and transmits it to the natural language interaction engine. The natural language interaction engine interprets the request using a plurality of language recognition rules stored in the solution data repository, and based at least determined semantic meaning or user intent, the natural language interaction engine forms an appropriate response and delivers the response to the user via the dialog module, or takes an appropriate action based on the request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08346563&OS=08346563&RS=08346563
owner: Artificial Solutions Ltd.
number: 08346563
owner_city: Stockholm
owner_country: SE
publication_date: 20120802
---
This application claims priority to U.S. provisional patent application Ser. No. 61 622 341 titled SYSTEM AND METHOD FOR PROVIDING A VIRTUAL ASSISTANT filed on Apr. 10 2012 the entire specification of which is incorporated hereby by reference.

The invention relates to the field of artificial intelligence and more particularly to the field of natural language interaction based applications such as virtual assistants.

Virtual assistants are an example of applications referred to herein as natural language applications that interact through natural language such as English Swedish Spanish Chinese with a human user. With respect to virtual assistants in particular these applications perform functions similar to those provided by human assistants in that they can engage in conversations with their users in order to perform functions similar to those provided by human assistants including for example providing information carrying out routine tasks or performing other operations as required. Many virtual assistants have been used in association with web sites with these virtual assistants often featuring the use of graphical images or avatars to simulate the experience of interacting with a human being.

While some natural language applications known in the art may possess rudimentary natural language understanding capabilities in reality most such applications and particularly most virtual assistants known in the art are tightly scripted applications that carry out a limited range of activities. While scripted agents have proven useful in many online scenarios their acceptance has generally been limited because when users are restricted in their ways of expressing themselves in natural language the communication language is not natural. Any notion of the virtual assistant s behaving like a real assistant disappears because too much effort is requested from the user when the user needs to know precisely what to say in order to achieve her goals. Thus there is a distinct need in the art for interpreting fluid and freely expressed natural language in various applications for example by virtual assistants. This challenge is exacerbated by the fact that even when equipped with rudimentary natural language interpretation natural language applications such as virtual assistants that seem to only know a small number of facts and who only talk about a very limited range of subjects such as appointment management do not seem very realistic to humans who are used to being able to say things in a fluid way shifting subjects easily and intermixing casual banter with task oriented speech.

The use of natural language applications generally and virtual assistants more particularly has also been hampered by the high degree of complexity and cost associated with developing and deploying virtual assistants particularly those that have any significant degree of natural language interpretation capability. Because applications capable of even basic natural language interpretation tend to require teams of computational linguists to develop the rate of adoption has been limited and the range of entities that have used virtual assistants tends to be limited to large companies that can afford the high time and cash investments needed to implement even marginal natural language applications.

Accordingly what is needed in the art is a system and various methods that enable organizations of all sizes to efficiently deploy useful natural language applications such as virtual assistants that are able to interpret a wide range of natural language inputs from users including casual off topic conversational elements as well as task oriented language.

Accordingly the inventor has conceived and reduced to practice in a preferred embodiment of the invention various systems and methods for delivering advanced natural language interaction applications.

According to a preferred embodiment of the invention a system for delivering advanced natural language interaction applications is disclosed. According to the embodiment the system comprises a dialog interface module a natural language interaction engine a solution data repository component operating comprising at least one domain model at least one language model and a plurality of flow elements and rules for managing interactions with users and an interface software module. Upon receipt of a request from a user via a network the dialog interface module preprocesses the request and transmits it to the natural language interaction engine. The natural language interaction engine interprets the request using a plurality of language recognition rules stored in the solution data repository and based at least determined semantic meaning or user intent the natural language interaction engine forms an appropriate response and delivers the response to the user via the dialog module or takes an appropriate automated action based o the request.

According to another preferred embodiment of the invention a method for delivering advanced natural language interaction applications is disclosed. According to the embodiment the method comprises the steps of a receiving a request from a user at a dialog interface module b pre processing the request by the dialog interface module c transmitting the request in text form to a natural language interpretation engine d evaluating the request against a plurality of conditions until either a determination is made that additional input is needed from the user or not further conditions exist e sending an appropriate response to the user or taking an appropriate action based at least on the results of step d and f awaiting a further user request or a session end event.

According to yet another preferred embodiment of the invention an automated assistant operating on a computing device is disclosed. According to the embodiment the system comprises a dialog interface module operating on the computing device and adapted for exchanging information with a user using one of a plurality of input and output means of the computing device a natural language interaction engine coupled to the dialog interface module for interpreting a received user request a solution data repository component operating comprising at least one domain model at least one language model and a plurality of flow elements and rules for managing interactions with users and an interface software module coupled to the natural language interaction engine and adapted to exchange data or commands with a plurality of external software services over a network. Upon receipt of a request from a user via an input means of the computing device the dialog interface module preprocesses the request and transmits it to the natural language interaction engine. The natural language interaction engine interprets the request using a plurality of language recognition rules stored in the solution data repository and based at least determined semantic meaning or user intent the natural language interaction engine forms an appropriate response and delivers the response to the dialog module which uses one or more output means of the computing device to provide a response to the user or takes an appropriate automated action based on the request.

The inventor has conceived and reduced to practice various systems and methods for advanced natural language interaction by applications.

One or more different inventions may be described in the present application. Further for one or more of the inventions described herein numerous alternative embodiments may be described it should be understood that these are presented for illustrative purposes only. The described embodiments are not intended to be limiting in any sense. One or more of the inventions may be widely applicable to numerous embodiments as is readily apparent from the disclosure. In general embodiments are described in sufficient detail to enable those skilled in the art to practice one or more of the inventions and it is to be understood that other embodiments may be utilized and that structural logical software electrical and other changes may be made without departing from the scope of the particular inventions. Accordingly those skilled in the art will recognize that one or more of the inventions may be practiced with various modifications and alterations. Particular features of one or more of the inventions may be described with reference to one or more particular embodiments or figures that form a part of the present disclosure and in which are shown by way of illustration specific embodiments of one or more of the inventions. It should be understood however that such features are not limited to usage in the one or more particular embodiments or figures with reference to which they are described. The present disclosure is neither a literal description of all embodiments of one or more of the inventions nor a listing of features of one or more of the inventions that must be present in all embodiments.

Headings of sections provided in this patent application and the title of this patent application are for convenience only and are not to be taken as limiting the disclosure in any way.

Devices that are in communication with each other need not be in continuous communication with each other unless expressly specified otherwise. In addition devices that are in communication with each other may communicate directly or indirectly through one or more intermediaries logical or physical.

A description of an embodiment with several components in communication with each other does not imply that all such components are required. To the contrary a variety of optional components may be described to illustrate a wide variety of possible embodiments of one or more of the inventions and in order to more fully illustrate one or more aspects of the inventions. Similarly although process steps method steps algorithms or the like may be described in a sequential order such processes methods and algorithms may generally be configured to work in alternate orders unless specifically stated to the contrary. In other words any sequence or order of steps that may be described in this patent application does not in and of itself indicate a requirement that the steps be performed in that order. The steps of described processes may be performed in any order practical. Further some steps may be performed simultaneously despite being described or implied as occurring non simultaneously e.g. because one step is described after the other step . Moreover the illustration of a process by its depiction in a drawing does not imply that the illustrated process is exclusive of other variations and modifications thereto does not imply that the illustrated process or any of its steps are necessary to one or more of the invention s and does not imply that the illustrated process is preferred. Also steps are generally described once per embodiment but this does not mean they must occur once or that they may only occur once each time a process method or algorithm is carried out or executed. Some steps may be omitted in some embodiments or some occurrences or some steps may be executed more than once in a given embodiment or occurrence.

When a single device or article is described it will be readily apparent that more than one device or article may be used in place of a single device or article. Similarly where more than one device or article is described it will be readily apparent that a single device or article may be used in place of the more than one device or article.

The functionality or the features of a device may be alternatively embodied by one or more other devices that are not explicitly described as having such functionality or features. Thus other embodiments of one or more of the inventions need not include the device itself.

Techniques and mechanisms described or referenced herein will sometimes be described in singular form for clarity. However it should be noted that particular embodiments include multiple iterations of a technique or multiple instantiations of a mechanism unless noted otherwise. Process descriptions or blocks in figures should be understood as representing modules segments or portions of code which include one or more executable instructions for implementing specific logical functions or steps in the process. Alternate implementations are included within the scope of embodiments of the present invention in which for example functions may be executed out of order from that shown or discussed including substantially concurrently or in reverse order depending on the functionality involved as would be understood by those having ordinary skill in the art.

As used herein virtual assistant means a software hardware or hybrid hardware software application that provides assistance to humans analogous to that provided by human assistants generally using an intuitive user interface such as one that allows a user to express her needs in natural language.

As used herein natural language interpretation means interpretation by a machine of one or a series of utterances made by a human user speaking or writing naturally in some cases natural language may be supplemented by gestural haptic or other input combined with natural language input for example saying move this here while pointing or clicking on an object and a later a location . That is a natural language interpreter generally does not require users to format their requests in simple fixed patterns such as a program might be required to do as for example when invoking a web service or an application programming interface API .

As used herein a dialog is a conversational exchange between two or more participants consisting of a generally unstructured sequence of natural language contributions in the form of requests responses statements and the like. A dialog is an interaction sequence that actually occurs i.e. in run time during a conversation exchange between a user and a natural language system.

As used herein a flow is a logical task unit comprising a set of related interaction steps required and preconfigured in order to perform a task. Typically a flow may comprise one or more transition conditions and operative nodes. A flow is typically defined in a natural language system as a series of predefined steps to perform when some triggering condition is satisfied.

As used herein an instructional path is a sequence of instructions from one or more flows that were invoked or executed during the delivery of a dialog by a natural language system. In effect an instructional path is the realization of one or more flows that occurs in an actual conversation or dialog between a user and a natural language system it represents the sequence of decisions or instructions taken in support of natural language conversation whereas the corresponding dialog is the actual sequence of what was said during the conversation by the parties involved rather than why it was said .

As used herein a natural language interaction system or a natural language system is a computer based system capable of interacting via dialogs with one or more users using natural language perhaps augmented by haptics gestures or other nonverbal means . Natural language systems carry out their function using dialogs which can be thought of also as the actual as executed sequence of interaction steps between a user and a natural language system. A natural language system may participate in a dialog by following the instructional steps of flows.

As used herein a language object means an abstract representation of a logical unit of human linguistic expression that has meaning and is suitable for processing by automated systems such as virtual assistants. Language objects in their simplest form are represented as sets of words that represent a plurality of variants of word forms or of a single common meaning including inflectional variants and variants connected by synonymy. That is generally a language object represents all variants and synonyms of a core word that represents it and language objects may contain grammatical variants of words as well such as verb tenses contractions and so forth .

As used herein script means an executable sequence of instructions generally stored or at least rendered for execution as plain text which can be executed by an appropriate script interpreter. Scripts may be written in any scripting language known in the art such as Perl Python PHP Ruby Groovy and the like or in any similar scripting language including proprietary scripting languages. As described variously herein scripts generally are executed upon occurrence of specific events such as initiation or termination of a user interaction session or the triggering of a business rule such as execute the following script if the number of active sessions exceed a configured number . Scripts can be nodes in flows in which case they are referred to as script nodes .

As used herein request or question means a user supplied or automatically supplied input to a natural language interaction based system as opposed to a system supplied output .

As used herein response means a system supplied output from a natural language interaction system as opposed to a user supplied or automatically supplied input .

As used herein condition means a rule or logical expression that if satisfied will allow for execution of one or more actions or will generate one or more effects. There are several types of conditions envisioned according to the invention comprising for example language recognition rules skip conditions and transition conditions.

As used herein a language recognition rule is a specific type of condition built up from language objects and used to parse or interpret a natural language expression.

As used herein trigger or a flow trigger is a construct which holds a condition and which makes the system activate and start executing a flow if the condition is fulfilled.

As used herein listener is a rule construct with a conditional part and an operational part. When the conditional part is fulfilled the operational part is invoked or executed whereupon it updates current state based on information present in the current state and in the natural language input the user request . Listeners may be configured to operate on a global level on a flow level or on a transition level and they are generally evaluated in that order.

As used herein transition or transition condition means a condition that determines whether the system should pass a transition to enter a new instructive step or process a node or a new transition . Transition may be input consuming requires user input or non input consuming does not require user input . Transitions may comprise one or more conditions and transitions can follow each other directly.

As used herein skip condition means a condition that is verified prior to executing an instructive step i.e. entering a node for example of a flow . If the condition is met e.g. some values have already been set previous in the system the system will skip executing the instructional step and will continue as if it has already been executed.

As used herein small talk means generally off topic conversation elements or social dialog such as greetings acknowledgements and the like that may be used to respond to user request. For example if during a flow devoted to making an airline reservation a user asks do you like to fly yourself a preprogrammed response or a random or other selection from a plurality of possible responses may be invoked which causes a response such as I never fly myself because I live in a machine .

As used herein safety net means a special flow type which is invoked when a user request fails to satisfy any language recognition rule in any other flow i.e. no matches were found it is used to ensure that some form of response is made after which generally the last active flow is resumed where it left off.

As used herein lemma means a word form chosen to represent a substantially complete set of inflectional variants of a given word. A lemma is typically the canonical or dictionary head form of a word e.g. the nominative singular for nouns or the infinitive for verbs. The inflectional variants may be seen as possible instances of the lemma whereas the lemma itself is an abstraction.

As used herein a domain model is an ontological hierarchical model of a specific domain of knowledge such as financial services . Such a model comprises a plurality of concepts which are typically represented as high level language objects and relationships between those concepts for example relationships such as genus and species hypernymy and hyponymy and so forth .

Generally the techniques disclosed herein may be implemented on hardware or a combination of software and hardware. For example they may be implemented in an operating system kernel in a separate user process in a library package bound into network applications on a specially constructed machine on an application specific integrated circuit ASIC or on a network interface card.

Software hardware hybrid implementations of at least some of the embodiments disclosed herein may be implemented on a programmable network resident machine which should be understood to include intermittently connected network aware machines selectively activated or reconfigured by a computer program stored in memory. Such network devices may have multiple network interfaces that may be configured or designed to utilize different types of network communication protocols. A general architecture for some of these machines may be disclosed herein in order to illustrate one or more exemplary means by which a given unit of functionality may be implemented. According to specific embodiments at least some of the features or functionalities of the various embodiments disclosed herein may be implemented on one or more general purpose computers associated with one or more networks such as for example an end user computer system a client computer a network server or other server system a mobile computing device e.g. tablet computing device mobile phone smartphone laptop and the like a consumer electronic device a music player or any other suitable electronic device router switch or the like or any combination thereof. In at least some embodiments at least some of the features or functionalities of the various embodiments disclosed herein may be implemented in one or more virtualized computing environments e.g. network computing clouds virtual machines hosted on one or more physical computing machines or the like . Moreover in some embodiments one or more aspects or all aspects of the invention may optionally be implemented via a specially programmed chip for instance an application specific integrated circuit or ASIC or an erasable programmable read only memory or EPROM or via some other hardware only approach known in the art.

Referring now to there is shown a block diagram depicting an exemplary computing device suitable for implementing at least a portion of the features or functionalities disclosed herein. Computing device may be for example any one of the computing machines listed in the previous paragraph or indeed any other electronic device capable of executing software or hardware based instructions according to one or more programs stored in memory. Computing device may be adapted to communicate with a plurality of other computing devices such as clients or servers over communications networks such as a wide area network a metropolitan area network a local area network a wireless network the Internet or any other network using known protocols for such communication whether wireless or wired.

In one embodiment computing device includes one or more central processing units CPU one or more interfaces and one or more busses such as a peripheral component interconnect PCI bus . When acting under the control of appropriate software or firmware CPU may be responsible for implementing specific functions associated with the functions of a specifically configured computing device or machine. For example in at least one embodiment a computing device may be configured or designed to function as a server system utilizing CPU local memory and or remote memory and interface s . In at least one embodiment CPU may be caused to perform one or more of the different types of functions and or operations under the control of software modules or components which for example may include an operating system and any appropriate applications software drivers and the like.

CPU may include one or more processors such as for example a processor from one of the Intel ARM Qualcomm and AMD families of microprocessors. In some embodiments processors may include specially designed hardware such as application specific integrated circuits ASICs electrically erasable programmable read only memories EEPROMs field programmable gate arrays FPGAs and so forth for controlling operations of computing device . In a specific embodiment a local memory such as non volatile random access memory RAM and or read only memory ROM including for example one or more levels of cached memory may also form part of CPU . However there are many different ways in which memory may be coupled to system . Memory may be used for a variety of purposes such as for example caching and or storing data programming instructions and the like.

As used herein the term processor is not limited merely to those integrated circuits referred to in the art as a processor a mobile processor or a microprocessor but broadly refers to a microcontroller a microcomputer a programmable logic controller an application specific integrated circuit and any other programmable circuit.

In one embodiment interfaces are provided as network interface cards NICs . Generally NICs control the sending and receiving of data packets over a computer network other types of interfaces may for example support other peripherals used with computing device . Among the interfaces that may be provided are Ethernet interfaces frame relay interfaces cable interfaces DSL interfaces token ring interfaces graphics interfaces and the like. In addition various types of interfaces may be provided such as for example universal serial bus USB Serial Ethernet Firewire PCI parallel radio frequency RF Bluetooth near field communications e.g. using near field magnetics 802.11 WiFi frame relay TCP IP ISDN fast Ethernet interfaces Gigabit Ethernet interfaces asynchronous transfer mode ATM interfaces high speed serial interface HSSI interfaces Point of Sale POS interfaces fiber data distributed interfaces FDDIs and the like. Generally such interfaces may include ports appropriate for communication with appropriate media. In some cases they may also include an independent processor and in some instances volatile and or non volatile memory e.g. RAM .

Although the system shown in illustrates one specific architecture for a computing device for implementing one or more of the inventions described herein it is by no means the only device architecture on which at least a portion of the features and techniques described herein may be implemented. For example architectures having one or any number of processors may be used and such processors may be present in a single device or distributed among any number of devices. In one embodiment a single processor handles communications as well as routing computations while in other embodiments a separate dedicated communications processor may be provided. In various embodiments different types of features or functionalities may be implemented in a system according to the invention that includes a client device such as a tablet device or smartphone running client software and server systems such as a server system described in more detail below .

Regardless of network device configuration the system of the present invention may employ one or more memories or memory modules such as for example remote memory block and local memory configured to store data program instructions for the general purpose network operations or other information relating to the functionality of the embodiments described herein or any combinations of the above . Program instructions may control execution of or comprise an operating system and or one or more applications for example. Memory or memories may also be configured to store data structures configuration data encryption data historical system operations information or any other specific or generic non program information described herein.

Because such information and program instructions may be employed to implement one or more systems or methods described herein at least some network device embodiments may include nontransitory machine readable storage media which for example may be configured or designed to store program instructions state information and the like for performing various operations described herein. Examples of such nontransitory machine readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROM disks magneto optical media such as optical disks and hardware devices that are specially configured to store and perform program instructions such as read only memory devices ROM flash memory solid state drives memristor memory random access memory RAM and the like. Examples of program instructions include both object code such as may be produced by a compiler machine code such as may be produced by an assembler or a linker byte code such as may be generated by for example a Java compiler and may be executed using a Java virtual machine or equivalent or files containing higher level code that may be executed by the computer using an interpreter for example scripts written in Python Perl Ruby Groovy or any other scripting language .

In some embodiments systems according to the present invention may be implemented on a standalone computing system. Referring now to there is shown a block diagram depicting a typical exemplary architecture of one or more embodiments or components thereof on a standalone computing system. Computing device includes processors that may run software that carry out one or more functions or applications of embodiments of the invention such as for example a client application . Processors may carry out computing instructions under control of an operating system such as for example a version of Microsoft s Windows operating system Apple s Mac OS X or iOS operating systems some variety of the Linux operating system Google s Android operating system or the like. In many cases one or more shared services may be operable in system and may be useful for providing common services to client applications . Services may for example be Windows services user space common services in a Linux environment or any other type of common service architecture used with operating system . Input devices may be of any type suitable for receiving user input including for example a keyboard touchscreen microphone for example for voice input mouse touchpad trackball or any combination thereof. Output devices may be of any type suitable for providing output to one or more users whether remote or local to system and may include for example one or more screens for visual output speakers printers or any combination thereof. Memory may be random access memory having any structure and architecture known in the art for use by processors for example to run software. Storage devices may be any magnetic optical mechanical memristor or electrical storage device for storage of data in digital form. Examples of storage devices include flash memory magnetic hard drive CD ROM and or the like.

In some embodiments systems of the present invention may be implemented on a distributed computing network such as one having any number of clients and or servers. Referring now to there is shown a block diagram depicting an exemplary architecture for implementing at least a portion of a system according to an embodiment of the invention on a distributed computing network. According to the embodiment any number of clients may be provided. Each client may run software for implementing client side portions of the present invention clients may comprise a system such as that illustrated in . In addition any number of servers may be provided for handling requests received from one or more clients . Clients and servers may communicate with one another via one or more electronic networks which may be in various embodiments any of the Internet a wide area network a mobile telephony network a wireless network such as WiFi Wimax and so forth or a local area network or indeed any network topology known in the art the invention does not prefer any one network topology over any other . Networks may be implemented using any known network protocols including for example wired and or wireless protocols.

In addition in some embodiments servers may call external services when needed to obtain additional information or to refer to additional data concerning a particular call. Communications with external services may take place for example via one or more networks . In various embodiments external services may comprise web enabled services or functionality related to or installed on the hardware device itself. For example in an embodiment where client applications are implemented on a smartphone or other electronic device client applications may obtain information stored in a server system in the cloud or on an external service deployed on one or more of a particular enterprise s or user s premises.

In some embodiments of the invention clients or servers or both may make use of one or more specialized services or appliances that may be deployed locally or remotely across one or more networks . For example one or more databases may be used or referred to by one or more embodiments of the invention. It should be understood by one having ordinary skill in the art that databases may be arranged in a wide variety of architectures and using a wide variety of data access and manipulation means. For example in various embodiments one or more databases may comprise a relational database system using a structured query language SQL while others may comprise an alternative data storage technology such as those referred to in the art as NoSQL for example Hadoop MapReduce BigTable and so forth . In some embodiments variant database architectures such as column oriented databases in memory databases clustered databases distributed databases or even flat file data repositories may be used according to the invention. It will be appreciated by one having ordinary skill in the art that any combination of known or future database technologies may be used as appropriate unless a specific database technology or a specific arrangement of components is specified for a particular embodiment herein. Moreover it should be appreciated that the term database as used herein may refer to a physical database machine a cluster of machines acting as a single database system or a logical database within an overall database management system. Unless a specific meaning is specified for a given use of the term database it should be construed to mean any of these senses of the word all of which are understood as a plain meaning of the term database by those having ordinary skill in the art.

Similarly most embodiments of the invention may make use of one or more security systems and configuration systems . Security and configuration management are common information technology IT and web functions and some amount of each are generally associated with any IT or web systems. It should be understood by one having ordinary skill in the art that any configuration or security subsystems known in the art now or in the future may be used in conjunction with embodiments of the invention without limitation unless a specific security or configuration system or approach is specifically required by the description of any specific embodiment.

In various embodiments functionality for implementing systems or methods of the present invention may be distributed among any number of client and or server components. For example various software modules may be implemented for performing various functions in connection with the present invention and such modules can be variously implemented to run on server and or client components.

In order to formulate one or more appropriate responses to request natural language interaction engine carries out a process that can be broadly described as taking place in three steps. First natural language interaction engine analyzes request to determine its meaning usually by determining the user s intent . Analysis may require preprocessing for example to convert a spoken request into a textual form suitable for further analysis although it should be noted that in some embodiments audio data obtained from a spoken request could be analyzed directly using one or more speech analytics technologies known in the art . Analysis typically involves parsing request and then analyzing its semantic content to determine one or more possible user intentions that motivated request . In many cases this may be straightforward for instance a request might be Please set my alarm for 8 am and accordingly the user s intent would easily be understood once the sentence was parsed but in other cases it might be anything but straightforward for instance a user might say Get out of here which has several possible intentions depending on context . Thus it could be that output from analysis could involve a certain amount of uncertainty for instance in cases where an output of analysis step comprises a list of possible user intents perhaps with weights indicating their likelihood of being the user s actual intention.

Once analysis is completed natural language interaction engine may undertake a reasoning step to further elaborate or to better determine user intent. Interaction engine may use advanced linguistic interpretation and business rules to simulate intelligent thinking allowing interaction engine to appear to reason like a human and to determine a most appropriate way to respond to a user request . During this reasoning process interaction engine may take into account many contextual factors such as date time location of user entities and facts discussed in a current or recent dialog active flows local context global context information picked up in previous dialogs data about a user and the like. In addition inferences may be drawn based on data about one or more users for example when users do this they normally also want to do that . For example if a user inquires about next year s insurance premium interaction engine may understand context of next year but may need to seek clarification about whether the user is asking about home or motor insurance. In general the goal of reasoning is to reduce ambiguity about what a user meant in request and to apply rules or other logical processing to take into account the extended context in which request was made in order to facilitate the final step of reacting . Once user intent is understood and relevant context has been taken into account natural language interaction engine may select and execute appropriate actions needed to react to request . Suitable reactions may be to give an appropriate verbal textual visual or haptic response to ask for more information to disambiguate user intent when for example disambiguation could not be carried out during reasoning step to open a webpage to play a video to open another application to automatically fill in a form to invoke or update or interact with a third party service to perform some form of multimodal output or to execute a transaction for example by updating a database or by integrating with one or more backend or e commerce systems. These three steps analyze reason and react may all happen seamlessly in milliseconds with interaction engine able to handle thousands of interactions simultaneously or they may occur over an extended period of time depending on context and the state of the device being used or its connectivity.

Once a request is received by interaction engine in step initial processing of request takes place. Several possible initial processing substeps may be taken as needed including for example but not limited to preparing data received in request by transforming it into a form in which it can be used by further steps for instance by transcribing spoken audio input into text form suitable for parsing evaluating one or more data elements to determine whether there are any missing elements and if so attempting to retrieve those missing elements either from the author of request or from a separate data source such as on device data storage checking to see whether the request pertains to an existing interaction session in which case its data is appended to that sessions data store or represents a new session in which case new session identifier may be created and a new session data store instantiated and populated with data from request and so forth. In step preparations are made to carry out an interpretation process specifically by one or more of segmenting request into sentences tokenizing the resulting sentences for example by breaking them down into individual words numerals and other tokens and simplification of the results by removing unnecessary words and optionally formatting the processed request into a format suitable for use in interpretation process . Step is carried out using one or more of interpretation aids such as language properties characteristics of the language in which request was rendered such as standard sentence orders verb tenses and the like standard or custom abbreviations which may in some embodiments include domain specific abbreviation sets such as those used in making travel arrangements and standard or customized auto correction settings or both .

Once request has been preprocessed in steps and in step an interpretation process is carried out to determine whether any queries requests rules or other artifacts in one or more loaded knowledge bases are satisfied and if more than one satisfied rule is found choosing an appropriate rule . Interpretation is typically done one processed sentence at a time so following step a check is made to see if another request exists that is whether was there more than one logical request or sentence in request if yes then interpretation process may be repeated with the further request if no then execution passes to step . In step outputs generated by interpretation process are concatenated if necessary for instance if there were two or more logical requests in request and then in step session state variables may be updated. For example as a result of a request one or more steps in a flow may have been accomplished so state variables such as current flow state next flow step and flow history might be updated. As another example frequently more than one flow may be instantiated at a time within a given user interaction session for example when a user may switch between related topics naturally and each topic is the subject of one or more flows in such situations one flow may be activated by a request and a previously active flow might be put on a flow stack until it is reactivated by a subsequent request or by completion of the newly activated flow. In step one or more preconfigured views is selected for rendering output to the user who submitted request or another user for example in the case where a first user s request is to notify a second user of something in this case such a request could be considered as two requests one requiring notification of the second user of the thing requested and the other being notification of the first user that the desired notification of the second user was carried out and possibly whether it was responded to or acknowledged by the second user . Views may be graphical user input elements or may be some other output modality such as spoken text. Once an appropriate view has been selected one or more response documents is prepared and sent in step as a response responses are commonly but not necessarily rendered via hypertext transfer protocol HTTP or a secure version thereof although other output protocols are known in the art may be used according to the invention.

For example according to various embodiments at least some systems for efficiently delivering natural language applications such as virtual assistants may be configured to use natural language interaction engine a core component of a process that manages conversations with users creates responses from its own content base and receives and sends data from and to external systems. Natural language applications according to the invention may understand or use free format sentences even when grammatical or spelling errors may be present. Virtual assistants or other natural language interaction applications according to the invention may allow for change of topic or task interruptions initiation of subtasks or asking of counter questions and then may return to a previous topic or resume a task within a conversation either on request by the user or initiated itself. Natural language applications may be able to handle jargon specialized corporate vocabulary idioms and slang. For example a customer may ask their questions in a conversational style without having to go through a series of yes no queries or standardized prompts and questions. A natural language application might not provide the same response to a given request or question when provided twice as it may for example select a context dependent answer to a question e.g. a different response dependent on the time of the day and may handle deferred requests easily.

When a user submits a request it is generally handled by a dialog interface module within interaction engine . Dialog interface module may preprocess request by various means for instance by converting a spoken request into a textual or other form suitable for interpretation by natural language interaction engine . Dialog interface module may also in some embodiments process or provide one or more emotional or other attributes received with or about request for example a text based request may be accompanied by one or more metadata elements that specify emotional context or other attributes not present in the actual text of request so that such attributes may be considered by natural language interaction engine when interpreting request . Natural language interaction engine manages execution and state of one or more flows and manages transitions between flows as required by subsequent requests for example when a user changes topics . Natural language interaction engine uses a process such as that described at a high level with respect to to carry out an interpretation process such as that briefly described above using language recognition rules from one or more solution data repositories built up from one or more language objects flows language recognition rules and the like. Interpretation may be carried out by natural language interaction engine to determine one or more semantic meanings or user intents associated with a request . When a language recognition rule has been triggered and natural language interaction engine has taken any appropriate actions and possibly found one or more responses these are sent back to dialog interface module which then updates session state and provides a response to the user in an appropriate medium channel or mode or multimodally as described herein. Natural language interaction engine may commonly be integrated and interact with a back office environment which may for example comprise one or more enterprise or third party applications log files and analytics frameworks . Enterprise applications may for example be a customer relationship management CRM system a corporate transaction database a trouble ticket tracking system or any other type of enterprise applications known in the art. Connections between interaction engine and enterprise applications may be any of a number of interface means known in the art including but not limited to web services invocations proprietary application programming interfaces APIs Java remote procedure calls and so forth. Log files may be written directly to a file system or may be processed by a log server not shown which collects information from interaction engine and processes it for instance by parsing raw data and compressing it into a more efficient format for storage and may then either write log files directly to disk or add log entries in a relational database or other data storage system. As logs are loaded either periodically continuously or on demand they may be loaded into analytics framework where either automated or manual analysis or both may be conducted. Analysis may be performed for example in order to identify common dialog models that is sequences of dialog steps or flows that occur often in interactions between humans and virtual assistants or dialog flows that tend to result in abandonment or in user s seeking help or expressing frustration with a virtual assistant such analytical results may be helpful in improving one or more virtual assistants by identifying best and worst practices in virtual assistant dialog or flow designs and by identifying problems with language or domain models contained in solution data repository . When such useful lessons are learned they may be passed via periodic or occasional updates to build environment where they can be used by human natural language interface NLI developers to improve an existing natural language application such as a virtual assistant . In some embodiments modifications to data stored in solution data repository may be made automatically as a result of patterns or defects detected by analytics framework for example if it was determined that a certain node in a flow was always abandoned because the applicable language model had an error .

In general natural language interaction engine which for brevity may also be referred to simply as interaction engine makes use of one or more solution data repositories . Solution data repository will be described in detail below but in general comprises one or more collections of language objects and ontologies or domain models relevant to a particular natural language application or solution . Solution data repositories are generally prepared in a build environment although in many embodiments prebuilt solution data repositories may be supplemented using build environment by addition of organization specific or domain specific data. For example in preparing a travel agent virtual assistant using build environment specific language objects phrases vocabularies and so forth may be added that are likely to be relevant in travel related dialogs and a domain model or ontology of one or more domains and or subdomains related to travel and to likely adjacent subject matter domains for example credit card handling may be created or imported and edited . A knowledge base of solution data is a collection of language recognition rules conditions flows language objects ontologies scripts or domain models.

A virtual assistant request may be generated as discussed in the previous paragraph either by being spoken in various forms being provided as text in various forms being provided by haptics clicking pointing gesturing and the like or by any combination of these. A dialog interface module which may be comprised as voice and or text processing applications turns a user input into a request form that natural language interaction engine may understand . Natural language interaction engine may prepare evaluate interpret and identify a dialog session use enterprise and third party applications from a back office environment as deemed valuable to process then apply segmentation and tokenization processes to break a user input into its constituent elements which are then passed to a parsing and interpretation process then may generate an appropriate response or perform an appropriate action and send it back through a dialog interface module and on back to requestor .

As dialogs take place logging activity within a back office environment captures data pertaining to one or more session events which allows dialogs to be analyzed by an analysis framework at a later time which may provide insights into customer behavior and for possible quality and very specific structural metrics as desired.

Analysis framework may publish metrics and specific dialog criteria as captured by logging and analysis sending criteria on to a build environment for possible updating and inclusion into learning for new requests. Build environment may contain a large array of knowledge divided into items such as language and domain libraries previously captured knowledge and using coding and testing tools create dialogs for a variety of request types. Additional knowledge tools helpful to development process may contain rules for responding various object types for a variety of requests and information from similar request development activities and may be available for natural language interaction engine as a request session develops.

Interaction environment normally comprises a dialog interface and an interaction processing core engine . Dialog interface performs functions necessary for media specific interactions with users. A principal role of dialog interface is to receive input from a user in order that interaction engine core can successfully determine a user s meaning and the user s intent and to provide feedback or responses back to the user. For example when interactions are conducted using speech interfaces interaction may be either via a phone for example when a virtual assistant is used in place of a conventional IVR application or via a dedicated voice application for example when a user of a mobile application or a web site interacts with a virtual assistant using an application and no phone is involved . In either case or indeed in other cases such as embodiments where other means of exchanging voice communications via audio signals of which many are known in the art are used such as interaction with a building control virtual assistant using an intercom system it is generally necessary to convert speech input into some for of text and conversely to convert text output into some form of speech output although it should be noted there are limited means known in the art for analyzing speech signals directly known in the art as speech analytics technologies and these could be used directly to infer user meaning and intent . Normally this is done by a voice to text conversion layer within dialog interface comprising an automated speech recognition ASR engine and a text to speech TTS engine . Many of each of these components are well known in the art such as those available from Nuance Acapela and other vendors any suitable ASR and TTS engines may be used according to the invention. In some embodiments ASR and or TTS are deployed integrally to system as shown in while in others they may be deployed as separate services delivered over a network such as the Internet or a telecommunications network such external services architectures may employ ASR or TTS provided by one or more third party service providers. Input may also be received and output sent via text based media channels such as dedicated virtual assistant interfaces for instance when a virtual assistant equipped with a graphical avatar is embedded in a web site and when activated by a user is interacted with directly a social media interface such as Facebook Linkedln Twitter and the like or any of a number of other text based media channels known in the art but not shown in such as for example text based interaction with a virtual assistant from within a document such as a word processing document a spreadsheet document or a presentation document kiosks such as at airport check in counters and so forth .

Once input has been received it is passed as input to interaction engine core where it is reacted to and one or more responses may be generated. When responses are generated and sent to dialog interface they are converted using TTS to speech form or spoken output if required and delivered to a user via either or both of a voice application or a phone or if response is already in textual form it is passed directly to a text based output channel such as email virtual assistant social media and the like. As a further example illustrating how natural language interpretation can be used to enrich multimodal user interactions consider a combination mobile phone application that proceeds as follows. First a user presses a button to initiate the application which displays or plays a welcome prompt or both to the user. The user may say an utterance expressing her intent or goal for example I would like to arrange travel to Berlin tomorrow morning. The application may then display a selection of radio button style choices on the screen of the mobile phone for example comprising Flights Hotel Car Transport and Recommended . At substantially the same time the application may speak a phrase such as Where would you like to start to make travel plans Select a button or tell me what you want to do. The user and the application may throughout the subsequent interaction use a blend of spoken text and haptic interface conventions to exchange information and satisfy the user s original and any subsequently arising intention . Thus it can be seen that many examples of natural language interaction applications envisioned by the inventors may involve multimodal interactions comprising two or more interface modalities such as speech text buttons images videos vibrations sounds and so forth .

When input is received by natural language interaction engine it is handled by a natural language interaction core NLI core process in order to determine one or more meanings of a user s input and to infer therefrom the user s intent. Once a user s intent is understood or a determination is made that understanding of intent is not possible NLI core carries out flow processing dialog management and output generation processes as described in more detail below in order to formulate one or more appropriate responses to input . Once a plurality of responses are identified NLI core passes responses to dialog interface which prepares them and renders them to the requesting user in an appropriate form and via an appropriate delivery channel speech email IM chat virtual assistant bot etc. . In general every time input interpretation module receives and processes a user input and every time output generation module formulates a response and sends it to dialog interface log file generation module generates one or more log files in order to capture a history of interactions between users and natural language applications. In addition more or less detailed information pertaining to processes carried out by NLI core is passed to log file generation module as well in order that not only what transpired is recorded that is the inputs and outputs but also how it was done and why that is a history of decisions made rules executed and so forth in NLI core is captured . NLI core may in order to process user inputs or to create responses require access to one or more external data sources or external services such access is provided by one or more connection APIs of interface software module or integration manager which manage interactions between NLI core and external data sources and services. Such external entities may comprise a plurality of enterprise applications such as customer relationship management CRM systems transaction management systems trouble ticket tracking systems inventory management systems and so forth it will be appreciated by one having ordinary skill in the art that essentially any enterprise or third party applications may be interacted with using standards based APIs or other integration technologies and thus any such enterprise applications known in the art may be used by interaction environment as needed to serve users . Such external entities may also comprise a plurality of third party cloud based applications or any other third party services or applications accessible via public or private interfaces whether standards based or proprietary subject only to findability and security constraints.

NLI core when processing requests received from dialog manager uses one or more solution data repositories or simply solutions that it loads as required. Solutions generally comprise various combinations of business rules integrations that is configuration data necessary to carry out communications via connect APIs of interface software module with enterprise applications third party cloud applications and the like custom objects such as script objects used to encapsulate frequently used functionality domain objects which are collections of ontologies or ontological data sets that represent knowledge about one or more subject domains such as travel finance heart health furniture and so forth language recognition rules built up from language objects which may comprise a large number of formal models of various language elements for one or more languages language objects will be discussed in detail below scripts executable code and data units which may be invoked within language recognition rules and flows . These solution data components in turn may be preloaded as standardized knowledge bases when a natural language application is created or they may be hand crafted by one or more natural language interaction NLI developer within build environment or both it is quite common to start with a prebuilt set of knowledge base components and then to add new components or extend the added components from within build environment .

Build environment comprises several components organized in a preferred embodiment into a single application sometimes referred to as a studio from which an NLI developer may access client knowledge and data domain libraries and language libraries . Build environment typically comprises a graphical coding tool and one or more automated testing tools . Thus in a typical scenario a developer building a new natural language interaction application such as a virtual assistant would within a coding tool in build environment load one or more prebuilt language libraries and domain libraries edit these based on available client knowledge and data and then test the resulting knowledge base using one or more automated or manual testing tools in order to test the behavior of her new application prior to its use. Once satisfied with a new solution and with the associated application s behavior the developer would publish knowledge base which would then be available for NLI core to load and use in handling user requests . A key benefit of the build environment approach envisioned by the inventors is that it enables NLI developers who are not necessarily research scientists such as computational linguists to rapidly prototype test refine and then tune natural language applications for particular domains or business needs. This makes it possible to move natural language application development from being an activity typical of university research labs to one practiced commonly by mainstream application developers and users such as businesses large and small and other organizations desiring to use natural language applications in production.

According to a preferred embodiment of the invention the process just described is part of an overall closed loop process. The loop is made closed by the availability of an analytics framework which can be used to automatically or manually analyze natural language application performance in order to eliminate poorly functioning dialog elements improve customer satisfaction and so forth. Analytics framework generally takes as input a plurality of log files generated by log file generation module although in some embodiments analytics framework may take input directly in real time from interaction engine for example by receiving requests responses raw user inputs and processed outputs to users as they occur directly from the corresponding components of interaction engine and of course diagnostic information about decision making and operational processes occurring within interaction engine could similarly be obtained as they occur . Thus the log file driven architecture shown and discussed herein should be taken as exemplary and not limiting. In various embodiments analytics framework may comprise one or more of a top response analysis module a dialog browser a category analysis module a log file loader a report generator and a time based analytics module . In any particular embodiment of the invention some most or all of these components may be present within analytics framework moreover in some embodiments one or more of these components or other analytical components known in the art such as business intelligence engines datamarts and the like may be implemented as standalone components separate from analytics framework including for example delivery as web based or cloud based services from a third party analytics platform provider. It should be apparent to one having ordinary skill in the art that any combination or architecture of these and other analytical components may be used according to the invention and that the particular arrangement shown in is intended to be exemplary and not limiting.

Top response analytics module is a software module that computes a ranked list of responses generated by interaction engine to user requests in many embodiments a corresponding ranked list of requests that led to a particular response may be provided often by provision of a drill down capability so that when viewing a ranked list of responses a user may right click or take some other action to see what requests led to that response most commonly . Responses and corresponding requests may be ranked according to one of many numerical or qualitative parameters such as most popular most used most often abandoned from most often viewed most often complained about or any other similar ranking metric. Top response analytics module may automatically generate and maintain ranked lists of responses or may do so on request from an analyst or other authorized user or both . In some embodiments users may be allowed to specify one or more custom ranking criteria as long as they are susceptible of measurement based on data received from interaction engine such custom rankings may be conducted on an ad hoc basis although useful rankings may be added to the last of available standard rankings and could be added to any automated ranking processes as well if desired.

Dialog browser is a user interface element that allows an analyst or other authorized user to view or hear one or more interactions or dialogs between users and natural language applications. Users may be allowed to request random interaction sessions in which case one or more sessions would be displayed for viewing at a time such a view would be useful for example to a marketing analyst who wants to see how users interact by randomly browsing among user experiences. Users may also select one or more sessions for viewing or listening based typically on any of a wide range of filters or selection criteria made available through a user interface of dialog browser . For example a user could request to view all interactions with a specific user or with a specific user application pair or relating to a particular subject such as a particular product and so forth. Users may also request a specific interaction by providing a time or a session identifier or a customer name and a time or any other filtering arrangement that can distinguish the desired session from all others.

Category analysis module is typically a graphical user interface component that allows an analyst or other authorized user to view one or more or all sessions or interactions that pertain to a particular category such as a category within a domain model for instance by requesting to view a sampling of sessions involving furniture related questions . Users of category analysis module may be able for example to view all or a set of sessions or to view aggregated numerical data pertaining to such sessions that were about home equity loans. While viewing such a set of data or sessions the user might be able to explore for example whether certain questions related to home equity loans are more commonly received from customers that are actually considering taking out such a loan this might be determined for example by displaying columns of data about probability of loan application being taken and probability of closing of loan applications taken and allowing a user to rank sessions by one or another column in order to understand such patterns. It should be clear to one having ordinary skill in the art of data analytics that there are many ways of viewing and analyzing data of this type any of which may be included in category analysis module according to the invention.

Time based analysis module is typically a graphical user interface element that allows an analyst or other authorized user to configure conduct schedule and view the results of various analyses of one or more time based behaviors of natural language applications and or their users. For example time based analysis module may in some embodiments be used to identify trends in user behavior such as the emergence of new dominant questions or shifts in linguistic usage over time. Another example likely to occur quite readily would be the use of time based analysis module to study assimilation of new application capabilities upon their introduction in one or more natural language applications. When new capabilities for instance new language models improved business rules richer interaction modality options or expansion of domain coverage are added to an application such as a virtual assistant their use by those who interact with the modified natural language application is likely to vary over time as more and more users become accustomed to the new capabilities such user assimilation can be studied to learn how long to wait before expecting changes in user behavior such knowledge would be quite useful in avoiding for example the premature termination of an experimental feature which might occur if knowledge engineers misunderstood a normal uptake curve for lack of user interest . Similarly in some embodiments time based analysis of users natural language inquiries may uncover emerging linguistic elements such as the emergence of new buzzwords common off topic questions such as What do you think of the Avengers movie or topics of interest any of which might suggest modifications to knowledge base to maintain a high degree of user acceptance and virtual assistant fluency .

Report generator is typically a graphical user interface element that allows an analyst or other authorized user to design configure schedule edit manage distribution of or view one or more periodic or ad hoc reports regarding operation of interaction engine or virtual assistants hosted by it. Similarly to output from time based analysis module reports generally prove very useful in detecting trends or emerging problems with natural language applications language or domain models or the infrastructure or applications of interaction engine . For example a report might provide tabular and graphical data pertaining to the number of occurrences of various types of interactions using one or more applications and data for each row or category of interaction for each time period might include items such as the number and or percentage of sessions that terminated either prematurely or in an unexpected way the number of sessions that resulted in or involved a product sales inquiry the number of those that resulted in a sale and so forth. It is common in the art for reports to be useful in understanding such issues as diurnal patterns of user behavior for example users might be more likely to conclude purchases during early evening hours and might engage in a higher level of off topic small talk in the hours after midnight . It should be clear to one having ordinary skill in the art that any of the many infrastructure data presentation drill down and drill up filtering and other options known in the well developed art of enterprise application reporting may be used according to the invention. Of course the range of inferences that might be made through use of analytics based on natural language interaction engine data is quite broad. For example in some implementations it may be desirable to identify particular channels media types such as email phone kiosk instant messaging and so forth particular operating systems particular browsers and similar specifics regarding a plurality of users. As an exemplary use of such data it may be that users of Macintosh computers from Apple might be found to demonstrate certain typical habits and preferences knowledge of which might allow for effective tailoring of natural language interaction engine to better serve those customers.

Log file loader is typically a graphical user interface element that allows an analyst or other authorized user to manage the configuration and scheduling of log file loading or to configure real time data acquisition when that approach is taken to gathering data from interaction engine and to carry out ad hoc log file activities such as log file pruning exporting of log files to other systems archiving or configuring archival of log files onto long term storage systems and so forth.

In most embodiments the various components of analytics framework are tightly coupled for instance by allowing an analyst or other user to move directly from one tool or view to another with a simple user interface action such as selecting a button choosing a tab or picking a different view from a context sensitive menu. For example a user viewing a list of sessions in a category analysis screen might select one or more sessions from a list for example by shift clicking them using a mouse or using a check button interface element and then select browse dialogs to view the selected sessions in dialog browser . It should be appreciated by one having ordinary skill in the art that many styles of linking of related user interface elements and analytic functionality exist in the art any of which may be used according to the invention.

In general once application server has received request and its associated data in step it checks to see if it has an active session with the same session identifier as request of course if request only has a locally generated that is generated locally to the source of request rather than at application server temporary session identifier this will not be the case . If a permanent session identifier exists then in step that session is continued otherwise in step a new session is created. When a new session is created application server instantiates a session object which typically is instantiated with certain default session data for instance at least a new unique session identifier which can be used to associate future requests and responses with the particular session object and therefore with session data other common default data types may comprise session state variables default session configuration options and so forth. Also on session creation a user data is generally initiated with at least a portion of the data from request . In addition to session data and user data when a session is created one or more script events may be loaded each of which may be configured to execute upon occurrence of one or more specific events for instance session specific events such as session created session termination session timeout and the like or other events such as environmental events for example environment network connected or environment network disconnected . In most embodiments scripts that are to be loaded on session creation are determined based on factors such as session type speech enabled browser based etc. and the identity of the virtual assistant associated with the session which is usually determined by some configurable combination of session type and request data . In most embodiments all session data is accessible to authorized scripts that is scripts that might be loaded as request based scripts as session based scripts such as a script which is executed on occurrence of a session created event or as system level scripts such as scripts that are executed every n minutes to collect data from active sessions . In addition scripts are provided with access to script accessible data comprising for example but not limited to cookies key value pairs KVPs environment variables and the like.

In addition to session identifiers identifiers for specific request response pairs i.e. request identifiers and for specific flows i.e. flow identifiers or transactions i.e. transaction identifiers may be used according to the invention. When a new session is created in step one or more of these identifiers may be created as well for example a request identifier could be generated for the specific request that led to the creation of a new session although a request identifier could be generated at the source of the request and used throughout the system thereafter since application server would not necessarily need to uniquely assign request identifiers since it can drop a request identifier upon handling all flow related activities required to generate one or more responses to the request .

A similar process may be used during tokenization of sentences into individual words and other tokens as appropriate to prevent inadvertent splitting of words with abbreviations or special characters in them and to extract words from text strings that may comprise other non word elements for example text strings might comprise one or more emoticons punctuation elements digits or even complex objects such as uniform resource locator addresses or URLs . Tokenization of a sentence typically into words follows in accordance with one or more lists of word delimiters or using other tokenization approaches known in the art. For example the two sentence text passage discussed above would be tokenized as follows. For the first sentence the words would be Isn t there a ocntact section at www.whatever.com . For the second sentence the list of words would be Is your compny in Canc n . Simplification may be defined by a set of defaults and possibly additional language specific properties. Prepared English language property files for example would do this to the example sentences just described Isn t maps to isnt language objects typically are named without punctuation marks although this is not necessary to the invention but rather is a convenience Is maps to is language objects typically are not capitalized which again is a convention and not a requirement any conventions would be stored in language properties and Canc n maps to cancun both rules just mentioned apply here everything else would remain unchanged. For languages from very different linguistic groups such as Chinese other tokenization approaches known in the art may be used without departing from the scope of the invention.

During automatic spelling correction individual words forming sentences may be compared with entries in one or more auto correction property files . If an entry is found that word is exchanged with the corrected form. For example in the second sentence of the example we have been discussing two letters are switched a typographical error that a standard auto correction list anticipates it contains an entry of compny company . Spelling tolerance may be applied to all or some portion of words in user input that are not found in solution dictionary it should be noted that various approaches to spelling tolerance are known in the art beyond the novel one described herein any automated spelling correction techniques known in the art such as i spell or a spell may be used according to the invention . Dictionary may be composed of words taken from language objects. For these words a property file mechanism finds a closest match in dictionary within some defined spelling tolerance value . Instead of an unknown word a closest dictionary word may be used within parsing or interpretation process although in some cases unknown words may be left unchanged for example to be considered using various analytics tools at a later time by an NLI developer possibly leading to creation of one or more new language objects incorporating the unknown word . It has been found that spelling tolerance has an important effect on performance.

In case of a default spelling tolerance threshold such as 15 it could be depending on solution data that input ocntact fulfills a word condition contact correspondence generally depends on both dictionary and a threshold value . In most embodiments special evaluation rules may be used to assist for instance the example just shown has two errors in seven characters which would generate an error value of around 29 but a special evaluation rule that looks for two switched characters brings the value within threshold and causes a match to occur. As a convention in some embodiments if the threshold is set to 0 spelling tolerance is skipped. At the end of pre processing modified user input is delivered to subsequent steps most particularly to parsing and interpretation process .

Step is the first step of a subprocess for dropping an active node. In step any global on drop scripts are executed in a specified order there will often be no global on drop scripts so in effect this step and indeed step is an optional step . Then in step if any on drop scripts are specified in the active flow being dropped they are executed in order and finally in step the active flow is removed from the flow stack and execution passes to step with a check of the flow stack to determine if it is empty.

The code sample shown expressed in a typical markup format in this case JSON is an example of a dynamic interface according to the invention wherein one or more user interface elements displayed as part of a response to a user s request is rendered dynamic in that it is possible through manipulation of session level variables such as emotions to indicate to the user interface renderer for example a web browser which of several possible emotion indicating avatar visualizations should be shown the requesting user. In the example shown in the code fragment above emotionPath refers to a relative or absolute path to one or more resources files images video clips and the like each of which may correspond to one or more of the available emotions in this example one or more of neutral happy and sad . Also the example shows a selection of a default or initial emotion for visualization happy and a fallback emotion for use when for example a request results in a safety net response . By use of dynamic emotional states for a virtual assistant rendered for example by showing an avatar with various emotional affects as is known in the art to do the embodiment enables a much more dynamic and natural user experience when optional step is used . Once a complete response document is ready the selected response may effect among other things certain processes such as mailing or writing of files such actions may be triggered by scripts that run after detection and therefore in step response data is made available as needed. Parts of these data form together with more general interaction environment data a dynamic part of a response document and are available in the output data. In some embodiments one or more view variables that receive their values from response data may be modified in step during runtime via script expression replacement and or via modifiable variables.

Language objects are linguistic rules that have meaning and structure and that are used to recognize words phrases or a combination of both. A language object may include one or more synonyms and phrasings that depict the same idea e.g. different ways of answering affirmatively such as yes yeah okay of course by all means sounds great give it a go and so forth . A language object may contain the required grammatical alternatives for a word. For example for to be a language object might contain among others tokens words such as be am is are were was and so forth. By convention a special character such as may be used as the first character in the name of a language object to signify that the name is that of a language object in some embodiments a lexical convention of this sort assists natural language interaction engine in identifying the beginning of a sub rule such as a language object.

The following sections describe different types of language objects that may be used to build a language object base as part of a knowledge base of solution data repository . Language object types are listed ordered roughly by their increasing degree of linguistic complexity.

LEX language objects are the smallest most elementary building blocks of a language object library from which more complex language object structures are built. That is LEX language objects generally correspond to and can taken as basic dictionary entries. A LEX language object may correspond to a lemma and capture a full set of inflectional forms or variants of a given word irrespective of whether that set may have several different meanings. There typically will be only one LEX language object created for a lemma and its set of inflectional forms as is illustrated here by a language object representing the noun bark 

It will be appreciated by one having ordinary skill in the art that there are any number of other object labeling approaches that could be adopted these exemplary embodiments are not to be taken as limiting. For purposes of consistency the examples given below will follow one approach.

LEX language objects always belong to a specific part of speech. If more than one part of speech is derived from same stem separate LEX language objects are created for each one of these. For example 

Identical words may sometimes have a similar part of speech but may inflect differently. In that case they may correspond to two different lemmas and therefore possibly two different LEX language objects may need to be created one for each word. For example the word land in Swedish may have two meanings country and garden patch which share several inflectional forms but not all of them. This may be modeled as 

MUL language objects may form the multi word correspondence to LEX language objects as they capture dictionary level entries of multi word units that are meant for use as building blocks in higher level language objects. MUL language objects may be generally built from LEX language objects. MUL language objects may only contain inflectional variations of a multi word unit captured by their kernel name as opposed to higher level language objects which may also contain synonymic variations thereof . Exceptions to this general rule may be constituted by slight changes in word order and variations in function words. Phrasal verbs verbs with a preposition form typical MUL language objects for example the phrasal verb give up may constitute a MUL language object comprising two LEX objects give and up . MUL language objects may also be used for other kinds of word groups that often appear consecutively therefore it may be convenient to have language objects that may be referred to when building higher level language objects.

Mixed language objects group LEX language objects which represent lemmas deriving from a same lexical root e.g. happy happily and happiness. This type of language object may be referred to as a mixed language object since it may contain entries with various parts of speech for example a mixed language object could comprise a language object further comprising the LEX objects LEX.HAPPY.ADJ LEX.HAPPILY.ADV and so forth.

Since linguistically a set of lemmas deriving from a same root is fuzzy a MIX language object may be defined with various degrees of restrictiveness as deemed appropriate in its respective context of use. Due to a potentially diverse list of language objects referenced by a MIX language object names of MIX language objects typically do not reference a specific part of speech. Grouping only an adjective and its corresponding adverb rather than all words deriving from a same root may be used in the same context. In this case only a certain subset of all possible parts of speech may be included in the language object. This may be signaled in a language object name by adding a corresponding part of speech suffixes in alphabetical order separated by underscores. Included are parts of speech suffixes in those cases to provide a clearer description of the language object s content. Word Level Synonym Language Objects SYN. 

Since natural language may have various ways of expressing a same or very similar concept language object library needs structures to represent types of synonymy. Synonymy may occur at word level for example different words denoting a same concept or at phrase level for example different linguistically more complex ways of expressing a same concept . Synonym language objects may similarly either be at word level or at phrase level. SYN language objects are conventionally synonym language objects at word level.

All words grouped in a SYN language object are interchangeable. Phrase level language objects are marked as PHR language objects see paragraph below referring to PHR language objects . SYN language objects may group LEX and MUL and occasionally also PHR language objects to represent words or phrases sharing the same or a very similar meaning.

There are of course other possible approaches to grouping. Words with similar meanings may be grouped in more than one way with different objectives and with varying degrees of granularity. It will be appreciated by one having ordinary skill in the art that there are any number of other grouping approaches that could be adopted these exemplary embodiments are not to be taken as limiting.

Words may generally have more than one meaning their senses. Note that SYN language objects may be defined with respect to a certain sense of a word. An adjective sharp may have at least two senses an original one used with knives for instance and a metaphorical one used for describing intelligent people. He is really sharp means the same as He is really intelligent yet the knife is sharp cannot be replaced by the knife is intelligent. Therefore these two senses may be represented by different SYN language objects. One may be able to think of a context in which all words grouped in a SYN language object are interchangeable. Since words may have several senses basic SYN language objects are sometimes context dependent.

Proper synonyms may typically belong to a single part of speech. This may hold for basic SYN language objects. Whenever entries in a SYN language object are of the same part of speech an appropriate part of speech suffix may be added to a language object name. If a language object contains entries with different parts of speech no suffix will generally be added again naming described herein is merely exemplary of one embodiment and not limiting .

SYN language objects may be used to capture close synonymic relationships between words this may be referred to as a language object having narrow semantic scope. One may wish to capture synonymic groupings that semantically are somewhat looser and hence have a wider coverage. To mark an extended coverage of these wider scope synonym language objects we add the suffix .WIDE to the language object name.

PHR language objects may represent all possible ways of expressing a phrase or partial sentence for example What is the price of X Agreement Consent or How long will it take for X to happen A linguistic phrase may be arbitrarily complex and so may PHR language objects. Some PHR language objects may capture noun phrase units while others may capture several sentence constituents. As such PHR language objects may typically reference LEX MUL SYN and other PHR language objects. For example a PHR language object may refer to other PHR language objects as when PHR what is your name is composed from phrases tell me what is as well as LEX objects your and name .

If a PHR language object is comprised of content light words such as I is what extra attention may need to be paid to word order. It should be noted that other words may come between conditioned constituents when using a operator. Important PHR language objects may be tested against real inputs. For example a code may be restricted by for number tense or any other morphosyntactic feature where appropriate. In a language object like PHR.CAN I BUY it does for example not make sense to allow for past tense forms of a verb.

LIST language objects contain lists of concepts such as colors car brands and countries. LIST language objects may be composed of other LIST language objects. List language objects that list entries of the same part of speech POS may also indicate this part of speech in language object name.

Theme language objects may group words on basis of theme. Words generally have different meaning but are associated to a common theme. One may think of theme language objects as keyword language objects. An ideal THEME language object may not be dependent on context but signals a theme regardless of where it is triggered. For example a THEME language object could be CAR and could comprise various synonyms for car as well as other language objects such as car parts a LIST object car brands and so forth.

REC s are quasi rec s which may not fit under PHR or any other category. They may be very wide or rather specific but may not have consistent structure. Both their scope and naming may be highly pragmatic.

Some high level language objects may be very likely to occur in many different types of projects such as questions about a company about opening hours or driving directions to stores or offices. These language objects may occur in many instances so it may be economical to code a linguistic part of them only once and adapt a comparatively minor set of differences in content from instance to instance. This set of language objects may be referred to as PROJECT language objects PROJ . To make PROJ language objects recognizable from project to project they may be named the same across projects. It will be appreciated by one having ordinary skill in the art that condition codes may be adopted based on individual requirements of a project at hand.

A language object structure may provide us with capability to refine broader language objects by imposing specific constraints or filters upon them. One application of a constraining operation for example may be to obtain only past tense forms for a given verb from a language object representing all inflectional forms of that verb. To this effect a constraint operator may be used to selectively form conditional subsets of entities represented by a given language object. As an example consider a need to obtain only past tense inflections of the verb to go . While a new language object may be created to capture those specific entities we may also use a constraint operator on a generic language object to filter for its past tense forms.

As shown in in order to build a language model one typically starts with a prebuilt language model of a target language. Language model is built by conducting morphological analysis of a language to determine its underlying structure and its vocabulary that is a set of lemmas from which utterances in the target language may be built . After obtaining an applicable language model an NLI developer typically acquires a balanced corpus representing a large set of utterances typically but not necessarily only a corpus of text samples such as Wikipedia logs of natural language interactions between users or between users and virtual assistants or other natural language applications or question and answer pairs or QAPs that are representative of the language to be modeled. Usually preprocessing of corpus is performed to tag each word according to its part of speech a process known as POS tagging which may be performed manually or more typically and preferably using any of various POS tagging tools known in the art . Once a corpus has been prepared and POS tagged in step data analysis is performed on the corpus. Data analysis usually comprises at least morphological analysis and a variety of statistical analyses. Morphological analysis is conducted to lemmatize corpus that is each word is analyzed or stemmed to determine which lemma is the basis for the word. For example the word banking could be many things after POS tagging it would be tagged as a gerund noun but ambiguity would remain because would is unclear whether banking refers to an activity of a financial institution or of an airplane. Morphological analysis would convert banking to its lemma form bank . Once morphological analysis has been conducted on corpus various statistical analyses may be conducted typically comprising at least an analysis of lemma frequencies that is what percentage of word in corpus belong to each specific lemma to enable a modeler to prioritize activities since rare words might be ignored at least initially to allow more time for thorough modeling of more commonly used language elements . An inflector creates all word forms of the lemmas found even word forms not found in the corpus in order to build the LEX language objects semi automatically. Thus as an output from inflector we would have a full collection of word forms for those words found most commonly in the target language. Statistical analysis of corpus may also comprise analyzing frequencies of various combinations of words for example bigrams trigrams and n grams in order to identify commonly occurring word pairs triplets and so forth. These common groupings may be used to build a collection of higher level language objects such as PHR phrase objects. These high level language objects may in turn be augmented by expanding the library to fill in gaps identified either automatically or by the modeler. One typical technique used here is the creation of hierarchies and conditions of greater and greater scope and abstraction in order that a language model will be populated by an ordered range of objects from simple LEX objects through SYN objects and PHR objects to for example THEME objects. Finally these language objects of various levels of abstraction scope or complexity may be used to build general flows for example safety net flows that may be used by developers of natural language applications across a range of domains. Thus by undertaking sequentially the activities illustrated in each requiring its own tools and generally handling language objects of greater complexity scope and abstraction a language modeler may build a language library suitable for use by NLI developers to rapidly build natural language applications that are capable of realistically interacting with users using natural language utterances.

According to the embodiment build environment may be used to develop and deploy natural language applications such as application A and application B . In some embodiments natural language interaction engine is a mobile application that is deployed from an application store or downloaded directly from a web site or other source by a user and that interacts with one or more separate mobile applications using data from one or more solutions . In other embodiments solutions and might be loaded directly into applications and respectively. In yet other embodiments a solution and a natural language interaction engine may be embedded fully into a standalone mobile application while in other embodiments individual solutions may be deployed either as separate mobile applications that interact with engine or as modules that are downloaded to device and installed as add ons to engine . Build environment will typically comprise exemplary features described above with reference to . When a developer has completed and tested a natural language application such as a virtual assistant then mobile ready application deployment may be carried out across one or more data networks or mobile telephony networks to deliver the resulting application to a plurality of mobile devices either on demand as implicitly needed or via for example the mediation of an app store such as are well known in the art in which case typically a user of mobile device would explicitly select a mobile ready natural language application and upload it to her mobile device . According to the embodiment natural language applications need not be tightly bound in a one to one relationship with solutions such as solution and solution . For example solution might be a travel related solution comprising elements such as those described above with reference to item in and solution might be a credit card transaction solution. Both solution and solution may be deployed either permanently or temporarily under user of system control on a single mobile device and indeed a plurality of other solutions may be as well limited only by available resources on mobile device . Continuing the example application A might be an airline reservation application perhaps provided by an airline itself or by a third party application vendor which might make use of language recognition rules and flows among other items from both solution for travel related flows and solution for credit card transaction related flows . Similarly application B might be a virtual assistant application using natural language user interaction facilitated by natural language interaction engine . Such a virtual assistant application might only occasionally have need to use solution for example when the user of mobile device desires to set up a flight itinerary using virtual assistant application similarly virtual assistant might also have occasional need for solution to conduct credit card transactions whether or not related to travel . Thus it should be clear to one having ordinary skill in the art that a plurality of solutions may be deployed on mobile device and that these solutions may make their capabilities available to all or a portion of a plurality of natural language applications deployed on mobile device . Moreover natural language applications may typically be provided with access generally subject to application based or user role based security restrictions imposed by mobile device to device specific data such as location data device orientation and other environmental data map data stored on or accessible via mobile device and so forth or user specific data such as a user s address phone number location history preferences or even sign on data to various online services such as Twitter Facebook and the like . Thus shows a valuable embodiment of the invention in which a user of a mobile device even when only intermittently connected to the Internet or a mobile telephony network may enjoy rich natural language based applications with low latency resulting from their residence on the mobile device itself while still being able to invoke or utilize any number of network resident services such as ASR and other third party services or servers .

The skilled person will be aware of a range of possible modifications of the various embodiments described above. Accordingly the present invention is defined by the claims and their equivalents.

