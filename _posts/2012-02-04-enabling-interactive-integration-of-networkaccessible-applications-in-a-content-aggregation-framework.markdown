---

title: Enabling interactive integration of network-accessible applications in a content aggregation framework
abstract: Enabling network-accessible applications to be integrated into content aggregation frameworks (such as portals) and to become dynamically interactive through proxying components (such as proxying portlets), thereby providing run-time cooperation and data sharing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08423527&OS=08423527&RS=08423527
owner: International Business Machines Corporation
number: 08423527
owner_city: Armonk
owner_country: US
publication_date: 20120204
---
The present invention relates generally to content aggregation frameworks such as portals and more particularly enables network accessible applications to be integrated into such frameworks and to become dynamically interactive through proxying components such as proxying portlets thereby providing run time cooperation and data sharing.

In recent years a content aggregation framework based on a portal server model has become the de facto standard for development of web applications worldwide. In this approach portal applications called portlets are used with the portal server.

Portlets are applications that emit markup into an aggregation stream and have become a popular programming model. In the predominant approach portlets are run on a portal server. A portal server may aggregate content from a number of these content emitting applications when creating the aggregation stream. This aggregation stream represents a complete portal page and this portal page is returned from the portal server to a client for display in the client s web browser. This portal portlet model is well known in the art.

Portal servers process requests for page content in two phases an action phase and a render phase in that order. In the action phase all invoked portlets on the page process the request but do not generate content. It may happen for particular requests that the action phase is omitted or may be invoked on a subset of the portlets being aggregated. In the render phase the invoked portlets all contribute their respective chunks of content to a portal aggregation engine that aggregates the content and generates a page in response to the original request. This generated page is then sent to the requesting browser for rendering.

This processing is shown generally in where a browser sends a Hypertext Transfer Protocol HTTP request to a portal engine . Portal implementations may be structured with functionally distinct modules referred to generally as an engine and a portlet container where the engine is responsible for content aggregation and the container is responsible for portlet lifecycle functions that include dispatch of the action and render methods. The term portal engine however is used in figures and discussions provided herewith as a reference to a combination of these two functional modules. Supposing for purposes of illustration that the requested page requires input from two portlets designated in as Portlet A and Portlet B the portal engine then triggers the action phase of those portlets as shown at . After each of the portlets executes its respective processing it returns content to the portal engine during the render phase. Portal engine then aggregates this content and sends the aggregated result as an HTTP response for rendering by browser .

Portlets adhere to a portlet application programming interface API that enables their integration into the portal architecture. However there are a large number of network accessible applications that were not written to the portlet API and it is often desirable to include content from these applications in the portal environment. These non portal network accessible applications are referred to herein generally as web applications and may include so called legacy applications which have been made network accessible. By surfacing these non portal applications in a web portal the portal s aggregation personalization and management capabilities can be leveraged.

Rewriting the applications to execute in a portal environment is cost prohibitive in most cases and nearly impossible in some cases for example where source code is not available . Accordingly to enable integration of such web applications into the portal a component referred to as a generic reverse proxy portlet may be used. A generic reverse proxy portlet is referred to herein equivalently as a reverse proxy portlet . A generic reverse proxy portlet by definition is a portlet that mediates access to a web application and surfaces the content provided by that application in a portal page. A generic reverse proxy portlet may optionally transform the content it receives from the web application prior to sending that content to the portal s aggregation engine. Generally a generic reverse proxy portlet is coded without specific knowledge of or dependence on the web application it proxies. Such portlets therefore provide an efficient means of surfacing non portal and legacy application content in the portal environment.

A portal page may contain content created by one or more non portal or legacy applications with that content surfaced through their respective generic reverse proxy portlets and by one or more traditional i.e. non proxying portlets. This scenario is illustrated in portal page of . Again a browser sends an HTTP request to a portal engine . Suppose for this example that the requested page again requires input from Portlet A and Portlet B but now also requires input from a non portal web application executing on an application server . A generic reverse proxy portlet RPP is therefore used to mediate access to web application . When the portal engine receives HTTP request and triggers the action phase of portlets and as shown at the traditional portlets execute as discussed in . The reverse proxy portlet on the other hand makes an HTTP request to the web application for its content. Upon receiving the requested content in an HTTP response reverse proxy portlet may apply one or more configured transforms to that content e.g. clipping off some content applying rule based transformation of the content and so forth . At the least reverse proxy portlet typically transforms the proxied content by rewriting uniform resource locators URLs appearing therein so that interactions initiated by the browser will pass through the proxy instead of directly invoking web application . This approach preserves the end user s perception of staying within the portal. A reverse proxy portlet may also discard headers found in the proxied content to make that content suitable for inclusion in an aggregated portal page. In the render phase portlets return their generated content and reverse proxy portlet returns its proxied and transformed if applicable content to the portal engine . Portal engine then aggregates this content as in and sends the aggregated result as an HTTP response for rendering by browser . shows a sample arrangement of the aggregated content in portal page by way of illustration only.

While the scenarios illustrated in provide a number of advantages portlet users desire not only to see an aggregated result of content surfaced by multiple portlets but also to have cooperation and interaction among the content of the various portlets. In the prior art cooperation among traditional portlets is facilitated using techniques that include a manual triggering of a publish subscribe mechanism and an automated triggering thereof. Each of these approaches will now be briefly described.

Portal servers may provide a publish subscribe mechanism using a run time component called a property broker that enables traditional portlets to interact with each other by publishing and subscribing to information in the form of typed properties i.e. typed data items . This type of brokering support is commercially available for example in the WebSphere Portal product marketed by International Business Machine Corporation hereinafter IBM . WebSphere is a registered trademark of IBM in the United States other countries or both. The portlet that publishes a property is called a source portlet and a portlet that receives a published property is called a target portlet . In a manual approach to triggering of the mechanism the cooperation between source and target portlets may be driven through a manual click operation initiated by the user whereby the click operation in a source portlet causes that portlet to publish the value of a particular property. The click operation which is sometimes referred to as click to action or C2A might be carried out responsive to user activation of a graphical button rendered in the source portlet for example. Target portlets which have registered their ability to consume the published property receive that property s value and a predetermined action is then initiated at the target portlet in response. Refer to commonly assigned and co pending application Ser. No. 10 448 968 filed May 30 2003 now U.S. Pat. No. 7 281 217 for more information on techniques with which this manual user initiated cooperation among portlets may be provided. This application which is hereby incorporated herein by reference is titled System and Method for User Driven Interactive Application Integration and is referred to hereinafter as the first related application .

In another approach an automated triggering of the publish subscribe mechanism is provided whereby source portlets are wired to target portlets through configuration thereby enabling automated cooperation between portlets. For example when a source portlet publishes a particular property to the property broker then all actions on target portlets that have been wired i.e. configured to this source portlet are preferably triggered by the property broker. Refer to commonly assigned application Ser. No. 10 292 074 filed Nov. 12 2002 now abandoned for more information on techniques with which this automated cooperation among portlets may be provided. This application which is hereby incorporated herein by reference is titled Portlet Data Sharing System Method and Program Product and is referred to hereinafter as the second related application .

Still another approach is described in commonly assigned application Ser. No. 10 776 040 filed Feb. 11 2004 now U.S. Pat. No. 7 376 739 . This application which is hereby incorporated herein by reference is titled Persistence of Inter Application Communication Patterns and Behavior Under User Control and is referred to hereinafter as the third related application . As disclosed therein a persistent association may be created between properties published by a source portlet and actions of one or more target portlets. Accordingly an action on a target portlet can occur in an automated manner without requiring a user to manually select publication of a property that triggers the action.

In these approaches the publish subscribe mechanism allows for cooperation among independently developed portlets such that the portlets can share data dynamically and interact accordingly. The usefulness of portal content may be greatly enhanced as a result. Portlets that are capable of cooperating in this manner must interact with the property broker component of the portal run time. This means that the portlets must be coded to declare publish and subscribe to properties with a property broker. Web applications because they are not portlets are not coded to carry out these operations with a property broker and therefore are unable to participate in this portlet to portlet cooperation. Accordingly a need remains for enabling content surfaced by reverse proxy portlets to provide the type of portlet to portlet cooperation available for traditional portlets.

The present invention provides techniques for enabling network accessible applications to be integrated into content aggregation frameworks such as portals and to become dynamically interactive through proxying components such as proxying portlets thereby providing run time cooperation and data sharing. In one aspect an embodiment of the present invention comprises receiving by a component that mediates access to a network accessible application in the content aggregation framework environment a response message from the network accessible application the response message comprising a first portion containing at least one data value to be published to a brokering mechanism and a second portion containing content requested by the mediating component from the network accessible application in a request message wherein the content contained in the second portion is to be forwarded to a content aggregator for aggregating into a content view along with content provided by one or more other components forwarding by the mediating component the content contained in the second portion to the content aggregator for the aggregating into the content view along with the content provided by at least one of the one or more other components and responsive to detecting by the mediating component the at least one data value in the first portion publishing each of the at least one data value in the first portion to the brokering mechanism thereby enabling each published data value to be automatically shared with any of the other components which have ability to consume the data value from the brokering mechanism. In another aspect an embodiment of the present invention comprises receiving by a component that mediates access to the network accessible application in the content aggregation framework environment a response message from the network accessible application the response message comprising a first portion containing at least one data value to be forwarded to a brokering mechanism and a second portion containing content requested by the mediating component from the network accessible application in a request message and responsive to detecting by the mediating component the at least one data value in the first portion forwarding each of the at least one data value in the first portion from the mediating component to the brokering mechanism for sharing with selected ones of the other components while also providing the received content from the second portion by the mediating component to a content aggregator in the content aggregation framework environment thereby enabling each forwarded data value in the first portion to be automatically shared with the selected ones of the other components and the provided content from the second portion to be aggregated into a content view by the content aggregator with other content provided by at least one of the other components. In yet another aspect an embodiment of the present invention comprises receiving at a brokering mechanism in the content aggregation framework environment publication of a data type wherein the publication is received from a mediating component that provides access in the content aggregation framework to a network accessible component that contributes content for aggregating and rendering in a view for display in the content aggregation framework and the data type was delivered from the network accessible component to the mediating component in a first portion of a response message that also contains in a second portion content contributed by the network accessible component responsive to a request message sent to the network accessible component from the mediating component and automatically invoking an action responsive to the publication of the data type delivered in the first portion on selected ones of one or more other components that contribute content for aggregating with the content contained in the second portion and rendering in the view for display in the content aggregation framework wherein the selected ones are those which have registered an ability to consume data of the published data type.

The foregoing is a summary and thus contains by necessity simplifications generalizations and omissions of detail consequently those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects inventive features and advantages of the present invention as defined by the appended claims will become apparent in the non limiting detailed description set forth below.

The present invention will now be described with reference to the following drawings in which like reference numbers denote the same element throughout.

The present invention provides techniques whereby reverse proxy portlets fronting web applications can cooperate with one another dynamically on behalf of the web applications they proxy and or can cooperate dynamically with traditional portlets. As a result a portal page can now display fully cooperative and interactive content.

According to preferred embodiments web applications fronted by generic reverse proxy portlets can be the source of published properties and or the target of actions triggered by the publishing of properties by other portlets on the portal page.

Using techniques disclosed herein a reverse proxy portlet may be enhanced to act as a source portlet. That is a reverse proxy portlet may publish properties on behalf of the web application it proxies. A reverse proxy portlet may also or alternatively be enhanced to act as a target portlet. That is a reverse proxy portlet may register actions with a property broker where triggering one of these actions through a published property causes the reverse proxy portlet to invoke an action of the web application it proxies. The term action as used herein when referring to information registered by target portlets may comprise a name of an invocable action to be carried out at the proxied web application and or an identification of one or more typed properties accepted by such invocable action. 

Actions may be triggered by a portal server in response to the user clicking on a link in the portlet markup. This is sometimes referred to as an action link to distinguish from a so called render link which only results in a render request on a portlet. Actions may also be triggered through a property broker due to properties being published using for example techniques as described herein as a result of previously triggered actions. Typically the first action in a request is a result of an action link being clicked upon and subsequent actions in that request are triggered by the broker. The action phase may therefore continue transitively.

Referring first to a reverse proxy portlet acting as a source portlet recall that a reverse proxy portlet gets content from the proxied web application during the action phase of portal request processing. If this reverse proxy portlet seeks to serve as a source portlet for cooperating with other portlets then according to preferred embodiments it also publishes any applicable properties of the proxied web application during this phase. To enable the reverse proxy portlet to determine which properties should be published preferred embodiments use a simple protocol for message exchange between the reverse proxy portlet and the proxied web application as will now be described.

In one approach the web application is enhanced to send back the properties it wishes to publish as cookies in the HTTP response with which it sends its generated content to the reverse proxy portlet. See where reverse proxy portlet may send content request to enhanced web application in the same manner that such content request was sent by a prior art reverse proxy portlet to web application as was discussed with reference to . However rather than simply returning the generated content in response message as in the enhanced web application of now transmits relevant properties i.e. the properties which it wishes to publish in one or more cookies along with its generated content. See reference number in which represents this combination of cookie s and content. A cookie used in this manner may be referred to as a cooperative property cookie . If multiple property values are to be published preferred embodiments supply each property value in its own corresponding cookie. Alternatively the multiple property values may appear within a single cookie without deviating from the scope of the present invention. 

Upon receiving response message the reverse proxy portlet checks the response for inclusion of cookies containing properties and if one or more such cookies is found the relevant properties are extracted and published to the property broker. See where logic that may be used by a reverse proxy portlet acting as a source portlet is depicted.

Note that references herein to use of cookies for transmitting properties are intended by way of illustration but not of limitation. Other approaches for providing this exchange protocol may be substituted without deviating from the scope of the present invention. As one example other response headers may be used on content response including response headers created specifically for transmission of properties from web applications to source portlets.

As can be seen by the above discussion a small enhancement is required to the web application being proxied to enable its proxy to act as a source portlet. This enhancement comprises modifications that enable the web application to send in addition to its generated content the properties it wishes to share with other portlets. It is believed that a small amount of code will suffice for this purpose and that application providers will greatly favor this small code addition over having to rewrite their applications in order to surface them in a portal environment. Note also that according to preferred embodiments this code addition is non intrusive to continued use of the web application outside the content aggregation framework such as in a direct invocation usage through a browser. 

A reverse proxy portlet acting as a source portlet maintains its generic nature according to preferred embodiments because it simply looks for the presence of cooperative portlet cookies in content responses and publishes properties found therein without a need to understand those properties.

Optionally a reverse proxy portlet may be configured to filter the properties it receives thereby potentially publishing only a subset of those properties. This approach may be useful for example to control the extent of cooperation provided by the source portlet. See which provides logic that may be substituted for logic of when this optional filtering is performed at a source portlet.

Cooperation between a reverse proxy portlet acting as a source portlet and other portlets on the portal page may either be manually or automatically initiated. In a manual approach the cooperation may be triggered for example by a user activating an icon and or selecting a choice from a selection control such as a drop down menu. Or the association between the user s selection and the desired action at target portlets may be persisted such that the cooperation is automatically initiated once the user manually selects a corresponding choice. Refer to the teachings of the first and third related applications for more information on techniques for causing a user selected choice to trigger a corresponding action at a target portlet or portlets. Automatic cooperation may alternatively be triggered by wiring the source portlet to one or more target portlets or more specifically by wiring fields of a source portlet to fields of target portlets. Refer to the teachings of the second related application for more information on techniques for wiring source portlets to target portlets. Other techniques for causing a source property to trigger an action at a target portlet may be used without deviating from the scope of the present invention including use of the well known event listeners approach.

For the manual approach reverse proxy portlets acting as source portlets preferably embed in the content stream sent to the portal s aggregation engine markup to surface an appropriate selection control in the page to be rendered. This embedded markup may be provided in a fixed position within the content stream such as at the beginning or end thereof. As an alternative the proxied web application may be further enhanced to include a selection control in its generated content. However the degree of change to the proxied web application is reduced by placing this responsibility on the reverse proxy portlet. 

For automatic cooperation wires associating reverse proxy portlets acting as source portlets with target portlets are preferably defined in the portal server using tools provided by the portal server. The manner in which such wires are created does not form part of the inventive concepts of the present invention.

Referring now to a reverse proxy portlet acting as a target portlet preferred embodiments configure this reverse proxy portlet with metadata pertaining to the properties for which the proxied web application can interactively respond. In preferred embodiments this metadata describes properties to be registered with the property broker where publication of the registered property will trigger an action on the target portlet and if applicable the property type of the parameter s that each action accepts. Actual values for the property are then received at run time when a configured property is published by a source portlet. Corresponding to each action it will register the reverse proxy portlet is preferably configured with a URL that it will invoke when the action is triggered. Typically this URL will point to the web application being proxied. See which provides a high level view of such metadata. Furthermore additional metadata may also be configured and registered for each action to provide additional flexibility when invoking the associated action. While this example is provided using a tabular format this is by way of illustration and not of limitation. When registering the metadata for target portlets the property broker preferably associates a name or other identifier of the target portlet with the metadata registered for that portlet not shown in .

Preferably the reverse proxy portlet configured to act as a target portlet registers all actions defined in its configuration data with the property broker at initialization time. See where this registration is shown by message flow . Preferably reverse proxy portlet consults its configuration data to obtain the information sent to property broker in message . A reverse proxy portlet configured to act as a source portlet may also register with the property broker during its initialization where this registration preferably comprises notifying the property broker of the properties that may be published by this source portlet. 

At run time the target portlet may be triggered as a result of a property published by a source portlet which may be a traditional portlet or a reverse proxy portlet using techniques disclosed herein . This triggering is shown by message flow in . In response the target portlet preferably consults its configuration data to determine the URL corresponding to the triggered action. The target portlet invokes this URL still in the action phase of the portal request processing as shown by message flowing to web application and receives content from the web application as shown by message . This content may optionally be transformed as has been discussed above e.g. by rewriting URLs embedded therein removing headers and so forth and is then returned to the portal aggregation engine not shown in in the render phase.

Notably according to preferred embodiments a web application fronted by a reverse proxy portlet does not require modification to enable the reverse proxy portlet to act as a target application.

It may be desirable to pass one or more parameters to a web application in the target portlet scenario. One or more parameters to be passed to the invoked URL through query parameters programmatically appended to the URL for example or in the case of a POST request may be passed as request parameters may be set from the property value s passed through the property broker when the action is triggered.

An example scenario will now be described in which the cooperative integration of web applications into the portal environment is demonstrated. Suppose that a company has a repository of customer orders and a separate repository of customer contact information. These repositories may be implemented using different technologies such as a relational database for the customer orders and a directory database for the customer contact information. Further suppose that distinct web applications have been developed for accessing the data in the two repositories. A customer satisfaction representative may use the customer orders application to query those orders which are delayed and use the customer contact application to query the customer contact repository and thereby obtain contact information for sending a status update to the customer. Using two distinct applications in this manner is an inefficient use of time for the customer satisfaction representative and the company may therefore want to use a portal to provide simultaneous access to the two repositories. Portlets could be developed for this purpose but this approach requires development effort testing maintenance and so forth. The company would therefore prefer to reuse the already developed web applications. This reuse is made possible through techniques disclosed herein whereby a reverse proxy portlet consumes the output of a web application and surfaces that output within the portal and relatively minimal instrumentation for the existing applications enables the applications to send properties to be published as has been discussed above .

Continuing with the example it may be presumed that the two repositories use a customer identifier and that this common customer identifier field enables the customer satisfaction representative to manually tie the customer order data and customer contact information together when using the existing web applications. Upon integrating these web applications into a portal environment using techniques of the present invention when the markup for a customer order is fetched using the customer orders application the value of the customer identifier can also be transmitted to and published by the reverse proxy portlet for that application acting as a source portlet . This will trigger an action on the reverse proxy portlet for the customer contact application acting as a target portlet which can then use the customer identifier to retrieve the customer contact information for rendering to the customer satisfaction representative. Thus the company is able to reap the benefits of portal with relatively minimal effort and integrate two already developed non portal applications in a portal framework as part of the customer satisfaction task.

Notably it is not necessary to write custom portlets or integration code when using techniques disclosed herein. Rather each reverse proxy portlet is preferably created from a generic portlet template and is then configured differently depending on the web application it will proxy and the properties to be produced or consumed by that web application.

The diagram in provides an overview of the interactive cooperation processing which has been discussed. Exemplary operation of this processing will now be described with reference to the figure. A user clicks on a selection control such as a graphical Submit button rendered in or associated with the source portlet content in a browser window . This causes an HTTP request for page content to be sent to the portal server. In response as part of the action processing phase portal engine invokes for purposes of this example source portlet as shown at . The source reverse proxy portlet then makes an HTTP request to the source web application to retrieve content. The source web application sends back the requested content including for this example a cookie specifying one or more properties that the source web application wants published.

The source portlet publishes the corresponding property or properties to the property broker . If filtering of properties is performed by source portlet then the published property or properties are those which pass the filter. In a manually driven approach the source portlet may use the property broker to render a visual control in the render phase where the user can then activate this visual control to manually publish a property and thereby trigger an action for processing the property. In a wired approach the property broker matches each published property with one or more target portlets which have been wired to the published property from that source portlet. In either case corresponding actions are triggered at the target portlets as shown by message being sent to target reverse proxy portlet .

It may happen that the source web application wishes to publish multiple property values such as a list of customer identifiers. To enable the user to view each value and select from among those values to determine which one s will be published a display value may be associated with each value to be published. For example the display value for a customer identifier may be a text string containing the customer identifier or a graphical image representing a button on which the customer identifier is displayed. This display value may then be used in conjunction with a visual control enabling the user to activate the visual control to cause publication of selected property values.

In the action phase of the target reverse proxy portlet it consults its configuration data and determines the URL needed to make an HTTP request to the target web application . An HTTP request is then sent to that URL and a content response is returned .

The source portlet contributes content to the portal aggregation engine in the render phase of the page request processing. Source portlet may be configured for a manually driven approach whereby this contributed content may be augmented with one or more visual controls for allowing the user to manually invoke the publishing of property values as discussed above. Target portlet also contributes content to the portal aggregation engine in the render phase of the page request processing. Portal aggregation engine then aggregates the contributed content and returns an aggregated page resulting therefrom to the browser with an HTTP response . Upon refreshing the rendered page in browser target content may then reflect results of interactions and or data sharing between source web application and target web application and in addition the state of source content may be changed when the page is refreshed .

Referring now to a block diagram is provided that illustrates a representative computing environment capable of carrying out client side aspects of the present invention. The environment of comprises a representative computer workstation such as a desktop computer including related peripheral devices. The workstation typically includes a microprocessor and a bus employed to connect and enable communication between the microprocessor and the components of the workstation in accordance with known techniques. The workstation also typically includes a user interface adapter which connects the microprocessor via the bus to one or more interface devices such as a keyboard mouse and or other interface devices which can be any user interface device such as a touch sensitive screen digitized entry pad etc. The bus may also connect a display device such as an LCD screen or monitor to the microprocessor via a display adapter . The bus also connects the microprocessor to memory and long term storage which can include a hard drive diskette drive tape drive etc.

The workstation may communicate with other computers or networks of computers not shown in for example via a communications channel or modem . Alternatively the workstation may communicate using a wireless interface at such as a cellular digital packet data CDPD card. The workstation may be associated with such other computers in a local area network LAN or a wide area network WAN or the workstation can be a client in a client server arrangement with another computer etc. All of these configurations as well as the appropriate communications hardware and software are known in the art. Reference to a workstation is by way of illustration and not of limitation as many other types of client devices may also render portal pages including laptop handheld or mobile computers vehicle mounted devices desktop computers servers and mainframe computers. These types of client devices are well known to those of skill in the art and a description of such devices herein is not deemed necessary for a thorough understanding of the inventive concepts of the present invention.

It will be obvious to one of skill in the art that a computing environment capable of carrying out server side aspects of the present invention may be functionally similar to that illustrated in or may vary in a manner which is readily understood by one of skill in the art. For example a server side environment may omit user interface devices and hardware. A detailed description of such variations is not deemed necessary to an understanding of the present invention.

As has been demonstrated the present invention provides advantageous techniques for enabling network accessible applications to be integrated into content aggregation frameworks and to become dynamically interactive through proxying components thereby providing run time cooperation and data sharing. Embodiments of the present invention may comprise proxies acting as cooperation sources proxies acting as cooperation targets or both and a particular proxy may act in one or both of these capacities.

Preferred embodiments have been described herein with reference to using a web portal portlet model for content aggregation. It should be noted however that references herein to using portals portlets and workplaces are by way of illustration and not of limitation. Alternatively techniques disclosed herein may be adapted for use with other content aggregation and content emitter models. The manner in which such adaptation may be carried out will be obvious to one of skill in the art given the teachings provided herein. Furthermore references herein to use of a property broker mechanism are also to be construed as illustrative but not limiting.

The network accessible applications described herein may be deployed as network accessible services without deviating from the scope of the present invention. Accordingly protocols other than HTTP may be used for interacting with such network accessible applications such as the well known Simple Object Access Protocol SOAP . Once provided with the teachings herein one of skill in the art will readily understand how such alternatives may be supported by embodiments of the present invention.

As will be appreciated by one of skill in the art embodiments of the present invention may be provided as methods systems or computer program products comprising computer readable program code. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment combining software and hardware aspects. The computer program products may be embodied on one or more computer usable storage media including but not limited to disk storage CD ROM optical storage and so forth having computer readable program code embodied therein.

When implemented by computer readable program code the instructions contained therein may be provided to a processor of a general purpose computer special purpose computer embedded processor or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing embodiments of the present invention.

These computer readable program code instructions may also be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement embodiments of the present invention.

The computer readable program code instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented method such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing embodiments of the present invention.

While preferred embodiments of the present invention have been described additional variations and modifications in those embodiments may occur to those skilled in the art once they learn of the basic inventive concepts. Therefore it is intended that the appended claims shall be construed to include preferred embodiments and all such variations and modifications as fall within the spirit and scope of the invention. Furthermore it should be understood that use of a or an in the claims is not intended to limit embodiments of the present invention to a singular one of any element thus introduced.

