---

title: System and method for secure provisioning of virtualized images in a network environment
abstract: An example method includes setting up a secure channel between a blade and a provisioning server in a network environment, downloading an image of a virtual machine monitor (VMM) from the provisioning server to the blade through the secure channel, and booting the image to instantiate the VMM on the blade. The blade and the provisioning server are mutually authenticated and authorized with a plurality of parameters. Booting the image may include loading the image on a memory element of the blade and transferring control to the image. In some embodiments, booting the image includes modifying a root file system of the image by adding the daemon such that an agent is included in the root file system. The agent can download another image corresponding to an operating system of a virtual machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09385918&OS=09385918&RS=09385918
owner: CISCO TECHNOLOGY, INC.
number: 09385918
owner_city: San Jose
owner_country: US
publication_date: 20120430
---
This disclosure relates in general to the field of communications and more particularly to a system and a method for secure provisioning of virtualized images in a network environment.

A trend towards virtualization in the information technology IT arena is driving the development of many virtualization technologies such as network virtualization and computing virtualization. Network virtualization solutions can consolidate multiple physical networks into one virtual network. They can also logically segment a single physical network into multiple logical networks. Partitions can be added to rapidly scale the network for business needs. Computing virtualization e.g. generating multiple virtual environments on a single physical platform can allow consolidation of computing platforms in terms of hardware investments and physical space. Network and computing virtualization represent a new IT paradigm challenging existing physical network deployment models. Network and computing virtualization offer many benefits such as expanding availability of single IT assets to multiple users managing multiple IT assets as a single resource and providing dedicated virtual networks for applications which leads to revenue generation expense reduction and customer satisfaction.

An example method includes setting up a secure channel between a blade and a provisioning server in a network environment. The term setting up in this context can include any suitable activity associated with initiating establishing provisioning or otherwise creating a secure channel. The method also includes downloading an image of a virtual machine monitor VMM from the provisioning server to the blade through the secure channel and booting the image to instantiate the VMM on the blade. The blade and the provisioning server are mutually authenticated and authorized with a plurality of parameters. In specific embodiments the parameters can include image parameters cryptographic parameters and network parameters. Examples of the image parameters can include an image name and path a kernel a kernel boot option a root file system and an image type. Examples of the cryptographic parameters include entropy a provisioning server public key a provisioning server private key a certificate and a blade server shared key. Examples of the network parameters include a blade Internet Protocol address a netmask a gateway IP address a blade identifier and a provisioning server IP address.

In particular embodiments booting the image may include loading the image on a memory element of the blade and transferring control to the image. In other embodiments booting the image may include modifying a root file system of the image by adding a daemon such that an agent is included in the root file system. The agent can cause a connection to the provisioning server through the secure channel to download another image corresponding to a virtual machine from the provisioning server.

In some embodiments the secure channel may be set up using a transport layer security protocol. The image may be downloaded using a Hyper Text Transfer Protocol Secure protocol HTTPS . In various embodiments at least a portion of the plurality of parameters may be retrieved from a switch managing the blade. In other embodiments the method may further include intercepting a boot request from a basic input output system of the blade customizing a boot agent code with the plurality of parameters to generate a boot agent and transferring the boot agent to the blade in response to the boot request. The boot agent code may be valid for substantially all blades in a blade server. In more specific embodiments the transferring may be over a physical connection such as Ethernet connection optical fiber connection or non Ethernet connection.

Turning to is a simplified block diagram illustrating a communication system for secure provisioning of virtualized images in a network environment. illustrates a network in which a client communicates with a virtual machine VM via a gateway . A switch may route the communication from client to blade servers over one or more Ethernet cables e.g. 10GE or optical fiber cables. Blade servers may contain one or more blades. As used herein the term blade encompasses a computer or processor that can perform computational tasks for clients e.g. client over a network e.g. network . Blades can include server computers such as database servers file servers mail servers print servers and web servers personal computers e.g. blade PC that operate in conjunction with a client access device such as a thin client e.g. client and workstations e.g. blade workstations that operate similarly to a blade PC with more computing power. Blades can also provide switching routing storage and fiber channel access functionalities. An example of a blade is a blade server which can be a stripped down server computer with a modular design optimized to minimize use of physical space and energy. Typically a blade server comprises a modular card that includes a processor memory input output and non volatile program storage e.g. flash memory hard disk drive .

Embodiments of communication system can provide a computing virtualization network environment. An example blade in blade servers is shown in greater detail as including a virtual machine monitor VMM that hosts VM . VMM may be booted on blade using a stateless VMM image obtained from a provisioning server . As used herein the term image is a single file containing contents and structure representing software e.g. operating system OS application . In various embodiments VMM image may include a kernel root file system and other components of VMM . Images may be stateless or stateful. A stateless image does not contain the state e.g. snapshot of properties such as configuration information at a particular moment in time user configurations etc. of the software or the storage device. In addition a stateful image contains the state of the software or the storage device. For example the stateful image may contain user configurations or device configurations that render the image specific to a particular user or device . In various embodiments VMM image may be a stateless images stored on a storage . Because VMM image is stateless multiple blades e.g. in network may access and download VMM image to instantiate VMM thereon.

VM may also be installed on VMM using a stateless VM image from provisioning server . In some embodiments VM image may include an image comprising an operating system e.g. Windows 7 of VM and several applications e.g. Microsoft Office Adobe Acrobat etc. installed thereon. In other embodiments VM image may comprise a plurality of images including a separate image for the operating system and each of the applications. In yet other embodiments VM image may include either a particular operating system image or a particular application image. For example a complete install of VM on blade may involve booting thousands of VM images each image corresponding to a specific application or operating system. VM image may also be stored on storage . A management application may enable a boot agent to be created using a boot agent code .

As used herein the term boot agent code refers to an application configured to perform the various booting operations described herein. In particular boot agent code is an application that is valid for substantially all blades in communication system . The term boot agent refers to another application similar to the boot agent code but customized for a specific blade e.g. blade and a specific VM e.g. VM in communication system . In an example embodiment boot agent may be a variation of boot agent code with a plurality of parameters specific to blade and or VM physically copied into a specific location in the program instructions. In various embodiments boot agent code may be blended with the plurality of parameters that are specific to blade and or VM to generate boot agent . Management application may transfer boot agent to a basic input output system BIOS on blade to facilitate secure provisioning of VMM image and VM image to blade .

According to various embodiments communication system can enable secure provisioning of virtualized software e.g. VMM image and VM image to bare metal blades e.g. blade and to virtual machines e.g. VM . As used herein the term bare metal blade refers to a blade that does not contain an OS or any software. When blade is powered on BIOS may be executed and a bootstrap process may be activated with a bootstrap request. The bootstrap request may be intercepted by management application . Management application may create boot agent from boot agent code and pass boot agent to BIOS .

Boot agent may be stored in a memory element e.g. hard disk drive of blade . Boot agent may be mounted to the memory element e.g. volatile memory such as random access memory RAM during the booting process. Boot agent may create a secure channel with provisioning server using the plurality of parameters and download VMM image to blade . VMM image may be thereafter loaded in the memory element of blade and may receive control from boot agent . To instantiate VM VMM may be customized by including a daemon during the VMM image download process and VMM can thereafter securely download VM image .

As used herein the term secure channel refers to a communication channel with a security layer e.g. Secure Sockets Layer SSL Transport Layer Security TLS etc. for example that resides between an application and transport layer. Cryptographic keys are used to protect information flowing through the secure channel and to authenticate and authorize the parties communicating over the secure channel. In a general sense the secure channel prevents eavesdropping impersonation and tampering. Security of the secure channel may be achieved by authentication of a source e.g. provisioning server of VMM image or VM image and privacy of the secure channel realized for example through cryptographic encryption methods. In some embodiments the authentication of provisioning server may be realized using cryptographic certificates e.g. X 509 and or cryptographic shared or public keys that are set up in provisioning server and in the plurality of parameters for boot agent by management application before initiating the blade bootstrap process.

For purposes of illustrating the techniques of communication system it is important to understand the communications in a given system such as the system shown in . The following foundational information may be viewed as a basis from which the present disclosure may be properly explained. Such information is offered earnestly for purposes of explanation only and accordingly should not be construed in any way to limit the broad scope of the present disclosure and its potential applications.

Booting is a set of operations that a computer performs when electrical power is switched on. When the computer is turned on it starts the bootstrap process that will bring it to a state where a friendly interface would allow a user a smooth interaction with its computing capabilities. The bootstrap process is composed of several serialized steps involving the entire infrastructure of the computer from the hardware to the high level software. In terms of functional structure the main components associated with a typical bootstrap process are hardware BIOS OS and applications.

The bootstrap process begins when the computer which has been turned off is re energized or receives a soft reboot command and ends when the computer is ready to perform its normal operations. The process typically involves performing power on self test locating and initializing peripheral devices and finding loading and starting the OS. Turning on the computer allows electric current to flow in the hardware and generate a basic reset to every hardware component of the computer and in particular to the central processing unit CPU and other processors chipset. The typical response to the reset is a basic state where control is passed to the BIOS.

BIOS is software that resides in the computer and is specific for that hardware. In the BIOS the chipset is initialized to a well defined state. Thereafter the BIOS seeks and finds the OS and passes control to the OS. The OS unlike the BIOS can reside in many different media. Usually the OS is located using predetermined user settings such as floppy disk drive FDD hard disk drive HDD CD ROM USB stick network and others. Because the BIOS does not know the location of the OS apriori and the OS can be located on different kinds of media BIOS typically uses one of two processes to pass control to the OS 1 standard boot and 2 International Organization for Standardization ISO image download.

In a typical boot process BIOS accesses the local storage media of the computer and loads a boot loader in memory then completes its operations by passing the control to the boot loader. The boot loader is a small program typically a top portion e.g. first 512 bytes of the OS that is responsible for loading the rest of the OS from the media e.g. HDD to the memory element e.g. RAM . The computer executes the boot loader to load the rest of the OS applications and other data to the RAM for execution. This method allows a partial loading of the OS in memory part of the OS remains in the media for example the HDD and is used to store data that survive through computer power off. Such a booting process is said to be stateful because it preserves information through the power off. However the stateful process could render the computer system vulnerable to viruses that survive the power off for example because the viruses are hard written on the media.

Stateful bootstrap for example by local hard disk unit HDU or Internet Small Computer System Interface Fibre Channel iSCSI FC can be plagued by security concerns about the past history of the software that could have been modified by malware. In addition stateless bootstrap requires a fresh copy of the software for every bootstrap to be loaded and executed in a ramdisk i.e. a block of RAM that a computer s software treats as a disk drive . Although stateless bootstrap requires more RAM in the computer it may be an acceptable solution to mitigate security concerns. Stateless bootstrap is often the preferred bootstrap method for data centers running a cloud environment. However stateless bootstrap in current data center network environments is implemented using insecure protocols such as Dynamic Host Configuration Protocol DHCP and Trivial File Transfer Protocol TFTP with the ISO image download process.

ISO image download is performed during network booting in which the computer is booted from the network rather than the local drive e.g. HDD FDD . Network booting can be used to centralize management of disk storage in cluster computing in which nodes may not have local storage media and other such applications. In network booting initial software including the boot loader and OS is loaded as an image from a server on the network. ISO image download differs from a typical boot because a complete software image of the OS is downloaded and stored in the local memory element before passing control to it. The BIOS initializes the network connection e.g. Ethernet connection identifies the image to download locates the image on the network e.g. on a network server and downloads the image. Network booting is typically performed in a Preboot eXecution Environment PXE using network interfaces independent of data storage devices or installed operating systems. PXE is typically stored in hardware Read Only Memory ROM that accompanies a network interface card e.g. Ethernet card on the computer.

PXE booting process follows a client server model. A PXE server that stores the OS image has DHCP and TFTP configured and running thereon. The client is a blade or VM configured in BIOS to boot from the network and executes the PXE bootstrap session right after the power on self test process. At first the PXE process searches for DHCP servers in the network e.g. by broadcasting a DHCPDISCOVER packet extended with PXE specific options . An appropriately configured DHCP server replies with network parameters to logically initialize the network connection and the OS image name and location. After selecting the PXE boot server the PXE firmware using TFTP which is non encrypted downloads the boot loader which is uploaded into a memory element e.g. RAM of the client. After the boot loader is verified the boot loader executes the booting process on the client downloading the OS image and transferring control thereto.

ISO image download generally repeats on every bootstrap. After a power on off reset or a generic restart of the computer a fresh copy of the OS image is downloaded and activated. Thus any modifications e.g. adding applications made in the previous session are lost. Even though the lost data may affect productivity such stateless bootstrap is more secure than a stateful bootstrap because typically substantially every possible contamination by malware is lost when the system restarts from a fresh copy of the OS image. Further PXE is an older protocol viewed as being updated and vulnerable to security threats. For example DHCP connection and TFTP protocol are prone to malware attacks because they lack security.

An existing network booting option is to use vMedia to download the OS image. vMedia is a boot option available in certain machines and that allows bootstrap from a disk type media dispersed in the network as if the media were a local device. vMedia is generally initialized using external settings and may be set in BIOS as a boot option. vMedia looks like a regular local hard disk boot e.g. standard boot whereas it is actually an image download with associated security concerns such as authentication of the source of the image and verification of the integrity of the image.

In data centers loading of the computing platform software over the network infrastructure can be a critical operation for several different reasons including security e.g. authentication of the source of the OS image image transport and image integrity check performance e.g. for remote download of images and management e.g. in creation storing and customization of the images . Additionally for virtualized platforms two different operations are typically performed 1 download of the VMM on the bare metal blade and 2 download of the VM operating systems and applications on the VMM.

For each of these options security and performance may be issues that render the existing PXE boot option undesirable. For example providing a secure channel to overcome security issues may not be possible with PXE. Additional issues with creating the secure channel for downloading stateless images in current data center infrastructure include the BIOS code on the blade may not generate enough entropy for a random number generator to ensure privacy on the download channel in the BIOS identity keys and certificates cannot be stored securely the ISO image download protocol which is PXE utilizing TFTP is insecure and not suitable to download large images the PXE code utilizes the DHCP protocol to get information about the network and the image to download but the DHCP protocol inherently cannot run on an encrypted channel.

Other than security issues related to the download of images from the PXE server include low performance e.g. long time to boot download time customization of the image etc. Beside the fact that the images can be relatively large in size up to several GBytes management of the booting process in particular network load can be compromised when multiple blades boot at the same time. Network load can be quite heavy especially when an entire data center platform is turned on. Moreover storage and customization of the image can be an issue. Even if every blade downloads the same image customized copies should be made to add entropy and identity. Such operations could require special interactions with the management application or other administrator operations that are not provided in current data center platforms. Also although security concerns are less important for a VM image download because of VMM presence the download performance and image customization issues can be much more difficult to solve driving a need for integration with the management application.

A current solution for the bootstrapping process proposes entropy keys and image information to be downloaded however the download process is in PXE with its inherent security risks. For example Boot Integrity Services BIS for securing PXE establishes an exclusive relationship between PXE clients and a PXE server that share the same public key. This avoids the possibility of a rogue PXE Server randomly distributing unsolicited images over a network. However the transfer of the image over the network is not secure thus BIS does not prevent man in the middle attacks as the image transfer process itself is unencrypted.

Communication system is configured to address these issues and others in offering a system and method for secure provisioning of virtualized images in a network environment. Embodiments of communication system can enable a provisioning solution that is integrated with management application for secure image download with optimized download performance. Boot agent which can include a boot loader can set up a secure channel between blade and provisioning server . Boot agent may be customized with a plurality of parameters specific to blade and blade and provisioning server may be mutually authenticated and authorized with the plurality of parameters. Boot agent can download VMM image from provisioning server to blade through the secure channel and boot stateless VMM image to instantiate VMM on blade . The parameters can provide a differentiation between distinct blades and VMs in blade servers . For example the parameters may include image parameters e.g. name and path of VMM image and VM image kernel kernel boot option root file system and image type cryptographic parameters e.g. entropy provisioning server public key provisioning server private key certificate and blade server shared key and network parameters e.g. blade Internet Protocol IP address netmask and other address specifications of future address technologies gateway IP address blade identifier ID and provisioning server IP address .

In one embodiment for instantiating VM in blade VMM may be instantiated first from VMM image . BIOS may be copied to VM and VM boot may start from this copy of BIOS . Management application may intercept a boot request from BIOS for VM image and pass boot agent customized with appropriate parameters for VM to BIOS . In another embodiment boot agent code may form a part of VMM e.g. in a form of a daemon inside a root file system of VMM and boot agent code within VMM may prepare boot agent with appropriate parameters obtained from management application intercept a VM boot request and pass boot agent to VM .

In various embodiments boot agent can be obtained from management application which can be configured for intercepting a boot request from BIOS customizing boot agent code with the plurality of parameters to generate boot agent and transferring boot agent to blade in response to the BIOS boot request. Boot agent code may be valid for substantially all blades in blade servers . By changing the parameters as suitably desired boot agent code may be customized for each blade e.g. or each VM e.g. VM in blade servers .

According to an embodiment of communication system boot agent code may be an open source PXE implementation called gPXE. For example boot agent code may be implemented in a gPXE version on GPL2 license GPL3 license or similar licenses. The gPXE code can provide a basic Transmission Control Protocol Internet Protocol TCP IP stack and management of network hardware. In various embodiments a local network Universal Network Device Interface UNDI driver may be used by boot agent code for booting processes instead of DHCP and DHCP options. UNDI is an application programming interface API for network interface cards NICs used by PXE and other similar environments. Thus the DHCP protocol may be optional for boot agent code . Boot agent code may accept the parameters via memory location and work with TLS and HTTPS protocols and with multiple NICs and UNDI drivers. Although gPXE is mentioned herein as an example method to create boot agent code it may be noted that any generally known method may be used for creating boot agent code . For example proprietary code may be modified using TCP IP stack and adding code e.g. computer instructions to interface a UNDI driver to generate boot agent code . In various embodiments the secure channel between blade and provisioning server may be established using a TLS protocol and set up with parameters including entropy and other cryptographic parameters.

Boot agent code may be stored in switch as a golden copy valid for substantially every blade and VM in blade servers . Boot agent code can include a boot loader. Boot agent may be formed from boot agent code and the plurality of parameters specific to blade and VM . In one embodiment the parameters are blended together before the transfer of boot agent to blade . In some embodiments boot agent code may be approximately 70 KBytes in size and can be downloaded for example via vMedia using a virtual floppy disk drive vFDD interface on blade . The BIOS download of boot agent may be made secure by vMedia which may utilize hardware e.g. wired or wireless connections between blade and switch . Management application can cause a copy of boot agent code to be created and the parameters e.g. 2 KBytes in size to be hard written in a copy of boot agent code to generate boot agent .

According to various embodiments the security of the download of boot agent can be ensured by a physical connection e.g. Ethernet connection between blade and switch and the security of the secure channel between provisioning server and blade can be ensured by the plurality of parameters. The security of boot agent can also be obtained by any available method including secure download of boot agent via vMedia connection transfer of the parameters via direct communication between blade and management application with boot agent code already present on the blade and other methods.

In one embodiment the blending of boot agent code and the plurality of parameters can be performed in management application when boot agent code and the plurality of parameters are both in management application . Boot agent can be subsequently transferred to blade via a vMedia connection between management application and blade . The vMedia request is interpreted and managed by management application for example at a switch level. The boot methodology using vMedia is a stateful boot and when the boot loader portion e.g. first 512 bytes of code of boot agent is executed in blade memory the rest of boot agent may be transferred to blade . Such a transfer may be secure because of the physical connection between blade and switch .

In another example embodiment the blending of boot agent code and the plurality of parameters can be performed in BIOS . In embodiments where the plurality of parameters are in management application and boot agent code is saved in blade e.g. as option Read Only Memory ROM BIOS may get the plurality of parameters using a secure connection with management application and subsequently get boot agent code from inside blade . BIOS may blend boot agent code and the plurality of parameters to generate boot agent load boot agent in memory and execute boot agent . In another example embodiment boot agent code may be part of BIOS itself and BIOS may obtain the plurality of parameters from management application via a secure connection and blend boot agent code with the plurality of parameters to generate boot agent . Then BIOS may load boot agent in memory and execute boot agent .

In some embodiments e.g. booting VMM on blade the booting can include loading VMM image to a memory element of blade and transferring control from boot agent to VMM image . In other embodiments e.g. booting VM on VMM the booting can include downloading a script from provisioning server through the secure channel. The script may duplicate a daemon e.g. a process into an initial ramdisk initrd in provisioning server . Initrd is a scheme for loading a temporary file system into memory in the boot process before mounting the real root file system. The initrd may perform hardware detection module loading and device discovery to get the real root file system mounted. Boot agent may download the initrd to the memory element of blade and modify a root file system of VMM image by adding the daemon such that an agent is included in the root file system. The agent can cause a connection to provisioning server through the secure channel to download VM image corresponding to VM .

In various other embodiments for VM creation e.g. of VM boot agent from which VM can boot may be defined by VMM . VMM following an indication of a boot policy agent in management application can create boot agent starting from a boot agent code which may be already present in blade and adding the plurality of parameters obtained from management application . The boot policy agent refers to a method by which the configuration of boot options is propagated to various components of communication system . Usually the entity responsible for configuration e.g. customer via GUI may generate a boot policy that is propagated using the specific boot policy agent. Boot agent can create the secure channel with provisioning server and download VM image therefrom. VM image may be booted up to instantiate VM in blade . In other embodiments VM may be created with a vMedia boot option active so that boot agent generated from a blending of boot agent code and the plurality of parameters may be downloaded from management application .

In various embodiments provisioning server can authenticate blade check boot requests and verify image names. Provisioning server can provide VMM image and VM image to blade via the secure channel. Management application may set up provisioning server with the parameters including network IP address certificate to be used with TLS protocol public and private keys and for every blade it supports blade identifier and blade server shared key.

Turning to the infrastructure of communication system the network topology can include any number of switches blade servers blades VMs VMMs provisioning servers gateways and other nodes inter connected to form a large and complex network. A node may be any electronic device client server peer service application or other object capable of sending receiving or forwarding information over communications channels in a network. Elements of may be coupled to one another through one or more interfaces employing any suitable connection wired or wireless which provides a viable pathway for electronic communications. Additionally any one or more of these elements may be combined or removed from the architecture based on particular configuration needs. Communication system may include a configuration capable of TCP IP communications for the electronic transmission or reception of data packets in a network. Communication system may also operate in conjunction with a User Datagram Protocol Internet Protocol UDP IP or any other suitable protocol where appropriate and based on particular needs. In addition gateways routers switches and any other suitable nodes physical or virtual may be used to facilitate electronic communication between various nodes in the network.

In some embodiments network may include one or more network elements that integrate computing networking and storage at a backplane level while adding management capabilities through management application . As used herein the term network element is meant to encompass computers network appliances servers routers switches fabric interconnects gateways bridges load balancers firewalls processors modules or any other suitable device component element or object operable to exchange information in a network environment. Moreover the network elements may include any suitable hardware software components modules interfaces or objects that facilitate the operations thereof. This may be inclusive of appropriate algorithms and communication protocols that allow for the effective exchange of data or information.

Management application is an application e.g. computer program that can run on any suitable network element configured to perform the operations described herein. For example management application may run on a fabric interconnect e.g. Cisco UCS 6100 Series Fabric Interconnect within switch that supports several uplink and downlink connections or ports. The fabric interconnect that houses management application may be bundled with one or more similar appliances for redundancy purposes. The fabric interconnect through management application may manage one or more blade servers . Blade servers can support several blades e.g. blade .

In some embodiments blade servers can be housed in a blade server chassis that supports multiple blades e.g. eight blades . In some embodiments the fabric interconnect hosting management application may be seated on top of the blade server chassis and can be responsible for the overall management of blade servers . In some embodiments switch and blade servers may be located in one physical enclosure e.g. chassis . In addition to switches blade servers and other components illustrated in network can also include fabric extenders rack mount servers and network adapters. In addition various local area networks LANs and storage area networks SANs may be part of network . In some embodiments the LAN or SAN may host provisioning server as an application on a VM running therein.

Management application may include suitable graphical user interfaces GUIs or command line interfaces CLIs to expose various functionalities to network administrators. In an example embodiment management application may expose its functions through a native Extensible Markup Language XML application programming interface API . The GUI and CLI can also use the XML API additionally users can create their own front end user interfaces with the API. For example a deployment in a multi tenant environment can have a custom GUI for each tenant. Other implementations may use the API to connect to a configuration management database or to third party management and provisioning tools.

Boot agent is an application that executes in blade to perform the operations described herein. Provisioning server is an application running in a VM in a network element in the data center platform. For example provisioning server may run in another blade in blade servers alternately provisioning server may run in a VM connected to network alternatively provisioning server may run in another blade apart from blade servers connected to switch . Multiple instances of provisioning server may be running at any instant in time within communication system . Multiple instances of provisioning server could optimize download time when a plurality of blades performs bootstrapping at the same time. For example the multiple instances can manage different blades in different chassis optimizing the network load.

The connection between blade and provisioning server may be defined at the level of management application . For example the connection may be through a secure channel. In some embodiments the secure channel may be a TLS protocol channel and the download process may be via HTTPS or secure File Transfer Protocol FTP over the TLS channel. The parameters for setting up the TLS channel may be provided to blade and provisioning server by management application in some embodiments. In other embodiments the parameters may be provided by a network administrator and or other management services in network .

Note that the numerical and letter designations assigned to the elements of do not connote any type of hierarchy the designations are arbitrary and have been used for purposes of teaching only. Such designations should not be construed in any way to limit their capabilities functionalities or applications in the potential environments that may benefit from the features of communication system . It should be understood that the communication system shown in is simplified for ease of illustration. For example network may comprise access switches aggregation switches and core switches to aggregate and distribute ingress upstream traffic and egress downstream traffic traffic. A plurality of switches virtual and or physical may be provided at each access aggregation and core level to achieve redundancy within network . Further network may include elements particular to the type of network services provided for example in data centers that provide mass storage network may include SANs.

The example network environment may be configured over a physical infrastructure that may include one or more networks and further may be configured in any form including but not limited to LANs wireless local area networks WLANs virtual local area networks VLANs metropolitan area networks MANs wide area networks WANs Virtual Private Networks VPNs Intranet Extranet any other appropriate architecture or system or any combination thereof that facilitates communications in a network. In some embodiments a communication link may represent any electronic link supporting a LAN environment such as for example cable Ethernet wireless technologies e.g. IEEE 802.11x ATM optical fiber etc. or any suitable combination thereof. In other embodiments communication links may represent a remote connection through any appropriate medium e.g. digital subscriber lines DSL telephone lines T1 lines T3 lines wireless satellite optical fiber cable Ethernet etc. or any combination thereof and or through any additional networks such as wide area networks e.g. the Internet .

Turning to is a simplified block diagram illustrating example details of an embodiment of communication system . Switch may include a processor a memory element and a management services interface in addition to management application . Management application can include a data management engine DME including a finite state machine FSM and a policy agent for facilitating secure boot. DME can control a blade application gateway AG which can customize boot agent code to create boot agent . Blade AG may also include a boot manager for facilitating secure boot.

Blade may include another processor and another memory element in addition to VMM that hosts VM and BIOS that downloads boot agent . Provisioning server may include yet another processor yet another memory element a crypto engine an authentication authorization module and a provisioning transfer module to facilitate booting with boot agent . A secure channel between blade and provisioning server may be enabled by boot agent to download and store VMM image and VM image from storage .

In various embodiments DME can be a central service that manages the components of switch and blade servers . In various embodiments DME can store and maintain states for the managed devices and components. DME can propagate configuration information including configuration changes to the devices and endpoints it manages for example in a form of managed objects MOs . MOs can contain the desired configuration and the current state of a corresponding endpoint e.g. blade . Administrators may make changes to the MOs through suitably configured APIs. The changes may be validated by DME and propagated to the specific endpoint e.g. blade . For example an operator may initiate a server power on request through the GUI targeted at blade . When DME receives the request it validates it and if the request is valid DME makes the corresponding state change on the MO corresponding to blade . The state change is then propagated to blade through the appropriate application gateway e.g. blade AG .

Blade AG can act as a hardware abstraction layer between DME and the managed endpoints e.g. blade . Blade AG can also report the system state from the endpoints e.g. blade to DME . In various embodiments blade AG can convert management information such as configuration statistics and faults from its native representation into the form of MOs. Blade AG can implement platform specific details of each of the managed endpoints e.g. blade . Blade AG can compare the administrative state of the MOs with the operational state of the associated managed endpoint e.g. blade and take appropriate action e.g. corrective action if there is a difference between the MOs and the endpoint state . In various embodiments boot manager may set up the environment for the network boot. For example boot manager may generate cryptographic parameters used by boot agent code and boot manager can configure provisioning server for secure boot. Boot manager can instruct provisioning server to modify VMM image adding a boot policy agent as daemon e.g. using a script .

During operation a user may decide to start VMM in blade and may select appropriate provisioning server to obtain VMM image from storage using management services interface . In another embodiment the decision to start VMM or to select provisioning server may be according to network load allocation network administrator directives policy rule etc. DME may instruct boot manager to prepare secure boot accordingly. Boot manager may identify the appropriate image either locally e.g. in switch or by talking to a policy server e.g. that may be located elsewhere on network . Boot manager may generate cryptographic parameters and acquire other parameters from DME as appropriate. In one embodiment management application may communicate the parameters to provisioning server .

Blade AG may instruct blade to power up. Blade may power up and initiate BIOS . Blade AG may intercept a request from BIOS to obtain VMM image . Boot manager may insert the parameters in boot agent code and generate boot agent . Boot agent may be transferred to blade for example over the physical connection between switch and blade . In one embodiment the transfer may be over an Ethernet connection e.g. between switch and blade . Boot agent in blade may set up secure channel with provisioning server . In one embodiment the parameters for setting up secure channel may be provided to blade and provisioning server by management application . In some embodiments e.g. booting VMM on blade boot agent may request VMM image from provisioning server . Provisioning server may access storage retrieve VMM image and transmit VMM image to boot agent over secure channel . Boot agent may cause VMM image to load in memory element and may transfer control thereto.

In other embodiments e.g. booting VM on VMM blade may be selected to start VMM and VM and provisioning server may be selected to provide VMM image and VM image . Management application may receive a service profile from management services interface with the parameters for establishing secure channel and booting the desired VMM and VM . Policy agent may cause boot manager to prepare for a secure boot. Boot manager may resolve the image description policy either locally or by talking to the policy server. Boot manager may generate or access the parameters including cryptographic parameters and a script. Boot manager may instruct provisioning sever to customize the initrd related to the booting process.

Boot manger may also provide settings to configure provisioning server appropriately. In some embodiments the settings may be provided in the form of MOs associated with configuration settings of provisioning server and the script. Provisioning server may customize the initrd according to the configuration settings. In one embodiment the script may cause the initrd to include a daemon therein. The daemon may facilitate creating an agent in the root file system for secure boot of VM image later in the booting process. The agent may include information relevant to future secure boots for example identity of provisioning server the parameters etc.

Provisioning server may get a kernel and a root file system of VMM from storage . The kernel and root file system may be included in VMM image . Parameters to set up the secure channel may be exchanged between provisioning server and management application . Boot agent code may create boot agent and transfer it to blade . Blade may boot with boot agent . Secure channel may be established between provisioning server and blade . Boot agent may be authenticated and authorized by provisioning server . Boot agent may then download the script.

Boot agent may subsequently download the kernel and the initrd including the daemon. Boot agent may load the kernel and the initrd to memory element . The initrd may then download the root file system from provisioning server . In one embodiment the download may be using a secure shell SSH tunnel. The initrd may modify the downloaded root file system to add the agent. The initrd may then switch the initial root file system with the modified root file system. The agent in the modified root file system may contact management application and download and use a boot policy agent. The boot policy agent may start a procedure to get VM image from provisioning server in a manner similar to getting VMM image . VMM may thereupon instantiate VM in blade .

Turning to is a simplified block diagram showing additional details of communication system . Secure channel may be established between blade and provisioning server through gateway using parameters specific to blade . The parameters may be provided by switch to both provisioning server and blade . The parameters may include cryptographic parameters network parameters and image parameters . At least some cryptographic parameters may be generated and or decrypted by crypto engine in provisioning server . Merely as examples and not as limitations cryptographic parameters include parameters that can be used to generate cryptographic keys and associated information including entropy provisioning server public key provisioning server private key certificate and blade server shared key.

Entropy is a measure of the uncertainty associated with a random variable. Entropy can be random number generator seeds. For example a pseudorandom function can be used to create a master secret for a TLS session between blade and provisioning server . The master secret is used as a source of entropy when creating session keys for the TLS session. The provisioning server public key and provisioning server private key can be part of a secure key pair whose key pairs are mathematically linked. The public key is used to transform a message into an unreadable form decryptable only by using the different but matching private key. The certificate is an electronic document that uses a digital signature to bind the public key with an identity of provisioning server . The blade server shared key is specific to a single blade e.g. blade shared between blade and provisioning server and may be used for mutual authentication and or securing secure channel . Various other parameters not listed herein that can be used to generate cryptographic keys and associated information may be included in cryptographic parameters .

Merely as examples and not as limitations network parameters include parameters that identify network elements on network including blade IP address netmask gateway IP address blade ID and provisioning server IP address. Blade IP address gateway IP address and provisioning server IP address refer to the IP addresses of blade gateway and provisioning server respectively. Blade ID is a unique identifier such as a name or number associated with blade so as to differentiate it from other blades in network . Netmask is a 32 bit mask used to divide an IPv4 address into subnets and specify the network s available hosts. Other addressing mechanisms may be included in network parameters for example as addressing technologies evolve in the future. Various other parameters not listed herein that can be used to identify network elements may be included in network parameters .

Merely as examples and not as limitations image parameters include parameters that identify the stateless image and associated information of VMM image and VM image such as name and path kernel kernel boot option root file system and image type. The kernel is a bridge between applications and hardware of the computing system on which the applications run. OS tasks may be executed differently by different kernels depending on their respective design and implementation. For example monolithic kernels may execute all OS code in the same address space of a memory element e.g. microkernels may run most of the OS services in user space of the memory element e.g. . Moreover different commercially available kernels may be specified as appropriate including Inferno kernel Windows NT kernel SunOS kernel NetBSD kernel etc. Kernel boot options include the title of the OS the name of the initrd to load root file system system language console font etc. Image types e.g. file formats may be open standards such as the ISO image format for optical disc images or proprietary to particular software applications that produce the image. Various other parameters not listed herein that can be used to identify and describe the image may be included in image parameters .

Turning to is a simplified block diagram illustrating example operations that may be associated with setting up secure channel and downloading virtualized images securely. In one embodiment secure channel is a TLS protocol session. TLS is a cryptographic protocol that provides communication security over an unsecure network connection e.g. Internet . TLS encrypts segments of network connections above the transport layer e.g. application layer presentation layer session layer using asymmetric cryptography for key exchange symmetric encryption for privacy and message authentication codes for message integrity. The TLS protocol allows client server applications to communicate across a network in a way designed to prevent eavesdropping and tampering. Each party e.g. blade and provisioning server may save session information e.g. a session ticket a peer s X.503 certificate compression method cipher specification master secret etc. and connection information e.g. server and client keys for encryption initialization vector for the cipher etc. for each session until the session is terminated.

Blade and provisioning server may negotiate a stateful TLS connection by using a handshaking procedure with part of cryptographic parameters . During the handshake blade and provisioning server may agree on various parameters to establish the connection s security. The handshake begins at with a blade hello requesting a secure connection. The blade hello may include a list of supported cipher suites e.g. ciphers and hash functions . From this list provisioning server may pick the strongest cipher and hash function that it also supports. Provisioning server may respond to the blade hello at with a server hello including its server certificate. The server certificate usually contains the server name the trusted certificate authority and the server s public encryption key. The server hello message may also include the chosen protocol version e.g. TLS 1.2 a random number cipher suite and compression method from the choices offered by the client.

At blade may respond with a blade certificate and blade key exchange message which can contain a PreMasterSecret encrypted with the server certificate. Blade and provisioning server may then use the random numbers and PreMasterSecret to compute a common secret called the master secret. All other key data for this connection may be derived from this master secret and the generated random values which can be passed through a pseudorandom function. Blade may optionally send a ChangeCipherSpec record and an authenticated and encrypted Finished message over the previous handshake messages. At provisioning server may attempt to decrypt and verify the Finished message and optionally send a ChangeCipherSpec message along with its authenticated and encrypted Finished message.

At to perform cryptographic computations including generating the private keys provisioning server may use Diffie Hellman DH protocol cryptographic routines which may be provided in crypto engine . At authentication authorization module may authorize and authenticate the handshake between blade and provisioning server . After the handshake is done secure channel may be established for further secure communication between blade and provisioning server . At after the handshake is done boot agent in blade may send a request for VMM image to provisioning server . At provisioning server may perform a provisioning transfer of VMM image from storage using provisioning transfer module . At provisioning server may provide VMM image and other associated files to blade . At the TLS session may be ended.

Turning to is a simplified block diagram illustrating example details of an embodiment of communication system . Management services interface may include a graphical user interface GUI a resource manager a service registry and a policy manager . GUI can permit user interactions with communication system for example for selecting VM to boot on blade and other such purposes. Resource manager may make a placement decision e.g. where to boot VM based on constraints such as load space or bandwidth caching policy load balancing between multiple provisioning servers and other constraints. Resource manager may also instantiate provisioning server and or remove provisioning server previously instantiated based on particular needs. In various embodiments resource manager can collect display and store data about system performance application or process use. For example resource manager may facilitate a service profile which can manage an administrative state of blade .

Service profile is a self contained definition of server and connectivity configuration and identity. Service profile can provide a logical description of blade sufficient to enable a one to one relationship between service profile and blade . Service profile may contain components that define the server environment including the local server settings. For example service profile may contain values for the blade s property settings including virtual NICs vNICs Media Access Control MAC addresses boot policies firmware policies and other elements. In various embodiments service profile may include cryptographic parameters network parameters and image parameters for secure provisioning of VMM image or VM image on blade . In some embodiments service profile may provide boot option settings e.g. vMedia .

Service registry may organize service information e.g. information about available business services applications services network services storage services etc. and support interaction among network elements that provide and consume services within network . For example service registry may register provisioning server with appropriate service profile and parameters e.g. modules information certificates etc. to facilitate secure provisioning of VMM image or VM image on blade . Service registry may also issue certificates to provisioning server and blade as appropriate for example to facilitate creating secure channel .

Policy manager may create and store various policies which can be administrator defined sets of rules and operating characteristics. For example purposes and not as limitations four policies are illustrated in the FIGURE an image policy a crypto policy a net policy and a pools policy . Image policy may include specifications about an image e.g. VMM image or VM image etc. including image parameters crypto policy may include settings and rules associated with cryptographic parameters net policy may include network parameters and pools policy may include settings about available resource pools e.g. blades in blade servers that permit automatic selection of blades and provisioning servers based on network load demands.

Service profile can be associated with blade manually or automatically e.g. using a policy or the XML API of management application . When service profile is associated with blade DME can fulfill the configuration request associated with the settings specified therein. In one embodiment a thread of the DME process referred to as the doer thread creates a service profile association workflow in the form of FSM . The doer thread can modify suitable MOs according to the settings in service profile . For example DME can propagate configuration information including information in service profile to provisioning server in the form of MOs . MOs may be created using policies on management services interface . In another example FSM may call blade AG to actually deploy the configuration settings to blade . When blade AG completes its task it signals the doer thread at which point the doer thread transitions to the next task in FSM . FSM may orchestrate management stimuli serially and or on a transaction basis to help ensure that requests are successfully performed.

For example policy agent may initiate a series of tasks to boot VMM image on blade . FSM may orchestrate various processes between boot manager and provisioning server to facilitate secure provisioning of VMM image on blade . FSM may pass parameters for creating boot agent to boot manager so that the parameters may be written to a copy of boot agent code to generate boot agent . Blade can include a baseband management controller BMC that may provide environmental monitoring of blade . BMC can integrate with management application e.g. through the XML API to provision and configure blade .

During operation resource manager may generate or retrieve service profile . Service profile may include information about blade . In some embodiments service profile may include substantially all cryptographic parameters network parameters and image parameters . In other embodiments service profile may include some of cryptographic parameters network parameters and image parameters sufficient for management application to generate the remaining parameters. DME may create FSM and associate service profile with blade and provisioning server . Provisioning server may create MOs by using policies e.g. on management services interface .

FSM may instruct blade through blade AG to power up and initiate BIOS . BIOS may generate a request for VMM image . Blade AG may intercept the request and cause boot manager to create boot agent from boot agent code . Boot manager may obtain cryptographic parameters network parameters and image parameters from FSM . In another embodiment boot manager may generate some of the cryptographic parameters network parameters and image parameters . Boot manager may write cryptographic parameters network parameters and image parameters to boot agent code to generate boot agent .

Blade AG may transfer boot agent from management application to blade . Blade may load boot agent code in BIOS . Boot agent may initiate and establish secure channel with provisioning server . Provisioning server may retrieve VMM image from storage and store it temporarily in provisioning server . VMM image from provisioning server may be transferred to blade over secure channel . Blade may store VMM image in blade e.g. in a hard disk drive . Boot agent may load VMM image into memory element and transfer control thereto.

Turning to are simplified block diagrams illustrating details of an embodiment of communication system for instantiating VM on blade using a customized VMM boot process. VMM may be initially installed with a daemon that once installed on blade can communicate with management application . The daemon can obtain the plurality of parameters to be used with a local boot agent code to generate boot agent for downloading VM image . VMM image may be stored in storage and include a kernel and a root file system . As used herein a root file system is a set of files upon which the root directory can be mounted. The set of files includes files necessary to bring the blade e.g. blade to a state where other file systems can be mounted and user space daemons and applications started. In a general sense the directory structure for a root file system can be minimal. For example root file system can contain a typical set of directories such as dev bin etc sbin among others in a Linux OS.

Provisioning server may include an initrd and a daemon . As used herein a daemon is a background process that performs actions e.g. modifying a root file system without user interaction. In a general sense a daemon is not tied to a specific user or blade. A script may be provided in provisioning server to create another initrd that includes an instance of daemon . As used herein a script is a small program e.g. up to a few thousand lines of code that executes a specific task e.g. duplicating daemon in initrd to create initrd . According to an embodiment of communication system boot manager may create script and transfer it to provisioning server . In another embodiment provisioning server may generate script .

During operation service profile may include information useable to generate script . The information from service profile may be provided to provisioning server by management application . Boot manager may generate boot agent from boot agent code according to the parameters e.g. cryptographic parameters network parameters and image parameters provided in service profile . Boot agent may be transferred to blade and saved therein. Boot agent in blade may establish secure tunnel with provisioning server and request VMM image . Provisioning server may retrieve VMM image from storage and store it temporarily. Provisioning server may transfer script kernel and initrd to blade . Boot agent in blade may thereafter boot kernel with initrd . Initrd may download root file system from provisioning server over secure channel . Initrd may thereafter modify root file system to create root file system . Thereafter initrd may switch itself with modified root file system .

Turning to initrd may modify root file system by inserting therein an agent . As used herein an agent is a background process that performs actions e.g. downloading VM image on behalf of a user or blade e.g. blade . In a general sense the agent differs from the daemon in that the agent can have limited user interactions e.g. display a GUI while the daemon cannot. Agent may be a copy of daemon in some embodiments. In other embodiments agent may be a modified version of daemon .

According to one embodiment after the root is switched to root file system agent may contact management application and download a boot policy agent . In another embodiment boot policy agent may be a part of agent . In yet another embodiment boot policy agent may be generated by agent and or script in blade . Boot policy agent may contact provisioning server over secure channel to boot VM . In one embodiment communication between boot policy agent and provisioning server may be over HTTPS and mutual authentication may be achieved using certificates signed by service registry . Provisioning server may retrieve VM image stored in storage and save it temporarily in provisioning server . Boot policy agent may download VM image to blade and mount it. VMM may boot VM image in blade and instantiate VM .

In some embodiments boot policy agent may contact provisioning server after receiving instructions from management application based on service profile . For example after VMM has been loaded on blade client may decide to instantiate VM thereon. Resource manager may create service profile with appropriate parameters including image parameters which reference the VM image name and path. Boot policy agent may obtain the relevant parameters including image parameters from blade AG and contact provisioning server to download VM image .

Turning to is a simplified block diagram illustrating another example embodiment of communication system . In the embodiment shown boot agent code may be provided in blade instead of blade AG . Service profile may include a block comprising the parameters including cryptographic parameters network parameters and image parameters . Boot agent code in blade may access service profile and generate boot agent within blade instead of management application . Security and linearity of the operation may be enhanced and the number of operations in the bootstrap may be accordingly reduced.

Turning to is a simplified block diagram illustrating yet another embodiment of communication system . Boot agent and the parameters including cryptographic parameters may be used to enhance the security for stateful bootstraps. Boot agent may check portions of code running in a stateful image in blade . For example boot agent could seek malware modifications of stateful image . This method could present advantages with respect to existing methodologies e.g. Intel BIS or Trusted Platform Module because it could be easily customizable both in terms of code and parameters.

Turning to is a simplified flow diagram illustrating example operational steps that may be associated with an embodiment of blade . Operations may start at when blade is powered on. At blade may execute BIOS . At BIOS may activate bootstrap. At BIOS may obtain boot agent from management application . At blade may store boot agent and load it in BIOS . At boot agent may set up secure channel with provisioning server . At boot agent may download VMM image to blade . At boot agent may load VMM image in memory element . At boot agent may transfer control to VMM image . The operations may end at .

Turning to is a simplified flow diagram illustrating example operational steps that may be associated with an embodiment of management application . Operations may start at when management application receives service profile . At management application may generate the parameters including cryptographic parameters network parameters and image parameters . At management application may communicate the parameters to provisioning server . At management application may intercept a bootstrap request from blade . At using the parameters management application may generate boot agent from boot agent code . At management application may transfer boot agent to blade . The operations may end at .

Turning to is a simplified flow diagram illustrating example operational steps that may be associated with an embodiment of provisioning server . Operations may start at when provisioning server is activated. At provisioning server may obtain parameters including cryptographic parameters network parameters and image parameters from management application . At provisioning server may set up secure channel with blade . At provisioning server may check a blade request for VMM image . At provisioning server may retrieve VMM image from storage . At VMM image may be transferred to blade via secure channel . The operations may end at .

Turning to is a simplified flow diagram illustrating example operational steps that may be associated with another embodiment of provisioning server . Initially VMM may be customized with a daemon. Provisioning server may modify initrd and root file system appropriately. Then VMM may be deployed to blade . At this point management application may request a VM deployment contacting the daemon and providing information about the plurality of parameters for VM instantiation. Operations may start at when provisioning server is activated. At provisioning server may obtain parameters including cryptographic parameters network parameters and image parameters from management application . At provisioning server may set up secure channel with blade .

At provisioning server may check a blade request for VMM image that can support a secure VMM image download. At provisioning server may retrieve kernel and root file system from storage . At provisioning server may create initrd by duplicating daemon into initrd . At provisioning server may transfer script kernel and initrd to blade via secure channel . At provisioning server may transfer root file system to blade via secure channel . In some embodiments transfer of root file system may be through SSH tunneling. At provisioning server may check an agent request from boot policy agent for VM image . At provisioning server may retrieve VM image from storage . At provisioning server may transfer VM image to VMM in blade . The operations may end at .

Turning to is a simplified flow diagram illustrating example operational steps that may be associated with another embodiment of blade . Operations may start at when blade is powered on. At blade may execute BIOS . At blade may activate bootstrap. At blade may obtain boot agent from management application . At boot agent may be stored in blade . At boot agent may set up secure channel with provisioning server . At boot agent may download kernel script and initrd from provisioning server . At boot agent may mount kernel and initrd in memory element . At initrd may download root file system from provisioning server . At initrd may modify root file system to include agent and generate root file system . At agent may set up boot policy agent which may download VM image from provisioning server . At VMM may boot VM image to instantiate VM in VMM . The operations may end at .

Turning to is a simplified flow diagram illustrating example operational steps that may be associated with an embodiment of communication system . Operations include where resource manager decides to start VMM in blade and selects provisioning server . At resource manager communicates service profile to management application . At policy agent in management application asks boot manager to prepare secure boot. At boot manager resolves the image description policy either locally e.g. in switch or by talking to a policy server in network .

At boot manager generates cryptographic parameters and script . At boot manager instructs provisioning server to customize initrd . At boot manager provides settings e.g. through MOs to configure provisioning server . At provisioning server customizes initrd to include daemon and generates initrd . At provisioning server gets kernel and root file system from storage . At parameters e.g. cryptographic parameters network parameters and image parameters to set up secure channel are exchanged between provisioning server and management application . At management application creates boot agent using boot agent code and transfers boot agent to blade .

At blade boots with boot agent . At secure channel is created between provisioning server and blade . At boot agent is authenticated and authorized by provisioning server e.g. as part of setting up secure channel . At boot agent downloads script from provisioning server . At boot agent loads kernel and initrd from provisioning server and starts kernel . At boot agent mounts kernel and initrd . At using SSH initrd downloads root file system from provisioning server . At initrd modifies root file system to modified root file system . At initrd switches the root to modified root file system . At agent contacts management application and agent thereupon downloads and starts boot policy agent . At resource manager decides to start VM in blade and selects blade and provisioning server . At blade gets VM image from provisioning server .

Turning to is a simplified block diagram illustrating an experimental implementation to simulate certain functionalities of communication system . Gateway was connected to storage including VMM image and VM image . Gateway was also connected to ten switches and each switch connected to 40 blade servers . Each of blade servers included up to eight blades per chassis representing a total of 320 blades for each of switches . Each blade e.g. had up to 64 VMs e.g. VM to be installed thereon. A portion of blade servers on each of switches included provisioning servers implemented as VMs in appropriate blades therein.

In the simulation gateway included a Cisco Nexus switch connected to several Cisco UCS 6140XP 40 Port Fabric Interconnects with support for up to 320 servers or 40 chassis as a single seamless system. Blade servers included a Cisco UCS 2100 Series Fabric Extender with a 10 Gbps connection between the Fabric Extender and the 6140 Fabric Interconnect. Blade servers e.g. included Cisco UCS 5100 Series Blade server chassis housing at least eight half width blades per chassis . Each blade had a 10 Gbps Ethernet link to the 2100 Series Fabric Extender. The Nexus switch accessed VMM image and VM image via 10 Gbps communication links. Each VMM image was up to 4 GB in size. Provisioning servers were managed by a single management application .

According to the simulation provisioning servers were downloaded and installed on blade servers . Subsequently VMM image and VMM image were downloaded by each of provisioning servers cached locally and distributed to appropriate blades as bare metal software or VM software. Each of provisioning servers was a few megabytes in size. The total time to download each of provisioning servers depended on how many copies were deployed in the simulation. The time to deploy four provisioning servers was negligible compared to the download time of deploying several thousand instances of VMMs and VMs.

Provisioning servers started appropriate blades in blade servers with VMM image . Likewise provisioning servers in the other blade servers connected to switches were also powered on simultaneously. An assumption in the experiment was that every blade started up with the same VMM. In the experimental implementation with 40 chassis each with 8 blades one instance of provisioning server with a VMM image size of 4 GB would have taken 17 minutes to fully populate 320 blades 11 minutes to populate 200 blades and 5 minutes to populate 100 blades in blade servers . After respective VM Ms were installed on the blades each blade set up the virtual environment consisting of VMs on top of the VMM. The experimental implementation assumed that each blade created 64 VMs for a total of 20480 VMs for a fully populated system. The experimental implementation assumed that the 20480 VMs requested VM image at the same time.

In the simulation three variations in VM image were considered VM image including 1000 separate images each image corresponding to a specific operating system or application VM image including 2000 separate images and VM image including 5000 separate images. Each of such separate images was assumed to be 4 GBytes. To speed up the process of delivering the images to the blades multiple provisioning servers were used. Each of provisioning servers downloaded VM image locally and cached the constituent images. It was found that increasing the number of separate images in VM image increased the time to complete the operation for provisioning servers because the images came from a single repository that serialized the operations. Subsequently the separate images comprising VM image were delivered to the blades in blade servers .

The simulation indicated that increasing the number of provisioning servers e.g. using provisioning servers decreased the time to complete system boot including booting VMM and VM . For example with one image comprising VM image the time to complete booting of 20480 VMs with provisioning servers was 190 minutes. In addition the time to complete booting of 6400 VMs with provisioning servers was 90 minutes indicating a proportional relationship between boot time and total number of images i.e. the time to boot increased with increasing number of images . If no provisioning servers had been used i.e. VM image downloaded directly from storage the time taken to download all 20480 images was measured to be 5400 minutes. Because each chassis has its own network connection and the congestion on a single line decreased as the number of provisioning servers increased the time to download VM image to provisioning servers was lower than the time to download the images to corresponding blades in blade servers .

Separately it was found that as the number of separate images in VM image increased the time to download VM image to provisioning servers also increased as each of provisioning servers downloaded and cached a copy of VM image containing thousands of separate images. On the contrary the time to install VM image from each of provisioning servers to appropriate blades depended only on the number of separate images and not on the number of provisioning servers . In particular for the specific experimental implementation shown in it was observed that having more than four provisioning servers to deliver a large number of separate images to 20000 VMs was not convenient.

Turning to B illustrate results from the experimental setup described in connection with previous . Provisioning servers communicated with up to 320 blades with 64 VMs per blade. Each provisioning server served up to 1000 connections. Up to 5000 separate images were included in VM image and booted on the blades. The time to boot the images was measured. With no provisioning servers e.g. using ISO download PXE booting process the baseline measurement indicated 5400 minutes to boot 20480 VMs corresponding to one image each on 64 VMs in 320 blades 3400 minutes to boot 12800 VMs and 1700 minutes to boot 6400 VMs. With 1000 images per VM image the time to boot for 20480 VMs 12800 VMs and 6400 VMs respectively were 400 minutes 345 minutes and 300 minutes representing a 92 time savings 90 time savings and 82 time savings from the baseline. A similar pattern may be observed for 2000 images and 5000 images. However the percentage timesavings may decrease with increasing number of images downloaded.

It is also important to note that the operations and steps described with reference to the preceding FIGURES illustrate only some of the possible scenarios that may be executed by or within the system. Some of these operations may be deleted or removed where appropriate or these steps may be modified or changed considerably without departing from the scope of the discussed concepts. In addition the timing of these operations may be altered considerably and still achieve the results taught in this disclosure. The preceding operational flows have been offered for purposes of example and discussion. Substantial flexibility is provided by the system in that any suitable arrangements chronologies configurations and timing mechanisms may be provided without departing from the teachings of the discussed concepts.

Moreover it is imperative to note that the various modules illustrated in the FIGURES e.g. management application boot manager etc. may be moved around within communication system as appropriate and provisioned in one or more network elements based on particular needs. The logical representation of the various modules presented herein is merely for example purposes and is not intended to serve as limitations. Various configurations other than those presented herein are possible to achieve the functionalities described in this Specification. For example boot manager may be provisioned separately from management application within a physical switch e.g. Cisco Nexus whereas management application without boot manager may be provisioned in a Fabric Interconnect e.g. Cisco UCS 6140XP 40 Port Fabric Interconnect physically separated from the physical switch hosting boot manager . In another example provisioning server may be hosted as another VM in blade .

Note that with the numerous examples provided herein interaction may be described in terms of two three four or more network elements. However this has been done for purposes of clarity and example only. It should be appreciated that the system can be consolidated in any suitable manner. Along similar design alternatives any of the illustrated computers modules components and elements of the FIGURES may be combined in various possible configurations all of which are clearly within the broad scope of this Specification. In certain cases it may be easier to describe one or more of the functionalities of a given set of flows by only referencing a limited number of network elements. It should be appreciated that communication system of the FIGURES and its teachings are readily scalable and can accommodate a large number of components as well as more complicated sophisticated arrangements and configurations. Accordingly the examples provided should not limit the scope or inhibit the broad teachings of communication system as potentially applied to a myriad of other architectures.

Note that in this Specification references to various features e.g. elements structures modules components steps operations characteristics etc. included in one embodiment example embodiment an embodiment another embodiment some embodiments various embodiments other embodiments alternative embodiment and the like are intended to mean that any such features are included in one or more embodiments of the present disclosure but may or may not necessarily be combined in the same embodiments. Note also that an application as used herein this Specification can be inclusive of an executable file comprising instructions that can be understood and processed on a computer and may further include library modules loaded during execution object files system files hardware logic software logic or any other executable modules.

In example implementations at least some portions of the activities outlined herein may be implemented in software in for example blade and switch . In some embodiments one or more of these features may be implemented in hardware provided external to these elements or consolidated in any appropriate manner to achieve the intended functionality. The various network elements e.g. management application boot agent provisioning server may include software or reciprocating software that can coordinate in order to achieve the operations as outlined herein. In still other embodiments these elements may include any suitable algorithms hardware software components modules interfaces or objects that facilitate the operations thereof.

Furthermore management application boot agent and provisioning server described and shown herein and or their associated structures may also include suitable interfaces for receiving transmitting and or otherwise communicating data or information in a network environment. Additionally some of the processors and memory elements associated with the various nodes may be removed or otherwise consolidated such that a single processor and a single memory element are responsible for certain activities. In a general sense the arrangements depicted in the FIGURES may be more logical in their representations whereas a physical architecture may include various permutations combinations and or hybrids of these elements. It is imperative to note that countless possible design configurations can be used to achieve the operational objectives outlined here. Accordingly the associated infrastructure has a myriad of substitute arrangements design choices device possibilities hardware configurations software implementations equipment options etc.

In some example embodiments one or more memory elements e.g. memory elements can store data used for the operations described herein. This includes the memory element being able to store instructions e.g. software logic code etc. in non transitory media such that the instructions are executed to carry out the activities described in this Specification. A processor can execute any type of instructions associated with the data to achieve the operations detailed herein in this Specification. In one example processors e.g. could transform an element or an article e.g. data from one state or thing to another state or thing. In another example the activities outlined herein may be implemented with fixed logic or programmable logic e.g. software computer instructions executed by a processor and the elements identified herein could be some type of a programmable processor programmable digital logic e.g. a field programmable gate array FPGA an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM an ASIC that includes digital logic software code electronic instructions flash memory optical disks CD ROMs DVD ROMs magnetic or optical cards other types of machine readable mediums suitable for storing electronic instructions or any suitable combination thereof.

In operation components in communication system can include one or more memory elements e.g. for storing information to be used in achieving operations as outlined herein. These devices may further keep information in any suitable type of non transitory storage medium e.g. random access memory RAM read only memory ROM field programmable gate array FPGA erasable programmable read only memory EPROM electrically erasable programmable ROM EEPROM etc. software hardware or in any other suitable component device element or object where appropriate and based on particular needs. The information being tracked sent received or stored in communication system could be provided in any database register table cache queue control list or storage structure based on particular needs and implementations all of which could be referenced in any suitable timeframe. Any of the memory items discussed herein should be construed as being encompassed within the broad term memory element. Similarly any of the potential processing elements modules and machines described in this Specification should be construed as being encompassed within the broad term processor. 

Although the present disclosure has been described in detail with reference to particular arrangements and configurations these example configurations and arrangements may be changed significantly without departing from the scope of the present disclosure. For example although the present disclosure has been described with reference to particular communication exchanges involving certain network access and protocols communication system may be applicable to other exchanges or routing protocols. Moreover although communication system has been illustrated with reference to particular elements and operations that facilitate the communication process these elements and operations may be replaced by any suitable architecture or process that achieves the intended functionality of communication system .

Numerous other changes substitutions variations alterations and modifications may be ascertained to one skilled in the art and it is intended that the present disclosure encompass all such changes substitutions variations alterations and modifications as falling within the scope of the appended claims. In order to assist the United States Patent and Trademark Office USPTO and additionally any readers of any patent issued on this application in interpreting the claims appended hereto Applicant wishes to note that the Applicant a does not intend any of the appended claims to invoke paragraph six 6 of 35 U.S.C. section 112 as it exists on the date of the filing hereof unless the words means for or step for are specifically used in the particular claims and b does not intend by any statement in the specification to limit this disclosure in any way that is not otherwise reflected in the appended claims.

