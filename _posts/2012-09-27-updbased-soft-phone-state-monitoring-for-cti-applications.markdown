---

title: UPD-based soft phone state monitoring for CTI applications
abstract: A supervisor computer directly communicates, via User Datagram Protocol (UDP) packets, with a call control application software in a soft phone. The UDP packets provide real-time information, from a desktop of the soft phone, describing call activity and usage status of the soft phone. The supervisor computer is able to remotely control usage of the soft phone according to information provided by the UDP packets.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08687500&OS=08687500&RS=08687500
owner: International Business Machines Corporation
number: 08687500
owner_city: Armonk
owner_country: US
publication_date: 20120927
---
This application is a continuation of U.S. patent application Ser. No. 12 049 119 entitled UPD BASED SOFT PHONE STATE MONITORING FOR CTI APPLICATIONS filed Mar. 14 2008 the disclosure of which is hereby incorporated herein by reference in its entirety for all purposes.

The present disclosure relates in general to the field of telecommunications and more particularly to soft phones. Still more particularly the present disclosure relates to monitoring soft phone states.

Call centers are effective units for receiving and directing calls from customers. The calls may be for requests for a service a new product product support etc. Oftentimes agents in the call centers will use a Computer Telephony Integration CTI phone system also called a soft phone. A CTI phone system integrates a voice phone with a computer. For example when an agent receives a phone call information such as the caller s identification can be displayed on a desktop display used by the computer.

Present methods for monitoring the desktop display include taking a screen shot of the desktop display e.g. creating a Joint Photographic Experts Group JPEG file that represents the desktop display . Such methods are 1 resource heavy since they have to capture the entire desktop display 2 are not interactive and 3 are not in true real time. Thus such monitoring is not useful when attempting to monitor real time activity of CTI phone systems.

A supervisor computer directly communicates via User Datagram Protocol UDP packets with a call control application software in a soft phone. The UDP packets provide real time information from a desktop of the soft phone describing call activity and usage status of the soft phone. The supervisor computer is able to remotely control usage of the soft phone according to information provided by the UDP packets.

The above as well as additional purposes features and advantages of the present invention will become apparent in the following detailed written description.

With reference now to there is depicted a block diagram of an exemplary computer which the present invention may utilize. Note that some or all of the exemplary architecture shown for computer may also be utilized by software deploying server and a supervisor computer shown in and that by utilizing appropriate elements of computer e.g. phone network interface some or all of the architecture shown as computer may be utilized by a calling device e.g. a land line telephone a cellular phone a smart phone etc. as well as CTI phone systems shown in .

Computer includes a processor unit that is coupled to a system bus . A video adapter which drives supports a display is also coupled to system bus . System bus is coupled via a bus bridge to an Input Output I O bus . An I O interface is coupled to I O bus . I O interface affords communication with various I O devices including a keyboard a mouse a flash memory drive a floppy disk drive and a phone network interface . The phone network interface includes any hardware and or software needed to communicate with a phone network and includes but is not limited to a microphone a speaker a modulator demodulator modem and other logic needed to provide the functionality of a telephone. Phone network may include a telephony server not shown which enables call switching through a phone network e.g. Plain Old Telephone Service POTS systems cellular systems Voice Over Internet Protocol VOIP systems etc. Keyboard in cases where some or all of the architecture of computer is used as a telephone may be a miniaturized keyboard or an alpha numeric keypad used by a standard telephone either land line cellular or satellite . The format of the ports connected to I O interface may be any known to those skilled in the art of computer architecture including but not limited to Universal Serial Bus USB ports.

Computer is able to communicate with a software deploying server via a network using a network interface which is coupled to system bus . Network may be an external network such as the Internet or an internal network such as an Ethernet or a Virtual Private Network VPN . Note the software deploying server may utilize a same or substantially similar architecture as computer . Note also that if calling device is a computer based calling device e.g. using Voice Over Internet Protocol VoIP or a similar packet based telephonic system computer may also communicate with the calling device via the network .

A hard drive interface is also coupled to system bus . Hard drive interface interfaces with a hard drive . In a preferred embodiment hard drive populates a system memory which is also coupled to system bus . System memory is defined as a lowest level of volatile memory in computer . This volatile memory includes additional higher levels of volatile memory not shown including but not limited to cache memory registers and buffers. Data that populates system memory includes computer s operating system OS and application programs .

OS includes a shell for providing transparent user access to resources such as application programs . Generally shell is a program that provides an interpreter and an interface between the user and the operating system. More specifically shell executes commands that are entered into a command line user interface or from a file. Thus shell also called a command processor is generally the highest level of the operating system software hierarchy and serves as a command interpreter. The shell provides a system prompt interprets commands entered by keyboard mouse or other user input media and sends the interpreted command s to the appropriate lower levels of the operating system e.g. a kernel for processing. Note that while shell is a text based line oriented user interface the present invention will equally well support other user interface modes such as graphical voice gestural etc.

As depicted OS also includes kernel which includes lower levels of functionality for OS including providing essential services required by other parts of OS and application programs including memory management process and task management disk management and mouse and keyboard management.

Application programs include a browser . Browser includes program modules and instructions enabling a World Wide Web WWW client i.e. computer to send and receive network messages to the Internet using HyperText Transfer Protocol HTTP messaging thus enabling communication with software deploying server .

Application programs in computer s system memory as well as software deploying server s system memory also include a Soft Phone State Monitoring Logic SPSML . SPSML includes code for implementing the processes described in . In one embodiment computer is able to download SPSML from software deploying server including in an on demand basis as described in greater detail below in . Note that in a preferred embodiment of the present invention software deploying server performs all of the functions associated with the present invention including execution of SPSML thus freeing computer from having to use its own internal computing resources to execute SPSML .

The hardware elements depicted in computer are not intended to be exhaustive but rather are representative to highlight essential components required by the present invention. For instance computer may include alternate memory storage devices such as magnetic cassettes Digital Versatile Disks DVDs Bernoulli cartridges and the like. These and other variations are intended to be within the spirit and scope of the present invention.

With reference now to an overview of a voice call being directed from a calling device to an appropriate call recipient e.g. an agent using one of the Computer Telephony Integrated phone systems soft phones where n is an integer in a call center is presented.

For exemplary purposes assume that the voice call has been sent to CTI phone system . CTI phone system includes two main components a CTI audio phone which communicates via the phone network shown in and a CTI computer which communicates via the network shown in . That is the CTI phone system which may be implemented by the architecture of computer shown in is both a voice phone CTI audio phone and a data terminal CTI computer which are integrated together to become a soft phone CTI phone system .

The CTI computer includes a Call Control Application which is software that is utilized to 1 control functionality of a CTI call and 2 manage Graphical User Interface OUI state of a desktop . The desktop e.g. using a display shown in displays state data about the voice call . This state data is collectively referred to as the desktop state information and includes information such as information about the caller information about the calling device how the voice call was routed to the CTI phone system time and date stamps including length of the voice call etc. The call control application collects and stores this information both for local display on the desktop and for transmission to a supervisor computer .

The desktop state information is transmitted e.g. via a network interface shown in to the supervisor computer via User Datagram Protocol UDP packets that are consumed by an Application Programming Interface API in the supervisor computer . UDP packets are stateless meaning that they do not require a communication session that checks packet status. Rather the UDP packets are simply sent back and forth between the supervisor computer and the call control application without regard to whether they arrive intact or even whether they arrive at all. This has the disadvantage of not being as reliable as for example a Transmission Control Protocol TCP session but has the advantage of having much less overhead than TCP. Thus the use of UDP packets is not merely an arbitrary choice but is essential for providing a low cost low overhead and fast method to communicate the soft phone state e.g. information about the voice call that is also being displayed on the desktop which would not be technically efficient if TCP packets were used. Furthermore the UDP packets are extensible using Extensible Markup Language XML tags and thus allowing different control monitor features to be enabled to the supervisor computer . For example consider the following pseudocode 

As represented only a simple amount of UDP based XML extendable code is necessary to initiate a control of the CTI phone system MESSAGE AGENT TO AUDIT SERVER and for the supervisor computer to take over such control MESSAGE AUDIT SERVER TO AGENT .

Referring now to a high level flow chart of exemplary steps taken to monitor and control a soft phone is presented. After initiator block a first connection is established between a CTI phone system soft phone and a supervisor system e.g. supervisor computer as described in block . A second connection may also be established between the CTI phone system and a caller block . Both connections utilize the call control application software in the CTI phone system. That is the call control application not only is used to establish the voice connection between the caller and the soft phone but the call control application also populates the soft phone s desktop with information about the voice call e.g. length of time of the call time and date etc. including information e.g. using a lookup table that matches personal and or marketing information about the caller based on the caller s phone number etc. about the caller making the voice call as well as equipment used by the caller e.g. phone number identification etc. .

As depicted in block UDP data packets preferably XML extended are then communicated back and forth between the call control application and the supervisor system. This information permits the supervisor computer to control the soft phone without being restricted to a particular type of soft phone or software since such communication is performed by an specially coded API at the supervisor computer. That is the API at the supervisor computer provides an interface that does not care what software is running on the soft phone.

Similarly the information in the UDP packets allows a supervisor using the supervisor computer to monitor multiple soft phones and more particularly their desktops on a dashboard which displays multiple desktops of different soft phones in real time using information from the UDP packets . When the supervisor notices an anomaly on one of the desktops e.g. that an agent is taking too long on a call indicating that the call is not being productive then the supervisor can transmit a message to the agent e.g. via an Instant Message e mail etc. that offers suggestions on how to 1 make the call more productive e.g. move the conversation to another product or 2 simply terminate the call in order to move on to the next caller.

Furthermore the information in the UDP packets can be used by the supervisor to observe that the desktop itself has frozen is not being refreshed with new data about the phone call . For example assume that the supervisor notices that the time of day display is not changing on the desktop which is being replicated at the supervisor s computer by information from the UDP packets. The supervisor can then send a UDP packet back to the call control application software in the CTI phone system soft phone directing the desktop to restart in order to unfreeze the desktop .

Similarly the information in the UDP packets can be used by the supervisor to determine if the agent using the soft phone has incorrectly stated a ready status. For example assume that the agent using code similar to the pseudocode shown above has indicated to the call center and the supervisor that her soft phone is ready to receive calls. However a monitoring of the desktop on the dashboard being watched by the supervisor reveals that this soft phone has failed to answer several phone calls directed to it during the past thirty minutes. A conclusion can be reached that the agent is in fact not available and thus the soft phone is not ready to receive calls. The supervisor can therefore remotely take that soft phone offline by setting it to be not ready. 

It should be understood that at least some aspects of the present invention may alternatively be implemented in a computer readable medium that contains a program product. Programs defining functions of the present invention can be delivered to a data storage system or a computer system via a variety of tangible signal bearing media which include without limitation non writable storage media e.g. CD ROM writable storage media e.g. hard disk drive read write CD ROM optical media as well as nontangible communication media such as computer and telephone networks including Ethernet the Internet wireless networks and like network systems. It should be understood therefore that such signal bearing media when carrying or encoding computer readable instructions that direct method functions in the present invention represent alternative embodiments of the present invention. Further it is understood that the present invention may be implemented by a system having means in the form of hardware software or a combination of software and hardware as described herein or their equivalent.

As described above in one embodiment the processes described by the present invention including the functions of SPSML are performed by service provider server . Alternatively SPSML and the method described herein and in particular as shown and described in can be deployed as a process software from service provider server to computer . Still more particularly process software for the method so described may be deployed to service provider server by another service provider server not shown .

Referring then to step begins the deployment of the process software. The first thing is to determine if there are any programs that will reside on a server or servers when the process software is executed query block . If this is the case then the servers that will contain the executables are identified block . The process software for the server or servers is transferred directly to the servers storage via File Transfer Protocol FTP or some other protocol or by copying though the use of a shared file system block . The process software is then installed on the servers block .

Next a determination is made on whether the process software is to be deployed by having users access the process software on a server or servers query block . If the users are to access the process software on servers then the server addresses that will store the process software are identified block .

A determination is made if a proxy server is to be built query block to store the process software. A proxy server is a server that sits between a client application such as a Web browser and a real server. It intercepts all requests to the real server to see if it can fulfill the requests itself. If not it forwards the request to the real server. The two primary benefits of a proxy server are to improve performance and to filter requests. If a proxy server is required then the proxy server is installed block . The process software is sent to the servers either via a protocol such as FTP or it is copied directly from the source files to the server files via file sharing block . Another embodiment would be to send a transaction to the servers that contained the process software and have the serverptcess the transaction then receive and copy the process software to the server s file system. Once the process software is stored at the servers the users via their client computers then access the process software on the servers and copy to their client computers file systems block . Another embodiment is to have the servers automatically copy the process software to each client and then run the installation program for the process software at each client computer. The user executes the program that installs the process software on his client computer block then exits the process terminator block .

In query step a determination is made whether the process software is to be deployed by sending the process software to users via e mail The set of users where the process software will be deployed are identified together with the addresses of the user client computers block . The process software is sent via e mail to each of the users client computers block . The users then receive the e mail block and then detach the process software from the e mail to a directory on their client computers block . The user executes the program that installs the process software on his client computer block then exits the process terminator block .

Lastly a determination is made as to whether the process software will be sent directly to user directories on their client computers query block . If so the user directories are identified block . The process software is transferred directly to the user s client computer directory block . This can be done in several ways such as but not limited to sharing of the file system directories and then copying from the sender s file system to the recipient user s file system or alternatively using a transfer protocol such as File Transfer Protocol FTP . The users access the directories on their client file systems in preparation for installing the process software block . The user executes the program that installs the process software on his client computer block and then exits the process terminator block .

The present software can be deployed to third parties as part of a service wherein a third party VPN service is offered as a secure deployment vehicle or wherein a VPN is build on demand as required for a specific deployment.

A virtual private network VPN is any combination of technologies that can be used to secure a connection through an otherwise unsecured or untrusted network. VPNs improve security and reduce operational costs. The VPN makes use of a public network usually the Internet to connect remote sites or users together. Instead of using a dedicated real world connection such as leased line the VPN uses virtual connections routed through the Internet from the company s private network to the remote site or employee. Access to the software via a VPN can be provided as a service by specifically constructing the VPN for purposes of delivery or execution of the process software i.e. the software resides elsewhere wherein the lifetime of the VPN is limited to a given period of time or a given number of deployments based on an amount paid.

The process software may be deployed accessed and executed through either a remote access or a site to site VPN. When using the remote access VPNs the process software is deployed accessed and executed via the secure encrypted connections between a company s private network and remote users through a third party service provider. The enterprise service provider ESP sets a network access server NAS and provides the remote users with desktop client software for their computers. The telecommuters can then dial a toll free number or attach directly via a cable or DSL modem to reach the NAS and use their VPN client software to access the corporate network and to access download and execute the process software.

When using the site to site VPN the process software is deployed accessed and executed through the use of dedicated equipment and large scale encryption that are used to connect a company s multiple fixed sites over a public network such as the Internet.

The process software is transported over the VPN via tunneling which is the process of placing an entire packet within another packet and sending it over a network. The protocol of the outer packet is understood by the network and both points called tunnel interfaces where the packet enters and exits the network.

The process software which consists of code for implementing the process described herein may be integrated into a client server and network environment by providing for the process software to coexist with applications operating systems and network operating systems software and then installing the process software on the clients and servers in the environment where the process software will function.

The first step is to identify any software on the clients and servers including the network operating system where the process software will be deployed that are required by the process software or that work in conjunction with the process software. This includes the network operating system that is software that enhances a basic operating system by adding networking features.

Next the software applications and version numbers will be identified and compared to the list of software applications and version numbers that have been tested to work with the process software. Those software applications that are missing or that do not match the correct version will be upgraded with the correct version numbers. Program instructions that pass parameters from the process software to the software applications will be checked to ensure the parameter lists match the parameter lists required by the process software. Conversely parameters passed by the software applications to the process software will be checked to ensure the parameters match the parameters required by the process software. The client and server operating systems including the network operating systems will be identified and compared to the list of operating systems version numbers and network software that have been tested to work with the process software. Those operating systems version numbers and network software that do not match the list of tested operating systems and version numbers will be upgraded on the clients and servers to the required level.

After ensuring that the software where the process software is to be deployed is at the correct version level that has been tested to work with the process software the integration is completed by installing the process software on the clients and servers.

The process software is shared simultaneously serving multiple customers in a flexible automated fashion. It is standardized requiring little customization and it is scalable providing capacity on demand in a pay as you go model.

The process software can be stored on a shared file system accessible from one or more servers. The process software is executed via transactions that contain data and server processing requests that use CPU units on the accessed server. CPU units are units of time such as minutes seconds hours on the central processor of the server. Additionally the accessed server may make requests of other servers that require CPU units. CPU units describe an example that represents but one measurement of use. Other measurements of use include but are not limited to network bandwidth memory utilization storage utilization packet transfers complete transactions etc.

When multiple customers use the same process software application their transactions are differentiated by the parameters included in the transactions that identify the unique customer and the type of service for that customer. All of the CPU units and other measurements of use that are used for the services for each customer are recorded. When the number of transactions to anyone server reaches a number that begins to affect the performance of that server other servers are accessed to increase the capacity and to share the workload. Likewise when other measurements of use such as network bandwidth memory utilization storage utilization etc. approach a capacity so as to affect performance additional network bandwidth memory utilization storage etc. are added to share the workload.

The measurements of use used for each service and customer are sent to a collecting server that sums the measurements of use for each customer for each service that was processed anywhere in the network of servers that provide the shared execution of the process software. The summed measurements of use units are periodically multiplied by unit costs and the resulting total process software application service costs are alternatively sent to the customer and or indicated on a web site accessed by the customer which then remits payment to the service provider.

In another embodiment the service provider requests payment directly from a customer account at a banking or financial institution.

In another embodiment if the service provider is also a customer of the customer that uses the process software application the payment owed to the service provider is reconciled to the payment owed by the service provider to minimize the transfer of payments.

With reference now to initiator block begins the On Demand process. A transaction is created than contains the unique customer identification the requested service type and any service parameters that further specify the type of service block . The transaction is then sent to the main server block . In an On Demand environment the main server can initially be the only server then as capacity is consumed other servers are added to the On Demand environment.

The server central processing unit CPU capacities ill the On Demand environment are queried block . The CPU requirement of the transaction is estimated then the server s available CPU capacity in the On Demand environment are compared to the transaction CPU requirement to see if there is sufficient CPU available capacity in any server to process the transaction query block . If there is not sufficient server CPU available capacity then additional server CPU capacity is allocated to process the transaction block . If there was already sufficient available CPU capacity then the transaction is sent to a selected server block .

Before executing the transaction a check is made of the remaining On Demand environment to determine if the environment has sufficient available capacity for processing the transaction. This environment capacity consists of such things as but not limited to network bandwidth processor memory storage etc. block . If there is not sufficient available capacity then capacity will be added to the On Demand environment block . Next the required software to process the transaction is accessed loaded into memory then the transaction is executed block .

The usage measurements are recorded block . The utilization measurements consist of the portions of those functions in the On Demand environment that are used to process the transaction. The usage of such functions as but not limited to network bandwidth processor memory storage and CPU cycles are what is recorded. The usage measurements are summed multiplied by unit costs and then recorded as a charge to the requesting customer block .

If the customer has requested that the On Demand costs be posted to a web site query block then they are posted block . If the customer has requested that the On Demand costs be sent via e mail to a customer address query block then these costs are sent to the customer block . If the customer has requested that the On Demand costs be paid directly from a customer account query block then payment is received directly from the customer account block . The On Demand process is then exited at terminator block .

While the present invention has been particularly shown and described with reference to a preferred embodiment it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention. For example while the present description has been directed to a preferred embodiment in which custom software applications are developed the invention disclosed herein is equally applicable to the development and modification of application software. Furthermore as used in the specification and the appended claims the term computer or system or computer system or computing device includes any data processing system including but not limited to personal computers servers workstations network computers main frame computers routers switches Personal Digital Assistants PDA s telephones and any other system capable of processing transmitting receiving capturing and or storing data.

