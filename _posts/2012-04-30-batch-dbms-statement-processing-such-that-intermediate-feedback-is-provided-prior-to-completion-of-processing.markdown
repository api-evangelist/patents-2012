---

title: Batch DBMS statement processing such that intermediate feedback is provided prior to completion of processing
abstract: A database management system (DBMS) client calls an interface of a DBMS server to execute a statement that has been prepared to be executed in batch form in relation to a database managed by the DBMS server. The DBMS client provides a different batch of data to the DBMS server each time the DBMS client calls the interface. The DBMS server processes the different batch of data in accordance with the statement that has been prepared, to effectuate execution of the statement at the DBMS server on a batch basis in relation to the different batch of data. The DBMS server returns results of processing the different batch of data to the DBMS client, such that the DBMS client receives intermediate feedback as to status of processing the statement prior to the statement being completely processed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09087052&OS=09087052&RS=09087052
owner: Hewlett-Packard Development Company, L.P.
number: 09087052
owner_city: Houston
owner_country: US
publication_date: 20120430
---
This application claims the benefit of U.S. Provisional Application No. 61 554 852 filed Nov. 2 2011.

A database is an organized collection of data for one or more purposes in digital form. The usage and maintenance of a database is achieved through a database management system DBMS . A DBMS can include hardware devices like server devices that maintain the database and client devices that access the database through the server devices. Software running on the clients for instance can interact with software running on the servers through a network to permit the clients to access the database maintained by the servers.

As noted in the background section in a database management system DBMS a DBMS client can interact with a DBMS server to access a database maintained by the DBMS server. Such access is typically achieved by the DBMS server exposing application programming interfaces APIs which the DBMS client calls to access the database. A query to access the database is formulated and planned and a statement is executed to effectuate the query.

Some types of queries can result in the same statement being performed multiple times. For instance an INSERT statement can cause a number of database records to be added or updated in accordance with a set of corresponding integers. When the DBMS client calls the appropriate API of the DBMS server the DBMS server executes the statement once for each integer of the array. After each time the DBMS server executes the statement it may return processing results to the DBMS client so that the DBMS client remains informed as to the status of the execution. By calling appropriate API functions a DBMS client may divide very large sets of records into a number of batches and receive feedback about the records as each batch of statements is executed.

This type of statement execution can be inefficient from a performance perspective however. One approach for improving performance of such queries is to execute each array as a single statement. Because statement execution spans records or even batches performance typically improves.

However existing batch statement processing usually provides less feedback to the DBMS client as to the status of statement execution. In the prior example the DBMS server does not provide processing results to the DBMS client until the statement has been executed as to the entire set of integers. As such even if there may be problems with processing the first batch of data the DBMS client does not learn of these problems until after it has provided the last batch of data to the DBMS server which can result in inefficiencies.

One way to mitigate such inefficiencies is to utilize non standard and proprietary APIs at the DBMS server that the DBMS client can call to obtain status information regarding the processing of the statement in relation to the data that has been thus far provided. However such an approach may be problematic for at least two reasons. First it can mean that software at the DBMS client has to be updated to take advantage of such APIs. Second it places the onus for obtaining status information at the DBMS client instead of the DBMS server providing such feedback to the client.

Techniques disclosed herein may alleviate these and other shortcomings associated with DBMSs. A DBMS client calls an interface of a DBMS server which may be a standard API to execute a statement that has been prepared to be executed in batch form in relation to a database managed by the DBMS server. Each time the DBMS client calls the interface it provides a different batch of data to the DBMS server. The DBMS server processes the different batch of data in accordance with the statement that has been prepared to effectuate execution of the statement at the DBMS server on a batch basis in relation to this batch of data.

After processing the batch of data the DBMS server returns results of this processing back to the DBMS client. As such the DBMS client receives intermediate feedback as to the status of processing the statement before the statement is completely processed. That is the DBMS client receives feedback for each batch of data provided to and processed by the DBMS server and not just after the last batch of data has been provided as with conventional batch processing techniques. However the performance advantages of batch processing are still present insofar as the statement can be executed just once for each set or batch of data and not for each record within each batch.

The computer readable media and can be or include volatile as well as non volatile media such as magnetic media semiconductor media and the like. The computer readable medium of the DBMS server may be or include the storage device as well. The storage device may be a magnetic medium like one or more hard disk drives. The computer readable medium of the DBMS server stores DBMS software that the processor executes from the medium . The storage device stores a database that the DBMS software manages.

The computer readable medium of the DBMS client stores an application program and a DBMS driver that the processor executes from the medium . The application program accesses the database through the DBMS driver . The DBMS driver thus fields requests from the application program and interacts with the DBMS software on the DBMS server to access the database . Similarly the DBMS driver receives responses from the DBMS software pertaining to the database and processes and transmits the responses for and to the application program .

In operation in accordance with the techniques disclosed herein the application program can generate a query pertaining to the database . The DBMS driver and or the DBMS software formulate a plan to satisfy the query. In accordance with this plan the DBMS driver and or the DBMS software prepare at least one statement that when executed by the DBMS software in relation to the database satisfy the query and its corresponding plan. Furthermore the DBMS driver and or the DBMS software determine that the statement is eligible to be promoted for batch execution instead of individually for each piece of data relating to the query.

A query is a request for information access from the database . A plan which may also be referred to as a query plan or a query execution plan includes an ordered series of one or more steps that are executed to satisfy the query. Each step may be or include a statement which is an operator that the DBMS server performs on or in relation to the database . Examples of statements include INSERT COPY and UPDATE which insert data into the database copy data within the database and update data within the database respectively.

A statement is executed in batch form and on a batch basis as indicated by the reference number in . More specifically the DBMS client calls a number of times a standard interface such as a standard API exposed by the DBMS server to provide batches of data A B . . . N collectively referred to as the batches of data to the DBMS server . That is each time the DBMS client calls the interface the client provides a different batch of data to the DBMS server .

The DBMS server in response processes the different batches of data provided in accordance with the statement that has been previously prepared. This processing effectuates execution of the statement at the DBMS server on a batch basis in relation to each different batch of data . After processing the batches of data the DBMS server provides feedback A B . . . N collectively referred to as the feedback back to the DBMS client . That is each time the DBMS server processes a different batch of data the server returns feedback relating to this batch of data .

As such after each time the DBMS client sends the DBMS server a different batch of data the client receives intermediate feedback as to the status of processing the statement prior to the statement being completely processed at the server . Stated another way the DBMS server does not just send feedback after the last batch of data N has been sent and processed. Rather the DBMS server sends feedback after each batch of data is sent and processed.

Because the interface exposed by the DBMS server that the DBMS client calls to provide the batches of data can be a standard API or other interface the application at the client does not necessarily have to be redeveloped or modified to take advantage of the intermediate feedback capability provided. Processing a statement singly at the DBMS server for each batch of data as opposed to individually for each piece of data within each batch of data may provide performance benefits as well. In some cases improvements upwards of a factor of fifty may be realized.

As an example of operation of the DBMS an INSERT statement may be prepared in relation to which 1 000 integers within an array are to be inserted into the database . The DBMS client may send the integers to the DBMS server for processing in batches of two hundred fifty integers each. Upon receiving each batch of data the DBMS server processes the batch of data and sends feedback to the DBMS client . For example the feedback may indicate whether any of the integers were unable to be inserted into the database .

Therefore the DBMS client receives status updates regarding the processing of each batch of two hundred fifty integers and not just feedback as to the processing of all four batches just after all 1 000 integers have been processed. The DBMS client does not have to issue any special calls to any special APIs or interfaces of the DBMS server to receive this information. Rather as each batch of data is processed the DBMS server automatically returns processing results in the form of feedback to the DBMS client .

The application program submits a query to access the database . In the example method the DBMS driver receives the query and responsively formulates a query plan that when executed by the DBMS software implements the query . As part of this formulation the DBMS driver can prepare at least one statement for execution by the DBMS software . The DBMS driver can determine that the statement is being executed in batch form by the DBMS software . In another implementation the DBMS software can perform parts and instead of the DBMS driver in which case the driver receives the query and passes it to the software . In another implementation part may be performed within the DBMS client while part is performed within the DBMS server or processing at the server may not occur until it has received a batch of data per part .

It is noted that not all statements may be executable in batch form which is why it may be determined whether the statement that has been prepared in part is capable of being executed in batch form in part . Certain types of statements may be capable of being executed in batch form whereas other types may not be capable of being executed in batch form. For instance in some DBMSs INSERT statements can be executed in batch form but UPDATE statements cannot. The ability to execute a statement in batch form is a property of a particular DBMS not necessarily a property of the statement itself. For example some DBMSs might be able to batch process UPDATE statements.

Furthermore some statements may be capable of being executed in batch form just if certain processing operators are available at the DBMS server . If such processing operators are not available then these statements may not be able to be executed in batch form. Examples of such processing operators may include for example streaming forms of UPDATE statements and streaming forms of INSERT statements which are COPY statements.

The DBMS driver returns an API or other interface that the application program may use to provide data to the DBMS software for effecting the query . In the case where the DBMS software performs parts and however the software may return the API to the application program in part through the DBMS driver . The API can be a standard DBMS API. In some implementations the application program may already know the API and therefore the API is not returned to the program .

The application program calls the API to provide a batch of data to execute the statement that has been prepared . The DBMS driver can receive and pass through the API call to the DBMS software . The DBMS software responsively processes the batch of data that has been provided in accordance with the statement that has been prepared to effectuate execution of the statement at the DBMS server on a batch basis in relation to the batch of data.

It is noted that implementations of the techniques disclosed herein typically refer to a statement such as an INSERT statement that is run across many batches of data as opposed to running the statement for each batch. This distinction lies in the actions that are performed at the server . If a statement is run per batch of data the server performs more work for each batch whereas if the statement is run across many batches of data although some setup processing is performed prior to the first batch and some post processing is performed after the last batch in general the server performs less work.

After processing the most recently received batch of data the DBMS software returns results of this processing to the DBMS driver which receives them . The processing results may be in the form of a list of data that is not easily parsed by the application program . Therefore the DBMS driver can suitably populate return values such as within an array so that the application program receives the processing results in the expected format . The DBMS driver thus reports the return values to the application program which receives them .

Parts and or are repeated one or more times each time with a different batch of data. As such the application program provides a number of different batches of data to execute the statement at the DBMS server . The application program further receives intermediate feedback as to statement execution for each different batch of data and does not have to wait for all the data to be sent before feedback as to statement execution is received.

At some point the application program has no additional batches of data to provide to the DBMS server . At this stage the application program may call a different API exposed by the DBMS software at the DBMS server . This different API may not be explicitly related to the statement that has been executed at the DBMS server however. For example the different API may relate to a different query and or to new additional processing that the application program is configured to perform in relation to the database .

In the example of the DBMS driver receives the API call . The DBMS driver recognizes that the API call is different than the one that the application program has been calling in repeated performances of part to provide different batches of data to the DBMS server . Therefore by virtue of the application program calling a different API the DBMS driver interprets the API call of part as the application program signaling that the statement has been finished i.e. that no further data is to be provided as to the statement.

The DBMS driver thus signals to the DBMS software that the statement has been finished and the software responsively completes execution of the statement . In another implementation the DBMS driver may pass the API call of part through to the DBMS software which then performs part . That is the DBMS software may interpret the API call of part as the DBMS client signaling that the statement has been finished such that the software then completes statement execution in part .

The parts of the method that can be performed by the DBMS driver at the DBMS client can be implemented as a computer program that when executed at the client implements or effectuates the driver . For instance these parts can be parts and or as has been described above. The computer program may be stored on a non transitory computer readable data storage medium.

Likewise the parts of the method that can be performed by the DBMS software at the DBMS server can be implemented as a computer program that when executed at the server implements or effectuates the software . For instance these parts can be parts and or as has been described above. This computer program may also be stored on a non transitory computer readable data storage medium.

