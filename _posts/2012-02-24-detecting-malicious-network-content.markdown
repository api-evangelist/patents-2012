---

title: Detecting malicious network content
abstract: Systems and methods for detecting malicious content on portable data storage devices or remote network servers are provided. In an exemplary embodiment, a system comprises a quarantine module configured to detect one or more portable data storage devices upon insertion of the devices into a security appliance, wherein the security appliance is configured to receive the portable data storage devices, a controller configured to receive from the security appliance, via a communication network, data associated with the portable data storage devices, an analysis module configured to analyze the data to determine whether the data includes malware, and a security module to selectively identify, based on the determination, the one or more portable data storage devices storing the malware.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09519782&OS=09519782&RS=09519782
owner: FireEye, Inc.
number: 09519782
owner_city: Milpitas
owner_country: US
publication_date: 20120224
---
This application is related to U.S. patent application Ser. No. 13 011 344 entitled Systems and Methods for Detecting Malicious PDF Network Content which is a continuation in part of U.S. patent application Ser. No. 12 263 971 entitled Systems and Methods for Detecting Malicious Network Content and filed on Nov. 3 2008. This application is also related to U.S. patent application Ser. No. 11 409 355 entitled Heuristic Based Capture with Replay to Virtual Machine and filed on Apr. 20 2006 which is a continuation in part of U.S. patent application Ser. No. 11 152 286 entitled Computer Worm Defense System and Method and filed on Jun. 13 2005 which claims the priority benefit of U.S. Provisional Patent Application Ser. No. 60 579 910 entitled Computer Worm Defense System and Method and filed on Jun. 14 2004. U.S. patent application Ser. No. 11 409 355 is also a continuation in part of U.S. patent application Ser. No. 11 096 287 entitled System and Method of Detecting Computer Worms and filed on Mar. 31 2005 which claims the priority benefit of U.S. Provisional Patent Application Ser. No. 60 559 198 entitled System and Method of Detecting Computer Worms and filed on Apr. 1 2004. U.S. patent application Ser. No. 11 409 355 is also a continuation in part of U.S. patent application Ser. No. 11 151 812 entitled System and Method of Containing Computer Worms and filed on Jun. 13 2005 which claims the priority benefit of U.S. Provisional Patent Application No. 60 579 953 entitled System and Method of Containing Computer Worms and filed on Jun. 14 2004. Each of the aforementioned patent applications is incorporated by reference herein.

The present disclosure relates generally to data processing. More particularly the present disclosure relates to the detecting malicious network content on portable data storage devices and remote network servers.

Governments the military corporations financial institutions hospitals and private businesses amass a great amount of confidential information about their employees customers products research and their financial status. Furthermore government information systems may include classified information related to national security command and control of military forces or fulfillment of intelligence missions. Protecting confidential information from theft and corruption while allowing the information to remain accessible and productive to its intended users has been one of the major goals of computer security. However as computer security becomes savvier to malicious attacks via e mail and other avenues cybercriminals are turning to portable data storage devices for malware distribution. Portable data storage devices such as Universal Serial Bus USB flash drives are small readily available and inexpensive thereby making them popular for storing and transporting files from one computer to another. However these same characteristics make them appealing to attackers.

According to some research a quarter of all of malware today is developed to be disseminated through USB devices. One reason for the popularity of USB devices is the simplicity with which malware can be distributed. Most hackers do not wish to spend hours and hours trying to hack secured computers. Spreading malware through USB devices is a simple way to distribute malware with just a few clicks. An attacker might infect a computer with malware that can detect when a USB drive is plugged into a computer. The malware may then download malicious code onto the drive. When the USB drive is plugged into another computer the malware infects that computer.

There are solutions on the market for addressing the threat with varying degree of success. Some of these solutions aim at preventing USB drives from being recognized by computers. Other solutions require disabling AutoRun functionality or maintaining a dedicated computer for USB related activities. Some even advocate moving away from USB drives to cloud based solutions. Most of these solutions require limiting accessibility of the information contained on the USB drives instead of addressing the threat directly.

The network file sharing technology is another solution for data transmission between computers. Lately this technology has become a popular tool for sharing data over the Internet and or local area networks. However malware is often spread through remote network servers making file sharing services one of the most frequent ways of virus infections and computer failures. Remote network servers may contain malware software which can be downloaded while downloading other files requested by users. Current anti virus technology may be inefficient in detecting these malicious files as they may not become active until after the download is complete or until the requested files are run. Thus it is desirable to detect malware on the remote network servers before any files are downloaded.

Exemplary embodiments provide for detecting malicious network content on portable data storage devices. In a first exemplary embodiment a method is disclosed for detecting malicious network content on portable data storage devices upon insertion of the devices into a security appliance. The method may comprise detecting the insertion of portable data storage devices in a security appliance receiving via a communication network data associated with the portable data storage devices analyzing the data to determine whether the data storage devices include malware and selectively identifying the malware stored on the one or more portable data storage devices.

In a second exemplary embodiment a method is disclosed for detecting malicious network content on a portable data storage device when the device is connected to a host device. The method may comprise detecting a portable data storage device upon connection to a computer accessing device data analyzing the device data to determine whether the portable storage device includes malware and selectively identifying the portable storage device as having the malware.

In a third exemplary embodiment a method is disclosed for detecting malicious network content within remote network servers. The method may comprise detecting connecting of a client device to a remote network server receiving data stored on the remote network server analyzing the data of the remote network server to determine whether the data includes malware and based on the determination selectively identifying the remote network server as storing the malware.

In further embodiments modules subsystems or devices can be adapted to perform the recited methods. Furthermore in various embodiments a non transitory machine readable medium may have executable code embodied thereon with the executable code being executable by a processor for performing above methods.

Exemplary systems and methods for detecting malicious network content e.g. malicious software or malware on portable data storage devices are provided. In some exemplary embodiments the systems and methods may allow for protecting organizations from malware infections. The systems and methods may be embodied in three exemplary modes.

The first mode allows screening portable storage devices such as USB flash drives or memory cards upon inserting the devices into a security appliance. The security appliance may be associated with a security screening location such as a security checkpoint in a building. The security appliance may include a number of slots configured to receive a plurality of portable data storage devices simultaneously. Security personal may direct owners of the portable data storage devices to insert the portable storage devices into the security appliance. The security appliance may detect insertion of the portable data storage devices and send via a communication network the data stored on the portable storage devices to a remotely located controller for analysis. Upon insertion of a portable data storage device into the security appliance the security appliance may provide the owner of the portable data storage device with an estimated time to complete the analysis with the estimate being based on the current latency due to the analysis.

The controller may analyze the data and determine whether the portable data storage devices store malware. The controller may commence the procedure by analyzing the data with predetermined heuristics to determine whether the data includes certain suspicious traits. The latency due to the analysis process may be too high for the data to be analyzed with normal heuristics without exceeding the maximum time allotted for the analysis. Therefore a faster heuristics analysis may be utilized. Since the faster heuristics analysis may not be as comprehensive a copy of the data may be saved for later analysis. For example at a security checkpoint a determination may need to be made within a reasonable time to allow the queue to move quickly through a metal detector. Therefore the controller should be able to analyze the files on a portable data storage device and send the result of the analysis rapidly. Depending on the latency of the communication network the controller may need to decide which heuristics to use. If the heuristics analysis indicates a suspicious activity the controller may configure a virtual machine to safely receive and execute the suspected data in a simulated real life environment. The response of the virtual machine to the deployment of the suspected data may be analyzed to determine whether the data contains malware. If the controller determines that one or more portable security devices store malware the security appliance may provide a warning signal. For example a pattern of beeps and or flashes may indicate a security threat. If on the other hand there is no current indication of malware the portable data storage device may receive provisional clearance. However if a later analysis with normal heuristics indicates a problem the owner of the portable data storage device may be located by the security personal and appropriate measures may be taken. For example the portable data storage device may be confiscated.

The second mode may allow detecting malicious content on a portable data storage device upon insertion of the device into a host device such as a personal computer PC . The techniques utilized to determine whether the portable data storage device contains malware are similar to the ones described above. The method may include detecting the portable data storage device upon connection to the host device and analyzing the data stored on the portable data storage device to determine whether the data includes malware.

The method may commence with the controller responsible for the data analysis quarantining the data within the host device. For example the controller may prevent executing any files stored on the portable data storage device.

The third mode may allow detecting malicious content on a remote network server before files are downloaded over a network such as the Internet. Thus files may be analyzed before the downloading to a client device may proceed i.e. in an active rather than passive manner. The technique allowing determining whether the remote network server contains malware similarly to the ones described above. The techniques may include detecting that a client device accesses the remote network server when connection over a network is established and analyzing the data stored on the remote network server to determine whether or not the data includes malware. The technique may further include actively monitoring the remote network server for the presence of new files actively downloading those new files analyzing the files to determine if they are suspicious and running the files in a virtual machine environment to identify malware.

The client device such as a personal computer may embed a controller or the controller can be remotely located and accessible over the network. The controller may analyze the data stored on the remote network server with predetermined heuristics to determine whether the data includes certain suspicious traits. The controller may limit data to be analyzed to the data intended for downloading by the client device. If the heuristics analysis indicates a suspicious activity the controller may configure a virtual machine to safely receive and execute the suspected data in a simulated real life environment. The response of the virtual machine to the deployment of the suspected data may be analyzed to determine whether the data contains malware. If the controller determines that the remote networking server stores malware the controller may provide a warning signal.

Malware is software created and distributed for malicious purposes and can take the form of viruses worms Trojan horses or adware for example. A virus is an intrusive program that infects a computer file by inserting a copy of itself in the file. The copy is usually executed when the file is loaded into memory allowing the virus to infect other files. A worm is a program that propagates itself across multiple computers usually by creating copies of itself in each computer s memory. A worm might duplicate itself in a computer so many times that it causes the computer to crash. A Trojan horse is a destructive program disguised as a game utility or application. When run by a user or computer program a Trojan horse can harm the computer system while appearing to do something useful.

Malware may also include adware and spyware. Adware is a program configured to direct advertisements to a computer or a particular user. In one example adware identifies the computer and or the user to various websites visited by a browser on the computer. The website may then use the adware to either generate pop up advertisements or otherwise direct specific advertisements to the user s browser. Spyware is a program configured to collect information regarding the user the computer and or a user s network habits. In an example spyware may collect information regarding the names and types of websites that the user browses and then transmit the information to another computer. Adware and spyware are often added to the user s computer after the user browses a website that hosts the adware and or spyware. The user is often unaware that these programs have been added and is similarly unaware of the adware and or spyware s function.

Referring now to the drawings is a diagram of an exemplary environment in which various embodiments for detecting malicious network content on portable data storage devices by inserting the devices into a security appliance may be practiced. The environment may include portable data storage devices inserted into a security appliance . The security appliance may be communicatively coupled to a communication network . A controller may also be communicatively coupled to the communication network .

The portable data storage devices are any combination of one or more storage devices designed to hold any kind of digital data. For example a USB flash drive is a portable data storage device including a flash memory data storage device integrated with a USB interface. In yet another example the portable data storage device may refer to a memory card.

The security appliance is a digital device which may include a plurality of interfaces to simultaneously receive one or more of the portable data storage devices . Upon insertion of the portable data storage devices into the security appliance the data stored on the portable data storage devices may be transmitted to the controller via the communication network . The security appliance may include dedicated circuitry and comprise one or more processors. The security appliance may include any combination of computers and servers. The data stored on the portable data storage devices may include any kind of digital data. Although depicts the security appliance as coupled to the controller via the communication network the security appliance may be directly coupled to the controller .

The controller may be a digital device or software configured to receive and analyze data for the presence of malware. In exemplary embodiments the controller may detect the presence of the portable data storage devices when the portable data storage devices are initially inserted into the security appliance . The controller may intercept data transmitted from the portable data storage devices for a predetermined period of time. In other embodiments the security appliance may direct the data transmitted from the portable data storage devices to the controller for a predetermined period of time.

The controller may also be configured to transmit a command to the security appliance to activate one or more security programs. The one or more security programs can be resident within the security appliance and are configured to operate security functions. In some embodiments the controller can scan and activate security programs on the portable data storage devices without the necessity of installing any agents on the security appliance . As such multiple security programs on the portable data storage devices may be activated upon insertion in the security appliance. By performing security functions upon connection the portable data storage devices may be analyzed for the presence of malware. Security functions are further described in . The data may then be analyzed by the controller to determine evidence of malware. If malware is detected the controller may report the threat. The controller is further discussed in .

The communication network couples two or more digital devices together to allow the digital devices to communicate and transmit data to each other. In some exemplary embodiments the communication network may be a public computer network such as the Internet or a private computer network such as a wireless telecommunication network wide area network WAN or local area network LAN . In some embodiments the communication network comprises multiple routers bridges and hubs that couple a large number of digital devices.

The environment includes a host device and a portable data storage device . The portable data storage device may be connected to the host device via a storage device interface not shown . In some embodiments a controller may be run within the host device . In other embodiments the host device may be located remotely and coupled to the controller via the communication network . The portable data storage device may be a storage device designed to hold any kind of digital data. The host device may be any device comprising one or more processors. Some examples of host device include computers servers laptops tablet computers personal digital assistants PDAs cellular telephones and smart phones.

The portable data storage device may include any kind of digital data. Although depicts the controller as optionally coupled to the communication network the controller may be directly coupled to the host device . The controller may be a digital device or software configured to receive and analyze data for the presence of malware. In exemplary embodiments the controller may detect the presence of portable data storage device when the portable data storage device initially couples to host device . The controller may intercept data transmitted from the portable data storage device or the host device for a predetermined period of time. In other embodiments the host device is configured to direct the data transmitted from the portable data storage device to the controller for a predetermined period of time.

The controller may also be configured to transmit a command to the host device to activate one or more security programs. In some exemplary embodiments the one or more security programs can be resident within the portable data storage device and are configured to operate security functions. The controller can scan and activate security programs on the portable data storage device without the necessity of installing an agent on the host device . By performing security functions upon connection the controller may analyze the contents of the portable data storage device for malware. Security functions are further described in . The data is then analyzed by the controller to determine evidence of malware. If malware is detected the controller may provide an indication to that effect. The controller is further discussed in .

The environment may comprise a controller a remote networking server a client device and the communication network which operatively couples all mentioned modules.

In some embodiments the controller may be embedded within the client device . In other embodiments the controller may be located remotely and coupled to the client device via the communication network . The client device may be any device comprising one or more processors. Some examples of client device include computers servers laptops tablet computers personal digital assistants PDAs cellular telephones and smart phones.

The controller may be a digital device software or a combination thereof configured to receive and analyze data for the presence of malware. In exemplary embodiments the controller may detect intent by the client device to download data from the remote networking server over the communication network . The controller may intercept data transmitted from the remote networking server for a predetermined period of time. In other embodiments the client device may be configured to direct the data transmitted from the remote networking server to the remotely located controller for a predetermined period of time.

The controller may also be configured to transmit a command to the client device to activate one or more security programs. In some exemplary embodiments the one or more security programs can be resident within the remote network server and are configured to operate security functions. The controller may scan and activate security programs on the remote network server without installing an agent on the client device . By performing security functions upon connection the controller may analyze the content to be downloaded by the client device for malware. The security functions are further described in . The data may be analyzed by the controller for evidence of malware. If malware is detected the controller may provide an indication to that effect. The controller is further discussed in .

The controller can comprise a quarantine module a security module a heuristic module a scheduler a virtual machine pool an analysis environment and a policy engine . In some embodiments the controller may also comprise a tap or span port which is further coupled to the communication network . In other embodiments the controller may be coupled to an external tap or external span port of the security appliance and or the host device and or the client device .

The quarantine module may detect the portable data storage devices and or the portable data storage device as they couple to security appliance and or the host device . When the portable data storage device is detected the data transmitted from the portable data storage device is redirected to the controller for a predetermined time. The data redirected to the controller is analyzed to determine if the data contains suspicious data discussed below or a malware attack. If the predetermined time expires and no suspicious data or malware is identified then the quarantine module ceases containment of the data from the portable data storage device .

The quarantine module can detect the portable data storage device by detecting a request for network services. When the portable data storage device is connected to the host device the host device may be configured by the controller . In one example the portable data storage device may request an IP address. The IP address request as well as the IP address assignment may be detected by the quarantine module . Thereafter all data from the IP address of the portable data storage device may be quarantined for a predetermined period of time. Those skilled in the art will appreciate that there may be many ways to detect the portable data storage device upon connection to the host device and or the communication network .

Similarly to the embodiments shown in the quarantine module may detect that the client device intends or starts downloading data from the remote network server over the communication network . The detection can be executed by analyzing data packets transmitted requests for IP addresses and so forth.

The quarantine module can redirect data from the portable data storage device or the remote network server . The data may then be transmitted from the portable data storage device to the controller . If malware or suspicious data within the data is not detected by the controller the indication to that effect may be provided to the host device . Similar technique may be used to redirect data from the remote network server .

Attempts may be made to access files on the portable storage device before it has been determined that the portable storage device does not include malware. The quarantine module may intercept such access to files on the portable storage device e.g. until the determination has been made.

In some embodiments the controller may quarantine data transmittable from the remote network server . More specifically when the client device is connected to the network server over the communication network and requests an IP address from a DHCP server the quarantine module may respond to the DHCP services request by configuring the client device to transmit data to the controller . In one example the quarantine module may configure the client device with a gateway IP address which is the same as the controller s IP address as to send all data to the controller . If after a predetermined period of time no suspicious data or malware is detected the client device can be reconfigured so that the data is no longer transmitted to the controller .

The quarantine module may also monitor the data directly or receive a copy of the data over a tap. In one example the quarantine module monitors and scans the data to detect the presence of the portable data storage device . When the portable data storage device is added to the communication network the quarantine module quarantines the data from the portable data storage device for the predetermined time. In some other embodiments the quarantine module quarantines the data downloaded from or residing at the remote network server for the predetermined period of time. In another example a tap may scan data for the portable data storage device and alert the quarantine module when the portable data storage device is discovered. The quarantine module may redirect all data from the host device to the controller over a separate link not depicted to the communication network . In some embodiments there is not a tap but rather a span port.

The security module may be configured to transmit commands to one or more security program s on the secure appliance and or the host device and or the client device and to analyze responses from the security program s . The security program s may be resident on the secure appliance and or the host device and or the client device and are configured to activate and control security functions.

Security functions may comprise updating the operating system updating security applications or updating security application files. The operating system controls the components of the secure appliance and or the host device and or the client device and facilitates the operation of applications. Examples of operating systems include Windows XP Linux and MacOS. Security applications include those applications for which the primary function is security. Examples of security applications include anti virus programs firewalls and anti spyware applications. Security files are any files that support the security applications. Examples of security files include virus definitions or spyware updates.

The security program s may also generate a security profile of the portable data storage devices and or of the portable data storage device and or of the remote network server . The security profile may comprise a list of updates or patches that the operating system needs or possesses. In one example the security program comprises the Microsoft update Application Programming Interface API in the Microsoft Windows Operating system. The Microsoft update API can scan the portable data storage device to compile a list of existing patches and updates. The list may then be compared to an update list at the Microsoft website to determine needed patches and updates.

In various embodiments the security profile comprises a list of security applications on the secure appliance and or the host device and or the client device . The security profile may also indicate which security applications are missing or inactive. The security profile may also indicate the date the security files were created and whether new security files may be available. In one example the security profile shows the date when the anti virus virus definitions file was created. The anti virus virus definitions file is a file that comprises data to identify viruses and worms. The anti virus definitions file may also include executable code configured to eliminate one or more viruses or worms.

The security status can also indicate whether the security applications are active. In one example the security status indicates if the security applications are currently active. The security status may also indicate if the programs are automatically activated when the digital device is first turned on.

In some embodiments the security status indicates the configuration of the security applications. In one example the security status indicates if the firewall application is configured to block the transmission of data from and or to high risk programs. The security status may also indicate if the anti virus application is configured to scan for viruses in e mail as e mail arrives. In some embodiments the security status also indicates if other applications have appropriate security settings. In one example the security status may show if an e mail program will allow the delivery of executable programs attached to e mail or whether a web browser allows active x programs to run.

The heuristic module can receive data from the quarantine module . The heuristic module applies heuristics and or probability analysis to determine if the data from the portable data storage devices and or the portable data storage device and or the remote network server contains suspicious activity. In one example the heuristic module applies a heuristic which identifies suspicious data within the data. The heuristic module may then flag the data as suspicious. The data can then be buffered and organized into a data flow. The data flow can be provided to the scheduler . In some embodiments the data is provided directly to the scheduler without buffering or organizing the data flow.

The heuristic module can perform any heuristic and or probability analysis. The heuristic module may identify the suspicious characteristic of the data as a result of inspecting the data. Further details regarding exemplary heuristics and or probability analysis are described in U.S. patent application Ser. No. 13 011 344 entitled Systems and Methods for Detecting Malicious PDF Network Content incorporated by reference herein in its entirety. For example when a characteristic of the data packet such as a sequence of characters or keyword is identified that meets the conditions of a heuristic used a suspicious characteristic or feature of the packet of data is identified. The identified features may be stored for reference and analysis. Keywords used by heuristics may be chosen by performing an approximate Bayesian probability analysis of all the keywords in an HTML specification using a corpus of malicious data and a corpus of non malicious data. The approximate Bayesian probability analysis may be based on the principles of the Bayesian theorem and or na ve Bayesian classification. For instance a probability Pthat the keyword appears in malicious data may be computed using the corpus of malicious data while a probability Pthat the keyword appears in non malicious data may be computed using the corpus of non malicious data. A given keyword may be determined to be a suspicious characteristic for being associated with malicious data if a score based on a computed ratio P Pexceeds a threshold of suspicion. The threshold of suspicion may be a value greater than 1 10 30 60 100 or some other number indicating how much more likely the suspicious characteristic is to indicate malicious data than to indicate non malicious data.

A score related to a probability that the suspicious identified characteristic indicates malicious data is determined. An approximate Bayesian probability analysis may be used to determine the score. In various embodiments the approximate Bayesian probability analysis may be performed in real time or using a look up table based on a previously performed approximate Bayesian probability analysis.

For example the approximate Bayesian probability analysis may be performed to determine a relative probability score that a particular feature is associated with the presence of malicious content in a data packet by comparing a corpus of malicious data and a corpus of regular non malicious data. A feature may include a characteristic of the data packet such as a sequence of characters or keyword that meets the conditions of a heuristic used. The feature may also include a characteristic involving more than one packet inspected in sequence or in parallel. An example of a feature may include the character sequence eval unescape which indicates a JavaScript unescape command nested within a JavaScript eval command argument. A probability Pthat the feature is present in a data packet of malicious content is computed by analyzing the corpus of malicious content. A probability Pthat the feature is present in a data packet of non malicious content is computed by analyzing the corpus of non malicious content. A malicious probability score is computed as the base two logarithm of a relative probability factor Pthat the feature is associated with malicious content. The malicious probability score is computed by computing the ratio of the base two logarithm log of the probability that the feature is present in a data packet of malicious content and the base two logarithm of the probability that the feature is present in a data packet of non malicious content. The relative probability factor Pmay be expressed as follows log log log Equation 1

The size of the result log P i.e. malicious probability score may indicate the probability that the suspicious data includes malicious data. For example a result of eleven may indicate that the feature is approximately two thousand times more likely to appear in malicious data than in non malicious data. Likewise a value of twelve may indicate that the feature is approximately four thousand times more likely to appear in malicious data. In some embodiments the malicious corpus and or the non malicious corpus may be continuously updated in response to monitored network data traffic and the malicious probability scores associated with the features may be continuously updated in response to the updates to the corpuses. In other embodiments the corpuses may be created and used in advance to store pre computed malicious probability scores in a look up table for reference when features are identified. The features associated with significant probabilities of malicious data may change as the corpuses change.

Rather than analyzing all files of the remote network device the heuristic analysis may include identifying the types of files and data to be analyzed and limiting the analysis to those types. In addition the remote network device may be monitored to determine incremental files added to the remote network device since the last analysis and perform the analysis only on those incremental files.

Exemplary heuristics analysis is also discussed in more detail in U.S. patent application Ser. No. 13 011 344 entitled Systems and Methods for Detecting Malicious PDF Network Content U.S. patent application Ser. No. 13 350 645 entitled Network Based Binary File Extraction and Analysis for Malware Detection and in U.S. patent application Ser. No. 12 263 971 entitled Systems and Methods for Detecting Malicious Network Content which all are incorporated by reference herein in their entirety.

The heuristic module can retain data packets belonging to a particular data flow previously received e.g. received from a tap or data flow provided by the quarantine module . In one example the heuristic module receives data packets and stores the data packets within a buffer or other memory. Once the heuristic module receives a predetermined number of data packets from a particular data flow the heuristic module performs the heuristics and or probability analysis.

In some embodiments the heuristic module performs heuristic and or probability analysis on a set of data packets belonging to a data flow and then stores the data packets within a buffer or other memory. The heuristic module can then continue to receive new data packets belonging to the same data flow. Once a predetermined number of new data packets belonging to the same data flow are received the heuristic and or probability analysis can be performed upon the combination of buffered and new data packets to determine a likelihood of suspicious activity.

In some embodiments an optional buffer receives the flagged data from the heuristic module . The buffer can buffer and organize the flagged data into one or more data flows before providing the one or more data flows to the scheduler . In various embodiments the buffer can buffer data and stall before providing the data to the scheduler . In one example the buffer stalls the data to allow other components of the controller some time to complete functions or otherwise clear data congestion.

The scheduler is a module configured to retrieve a virtual machine associated with the portable data storage devices and or the portable data storage device and or the remote network server . The virtual machine is software that is configured to mimic the performance of a device. The virtual machine can be retrieved from the virtual machine pool .

In some embodiments the heuristic module transmits the metadata identifying the portable data storage devices and or the portable data storage device and or the remote network server to the scheduler . In other embodiments the scheduler receives one or more data packets of the data from the heuristic module and analyzes the one or more data packets to identify the portable data storage devices and or the portable data storage device and or the remote network server . In yet other embodiments the metadata can be received from the tap.

The scheduler can retrieve and configure the virtual machine to mimic the pertinent performance characteristics of a user device not shown . In one example the scheduler configures the characteristics of the virtual machine to mimic only those features of the user device that are affected by the data copied by the tap. The scheduler can determine the features of the user device that are affected by the data by receiving and analyzing the data from the quarantine module . Such features of the user device can include opening ports that are to receive the data selecting device drivers that are to respond to the data and configuring any other devices coupled to or contained within the user device that can respond to the data. In other embodiments the heuristic module can determine the features of the user device that are affected by the data by receiving and analyzing the data from the tap. The heuristic module can then transmit the features of the user device to the scheduler .

The virtual machine pool may be configured to store virtual machines. The virtual machine pool can be any storage capable of storing software. In one example the virtual machine pool stores a single virtual machine that can be configured by the scheduler to mimic the performance of any user device on the communication network . The virtual machine pool can store any number of distinct virtual machines that can be configured to simulate the performance of any user devices.

The analysis environment is a module for analysis of the data that may simulate transmission of the data e.g. data files between the portable data storage devices and or the portable data storage device and or the remote network server and a user device such as the host device the client device or any other electronic device variously running the data files with its associated application or running an executable file in order to analyze the effects upon the user device. The analysis environment may identify the effects of malware or illegitimate computer users e.g. hackers computer crackers or other computer users by analyzing the simulation of the effects of the data upon the user device that is carried out on the virtual machine. There may be multiple analysis environments in some embodiments.

As the analysis environment analyzes the data behavior of the virtual machine can be closely monitored for unauthorized activity. If the virtual machine crashes performs illegal operations performs abnormally or allows access of data to an unauthorized computer user the analysis environment can react. In some embodiments the analysis environment performs a dynamic taint analysis to identify unauthorized activity dynamic taint analysis is further described in . 

Once unauthorized activity is detected the analysis environment can generate the unauthorized activity signature configured to identify data containing unauthorized activity. Since the unauthorized activity signature does not necessarily require probabilistic analysis to detect unauthorized activity within data unauthorized activity detection based on the unauthorized activity signature may be very fast and save computing time.

The policy engine may be coupled to the heuristic module and is a module that may identify data as suspicious based upon policies contained within the policy engine . In one example a user device may be a computer designed to attract hackers and or worms e.g. a honey pot . The policy engine may contain a policy to flag any data directed to the honey pot as suspicious since the honey pot should not be receiving any legitimate data. In another example the policy engine can contain a policy to flag data directed to any intended user device that contains highly sensitive or mission critical information.

The policy engine can also dynamically apply a rule to copy all data related to data already flagged by the heuristic module . In one example the heuristic module may flag a single packet of data as suspicious. The policy engine may then apply a rule to flag all data related to the single packet e.g. data flows as suspicious. In some embodiments the policy engine flags data related to suspicious data until the analysis environment determines that the data flagged as suspicious is related to unauthorized activity.

The policy engine may scan data to detect unauthorized activity based upon an unauthorized activity signature. In some embodiments the policy engine retrieves the unauthorized activity signature from a signature module not shown . The data is then scanned for unauthorized activity based on the unauthorized activity signature.

The policy engine can scan the header of a packet of data as well as the packet contents for unauthorized activity. In some embodiments the policy engine scans only the header of the packet for unauthorized activity based on the unauthorized activity signature. If unauthorized activity is found then no further scanning may be performed. In other embodiments the policy engine scans the packet contents for unauthorized activity.

Advantageously unauthorized activity may be found by scanning only the header of a packet the contents of the packet or both the header and the contents of the packet. As a result unauthorized activity that might otherwise evade discovery can be detected. In one example evidence of unauthorized activity may be located within the contents of the packet. By scanning only the contents of the packet unauthorized activity may be detected.

The virtual switch may be software that is capable of forwarding packets of flagged data to the virtual machine . The virtual switch simulates the communication network and the virtual machine simulates the user device. The virtual switch can route the data packets of the data flow to the correct ports of the virtual machine .

The virtual machine is a representation of the user device such as for example the host device the client device or any other electronic device that can be provided to the analysis environment by the scheduler . In one example the scheduler retrieves a virtual machine from the virtual machine pool and configures the virtual machine to mimic the user device. The configured virtual machine is then provided to the analysis environment where it can receive flagged data from the virtual switch .

As the analysis environment simulates the transmission of the data the behavior of the virtual machine can be closely monitored for unauthorized activity. If the virtual machine crashes performs illegal operations performs abnormally or allows access of data to an unauthorized computer user the analysis environment can react.

In some embodiments the analysis environment performs dynamic taint analysis to identify unauthorized activity. For a malware attack to change the execution of an otherwise legitimate program the malware attack may cause a value that is normally derived from a trusted source to be derived from the user s own input. Program values e.g. jump addresses and format strings are traditionally supplied by a trusted program and not from external untrusted inputs. Malware however may attempt to exploit the program by overwriting these values.

In one example of dynamic taint analysis all input data from untrusted or otherwise unknown sources are flagged. Program execution of programs with flagged input data is then monitored to track how the flagged data propagates i.e. what other data becomes tainted and to check when the flagged data is used in dangerous ways. For example use of tainted data as jump addresses or format strings often indicates an exploit of a vulnerability such as a buffer overrun or format string vulnerability.

In some embodiments the analysis environment monitors and analyzes the behavior of the virtual machine in order to determine a specific type of malware or the presence of an illicit computer user. The analysis environment can also generate computer code configured to eliminate new viruses worms or other malware. In various embodiments the analysis environment can generate computer code configured to identify data within the data indicative of a malware attack repair damage performed by malware or the illicit computer user. By simulating the transmission of suspicious data and analyzing the response of the virtual machine the analysis environment can identify known and previously unidentified malware and the activities of illicit computer users before a computer system is damaged or compromised.

The method may commence at step with the controller detecting an insertion of the one or more portable data storage devices into the security appliance . In some exemplary embodiments the security appliance may detect insertion of the portable data storage devices and send via a communication network the data stored on the portable storage devices to the controller for analysis. In one example a user may bring a portable data storage device from home to work with an intention of using the portable storage device within the communication network . Security personnel may ask the user to insert the portable storage device into a slot configured to interface with the security appliance . This approach may allow screening portable storage devices such as USB flash drives upon inserting the devices into a security appliance. The security appliance may be associated with a security screening location such as a security checkpoint in a building. The security appliance may include a number of slots configured to receive a plurality of portable data storage devices simultaneously.

At step the controller may receive data stored on the one or more portable data storage devices forwarded by the security appliance over the communication network . Upon insertion of the portable data storage device into the security appliance the security appliance may provide the owner of the portable data storage device with an estimated time to complete the analysis as shown at step . The estimate is based on the current latency of the communication network.

At step the controller may analyze the data received from the security appliance with a predetermined heuristics to determine whether the data is suspicious i.e. includes certain suspicious traits . The latency of the communication network may not allow the data to be analyzed with normal heuristics without exceeding the maximum time allotted for the analysis. Therefore a faster heuristics analysis may be utilized depending on the latency of the communication network . The controller may need to decide which heuristics to use to identify suspected malicious content and execute the content in virtual machines.

If it is determined at step that the data is not suspicious a report to this effect is generated and sent to the security appliance via the communication network . The portable data storage device may then be returned to the owner. However in the situation of a reduced level of scrutiny the clearance may be provisional. If a later analysis with normal heuristics indicates a problem the owner of the portable data storage device may be located by the security personnel and appropriate measures may be taken. For example the portable data storage device may be confiscated.

If on the other hand the heuristics analysis indicates a suspicious activity the controller may execute the suspected data in a simulated real life environment. Thus if it is determined at step that the data is suspicious at step the controller may configure a virtual machine to receive and safely execute the suspected data in a simulated real life environment. The method continues to analyze the response of the virtual machine to identify malware at step . At step it may be determined whether the data includes malware. If it is determined that the data does not include malware a report to this effect may be generated and sent to the security appliance via the communication network . The portable data storage device may then be returned to the owner. If on the other hand it is determined at step that the data includes malware the method may proceed to step to identify the data storage devices containing malware. If malware is found at step the security appliance may provide a warning signal. For example a pattern of beeps and or flashes may indicate a security threat.

The method may allow detecting malicious content on a portable data storage device upon insertion of the device into a host device such as a PC. The techniques utilized to determine whether the portable data storage device contains malware are similar to the ones described above. The exemplary method may commence at step with the controller detecting the portable data storage device upon its connection to the host device . At step the controller may access data on the portable data storage device .

At step the method may continue with the controller quarantining the data within the host device . For example the controller may prevent execution of any files stored on the portable data storage device . The quarantining may also include ARP manipulations or configuring DHCP services to direct the data from the portable data storage device to the controller.

At step the controller may analyze the data received from the host device with predetermined heuristics to determine whether the data is suspicious i.e. includes certain suspicious traits . If it is determined at step that the data is not suspicious a report to this effect may be generated and displayed by the host device . If on the other hand the heuristics analysis indicates a suspicious activity the controller may execute the suspected data in a simulated real life environment. Thus if it is determined at step that the data is suspicious at step the controller may configure a virtual machine to receive and safely execute the suspected data in a simulated real life environment. The method may analyze the response of the virtual machine and identify malware at step . At step it may be determined whether the data includes malware. If it is determined that the data does not include malware a report to this effect may be generated and displayed by the host device .

If on the other hand it is determined at step that the data includes malware the method may proceed to step to identify that the data storage device contain malware.

The method may allow detecting malicious content on a remote network server upon establishment of connection of a client device such as a PC to the remote network server over a network such as the Internet or LAN. The techniques utilized to determine whether the remote network server contains malware are similar to the ones described above.

The exemplary method may commence at step with the controller detecting connection of the client device to the remote network server over the communication network . Such connection may be detected for example when the client device requests or confirms downloading some content from the remote network server . In some other embodiments the connection can be detected by analyzing IP addresses of the client device .

At step the controller may redirect data flow from the client device to the controller thereby preventing downloading the content to the client device . At this step the controller receives the content of the remote network server .

At step the controller may analyze the data received from the remote network server with predetermined heuristics to determine whether the data is suspicious i.e. includes certain suspicious traits . If it is determined at step that the data is not suspicious a report to this effect may be generated and displayed by the client device . If on the other hand the heuristics analysis indicates a suspicious activity the controller may execute the suspected data in a simulated real life environment. Thus if it is determined at step that the data is suspicious at step the controller may configure a virtual machine to receive and safely execute the suspected data in a simulated real life environment. The method may analyze the response of the virtual machine and identify malware at step . At step it may be determined whether the data includes malware. If it is determined that the data does not include malware a report to this effect may be generated and displayed by the client device . If on the other hand it is determined at step that the data includes malware the method may proceed to step to identify that the remote network server contains malware. The data that includes malware may be located within one or more files in some embodiments and those one or more files may be moved to a pre configured quarantine folder.

The malware found in regards to the remote network server may be associated with one or more callback channels for transmitting data back to the remote network server. For example the malware may comprise a bot. A bot is a software robot configured to remotely control all or a portion of a digital device e.g. a computer without authorization by the digital device s user. Bot related activities include bot propagation and attacking other computers on a network. Bots commonly propagate by scanning nodes e.g. computers or other digital devices available on a network to search for a vulnerable target. When a vulnerable computer is scanned the bot may install a copy of itself. Once installed the new bot may continue to seek other computers on a network to infect. The bot may also without the authority of the infected computer user establish a command and control C C communication channel e.g. a callback channel to receive instructions. For example an IRC protocol may be used for bot command and control. Therefore detecting the existence or establishment of an IRC channel in the network may indicate a possible botnet callback channel.

In some embodiments the virtual machine is also configured to detect such callback channels. Information regarding the detected callback channels may be made stored or otherwise be made available to other elements of a malware detection system e.g. to systems for detecting malware originating from the Internet rather than just from the remote network server. Further details regarding exemplary callback C C channel detection are described in U.S. patent application Ser. No. 11 998 750 entitled Systems and Methods for Detecting Encrypted Bot Command Control Communication Channels and U.S. patent application Ser. No. 11 998 605 entitled Systems and Methods for Detecting Communication Channels of Bots both of which are incorporated by reference herein in their entirety.

The memory system is any memory configured to store data. Some examples of the memory system include storage devices such as RAM or ROM.

The storage system is any storage configured to retrieve and store data. Some examples of the storage system are flash drives hard drives optical drives and or magnetic tape. The storage system can comprise a database or other data structure configured to hold and organize data e.g. data copies of data buffered data. In some embodiments the controller includes memory in the form of RAM and storage in the form of flash data. The memory system and or the storage system can comprise caches and buffers configured to retain data or copies of data.

The I O interface is any device that can receive input and provide output to a user. The I O interface can be but is not limited to a keyboard a mouse a touchscreen a keypad a biosensor or floppy disk drive.

The communication network interface can be coupled to any user device via the links . The communication network interface may support communication over a USB connection a firewire connection an Ethernet connection a serial connection a parallel connection or an ATA connection. The communication network interface may also support wireless communication e.g. 802.11 a b g n or wireless USB . It will be apparent to those skilled in the art that the communication network interface can support many wired and wireless standards.

The display interface is an interface configured to support a display monitor or screen. In some embodiments the controller comprises a graphical user interface to be displayed to a user over a monitor in order to allow the user to control the controller .

The above described modules can be comprised of instructions that are stored on storage media. The instructions can be retrieved and executed by a processor e.g. the processor . Some examples of instructions include software program code and firmware. Some examples of storage media comprise memory devices and integrated circuits. The instructions are operational when executed by the processor to direct the processor to operate in accordance with embodiments of the present invention. Those skilled in the art are familiar with instructions processor s and storage media.

The present invention is described above with reference to exemplary embodiments. It will be apparent to those skilled in the art that various modifications may be made and other embodiments can be used without departing from the broader scope of the present invention. Therefore these and other variations upon the exemplary embodiments are intended to be covered by the present invention.

