---

title: Controlling requests through message headers
abstract: In some implementations, in response to receiving a request message from a client device, a computing device may provide a response message that includes a custom or non-standard control header. The control header may instruct the client device to wait before sending any subsequent request messages to the computing device. For example, the control header may inform the client device to wait until passage of period of time or until after a specified time arrives before sending a subsequent request message. A module, an application, an operating system, or other software on the client device that receives the response message, interprets the control header and performs one or more operations to comply with the control header. Accordingly, some implementations herein utilize message headers to perform message throttling for controlling an amount of network traffic or load on one or more computing devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09021109&OS=09021109&RS=09021109
owner: Amazon Technologies, Inc.
number: 09021109
owner_city: Reno
owner_country: US
publication_date: 20120123
---
Two computing devices may exchange data or other information over a communication network using a messaging protocol. For instance a computing device may send a request message to another computing device over the communication network. The other computing device may send a response message back over the communication network to the first computing device in reply to the request message. However when this messaging model is increased in scale complications may occur. For example a large number of computing devices may send a large number of request messages to a single computing device or to a finite group of computing devices over a short amount of time. This eventuality has the potential to overload the computing device or group of computing devices which may result in high response latency timeouts denial of service system outages or other undesirable effects.

This disclosure includes techniques and arrangements for using message headers to control requests received from computing devices. Message headers typically have a reserved area in the front of a message to provide metadata regarding the message. For instance a message header may be a portion of a message that typically precedes a content or body portion of the message and provides identification information regarding the message possibly descriptive information regarding content included with the message and so forth. As one example in hypertext transfer protocol HTTP the header includes a text field e.g. a stream of text that may be sent with or without any content. HTTP further includes standard headers that are specific to request messages or to response messages and other standard and non standard headers that are used by a client and or server to describe or query the content or the environment.

In some implementations herein in response to receiving a request message from a client device a computing device may provide a response message that includes a custom or non standard control header. The control header may instruct request or otherwise inform the client device to wait before sending any subsequent request messages to the computing device. For example the control header may include information that instructs and or informs the client device to wait for a specified period of time such as a number of seconds minutes hours days etc. Alternatively the control header may include information that instructs and or informs the client device to wait until after a specified time such as after a particular time on a particular day before sending a subsequent request message. As still another alternative the control header may include information that instructs and or informs the client device to never send a subsequent request message. An application programming interface API a module an application an operating system or other software on the client device that receives the response message interprets the control header and performs one or more operations to comply with the control header to wait before sending a subsequent request message.

Accordingly some implementations herein utilize message headers to perform message throttling for controlling an amount of network traffic or load on one or more computing devices. The control headers are utilized to request or inform the device or a module on the device to wait before sending a subsequent message. Accordingly a first request message may be fully responded to by the response message that includes the control header. Thus the subsequent request message s referred to herein that the client device waits to send is not a retry of the first request message but instead may be one or more subsequent request messages which may or may not be of the same type may be directed to the same or different subject matter may be directed to the same or different services and so forth. For example the control header may be used to instruct or inform a particular module that uses a particular API to wait before sending a subsequent request message. Thus other modules on the client device may continue to send request messages while the particular module is waiting in accordance with the information in the control header. As another alternative a control header may instruct or inform some or all of the modules on a client device to wait before sending subsequent request messages.

As one example a large number of client devices may include software that periodically contacts a service provider computing device to determine whether new information is available for the particular client device and or to provide information from the particular client device to the service provider computing device. For instance to enable a data pull functionality to emulate a data push experience to a user of the client device the client device may be configured to check for updates to various types of information upon the activation of certain conditions interfaces controls or triggers at the client device such as in response to certain user actions the passage of a predetermined period of time or the like. Accordingly some implementations may automatically and remotely control the frequency with which each client device checks for updates or otherwise sends request messages to computing devices of a service provider to avoid overload on the computing devices of the service provider.

For example suppose that a particular service calling module on the client device continually calls a particular service provided by a service provider computing device on a periodic basis when the client device is being used in a particular fashion or performing a particular function. When a large number of client devices are continually calling the same service the service may begin to be overloaded. Accordingly the service may use control headers to dynamically limit the frequency with which each client device may request a particular service such as by informing the particular service calling module or other software issuing the request messages to wait before sending another request message. For example the control header may instruct request or otherwise inform the software on the client device to not send a subsequent request message to the particular service for a specified period of time or to wait until after a specified time. In certain situations the control header may inform the software not to send any subsequent request messages to any service provider computing devices for a specified period of time and or until after a specified time.

As another example it may happen that a software update having a bug is issued by a service provider to a plurality of client devices before the bug is discovered. For instance the bug may cause the client devices to repeatedly call the service provider computing devices. Thus until the bug can be corrected the service provider computing devices may be inundated with messages from a large number of client devices. To prevent the service provider computing devices from crashing or otherwise becoming inoperable the service provider computing devices may issue responses to the messages that include control headers to throttle the number of calls made by each client device. For example in some cases the control header may instruct or inform the client devices to wait several hours several days or the like before making a subsequent call to the service provider computing devices so that the service provider computing devices may remain functional while the service provider generates and issues a software update to correct the bug.

In some examples one or more APIs at the client device may be implemented to send request messages to the service provider computing devices. Accordingly the control header may be used to control request messages according to a granularity of individual APIs that are used to make calls to or are otherwise used to send request messages to a service provider computing device. Therefore in some instances the control header may be directed to controlling a particular API from among multiple APIs employed or implemented by one or more service calling modules on a particular client device. In other words the control header may be used to limit or throttle the frequency with which the particular API on the client device is used to send messages to the service provider computing devices. Alternatively the control header may be directed to controlling a subset of APIs used on a particular client device. As still another alternative the control header may be directed to controlling all of the APIs used on a particular client device.

In some examples the control header may be a Hypertext Transfer Protocol HTTP header. HTTP is one example of a suitable network messaging protocol according to some implementations herein. HTTP allows the use of non standard or custom header fields. For example non standard HTTP headers are typically marked by prefixing the header field name with X . Accordingly in some implementations the control header herein may be a non standard HTTP header that is recognized by software executed on the client device. The control header may include a header value or other header information in the header field that instructs or otherwise informs the client device to wait before sending any subsequent request messages.

In some implementations each service provider computing device that maintains at least one API that is a target of a call from the client device may issue control headers for controlling traffic to the at least one API maintained by the service provider computing device. In other examples a first service provider computing device may use control headers to manage traffic to a plurality of APIs maintained either at the service provider computing device or at other service provider computing devices. As another example in addition to or as an alternative to a control header information contained in a message body of a response message may inform the client device or one or more modules thereon to wait before sending a subsequent request message. Furthermore while some implementations herein are described in the environment of HTTP for discussion purposes implementations herein are not limited to the examples provided but may be extended to other environments and protocols for messaging as will be apparent to those of skill in the art in view of the disclosure herein.

The client device may send a request message to the service provider computing device . For example an application an operating system an application programming interface API or other component module or functionality on the client device may send the request message to the service provider computing device . The request message may request data content information or other resources from the service provider computing device . Alternatively the request message may provide data content information or other resources to the service provider computing device .

In response to the request message a reply module on the service provider computing device may send a response message to the client device that sent the request message . The response message may include a control header that may provide instructions or control information to the client device . For example the control header may include header information containing information to instruct or inform the client device to wait before sending subsequent request message s as indicated at .

In some examples the header information may instruct request or inform the client device to wait until after a specified period of time has passed or until after a specified date and time has arrived. Thus the header information may include an amount of time e.g. a number of seconds minutes hours days etc. for the client device to wait before sending a subsequent request message. Alternatively the header information may include a specified time date etc. after which the client device may send a subsequent request message. As one additional example the header information may be never in some cases i.e. the client device is instructed to never send another request message.

As one example based on status information relating to one or more conditions of the service provider computing device and or one or more conditions of one or more other computing devices not shown in and or other current or future conditions metrics or parameters the reply module may determine an appropriate length of time for the client device to wait before sending a subsequent request message. For instance if the status information indicates that the service provider computing device is currently under a heavy load due to receiving a large number of request messages from a large number of client devices the reply module include the control headers in the response messages provided to the client devices . Each control header may instruct or inform the respective client device that receives a response message to wait according to a specified time limit before sending subsequent request messages. For example the information contained in the control header may apply to the entire client device or may apply to a particular module application API or other functionality or messaging component of the client device . Thus the client device may include one or more service calling modules that send the request message and or receive the response message .

The service calling module s or other functionality at the client device receives the response message having the control header . In response to reading the control header the client device or a particular service calling module an application an API software or other functionality of the client device may wait in accordance with the control header before sending a subsequent request message to the service provider computing device . Accordingly in some examples herein the service provider computing device may utilize the control headers to manage throttle or otherwise control the number of repeated request messages received from client devices in communication with the service provider computing device .

For example client devices may sometimes needlessly send the same request messages over and over as a result of user interactions or other conditions at the client device. Consequently if the service provider computing device is currently under a heavy load in a brownout condition or suffering from high latency times when responding to request messages the service provider computing device may limit or throttle the number of subsequent request messages that can be issued by the client devices . Numerous other variations will be apparent to those of skill in the art in light of the disclosure herein.

In some implementations the service provider computing device s may be provided by one or more service providers and may include one or more servers or other types of computing devices that may be embodied in any number of ways. For instance in the case of a server the service provider computing device may be implemented using a single server a cluster of servers a server farm or data center virtual servers a cloud hosted computing service and so forth although other computer architectures e.g. a mainframe architecture may also be used. Further while the figures illustrate the components of the service provider computing device as being present in a single respective location it is to be appreciated that these components may be distributed across different computing devices and locations in any manner. For instance service provider computing device may provide the various functionalities described herein distributed in various ways across different computing devices.

The service provider computing device may be in communication with one or more additional service provider computing devices . For example the service provider computing devices may provide services to the service provider computing device to support one or more services provided by the service providing computing device to the client devices . The service provider computing devices s may also or alternatively provide services directly to the client devices . The service provider computing devices may be located together or separately and organized for example as virtual servers server banks and or server farms. The described functionality may be provided by the servers of a single entity or enterprise or may be provided by the servers and or services of multiple entities or enterprises. Thus in some examples the service provider computing devices may communicate with the service provider computing devices and or the client devices through network s .

As illustrated in the service provider computing device includes one or more processors one or more computer readable media one or more communication interfaces and one or more input output I O components . Similarly the service provider computing device s may include processor s computer readable media communication interfaces and I O components .

The processor s as well as the other processors described herein may be a single processing unit or a number of processing units e.g. CPUs and may include single or multiple computing units or multiple processing cores. The processor s can be configured to fetch and execute computer readable instructions stored in the computer readable media such as one or more software modules or components which may include the reply module for performing the various functions attributed to the service provider computing device s .

The computer readable media as well as the other computer readable media described herein may include volatile and nonvolatile memory and or removable and non removable media implemented in any type of technology for storage of information such as computer readable instructions data structures program modules or other data. Such computer readable media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape solid state storage magnetic disk storage RAID storage systems storage arrays network attached storage storage area networks cloud storage or any other medium that can be used to store the desired information and that can be accessed by a computing device or other processor. Depending on the configuration of the service provider computing device the computer readable media may be a type of computer readable storage media and may be a non transitory storage media.

The communication interface s as well as the other communication interfaces described herein may include one or more interfaces and hardware components for enabling communication with various other devices such as the client device s and or the service provider computing device over the network s . For example communication interface s may facilitate communication through one or more of the Internet cable networks cellular networks wireless networks e.g. Wi Fi cellular near field and wired networks. Various different approaches to examples described herein can be implemented in various environments. For instance the network s may include any appropriate network including an intranet the Internet a cellular network a LAN WAN VPN Virtual Private Network or any other network or combination thereof. Components used for such a system can depend at least in part upon the type of network and or environment selected. Components for communicating via such networks are well known and will not be discussed herein in detail.

Service provider computing device may be further equipped with various input output I O components . Such I O components may include a display various user interface controls e.g. buttons mouse keyboard touch screen etc. audio speakers connection ports and so forth.

The computer readable media may be used to maintain any number of functional components that are executable by the processors . In many implementations these functional components comprise instructions or programs that are executable by the processors and when executed implement operational logic for performing the actions attributed to the service provider computing devices . An example functional component of the service provider computing device that may be executed on the processor s for implementing the various functions and features related to providing control headers as described herein includes the reply module as well as various other modules components software and code as described in the various implementations herein. Additional functional components stored in the computer readable media that are not shown in may include one or more operating systems for controlling and managing various functions of the service provider computing device .

In addition the computer readable media may include or the service provider computing device may access data used by the various components and modules as described herein such as status information . The service provider computing device may also include many other logical programmatic and physical components of which those described above are merely select examples that are related to the discussion herein. Further in some examples the service provider computing device s may be configured similarly to the service providing computing device s described above but with some different functional components and data depending on the intended use and purpose. Additionally in some implementations the service provider computing devices can correspond to different nodes on the network s and may also correspond to different points of presence on the network s .

The system further includes the one or more client devices that may communicate with the service provider computing devices and or . As mentioned above the client devices may correspond to a wide variety of computing devices. Thus the client devices may have varied local computing resources such as central processing units or other processor architectures memory or mass storage collectively included in computer readable media graphics processing units communication network availability and bandwidth and so forth. In the illustrated example the client device may include one or more processors computer readable media communication interfaces and I O components . The processor s may be any suitable processor CPU or the like for executing computer readable instructions. The communication interface s may support communication over the network s . For example the client devices may include hardware and software components for establishing communications over the network s with service provider computing devices and or . Thus the client devices may be equipped with networking equipment that facilitates communications over the Internet an intranet LAN WAN or so forth using wired and or wireless technologies.

In some examples the computer readable media may embody any of the examples of the computer readable media described above but may include different functional components and data. In the illustrated example the computer readable media may include one or more applications and an operating system . The application s may include a browser application or other applications such as a mobile application an online application or the like able to communicate with the service provider computing devices and or . For example the application and or the operating system may include a service calling module as described above shown with the application in this example that sends the request message to the service provider . In some cases the service calling module may invoke implement or use an API provided by the application or the operating system while in other cases the service calling module may be other software that sends the request message . Still alternatively the service calling module may initiate control or utilize one or more APIs . For example the computer readable media may include one or more APIs that may be independent of the application s and which may be used to generate calls to the service provider s based on various conditions triggers user actions application instructions and so forth. Further the client device may include various other hardware and software components not illustrated in depending on the configuration type and intended use of the client device .

The I O components included with the client device may include a display for displaying interfaces and content to a user as well as various controls and input devices such as a virtual or physical keyboard a mouse a pointing stick a touchpad a trackball a joystick a remote control buttons accelerometer gyroscope compass Global Positioning System device and or various other controls for performing desired inputs and interactions with the client device .

The client device may send one or more request messages to one or more of the service provider computing devices or . For example the request message may include a request for data or other information. Alternatively the request message may provide data or information to the service provider .

As an example suppose that the service provider desires to slow or throttle network traffic to the service provider computing device due to a current heavy call volume. For example the reply module on the service provider computing device may refer to status information and determine that throttling of calls to the service provider computing device should take place. As one example a large number of client devices may each send multiple request messages in close succession. Accordingly in the response messages provided to the client devices in reply to the request messages the reply module may include a control header . The control header may include a header value in a field of the control header as header information. Thus the control header may be included with any other headers provided with the response message .

Upon receiving the response message and interpreting the header value of the control header the API or service calling module that receives the response message and interprets the control header may perform one or more operations to comply with the control header . For example the control header may instruct or otherwise inform the API service calling module application and or operating system to wait according to a specified time limit before sending a subsequent request message to the service provider computing device . For instance the service calling module may include code or other executable instructions to cause the service calling module to wait for a specified period of time in response to the receipt of the control header . Similarly if the API is used to issue the request message the API may include provisions for refraining from sending any additional request messages following the receipt of the control header in response to the request message . As mentioned above the header value may be any of several different values. For example the header value may be a number of seconds minutes days or so forth that the client device should wait before issuing a subsequent request message. Alternatively the header value may specify a particular time and optionally a date until which the client device should wait before issuing a subsequent request message .

Accordingly the service provider computing device may employ the control headers to effectively limit or throttle the frequency of request messages from the client devices under various contingencies such as when under a high load or the like. This can ensure a better overall user experience as service outages may be prevented. Further throttling of unnecessary calls by a client device to the service provider can save battery life and or improve overall performance of certain client devices . In addition when the status information indicates that there is sufficient capacity on the service provider computing devices the message throttling rates may be reduced. Additionally the illustrated system is merely one example provided for discussion purposes and numerous other variations will be apparent to those of skill in the art in light of the disclosure herein.

HTTP messaging may be carried out through TCP IP sockets or the like. The formats of both the request and response messages are similar. Both kinds of messages consist of an initial line zero or more header lines a blank line i.e. a CR LF carriage return line feed by itself and an optional message body e.g. a resource or resource portion . HTTP includes a plurality of standard headers for request messages and response messages. HTTP also allows the use of non standard header fields which are conventionally marked by prefixing the field name with an X . 

In the illustrated example of the client device may send the request message to the service provider computing device . The request message may include a request line and zero or more HTTP headers such as header 1 having a value 1 header 2 having a value 2 header 3 having a value 3 and so forth. Optionally the request message may include a message body which may be a payload or data included with the request message . In some examples the message body included with the request message may provide information to the service provider computing device such as annotations or highlights made to a digital work on the client device logs collected by the client device and communicated to the service provider and or other information that is provided by the client device to the service provider . In other examples however no message body is provided with the request message .

The request message may be received by the service provider computing device . The received request message may be serviced by the reply module to provide the response message . In this example the response message includes a status line one or more HTTP headers and a message body . In some examples the message body may include data or other information requested by the request message . However in other examples there may be no message body depending on the nature of the request message .

The HTTP headers may include a control header having a conventional HTTP non standard header format that includes an X to indicate that the header is a custom or non standard header. In this example the control header is entitled X Call After which is descriptive of the use of the header . However the control header may be given any name so long as the software operating on the client device that receives or reads the control header is able to recognize the name and respond in the manner described herein. The control header also includes a header value which in this example is 3600 to represent a number of seconds i.e. one hour that the header is instructing requesting or otherwise informing the client device to wait before sending a subsequent request message . Accordingly as one example the header value may be an integer number of seconds e.g. in decimal after the time of the response. Alternatively the control header value may specify a time such as a 10 00 a.m. after which the client device may submit another request message . Thus as another example the control header value may be an HTTP date value. Still alternatively the control header value may be the word never or a similar value to indicate that the client device should not submit another request message . For example the never header value may be used to turn off or deactivate a particular feature on the client device such as a particular service calling module or particular API. The HTTP headers may further include other headers such as header A having a value A header B having a value B header C having a value C and so forth.

In this example the reply module may include at least one API that may be the target of the request message . The API may be used to provide the response message to an API that was used to generate the request message . The reply module may further obtain or access user information request information the status information and information from other services when determining an amount or degree of message throttling to apply to the client device or to a particular API service calling module application etc. Accordingly in some implementations the reply module may take into consideration a number of different parameters metrics or other considerations when determining dynamically an amount of throttling to apply to a particular client device or a particular API on the client device .

In some examples the user information may indicate that a particular user or an associated client device is entitled to less message throttling than other users. Thus some users may be premium users while other users may be general users. For instance the premium users may be identified based on the user information which may be obtained from the request message . Thus premium users may be given preferential messaging with lower throttling rates than the general users. Premium users may be differentiated from general users based on any number of factors such as payment of a fee to become premium users purchasing a more expensive version of the device or so forth.

Furthermore the request information may also be used for determining an amount of throttling to be applied by the control header . For example the message body or one of the headers may include a reason that the client device is calling the service provider. For example the service provider may determine a throttling rate e.g. an amount of time that the particular client device should wait before the next request message is permitted based at least in part on the reason that the client device is calling. As another example if a particular type of call from the client device typically results in an immediate redundant second call the second call may be delayed or instructed not to happen.

Further in some instances a priority hierarchy may be established for various calls and types of calls. For example user generated calls may be given a higher priority than device generated calls. Thus if a first request message is received with information that indicates the type of call is typically followed by a user generated request message the amount of throttling for the subsequent call may be less than if the type of call is typically followed by a device generated call a redundant call or the like. Other types of hierarchies may also be established. Additionally rather than inferring the priority based on the reason for or the type of the request provided in the message the client device itself may include with the message a priority of a current request or an expected next request.

In addition the request information may include a network characteristic such as type of network used for sending or passing the request message . For example users of a Wi Fi or wired network may be throttled at a lower rate than users of a cellular or other more costly wireless network. Accordingly the request information may indicate one or more characteristics of a network over which the request message and or the reply message is sent and may determine a desired or appropriate throttling rate based on the one or more identified characteristics of the network .

The status information may include one or more metrics relating to the service provider computing devices . For example the metrics may include CPU usage call latency call volume and so forth. The metrics may relate to a single service provider computing device or to a group or plurality of service provider computing devices . For example when determining a length of time to request that a client device wait before sending a subsequent request message the reply module may take into account one or more of the metrics as well as the user information the request information and information from other services . For instance the information from other services may include metrics corresponding to one or more additional service provider computing devices as discussed above. Thus if the service provider computing device is dependent on one or more services provided by the service provider computing devices to provide a service to the client devices the service provider computing device may take into account a load on the service provider computing devices when determining the amount of message throttling to apply to the client devices .

In addition the user information may include for each client device and or for each client device service calling module or particular API that has been provided with a response message an expected time at which the client device module API will next call back to the service provider computing device . Should the client device module API not honor the throttling instructions such as due to malfunction or intentional modification of the client device by a user this may be noted by the reply module . Accordingly failure by a particular client device to abide by the control header information may result in repair of software on the client device such as by reloading a malfunctioning portion of the software refusal of service to the particular client device blacklisting of the particular client device or the like.

In addition or alternatively the response message may include control information in the message body to limit subsequent request messages sent by a particular service calling module API application operating system or the like. For example the response message may include a message body which may include information such as data text instructions or the like. Accordingly as an alternative to or in addition to including the control header in the response message the response message may include the control information that instructs requests or otherwise informs the client device to wait before sending a subsequent request message. Thus the control information may include a specified time a specified length of time or never as a control value for informing the client device or a particular application service calling module and or API on the client device to wait before sending a subsequent request message. As one non limiting example the message body may include XML extensible markup language text and the XML text may include information to inform a particular service calling module of a time limit to wait before sending a subsequent request message. Numerous other variations will be apparent to those of skill in the art in view of the disclosure herein.

Each API on the client device may be used to send a request message to a respective service provider computing device or to perform various functions of the client device . For example API may be used to send a request message to the API API may be used to send a request message to the API API may be used to send a request message to the API and so forth. In the illustrated example the service provider computing devices and or may perform message throttling on an individual API basis. Accordingly based at least in part on the parameters and considerations discussed above such as the user information request information status information and information from other services each API or a reply module associated with each particular API may independently determine an amount of throttling to apply to a respective API on the client device . Alternatively the reply module may determine a time limit to be applied for throttling one or more or all of the APIs .

As an example the reply module may use the API to send a response message in response to the request that includes a control header with a control header value having a value of 600. Thus the control header informs a service calling module associated with the API on the client device to wait 10 minutes 600 seconds before issuing a subsequent request message. Similarly the reply module may use the API to issue a response message in response to the request that includes a control header with a control header value having a value of Wed 7 Nov. 2012 23 59 59 GMT. Thus the control header informs a service calling module associated with the API on the client device to wait until a specific date and time arrives before issuing a subsequent request message. For example the specific date and time specified in the header value may be only several minutes in advance of the current time or may be a number of hours days weeks or more in advance of the current time. Further implementations herein are not limited to any particular format for specifying a date time amount of time or combinations thereof.

Similarly the reply module may use the API to issue a response message in response to the request that includes a control header with a control header value having a value of Never. The control header value may be the word never in text form or any term or symbol having a similar meaning to inform a target to not issue a subsequent request message. Thus the control header may informs a service calling module associated with the API on the client device to never issue a subsequent request message to the API . For example the API and or the associated service calling module may be for a feature that is being turned off or deactivated on the client device or which for some other reason may be desired to no longer be used. The other APIs through may be used to issue similar responses to the respective APIs through on the client device to individually control or throttle the request messages issued by each of those APIs. In some examples each individual API may self enforce the instructed throttling limits provided for that API . Alternatively in other examples the operating system the service calling module s and or the application s may enforce the instructed message throttling limits with respect to the APIs .

In addition in some examples the service provider computing devices may send a response message that includes control headers for some or all of the APIs even when one or more of the APIs has not been used to send a request message . For example the reply module on the service provider computing device may have information regarding which APIs are contained on the client device such as through user information and may proactively throttle those APIs and associated service calling modules in response to receiving a request message from any one of the APIs on the client device . For example the service provider computing device may have knowledge of the functions of all of the APIs and service calling modules contained on the client device and may provide various different appropriate control headers and time limits for each of the APIs and service calling modules on the client device . In some examples each individual API may self enforce the instructed throttling limits. Alternatively in other examples the operating system the service calling module s and or the application s may enforce the instructed message throttling limits. Furthermore while several illustrative examples have been discussed herein numerous other variations will be apparent to those of skill in the art having the benefit of this disclosure.

At the computing device receives a request message from a client device. For example the computing device may receive a request message sent using an API or through other software executable on the client device. In some cases the request message may be an HTTP message.

At the computing device refers to status information indicative of a current load on the computing device or various other types of information. For example the computing device may refer to various metrics indicative of a load on the computing device or a group of computing devices with which the computing device is associated. The metrics may include CPU usage call response latency call volume or any of various other metrics that may indicate an amount of traffic or processing load currently being handled by the computing device or the group of computing devices associated with the computing device. Various other parameters may be considered when determining a time limit for throttling messages from a client device such as a type or class of the client device a type of message a reason for the message a priority of a user associated with the client device or of the client device itself a network type used for communicating with the client device a type of content requested by the message and so forth.

At the computing device provides a response message including a header to instruct or inform the client device to wait before sending a subsequent request message to the computing device. For example the message header may include header information that informs the client device to wait for at least one of a specified length of time or until a specified time before sending a subsequent request message to the computing device. As a particular example of a specified length of time the message header may instruct the client device to never send a subsequent request message such as for deactivating a particular feature on the client device. The time limit determined to be applied to the client device may be determined dynamically by the computing device based at least in part on the status information or any of the other parameters or metrics referred to at . In some examples the response message may be an HTTP message and the header may be a non standard HTTP header.

At the client device may send a request message to a computing device. For example the client device may send the request message to a service provider computing device that may provide one or more services to the client device. In some cases an API on the client device may be used to send the request message in response to various triggers conditions inputs or the like.

At the client device receives a response message in response to the request message. The response message may include a header having header information to instruct or inform the client device to wait before sending a subsequent request message. For example the header may provide a time limit for the client device to wait before sending the subsequent request message.

At the client device waits based at least in part on the header information before sending the subsequent request message. For example the client device may wait for the specified time limit as enforced by software present on the client device.

The example processes described herein are only examples of processes provided for discussion purposes. Numerous other variations will be apparent to those of skill in the art in light of the disclosure herein. Further while the disclosure herein sets forth several examples of suitable frameworks architectures and environments for executing the processes implementations herein are not limited to the particular examples shown and discussed.

Furthermore this disclosure provides various example implementations as described and as illustrated in the drawings. However this disclosure is not limited to the implementations described and illustrated herein but can extend to other implementations as would be known or as would become known to those skilled in the art. Reference in the specification to one implementation this implementation these implementations or some implementations means that a particular feature structure or characteristic described is included in at least one implementation and the appearances of these phrases in various places in the specification are not necessarily all referring to the same implementation.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as example forms of implementing the claims

