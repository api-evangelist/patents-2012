---

title: Method and system for non-disruptive migration
abstract: Method and system for processing client provisioning and migration requests is provided. The process evaluates a provisioning request and selects a storage that best meets the client requirements. The process determines if non-disruptive migration is possible and if it is possible then the storage is automatically configured for non-disruptive migration. Once the storage is provisioned and configured, the process receives a migration request to migrate information from the storage. The process determines an access protocol used by the client to access the storage. The process determines if a storage system that manages the storage is capable of supporting non-disruptive migration of information from the storage. If the storage system is capable, then a migration technique is automatically selected for migrating the information from the storage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08719535&OS=08719535&RS=08719535
owner: Netapp, Inc.
number: 08719535
owner_city: Sunnyvale
owner_country: US
publication_date: 20121109
---
This patent application is a continuation of U.S. patent application Ser. No. 12 582 984 filed on Oct. 21 2009 entitled Method and System for Non Disruptive Migration now granted U.S. Pat. No. 8 327 102 the disclosure of which is incorporated herein by its entirety.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

Various forms of storage systems are used today. These forms include network attached storage NAS systems storage area networks SANs and others. Network storage systems are commonly used for a variety of purposes such as providing multiple users with access to shared data backing up data e.g. by data mirroring and others.

A network storage system typically includes at least one computing system may also be referred to as a server which is a processing system configured to store and retrieve data on behalf of one or more client processing systems clients . In the context of NAS a storage server operates on behalf of one or more clients to store and manage shared files in a set of mass storage devices such as magnetic or optical disks or tapes.

In a SAN context the storage server provides clients with block level access to stored data. Some storage systems may be capable of providing clients with both file level access and block level access.

Information stored at a storage system is often migrated from one storage volume may be referred to as source volume to storage volume may be referred to as destination volume . While information is being migrated there may be applications that may still want to use the source volume. It is desirable to migrate information in a non disruptive manner also referred to as non disruptive or transparent so that applications can continue to use the source volume and tasks associated with the source volume can be performed as well.

Storage systems use various protocols and migration technologies to move and secure information. A user typically has to configure and provision storage and then manually configure the migration process. Continuous efforts are being made to automate the migration process.

In one embodiment a method and system for processing client provisioning and migration requests is provided. The process evaluates a provisioning request and selects a storage that best meets the client requirements. The process determines if non disruptive migration is possible and if it is possible then the storage is automatically configured for non disruptive migration.

Once the storage is provisioned and configured the process receives a migration request to migrate information from the storage first storage to a second storage. The process determines an access protocol used by the client to access the storage. The process then determines if storage system that manages the storage is capable of supporting non disruptive migration. If the storage system is capable then a migration technique is automatically selected for migrating the information from the first storage to the second storage.

The embodiments disclosed herein have various advantages. For example a storage administrator while provisioning storage does not have to manually select non disruptive migration because the process and system does that automatically. Furthermore based on the operating environment an optimum migration technique is selected for migrating information.

In another embodiment a machine implemented method for processing a migration request received from a client to migrate information from a first storage to a second storage is provided. The process determines an access protocol used by the client to access the first storage and in response to the migration request the process automatically determines if a storage system that manages the first storage is capable of supporting non disruptive migration of information from the first storage to the second storage. If the storage system is capable then a migration technique is automatically selected for migrating the information from the first storage to the second storage.

In yet another embodiment a machine readable storage medium storing executable instructions which when executed by a machine causes the machine to perform a method for processing a migration request received from a client to migrate information from a provisioned first storage to a second storage is provided. The method includes a determining an access protocol used by the client to access the first storage b in response to the client request automatically determining if a storage system that manages the first storage is capable of supporting non disruptive migration of information from the first storage to the second storage. If the storage system is capable then a migration technique is automatically selected for migrating the information from the first storage to the second storage.

In another embodiment a computer program product with a computer usable storage medium having computer readable instructions embodied therein for processing a migration request received from a client to migrate information from a provisioned first storage to a second storage is provided. The medium includes a instructions for determining an access protocol used by the client to access the first storage b instructions for automatically determining if a storage system that manages the first storage is capable of supporting non disruptive migration of information from the first storage to the second storage c instructions for determining whether non disruptive migration is possible if the storage system is capable of supporting non disruptive migration and d instructions for automatically selecting a migration technique for migrating the information from the first storage to the second storage if non disruptive migration is possible and the storage system is capable of non disruptive migration.

In another embodiment a machine implemented method for provisioning storage for non disruptive migration in response to a client request is provided. The method includes a evaluating the client request and determining an access protocol used by the client to access the storage b determining if a storage system that manages the storage is capable of supporting non disruptive migration of information from the storage and c if the storage system is capable of supporting non disruptive migration then automatically configuring the storage non disruptive migration.

In yet another embodiment a computing system for processing a migration request received from a client to migrate information from a provisioned first storage second storage is provided. The system includes a processing module executing instructions for providing a graphical user interface on a display device to a user for submitting the migration request. Based on the migration request the processing module determines an access protocol used by the client to access the first storage determines whether the storage system is capable supporting non disruptive migration and then automatically selects a migration technique for migrating the information from the first storage to the second storage if the storage system is capable of supporting non disruptive migration.

This brief summary has been provided so that the nature of this disclosure may be understood quickly. A more complete understanding of the disclosure can be obtained by reference to the following detailed description of the various embodiments thereof in connection with the attached drawings.

The following definitions are provided as they are typically but not exclusively used in the computing storage environment implementing the various adaptive embodiments described herein.

 Access Protocol means a standard protocol convention used by client systems to access stored information managed by a storage system. Examples of access protocols include FC NFS CIFS iSCSI and others.

 Aggregate is a logical aggregation of physical storage i.e. a logical container for a pool of storage combining one or more physical mass storage devices e.g. disks or parts thereof into a single logical storage object which includes or provides storage for one or more other logical data sets at a higher level of abstraction e.g. volumes .

 CIFS means the Common Internet File System Protocol an access protocol that client systems use to request file access services from storage systems over a network.

 FC means Fibre Channel a high speed network technology primarily used for storage networking. Fibre Channel Protocol ECP is a transport protocol similar to Transmission Control Protocol TCP used in Internet Protocol IP networks which predominantly transports SCSI commands over Fibre Channel networks.

 Global Namespace refers to a virtual hierarchical collection of unique volume names or identifiers and directory paths to the volumes in which the volumes are stored on multiple server nodes within a clustered storage server system. In the context of the present disclosure the global namespace of a clustered storage server system can be extended to include not only the identifiers of volumes stored on the multiple nodes of the clustered system but also the identifiers of volumes stored on one or more storage systems that are remote from and do not constitute a part of the clustered system.

 iSCSI means the Internet Small Computer System Interface an IP based storage networking standard for linking data storage facilities. The standard allows carrying SCSI commands over IP networks. iSCSI may be used to transmit data over local area networks LANs wide area networks WANs or the Internet and can enable location independent data storage and retrieval.

 NDMP means Network Data Management Protocol a standard for transporting data between NAS and backup devices.

 Migration means moving information stored at a first storage location to another storage location. Non disruptive or transparent migration occurs when the first storage location can be accessed while information is being migrated to another location.

 Provisioning means setting aside and configuring storage resource for a particular purpose. In one embodiment a storage resource is configured such that it can accommodate a user need for storage comply with an access protocol used by the user to access the storage resource and be able to handle non disruptive migration.

 Resource Pool means a collection of one or more storage systems and one or more aggregates and its configuration is typically determined by a network storage administrator.

 Snapshot without derogation to any trademark rights of NetApp Inc. is a technique to prevent data loss in the event a physical storage device e.g. a disk fails in a file system. A snapshot captures the contents referred to herein as primary data of the files and directories in a volume at a particular point in time to allow subsequent recovery of that data if necessary e.g. following an unintended deletion or modification of data . Snapshots can be copied to one or more volumes which then can be used as a mirror or a collection of mirrors and which can provide a back up copy of the file system. When used in this way a mirror can be referred to as a destination volume. In general a destination volume is a volume that contains set of data that is equivalent to the set of data on an original source volume.

 SnapMirror registered trademark of NetApp Inc. is a is a data migration technology provided by NetApp Inc. SnapMirror is used to migrate a dataset from a source volume to a destination. The dataset is migrated entirely during a first migration operation. In subsequent transfers only new and changed data blocks are transferred.

 Volume is a logical data set which is an abstraction of physical storage combining one or more physical mass storage devices e.g. disks or parts thereof into a single logical storage object and which is managed as a single administrative unit such as a single file system. A volume is typically defined from a larger group of available storage such as an aggregate.

As used in this disclosure the terms component module system and the like are intended to refer to a computer related entity either software executing general purpose processor hardware firmware and a combination thereof. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer.

By way of illustration both an application running on a server and the server can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers. Also these components can execute from various computer readable media having various data structures stored thereon. The components may communicate via local and or remote processes such as in accordance with a signal having one or more data packets e.g. data from one component interacting with another component in a local system distributed system and or across a network such as the Internet with other systems via the signal .

Computer executable components can be stored example on computer readable media including but not limited to an ASIC application specific integrated circuit CD compact disc DVD digital video disk ROM read only memory floppy disk hard disk EEPROM electrically erasable programmable read only memory memory stick flash memory device or any other non volatile memory device or any other storage device in accordance with the claimed subject matter.

System may include a plurality of storage systems each coupled to a separate mass storage subsystem . A storage subsystem may include multiple mass storage devices. The mass storage devices in each storage subsystem may be for example conventional magnetic disks optical disks such as CD ROM or DVD based storage magneto optical MO storage flash memory storage device or any other type of non volatile storage devices suitable for storing data. The examples disclosed herein may reference a storage device as a disk but the adaptive embodiments disclosed herein are not limited to disks or any particular type of storage media device.

Each storage subsystem is managed by a corresponding storage system . The storage devices in each storage subsystem can be organized into one or more RAID groups in which case the corresponding storage system accesses the storage subsystem using an appropriate RAID protocol.

Each storage system may operate as a NAS based file server a block based storage server such as used in a storage area network SAN or a combination thereof or a node in a clustered environment described below with respect to or any other type of storage server. Note that certain storage systems from Network Appliance Inc. NetApp in Sunnyvale Calif. are capable of providing clients with both file level data access and block level data access.

The storage systems may be coupled through a network to a number of clients . Each client may be for example a conventional personal computer PC workstation or the like. The network may be for example a local area network LAN a wide area network WAN or other type of network or a combination of networks. Each storage system receives and responds to various read and write requests from clients directed to data stored in or to be stored in a corresponding storage subsystem .

Also connected to the network is a management console in which the storage management application may reside and execute. The management console may be for example a conventional PC a workstation or the like. The storage management application may be used by a storage network administrator to manage a pool of storage devices may also be referred to as a resource pool . Storage management application enables a storage administrator to perform various operations such as monitoring and allocating storage space in the storage pool creating and deleting volumes directories and others. The management application also allows a storage administrator to provision and configure storage space for non disruptive migration as described below in detail.

Communication between the storage management application clients and storage systems may be accomplished using any of the various conventional communication protocols and or application programming interfaces APIs the details of which are not germane to the technique being introduced here. This communication can be done through the network or it can be via a direct link not shown between the management console and one or more of the storage systems .

One or more other storage related applications may also be operatively coupled to the network residing and executing in one or more other computer systems . Examples of such other applications include data backup software snapshot management software and others.

The techniques being introduced here can be implemented in the storage management application . illustrates the storage management application in greater detail according to certain embodiments that implement the process described below. In the illustrated embodiment the storage management application includes a graphical user interface GUI module to generate a GUI e.g. for use by a storage administrator a provisioning manager module may also be referred to as a provisioning manager provisioning storage according to one embodiment one or more other management modules to perform various other storage management related functions and a communication module . In another embodiment the storage management application may provide a and line interface CLI for use by a storage administrator for managing and configuring storage systems. The communication module implements one or more conventional communication protocols and or APIs to enable the storage management application to communicate with the storage systems and clients .

Provisioning manager typically receives a provisioning request from a client . The request may specify storage space requirement and an access protocol that the user will use to access the storage after it is provisioned. As described below in more detail provisioning manager scans a storage resource pool selects a storage space that best meets the user requirements provisions the storage space and configures the provisioned storage space for non disruptive migration as described below.

In one embodiment storage management application generates and maintains a migration data structure may also be referred to as data structure that may be used for configuring non disruptive migration of a dataset from the provisioned storage to another destination. Data structure may be a table a relational database a data object or any other logical component that may be used to implement the adaptive embodiments described herein. In one embodiment data structure may include various components A D that are now described below in detail.

In one embodiment data structure may include configuration information A may also be referred to as data structure A for the provisioned storage. Configuration information A may include information regarding the access protocol that is used for accessing the provisioned storage whether the provisioned storage is used by the storage system for primary or secondary storage and other information. In one embodiment configuration information A may be a table with a plurality of fields that are populated by provisioning manager in response to a provisioning request as described below in more detail. The plurality of fields may include an identifier identifying the provisioned storage access protocol used for accessing the storage identifier identifying a storage system s that manages the provisioned storage and other fields.

If the provisioned storage is to be used for secondary storage see then configuration information A may also include details regarding back up frequency identify technology that may be used for back up and other information used for secondary storage.

Configuration information A is generated and maintained by storage management application . The information included in configuration information A may be obtained from various sources including the storage systems clients and storage subsystems. Storage management application may collect the information as part of the provisioning process or as a part of configuring the various components of the storage systems.

Data structure may also include storage system information B may also be referred to as data structure B . The storage system in this context means one or more storage systems or nodes for a cluster system that manage access to the provisioned storage. Storage system information B may be populated by the storage management application .

Storage system information B may include information regarding the capabilities of the storage systems. For example storage system information B may include information regarding whether the storage system is capable of hosting a virtual storage system and whether the storage system is a part of a clustered system and uses a global namespace for communication.

Storage system information B may also include information regarding how the storage system is exposed a user for example a storage administrator. For example storage system information B may include information regarding whether a provisioned storage is presented via a virtual storage system. The information may also indicate whether the provisioned storage space is a part clustered system and may include the global namespace that is used to access the clustered system. If the user is exposed to the actual physical storage then that aspect may also be indicated by storage system information B.

Storage system information B is generated and maintained by storage management application . The storage management application may obtain the foregoing information by polling the storage systems or may be stored when the storage system is configured and updated by storage management application .

Data structure may also include migration technology information C may also be referred to as data structure C . Storage management application maintains information regarding appropriate migration technology that may be used to migrate information from a source to a destination. The appropriate migration technology provides an optimum migration methodology performing dataset migration from a source to a destination. Migration technology information C may include information regarding different storage systems including how a storage system provides information and what technologies migration processes that may be available to migrate storage. For example data structure C may include information indicating that a storage system provides information using NES and has access to SnapMirror Volume Copy Volume Move and NDMP Copy and other migration technologies for processing a migration request as described below in detail. SnapMirror Volume Copy and Volume Move are proprietary migration technologies provided by NetApp Inc. It is noteworthy that the examples of migration technologies are simply provided herein as an illustration for data structure C and any migration technology may be included in data structure C.

Migration technology C may also include information regarding backup technology process that may be used migrating a secondary volume as described below.

Migration technology C may be generated and maintained by storage management application . The storage management application may obtain information for migration technology C by polling the storage systems or may generate update this inform when the storage system is configured by storage management application .

Data structure may also include licensing information D may also be referred to as data structure D used by storage management to ascertain if a user has the appropriate license to use a migration technology specified in C. Licensing information D may be used by storage management application to verify if a client is allowed to use and access a particular migration technology methodology. For example licensing information D may show if a client can use SnapMirror perform a Volume Copy operation or use any other migration related technology.

Although licensing information D is shown as being sub component of data structure it may be maintained by any entity for example an entity that provides client access to storage system and management application . Storage management application may communicate with a central repository or server that stores licensing information D for clients in a database not shown . Storage management application may query the server determine if a particular client has a valid license selected migration technology.

In one embodiment although data structure is shown to have multiple components for example data structures A D each of these components may exist as separate modules or may be included in an integrated single data structure. In a distributed architecture different components of data structure may be stored in different locations and may be accessible to storage management application via network .

Data structure may be maintained by storage management application at a memory location that is accessible to storage management application . For example the memory location may be local to the management console that executes storage management application or may be remote to management console .

The storage management application may also maintain policies a list of all volumes in a storage pool as well as a data structure shown as free space and may also be referred to as free space with information regarding all free storage space in a storage pool. Free space may be a table database or any other data structure. Free space may be maintained by storage management application at a memory location that is accessible to storage management application . For example the memory location may be local to the management console that executes storage management application or may be remote to management console . Free space may be maintained and updated by storage management application by communicating with different storage systems via network or otherwise.

Free space may include details regarding storage space that may be available for a user at any given time. The details may include type of storage available storage space the access protocol that may be used to access available storage and any other information that can be used to provision and configure storage.

In one embodiment storage management application may use policies volume list free space with access protocol information and data structure configuring storage for non disruptive migration and facilitating non disruptive migration as described below. The various adaptive embodiments of the present disclosure and the functionality of the storage management application are now described below with respect to the various process flow diagrams.

In block S the provisioning request is evaluated by the provisioning manager . In particular the provisioning manager extracts information relating to the amount of space requested by the user and the access protocol that will be used by the user to access the storage space after it is provisioned. The provisioning manager may extract the foregoing information from the received provisioning request.

In block S provisioning manager scans a list of available storage from a resource pool to select a storage space that can accommodate the provisioning request. In one embodiment the resource pool may be a part of the data structure free space which is accessible to provisioning manager . As described above free space may include details regarding storage space that may be available for a user at any given time. The details may include type of storage available storage space the access protocol that may be used to access available storage and any other information that can be used to provision storage.

An example of a resource pool is shown within a screen shot may also be referred to as window or segment . The screen shot is provided by GUI to a user. Screen shot may be used by the user to perform provisioning according to the process blocks of .

Window includes a selectable option . Option when selected displays the resource pool that is available to a user. A selected storage space from the resource pool is shown as . The associated datasets for the selected storage are shown in segment .

Referring back to after scanning the resource pool provisioning manager selects a storage space that meets the user specified space requirement and is accessible via the user specified access protocol. In one embodiment provisioning manager uses the information extracted from the provisioning request for example amount of storage space storage space type and access protocol and compares the extracted information with information stored in free space . Based on a match provisioning manager selects a storage space from the available storage space.

In block S if possible transparent migration or non disruptive migration for the provisioned storage is setup. Provisioning manager configures the provisioned storage space and sets an indicator showing if a dataset within the provisioned storage space is configured for non disruptive migration. An example of this is shown as in segment of window of . Segment shows the datasets that are associated with a selected provisioned storage space and whether non disruptive migration is possible for the dataset.

Whether non disruptive migration can be setup depends on the storage type user needs the access protocol used to access the provisioned storage and storage system capabilities. This is described below in detail with respect to .

An example of setting up non disruptive migration shown in a wizard like setting of . In this example non disruptive migration is set up for a data set associated with a provisioned storage space. shows a screen shot that may be triggered by selecting the Add option from . The user specifies the IP address in segment . The IP address is the address used by the user to access the dataset and the provisioned storage. If the IP address is not specified then the user is shown screen . Screen allows the user to select a virtual storage system referred to as a vfiler unit . The data set is shown in segment and the available vfiler units for the dataset are shown in segment . The user may select a vfiler unit from segment and non disruptive migration is then set up by the storage management application .

After provisioning the storage and setting up non disruptive migration in block S management application stores configuration information for the provisioned storage in the various components of data structure that have been described above in detail. Once the storage space is provisioned it can be used by a storage system to store information.

A user is allowed to edit the provisioned storage configuration information and even relinquish non disruptive migration for a dataset. This is shown in screen shot of . Segment shows the IP address of a selected dataset. The user selection relinquishing non disruptive migration is shown as .

In block S management application determines if non disruptive migration is possible. The process for determining if non disruptive migration is possible is described below in detail with respect to .

If non disruptive migration is not possible then the process moves to block S where disruptive migration is performed by migrating information from the source storage volume to a destination storage volume.

If non disruptive migration is possible as determined in block S and described below with respect to then in block S the management application selects an appropriate methodology for the migration. The appropriate migration methodology may be selected by the storage management application by using the information stored in migration technology data structure C that ha been described above in detail with respect to . The following provides a few examples of some of the methodologies that may be used for non disruptive migration and selected using migration technology data structure .

If a storage system provides data to an application using NFS then the data may be migrated using a plurality of technologies for example SnapMirror Volume Copy Virtual storage system migration process NDMP copy operation Volume Move operation and others. If the data is to be migrated across aggregates within a same storage system then SnapMirror migration may result in the least or no disruption to clients. If this technology is available then it is selected to perform the migration. This information may also be stored in data structure C by storage management application as described above.

If a virtual storage system vfiler is available and data is to be migrated across the storage system then using the virtual storage system can migrate data with minimal or no disruption. As described above this information may also be stored in data structure C and is accessible to storage management application .

If the data resides in a clustered system described below with respect to then volumes are migrated across cluster nodes using a Volume Move operation. A global namespace is used to move the data across the cluster as described below. As described above this information may also be stored in data structure C and is accessible to storage management application .

If one has to migrate a secondary volume that stores archival information then an appropriate backup technology is selected to migrate information. Examples of appropriate backup technology are NetApp NearStore VTL NetApp FAS Storage SnapVault and others as provided by NetApp Inc. Inc without derogation to any trademark rights of Netapp Inc. . It is noteworthy that the adaptive embodiments are not limited to the backup technologies mentioned above because any other backup technology may be used to migrate information. As described above this information may also be stored in data structure C and is accessible to storage management application .

In one embodiment the management application using data structure C automatically selects an optimum technology based on user request and storage system capability.

Once the appropriate methodology is selected in block S the management application verifies if appropriate licenses for performing the migration are available and valid. Licensing information D that is described above with respect to may be used to verify if valid licenses are available for the selected migration methodology.

If valid licenses are available then in block S non disruptive migration is performed. If a valid license is unavailable then the user is prompted to obtain a valid license or the process terminates. The user may obtain the valid licenses from an entity for example NetApp Inc. that controls the licenses for the selected migration technology in block S.

The screen shots of illustrate the migration process blocks described above with respect to . shows a window that is presented to a user by storage management application . Window provides various options to a user including submitting a request for migration S as described below. A user is able to view various datasets by selecting the dataset option within window . Based on user selection various datasets are shown in segment . The user may then select a dataset from segment . User selection within segment is shown as . Window shows the source storage system the destination storage system a source provisioning policy and destination provisioning policy associated with the selected dataset . Segment shows details regarding physical resources.

Window provides a plurality of options that are associated with the datasets. For example a user may first migration for a dataset by selecting . The user may submit a migration request by selecting tab that states start migration . Tab is used to launch a window for a dataset for which migration is already in process. Tab launches a confirmation window when migration is complete. Tab is used for cleanup after migration is complete. Tab is used to cancel a migration process. The user can also view all pending migration jobs by selecting tab . This will display all the migration jobs and their pending status.

When tab is selected to submit a migration request block S the user is displayed the dataset Migration wizard screen as shown in . By selecting the Next tab the user moves to the next screen as shown in . Screen includes a window from where a user can select a destination storage system shown as . Segment shows the provisioning policy associated with the destination storage space. shows a screen which allows the user to select an interface associated with an IP address . Thereafter process blocks S S and S are executed by the storage management application . These blocks may not be visible to the user because they are performed automatically using data structure . shows a completion screen for the data migration block S . shows a job tracker screen from where a user can see a status on the selected migration.

Block S may include first determining capabilities of the storage system that manages the first storage. This is to ascertain whether the storage system can support non disruptive migration. The second aspect of block S is to determine if non disruptive migration is possible for example determining how storage may be exposed to a user. The second aspect assumes that the storage system even though may be capable of performing non disruptive migration the non disruptive migration may still not be possible. For example as described below if a user is exposed to physical storage then non disruptive migration may not be possible even though the storage system may be capable of performing non disruptive migration. Various factors are considered in making this determination as described below.

The process for determining non disruptive migration is possible starts in block SA when storage management application evaluates the migration request to determine if migration is for a primary storage or a secondary storage. Storage management application may make this determination by checking configuration information A or by polling the storage system that manages the storage involved with the migration request. As described above data structure A stores information indicating whether the provisioned storage space is used for primary storage or secondary storage. Storage management application may also obtain this information directly from the storage system managing the provisioned storage.

If the migration is for primary storage then in block SB the management application determines the access protocol used to access provisioned storage C. Various access protocols may be used by the client to access the migrated storage for example FC iSCSI CIFS NFS NDMP and others. In one embodiment storage management application determines the access protocol information from data structure A as described above.

In block SC the management application determines storage system capabilities. For example the management application determines if the storage system is capable of hosting a virtual storage system and whether the storage system is a part of a clustered system and uses a global namespace for communication. Storage management application can ascertain this information from data structure storage system information B described above in detail.

In block SD the storage management application determines how the migrated storage system is exposed to the clients. Storage management application makes this determination by accessing data structure B. For example the storage management application determines if provisioned storage is presented over a virtual storage system. If the virtual storage system is used then the entire virtual storage system can be migrated to another location without any disruption.

If the storage is a part of a clustered system then a global namespace is used to access the clustered system. This allows non disruptive migration from one location to another location within the clustered system. If there is no virtual layer and the user is exposed to the physical storage then non disruptive migration may not be possible. The storage management application considers these different factors to determine if non disruptive migration is possible.

In block SE the storage management application determines the attributes of the destination where the information is migrated to. Storage management application may obtain this information from the storage system that manages the destination storage.

The various blocks SB C and SE may occur simultaneously. Based on these blocks the storage management application determines if non disruptive migration is possible.

If in block SA the storage to be migrated is secondary then the process moves to block SF when the storage management application determines if storage replication ability is available. Storage management application makes this determination by accessing data structure A that stores configuration information regarding the provisioned storage.

In block SG the process determines if data and configuration information with the scheduling information can be migrated. Typically a user sets up a schedule to backup secondary storage information. Scheduling information in this context pertains to the backup schedule. Storage management application may obtain this information from data structure A described above in detail.

In one embodiment storage management application for example provisioning manager configures storage space and makes the determination for non disruptive migration during the provisioning process described above with respect to . This allows a user to view datasets with an indication whether the datasets can be migrated using non disruptive migration. This allows a user to setup and perform disruptive and non disruptive migration based on user needs. For example when various applications are using a dataset for which non disruptive migration is not possible then the user may choose to migrate a dataset for which non disruptive migration is possible. The user may choose to migrate the data set with disruptive migration when applications are not using the dataset.

In one embodiment the storage management application receives a migration request from a client to migrate information from a first storage to a second storage is processed. The storage management application determines an access protocol used by the client to access the first storage and in response to the migration request automatically determines if a storage system that manages the first storage is capable of supporting non disruptive migration. If the storage system is capable of supporting non disruptive migration then the storage management application determines if non disruptive migration is possible. If non disruptive migration is possible then the storage management application automatically selects a migration technique for migrating the information from the first storage to the second storage.

As described above storage management application may interface with storage systems and client systems for performing the various process blocks of . The storage systems may be a part of a clustered system that is now described below in detail with respect to .

Nodes comprise various functional components that cooperate to provide distributed storage system architecture of cluster . Each node is generally organized as a network element N module and a disk element D module . N module includes functionality that enables node to connect to clients over a computer network and to storage management application while each D module connects to one or more storage devices may generically be referred to as disks or storage array similar to storage subsystem and may also be referred to as disk array . In one embodiment information regarding the storage devices may be collected by the D Module and then communicated to the storage management application by the N module.

Nodes may be interconnected by a cluster switching fabric which in the illustrative embodiment may be embodied as a Gigabit Ethernet switch. It should be noted that while there is shown an equal number of N and D modules in the illustrative cluster there may be differing numbers of N and or D modules in accordance with various embodiments of the present invention. For example there may be a plurality of N modules and or D modules interconnected in a cluster configuration that does not reflect a one to one correspondence between the N and D modules. As such the description of a node comprising one N module and one D module should be taken as illustrative only.

Clients similar to clients may be general purpose computers having a plurality of components. These components may include a central processing unit CPU main memory I O devices and storage devices for example flash memory hard drives and others . The main memory may be coupled to the CPU via a system bus or a local memory bus. The main memory may be used to provide the CPU access to data and or program information that is stored in main memory at execution time. Typically the main memory is composed of random access memory RAM circuits. A computer system with the CPU and main memory is often referred to as a host system.

Clients may request management services from storage management application . In one embodiment clients may request storage provisioning see and migration described above with respect to .

Clients may be configured to interact with the node in accordance with a client server model of information delivery. That is each client may request the services of the node and the node may return the results of the services requested by the client by exchanging packets over the network . The client may issue packets using application including file based access protocols such as the CIFS protocol or the NFS protocol over TCP IP when accessing information in the form of certain data containers such as files and directories. Alternatively the client may issue packets using application including block based access protocols such as the Small Computer Systems Interface SCSI protocol encapsulated over TCP iSCSI and SCSI encapsulated over FOP when accessing information in the form of other data containers such as blocks.

The cluster access adapter comprises a plurality of ports adapted to couple node to other nodes of cluster . In the illustrative embodiment Ethernet may be used as the clustering protocol and interconnect media although it will be apparent to those skilled in the art that other types of protocols and interconnects may be utilized within the cluster architecture described herein. In alternate embodiments where the N modules and D modules are implemented on separate storage systems or computers the cluster access adapter is utilized by the N D module communicating with other N D modules in the cluster .

Each node is illustratively embodied as a dual processor storage system executing a storage operating system that preferably implements a high level module such as a file system to logically organize the information as a hierarchical structure of named directories files and special types of files called virtual disks hereinafter generally blocks on storage disks . However it will be apparent to those of ordinary skill in the art that the node may alternatively comprise a single or more than two processor systems. Illustratively one processor A executes the functions of the N module on the node while the other processor B executes the functions of the D module .

The memory illustratively comprises storage locations that are addressable by the processors and adapters for storing programmable instructions and data structures. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the programmable instructions and manipulate the data structures. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

The storage operating system portions of which is typically resident in memory and executed by the processing elements functionally organizes the node by inter alia invoking storage operations in support of the storage service implemented by the node. An example of operating system is the DATA ONTAP Registered trademark of NetApp Inc. operating system available from NetApp Inc. that implements a Write Anywhere File Layout WAFL Registered trademark of NetApp Inc. file system. However it is expressly contemplated that any appropriate storage operating system may be enhanced for use in accordance with the inventive principles described herein. As such where the term ONTAP is employed it should be taken broadly to refer to any storage operating system that is otherwise adaptable to the teachings of this invention.

The network adapter comprises a plurality of ports adapted to couple the node to one or more clients over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network. The network adapter thus may comprise the mechanical electrical and signaling circuitry needed to connect the node to the network. Illustratively the computer network may be embodied as an Ethernet network or a FC network. Each client may communicate with the node over network by exchanging discrete frames or packets of data according to pre defined protocols such as TCP IP.

The storage adapter cooperates with the storage operating system executing on the node to access information requested by the clients and management application . The information may be stored on any type of attached array of writable storage device media such as video tape optical DVD magnetic tape bubble memory electronic random access memory flash memory devices micro electro mechanical and any other similar media adapted to store information including data and parity information. However as illustratively described herein the information is preferably stored on the disks of array . The storage adapter comprises a plurality of ports having input output I O interface circuitry that couples to the disks over an I O interconnect arrangement such as a conventional high performance FC link topology.

Storage of information on each array is preferably implemented as one or more storage volumes that comprise a collection of physical storage disks cooperating to define an overall logical arrangement of volume block number vbn space on the volume s . Each logical volume is generally although not necessarily associated with its own file system. The disks within a logical volume file system are typically organized as one or more groups wherein each group may be operated as a Redundant Array of Independent or Inexpensive Disks RAID . Most RAID implementations such as a RAID 4 level implementation enhance the reliability integrity of data storage through the redundant writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of parity information with respect to the striped data. An illustrative example of a RAID implementation is a RAID 4 level implementation although it should be understood that other types and levels of RAID implementations may be used in accordance with the inventive principles described herein.

In one example operating system may include several modules or layers executed by one or both of N Module and D Module . These layers include a file system manager that keeps track of a directory structure hierarchy of the data stored in storage devices and manages read write operations i.e. executes read write operations on disks in response to client requests.

Operating system may also include a protocol layer and an associated network access layer to allow node to communicate over a network with other systems such as clients and storage management application . Protocol layer may implement one or more of various higher level network protocols such as NFS CIFS Hypertext Transfer Protocol HTTP TCP IP and others as described below.

Network access layer may include one or more drivers which implement one or more lower level protocols to communicate over the network such as Ethernet. Interactions between clients and mass storage devices are illustrated schematically as a path which illustrates the flow of data through operating system .

The operating system may also include a storage access layer and an associated storage driver layer to allow D module to communicate with a storage device. The storage access layer may implement a higher level disk storage protocol such as RAID redundant array of inexpensive disks while the storage driver layer may implement a lower level storage device access protocol such as FC or SCSI. In one embodiment the storage access layer may implement the RAID protocol such as RAID 4 or RAID DP RAID double parity for data protection provided by NetApp Inc. the assignee of the present disclosure .

The multi protocol engine includes a media access layer part of layer of network drivers e.g. Gigabit Ethernet drivers that interfaces to network protocol layers part of layer such as the IP layer and its supporting transport mechanisms the TOP layer and the User Datagram Protocol UDP layer .

A file system protocol layer provides multi protocol file access and to that end includes support for the Direct Access File System DAFS protocol the NFS protocol the CIFS protocol and the HTTP protocol .

A virtual interface VI layer implements the VI architecture to provide direct access transport DAT capabilities such as RDMA Remote Direct Memory Access as required by the DAFS protocol . An iSCSI driver layer provides block protocol access over the TCP IP network protocol layers while a FC driver layer receives and transmits block access requests and responses to and from the node. The FC and iSCSI drivers provide FC specific and iSCSI specific access control to the blocks and thus manage exports of luns to either iSCSI or FCP or alternatively to both iSCSI and FOP when accessing the blocks on the node .

The storage server includes a file system module in cooperating relation with a volume stripped module VSM a RAID system module and a disk driver system module .

The VSM illustratively implements a striped volume set SVS . The VSM cooperates with the file system to enable storage server to service a volume of the SVS. In one embodiment VSM may also implement the SVS related process steps described above with respect to .

The RAID system manages the storage and retrieval of information to and from the volumes disks in accordance with I O operations while the disk driver system implements a disk access protocol such as e.g. the SCSI protocol. The file system implements a virtualization system of the storage operating system through the interaction with one or more virtualization modules illustratively embodied as e.g. a virtual disk vdisk module not shown and a SCSI target module . The SCSI target module is generally disposed between the FC and iSCSI drivers and the file system to provide a translation layer of the virtualization system between the block lun space and the file system space where luns are represented as blocks.

The file system is illustratively a message based system that provides logical volume management capabilities for use in access to the information stored on the storage devices such as disks. That is in addition to providing file system semantics the file system provides functions normally associated with a volume manager. These functions include i aggregation of the disks ii aggregation of storage bandwidth the disks and iii reliability guarantees such as mirroring and or parity RAID .

The file system illustratively may implement the write anywhere file system having an on disk format representation that is block based using e.g. 4 kilobyte KB blocks and using index nodes inodes to identify data containers and data container attributes such as creation time access permissions size and block location and OpLock . The file system uses data containers to store meta data describing the layout of its file system these meta data data containers include among others an inode data container. A data container handle i.e. an identifier that includes an inode number inum may be used to retrieve an inode from disk.

Broadly stated all inodes of the write anywhere file system are organized into the inode data container. A file system fs info block specifies the layout of information in the file system and includes an inode of a data container that includes all other inodes of the file system. Each logical volume file system has an fsinfo block that is preferably stored at a fixed location within e.g. a RAID group. The inode of the inode data container may directly reference point to data blocks of the inode data container or may reference indirect blocks of the inode data container that in turn reference data blocks of the inode data container. Within each data block of the inode data container are embedded modes each of which may reference indirect blocks that in turn reference data blocks of a data container.

Operationally a request from the client is forwarded as a packet over the computer network and onto the node where it is received at the network adapter . A network driver processes the packet and if appropriate passes it on to a network protocol and file access layer for additional processing prior to forwarding to the write anywhere file system . Here the file system generates operations to load retrieve the requested data from disk if it is not resident in core i.e. in memory .

If the information is not in memory the file system indexes into the inode data container using the inode number inum to access an appropriate entry and retrieve a logical vbn. The file system then passes a message structure including the logical vbn to the RAID system the logical vbn is mapped to a disk identifier and disk block number disk dbn and sent to an appropriate driver e.g. SCSI of the disk driver system . The disk driver accesses the dbn from the specified disk and loads the requested data block s in memory for processing by the node. Upon completion of the request the node and operating system returns a reply to the client .

It should be noted that the software path through the operating system layers described above needed to perform data storage access for a client request received at node may alternatively be implemented in hardware. That is in an alternate embodiment of the disclosure the storage access request data path may be implemented as logic circuitry embodied within a field programmable gate array FPGA or an ASIC This type of hardware implementation increases the performance of the file service provided by node in response to a file system request issued by client .

As used herein the term storage operating system generally refers to the computer executable code operable on a computer to perform a storage function that manages data access and may in the case of a node implement data access semantics a general purpose operating system. The storage operating system can also be implemented as a microkernel an application program operating over a general purpose operating system such as UNIX or Windows XP or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the invention described herein may apply to any type of special purpose e.g. file server filer or storage serving appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this disclosure can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and a disk assembly directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems. It should be noted that while this description is written in terms of a write any where file system the teachings of the present invention may be utilized with any suitable file system including a write in place file system.

The processing system includes one or more processors and memory coupled to a bus system . The bus system shown in is an abstraction that represents any one or more separate physical buses and or point to point connections connected by appropriate bridges adapters and or controllers. The bus system therefore may include for example a system bus a Peripheral Component Interconnect PCI bus a HyperTransport or industry standard architecture ISA bus a small computer system interface SCSI bus a universal serial bus USB or an Institute of Electrical and Electronics Engineers IEEE standard 1394 bus sometimes referred to as Firewire .

The processors are the central processing units CPUs of the processing system and thus control its overall operation. In certain embodiments the processors accomplish this by executing programmable instructions stored in memory . A processor may be or may include one or more programmable general purpose or special purpose microprocessors digital signal processors DSPs programmable controllers application specific integrated circuits ASICs programmable logic devices PLDs or the like or a combination of such devices.

Memory represents any form of random access memory RAM read only memory ROM flash memory or the like or a combination of such devices. Memory includes the main memory of the processing system . Instructions which implements the provisioning migration technique introduced above e.g. the storage management application in may reside in and may be executed by processors from memory .

Also connected to the processors through the bus system are one or more internal mass storage devices and a network adapter . Internal mass storage devices may be or may include any conventional medium for storing large volumes of data in a non volatile manner such as one or more magnetic or optical based disks. The network adapter provides the processing system with the ability to communicate with remote devices e.g. storage servers over a network and may be for example an Ethernet adapter a FC adapter or the like. The processing system also includes one or more input output I O devices coupled to the bus system . The I O devices may include for example a display device a keyboard a mouse etc.

Thus a method and apparatus for provisioning and processing migration requests have been described. Note that references throughout this specification to one embodiment or an embodiment mean that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Therefore it is emphasized and should be appreciated that two or more references to an embodiment or one embodiment or an alternative embodiment in various portions of this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics being referred to may be combined as suitable in one or more embodiments of the invention as will be recognized by those of ordinary skill in the art.

The various embodiments described herein have numerous advantages over existing migration technologies. For example the user i.e. client is removed from the configuration process for non disruptive migration. Since the configuration is performed by a management application different and optimum technologies are used to perform the migration. Users don t need to learn new migration technologies because the management application will select the optimum technology depending on access and destination locations.

While the present disclosure is described above with respect to what is currently considered its preferred embodiments it is to be understood that the disclosure is not limited to that described above. To the contrary the disclosure is intended to cover various modifications and equivalent arrangements within the spirit and scope of the appended claims.

