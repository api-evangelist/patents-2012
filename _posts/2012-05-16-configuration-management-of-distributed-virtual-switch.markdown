---

title: Configuration management of distributed virtual switch
abstract: A method, non-transitory storage medium, and apparatus are presented for configuration management of a distributed virtual switch including components distributed on different entities in a computing system is provided. In an exemplary embodiment, a snapshot of a configuration of the distributed virtual switch is received from a management plane configured to manage the distributed virtual switch. The snapshot may include settings for the configuration at a time of taking the snapshot. A persistent storage location independent from the management plane is designated for storing the received snapshot of the configuration. After the snapshot is taken, the configuration may be retrieved from the persistent storage location and the settings of the configuration may be applied to the distributed virtual switch, a new distributed virtual switch, or an existing distributed virtual switch.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09019977&OS=09019977&RS=09019977
owner: VMware, Inc.
number: 09019977
owner_city: Palo Alto
owner_country: US
publication_date: 20120516
---
A distributed virtual switch DVS is a software abstraction of an aggregate switch that may include multiple virtual switches within computer servers e.g. hosts . The distributed virtual switch is managed in a centralized management plane through a management application such as a data center management application. The management application exposes an interface to manage the configuration of the distributed virtual switch. Also the management plane maintains the latest configuration of the distributed virtual switch in the management plane s memory or back end database.

The latest configuration is embedded in the management plane. If the back end database or memory is lost or corrupted and the management plane is restarted there is no way to restore the configuration for the distributed virtual switch. Rather the distributed virtual switch will have to be re created from scratch. Additionally only the latest version of the configuration is stored in the management plane. Thus if misconfiguration with the distributed virtual switch or port group occur an administrator cannot revert to any previous configuration or determine any changes across multiple configuration changes that were previously made.

A method non transitory storage medium and apparatus are presented for configuration management of a distributed virtual switch including components distributed on different entities in a computer system is provided. In an exemplary embodiment a snapshot of a configuration of the distributed virtual switch is received from a management plane where the distributed virtual switch resides. The snapshot may include settings for the configuration at a time of taking the snapshot. A persistent storage location independent from the management plane is designated for storing the received snapshot of the configuration. After the snapshot is taken the configuration may be retrieved from the persistent storage location and the settings of the configuration may be applied to the distributed virtual switch a new distributed virtual switch or an existing distributed virtual switch.

The following detailed description and accompanying drawings provide a more detailed understanding of the nature and advantages of particular embodiments.

In the following description for purposes of explanation numerous examples and specific details are set forth in order to provide a thorough understanding of particular embodiments. Particular embodiments as defined by the claims may include some or all of the features in these examples alone or in combination with other features described below and may further include modifications and equivalents of the features and concepts described herein.

A client includes a configuration manager that communicates with management plane server to have a snapshot of a configuration of distributed virtual switch exported from the management plane. It will be understood that multiple clients may be used. For example a first client may export the snapshot of the configuration and then a second client may perform actions described below with respect to applying the configuration. Clients may include a user interface application programming interface API or a script. The snapshot may capture the current configuration settings for distributed virtual switch . Configuration manager can then determine where to store the configuration. Because the configuration has been exported from the management plane configuration manager can store the configuration in different areas outside of the management plane represented broadly by storage in . Additionally multiple snapshots versions of the configuration of distributed virtual switch may be exported and stored.

The configuration is exported from the management plane and stored as an independent entity from the current configuration of distributed virtual switch that is stored in the management plane. By exporting the configuration as an independent entity from the management plane different actions with the saved configuration may be performed such as re creating an original distributed virtual switch creating a new distributed virtual switch based on the stored configuration and or applying the stored configuration on an existing distributed virtual switch . Also by exporting the configuration as an independent entity from the management plane multiple versions of the configuration may be saved over time instead of just the latest version in the management plane. Thus administrators are free to revert to prior configurations that are known to work use the configurations to create new distributed virtual switches or apply the configuration to existing distributed virtual switches .

Distributed virtual switch may include a DVS configuration and also a port group configuration. The DVS configuration is the configuration at a distributed virtual switch level. For example the DVS configuration includes network properties for connections used by virtual machines to send and receive data via proxy switches to and from a network via a network interface card NIC . Port group properties may be the configuration for various port groups . A port group is a set of virtual ports that have the same configuration. As shown distributed virtual switch includes a first port group DVPortgroup and a second port group DVPortgroup . When the term configuration is used it may mean the DVS configuration and or the port group configuration. The configuration is described in more detail below.

Distributed virtual switch is a software abstraction that aggregates proxy switches . Virtual switches are instantiated in virtualization software running on hosts connecting a set of virtual machines . Virtual switches are proxy switches that are controlled via distributed virtual switch . Virtual switches may reside on a variety of hardware in a distributed manner. However the configuration of distributed virtual switch is managed from a centralized position. For example management plane server is used to manage the configuration of distributed virtual switch .

Distributed virtual switch as a software abstraction resides on the management plane. However components for a distributed virtual switch reside on a variety of hardware such as DVswitch components A B and C reside in hosts as well as database . DVswitch components A B and C are illustrated in with a dotted line box indicating portions of DVswitch A B and C that make up a distributed virtual switch . The configuration of these components is managed centrally from management plane server . Virtual switches that are connected to the same physical network are managed using one distributed virtual switch . Physical network may be e.g. a local area network.

As shown in a single virtual port is maintained for each VNIC respectively. Each VNIC emulator interacts with NIC drivers in guest operating systems GOS and GOS to send and receive data to and from VMs . For example each VNIC emulator may maintain the state for one or more VNICs for each VM . Alternatively multiple instances of VNIC emulators only one shown for each host may be instantiated within virtualization software . For the purpose of illustration shows only one VNIC for each VM and only one VM for each host . Those skilled in the art will recognize that discussion herein of VNICs is actually a discussion of a VNIC state implemented and maintained by each VNIC emulator . Virtual devices such as VNICS are software abstractions that are convenient to discuss as though part of VMs but are actually implemented by virtualization software using emulators . The state of each VM however includes the state of its virtual devices which is controlled and maintained by the underlying virtualization software .

The port group configuration is the shared configuration of DVports . A DVport is a software abstraction that encapsulates the personality both configuration and runtime state of a corresponding virtual port. Thus DVport contains one or more data structures representing the configuration and runtime state of virtual port of a virtual switch . Likewise DVport contains one or more data structures representing the configuration and runtime sate of virtual port of virtual switch . DVports are created with a configuration predefined by a network administrator. Virtual ports are created and start with a blank configuration state but once associated with a DVport assume the configuration and runtime state of the associated DVport. The port configuration of DVports is stored in a table or other data structure within database as the port group configuration.

The DVS configuration includes the connections needed to send receive data to from network . The term connection is used herein to describe an association of a virtual NIC with a DVport. In one embodiment this association is maintained as the DVS configuration in management plane server . For example the DVS configuration is stored in a table or other data structure within database . Also the DVS configuration may be stored locally by virtualization software .

The exporting and importing of the configuration will now be described in more detail. depicts an example for exporting a configuration according to one embodiment. Client may be located outside of the management plane. At certain times client may request the configuration of distributed virtual switch may be exported to client .

As shown management plane server exports a DVS configuration and port group configuration. It should be recognized that only the DVS configuration or the port group configuration may be exported. Client then can determine where to store the DVS configuration and port group configuration. For example storage may be memory or a persistent database independent from the management plane.

Users are allowed to export the configuration as many as time as the user wants. A stored configuration may then be imported at a later time. For example after exporting the configuration client may import a previous configuration to re create the original distributed virtual switch create a new distributed virtual switch or apply the configuration to an existing distributed virtual switch . depicts a flowchart for exporting and importing a configuration associated with distributed virtual switch according to one embodiment.

At management plane server exports a configuration of a version i Vi for distributed virtual switch . Storage may include multiple versions of the configuration that were exported at different times. A revision control system can be built on top of this as multiple versions of the configuration can be stored instead of only the latest configuration. The versions are exported from the management plane such as in a datacenter to storage which is external from the management plane.

At distributed virtual switch may be re configured many different times to go through different versions. At client may import a configuration e.g. version Vi from storage to apply to a distributed virtual switch . The import operation can be executed in different modes. For example an existing distributed virtual switch may revert to the previous version Vi using the configuration for import in apply to existing mode. Additionally a new distributed virtual switch may be created using the previous version of the configuration for import in create new mode or the original distributed virtual switch may be re created for import in create original mode. depict these different scenarios. Other scenarios of using the configuration may also be appreciated.

At configuration manager re creates the original distributed virtual switch . The re created distributed virtual switch includes the same DVS configuration and port group configuration. The identifier DVS A of distributed virtual switch and the port group identifier DVPortgroup are the same. Also in this case the original distributed virtual switch was coupled to host . Thus the re created original distributed virtual switch is also coupled to the same host . This is because the configuration is the same in the re created distributed virtual switch . The re created distributed virtual switch may be re created in the same management plane server server A or a different management plane server e.g. a server B . The VM and host may automatically communicate through the re created distributed virtual switch without disruption.

One use case for users to re create a distributed virtual switch may be to migrate a distributed virtual switch from a test environment to a production environment. An administrator may test distributed virtual switch in the testing setup. After testing an administrator may want to move the distributed virtual switch to a production setup. In this case the administrator exports the tested configuration from the management plane to storage . Then the tested configuration is imported to re create distributed virtual switch in the production setup with the original configuration from the test setup. The production setup re creates the distributed virtual switch that is used in the test setup so the connections in host remain the same and virtual machines that use the distributed virtual switch are not impacted.

At configuration manager creates a new distributed virtual switch DVS B using the configuration of distributed virtual switch . In such a case the configuration of distributed virtual switch is used as a template. The port group configuration of distributed virtual switch is used to create a new port group configuration DVPortgroup .

A clone of the original distributed virtual switch may be created in the original management plane server server A or another management plane server server B . In either case the new distributed virtual switch would be created with new identifiers DVS B DVPortgroup . Using the stored configuration as a template allows an administrator to more easily create the new distributed virtual switch .

In one example the retrieved configuration may be applied to the original distributed virtual switch . For example at configuration manager applies the configuration on the original distributed virtual switch DVS A on server server A . This would apply a previous version of the DVS configuration and port group configuration to distributed virtual switch .

In another example at configuration manager may apply the configuration to another server server B . For example the configuration of original distributed virtual switch DVS A may be applied on server B. If existing port group is used then the stored port group configuration DVPortgroup is used to apply the existing port group to DVS A. Also at configuration manager applies the port group configuration to a new port group DVPortgroup in distributed virtual switch DVS B .

An import manager receives the retrieved configuration and is then configured to apply the configuration to a server . For example different managers are provided to perform different actions in applying the configuration. For example an original switch export manager re creates the original distributed virtual switch . An existing switch export manager applies the configuration to an existing distributed virtual switch . A new switch export manager uses the configuration to create a new distributed virtual switch .

At client stores the configuration in storage . An identifier for a configuration of a certain distributed virtual switch that was saved at a certain time e.g. a version may be stored with the configuration. At client retrieves the specified configuration from storage .

At configuration manager receives a command for an action to perform with the configuration. For example an administrator may choose to apply the configuration in different ways as described above. At configuration manager applies the configuration based on the input received from the administrator at .

Particular embodiments provide many advantages. For example storing the configuration of distributed virtual switch as a separate independent entity in storage enables administrators to publish and share the configuration with other administrators or systems. These configurations may be used to enforce certain policies for switch management across distributed virtual switches . Additionally administrators may manipulate the configurations separately and then apply the manipulation to create new distributed virtual switches or manipulate existing distributed virtual switches .

Further because multiple versions of the configuration for distributed virtual switches are saved an administrator may revert to a previous version that was known to be working. This may provide high availability allowing an administrator to replace a non working distributed virtual switch with a configuration that is known to be working. The administrators are also freed up from the availability issues of the management plane because the configuration of a distributed virtual switch may always be re created using a backed up version. The administrator knows that a working version is stored in storage and thus can always revert when a distributed virtual switch is not working. Additionally by backing up different versions a revision control system is provided. An administrator may back up a configuration upon each change to the configuration and then revert to any previously backed up configuration if any changes are undesirable.

The various embodiments described herein may employ various computer implemented operations involving data stored in computer systems. For example these operations may require physical manipulation of physical quantities usually though not necessarily these quantities may take the form of electrical or magnetic signals where they or representations of them are capable of being stored transferred combined compared or otherwise manipulated. Further such manipulations are often referred to in terms such as producing identifying determining or comparing. Any operations described herein that form part of one or more embodiments may be useful machine operations. In addition one or more embodiments also relate to a device or an apparatus for performing these operations. The apparatus may be specially constructed for specific required purposes or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines may be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations.

The various embodiments described herein may be practiced with other computer system configurations including hand held devices microprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

One or more embodiments may be implemented as one or more computer programs or as one or more computer program modules embodied in one or more computer readable storage media. The term computer readable storage medium refers to any data storage device that can store data which can thereafter be input to a computer system computer readable media may be based on any existing or subsequently developed technology for embodying computer programs in a manner that enables them to be read by a computer. Examples of a non transitory computer readable medium include a hard drive network attached storage NAS read only memory random access memory e.g. a flash memory device a CD Compact Discs CD ROM a CD R or a CD RW a DVD Digital Versatile. Disc a magnetic tape and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.

In addition while described virtualization methods have generally assumed that virtual machines present interfaces consistent with a particular hardware system persons of ordinary skill in the art will recognize that the methods described may be used in conjunction with virtualizations that do not correspond directly to any particular hardware system. Virtualization systems in accordance with the various embodiments implemented as hosted embodiments non hosted embodiments or as embodiments that tend to blur distinctions between the two are all envisioned. Furthermore various virtualization operations may be wholly or partially implemented in hardware.

Many variations modifications additions and improvements are possible regardless the degree of virtualization. The virtualization software can therefore include components of a host console or guest operating system that performs virtualization functions. Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the invention s . In general structures and functionality presented as separate components in exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components.

These and other variations modifications additions and improvements may fall within the scope of the appended claims s . As used in the description herein and throughout the claims that follow a an and the includes plural references unless the context clearly dictates otherwise. Also as used in the description herein and throughout the claims that follow the meaning of in includes in and on unless the context clearly dictates otherwise.

The above description illustrates various embodiments along with examples of how aspects of particular embodiments may be implemented. The above examples and embodiments should not be deemed to be the only embodiments and are presented to illustrate the flexibility and advantages of particular embodiments as defined by the following claims. Based on the above disclosure and the following claims other arrangements embodiments implementations and equivalents may be employed without departing from the scope of the invention as defined by the claims.

