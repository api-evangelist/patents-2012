---

title: Event extractor
abstract: A system can comprise a memory to store machine readable instructions. The system can also comprise a processing unit to execute the machine readable instructions. The machine readable instructions can comprise an event extractor to parse a packet capture (pcap) file that includes a packet transmitted via a network between an application under test (AUT) executing on a mobile device and a server to determine a network event based on the packet. The event extractor can also generate an application programming interface (API) command file that includes an API command generated based on the network event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08874736&OS=08874736&RS=08874736
owner: Hewlett-Packard Development Company, L.P.
number: 08874736
owner_city: Houston
owner_country: US
publication_date: 20120423
---
A smartphone is a mobile phone built on a mobile computing platform with more advanced computing ability and connectivity than a feature phone. In some examples a smartphone can combine the functions of a personal digital assistant PDA and a mobile phone or camera phone. In other examples a smartphone can also serve to combine the functions of portable media players compact digital cameras pocket video cameras GPS navigation units and the like. Some smartphones can include a touch screen and or a web browser that can access web pages.

Mobile applications which can be referred to as mobile apps are software applications typically designed to run on smartphones and tablet computers. Mobile applications are available through application distribution platforms. In some examples mobile applications can be downloaded from the distribution platform to a target device such as a smartphone. In other examples the mobile applications can be downloaded by laptop or desktop computers and transferred to the target device.

For purposes of simplification of explanation in the present example different components of the system are illustrated and described as performing different functions. However in other examples the functionality of several components can be combined and executed on a single component. The components can be implemented for example as software e.g. machine executable instructions hardware e.g. an application specific integrated circuit or as a combination of both e.g. firmware . In other examples the components could be distributed among remote devices across the network e.g. external web services .

In one example a mobile device can communicate with a server via the network . The mobile device could be implemented for example as a personal digital assistant PDA a smartphone a tablet computer or the like. In some examples the mobile device can communicate with the network wirelessly. In other examples the mobile device can be tethered to the network through a wired connection. In some examples the mobile device can communicate with the server via two networks. For instance in some examples the mobile device can be connected to a cellular data network e.g. a 3G or 4G telecommunications network that is in turn coupled to a public network e.g. the Internet . In such a situation the network can represent both the cellular data network and the public network. In other examples the mobile device can be coupled to the network via a wireless fidelity Wi Fi or a Worldwide Interoperability for Microwave Access WiMax connection.

The server can be implemented as a computer that executes applications to service clients such as the mobile device . In some examples the server could be implemented as a Web server and or a resource server. In some examples the server can process and respond to requests from the mobile device . For instance in one example in response to a request the server can access a database and retrieve a record. The record can be processed which can include extrapolating and or extracting data from the record and the server can provide a response to the mobile device . To send the request to the server the mobile device can execute an application under test AUT that can communicate with the server . In some examples the AUT can communicate with the server via a specific port. The AUT can be a mobile application e.g. a mobile app executing on the mobile device . For example the AUT can include executable instructions stored in memory of the mobile device for testing a particular function or set of functions corresponding to operations of the mobile device that can involve communications via the network .

The mobile device can be provided such that low level access to commands generated by the AUT can be accessed without privileged access to the mobile device . Such privileged access can include root access or superuser access that has full file and administrative rights to the mobile device . In some examples privileged access can require an expensive license agreement with a manufacturer of the mobile device . In other examples privileged access can be acquired by jailbreaking e.g. privilege escalation which can violate user agreement terms and or void a warranty of the mobile device .

A test system can also be coupled to the network . The test system can be logically stationed at a gateway of the network to monitor incoming and outgoing traffic on the network . The test system can include a memory for storing machine readable instructions. The memory could be implemented for example as volatile memory e.g. random access memory nonvolatile memory e.g. flash memory a hard drive or the like or a combination thereof. The test system can include a processing unit for accessing the memory and executing the machine readable instructions. The processing unit could be implemented for example as a processor core. In the present examples although the test system can be logically stationed at the gateway between the AUT and the server in some examples the test system can be physically located e.g. installed on the server .

The memory can include a traffic recorder that can record network traffic between the AUT of the mobile device and the server . The traffic recorder could be implemented for example as a sniffer e.g. a packet sniffer . In some examples the traffic recorder can include a filter to control the capture of packets communicated between the AUT of the mobile device and the server . For example the filter can limit which packets are captured from the network traffic to one or more of a specific IP address a specific port a specific resource locator e.g. a uniform resource locator URL request or the like. The traffic recorder can store captured network traffic between the AUT and the server in memory as a packet capture file e.g. a pcap file . In some examples activation of the traffic recorder and or modification of a parameter of the filter can be set preemptively such that the traffic recorder is set to record and or filter the network traffic between the AUT and the server prior to initiation of traffic between the AUT and the server . In other examples activation of the traffic recorder and or modification of the parameter of the filter can be implemented asynchronously during a time of network traffic flow between the AUT on the server .

The traffic recorder can provide the pcap file to an event extractor . The event extractor can parse the pcap file to determine a network event. The network event could be for example a request for a connection a response to the request a closing of a connection or the like. Additionally the event extractor can generate an application programming interface API command e.g. API call based on the network event. The API command can be configured such that upon execution the API command can simulate the network event on which the API command is based. To generate the API command the event extractor can employ network logic routines that analyze each network event to identify a corresponding API command. In some examples the API command can be derived from multiple network events. The API command can be stored in an API command file.

The API command file can be provided to a script generator . The script generator can be employed to generate a test script based on the API command file. The test script can be employed to simulate an instantiation and or network activity of the AUT at a mobile device e.g. a virtual mobile device . In some examples the test script can be modified by the script generator in response to user input. For instance in response to the user input the test script can be modified to add and or change a script parameter such as unique data e.g. a username data dependency e.g. a password data cache a date constraint or the like.

The test script can be provided to a load tester or other tester that can employ the script in a load test. In some examples the load tester can employ a virtual user generator VuGen to simulate actions of human users. Employment of the script in the load test can simulate an instantiation and or network activity of the AUT at a mobile device . In this manner the load tester can communicate with the server . Additionally the load tester can be configured to employ the script to simulate multiple instances and or network activity of the AUT at multiple respective mobile devices. In some examples the load tester can monitor network traffic provided from the server to determine a maximum number of instances of the AUT that can be serviced by the server concurrently. In other examples the load tester can be integrated with the server such that the load tester can directly measure the health of the server .

By employment of the system root access to the mobile device is not needed since the test system can be a separate device from the mobile device . Thus in examples where the mobile device is implemented as a smartphone PDA or tablet computer a load test for the AUT can be generated without the need to jailbreak the mobile device . Additionally since the script generated by the script generator is based on actual network traffic between the AUT and the server the script when executed can more accurately reflect real world network traffic that can occur between the AUT and the server in comparison to an application simulator.

The memory can include a traffic recorder for recording network traffic between an AUT executing on a mobile device and a server. The mobile device could be implemented for example as a PDA a smartphone a tablet computer or the like. The server could be implemented for example as a computer that services the AUT. The test system and the mobile device can be separate entities such that the test system does not require privileged access e.g. root access to the mobile device.

The network traffic recorded by the traffic recorder can include a packet transmitted between the server and the AUT. The traffic recorder can include a filter for limiting the scope of the traffic recorded. The network traffic can be stored in a pcap file. In some examples the pcap file can be implemented in a manner similar to the pcap file illustrated on . The traffic recorder can store the pcap file in data storage which data storage can be implemented as volatile or non volatile memory.

The memory can also include an event extractor that can parse the pcap file to determine a network event related to functionality of the AUT. For instance the network event could be implemented as an open connection a close connection a request a response or the like. The event extractor can generate a network event list that includes data representing captured packets consistent with a network event of interest e.g. according to a filter parameter . In some examples the network event list could be implemented in a manner similar to the network event list illustrated in . The event extractor can include network logic that can parse the network event list and determine an API command corresponding to the network event stored in the network event list. For example the event extractor can store the API command in an API command file. The event extractor can store the API command file in the data storage . Additionally the API command file can be provided to a script generator .

The script generator can generate a test script based on the API command file to simulate an instance of the AUT executing on the mobile device. The script generator can also include a graphical user interface GUI that can receive user input to modify the test script. By employing the GUI parameters for the test script can be added and or modified. The script generator can store the test script in the data storage . The test script can be provided to a load tester . The load tester can employ the test script in a load test to simulate an instantiation of the AUT. Additionally the load tester can simulate a plurality of instances and or network activity of the AUT at a plurality of respective mobile devices to determine operating parameters for the server resulting from such instances of the AUT. In some examples the load tester can simulate the plurality of instances to stress test the server to determine a maximum number of instances of the AUT that are serviceable by the server.

In view of the foregoing structural and functional features described above example methods will be better appreciated with reference to . While for purposes of simplicity of explanation the example methods of are shown and described as executing serially the present examples are not limited by the illustrated order as some actions could in other examples occur in different orders and or concurrently from that shown and described herein. Moreover it is not necessary that all described actions be performed to implement a method.

At a script generator e.g. the script generator illustrated in can generate a test script based on the API command file. At the test script can be edited for example in response to user input. Editing of the test script can add remove and or modify a parameter of the test script. At a tester e.g. the load tester illustrated in can employ the test script to simulate instantiation and or network activity of the AUT at a mobile device and determine for instance a maximum number of instances of the AUT executing on mobile devices that can be serviced concurrently.

By utilization of the method a test script that accurately simulates human use of the AUT can be generated. Moreover in the method there is no need for the traffic recorder to execute at the mobile device thereby obviating the need for privileged access e.g. root access to the mobile device.

Where the disclosure or claims recite a an a first or another element or the equivalent thereof it should be interpreted to include one or more than one such element neither requiring nor excluding two or more such elements. Furthermore what have been described above are examples. It is of course not possible to describe every conceivable combination of components or methods but one of ordinary skill in the art will recognize that many further combinations and permutations are possible. Accordingly the invention is intended to embrace all such alterations modifications and variations that fall within the scope of this application including the appended claims.

