---

title: Redundant execution for reliability in a super FMA ALU
abstract: A system, processor and method to increase computational reliability by using underutilized portions of a data path with a SuperFMA ALU. The method allows the reuse of underutilized hardware to implement spatial redundancy by using detection during the dispatch stage to determine if the operation may be executed by redundant hardware in the ALU. During execution, if determination is made that the correct conditions exists as determined by the redundant execution modes, the SuperFMA ALU performs the operation with redundant execution and compares the results for a match in order to generate a computational result. The method to increase computational reliability by using redundant execution is advantageous because the hardware cost of adding support for redundant execution is low and the complexity of implementation of the disclosed method is minimal due to the reuse of existing hardware.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09329936&OS=09329936&RS=09329936
owner: Intel Corporation
number: 09329936
owner_city: Santa Clara
owner_country: US
publication_date: 20121231
---
The present disclosure relates to microprocessors and in particular the arithmetic logic units that a microprocessor may employ.

Microprocessors generally include one or more arithmetic logic units ALUs in the execution pipeline to perform arithmetic and logical operations. ALUs may be characterized by the number of input operands and or the number of mathematical and logical operations that they support. Some combinations of mathematical operations occur sufficiently often to justify the inclusion of a customized data path in an ALU to accommodate a specific operation. For example an ALU may accommodate a fused multiply add FMA operation in which the product of two floating point values is added to an accumulated floating point value using a single operation and rounding. Determining whether to implement a specific mathematical operation in a special purpose or complex ALU involves a cost performance tradeoff. A factor that may influence any such determination is the extent to which a complex ALU may be utilized to perform simpler operations at times when no pending operation requires the full functionality of the complex ALU and or or the extent to which an underutilized ALU may be employed to improve reliability via redundant execution of less complex instructions.

Embodiments of disclosed inventions pertain to improving computational reliability in computing systems generally and large scale computing systems particularly. In at least one embodiment a disclosed method increases computational reliability by leveraging resources in a complex ALU to perform redundant computations during times when the full functionality of the ALU is not required. Depending upon the specific instruction being executed and a mode of execution the resources of the complex ALU may be used to perform a relatively less demanding operation redundantly a relatively complex operation without redundancy or the relatively complex operation redundantly using temporal redundancy.

In at least one embodiment the complex ALU includes resources to perform two floating point fused multiply add FMA operations independently. In these embodiments the complex ALU may be referred to as a SuperFMA ALU to denote that the ALU includes sufficient resources to perform an initial FMA operation and a dependent FMA operation based on the results of the independent FMA operation. In some of these embodiments the SuperFMA ALU may be invoked to perform a simple FMA using spatial redundancy to perform a complex FMA operation also referred to herein as a SuperFMA operation without redundancy or to perform the SuperFMA redundantly using temporal redundancy by generating first and second computational results and comparing the two results. If the first and second results match the computational result is confirmed whereas if the first and second results don not match an error signal is generated.

In at least one embodiment a redundant execution mode is determined from a redundant execution signal. The redundant execution signal indicates a preferred redundant execution mode indicated by a reliability controller. The redundant execution mode may determine the manner in which the ALU performs operations.

In at least one embodiment several different modes of execution support various degrees of redundant execution support. Some embodiments may include a mandatory mode in which all operations are executed redundantly either spatially or temporally. SuperFMA operations or other complex operations which cannot be executed with spatial redundancy in the ALU will be required to execute using temporal redundancy

At least one embodiment includes an opportunistic execution mode in which all operations that can be executed with spatial redundancy are always executed redundantly. In this mode operations that cannot be executed using spatial redundancy are executed without redundancy. At least one embodiment further supports a reluctant execution mode in which operations that can be executed with spatial redundancy may be executed with spatial redundancy subject to satisfaction of additional criteria. The additional criteria may include but are not limited to criteria pertaining to power consumption and or a power management state junction temperature performance and so forth. In the reluctant mode if the operations do not support redundant execution the operation will execute without redundancy.

In at least one embodiment a disclosed processor includes multiple execution cores and associated cache memories. In at least one embodiment the execution cores include an ALU sometimes referred to herein as a SuperFMA ALU to receive multiple inputs and perform a SuperFMA computation during an execution stage. In at least one embodiment dispatch logic determines whether the operation to be performed by the ALU can be executed with spatially based redundant execution support. If the ALU cannot perform the operation with redundant execution support at least one embodiment of the ALU performs the operation without redundant execution and generates a computational result. In some embodiments if the ALU is capable of executing the operation with redundant support the ALU may do so depending upon a current state of a redundant execution signal indicating the current redundant execution mode.

In at least one embodiment the ALU performs a SuperFMA computation with temporal redundancy and generates first and second results. In at least one embodiment responsive to the first and second results matching the ALU generates a confirmed computational result. In at least one embodiment responsive to the first and second results of the redundant execution not matching an error is generated.

In another embodiment a disclosed multiprocessor system includes a first processor and storage accessible to the first processor. The storage includes an operating system. The operating system may include a processor executable resume module with instructions to reduce latency associated with transitioning from a power conservation state. The operating system may also include a processor executable connect module with instructions to maintain a currency of a dynamic application during the power conservation state.

In the following description details are set forth by way of example to facilitate discussion of the disclosed subject matter. It should be apparent to a person of ordinary skill in the field however that the disclosed embodiments are exemplary and not exhaustive of all possible embodiments.

Throughout this disclosure a hyphenated form of a reference numeral refers to a specific instance of an element and the un hyphenated form of the reference numeral refers to the element generically or collectively. Thus for example widget refers to an instance of a widget class which may be referred to collectively as widgets and any one of which may be referred to generically as a widget .

Referring now to an embodiment of a processor is illustrated. While the embodiment of processor is a multi core processor including a plurality of processor cores other embodiments encompass single core processors as well. The embodiment of processor includes an core region and a non core region . Core region includes first execution core and second execution core while non core region includes a crossbar and a shared cache memory referred to as a last level cache LLC . Although two execution cores are depicted in the embodiment a different number of execution cores may be employed in other embodiments. The embodiments of execution cores include a number of sub systems that provide different aspects of overall functionality. For example the embodiment of execution cores depicted in includes a front end and execution pipeline including a SuperFMA ALU and a local or L1 data cache .

In the embodiment front end may fetch instruction from an instruction cache not depicted and issue the instructions to execution pipeline . Execution pipeline may decode the instructions into microcode acquire values for any operands and execute an operation corresponding to the applicable instruction. Thus front end may be responsible for ensuring that a steady stream of operations is fed to execution pipeline .

Execution pipeline may be responsible for scheduling and executing micro operations and may include buffers for reordering micro operations and a number of execution ports not shown in . During operation memory requests from execution pipeline may first access L1 data cache before looking up any other caches within a system. In the embodiment shown in L1 data cache may be a final lookup point for each execution core before a request is issued to the LLC which is a shared among the execution cores of processor . Thus L1 data cache and last level cache represent a cache hierarchy in the depicted embodiment.

The embodiment of execution pipelines include a SuperFMA ALU . SuperFMA ALU is representative of a complex ALU that includes multiple instances of functional logic blocks to support a special purpose operation. In at least one embodiment SuperFMA ALU includes logic to perform a two part FMA operation based on 5 floating point inputs These multiple instances of resources may be used to achieve improved reliability during times when the resources might otherwise sit idle when the ALU is being utilized to perform an operation that does not fully utilize its resources.

In the embodiment of processor first execution core and second execution core do not communicate directly with each other but instead communicate via crossbar which may include intelligent functionality such as cache control data queuing P P protocols and multi core interfacing. Crossbar may thus represent an intelligent uncore controller that interconnects execution cores with last level cache LLC .

Referring now to one embodiment of execution pipeline including a SuperFMA ALU and control logic to leverage underutilized resources of SuperFMA ALU for improved reliability is illustrated. illustrates conceptualized boundaries between adjacent stages of execution pipeline . In the embodiment a first boundary is illustrated between a dispatch stage and an execution stage while a second boundary is illustrated between execution stage and a write back stage . Although the embodiment depicts three pipeline stages other embodiments may employ more for fewer pipeline stages.

In the embodiment dispatch logic determines an operation to be performed by SuperFMA ALU provides a plurality of input operands to SuperFMA ALU and sends an operation signal to a reliability controller . In the embodiment SuperFMA ALU supports as many as five floating point inputs through and dispatch logic provides as many as five inputs to SuperFMA . Other embodiments may support more or fewer inputs integer or floating point. In at least one embodiment the operation signal indicates the operation to be performed by SuperFMA ALU whether the operation to be performed can be performed using spatial redundancy or both. For example if dispatch logic determines that SuperFMA ALU is going to perform be in SuperFMA ALU operation signal may include information indicative of the SuperFMA operation itself information indicating that SuperFMA ALU cannot execute the instruction using spatial redundancy or both.

In the embodiment operation signal is provided to a reliability controller that generates a redundant execution mode signal . In the embodiment redundant execution mode signal is provided to SuperFMA ALU to control its operation and more specifically to control its use of resources to perform redundant execution. Reliability controller also receives in addition to operation signal a reliability mode signal . As suggested by its name reliability mode signal may indicate one of multiple reliability modes in which execution pipeline may operate. The various reliability modes may include high reliability modes that aggressively attempt to leverage unused ALU resources for performing operations redundantly and thereby more reliably. The reliability modes may further include modes that are more relaxed in terms of initiating redundant execution but consume less power generate less heat or exhibit some other desirable operating characteristic in exchange for a reduction in the amount of redundant execution employed.

As indicated above the use of unused resources to perform redundant execution can be implemented in various degrees and an representative embodiment that employs three levels of redundant execution will be described. In at least one embodiment execution pipeline supports three different reliability modes namely a mandatory mode an opportunistic mode and a reluctant mode. In the mandatory mode all operations are executed redundantly. If SuperFMA ALU can execute an operation using spatial redundancy it does so. When SuperFMA cannot perform the operation using spatial redundancy SuperFMA ALU may perform the operation using temporal redundancy. Temporal redundancy refers to a procedure in which an operation is performed multiple times by the same hardware to determine if each instance of performing the operation produces the same result.

In at least one embodiment of the opportunistic mode operations that may be executed in a spatially redundant manner are executed redundantly while operations that cannot be executed redundantly or operations that can only be executed with temporal redundancy are executed without redundancy. Finally in an embodiment of the reluctant mode operations that support redundant execution may execute redundantly subject to additional criteria while operations that cannot be executed using spatial redundancy are executed without redundancy. In this mode the additional criteria that influence wither an operation is executed redundantly may include but is not limited to criteria pertaining to power consumption device temperature and so forth. For example a reluctant policy might executed applicable operations redundantly as long as power consumption has been averaging below a specified threshold. Similarly redundant execution criteria may include criteria specifying a particular power management mode e.g. a device in a power conservation may prohibit or discourage redundant execution. As another example criteria influencing whether to execute an instruction redundantly may include a simple percentage indicating approximately what percentage of operations that are eligible for redundant execution are executed redundantly.

Returning to the embodiment of reliability controller thus receives information regarding an operation to be performed information indicating whether the operation can be performed redundantly and information indicating a current reliability mode of the processor. From this information at least one embodiment of reliability controller generates a control signal identified in as redundant execution mode signal . In the embodiment illustrated in redundant execution mode signal is provided to SuperFMA ALU and result comparator logic to indicate or control the use of redundant execution by SuperFMA ALU .

In at least one embodiment of write back stage redundant execution control signal from reliability controller is provided to a result comparator to indicate whether result comparator is needed to compare two results generated by redundant executions of the same operation by SuperFMA ALU . When redundant execution mode signal indicates that SuperFMA ALU is being operated in redundant execution mode comparison block compares the redundant results from SuperFMA ALU to determine if they match. Otherwise an error signal is generated.

Referring now to one embodiment of a hardware configuration of SuperFMA ALU supporting redundant execution is illustrated. The embodiment of SuperFMA ALU includes a first FMA ALU and a second FMA ALU which may be used in combination to perform a fully pipelined 5 input floating point SuperFMA operation of the form A B C D E .

In the embodiment first FMA performs a fused multiply add computation using ALU Source ALU Source and ALU Source . This computation may then be sent as an input to multiplexor . In parallel or substantially in parallel second FMA performs a fused multiply add computation using the outputs of multiplexors and . Depending on the redundant execute mode signal second FMA may perform the second part of a SuperFMA operation by performing an FMA adding the output of first FMA to the product of source and source . Alternatively the redundant execution mode signal may cause FMA to function as a redundant source of the FMA operation of FMA .

In the embodiment result comparator receives a first result generated by first FMA and a second result generated by second FMA . When redundant execution mode signal indicates to result comparator that the FMAs and are being used in redundant fashion result comparator asserts or generates an error signal indicating that the redundant executions do not match. Alternatively when redundant execution mode signal indicates that FMAs and are being used cooperatively to perform a SuperFMA operation the output of result comparator is ignored and instead the output of second FMA is routed through multiplexer to drive a result signal . In the embodiment a control signal for multiplexer may be asserted when the operation being performed is a SuperFMA.

Thus by integrating four multiplexers and a comparator with the pair of FMA units and SuperFMA ALU is operable not only to perform SuperFMA operations but also to perform less complex operations using spatial redundancy be executing one instance of an operation in FMA and another instance of the FMA in FMA . The cost of these additional logic components is relatively low with respect to the added functional benefit. No additional ports need to be added to the register files and the required changes are concentrated in the ALU itself.

Referring now to a flow diagram illustrates one embodiment of a method for improving computational reliability in a processor that includes a SuperFMA ALU. In the embodiment method includes receiving operation operand inputs from dispatch logic to perform an operation with the SuperFMA ALU. The embodiment of method depicted in determines operation whether the SuperFMA ALU can provide redundant execution support for the operations. Unless the pending operation is a SuperFMA operation method proceeds to operation where assuming the redundant execution mode signal permits it an ALU operation is performed operation using spatial redundancy to obtain first and second results of the operation with the first result being generated by the first FMA logic and the second result being generated by the second FMA logic. As described previously redundant execution can be implemented in a mandatory opportunistic or reluctant fashion in reference to .

As depicted in method further includes determining block whether the first and second results match. When the results match the embodiment of method illustrated in generates a result operation that is reliability tested through redundant execution. When the results of the redundantly execution operation do not match method as shown in generates an error signal operation .

If it is determined in operation that the ALU operation cannot be executed with redundant execution support the flow continues to process block where the operation is performed in the SuperFMA ALU without redundant execution and the computational result is generated in .

Embodiments of processor and SuperFMA ALU may be implemented in many different types of systems and platforms. Referring now to a computing system is illustrated in accordance with one embodiment. In the embodiment of system processor memory and chip set devices are interconnected by a number of point to point P P interfaces as will be described in further detail. In other embodiments computing system may employ a different interconnection technology different bus architectures such as a front side bus a multi drop bus and or another implementation and so forth. Although a single processor is depicted in the example embodiment of for descriptive clarity in various embodiments a different number of processors may be employed using elements of the depicted architecture.

In computer system is a point to point interconnect system that includes a processor employing multiple execution cores and second execution core . It is noted that other elements of processor besides execution cores may be referred to as an uncore region while execution cores may be referred to as core region . In different embodiments not shown in a varying number of cores may be present in a particular processor. Execution cores may comprise a number of sub system that provide different aspects of overall functionality. For example execution cores may each include a cache memory hierarchy not shown in that may comprise one or more levels of private cache memory.

In the embodiment execution cores within processor do not include direct means of communicating with each other but instead communicate via crossbar which may include intelligent functionality such as cache control functionality data queuing P P protocols and multi core interfacing. Crossbar may thus represent an intelligent uncore controller that interconnects execution cores with memory controller MC last level cache memory LLC and P P interface among other elements.

In LLC may be coupled to a pair of processor execution cores respectively. For example LLC may be shared by execution core and execution core . LLC may be fully shared such that any single one of execution cores may fill or access the full storage capacity of LLC . Additionally MC may provide for direct access by processor to memory via memory interface . For example memory may be a double data rate DDR type dynamic random access memory DRAM while memory interface and MC comply with a DDR interface specification. Memory may represent a bank of memory interfaces or slots that may be populated with corresponding memory circuits for a desired DRAM capacity.

Processor may also communicate with other elements of processor system such as near hub and far hub which are also collectively referred to as a chipset that supports processor . P P interface may be used by processor to communicate with near hub via interconnect link . In certain embodiments P P interfaces and interconnect link are implemented using Intel QuickPath Interconnect architecture.

As shown in near hub includes interface to couple near hub with first bus which may support high performance I O with corresponding bus devices such as graphics and or other bus devices. Graphics may represent a high performance graphics engine that outputs to a display device not shown in . In one embodiment first bus is a Peripheral Component Interconnect PCI bus such as a PCI Express PCIe bus and or another computer expansion bus. Near hub may also be coupled to far hub at interface via interconnect link . In certain embodiments interface is referred to as a south bridge. Far hub may provide I O interconnections for various computer system peripheral devices and interfaces and may provide backward compatibility with legacy computer system peripheral devices and interfaces. Thus far hub is shown providing network interface and audio I O as well as providing interfaces to second bus third bus and fourth bus .

Second bus may support expanded functionality for microprocessor system with I O devices and touchscreen controller and may be a PCI type computer bus. Third bus may be a peripheral bus for end user consumer devices represented by desktop devices and communication devices which may include various types of keyboards computer mice communication devices data storage devices bus expansion devices etc. In certain embodiments third bus represents a Universal Serial Bus USB or similar peripheral interconnect bus. Fourth bus may represent a computer interface bus for connecting mass storage devices such as hard disk drives optical drives disk arrays which are generically represented by persistent storage that may be executable by processor .

The embodiment of system emphasizes a computer system that incorporates various features that facilitate handheld or tablet type of operation and other features that facilitate laptop or desktop operation. In addition the embodiment of system includes features that cooperate to aggressively conserve power while simultaneously reducing latency associated with traditional power conservation states.

The embodiment of system includes an operating system that may be entirely or partially stored in a persistent storage . Operating system may include various modules application programming interfaces and the like that expose to varying degrees various hardware and software features of system . The embodiment of system includes for example a sensor application programming interface API a resume module a connect module and a touchscreen user interface . System as depicted in may further include various hardware firm features include a capacitive or resistive touch screen controller and a second source of persistent storage such as a solid state drive .

Sensor API provides application program access to one or more sensors not depicted that may be included in system . Examples of sensors that system might have include as examples an accelerometer a global positioning system GPS device a gyro meter an inclinometer and a light sensor. The resume module may be implemented as software that when executed performs operations for reducing latency when transition system from a power conservation state to an operating state. Resume module may work in conjunction with the solid state drive SSD to reduce the amount of SSD storage required when system enters a power conservation mode. Resume module may for example flush standby and temporary memory pages before transitioning to a sleep mode. By reducing the amount of system memory space that system is required to preserve upon entering a low power state resume module beneficially reduces the amount of time required to perform the transition from the low power state to an operating state. The connect module may include software instructions that when executed perform complementary functions for conserving power while reducing the amount of latency or delay associated with traditional wake up sequences. For example connect module may periodically update certain dynamic applications including as examples email and social network applications so that when system wakes from a low power mode the applications that are often most likely to require refreshing are up to date. The touchscreen user interface supports a touchscreen controller that enables user input via touchscreens traditionally reserved for handheld applications. In the embodiment the inclusion of touchscreen support in conjunction with support for communication devices and the enable system to provide features traditionally found in dedicated tablet devices as well as features found in dedicated laptop and desktop type systems.

Referring now to a representation of simulation emulation and fabrication of a design implementing disclosed embodiments of SuperFMA ALU is illustrated in the context of data stored on a storage medium . Data representing a design may represent the design in a number of manners. First as is useful in simulations the hardware may be represented using a hardware description language or another functional description language that provides a computerized model of how the designed hardware is expected to perform. The hardware model may be stored in storage medium such as a computer memory so that the model may be simulated using simulation software that applies a particular test suite to the hardware model to determine if it indeed functions as intended. In some embodiments the simulation software is not recorded captured or contained in the medium .

Additionally a circuit level model with logic and or transistor gates may be produced at some stages of the design process. This model may be similarly simulated sometimes by dedicated hardware simulators that form the model using programmable logic. This type of simulation taken a degree further may be an emulation technique. In any case re configurable hardware is another embodiment that may involve a tangible machine readable storage medium storing a model of processor and SuperFMA ALU .

Furthermore most designs at some stage reach a level of data representing the physical placement of various devices in the hardware model. In the case where conventional semiconductor fabrication techniques are used the data representing the hardware model may be the data specifying the presence or absence of various features on different mask layers for masks used to produce the integrated circuit. Again this data representing the integrated circuit embodies the techniques disclosed in that the circuitry or logic in the data can be simulated or fabricated to perform these techniques.

In any representation of the design the data may be stored in any form of a tangible machine readable medium. An optical or electrical wave modulated or otherwise generated to transmit such information a memory or a magnetic or optical storage such as a disc may be the tangible machine readable medium. Any of these mediums may carry the design information. The term carry e.g. a tangible machine readable medium carrying information thus covers information stored on a storage device or information encoded or modulated into or on to a carrier wave. The set of bits describing the design or the particular part of the design are when embodied in a machine readable medium such as a carrier or storage medium an article that may be sold in and of itself or used by others for further design or fabrication.

To the maximum extent allowed by law the scope of the present disclosure is to be determined by the broadest permissible interpretation of the following claims and their equivalents and shall not be restricted or limited to the specific embodiments described in the foregoing detailed description.

