---

title: Application gateway in a browser based environment
abstract: An application gateway enables controlled communication between application components within a browser based environment while maintaining a level of isolation of the individual application components. A dispatching API wrapper and a listening API wrapper are registered for each of a plurality of application components. The registered API wrappers are used to send and receive communications from the associated application components. For example, a first application component can dispatch an action to a second application component via the first application component's dispatching API wrapper. The second application component can receive the action via the second application component's listening API wrapper. As another example, a first application component can dispatch an event that broadcasts a state to other application components via the first application component's dispatching API wrapper. A listening API wrapper of at least one other application component receives the state and may perform other functions dependent on the state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09043807&OS=09043807&RS=09043807
owner: Chegg, Inc.
number: 09043807
owner_city: Santa Clara
owner_country: US
publication_date: 20120730
---
This application is related to U.S. Utility application Ser. No. 13 253 011 which is incorporated by reference in its entirety.

This invention relates to providing communication between isolated application components in a browser based environment.

A new generation of HTML5 capable browsers are shifting application publishing from a traditional stand alone desktop application model to a web based model where applications exist within their client browser environments. As browser based client applications attempt to provide the same service and usability that stand alone desktop applications do software developers have to manage the technical constraints of operating within a browser and not having access to operating system level resources that are available to stand alone software environments. This fundamental difference in resource availability is forcing a shift in how client side applications are architected within browser based environments. In addition features of browser based applications need to be upgraded while already deployed on a broad spectrum of client devices. Thus architectures and techniques that enable discrete components of a deployed browser based application to be updated separately are desirable to creating a stable browser based application.

Embodiments of the invention provide an application gateway to enable controlled communication between application components within a browser based environment while maintaining a level of isolation of the individual application components. A dispatching application programming interface API wrapper and a listening API wrapper are registered for each of a plurality of application components. The registered API wrappers are used to send and receive communications from the associated application components. For example a first application component can dispatch an action to a second application component via the first application component s dispatching API wrapper. The second application component can receive the action via the second application component s listening API wrapper. As another example a first application component can dispatch an event that broadcasts a state to other application components via the first application component s dispatching API wrapper. A listening API wrapper of at least one other application component receives the state and may perform other functions dependent on the state.

The features and advantages described in this summary and the following detailed description are not all inclusive. Many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims hereof.

One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

Embodiments of the invention provide an application gateway to enable controlled communication between application components within a browser based environment while maintaining a level of isolation of the individual application components. By not directly exposing application components to each other internally or externally the application gateway makes the application more robust and the application components less vulnerable.

In addition the application gateway provides an environment wherein browser based application components communicate asynchronously and asymmetrically with each other. Asynchronous communication refers to a communication that is sent by an application component at a first time and received or recognized by another application component at a second time. Asymmetrical communication refers to communication wherein the sender may not receive any feedback indicating if the sent communication is received by another application component or if the sent communication is being acted upon in any way. Benefit of such a communication system include enabling communication among various application components without any prior coordination between the components. This is particularly important for implementing component updates and integrating new components without compromising the functioning of the entire application.

The application provider provides a browser based application to the client device . An example of a browser based application is an eReading application suitable for execution within the environment of a web browser such as GOOGLE CHROME MOZILLA FIREFOX APPLE SAFARI and MICROSOFT INTERNET EXPLORER. Browser based applications typically comprise a plurality of application components . Each application component is a discrete portion of the application that performs at least one specific function such as performing an action changing a state or communicating a command. For example each component is responsible for maintaining a state of the application in memory communicating with a server and or is responsible for a specific part of the user interface layer. The application components are interfaced to one another through a gateway and collectively define the operation of the application .

The third party component provider can provide one or more application components developed by a third party to operate as part of the browser based application provided to the client device . The third party application components may include additional functionality developed by third parties to enhance a user s experience with the browser based application .

The client device receives the browser based application . Examples of the client device include a personal computer such as a desktop laptop or tablet computer a personal digital assistant a smartphone or a television set top box each equipped with a web browser. The application received by the client device includes application components from the application provider or third party component provider . The communication of the application components with each other is controlled through a gateway that enables asynchronous and asymmetric communication among the application components . Individual application components are isolated within individual application programming interface API wrappers that limit how access can be made to each of the application components and how application components can communicate to the application environment and external resources. As such the gateway functions as an abstraction layer through which all communications with and between the application components passes. The operation of the gateway will be described in further detail with reference to below.

In one embodiment the network relays the application from the application provider and any third party application components from third party component provider to the client device . In some instances the network uses standard Internet communications technologies and or protocols. Thus the network can include link technologies such as Ethernet IEEE 802.11 IEEE 806.16 WiMAX 3GPP LTE integrated services digital network ISDN asynchronous transfer mode ATM and the like. Similarly the networking protocols used on the network can include the transmission control protocol Internet protocol TCP IP the hypertext transport protocol HTTP the simple mail transfer protocol STMP the file transfer protocol FTP and the like. The data exchanged over the network can be represented using a variety of technologies and or formats including a hypertext markup language HTML the extensible markup language XML etc. In addition all or some links can be encrypted using conventional encryption technologies such as the secure sockets layer SSL Secure HTTP HTTPS and or virtual private networks VPNs . In another embodiment the entities can use custom and or dedicated data communications technologies instead of or in addition to the ones described above.

In general all communications between any application components are based upon interactions between the respective components dispatching API wrapper and listening API wrapper. These interactions will be described in the context of events and actions . An event is a change of state implemented by an application component . An action is a command issued by an application component to another application component. Examples of component API wrapper structures are provided below 

The left side of illustrates the communication process for an event . First an application component A changes a state. The change in state may be prompted by user input the expiry of a time limit communication from another application component or any other source. For example the change in state may be the opening of a menu the closing of a window the updating of a score the receipt of a notification or any other state change that impacts the operation of the application .

The application component A communicates the change in state as an event to the application component s registered dispatcher dispatcher A. Dispatcher A broadcasts or communicates the event to any number of registered listeners that are listening for the event or are listening for dispatches from Dispatcher A. In this example listener B is the registered listening API wrapper of application component B listener C is the registered listening API wrapper of application component C and listener D is the registered listening API wrapper of application component D. Listeners A B and C receive the dispatched event from dispatcher A. Subsequently listeners A B and C communicate the received event to their respective application components B C and D. Thus through the gateway application component A is enabled to communicate an event to application components B C and D. These application components in turn may be configured to trigger other state changes and or issue commands to other application components based on the receipt of the event .

The right side of illustrates the communication process for an action . First an application component for example application component X issues a command . The issuance of the command may be prompted by user input the expiry of a time limit communication from another application component or any other source. Each command is mapped to exactly one target application component to perform a specified function. Advantageously having an action mapped to exactly one target application component allows the creation of a robust testing environment for individual application components since mocking a particular behavior such as a command from an application component is easily accomplished. However multiple application components such as application components X Y and Z may issue commands that are mapped to the same target application component in this example application component A to perform the same function. For example the command may be to open a menu close a window update a score send a notification or to perform any other function within the application . Thus for example multiple different application components X Y and Z may each issue a command to application component A to close a window.

Alternatively communication between application components including third party components can be architected based on the presence of multiple gateways including both an internal gateway designed to allow internal application components to interact only with each other and an external gateway designed to allow limited and controlled access for third party provided components to internal application components. The use of an external gateway is particularly useful when considering the extensibility of the application . Specifically by publishing wrapper APIs through the external gateway third party developers can design and add components that can be seamlessly integrated with deployed browser based applications .

As described above the gateway registers both dispatching API wrappers and listening API wrappers for each of a plurality of application components . For example an application component M has a dispatching API wrapper M and a listening API wrapper M registered at the gateway . Similarly application component N has a dispatching API wrapper N and a listening API wrapper N registered at the application gateway and application component T has a dispatching API wrapper T and a listening API wrapper T registered at the application gateway .

In one embodiment an application component M changes a state that is communicated as an event that is dispatched by dispatcher M. In this example listener N and listener T are both listening for events of the type dispatched by dispatcher M and communicate the event to their respective application components N and T.

Application components N and T may thereafter perform a function responsive to the received event. For example the application component N may issue a command which is communicated as an action through the gateway via the application component s dispatcher N to a resource A internal to the browser environment on the client . The resource A then executes the action.

As another example third party application component T may change a state responsive to the received event. The change of state may be dispatched as an event through the gateway via the application component s dispatcher T to a resource B or another application or application component external to the browser environment on the client such as a third party database or other application components. The resource B then processes the change in state notice and or executes other functions based on the receipt of it.

The storage device is a non transitory computer readable storage medium such as a hard drive compact disk read only memory CD ROM DVD or a solid state memory device. The memory holds instructions and data used by the processor . In some embodiments the display device is a touch sensitive display. The display device can be used alone or in combination with the keyboard and or pointing device to input data into the computer . The graphics adapter displays images and other information on the display device . The network adapter couples the computer to a network such as network . Some embodiments of the client device have different and or other components than those shown in .

The client device is adapted to execute computer program modules for providing functionality described herein. As used herein the term module refers to computer program instructions and or other logic used to provide the specified functionality. Thus a module can be implemented in hardware firmware and or software. In one embodiment program modules formed of executable computer program instructions are stored on the storage device loaded into the memory and executed by the processor .

The present invention has been described in particular detail with respect to several possible embodiments. Those of skill in the art will appreciate that the invention may be practiced in other embodiments. The particular naming of the components capitalization of terms the attributes data structures or any other programming or structural aspect is not mandatory or significant and the mechanisms that implement the invention or its features may have different names formats or protocols. Further the system may be implemented via a combination of hardware and software as described or entirely in hardware elements. Also the particular division of functionality between the various system components described herein is merely exemplary and not mandatory functions performed by a single system component may instead be performed by multiple components and functions performed by multiple components may instead performed by a single component.

Some portions of above description present the features of the present invention in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. These operations while described functionally or logically are understood to be implemented by computer programs. Furthermore it has also proven convenient at times to refer to these arrangements of operations as modules or by functional names without loss of generality.

Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as determining or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system memories or registers or other such information storage transmission or display devices.

Certain aspects of the present invention include process steps and instructions described herein in the form of an algorithm. It should be noted that the process steps and instructions of the present invention could be embodied in software firmware or hardware and when embodied in software could be downloaded to reside on and be operated from different platforms used by real time network operating systems.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored on a computer readable medium that can be accessed by the computer and run by a computer processor. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards application specific integrated circuits ASICs or any type of media suitable for storing electronic instructions and each coupled to a computer system bus. Furthermore the computers referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.

In addition the present invention is not limited to any particular programming language. It is appreciated that a variety of programming languages may be used to implement the teachings of the present invention as described herein and any references to specific languages such as HTML5 are provided for enablement and best mode of the present invention.

The present invention is well suited to a wide variety of computer network systems over numerous topologies. Within this field the configuration and management of large networks comprise storage devices and computers that are communicatively coupled to dissimilar computers and storage devices over a network such as the Internet.

Finally it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter. Accordingly the disclosure of the present invention is intended to be illustrative but not limiting of the scope of the invention.

