---

title: System, method and computer program product for recovering stub files
abstract: A read cache may include portions of files stored on media of a media library. Embodiments described herein may include systems and methods for restoring a read cache, including restoring stub files to a read cache on an ad hoc basis.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08977827&OS=08977827&RS=08977827
owner: KIP CR P1 LP
number: 08977827
owner_city: New York
owner_country: US
publication_date: 20120531
---
This disclosure relates to recovering stub files. Even more particularly this disclosure relates to recovering stub files used to respond to requests for file data while a tape is loaded.

Businesses governmental organizations and other entities are increasingly saving large volumes of data necessary for daily operations. This data represents a significant asset for these entities. Consequently data loss whether accidental or caused by malicious activity can be costly in terms of wasted manpower loss of goodwill from customers loss of time and potential legal liability. To ensure proper protection of data for business and legal purposes e.g. to ensure quick recovery of data in the event of a disaster to comply with document retention requirements etc. these entities often back up data to a physical media such as magnetic tapes or optical disks on a regular basis.

Traditional backup systems placed an application server backup server source device destination device and a local area network LAN in the data path of backup operations. Under these systems the LANs were becoming overburdened by the amount of data being copied. Often the backup window the period in which data unavailable for normal operations in order to permit backup was too short to achieve a complete backup of data. Accordingly many entities implemented Storage Area Networks SAN to relieve the burden of mass data storage and backup from the LAN freeing the LAN for more immediate data storage and manipulation operations. In SANs data from multiple machines on a network may be backed up to a remote media library. Centralized data backup allows storage problems to be identified at one location and has the advantage of increased efficiency.

One example of a media library commonly used in enterprise backup systems is a magnetic tape library. In a typical magnetic tape library tapes are contained in cartridges and the tape library contains multiple cartridge slots in which tape cartridges can be stored. The tape cartridges are physically moved between cartridge slots and tape drives by a robot. The robot is controlled by access commands received from the host devices on the network. When specific data is required the host device determines which cartridge slot contains the tape cartridge that holds the desired data. The host device then transmits a move element command to the robot and the robot moves the tape cartridge.

Recently the Linear or Long Term File System LTFS Format Specification by IBM and Ultrium hereby fully incorporated by reference in its entirety for all purposes has been developed which defines a file system for LTO 5 tapes LTO 6 tapes and may be extended to other tapes using an eXtensible Markup Language XML schema architecture. This file system support allows the use of an LTFS formatted tape as if it were a file system. Files and directories may appear in a directory listing files may be dragged and dropped from tape data may be accessed at the file level etc.

Embodiments described herein provide systems and methods for recovering a read cache. One embodiment of a system for recovering a read cache can include an archive node appliance. The archive node appliance can comprise a processor a data store and a computer readable medium storing a set of computer executable instructions executable on the processor. The instructions can be executable to maintain a read cache receive a request from a network file system interface client for a first file at a first location locate the first file at a second location on a media of a media library read the first file from the media of the media library and populate the read cache with a stub file for the first file using file data read from the media.

Another embodiment can include a computer program product comprising a non transitory computer readable medium storing a set of computer executable instructions. The computer instructions can be executable to perform a method comprising maintaining a read cache receiving a request from a network file system interface client for a first file at a first location locating the first file at a second location on a media of a media library reading the first file from the media of the media library and populating the read cache with a stub file for the first file using file data read from the media.

Yet another embodiment can include a method for recovering a read cache comprising maintaining a read cache comprising portions of files stored on media of a media library receiving a request from a network file system interface client for a first file at a first location locating the first file at a second location on a media of the media library wherein the second location mirrors the first location reading the first file from the media of the media library and populating the read cache with a stub file for the first file from file data read from the media.

The systems and methods and the various features and advantageous details thereof are explained more fully with reference to the nonlimiting embodiments that are illustrated in the accompanying drawings and detailed in the following description. Descriptions of well known starting materials processing techniques components and equipment are omitted so as not to unnecessarily obscure the description in detail. It should be understood however that the detailed description and the specific examples while indicating preferred embodiments are given by way of illustration only and not by way of limitation. Various substitutions modifications additions and or rearrangements within the spirit and or scope of the underlying inventive concept will become apparent to those skilled in the art from this disclosure. Embodiments discussed herein can be implemented in suitable computer executable instructions that may reside on a computer readable medium e.g. a hard disk drive flash drive or other memory hardware circuitry or the like or any combination.

Before discussing specific embodiments embodiments of a hardware architecture for implementing certain embodiments is described herein. One embodiment can include one or more computers communicatively coupled to a network. As is known to those skilled in the art the computer can include a central processing unit CPU at least one read only memory ROM at least one random access memory RAM at least one hard drive HD and one or more input output I O device s . The I O devices can include a keyboard monitor printer electronic pointing device such as a mouse trackball stylus etc. or the like. In various embodiments the computer has access to at least one database.

ROM RAM and HD are computer memories for storing data and computer executable instructions executable by the CPU. Within this disclosure the term computer readable medium is not limited to ROM RAM and HD and can include any type of data storage medium that can be read by a processor. In some embodiments a computer readable medium may refer to a data cartridge a data backup magnetic tape a floppy diskette a flash memory drive an optical data storage drive a CD ROM ROM RAM HD or the like.

At least portions of the functionalities or processes described herein can be implemented in suitable computer executable instructions. The computer executable instructions may be stored as software code components or modules on one or more computer readable media such as non volatile memories volatile memories DASD arrays magnetic tapes floppy diskettes hard drives optical storage devices etc. or any other appropriate computer readable medium or storage device . In one embodiment the computer executable instructions may include lines of compiled C Java HTML or any other programming or scripting code.

Additionally the functions of the disclosed embodiments may be implemented on one computer or shared distributed among two or more computers in or across a network. Communications between computers implementing embodiments can be accomplished using any electronic optical radio frequency signals or other suitable methods and tools of communication in compliance with known network protocols.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a process article or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present .

Additionally any examples or illustrations given herein are not to be regarded in any way as restrictions on limits to or express definitions of any term or terms with which they are utilized. Instead these examples or illustrations are to be regarded as being described with respect to one particular embodiment and as illustrative only. Those of ordinary skill in the art will appreciate that any term or terms with which these examples or illustrations are utilized will encompass other embodiments which may or may not be given therewith or elsewhere in the specification and all such embodiments are intended to be included within the scope of that term or terms. Language designating such nonlimiting examples and illustrations include but is not limited to for example for instance e.g. in one embodiment. 

It may be desirable to provide a file system utilizing media libraries. To that end attention is now directed to systems and methods for implementing a file system utilizing a tape library. In particular embodiments may present a network file system interface to one or more host devices. These host devices may utilize the network based file system to organize store read or perform other operations in association with files. These files may be managed in conjunction with a tape library. Specifically commands in a network file system protocol may be received. These commands may be associated with operations to be performed on files including operations associated with the organization storage or retrieval of those files. Library control functionality that allows tapes in the tape library to be tracked and tapes to be moved into and out of drives and storage slots is utilized to manage the tape library.

In certain embodiments LTFS including Library LTFS may be employed in conjunction with the tape library such that the tapes in the tape library may be formatted using LTFS. Accordingly operations with respect to the files on the tapes in the tape library may be performed using LTFS. A mapping may be maintained between the files visible through the networked based file system presented to the host devices and the corresponding location of those files on an LTFS tape in the tape library or other location. It should be noted here that while embodiments as discussed include a tape library having tapes formatted according to LTFS other types of media libraries that utilize media of the same or different type where the media may be formatted according to the same or another type of file system may be employed in other embodiments.

To increase performance embodiments of such a system may include a data store which may be on a storage medium that is relatively faster for random accesses such as a disk. Files that are stored by the host devices using the networked based file system may initially be stored on the disk. These files are subsequently migrated to tapes in the tape library. Once a file has been stored on tape a stub file that contains a portion of the file may remain on the data store with the remainder of the file being deleted from the data store. When the file is subsequently accessed the initial requests for file data can be serviced using data from the stub file while the tape containing the full file loads. The use of a stub file allows time for the tape to load and file data to be read from the tape reducing or preventing timeouts.

In some cases previously stored stub files may be deleted become corrupted or otherwise become unusable. Therefore it may be desirable to implement a stub file recovery scheme. According to one embodiment ad hoc stub file recovery can be implemented in which individual stub files are recovered as needed. If a stub file is missing corrupted or otherwise unusable the stub file can be repopulated when a corresponding file is requested.

Archive Node Appliance is coupled to media library via network Archive Node Appliance and media library may be collectively referred to as an Archive Node or a Networked Attached Tape Archive NATA . Network can comprise the Internet a LAN a WAN a SAN a wireless network or any other communications link network or protocol known in the art. For example network may comprise a fibre channel network such as a fibre channel SAN or a SCSI bus such as a Serial Attached SCSI SAS bus. While Archive Node Appliance has been depicted as a standalone device in this embodiment it should be understood that Archive Node Appliance can be implemented in a variety manners and in a variety of architectures. For example when implemented in a SAN the Archive Node Appliance may be part of a router part of a media library or at any other location in a communication path between hosts and a media library.

Media library may comprise a tape library or another media library known in the art such as optical jukeboxes. A tape library as would be understood by one of ordinary skill in the art typically consists of one or more tape drives that can read write data from to magnetic tape contained within cartridges also referred to herein as tapes or tape cartridges eject tape cartridges and perform other operations. A series of slots stores the tape cartridges when they are not in a drive and a robot moves the magnetic tape cartridges between the drives and slots.

As an example media library can comprise drives robot and slots individually slots . It should be noted that a media library that employs a single robot or multiple robots in an expandable or modular configuration but presents itself as a single media library to a network or any other configuration of one or more media libraries either physical or virtual that can present itself as a single media library can be considered a single media library for the purposes of this application. It will also be noted that though the embodiment depicts only a single media library other embodiments may be coupled to and utilize multiple media libraries.

Archive Node Appliance comprises a computer processor and a computer readable memory e.g. RAM ROM magnetic disk optical disk and or any other computer readable memory known in the art that can store computer instructions that are executable by processor . Computer instructions can be implemented as hardware software firmware some combination or in any other suitable manner as would be understood by those of ordinary skill in the art.

In operation computer instructions can be executable such that Archive Node Appliance can present a network based file system i.e. a file system accessible over a network to hosts allowing these hosts to organize store or retrieve files or perform other operations associated with a file system. Operations that can be performed using such network based files systems are understood by those of skill in the art. This network based file system may be for example a Network File System NFS based file system a Common Internet File System CIFS based file system a File Transfer Protocol FTP based file system a Secure Copy Protocol SCP based file system a Representational State Transfer REST based file system or a file system based on any another type of protocol which allows a file system to be accessed over a network.

Computer instructions may thus be executable to implement operations associated with the presented network based file system in conjunction with media library . More specifically in one embodiment drives may be LTO 5 LTO 6 compliant drives and tapes in media library may be formatted according to LTFS as disclosed in the Linear Tape File System Format Specification Version 2.0 or other version by IBM hereby incorporated by reference in its entirety . In other embodiments the drives may be compliant with other types of tapes and the tapes may be formatted according to other tape file systems. Computer instructions may be executable to store files received through the networked based file system on the LTFS tapes in the media library and maintain mapping information between the files visible through the network based file system and the location of those files in the media library.

The files visible through the network based file system can be files stored at an intermediate location e.g. a disk based data store or memory . When a file visible through the network based file system is accessed computer instructions can be executed to provide access to the file from the intermediate location. File operations can thus occur on the file at the intermediate location rather than directly on the file on the tape.

In some cases the file may not reside or reside entirely in the intermediate storage when the file is accessed. Therefore the computer instructions can also be executable to determine the location of the accessed file in the media library using the mapping information locate and load the correct tape into a drive and use LTFS to mount the LTFS file system on the tape and access the file to for example read the remainder of the file into the intermediate storage.

To increase performance in some embodiments it may be desired to store files on computer readable memory when they are initially received and migrate these files to the media library at a later point. Computer instructions may therefore be executable to store files stored by hosts using the network based file system to the computer readable memory . At some later point the computer executable instructions may be executable to migrate the file from the computer readable memory to the media library . In this case computer executable instructions are executable to maintain mapping information between the files visible through the network based file system and the location of those files on the computer readable memory or the media library .

The use of LTFS in conjunction with the media library can afford a number of advantages when employed by an Archive Node Appliance to implement a networked based file system. One important advantage is that the file system structure presented through the file system may be substantially mirrored on the tapes of the media library . Accordingly if there is a failure of the Archive Node Appliance or media library the files on the tapes of the media library may be easily located as they are stored according to a structure that is substantially identical to that defined by the users at the hosts using the network based file system.

Furthermore the use of LTFS means that tapes on which files of the network based file system are stored may be mounted and the file system on these tapes accessed using any computing device which supports LTFS. As LTFS is commonly provided for many of today s operating systems these tapes and files stored thereon may be easily accessed allowing files to be restored or otherwise manipulated without requiring specialized software.

To put a finer point on some of the advantages offered by embodiments disclosed herein the functionality and performance of a network based file system may be achieved while simultaneously achieving the benefits of storage on a medium typically used for backup without the need for any type of specific backup application. The use of an Archive Node Appliance may abstract the media library to implement a network based file system and hide the corresponding complexity entailed by the use of such a media library. By using a computer readable memory which is relatively faster for random accesses such as a disk in conjunction with the media library to provide the network based file system the Archive Node Appliance may provide the speed customarily associated with a network based file system by masking the latency of the use of the media library. Simultaneously the use of such a media library provides the benefit of having files automatically stored on a storage media typically used for backup without specific action by users or the use of a backup application.

Furthermore the use of LTFS in conjunction with the media library allows the file system created by users using the network based file system to be mirrored on the storage media. Thus when restoring files from the storage media of the media library in the event of a failure no specialized structural knowledge is required. The files on the storage media are in the locations where they were placed by the users in conjunction with the network based file system. Moreover since LTFS is commonly supported data on the storage media may be easily accessed without the need for specialized software such as a backup application.

It may be helpful here to illustrate architectures for certain embodiments of an Archive Node. depicts one embodiment of an architecture for an Archive Node that may be used in instances where relatively lower capacity is desired. Here the Archive Node Appliance may comprise one or more Gigabit Ethernet ports . These Gigabit Ethernet ports may be dedicated to providing a user interface or for a systems management interface such as the Intelligent Management Platform Interface IPMI . The Archive Node Appliance may also comprise one or more Ethernet ports for data connections. These Ethernet ports may be 10BASE T 100BASE TX 1000BASE T 10GBASE LR 10GBASE LW 10GBASE LRM 10GBASE ZR 10GBASE LX4 10BASE CX4 etc. or may be of a mixture of types. In operation these Ethernet ports may be coupled to hosts such that a network based file system may be provided by the Archive Node Appliance and hosts may interface with the Archive Node Appliance using these Ethernet ports to utilize the network based file system for example by storing or retrieving files using the network based file system. The network based file system may be implemented using a file system implemented in association with user space such as the File system in User space FUSE file system using a kernel based file system such as Ext2 Ext3 Ext4 Next3 etc. or almost any other type of file system desired.

Archive Node Appliance also includes a data store . Data store may be a computer readable memory used to store computer executable instruction files stored using the network based file system or other data utilized by Archive Node Appliance as will be elaborated on in more detail subsequently. To ensure some degree of redundancy or fault tolerance data store may implemented as Redundant Array of Independent Disks RAID storage having around 5 TB 8 TB of available storage. Archive Node Appliance also comprises a SAS port through which the Archive Node Appliance is coupled to media library via a SAS bus. Media library may be an IBM TS3100 tape library having one or more LTO 5 compliant drives and capable of holding 24 tape cartridges or an IBM TS3200 tape library having one or more LTO 5 compliant drives capable of holding 48 tape cartridges. In other embodiments the media library may include LTO 6 compliant drives or other types of drives.

While it should be noted that Archive Node Appliance may be implemented in substantially in any form factor desired in one embodiment Archive Node Appliance may be based on a rack mount storage format and may for example be contained in a chassis of a 1U 2U or 3U form factor with the data store residing internally to the chassis.

Moving on depicts one embodiment of an architecture for an Archive Node that may be used in instances where relatively greater storage capacity is required such as in for example large data installations or a cloud storage provider. In this embodiment the Archive Node Appliance may comprise one or more Gigabit Ethernet ports . These Gigabit Ethernet ports may be dedicated to providing a user interface or for a systems management interface. The Archive Node Appliance may also comprise one or more Ethernet ports for data connections. These Ethernet ports may be 10BASE T 100BASE TX 1000BASE T 10GBASE LR 10GBASE LW 10GBASE LRM 10GBASE ZR 10GBASE LX4 10BASE CX4 etc. or may be of a mixture of types. In operation these Ethernet ports may be coupled to hosts such that a network based file system may be provided by the Archive Node Appliance and hosts may interface with the Archive Node Appliance using these Ethernet ports to utilize the network based file system for example by storing or retrieving files using the network based file system. As noted above the network based file system may be implemented using a file system implemented in association with user space such as the File system in User space FUSE file system using a kernel based file system such as Ext2 Ext3 Ext4 Next3 etc. or almost any other type of file system desired. Archive Node Appliance also includes a data store .

Data store may be a computer readable memory used to store computer executable instructions files stored using the network based file system or other data utilized by Archive Node Appliance . To ensure redundancy or fault tolerance data store may comprise a mirrored system disk comprising the computer executable instruction and other data utilized by the Archive Node Appliance during operation and Redundant Array of Independent Disks RAID storage coupled to the Archive Node Appliance through SAS port . The RAID storage may be used to store files associated with the network based file system and may have around 9 TB 150 TB of available storage. Archive Node Appliance also comprises fibre channel ports through which the Archive Node Appliance is coupled to media library via a fibre channel switch . These fibre channel ports may be for example 16 8 4 or 2 GB fibre channel ports. Media library may be an IBM TS3500 tape library having one or more LTO 5 compliant drives and capable of holding around 20 000 tapes a media library having one or more LTO 6 compliant drives or a media library supporting other types of tapes that can be formatted according to a tape file system.

Again while it should be noted that Archive Node Appliance may be implemented in substantially in any form factor desired in one embodiment Archive Node Appliance may be based on a rack mount storage format and may for example be contained in a chassis of a 1U 2U or 3U form factor with the data store residing internally to the chassis or portions of the data store such as the RAID storage residing external to the chassis.

Turning now to one embodiment of a functional architecture for an Archive Node is depicted. Archive Node Appliance may provide an operator interface through which the Archive Node Appliance may be configured. Such an operator interface may be provided for example using a network based interface such as a set of web pages or the like. Archive Node Appliance is coupled to tape library comprising a set of LTO 5 LTO 6 or other tape compliant drives some of which may be LTFS or other tape file system formatted tapes. In one embodiment each tape in tape library may be used to store data that is compressed data that is encrypted data that is both compressed and encrypted or data that is neither compressed nor encrypted.

Archive Node Appliance comprises Filesystem in Userspace FUSE module that may presents a file system to a local operating system. A network file system interface module provides access to all or a portion of the FUSE file system as one or more shared volumes e.g. as a hierarchical file system with directories etc. that can be accessed using an interface that operates according to network file system protocol such as NFS CIFS FTP REST etc. Data associated with the shared volumes is stored on one or more partitions of data store a computer readable memory where the structure of the partitions of the data store may or may not correspond to the structure of the shared volumes or to the structure of the file system presented by FUSE module .

Directory operations module is configured to process any directory operations that are received by FUSE module . I O operations module is configured to process any input or output operations involved with the reading or the storing of files associated with the file system presented by the FUSE module . These operations include for example the writing of files to the data store the reading of files from the data store the deletion of files from the data store the reading of files from a tape in the tape library or other operations associated with the data store or tape library .

These I O operations may involve the use of library control module LTFS module LTFS management module and index . The location of each tape within the tape library may be maintained in index e.g. in which slot or drive each tape is located in which library the tape is located if multiple tape libraries are in use etc. . Additionally in one embodiment what type of data is stored on each tape encrypted compressed neither encrypted nor compressed etc. may also be maintained.

Library control module is configured to control the movement of the tapes in the tape library including ejecting the tapes from the drives of the tape library and the movement of tapes to and from slots of the tape library and in and out of drives of the tape library using the robot. LTFS management module is configured to mount or unmount the LTFS file system on a particular tape in a drive of the tape library . LTFS module is configured to perform LTFS operations with respect to an LTFS mounted file system.

Library control module LTFS module LTFS management module and index may also be utilized by file migration module . File migration module is configured to move files from data store to tape library based on policies . File mapping module maintains map which correlates a file visible through the FUSE file system to its corresponding location in the tape library . Specifically a mapping between the location for example the path and name of the file with respect to the FUSE file system the name and location of that file in the data store and the name and location of that file on one or more tapes in the tape library may be maintained in map .

Policies may or may not be user configured and may be associated with storage of the files or the migration of files from the data store to tapes in the tape library . Such policies may specify for example how long to wait before migrating a file referred to herein as a migration timeout period whether the files are to be replicated when migrated e.g. stored in conjunction with multiple Archive Nodes as will be elaborated on in more detail how many copies of the file to keep where the multiple copies are to be kept on different tapes whether the file is to be encrypted or compressed etc. The policies may be defined with respect to the directories presented with respect to the FUSE module such that those policies may be defined with respect to all files within that directory. Policy management module allows these policies to be managed e.g. created updated defined deleted modified etc. by a user or otherwise. Policies can be defined at any level of the directory structure provided by FUSE module . Because a directory presented by FUSE module may be presented as a shared volume by network file system interface module a policy that applies to the directory may also apply to the share.

In operation then Archive Node Appliance may present a network based file system accessible through an interface where the files associated with the network based file system may be stored on the tape library according to a file system structure that substantially mirrors the file system structure of the presented network based file system. In one embodiment mirroring the file system structure of the presented network based file system means that at least a portion of the path of the location of the file as it is stored on the tape library may be substantially similar to the path of the location of the file as it is presented through the file system.

More specifically users at host devices coupled to the Archive Node Appliance may perform directory operations and store or read files using an interface for the network based file system provided by the Archive Node Appliance . In accordance with these user initiated operations commands in the network file system protocol employed by the interface may be received at the Archive Node Appliance and implemented by FUSE module with respect to the partitions of data store . If the command is associated with a directory operation it may be processed by directory operations module . If the command is for the storing of a file the I O operations module may write this file to a location in the data store . Map may be updated to comprise a mapping between the location and name of the file with respect to the FUSE file system and the name and location of that file in the data store .

In one embodiment the file is stored in the data store according to the one or more policies that apply to that file. For example if a policy that applies to the file specifies that the file should be compressed the file may be compressed before the file is stored in the data store . Similarly if an applicable policy specifies that the file is to be encrypted the file may be encrypted before it is stored in the data store . In certain embodiments a self encrypting disk full disk encryption or a RAID controller which performs encryption may be utilized in conjunction with data store such that all files stored in the data store may be encrypted by the disk or controller when the file is stored to the data store . In such cases all files stored to the data store may be encrypted when stored to data store and decrypted when read from data store .

Based on one or more of the policies at some later point a file may be migrated to the tape library . As policies may be defined based on a location associated with the presented file system policies associated with the location e.g. directory share etc. where the file is stored may be determined from policies and the determined policies applied to migrate the file.

As the file may be received over a network errors may occur during the transmission of the file or the storage of the file to the data store. To account for network errors or the like in one embodiment a time period referred to as the migration timeout period is utilized. More specifically when a file is first stored to the data store an amount of time equal to the migration timeout period may be allowed to elapse before the file is migrated. As discussed above such a migration timeout period may be implemented as a policy. Thus for example a policy defining such a migration timeout period may be associated with a share or directory as visible through the network based file system implemented by the Archive Node Appliance.

In any event once a file is selected for migration the one or more policies associated with that file may be utilized to migrate the file accordingly e.g. encrypted compressed neither encrypted nor compressed whether multiple copies of the file are to be maintained if the file is to be replicated etc. .

An appropriate tape on which to store the file may be determined and located using the index . If the appropriate tape is not currently in a drive of the tape library library control module may be utilized to load the appropriate tape into a drive of the tape library . More specifically in most cases when an LTFS tape is formatted it is specified whether the data on that tape is to be compressed or not. Thus the selection of an appropriate tape may include selecting a tape that is formatted according to a policy specified for the file being migrated e.g. a tape formatted to hold compressed data may be selected if a policy specifies the file is to be compressed etc. selecting a tape that has a location associated with a location where the file is to be stored e.g. a directory in the path of the location where the file is to be stored etc. etc. The selection of an appropriate tape may also involve other considerations not expressly enumerated.

The file system on the appropriate tape may be mounted using LTFS management module . File migration module may use LTFS module to copy the file from data store to the appropriate tape at a location on the tape which corresponds to the location of the file as presented through the file system to the host devices coupled to the Archive Node Appliance. After the file is copied to the tape all or a portion of the file may be deleted off of the data store. Accordingly the migration may entail the creation of one or more directories on the mounted LTFS file system on the tape where these directories may mirror the directories in the path where the file is stored that are visible to a user at a host device using the network based file system presented by the Archive Node Appliance . Additionally when the file is copied to the mounted LTFS file system on the appropriate tape actions may be taken to implement policies applicable to the file.

For example if a policy that applies to the file specifies that the file should be compressed the media drive can be instructed to compress the file. In one embodiment the use of LTFS may simplify this compression. Specifically if a file is to be compressed the selection of an appropriate tape formatted to store compressed data may indicate to the LTFS module that data to be stored on the tape is to be compressed. The LTFS module may configure the drive holding that tape to compress data such that when the file is stored to the tape using LTFS module it is compressed as it is stored.

Similarly if an applicable policy specifies that the file is to be encrypted the drive can be instructed to encrypt the file. Encryption of the file being stored may be accomplished by the tape drive in which the appropriate tape is located. Specifically before mounting the LTFS file system on the appropriate tape one or more commands for example SCSI or other types of commands that may or may not include key information to be utilized may be sent to the drive to cause it to use encryption. The LTFS file system can then be mounted on the tape. LTFS can then be used to store the file on the tape while the tape drive handles the encryption of the data transparently to LTFS.

Other embodiments may accomplish compression or encryption of the files in different manners. For example in one embodiment to speed the migration of files Archive Node Appliance may provide hardware support for such encryption or compression. Embodiments of methods and systems for such encryption or compression are discussed in U.S. patent application Ser. No. 12 025 081 entitled System and Method For Enabling Encryption by Robert C. Sims filed on Feb. 4 2008 which is hereby incorporated by reference for all purposes.

Additionally if a policy associated with the file specifies that multiple copies of a file are to be maintained a second tape on which to store the file may be determined and the file migration module may use LTFS module to copy the file from data store to the second tape at a location on the second tape which corresponds to the location of the file as presented through the FUSE file system. Notice here that two separate tapes may have the file stored using an LTFS file system path that mirrors the path of that file as presented through the FUSE file system. Furthermore if a policy associated with the file specifies that the file is to be replicated the file may also be sent to another Archive Node Appliance.

When a command to read a file is received map may be consulted to determine the location of the file e.g. whether it is located in data store on a tape in the tape library or both . If the requested file is completely on the data store I O operations module may respond to the read of the file using the file as stored in the data store . If the file is on a tape and not entirely in the data store the tape on which the file is located may be determined using the map . The index and the library control module can then be utilized to determine if the tape is in a drive and if not to load the appropriate tape into a drive of the tape library . The file system on the tape may be mounted using LTFS management module . I O operations module can then use LTFS module to access the file on the tape and respond to the read of the file.

It will be noted here that certain actions may be taken in association with the read file before the file is used to respond to the read. In particular in certain embodiments actions associated with one or more policies applicable to the file may be performed. For example if a policy that applies to the file specifies that the file should be compressed the file may be decompressed as the file is read from the tape and before the file is used to respond to the read of the file. In one embodiment the use of LTFS may simplify this decompression. Specifically the tape on which the file is stored may be formatted to store compressed data. The presence of this type of tape in the drive may indicate to the LTFS module that data stored on the tape is compressed. The LTFS module may thus configure the drive holding that tape such that when the file is read from the tape using LTFS module it is decompressed.

Similarly if an applicable policy specifies that the file is to be encrypted the file may be decrypted before the file is used to respond to the read of the file. As LTFS may not support encryption in one embodiment decryption of the file being stored may be accomplished by the tape drive in which the appropriate tape is located. Specifically before mounting the LTFS file system on the tape on which the file is stored one or more commands for example SCSI or other types of commands that may or may not include key information to be utilized may be sent to the drive to cause it to decrypt the file. The LTFS file system can then be mounted on the tape. LTFS can then be used to read the file while the tape drive handles the decryption of the data transparently to LTFS. The file is then used to respond to the read of the file.

In many cases however if the file is located on tape it may take a relatively long amount of time to access the file. This situation may be exacerbated if for example the file system on the tape is not currently mounted the tape itself is not currently in a drive of the tape library the tape is currently positioned at a location far away from the location where the file is located etc. These conditions can result in an access time for a file on tape that is on the order of minutes.

Many network based file system protocols have timeout conditions. For example in the CIFS protocol an OPEN or a READ command must be responded to within 30 seconds or a timeout condition will occur. The timeout condition may be dependent on the type of network file systems used. In some cases the timeout period is negotiated between a host and file system. Thus the Archive Node Appliance can be configured to negotiate the timeout time with hosts. The timeout time can be set in a configuration setting for Archive Node Appliance . As a result the time period for responding to such a command may be less than that needed to access the file on the tape. In order to present network based file systems based on these types of protocols such conditions may need to be addressed.

To that end in some embodiments read cache may be maintained on data store . Read cache may comprise the first portion of each file stored using the network based file system presented by the Archive Node Appliance . The portion of the file in read cache acts as a stub file which can be presented by the FUSE file system for example as being the full file while some of the data of the corresponding full file is not in the data store but is stored on tape. When a file is read then if any portion of the file is to be read from tape the first portion of the read file that is stored as the stub file may be used to respond to the read request while the file on the tape is located and read substantially simultaneously. Since the first portion of the file is stored in the read cache on the data store it can be accessed quickly enough that a timeout on commands can be avoided while the file on the tape is accessed. The remainder of the file can then be read from the tape and used to respond to the commands.

The size of the first portion of each file may be user configurable based on system parameters or defined in some other manner. In one embodiment the read cache size may be based on directories provided by the FUSE module so that all the files within the directory are a particular size. If the directory is presented as a share the policy thus applies to files within the share. In another embodiment the size retained on read cache may be dependent upon the size of blocks that may be read in a single operation via the network file system the set time for a timeout and the time required to load mount and position a tape with the requested file.

When a host device wishes to read a file it may send OPEN and READ commands to the Archive Node Appliance . I O operations module may determine if the requested file is completely in the data store using map . If so I O operations module may respond to the read of the file using the file in the data store .

If however the file is only on a tape the tape on which the file is located may be determined using the map . The I O operations module can then initiate the load and access of the file on the tape using the library control module and the LTFS management module . I O operations module delays the response to the initial OPEN command for a time period less than the timeout associated with the received command. In some embodiments this time period may be the longest time period that does not result in a timeout occurring e.g. 20 seconds 29 seconds etc. .

The host device may subsequently send a READ command for a certain amount e.g. 64K or a different amount of the file to the Archive Node Appliance . I O operations module can delay the response to this READ command as long as possible without a timeout resulting e.g. 20 second 29 seconds or other time period . After the delay the I O operation module will respond to the command with the data requested from the stub file. The I O operations module may continue to delay responses to subsequent READ commands and utilize data from the read cache to respond to the READ commands until data from the first portion is exhausted or the LTFS file system on the appropriate tape is mounted and the file on the tape can be accessed using LTFS module. The I O operations module may continue to delay responses and dynamically switch between delaying responses and not delaying responses as needed.

In addition to delaying responses Archive Node Appliance can return less data than requested by the host. For example Archive Node Appliance may return 1K instead of the requested 64K. Whether Archive Node Appliance returns less data than the amount requested may depend on the network file system protocol host operating system or other factors. Returning less data than requested provides the advantage that the read cache can be smaller.

When the appropriate tape is loaded I O operations module may then use LTFS module to access the file on the tape and respond to subsequent READ commands for the file. More specifically in one embodiment I O operations module may utilize LTFS module to access the file on the appropriate tape and read the file from the tape into buffer . Subsequent READ commands for the file may be responded to using the data in the buffer .

Furthermore in some embodiments in addition to reading the file into buffer the file may also be read into a file cache on the data store. File cache may be an area on data store utilized for temporary storage of files and may be managed according to almost any cache management technique desired. In certain cases if a host does not request data of the file at a particular rate e.g. does not issue READ commands frequently enough or the READ commands do not request a certain amount of data etc. after a certain number of READ commands I O operations module may respond to subsequent READ commands for the file using data of the file from the file cache.

In certain embodiments the opposite may also occur. More specifically in some instances the reading of file data to the file cache in addition to reading the file into buffer may slow the response to requests for data from the host. In this case reading the file data into both buffer and file cache may mean that data cannot be delivered at the rate the user is requesting the data or may otherwise slow the response to user requests. Here the reading of the data of the file into the file cache may be stopped before the entire file is in the file cache such that requests for the file may be serviced more quickly. Thus the portion of the file that is in file cache may comprise none some or all of a file.

In one embodiment the file may be stored in the file cache by appending any portions of the file which are read from the tape to the first portion of the file in the read cache if such a first portion of the read file exists in read cache . Thus if the first portion exists in the read cache when any portion of the file not comprised by first portion in the read cache is read from the tape it may be appended to the first portion already stored in the read cache . The entire file may be stored in the file cache when the file is read. At a later point if portions of the file are deleted from the file cache the first portion of the file may be left on the data store such that the first portion of the file is in read cache .

As discussed above stub files in read cache can be used to prevent time out errors. Read cache can be populated when the files are stored to the media library. A network file system interface client may request to store a file which may comprise multiple commands in a file system protocol where the file may be associated with a name and a path as visible through the network based file system implemented by the Archive Node Appliance. The file can be stored on a location on data store where the file may have a different name and be located at a path associated with the data store. When the file is written to a location on a tape the file data other than the first portion can be deleted from data store leaving the stub file. The data in the read cache may be stored in a manner corresponding to the format in which the file is stored on the tape. Thus for example if the file is compressed when it is migrated to tape the read cache may comprise the first portion of the file in compressed format.

To ensure the integrity of stub files hash codes for each stub file can be maintained stub file hash codes and backed up. In one embodiment a hash code for a stub file is calculated and stored when a stub file is created. Each time a stub file is accessed a hash code is generated for the stub file and the generated hash code compared to the stored hash code for the stub file. A difference between the hash codes may indicate corruption of the stub file that the RAID system is reading the wrong sector or is otherwise performing incorrectly and error processing can occur.

Stub files in read cache may be deleted become corrupted or otherwise become inaccessible. In a large scale fault for example the entire read cache may be lost e.g. due loss of a RAID set or other failure . Rather than restoring the entire read cache at once which would require high resource utilization and a large backup capacity read cache may be repopulated as files are accessed by clients through the network file system interface.

Accordingly when a file is read by a network file system interface client and the first portion of the read file is not in read cache the file may be read from tape and used to respond to the read. The file data read from tape may be used to repopulate the read cache by storing the first portion of the file into the read cache at that time embodiments of which will be discussed in more detail below . Furthermore file data from the tape can be read into file cache so that the entire file is on data store as discussed above. Thus at a later point if portions of the file are deleted from file cache the first portion of the file may be left on the data store such that the first portion of the file is in read cache .

It may be useful to discuss embodiments of the storage of configuration such as mapping data index data policies file meta data tape library data etc. that may be utilized by an Archive Node Appliance. Embodiments of such storage methods and formats may be used for example to store the map index and policies as discussed above. Preferably mapping data index data policies file meta data tape library data etc. are stored on a separate physical storage media from read cache so that if the storage media that stores read cache becomes corrupted or inoperable the mapping data index data policies file meta data tape library data etc. are still available. Thus for example mapping data index data policies file meta data tape library data etc. can be stored on separate RAID sets from read cache .

Furthermore all or a portion of data store may be backed up to internal backup storage e.g. an internal SSD or external back up storage e.g. to network attached storage a direct attached storage array or otherwise . In one embodiment in order to reduce backup storage requirements read cache is not backed up. In another embodiment stub files from read cache corresponding to the most frequently accessed files or stub files for files meeting other criteria can be backed up while the remainder of read cache is not.

Turning first to one embodiment of a table schema for the storage of data relating to files and directories is depicted. In this schema there is a node table a storage location table a storage media table a disk table a storage type table a location statuses table a Disk to Tape File System used to refer to embodiments of an implementation of a file system using an Archive Node also known by the acronym DTFS settings table DTFS users table DTFS groups table tape drives table tapes table and storage method types table .

Storage locations table may comprise information on locations where data can be stored in conjunction with an Archive Node and thus entries in the storage location table may be linked to entries in the storage media table . Entries in storage media may in turn be linked to entries in the disk table that are associated with a data store of the Archive Node and entries in tapes table that are associated with tapes in the tape library of the Archive Node. Entries in storage locations table may also be linked to entries in tape drives table that are associated with drives in the tape library of the Archive Node. Entries in the storage location table may also be associated with a state and a status as represented by entries in the location states table or the location statuses table .

Nodes table comprises entries which are associated with a file or a directory as presented by the FUSE file system. In general the top level directory used by a FUSE file system of an archive node appliance can be a universally unique identifier UUID associated with the archive node appliance. Examples of such an identifier include but are not limited to a serial number a software license number or other unique identifier. The use of a UUID as the top level directory by archive node appliances ensures that path names to files stored by that archive node appliance will not conflict with the path names used at a second archive node appliance if the tape if transferred to the second archive node appliance. For an implementation that stores hash codes for stub files the stub file hash codes may be stored as part of node table or elsewhere.

Entries in the node table are linked with entries in the DTFS users table where these entries may represent users of the DTFS file system which may be defined by an administrator based on the network based file system implemented by the Archive Node etc. . Each of the entries in node table may also be linked with entries in the storage location table such that a link between an entry in the node table associated with a file or directory may be linked with one or more entries in the storage location table associated with a disk or tape where that file or directory is stored.

In the case in which an archive node appliance is part of a Windows Active Directory domain active directory does not use Unix like user IDS and group IDs to identify users. Active directory uses strings referred to as security identifiers SID for this purpose. Accordingly the DTFS user table and DTFS groups table may include an entry for a user group SID that links the SID to the DTFS user id and if applicable to the appropriate Unix user ID UID and group ID GID .

Moving now to one embodiment of a table schema for the storage of data relating to tapes and tape libraries of an Archive Node is depicted. In this schema there is a tapes table tape locations table libraries table tape statuses table tape types table library statuses table library states table tape location types table mailbox table slot table tape sessions table tape micro sessions table tape drive types table tape drives table tape drive affinities table tape drive statues table and tape drive states table .

Entries in tapes table may be associated with an entry in tape locations table associated with a location of tape in a tape library for example a slot drive etc. . Each of the entries in tape location table may be associated with an entry in slot table associated with a slot in a tape library or an entry in tape drives table associated with a drive in the tape library. Furthermore entries in tape locations table and tapes table are linked with an entry in libraries table associated with a tape library of the Archive Node of which there may be one or more as discussed above . In this manner an entry in tapes table associated with a tape can be associated with an entry in library table slot table or tape drive table associated with the location of that tape.

Entries in tape drive table may be also linked to an entry in tape drive types table associated with a type of the drive or an entry in tape drive statuses table or tape drive states table associated with a statuses or state of a tape drive. Entries in tapes table may also be linked to entries in tape status table and tape types table associated with a type or a status of a tape.

Turning to one embodiment of a table schema for the storage of data relating to policies applicable to directories in an Archive Node is depicted. In this schema there is nodes table directory policies table policies table policy types table policy values table and policy arguments table . Entries in directory policies table may be associated with polices to be applied to directories and thus to files stored in those directories . Entries in directory policies table may be linked to entries in node table associated with a directory. In this manner entries in directory policies table associated with policies to be applied to directories may be linked to entries in nodes table associated with a directory against which that policy is to be applied. It will be noted that a similar schema could be utilized to associate file policies with files share policies with shares etc.

Entries in directory policies table may also be linked to an entry in policies table that may be associated with a particular policy. Entries in policies table may in turn be linked with an entry in policy types table that is associated with a type of policy for example encryption or compression policy number of copies to keep replication etc. . Thus an entry in policies table associated with a particular policy may be linked with an entry in policy type table associated with the type of that policy.

From a review of the above it will be apparent that embodiments of such Archive Nodes may provide a highly effective manner of implementing a network based file system using a tape library. In some instances however it may be desired to provide a high level of availability or increased performance in conjunction with network based file systems. As such in certain embodiments Archive Node Appliances may be clustered to provide increased performance or a higher degree of fault tolerance as described for example in U.S. patent application Ser. No. 13 109 192 entitled System and Method for Implementing a Networked File System Utilizing a Media Library filed May 17 2011 which is hereby fully incorporated by reference herein.

Referring now to a method for storing a file using an embodiment of an Archive Node including an Archive Node Appliance is depicted. At step a request which may comprise multiple commands in a file system protocol to store a file may be received at the Archive Node Appliance where the file may be associated with a name and a path as visible through the network based file system implemented by the Archive Node Appliance. For example the path of the file may be path patient records and the file name may be Patient1.doc. The file is then stored on a location on the data store of the Archive Node Appliance at step where the file may have a different name and be located at a path associated with the data store. For example the path of the file as stored on the data store may be data3 and the file name may be 550e8400 e29b 41d4 a716 446655440000.

In one embodiment as discussed above the file is stored in the data store according to one or more policies that apply to that file. For example if a policy that applies to the file for example the policy is associated with the location associated with the network based file system where the file is stored specifies that the file should be compressed the file may be compressed before the file is stored in the data store. Similarly if an applicable policy specifies that the file is to be encrypted the file may be encrypted before it is stored in the data store.

The map can then be updated at step to associate the name and the path of the file as visible through the network based file system with the path and name of the file as stored on the data store. Thus in this example the path patient records and file name Patient1.doc as visible through the network based file system is associated with the path data3 and file name 550e8400 e29b 41d4 a716 446655440000 associated with the file as stored in the data store.

Subsequently one or more policies to be applied to the file can be determined at step . The policies may be applied in conjunction with the migration of the file at step . As discussed above in one embodiment one policy may specify that a migration timeout period is to be applied to the file before the file is migrated. This migration timeout period may specify a time period such that an amount of time equal to the migration timeout period may be allowed to elapse before the file is migrated. Thus if such a policy exists the migration timeout period may be allowed to elapse before the file is migrated.

To migrate the file one or more tapes on which to store the file may be determined. This determination may be based on the policies that have been determined to apply to that file. For example the number of tapes determined may be based on a policy specifying that the file is to be maintained on multiple tapes. If so two different tapes on which to store the file may be determined. If a policy to apply to the file specifies that the file is to be encrypted a tape comprising encrypted data may be selected. Similarly if a policy to apply to the file specifies that the file is to be compressed a tape comprising compressed data may be selected. Assume for purposes of example that the tape on which it is determined to store the file has a TapeID of AN02394.

Each of the tapes on which it is determined to store the file can then be loaded into a drive if it is not already in a drive and the LTFS file system mounted. Specifically the tape may be located using the index that maintains the location of each of the tapes in the library and loaded into a drive. The file can then be copied from its location on the data store to a location on the tape. In one embodiment a path that corresponds to the path of the file as visible through the network based file system may be created on the tape using the LTFS file system if it does not already exist. The file can then be saved using the name that corresponds to the name of the file as visible through the network based file system. Continuing with the above example the path patient records may be created on the tape having TapeID AN02394 if it does not exist and the file may be saved as Patient1.doc on this tape.

In one embodiment before or during the copying of the file to the mounted LTFS file system on the tape actions may be taken to implement policies applicable to the file. For example if a policy specifies that the file is to be replicated it may be sent to another Archive Node Appliance or if a policy that applies to the file specifies that the file should be compressed the Archive Node Appliance can cause the file to be stored on a compressed tape. Similarly if an applicable policy specifies that the file is to be encrypted the Archive Node Appliance can cause the file to be stored on an encrypted tape.

The map can then be updated at step to associate the tape on which the file is stored the name and the path of the file as visible through the network based file system the path and name of the file as stored in the data store and the path and name of the file as stored on the tape. Thus in this example the path patient records and file name Patient1.doc as visible through the network based file system is associated with TapeID AN02394 the path data3 and the file name 550e8400 e29b 41d4 a716 446655440000 associated with the file as stored in the data store.

At step the file or portions thereof may be deleted from the data store. In some embodiments as it is desired to maintain the first portion of a file in a read cache in the data store all portions of the file except this first portion may be deleted from the data store. It will be noted therefore that in certain embodiments the path and name of the file in the map that is associated with the file as stored in the data store may describe the location of the first portion of the file stored in the read cache. The steps of can be repeated as needed or desired.

Turning now to providing a file to a network file system interface client an Archive Node Appliance may respond to read requests from a client using data from a stub file until the tape containing the file is mounted and data can be provided from the tape. However in some cases the read cache may be lost due to corruption loss of a RAID set or the like. Therefore in order to maintain the advantages of the stub files the Archive Node Appliance may restore the read cache.

A stub file can be restored to the same directory location at which the stub file was located prior to loss of the read cache. Thus for example if the stub file for patient records Patient1.doc was stored at data3 550e8400 e29b 41d4 a716 446655440000 prior to loss of the read cache the stub file can be restored to location data3 550e8400 e29b 41d4 a716 446655440000 which may be on a new hard drive . In other cases the stub file may be restored to a new directory location. The map can be updated to associate path patient records and file name Patient1.doc with the new location in the data store.

Ad hoc restoration of stub files can be integrated with replying to read requests from network file system interface clients. depicts one embodiment of a method for reading a file using an embodiment of an Archive Node appliance. At step a request to read a file may be received. This request may comprise multiple commands in a file system protocol as discussed above. The location of the file can be determined at step where the file may be located in the data store of the Archive Node Appliance on a tape in the tape library or both. If the requested file is completely on the data store e.g. as determined at step the read and subsequent requests may be responded to using the file as stored in the data store step . The file may be completely on the data store for a variety of reasons for example the file has been stored on the data store but a migration timeout period associated with the file has not yet expired and thus the file has not yet been migrated the file has been migrated but has not been deleted the file was previously migrated but was subsequently read and placed in the file cache on the data store etc.

If the file is not completely in the data store the tape on which the file is located may be determined at step . The movement of the tape into a drive if needed and the mounting of the file system on the tape may be initiated at step . Further it can be determined if the first portion of the file e.g. the stub file is in the read cache at step . If the first portion is in the read cache it may be used to respond to the initial requests for file data at step and some number of subsequent requests until the proper tape volume is mounted see e.g. step . As described in U.S. patent application Ser. No. 13 267 665 entitled System Method and Computer Program Product for Trickling Data to a Host filed Oct. 6 2011 which is hereby fully incorporated by reference herein data may be trickled from the read cache to a client to allow the tape time to load.

Prior to responding to the read request a hash code can be generated for the stub file and compared to a stored hash code for that stub file. If the generated and stored hash codes for the stub file do not match an error can be generated or other action taken. If the generated and stored hash codes do match the stub file may be used to respond to the read request.

When the file system on the tape is mounted the file on the tape may be read and used to respond to subsequent requests for file data at step . When responding to the requests for file data using the file on the tape the file may be read into a buffer and data from the buffer used to respond to requests. In addition data from the buffer may be transferred to the data store step so that for example the entire file can be stored in the data store.

If the Archive Node Appliance is responding to requests for file data from the tape but the client is requesting data at an insufficient rate to maintain tape streaming the Archive Node Appliance may switch to using data from the file cache to respond to requests from the client for the file data while still streaming data to the buffer in order to populate the file cache. Thus with respect to network file system interface clients the Archive Node Appliance may switch from providing file data from the data store to providing the file data from the tape as needed.

Returning to step if there is no stub file in the data store when a file is requested by the network file system interface client the Archive Node Appliance can wait for the volume containing the requested file to be mounted step . If the requesting host does not time out the file data may be read from tape and used to respond to the requests for file data at step . Furthermore the file data can be stored in the data store step to populate the read cache and file cache. If the client requests file data at an insufficient rate to maintain tape streaming the Archive Node Appliance may switch to using data from the data store to respond to requests for the file data while still continuing to populate the data store with file data from the media.

There is some chance that a requesting client will timeout e.g. as determined at decision block before a tape volume can be mounted and data provided to the client. In such a case the Archive Node Appliance can still mount the volume so that tape data can be read into the data store step . Enough tape data can be read and stored in the data store to populate the read cache with a stub file corresponding to the requested file. The Archive Node Appliance may continue to populate the data store with data read from the media until the entire file is stored in the data store. At a later time a portion of the file data can be deleted from the data store leaving the stub file.

Thus stub files can be recovered on an ad hoc basis by populating the stub file when the corresponding file is requested by a network file system interface client. In such an implementation resources are conserved because only the stub files for files that are needed are recovered.

In addition to storing the stub file a hash code for the stub file can be generated and stored for the stub file. This can be done once there is sufficient data in the data store to form the stub file or after the entire file is stored in the read cache.

Although the invention has been described with respect to specific embodiments thereof these embodiments are merely illustrative and not restrictive of the invention. The description herein of illustrated embodiments including the description in the Abstract and Summary is not intended to be exhaustive or to limit the invention to the precise forms disclosed herein and in particular the inclusion of any particular embodiment feature or function within the Abstract or Summary is not intended to limit the scope to such embodiment feature or function . Rather the description is intended to describe illustrative embodiments features and functions in order to provide a person of ordinary skill in the art context without limiting the invention to any particularly described embodiment feature or function including any such embodiment feature or function described in the Abstract or Summary. While specific embodiments and examples are described herein for illustrative purposes only various equivalent modifications are possible within the spirit and scope of this disclosure as those skilled in the relevant art will recognize and appreciate. As indicated these modifications may be made in light of the foregoing description of illustrated embodiments and are to be included within the spirit and scope of the invention. Thus while the invention has been described herein with reference to particular embodiments thereof a latitude of modification various changes and substitutions are intended in the foregoing disclosures and it will be appreciated that in some instances some features of embodiments of the invention will be employed without a corresponding use of other features without departing from the scope and spirit of the invention as set forth. Therefore many modifications may be made to adapt a particular situation or material to the essential scope and spirit of the invention.

Reference throughout this specification to one embodiment an embodiment or a specific embodiment or similar terminology means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment and may not necessarily be present in all embodiments. Thus respective appearances of the phrases in one embodiment in an embodiment or in a specific embodiment or similar terminology in various places throughout this specification are not necessarily referring to the same embodiment. Furthermore the particular features structures or characteristics of any particular embodiment may be combined in any suitable manner with one or more other embodiments. It is to be understood that other variations and modifications of the embodiments described and illustrated herein are possible in light of the teachings herein and are to be considered as part of the spirit and scope of the invention.

In the description herein numerous specific details are provided such as examples of components and or methods to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that an embodiment may be able to be practiced without one or more of the specific details or with other apparatus systems assemblies methods components materials parts and or the like. In other instances well known structures components systems materials or operations are not specifically shown or described in detail to avoid obscuring aspects of embodiments of the invention. While the invention may be illustrated by using a particular embodiment this is not and does not limit the invention to any particular embodiment and a person of ordinary skill in the art will recognize that additional embodiments are readily understandable and are a part of this invention.

Any suitable programming language can be used to implement the routines methods or programs of embodiments of the invention described herein including C C Java assembly language etc. Different programming techniques can be employed such as procedural or object oriented. Any particular routine can execute on a single computer processing device or multiple computer processing devices a single computer processor or multiple computer processors. Data may be stored in a single storage medium or distributed through multiple storage mediums and may reside in a single database or multiple databases or other data storage techniques . Although the steps operations or computations may be presented in a specific order this order may be changed in different embodiments. In some embodiments to the extent multiple steps are shown as sequential in this specification some combination of such steps in alternative embodiments may be performed at the same time. The sequence of operations described herein can be interrupted suspended or otherwise controlled by another process such as an operating system kernel etc. The routines can operate in an operating system environment or as stand alone routines. Functions routines methods steps and operations described herein can be performed in hardware software firmware or any combination thereof.

Embodiments described herein can be implemented in the form of control logic in software or hardware or a combination of both. The control logic may be stored in an information storage medium such as a computer readable medium as a plurality of instructions adapted to direct an information processing device to perform a set of steps disclosed in the various embodiments. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the invention.

It is also within the spirit and scope of the invention to implement in software programming or of the steps operations methods routines or portions thereof described herein where such software programming or code can be stored in a computer readable medium and can be operated on by a processor to permit a computer to perform any of the steps operations methods routines or portions thereof described herein. The invention may be implemented by using software programming or code in one or more general purpose digital computers by using application specific integrated circuits programmable logic devices field programmable gate arrays optical chemical biological quantum or nanoengineered systems components and mechanisms may be used. In general the functions of the invention can be achieved by any means as is known in the art. For example distributed or networked systems components and circuits can be used. In another example communication or transfer or otherwise moving from one place to another of data may be wired wireless or by any other means.

A computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus system or device. The computer readable medium can be by way of example only but not by limitation an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus system device propagation medium or computer memory. Such computer readable medium shall generally be machine readable and include software programming or code that can be human readable e.g. source code or machine readable e.g. object code .

A processor includes any hardware system mechanism or component that processes data signals or other information. A processor can include a system with a general purpose central processing unit multiple processing units dedicated circuitry for achieving functionality or other systems. Processing need not be limited to a geographic location or have temporal limitations. For example a processor can perform its functions in real time offline in a batch mode etc. Portions of processing can be performed at different times and at different locations by different or the same processing systems.

It will also be appreciated that one or more of the elements depicted in the drawings figures can also be implemented in a more separated or integrated manner or even removed or rendered as inoperable in certain cases as is useful in accordance with a particular application. Additionally any signal arrows in the drawings figures should be considered only as exemplary and not limiting unless otherwise specifically noted.

Furthermore the term or as used herein is generally intended to mean and or unless otherwise indicated. As used herein including the claims that follow a term preceded by a or an and the when antecedent basis is a or an includes both singular and plural of such term unless clearly indicated within the claim otherwise i.e. that the reference a or an clearly indicates only the singular or only the plural . Also as used in the description herein and throughout the claims that follow the meaning of in includes in and on unless the context clearly dictates otherwise.

Benefits other advantages and solutions to problems have been described above with regard to specific embodiments. However the benefits advantages solutions to problems and any component s that may cause any benefit advantage or solution to occur or become more pronounced are not to be construed as a critical required or essential feature or component of any or all the claims.

