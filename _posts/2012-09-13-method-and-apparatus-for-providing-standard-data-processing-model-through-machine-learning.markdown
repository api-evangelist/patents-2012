---

title: Method and apparatus for providing standard data processing model through machine learning
abstract: An approach for providing a standard data processing model through machine learning is described. A machine learning data processing platform may process and/or facilitate a processing of the at least one data set associated with one or more computation closures to determine at least one data pattern. The machine learning data processing platform may also determine one or more data processing models associated with the one or more computation closures, the at least one data set, or a combination thereof. The machine learning data processing platform may further cause, at least in part, a training of the one or more data processing models to reflect the at least one data pattern.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09324033&OS=09324033&RS=09324033
owner: Nokia Technologies Oy
number: 09324033
owner_city: Espoo
owner_country: FI
publication_date: 20120913
---
Service providers and device manufacturers e.g. wireless cellular etc. are continually challenged to deliver value and convenience to consumers by for example providing compelling network services. These services are leading to vast amounts of data structured and binary which need to be managed stored searched analyzed etc. Over the last decade the internet services have accumulated data in the range of exabytes 10bytes . Although most of this data is not structured in nature however it must be stored searched and analyzed appropriately before any real time information can be drawn from it for providing services to the users.

In order to perform analytics on data and gain insight into the data the data has to be put into the analytics engine through various ingestion schemes. The data is typically received in an unstructured format at the time it is ingested. Then it needs to be cleansed structured and validated into a format conductive for analysis. In order to cleanse the data and make it available for analytics the data is required to go through a pipeline of disparate systems. Almost everyone in the industry spends a fair amount of time providing custom work to create a pipeline through disparate systems for each data source that is brought in. Getting the data ready for analysis is very time consuming and labor intensive work. Typically developers write various custom map reduce programs to cleanse the data. However if the data could be reflected in terms of some standard data models and cleansing processes then it would be possible to create a standard pipeline and greatly streamline the ETL Extraction Transformation Load process which is mostly the biggest obstacle and time consuming area of analytics. Standard data models are very hard to figure out because schematics of the data changes continuously because data and usage of that data changes continuously in the device.

Therefore there is a need for an approach for providing a standard data processing model through machine learning.

According to one embodiment a method comprises processing and or facilitating a processing of the at least one data set associated with one or more computation closures to determine at least one data pattern. The method also comprises determining one or more data processing models associated with the one or more computation closures the at least one data set or a combination thereof. The method further comprises causing at least in part a training of the one or more data processing models to reflect the at least one data pattern.

According to another embodiment an apparatus comprises at least one processor and at least one memory including computer program code for one or more computer programs the at least one memory and the computer program code configured to with the at least one processor cause at least in part the apparatus to process and or facilitate a processing of the at least one data set associated with one or more computation closures to determine at least one data pattern. The apparatus is also caused to determine one or more data processing models associated with the one or more computation closures the at least one data set or a combination thereof. The apparatus is further caused to cause at least in part a training of the one or more data processing models to reflect the at least one data pattern.

According to another embodiment a computer readable storage medium carries one or more sequences of one or more instructions which when executed by one or more processors cause at least in part an apparatus to process and or facilitate a processing of the at least one data set associated with one or more computation closures to determine at least one data pattern. The apparatus is also caused to determine one or more data processing models associated with the one or more computation closures the at least one data set or a combination thereof. The apparatus is further caused to cause at least in part a training of the one or more data processing models to reflect the at least one data pattern.

According to another embodiment an apparatus comprises means for processing and or facilitating a processing of the at least one data set associated with one or more computation closures to determine at least one data pattern. The apparatus also comprises means for determining one or more data processing models associated with the one or more computation closures the at least one data set or a combination thereof. The apparatus further comprises means for causing at least in part a training of the one or more data processing models to reflect the at least one data pattern.

In addition for various example embodiments of the invention the following is applicable a method comprising facilitating a processing of and or processing 1 data and or 2 information and or 3 at least one signal the 1 data and or 2 information and or 3 at least one signal based at least in part on or derived at least in part from any one or any combination of methods or processes disclosed in this application as relevant to any embodiment of the invention.

For various example embodiments of the invention the following is also applicable a method comprising facilitating access to at least one interface configured to allow access to at least one service the at least one service configured to perform any one or any combination of network or service provider methods or processes disclosed in this application.

For various example embodiments of the invention the following is also applicable a method comprising facilitating creating and or facilitating modifying 1 at least one device user interface element and or 2 at least one device user interface functionality the 1 at least one device user interface element and or 2 at least one device user interface functionality based at least in part on data and or information resulting from one or any combination of methods or processes disclosed in this application as relevant to any embodiment of the invention and or at least one signal resulting from one or any combination of methods or processes disclosed in this application as relevant to any embodiment of the invention.

For various example embodiments of the invention the following is also applicable a method comprising creating and or modifying 1 at least one device user interface element and or 2 at least one device user interface functionality the 1 at least one device user interface element and or 2 at least one device user interface functionality based at least in part on data and or information resulting from one or any combination of methods or processes disclosed in this application as relevant to any embodiment of the invention and or at least one signal resulting from one or any combination of methods or processes disclosed in this application as relevant to any embodiment of the invention.

In various example embodiments the methods or processes can be accomplished on the service provider side or on the mobile device side or in any shared way between service provider and mobile device with actions being performed on both sides.

For various example embodiments the following is applicable An apparatus comprising means for performing the method of any of originally filed claims and .

Still other aspects features and advantages of the invention are readily apparent from the following detailed description simply by illustrating a number of particular embodiments and implementations including the best mode contemplated for carrying out the invention. The invention is also capable of other and different embodiments and its several details can be modified in various obvious respects all without departing from the spirit and scope of the invention. Accordingly the drawings and description are to be regarded as illustrative in nature and not as restrictive.

Examples of a method apparatus and computer program for providing a standard data processing model through machine learning are disclosed. In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the embodiments of the invention. It is apparent however to one skilled in the art that the embodiments of the invention may be practiced without these specific details or with an equivalent arrangement. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the embodiments of the invention.

As used herein the term Extract Transform Load ETL refers to a process that is used to take information from one or more sources normalize it in some way to some convenient schema and then insert it into some other repository. A common use of ETL process is for data warehousing where regular updates from one or more systems are merged and refined so that analysis can be done using more specialized tools. Typically the same process is run over and over as new data appears in the source application s . Furthermore the term ETL pipeline refers to a set of data processing elements associated with the ETL process and connected in series so that the output of one element is the input of the next element. Although various embodiments are described with respect to ETL it is contemplated that the approach described herein may be used with other processes methods and tools for data integration and data cleansing.

As used herein the term cloud refers to an aggregated set of information and computational closures from different sources. This multi sourcing is very flexible since it accounts and relies on the observation that the same piece of information or computation can come from different sources. In one embodiment information and computations within the cloud are represented using Semantic Web standards such as Resource Description Framework RDF RDF Schema RDFS OWL Web Ontology Language FOAF Friend of a Friend ontology rule sets in Rule ML Rule Markup Language etc. Furthermore as used herein RDF refers to a family of World Wide Web Consortium W3C specifications originally designed as a metadata data model. It has come to be used as a general method for conceptual description or modeling of information and computations that is implemented in web resources using a variety of syntax formats. Although various embodiments are described with respect to clouds it is contemplated that the approach described herein may be used with other structures and conceptual description methods used to create distributed models of information and computations.

As used herein the term computation closure identifies a particular computation procedure together with relations and communications among various processes including passing arguments sharing process results selecting results provided from computation of alternative inputs flow of data and process results etc. The computation closures e.g. a granular reflective set of instructions data and or related execution context or state provide the capability of slicing of computations for processes and transmitting the computation slices between devices infrastructures and clouds.

As used herein the term ontology refers to a set of representational primitives with which to model a domain of knowledge. The representational primitives are typically classes or sets attributes or properties and relationships or relations among class members . The representational primitives include information about meaning and constrains on logically consistent application. Ontology is a defined schema for specifying the various contextual and semantic controls structures rules and mechanisms for supporting distributed computing and or deployed software agent processing within the information space. A common ontology among devices is necessary for supporting data exchange and application processing to occur within a shared or distributed computing environment accessible to multiple different users.

As used herein the term data pattern refers to a type of software data patterns including structural pattern a behavioral pattern a concurrency pattern a creational pattern etc. The structural pattern may include an adapter pattern aggregate pattern bridge pattern composite pattern decorator pattern extensibility pattern facade pattern flyweight pattern pipes and filters private class data pattern proxy pattern etc. The behavioral pattern may include a chain of responsibility pattern command pattern hierarchical visitor pattern interpreter pattern iterator pattern mediator pattern memento pattern null object pattern observer pattern etc. The concurrency pattern may include an active object balking pattern double checked locking pattern guarded suspension leaders followers pattern monitor object reactor pattern read write lock pattern scheduler pattern thread pool pattern thread specific storage etc. The creation pattern may include an abstract factory pattern builder pattern factory method pattern prototype pattern singleton pattern etc.

In order to perform analytics on data and gain insight into the data the data has to be put into the analytics engine through various ingestion schemes. The data is typically received in an unstructured format at the time it is ingested. Then it needs to be cleansed structured and validated into a format conductive for analysis. In order to cleanse the data and make it available for analytics the data is required to go through a pipeline of disparate systems. Almost everyone in the industry spends a fair amount of time providing custom work to create a pipeline through disparate systems for each data source that is brought in. Getting the data ready for analysis is very time consuming and labor intensive work. Typically developers write various custom map reduce programs to cleanse the data. However if the data could be reflected in terms of some standard data models and cleansing processes then it would be possible to create a standard pipeline and greatly streamline the ETL Extract Transform Load process which is mostly the biggest obstacle and time consuming area of analytics. Standard data models are very hard to figure out because schematics of the data changes continuously because data and usage of that data changes continuously in the device.

To address this problem a system of introduces the capability to provide a standard data processing model through machine learning. The standard data model can be made through machine learning by sharing the data between the applications and can be used for the standard analytics pipeline. Machine learning can be related to making computers to modify or adapt their actions so that these actions get more accurate where accuracy is measured by how well the chosen actions reflect the correct ones. A model which can predicts the data model schematic more accurately can be created based on the data shared between the applications on the device. In turn this standard data model can be used for creating a more accurate ETL Extraction Transformation Load pipeline.

As shown in the system can comprise user equipment UEs collectively UE having connectivity to the machine learning data processing platform via a communication network . By way of example the communication network of system includes one or more networks such as a data network a wireless network a telephony network or any combination thereof. It is contemplated that the data network may be any local area network LAN metropolitan area network MAN wide area network WAN a public data network e.g. the Internet short range wireless network or any other suitable packet switched network such as a commercially owned proprietary packet switched network e.g. a proprietary cable or fiber optic network and the like or any combination thereof. In addition the wireless network may be for example a cellular network and may employ various technologies including enhanced data rates for global evolution EDGE general packet radio service GPRS global system for mobile communications GSM Internet protocol multimedia subsystem IMS universal mobile telecommunications system UMTS etc. as well as any other suitable wireless medium e.g. worldwide interoperability for microwave access WiMAX Long Term Evolution LTE networks code division multiple access CDMA wideband code division multiple access WCDMA wireless fidelity WiFi wireless LAN WLAN Bluetooth Internet Protocol IP data casting satellite mobile ad hoc network MANET and the like or any combination thereof.

The UE is any type of mobile terminal fixed terminal or portable terminal including a mobile handset station unit device multimedia computer multimedia tablet Internet node communicator desktop computer laptop computer notebook computer netbook computer tablet computer personal communication system PCS device personal navigation device personal digital assistants PDAs audio video player digital camera camcorder positioning device television receiver radio broadcast receiver electronic book device game device or any combination thereof including the accessories and peripherals of these devices or any combination thereof. It is also contemplated that the UE can support any type of interface to the user such as wearable circuitry etc. .

As shown in the system can comprise a machine learning data processing platform which can use various data processing models to create a standardized data processing model. The machine learning data processing platform can also reflect on the data processing models to create a standard set of processes and use a combination of the data processing models standardized data processing model and the standard processes to define a standard pipeline over disparate systems that communicate with each other via the communication network . The standard analytics pipeline can be defined giving the ability to Extract Transform and Load back information to the stream presented as a number of finite or transitive closures in secure and efficient manner.

As shown in the system can further comprise computation clouds collectively computation cloud which includes information stores and computation stores . Each of the one or more computation spaces includes multiple sets of computational closures and or functional blocks e.g. program codes scripts software etc. . The UE may have access to various pieces of information and computations distributed over the computation cloud . By way of example the UE may connect to the computation cloud not only for accessing the services provided for end users but also for activities such as developing distributing processing and aggregating various computations.

In one embodiment the computation closures stored in the computation cloud may be accessed and reused by the applications collectively applications without the need for repeating the Extraction Transformation Load ETL process. The computation closures can be encapsulated as data and be passed to API stored shared or spread the computation. When the computation closures return results the results can be seen as parts of a functional flow. The data encapsulating the computation closures can be refined according to certain semantics defined with computational ontology. In that way computation recycling as well as building up of the results or partial results are feasible the base mechanism for machine learning of data processing models.

By way of example the UE the machine learning data processing platform and the computation cloud communicate with each other and other components of the communication network using well known new or still developing protocols. In this context a protocol includes a set of rules defining how the network nodes within the communication network interact with each other based on information sent over the communication links. The protocols are effective at different layers of operation within each node from generating and receiving physical signals of various types to selecting a link for transferring those signals to the format of information indicated by those signals to identifying which software application executing on a computer system sends or receives the information. The conceptually different layers of protocols for exchanging information over a network are described in the Open Systems Interconnection OSI Reference Model.

Communications between the network nodes are typically effected by exchanging discrete packets of data. Each packet typically comprises 1 header information associated with a particular protocol and 2 payload information that follows the header information and contains information that may be processed independently of that particular protocol. In some protocols the packet includes 3 trailer information following the payload and indicating the end of the payload information. The header includes information such as the source of the packet its destination the length of the payload and other properties used by the protocol. Often the data in the payload for the particular protocol includes a header and payload for a different protocol associated with a different higher layer of the OSI Reference Model. The header for a particular protocol typically indicates a type for the next protocol contained in its payload. The higher layer protocol is said to be encapsulated in the lower layer protocol. The headers included in a packet traversing multiple heterogeneous networks such as the Internet typically include a physical layer 1 header a data link layer 2 header an internetwork layer 3 header and a transport layer 4 header and various application layer 5 layer 6 and layer 7 headers as defined by the OSI Reference Model.

In one embodiment the data pattern determination module may determine data patterns by processing a data set associated with computation closures. By way of example a data set associated with social network news feed may be processed to determine data pattern of the data set. In one embodiment the machine learning data processing platform may process the data set to determine classifiers and the data pattern may be determined based on the classifiers. The classifier may be algorithms that implement classification or a mathematical function implemented by a classification algorithm that map input data to a category. In terms of machine learning classification is an instance of supervised learning i.e. learning where a training set of correctly identified observations is available . In one embodiment the data pattern determination module may process the data set based on semantic rules to determine the data pattern. The semantic rules are specific to the processing of linguistic meaning of computer programs. In this framework algorithms and architectures of the computer programs are analyzed in terms of decidability time space complexity data structures required communication protocols etc.

In one embodiment the closure execution module may execute the computation closures and or functional flows to return results. As defined above each computation closure contains a particular executable computation procedure. The closure execution module may trigger the execution of the computation procedures within the computation closure. A plurality of the computation closure can be chained into a functional flow and the computation procedure in each computation closure can be executed in series. A result returned from a computation closure can become an input for next computation closure as a part of the functional flow. When the computation closure returns the result the result can be refined to suit for the next computation closure. The computation closures functional flow and or results or partial results can be stored in a data processing model repository for processing in future. In that way recycling of computation closures is feasible.

In one embodiment the closure recycling module may recycle the computation closures and or other computation closures to rebuild a functional flow based on training of data processing models. The computation closures stored in the data processing model repository and other computation closures not stored in the data processing model can be combined to form a functional flow. The computation closures are selected based on the trained information of the data processing model. For example a data processing model M is trained to process a computation A that is stored in a repository and a computation B that is currently presented for type X data set. Here result of computation A is required for processing computation B. When type X data set is processed the computation A and the computation B are distributed to a functional flow based on the data processing model M. Then the computation A is reused for next computation C. In that way recycling of the computation A is performed.

In one embodiment the serialization module may utilize the computation closures and produces the serialized granular computation elements. The computation closures may be serialized in a format syntax or metadata structure suitable for being appended to attached to or associated with the data. The serialization module may ensure that the format corresponds to the particular UE that is to receive the computation. Pursuant to the serialization process the processing state of each computation closure may be also encoded and stored in the computation space accordingly.

In one embodiment the data processing model distribution module may distribute the data processing models and or training of data processing models among computation closures and or functional flow. Various types of data processing models and or training of data processing model may be applied to each computation closures and or functional flow in a series. By way of example a functional flow composed of a computation associated with social network data and a computation associated with contract data may be performed based on different type of data processing models for each computation. The data processing model and or training of data processing models may be distributed accordingly based on data pattern or type.

In one embodiment the communication module may form a session over a network between the UE the machine learning data processing platform and the computation cloud . By way of example the communication module executes various protocols and data sharing techniques for enabling collaborative execution between the UE and the machine learning data processing platform over the communication network e.g. cloud based infrastructure . It is noted that the communication module is also configured to support application calls or application programming interface requests by the UE e.g. retrieval of data items as referenced by an application operable by the UE .

In one embodiment the data processing model repository may be a data structure containing the computation closures the functional flows the results or partial results and or data processing models. The data processing models may reflect processing of a data set to summarize analyze record sort calculate disseminate store or otherwise convert the data set in useable information. The data processing models may be trained to reflect data patterns of the data set. As a data set is processed a data processing models may be trained to compute one or more computations associated with the data set based on a data pattern of the data set.

In one embodiment the computation closures may comprise a functional flow. For example a computation closure A may include a functional flow X wherein the functional flow X is composed of a computation B and a computation C. In one embodiment the computation closures and or the data set may be associated with a domain and the data processing models and or training of the data processing models may be specific to a domain. The domain may be specific to an application or a vendor associated with sets of data to be processed. For instance of an application specific domain based on data pattern e.g. news feed pattern of a mobile application e.g. social network application the data processing model may be trained to process the data sets through computations associate with the application.

In step the machine learning data processing platform may determine data processing models associated with the computation closures and or the data set. By way of example a data processing model for social network news feed data may be associated with the computation closures for extracting analyzing or refining news feeds data. In one embodiment the data processing models may be associated with data extraction processes data transformation processes and or data loading processes altogether ETL processes .

In step the data processing models may be trained to reflect the data pattern. As a data set is processed the data processing models may be trained to compute one or more computations associated with the data set based on a data pattern of the data set. By way of example a data processing model for social network news feed may be trained to facilitate processing of particular data type e.g. picture audio video text etc. or using certain type of filters or pipeline for the particular data type.

In step the computation closures and or other computation closures may be recycled to rebuild functional flow based on training of data processing models. The computation closures stored in the data processing model repository and other computation closures not stored in the data processing model can be combined to form a functional flow. The computation closures are selected based on the trained information of the data processing model. For example a data processing model M is trained to process a computation A that is stored in a repository and a computation B that is currently presented for type X data set. Here result of computation A is required for processing computation B. When type X data set is processed the computation A and the computation B are distributed to a functional flow based on the data processing model M. Then the computation A is reused for next computation C. In that way recycling of the computation A is performed.

In step the computation closures and or functional flow may be serialized into data objects. The computation closures may be serialized in a format syntax or metadata structure suitable for being appended to attached to or associated with the data. The machine learning data processing platform may ensure that the format corresponds to the particular UE that is to receive the computation. Pursuant to the serialization process the processing state of each computation closure may be also encoded and stored in the computation space accordingly.

In step the data processing models and or training of data processing models are distributed among computation closures and or functional flow. Various types of data processing models and or training of data processing model may be applied to each computation closures and or functional flow. By way of example a functional flow composed of a computation associated with social network data and a computation associated with calendar data may be executed based on corresponding data processing models for each computation. The data processing model and or training of data processing models may be distributed based on data pattern or type.

In one embodiment the backend device may be equipped with a closure recycling and marshaling component that monitors and manages any access to the computation closures store . In other embodiments the closure recycling and marshaling i.e. standardization for uniform use may be a function of the machine learning data processing platform . In one embodiment the computation closures within environments and the computation closures store may be composed based on anonymous function objects and automatically created by a compiling system using methods for generating anonymous function objects such as lambda expressions.

In another embodiment the computation closure environment has a developer experience module that provides various tools for a developer for manipulating services offered by the UE . The tools may include standardized and or abstract data types and services allowing the developers to chain processes together across development platforms. In one embodiment the developer experience module provides cross platform support for abstract data types and services under the supervision of a machine learning data processing platform as discussed in . The agent Agent 2 retrieves the computation closures required by the developer experience module from the closures store and stores the newly generated computation closures by the developer experience module into the closures store for distribution purposes per arrow .

In yet another embodiment the computation closure environment has a scalable computing module that provides an abstract wrapper i.e. monadic wrapper for the transmitting closures . This abstraction provides computation compatibility between the closure sets and the UE . The abstract wrapper may provide scheduling memory management system calls and other services for various processes associated with the closures . These services are provided under the supervision of the machine learning data backup platform as discussed in . The agent Agent 3 retrieves the computation closures required by the scalable computing module from the closures store and stores the newly generated computation closures by the scalable computing module into the closures store for distribution purposes per arrow . In one embodiment the backend environment may access the closures store and exchange transmit one or more computer closures between the closures store and the backend computation closures store .

It is assumed in this example that a component of the backend environment is selected by the machine learning data processing platform as a destination for computational distribution from the UE . The extracted functional block block 1 is migrated to the component by the machine learning data processing platform and executed on the component. In one embodiment the component receives the functional block block 1 and extracts it from the information store using the Get command . The extracted block 1 is projected into a computational environment with the user device context and the object is produced. The block represents the reconstruction of the block into the initial context by a component in charge of the execution. The aggregated context may then be executed in the run time environment of the component by Agent 3. In another embodiment the UE and the component may exchange places and the distribution is performed from the component to the UE . In another embodiment the component may be a UE. In this embodiment the decomposition and aggregation processes are similar to the above example.

In one embodiment connectors may contain information about parameters such as capabilities functional flows distribution maps links between closures and architectural levels etc. Arrows connecting closures to connectors and connectors to next closures show the functional flow adopted based on the parameters. As seen in the closures have been distributed from component to component via communication between connector and connector . The computation branch of component includes closures communicating via connectors and while branches and communicate via connectors and . Similarly a third branch has been formed of closures being executed at component and connected by connectors and while the branch communicates with other branches via connector . The final results from closure execution of the three branches and are aggregated by the search nodes by applications or a combination thereof and forwarded to the requesting device.

In one embodiment connectors may contain information about parameters such as capabilities functional flow specifications distribution maps links between closures and architectural levels etc. Arrows connecting closures to connectors and connectors to next closures show the functional flow adopted based on the parameters. For example star signs and may represent capability parameters associated with each closure and respectively. Additionally blocks and may represent cost values. For example the cost value may show the cost for binding closure to closure and directs closure to branch via connector as the next closure to be executed after closure . The closures may be initially assigned with priority levels so that less important closures can be omitted if necessary. Similarly cost values and direct closures and in branch via connectors and . In a higher level of hierarchy the cost value directs closures to component and similarly the cost value directs closures to component . Additionally in branch connectors and cost values and direct closures down the path of branch . Similarly in branch connectors and cost values and direct closures down the path of branch . The final results from closure execution of the three branches and are aggregated shown by arrow and forwarded to the requesting device.

The processes described herein for providing a standard data processing model through machine learning may be advantageously implemented via software hardware firmware or a combination of software and or firmware and or hardware. For example the processes described herein may be advantageously implemented via processor s Digital Signal Processing DSP chip an Application Specific Integrated Circuit ASIC Field Programmable Gate Arrays FPGAs etc. Such exemplary hardware for performing the described functions is detailed below.

A bus includes one or more parallel conductors of information so that information is transferred quickly among devices coupled to the bus . One or more processors for processing information are coupled with the bus .

A processor or multiple processors performs a set of operations on information as specified by computer program code related to provide a standard data processing model through machine learning. The computer program code is a set of instructions or statements providing instructions for the operation of the processor and or the computer system to perform specified functions. The code for example may be written in a computer programming language that is compiled into a native instruction set of the processor. The code may also be written directly using the native instruction set e.g. machine language . The set of operations include bringing information in from the bus and placing information on the bus . The set of operations also typically include comparing two or more units of information shifting positions of units of information and combining two or more units of information such as by addition or multiplication or logical operations like OR exclusive OR XOR and AND. Each operation of the set of operations that can be performed by the processor is represented to the processor by information called instructions such as an operation code of one or more digits. A sequence of operations to be executed by the processor such as a sequence of operation codes constitute processor instructions also called computer system instructions or simply computer instructions. Processors may be implemented as mechanical electrical magnetic optical chemical or quantum components among others alone or in combination.

Computer system also includes a memory coupled to bus . The memory such as a random access memory RAM or any other dynamic storage device stores information including processor instructions for providing a standard data processing model through machine learning. Dynamic memory allows information stored therein to be changed by the computer system . RAM allows a unit of information stored at a location called a memory address to be stored and retrieved independently of information at neighboring addresses. The memory is also used by the processor to store temporary values during execution of processor instructions. The computer system also includes a read only memory ROM or any other static storage device coupled to the bus for storing static information including instructions that is not changed by the computer system . Some memory is composed of volatile storage that loses the information stored thereon when power is lost. Also coupled to bus is a non volatile persistent storage device such as a magnetic disk optical disk or flash card for storing information including instructions that persists even when the computer system is turned off or otherwise loses power.

Information including instructions for providing a standard data processing model through machine learning is provided to the bus for use by the processor from an external input device such as a keyboard containing alphanumeric keys operated by a human user a microphone an Infrared IR remote control a joystick a game pad a stylus pen a touch screen or a sensor. A sensor detects conditions in its vicinity and transforms those detections into physical expression compatible with the measurable phenomenon used to represent information in computer system . Other external devices coupled to bus used primarily for interacting with humans include a display device such as a cathode ray tube CRT a liquid crystal display LCD a light emitting diode LED display an organic LED OLED display a plasma screen or a printer for presenting text or images and a pointing device such as a mouse a trackball cursor direction keys or a motion sensor for controlling a position of a small cursor image presented on the display and issuing commands associated with graphical elements presented on the display . In some embodiments for example in embodiments in which the computer system performs all functions automatically without human input one or more of external input device display device and pointing device is omitted.

In the illustrated embodiment special purpose hardware such as an application specific integrated circuit ASIC is coupled to bus . The special purpose hardware is configured to perform operations not performed by processor quickly enough for special purposes. Examples of ASICs include graphics accelerator cards for generating images for display cryptographic boards for encrypting and decrypting messages sent over a network speech recognition and interfaces to special external devices such as robotic arms and medical scanning equipment that repeatedly perform some complex sequence of operations that are more efficiently implemented in hardware.

Computer system also includes one or more instances of a communications interface coupled to bus . Communication interface provides a one way or two way communication coupling to a variety of external devices that operate with their own processors such as printers scanners and external disks. In general the coupling is with a network link that is connected to a local network to which a variety of external devices with their own processors are connected. For example communication interface may be a parallel port or a serial port or a universal serial bus USB port on a personal computer. In some embodiments communications interface is an integrated services digital network ISDN card or a digital subscriber line DSL card or a telephone modem that provides an information communication connection to a corresponding type of telephone line. In some embodiments a communication interface is a cable modem that converts signals on bus into signals for a communication connection over a coaxial cable or into optical signals for a communication connection over a fiber optic cable. As another example communications interface may be a local area network LAN card to provide a data communication connection to a compatible LAN such as Ethernet. Wireless links may also be implemented. For wireless links the communications interface sends or receives or both sends and receives electrical acoustic or electromagnetic signals including infrared and optical signals that carry information streams such as digital data. For example in wireless handheld devices such as mobile telephones like cell phones the communications interface includes a radio band electromagnetic transmitter and receiver called a radio transceiver. In certain embodiments the communications interface enables connection to the communication network for providing a standard data processing model through machine learning to the applications provided on the UE .

The term computer readable medium as used herein refers to any medium that participates in providing information to processor including instructions for execution. Such a medium may take many forms including but not limited to computer readable storage medium e.g. non volatile media volatile media and transmission media. Non transitory media such as non volatile media include for example optical or magnetic disks such as storage device . Volatile media include for example dynamic memory . Transmission media include for example twisted pair cables coaxial cables copper wire fiber optic cables and carrier waves that travel through space without wires or cables such as acoustic waves and electromagnetic waves including radio optical and infrared waves. Signals include man made transient variations in amplitude frequency phase polarization or other physical properties transmitted through the transmission media. Common forms of computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape any other magnetic medium a CD ROM CDRW DVD any other optical medium punch cards paper tape optical mark sheets any other physical medium with patterns of holes or other optically recognizable indicia a RAM a PROM an EPROM a FLASH EPROM an EEPROM a flash memory any other memory chip or cartridge a carrier wave or any other medium from which a computer can read. The term computer readable storage medium is used herein to refer to any computer readable medium except transmission media.

Logic encoded in one or more tangible media includes one or both of processor instructions on a computer readable storage media and special purpose hardware such as ASIC .

Network link typically provides information communication using transmission media through one or more networks to other devices that use or process the information. For example network link may provide a connection through local network to a host computer or to equipment operated by an Internet Service Provider ISP . ISP equipment in turn provides data communication services through the public world wide packet switching communication network of networks now commonly referred to as the Internet .

A computer called a server host connected to the Internet hosts a process that provides a service in response to information received over the Internet. For example server host hosts a process that provides information representing video data for presentation at display . It is contemplated that the components of system can be deployed in various configurations within other computer systems e.g. host and server .

At least some embodiments of the invention are related to the use of computer system for implementing some or all of the techniques described herein. According to one embodiment of the invention those techniques are performed by computer system in response to processor executing one or more sequences of one or more processor instructions contained in memory . Such instructions also called computer instructions software and program code may be read into memory from another computer readable medium such as storage device or network link . Execution of the sequences of instructions contained in memory causes processor to perform one or more of the method steps described herein. In alternative embodiments hardware such as ASIC may be used in place of or in combination with software to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware and software unless otherwise explicitly stated herein.

The signals transmitted over network link and other networks through communications interface carry information to and from computer system . Computer system can send and receive information including program code through the networks among others through network link and communications interface . In an example using the Internet a server host transmits program code for a particular application requested by a message sent from computer through Internet ISP equipment local network and communications interface . The received code may be executed by processor as it is received or may be stored in memory or in storage device or any other non volatile storage for later execution or both. In this manner computer system may obtain application program code in the form of signals on a carrier wave.

Various forms of computer readable media may be involved in carrying one or more sequence of instructions or data or both to processor for execution. For example instructions and data may initially be carried on a magnetic disk of a remote computer such as host . The remote computer loads the instructions and data into its dynamic memory and sends the instructions and data over a telephone line using a modem. A modem local to the computer system receives the instructions and data on a telephone line and uses an infra red transmitter to convert the instructions and data to a signal on an infra red carrier wave serving as the network link . An infrared detector serving as communications interface receives the instructions and data carried in the infrared signal and places information representing the instructions and data onto bus . Bus carries the information to memory from which processor retrieves and executes the instructions using some of the data sent with the instructions. The instructions and data received in memory may optionally be stored on storage device either before or after execution by the processor .

In one embodiment the chip set or chip includes a communication mechanism such as a bus for passing information among the components of the chip set . A processor has connectivity to the bus to execute instructions and process information stored in for example a memory . The processor may include one or more processing cores with each core configured to perform independently. A multi core processor enables multiprocessing within a single physical package. Examples of a multi core processor include two four eight or greater numbers of processing cores. Alternatively or in addition the processor may include one or more microprocessors configured in tandem via the bus to enable independent execution of instructions pipelining and multithreading. The processor may also be accompanied with one or more specialized components to perform certain processing functions and tasks such as one or more digital signal processors DSP or one or more application specific integrated circuits ASIC . A DSP typically is configured to process real world signals e.g. sound in real time independently of the processor . Similarly an ASIC can be configured to performed specialized functions not easily performed by a more general purpose processor. Other specialized components to aid in performing the inventive functions described herein may include one or more field programmable gate arrays FPGA one or more controllers or one or more other special purpose computer chips.

In one embodiment the chip set or chip includes merely one or more processors and some software and or firmware supporting and or relating to and or for the one or more processors.

The processor and accompanying components have connectivity to the memory via the bus . The memory includes both dynamic memory e.g. RAM magnetic disk writable optical disk etc. and static memory e.g. ROM CD ROM etc. for storing executable instructions that when executed perform the inventive steps described herein to provide a standard data processing model through machine learning. The memory also stores the data associated with or generated by the execution of the inventive steps.

Pertinent internal components of the telephone include a Main Control Unit MCU a Digital Signal Processor DSP and a receiver transmitter unit including a microphone gain control unit and a speaker gain control unit. A main display unit provides a display to the user in support of various applications and mobile terminal functions that perform or support the steps of providing a standard data processing model through machine learning. The display includes display circuitry configured to display at least a portion of a user interface of the mobile terminal e.g. mobile telephone . Additionally the display and display circuitry are configured to facilitate user control of at least some functions of the mobile terminal. An audio function circuitry includes a microphone and microphone amplifier that amplifies the speech signal output from the microphone . The amplified speech signal output from the microphone is fed to a coder decoder CODEC .

A radio section amplifies power and converts frequency in order to communicate with a base station which is included in a mobile communication system via antenna . The power amplifier PA and the transmitter modulation circuitry are operationally responsive to the MCU with an output from the PA coupled to the duplexer or circulator or antenna switch as known in the art. The PA also couples to a battery interface and power control unit .

In use a user of mobile terminal speaks into the microphone and his or her voice along with any detected background noise is converted into an analog voltage. The analog voltage is then converted into a digital signal through the Analog to Digital Converter ADC . The control unit routes the digital signal into the DSP for processing therein such as speech encoding channel encoding encrypting and interleaving. In one embodiment the processed voice signals are encoded by units not separately shown using a cellular transmission protocol such as enhanced data rates for global evolution EDGE general packet radio service GPRS global system for mobile communications GSM Internet protocol multimedia subsystem IMS universal mobile telecommunications system UMTS etc. as well as any other suitable wireless medium e.g. microwave access WiMAX Long Term Evolution LTE networks code division multiple access CDMA wideband code division multiple access WCDMA wireless fidelity WiFi satellite and the like or any combination thereof.

The encoded signals are then routed to an equalizer for compensation of any frequency dependent impairments that occur during transmission though the air such as phase and amplitude distortion. After equalizing the bit stream the modulator combines the signal with a RF signal generated in the RF interface . The modulator generates a sine wave by way of frequency or phase modulation. In order to prepare the signal for transmission an up converter combines the sine wave output from the modulator with another sine wave generated by a synthesizer to achieve the desired frequency of transmission. The signal is then sent through a PA to increase the signal to an appropriate power level. In practical systems the PA acts as a variable gain amplifier whose gain is controlled by the DSP from information received from a network base station. The signal is then filtered within the duplexer and optionally sent to an antenna coupler to match impedances to provide maximum power transfer. Finally the signal is transmitted via antenna to a local base station. An automatic gain control AGC can be supplied to control the gain of the final stages of the receiver. The signals may be forwarded from there to a remote telephone which may be another cellular telephone any other mobile phone or a land line connected to a Public Switched Telephone Network PSTN or other telephony networks.

Voice signals transmitted to the mobile terminal are received via antenna and immediately amplified by a low noise amplifier LNA . A down converter lowers the carrier frequency while the demodulator strips away the RF leaving only a digital bit stream. The signal then goes through the equalizer and is processed by the DSP . A Digital to Analog Converter DAC converts the signal and the resulting output is transmitted to the user through the speaker all under control of a Main Control Unit MCU which can be implemented as a Central Processing Unit CPU .

The MCU receives various signals including input signals from the keyboard . The keyboard and or the MCU in combination with other user input components e.g. the microphone comprise a user interface circuitry for managing user input. The MCU runs a user interface software to facilitate user control of at least some functions of the mobile terminal to provide a standard data processing model through machine learning. The MCU also delivers a display command and a switch command to the display and to the speech output switching controller respectively. Further the MCU exchanges information with the DSP and can access an optionally incorporated SIM card and a memory . In addition the MCU executes various control functions required of the terminal. The DSP may depending upon the implementation perform any of a variety of conventional digital processing functions on the voice signals. Additionally DSP determines the background noise level of the local environment from the signals detected by microphone and sets the gain of microphone to a level selected to compensate for the natural tendency of the user of the mobile terminal .

The CODEC includes the ADC and DAC . The memory stores various data including call incoming tone data and is capable of storing other data including music data received via e.g. the global Internet. The software module could reside in RAM memory flash memory registers or any other form of writable storage medium known in the art. The memory device may be but not limited to a single memory CD DVD ROM RAM EEPROM optical storage magnetic disk storage flash memory storage or any other non volatile storage medium capable of storing digital data.

An optionally incorporated SIM card carries for instance important information such as the cellular phone number the carrier supplying service subscription details and security information. The SIM card serves primarily to identify the mobile terminal on a radio network. The card also contains a memory for storing a personal telephone number registry text messages and user specific mobile terminal settings.

While the invention has been described in connection with a number of embodiments and implementations the invention is not so limited but covers various obvious modifications and equivalent arrangements which fall within the purview of the appended claims. Although features of the invention are expressed in certain combinations among the claims it is contemplated that these features can be arranged in any combination and order.

