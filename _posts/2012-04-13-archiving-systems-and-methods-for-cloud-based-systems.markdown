---

title: Archiving systems and methods for cloud based systems
abstract: A cloud based security method and processing node includes monitoring data traffic between a user and an external network, wherein the monitoring is performed by a processing node comprising a first server in a cloud based system, detecting a security incident, if an archiving rule exists based on the security incident, providing a notification to a second server within an organization's domain, wherein the user is part of the organization, and wherein the notification includes private data associated with the security incident based on the archiving rule, and storing non-private data in the cloud based system based on the archiving rule.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09118689&OS=09118689&RS=09118689
owner: Zscaler, Inc.
number: 09118689
owner_city: San Jose
owner_country: US
publication_date: 20120413
---
Generally the field of art of the present disclosure pertains to computer and network systems and methods and more particularly to archiving systems and methods for cloud based security systems that enables archiving of data contained in web transactions while maintaining data privacy.

In network security systems one of the requirements includes archiving any data leaving an organization. With cloud based security systems an additional requirement is that data should not be archived an organization s administrative domain. For example data leakage policies include systems and methods for detecting and blocking compliance violation events originating from within the company s administrative domain. Most data leakage events are accidental however there could be an intentional act of data breach. The organization s Information Technology IT and or Human Resources HR auditors would need to review such violation events ascertain the event as accidental or intentional and take appropriate action. To meet these requirements systems and methods are needed to collect the content of web transaction with violations along with other Metadata e.g. transaction type Uniform Resource Locator URL User and Data leakage snippets etc. and store it for future review. In cloud based security systems conventional solutions store the data in cloud data stores. Disadvantageously this can breaks the data privacy requirements of the organization. Also this results in massive amounts of data being stored in the cloud data store hindering scalability of the cloud based security systems. Archiving systems and methods for web transactions should be able to handle large number of transactions and make relevant data available for review without storing it outside an organization s data privacy perimeter.

In an exemplary embodiment a cloud based security method includes monitoring data traffic between a user and an external network wherein monitoring is performed by a processing node including a first server in a cloud based system detecting a security incident if an archiving rule exists based on the security incident providing a notification to a second server within an organization s domain wherein the user is part of the organization and wherein the notification includes private data associated with the security incident based on the archiving rule and storing non private data in the cloud based system based on the archiving rule. In another exemplary embodiment a cloud based security system includes a plurality of servers forming a cloud system a processing module executed on the plurality of servers to detect security incidents in data communications between users and an external network a policy module executed on the plurality of servers to determine archiving rules associated with detected security incidents and a notification module executed on the plurality of servers to provide notification of private data associated with the detected security incidents based on the archiving rules for storage within an associated organization s domain. In yet another exemplary embodiment a processing node in a cloud based system includes a network interface communicatively coupled to a user and an external network a processor and memory storing computer executable instructions and in response to execution by the processor the computer executable instructions cause the processing node to perform steps of monitoring data traffic between the user and the external network detecting a security incident if an archiving rule exists based on the security incident providing a notification to a server within an organization s domain wherein the user is part of the organization and wherein the notification includes private data associated with the security incident based on the archiving rule and storing non private data based on the archiving rule.

In various exemplary embodiments archiving systems and methods are described that archive web content without storing private data in a cloud based security system. Specifically the archiving systems and methods can support large number of web transactions making relevant data available for review without storing it outside an organization s data privacy perimeter. The archiving systems and methods enable archiving of Web content without violating an organization s data privacy rules. In an exemplary embodiment the archiving systems and methods archive content using email where email with web content and related security incident information is securely sent to an organization s Mail server for storage locally in the organization s domain and not in the cloud based system. The archiving systems and methods can apply security rules to incoming data based on results of a security analysis. If the rules request archiving the archiving systems and methods can construct an email with Meta information of the web transaction its data and security incident information and send the email to the email address as requested by the Auditor of the Security policy. Thus Web transaction content is not stored in the cloud. In order to ensure data privacy an encrypted channel can be used for sending this email notification. Subsequently the archiving systems and methods enable a representative of the organization to review the security incidents and ascertain the event using proof received in email without compromising on the organization s data privacy policy.

Referring to in an exemplary embodiment a block diagram illustrates a distributed security system . The system can for example be implemented as an overlay network in a wide area network WAN such as the Internet a local area network LAN or the like. Also the system can utilize the archiving systems and methods described herein. The system includes content processing nodes processing nodes that proactively detect and preclude the distribution of security threats e.g. malware spyware viruses trojans botnets email spam data leakage policy violations etc. and other undesirable content sent from or requested by an external system. Example external systems can include an enterprise a computer device and a mobile device or any other network and computing systems communicatively coupled to the system . In an exemplary embodiment each of the processing nodes cam include a decision system and method e.g. data inspection engines that operate on a content item e.g. a web page a file an email message or some other data or data communication that is sent from or requested by one of the external systems. In an exemplary embodiment all data destined for or received from the Internet is processed through one of the processing nodes . In another exemplary embodiment specific data specified by each external system e.g. only email only executable files etc. is process through one of the processing node .

Each of the processing nodes can generate a decision vector D d1 d2 . . . dn for a content item of one or more parts C c1 c2 . . . cm . Each decision vector can identify a threat classification e.g. clean spyware malware undesirable content innocuous spam email unknown data leakage policy violation etc. For example the output of each element of the decision vector D can be based on the output of one or more data inspection engines. In an exemplary embodiment the threat classification can be reduced to a subset of categories e.g. violating non violating neutral unknown. Based on the subset classification the processing node can allow distribution of the content item preclude distribution of the content item allow distribution of the content item after a cleaning process or perform threat detection on the content item. In an exemplary embodiment the actions taken by one of the processing nodes can be determinative on the threat classification of the content item and on a security policy of the external system to which the content item is being sent from or from which the content item is being requested by. A content item is violating if for any part C c1 c2 . . . cm of the content item at any of the processing nodes any one of the data inspection engines generates an output that results in a classification of violating. 

Each of the processing nodes can be implemented by one or more of computer and communication devices e.g. server computers gateways switches etc such as the server described in . In an exemplary embodiment the processing nodes can serve as an access layer . The access layer can for example provide external system access to the security system . In an exemplary embodiment each of the processing nodes can include Internet gateways and one or more servers and the processing nodes can be distributed through a geographic region e.g. throughout a country region campus etc. According to a service agreement between a provider of the system and an owner of an external system the system can thus provide security protection to the external system at any location throughout the geographic region.

Data communications can be monitored by the system in a variety of ways depending on the size and data requirements of the external system. For example an enterprise can have multiple routers switches etc. that are used to communicate over the Internet and the routers switches etc. can be configured to establish communications through the nearest in traffic communication time or geographically for example processing node . A mobile device can be configured to communicated to a nearest processing node through any available wireless access device such as an access point high speed wireless access or a cellular gateway. A single computer device such as a user s personal computer can have its browser and email program configured to access the nearest processing node which in turn serves as a proxy for the computer device . Alternatively an Internet provider can have all of its customer traffic processed through the processing nodes .

In an exemplary embodiment the processing nodes can communicate with one or more authority nodes AN . The authority nodes can store policy data for each external system and can distribute the policy data to each of the processing nodes . The policy can for example define security policies for a protected system e.g. security policies for the enterprise . Example policy data may define access privileges for users web sites and or content that is disallowed restricted domains acceptable use data leakage prevention etc. The authority nodes can distribute the policy data to the processing nodes . In an exemplary embodiment the authority nodes can also distribute threat data that includes the classifications of content items according to threat classifications e.g. a list of known viruses a list of known malware sites spam email domains a list of known phishing sites list of data leakage prevention terms etc. The distribution of threat data between the processing nodes and the authority nodes can implemented by push and pull distribution schemes described in more detail below. In an exemplary embodiment each of the authority nodes can be implemented by one or more computer and communication devices e.g. server computers gateways switches etc. such as the server described in . In some exemplary embodiments the authority nodes the logging nodes and user interface UI front ends can serve as an application layer . The application layer can for example manage and provide policy data threat data and data inspection engines and dictionaries for the processing nodes .

Other application layer functions can also be provided in an application layer such as the user interface UI front end . The user interface front end can provide a user interface through which users of the external systems can provide and define security policies e.g. whether email traffic is to be monitored whether certain web sites are to be precluded etc. Another application capability that can be provided through the user interface front end is security analysis and log reporting. The underlying data on which the security analysis and log reporting functions operate are stored in logging nodes LN which serve as a data logging layer i.e. the application layer can be referred to as the data logging layer. Each of the logging nodes can store data related to security operations and network traffic processed by the processing nodes for each external system. In an exemplary embodiment the logging node data can be anonymized so that data identifying an enterprise is removed or obfuscated. For example identifying data can be removed to provide an overall system summary of security processing for all enterprises and users without revealing the identity of any one account. Alternatively identifying data can be obfuscated e.g. provide a random account number each time it is accessed so that an overall system summary of security processing for all enterprises and users may be broken out by accounts without revealing the identity of any one account. In another exemplary embodiment the identifying data and or logging node data can be further encrypted e.g. so that only the enterprise or user if a single user account can have access to the logging node data for its account. Other processes of anonymizing obfuscating or securing logging node data may also be used. As is described herein the archiving systems and methods can be implemented with the processing nodes the authority nodes and the logging nodes to ensure that no private data is stored in the system .

In an exemplary embodiment an access agent can be included in the external systems. For example the access agent is deployed in the enterprise . The access agent can for example facilitate security processing by providing a hash index of files on a client device to one of the processing nodes or can facilitate authentication functions with one of the processing nodes e.g. by assigning tokens for passwords and sending only the tokens to a processing node so that transmission of passwords beyond the network edge of the enterprise is minimized. Other functions and processes can also be facilitated by the access agent . In an exemplary embodiment the processing node can act as a forward proxy that receives user requests to external servers addressed directly to the processing node . In another exemplary embodiment the processing node can access user requests that are passed through the processing node in a transparent mode. A protected system e.g. enterprise can for example choose one or both of these modes. For example a browser can be configured either manually or through the access agent to access the processing node in a forward proxy mode. In the forward proxy mode all accesses are addressed to the processing node .

In an exemplary embodiment an enterprise gateway can be configured so that user requests are routed through the processing node by establishing a communication tunnel between enterprise gateway and the processing node . For establishing the tunnel existing protocols such as generic routing encapsulation GRE layer two tunneling protocol L2TP or other Internet Protocol IP security protocols can be used. In another exemplary embodiment the processing nodes can may be deployed at Internet service provider ISP nodes. The ISP nodes can redirect subject traffic to the processing nodes in a transparent proxy mode. Protected systems such as the enterprise can use a multiprotocol label switching MPLS class of service for indicating the subject traffic that is to be redirected. For example at the within the enterprise the access agent can be configured to perform MPLS labeling. In another transparent proxy mode exemplary embodiment a protected system such as the enterprise can identify the processing node as a next hop router for communication with the external servers.

Generally the distributed security system is an exemplary cloud based system. Cloud computing systems and methods abstract away physical servers storage networking etc. and instead offer these as on demand and elastic resources. The National Institute of Standards and Technology NIST provides a concise and specific definition which states cloud computing is a model for enabling convenient on demand network access to a shared pool of configurable computing resources e.g. networks servers storage applications and services that can be rapidly provisioned and released with minimal management effort or service provider interaction. Cloud computing differs from the classic client server model by providing applications from a server that are executed and managed by a client s web browser with no installed client version of an application required. Centralization gives cloud service providers complete control over the versions of the browser based applications provided to clients which removes the need for version upgrades or license management on individual client computing devices. The phrase software as a service SaaS is sometimes used to describe application programs offered through cloud computing. A common shorthand for a provided cloud computing service or even an aggregation of all existing cloud services is the cloud. The distributed security system is illustrated herein as one exemplary embodiment of a cloud based system and those of ordinary skill in the art will recognize the archiving systems and methods contemplate operation on or with any cloud based system.

Operationally the system can provide policy based secure Internet access for any device anywhere. The system can be viewed as a cloud based security system. Traditionally security was delivered as software which was installed on servers. Installation and deployment required time and expertise prompting the migration to appliances. While the hardware simply plugs into existing infrastructures multiple appliances must be installed at each gateway and an assortment of point products must be used to provide comprehensive security. Managing multiple user interfaces policy managers and log files is expensive inefficient and incomplete. In contrast the system provides SaaS or cloud delivered security services. By analogy rather than cleaning one s own water one prefers water delivered through a tap on demand rather than generating one s own power one prefers power delivered through power lines on demand. In the same way appliances are giving way to security as a service.

Using the system IT administrators or the like define policies and simply forward corporate Internet traffic to the system . The system allows or blocks the traffic and can be used for all users including the enterprise the computer device and the mobile device . The enterprise can include an organization s home and regional offices the computer device and the mobile device can include road warriors mobile phone users home based employees etc. Specifically users such as the enterprise the computer device and the mobile device are all accessing external systems e.g. the Internet by way of the system i.e. through one of the processing nodes . As such security for the users is pervasive and always present. There is no capital expenditure as investments are not required for either hardware or software at the users . SaaS and the system frees precious IT resources from performing operational security chores of managing and patching boxes and updating data feeds and signatures. It enables IT to focus on strategic security such as policy and architecture.

Referring to in an exemplary embodiment a block diagram illustrates various components of the distributed security system in more detail. Although illustrates only one representative component processing node authority node and logging node those of ordinary skill in the art will appreciate there can be many of each of the component nodes and present in the system . A wide area network WAN such as the Internet or some other combination of wired and or wireless networks communicatively couples the processing node the authority node and the logging node therebetween. The external systems and likewise communicate over the WAN with each other or other data providers and publishers i.e. any content on any network. Some or all of the data communication of each of the external systems and may be processed through the processing node .

In an exemplary embodiment a client access agent can be included on a client computer . The client access agent can for example facilitate security processing by providing a hash index of files on the user computer to a processing node for malware virus detection etc. Other security operations can also be facilitated by the access agent . In another exemplary embodiment a server access agent can facilitate authentication functions with the processing node e.g. by assigning tokens for passwords and sending only the tokens to the processing node so that transmission of passwords beyond the network edge of the enterprise is minimized. Other functions and processes can also be facilitated by the server access agent . The computer device and the mobile device can also store information warranting security measures such as personal bank records medical information and login information e.g. login information to the server of the enterprise or to some other secured data provider server.

In an exemplary embodiment the processing nodes are external to network edges of the external systems and . That is the processing nodes are connected to the external systems and and not physically part thereof. For example the processing nodes could be located at data centers and the like and the external systems and can connect to the processing nodes through various networks over various network connectivity types e.g. wireless wired . Each of the processing nodes stores security policies received from the authority node and monitors content items requested by or sent from the external systems and . In an exemplary embodiment each of the processing nodes can also store a detection process filter and or threat data to facilitate the decision of whether a content item should be processed for threat detection. A processing node manager can manage each content item in accordance with the security policy data and the detection process filter and or threat data if stored at the processing node so that security policies for a plurality of external systems in data communication with the processing node are implemented external to the network edges for each of the external systems and . For example depending on the classification resulting from the monitoring the content item can be allowed precluded or threat detected. In general content items that are already classified as clean or not posing a threat can be allowed while those classified as violating may be precluded. Those content items having an unknown status e.g. content items that have not been processed by the system may be threat detected to classify the content item according to threat classifications.

The processing node can include a state manager A. The state manager A can be used to maintain the authentication and the authorization states of users that submit requests to the processing node . Maintenance of the states through the state manager A can minimize the number of authentication and authorization transactions that are necessary to process a request. An example of this state management is described in commonly assigned U.S. patent application Ser. No. 12 179 377 filed Jul. 24 2008 and entitled HTTP AUTHENTICATION AND AUTHORIZATION MANAGEMENT the contents of which are incorporated by reference herein. The processing node can also include an epoch processor B. The epoch processor B can be used to analyze authentication data that originated at the authority node . The epoch processor B can use an epoch ID to further validate the authenticity of authentication data. The processing node can further include a source processor C. The source processor C can be used to verify the source of authorization and authentication data. The source processor C can identify improperly obtained authorization and authentication data enhancing the security of the network. Collectively the state manager A the epoch processor B and the source processor C operate as data inspection engines.

Because the amount of data being processed by the processing nodes can be substantial the detection processing filter can be used as the first stage of an information lookup procedure. For example the detection processing filter can be used as a front end to a looking of the threat data . Content items can be mapped to index values of the detection processing filter by a hash function that operates on an information key derived from the information item. The information key is hashed to generate an index value i.e. a bit position . A value of zero in a bit position in the guard table can indicate for example absence of information while a one in that bit position can indicate presence of information. Alternatively a one could be used to represent absence and a zero to represent presence. Each content item may have an information key that is hashed. For example the processing node manager can identify the Uniform Resource Locator URL address of URL requests as the information key and hash the URL address or can identify the file name and the file size of an executable file information key and hash the file name and file size of the executable file. Hashing an information key to generate an index and checking a bit value at the index in the detection processing filter generally requires less processing time than actually searching threat data . The use of the detection processing filter can improve the failure query i.e. responding to a request for absent information performance of database queries and or any general information queries. Because data structures are generally optimized to access information that is present in the structures failure query performance has a greater effect on the time required to process information searches for very rarely occurring items e.g. the presence of file information in a virus scan log or a cache where many or most of the files transferred in a network have not been scanned or cached. Using the detection processing filter however the worst case additional cost is only on the order of one and thus its use for most failure queries saves on the order of m log m where m is the number of information records present in the threat data .

The detection processing filter thus improves performance of queries where the answer to a request for information is usually positive. Such instances can include for example whether a given file has been virus scanned whether content at a given URL has been scanned for inappropriate e.g. pornographic content whether a given fingerprint matches any of a set of stored documents whether data contains data leakage prevention terms and whether a checksum corresponds to any of a set of stored documents. Thus if the detection processing filter indicates that the content item has not been processed then a worst case null lookup operation into the threat data is avoided and a threat detection can be implemented immediately. The detection processing filter thus complements the threat data that capture positive information. In an exemplary embodiment the detection processing filter can be a Bloom filter implemented by a single hash function. The Bloom filter can be sparse table i.e. the tables include many zeros and few ones and the hash function is chosen to minimize or eliminate false negatives which are for example instances where an information key is hashed to a bit position and that bit position indicates that the requested information is absent when it is actually present.

In general the authority node includes a data store that stores master security policy data for each of the external systems and . An authority node manager may be used to manage the master security policy data e.g. receive input from users of each of the external systems defining different security policies and may distribute the master security policy data to each of the processing nodes . The processing nodes then store a local copy of the security policy data . The authority node may also store a master detection process filter . The detection processing filter may include data indicating whether content items have been processed by one or more of the data inspection engines in any of the processing nodes . The authority node manager may be used to manage the master detection processing filter e.g. receive updates from a processing nodes when the processing node has processed a content item and update the master detection processing filter . For example the master detection processing filter can be distributed to the processing nodes which then store a local copy of the detection processing filter .

In an exemplary embodiment the authority node can include an epoch manager . The epoch manager can be used to generate authentication data associated with an epoch ID. The epoch ID of the authentication data is a verifiable attribute of the authentication data that can be used to identify fraudulently created authentication data. In an exemplary embodiment the detection processing filter can be a guard table. The processing node can for example use the information in the local detection processing filter to quickly determine the presence and or absence of information e.g. whether a particular URL has been checked for malware whether a particular executable has been virus scanned etc. The authority node can also store master threat data . The master threat data can classify content items by threat classifications e.g. a list of known viruses a list of known malware sites spam email domains list of known or detected phishing sites data leakage terms etc. The authority node manager can be used to manage the master threat data e.g. receive updates from the processing nodes when one of the processing nodes has processed a content item and update the master threat data with any pertinent results. In some implementations the master threat data can be distributed to the processing nodes which then store a local copy of the threat data . In another exemplary embodiment the authority node can also monitor the health of each of the processing nodes e.g. the resource availability in each of the processing nodes detection of link failures etc. Based on the observed health of each of the processing nodes the authority node can redirect traffic among the processing nodes and or balance traffic among the processing nodes . Other remedial actions and processes can also be facilitated by the authority node .

The processing node and the authority node can be configured according to one or more push and pull processes to manage content items according to security policy data and or detection process filters and or and the threat data and or . In a threat data push implementation each of the processing nodes stores policy data and threat data . The processing node manager determines whether a content item requested by or transmitted from an external system is classified by the threat data . If the content item is determined to be classified by the threat data then the processing node manager can manage the content item according to the security classification of the content item and the security policy of the external system. If however the content item is determined to not be classified by the threat data then the processing node manager can cause one or more of the data inspection engines to perform the threat detection processes to classify the content item according to a threat classification. Once the content item is classified the processing node manager generates a threat data update that includes data indicating the threat classification for the content item from the threat detection process and transmits the threat data update to an authority node .

The authority node manager in response to receiving the threat data update updates the master threat data stored in the authority node data store according to the threat data update received from the processing node . In an exemplary embodiment the authority node manager can automatically transmit the updated threat data to the other processing nodes . Accordingly threat data for new threats as the new threats are encountered are automatically distributed to each processing node . Upon receiving the new threat data from the authority node each of processing node managers can store the updated threat data in the locally stored threat data . In a threat data pull and push implementation each of the processing nodes stores policy data and threat data . The processing node manager determines whether a content item requested by or transmitted from an external system is classified by the threat data . If the content item is determined to be classified by the threat data then the processing node manager can manage the content item according to the security classification of the content item and the security policy of the external system. If however the content item is determined to not be classified by the threat data then the processing node manager can request responsive threat data for the content item from the authority node . Because processing a content item can consume valuable resource and time in some implementations the processing node can first check with the authority node for threat data before committing such processing resources.

The authority node manager can receive the responsive threat data request from the processing node and can determine if the responsive threat data is stored in the authority node data store. If responsive threat data is stored in the master threat data then the authority node manager provide a reply that includes the responsive threat data to the processing node so that the processing node manager can manage the content item in accordance with the security policy data and the classification of the content item. Conversely if the authority node manager determines that responsive threat data is not stored in the master threat data then the authority node manager can provide a reply that does not include the responsive threat data to the processing node . In response the processing node manager can cause one or more of the data inspection engines to perform the threat detection processes to classify the content item according to a threat classification. Once the content item is classified the processing node manager generates a threat data update that includes data indicating the threat classification for the content item from the threat detection process and transmits the threat data update to an authority node . The authority node manager can then update the master threat data . Thereafter any future requests related to responsive threat data for the content item from other processing nodes can be readily served with responsive threat data.

In a detection process filter and threat data push implementation each of the processing nodes stores a detection process filter policy data and threat data . The processing node manager accesses the detection process filter to determine whether the content item has been processed. If the processing node manager determines that the content item has been processed it can determine if the content item is classified by the threat data . Because the detection process filter has the potential for a false positive a lookup in the threat data can be implemented to ensure that a false positive has not occurred. The initial check of the detection process filter however can eliminate many null queries to the threat data which in turn conserves system resources and increases efficiency. If the content item is classified by the threat data then the processing node manager can manage the content item in accordance with the security policy data and the classification of the content item. Conversely if the processing node manager determines that the content item is not classified by the threat data or if the processing node manager initially determines through the detection process filter that the content item is not classified by the threat data then the processing node manager can cause one or more of the data inspection engines to perform the threat detection processes to classify the content item according to a threat classification. Once the content item is classified the processing node manager generates a threat data update that includes data indicating the threat classification for the content item from the threat detection process and transmits the threat data update to one of the authority nodes .

The authority node manager in turn can update the master threat data and the master detection process filter stored in the authority node data store according to the threat data update received from the processing node . In an exemplary embodiment the authority node manager can automatically transmit the updated threat data and detection processing filter to other processing nodes . Accordingly threat data and the detection processing filter for new threats as the new threats are encountered are automatically distributed to each processing node and each processing node may update its local copy of the detection processing filter and threat data . In a detection process filter and threat data pull and push implementation each of the processing nodes stores a detection process filter policy data and threat data . The processing node manager accesses the detection process filter to determine whether the content item has been processed. If the processing node manager determines that the content item has been processed it can determine if the content item is classified by the threat data . Because the detection process filter has the potential for a false positive a lookup in the threat data can be implemented to ensure that a false positive has not occurred. The initial check of the detection process filter however can eliminate many null queries to the threat data which in turn conserves system resources and increases efficiency. If the processing node manager determines that the content item has not been processed it can request responsive threat data for the content item from the authority node . Because processing a content item may consume valuable resource and time in some implementations the processing node can first check with the authority node for threat data before committing such processing resources.

The authority node manager can receive the responsive threat data request from the processing node and can determine if the responsive threat data is stored in the authority node data store. If responsive threat data is stored in the master threat data then the authority node manager provides a reply that includes the responsive threat data to the processing node so that the processing node manager can manage the content item in accordance with the security policy data and the classification of the content item and further update the local detection processing filter . Conversely if the authority node manager determines that responsive threat data is not stored in the master threat data then the authority node manager can provide a reply that does not include the responsive threat data to the processing node . In response the processing node manager can cause one or more of the data inspection engines to perform the threat detection processes to classify the content item according to a threat classification. Once the content item is classified the processing node manager generates a threat data update that includes data indicating the threat classification for the content item from the threat detection process and transmits the threat data update to an authority node . The authority node manager can then update the master threat data . Thereafter any future requests for related to responsive threat data for the content item from other processing nodes can be readily served with responsive threat data.

The various push and pull data exchange processes provided above are exemplary processes for which the threat data and or detection process filters may be updated in the system of . Other update processes however are contemplated herewith. The data inspection engines processing node manager authority node manager user interface manager logging node manager and authority agent can be realized by instructions that upon execution cause one or more processing devices to carry out the processes and functions described above. Such instructions can for example include interpreted instructions such as script instructions e.g. JavaScript or ECMAScript instructions or executable code or other instructions stored in a non transitory computer readable medium. Other processing architectures can also be used e.g. a combination of specially designed hardware and software for example.

Referring to in an exemplary embodiment a block diagram illustrates a server which can be used in the system or standalone. Any of the processing nodes the authority nodes and the logging nodes can be formed through one or more servers . Further the computer device the mobile device the servers etc. can include the server or a similar structure. The server can be a digital computer that in terms of hardware architecture generally includes a processor input output I O interfaces a network interface a data store and memory . It should be appreciated by those of ordinary skill in the art that depicts the server in an oversimplified manner and a practical embodiment may include additional components and suitably configured processing logic to support known or conventional operating features that are not described in detail herein. The components and are communicatively coupled via a local interface . The local interface can be for example but not limited to one or more buses or other wired or wireless connections as is known in the art. The local interface can have additional elements which are omitted for simplicity such as controllers buffers caches drivers repeaters and receivers among many others to enable communications. Further the local interface can include address control and or data connections to enable appropriate communications among the aforementioned components.

The processor is a hardware device for executing software instructions. The processor can be any custom made or commercially available processor a central processing unit CPU an auxiliary processor among several processors associated with the server a semiconductor based microprocessor in the form of a microchip or chip set or generally any device for executing software instructions. When the server is in operation the processor is configured to execute software stored within the memory to communicate data to and from the memory and to generally control operations of the server pursuant to the software instructions. The I O interfaces can be used to receive user input from and or for providing system output to one or more devices or components. User input can be provided via for example a keyboard touch pad and or a mouse. System output can be provided via a display device and a printer not shown . I O interfaces can include for example a serial port a parallel port a small computer system interface SCSI a serial ATA SATA a fibre channel Infiniband iSCSI a PCI Express interface PCI x an infrared IR interface a radio frequency RF interface and or a universal serial bus USB interface.

The network interface can be used to enable the server to communicate on a network such as the Internet the WAN the enterprise and the like etc. The network interface can include for example an Ethernet card or adapter e.g. 10BaseT Fast Ethernet Gigabit Ethernet 10 GbE or a wireless local area network WLAN card or adapter e.g. 802.11a b g n . The network interface can include address control and or data connections to enable appropriate communications on the network. A data store can be used to store data. The data store can include any of volatile memory elements e.g. random access memory RAM such as DRAM SRAM SDRAM and the like nonvolatile memory elements e.g. ROM hard drive tape CDROM and the like and combinations thereof. Moreover the data store can incorporate electronic magnetic optical and or other types of storage media. In one example the data store can be located internal to the server such as for example an internal hard drive connected to the local interface in the server . Additionally in another embodiment the data store can be located external to the server such as for example an external hard drive connected to the I O interfaces e.g. SCSI or USB connection . In a further embodiment the data store can be connected to the server through a network such as for example a network attached file server.

The memory can include any of volatile memory elements e.g. random access memory RAM such as DRAM SRAM SDRAM etc. nonvolatile memory elements e.g. ROM hard drive tape CDROM etc. and combinations thereof. Moreover the memory can incorporate electronic magnetic optical and or other types of storage media. Note that the memory can have a distributed architecture where various components are situated remotely from one another but can be accessed by the processor . The software in memory can include one or more software programs each of which includes an ordered listing of executable instructions for implementing logical functions. The software in the memory includes a suitable operating system S and one or more programs . The operating system essentially controls the execution of other computer programs such as the one or more programs and provides scheduling input output control file and data management memory management and communication control and related services. The operating system can be any of Windows NT Windows 2000 Windows XP Windows Vista Windows 7 Windows Server 2003 2008 all available from Microsoft Corp. of Redmond Wash. Solaris available from Sun Microsystems Inc. of Palo Alto Calif. LINUX or another UNIX variant available from Red Hat of Raleigh N.C. Android and variants thereof available from Google Inc. of Mountain View Calif. Apple OS X and variants thereof available from Apple Inc. of Cupertino Calif. or the like. The one or more programs may be configured to implement the various processes algorithms methods techniques etc. described herein.

Referring to in an exemplary embodiment a block diagram illustrates a mobile device which can be used in the system or the like. The mobile device can be a digital device that in terms of hardware architecture generally includes a processor input output I O interfaces a radio a data store and memory . It should be appreciated by those of ordinary skill in the art that depicts the mobile device in an oversimplified manner and a practical embodiment can include additional components and suitably configured processing logic to support known or conventional operating features that are not described in detail herein. The components and are communicatively coupled via a local interface . The local interface can be for example but not limited to one or more buses or other wired or wireless connections as is known in the art. The local interface can have additional elements which are omitted for simplicity such as controllers buffers caches drivers repeaters and receivers among many others to enable communications. Further the local interface may include address control and or data connections to enable appropriate communications among the aforementioned components.

The processor is a hardware device for executing software instructions. The processor can be any custom made or commercially available processor a central processing unit CPU an auxiliary processor among several processors associated with the mobile device a semiconductor based microprocessor in the form of a microchip or chip set or generally any device for executing software instructions. When the mobile device is in operation the processor is configured to execute software stored within the memory to communicate data to and from the memory and to generally control operations of the mobile device pursuant to the software instructions. In an exemplary embodiment the processor may include a mobile optimized processor such as optimized for power consumption and mobile applications. The I O interfaces can be used to receive user input from and or for providing system output. User input can be provided via for example a keypad a touch screen a scroll ball a scroll bar buttons bar code scanner and the like. System output can be provided via a display device such as a liquid crystal display LCD touch screen and the like. The I O interfaces can also include for example a serial port a parallel port a small computer system interface SCSI an infrared IR interface a radio frequency RF interface a universal serial bus USB interface and the like. The I O interfaces can include a graphical user interface GUI that enables a user to interact with the mobile device . Additionally the I O interfaces may further include an imaging device i.e. camera video camera etc.

The radio enables wireless communication to an external access device or network. Any number of suitable wireless data communication protocols techniques or methodologies can be supported by the radio including without limitation RF IrDA infrared Bluetooth ZigBee and other variants of the IEEE 802.15 protocol IEEE 802.11 any variation IEEE 802.16 WiMAX or any other variation Direct Sequence Spread Spectrum Frequency Hopping Spread Spectrum Long Term Evolution LTE cellular wireless cordless telecommunication protocols e.g. 3G 4G etc. wireless home network communication protocols paging network protocols magnetic induction satellite data communication protocols wireless hospital or health care facility network protocols such as those operating in the WMTS bands GPRS proprietary wireless data communication protocols such as variants of Wireless USB and any other protocols for wireless communication. The data store can be used to store data. The data store can include any of volatile memory elements e.g. random access memory RAM such as DRAM SRAM SDRAM and the like nonvolatile memory elements e.g. ROM hard drive tape CDROM and the like and combinations thereof. Moreover the data store can incorporate electronic magnetic optical and or other types of storage media.

The memory can include any of volatile memory elements e.g. random access memory RAM such as DRAM SRAM SDRAM etc. nonvolatile memory elements e.g. ROM hard drive etc. and combinations thereof. Moreover the memory may incorporate electronic magnetic optical and or other types of storage media. Note that the memory can have a distributed architecture where various components are situated remotely from one another but can be accessed by the processor . The software in memory can include one or more software programs each of which includes an ordered listing of executable instructions for implementing logical functions. In the example of the software in the memory system includes a suitable operating system O S and programs . The operating system essentially controls the execution of other computer programs and provides scheduling input output control file and data management memory management and communication control and related services. The operating system can be any of LINUX or another UNIX variant Android available from Google Symbian OS Microsoft Windows CE Microsoft Windows 7 Mobile iOS available from Apple Inc. webOS available from Hewlett Packard Blackberry OS Available from Research in Motion and the like. The programs can include various applications add ons etc. configured to provide end user functionality with the mobile device . For example exemplary programs can include but not limited to a web browser social networking applications streaming media applications games mapping and location applications electronic mail applications financial applications and the like.

Referring to in an exemplary embodiment another exemplary cloud system is illustrated for the archiving systems and methods and the like. The cloud system includes one or more cloud nodes CN communicatively coupled to the Internet . The cloud nodes may include the processing nodes the server or the like. That is the cloud system may include the distributed security system or another implementation of a cloud based system. In the cloud system traffic from various locations and various devices located therein such as a regional office headquarters various employee s homes a mobile laptop and a mobile device is redirected to the cloud through the cloud nodes . That is each of the locations is communicatively coupled to the Internet through the cloud nodes . The cloud system can be configured to perform various functions such as spam filtering uniform resource locator URL filtering antivirus protection bandwidth control data loss prevention zero day vulnerability protection web 2.0 features and the like. In an exemplary embodiment the cloud system and the distributed security system can be viewed as Security as a Service through the cloud.

Architecturally the systems generally at least include the processing nodes and the cloud nodes for interfacing with the users . In an exemplary embodiment all functions described herein can be incorporated in the processing nodes and the cloud nodes . In another exemplary embodiment the functions can be distributed. For example the system includes the singular cloud nodes while the system includes the processing nodes the authority nodes the logging nodes etc. The term node as used herein can be a single computer cluster of servers or a functional module running on a computer server etc. The archiving systems and methods can be implemented generally by the distributed security system and or the cloud system . For example the archiving systems and methods can affect the processing nodes the authority nodes the user interface front end and the logging nodes to ensure data archiving adheres to data protection policies of an organization using the system . Alternatively the archiving systems and methods can affect the cloud nodes ensuring that any data storage thereon adheres to data protection policies of an organization using the system .

Referring to in an exemplary embodiment a functional block diagram illustrates a web transaction archiving system . The archiving system can be based on the systems or another type of system. That is the archiving system can operate on any cloud system handling web or any other data transactions. The archiving system includes a cloud processing node a cloud management node a cloud Simple Mail Transfer Protocol SMTP node a cloud logging node and a customer SMTP server . In an exemplary embodiment the cloud processing node can be the processing node or the cloud node the cloud management node can be the authority node or part of the cloud node and the logging node can be the logging node or part of the cloud node . The cloud SMTP node can be part of any of the logging node the processing node the authority node the cloud node or a standalone device. Collectively the nodes are part of a cloud system i.e. the system etc. The customer SMTP server is a mail server located within an organization s administrative domain. For example in the customer SMTP server could be within the enterprise behind the firewalls .

In operation the cloud processing node interfaces to end users such as receiving HTTP requests or any other data e.g. collectively referred to as web transactions . The cloud processing node is configured to perform the various functions described herein for the processing node and the cloud node . That is the cloud processing node can perform data analysis on any requests to from the end users. In context of this data analysis the archiving systems and methods seek to avoid storing any private data associated with the organization within the confines of the cloud. The cloud processing node performs the data analysis based on policy information provided by the cloud management node i.e. previously provided provided on demand etc. . Part of this policy information can include archiving rule for specific security policies. Exemplary archiving rules can include without limitation not storing data related to a security incident event e.g. a data leakage event etc. not storing data related to accessing certain Web sites not storing data related to specific users etc. Through the cloud management node the archiving rules can be modified as needed by an IT representative of an organization. The cloud logging node is used for storing notification logs related to the data analysis. In an exemplary embodiment the cloud logging node can store a log entry for any event detected at the cloud processing node . However the data in the log entry can be based on the archiving rules. For example a security incident event could just denote the specifics of the event without storing the associated data at the cloud logging node .

The cloud SMTP node is configured to handle archiving of data when there is an archiving rule in place. The cloud SMTP node is configured to receive a notification when there is an event and an archiving rule in place. For example assuming the cloud SMTP node is separated from the cloud processing node the cloud SMTP node can received an email notification from the cloud processing node . Alternatively the cloud SMTP node can be part of the cloud processing node i.e. part of the processing node the cloud node etc. and in this exemplary embodiment the cloud processing node can simply internally notify the cloud SMTP node . The cloud SMTP node is configured to compose an email to the customer SMTP server based on the archiving rule and to securely transmit the email to the customer SMTP server . Subsequent to the email transmission the cloud i.e. the nodes no longer has the data related to the event. The data is securely within the organization s domain in the customer SMTP server . The customer SMTP server can include functionality to automatically archive the data in the email in a customer managed log. Thus the archiving systems and methods provide dual benefits is limiting data storage in the cloud while honoring data privacy requirements of the customer.

Referring to in an exemplary embodiment a flow diagram illustrates an archiving method . The archiving method can be implemented with the web transaction archiving system the cloud system the distributed security system etc. The archiving method is illustrated relative to functions associated with the nodes the end user and a recipient at company X with company X being the organization associated with the end user i.e. the data belongs to company X . To start a web transaction or any data transaction with a violation is presented to the archiving method . Specifically the archiving method processes outputs from a security processing engine e.g. such as described herein in the functionality of the processing node and the cloud node . The archiving method is presented with content extract which triggers the security event or violation original content security policy etc. The archiving method can be implemented based on a setting or policy of archiving content associated with violations. The cloud processing node detects a web transaction with a violation step . Note this violation is one in which archiving rules require the data to be stored with company X s domain and not in the cloud. The cloud processing node provides a message to customer SMTP server step .

In an exemplary embodiment the message is an email notification with Transport Layer Security TLS and data including a Web User ID of the user associated with the violation and various data about the violation. Exemplary data about the violation can include the original Web content triggering the violation Data Leakage Prevention DLP violation related data DLP engines and dictionaries hit etc. Specifically the email notification can include meta information of the web transaction such as URL user of the web transaction and in case USER is not present a location type of web transaction such as Social Networking Web mail Web post names of security engine hit and the like. The email notification can also include the extracted patterns which contribute towards the triggering of a security policy i.e. the rationale for flagging the transaction as a violation. Thus original content from Web transaction is attached to the email and if the content was in file being uploaded then that file is attached to the email. In an exemplary embodiment the processing node provides the message to customer SMTP server as described above. In another exemplary embodiment the processing node provides the message to the cloud SMTP server which in turn can provide the message to the customer SMTP server . Alternatively the cloud SMTP server can be integrated with the processing node .

The customer SMTP server or the cloud SMTP server can be configured to perform numerous steps. First the SMTP server can send a notification e.g. email text message URL etc. with the original web content and security violation to a recipient at company X step . For example the recipient could be someone in IT or some other person responsible for data security and control. The purpose of this notification can be to alert the company X of the violation for any reactive measures to be taken. Next cloud SMTP server sends a notification to the cloud logging node step . This notification can also be an email message with relevant data that is stored in the cloud i.e. the relevant data does not include the data stored with company X per the archiving rule. The relevant data is data used by the cloud system for proactive security i.e. data related to the violation that can be used for subsequent detections of violations. This data may be anonynized as well as excluding the data stored with company X per the archiving rule. The SMTP server can also send a notification to a company X log step . The company X log can reside on the cloud SMTP server or a separate device and the company X log includes a database of violations. Subsequently company X through this database company X IT can search for violations view and prepare reports of violations etc. providing an integrated view for proactive security measures.

Referring to in an exemplary embodiment a flowchart illustrates an archiving method . The archiving method can be implemented with the web transaction archiving system the cloud system the distributed security system etc. In general the method can be implemented by a computer such as the server described herein through instructions on a computer readable medium that are executed by the processor to cause the server perform the method . First the method has a security incident triggered step . Exemplary security incidents can include malware spyware viruses trojans botnets email spam policy violations data leakage etc. The incident information is sent to a policy module step . Here an analysis is performed on the incident including checking if there is an archiving rule match step . Archiving rules can be defined per organization per violation type and can generally define what information is stored in the cloud and what information is securely stored with the organization s domain i.e. not within the cloud. If there is no archiving rule in place step the method is complete step . If there is an archiving rule in place step the method evaluates associated rules and actions based on the incident and sets actions based thereon step .

The method checks if there is a notification rule step . For example the method can include two aspects 1 is there a rule preventing archiving in the cloud and 2 is there a rule requiring archiving within an organization s domain. These two aspects can be mutually applied. For example if there is no notification rule step the method can end step with the cloud system simply not storing the data related to the incident. If there is a notification rule step the method can send the incident information and content to a notification module step . The notification module constructs a message with violation information web content web transaction ID auditor contact info user info TLS etc. and sends the message to an SMTP cluster step . The SMTP cluster can be the cloud SMTP node and generally includes equipment within the cloud to create notifications to the organization. The cloud can record the original transaction with the web transaction ID step . Here the cloud e.g. the processing node the cloud SMTP node etc. can log and store information related information while adhering to the rules e.g. storing incident information without underlying content . The SMTP cluster can send the received message to a notification Application Programming Interface API step . The notification module constructs an email based on the received message and sends out the email step . The notification module in the cloud records a new transaction based on a message ID step . This transaction in the cloud can be recorded using a violation company ID and violation user ID etc. Further the transaction can be send out for notification to the company users etc. The policy module and the notification module can include physical devices hardware software firmware etc. to perform the various functions in the method .

Referring to in an exemplary embodiment a network diagram illustrates a network depicting an exemplary operation of the archiving methods . The network includes an organization s domain a cloud system and an external network e.g. the Internet . As described herein the cloud system is an intermediate layer between the domain and the network and the cloud system is configured to implement the archiving systems and methods described herein in conjunction with the domain . The domain includes users the SMTP server and optionally the company X log . The cloud system includes the cloud processing node the cloud SMTP node and the cloud logging node . The external network can include a site . In operation a user can access the site through the cloud system specifically through the cloud processing node . If there is no violation the cloud processing node simply acts as a proxy between the site and the user . If there is a violation and an associated archiving rule the cloud processing node is configured to implement the methods with the devices to ensure no private data per the archiving rule belonging the organization is stored in the cloud system but rather stored within the domain through the devices . In another exemplary embodiment private data belonging to the organization could be stored in the cloud system but with an approach that ensures this private data is only reviewable or accessible by the organization. For example the devices could include encrypted storage for storing violation information. This encrypted storage could a use key per organization and encrypt the data using that key before storing the data. Thus while private data is stored in the cloud system it is only accessible with the organization s private key.

It will be appreciated that some exemplary embodiments described herein may include one or more generic or specialized processors one or more processors such as microprocessors digital signal processors customized processors and field programmable gate arrays FPGAs and unique stored program instructions including both software and firmware that control the one or more processors to implement in conjunction with certain non processor circuits some most or all of the functions of the methods and or systems described herein. Alternatively some or all functions may be implemented by a state machine that has no stored program instructions or in one or more application specific integrated circuits ASICs in which each function or some combinations of certain of the functions are implemented as custom logic. Of course a combination of the aforementioned approaches may be used. Moreover some exemplary embodiments may be implemented as a computer readable storage medium having computer readable code stored thereon for programming a computer server appliance device etc. each of which may include a processor to perform methods as described and claimed herein. Examples of such computer readable storage mediums include but are not limited to a hard disk an optical storage device a magnetic storage device a ROM Read Only Memory a PROM Programmable Read Only Memory an EPROM Erasable Programmable Read Only Memory an EEPROM Electrically Erasable Programmable Read Only Memory Flash memory and the like.

Although the present disclosure has been illustrated and described herein with reference to preferred embodiments and specific examples thereof it will be readily apparent to those of ordinary skill in the art that other embodiments and examples may perform similar functions and or achieve like results. All such equivalent embodiments and examples are within the spirit and scope of the present disclosure and are intended to be covered by the following claims.

