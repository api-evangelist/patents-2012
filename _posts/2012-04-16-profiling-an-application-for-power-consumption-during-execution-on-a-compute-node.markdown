---

title: Profiling an application for power consumption during execution on a compute node
abstract: Methods, apparatus, and products are disclosed for profiling an application for power consumption during execution on a compute node that include: receiving an application for execution on a compute node; identifying a hardware power consumption profile for the compute node, the hardware power consumption profile specifying power consumption for compute node hardware during performance of various processing operations; determining a power consumption profile for the application in dependence upon the application and the hardware power consumption profile for the compute node; and reporting the power consumption profile for the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08539270&OS=08539270&RS=08539270
owner: International Business Machines Corporation
number: 08539270
owner_city: Armonk
owner_country: US
publication_date: 20120416
---
This application is a continuation application of and claims priority from U.S. patent application Ser. No. 12 167 302 filed on Jul. 3 2008.

This invention was made with Government support under Contract No. B554331 awarded by the Department of Energy. The Government has certain rights in this invention.

The field of the invention is data processing or more specifically methods apparatus and products for profiling an application for power consumption during execution on a compute node.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output I O devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

Parallel computing is an area of computer technology that has experienced advances. Parallel computing is the simultaneous execution of the same task split up and specially adapted on multiple processors in order to obtain results faster. Parallel computing is based on the fact that the process of solving a problem usually can be divided into smaller tasks which may be carried out simultaneously with some coordination.

Parallel computers execute applications that include both parallel algorithms and serial algorithms. A parallel algorithm can be split up to be executed a piece at a time on many different processing devices and then put back together again at the end to get a data processing result. Some algorithms are easy to divide up into pieces. Splitting up the job of checking all of the numbers from one to a hundred thousand to see which are primes could be done for example by assigning a subset of the numbers to each available processor and then putting the list of positive results back together. In this specification the multiple processing devices that execute the algorithms of an application are referred to as compute nodes. A parallel computer is composed of compute nodes and other processing nodes as well including for example input output I O nodes and service nodes.

Parallel algorithms are valuable because it is faster to perform some kinds of large computing tasks via a parallel algorithm than it is via a serial non parallel algorithm because of the way modern processors work. It is far more difficult to construct a computer with a single fast processor than one with many slow processors with the same throughput. There are also certain theoretical limits to the potential speed of serial processors. On the other hand every parallel algorithm has a serial part and so parallel algorithms have a saturation point. After that point adding more processors does not yield any more throughput but only increases the overhead and cost.

Parallel algorithms are designed also to optimize one more resource the data communications requirements among the nodes of a parallel computer. There are two ways parallel processors communicate shared memory or message passing. Shared memory processing needs additional locking for the data and imposes the overhead of additional processor and bus cycles and also serializes some portion of the algorithm.

Message passing processing uses high speed data communications networks and message buffers but this communication adds transfer overhead on the data communications networks as well as additional memory need for message buffers and latency in the data communications among nodes. Designs of parallel computers use specially designed data communications links so that the communication overhead will be small but it is the parallel algorithm that decides the volume of the traffic.

Many data communications network architectures are used for message passing among nodes in parallel computers. Compute nodes may be organized in a network as a torus or mesh for example. Also compute nodes may be organized in a network as a tree. A torus network connects the nodes in a three dimensional mesh with wrap around links. Every node is connected to its six neighbors through this torus network and each node is addressed by its x y z coordinate in the mesh. In such a manner a torus network lends itself to point to point operations. In a tree network the nodes typically are organized in a binary tree arrangement each node has a parent and two children although some nodes may only have zero children or one child depending on the hardware configuration . In computers that use a torus and a tree network the two networks typically are implemented independently of one another with separate routing circuits separate physical links and separate message buffers. A tree network provides high bandwidth and low latency for certain collective operations such as for example an allgather allreduce broadcast scatter and so on.

When processing an application the compute nodes typically do not utilize the nodes hardware components uniformly for each portion of the application. For example during a portion of the application that performs a collective operation the compute nodes typically utilize the nodes network components that interface with the tree network but do not utilize the components that interface with the torus network. During a portion of the application that performs mathematical operations on integers the compute nodes typically do not need to utilize the float point units of the nodes processors. The manner in which the nodes hardware components are utilized to process the different portions of the application determine the overall power consumption of the nodes while executing the application. Having information on how the compute nodes consume power while executing an application may help application developers efficiently reduce the power consumption of the application thereby conserving valuable computing resources.

Methods apparatus and products are disclosed for profiling an application for power consumption during execution on a compute node that include receiving an application for execution on a compute node identifying a hardware power consumption profile for the compute node the hardware power consumption profile specifying power consumption for compute node hardware during performance of various processing operations determining a power consumption profile for the application in dependence upon the application and the hardware power consumption profile for the compute node and reporting the power consumption profile for the application.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and computer program products for profiling an application for power consumption during execution on a compute node according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . illustrates an exemplary system for profiling an application for power consumption during execution on a compute node according to embodiments of the present invention. The system of includes a parallel computer non volatile memory for the computer in the form of data storage device an output device for the computer in the form of printer and an input output device for the computer in the form of computer terminal . Parallel computer in the example of includes a plurality of compute nodes that execute an application . The application of is a set of computer program instructions that provide user level data processing.

Each compute node of may include a plurality of processors for use in executing an application on the parallel computer according to embodiments of the present invention. The processors of each compute node in are operatively coupled to computer memory such as for example random access memory RAM . Each compute node may operate in several distinct modes that affect the relationship among the processors and the memory on that node such as for example serial processing mode or parallel processing mode. The mode in which the compute nodes operate is generally set during the node s boot processes and does not change until the node reboots.

In serial processing mode often referred to a virtual node mode the processors of a compute node operate independently of one another and each processor has access to a partition of the node s total memory that is exclusively dedicated to that processor. For example if a compute node has four processors and two Gigabytes GB of RAM when operating in serial processing mode each processor may process a thread independently of the other processors on that node and each processor may access a 512 Megabyte MB portion of that node s total 2 GB of RAM.

In parallel processing mode often referred to as symmetric multi processing mode one of the processors acts as a master and the remaining processors serve as slaves to the master processor. Each processor has access to the full range of computer memory on the compute node. Continuing with the exemplary node above having four processors and 2 GB of RAM for example each slave processor may cooperatively process threads spawned from the master processor and all of the processors have access to the node s entire 2 GB of RAM.

The compute nodes are coupled for data communications by several independent data communications networks including a Joint Test Action Group JTAG network a global combining network which is optimized for collective operations and a torus network which is optimized point to point operations. The global combining network is a data communications network that includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. Each data communications network is implemented with data communications links among the compute nodes . The data communications links provide data communications for parallel operations among the compute nodes of the parallel computer. The links between compute nodes are bi directional links that are typically implemented using two separate directional data communications paths.

In addition the compute nodes of parallel computer are organized into at least one operational group of compute nodes for collective parallel operations on parallel computer . An operational group of compute nodes is the set of compute nodes upon which a collective parallel operation executes. Collective operations are implemented with data communications among the compute nodes of an operational group. Collective operations are those functions that involve all the compute nodes of an operational group. A collective operation is an operation a message passing computer program instruction that is executed simultaneously that is at approximately the same time by all the compute nodes in an operational group of compute nodes. Such an operational group may include all the compute nodes in a parallel computer or a subset all the compute nodes. Collective operations are often built around point to point operations. A collective operation requires that all processes on all compute nodes within an operational group call the same collective operation with matching arguments. A broadcast is an example of a collective operation for moving data among compute nodes of an operational group. A reduce operation is an example of a collective operation that executes arithmetic or logical functions on data distributed among the compute nodes of an operational group. An operational group may be implemented as for example an MPI communicator. 

 MPI refers to Message Passing Interface a prior art parallel communications library a module of computer program instructions for data communications on parallel computers. Examples of prior art parallel communications libraries that may be improved for use with systems according to embodiments of the present invention include MPI and the Parallel Virtual Machine PVM library. PVM was developed by the University of Tennessee The Oak Ridge National Laboratory and Emory University. MPI is promulgated by the MPI Forum an open group with representatives from many organizations that define and maintain the MPI standard. MPI at the time of this writing is a de facto standard for communication among compute nodes running a parallel program on a distributed memory parallel computer. This specification sometimes uses MPI terminology for ease of explanation although the use of MPI as such is not a requirement or limitation of the present invention.

Some collective operations have a single originating or receiving process running on a particular compute node in an operational group. For example in a broadcast collective operation the process on the compute node that distributes the data to all the other compute nodes is an originating process. In a gather operation for example the process on the compute node that received all the data from the other compute nodes is a receiving process. The compute node on which such an originating or receiving process runs is referred to as a logical root.

Most collective operations are variations or combinations of four basic operations broadcast gather scatter and reduce. The interfaces for these collective operations are defined in the MPI standards promulgated by the MPI Forum. Algorithms for executing collective operations however are not defined in the MPI standards. In a broadcast operation all processes specify the same root process whose buffer contents will be sent. Processes other than the root specify receive buffers. After the operation all buffers contain the message from the root process.

In a scatter operation the logical root divides data on the root into segments and distributes a different segment to each compute node in the operational group. In scatter operation all processes typically specify the same receive count. The send arguments are only significant to the root process whose buffer actually contains sendcount N elements of a given data type where N is the number of processes in the given group of compute nodes. The send buffer is divided and dispersed to all processes including the process on the logical root . Each compute node is assigned a sequential identifier termed a rank. After the operation the root has sent sendcount data elements to each process in increasing rank order. Rank 0 receives the first sendcount data elements from the send buffer. Rank 1 receives the second sendcount data elements from the send buffer and so on.

A gather operation is a many to one collective operation that is a complete reverse of the description of the scatter operation. That is a gather is a many to one collective operation in which elements of a datatype are gathered from the ranked compute nodes into a receive buffer in a root node.

A reduce operation is also a many to one collective operation that includes an arithmetic or logical function performed on two data elements. All processes specify the same count and the same arithmetic or logical function. After the reduction all processes have sent count data elements from computer node send buffers to the root process. In a reduction operation data elements from corresponding send buffer locations are combined pair wise by arithmetic or logical operations to yield a single corresponding element in the root process s receive buffer. Application specific reduction operations can be defined at runtime. Parallel communications libraries may support predefined operations. MPI for example provides the following pre defined reduction operations 

In addition to compute nodes the parallel computer includes input output I O nodes coupled to compute nodes through the global combining network . The compute nodes in the parallel computer are partitioned into processing sets such that each compute node in a processing set is connected for data communications to the same I O node. Each processing set therefore is composed of one I O node and a subset of compute nodes . The ratio between the number of compute nodes to the number of I O nodes in the entire system typically depends on the hardware configuration for the parallel computer. For example in some configurations each processing set may be composed of eight compute nodes and one I O node. In some other configurations each processing set may be composed of sixty four compute nodes and one I O node. Such example are for explanation only however and not for limitation. Each I O nodes provide I O services between compute nodes of its processing set and a set of I O devices. In the example of the I O nodes are connected for data communications I O devices through local area network LAN implemented using high speed Ethernet.

The parallel computer of also includes a service node coupled to the compute nodes through one of the networks . Service node provides services common to pluralities of compute nodes administering the configuration of compute nodes loading programs into the compute nodes starting program execution on the compute nodes retrieving results of program operations on the computer nodes and so on. Service node runs a service application and communicates with users through a service application interface that runs on computer terminal .

The service node of also has installed upon it a power profiling module . The power profiling module of is a set of computer program instructions capable of profiling an application for power consumption during execution on a compute node according to embodiments of the present invention. The power profiling module of operates generally for profiling an application for power consumption during execution on a compute node according to embodiments of the present invention by receiving the application for execution on a compute node identifying a hardware power consumption profile for the compute node the hardware power consumption profile specifying power consumption for compute node hardware during performance of various processing operations determining a power consumption profile for the application in dependence upon the application and the hardware power consumption profile for the compute node and reporting the power consumption profile for the application .

The power consumption profile of for the application is a data structure that associates power consumption with particular portions of the application . As mentioned above different portions of an application may utilize compute node hardware in different ways thereby resulting in different levels of power consumption based on the application portion being executed. Power consumption for compute node hardware may be specified in units of Watts some other units of power or in the units of some other quantity having a known relationship to power such as for example energy CPU cycles and so on. The values used to represent power consumption in the power consumption profile may be actual measured values or estimated values based on measured values.

The hardware power consumption profile of represents a data structure that specifies power consumption for compute node hardware during performance of various processing operations. A processing operation is a task specified by an application or performed by a compute node in response to a task specified by an application. Such a task may be a single instruction or a set of multiple instructions.

For example a processing operation may be implemented as a single float multiply add instruction or a series of instructions processed when a cache miss occurs during application execution. Compute node hardware may include for example a compute node s processors computer memory adapter circuitry and other hardware as will occur those of skill in the art.

Readers will note that the hardware power consumption profile provides power consumption information of various processing operations for platform specific hardware. In such a manner the service node may use the hardware power consumption profile to translate processing operations specified by the application into power consumption information for various portions of the application executing on the platform specific hardware. Using different hardware power consumption profiles the service node may obtain different power consumption profiles for the application on the different hardware platforms even though the processing operations specified by the application may not change.

Using the power consumption profile for the application an application developer may discover that certain portions of the application consume power at undesirable levels. Accordingly profiling an application for power consumption during execution on a compute node according to embodiments of the present invention may also include altering the application in dependence upon the power consumption profile for the application and executing the altered application on the compute node.

In the example of the plurality of compute nodes are implemented in a parallel computer and are connected together using a plurality of data communications networks . The point to point network is optimized for point to point operations. The global combining network is optimized for collective operations. Although profiling an application for power consumption during execution on a compute node according to embodiments of the present invention is described above in terms of an architecture for a parallel computer readers will note that such an embodiment is for explanation only and not for limitation. In fact profiling an application for power consumption during execution on a compute node according to embodiments of the present invention may be implemented using a variety of computer system architectures including for example architectures for a stand alone compute node a cluster of nodes a distributed computing system a grid computing system and so on.

The arrangement of nodes networks and I O devices making up the exemplary system illustrated in are for explanation only not for limitation of the present invention. Data processing systems capable of profiling an application for power consumption during execution on a compute node according to embodiments of the present invention may include additional nodes networks devices and architectures not shown in as will occur to those of skill in the art. Although the parallel computer in the example of includes sixteen compute nodes readers will note that parallel computers capable of profiling an application for power consumption during execution on a compute node according to embodiments of the present invention may include any number of compute nodes. In addition to Ethernet and JTAG networks in such data processing systems may support many data communications protocols including for example TCP Transmission Control Protocol IP Internet Protocol and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Profiling an application for power consumption during execution on a compute node according to embodiments of the present invention may be implemented on a parallel computer among other types of exemplary systems. Such parallel computers may include thousands of such compute nodes. Each compute node is in turn itself a kind of computer composed of one or more computer processors its own computer memory and its own input output adapters. For further explanation therefore FIG. sets forth a block diagram of an exemplary compute node useful in a parallel computer capable of profiling an application for power consumption during execution on a compute node according to embodiments of the present invention. The compute node of includes one or more computer processors as well as random access memory RAM . The processors are connected to RAM through a high speed memory bus and through a bus adapter and an extension bus to other components of the compute node . Stored in RAM of is an application . The application is a set of computer program instructions that provide user level data processing.

Also stored in RAM is a power profiling module a set of computer program instructions capable of profiling an application for power consumption during execution on a compute node according to embodiments of the present invention. The power profiling module of operates generally for profiling an application for power consumption during execution on a compute node according to embodiments of the present invention by receiving the application for execution on a compute node identifying a hardware power consumption profile for the compute node the hardware power consumption profile specifying power consumption for compute node hardware during performance of various processing operations determining a power consumption profile for the application in dependence upon the application and the hardware power consumption profile for the compute node and reporting the power consumption profile for the application .

Also stored RAM is a messaging module a library of computer program instructions that carry out parallel communications among compute nodes including point to point operations as well as collective operations. User level applications such as application effect data communications with other applications running on other compute nodes by calling software routines in the messaging modules . A library of parallel communications routines may be developed from scratch for use in systems according to embodiments of the present invention using a traditional programming language such as the C programming language and using traditional programming methods to write parallel communications routines. Alternatively existing prior art libraries may be used such as for example the Message Passing Interface MPI library the Parallel Virtual Machine PVM library and the Aggregate Remote Memory Copy Interface ARMCI library.

Also stored in RAM is an operating system a module of computer program instructions and routines for an application program s access to other resources of the compute node. It is typical for an application program and parallel communications library in a compute node of a parallel computer to run a single thread of execution with no user login and no security issues because the thread is entitled to complete access to all resources of the node. The quantity and complexity of tasks to be performed by an operating system on a compute node in a parallel computer therefore are smaller and less complex than those of an operating system on a serial computer with many threads running simultaneously. In addition there is no video I O on the compute node of another factor that decreases the demands on the operating system. The operating system may therefore be quite lightweight by comparison with operating systems of general purpose computers a pared down version as it were or an operating system developed specifically for operations on a particular parallel computer. Operating systems that may usefully be improved simplified for use in a compute node include UNIX Linux Microsoft Vista AIX IBM s i5 OS and others as will occur to those of skill in the art.

The operating system of includes a performance monitor . The performance monitor is a service of the operating system that monitors the performance characteristics of the compute node and provides those performance characteristics to the power profiling module . The performance monitor monitors the performance characteristics of the compute node by receiving information from the components of the compute node and from various sensors and detectors not shown that measure certain performance aspects of those components operation. For example the performance monitor may maintain a counter that tracks the number of floating point operations performed by the processors . The performance monitor may also retrieve voltage and current measures from a voltage regulator that provides power processors or the memory modules implementing the RAM . The performance monitor may communicate with the components of the compute node through the processor or a service processor not shown that connects to each of the hardware components. Such connections may be implemented using the buses illustrated in or through out of band buses not shown such as for example an Inter Integrated Circuit I2C bus a JTAG network a System Management Bus SMBus and so on. The performance monitor may provide an application programming interface API through which other operating system software modules or software components not part of the operating system may access or subscribe to the performance monitoring services provided by the performance monitor .

The exemplary compute node of includes several communications adapters for implementing data communications with other nodes of a parallel computer. Such data communications may be carried out serially through RS 232 connections through external buses such as USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful in systems for profiling an application for power consumption during execution on a compute node according to embodiments of the present invention include modems for wired communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

The data communications adapters in the example of include a Gigabit Ethernet adapter that couples example compute node for data communications to a Gigabit Ethernet . Gigabit Ethernet is a network transmission standard defined in the IEEE 802.3 standard that provides a data rate of 1 billion bits per second one gigabit . Gigabit Ethernet is a variant of Ethernet that operates over multimode fiber optic cable single mode fiber optic cable or unshielded twisted pair.

The data communications adapters in the example of includes a JTAG Slave circuit that couples example compute node for data communications to a JTAG Master circuit . JTAG is the usual name used for the IEEE 1149.1 standard entitled Standard Test Access Port and Boundary Scan Architecture for test access ports used for testing printed circuit boards using boundary scan. JTAG is so widely adapted that at this time boundary scan is more or less synonymous with JTAG. JTAG is used not only for printed circuit boards but also for conducting boundary scans of integrated circuits and is also useful as a mechanism for debugging embedded systems providing a convenient back door into the system. The example compute node of may be all three of these It typically includes one or more integrated circuits installed on a printed circuit board and may be implemented as an embedded system having its own processor its own memory and its own I O capability. JTAG boundary scans through JTAG Slave may efficiently configure processor registers and memory in compute node for use in profiling an application for power consumption during execution on a compute node according to embodiments of the present invention.

The data communications adapters in the example of includes a Point To Point Adapter that couples example compute node for data communications to a network that is optimal for point to point message passing operations such as for example a network configured as a three dimensional torus or mesh. Point To Point Adapter provides data communications in six directions on three communications axes x y and z through six bidirectional links x x y y z and z .

The data communications adapters in the example of includes a Global Combining Network Adapter that couples example compute node for data communications to a network that is optimal for collective message passing operations on a global combining network configured for example as a binary tree. The Global Combining Network Adapter provides data communications through three bidirectional links two to children nodes and one to a parent node .

Example compute node includes two arithmetic logic units ALUs . ALU is a component of processor and a separate ALU is dedicated to the exclusive use of Global Combining Network Adapter for use in performing the arithmetic and logical functions of reduction operations. Computer program instructions of a reduction routine in parallel communications library may latch an instruction for an arithmetic or logical function into instruction register . When the arithmetic or logical function of a reduction operation is a sum or a logical or for example Global Combining Network Adapter may execute the arithmetic or logical operation by use of ALU in processor or typically much faster by use dedicated ALU .

The example compute node of includes a direct memory access DMA controller which is computer hardware for direct memory access and a DMA engine which is computer software for direct memory access. Direct memory access includes reading and writing to memory of compute nodes with reduced operational burden on the central processing units . A DMA transfer essentially copies a block of memory from one compute node to another. While the CPU may initiates the DMA transfer the CPU does not execute it. In the example of the DMA engine and the DMA controller support the messaging module .

Although the explanation above with reference to describes a compute node readers will note that a service node may be similarly configured and operate in the same manner as the compute node for scheduling applications for execution on a plurality of compute nodes of a parallel computer to manage temperature of the plurality of compute nodes during execution according to embodiments of the present invention. That is a service node may include one or more processors computer memory bus adapters and buses communications adapters and so on each operatively coupled together to providing processing for computer program instructions stored in computer memory.

For further explanation illustrates an exemplary Point To Point Adapter useful in systems capable of profiling an application for power consumption during execution on a compute node according to embodiments of the present invention. Point To Point Adapter is designed for use in a data communications network optimized for point to point operations a network that organizes compute nodes in a three dimensional torus or mesh. Point To Point Adapter in the example of provides data communication along an x axis through four unidirectional data communications links to and from the next node in the x direction and to and from the next node in the x direction . Point To Point Adapter also provides data communication along a y axis through four unidirectional data communications links to and from the next node in the y direction and to and from the next node in the y direction . Point To Point Adapter in also provides data communication along a z axis through four unidirectional data communications links to and from the next node in the z direction and to and from the next node in the z direction .

For further explanation illustrates an exemplary Global Combining Network Adapter useful in systems capable of profiling an application for power consumption during execution on a compute node according to embodiments of the present invention. Global Combining Network Adapter is designed for use in a network optimized for collective operations a network that organizes compute nodes of a parallel computer in a binary tree. Global Combining Network Adapter in the example of provides data communication to and from two children nodes through four unidirectional data communications links . Global Combining Network Adapter also provides data communication to and from a parent node through two unidirectional data communications links .

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for point to point operations useful in systems capable of profiling an application for power consumption during execution on a compute node in accordance with embodiments of the present invention. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with point to point data communications adapters similar to the one illustrated for example in with data communications links on three axes x y and z and to and fro in six directions x x y y z and z . The links and compute nodes are organized by this data communications network optimized for point to point operations into a three dimensional mesh . The mesh has wrap around links on each axis that connect the outermost compute nodes in the mesh on opposite sides of the mesh . These wrap around links form part of a torus . Each compute node in the torus has a location in the torus that is uniquely specified by a set of x y z coordinates. Readers will note that the wrap around links in the y and z directions have been omitted for clarity but are configured in a similar manner to the wrap around link illustrated in the x direction. For clarity of explanation the data communications network of is illustrated with only 27 compute nodes but readers will recognize that a data communications network optimized for point to point operations for use in profiling an application for power consumption during execution on a compute node in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for collective operations useful in systems capable of profiling an application for power consumption during execution on a compute node in accordance with embodiments of the present invention. The example data communications network of includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with global combining network adapters similar to the one illustrated for example in with each node typically providing data communications to and from two children nodes and data communications to and from a parent node with some exceptions. Nodes in a binary tree may be characterized as a physical root node branch nodes and leaf nodes . The root node has two children but no parent. The leaf nodes each has a parent but leaf nodes have no children. The branch nodes each has both a parent and two children. The links and compute nodes are thereby organized by this data communications network optimized for collective operations into a binary tree . For clarity of explanation the data communications network of is illustrated with only 31 compute nodes but readers will recognize that a data communications network optimized for collective operations for use in systems for profiling an application for power consumption during execution on a compute node in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

In the example of each node in the tree is assigned a unit identifier referred to as a rank . A node s rank uniquely identifies the node s location in the tree network for use in both point to point and collective operations in the tree network. The ranks in this example are assigned as integers beginning with 0 assigned to the root node 1 assigned to the first node in the second layer of the tree 2 assigned to the second node in the second layer of the tree 3 assigned to the first node in the third layer of the tree 4 assigned to the second node in the third layer of the tree and so on. For ease of illustration only the ranks of the first three layers of the tree are shown here but all compute nodes in the tree network are assigned a unique rank.

For further explanation sets forth a flow chart illustrating an exemplary method for profiling an application for power consumption during execution on a compute node according to embodiments of the present invention. Profiling an application for power consumption during execution on a compute node according to the method of may be carried out by a power profiling module installed on a stand along computer or a service node of a parallel computer such as for example the service described above. Such a parallel computer may include a plurality of compute nodes in a parallel computer connected together for data communications using a plurality of data communications networks. At least one of the data communications networks may be optimized for point to point operations and at least one of the data communications may be optimized for collective operations. The method of includes receiving an application for execution on a compute node. A service node may receive an application for execution on a compute node according to the method of by receiving an identifier for the application from a system administrator or a job file and retrieving the application matching the application identifier from data storage. The data storage may be directly connected to the service node through a storage drive adapter indirectly connected through a network or through any other means as will occur to those of skill in the art.

The method of includes identifying a hardware power consumption profile for the compute node. The hardware power consumption profile of represents a data structure that specifies power consumption for compute node hardware during performance of various processing operations . In such a manner the hardware power consumption profile provides power consumption information of various processing operations for platform specific hardware. The hardware power consumption profile may be used to translate processing operations specified by the application into power consumption information for those processing operations when performed by the platform specific hardware. Using different hardware power consumption profiles for different compute nodes therefore allows a service node to determine the different power consumptions that would occur by executing the application on different compute nodes.

In the example of each record of the hardware power consumption profile specifies a processing operation and a predefined power consumption value . As mentioned above a processing operation in the example of is a task specified by an application or performed by a compute node in response to a task specified by an application. Such a task may be a single instruction or a set of multiple instructions. For example a processing operation may be implemented as a single float multiply add instruction or a series of instructions processed when a cache miss occurs during application execution. In the example of a predefined power consumption value is a value represents the power consumption by a compute node when the associated processing operation is performed by the compute node. The predefined power consumption value of may be specified in units of Watts some other units of power or in the units of some other quantity having a known relationship to power such as for example energy CPU cycles and so on. The power consumption value of is predefined in the sense that previous measurements or estimation is used to determine the power consumption of performing a particular processing operation on a particular compute node. For further explanation of the hardware power consumption profile consider the following exemplary hardware power consumption profile 

Table 1 above illustrates an exemplary hardware power consumption profile for a particular compute node. The exemplary hardware power consumption profile above specifies that the compute node consumes 80 Watts of power while performing an addition operation on integers. In addition the exemplary hardware power consumption profile above specifies that the compute node consumes 120 Watts of power while performing a branch operation. The exemplary hardware power consumption profile above also specifies that the compute node consumes 150 Watts of power while performing a multiply add operation on floating point values. Readers will note that the exemplary hardware power consumption profile illustrated above is for explanation only and not for limitation but other hardware power consumption profiles may also be useful in exemplary embodiments of the present invention.

The method of also includes determining a power consumption profile for the application in dependence upon the application and the hardware power consumption profile for the compute node. Because different portions of an application may utilize compute node hardware in different ways different levels of power consumption typically occur during different portions of the application s execution sequence. The power consumption profile of for the application represents a data structure that associates power consumption with particular portions of the application . In the example of each record of the power consumption profile specifies a particular portion of the application using an application portion identifier and specifies a power consumption associated with that application portion. The application portion may be implemented as a single processing operation of the application or a group of processing operations such as for example a function or an application procedure. As mentioned above the power consumption of represents the level of power consumed during execution of the portion of the application associated with the power consumption in the power consumption profile record.

For further explanation consider the following exemplary power consumption profile for an exemplary application 

Table 2 above illustrates an exemplary power consumption profile for an application to be executed on a compute node. The exemplary power consumption profile above specifies that the portion of the application at memory address range AAA00000h AAA01FFFh consumes on average 90 Watts of power. The exemplary power consumption profile above specifies that the portion of the application at memory address range AAA02000h AAA03AFFh consumes on average 280 Watts of power. The exemplary power consumption profile above specifies that the portion of the application at memory address range AAA03B00h AAA04FFFh consumes on average 150 Watts of power. The exemplary power consumption profile above uses address ranges to specify portion of an application but readers will note that line numbers in application source code files may also be used along with any other implementation as will occur to those of skill in the art. Readers will also note generally that the exemplary power consumption profile illustrated above is for explanation only and not for limitation and that other power consumption profiles may also be useful in exemplary embodiments of the present invention.

In the method of determining a power consumption profile for the application includes identifying one or more processing operations specified by the application and looking up for each processing operation specified by the application a predefined power consumption value for that processing operation in the hardware power consumption profile . In the example of identifying one or more processing operations specified by the application and looking up for each processing operation specified by the application a predefined power consumption value for that processing operation may be carried out on a portion by portion basis for the application. In such a manner determining a power consumption profile for the application according to the method of may also include averaging the power consumption for all of the processing operations in a particular application portion and associating the average power consumption with that application portion in the power consumption profile .

The method of includes reporting the power consumption profile for the application . Reporting the power consumption profile for the application according to the method of may be carried out by rendering the power consumption profile on a user interface to a system administrator transmitting the power consumption profile to a system administrator in a message or storing the power consumption profile in data storage and notifying a system administrator of the profile s data storage location. In some other embodiments reporting the power consumption profile for the application according to the method of may also be carried out by annotating the source code version of the application with the power consumption for each portion of the application . Annotating the source code version of the application may be carried out by translating instruction addresses of the executable image of the application into source code line numbers using compilation information generated by the compiler used to create the application s executable image from the source code.

The explanation above with reference to describes profiling an application for power consumption without having to actually execute the application. The application need not be executed because the hardware power consumption profile may describe the power consumption on a particular hardware platform for the processing operations included in the application. In some other embodiments however an application power consumption profile may be generated based on the processing operations actually performed by a compute node during execution of the application including those operations not specifically specified by the application but that occur during application execution such as for example operating system error handlers cache miss operations and so on. For further explanation therefore sets forth a flow chart illustrating a further exemplary method for profiling an application for power consumption during execution on a compute node according to embodiments of the present invention.

The method of is similar to the method of . That is the method of includes receiving an application for execution on a compute node identifying a hardware power consumption profile for the compute node the hardware power consumption profile specifying power consumption for compute node hardware during performance of various processing operations determining a power consumption profile for the application in dependence upon the application and the hardware power consumption profile for the compute node and reporting the power consumption profile for the application . In the example of each record of the hardware power consumption profile specifies an executed processing operation and a power consumption that occurs when the associated processing operation is executed. Each record of the power consumption profile of specifies a particular portion of the application using an application portion identifier and specifies power consumption associated with that application portion.

In the method of however determining a power consumption profile for the application includes identifying one or more processing operations specified by the application and monitoring for each processing operation execution performance during execution of that processing operation . The execution performance of describes the processing operations actually executed on the compute node when the compute node executes a processing operation specified by the application . Readers will note that the processing operations specified by the application are not the only processing operations that occur during execution of the application. For example during execution of a processing operation specified by the application to load data from memory the operating system may attempt to retrieve the data from cache and encounter a cache miss. In such an example additional operating system processing operations for handling a cache miss are executed that would otherwise have not occurred had the data been stored in the cache.

Determining a power consumption profile for the application according to the method of also includes estimating for each processing operation using the hardware power consumption profile power consumption for that processing operation in dependence upon the execution performance for that processing operation . Estimating power consumption for that processing operation according to the method of may be carried out by locating values for power consumption associated in the hardware power consumption profile with the executed processing operations identified when monitoring the execution performance of the application . Similar to the method of determining power consumption profile for the application according to the method of may be carried out on a portion by portion basis for the application . In such a manner determining a power consumption profile for the application according to the method of may also include averaging the power consumption for all of the processing operations in a particular application portion and associating the average power consumption with that application portion in the power consumption profile .

Using a power consumption profile for an application an application developer may discover that certain portions of the application consume power at undesirable levels. In such cases the application developer may customize the application for a specific hardware platform in an effort to reduce overall application power consumption or peak power consumption levels for the application. For further explanation therefore sets forth a flow chart illustrating a further exemplary method for profiling an application for power consumption during execution on a compute node according to embodiments of the present invention.

The method of is similar to the method of . That is the method of includes receiving an application for execution on a compute node identifying a hardware power consumption profile for the compute node the hardware power consumption profile specifying power consumption for compute node hardware during performance of various processing operations determining a power consumption profile for the application in dependence upon the application and the hardware power consumption profile for the compute node and reporting the power consumption profile for the application .

The method of also includes altering the application in dependence upon the power consumption profile for the application . Altering the application according to the method of may be carried out by an application developer . An application developer may alter the application according to the method of by comparing the power consumption in the power consumption profile for various portions of the application with a power consumption threshold and modifying the portions of the application for which the power consumption exceeds the power consumption threshold to reduce power consumption during execution of those portions of the application . Such a power consumption threshold may be the same value for each portion of the application or be different for different portions of the application. Additionally the power consumption threshold may be a static threshold or one that changes dynamically based on the environment such as for example the power consumption of the other applications running on the compute node or the price of electricity. Readers will note that in addition to being carried out by an application developer computer software may also be used to alter the application in dependence upon the power consumption profile for the application . Using templates and various rulesets the software could replace certain application portions that consume too much power with lower power consuming sets of processing operations.

The method of also includes executing the altered application on the compute node. Executing the altered application on the compute node according to the method of may be carried out by transferring the application to the compute node and instructing the operating system on the compute node to schedule the application for execution on the processors of the compute node.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for profiling an application for power consumption during execution on a compute node. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on computer readable media for use with any suitable data processing system. Such computer readable media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

