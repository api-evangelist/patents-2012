---

title: Task-based approach to execution, monitoring and execution control of actions
abstract: In one aspect, a method includes receiving, at a computer, a request for a resource over an interface from a client, returning the resource from the computer to the client, receiving, at the computer, an action from the client based on the resource returned, returning a unique task instance that includes information about the action, enabling the client to poll the resource periodically and enabling the client to access affected resources. The affected resources include resources affected by the action.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09525754&OS=09525754&RS=09525754
owner: EMC IP HOLDING COMPANY LLC
number: 09525754
owner_city: Hopkinton
owner_country: US
publication_date: 20120928
---
A representational state transfer REST is a software architecture for distributed systems such as the world wide web WWW . If the REST software architecture conforms to specified constraints the architecture is considered to be RESTful.

In one aspect a method includes receiving at a computer a request for a resource over an interface from a client returning the resource from the computer to the client receiving at the computer an action from the client based on the resource returned returning a unique task instance that includes information about the action enabling the client to poll the resource periodically and enabling the client to access affected resources. The affected resources include resources affected by the action.

In another aspect an article includes a non transitory machine readable medium that stores executable instructions. The instructions cause a machine to receive from a client a request for a resource over an interface return the resource to the client receive an action from the client based on the resource returned return a unique task instance that includes information about the action enable the client to poll the resource periodically and enable the client to access affected resources. The affected resources include resources affected by the action.

In a further aspect an apparatus includes electronic hardware circuitry. The circuitry is configured to receive from a client a request for a resource over an interface return the resource to the client receive an action from the client based on the resource returned return a unique task instance that includes information about the action enable the client to poll the resource periodically and enable the client to access affected resources. The affected resources include resources affected by the action.

In previous implementations of RESTful application program interfaces APIs there is no task resource provided that includes consolidated action execution information and uniform resource identifiers URIs for action execution control. Instead clients use custom ad hoc approaches for each specific action use case in order to monitor and control action execution.

Described herein is a mechanism that allows a task based approach to execution monitoring and execution control of actions over a RESTful interface. The task resource described herein provides well defined convenient and generic way to monitor and control execution of complex operations by RESTful API clients.

As used herein a task resource is the same as a task. A task instance is particular instance of a task when task properties are set to specific values.

In many cases resources which expose RESTful interfaces implement complex operations which affect not only the resource itself but also several related resources. Such resource operations cannot be mapped to one of Hypertext Transfer Protocol HTTP commands e.g. GET PUT POST DELETE and so forth applicable directly to the resource uniform resource identifier URI . To support complex operations RESTful API allows defining special purpose actions in the resource representation which are exposed through their own URIs. To execute an action the client executes POST against an action URI. When an API server receives a request for action execution the server initiates asynchronous action execution and returns back to the client instance of a task resource with information about action execution status progress affected resources execution errors and set of URIs to control action execution.

A task is a special resource supported by the API and it is used to monitor and control execution of actions. A client can periodically request a representation of the task instance to get up to date information about action execution status and action execution progress. A task resource includes an URI of the action initiator and has complete information about the action. In addition task resource provides URIs to retrieve representation of resources affected by the action execution and to retrieve task execution errors. To control action execution a task resource has action URIs which allows clients to request suspend abort and resume of action execution. From the RESTful API client prospective an instance of a task resource returned from request to execute an action encapsulates complete data and control for the duration of action execution.

Referring to a system includes a client and a service . The client and the service are coupled together by an interface . In one example the interface is a RESTful interface. As will be described further herein the system is an example of a system used to implement a task.

Referring to an example of a process to use a task is a process . Process receives a request for a resource . For example the client requests a resource from the service identified by the resources unique uniform resource locator URL . In one particular example the client issues a Hypertext Transfer Protocol HTTP GET command.

Process returns the resource . For example the resource is returned by the service as an atom Extensible Markup Language XML representation of the resource that includes links to actions that may be performed on the resource.

Process receives an action . For example a client selects an action to perform on the resource and issues an HTTP Post command to the appropriate action link with a payload appropriate for the action.

Process returns a unique task instance . For example the service returns a unique instance of task represented in an atom XML format The task instance includes information about the action being performed. In particular the task instance includes a URI of the original resource that the action was executed against a current status of the action URI links to other resources affected by the action and a URI to the task.

The task instance also includes a start time end time expire time progress execution state initiator type ID description and so forth. The ID is a unique identifier for the task instance that distinguishes a task from all other tasks. The description is a brief textual description of the circumstances that caused the task to be generated. The initiator type is a copy of the type of initiator. The start time is the time the processing associated with the task started. The end time is the time associated with the task ends. In some examples no end time indicates that the task is still in progress. The expire time is the time the task is removed. The execution state is a property that contains a value from an extensible enumeration of possible states that the task may be in. Progress is an optimal representation of percent completion of a task.

Process enables polling of the resource periodically . For example the client can poll the resource periodically to determine if the action has reached a completion state. In other examples the task instance may expose URIs to abort suspend and resume the action and the client may make calls to these URIs to influence the action while it is still running.

Process enables access to affected resources . In further examples the task instance allows the client to access affected resources and errors during the execution of the action and after the execution of the action is complete. The affected resources include resources affected by the action that are included in the task instance which includes the original resource that the task was executed against. In other examples the affected resources may be accessed during and after the action has completed.

Referring to in one example a computer includes a processor a volatile memory a non volatile memory e.g. hard disk and the user interface UI e.g. a graphical user interface a mouse a keyboard a display touch screen and so forth . The non volatile memory stores computer instructions an operating system and data . In one example the computer instructions are executed by the processor out of volatile memory to perform all or part of the processes described herein e.g. process .

The processes described herein e.g. process are not limited to use with the hardware and software of they may find applicability in any computing or processing environment and with any type of machine or set of machines that is capable of running a computer program. The processes described herein may be implemented in hardware software or a combination of the two. The processes described herein may be implemented in computer programs executed on programmable computers machines that each includes a processor a non transitory machine readable medium or other article of manufacture that is readable by the processor including volatile and non volatile memory and or storage elements at least one input device and one or more output devices. Program code may be applied to data entered using an input device to perform any of the processes described herein and to generate output information.

The system may be implemented at least in part via a computer program product e.g. in a non transitory machine readable storage medium for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers . Each such program may be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the programs may be implemented in assembly or machine language. The language may be a compiled or an interpreted language and it may be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program may be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network. A computer program may be stored on a non transitory machine readable medium that is readable by a general or special purpose programmable computer for configuring and operating the computer when the non transitory machine readable medium is read by the computer to perform the processes described herein. For example the processes described herein may also be implemented as a non transitory machine readable storage medium configured with a computer program where upon execution instructions in the computer program cause the computer to operate in accordance with the processes. A non transitory machine readable medium may include but is not limited to a hard drive compact disc flash memory non volatile memory volatile memory magnetic diskette and so forth but does not include a transitory signal per se.

The processes described herein are not limited to the specific examples described. For example the process is not limited to the specific processing order of . Rather any of the processing blocks of may be re ordered combined or removed performed in parallel or in serial as necessary to achieve the results set forth above.

The processing blocks for example in the process associated with implementing the system may be performed by one or more programmable processors executing one or more computer programs to perform the functions of the system. All or part of the system may be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array and or an ASIC application specific integrated circuit . All or part of the system may be implemented using electronic hardware circuitry that include electronic devices such as for example at least one of a processor a memory programmable logic devices or logic gates.

Elements of different embodiments described herein may be combined to form other embodiments not specifically set forth above. Other embodiments not specifically described herein are also within the scope of the following claims.

