---

title: Providing access to application data
abstract: Disclosed are various embodiments for providing access to application data stored by multiple applications across multiple devices of a user. A request to store application data is obtained by a data storage service from an application associated with a user. The application is executed in a client computing device, and the request specifies a security credential and is obtained by way of a network. The application data is stored by the data storage service in response to the request to store. The data storage service may be configured to store data for multiple applications associated with the user, and each of the applications may be associated with a different security credential.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09104885&OS=09104885&RS=09104885
owner: Amazon Technologies, Inc.
number: 09104885
owner_city: Seattle
owner_country: US
publication_date: 20120302
---
Applications such as mobile applications game applications electronic book reader applications productivity applications communication applications multimedia applications and so on may utilize various types of application data. The application data may include settings and or other parameters that configure or customize the operation of the application.

The present disclosure relates to providing access to application data for applications. While application data is normally saved on the local device and used only by the application that has written it it may be desirable to make such application data accessible to multiple applications and multiple devices. As a non limiting example a user who has completed a certain achievement in a game may wish to save the current game state and make that game state available to another device. As another non limiting example a user may prefer that all applications executed in a particular mobile device be configured to use a certain audio volume setting.

Various embodiments of the present disclosure provide a centralized data store for the management of application data. This data store may provide access to the application data for the same application across multiple devices of a user. This data store may also provide access to application data for multiple applications to enable cross application preferences and or other configuration settings. The centralized application data may facilitate access to preferences among various dimensions including user device location and or other dimensions. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes a computing environment in data communication with a plurality of clients . . . N by way of a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing environment may comprise for example a server computer or any other system providing computing capability. A plurality of computing devices may be employed by the computing environment that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of computing devices together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. The computing environment may be operated by a third party entity relative to the users associated with the clients or the publishers or developers of the applications executed in the clients . That is to say the computing environment may be operated by an entity that is not a publisher of the applications executed in the clients . In some cases the computing environment may be equipped to provide cloud storage services or other services under a utility computing model. The use of the term cloud herein is not intended to be limiting.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store and an application data store that are accessible to the computing environment . The data store and the application data store may each be representative of a plurality of data stores as can be appreciated. The data stored in the data store and the application data store for example are associated with the operation of the various applications and or functional entities described below.

The components executed on the computing environment for example include a data storage service and other applications services processes systems engines or functionality not discussed in detail herein. The data storage service is executed to facilitate storage and retrieval of application data from the application data store . Such application data may encompass application settings and preferences saved application state data and or other data stored by client applications. The data storage service may be configured to authenticate the applications using application level security credentials such that applications may have access to their own data but not access to data from other applications. In some cases access preferences settings and or other data may be shared among multiple applications. In one embodiment the data storage service is associated with an identity provider and the application data of a user may be associated with the identity of the user as managed by the identity provider.

The data stored in the data store includes for example normalized preference configuration data category data location data device data user identity data and potentially other data. The normalized preference configuration data includes configuration data that relates to recognizing and translating normalized preferences stored by the data storage service . A normalized preference corresponds to a preference or setting that has been normalized so as to be applicable across multiple clients .

As a non limiting example various different clients may have different scales for audio or volume level. An 80 volume level for an electronic book reader may be relatively quiet while an 80 volume level for a web enabled television may be unacceptably loud. Accordingly the data storage service may be configured to translate 80 on a normalized volume scale to 100 on the electronic book reader and 40 on the web enabled television. The numerical figures given in this example are merely for purposes of illustration and are not intended to be limiting.

The category data may be employed for grouping cross application preferences and settings into various categories. For example the category data may group applications into categories such as games web browsing applications office applications and so on. A preference such as preferred language preferred volume level preferred text size etc. may be enabled on a per category basis across applications in one or more selected categories.

The location data may be employed to group cross application preferences and settings into location specific groupings. For example a client may include a global positioning system GPS or other location determining device and the client may be configured to report its location to the data storage service or other service associated with an identity provider. The location data may be used to identify patterns in locations and to recognize groupings based upon the patterns in location. Consequently preferences for applications may be divided into those which are applicable at a home location those which are applicable at a work location those which are applicable when traveling between home and work and vice versa and or preference location groupings.

The device data may be used to determine the capabilities of the various clients and platforms operating systems and so on for various clients . For example the device data may identify the different audio capabilities display capabilities input device capabilities and or other characteristics of the clients . To illustrate an electronic book reader may have capabilities that are different from a smartphone. The electronic book reader may for example have a larger screen than the smartphone. However the smartphone may have a GPS device and a camera which may be absent from the smartphone. Accordingly some preferences for applications executed in the electronic book reader may be in applicable to applications executed in the smartphone and vice versa. Nonetheless some preferences may be applicable to both platforms.

The user identity data may include various data regarding user identities which are managed by an identity provider. In some cases the operator of the computing environment and the data storage service may be the identity provider. In other cases the identity provider may be a separate entity. The user identity data may include for each user one or more master security credentials one or more application level security credentials and or other data. The master security credentials may correspond to the usernames passwords keys tokens etc. which are used by a user to gain access to the application data resources hosted by the data storage service on behalf of the user.

By contrast the application level security credentials are used by particular applications to access their respective application data hosted by the data storage service on behalf of the user. The application level security credentials which may include usernames passwords keys tokens folder identifiers etc. may differ among different applications of the user. This facilitates a secured separation among the applications so that one application of the user may be restricted from accessing data of other applications of the user. As a consequence it may be unnecessary to reveal the master security credential s to the individual applications thereby enhancing security for the master security credential s .

The application data store is configured to store various user data which may include application specific data cross application data location data device data and or other data. The application specific data corresponds to application data stored by a particular application of the user to which access by other applications of the user is restricted. The access may be completely restricted or the other applications may have read only access in some embodiments. The cross application data corresponds to application data that is accessible by multiple applications of the user. Such access may be read write access or read only access. Where the application specific data and the cross application data comprise preferences the data storage service may be configured to organize the preferences by category location device etc.

In some cases the data storage service may be configured to perform translation of preferences between device specific preferences and device normalized preferences. The location data may indicate which locations are applicable for certain application data such as preferences and or other data. The device data may indicate which clients or device platforms are applicable for certain application data such as preferences and or other data.

The clients . . . N are representative of a plurality of different client devices that may be coupled to the network . Each client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability. Each client may include a display . The display may comprise for example one or more devices such as cathode ray tubes CRTs liquid crystal display LCD screens gas plasma based flat panel displays LCD projectors or other types of display devices etc. Each client may also include various devices such as for example cameras accelerometers audio input devices audio output devices touchscreens GPS receivers cellular telephone transceivers and or other devices.

Each client may be configured to execute one or more applications . The applications may comprise for example mobile applications game applications productivity applications web browsing applications multimedia player applications social networking applications document viewing applications and or other applications. In some cases the applications may be configured to store preferences settings saved state data and or other data to the local application data of the client .

The client is configured to execute a storage client application in order to provide access to the data managed by the data storage service . The storage client application may be configured to facilitate creation and management of file folders and application level security credentials upload and download application data to and from the data storage service establish preferences and settings for applications obtain preferences and settings from applications synchronize local application data with remote application data and or perform other functions. Although the storage client application is described as a separate application executed in the client in some embodiments the storage client application may correspond to an application programming interface API with one or more code libraries. The applications and or the storage client application may be configured to generate a rendered user interface on the display .

Additionally in some embodiments the client may be configured to execute an operating system delegate in conjunction with the storage client application . The operating system delegate may be configured to enforce restrictions on access to the application specific data based upon the identity of the applications . Specific applications may be given read write access read access or no access to application specific data . The storage client application may be configured to present a master security credential or one or more token s indicating authentication in order to access the application specific data . Thus the operating system delegate may function as an intermediary between the application and the storage client application to facilitate access to the data stored in the application data store . The client may be configured to execute applications beyond those mentioned above.

Next a general description of the operation of the various components of the networked environment is provided. To begin a user creates an identity with an identity provider. In doing so the user establishes one or more master security credentials in the user identity data . The identity may be used for example for shopping email communication social networking and or other purposes. An application data store may be operated by or in conjunction with an identity provider. A user is able to create an account to store data in the application data store using the master security credential . In some cases the storage account may be automatically created as part of identity enrollment.

In a first embodiment the data storage service provides central management of data stored by various applications using different corresponding application level security credentials . The user enables access for a particular application using the master security credential . As part of this process one or more application level security credentials are created for the application . Such application level security credentials may be automatically generated or manually specified. The clients may communicate with the data storage service using the storage client application . The storage client application may employ hypertext transfer protocol HTTP HTTP secure HTTPS representational state transfer REST simple object access protocol SOAP JavaScript object notation JSON remote procedure call RPC and or other protocols to communicate with the data storage service .

The application level security credentials enable the respective applications to store and access application specific data and potentially cross application data . By assigning unique security credentials at the application level an application may be restricted from accessing data stored by another application . Such restrictions may be useful for privacy reasons and or to prevent intentional or accidental misuse of the data of the other application . In some cases the data of the applications may be organized into folders and subfolders where each application has a respective folder for application specific data .

As a non limiting example a game application may generate application data corresponding to a saved state. The saved state may correspond to a point in the game application that may require many hours and achievements to reach. Such data may be saved in the local application data but this would not allow a user to resume the game application from other devices. Alternatively or additionally the game application may save the data to a folder in the application data store as described herein using the data storage service . This allows the user to save the game state on one client and resume the game at that saved state on a different client .

In one example a publisher may have a folder for multiple applications using the same application level security credentials . In such a case the applications of the publisher may have access to the data stored by one another. Such applications may organize their application data in subfolders of the folder associated with the publisher.

Although the application data in the application data store may be protected from access by other applications in some cases it may be desirable to give access to other applications . Such data may be stored in the cross application data . Other applications may have read write access or read only access to the cross application data . Further in some cases other applications may have read write access or read only access to the application specific data stored by another application . Applications may be granted access to specific data as a group or individually as desired.

In a second embodiment the application data store may correspond to an application preference store rather than being organized specifically into application folders and subfolders. A user may configure various preferences for an application including for example text size audio volume level language user interface control configuration and so on. The user may desire that the preferences for an application as configured for one client be available in another client without having to manually duplicate the preferences in the local application data . Likewise the user may desire that the preferences for one application be available for another application .

To this end each application may obtain and store preferences and or settings by way of an application or API such as the storage client application . The storage client application interfaces with the data storage service over the network to store the preferences in the application data store . In one example the storage client application may be integrated with an operating system of the client . The preferences may be associated with an identity of a user maintained by an identity provider and secured using at least one master security credential .

The data storage service and or the storage client application may perform translation of a requested preference to the actual data which is provided to the application . For example a particular application may request a volume level from the storage client application . The volume level that is provided to the application may depend on the user the platform or device configuration of the client a category associated with the application a location of the client and or other factors. Information indicating the user platform device configuration category of application location etc. may be provided to the storage client application and or the data storage service along with the request to obtain the preference and or along with a request to store update the preference.

The data storage service may refer to various data in the data store in order to determine which preference to return to the requesting application . As an example the data storage service may be configured to translate a preference that is specific to a particular device platform or application to a normalized preference and vice versa using the normalized preference configuration data e.g. translate a 50 normalized volume to a 100 actual volume for a particular electronic book reader etc. . As another example the data storage service may be configured to update and return a preference according to the category of the requesting application as indicated in the category data e.g. run game applications in full screen mode by default etc. . As another example the data storage service may be configured to update and return a preference according to the platform or device of the client and the device data and or the device data associated with a stored preference e.g. turn off Wi Fi on a tablet computer when a certain application is used etc. . As yet another example the data storage service may be configured to update and return a preference according to the location of the requesting client and the location data and or the location data associated with a stored preference e.g. mute volume of an application on a laptop computer when at an office location etc. .

Referring next to shown is one example of a client according to one embodiment. The example client of corresponds to mobile device having a touchscreen display . Shown on the display is a rendered user interface generated by the storage client application . Although a mobile device is shown in the non limiting example of it is understood that variations of the rendered user interface may be rendered on any client including desktop computers laptop computers and so on. The rendered user interface has a title of Cloud Storage for Fred s Applications which indicates that the user is or may be logged into the data storage service with an identity of Fred. 

An application data listing indicates four file folders or subdivisions of the user data corresponding to three games Gardenville VeggieNinja Trees Zombies and a shared folder Shared Application Data . In this non limiting example each of the folder corresponding to the three games may be restricted such that each of the corresponding applications has access to its respective folder and data and not to the folders and data of the other applications . An exception may be provided for the Shared Application Data which may include preferences and settings which may be common to all applications or groups of applications .

Several user action controls and may be provided in the rendered user interface . The user action control is labeled Generate Change Folder ID and may be configured to enable creating or renaming a file folder. In some embodiments the name or identifier associated with the file folder may be considered part of the application level security credential for the file folder. The user action control is labeled Generate Change Folder Password and may be configured to enable creating or changing an application level security credential such as a password and so on. The application level security credential may be manually specified by way of a rendered user interface automatically generated by the storage client application or automatically generated by the data storage service .

The user action control is labeled Revoke Folder Access and may be configured to enable revocation of access to a folder by one or more applications . This may be desirable if it is discovered that an application has a security vulnerability is consuming too much storage space in the application data store or for other reasons. Other user action controls may be provided in other embodiments.

Turning now to shown is another example of a client according to one embodiment. The example client of corresponds to mobile device having a touchscreen display . Shown on the display is a rendered user interface generated by an application and the storage client application . The rendered user interface has a title of GardenVille which corresponds to a currently executed game application in the client .

In this non limiting example a dialog is generated by the storage client application as part of the rendered user interface . The dialog facilitates entry of security credentials and or other information to connect to the data storage service . To this end the dialog includes a provider entry component a folder identifier entry component a folder password entry component and or other components. The provider entry component facilitates user specification of a data storage provider which may include an internet protocol IP address a domain name a uniform resource locator URL and or other data. It is noted that the storage client application may be configured to function with multiple different data storage providers and communication between the storage client application and the different data storage services may be by way of a standard application level protocol.

The folder identifier entry component allows entry of a folder identifier which uniquely identifies an application data folder in the user data . The folder identifier may be considered an application level security credential . The folder password entry component allows entry of a folder password which secures the corresponding application data folder. The folder password also may be considered an application level security credential . A submit component may be provided in order to indicate that the entered data should be used to configure the access of an application to the data storage service .

In one embodiment an acquire image component may be provided to trigger acquisition of an image e.g. from an internal camera from a file from an email account etc. containing configuration information. For example the image may be of a QR code or other computer readable encoding. In some cases the image may contain text which may be recognized using optical character recognition OCR . The image may encode for example provider identification folder identification folder password and or other configuration parameters. With this embodiment configuration information from one client may be easily transferred to another a client via image presentation and capture without complicated data entry.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the storage client application according to various embodiments. In particular the flowchart of relates to configuration of applications to use particular folders. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the storage client application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the client according to one or more embodiments.

Beginning with box the storage client application determines whether configuration data is to be acquired from an image. If configuration data is to be acquired from an image the storage client application moves to box and acquires the folder information from a captured image. The folder information may include for example one or more application level security credentials and or other configuration parameters. The storage client application then proceeds to box .

If configuration data is not to be acquired from an image the storage client application instead moves from box to box . In box the storage client application obtains the folder information manually from the user. For example a rendered user interface such as that displayed in may be employed. The folder information may include for example one or more application level security credentials and or other configuration parameters. The storage client application then continues to box .

In box the storage client application configures the application to utilize the application data folder that previously exists. To this end the storage client application configures the application to use the particular data storage service and present the application level security credential s . Thereafter the portion of the storage client application ends.

Moving on to shown is a flowchart that provides one example of the operation of another portion of the storage client application according to various embodiments. In particular the flowchart of relates to folder creation in the user data . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the storage client application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the client according to one or more embodiments.

Beginning with box the storage client application authenticates the identity of the user with the identity provider using a master security credential obtained from the user. In box the storage client application sends a request to the data storage service by way of the network to create an application data folder in the application data store . The request may include the master security credential which may for example correspond to a token indicating a current authentication status. In box assuming that the application data folder was successfully created in the application data store the storage client application obtains an application level security credential from the data storage service . The application level security credential may correspond to a folder identifier folder password etc. The storage client application continues to box .

In box the storage client application configures the application to utilize the application data folder that is newly created. To this end the storage client application configures the application to use the particular data storage service and present the application level security credential s . Thereafter the portion of the storage client application ends.

Turning now to shown is a flowchart that provides one example of the operation of yet another portion of the storage client application according to various embodiments. In particular the flowchart of relates to various actions that may be performed by an application using the storage client application relative to an application data store . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the storage client application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the client according to one or more embodiments.

Beginning with box the storage client application authenticates with the data storage service using one or more application level security credentials . In box the storage client application stores application data in the application data store . In box the storage client application obtains application data from the application data store . In box the storage client application obtains a listing of application data that is stored in a folder containing application specific data . In box the storage client application obtains application data starting at a specified offset in a file.

In box the storage client application stores application data in the application data store at a specified offset in a file. Thereafter the portion of the storage client application ends. It is noted that the actions described in connection with the flowchart of may be performed relative to the local application data in some embodiments. The storage client application may then be configured to synchronize the local application data to the application data store . In such cases the application may write to and read from the local application data which may be synchronized on demand periodically when the application starts when the application exits or at other times.

Moving on to shown is a flowchart that provides one example of the operation of a portion of the data storage service according to various embodiments. In particular relates to cross application preferences that may be applied across multiple devices. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the data storage service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the data storage service obtains a preference from a first application executed in a first client . In box the data storage service stores the preference in the application data store in association with an identity of a user in the user data . In box the data storage service obtains a request for the preference from a second application executed in the first client . In box the data storage service sends the stored preference to the second application executed in the first client . In other words a preference from one application may be shared among different applications .

In box the data storage service obtains a request for the preference from the first application executed in a second client . In box the data storage service sends the stored preference to the first application executed in the second client . In other words a preference may be shared among different clients which may correspond to different devices and device platforms. In some cases the data storage service may perform a translation of the preference from a normalized preference to a specific preference applicable to the destination platform or device. Thereafter the portion of the data storage service ends.

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment comprises one or more computing devices . The computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the data storage service and potentially other applications. Also stored in the memory may be the data store the application data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

Referring next to shown is a schematic block diagram of the client according to an embodiment of the present disclosure. The client includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the client may comprise for example at least one client computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated. A display may also be coupled to the local interface .

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the application the storage client application and potentially other applications. Also stored in the memory may be the local application data and other data. In addition an operating system may be stored in the memory and executable by the processor .

Referring now to both is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also each of the processors may represent multiple processors and each of the memories may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the data storage service the applications the storage client application and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the storage client application and the data storage service . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the data storage service the applications and the storage client application that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

