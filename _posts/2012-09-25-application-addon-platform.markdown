---

title: Application add-on platform
abstract: An application add-on platform of a user device receives a query for add-ons from an application running on the user device. The application add-on platform notifies the application of one or more add-ons that are compatible with the application. The application add-on platform receives an access request from the application for an add-on of the one or more add-ons. The application add-on platform connects the application to the add-on.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08887181&OS=08887181&RS=08887181
owner: Amazon Technologies, Inc.
number: 08887181
owner_city: Reno
owner_country: US
publication_date: 20120925
---
Many modern devices have architectures that isolate processes from one another. This increases security but may reduce an ability of applications to share resources and libraries. Accordingly developers may implement the same or similar features repeatedly across different applications. This can increase resource utilization on the device such as an amount of resources that are used to upgrade applications on the devices an amount of memory that is used to store applications and so on.

An application add on platform is described herein as well as methods for using the application add on platform to enable applications to utilize application add ons. An application add on platform may be an application that manages application add ons and that connects applications to the managed application add ons. An application add on may be a set of software components that adds specific functionality to another typically larger software application. Examples of application add ons include plug ins extensions snap ins and themes. Add ons may be structured as independent applications that provide functionality to other applications.

Application add ons may register with the application add on platform when they are installed on a user device. When an application loads or sometime thereafter the application may query the application add on plaform for available application add ons. The application add on platform may then determine which of the registered application add ons are compatible with the application and may notify the application of the compatible add ons.

During execution of an application the application may send a request for an application add on to the application add on platform. In response the application add on platform may determine an address e.g. a memory address of the application add on as well as data describing an interface e.g. an application programming interface API for the application add on. The application add on platform may send this information to the application which may then use the address and the data describing the interface to communicate directly with the application add on. Thus the application add on platform may connect applications to application add ons.

In an example a Chinese language interface application add on may be registered with the application add on platform. Some or all applications installed on the user device may lack native support for the Chinese language. Any of these applications may query the application add on platform for use of the Chinese language interface add on. The application add on platform may then launch the Chinese language interface add on and connect some or all of the applications to the Chinese language interface add on.

The application add on platform may also manage updates also referred to as upgrades to registered add ons. This may be an automatic update mechanism. For example the application add on platform may query a host to inquire about updates to any of the add ons that are registered to the application add on platform. If there are updates for any of the add ons then the application add on platform may automatically download the updates and then apply them to the registered add ons.

Note that the application add on platform may be a distinct application. Add ons may be registered to the application add on platform rather than to any particular application that will utilize those application add ons. Thus the application add on platform may provide increased flexibility for cross utilization of add ons by applications. The application add on platform may additionally connect multiple applications to a single application add on enabling those applications to share usage of the application add on. This may conserve system resources while increasing the functionality of applications. Moreover the add on platform enables new features and functionality to be added to applications after those applications have been compiled built and or distributed to user devices. Such addition of functionality may be performed simply by installing a new add on and without updating the applications that will use the add on. This may free developers from implementing the same or similar features repeatedly for multiple different applications. Additionally this may enable developers to incrementally enhance or add functions to applications without updating the applications. Moreover the application add on platform may enable third parties to develop functionality for applications.

An application add on platform runs in the application add on platform process space . The application add on platform process space may be created when an operating system that provides the application environment is loaded. The application add on platform may then be loaded into the application add on platform process space . The application add on platform may run in a background of the operating system until it is called by an application.

Application add on platform may be responsible for connecting application add ons to applications. Application add on platform may additionally connect applications to other applications. Thus application add on platform may enable users and developers to plug an add on into an application or even to plug one application into other applications as a component or feature. Accordingly the application add on platform provides an open application interface for feature extensions that can be exploited by external developers to continuously improve existing applications. This can alleviate an application development schedule and reduce a development cycle for those applications.

Application process space may be created for an application when the application is instantiated. As part of a loading process the application may send a request to the add on platform for available add ons. Alternatively or additionally the application may query the application add on platform any time after it has loaded e.g. in response to a user command .

The application add on platform may determine what registered add ons are compatible with the application and may send a notification to the application reporting on the compatible add ons. At any time during the application s operation the application may request access to one of the compatible add ons from the application add on platform . The request may identify a particular operation of the add on that is requested or may simply request access to the add on. In response to the access request the application add on platform determines an address of the application add on .

If the application add on is not running then the application add on platform causes the application add on to be loaded. The application add on process space may be created and the application add on may be loaded into this application add on process space . The application add on may be a standalone application that can run independently on the user device. However some application add ons may lack features such as a user interface that are commonly found in larger applications.

The application add on may report its address e.g. its memory address the memory address of the application add on process space and so on to the application add on platform . The application add on platform may cache the add on s address and may notify the application of the add on s address. Additionally the application add on platform may maintain metadata associated with the application add on . This metadata may identify an interface e.g. an API of the application add on . For example the metadata may identify a syntax for messages that are to be sent to the application add on information that should be included in messages to the application add on calls to particular operations that can be performed by the application add on and so forth. This metadata or a subset of this metadata may be reported to the application along with the address of the application add on.

Once the application has the address and information describing the interface of the application add on the application may communicate directly with the application add on such as by sending a service request to the application add on . In one embodiment the application communicates directly with the application add on using standard inter process communication IPC protocols. For example the application may send remote procedure calls RPCs to the application add on communicate with the application add on using shared memory communicate with the application add on using shared files communicate using pipes and so on. The specific communication techniques that are available may depend on an operating system on which the application add on and application are running. For example the Android operating system provides a message passing system that enables applications to communicate across application boundaries. The message passing system provides applications with an ability to generate and exchange intent objects that may identify to another application actions and or data on which to operate. The message passing system further provides remote methods that make application procedure interfaces APIs accessible by other processes. An application and application add on running on the Android operating system may use the provided message passing system to communicate. Thus the application may use a remote method of the Android operating system for example to call an API of the application add on .

The service request may be addressed to the address of the application add on and may be formatted in accordance with the received data describing the interface of the application add on . The service request may be a command to perform a particular operation or set of operations and may include data to be operated on. The application add on may perform the requested operation and may send back a service response to the application which may include a result of the requested operation. Thus the application may use the application add on platform to initially establish a connection to the application add on but may not use the application add on platform for further communications or data exchanges with the application add on .

Note that a conventional application may also be used instead of an application add on. The conventional application may register with the application add on platform in the same manner as an application add on. The registration may identify features and operations of the application that it makes available for use by other applications. Thus any applications may make functions available for use by other applications using the application add on platform and any application may utilize functions provided by other applications.

An application add on platform runs in the application add on platform process space . A first application runs in the first application process space . Similarly a second application runs in the second application process space . Both the first application and the second application may query the application add on platform for available add ons. Additionally both the first application and second application may request access to the same application add on which may run in application add on process space .

Application add on platform may determine and select a version of the application add on that is compatible with both the first application and the second application . If a version of the application add on that is compatible with both applications is identified application add on platform may cause that version of the application add on to be loaded into the application add on process space . The application add on platform may then send data to both applications that enable those applications to communicate directly with the application add on. For example the application add on platform may send an address of the application add on and information on an interface of the application add on to both the first application and the second application .

Both the first application and the second application may then utilize the same instance of the application add on in parallel. Each application may send service requests to the application add on and may receive service responses from the application add on. Service requests may be placed into a queue of the application add on and the application add on may process service requests in accordance with a position in the queue e.g. using a first in first out FIFO model with or without considering request priority . Alternatively other models may be used for managing concurrent use of the application add on by multiple applications.

In one embodiment rather than communicating with the application add on directly the applications send service requests to application add on platform . Application add on platform may maintain a message queue for handling events and or messages between applications and add ons. Application add on platform may forward service requests of the applications to the application add on when these service requests reach a front of the message queue. Application add on may send service responses directly to the application that issued the service request or to the application add on platform for forwarding to the appropriate application. Providing a message queue by the application add on platform may free the application add on from providing such a message queue.

Add ons may be configured to report metadata to the application add on registrar when they are installed. Alternatively application add on registrar may query new add ons during or after installation of those add ons. Application add on registrar may receive metadata from an application add on that identifies an interface of the application add on. The identification of the interface may include commands that the add on understands data to include along with commands syntax for requesting particular operations and so on. In one embodiment the information on the add on s interface is data describing an application programming interface API of the add on.

The received metadata may additionally include version compatibility information. The version compatibility information may identify applications that are compatible with the version of the add on that is being installed as well as versions of those applications that are compatible with the version of the add on that is being installed. Note that an installation of a current version of an add on may include previous versions of the add on. Alternatively distinct versions of an application add on may be separately installed on the user device. Therefore if appropriate an older version of the add on may be launched e.g. to ensure compatibility with a particular application or applications .

The version compatibility information may also identify applications that are permitted to use the application add on. For example only applications that implement particular security features may be allowed to use a particular add on. This may ensure that security measures of the user device are complied with.

Note that applications other than application add ons may also register with the application add on platform. Such applications may identify add ons that they are compatible with as well as versions of those add ons that they are compatible with during the registration. If an application will provide external functionality to other applications then the application may register interface data for utilizing the application s interface e.g. that applications API .

In one embodiment compatibility determiner compares version compatibilities of installed applications to installed versions of add ons. If any add on versions are identified that are not supported by installed applications then compatibility determiner may remove e.g. uninstall those add on versions from the user device. Additionally if all installed applications support a newer version of an add on then an older version of the add on may be removed from the user device.

Application add on platform may receive queries from applications asking what registered add ons are available for use by those applications. In response to application add on platform receiving such a query compatibility determiner may examine the registered application add on metadata to determine which if any add ons are compatible with the application. The query may identify a version of the application that is in service. Compatibility determiner may compare the version of the application to the different available versions of registered add ons using the metadata. Alternatively the application coordinator may use a data structure such as a table that maps versions of add ons to compatible versions of applications. The application add on registrar may generate this data structure and may update the data structure as new applications and or add ons are installed on the user device.

Compatibility determiner may then send a report to the application identifying all of the add ons that are compatible with the version of the application. If a version of an application is compatible with multiple versions of an add on then a highest add on version that the application is compatible with may be reported to the application. Alternatively multiple compatible versions of add ons may be reported to the application.

The application may request access to a particular add on that it is compatible with. For example a user may request that the application perform a function that is actually provided by an add on rather than by the application itself. In response to such a user request the application may generate an add on access request and send the access request to the application add on platform . In response to application add on platform receiving such an add on access request application add on loader determines whether there are any compatible instances of the add on running. If the add on is not running or if only instances of the add on that are incompatible with the application are running then application add on loader will cause a new instance of the add on to be loaded. The new instance of the add on may be loaded in a new process space and may be a highest version of the application add on that is compatible with the application. Alternatively the application add on may be loaded in the application add on platform s process space. Once an add on is loaded application add on loader may cache an address of the add on.

Note that application add on loader may also load application add ons based on an anticipated use of those application add ons by applications. For example application add on loader may load one or more add ons that are compatible with an application when that application is loaded and or when that application queries the application add on platform for available add ons.

Application coordinator connects applications to loaded application add ons. This may include sending metadata to applications that identifies an address of an add on as well as sending data identifying an interface e.g. API of the add on. Once the application receives this data it may perform all subsequent communications associated with the add on directly with the add on e.g. without routing the communications through the application add on platform . Alternatively some or all subsequent communications may be routed through the application add on platform e.g. if a message queue provided by the application add on platform is used . Communications between applications and application add ons may be performed for example using an inter process communication IPC protocol.

Application add on updater may periodically e.g. every 5 minutes once a day once a week or at some other interval query a server to determine if any add ons that are registered to the application add on platform have available updates. Application add ons may identify an address of an update server to query for updates. Alternatively or additionally application add on updater may be configured with addresses of one or more servers that host multiple different add ons e.g. an add on repository . Accordingly application add on updater may query a single server or multiple servers for updates. If an update to a registered application add on is identified then the application add on updater may download the application add on update and or a new version of the application add on. Application add on updater may then apply the update to the already installed application add on or reinstall the new version of the application add on. As part of the updating and or reinstallation process application add on updater may modify registered application add on metadata associated with the updated application add on. Application add ons may be upgraded incrementally in this manner as new updates become available. These incremental upgrades may introduce new features that were not previously available to applications that utilize the application add ons. Thus new features can be added to applications without actually making any modifications to those applications.

The application add on SDK may additionally provide an ability to extend an application GUI e.g. provide a menu item on the application . For example the application add on SDK may provide a menu or button that is integrated into the application s GUI. The menu or button may indicate one or more application add ons that can be invoked and or specific operations provided by application add ons. By selecting a menu option or pressing a button associated with an application add on a user may cause the application to be connected to that application add on so that the application add on can perform one or more operations for the application. Thus any controls or features that are offered by an add on may appear as an integrated or built in feature of the application. This may provide easy access to invoke the application add on and may provide an intuitive interface for the user to utilize functions provided by the add ons.

In one embodiment the application add on platform is loaded at startup of a mobile operating system for a mobile device and runs in a background on the mobile operating system. Alternatively the application add on platform may not be loaded until it is requested. In such an embodiment the application add on SDK may additionally include instructions for loading the application add on platform.

The user device includes a processing device which may include one or more processors such as CPUs microcontrollers field programmable gate arrays or other types of processors. The user device also includes system memory which may correspond to any combination of volatile and or non volatile storage mechanisms. The system memory stores information which provides an operating system component various program modules such as application add on platform and or other components e.g. applications . The user device performs functions by using the processing device to execute instructions provided by the system memory .

The user device also includes a data storage device that may be composed of one or more types of removable storage and or one or more types of non removable storage. The data storage device includes a computer readable storage medium on which is stored one or more sets of instructions embodying any one or more of the methodologies or functions described herein. As shown instructions for the reader module may reside completely or at least partially within the computer readable storage medium system memory and or within the processing device during execution thereof by the user device the system memory and the processing device also constituting computer readable media. The user device may also include one or more input devices keyboard mouse device specialized selection keys etc. and one or more output devices displays printers audio output mechanisms etc. .

The user device may also include a network interface device such as a wireless modem to allow the user device to communicate via a wireless network e.g. such as provided by the wireless communication system with other computing devices such as a server system and or other user devices. The network interface device may be a wireless modem that allows the user device to handle both voice and non voice communications such as communications for text messages multimedia messages media downloads web browsing etc. with the wireless communication system . The wireless modem may provide network connectivity using any type of mobile network technology. The wireless modem may generate signals and send these signals to a power amplifier amp for amplification after which they are wirelessly transmitted via an antenna. In addition to sending data the antenna also receives data e.g. electronic publications and or state data which may be sent to a wireless modem and or transferred to the processing device .

The user devices may be portable computing devices and or non portable computing devices. In one embodiment the user devices correspond to user device of . Some examples of user devices are mobile phones running the Android iOS or Windows Mobile operating systems.

User devices may be connected to the network via a wireless communication system . The wireless communication system may be a wireless infrastructure that allows users to use the user devices to communicate with server system without being tethered to the server system via hardwired links. Wireless communications system may be a wireless fidelity WiFi hotspot connected with the network . Wireless communication system may alternatively be a wireless carrier system e.g. as provided by Verizon AT T T Mobile etc. that can be implemented using various data processing equipment communication towers etc. Alternatively or in addition the wireless communication system may rely on satellite technology to exchange information with the user devices . Other user devices may be connected to the network via a wired connection e.g. via an Ethernet connection .

In one embodiment the network architecture includes a communication enabling system not shown that serves as an intermediary in passing information between the server system and the wireless communication system . The communication enabling system may communicate with the wireless communication system e.g. a wireless carrier via a dedicated channel and may communicate with the server system via a non dedicated communication mechanism e.g. a public Wide Area Network WAN such as the Internet.

In one embodiment the user devices include one or more applications one or more application add ons and an application add on platform . The applications application add ons and application add on platform may run in separate and distinct process spaces which may be isolated from one another. The application add ons may provide services to applications . For example application add ons may provide functionality to applications that the applications do not natively support. The application add on platform may connect applications to application add ons .

The server system may include one or more machines e.g. one or more server computers routers gateways etc. that have processing and storage capabilities to provide server based functionality. The server system may be implemented by a single machine or a cluster of machines each of which may include data stores and or other data processing equipment. In one embodiment the server system includes one or more network based servers which may be hosted for example by network based hosting services such as Amazon s Elastic Compute Cloud EC2 .

The server system includes a server which may provide network accessible server based functionality. In one embodiment the server provides media items such as electronic books electronic magazines videos images applications add ons and so on to user device . The user devices may access the media store for example by navigating to particular web pages and selecting electronic publications for purchasing renting viewing etc. The user devices may additionally access the media store by executing and navigating a dedicated application for browsing and acquiring media items such as applications and or add ons. The server system delivers and the user devices receive media items that may include web pages ebooks applications add ons and so on via the network .

Note that embodiments of the present invention may apply to additional architectures other than the illustrated network architecture. For example embodiments of the present invention may be used in a client server environment in which the server system is a component of a wireless carrier. Alternatively the user devices may be set top boxes and the server system may be a cable head end. Embodiments may also apply to peer to peer environments in which one user device sends state data to other user devices for synchronization rather than relying on the server system to perform the synchronization.

For simplicity of explanation the methods are depicted and described as a series of acts. However acts in accordance with this disclosure can occur in various orders and or concurrently and with other acts not presented and described herein. Furthermore not all illustrated acts may be required to implement the methods in accordance with the disclosed subject matter. In addition those skilled in the art will understand and appreciate that the methods could alternatively be represented as a series of interrelated states via a state diagram or events. Additionally it should be appreciated that the methods disclosed in this specification are capable of being stored on an article of manufacture to facilitate transporting and transferring such methods to computing devices. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device or storage media.

At block the application add on platform notifies the application of those application add ons that are compatible with the application. At block the application add on platform receives a request from the application for access to an add on that the application is compatible with. At block the application add on platform determines an address and an interface e.g. an API of the application add on. This determination may be made by examining the registered metadata for the application add on. At block the application add on platform notifies the application of the add on s address and of the application add on s interface. For example the application add on platform may send the application data that identifies commands that can be sent to the add on a syntax for those commands and additional data that can be sent along with those commands. At block the application then communicates with the add on using the address and the data describing the add on s interface. The method then ends.

At block processing logic sends an access request for the add on to the application add on platform. At block processing logic receives the add on s address and information on an interface of the add on. At block the processing logic sends a service request to the add on using the received address and information on the add on s interface. The service request may be directed to the add on s address and may be formatted such that that the add on will be able to interpret the request and perform one or more operations based on the service request. In other words the composition of the message may be structured to comply with requirements of the application add on s interface. For example the service request may be a message having a specific header body payload and so forth. At block processing logic receives a service response from the add on. The service response may include an output of the requested operation.

At block processing logic receives a service request for a registered add on that the application is compatible with. At block processing logic determines whether the requested add on is running. If the application add on is running the method proceeds to block . Otherwise the method continues to block and processing logic loads the requested add on.

At block processing logic determines an address and an interface for the requested add on. At block processing logic notifies the application of the address and the interface for the requested add on. The application may then use this information to connect to the add on.

At block processing logic determines versions of the add on that are compatible with the first application and versions of the add on that are compatible with the second application. This may be performed by checking metadata associated with the add on and or metadata associated with the applications. Additionally or alternatively this may be performed by consulting a data structure that maps add ons to compatible or approved applications. At block processing logic determines whether there are any versions of the add on that are compatible with both the first application and the second application. If so the method continues to block . Otherwise the method proceeds to block .

At block processing logic loads a single instance of the requested add on. The single instance of the add on that is loaded is compatible with both the first application and the second application. At block processing logic connects the first application and the second application to the single instance of the add on.

At block processing logic loads a first instance of the requested add on that is compatible with the first application. At block processing logic loads a second instance of the requested add on that is compatible with the second application. At block processing logic connects the first application with the first instance of the add on and connects the second application with the second instance of the add on. The method then ends.

At block the application add on platform determines available add ons that are compatible with the application. The application add on platform then notifies the application of any compatible add ons .

At block the application receives a user request for an operation associated with one of the compatible add ons. The application then sends an access request for the add on to the application add on platform .

At block the application add on platform determines an address and an interface of the add on. The application add on platform then sends information on the address and the add on s interface to the application . Subsequently the application uses the address and interface information to send a service request to the application add on .

At block the application add on performs the requested operation. The application add on then sends a service response to the application . The application may send subsequent service requests to the application add on using the address and interface information. Accordingly the application may communicate directly with the application add on for all subsequent transactions once the application receives the information identifying how to communicate with the application add on from the application add on platform.

In the above description numerous details are set forth. It will be apparent however to one of ordinary skill in the art having the benefit of this disclosure that embodiments of the invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the description.

Some portions of the detailed description are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as querying determining notifying receiving communicating or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage devices.

Embodiments of the invention also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

