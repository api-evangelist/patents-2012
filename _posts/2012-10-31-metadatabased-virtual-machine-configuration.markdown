---

title: Metadata-based virtual machine configuration
abstract: Methods, systems, and apparatus, including computer programs encoded on computer storage media, for associating one or more of a plurality of metadata collections with one or more respective identifiers, wherein each metadata collection includes one or more pairings of metadata attributes with metadata values, and wherein each identifier is one of a project identifier, a tag identifier or an instance identifier; identifying, based on identifier information associated with a virtual machine instance, one or more metadata values to be provided to the virtual machine instance, wherein the identifier information specifies one or more of a project identifier, a tag identifier and an instance identifier, and wherein each identified metadata value belongs to a metadata collection associated with an identifier that is specified in the identifier information; and providing, to the virtual machine instance, the identified one or more metadata values.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09170834&OS=09170834&RS=09170834
owner: Google Inc.
number: 09170834
owner_city: Mountain View
owner_country: US
publication_date: 20121031
---
Cloud computing is network based computing in which typically large collections of servers housed in data centers or server farms provide computational resources and data storage as needed to end users. Some cloud computing services provide access to software applications such as word processors and other commonly used applications to end users who interface with the applications through web browsers or other client side software. Users electronic data files are usually stored in the server farm rather than on the users computing devices. Maintaining software applications and user data on a server farm simplifies management of end user computing devices. Some cloud computing services allow end users to execute software applications in virtual machines.

Users can define metadata e.g. pairings of metadata attributes and metadata values to be used in configuring virtual machine instances. As used in this specification the terms pairings of metadata attributes with metadata values and metadata key value pairs are used interchangeably. Each metadata key value pair can be associated with one or more identifiers. The identifiers can include for example a project identifier that references a particular project with which one or more virtual machine instances are associated an instance identifier that references a particular virtual machine instance or a tag identifier that references a particular tag with which one or more virtual machine instances are associated. Each metadata key value pair is stored in a metadata collection that is identified by a particular identifier. For example a metadata key value pair that is associated with a project identifier P and a tag identifier T is stored in both a first metadata collection that is identified by the project identifier P and a second metadata collection that is identified by the tag identifier T.

When initializing virtual machine instances users can associate each virtual machine instance with one or more identifiers e.g. a project identifier an instance identifier or a tag identifier as described above. Each virtual machine instance can obtain metadata for example from a metadata server. In some implementations a virtual machine instance that is associated with particular identifiers can obtain metadata that is also associated with the particular identifiers. Each virtual machine instance can apply the obtained metadata key value pairs to configure various settings associated with the respective virtual machine instance.

In general one aspect of the subject matter described in this specification can be embodied in methods that include the actions of associating one or more of a plurality of metadata collections with one or more respective identifiers wherein each metadata collection includes one or more pairings of metadata attributes with metadata values and wherein each identifier is one of a project identifier a tag identifier or an instance identifier identifying based on identifier information associated with a virtual machine instance one or more metadata values to be provided to the virtual machine instance wherein the identifier information specifies one or more of a project identifier a tag identifier and an instance identifier and wherein each identified metadata value belongs to a metadata collection associated with an identifier that is specified in the identifier information and providing to the virtual machine instance the identified one or more metadata values. Other embodiments of this aspect include corresponding systems apparatus and computer program products.

These and other embodiments can optionally include one or more of the following features. The method further includes receiving from the virtual machine instance a metadata query that includes the identifier information and identifying the one or more metadata values in response to receipt of the metadata query. The metadata query is communicated using a Hanging GET operation. The method further includes receiving data that includes one or more user specified identifiers and one or more user specified pairings of metadata values with metadata attributes generating a metadata collection that includes the one or more user specified pairings and associating the generated metadata collection with the user specified identifier. The metadata collections include a first metadata collection and a second metadata collection the first metadata collection being associated with a first identifier and including a pairing of a first metadata attribute with a first metadata value and the second metadata collection being associated with a second identifier and including a pairing of the first metadata attribute with a second metadata value the first metadata value being different from the second metadata value.

The method further includes providing both the first metadata value and the second metadata value to the virtual machine instance. The method further includes determining that the first metadata collection has a higher priority level than the second metadata collection based on an evaluation of the first identifier and the second identifier and providing the first metadata value and not the second metadata value to the virtual machine instance. The first identifier is an instance identifier or a tag identifier and the second identifier is a project identifier or the first identifier is an instance identifier and the second identifier is a tag identifier or a project identifier. The method further includes receiving data specifying an identifier and a new pairing of a metadata attribute with a metadata value and updating the metadata collection associated with the identifier specified in the data to include the new pairing.

Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. Virtual machine roles can be defined based on their respective tag identifiers. Users can specify metadata key value pairs and the specified metadata key value pairs can be used to collectively configure settings for one or more virtual machine instances. Settings and roles of virtual machine instances can be dynamically updated upon updating. Metadata can be associated with project identifiers or tag identifiers to simplify enforcement of common configurations and properties across multiple virtual machine instances. In cases when virtual machine instances do not access metadata associated with an instance identifier or if access to the metadata is prohibited by policy the auditing of virtual machine instances that use a standard configuration can be simplified.

The details of one or more embodiments of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

Each host machine executes a host operating system . A host operating system manages host machine resources. In this example host operating systems run software e.g. a virtual machine monitor VMM or a hypervisor that virtualizes the underlying host machine hardware and manages concurrent execution of one or more virtual machine VMs instances. In this example the host operating system manages two VM instances VM and VM while a different host operating system manages a single VM . VM instances can be migrated from one host machine to another host machine. In addition a single VM instance can be managed by multiple host machines. A host machine can in general manage multiple virtual machines however the quantity may be limited based on physical resources of the host machine.

Each VM instance provides an emulation of a physical hardware system which may but need not be based on the host machine hardware architecture. The simulated version of the hardware is referred to as virtual hardware e.g. virtual hardware and . Software that is executed by the virtual hardware is referred to as guest software. In some implementations guest software cannot determine if it is being executed by virtual hardware or by a physical host machine. If guest software executing in a VM instance or the VM instance itself is compromised malfunctions or aborts other VM instances executing on the host machine may not be affected. A host machine s microprocessor s can include processor level mechanisms to enable virtual hardware to execute software applications efficiently by allowing guest software instructions to be executed directly on the host machine s microprocessor without requiring code rewriting recompilation or instruction emulation.

Each VM instance e.g. VMs and is allocated a set of virtual memory pages from the virtual memory of the underlying host operating system and is allocated virtual disk blocks from one or more virtual disk drives for use by the guest software executing on the VM instance. For example host operating allocates memory pages and disk blocks to VM and VM and host operating system does the same for VM . In some implementations a given VM instance cannot access the virtual memory pages assigned to other VMs. For example VM cannot access memory pages that have been assigned to VM . A virtual disk drive can be persisted across VM instance restarts. Virtual disk blocks are allocated on physical disk drives coupled to host machines or available over the internal network for example. In addition to virtual memory and disk resources VM instances can be allocated network addresses through which their respective guest software can communicate with other processes reachable through the internal network or the Internet . For example guest software executing on VM can communicate with guest software executing on VM or VM . In some implementations each VM instance is allocated one or more unique Internet Protocol IP version 4 or version 6 addresses. Other address schemes are possible. The VM instance IP addresses are addressable on the internal network and in some implementations are addressable on the Internet if the addresses are advertised using a suitable routing protocol for instance.

A VM instance s guest software can include a guest operating system e.g. guest operating systems and which is software that controls the execution of respective guest software applications e.g. guest applications and within the VM instance and provides services to those applications. For example a guest operating system could be a variant of the UNIX operating system. Other operating systems e.g. Microsoft Windows and different versions of these operating systems can be used as the guest operating system. Each VM instance can execute the same guest operating system or different guest operating systems. In further implementations a VM instance does not require a guest operating system in order to execute guest software applications. A guest operating system s access to resources such as networks and virtual disk storage is controlled by the underlying host operating system.

By way of illustration and with reference to virtual machine when the guest application or guest operating system attempts to perform an input output operation on a virtual disk initiate network communication or perform a privileged operation for example the virtual hardware is interrupted so that the host operating system can perform the action on behalf of the virtual machine . The host operating system can perform these actions with a process that executes in kernel process space user process space or both.

The kernel process space is virtual memory reserved for the host operating system s kernel which can include kernel extensions and device drivers for instance. The kernel process space has elevated privileges sometimes referred to as supervisor mode that is the kernel can perform certain privileged operations that are off limits to processes running in the user process space . Examples of privileged operations include access to different address spaces access to special functional processor units in the host machine such as memory management units and so on. The user process space is a separate portion of virtual memory reserved for user mode processes. User mode processes cannot perform privileged operations directly.

In various implementations a portion of VM instance network communication functionality is implemented in a communication process e.g. communication process . In some implementations the communication process executes in the user process space e.g. user process space of a host operating system e.g. host operating system . In other implementations the communication process can execute in the kernel process space e.g. kernel process space of the host operating system. In yet further implementations some portion of the communication process executes in the user process space and another portion executes in the kernel process space.

The system includes a metadata server that manages and provides access to metadata for VM instances in the system . The metadata server can be implemented as one or more computer programs installed on one or more computers in system . The metadata server can for example be installed on a particular host machine. The metadata server can also be implemented as a VM instance in the system . Generally the metadata server is located in the same datacenter as VM instances that the metadata server services although the metadata server can also be located elsewhere and be for example accessible over the Internet.

Metadata can be written to and read from the metadata server using any appropriate network communications protocol. In some implementations the read and write commands are implemented using conventional hypertext transfer protocol HTTP GET and PUT commands. In some implementations users can provide custom metadata to the metadata server using an Application Programming Interface API .

Each element of metadata is a key value pair. The key or attribute uniquely identifies a type of metadata. The value can be one or more pieces of data for example text strings. For example a user can specify a metadata key hostname and a corresponding metadata value myinst.myproject.mydomain.internal. Users can also associate each key value pair with one or more respective identifiers. In some implementations the one or more identifiers include a project identifier an instance identifier or a tag identifier. For example a project identifier can reference a particular project that was created by a user. An instance identifier can reference a particular virtual machine instance. A tag identifier can reference a particular tag e.g. front end webserver or sql server with which one or more virtual machines instances are associated. In some implementations users can specify custom identifiers that can be associated with key value pairs. For example a user can specify a machine type identifier that can be associated with metadata key hostname. 

In some implementations access to metadata that is associated with one or more identifiers is restricted to VM instances that are also associated with the one or more identifiers. For example a VM instance that is associated with a project identifier P can access metadata associated with the project identifier P but not metadata associated with a project identifier P. Similarly similar tag identifiers can be associated with different project identifiers. Thus for example a first tag identifier front end webserver can be associated with a project identifier P while a second tag identifier front end webserver can be associated with a project identifier P. In this example metadata associated with the first tag identifier front end webserver in the project P has no relation to metadata associated with the second tag identifier front end webserver in the project P. Thus VM instances that are associated with the project identifier P cannot access metadata that is associated with the project identifier P. Similarly VM instances that are associated with the project identifier P cannot access metadata that is associated with the project identifier P. This is a useful property for a multi tenant system as it ensures metadata remains confidential and is not visible to VM instances that are not associated with the proper identifiers.

The metadata server is configured to receive user specified key value pairs and their corresponding identifiers. In some implementations the metadata server categorizes and stores received key value pairs in one or more metadata collections based on their respective identifiers. For example a key value pair that is associated with a project identifier P and a tag identifier T can be stored in a first metadata collection that corresponds to the project identifier P and a second metadata collection that corresponds to the tag identifier T.

The metadata server is also configured to receive queries from VM instances requesting metadata. Users can customize the configuration of VM instances running in the system by associating the VM instances with one or more respective identifiers e.g. a project identifier an instance identifier or a tag identifier as described above. For example a user can specify that a VM instance be associated with a project identifier P an instance identifier M and tag identifiers sql server and front end webserver. In some implementations each VM instance can be associated with only one project identifier.

At startup the VM instance can query the metadata server to obtain metadata that is associated with the same identifiers that are associated with the VM instance. Thus for example a VM instance associated with a project identifier P an instance identifier M and tag identifiers sql server and front end webserver can query the metadata server to obtain metadata that is also associated with the project identifier P the instance identifier M and the tag identifiers sql server and front end webserver. In response to receiving the query the metadata server can identify metadata collections that respectively correspond to the project identifier P the instance identifier M and the tag identifiers sql server and front end webserver. The metadata server can provide metadata that was categorized in the identified metadata collections to the VM instance. The VM instance can apply the received metadata to configure various settings associated with the VM instance.

For example a user can associate a first metadata key sshKeys and corresponding value e.g. joe ssh rsa that describes user accounts and corresponding public SSH keys with a project identifier P. The user can also associate a second metadata key allowedHosts and corresponding value e.g. 192.0.2.24 30 that describes Internet Protocol IP addresses that are allowed to connect to a VM instance with the project identifier P. The user can then associate a third metadata key startupScript and corresponding value e.g. a shell script that configures and starts a webserver with a tag identifier web. Finally the user can associate a fourth metadata key allowedHosts and corresponding value e.g. 0.0.0.0 0 that describes IP addresses that are allowed to connect to a VM instance with an instance identifier shell. 

In some implementations users can specify particular identifiers to be associated with one or more VM instances using an Application Programming Interface API . A system component in each VM instance is configured to obtain the user specified identifiers and to associate the identifiers with the respective VM instance.

A user can initialize a VM instance and can associate the VM instance with a project identifier P and an instance identifier shell. At startup the VM instance can query the metadata server to obtain metadata that is associated with the project identifier P and the instance identifier shell. In response to the query the metadata server can provide the VM instance with metadata associated with the project identifier P e.g. the first and second metadata key value pairs and metadata associated with the instance identifier shell e.g. the fourth metadata key value pair. In some implementations the metadata server provides the VM instance with respective Uniform Resource Locator URL paths that reference the requested metadata. For example the metadata server can provide a first URL e.g. v1beta computemetadata project attributes sshKeys that references the sshKeys key value pair associated with the project identifier P a second URL e.g. v1beta computemetadata project attributes allowedHosts that references the allowedHosts key value pair associated with the project identifier P and a third URL e.g. v1beta computemetadata instance attributes allowedHosts that references the allowedHosts key value pair associated with the instance identifier shell. The VM instance can then process the received metadata to configure the VM instance. In this example if the user had associated the VM instance with a tag identifier web then the metadata server would also provide the VM instance with a fourth URL e.g. v1beta computemetadata tags web attributes startupScript that references the startupScript key value pair associated with the tag identifier web. 

In some instances a metadata conflict may arise when different values are specified for a metadata key that is associated with more than one metadata collection e.g. with more than one identifier and when a VM instance is associated with those identifiers. As described in the example above the second metadata key allowedHosts which is associated with the project identifier P has a corresponding value 192.0.2.24 30 while the fourth metadata key allowedHosts which is associated with the instance identifier shell has a corresponding value 0.0.0.0 0. In this example since the VM instance is associated with the project identifier P and the instance identifier shell there is a conflict as to whether the metadata value corresponding to the second metadata key allowedHosts e.g. 192.0.2.24 30 or the fourth metadata key allowedHosts e.g. 0.0.0.0 0 is used to configure the VM instance.

In some implementations the metadata server provides all conflicting metadata to the VM instance and the VM instance itself determines which metadata value is used to configure the VM instance. In some implementations the metadata server determines which metadata key value pair has a higher priority level by evaluating respective identifiers associated with the metadata key value pairs and provides to the VM instance the metadata key value pair that is associated with the higher priority level. In some implementations instance identifiers and tag identifiers are prioritized higher than project identifiers. In some implementations instance identifiers are prioritized higher than both tag identifiers and project identifiers.

In some implementations users can dynamically reconfigure VM instances by updating metadata collections. For example a user can specify new metadata key value pairs or the user can update metadata values for existing metadata keys. VM instances can be configured to automatically query the metadata server to obtain the new or updated metadata as described below in reference to . The VM instances can use the obtained metadata to reconfigure various settings associated with the VM instance.

In some implementations each VM instance e.g. VM or is paired with a distinct metadata server e.g. the metadata server . In some implementations each host machine e.g. host machines or is paired with a distinct metadata server e.g. the metadata server . In some implementations the metadata server e.g. the metadata server is configured as a distributed system.

A user operating a user device provides metadata e.g. key value pairs and one or more corresponding identifiers to a metadata server as described above . In some implementations users can provide values for a metadata key e.g. attached disks to specify a list of ephemeral and persistent disks and can associate the metadata with one or more identifiers to configure VM instances that are also associated with the one or more identifiers to use the identified ephemeral and persistent disks. Other examples of metadata for which users can provide customized values include a metadata key e.g. description to specify a description of an instance a metadata key e.g. domain to specify a domain of a VM instance hostname a metadata key e.g. hostname to specify a host name for an instance a metadata key e.g. image to specify an image to be used for initializing a VM instance.

Additionally users can provide customized values for a metadata key e.g. machine type that identifies a machine type e.g. a machine having a particular number of Central Processing Units CPUs and memory configuration a metadata key e.g. network to specify network information a metadata key e.g. zone to specify a zone e.g. time zone. Further users can provide customized values for a metadata key e.g. sshKeys to specify a list of Secure Shell SSH keys that can be used to connect to an instance a metadata key e.g. startup script to specify a startup script to execute when an instance starts a metadata key e.g. startup script url to specify a URL Uniform Resource Locator of a startup script to execute when an instance starts.

The metadata server associates one or more metadata collections with respective identifiers . As described above in some implementations the metadata server categorizes and stores the received metadata into one or more respective metadata collections based on the identifiers corresponding to the received metadata. Thus for example the metadata server can categorize and store all received metadata that is associated with a particular project identifier e.g. P into a first metadata collection and can associate the first metadata collection with the particular project identifier e.g. P. Similarly the metadata server can categorize and store all received metadata that is associated with a particular tag identifier e.g. T into a second metadata collection and can associate the second metadata collection with the particular tag identifier e.g. T.

A VM instance that is associated with particular identifiers sends a metadata query to the metadata server to obtain metadata that is also associated with the particular identifiers . In some implementations a VM instance is configured to query the metadata server for metadata when the VM instance is initialized e.g. at startup. In some implementations a VM instance is configured to query the metadata server for metadata at specified time intervals for example as specified in a cron job.

In some implementations a VM instance is configured to query the metadata server using a Hanging GET operation. For example the VM instance can use the conventional hypertext transfer protocol HTTP GET operation to request metadata. In situations where the metadata server has already provided the VM instance with metadata the VM instance can hang or maintain the HTTP GET connection to continue waiting until the metadata server has new or updated metadata to provide the VM instance. In such implementations if the HTTP GET connection is closed due to inactivity e.g. a time out the VM instance can be configured to re establish the connection and continue waiting for new or updated metadata.

The metadata server receives the query requesting metadata associated with particular identifiers as described above . The metadata server can communicate data e.g. queries and metadata using any appropriate network communications protocol or using conventional hypertext transfer protocol HTTP GET and PUT commands.

The metadata server identifies metadata responsive to the metadata query . The metadata server can identify one or more metadata collections that respectively correspond to the particular identifiers as described above in reference to .

The metadata server provides the metadata responsive to the query to the VM instance . The metadata server can provide metadata that was categorized and stored in the identified metadata collections to the VM instance as described above.

The VM instance receives and applies the metadata to configure the VM instance . In some implementations the VM instance configures itself by updating a particular setting associated with the VM instance for example by updating data in a particular file. For example the VM instance can receive a metadata key hostname and its corresponding value example.com. Based on the key hostname the VM instance can be configured to update a particular file e.g. etc hostname with the value example.com. Upon updating the file etc hostname the VM instance can reinitialize its networking configuration so that the VM instance domain corresponds to example.com. 

The system associates one or more metadata collections with respective identifiers as described above .

The system receives a metadata query requesting metadata associated with particular identifiers as described above . For example the system can receive the query from a VM instance that is also associated with the particular identifiers.

The data processing apparatus also includes hardware or firmware devices including one or more processors one or more additional devices a computer readable storage medium a communication interface and optionally one or more user interface devices . Each processor is capable of processing instructions for execution within the data processing apparatus . In some implementations the processor is a single or multi threaded processor. Each processor is capable of processing instructions stored on the computer readable storage medium or on a storage device such as one of the additional devices . The data processing apparatus uses its communication interface to communicate with one or more computers for example over a network . Examples of user interface devices include a display a camera a speaker a microphone a tactile feedback device a keyboard and a mouse. The data processing apparatus can store instructions that implement operations associated with the modules described above for example on the computer readable storage medium or one or more additional devices for example one or more of a floppy disk device a hard disk device an optical disk device or a tape device.

Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry in tangibly embodied computer software or firmware in computer hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on a tangible non transitory program carrier for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage medium can be a machine readable storage device a machine readable storage substrate a random or serial access memory device or a combination of one or more of them.

The term data processing apparatus encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can include special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit . The apparatus can also include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them.

A computer program which may also be referred to or described as a program software a software application a module a software module a script or code can be written in any form of programming language including compiled or interpreted languages or declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Computers suitable for the execution of a computer program include by way of example can be based on general or special purpose microprocessors or both or any other kind of central processing unit. Generally a central processing unit will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few.

Computer readable media suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any invention or of what may be claimed but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous.

