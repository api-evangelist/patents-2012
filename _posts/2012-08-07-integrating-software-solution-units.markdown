---

title: Integrating software solution units
abstract: In one embodiment, a proxy transactional context corresponding to a transactional context of a first software solution unit is generated. Further, a business object of a second software solution unit corresponding to the proxy transactional context is retrieved. Furthermore, the assignment of the retrieved business object to a business object of the first software solution unit is defined and the defined assignment is stored in the proxy data object. The proxy transactional context may be accessed using a remote function call and upon executing the proxy transactional context, the program returns to the transactional context. Thereby, the first software solution unit is integrated with the second software solution unit without disrupting the transactional context of the first software solution unit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08990836&OS=08990836&RS=08990836
owner: SAP SE
number: 08990836
owner_city: Walldorf
owner_country: DE
publication_date: 20120807
---
Embodiments generally relate to computer systems and more particularly to methods and systems to integrate software solution units.

Business applications can be implemented as software solution units such as an on premises solution unit which is installed and associated data is stored on computers in the premises of an organization for executing a business application or as an on demand solution unit in which the software and associated data pertaining to the business application are centrally stored on a remote facility. Organizations select on premise solutions and on demand solutions for different business applications considering the requirements of the business application and the pros and cons of the solutions. However business applications implemented as an on premise solution unit such as a supplier lifecycle management SLC may require on demand solution data to significantly improve the efficiency and effectiveness of the supply chains. Therefore there is an increasing demand for integrating software solution units. In this regard it may be required to store the data of the one software solution unit in another software solution unit. However storing the data of the one software solution unit in another disrupts transactional context of the software solution unit at which the data is received which is impermissible since the data in the transactional context could be altered or lost.

Embodiments of techniques to integrate software solution units are described herein. According to various embodiments the software solution units can be on premise solution units and on demand solution units. The on demand solution or software as a service SaaS is a software unit in which software and associated data pertaining to a business application are centrally stored on a remote facility such as a cloud. The cloud storage is a model of networked online storage where data is stored on multiple virtual servers. On the other hand the on premises solution unit is installed and associated data is stored on computers in the premises of a user or organization rather than at the remote facility. According to one embodiment the software solution units are integrated without disrupting transactional contexts of the software solution units.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one of the one or more embodiments. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

In one embodiment the first software solution unit is integrated with the second software solution unit without disrupting the transactional context . The proxy transactional context corresponding to the transactional context is generated by a trigger by the transactional context . The proxy transactional context is generated in the process of integrating the first software solution unit and the second software solution unit so as to not disrupt the transactional context of the first software solution unit . The proxy transactional context serves as a tool to mix up the transactional data of both first software solution unit and the second software solution unit in a non disruptive way. For example the proxy transactional context can be generated by creating another server session running in parallel to the main session that the transactional context e.g. transaction context of first software unit is processed in. Further the business object corresponding to a business object associated with the proxy transactional context is retrieved. Furthermore assignment of the retrieved business object to the business object is defined using the proxy transactional context . The defined assignment is stored in the proxy data object to integrate the first software solution unit and the second software solution unit .

In one embodiment the proxy transactional context including details of the defined assignment may be accessed or called or executed using a technique such as but not limited to a remote function call. Further upon executing the proxy transactional context the program returns to the transactional context of the first software solution unit . The transactional context is not altered or lost due to the execution of the proxy transactional context and thereby the transactional context is not disrupted because of the integration of the first software solution unit and the second software solution unit .

At step a proxy transactional context corresponding to a transactional context of the first software solution unit is generated at the first software solution unit. The transactional context includes a plurality of business operations performed on one or more business objects during a business transaction in the first software solution unit. For example the on premise transactional context of the SLC unit may include transaction details of the business process such as maintaining supplier data registering supplier qualifying supplier managing supplier portfolio and the like. Considering an example of the on premise transactional context of maintaining supplier data at the on premise solution unit the proxy transactional context corresponding to the transactional context of maintaining supplier data is generated. In one exemplary embodiment the proxy transactional context is generated when the on premise transactional context triggers to generate the proxy transactional context.

At step a business object of the second software solution unit corresponding to the proxy transactional context is retrieved. For example the on demand business object corresponding to maintaining updated supplier s data e.g. supplier development business object of the on demand solution unit is retrieved at the on premise solution unit. In one exemplary embodiment the business object of the second software solution unit is retrieved using one of the techniques such as but not limited to a representational state transfer REST a simple object access protocol SOAP a web services description language WSDL and an enterprise service oriented architecture ESOA .

At step assignment of the retrieved business object to a business object of the first software solution unit is defined using the proxy transactional context without disrupting the transactional context of the first software solution unit. For example the supplier development business object e.g. the on demand business object including the latest supplier data is assigned to the on premise business object associated with maintaining the supplier s data. At step the defined assignment is stored in a proxy data object to integrate the first software solution unit e.g. on premise solution unit with the second software solution unit e.g. on demand solution unit . In one exemplary embodiment the proxy data object resides in the first software solution unit.

In one embodiment the proxy transactional context may be accessed or called or executed using a technique such as but not limited to a remote function call. Since the proxy transactional context is called by the transactional context of the first software solution unit the proxy transactional context may also be referred to as a slave transactional context and the transactional context of the first software solution unit as a master transactional context. Further upon executing the proxy transactional context the program returns to the transactional context of the first software solution unit. The transactional context is not altered or lost due to the execution of the proxy transactional context and thereby the transactional context is not disrupted because of the integration of the first software solution unit and the second software solution unit.

In another exemplary embodiment if the data of the on premise solution unit is to be stored in the on demand solution unit a proxy transactional context corresponding to the on demand solution unit is generated and a business object of the on premise solution unit which is corresponding to a business object of the proxy transactional context is retrieved. Further the retrieved business object is assigned to the business object of the on demand solution unit and same is stored in a proxy business object of the on demand solution unit. In yet another exemplary embodiment two on premise software solution units can be integrated using corresponding proxy business objects. Also in another exemplary embodiment two on demand solution units can be integrated using corresponding proxy business objects.

In one exemplary embodiment the proxy data objects e.g. and reside in the corresponding software solution units e.g. and . Further the software solution units e.g. and include one or more business objects on which a defined set of operations associated with the software solution units e.g. and are executed. The data transaction between the one or more business objects during the execution of the defined set of operations is known as a transactional context. In other words the transactional context logically envelops the operations e.g. business processes performed on the one or more business objects during a transaction.

For example considering integration of the on premise solution unit and the on demand solution unit a proxy transactional context corresponding to the transactional context of the on premise solution unit is generated. In one exemplary embodiment the proxy transactional context includes an assignment to the on premise transactional context including the identities of the one or more on premise business objects pertaining to the on premise transactional context. Further an on demand business object of the on demand solution unit corresponding to the proxy transactional context is retrieved. In other words the on demand business object corresponding to the on premise business object associated with the proxy transactional context is retrieved.

In one embodiment assignment of the on demand business object to the on premise business object is defined using the proxy transactional context without disrupting the on premise transactional context. In other words the on demand solution unit is assigned to the on premise business object as identified in the proxy transactional context. Further the proxy transactional context is executed when the proxy transactional context is called and upon executing the proxy transactional context the execution returns to the on premise transactional context. The actual on premise transactional context is not altered or lost due to the execution of the proxy transactional context and thus the on premise transactional context is not disrupted because of the integration of the on demand solution unit with the on premise solution unit . In one exemplary embodiment the defined assignment is stored in the proxy data object to integrate the on demand solution unit and the on premise solution unit .

Some embodiments may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components may be implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. Examples of computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment may be implemented using Java C or other object oriented programming language and development tools. Another embodiment may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components materials techniques etc. In other instances well known operations or structures are not shown or described in detail.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance the one or more embodiments. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments including what is described in the Abstract is not intended to be exhaustive or to limit the one or more embodiments to the precise forms disclosed. While specific embodiments of and examples for are described herein for illustrative purposes various equivalent modifications are possible within the scope of the one or more embodiments as those skilled in the relevant art will recognize. These modifications can be made in light of the above detailed description. Rather the scope is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

