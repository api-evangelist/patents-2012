---

title: Architecture for variable pressure mouse
abstract: User input devices with variable pressure buttons are configured. A user may specify a range of pressure to be associated with a pressure level. In some embodiments, a user may also associate a command or other instruction to an application with an identity of a variable pressure button and a pressure level of the button. In some embodiments, the associations may be represented in a configuration profile. In further embodiments, a microcontroller for a mouse may translate signals from variable pressure buttons into pressure levels based upon the configuration file. In many embodiments, a user may associate a reporting rate with a variable pressure button. A legacy application may receive reports of the state of the variable pressure button at the associated reporting rate.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09389711&OS=09389711&RS=09389711
owner: Dell Products, LP
number: 09389711
owner_city: Round Rock
owner_country: US
publication_date: 20121221
---
This disclosure generally relates to information handling systems and more particularly relates to software architectures for input devices with pressure sensitive sensors.

As the value and use of information continues to increase individuals and businesses seek additional ways to process and store information. One option is an information handling system. An information handling system generally processes compiles stores and or communicates information or data for business personal or other purposes. Because technology and information handling needs and requirements may vary between different applications information handling systems may also vary regarding what information is handled how the information is handled how much information is processed stored or communicated and how quickly and efficiently the information may be processed stored or communicated. The variations in information handling systems allow for information handling systems to be general or configured for a specific user or specific use such as financial transaction processing airline reservations enterprise data storage or global communications. In addition information handling systems may include a variety of hardware and software components that may be configured to process store and communicate information and may include one or more computer systems data storage systems and networking systems. Input devices for information handling systems may be pressure sensitive.

The following description in combination with the Figures is provided to assist in understanding the teachings disclosed herein. The description is focused on specific implementations and embodiments of the teachings and is provided to assist in describing the teachings. This focus should not be interpreted as a limitation on the scope or applicability of the teachings.

When referred to as a device a module or the like the embodiments described herein can be configured as hardware. For example a portion of an information handling system device may be hardware such as for example an integrated circuit such as an Application Specific Integrated Circuit ASIC a Field Programmable Gate Array FPGA a structured ASIC or a device embedded on a larger chip a card such as a Peripheral Component Interface PCI card a PCI express card a Personal Computer Memory Card International Association PCMCIA card or other such expansion card or a system such as a motherboard a system on a chip SoC or a stand alone device . The device or module can include software including firmware embedded at a device such as a Pentium class or PowerPC brand processor or other such device or software capable of operating a relevant environment of the information handling system. The device or module can also include a combination of the foregoing examples of hardware or software. Note that an information handling system can include an integrated circuit or a board level product having portions thereof that can also be any combination of hardware and software.

The information handling system may include a processor such as a central processing unit CPU a graphics processing unit GPU or both. Moreover the information handling system can include a main memory and a static memory that can communicate with each other via a bus . As shown the information handling system may further include a video display unit such as a liquid crystal display LCD an organic light emitting diode OLED a flat panel display a solid state display or a cathode ray tube CRT . Additionally the information handling system may include an alpha numeric input device such as a keyboard and a cursor control device such as a mouse. Sensors on components such as mouse buttons of cursor control device may detect the amount of pressure applied by a user and generate analog signals to represent the amount of pressure. In some embodiments sensors on other components of cursor control device such as other mouse buttons may provide digital signals. In other embodiments an information handling system may contain other input devices with sensors that generate analog signals such as a joystick a helmet a wireless gun a game pad a virtual reality gaming device such as a head display with a tracking device a gaming controller or a button centric device other than a mouse. These input devices may contain components other than buttons which generate analog signals. The joystick for example may have sensors indicating the speed of movement the amount of pressure applied to a key or button or even grip strength.

The information handling system can also include a disk drive unit a signal generation device such as a speaker or remote control and a network interface device . The information handling system can represent a server device whose resources can be shared by multiple client devices or it can represent an individual client device such as a desktop personal computer.

The information handling system can include a set of instructions that can be executed to cause the system to perform any one or more of the methods or computer based functions disclosed herein. The system may operate as a standalone device or may be connected such as using a network to other computer systems or peripheral devices.

In a networked deployment the information handling system may operate in the capacity of a server or as a client user computer in a server client user network environment or as a peer computer system in a peer to peer or distributed network environment. The information handling system can also be implemented as or incorporated into various devices such as a personal computer PC a tablet PC a set top box STB a PDA a mobile device a palmtop computer a laptop computer a desktop computer a communications device a wireless telephone a land line telephone a control system a camera a scanner a facsimile machine a printer a pager a personal trusted device a web appliance a network router switch or bridge or any other machine capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine. In a particular embodiment the system can be implemented using electronic devices that provide voice video or data communication. Further while a single information handling system is illustrated the term system shall also be taken to include any collection of systems or sub systems that individually or jointly execute a set or multiple sets of instructions to perform one or more computer functions.

The disk drive unit may include a computer readable medium in which one or more sets of instructions such as software can be embedded. Further the instructions may embody one or more of the methods or logic as described herein. In a particular embodiment the instructions may reside completely or at least partially within the main memory the static memory and or within the processor during execution by the information handling system . The main memory and the processor also may include computer readable media. The network interface device can provide connectivity to a network such as a wide area network WAN a local area network LAN or other network.

In an alternative embodiment dedicated hardware implementations such as application specific integrated circuits programmable logic arrays and other hardware devices can be constructed to implement one or more of the methods described herein. Applications that may include the apparatus and systems of various embodiments can broadly include a variety of electronic and computer systems. One or more embodiments described herein may implement functions using two or more specific interconnected hardware modules or devices with related control and data signals that can be communicated between and through the modules or as portions of an application specific integrated circuit. Accordingly the present system encompasses software firmware and hardware implementations.

In accordance with various embodiments of the present disclosure the methods described herein may be implemented by software programs executable by a computer system. Further in an exemplary non limited embodiment implementations can include distributed processing component object distributed processing and parallel processing. Alternatively virtual computer system processing can be constructed to implement one or more of the methods or functionality as described herein.

The present disclosure contemplates a computer readable medium that includes instructions or receives and executes instructions responsive to a propagated signal so that a device connected to a network can communicate voice video or data over the network . Further the instructions may be transmitted or received over the network via the network interface device .

While the computer readable medium is shown to be a single medium the term computer readable medium includes a single medium or multiple media such as a centralized or distributed database and or associated caches and servers that store one or more sets of instructions. The term computer readable medium shall also include any medium that is capable of storing encoding or carrying a set of instructions for execution by a processor or that cause a computer system to perform any one or more of the methods or operations disclosed herein.

In a particular non limiting exemplary embodiment the computer readable medium can include a solid state memory such as a memory card or other package that houses one or more non volatile read only memories. Further the computer readable medium can be a random access memory or other volatile re writable memory. Additionally the computer readable medium can include a magneto optical or optical medium such as a disk or tapes or other storage device to store information received via carrier wave signals such as a signal communicated over a transmission medium. Furthermore a computer readable medium can store information received from distributed network resources such as from a cloud based environment. A digital file attachment to an e mail or other self contained information archive or set of archives may be considered a distribution medium that is equivalent to a tangible storage medium. Accordingly the disclosure is considered to include any one or more of a computer readable medium or a distribution medium and other equivalents and successor media in which data or instructions may be stored.

VPM MCU includes VPM function and may optionally integrate the Alienware AlienFx lighting function or other custom lighting activity for reduced printed circuit board PCB footprint component count and bill of materials BOM cost. However a VPM MCU and a lighting function MCU may be physically separate to ensure no compromise in performance or responsiveness. Variable pressure button mechanism may send to VPM function an analog signal representative of the pressure being applied to each of analog buttons and . In response to the receipt of the analog signal VPM function may determine which of the analog buttons are depressed and may convert the amount of pressure to a digital representation of the respective pressure level. A pressure level may represent a range of actual pressures. VPM Function may output a signal indicative of the pressure and the button or buttons that are depressed. The communication between the VPM Function and AlienFx active lighting function may be completely internal to VPM MCU for local lighting control. This means pressure levels sensed in block can directly control the color and backlight intensity in block for visual feedback for the user within the mouse device. An alternative to this is to provide the same visual feedback of the sensed pressure via external lighting devices via the USB bus to the OS.

Alienware AlienFx or any other lighting function may control the modification of the backlighting of the mouse alone or may control the modification of the backlighting of the PC system and or attached AlienFx or any other lighting enabled peripherals other than the mouse based upon the signals it receives from VPM buttons mechanism about the state of variable pressure buttons and . An AlienFx or any other lighting function may be separately installed in PC system and into each additional AlienFx enabled peripheral attached to said PC system . This lighting function may divide a computer into regions and enable a user to control the lighting of the regions. In some embodiments for example the computer may be divided into multiple regions including the logo the power button and various sections of the keyboard. In response to signals from VPM buttons mechanism Alienware AlienFx or any other lighting function may send signals to control the lighting of mouse through an I2C bus to pulse width modulation PWM current driver . An I2C bus connects two devices or components through two two directional lines. A PWM current driver may control the intensity of lighting by rapidly varying the duty cycle and power sent to a light. In PWM current driver controls the current sent to RGB LED lights . In some embodiments PWM current driver may control the current sent to each of the components separately. Additionally the AlienFx lighting function may control effects performed by the lights such as morphing from one color to another blinking at various rates etc. Thus the colors intensity of lighting of PC system and lighting effects may change in response to user actions on VPM buttons and . In the event that the VPM buttons and provide color intensity and or effects changes to the PC system or additionally attached AlienFx enabled peripherals the pressure events are sent from the VPM MCU via USB bus to communicate this to the PC system s AlienFx controller via the Communication API Layer of .

Standard digital buttons includes buttons and . These represent buttons that are detected as either depressed or not depressed. When a digital button is depressed a digital output signal representing the action is sent to legacy mouse MCU over General Purpose Input Output GPIO pins. GPIO pins are generic rather than special purpose pins which may be controlled through programming. The digital output signal sent through the GPIO pins may also identify the digital button. Optical mouse sensor may project a light such as a laser onto the surface over which the mouse travels. Sensors in optical mouse sensor may analyze the reflections to calculate the direction and speed of the mouse. Optical mouse sensor may transmit signals representative of the direction and speed to legacy mouse MCU over a serial peripheral interface SPI bus. An SPI bus connects a single master device or component with a single slave device or component over a synchronous serial data link. In response to the signals from standard digital buttons and optical mouse sensor legacy mouse MCU may transmit signals representing the position and motion of the mouse and the state of its digital buttons. In some embodiments the signals may be in the form of packets. Some of the bits in the packets may represent button states and some of the buttons may contain position and speed information. USB 2.0 hub IC enables the coupling of VPM mouse to PC system over a universal serial bus USB connection. USB 2.0 hub IC may contain multiple USB ports enabling the connection of USB devices or components through USB connections. It may also contain circuitry to control the transmission of signals over the connections. A USB cable may contain four wires. Two may be used to supply electrical power and two may be used for sending data and commands. One port of USB 2.0 hub IC may be coupled to legacy mouse MCU and one port may be coupled to VPM MCU . In one embodiment where the AlienFx lighting function is not integrated into the VPM MCU but instead resides in its own physically separate AlienFx MCU then the AlienFx MCU would need to have a USB interface and connect to a third port of the USB 2.0 Hub IC .

Signals from legacy mouse MCU and VPM MCU may be transmitted through USB connection and respectively to USB 2.0 hub IC and from there through USB connection to PC system . The signals may report on the state of VPM mouse . Similarly signals from PC system may be transmitted through USB connections to the MCUs and . The signals may provide configuration information or may poll the MCUs and about the occurrence of mouse events. Mouse events include the motion and position of a mouse whether a mouse button is depressed or not and the pressure level for variable pressure mouse buttons.

In some embodiments the pressure sensitive buttons of an information handling system keyboard may be further configured to operate in a legacy on off mode of operation i.e. to emulate normal digital mouse buttons for example such as during boot up prior to loading an operating system during sleep mode or any other time a user wishes to operate in such a legacy mode by default. In some embodiments standard digital buttons may be omitted and all of the mouse buttons may be variable pressure buttons. In some further embodiments the legacy mouse MCU may be omitted. In these further embodiments the VPM MCU may also handle input from an optical mouse sensor.

In the embodiment of VPM MCU is implemented as a microcontroller. In other embodiments pressure sensing digital output circuitry may be implemented as an integrated part of a mouse body. In many embodiments one or more components and or processing tasks of pressure sensing digital output circuitry may alternatively be integrated or otherwise implemented within a microcontroller that is operating as the mouse controller and or as part of the host system to which the mouse is connected if desired. One or more of the components of pressure sensing digital output circuitry could also be implemented with external circuitry as well. Thus the components and or processing tasks of pressure sensing digital output circuitry may be implemented by any alternative configuration of one or more processing devices such as controller microcontroller processor microprocessor application specific integrated circuit ASIC field programmable gate array FPGA CPU etc. of an information handling system or a peripheral component thereof and alone or together with other types of information handling system processing tasks.

In the embodiment of legacy mouse MCU is implemented as a microcontroller. In other embodiments circuitry to receive signals from digital buttons and optical mouse sensors and in response transmit signals representative of the state of a mouse may be implemented in any other suitable manner such as with alternate hardware firmware and or software to perform a legacy momentary on digital key signal generation task.

Upon processing the signals received from analog buttons VPM MCU may broadcast reports of mouse events to one or more user applications residing in user application layer . VPM MCU contains pressure sensing component and user configuration analog key control parameters module . Pressure sensing component may receive an analog signal representative of the pressure being applied to each of analog buttons . User configuration analog key control parameters module may store configuration files for MCU . The file may contain parameters to represent settings of a variable pressure mouse. Some parameters may describe the range of pressures assigned to levels of the VPM buttons. Based on the parameters MCU may assign a first pressure level when pressure sensing component reports a pressure within a first range of pressures a second pressure level for a pressure within a second range of pressures etc. Other parameters may describe an assignment of macro information to each pressure level value of each mouse button. A macro may represent a type of information sent to an application in a report of mouse events. For an application capable of processing VPM information a VPM aware application the macro corresponding to a pressure level of a button may simply represent that button at that pressure level. In some embodiments the macro corresponding to a pressure level of a button may represent a combination of buttons and pressure levels. For a legacy application that processes digital or only on off button signals signals that indicate whether the button is pressed or not pressed the macro may represent mouse state that the application may understand rather than the actual mouse state. In some cases the macro corresponding to a pressure level of a button may represent the button in a pressed state but with a different repeating rate. The state of the button at a first pressure level may be reported at the normal reporting rate the state at a second pressure level may be reported at twice the normal reporting rate and the state at a third pressure level may be reported at three times the normal reporting rate. In some embodiments the pressure level of a button may be reported as a hot key either alone or in combination with other user input. A hot key is user input that performs a task for an application more quickly than other input to perform the task.

The VPM MCU and Legacy Mouse MCU may operate in parallel with the VPM MCU processing VPM button activity and the Legacy Mouse MCU processing Legacy button activity. Each MCU sends its respective data to its respective device driver which is then sent to the User Application .

VPM MCU may broadcast reports of mouse events to one or more user applications residing in user application layer . In the embodiment of the reports are transmitted from the VPM MCU to USB Human Interface Device HID device driver for VP mouse buttons . The output of USB HID device driver for VPM buttons is the VPM button event which is sent to User applications . User applications may be for example Windows based applications such as games or non gaming applications such as Microsoft Office or other business software applications . User applications may be executing from local storage and or may be cloud based applications executing from across a network such as the Internet or a corporate area network etc.

Legacy mouse MCU may process signals from standard digital or non variable pressure mouse buttons and may also process signals representing the speed and direction of the mouse. It may broadcast the reports to one or more user applications residing in user application layer . The reports are transmitted from the Legacy Mouse MCU to the HID Device Driver for digital mouse buttons and are then sent to User Applications . In many embodiments legacy mouse MCU may operate similarly to legacy mouse MCU of . In some embodiments VPM MCU and legacy MCU may be configured to operate in parallel at all times. In other embodiments they may operate independently. In a few embodiments a legacy MCU may be omitted and all mouse buttons may operate as variable pressure buttons.

In the embodiment of both legacy mouse MCU and VPM MCU may be configured to comply with USB Human Interface Device HID standards. USB HID devices are human interface devices such as keyboards mice and game controllers that connect through a USB connection and follow the USB human interface device class set of specifications. The HID specifications provide a protocol for communications between a device and an operating system.

Also shown in are operating system OS layer middleware layer and user application layer . These are software layers that may be executing for example on processor of information handling system of . OS layer may include USB HID driver for VPM buttons and USB HID driver for digital mouse buttons . A device driver may constitute software that acts as an interface between hardware and an operating system or other higher level program. The device driver may communicate with the device over a communications bus. It may receive calls from the higher level program and issue commands to the device in response to the commands. HID drivers may provide an interface between a device conforming to the HID specifications and an operating system. In the embodiment of driver communicates with VPM MCU through a USB connection and driver communicates with legacy mouse MCU through a USB connection. Drivers and may periodically poll or scan their respective MCUs process the reports and broadcast mouse events based on the reports to user applications . In some embodiments the MCU data may be transmitted from each MCU to a single USB hub and from there relayed to the respective drivers. Thus for example the legacy mouse reports may be sent to the USB hub and relayed to driver .

In many embodiments such as in the case of a Windows OS drivers and may both constitute standard in box drivers. In this case no original design manufacturer or third party software is required for OS layer in such an embodiment. Such a characteristic may be employed to provide simplicity and transparency of a VPM such as VPM to the User Applications .

Driver may receive reports of mouse states from VPM MCU . The reports may indicate the state of the VPM mouse buttons such as their pressure levels. The reports may also contain other information such as a reporting rate for mouse events. Driver may then broadcast information about the state of the VPM mouse buttons. The broadcast information may be received and acted upon by user applications . Driver may provide reports of the speed and location of a mouse and provide reports of the state of legacy mouse buttons to user application layer .

Middleware layer contains communications application programming interface API layer for configurator a VPM component. Communications API may be present as a software module that provides applications of user applications access to VPM protocols for the purpose of configuring and monitoring the VPM buttons per a user defined VPM profile. In some embodiments communications API may provide an API for the applications. The API may enable the applications to receive assignments of VPM events to commands or other input to the applications. As an example the VPM event of depressing a button at a first pressure level may be assigned as an instruction to shoot a weapon at a first rate at a second pressure level may be assigned as an instruction to shoot a weapon at a second rate and at a third pressure level may be assigned an instruction to detonate an explosive device. As another example the reporting of the event of a button depressed at a first pressure level may be assigned to instruct a word processing program to insert a symbol and the reporting of the event of the button depressed at a second pressure level may instruct the program to insert a symbol.

Communications API may also provide a communications link between VPM application software SW modules and VPM MCU to enable a user to set parameters for the operation of the VPM MCU . For example when a given VPM profile is enabled the given profile may be sent from VPM application SW modules to User Configuration Analog Key Control Parameters where it is stored. This information is then loaded into the Pressure Sensing function where live real time pressure sensor data is compared to this data to correctly output the user desired commands for the given pressed button and the particular pressure level.

In addition in some embodiments communications API may monitor for an application with focus. An application may have focus if an operating system directs keyboard input and input from a mouse or other pointing device to the application. In many operating systems a user may give an application focus by moving a cursor over a window of the application and clicking on the window. An application may also gain focus as a result of being launched. Further the communications API may be used to send raw data from the Pressure Sensing function via the USB connection to VPM application SW Module to output raw sensor data either for debug purposes or to provide the user a visual feedback i.e. bargraph color change per pressure level as to how hard the user is pressing on the given key.

User application layer contains VPM application SW modules service engine and user applications . User applications may include applications which receive reports of mouse events such as games. They may include both VPM aware and non VPM aware user applications. VPM enabled user applications may be designed to specifically communicate to the User Configuration Analog Key Control Parameters module via the Communication API with game developer defined VPM profiles. The user may elect to use either the VPM profiles provided by the Game or User Application or profiles the user created for the game by using the VPM Application SW Module .

VPM application software modules may enable a user to create configuration profiles to control the operation of a VPM such as VPM . A configuration profile may specify for example the correlation of one or more given pressure ranges to pressure levels of a VPM button with multiple pressure levels being supported for a VPM button. The profile may also specify user definitions of macros. A user may create macros on a per button or button pressure level.

In one exemplary embodiment a configuration profile may be provided as a file of settings specifying how states of VPM buttons shall be reported for a given user application game Microsoft Office application etc. . Thus VPM application software modules may provide a configuration profile to customize the behavior of VPM buttons for any given application . In many embodiments VPM application software modules may provide multiple configuration profiles as needed or desired to support multiple applications of user applications multiple users or even multiple configurations for a user for a single application.

In one exemplary embodiment VPM application software modules may be configured as a component that is accessible to the user of information handling system in the form of a graphical user interface GUI application. Through VPM application SW modules a user may create maintain store and enable configuration profiles to control the operation of a VPM such as VPM . A configuration profile may specify for example the correlation of one or more given pressure ranges to pressure levels of a VPM button with multiple pressure levels being supported for a VPM button.

In addition by communicating with user applications through API VPM application software modules may enable a user to define macros to correspond to VPM buttons and pressure levels. Thus the macros may be created on a per button or button pressure level. Through the interface with the VPM SW application provided by communications API a user may for example assign game command to VPM buttons or pressure levels of VPM buttons. In some cases the user may assign a command to a button the assignment independent of the pressure level of the button. In other cases the user may assign multiple commands to a single VPM button each corresponding to a different pressure level. In some embodiments a user may create different profiles for different applications. In further embodiments a user may even create different profiles for the same application. Some embodiments may even store multiple profiles for the same application and the same user. A user may want to change the interpretation of mouse clicks depending on the conditions under which a game played or depending upon situations within the game.

In some further embodiments VPM aware applications may transmit to communications API a list of user commands for the applications. The list of commands may be made available to a user through the GUI. The user may then assign mouse events to the application commands. In that way through the single interface the user may both assign pressure levels to pressure amounts and may assign application commands to button events.

In some embodiments a user may also control the interpretation of VPM buttons for non VPM aware applications. Through a GUI provided by VPM application software modules the user may for example configure VPM buttons to speed up their mouse event report rate as the degree of pressure applied to the button increases. In some embodiments this mechanism for configuring the VPM buttons may enable a user to achieve better performance with applications such as video games. The faster reporting rate may enable a user to transmit more clicks to a game through the mouse button that by making the clicks individually. In other embodiments the user may be able to perform other types of configuration of non VPM aware buttons through the interface provided by VPM application software modules . The user may for example be able to specify that a click of a mouse button at a pressure level is reported to a non VPM aware application as one or more mouse events that may involve other mouse buttons or may involve multiple mouse buttons. A click on button bat pressure level lmay be interpreted as a click on button bfollowed by a click on button b. In these embodiments MCU might then report multiple button clicks based upon the VPM configuration data downloaded into the user configuration analog key control parameters .

The configuration profiles data may be stored for example onto drive unit and routed to the proper destinations. For example when a given configuration profile is enabled into effect the given configuration profile may be sent from VPM application software modules to VPM MCU through the communication API . The behavior defined in configuration profiles may for example be communicated via the Communication API down via the USB bus into the User Configuration Analog Key Control Parameters module . When a particular application is loaded and in effect by the user applicable set of parameters are outputted from the User Configuration Analog key Control Parameters module into the Pressure Sensing function . As a user presses a VPM button at a particular pressure level the Pressure Sensing function takes the pressure level and particular button identification checks it against the macro definition of the user set which now resides in the Pressure Sensing function and outputs the macro information for the particular VPM button and pressure level to USB HID device driver which then sends it to the User Application .

In some embodiments the VPM parameter settings file created by the VPM App SW module and stored as a file on the computer may automatically be loaded into the User Conf. Analog Key Control Parameters UCAKCP module upon the launch of the particular game or when the particular game becomes in focus. Service Engine may monitor the computing device in which the layers of reside to determine which application has focus and which user is signed in. Based on those determinations Service Engine may select an appropriate set of configuration settings VPM Profile . In the embodiment of Service Engine is a separate software utility from VPM App SW module . In other embodiments the Service Engine may reside inside VPM App SW module .

In some embodiments the game developer may create a default or preferred VPM parameter setting file. As the game comes in focus launched this file is loaded into UCAKCP module . The result is the user only has to go to one place to instruct the particular game how the mouse should behave in the VPM parameter setting file. This file is stored on the computer and is accessible by the VPM application SW module whether created by the game developer or the user. There is no need for the user to define the mouse settings behavior in game as well as with the VPM app SW module . A suitable profile may be based upon the game and upon the user. If there are multiple profiles for a game and user communications API may ask the user which profile the user desires.

Some embodiments may also include a VPM feature on off switch or a designated keyboard key or designated combination of keyboard keys which allows the user to immediately stop VPM functionality even with a VPM profile and operation in effect until such time that the user re enables VPM functionality with the switch. At that time the VPM profile in effect will continue to operate. When VPM functionality is turned off the mouse shall operate as a traditional legacy mouse with traditional on off buttons and no variable pressure sensitivity operation. An example for such a need would be a user playing a game with a particular VPM profile in effect then suddenly having to stop to respond to a chat or IM session by typing and mouse activity which could have otherwise had different functionality than when disabled by this feature.

Embodiments of may exemplify a framework or architecture for supplying user input in the form of actions on VPM buttons to applications. The framework may enable different pressure levels applied to a single button to be interpreted by an application as different macros. In addition an action can have a different meaning for one application or user than for another application or user. This framework may also enable the use of standard or in house device drivers. No custom software would be necessary at the device driver level. Further in some embodiments the framework may enable a user through a single GUI to both define levels corresponding to pressure ranges on the VPM buttons and to define application commands or other input to the applications corresponding to the mouse events.

The arrangement and number of components processing devices processing tasks and or features illustrated and described in relation to is exemplary only. Thus any other alternative configuration of fewer additional and or alternative circuitry and or logic components may be employed that is suitable for implementing a mouse with one or more individual pressure sensitive buttons which is capable of outputting different assigned macro information per mouse button pressure level sensed from individual pressure sensitive mouse buttons. Other embodiments may use non standard device drivers. In further embodiments these non standard device drivers may translate pressure ranges to pressure levels or to repeat rates. These non standard drivers may also poll the VPM MCU and legacy mouse MCU. In several embodiments these drivers may have access to configuration profiles in order to perform the translations.

The user may create the settings through input to a GUI provided by the VPM application. When creating a new VPM configuration setting the user may define for example which VPM buttons the user wishes to use how many pressure levels the user wants recognized for each button if a given button shall operate as a traditional digital or momentary on button such as mouse reports for the button report an off off status rather than a pressure level single function mode VPM button such as variable on off switching rate mode that outputs repeating single legacy clicks on the button that vary corresponding to the detected key pressure level or multi function such as macro mode VPM button etc. When the user selects to enable multi function mode for a particular VPM button the user may also be allowed to define the desired behavior for each recognized pressure level for that button for example the user may be allowed to define a command of a game or macro from another application as corresponding to each VPM event.

This user selected macro information for the VPM events may be all saved as a VPM configuration setting for the particular selected application on system storage. In some embodiments multiple such user created VPM configuration settings may be similarly created and simultaneously stored on system storage for example for later retrieval and use and or for retrieval as needed by operation of a given application. In some embodiments multiple users on a single information handling system such as information handling system of may create VPM configuration settings for the application. In many embodiments a single user may create multiple VPM configuration settings for the same application.

At block a module such as Service Engine of monitors the computing device to determine which application has focus and which user is signed in. Based on those determinations the Service Engine selects an appropriate set of configuration settings VPM Profile .

In block the applicable VPM profile gets automatically loaded into UCAKCP module via the USB bus using the Communication API . This data then gets loaded into the Pressure Sensing function so that as pressure sensor data comes into the Pressure Sensing function in real time from the analog buttons block the pressure sensing function takes the pressure level and particular button identified checks it against the VPM profile definitions set by the user and outputs the appropriate data for the particular VPM button and pressure level block to the USB HID device driver block which then sends it to the User Application block . This allows user or game developer VPM parameter settings to be loaded into the VPM MCU so the mouse is ready to start operating as a variable pressure mouse as desired by the user as soon as the game launches or is in focus . For example a created user profile may be flashed to firmware of VPM MCU from VPM application SW modules via VPM Communication API . As a result VPM MCU may be knowledgeable of the number of pressure level values per individual VPM button that are to be detected and reacted to.

At block a VPM MCU such as VPM MCU may receive signals from VPM mouse buttons. The signals may indicate a button or buttons that are pressed and an amount of pressure. At block the MCU may respond to the detected VPM button events by translating the amounts of pressure into pressure levels. The VPM MCU may also determine a reporting rate for the mouse button based upon the pressure level. In some embodiments the translation from a button click with an amount of pressure into a pressure level and perhaps into a repeating rate may be performed by firmware embedded software in the MCU. The firmware may access configuration profiles provided to the MCU in order to perform the translations.

At block the VPM MCU may report the VPM mouse buttons events to an HID device driver. In some embodiments the HID device driver may be a standard out of the box device driver. Accordingly the VPM mouse can be installed without the need to install additional operating system components. At block the HID device drivers broadcast the VPM mouse button events to applications. The applications may then perform steps based upon the reported events.

In some embodiments the software framework illustrated in may enable the use of VPMs that is transparent to operating systems and transparent to legacy applications such as games. As a result the VPMs may be used with the legacy applications. With use of in box device drivers the VPM function is invisible to the legacy applications. As a result the VPM mouse is backward compatible with games and other applications written years ago. For VPM aware applications embodiments of may enable a user to set pressure levels based on ranges of pressure applied to mouse buttons and to assign buttons and levels to application commands through a single GUI. Otherwise the user may be required to engage with a mouse GUI to set levels for the mouse buttons and to engage with an application GUI to assign commands or macros to the mouse events.

Other embodiments may include additional blocks or omit blocks. In some embodiments the mouse events transmitted by device drivers may be intercepted by a middleware module and translated into other mouse events before being broadcast to applications. In some embodiments alternated steps may be employed that are suitable for implementing one or more individual pressure sensitive buttons that each support multiple macros with each macro corresponding to a unique pressure level output and that is capable of outputting different assigned macro information per button pressure level sensed from individual pressure sensitive buttons.

It will be understood that one or more of the tasks functions or methodologies described herein may be implemented for example as software firmware or other computer program of instructions embodied in a non transitory tangible computer readable medium that is executed by a CPU controller microcontroller processor microprocessor FPGA ASIC or other suitable processing device or combination of such processing devices.

Further modifications and alternative embodiments of the techniques described herein will be apparent to those skilled in the art in view of this description. It will be recognized therefore that the techniques described herein are not limited by these example arrangements. Accordingly this description is to be construed as illustrative only and is for the purpose of teaching those skilled in the art the manner of carrying out the techniques described herein. It is to be understood that the forms of the techniques described herein shown and described are to be taken as the presently preferred embodiments. Various changes may be made in the implementations and architectures. For example equivalent elements may be substituted for those illustrated and described herein and certain features of the techniques described herein may be utilized independently of the use of other features all as would be apparent to one skilled in the art after having the benefit of this description of the techniques.

Although only a few exemplary embodiments have been described in detail above those skilled in the art will readily appreciate that many modifications are possible in the exemplary embodiments without materially departing from the novel teachings and advantages of the embodiments of the present disclosure. Accordingly all such modifications are intended to be included within the scope of the embodiments of the present disclosure as defined in the following claims. In the claims means plus function clauses are intended to cover the structures described herein as performing the recited function and not only structural equivalents but also equivalent structures.

