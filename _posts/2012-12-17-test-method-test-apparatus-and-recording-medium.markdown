---

title: Test method, test apparatus, and recording medium
abstract: A test method which tests a processing device includes: obtaining a maximum number of processing units with which the processing device as a test target can simultaneously parallel process a plurality of threads; specifying a number of threads, causing the processing device as the test target to parallel process the threads, and obtaining a processing time corresponding to the number of threads; and outputting information indicating that the processing device as the test target is normal when the number of threads for which the processing time is more than or equal to a threshold matches the maximum number of processing units which can simultaneously parallel process, or outputting information indicating that the processing device as the test target is abnormal when the number of threads does not match.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09087028&OS=09087028&RS=09087028
owner: FUJITSU LIMITED
number: 09087028
owner_city: Kawasaki
owner_country: JP
publication_date: 20121217
---
This application is based upon and claims the benefit of priority of the prior Japanese Patent Application No. 2012 062023 filed on Mar. 19 2012 the entire contents of which are incorporated herein by reference.

The embodiment discussed herein is directed to a test method a test apparatus and a recording medium.

There is known a fault diagnosis system for a multicore CPU in which a plurality of CPU Central Processing Unit cores capable of switching from an SMP symmetric Multi Processing mode to an AMP Asymmetric Multiprocessing mode are mounted the fault diagnosis system having a load predicting unit which predicts a processing load of the multicore CPU a mode switching unit which switches one of the CPU cores to the AMP mode when the processing load is less than a threshold and a fault diagnosis unit which performs fault diagnosis on the CPU core switched to the AMP node see for example Patent Literature 1 .

In a test of a general purpose CPU a defective core can be identified by specifying different instruction sequences to ail cores in the CPU to have them execute a test and checking the calculation results thereof.

On the other hand a GPGPU General purpose computing on Graphics Processing Units is a processing device which applies calculation resources of a GPO Graphics Processing Units to purposes other than image processing. The GPU is a processing device dedicated for image processing.

In the GPGPU it is not possible to specify a core in the GPGPU to have the core perform each instruction sequence. When there is a defective core another normal core performs processing as a substitute for the defective core and thus it is difficult to test whether there is a defective core or not.

A test method which tests a processing device includes obtaining a maximum number of processing units with which the processing device as a test target can simultaneously parallel process a plurality of threads specifying a number of threads causing the processing device as the test target to parallel process the threads and obtaining a processing time corresponding to the number of threads and outputting information indicating that the processing device as the test target is normal when the number of threads for which the processing time is more than or equal to a threshold matches the maximum number of processing units which can simultaneously parallel process or outputting information indicating that the processing device as the test target is abnormal when the number of threads does not match.

The object and advantages of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the claims.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are not restrictive of the invention.

The SM has a core group an instruction cache memory and a primary cache memory . The instruction cache memory is a cache memory for instructions and the primary cache memory is a cache memory for data. The core group has a plurality of cores .

As processing units for instruction sequences threads there are two methods a method to process in units of cores and a method to make groups of pluralities of cores and process in units of groups. First a method to process in units of cores will be described. In this method the cores are processing units which can simultaneously parallel process instruction sequences. Since all the cores can parallel process it is possible to simultaneously parallel process instruction sequences by the number of cores . For example when the GPGPU has 16 SMs and each SM has 32 cores the total number of cores is 16 32 512. Therefore the GPGPU is able to simultaneously parallel process up to 512 instruction sequences at a maximum. That is the maximum number of processing units which can simultaneously parallel process is 512.

Next the method to process in units of groups will be described. In this method the core group has a plurality of thread groups and the thread groups axe processing units which can simultaneously parallel process instruction sequences. Each thread group has a plurality of cores for example four cores to which different roles are assigned. One instruction sequence thread is processed in a unit of each thread group . Since all the thread groups can simultaneously parallel process it is possible to simultaneously parallel process instruction sequences by the number of thread groups . For example when the GPGPU has 16 SMs and each SM has 8 thread groups the total number of thread groups is 16 8 128. Therefore the GPGPU is able to simultaneously parallel process up to 128 instruction sequences at a maximum. That is the maximum number of processing units which can simultaneously parallel process is 128.

Accordingly this embodiment focuses on the difference between the processing time of the GPGPU having no defective core of and the processing time of the GPGPU having defective cores of and performs a test on whether there are any defective core or not.

Next in step S the CPU instructs the GPGPU to start processing of one thread of floating point operation and starts to measure the processing time of the one thread . Then in step S when a processing completion notification is inputted from the GPGPU the CPU finishes the measurement of the processing time and obtains the processing time of one thread .

Next in step S the CPU instructs the GPGPU to start parallel processing of two same threads of floating point operation and starts to measure the processing time of the two threads . Then instep S when a processing completion notification is inputted from the GPGPU the CPU finishes the measurement of the processing time and obtains the processing time of two threads .

Next in step S the CPU instructs the GPGPU to start parallel processing of three same threads of floating point operation and starts to measure the processing time of the three threads . Then in step S when a processing completion notification is inputted from the GPGPU the CPU finishes the measurement of the processing time and obtains the processing time of three threads .

Thereafter the number of threads to be parallel processed is similarly increased sequentially and the processing time of each number of threads is obtained.

Finally in step S the CPU instructs the GPGPU to start parallel processing of M same threads of floating point operation and starts to measure the processing time of the M threads . Here M denotes the maximum number of parallel processed threads to perform the test. The maximum number of parallel processed threads M is for example 100000 or 200000 as illustrated in . Then in step S when a processing completion notification is inputted from the GPGPU the CPU finishes the measurement of the processing time and obtains the processing time of M threads .

The processing time of 513 to 1024 threads is about two times the processing time of 1 to 512 threads . Further the increased processing time T of 1537 to 2048 threads is about two times the increased processing time T of 1025 to 1536 threads . Here the increased processing time T of 1537 to 2048 threads is a time obtained by subtracting the processing time E of 513 to 1024 threads from the processing time of 1537 to 2048 threads . Further the increased processing time T of the 1025 to 1536 threads is a time obtained by subtracting the processing time E of 513 to 1024 threads from the processing time of 1023 to 1536 threads .

As described above as the number of threads increases the processing time varies largely at cycles of thread intervals w. As illustrated in in the case of the GPGPU having no defective core a thread interval w is 512 which is the total number of cores. On the other hand as illustrated in in the case of the GPGPU having two defective cores the thread interval w is 510 which is the number of normal cores. Therefore when the thread interval w for which the processing time is substantially the same is the same as the total number of cores there is no defective core existing in the GPGPU and thus the GPGPU as the test target can be determined to pass this test. On the other hand when the thread interval w for which the processing time is substantially the same is less than the total number of cores one or more defective cores exist in the GPGPU and thus the GPGPU as the test target can be determined to fail this test.

The processing time of 129 to 256 threads is about two times the processing time of 1 to 128 threads . Further the increased processing time T of 385 to 512 threads is about two times the increased processing time T of 257 to 384 threads . Here the increased processing time T of 385 to 512 threads is a time obtained by subtracting the processing time E of 129 to 256 threads from the processing time of 385 to 512 threads . Further the increased processing time T of the 257 to 384 threads is a time obtained by subtracting the processing time E of 129 to 256 threads from the processing time of 257 to 384 threads .

As described above as the number of threads increases the processing time varies largely at cycles of thread intervals w. In the case of the GPGPU having no defective thread group defective core a thread interval w is 128 which is the total number of thread groups. On the other hand in the case of the GPGPU having two defective thread groups the thread interval w is 126 which is the number of normal thread groups. Therefore when the thread interval w for which the processing time is substantially the same is the same as the total number of thread groups there is no defective thread group defective core existing in the GPGPU and thus the GPGPU as the test target can be determined to pass this test. On the other hand when the thread interval w for which the processing time is substantially the same is less than the total number of thread groups one or more defective thread groups defective cores exist in the GPGPU and thus the GPGPU as the test target can be determined to fail this test.

First the test apparatus obtains the maximum number of processing units with which the GPGPU as the test target can simultaneously parallel process a plurality of threads . As illustrated in in the case of the method to process threads in units of cores the above maximum number of processing units which can simultaneously parallel process is the total number of cores in the GPGPU On the other hand as illustrated in in the case of the method to process threads in units of thread groups the above maximum number of processing units which can simultaneously parallel process is the total number of thread groups in the GPGPU . Further as illustrated in and the test apparatus makes the GPGPU as the test target perform parallel processing while the number of threads is varied sequentially so as to obtain the processing time of each of the numbers of threads . Then when a change in numbers of threads thread intervals w until a variation of the processing time becomes more than or equal to a threshold P when the number of threads is changed matches the maximum number of processing units which can simultaneously parallel process the test apparatus outputs information indicating that the GPGPU as the test target is normal or when it does not match the test apparatus outputs information indicating that the GPGPU is abnormal as described above.

Here the threshold P is a minimum calculation performance coefficient P illustrated in and is 1.2 or 1.3 for example. In or the increased processing time T tor T and the increased processing time T or T are compared. When T T or T T is more than or equal to the threshold P it means the end of the thread interval w and when T T or T T is less than the threshold P it means that the thread interval w has not ended yet.

Further the test apparatus determines whether or not the change in numbers of threads thread intervals w matches the maximum number of processing units which can simultaneously parallel process every time the variation of the processing time becomes more than or equal to the threshold P. When all thread intervals w match the maximum number of processing units which can simultaneously parallel process the test apparatus outputs information indicating that the GPGPU as the test target is normal or when the thread intervals w does not match the maximum number of processing units which can simultaneously parallel process at least once the test apparatus outputs information indicating that the GPGPU as the test target is abnormal. By performing the test for each of the plurality of thread intervals w as compared to the test of one thread interval w it is possible to perform the test under more strict conditions so as to increase test accuracy and improve the detection rate of defective cores.

Next the processing time of 128 threads and the processing time of 129 threads are compared and the value obtained by dividing the processing time of 129 threads by the processing time of 128 threads is more than or equal to the minimum calculation performance coefficient P. Thus the processing times increase rapidly and they can be determined to be out of the range of the thread interval w. This means the end of the thread interval w and thus the thread interval w can be determined as 128. Then this thread interval w is the same as 128 which is the total number of thread groups in the GPGPU and thus the GPGPU can be determined as normal.

Next the processing time of 129 threads and the processing time of 130 threads are compared and the value obtained by dividing the value obtained by subtracting the processing time of 128 threads from the processing time of 130 threads by the value obtained by subtracting the processing time of 128 threads from the processing time of 129 threads is less than the minimum calculation performance coefficient P. Thus there is almost no change in the processing times and they can be determined to be within the range of the thread interval w.

At this moment the above processing time of 128 threads corresponds to the processing time E of . Further the value obtained by subtracting the processing time of 128 threads from the above processing time of 130 threads corresponds to the increased processing time T of . The value obtained by subtracting the processing time of 128 threads from the processing time of 129 corresponds to the increased processing time T of . Then the above description means that it is determined whether T T is less than the minimum calculation performance coefficient P or not.

Next similarly the processing time of 130 threads and the processing time of 131 threads are compared. Up to the processing time of 256 threads there is almost no change in the processing times and they can be determined to be within the range of the thread interval w.

Next the processing time of 256 threads and the processing time of 257 threads are compared and the value obtained by dividing the value obtained by subtracting the processing time of 128 threads from the processing time of 257 threads by the value obtained by subtracting the processing time of 128 threads from the processing time of 256 threads is more than or equal to the minimum calculation performance coefficient P. Thus the processing times increase rapidly and they can be determined to be out of the thread interval w. This means the end of the thread interval w and thus the thread interval w can be determined as 256 128 128. Then this thread interval w is the same as 128 which is the total number of thread groups in the GPGPU and thus the GPGPU can be determined as normal.

Next the processing time of 257 threads and the processing time of 258 threads are compared and the value obtained by dividing the value obtained by subtracting the processing time of 256 threads from the processing time of 258 threads by the value obtained by subtracting the processing time of 256 threads from the processing time of 257 threads is less than the minimum calculation performance coefficient P. Thus there is almost no change in the processing times and they can be determined to be within the range of the thread interval w. Thereafter the same processing is repeated.

This embodiment can be achieved by a computer executing a program. Further this embodiment can also be applied to a computer readable recording medium which records the program and a computer program product such as a program. The recording medium is for example a flexible disk a hard disk an optical disk a magneto optical disk a CD ROM Compact Disc Read Only Memory a magnetic tape a non volatile memory card a ROM Read Only Memory or the like.

First in step S the test apparatus obtains device information from the GPGPU . The device information includes the GPGPU model name T the total number of in GPGPU cores C and the number of in GPGPU SMs S of . Details of this processing will be described later with reference to .

Next in step S the test apparatus ends abnormally when the processing of step S ends abnormally or proceeds to step S when the processing of step S ends normally.

Next in step S the test apparatus obtains operation definition information from the operation definition file in the storage device . The operation definition information includes as illustrated in and the number of in SM thread groups G the maximum number of parallel processed threads M and the minimum calculation performance coefficient P. Details of this processing will be described later with reference to .

Next in step S the test apparatus ends abnormally when the processing of step S ends abnormally or proceeds to step S when the processing of step S ends normally.

Next in step S the test apparatus initializes the processing time storage area and the calculation result storage area in the main memory . Details of this processing will be described later with reference to .

Next in step S the test apparatus ends abnormally when the processing of step S ends abnormally or proceeds to step S when the processing of step S ends normally.

Next in step S the test apparatus changes the number of threads and instructs the GPGPU to execute parallel processing and obtains the processing time of every number of threads . Details of this processing will be described later with reference to .

Next in step S the test apparatus ends abnormally when the processing of step S ends abnormally or proceeds to step S when the processing of step S ends normally.

Next in step S the test apparatus analyzes a variation of the processing time of every number of threads and recognizes presence of defective core in the GPGPU . Details of this processing will be described later with reference to Thereafter the test apparatus ends the processing of normally.

Next in step S the test apparatus determines whether the securing of areas in the processing of step S is failed or not. The test apparatus proceeds to step S when the securing of are as is succeeded or proceeds to step S when the securing of areas is failed.

Next in step S the test apparatus issues a device information obtaining instruction to the GPGPU as the test target and obtains device information from the GPGPU . This device information includes the GPGPU model name T the total number of in GPGPU cores C and the number of in GPGPU SMs S.

Next in step S the test apparatus proceeds to step S when normal device information is inputted from the GPGPU or proceeds to step S when error information is inputted from the GPGPU .

Next in step S when the GPGPU model name T in the inputted device information exists in the operation definition file in the storage device the test apparatus determines that it is a testable GPGPU and proceeds to step S. When the GPGPU model name T in the inputted device information does not exist in the operation definition file in the storage device the test apparatus determines that it is a non testable GPGPU and proceeds to step S.

Next in step S the test apparatus stores in the main memory the GPGPU model name T in the inputted device information.

Next in step S the test apparatus stores in the main memory the total number of in GPGPU cores C in the inputted device information. For example in the case of since the GPGPU has 16 SMs and each SM has 32 cores the total number of in GPGPU cores C is 16 32 512.

Next in step S the test apparatus stores in the main memory the number of in GPGPU SMs S in the inputted device information. For example in the case of since the GPGPU has 16 SMs the number of in GPGPU SMs S is 16. Thereafter the test apparatus ends the processing of and proceeds to step S via step S of .

In step S the test apparatus outputs the contents of abnormality in above step S S or S to the display device to have the contents displayed. Next in step S the test apparatus changes the end code to an abnormal value. Thereafter the test apparatus ends the processing of and ends abnormally via step S of .

Next in step S the test apparatus determines whether the securing of areas in the processing of step S is failed or not. The test apparatus proceeds to step S when the securing of areas is succeeded or proceeds to step S when the securing of areas is failed.

Next in step S the test apparatus proceeds to step S when the opening of file is succeeded in the processing of step S or proceeds to step S when the opening of file is failed.

Next in step S the test apparatus refers to the operation definition file of reads the number of in SM thread groups G corresponding to the GPGPU model name T obtained in step S of and stores the read number of in SM thread groups G in the main memory .

Next in step S the test apparatus refers to the operation definition file of reads the maximum number of parallel processed threads M corresponding to the GPGPU model name T obtained in step S of and stores the read maximum number of parallel processed threads M in the main memory .

Next in step S the test apparatus refers to the operation definition file of reads the minimum calculation performance coefficient P corresponding to the GPGPU model name T obtained in step S of and stores the read minimum calculation performance coefficient F in the main memory . Thereafter the test apparatus ends the processing of and proceeds to step S via step S of .

In step S the test apparatus outputs the contents of abnormality in above step S or S to the display device to have the contents displayed. Nest in step S the test apparatus changes the end code to an abnormal value. Thereafter the test apparatus ends the processing of and ends abnormally via step S of .

Next in step S the test apparatus determines whether the securing of area in the processing of step S is failed or not. The test apparatus proceeds to step S when the securing of area is succeeded or proceeds to step S when the securing of area is failed.

Next in step S the test apparatus secures the calculation result storage area for storing a calculation result of the GPGPU of every number of threads in the main memory .

Next in step S the test apparatus determines whether the securing of area in the processing of step S is failed or not. The test apparatus proceeds to step S when the securing of area is succeeded or proceeds to step S when the securing of area is failed.

Next in step S the test apparatus issues a memory area securement instruction for the calculation result storage area in the memory of the GPGPU to the GPGPU as the test target to make it secure the calculation result storage area for storing a calculation result of the maximum number of parallel processed threads M obtained in step S of .

Next in step S the test apparatus proceeds to step S when information indicating that the processing of step S is failed is inputted from the GPGPU or ends the processing of when information indicating that the processing of S is succeeded is inputted from the GPGPU and proceeds to step S via step S of .

In step S the test apparatus outputs the contents of abnormality in above step S S or S to the display device to have the contents displayed. Next in step S the test apparatus changes the end code to an abnormal value. Thereafter the test apparatus ends the processing of and ends abnormally via step S of .

Next in step S the test apparatus issues a thread execution instruction for the number of threads N to the GPGPU as the test target so as to start parallel processing of the number of threads N. The GPGPU starts parallel processing of the number of threads N and when the processing finishes writes a calculation result of threads in the calculation result storage area in the memory .

Next in step S the test apparatus issues a thread status confirmation instruction to the GPGPU as the test target and obtains parallel processing information of the GPGPU . This parallel processing information includes information of whether processing of threads is finished or not.

Next in step S the test apparatus determines whether processing of all the number of threads N is finished or not based on the parallel processing information of step S. The test apparatus proceeds to step S when it is finished or returns to step S and repeats the above processing when it is not finished.

In step S the test apparatus processing time obtaining unit finishes measuring of the processing time of the GPGPU by the CPU and sots the time from start of measuring in step S to finish of measuring in step S to the processing time A N 1 as the processing time of the number of threads N of the GPGPU . The processing time A N 1 is an array variable in the processing time storage area in the main memory of . For example the processing time A 0 indicates the processing time of one thread and the processing time A 1 indicates the processing time of two threads.

Next in step S the test apparatus issues to the GPGPU as the test target a memory area copy instruction for copying a calculation result of the GPGPU stored in the calculation result storage area in the memory of the GPGPU to the calculation result storage area in the main memory of the test apparatus and copies the calculation result of all the number of threads K from the calculation result storage area of the GPGPU to the calculation result storage area of the test apparatus .

Next in step S the test apparatus determines whether the calculation result of all the threads in the calculation result storage area matches an expected value or not. When the calculation result of all the threads matches the expected value this means that the calculation result is correct and hence the test apparatus proceeds to step S or when the calculation result of at least part of the threads does not match the expected value this means that the calculation result is wrong and hence the test apparatus proceeds to step S.

Next in step S the test apparatus determines whether the number of threads N matches the maximum number of parallel processed threads M or not. The number of threads K is initially set to 1 in above step S of . The maximum number of parallel processed threads M is the maximum number of parallel processed threads M set in above step S of . When the both numbers do not match this means that processing of ail the number of threads has not finished yet and hence the test apparatus proceeds to step S or when the both numbers match this means that the processing of all the number of threads has finished and hence the test apparatus ends the processing of and proceeds to step S via step S of .

In step S the test apparatus increases the number of threads H by 1 and returns to above step S and repeats processing of the increased number of threads N. When processing up to the maximum number of parallel processed threads M finishes the processing is finished.

In step S the test apparatus outputs the contents of abnormality in above step S to the display device to have the contents displayed. Next in step S the test apparatus changes the end code to an abnormal value. Thereafter the test apparatus ends the processing of and ends at a normally via step S of .

Next in step S the test apparatus determines whether the number of in SM thread groups G is 0 or not. The number of in SM thread groups G is the number of in SM thread groups G set in above step S of . When the number of in SM thread groups G is 0 this means the method to process threads in units of cores as illustrated in and thus the test apparatus proceeds to step S or when the number of in SM thread groups G is 1 or more this means the method to process threads in units of thread groups as illustrated in and thus the test apparatus proceeds to step S.

In step S the test apparatus processing unit number obtaining unit sets the total number of in GPGPU cores C as the thread interval w illustrated in . The thread interval w corresponds to the maximum number of processing units which can simultaneously parallel process a plurality of threads. The total number of in GPGPU cores C is a numeric value set in above step S of . For example in the case of and since the GPGPU has 16 SMs and each SM has 32 cores the total number of in GPGPU cores C is 16 32 512. As a result the thread interval w becomes 512. Thereafter the test apparatus proceeds to step S.

In step S the test apparatus processing unit number obtaining unit sets the product of the number of in SM thread groups G and the number of in GPGPU SMs S as the thread interval w illustrated in . The thread interval w corresponds to the maximum number of processing units which can simultaneously parallel process a plurality of threads.

The number of in SM thread groups G is the number of in SM thread groups G set in above step S of . For example in the case of and since each SM has eight thread groups the number of in SM thread groups G is 8.

Further the number of in GPGPU SMs S is the numeric value set in above step S of For example in the case of and since the GPGPU has 16 SMs the number of in GPGPU SMs S is 16.

As a result the thread interval w is G S 8 16 128. Thereafter the test apparatus proceeds to step S Processing after step S is processing common to the method to process threads in units of cores of and the method to process threads in units of thread groups of and thus can corresponds to both the methods.

In step S the test apparatus sets the quotient of dividing the maximum number of parallel processed threads M by the thread interval w as an expected value y of the number of times of processing time variations. The maximum number of parallel processed threads M is the maximum number of parallel processed threads M set in above step S of . The thread interval w is the value set in above step S or S. The expected value y of the number of times of processing time variations is an expected value of the number of times the processing time increases rapidly when the number of threads is changed up to the maximum number of parallel processed threads M and means the number of thread intervals w of or .

Next in step S the test apparatus determines whether the number of threads x matches the maximum number of parallel processed threads M or not. When the number of threads k is smaller than the maximum number of parallel processed threads M processing for all the number of threads x has not finished yet and hence the test apparatus proceeds to step S or when the number of threads x matches the maximum number of parallel processed threads M this means that the processing of all the number of threads x has finished and hence the test apparatus proceeds to step S.

In step S the test apparatus calculates a value A x 1 E by subtracting the base processing time E from the calculation time A x 1 calculates a value A x E by subtracting the base processing time E from the calculation time A x and calculates a quotient A x 1 E A x E by dividing the value A x 1 E by the value A x E .

Here the initial value of the base processing time E is set to 0 in above step S The processing times A x 1 and A x are the processing times measured in above step S of . The processing time A x is the processing time of the number of threads k and the processing time A x 1 is the processing time of the number of threads x 1 .

Then the test apparatus determines whether or not the quotient A x 1 E A x E is more than or equal to the minimum calculation performance coefficient P. The test apparatus proceeds to step S when it is less than the minimum calculation performance coefficient P or proceeds to step S when it is more than or equal to the minimum calculation performance coefficient P.

For example initially the thread x is 0 and in the case of and for example the processing time A 0 of one thread and the processing time A 1 of two threads are substantially the same and thus the quotient A x 1 E A x E becomes approximately 1 which is less than the minimum calculation performance coefficient P. In this case the test apparatus proceeds from step S to step S.

In step S the test apparatus increases the number of threads x by 1. For example the number of threads x is increased from 0 to 1. Thereafter the test apparatus returns to the processing of step S and repeats similar processing. That is the test apparatus proceeds from step S to step S. When the number of threads x is 1 for example in the case of and the processing time A 1 of two threads and the processing time A 2 of three threads are substantially the same. Thus the quotient A x 1 E A x E becomes approximately 1 which is less than the minimum calculation performance coefficient P and the test apparatus proceeds from step S to step S Similarly in the case of the quotient A x 1 E A x E is less than the minimum calculation performance coefficient P up to the number of threads x 510 and in the case of the quotient A x 1 E A x E becomes less than the minimum calculation performance coefficient P up to the number of threads x 126 and similar processing is repeated.

In the case of when the number of threads x 511 the processing time A 512 of 513 threads is about two times the processing time A 511 of 512 threads and thus the quotient A x 1 E A x E becomes approximately 2 which is more than or equal to the minimum calculation performance coefficient P. As a result the test apparatus proceeds from step S to step S.

On the other hand in the case of when the number of threads x 127 the processing time A 128 of 129 threads is about two times the processing time A 127 of 128 threads and thus the quotient A x 1 E A x E becomes approximately 2 which is more than or equal to the minimum calculation performance coefficient P. As a result the test apparatus proceeds from step S to step S.

In step S the test apparatus sets the processing time A x as the base processing time E. For example as described above in the case of since the number of threads x 511 the processing time A 511 of 512 threads is set as the base processing time E. On the other hand in the case of since the number of threads x 127 the processing time A 127 of 128 threads is set as the base processing time E. This set new base processing time is used in the next calculation in step S.

Next in step S the test apparatus determines whether or not the number of threads x 1 can be divided by the thread interval w and proceeds to step S when it can be divided or proceeds to step S when it cannot be divided. That is the test apparatus proceeds to step S when the number of threads x 1 is a value of integral multiple of the thread interval w or proceeds to step S when it is not a value of integral multiple.

In when no defective core exists in the GPGPU the number of threads x 511 as described above. Thus the number of threads x 1 512 and as set in step S the thread interval w 512. In this case the number of threads x 1 512 can be divided by the thread interval w 512.Thus no defective core is detected and the test. apparatus proceeds from step S to step S.

On the other hand when one or more defective cores exist in the GPGPU the number of threads x is smaller than 511. For example when the GPGPU has one defective core the number of threads x is 510 and when the GPGPU has two defective cores the number of threads x is 509. In this case the number of threads x 1 cannot be divided by the thread interval w 512 which proves that the GPGPU as the test target has defective cores and the test apparatus proceeds to step S.

Further in when no defective core exists in the GPGPU the number of threads x 127 as described above. Thus the number of threads x 1 is 128 and as set in step S the thread interval w 128. In this case the number of threads x 1 128 can be divided by the thread interval w 128. Thus no defective core is detected and the test apparatus proceeds from step S to step S.

On the other hand when one or more defective thread groups defective cores exist in the GPGPU the number of threads x is smaller than 127. For example when the GPGPU has one defective thread group the number of threads x is 126 and when the GPGPU has two defective thread groups the number of threads x is 125 In this case the number of threads x 1 cannot be divided by the thread interval w 128 which proves that the GPGPU as the test target has defective thread groups defective cores and the test apparatus proceeds to step S.

In step S the test apparatus increases the number of times z of processing time variations by 1. For example the number of times z of processing time variations increases from 0 to 1. The number of times z of processing time variations is the number of times the processing time increases rapidly which is counted when the n umber of threads is changed up to the maximum number of parallel processed threads M and corresponds to the number of times of the thread interval w of or . Thereafter the test apparatus returns to the processing of step S and repeats similar processing. Thereafter in step S in the case of since the number of threads x is 512 the processing time A x is the processing time A 512 of 513 threads the processing time A x is the processing time A 513 of 514 threads and the base processing time E is the processing time A 511 of 512 threads. Thereafter similar processing is repeated.

In step S when the number of threads x matches the maximum number of parallel processed threads M it means that processing of all the number of threads is finished and thus the test apparatus proceeds to step S.

In step S the test apparatus determines whether the number of times z of processing time variations matches the expected value y of the number of times of processing time variations or not. The expected value y of the number of times of processing time variations is a value set in above step S. When the both numbers match this proves that no defective core exists and thus the test apparatus proceeds to step S. When the both numbers do not match this proves that one or more defective cores exist and thus the test apparatus proceeds to step S.

In step S the test apparatus output unit outputs information indicating that all the cores in the GPGPU are normal to the display device to have the information displayed and outputs the information to the storage device to have the information recorded. Thereafter the test apparatus ends the processing of and the processing of .

In step S the test apparatus output unit outputs information indicating that one or more defective cores exist in the GPGPU to the display device to have the information displayed and outputs the information to the storage device to have the information recorded. Thereafter the test apparatus ends the processing of and the processing of .

Thus the result of testing the GPGPU is outputted to the display device and the storage device . In this embodiment in step S of the calculation result of processing threads by the GPGPU and the expected value of this calculation result are compared and when the both do not match information indicating that the GPGPU as the test target is abnormal is outputted in step S of . On the other hand when the both match and then number of changes of threads matches the maximum number of processing units which can simultaneously parallel process in step S of information indicating that the GPGPU as the test target is normal is outputted in step S of . By performing both the test of the calculation result and the test of the processing time it is possible to perform the test under more strict conditions and improve the detection rate of defective cores.

A test is conceivable which increases the efficiency of floating point calculation at a maximum to derive the maximum performance of the GPGPU and measures FLOPS Floating point number Operations Per Second to determine whether it is in a predetermined range or not. However this test complicates the system of the test program and the execution time of the test program becomes as long as for example several minutes to several tens of minutes. Further the test program used in the stage of product evaluation needs tuning of a floating point operation instruction sequence for measuring FLOPS due to differences in characteristics of every model of the GPGPU instruction sequence optimization specification of every processor and hence needs a maintenance cost.

On the other hand according to this embodiment when the maximum number of parallel processed threads M is 100000 the GPGPU can be tested appropriately in a short time as short as several seconds. Further this embodiment does not need to consider characteristics of every model of the GPGPU and hence can suppress the maintenance cost of every model of the GPGPU when applied to a test program for mass manufacturing and or maintenance.

Note that in this embodiment the case where the test target is the GPGPU has been described as an example but it is not limited to the GPGPU and can be applied to various types of processing devices other than the GPGPU.

The present embodiments are to be considered in all respects as illustrative and no restrictive and all changes which come within the meaning and range of equivalency of the claims are therefore intended to be embraced therein. The invention may be embodied in other specific forms without departing from the spirit or essential characteristics thereof.

All examples and conditional language provided herein are intended for the pedagogical purposes of aiding the reader in understanding the invention and the concepts contributed by the invention to further the art and are not to be construed as limitations to such specifically recited examples and conditions nor does the organization of such examples in the specification relate to a showing of the superiority and inferiority of the invention. Although one or more embodiments of the present invention have been described in detail it should be understood that the various changes substitutions and alterations could be made hereto without departing from the spirit and scope of the invention.

