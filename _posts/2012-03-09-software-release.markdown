---

title: Software release
abstract: Some embodiments of a method and an apparatus to conduct software release have been presented. In one embodiment, a user submits a request to conduct software release on a set of servers. Each of the servers has a distinct platform. In response to the request, a set of commands in a cross-platform language is sent to the servers via remote procedure calls (RPCs) in a transactional format.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09003385&OS=09003385&RS=09003385
owner: Red Hat, Inc.
number: 09003385
owner_city: Raleigh
owner_country: US
publication_date: 20120309
---
This application is a continuation of U.S. patent application Ser. No. 11 894 363 filed Aug. 20 2007 which issued as U.S. Pat. No. 8 166 469 on Apr. 24 2012 the entire contents of which are hereby incorporated by reference.

Embodiments of the present invention relate to release engineering and more specifically to conducting software release.

Software release generally refers to the distribution of a new or an upgraded version of computer software which may include a program or a suite of programs. Software release may occur in a wide variety of environments such as for example in quality assurance QA manufacturing etc. In a typically release the new or upgraded software is deployed to many machines which include local and or remote machines e.g. servers workstations personal computers special purpose machines such as cellular telephones appliances and set top boxes etc. . Furthermore the machines may or may not have different platforms. A platform as used herein broadly refers to a combination of hardware and or software to execute software applications. For example a platform may include an operating system of the machine programming environment of the machine computer architecture of the machine etc. Some examples of platforms include Linux Microsoft Windows Solaris Mac OS X etc. For instance software written in Java is likely to be deployed to machines having different platforms.

Different platforms typically work with different application programming interfaces APIs . Thus a release engineer conventionally has to manually log onto the machines having different platforms to input one or more commands in order to deploy the new or upgraded software properly. Furthermore when the software release has to be conducted in a transactional format the release engineer has to wait for the execution result of a transaction on one or more machines such that if there is an error or failure on one of the machines the release engineer may recover the error or failure by sending the appropriate commands to the machine having the error. Thus the release of software to machines having different platforms may be a tedious and labor intensive task.

Described herein are some embodiments of a method and an apparatus to conduct software release. In some embodiments a user submits a request to conduct software release on a set of servers. Each of the servers has a distinct platform. In response to the request a release apparatus may send a set of commands in a cross platform language to the servers via remote procedure calls RPCs in a transactional format. A transaction generally refers to a series of interaction between two entities or objects which may include exchange of information. To send the commands in a transactional format the release apparatus may send a command based on a response received from a server. For example if a response from a server indicates that a previous command has failed then the release apparatus sends a command to recover from the failure. The RPC allows the commands to be remotely executed by the servers. Note that the RPC may be referred to as remote method invocation in some embodiments.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions below are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

Processing logic generates a user interface to receive user input processing block . In some embodiments the user interface may be presented to a user via a display device e.g. a monitor coupled to the release apparatus. Alternatively the user interface may be presented via a network access application e.g. a web browser on a client device remotely coupled to the release apparatus via a network e.g. an intranet the Internet etc. . In some embodiments the user input includes a request to conduct software release to multiple servers communicatively coupled to the release apparatus. Note that the servers may have different platforms such as Linux Windows UNIX Mac etc.

Processing logic then checks to determine if the user further provides a client application or a plan script processing block . If the user provides a client application processing logic may execute the client application to conduct software release processing block . The client application may specify a particular server acting as a release apparatus and instruct the server to send commands via RPCs to other servers. In some embodiments the client application is written in a cross platform language. A cross platform language is a programming language supported by multiple platforms such as Python. An exemplary client application is shown in .

Referring to the client application connects to a server at http 127.0.0.1 8000. Then the client application instructs the servers to execute the commands . If there is an error in executing any of the commands on a server the client application instructs the server to execute the error commands .

Referring back to if the user provides a plan script instead of the client application then processing logic uses an interpreter to translate instructions in the plan script into commands in a cross platform language such as Python processing block . The plan script allows for simple batching of remote commands and thus the plan script eliminates the hassle of manually inputting individual commands for each of the servers. Furthermore the plan script may be used repeatedly thus making the process repeatable on different servers and or at different times. For instance the same plan script may be executed multiple times on different servers simply by changing the server variables in the plan script. In some embodiments the plan script may be written in a predetermined format while the interpreter is written in the cross platform language as well. As such the user may not even need to know any existing programming language as long as the user can compose the plan script in the predetermined format which may or may not be proprietary. The interpreter may translate the plan script from the predetermined format into the cross platform language.

In some embodiments a plan script may include instructions for one or more transactions to interact with software executable on the servers e.g. to install new software to upgrade existing software to query a database to manipulate a logical object etc. . In some embodiments there are one or more main transaction instructions for each transaction. Furthermore a transaction may further include one or more failure transaction instructions. One sample plan script is shown in . The plan script includes instructions for two transactions. The instructions for the first transaction are from line six to line thirteen and the instructions for the second transaction are from line fifteen to line seventeen. For the first transaction there are main transaction instructions on lines six through nine and failure transaction instructions on lines ten through thirteen. Processing logic uses the interpreter to translate these instructions in the plan script into commands in a cross platform language.

After the plan script has been translated processing logic sends a command corresponding to a main transaction instruction to the servers via RPC such as Extensible Markup Language RPC XML RPC processing block . The servers may execute the command. Processing logic receives the result of the execution from the servers processing block . Then processing logic determines if the execution has succeeded or failed processing block . If the execution has succeeded processing logic further checks if the current transaction has been completed processing block . If there are no more commands to be executed for the current transaction then the current transaction is completed and processing logic transitions to processing block . Otherwise processing logic goes to the next main transaction instruction of the current transaction in the plan script processing block . From processing block processing logic transitions back to processing block to repeat the above operations for the next main transaction instruction.

As discussed above if there are no more commands to be executed for the current transaction then the current transaction is completed and processing logic transitions to processing block . Processing logic checks to determine if there are any more transactions in the plan script processing block . If not then the process ends. If there is at least one more transaction then processing logic moves onto the next transaction processing block . From processing block processing logic transitions back to processing block to repeat the above operations for the next transaction.

In some embodiments the instructions of a transaction include one or more failure transaction instructions. If processing logic determines that the execution of a command corresponding to a main transaction instruction has failed in processing block then processing logic goes to the failure transaction instructions for the current transaction processing block . Processing logic sends commands corresponding to the failure transaction instructions to the servers via RPCs processing block . After sending the commands corresponding to all the failure transaction instructions of the current transaction processing logic goes into processing block to determine if there is at least one more transaction and continues with the process as discussed above.

Processing logic receives a command from a release apparatus during a software release processing block . The command may be sent from a release apparatus via RPC. As discussed above the release apparatus may send the command in response to executing a client application. Alternatively the command may be generated from an instruction in a plan script processed by the release apparatus. Processing logic executes the command processing block . After executing the command processing logic sends result of the execution to the release apparatus processing block .

In some embodiments where the user provides a client application the processing device may execute the client application to conduct the software release. For example the client application may cause the processing device to send commands to multiple servers having different platforms via RPCs. Because the servers have different platforms the commands may be written in a cross platform language such as Python. An exemplary embodiment of a client application is shown in .

Alternatively the user may input a plan script which is translated by the interpreter . Specifically the interpreter may translate instructions in the plan script into commands in a cross platform language so that the commands can be sent to the servers with different platforms via RPCs. An exemplary embodiment of a plan script is shown in .

The network interface communicatively couples the release apparatus to the servers via a network. Through the network interface the commands in the cross platform language are sent via RPCs to the servers.

The release apparatus may be implemented on a variety of machines e.g. servers workstations personal computers etc. and may sometimes be referred to as a server or a client. In some embodiments the release apparatus is implemented on an XML RPC server in a standalone mode or an apache cgi bin mode. The release apparatus may read a configuration file from the storage device for the release apparatus user and server type configuration. The configuration file may include one or more user password pairs for authentication. To run the release apparatus in standalone mode the server needs to have a package manager e.g. Red Hat Package Manager RPM available from Red Hat Inc. of Raleigh N.C. installed. Alternatively the release apparatus may be run in the apache cgi bin mode as an apache cgi bin script where it is not necessary to have another open port to implement the XML RPC server.

In general the workstation may receive a user request to conduct software release to the servers A D. In response to the request the workstation may send commands in a cross platform language via RPCs to the servers A D in order to deploy the software to the servers A D. The commands may be based on a client application or a plan script of instructions as discussed above. To further illustrate the concept some exemplary operations are discussed in details below.

Referring to the workstation sends a Stop httpd command to the server A to stop a web server daemon 1 . Then the workstation sends another command to the server C to verify database status 2 . Next the workstation sends another command to the server B to restart Tomcat 3 . Then the workstation sends a command to the server A again to start the web server daemon 4 . The workstation then sends commands to the server D to copy data over 5 and then to restart a proxy 6 . Note that the above commands 1 6 may be sent for a single transaction but the servers A D may have different platforms. So without the release apparatus implemented on the workstation to automatically generate the commands in a cross platform language and send the commands to the servers A D the user has to manually log onto each of the servers A D and submit the commands in accordance to the practice and or requirement of each of the platforms running on the servers A D in order to conduct the software release. Moreover the above process may be readily repeated at another time and or on another set of servers using the release apparatus implemented on the workstation .

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor a central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute the processing logic for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine accessible storage medium also known as a machine readable storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine accessible storage media. The software may further be transmitted or received over a network via the network interface device .

While the machine accessible storage medium is shown in an exemplary embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media etc.

Thus some embodiments of a method and an apparatus to conduct software release have been described. It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

