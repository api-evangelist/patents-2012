---

title: Storage medium, information processing apparatus, and migration method
abstract: A computer-readable storage medium stores program code for causing a computer to perform a method. The method includes steps of creating a redundant configuration including a physical device used by an operating system of the computer and a virtual device of a virtual machine running on another computer connected via a network to the computer, based on identification information of the virtual device; and transferring memory contents of the operating system to the other computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09116743&OS=09116743&RS=09116743
owner: FUJITSU LIMITED
number: 09116743
owner_city: Kawasaki
owner_country: JP
publication_date: 20120210
---
This application is based upon and claims the benefit of priority of Japanese Patent Application No. 2011 053337 filed on Mar. 10 2011 the entire contents of which are incorporated herein by reference.

The embodiments discussed herein are related to a storage medium an information processing apparatus and a migration method.

Migration of an operating system OS from a physical machine to a virtual environment is performed by copying a disk image information stored in a secondary storage unit such as a hard disk drive HDD of the OS from the physical machine to a virtual machine. This technology makes it possible to migrate an OS running directly on a physical machine to a virtual machine running on another physical machine.

However with a method of copying a disk image of an OS from a physical machine to a virtual machine it is necessary to start the OS on the virtual machine based on the copied disk image. In other words it is necessary to restart the OS during the migration. Restarting an OS indicates the loss of continuity of a process or service being executed on the OS.

Here Japanese Laid Open Patent Publication No. 2009 145931 discloses a technology that intends to reduce the period of interruption of a service which occurs when an OS is migrated from a physical machine to a virtual machine.

JP2009 145931 however does not provide measures for preventing problems resulting from differences or inconsistency between devices e.g. network cards and HDDs available in a physical machine and a virtual machine. Generally the same devices available in the physical machine are not always available in the virtual machine. If devices in the physical machine are different from devices in the virtual machine it is highly likely that a process being executed using the devices in the physical machine before migration cannot be continued after the migration. That is it is highly likely that processes for controlling the devices cannot be correctly performed after the migration.

According to an aspect of this disclosure there is provided a non transitory computer readable storage medium that stores program code for causing a computer to perform a method. The method includes steps of creating a redundant configuration including a physical device used by an operating system of the computer and a virtual device of a virtual machine running on another computer connected via a network to the computer based on identification information of the virtual device and transferring memory contents of the operating system to the other computer.

The object and advantages of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the claims.

It is to be understood that both the foregoing general description and the followed detailed description are exemplary and explanatory and are not restrictive of the invention as claimed.

Preferred embodiments of the present invention are described below with reference to the accompanying drawings. is a drawing illustrating an exemplary configuration of a system according to an embodiment. As illustrated in the exemplary system includes an information processing apparatus P and an information processing apparatus V that are connected to each other via a network such as a local area network LAN . A part or the whole of the network may be implemented by a wireless network.

The information processing apparatuses P and V may be implemented by general purpose computers such as personal computers PC . In this embodiment it is assumed that an operating system OS is migrated from the information processing apparatus P to a virtual machine running on the information processing apparatus V. The information processing apparatuses P and V may be collectively called the information processing apparatuses when distinction is not necessary and may also be called the information processing apparatus in the singular form for descriptive purposes.

Programs that cause the information processing apparatus to perform various processes may be provided via a storage medium . When the storage medium storing programs is mounted on the drive unit the programs are read by the drive unit from the storage medium and are installed in the secondary storage unit . The programs may not necessarily be installed from the storage medium but may instead be downloaded via a network from another information processing apparatus. The secondary storage unit stores the installed programs and other necessary files and data.

The memory temporarily stores programs read from the secondary storage unit when the programs are executed. The CPU executes functions of the information processing apparatus according to the programs temporarily stored in the memory . The interface unit connects the information processing apparatus to a network.

In the descriptions below P is attached to the reference numbers of hardware components illustrated in of the information processing apparatus P and V is attached to the reference numbers of hardware components illustrated in of the information processing apparatus V.

Examples of the storage medium include portable storage media such as a compact disk read only memory CD ROM a digital versatile disk DVD and a universal serial bus USB memory. Examples of the secondary storage unit include a hard disk drive HDD and a flash memory. The storage medium and the secondary storage unit are examples of information processing apparatus readable or computer readable storage media.

A display unit such as a liquid crystal display and an input unit including for example a mouse and a keyboard may be connected to the information processing apparatus .

As illustrated in the information processing apparatus P may include a physical machine OS and a migration start processing unit . The physical machine OS is a general purpose operating system OS . Here an operating system running on the information processing apparatus P is called the physical machine OS for distinction from an operating system a virtual machine OS that runs on the virtual machine of the information processing apparatus V. The physical machine OS runs directly on the information processing apparatus P i.e. a physical machine instead of on a virtual machine. In this embodiment it is assumed that the physical machine OS running on the information processing apparatus P is migrated to the virtual machine of the information processing apparatus V.

As illustrated in the migration start processing unit causes the CPU P to perform a process of migrating the physical machine OS running on the information processing apparatus P to the virtual machine running on the information processing apparatus V. For example the migration start processing unit transfers memory contents in a virtual address space being managed by the physical machine OS or where the physical machine OS is loaded and a disk image of the physical machine OS to the information processing apparatus V. The disk image is a group of files or data that is generated in the secondary storage unit P when the physical machine OS is installed in the information processing apparatus P and is loaded into the memory or the virtual address space when the physical machine OS is executed. After being migrated to the virtual machine the physical machine OS is called the virtual machine OS for descriptive purposes.

The migration start processing unit performs a process for preventing problems resulting from differences between devices being managed or used by the physical machine OS i.e. devices of the information processing apparatus P and virtual devices available at the virtual machine . More specifically the migration start processing unit causes the physical machine OS to create or construct redundant configurations composed of devices being managed by the physical machine OS and virtual devices. Examples of the devices being managed by the physical machine OS include a network interface card NIC and a hard disk drive HDD . The NIC is an example of the interface unit P. The HDD is an example of the secondary storage unit P. Here a redundant configuration indicates a configuration where two or more devices are treated as one virtual device. Examples of redundant configurations include bonding of NICs and a RAID redundant array of independent disks of HDDs.

The migration start processing unit may be implemented as a program module extension module conforming to an extension point of the physical machine OS . Generally an operating system has a mechanism or extension points i.e. interfaces that make it possible to load extension modules implementing extended functions as parts of the kernel and thereby enable dynamic function extension. Implementing the migration start processing unit as a program module conforming to such an interface makes it possible to incorporate the function of the migration start processing unit in the kernel of the physical machine OS without altering for example the source code of the physical machine OS . This in turn makes it possible to ensure the versatility of this disclosure. In other words implementing the migration start processing unit as a program module or extension module makes it possible to apply this disclosure to a general purpose OS available on the market. Still however the migration start processing unit may be originally implemented as a part of the kernel of the physical machine OS . In either case the migration start processing unit needs to function as a part of the kernel of the physical machine OS because only the kernel can read the memory contents of the physical machine OS .

The information processing apparatus V may include a hypervisor and a migration destination processing unit . The hypervisor is a program that causes the CPU V of the information processing apparatus V to implement the virtual machine . Generally a hypervisor is also called a virtual machine monitor or a virtual machine VM manager. For example the hypervisor starts the virtual machine based on a definition file of the virtual machine and manages and monitors the operation of the virtual machine . The definition file of the virtual machine includes the configuration information of the virtual machine .

The migration destination processing unit performs a process for restoring the physical machine OS on the virtual machine implemented by the hypervisor . More specifically the migration destination processing unit restores the physical machine OS with pre migration operating conditions based on the memory contents and the disk image of the physical machine OS transferred by the migration start processing unit . Restoring the physical machine OS with pre migration operating conditions makes it possible to ensure the continuity of a process of the physical machine OS before and after the migration. That is this embodiment enables live migration of the physical machine OS from the physical machine information processing apparatus P to the virtual machine . The migration destination processing unit may be implemented as a program that is separate from the hypervisor or as a part of the hypervisor .

The redundant configuration creating unit includes a physical device search unit a virtual device identification unit a redundant device generating unit and a virtual device information storing unit . The physical device search unit searches for devices included in the information processing apparatus P. In other words the physical device search unit generates a list of devices of the information processing apparatus P. Hereafter devices of the information processing apparatus P may be called physical devices to distinguish them from virtual devices on the virtual machine .

The virtual device identification unit identifies virtual devices corresponding to the physical devices found by the physical device search unit based on virtual device information stored in the virtual device information storing unit . In other words the virtual device identification unit identifies virtual devices that can substitute for the physical devices on the virtual machine to which the physical machine OS has been migrated.

The virtual device information storing unit stores information virtual device information of respective virtual devices of the virtual machine . The virtual device information storing unit may be implemented for example by a storage area of the secondary storage unit P.

The redundant device generating unit causes the physical machine OS to create redundant configurations composed of the physical devices found by the physical device search unit and the corresponding virtual devices.

The redundant configuration reporting unit reports a list of identifiers of the created redundant configurations to the migration destination processing unit . The redundant configuration reporting unit is an example of a reporting unit of the present application.

The reading unit includes a memory content reading unit a disk image reading unit a register content saving control unit and a transfer unit . The memory content reading unit reads obtains memory contents of the physical machine OS that is in operation. The disk image reading unit reads obtains the disk image of the physical machine OS from the secondary storage unit P. The register content saving control unit causes the physical machine OS to save copy contents of registers e.g. a program counter of the CPU P of the information processing apparatus P in the memory space of the physical machine OS . The transfer unit transfers the memory contents read by the memory content reading unit and the disk image read by the disk image reading unit via the interface unit P to the migration destination processing unit of the information processing apparatus V.

The stop control unit controls a process for stopping the physical machine OS . Stopping the physical machine OS is equivalent to turning off the power of the information processing apparatus P.

The migration destination processing unit includes a receiving unit a memory constructing unit a disk image writing unit a context switch control unit a redundant configuration cancelling unit and an unloading unit .

The receiving unit receives via the interface unit V the memory contents and the disk image of the physical machine OS transferred from the migration start processing unit . The memory constructing unit writes the memory contents received by the receiving unit into a memory space that is a virtual address space of the virtual machine OS on the virtual machine . The disk image writing unit writes the disk image received by the receiving unit into a virtual secondary storage unit of the virtual machine .

The context switch control unit performs a process for switching process control of the physical machine OS from the physical machine the information processing apparatus P to the virtual machine .

Exemplary processes performed by the information processing apparatus P and the information processing apparatus V are described below.

In step S the physical machine OS receives from the user a loading request for requesting loading of the migration start processing unit strictly speaking an extension module that causes the information processing apparatus P to function as the migration start processing unit . The loading request may be input for example via an input unit connected to the information processing apparatus P or an information processing apparatus connected via a network to the information processing apparatus P. The loading request may be represented by a command for the physical machine OS . For example the file name of the extension module implementing the migration start processing unit may be specified as an argument of the command.

In response the kernel of the physical machine OS loads the migration start processing unit S . Next the kernel of the physical machine OS inputs an initialization request to the migration start processing unit S . The initialization request is input to the migration start processing unit via an interface an entry point of the migration start processing unit . For example the migration start processing unit may include definition information defining entry points of the migration start processing unit and timing when the entry points are to be called. The definition information may be generated according to extension point interfaces of the physical machine OS . In step S the kernel of the physical machine OS identifies an entry point to be called when the initialization process is performed and calls the identified entry point to input the initialization request to the migration start processing unit .

In response to the initialization request the migration start processing unit sends a start request for starting the migration destination processing unit to the information processing apparatus V S . In response the migration destination processing unit is started at the information processing apparatus V. Then the information processing apparatus V reports to the migration start processing unit that the migration destination processing unit has been started. Here the identification information e.g. an IP address of the information processing apparatus V may be stored for example in the secondary storage unit P of the information processing apparatus P.

Next the redundant configuration creating unit of the migration start processing unit creates redundant configurations composed of the physical devices of the information processing apparatus P and the corresponding virtual devices S . Details of step S a process of creating redundant configurations are described later. After the redundant configurations are created the physical machine OS displays information which indicates the completion of the initialization process by the migration start processing unit on a display unit of the information processing apparatus P or a display unit of another information processing apparatus connected via a network to the information processing apparatus P S .

Details of step S are described below. is a flowchart illustrating an exemplary process of creating redundant configurations.

In step S the physical device search unit of the migration start processing unit searches for physical devices of the information processing apparatus P. The search result may include a device type a device ID and a device name of each physical device found by the search. The device type indicates the type of the physical device which is determined based on the function or use of the physical device. The device ID is the identifier of the physical device. The device name is the name of the physical device. Physical devices may be searched for by calling an application programming interface API provided by the physical machine OS .

When a physical device is found YES in S the virtual device identification unit of the migration start processing unit searches the virtual device information storing unit to find a virtual device with the same device type as that of the found physical device hereafter called a current physical device S .

The virtual device information storing unit may store the virtual device information as illustrated in for virtual devices of the virtual machine that are not equivalent to the physical devices of the information processing apparatus P. In other words the virtual device information may include information on virtual devices of the virtual machine corresponding to physical devices of the information processing apparatus V that may not be able to properly continue processes of physical devices of the information processing apparatus P after the physical machine OS is migrated to the virtual machine .

When a virtual device with the same device type as that of the found physical device is found YES in S the redundant device generating unit obtains the device ID and the device name of the found virtual device hereafter called the corresponding virtual device from the virtual device information storing unit S . Next the redundant device generating unit artificially attaches a dummy of the corresponding virtual device hereafter may be called a dummy virtual device to the information processing apparatus P using the obtained device ID and device name S . Here attaching a device to the information processing apparatus P generally means physically connecting the device to the information processing apparatus P. For example attaching a device having a USB connector means inserting the USB connector of the device into a USB port of the information processing apparatus P. Meanwhile artificially attaching the dummy virtual device to the information processing apparatus P in step S does not mean physically or actually attaching the device to the information processing apparatus P. Instead in step S the redundant device generating unit deceives the information processing apparatus P to believe that a device has been physically connected. Also in step S the dummy virtual device is attached to the information processing apparatus P because the corresponding virtual device is not actually present in the information processing apparatus P.

More specifically the redundant device generating unit generates a false signal which indicates that the corresponding virtual device has been connected on the PCI bus of the information processing apparatus P. The CPU P of the information processing apparatus P receives the signal and outputs an inquiry signal to the PCI bus to acquire the device ID and the device name of the connected virtual device i.e. the dummy virtual device . In response to the inquiry signal the redundant device generating unit sends the device ID and the device name of the corresponding virtual device to the CPU P. Based on the device ID and the device name the dummy virtual device is artificially attached to the information processing apparatus P.

When the corresponding virtual device or the dummy virtual device is artificially attached the physical machine OS recognizes the corresponding virtual device S . More specifically the physical machine OS installs a device driver for the attached corresponding virtual device using a plug and play mechanism. The installation result or the installed device driver is reflected in the memory contents and the disk image of the physical machine OS .

Next the redundant device generating unit obtains a redundancy scheme associated with the corresponding virtual device from the virtual device information storing unit S . Storing redundancy schemes in association with virtual devices in the virtual device information storing unit makes it possible to provide flexibility and expandability for redundancy schemes used to create redundant configurations.

The redundant device generating unit causes the physical machine OS to create a redundant configuration composed of the current physical device and the corresponding virtual device based on the device ID and the device name of the current physical device and the device ID and the device name of the corresponding virtual device S . The created redundant configuration is reflected in the memory contents and the disk image of the physical machine OS . In step S the redundant configuration is created according to the redundancy scheme obtained in step S. Here the redundant device generating unit assigns an identifier to each created redundant configuration and stores a list of identifiers of created redundant configurations in for example the memory P or the secondary storage unit P. The list of identifiers may be used to distinguish the redundant configurations created in relation to the migration of the physical machine OS from redundant configurations created independently of the migration of the physical machine OS .

Then the redundant device generating unit artificially detaches the corresponding virtual device or the dummy virtual device S . More specifically the redundant device generating unit generates a signal indicating that the corresponding virtual device has been detached. Based on the signal the physical machine OS recognizes that the corresponding virtual device has been detached. Detaching a device generally means physically disconnecting the device. In step S however since the corresponding virtual device has not been physically connected or attached the redundant device generating unit artificially detaches the corresponding virtual device. If the physical machine OS is migrated to the virtual machine without detaching the dummy virtual device the actual corresponding virtual device may not be properly attached to the information processing apparatus V. More specifically if the physical machine OS is migrated to the virtual machine without detaching the dummy virtual device the device driver installed in step S is occupied by the dummy virtual device and the device driver cannot be used to control the actual corresponding virtual device on the virtual machine . For this reason the redundant device generating unit artificially detaches the corresponding virtual device or the dummy virtual device in step S.

Steps S through S are performed for each physical device of the information processing apparatus P found in step S.

Next an exemplary process of migrating the physical machine OS which is performed after the process of is described.

In step S the physical machine OS receives a migration start request. The migration start request may be input for example by generating a signal corresponding to a migration start entry point of the migration start processing unit . For example a command for generating such a signal may be provided. In this case the user calls the command to input the migration start request.

In response to the migration start request the physical machine OS reports the start of migration to the migration start processing unit S . In response to the report the migration start processing unit reports the start of migration to the migration destination processing unit running on the information processing apparatus V S . In response to the report the migration destination processing unit generates an empty virtual machine in a memory space of the information processing apparatus V S .

Next the redundant configuration reporting unit of the migration start processing unit transfers or sends the list of identifiers of redundant configurations which has been stored by the redundant device generating unit in the memory P or the secondary storage unit P to the redundant configuration cancelling unit of the migration destination processing unit S . The redundant configuration cancelling unit receives the list of identifiers of redundant configurations and stores the received list of identifiers in for example the memory V or the secondary storage unit V.

The memory content reading unit of the migration start processing unit reads the memory contents of the physical machine OS in units of pages. Also the disk image reading unit of the migration start processing unit reads the disk image of the physical machine OS from the secondary storage unit P. Then the transfer unit of the migration start processing unit transfers the memory contents read in units of pages and the disk image to the migration destination processing unit S through S . For example the transfer unit transfers the memory contents and the disk image in multiple batches.

The memory contents and the disk image sent from the transfer unit are received by the receiving unit of the migration destination processing unit . Each time when a batch or page of the memory contents is received by the receiving unit the memory constructing unit writes the batch of the memory contents into a virtual memory space assigned to the virtual machine OS on the virtual machine and each time when a batch of the disk image is received by the receiving unit the disk image writing unit writes the batch of the disk image into the virtual secondary storage unit of the virtual machine S through S . Each time when the writing of the memory contents or the disk image is completed the receiving unit sends a response indicating the result of writing successful or not to the transfer unit of the migration start processing unit S through S .

The memory constructing unit also writes the virtual addresses and the physical addresses of the pages of the written memory contents in a page table of the virtual machine . The values of the physical addresses may be determined based on the results of writing the memory contents.

Details of the process of transferring memory contents may be determined for example based on a memory content transfer process in a live migration technology for a virtual machine. For example regions rewritten during a transfer process may be flagged and retransferred.

The memory contents may not necessarily be transferred in units of pages. For example multiple pages of the memory contents may be transferred at once or each page may be divided into a predetermined number of parts and one part may be transferred each time. As long as the receiving end the migration destination processing unit can identify the boundary between pages and can generate a page table the memory contents may be transferred in any other units.

Transfer of the memory contents of the physical machine OS and transfer of the disk image of the physical machine OS may be performed in parallel or in series.

In an arrow from the external disk to the information processing apparatus P indicates that an IP address of the external disk is set in the information processing apparatus P and the physical machine OS is loaded from the external disk into the information processing apparatus P. In this case when migrating the physical machine OS the IP address of the external disk from which the virtual machine OS is to be loaded may be set in the virtual machine . For this purpose for example the disk image reading unit obtains the IP address of the external disk from the physical machine OS in parallel with or before or after the transfer of the memory contents. The transfer unit transfers the IP address to the migration destination processing unit . When the IP address is received by the receiving unit of the migration destination processing unit the disk image writing unit writes the IP address in a definition file of the virtual machine as information indicating the source from which the virtual machine OS is to be loaded.

When started by the hypervisor the virtual machine can determine based on the IP address in the definition file that the virtual machine OS is loaded from the external disk .

When transfer of all the memory contents and the entire disk image is completed S and responses to the transfer are received S the register content saving control unit of the migration destination processing unit requests the physical machine OS to save register contents S . The physical machine OS saves or copies the contents of registers such as a program counter of the CPU P in the memory space of the physical machine OS . Next the memory content reading unit reads the saved contents of registers register contents from the memory space of the physical machine OS S . Then the transfer unit transfers the read register contents to the migration destination processing unit S . When the register contents are received by the receiving unit of the migration destination processing unit the memory constructing unit writes the received register contents in a predetermined region of the memory space of the virtual machine S .

Next the context switch control unit of the migration destination processing unit sends a stop request for stopping the physical machine OS to the migration start processing unit S . In response to the stop request the stop control unit of the migration start processing unit turns off the power of the information processing apparatus P and thereby stops shuts down the physical machine OS S .

Next the context switch control unit requests the hypervisor to start the virtual machine S . In response to the request the hypervisor starts the virtual machine S . More specifically the hypervisor reads the register contents written in the memory space of the virtual machine and sets the register contents in the CPU of the virtual machine . For example the value of the program counter is set in the CPU. As a result the physical machine OS migrated to the virtual machine i.e. the virtual machine OS resumes a process from the address indicated by the program counter. This configuration eliminates the need to restart the physical machine OS and enables the physical machine OS to continue a process as the virtual machine OS on the virtual machine .

After the virtual machine is started the primary active components in the redundant configurations become unable to operate normally because the primary components that are available or valid in the information processing apparatus P are not available in the virtual machine . Therefore due to the mechanism of the redundant configurations the process control automatically moves from the primary components to the secondary standby components. Since the secondary components correspond to virtual devices available in the virtual machine the corresponding virtual devices are attached when the virtual machine is started. In this case since the virtual machine includes the corresponding virtual devices actual virtual devices instead of dummy virtual devices are attached. When the process control moves to the secondary components the secondary components can continue without interruption a process being performed by the primary components before the migration. This configuration makes it possible to prevent problems resulting from differences or inconsistency between devices available before and after migration and thereby makes it possible to seamlessly continue a process being performed by the devices. For example the same IP address can be used for NICs before and after migration. Therefore an information processing apparatus communicating with the information processing apparatus P using an IP address before the migration of the physical machine OS can communicate with the information processing apparatus V using the same IP address even after the physical machine OS is migrated to the virtual machine .

Next the redundant configuration cancelling unit of the migration destination processing unit causes the virtual machine OS to cancel the redundant configurations of virtual devices on the virtual machine S . The redundant configurations to be cancelled are determined based on the list of identifiers of redundant configurations stored in the memory V or the secondary storage unit V in step S. This makes it possible to cancel only the redundant configurations created for the migration of the physical machine OS and to prevent other redundant configurations created independently of the migration from being cancelled.

After cancelling the redundant configurations the redundant configuration cancelling unit uninstalls the device drivers of the primary components from the information processing apparatus V since they are not necessary in the virtual machine . Even if the device drivers are not uninstalled there is a little chance of the device drivers causing a problem in execution of a process on the virtual machine . The device drivers to be uninstalled can be identified by querying the virtual machine OS based on the list of identifiers of redundant configurations stored in the memory V or the secondary storage unit V in step S.

Referring back to the unloading unit of the migration destination processing unit causes the virtual machine OS to unload the migration start processing unit from the kernel of the virtual machine OS S . The virtual machine OS is the physical machine OS migrated to the virtual machine together with its operating conditions. Therefore the migration start processing unit loaded into the kernel of the physical machine OS is also present in the kernel of the virtual machine OS . In step S the migration start processing unit remaining in the kernel is unloaded.

Then the migration destination processing unit displays for example a message indicating the completion of the migration process on a display unit of the information processing apparatus V or a display unit of another information processing apparatus connected via a network to the information processing apparatus V S . The message is displayed to report the completion of the migration process to the user.

According to the above embodiment a redundant configuration which includes a device of the information processing apparatus P physical machine and a device of the virtual machine to which the physical machine OS is to be migrated is generated on the information processing apparatus P. This configuration makes it possible to prevent an error in a device control process which may result from differences or inconsistency between devices available in the physical machine and the virtual machine.

In the above embodiment in addition to the disk image of the physical machine OS the memory contents of the physical machine OS are transferred to the information processing apparatus V. This makes it possible to migrate the physical machine OS to the virtual machine while maintaining the operational conditions of the physical machine OS . In other words the above embodiment makes it possible to migrate the physical machine OS from the information processing apparatus P to the virtual machine without restarting the physical machine OS .

Also implementing the migration start processing unit as an extension module makes it possible to apply this disclosure to a general purpose OS.

An aspect of this disclosure provides a non transitory computer readable storage medium storing a migration program an information processing apparatus and a migration method that make it possible to prevent problems that may occur when migrating an operating system from a physical machine to a virtual machine due to differences or inconsistency between devices available in the physical machine and the virtual machine.

All examples and conditional language recited herein are intended for pedagogical purposes to aid the reader in understanding the invention and the concepts contributed by the inventor to furthering the art and are to be construed as being without limitation to such specifically recited examples and conditions nor does the organization of such examples in the specification relate to a showing of the superiority and inferiority of the invention. Although the embodiments of the present invention have been described in detail it should be understood that the various changes substitutions and alterations could be made hereto without departing from the spirit and scope of the invention.

