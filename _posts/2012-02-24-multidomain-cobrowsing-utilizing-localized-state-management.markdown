---

title: Multi-domain co-browsing utilizing localized state management
abstract: A master and a slave computing device within a co-browsing session can be identified. The devices can be associated with a first Unified Resource Identifier (URI) where a portion of the URI is a fully qualified domain name of a Domain Name System (DNS) hierarchy. The devices can be associated with a co-browsing application. A request associated with a second URI from the master computing device can be detected. The second URI can share a root domain with the first URI. A portion of a master artifact associated with the master device can be conveyed to the slave device. The master artifact can be associated with state information of the session. A portion of a slave artifact linked to the slave device can be modified with the portion of the master artifact. The devices can be navigated to the second URI in response to the request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09317615&OS=09317615&RS=09317615
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09317615
owner_city: Armonk
owner_country: US
publication_date: 20120224
---
This application is a continuation of U.S. patent application Ser. No. 13 112 563 filed May 20 2011 pending which is incorporated herein in its entirety.

The present invention relates to the field of co browsing and more particularly to improving multi domain co browsing utilizing localized state management.

Web based conferencing tools are frequently employed to enhance collaboration between users. One tool which is often utilized is co browsing which can permit two or more users to navigate the same networked resource e.g. Web page simultaneously within a session. For example a user can navigate through multiple Web pages on a Web site on one computer while another user views the navigation using another computer. Often times Web sites can span multiple domains such as two sub domains which can restrict the use of many co browsing applications.

Asynchronous Javascript and Extensible Markup Language AJAX communication is a commonly used mechanism amongst co browsing applications. This mechanism is limited however by policies of traditional security models. For example the same origin security policy restricts information exchange between co browsing applications of different domains. Consequently often times session information can be lost when co browsing sessions span multiple domains and or multiple co browsing applications.

One current solution utilizes a proxy server as a routing mechanism to each of the domains involved in the co browsing session. The drawback to this solution is that the proxy server needs to be configured to appropriately route requests to the appropriate domain server hosting the co browsing application. This configuration can be time consuming and error prone. Further frequently the Uniform Resource Identifier URI patterns for co browsing applications have similar patterns which results in URI rewrite rules that can be complex and difficult to maintain. In addition the ability to share the session information between the co browsing sessions is not available without exposing the session to security risks. For instance explicitly configuring session cookies to be more global in nature can allow unauthorized entities access to content of the co browsing session.

One aspect of the present invention can include a computer program product a system an apparatus and a method for improving multi domain co browsing utilizing localized state management. A master and a slave computing device within a co browsing session can be identified. The devices can be associated with a first Unified Resource Identifier URI where a portion of the URI is a fully qualified domain name of a Domain Name System DNS hierarchy. The devices can be associated with a co browsing application. A request associated with a second URI from the master computing device can be detected. The second URI can share a root domain with the first URI. A portion of a master artifact associated with the master device can be conveyed to the slave device. The master artifact can be associated with state information of the session. A portion of a slave artifact linked to the slave device can be modified with the portion of the master artifact. The devices can be navigated to the second URI in response to the request.

Another aspect of the present invention can include a computer program product a method an apparatus and a system for improving multi domain co browsing utilizing localized state management. A co browsing engine can be able to perform co browsing session state management and or routing. The co browsing session can be associated with a shared domain. The shared domain can be two or more networking resources having a common root domain of a Domain Name System hierarchy. The co browsing session can be associated with a co browsing application. The co browsing application can be associated with an interface. The co browsing engine can reside within a client computing device. A data store can be configured to store a state artifact associated with the co browsing session. The state artifact can include a session identifier and or a fully qualified domain name. The state artifact can be replicated to a client computing device in response to a co browsing session request associated with the shared domain.

Yet another aspect of the present invention can include a computer program product a system an apparatus and a method for improving multi domain co browsing utilizing localized state management. A request for a Uniform Resource Locator URI associated with a first co browsing application can be received. The URI can be a fully qualified domain name of a Domain Name System hierarchy. The URI can share a common domain name with a historic URI. The first co browsing application can be associated with a co browsing session. The co browsing session can be associated with a state artifact. The first co browsing application can be associated with a client computing device. A state information of the state artifact associated with the first co browsing application can be identified. The state information can be at least one of a session identifier and a domain. The state information of the state artifact can be replicated to a second co browsing application. The second co browsing application can be associated with a different computing device.

The present disclosure is a solution for improving multi domain co browsing utilizing localized state management. In the solution a co browsing engine within a client computing device can be utilized to perform state management to enhance co browsing sessions interacting with multiple domains. That is the client computing device can perform routing and state management functionality traditionally performed by a proxy server. The co browsing engine can identify fully qualified domain names and associated sub domain requests within a co browsing session. Utilizing a state artifact e.g. Hypertext Transport Protocol cookie engine can replicate state information for each device within the co browsing session. In one embodiment an HTTP cookie can be employed to maintain state information for each device associated with the co browsing session. That is the engine can permit stateful navigation to sub domains within the co browsing session.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions.

These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

As used herein a master and slave computing device can be a computing device executing a co browsing application within a computing environment. The co browsing application can be associated with a co browsing session. The master computing device can be a computing device able to store state information associated with the co browsing session. The slave computing device can be a computing device able to receive state information from the master computing device. A co browsing session can be a joint navigation of a networked resource by two or more computing devices. Co browsing can include but is not limited to joint navigation screen sharing desktop sharing application sharing a Web conference having co browsing portions a text chat associated with co browsing capabilities and the like. A networked resource can include but is not limited to a Uniform Resource Identifier URI a Uniform Resource Locator and the like. For example a URI can be a file stored within a server computer addressable by a fully qualified domain name and a file name. Networking resource can include but is not limited to a network protocol a domain name a networking port a resource path a resource name and the like. For example a networking resource can be a Web page associated with a Web site e.g. http abc.domain.com home.html .

As used herein a shared domain can be two or more networking domains sharing a common root domain of a Domain Name System DNS hierarchy. The root domain can include an Internet root domain a network domain a sub domain and the like. For example the root domain can be a root Internet domain such as www.example.com. Shared domain can include but is not limited to a URI URL Uniform Resource Name and the like. In one instance shared domain can include an Internet Protocol address associated with different ports. For example an IP address can be associated with two networking ports such as port eighty and port ninety. Shared domain can include but is not limited to alphanumeric characters numeric characters and the like. It should be appreciated that the disclosure is not limited to Internet domains and can be extended to accommodate any namespace system where same origin policies constrain the system.

In step a co browsing session can be initiated. The co browsing session can be initiated via one or more traditional and or proprietary procedures. In one embodiment the co browsing session can be initiated via a master computing device. In the embodiment the master computing device can designate slave computing devices which can join the session. In step a master and slave computing device can be joined to the session. The master and slave computing device can be identified based on permissions configuration options and the like. For example a master device can be determined based on a moderator status of a user. In step a domain can be selected by the master computing device. Domain selection can be performed automatically and or manually. In one instance domain selection can be an automated Hypertext Transport Protocol HTTP redirection to a domain. In another instance the domain can be selected manually via user input. For example a user can utilize a human interface device e.g. keyboard to input a Uniform Resource Locator URL .

In step the master and slave computing device can be navigated to the selected domain. Navigation can include but is not limited to one or more HTTP requests content rendering Asynchronous JavaScript and Extensible Markup Language AJAX requests and the like. In step a shared domain can be selected by the master device. The shared domain can be selected in response to an automatic and or manual event occurrence. For instance shared domain selection can be performed when a user selects a hyperlink. In step shared domain navigation can be detected. Detection can be performed via one or more traditional and or proprietary mechanisms. In one instance detection can be performed via request interception. In the instance an HTTP request can be analyzed prior to conveyance to determine when a shared domain is requested.

In step a state artifact of the master computing device can be replicated to the slave device. The state artifact can be one or more entities associated with the state of the co browsing session. In one instance a state artifact stored within master computing device can be copied and conveyed to the slave computing device. In the instance the state artifact can be an HTTP cookie which can be utilized to synchronize the state between the master and slave device. It should be understood that the state artifact can be selectively replicated. That is state information can be selectively replicated to maintain security policies. In step the master and slave computing device can be navigated to the shared domain. In step the method can end.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. In method step can be performed each time a domain is selected. That is the method can be continuously executed during a co browsing session to enable state maintenance across multiple domains. It should be appreciated that method can be applied to any co browsing session to permit statefulness of the session. For example the method can be applied to a co browsing session through the manual activation of a configuration option. It should be understood that method can be utilized in the context of multiple master computing devices multiple slave computing devices and the like.

In one embodiment method can be implemented in the presence of a master and slave computing device change during the course of a session. In the embodiment as a computing device privilege is elevated and or restricted the method can be utilized to maintain session state.

The advantage the disclosure presents over existing solutions permits computing device to efficiently determine co browsing session domain changes for the current session. In addition the disclosure can allow state management transference from a current domain to a different domain without impacting server performance and or adding additional HTTP requests to the server .

System can be a client server architecture implementing a Service Oriented Architecture. In system Web enabled services can provide co browsing application availability to computing device . System can rely upon traditional and or proprietary communication mechanisms and data formats. Communication mechanisms associated with system can include but is not limited to Transport Control Protocol TCP Internet Protocol IP User Datagram Protocol UDP Session Initiated Protocol SIP Hypertext Transfer Protocol HTTP Simple Object Access Protocol SOAP and the like. Data formats can include but is not limited to Extensible Markup Language XML Hypertext Markup Language HTML Extensible HTML XHTML Standard General Markup Language SGML and the like.

As used herein a computing device can include but is not limited to a master computing device a slave computing device multiple master computing devices multiple slave computing devices and the like. In system a computing device can be communicatively linked to a co browsing server via network . It should be appreciated that each computing device associated with a co browsing session can include a co browsing engine . In one embodiment co browsing session can be traditionally established. In another embodiment co browsing session can be established in a proprietary manner. In one embodiment co browsing session can be associated with an IBM WEBSPHERE APPLICATION SERVER COMMUNICATION ENABLED APPLICATION.

Co browsing server can be a hardware software entity able to host a co browsing application . Server can include but is not limited to co browsing application a configuration setting a data store and the like. Server functionality can include executing application servicing a remote procedure call maintaining session data and the like. In one instance server can be an IBM WEBSPHERE APPLICATION SERVER software. It should be appreciated that server can include but is not limited to an application server a proxy server and the like.

Co browsing application can be a software entity able to facilitate a co browsing session . Application can conform but is not limited to a desktop co browsing application a Web based co browsing application a remotely executing application and the like. Application can include but is not limited to a collaboration application a text exchange application a videoconferencing application and the like. Application can utilize one or more technologies including but not limited to JAVA 2 ENTERPRISE EDITION J2EE JAVA 2 STANDARD EDITION J2SE and the like. It should be appreciated that application can include multiple co browsing applications associated with multiple domains. That is the disclosure can permit application session state to be migrated to a different application.

Co browsing session can be a data element associated with a co browsing application . Co browsing session can include but is not limited to session identifier computing device identifier user identifier timeout data and the like. Session can conform to but is not limited to a database a file and the like. In one embodiment session can be associated with server . In another embodiment session can be associated with computing device .

Computing device can be a hardware software entity associated with a co browsing engine . Device can include but is not limited to co browsing engine application data store interface and the like. Device can include a desktop computer laptop mobile phone tablet computing device personal digital assistant PDA portable computing device and the like. It should be appreciated that computing device is not a proxy server. Computing device can be but is not limited to a thin client a fat client a hybrid client and the like.

Co browsing engine can be a hardware software component for managing a session state associated a co browsing session spanning multiple domains. Engine can include but is not limited to navigation engine state handler session manager configuration setting and the like. In one embodiment engine can be a portion of a co browsing application . In another embodiment engine can be a functionality encapsulated within an application programming interface API . In yet another embodiment engine can be a portion of a operating system service executing within device . It should be understood that engine components can be optional components permitting engine functionality is maintained.

Navigation agent can be a hardware software element able to perform navigation actions in response to a co browsing application request. Agent functionality can include but is not limited to retrieving content presenting content traversing content and the like. Content can include but is not limited to documents multi media software applications and the like. For instance content can be an embedded video within a Web page. Agent can interact with convention and or non conventional network resources including but not limited to a Uniform Resource Identifier URI a Uniform Resource Locator URL and the like. In one embodiment agent can be a portion of a local domain service. For instance agent can be a functionality of a client side domain name server.

State handler can be a hardware software entity for performing state management functions associated with session . Handler functionality can include but is not limited to tracking state elements storing state data auditing state information replicating state artifact conveying state artifact and the like. In one embodiment handler can utilize state artifact to store and or retrieve state information in real time. In the embodiment state handler can provide synchronization functionality during a co browsing session. In the embodiment state handler can convey state artifact as state information to computing devices associated with the co browsing session .

Session manager can be a hardware software element able to control a co browsing session. Manager functionality can include but is not limited to session control transfer session control management session initiation session termination and the like. In one instance manager can permit migration of a session from one co browsing application to a different co browsing application. In the instance manager can negotiate traditional and or proprietary session initiation and termination operations to facilitate session state migration. In another instance manager can be utilized to transfer session control between computing devices. In the instance manager can utilize a traditional and or proprietary mechanisms to indicate session control among two or more computing devices. In one embodiment non state session information can be synchronized utilizing manager .

State artifact can be a data set for maintaining the state of a co browsing session . State artifact data set can include but is not limited to state information historic state information and the like. State information can include but is not limited to domain requests authentication information security permissions user identity preferences and the like. In one instance state artifact can be stored within data store which can be a read only memory ROM medium. In the instance data store can cache state artifact during a co browsing session . In another instance state artifact can be stored within a random access memory medium RAM for improved security. In the instance state artifact can be stored within a protected memory region permitting secure access to session state.

Configuration setting can be one or more parameters for controlling the behavior of co browsing engine . Setting can include but is not limited to state artifact management options authentication settings application settings user preferences and the like. Setting can be automatically determined manually determined and the like. In one instance setting can be synchronized with a computing device within a shared co browsing session. That is common settings can be easily replicated across multiple computing devices.

Trigger can be a mechanism for determining a domain change within session . Trigger can include but is not limited to a ruleset a pattern matching rule and the like. For example trigger can be a Uniform Resource Locator parser able to detect a different domain request. Trigger can include but is not limited to automatically established triggers manually established triggers and the like. Trigger can be stored within engine data store and the like. For instance a trigger can be created to allow session migration from a domain e.g. abc.domain.com to a different domain e.g. xyz.domain.com .

Interface can be a hardware software element for interacting with a co browsing application and or co browsing session . Interface can include but is not limited to a software application screen a Web browser and the like. Interface can be communicatively linked to computing device . Interface can present Uniform Resource Identifier content configuration setting application and the like. In one instance interface can present a co browsing application which can include content .

It should be appreciated that application can include multiple co browsing applications . In one embodiment system can permit multiple co browsing applications to exchange state information as navigation occurs. In the embodiment engine can migrate session state from one co browsing application to another co browsing application. It should be appreciated that system can operate transparently without requiring user interaction and or intervention.

In one embodiment engine can be a downloadable component able to dynamically extend state capabilities in real time. For instance a device which lacks engine can be temporarily enhanced for the duration of session . In the embodiment engine can execute as an intermediary layer processing application requests and maintaining the state of session . In one instance engine can be configured to provide varying levels of state management based on computing device resources usage requirements and the like. In one embodiment engine can permit a slave only mode which can only receive state information. In the embodiment engine can communicate with a master mode engine to receive state information.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. In one instance engine can be a functionality of a Web browser. In the instance engine can be a plug in component of a Web browser. It should be appreciated that system can be one embodiment for enabling co browsing state management over multiple domains. Other embodiments including similar functionality are contemplated. It should be understood that information not associated with session state can be conveyed to server in a traditional and or proprietary manner. In one instance system can be a component of a computer program product. In the instance system can be associated with an IBM WEBSPHERE APPLICATION SERVER software.

In section state artifact management options can be presented. State artifact management options can include but is not limited to referrer data preferences expiration information and the like. In one instance section can permit the customization of state artifact replication. In one configuration of the instance selection of options within section can affect a current co browsing session. In another configuration of the instance options within section can be utilized to apply global settings to active co browsing sessions.

In section options for maintaining state artifact data validity and integrity can be presented. Data validity options can include but is not limited to checksum encryption authentication and the like. Section can allow customization for utilizing the disclosure within existing security policies. Checksum can include but is not limited to hashing checksums fingerprint checksums and the like. Encryption can include traditional and or proprietary encryption mechanisms.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. Interface interface artifacts can include but is not limited to radio dialogs checkboxes drop down selection boxes multi selection boxes and the like. Interface can be customizable based on system capabilities co browsing application requirements and the like.

The flowchart and block diagrams in the illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

