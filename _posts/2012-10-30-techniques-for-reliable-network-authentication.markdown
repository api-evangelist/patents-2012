---

title: Techniques for reliable network authentication
abstract: Disclosed are various embodiments of techniques that may be used to improve the reliability of network authentication. A communication session is established between a server computing device and a client computing device. The communication session is established via a network using a credential for a network site. A verifier for the credential is generated, which may be used to confirm the authenticity of the credential. The verifier is provided to the client computing device via the network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09165126&OS=09165126&RS=09165126
owner: Amazon Technologies, Inc.
number: 09165126
owner_city: Seattle
owner_country: US
publication_date: 20121030
---
In an age of information people may exchange data over communication sessions that may traverse various networks. Those participating in the communication session may wish to keep the data confidential as to the general public while also exchanging data with the parties participating in the communication session. Traditional data security architectures suffer from vulnerabilities that may compromise the confidence of the data as it traverses networks such as the Internet.

The present disclosure relates to techniques for detecting and or deterring the inconspicuous interception of communication session data by network devices commonly referred to as a man in the middle MitM attack. During initiation of a communication session between a client and a server the server may present a set of credentials that may be used to authenticate the particular server as the actual server expected by the client. During a man in the middle attack an intermediate network device may instead present an alternate set of credentials to the client which for a variety of possible reasons may be accepted by the client for authentication.

In some embodiments a validation application executing in the client may be used to detect the presence of a man in the middle by comparing the current presented credentials for a server to credentials or other identifiers presented previously during a prior communication session. In further embodiments a marking service executing in a server may covertly provide credentials or other identifiers for verification by a client. In various embodiments the server and or client may initiate computationally intensive operations such as re negotiation of communication sessions multiple layers of encryption for a portion of the communication session and or other actions that may deter and or detect man in the middle activities. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes a computing device in data communication with one or more client devices by way of the network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc or any combination of two or more such networks. Data communication transiting the network may be forwarded and or examined by a network device .

The computing device may comprise for example a server computer or any other system providing computing capability. Alternatively the computing device may comprise a plurality of servers or other computing devices that are arranged for example in one or more server banks or computer banks or other arrangements. For example the computing device may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. The computing device may be located in a single installation or may be distributed among many different geographical locations.

Various applications and or other functionality may be executed in the computing device according to various embodiments. Also various data is stored in a data store that is accessible to the computing device . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing device for example include a network page server marking service and other applications services processes systems engines or functionality not discussed in detail herein. The network page server may encode for display network pages data for mobile applications or other network content embodied in some other form that facilitates access to one or more network sites. To that end the network page server may serve data such as network pages to client devices over a communication session using a protocol such as hypertext transfer protocol HTTP HTTP Secure HTTPS simple object access protocol SOAP representational state transfer REST user datagram protocol UDP transmission control protocol TCP and or other protocols. Such a network page server may comprise a commercially available network page server such as for example Apache HTTP Server Apache Tomcat Microsoft Internet Information Services IIS and or other network page servers.

In some embodiments the network page server may secure a portion of the communication session with the client device using secure sockets layer transport layer security SSL TLS such as may be used for the HTTPS protocol and or other protocols as can be appreciated. In order to facilitate establishing a secure communication session the network page server may use various credentials such as for example X.509 digital certificates public keys private keys shared keys and or other types of credentials as can be appreciated.

The marking service is executed in order to facilitate validation of credentials presented to a client device on behalf of the computing device . To this end the marking service may communicate with the network page server in order to provide various possible types of credential identifiers and or other data to the client device . The marking service may communicate with the network page server using various protocols such as for example HTTP HTTPS SOAP REST UDP TOP and or other protocols. The credential identifiers may include all or a portion of a credential a cryptographic hash value for a credential and or other data that may be used to identify the particular credential .

In some embodiments the marking service may include coding rules a transaction log and or other possible data. The coding rules comprise rules for providing network content including credential identifiers verifiers to client devices . The coding rules may specify types of credential identifiers to be used the method of delivery for the credential identifiers rules for particular client devices or groups of client devices and or other possible specifications as can be appreciated.

The transaction log comprises data associated with historical use or non use of the credential identifiers during a communication session between the network page server and a client device . For a given communication session the transaction log may include the credential identifiers delivered to a client device the network content or other data used to deliver the credential identifiers the coding rule used to initiate delivery or non delivery of a credential identifier and or other potential activities. In other embodiments the functionality of the marking service may be integrated into the network page server or may be a plug in program module integrating with the network page server using an application programming interface API or other programmatic interface of the network page server .

The data stored in the data store includes for example data relating to network sites and potentially other data. Each of the network sites comprises various data associated with the presence of a distinct network presence such as a website that may be accessible through the network page server . The credentials for each network site may include X.509 digital certificates public keys private keys shared keys and or other types of credentials as can be appreciated. The network content includes network pages images video audio and or other types of content that may be delivered to a client device by the network page server . Furthermore the network content may include applications or other types of objects executable in a virtual machine such as for example Flash Java or JavaScript .

The client device is representative of a plurality of client devices that may be coupled to the network . The client device may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer server laptop computer personal digital assistant smartphone set top box tablet computer system game console electronic book reader or other devices with like capability.

The client device may be configured to execute various applications such as a client application virtual machine validation application and or other applications. The client application may be executed in a client device for example to access and render network content served up by the network page server and or other servers thereby rendering a user interface on the display. The client application may for example correspond to a browser a mobile application etc. and the user interface may correspond to a network page a mobile application screen etc. The virtual machine is a software implementation of a computer that is capable of executing the validation application and potentially other applications and objects as would a physical computing device. Various virtual machines may be available on the client device including for example Flash Java JavaScript Python and or other virtual machines as can be appreciated.

The validation application is executed in order to validate credentials presented to the client application on behalf of the computing device during the course of establishing a communication session. To this end the validation application may obtain one or more credential identifiers verifiers for a given credential . The credential identifiers may be embedded within the validation application stored from prior communication sessions with the computing device obtained from the network content and or from other possible sources. In some embodiments signature data may be used to specify locations from which credential identifiers for a particular network site may be obtained.

The network device is representative of a plurality of network devices that may forward and or examine communication data transiting the network . The network device may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a server network router a network switch a network proxy a firewall or other devices with like capability. The network device may comprise one or more credentials that may be used to authenticate as one or more network sites that may or may not be hosted in the network device .

Next a general description of the operation of the various components of the networked environment is provided. To begin an operator of the client device uses the client application to initiate a communication session with the network page server . The network page server may offer one or more credentials which may be used to authenticate the identity of the computing device and or the network page server to the client device . For example the communication session may be carried out using the HTTPS protocol which employs SSL TLS to provide authentication confidentiality and potentially other services. Using the SSL TLS protocol the network page server may provide the client device with a credential such as a digital certificate that may be used by the client application to authenticate the computing device and or the network page server .

The data exchanged during initiation and operation of the communication session traverses the network and may include a path transiting the network device . As the data transits the network device the network device may intercept and or modify the data including the credential used during initiation of the communication session. As a result a communication session that appears to terminate only on the client device and the computing device may instead be two communication sessions one session between the client device and the network device and the second session between the network device and the computing device . This scenario may be possible due to ability of the network device to successfully convince the client application that a forged credential of the network device is the proper credential for the computing device and or the network page server . Although the various techniques described in this disclosure may operate with or without a network device performing such a man in the middle interception the techniques may be used to reduce the likelihood that such interceptions are attempted.

In some embodiments the validation application executing in the client device may obtain the credential presented to the client application during initiation of a present communication session. The credential used in the present communication session may then be validated as the proper credentials for a given network site using one or more operations appropriate for the type of credential and corresponding credential identifier s available.

In some embodiments for network sites using a credential that having been previously accessed by the client application the validation application may store a credential identifier for the network site . Each of the credential identifiers stored may be all or a portion of the credential derived from the credential such as a cryptographic hash value or a digital signature and or other possible identifying data.

For example a website for an electronic marketplace may use an X.509 digital certificate as a credential . The digital certificate may contain various fields including a digital signature an issuing certificate authority and or other possible data. In order to create a credential identifier for the digital certificate the validation application may store the complete digital certificate digital signature value of the digital certificate the certificate authority used to issue the digital certificate and or other possible identifying data.

Using one or more credential identifiers corresponding to one or more previous communication sessions with a particular network site the validation application may validate that the credential currently presented has been previously observed. Returning to the previous example the credential identifiers for an electronic marketplace may indicate a digital certificate issued by the certificate authority TrustCorp was previously presented for the electronic marketplace. In this example the validation application may generate a notice or initiate another action if the digital certificate now presented perhaps by an intermediate network device is issued by the certificate authority RogueCorp. Likewise a digital signature or cryptographic hash may be used to determine if any portion of a credential such as a digital certificate has been altered.

In some embodiments one or more credential identifiers may be delivered by the computing device to present client devices thereby enabling validation of a credentials without relying upon previously acquired credential identifiers . To this end the credential identifiers may be inserted as a digital watermark into network content for a network site by the marking service . The marking service may identify an on going communication session between the network page server and the client application which employs a credential for a network site . The marking service may observe requests by the client application for particular network content and may insert credential identifiers into select network content matching the coding rules .

For example the network site may be a website with various network content including a background image. The coding rules may specify insertion of a digital signature for a credential into the background image of the website. In this example the digital signature may be inserted into a metadata portion of the image inserted into a visual portion of the image using steganography and or using various other techniques appropriate for the type of network content and credential identifier to be inserted. The coding rules may further specify actions to be undertaken on the basis of an identity of a client device . For example for a client device having a network address from a particular geographic region it may be desirable to insert or not a credential identifier into network content provided to the particular client device . The geographic region may be determined based upon a geolocation sensor in the client device a location of the network address used by the client device and or other possible techniques.

Actions associated with insertion and or abstentions from inserting credential identifiers into the network content may be recorded by the marking service in the transaction log . The marking service may further generate signature data to be used by the validation application to obtain the credential identifiers that may be embedded within network content for a given network site . The signature data may be based upon the coding rules and or the transaction log and may be distributed to the client device . The signature data may be distributed to the client device using the current or an auxiliary communication session with the computing device through a centralized update site accessible through the network and or through other possible operations.

Once the validation application obtains the credential identifiers in the network content the validation application may validate the credential as previously described. In various embodiments the validation application itself may be network content delivered to the client device . For example the validation application may be a Flash object or other code executable in a virtual machine of the client device . In this example the credential identifiers and or signature data may be embedded in the code delivered to the client device . Once the validation application obtains the credential identifiers the validation application may validate the credential as previously described.

Returning to the marking service in some embodiments the coding rules may direct the marking service to re negotiate an active communication session with the client application negotiate one or more additional communication sessions with the client application and or other possible operations using the existing credential of the network site . Similarly these operations may also or instead be carried out by the client application under the direction of the validation application . While negotiations and re negotiations of communication sessions may not reveal the presence of a network device as a man in the middle these may be regarded as computationally expensive operations. Thus it may reduce the likelihood that such an attack may be carried out.

Similarly in some embodiments the coding rules may direct the marking service to apply an additional encryption operation to a portion of the network content . Similarly this operation may also or instead be carried out by the client application under the direction of the validation application configured with the signature data . The appearance of such double encrypted data that cannot be decrypted by receiving device may indicate the presence of a network device as a man in the middle .

In this scenario the network device acting as an intermediary within the communication session may not be aware that portions of the network content have been double encrypted. Therefore the network device may correctly translate ordinary data traversing the communication session but may not be aware that the double encrypted data should have an additional translation operation applied. Upon discovery of such a scenario the network page server the client application and or other service may generate a notice end the communication session and or initiate another action.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the marking service according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the marking service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

This portion of the execution of the marking service may be executed based on obtaining coding rules with which to identify and mark data exchanged during a communication session between a network page server and a client device . Beginning with block the marking service may communicate with the network page server to identify one or more established communication sessions with a client device .

Next in block the marking service determines if one of the communication sessions matches the criteria of the coding rules . The marking service may select a subset of the established communication sessions for marking based upon for example the location of the client device an operator of the client application the communication session activity and or other possible selection criteria as can be appreciated.

If the currently examined communication session does not match the criteria of the coding rules execution of the marking service may proceed to block . Alternatively if the examined communication session does match the criteria the marking service in block may initiate one or more actions such as watermarking prescribed in the coding rules . As previously described these actions may comprise embedding an identifier for a credential within network content delivering a validation application within the network content initiating a re negotiation of the communication session layering of encrypted data within the communication session and or other possible actions.

Then in block the marking service may store a transaction log of data associated with the various actions undertaken and or foregone. Such data may include the criteria of the coding rules used to identify the network content credential identifier data inserted into the network content or provided to the client device any prior value of data modified in the communication session e.g. layering of encryption and or other possible data. Subsequently in block the marking service determines if there are any further communication sessions remaining that have not been examined and or marked. If no more communication sessions remain this portion of the execution of the marking service ends as shown. Alternatively if other tables do remain execution of the marking service returns to block .

Turning now to shown is a flowchart that provides one example of the operation of a portion of the validation application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the validation application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

This portion of the execution of the validation application may be executed based on obtaining signature data with which to locate and obtain credential identifiers provided by the computing device and or other data stores accessible via the network . Beginning with block the validation application may communicate with the client application to identify one or more established communication sessions with a network page server of a computing device .

Next in block the validation application determines if a communication session of the client application with a network site corresponds to the criteria specified in the signature data . The signature data may provide locations and techniques for obtaining credential identifiers such as through the presence of digital watermarks corresponding to various possible network sites . However if the currently examined communication session does not match the criteria such as a network site of the signature data execution of the validation application may proceed to block .

Alternatively if the examined communication session does match the criteria the validation application in block may obtain a credential identifier using the information provided in the signature data . The signature data may specify various locations and techniques to obtain credential identifiers for a given network site including from within network content having a digital watermark. For example a network site such as a website for an electronic marketplace may embed a Java applet in page for user authentication. In this example the Java applet may be capable of providing credential identifiers to the validation application . Continuing the example a masthead image for the electronic marketplace may also contain credential identifiers within the metadata stored in the image file and or credential identifiers embedded using steganographic techniques.

Then in block the validation application may validate the credential presented to the client application during establishment of the communication session. As previously described each credential identifier may be a copy of the proper credential itself a portion of the credential a cryptographic hash value of the identifier and or other possible formats. The validation operation may determine the validity of the credential using techniques appropriate for the credential and the available credential identifiers .

Next in block the validation application may determine if the credential presented to the client is the authentic credential for a network site or a forged credential . If the credential is the authentic credential execution of the validation application may proceed to block . Alternatively if the validation application determines the credential is not the authentic credential and thus may be a forged credential the validation service may in block generate a notice for the validation failure as well as potentially initiate other actions.

Moving on in block the validation application may determine if execution should continue on the basis of a user request a lack of further unvalidated communication sessions and or other possible reasons. If execution of the validation application is to continue the execution of the validation application returns to block . Alternatively this portion of the execution of the validation application ends as shown.

With reference to shown is a schematic block diagram of the computing device according to an embodiment of the present disclosure. The computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the network page server marking service and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processors as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

With reference to shown is a schematic block diagram of the client device according to an embodiment of the present disclosure. The client device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the client device may comprise for example at least one client computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the client application virtual machine validation application and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processors as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile component are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the network page server marking service client application virtual machine validation application and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the marking service and the validation application respectively. If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the marking service and validation application that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

