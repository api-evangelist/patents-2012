---

title: Device, system, and method for client-governed session persistency between one or more clients and servers of a data center
abstract: A device, system, and method for maintaining session persistency between one or more clients and one or more data servers includes providing a persistent session between the client(s) and data server(s) as a function of a load balancer hint header included in a message received by the load balancer from the client(s). The client(s) modifies the message, which may be generated by an application, to include the load balancer hint header that identifies a location, within the message, of a session ID that identifies the particular persistent session. The load balancer identifies the data server(s) from a session-server table based on the session ID and transmits the message to the identified data server(s). The load balancer may communicate with other load balancers, if the load balancer is unable to locate the corresponding data server, to determine the location of the corresponding data server(s).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09325785&OS=09325785&RS=09325785
owner: 
number: 09325785
owner_city: 
owner_country: 
publication_date: 20120629
---
Cloud computing is a ubiquitous tool by which virtual computing resources and services are provided to companies and other entities. Cloud computing can offer many advantages to a client company including relatively quick efficient and inexpensive upgradability and scalability of computing resources as the needs of the client company changes over time. In cloud computing infrastructure platform and or software may be provided by a cloud computing provider to the client company as a service over a network i.e. over the cloud . For example rather than having independent software packages loaded on each of the client company s computers the software may be provided to the client company as a service accessible by any of the client company s computers using a web browser or associated lightweight application.

The cloud computing provider typically manages one or more data centers which facilitate access to computing resources and services by the client company. Each data center may include one or more data servers e.g. web servers application servers etc. and one or more load balancers to balance the workload from the client company computers across the data servers using a load balancing algorithm or one or more global load balancers to balance the workload across the data centers . As the computing needs of the client company grows additional data servers and or data centers may be added to the company s cloud computing resources to satisfy the increased computing needs. To support multiple contemporaneous access to the virtual computing resources and services by the company client computers each data server may include a local copy of data used by the computing resources services. To ensure each data server has access to a complete copy of the stored data the data is periodically replicated across the data servers.

While the concepts of the present disclosure are susceptible to various modifications and alternative forms specific exemplary embodiments thereof have been shown by way of example in the drawings and will herein be described in detail. It should be understood however that there is no intent to limit the concepts of the present disclosure to the particular forms disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives consistent with the present disclosure and the appended claims.

In the following description numerous specific details such as logic implementations opcodes means to specify operands resource partitioning sharing duplication implementations types and interrelationships of system components and logic partitioning integration choices are set forth in order to provide a more thorough understanding of the present disclosure. It will be appreciated however by one skilled in the art that embodiments of the disclosure may be practiced without such specific details. In other instances control structures gate level circuits and full software instruction sequences have not been shown in detail in order not to obscure the invention. Those of ordinary skill in the art with the included descriptions will be able to implement appropriate functionality without undue experimentation.

References in the specification to one embodiment an embodiment an example embodiment etc. indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the art to effect such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

Embodiments of the invention may be implemented in hardware firmware software or any combination thereof. Embodiments of the invention implemented in a computer system may include one or more bus based interconnects between components and or one or more point to point interconnects between components. Embodiments of the invention may also be implemented as instructions carried by or stored on a transitory or non transitory machine readable e.g. computer readable medium which may be read and executed by one or more processors. A machine readable medium may be embodied as any device mechanism or physical structure for storing or transmitting information in a form readable by a machine e.g. a computing device . For example a machine readable medium may be embodied as read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices mini or micro SD cards memory sticks electrical signals and others.

In the drawings specific arrangements or orderings of schematic elements such as those representing devices modules instruction blocks and data elements may be shown for ease of description. However it should be understood by those skilled in the art that the specific ordering or arrangement of the schematic elements in the drawings is not meant to imply that a particular order or sequence of processing or separation of processes is required. Further the inclusion of a schematic element in a drawing is not meant to imply that such element is required in all embodiments or that the features represented by such element may not be included in or combined with other elements in some embodiments.

In general schematic elements used to represent instruction blocks may be implemented using any suitable form of machine readable instruction such as software or firmware applications programs functions modules routines processes procedures plug ins applets widgets code fragments and or others and that each such instruction may be implemented using any suitable programming language library application programming interface API and or other software development tools. For example some embodiments may be implemented using Java C and or other programming languages. Similarly schematic elements used to represent data or information may be implemented using any suitable electronic arrangement or structure such as a register data store table record array index hash map tree list graph file of any file type folder directory database and or others.

Further in the drawings where connecting elements such as solid or dashed lines or arrows are used to illustrate a connection relationship or association between or among two or more other schematic elements the absence of any such connecting elements is not meant to imply that no connection relationship or association can exist. In other words some connections relationships or associations between elements may not be shown in the drawings so as not to obscure the disclosure. In addition for ease of illustration a single connecting element may be used to represent multiple connections relationships or associations between elements. For example where a connecting element represents a communication of signals data or instructions it should be understood by those skilled in the art that such element may represent one or multiple signal paths e.g. a bus as may be needed to effect the communication.

Referring now to in one embodiment a system for maintaining session persistency between a client and one or more data servers comprises a load balancer configured to receive messages from one or more client computing devices over a network and forward such messages to a selected one or more data servers of a data center . To do so as discussed in more detail below the client computing device is configured to modify particular outgoing messages to include a load balancer hint header that identifies a location within the message at which a session identifier ID is located. The load balancer recognizes such messages based on presence of the load balancer hint header and retrieves the session ID from the message based on the data included in the load balancer hint header. The load balancer maintains a session server table that correlates the session ID to one or more particular data servers . As such the load balancer may maintain a persistent session between one or more particular client computing devices and one or more particular data servers by referencing the session server table to determine the appropriate data server s to receive the message. Once determined the load balancer forwards the message to the appropriate data server s . In this way eventual consistency derived problems are substantially avoided and session persistency is maintained between the one or more client computing devices and one or more data servers by the load balancer as a function of the modified messages sent by the client computing device s .

Conversely in a typical cloud computing system eventual consistency related problems can be difficult to avoid. For example a typical cloud computing system arranged as shown in may exhibit a read after write problem under certain conditions. Such condition may occur for example when a client computing device writes new data to one data server i.e. the associated load balancer routes the write message to a first data server and subsequently reads data from a different data server i.e. the associated load balancer routes the read message to a second data server that has not been updated via replication yet. Such a read after write problem occurs due to the temporal delay of data server replication across the cloud computing system.

Some cloud computing systems attempt to alleviate the read after write problem and ensure eventual consistency by using cookies or data additional to and separate from the messages being sent by the client computing devices. The use of such cookies or additional separate data messages can increase the overhead and latency of the cloud computing systems. Other cloud computing systems may embed data in the message body which is used to establish a sticky session as is known in the art. However such systems require the load balancer to parse every received message body to scan for the embedded stickiness data. Such parsing and scanning can significantly affect load balancer performance because the load balancer has no indication where in the message such stickiness data is located and as such must search the entire message or a significant portion thereof to locate the stickiness data.

Referring back to each of the client computing devices of the system may be embodied as any type of computing device capable of performing the functions described herein. For example each of the client computing devices may be embodied as without limitation a computer a desktop computer a personal computer PC a tablet computer a laptop computer a notebook computer a mobile computing device a smart phone a cellular telephone a handset a messaging device a work station a network appliance a web appliance a distributed computing system a multiprocessor system a processor based system a consumer electronic device a digital television device a set top box and or any other computing device configured to store and access data in the data center . In some embodiments one or more of the computing devices may be embodied as a server e.g. a customer web portal or data server which acts as a client to the data center . Additionally although the system is illustrated in as including two client computing devices it should be appreciated that the system may include additional client computing devices in other embodiments.

In the illustrative embodiment of the client computing device includes a processor an I O subsystem a memory a data storage a communication circuitry and one or more peripheral devices . In some embodiments several of the foregoing components may be incorporated on a motherboard or main board of the client computing device while other components may be communicatively coupled to the motherboard via for example a peripheral port. Furthermore it should be appreciated that the client computing device may include other components sub components and devices commonly found in a computer and or computing device which are not illustrated in for clarity of the description.

The processor of the client computing device may be embodied as any type of processor capable of executing software firmware such as a microprocessor digital signal processor microcontroller or the like. The processor is illustratively embodied as a single core processor having a processor core . However in other embodiments the processor may be embodied as a multi core processor having multiple processor cores . Additionally the client computing device may include additional processors having one or more processor cores .

The I O subsystem of the client computing device may be embodied as circuitry and or components to facilitate input output operations with the processor and or other components of the client computing device . In some embodiments the I O subsystem may be embodied as a memory controller hub MCH or northbridge an input output controller hub ICH or southbridge and a firmware device. In such embodiments the firmware device of the I O subsystem may be embodied as a memory device for storing Basic Input Output System BIOS data and or instructions and or other information e.g. a BIOS driver used during booting of the client computing device . However in other embodiments I O subsystems having other configurations may be used. For example in some embodiments the I O subsystem may be embodied as a platform controller hub PCH . In such embodiments the memory controller hub MCH may be incorporated in or otherwise associated with the processor and the processor may communicate directly with the memory as shown by the hashed line in . Additionally in other embodiments the I O subsystem may form a portion of a system on a chip SoC and be incorporated along with the processor and other components of the client computing device on a single integrated circuit chip.

The processor is communicatively coupled to the I O subsystem via a number of signal paths. These signal paths and other signal paths illustrated in may be embodied as any type of signal paths capable of facilitating communication between the components of the client computing device . For example the signal paths may be embodied as any number of point to point links wires cables light guides printed circuit board traces vias bus intervening devices and or the like.

The memory of the client computing device may be embodied as or otherwise include one or more memory devices or data storage locations including for example dynamic random access memory devices DRAM synchronous dynamic random access memory devices SDRAM double data rate synchronous dynamic random access memory device DDR SDRAM mask read only memory ROM devices erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM devices flash memory devices and or other volatile and or non volatile memory devices. The memory is communicatively coupled to the I O subsystem via a number of signal paths. Although only a single memory device is illustrated in the client computing device may include additional memory devices in other embodiments. Various data and software may be stored in the memory . For example one or more operating systems applications programs libraries and drivers that make up the software stack executed by the processor may reside in memory during execution.

The data storage may be embodied as any type of device or devices configured for the short term or long term storage of data such as for example memory devices and circuits memory cards hard disk drives solid state drives or other data storage devices. In the illustrative embodiment the client computing device maintains a message policy database see stored in the data storage . As discussed in more detail below the message policy database includes policies or rules for determining which outgoing messages are persistent messages and as such should be modified to include the load balancer hint header. Of course the client computing device may store access and or maintain other data in the data storage in other embodiments.

The communication circuitry of the client computing device may include any number of devices and circuitry for enabling communications between the client computing device and the load balancer over the network as discussed in more detail below. The communication circuitry may be configured to use any one or more or combination thereof communication protocols to communicate with the load balancer such as for example a wired network communication protocol e.g. TCP IP a wireless network communication protocol e.g. Wi Fi WiMAX a cellular communication protocol e.g. Wideband Code Division Multiple Access W CDMA and or other communication protocols.

In some embodiments the client computing device may also include one or more peripheral devices . Such peripheral devices may include any number of additional input output devices interface devices and or other peripheral devices. For example in some embodiments the peripheral devices may include a display graphics circuitry keyboard mouse speaker system and or other input output devices interface devices and or peripheral devices.

The client computing device may be substantially similar to the client computing device and include similar components which have been identified in with common reference numbers. As such the description provided above of the components of the client computing device may be equally applicable to those similar components of the client computing device and are not repeated herein so as not to obscure the present disclosure. Of course it should be appreciated that in some embodiments the client computing devices or other client computing devices of the system may be dissimilar to each other. For example the client computing devices of system may be embodied as various types of computing devices different from each other e.g. a desktop computer a mobile computer a tablet computer a smart phone or other computing device and include components typically found in such corresponding computing devices.

As discussed in more detail below the client computing devices are configured to transmit messages to the load balancer of the data center over the network . The network may be embodied as any number of various wired and or wireless networks. For example the network may be embodied as or otherwise include a wired or wireless local area network LAN a wired or wireless wide area network WAN and or a publicly accessible global network such as the Internet. As such the network may include any number of additional devices such as additional computers routers and switches to facilitate communications between the client computing devices and the load balancer of the data center .

As discussed above the data center includes the load balancer and one or more data servers . The load balancer is configured to receive messages from the client computing devices and route such messages to one or more of the data servers . If a received message is a persistent message i.e. the message includes a load balancer hint header the load balancer is configured to retrieve a session ID which identifies the particular message session from the message as a function of the load balancer hint header and determine which data server s to route the persistent message based on the retrieved session ID as discussed in more detail below. Although the data center is shown in as including only a single load balancer and data servers it should be appreciated that in other embodiments the data center may include additional load balancers and one two or more data servers communicatively coupled to each load balancer. Additionally as shown in the system may include multiple data centers in some embodiments.

The load balancer may be embodied as any type of data server or similar computing device capable of performing the functions described herein. In the illustrative embodiment of the load balancer includes a processor an I O subsystem a memory a data storage a communication circuitry and one or more peripheral devices . In some embodiments several of the foregoing components may be incorporated on a motherboard or main board of the load balancer while other components may be communicatively coupled to the motherboard via for example a peripheral port. Furthermore it should be appreciated that the load balancer may include other components sub components and devices commonly found in a sever and or computing device which are not illustrated in for clarity of the description.

The processor of the load balancer may be embodied as any type of processor capable of executing software firmware such as a microprocessor digital signal processor microcontroller or the like. The processor is illustratively embodied as a single core processor having a processor core . However similar to processor the processor may be embodied as a multi core processor having multiple processor cores in other embodiments. Additionally the load balancer may include additional processors having one or more processor cores .

The I O subsystem of the load balancer may be embodied as circuitry and or components to facilitate input output operations with the processor and or other components of the load balancer . In some embodiments the I O subsystem may be embodied as a memory controller hub MCH or northbridge an input output controller hub ICH or southbridge and a firmware device. In such embodiments the firmware device of the I O subsystem may be embodied as a memory device for storing Basic Input Output System BIOS data and or instructions and or other information e.g. a BIOS driver used during booting of the client computing device . However in other embodiments I O subsystems having other configurations may be used. For example in some embodiments the I O subsystem may be embodied as a platform controller hub PCH . In such embodiments the memory controller hub MCH may be incorporated in or otherwise associated with the processor and the processor may communicate directly with the memory as shown by the hashed line in . Additionally in other embodiments the I O subsystem may form a portion of a system on a chip SoC and be incorporated along with the processor and other components of the load balancer on a single integrated circuit chip.

The processor is communicatively coupled to the I O subsystem via a number of signal paths. These signal paths and other signal paths illustrated in may be embodied as any type of signal paths capable of facilitating communication between the components of the load balancer . For example the signal paths may be embodied as any number of point to point links wires cables light guides printed circuit board traces vias bus intervening devices and or the like.

The memory of the load balancer may be embodied as or otherwise include one or more memory devices or data storage locations including for example dynamic random access memory devices DRAM synchronous dynamic random access memory devices SDRAM double data rate synchronous dynamic random access memory device DDR SDRAM mask read only memory ROM devices erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM devices flash memory devices and or other volatile and or non volatile memory devices. The memory is communicatively coupled to the I O subsystem via a number of signal paths. Although only a single memory device is illustrated in the load balancer may include additional memory devices in other embodiments. Various data and software may be stored in the memory . For example one or more operating systems applications programs libraries and drivers that make up the software stack executed by the processor may reside in memory during execution.

The data storage may be embodied as any type of device or devices configured for the short term or long term storage of data such as for example memory devices and circuits memory cards hard disk drives solid state drives or other data storage devices. In the illustrative embodiment the load balancer maintains a session server table see stored in the data storage . As discussed in more detail below the session server table cross references or otherwise correlates session IDs to data servers . That is when a persistent session is established between one or more client computing devices and one or more data servers the load balancer updates the session server table with the session ID to data server pair s for the particular persistent session. Of course the load balancer may store access and or maintain other data in the data storage in other embodiments.

The communication circuitry of the load balancer may include any number of devices and circuitry for enabling communications between the load balancer and the client computing devices over the network . The communication circuitry may be configured to use any one or more communication protocols to effect such communication as discussed above with regard to the communication circuitry of the client computing device . Additionally in some embodiments the load balancer may also include one or more peripheral devices . Such peripheral devices may include any number of additional input output devices interface devices and or other peripheral devices commonly associated with a server or computing device.

Similar to the load balancer the data servers may be embodied as any type of server e.g. a web server or similar computing device capable of performing the functions described herein. As such each data server may include components and features similar to the load balancer such as a processor I O subsystem memory data storage communication circuitry and various peripheral devices which are not illustrated in for clarity of the present description. The data servers may be embodied as independent servers or computing devices separate from the load balancer as shown in . Alternatively in some embodiments one or more of the data servers may be incorporated in or otherwise form part of the load balancer .

In the illustrative embodiment of each data server maintains one or more databases in which various server side applications client based application data and other data is stored. In cloud computing implementations the data servers may execute various server side applications corresponding to applications executed on the client computing devices e.g. stand alone or browser based application . Additionally the data servers may store data received from the client computing devices and or data generated by the client and server side applications in the database . As discussed above the data stored in the databases may be periodically replicated across all data servers of the data center and across data centers to ensure each data server maintains a complete and current data set.

Referring now to in one embodiment the client computing devices establish an environment during operation. The illustrative environment includes one or more applications a session persistency module the message policy database and a communication module . The applications may be embodied as any type of software or firmware application configured to communicate with the data center during execution. For example in cloud computing implementations the applications may be embodied as browser based applications and or thin client side applications configured to communicate with corresponding server side applications executed on one or more data servers . Alternatively in other embodiments the applications may be embodied as stand alone full featured applications configured to communicate with the data center to store data remotely.

The session persistency module may be embodied as hardware firmware software or a combination thereof. In some embodiments the session persistency module may be embodied as an application program interface incorporated in or otherwise interconnected with the application s . Alternatively in other embodiments the session persistency module may be incorporated in the communication stack e.g. TCP IP stack of the communication module . The session persistency module is configured to identify persistent messages sent from the application s and modify such messages to include a load balancer hint header which identifies the location and in some embodiments the length of a session ID included in the message. The session persistency module may identify the persistent messages by accessing the message policy which may be stored in the data storage .

The message policy includes rules and or policies that are used by the session persistency module to determine which outgoing messages sent from the application s are persistent messages i.e. initiate or belong to a client server persistent session . For example in some embodiments the message policy may provide rules or policies for identifying persistent messages based on the message s end points e.g. the internet protocol IP address or media access control MAC address of load balancer or data center to which the message is directed the type of message e.g. the type of hypertext transfer protocol HTTP method used in the message the type of Simple Object Access Protocol SOAP action used in the message etc. other data included in the HTTP or other protocol payload and or other data that may be used by the session persistency module to identify those outgoing messages that should be considered persistent messages.

Once identified as a persistent message the session persistency module modifies the persistent message to include a load balancer hint header. As discussed in more detail below with regard to the load balancer hint header includes a location identifier that identifies the location of a session ID within the message and a length identifier that identifies the length of the session ID. Additionally in some embodiments the load balancer hint header may include an action that identifies an action to be performed by the load balancer . After the persistent message has been modified to include the load balancer hint header the persistent message is transmitted to the data center over the network via the communication module using a suitable communication protocol as discussed above. Similar to the session persistency module the communication module may be embodied as hardware firmware software or a combination thereof.

Referring now to in one embodiment the load balancer may establish an environment during operation. The illustrative environment includes a communication module a session persistency module the session server table or database and a load balancer module . The communication module may be embodied as hardware firmware software or a combination thereof and is configured to receive the messages from the client computing devices over the network . The communication module passes the received messages to the session persistency module for analysis and handling.

Similar to the session persistency module the session persistency module may be embodied as hardware firmware software or a combination thereof. The session persistency module is configured to identify persistent messages from those messages received from the client computing device . To do so the session persistency module determines whether the particular message includes a load balancer hint header. If so the session persistency module retrieves the session ID included in the persistent message based on data included in the load balancer hint header as discussed in more detail below. The retrieved session ID is compared to the session server table to determine which data server s to which that particular session ID has been assigned. The communication module subsequently routes the persistent message to the identified data server s . Alternatively if the session ID is not located in the session server table the message is provided to the load balancer module which selects one or more data servers to which to route the message based on or otherwise using a typical load balancing algorithm e.g. based on the work load of the data servers . The session persistency module subsequently updates the session server table with the newly assigned session server pair.

Referring now to in use the client computing devices may execute a method for generating a persistent message. The method begins with block in which the client computing device is initialized which may include any suitable initialization process. In some embodiments the client computing device may retrieve or otherwise generate the session ID in block which may be embodied as any type of data that identifies a particular persistent session. For example if the session ID has already been generated and assigned by the load balancer the client computing device may retrieve the session ID in block . Alternatively the session ID may be requested from the load balancer by the client computing device or simply assigned by the load balancer to the first message associated with a new session. Further still in some embodiments the session ID may be generated by the client computing device . In such embodiments the session ID may be embodied as a data word that uniquely identifies the client computing device from other client computing devices such as a media access control MAC address or a globally unique identifier GUID . In such embodiments the session ID may be assigned to or otherwise associated with the client computing device prior to execution of the method and retrieved in block . In other embodiments the session ID may be embodied as a data word or other data that is randomly generated in block using a suitable random generator to produce a substantially unique identifier. In such embodiments the session ID may uniquely identify a persistent session such that a single client computing device may maintain multiple persistent sessions.

In block the client computing device may also configure the message policy . As discussed above the message policy includes rules and or policies that may be used by the session persistency module of the client computing device to determine which outgoing messages are persistent messages. As such the client computing device may establish update or otherwise maintain such rules and policies in block .

The client computing device subsequently establishes a connection with the data center over the network in block . In block the session persistency module of the client computing device determines whether the application s executed on the client computing device is attempting to send a message to the data center . If so the method advances to block in which the client computing device determines whether the outgoing message is a persistent message i.e. a message belonging to a persistent session or a message that should initiate a persistent session . To do so the session persistency module retrieves the message policy in block and analyzes the outgoing message using the message policy in block . As discussed above the rules and policy of the message policy may be embodied as any type of rule or policy for determining whether the message is a persistent message such as for example rules or policies based on the message s end point the type of message or other data.

If the session persistency module determines the message is a persistent message in block the method advances to block in which the session persistency module modifies the message to include a load balancer hint header. As discussed above the load balancer hint header identifies the location within the message at which the session ID can be found. As such the load balancer hint header allows the load balancer to retrieve quickly the session ID without the necessity of scanning or analyzing the complete message. The load balancer hint header may be embodied as any type of data that identifies the location of the session ID within the message. For example in embodiments in which HTTP messages are used the load balancer hint header may have the form of LB HINT X Y r n

wherein LB HINT is the header tag that identifies the header as a load balancer hint header X is a location identifier that identifies the location of the session ID within the message Y is a length identifier that identifies the length of the session ID and r n are end tags that identify the end of the load balancer hint. Of course it should be appreciated that the header tag may be embodied as any type of header tag that identifies load balancer hint header and need not be LB HINT in other embodiments depending on for example the type of message. The location identifier may identify the location of the session ID using an absolute value i.e. the exact location within the message or a relative value i.e. the location of the session ID within the message relative to the location of the load balancer hint . The location identifier may identify the location of the session ID using any suitable location metric such as a number of lines bytes characters or the like. Similarly the length identifier may identify the length of the session ID using any suitable metric such as the number of characters bytes or words of the session ID. In some embodiments the session ID may not be inherently included in the message. In such embodiments the session persistency module may also modify the message to include the session ID in block either before or after the inclusion of the load balancer hint header. .

Additionally in embodiments in which the system includes multiple data centers as shown in or in which each data center includes multiple load balancers the load balancer hint header my include an action type that identifies an action to be performed by the load balancer . For example in embodiments in which HTTP messages are used the load balancer hint header may have the form of LB HINT X Y action r n

wherein action defines the action type to be performed by the load balancer . The action type may be embodied as any type of identifier suitable for identifying the requested action. In some embodiments the session persistency module may choose from a set of predefined action types and set the requested action in the load balancer header in block . For example in one particular embodiment a create action type or a search action type may be used. In such embodiments the create action type instructs the load balancer that a new persistent session should be initiated using the current session. The search action type instructs the load balancer that a persistent session already exists for the session ID included in the message and that the load balancer should communicate with other load balancers to locate the persistent session should the current load balancer have no record of that session i.e. there is no session server pair in the local session server table . After the message has been modified as needed in blocks and or the communication module transmits the modified message to the load balancer in block .

Referring back to block if the persistency module determines that the message is not a persistent message the method advances to block . In block the communication module transmits the message to the load balancer as normal. That is the message is treated as a normal non persistent message to be sent to the load balancer.

Referring now to in use the load balancer may execute a method for maintaining session persistency between one or more client computing device and one or more data servers . The method begins with block in which the load balancer is initialized which may include any suitable initialization process. For example in some embodiments the load balancer may establish or otherwise maintain the session server table in block . Additionally in some embodiments each persistent session is assigned a timeout threshold such that each persistent session lasts for only a predetermined or reference time period. In such embodiments the session timeout threshold may be selected determined or otherwise set in block . In some embodiments the magnitude of the session timeout threshold is selected to allow data replication across the data servers i.e. the persistent session is maintained only long enough to ensure data replication across the data servers .

After the load balancer has been initialized the load balancer determines whether a message has been received from a client computing device in block . If so the session persistency module of the load balancer determines whether the received message is a persistent message in block . To do so the session persistency module may determine whether the message includes a load balancer hint header. If the session persistency module determines that the received message is not a persistent message i.e. does not include a load balancer hint header the method advances to block in which the load balancer routes the received message to a data server that is selected by the load balancer module using a typical load balancing algorithm.

If however the received message is determined to be a persistent message i.e. the message includes a load balancer hint header the session persistency module of the load balancer identifies the load balancer hint header in block . Subsequently in block the session persistency module retrieves the session ID as a function of the load balancer hint header i.e. using the data included in the load balancer hint header . For example in embodiments in which the load balancer hint header includes a location identifier and a length identifier the session persistency module locates the session ID within the message using the location identifier and retrieves the session ID using the length identifier. As discussed above the location identifier may identify the absolute or relative location of the session ID.

In block the session persistency module determines whether the load balancer hint head also includes an action type. If not the method advances to block in which the session persistency module searches the local session server table using the retrieved session ID to determine whether a persistent session for that session ID is active. If the session persistency module locates the session ID in the session server table in block the method advances to block in which the communication module of the load balancer routes the message to the data server s identified as paired with the session ID in the session server table . Additionally in some embodiments the load balancer may use data or criteria e.g. load balancing state of replication etc. in addition to the session ID to determine which one or more data servers to which to route the message. In block the session persistency module determines whether the timeout threshold has been reached for any persistent session included in the session server table . If so the method advances to block wherein the session server pair for any timed out persistent session is removed from the session server table . If not or after the session server pair has been removed from the session server table the method loops back to block in which the load balancer monitors for messages from the client computing devices .

Referring back to block if the session ID is not included in the session server table the method advances to block in which the load balancer module of the load balancer selects one or more data servers for the new persistent session i.e. a data server s to receive messages from the client computing device for the new persistent session . As discussed above the load balancer module may use any suitable load balancing algorithm or technique to select the data server . Once selected the session persistency module updates the session server table with the new session ID server pair s using the selected data server s in block . In block a session timer is initiated for the newly established persistent session i.e. for the new session server pair s . In some embodiments the session timer is recorded in the session server table in association with the session server pair s and may be embodied as for example the time at which the new persistent session was established. The method subsequently advances to block in which the session persistency module determines whether the timeout threshold has been reached for any persistent session included in the session server table as discussed above. If so the method advances to block wherein the session server pair for any timed out persistent session is removed from the session server table . If not or after the session server pair has been removed from the session server table the method loops back to block in which the load balancer monitors for messages from the client computing devices .

Referring back to block if the session persistency module determines that the load balancer hint header does include an action type the method advances to block see . In block the session persistency module determines whether the action type is a create action. If so the method advances to blocks and in which the load balancer module selects one or more data servers for the new persistent session updates the session server table and initiates a session timer for the newly established persistent session as discussed above with regard to blocks and . After the new persistent session has been established the method advances to block in which the session persistency module determines whether the timeout threshold has been reached for any persistent session included in the session server table . If so the method advances to block wherein the session server pair s for any timed out persistent session is removed from the session server table . If not or after the session server pair has been removed from the session server table the method subsequently loops back to block in which the load balancer monitors for messages from the client computing devices .

Referring back to block if the action type of the load balancer hint header is determined not to be a create action the method advances to block in which the session persistency module determines whether the action type is a search action. If not the method loops back to block see in which the message is handled as a message having no action type. However if the action type is determined to be a search action the method advances to block in which the session persistency module searches the local session server table using the retrieved session ID to determine whether a persistent session for that session ID is active as discussed above with regard to block . If the session persistency module determines that the session ID is included in the local session server table the method advances to block in which the communication module of the load balancer routes the message to the data server s identified as paired with the session ID in the local session server table . The method subsequently advances to block in which the session persistency module determines whether the timeout threshold has been reached for any persistent session included in the session server table as discussed above. If so the method advances to block wherein the session server pair s for any timed out persistent session is removed from the session server table . If not or after the session server pair has been removed from the session server table the method subsequently loops back to block in which the load balancer monitors for messages from the client computing devices .

Referring back to block if the session persistency module determines that the session ID is not included in the local session server table i.e. the persistent session is not being maintained by the respective load balancer the method advances to block in which the load balancer sends a request to other load balancers within the data center or within other data centers of the system see . In so doing the load balancer requests the other load balancers to search their local session server table for the session ID to determine which of one or more of the other load balancers is maintaining that persistent session. Subsequently in block the load balancer determines whether the session ID has been located by another load balancer e.g. whether an affirmative response from the other load balancer was received by the load balancer . If so in block the load balancer sends a redirect message to the client computing device providing identification data e.g. an IP address of the load balancer s maintaining the particular persistent session. However if the session ID is not located an error message is sent to the client computing device in block and the method loops back to block in which the load balancer monitors for messages from the client computing devices .

Illustrative examples of the devices systems and methods disclosed herein are provided below. An embodiment of the devices systems and methods may include any one or more and any combination of the examples described below.

In one example a load balancer to balance workload from a plurality of client computing devices across a plurality of data servers may include a communication module to receive a message from a client computing device of the plurality of client computing devices and a session persistency module to provide a persistent session between one or more client computing devices and one or more data servers as a function of a load balancer hint header included in the message. The load balancer hint header may identify a location within the message of a session identifier that identifies the persistent session.

In an example the session persistency module to retrieve the session identifier as a function of the load balancer hint header compare the session identifier to a session server table to identify at least one data server to receive the message and transmit the message to the identified at least one data server. In an example the session persistency module may remove the session identifier from the session server table in response to expiration of a session timer associated with the persistent session between the one or more client computing devices and the identified at least one data server. In an example the session persistency module may select using a load balancing algorithm a data server from the plurality of data servers in response to the session identifier not being included in the session server table and transmit the message to the selected data server. In an example the session persistency module may in response to selecting the data server initiate a session timer associated with the persistent session between the one or more client computing devices and the selected data server.

In an example the load balancer hint header may include a location identifier that identifies the location within the message of the session identifier. In an example the location identifier may include an offset value that identifies the location within the message of the session identifier relative to one of i a location of the load balancer hint header in the message or ii the beginning of the message. In an example the load balancer hint header may further include a length identifier that identifies a length of the session identifier. In an example the session persistency module may obtain the session identifier from the message as a function of the location identifier and the length identifier compare the session identifier to a local session server table to identify a data server to receive the message as a function of the session identifier and transmit the message to the identified data server.

In an example the load balancer hint header may include a location identifier that identifies the location within the message of the session identifier and an action type that indicates an action to be performed by the load balancer. In such an example the session persistency module may perform one of a plurality of actions based on the action type included in the load balancer hint header. In an example the session persistency module in response to the load balancer hint header including a corresponding action type may select using a load balancing algorithm a data server from the plurality of data servers to receive the message and transmit the message to the selected data server. In an example the session persistency module may in response to selecting the data server initiate a session timer associated with the persistent session. In an example the session persistency module in response to the load balancer hint header including a corresponding action type may determine whether the session identifier is included in a local session server table and transmit in response to determining that the session identifier is not included in the local session server table a request to at least one other load balancer to determine whether the session identifier is included in a session server table managed by the other load balancer. In an example the session persistency module may receive an acknowledgment from another load balancer that the session identifier is included in a session server table managed by the other load balancer and transmit in response to the acknowledgement a redirect message to the client computing device that sent the message. The redirect message may include load balancer identification data that identifies the load balancer that manages the session server table in which the session identifier is included. In an example the session persistency module may receive a response message from the corresponding data server identified in the session server table managed by the other load balancer to be associated with the session identifier and retransmit the response message to the client computing device that sent the message. In an example the session persistency module in response to determining that the session identifier is included in the local session server table may identify one or more data servers of the plurality of data servers from the local session server table as a function of the session identifier and transmit the message to the identified one or more data servers.

In an example the load balancer hint header may include a label that identifies the load balancer hint header a location identifier that identifies the location within the message of the session identifier a length identifier that identifies the length of the session identifier and an action type that indicates an action to be performed by the load balancer. In an example the load balancer hint header comprises a HyperText Markup Language header. In an example the session identifier uniquely identifies a persistent session between the client computing device that sent the message and one of the data servers.

In another example a client computing device to communicate with one or more data servers of a data center may include a session persistency module to modify a message to be sent from an application executing on the client computing device to the one or more data servers to include a load balancer hint header that identifies a location within the message of a session identifier that identifies a persistent session between the client computing device and the one or more data server. The client computing device may also include a communication module to transmit the modified message to a load balancer that manages the one or more data servers.

In an example the load balancer hint header may include a location identifier that identifies the location within the message of the session identifier. In an example the location identifier may include an offset value that identifies the location within the message of the session identifier relative to one of i a location of the load balancer hint header in the message or ii the beginning of the message. In an example the load balancer hint header may further include a length identifier that identifies a length of the session identifier. In an example the load balancer hint header may further include an action type that indicates an action to be performed by the load balancer. In an example the session persistency module may determine the action to be performed by the load balancer and set the action type to indicate the action to be performed by the load balancer. In an example the action type may indicate that the load balancer is to create a persistent session between the client computing device and the one or more data servers. In an example the action type may indicate that the load balancer is to communicate with another load balancer to locate a corresponding data server with which the client computing device has a current persistent session.

In an example the session persistency module may determine whether the message is a persistent message to be included in a persistent session between the client computing device and the one or more data servers based on a message policy stored on the client computing device. In an example the message policy may identify persistent messages based on at least one of a destination of the message a Hyptertext Transfer Protocol method included in the message and a Simple Object Access Protocol action included in the message. In an example the session persistency module may generate the session identifier and further modify the message by including the session identifier. In an example the session identifier may uniquely identify the client computing device from other computing devices communicating with the load balancer. In an example the session identifier may uniquely identify a persistent session between the client computing device and the one or more data servers. In an example the session identifier may uniquely identify a persistent session between the load balancer and the one or more data servers.

In another example a method to provide a persistent session between a client computing device and a plurality of data servers may include receiving with a load balancer a message from the client computing device determining with the load balancer a location of a session identifier within the message based on a load balancer hint header included in the message the session identifier identifying the persistent session comparing with the load balancer the session identifier to a session server table managed by the load balancer to identify at least one data server of the plurality of data servers to receive the message and transmitting the message from the load balancer to the identified at least one data server. In an example the method may further include removing the session identifier from the session server table in response to expiration of a session timer associated with the persistent session. In an example the method may further include selecting using a load balancing algorithm a data server from the plurality of data servers in response to the session identifier not being included in the session server table and transmitting the message to the selected data server. Additionally in an example the method may further include initiating in response to selecting the data server a session timer associated with the persistent session.

In an example determining the location of the session identifier may include determining the location of the session identifier as a function of i a location identifier of the load balancer hint header that identifies the location within the message of the session identifier and ii a length identifier that identifies a length of the session identifier. In an example determining the location of the session identifier as a function of the location identifier may include determining the location of the session identifier within the message as a function of the location identifier and the location of the load balancer hint header within the message.

In an example the method may further include determining an action to be performed by the load balancer based on an action type included in the load balancer header wherein the action type indicates the action to be performed by the load balancer. In an example the method may further include in response to determining a corresponding action based on the action type i selecting using a load balancing algorithm a data server form the plurality of data servers to receive the message and ii transmitting the message from the load balancer to the selected data server. In an example the method may further include in response to determining a corresponding action based on the action type i determining whether the session identifier is included in a local session server table and ii transmitting in response to determining that the session identifier is not included in the local session server table a request to at least one other load balancer to determine whether the session identifier is included in a session server table managed by the other load balancer. In an example the method may further include receiving an acknowledgment in response to the request from another load balancer that the session identifier is included in a session server table managed by the other load balancer and transmitting in response to the acknowledgement a redirect message to the client computing device that sent the message wherein the redirect message includes load balancer identification data that identifies the load balancer that manages the session server table in which the session identifier is included. In an example the method may further include receiving a response message in response to the request from the corresponding data server identified in the session server table managed by the other load balancer to be associated with the session identifier and retransmitting the response message to the client computing device that sent the message.

In another example a load balancer may include a processor and a memory having stored therein a plurality of instructions that when executed by the processor cause the load balancer to perform any of the methods described above. Additionally in another example one or more machine readable media may include a plurality of instructions stored thereon that in response to being executed result in a load balancer performing any of the methods described above.

In another example a method for persistent session communication between a client computing device and a data server of a plurality of data servers may include modifying a message to be sent from an application executing on the client computing device to the data server to include a load balancer hint header that identifies a location within the message of a session identifier that identifies the persistent session and transmitting the modified message to a load balancer that manages the data server. In an example modifying the message may include setting a location identifier of the load balancer hint header to identify the location within the message of the session identifier. In an example modifying the message may include setting a location identifier of the load balancer hint header to identify the location within the message of the session identifier relative to one of i a location of the load balancer hint header in the message or ii the beginning of the message. In an example modifying the message may include setting a length identifier of the load balancer hint header that identifies a length of the session identifier. In an example modifying the message may include setting an action type of the load balancer hint header that indicates an action to be performed by the load balancer.

In an example setting the action type may include setting the action type to indicate that the load balancer is to create a persistent session between the client computing device and the data server. In an example setting the action type may include setting the action type to indicate that the load balancer is to communicate with another load balancer to locate a corresponding data server with which the client computing device has a current persistent session.

In an example the method may further include determining whether the message is a persistent message to be included in a persistent session between the client computing device and the data server based on a message policy stored on the client computing device. In an example determining whether the message is a persistent message may include determining whether the message is a persistent message based on at least one of a destination of the message a Hypertext Transfer Protocol method included in the message and a Simple Object Access Protocol action included in the message. In an example the method may further include generating the session identifier and further modifying the message by including the session identifier.

In another example a client computing device may include a processor and a memory having stored therein a plurality of instructions that when executed by the processor cause the client computing device to perform any of the methods described above. Additionally in another example one or more machine readable media may include a plurality of instructions stored thereon that in response to being executed result in a client device performing any of the methods described above.

While the disclosure has been illustrated and described in detail in the drawings and foregoing description such an illustration and description is to be considered as exemplary and not restrictive in character it being understood that only illustrative embodiments have been shown and described and that all changes and modifications consistent with the disclosure and recited claims are desired to be protected.

