---

title: System and method for providing offline access in a hosted document service
abstract: A request for a document is received at a user device while in an offline state. The request includes a public uniform resource locator (URL) corresponding to a location remote from the user device. The user device launches an application that intercepts the request and selects one of multiple local caches based on the public URL. Each of the multiple local caches is associated with a private URL. The user device accesses the selected local caches via a corresponding private URL to retrieve an editor. The user device modifies a URL history to replace the private URL with a public URL and provides the document, via the editor, to the user device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09361395&OS=09361395&RS=09361395
owner: Google Inc.
number: 09361395
owner_city: Mountain View
owner_country: US
publication_date: 20120730
---
This application claims benefit pursuant to 35 U.S.C. 119 e of U.S. Provisional Application Ser. No. 61 528 472 filed Aug. 29 2011 which is hereby incorporated herein by reference in its entirety.

This application is related to U.S. patent application Ser. No. 13 166 844 filed Jun. 23 2011 U.S. patent application Ser. No. 13 117 386 filed May 27 2011 U.S. patent application Ser. No. 13 101 312 filed May 5 2011 U.S. patent application Ser. No. 13 075 402 filed Mar. 30 2011 U.S. patent application Ser. No. 13 206 896 filed Aug. 10 2011 U.S. patent application Ser. No. 13 207 051 filed Aug. 10 2011 U.S. patent application Ser. No. 13 207 117 filed Aug. 10 2011 U.S. patent application Ser. No. 13 207 176 filed Aug. 10 2011 U.S. patent application Ser. No. 13 006 259 filed Jan. 13 2011 U.S. Provisional Application No. 61 381 780 filed Sep. 10 2011 U.S. Provisional Application No. 61 448 715 filed Mar. 3 2011 and U.S. Provisional Application No. 61 453 238 filed Mar. 16 2011 all of which are herein incorporated by reference.

This specification relates generally to systems methods and apparatus for providing offline access in a hosted document service and more particularly to systems methods and apparatus for providing offline access in a hosted document service to a plurality of documents.

Existing systems provide limited capability to users accessing online applications while in an offline mode. In existing document processing applications users may edit documents locally. In existing online document processing applications users may edit documents while in an online state by accessing a webpage. However when a user s device is in an offline mode functionality is limited. For example if the user device attempts to access an online document while in an offline state the user s browser may return an error message indicating that Internet connection is lost or unavailable and that the user device is unable to connect to the webpage.

Some browsers while a user device is in an offline state may display cached data e.g. data stored in the browser cache associated with certain webpages. However functionality is limited and when an attempt is made to access a hyperlink within the webpage or make edits to a document within a webpage an error message as described above is typically displayed.

In accordance with an embodiment a request for a document is received at a user device while in an offline state. The request comprises a public uniform resource locator corresponding to a location remote from the user device. An application is launched that intercepts the request. One of a plurality of local caches containing applications capable of viewing documents is selected based on the public uniform resource locator. Each of the plurality of local caches is associated with a private uniform resource locator. The selected local cache is accessed via a corresponding private uniform resource locator to retrieve an editor. A uniform resource locator history is modified to replace the private uniform resource locator with the public uniform resource locator. The document is provided via the editor to the user.

In an embodiment the private uniform resource locator comprises an address of an Internet page with a durable locally cached copy.

In an embodiment the document is stored in a database on the user device. In another embodiment in response to determining that the user device is in an online state a second editor application is launched where the second editor application is configured to communicate with a server at the location remote from the user device. In an embodiment edits made to the document at the user device are stored at the user device and the changes are transmitted to the server. In another embodiment a request to the server to poll for updates to the document is transmitted. In response to polling the server for updates to the document the updates are received.

These and other advantages of the present disclosure will be apparent to those of ordinary skill in the art by reference to the following Detailed Description and the accompanying drawings.

In the exemplary embodiment of network is the Internet. In other embodiments network may include one or more of a number of different types of networks such as for example an intranet a local area network LAN a wide area network WAN a wireless network a Fibre Channel based storage area network SAN or Ethernet. Other networks may be used. Alternatively network may include a combination of different types of networks.

Communication system also includes a website . In an embodiment document service may host website that can be accessed by user device . Document service may comprise a server. In an alternative embodiment website may be hosted by a different server. Document service via website provides user device access to various webpages. In an embodiment website provides to user device access to one or more webpages providing access to a document stored at document service such as a document A shown in . User device may access a World Wide Web page on website that may be viewed using a conventional Web browser for example.

User device may be any device that enables a user to view website via network . User device may be connected to network through a direct wired link or wirelessly. User device may have a display screen not shown for displaying information. For example user device may be a personal computer a laptop computer a workstation a mainframe computer a mobile communication device such as a wireless phone a personal digital assistant cellular device a laptop computer a netbook a tablet device etc. Other devices may be used.

User device also includes a memory which stores a launcher application and a plurality of local editor caches 1local editor cache A 2local editor cache B . . . Nlocal editor cache N hereinafter referred to collectively as . Each of local editor caches is capable of loading displaying and possibly editing a particular subset of documents . Memory also stores a URL Uniform Resource Locator history . URL history is a compilation of various URL s accessed by user device and may include a date and time when a webpage corresponding to a particular URL was accessed. It also determines which URL is apparent to a user when viewing a page. Memory additionally stores a database . Database may store collection of documents document B . . . document N. In an embodiment each document corresponds to one editor cache but each editor cache can be used for multiple documents. For example database may comprise a local Structured Query Language SQL storage an IndexedDB storage a window.localstorage DOM storage an HTML5 sandbox filesystem a combination of these technologies or any other system capable of storing the document collection. Furthermore database may comprise an application cache Application Cache . In an embodiment application cache may store a plurality of local editor caches . In an embodiment application cache may be an AppCache as defined in HyperText Markup Language 5 HTML5 .

In an alternate embodiment application cache URL history and other components may be contained in the browser. In another alternate embodiment database may include application cache and other components.

Each of the plurality of local editor caches includes a cold start editor. In the illustrative embodiment depicted by 1local editor cache A includes cold start editor 2local editor cache B includes cold start editor and Nlocal editor cache N includes cold start editor . The cold start editor is to be used when the user wishes to start editing a document and user device is in an offline mode. The cold start editor is described in detail below.

In an embodiment user device may be a non public device such as a personal laptop or a computer provided to an employee by an employer. The user may be required to give permission prior to storing documents onto their local devices. Document service in communication with user device may conduct opt in procedures for a new user to ask permission prior to storage of their documents locally and the opt out procedure for users who no longer wish to access documents offline on the particular device. Therefore only trusted devices can access documents in an offline mode while untrusted ones would be limited to online access.

In an embodiment editors may obtain the contents of the document for viewing either from this local database from the server or a combination depending on networking circumstances.

Memory may also store warm start editor which includes document A cold start editor and launcher application . Document service may include other components not shown in . In an embodiment document service provides cold start editor launcher application and warm start editor to user device . User device may then launch and or execute any of cold start editor launcher application and warm start editor .

Supposing that the user employs user device to access document A the user may access the document via website for example based on an address such as a URL associated with the document shows document A displayed in an editor implemented as a webpage in accordance with an embodiment. Webpage is a part of website and can be accessed by a user of user device . Thus document A is displayed to a user employing user device within browser via webpage . In the illustrative embodiment website also displays a public URL associated with document A. An example of a public address or a public URL address is shown in . The term address as used herein may refer to a location or a pointer to a location such as a URL for example. In an embodiment browser may optionally display inline with website or anywhere else on screen an offline online indicator which indicates whether or not user device is online and able to connect with document service via network . In an embodiment all URLs public and private may be in the same origin as defined in the HTML web apps standard section 6.3. In an embodiment a document manager may allow a user to select which document they wish to view or edit e.g. by choosing from a document list . There may be two versions of the document manager one for offline use and one for online. Offline document manager shown in may construct the private URL for the application cached editor application and may launch it. Offline document manager may have an address distinct from that of its online counterpart such as DocService dot com offline. The document manager s user interface may include a table. The table may include document titles the date at which the documents were last locally viewed while online and therefore synchronized. Offline document manager may be stored in an application cache.

The document manager may display a document list to enable users to select a document to view or edit. The document list may include secondary information such as whether the given document is holding undelivered local changes described below . In an embodiment the document manager may play a role in application cache maintenance as it is capable of calculating the set of editor application caches necessary to launch any or all of the documents and updating them.

When a user employing user device is able to go online and access documents stored on document service via network user device requests execution of warm start editor . In an embodiment warm start editor is only capable of being started when user device is in an online state. For example an online state may be verified through a successful ping or attempted access to the web. Warm start editor is provided by the document server for immediate execution on the user device when display of a document is requested and may not be locally stored. The requested document may be co mingled with application code. In an embodiment the co mingling may allow certain latency optimization. During startup the warm start editor may store the document in database or update any version already stored there.

For example when user device requests access to document A in an online mode document A is fetched from document service . In an alternate embodiment warm start editor may also use cached images document data and or webfonts stored by user device in memory or database rather than fetching them from document service in an effort to reduce load time when loading document A. As long as the user device is online any warm start editors running on it maintain a connection to document service . This enables them to continually synchronize the documents they are displaying and any version stored in database with that of the server. If the user device goes offline while a warm start editor is running it may continue to run and may allow editing. After a user returns from going offline any warm start editors running on the user device may reconnect with document service and may synchronize the documents they are displaying as well as the versions stored in database .

In warm start i.e. when warm start editor is employed the document is found co mingled with the editor application rather than having to be fetched via an XMLHttpRequest XHR . This sequence may also be an implementation of the warm start startup sequence.

When a user employing user device is in an offline mode and attempts to access document A user device launches cold start editor . Cold start editor may comprise an application cache which may comprise an application cache manifest. The application cache manifest is a list of all URLs a webpage uses. The application cache manifest is provided to a browser such as browser . The resource mentioned within the application cache manifest are structured to exclude document A although they may contain user specific data. The application cache manifest is described in detail below. Each cold start editor has a private URL which is not advertised. Users usually request their documents using public URLs which describe resources only available online. Launcher application intercepts such requests creates the corresponding private address and navigates to it causing for example cold start editor to be retrieved from 1local editor cache A and started. Cold start editor then replaces the apparent URL of the page which would otherwise show the private address with the public address. It then appears that the public address was navigated to all along. This provides a familiar experience to the user and ensures that any recording of the apparent URL for example as a bookmark does not include the private address. An example of private address is shown in . In an embodiment HyperText Markup Language 5 HTML5 history application programming interfaces APIs may be used to disguise private address . Private address comprises components which identify an editor cache others that identify a documents and additional information. In an embodiment when started cold start editor reads its private URL and determines which document the user intended to open. It then reads a user record from database to find the current offline user e.g. a user employing user device who has opted in to allow local caching of documents . The user record may list one or more users who have rights to access corresponding documents. For example the playwright in the example above may be listed as a user who has access to the play. Once it is determined that the user is agreed to and given permission to access a locally stored document cold start editor reads document A from database and a display of it is provided.

In cases where a cold start editor i.e. when cold start editor is employed is started when online a Hypertext Transfer Protocol http request may be made which accepts an identification of a document i.e. document ID and returns data comprising a JavaScript Object Notation JSON response containing the document. This is used to populate the local database and render document .

In an embodiment the cold start editors e.g. cold start editors and and launcher application are adapted to run from an application cache e.g. application cache . In an embodiment none of the cold start editor application s JavaScript JS or HTML components includes anything which references a particular document and are capable of bootstrapping and running without a network. In an embodiment there may be a single application to cover both editing and read only modes with the read only mode disabling editing features. In some situations multiple editor application caches are installed on user device under different manifest and master entry URLs. Each document may require a particular cold start editor to open which will be stored in a particular local editor cache. In order to determine which local editor cache to use many factors may be used. For example one of the factors may be the document type e.g. text spreadsheet etc .

Details about how document A is accessed by user device in an offline state are described herein with respect to .

In an embodiment the location remote from the user device is accessible via a network e.g. the Internet . For example the location may point to a location where document A is stored on document service and may be accessible via network i.e. the Internet . In an embodiment document A is stored at database on the user device .

At step an application is launched that intercepts the request. As user device is in an offline mode launcher application intercepts the request including public URL . In an embodiment launcher application is launched to intercept public URL which may be public address . In an embodiment application cache may cause launcher application to intercept the public URL. Thus the launching of an application that intercepts the public uniform resource locator further comprises launching an application cache. For example launching launcher application further comprises launching application cache which selects cold start editor application as cold start editor application is associated with document A.

At step one of a plurality of local caches is selected based on the public uniform resource locator where each of the plurality of local caches is associated with a private uniform resource locator. Thus 2local editor cache B is selected from among the plurality of local editor caches based on public URL which may be public address . Each of the plurality of local editor caches is associated with at least one private URL or private address e.g. private address .

At step the selected local cache is accessed via a corresponding private uniform resource locator to retrieve an editor. Accordingly 2local editor cache B is accessed via corresponding private address to retrieve cold start editor . In an embodiment private address comprises an address of an Internet page with a locally cached copy which is reliably available while offline. Once the cold start editor has started it retrieves document A from database and a display of the document is provided.

At step a uniform resource locator history is modified to replace the private uniform resource locator with the public uniform resource locator. Referring to URL history is modified to replace private address or a private URL with the public address e.g. public URL . In this way private address which may not be viewable by the user is masked and in URL history it appears that only public address was accessed and not private address . Thus URL history does not comprise any indication that in an offline mode one or more private URL s were accessed to obtain documents. In an embodiment when the playwright views URL history it appears that he has accessed public address and there is no indication that he accessed private address to access a cached copy of document A. In an embodiment the masking is performed by programmatically manipulating the browser history. This masking affects the apparent URL of the editor page while it is being viewed as well as the history.

At step the document is provided via the cold start editor to the user. Document A is provided via cold start editor to the user employing user device . Therefore even when the playwright s device is in an offline state the playwright may still access document A as a local copy of document A is cached locally in database .

In one example launcher application starts in response to a user s navigation operation reads the URL the user has entered and determines that there is a request for a document. Launcher application checks to determine if that document is in local storage at the user s device. If the document is found in local storage launcher application may have knowledge of the document type to determine which editor cache may be used. For example if the document is a spreadsheet document an editor cache containing a spreadsheet application may be used. Launcher application then constructs a private URL for selected editor cache and launches the private URL.

In an embodiment information about the document and the user device is retrieved from storage. Document service retrieves information about document A and user device from storage and or database .

Details regarding how launcher application enables selection of document A are described in detail herein below.

Launcher application e.g. an application cached launcher application intercepts requests for document A via its public URL. Launcher application launches the correct version of a corresponding cold start editor to provide displaying of document A to a user. Launcher application constructs a cold start editor URL as cold start editor is associated with document A which launches the cold start editor version required for document A and selected user. Once cold start editor has launched it may use the HTML5 history Application Programming Interface API to modify its own apparent URL to be one for a warm start editor .

Via the use of an application cache manifest fallback entry launcher application intercepts attempts to use URLs under DocService dot com while offline. Using private address of document A which is stored in local editor cache B on user device launcher application may launch document A using the cold start editor . In addition the online document manager s URL may be intercepted by the launcher and offline document manager started in its place.

In an embodiment a document manager application may present a list of document URLs. In an embodiment the offline variant of the document manager may be a part of launcher application . In an alternate embodiment as depicted in offline document manager may be separate from launcher application and may be launched by launcher application when an attempt to navigate to the online document manager s URL is intercepted. When a selection of a document and or associated document URL is made by a user employing user device in an offline state offline document manager chooses and launches the proper cold start editor associated with the document. It may do this with the assistance of launcher application or on its own.

Referring now to which shows examples of a public address and a private address associated with a document. An example of a public address used to access document A is DocService dot com document ZZ. An example of a private address used to access document A at a local machine user device is DocService dot com offline document cacheid XX ID ZZ. In an embodiment XX appearing after uc is the user s characteristics string. In an embodiment a document ID appears after the ID . In an embodiment the document ID and any other information encoded in the URL s fragment identifier component may not play a role in application cache selection. It is instead read by cold start editor on startup to determine which document e.g. document A document B . . . document N to load from the plurality of local cache editors and possibly other information. The uc string and optionally some other parts of the URL include information for document service to determine which binary to serve in an online mode.

Details regarding accessing a document will herein be described in reference to . is a flowchart depicting a method of accessing a document in accordance with an embodiment. At step the flowchart or routine starts. At step a document comprising a public URL is requested. For example a user employing user device requests document A by typing selecting clicking on or otherwise accessing public URL e.g. public address associated with document A.

At step a determination is made whether the user device is online. User device determines in any of a number of ways whether or not it is in an online state. If it is determined that user device is in an online state the flowchart proceeds to step . At step the public URL is used to get the warm start editor including the document from document service. User device uses public URL to retrieve a warm start editor including document A from document service and the flowchart then ends at step when the warm start editor is started and the document is displayed.

In response to determining in step that user device is not in an online state the flowchart or routine proceeds to step . For example the browser determines that user device is in an offline state or mode.

At step the public URL is examined by the launcher application to determine whether the public URL comprises a link to the document. If so the document ID is extracted. When launcher application intercepts a request for document A launcher application examines public URL e.g. click selection command or other access request to find the document ID to extract. In an embodiment the document ID may be extracted from public URL which may be public address or obtained by other means.

At step the database is queried to find out which cold start editor the document is associated with. In an embodiment database is queried to find out which cold start editor document A is associated with. Factors associated with the user and the document may be considered when selecting the editor binary.

At step the database is queried to ascertain the user s characteristics that influence binary selection. In an embodiment database is queried to ascertain the user s characteristics that influence the binary selection.

At step a private URL is built containing information from steps and . For example private address may be built in a form depicted by .

At step the launcher application causes the browser to navigate to a private URL. Browser navigates to private address .

At step the HTML5 history API to used to replace the private URL with its equivalent public URL. As described above for example the HTML5 history API is used to replace private address with public address .

At step the document is loaded from local database and displayed. Document A and data associated with document A is loaded from database and displayed to a user employing user device . The flowchart then proceeds to the end in step .

In an alternate embodiment first the cold start editor attempts to contact document service to load document A. If this step fails document A is loaded from local database . As explained above cold start editors may not include a version of the document co mingled with the application.

As cold start editor is only used when user device is used to start documents while it is in an offline mode it may have a different start up procedure from warm start editor .

When a user is unable to access the Internet and is unable to go online e.g. due to a temporary or permanent disruption in the network or a spotty connection the user may access document A via any device e.g. user device which contains the correct document data in its database and the correct cold start editor among its editor caches.

A bulk synchronizer synchronizes documents without an editor needing to be open. In an embodiment the bulk synchronizer is used while user device is online. In an embodiment the bulk synchronizer may take the form of a shared worker which all editors and document managers may connect to. The bulk synchronizer may be application cached. Documents which have an editor currently open may not be synchronized by this worker and it may play a role in coordinating the database access of multiple editors which have the same document open. Documents which are chosen for offline access and do not have an editor open can be regularly synchronized by this piece. The subset of the user s server stored documents the bulk synchronizer chooses to store on the client may depend on various factors. These may include manual user selection and automated determinations based on document content and user activity. For example recently opened documents may be stored. Documents may enter or leave this offline subset requiring the bulk synchronizer to remove existing locally stored documents and add new ones as well as updating existing ones. The bulk synchronizer may remain active only when a document manager or editor is open or it may remain active permanently.

Changes made to a document while offline can be stored in a separate data structure from committed mutations i.e. made while in an online mode and delivered to the server at user device . They can be delivered either when the session which produced them goes back online or when user device starts up online with offline changes present. In this case offline changes may be delivered either by the bulk synchronizer or by an editor session opened to edit that document. Once this delivery is complete these changes may be removed from separate client storage and the client s stored version of the document updated to include them.

In an embodiment warm start documents may serve different web applications for the writable and read only versions. The offline cold start editor described above may be capable of displaying itself in read only or writable modes. Read only modes are writable modes with all the editing actions disabled and editing related controls disabled or not displayed.

In an embodiment document editors make continuous attempts to establish a network connection to document service . If communication is established attempts are made to fetch any updates to the document known to the server and deliver locally made changes to it. If communication attempts are thwarted because the browser does not possess valid authentication credentials a user interface can be shown soliciting credentials.

In writable mode changes to document A can be made. Suppose now that the playwright wishes to add a fourth act to his play while riding on the train to Milan. Any changes made to the play document are stored locally and when the playwright s device is able to go back online all changes stored on his device are transmitted to document service . Changes made by the playwright may be stored in the same data structure as the document. That structure would include an indication of whether any undelivered local changes are stored. In an alternate embodiment undelivered changes may be stored in a separate data structure.

In an embodiment edits made to document A at user device are stored. For example as described above undelivered local changes are stored. When user device connects with document service the changes are transmitted to the server i.e. document service .

In an embodiment user device transmits a request to the server i.e. document service to poll for updates to document A. This way document A stored locally on user device is synchronized with document A stored on document service and any changes made by collaborators or other users are received by user device . In response to polling the server for updates to document A user device receives the updates.

When the user selects document A while user device is in an offline mode application cache determines which of a plurality of local editor caches should be used to open document A. The determination may be based on a combination of characteristics associated with the user and document A.

In various embodiments the method steps described herein including the method steps described in may be performed in an order different from the particular order described or shown. In other embodiments other steps may be provided or steps may be eliminated from the described methods.

Systems apparatus and methods described herein may be implemented using digital circuitry or using one or more computers using well known computer processors memory units storage devices computer software and other components. Typically a computer includes a processor for executing instructions and one or more memories for storing instructions and data. A computer may also include or be coupled to one or more mass storage devices such as one or more magnetic disks internal hard disks and removable disks magneto optical disks optical disks etc.

Systems apparatus and methods described herein may be implemented using computers operating in a client server relationship. Typically in such a system the client computers are located remotely from the server computer and interact via a network. The client server relationship may be defined and controlled by computer programs running on the respective client and server computers.

Systems apparatus and methods described herein may be used within a network based cloud computing system. In such a network based cloud computing system a server or another processor that is connected to a network communicates with one or more client computers via a network. A client computer may communicate with the server via a network browser application residing and operating on the client computer for example. A client computer may store data on the server and access the data via the network. A client computer may transmit requests for data or requests for online services to the server via the network. The server may perform requested services and provide data to the client computer s . The server may also transmit data adapted to cause a client computer to perform a specified function e.g. to perform a calculation to display specified data on a screen etc. For example the server may transmit a request adapted to cause a client computer to perform one or more of the method steps described herein including one or more of the steps of . Certain steps of the methods described herein including one or more of the steps of may be performed by a server or by another processor in a network based cloud computing system. Certain steps of the methods described herein including one or more of the steps of may be performed by a client computer in a network based cloud computing system. The steps of the methods described herein including one or more of the steps of may be performed by a server and or by a client computer in a network based cloud computing system in any combination.

Systems apparatus and methods described herein may be implemented using a computer program product tangibly embodied in an information carrier e.g. in a non transitory machine readable storage device for execution by a programmable processor and the method steps described herein including one or more of the steps of may be implemented using one or more computer programs that are executable by such a processor. A computer program is a set of computer program instructions that can be used directly or indirectly in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment.

A high level block diagram of an exemplary computer that may be used to implement systems apparatus and methods described herein is illustrated in . Computer includes a processor operatively coupled to a data storage device and a memory . Processor controls the overall operation of computer by executing computer program instructions that define such operations. The computer program instructions may be stored in data storage device or other computer readable medium and loaded into memory when execution of the computer program instructions is desired. Thus the method steps of can be defined by the computer program instructions stored in memory and or data storage device and controlled by the processor executing the computer program instructions. For example the computer program instructions can be implemented as computer executable code programmed by one skilled in the art to perform an algorithm defined by the method steps of . Accordingly by executing the computer program instructions the processor executes an algorithm defined by the method steps of . Computer also includes one or more network interfaces for communicating with other devices via a network. Computer also includes one or more input output devices that enable user interaction with computer e.g. display keyboard mouse speakers buttons etc. .

Processor may include both general and special purpose microprocessors and may be the sole processor or one of multiple processors of computer . Processor may include one or more central processing units CPUs for example. Processor data storage device and or memory may include be supplemented by or incorporated in one or more application specific integrated circuits ASICs and or one or more field programmable gate lists FPGAs .

Data storage device and memory each include a tangible non transitory computer readable storage medium. Data storage device and memory may each include high speed random access memory such as dynamic random access memory DRAM static random access memory SRAM double data rate synchronous dynamic random access memory DDR RAM or other random access solid state memory devices and may include non volatile memory such as one or more magnetic disk storage devices such as internal hard disks and removable disks magneto optical disk storage devices optical disk storage devices flash memory devices semiconductor memory devices such as erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM compact disc read only memory CD ROM digital versatile disc read only memory DVD ROM disks or other non volatile solid state storage devices.

Input output devices may include peripherals such as a printer scanner display screen etc. For example input output devices may include a display device such as a cathode ray tube CRT or liquid crystal display LCD monitor for displaying information to the user a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to computer .

Any or all of the systems and apparatus discussed herein including document service user device website and components thereof including web browser display processor memory processor and memory may be implemented using a computer such as computer .

One skilled in the art will recognize that an implementation of an actual computer or computer system may have other structures and may contain other components as well and that is a high level representation of some of the components of such a computer for illustrative purposes.

The foregoing Detailed Description is to be understood as being in every respect illustrative and exemplary but not restrictive and the scope of the invention disclosed herein is not to be determined from the Detailed Description but rather from the claims as interpreted according to the full breadth permitted by the patent laws. It is to be understood that the embodiments shown and described herein are only illustrative of the principles of the present invention and that various modifications may be implemented by those skilled in the art without departing from the scope and spirit of the invention. Those skilled in the art could implement various other feature combinations without departing from the scope and spirit of the invention.

