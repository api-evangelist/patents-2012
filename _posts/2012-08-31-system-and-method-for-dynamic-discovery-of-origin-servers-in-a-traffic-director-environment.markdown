---

title: System and method for dynamic discovery of origin servers in a traffic director environment
abstract: Described herein are systems and methods for use with a load balancer or traffic director, and administration thereof, wherein the traffic director is provided as a software-based load balancer that can be used to deliver a fast, reliable, scalable, and secure platform for load-balancing Internet and other traffic to back-end origin servers, such as web servers, application servers, or other resource servers. In accordance with an embodiment, the system comprises a traffic director having one or more traffic director instances, which is configured to receive and communicate requests, from clients, to origin servers having one or more pools of servers. A health check subsystem periodically checks the health of its configured resource servers, and also attempts to detect changes in the one or more pools, by sending requests to any new server instances configured as origin servers within the pool, receiving appropriate responses, and updating the configuration accordingly.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08914502&OS=08914502&RS=08914502
owner: Oracle International Corporation
number: 08914502
owner_city: Redwood Shores
owner_country: US
publication_date: 20120831
---
This application claims the benefit of priority to U.S. Provisional Patent Application No. 61 539 886 titled SYSTEMS AND METHODS FOR USE WITH AN APPLICATION SERVER TRAFFIC DIRECTOR CORE FEATURES filed Sep. 27 2011 and U.S. Provisional Patent Application No. 61 539 900 titled SYSTEMS AND METHODS FOR USE WITH AN APPLICATION SERVER TRAFFIC DIRECTOR ADMIN FEATURES filed Sep. 27 2011 each of which applications are herein incorporated by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The invention is generally related to a load balancer or traffic director for use in an application server middleware machine or other computing environment and is particularly related to a system and method for dynamic discovery of origin servers in a traffic director environment.

A typical enterprise level computing environment can include many different types of computing resources e.g. web servers application servers database servers or other types of resource servers which are intended to be accessed over a network e.g. a company s internal Ethernet network or the Internet by other computers or by users operating various different types of computing devices. A familiar example is the use of a client computer such as a laptop equipped with a web browser application by which a user can access a web server via the Internet.

Today s organizations rely increasingly on their computing resources being readily available from almost any location at all times with a high level of performance. The task of ensuring that such resources are allocated efficiently often requires the use of a load balancing device to distribute requests from clients to target resources in a fair manner according to its distribution policies. These are the types of environments that embodiments of the invention can be used with.

Described herein are systems and methods for use with a load balancer or traffic director and administration thereof. In accordance with an embodiment the traffic director referred to herein in some embodiments as Oracle Traffic Director OTD is provided as a software based load balancer that can be used to deliver a fast reliable scalable and secure platform for load balancing Internet and other traffic to back end origin servers such as web servers application servers or other resource servers.

Embodiments of the traffic director are particularly useful in application server middleware machine and similar high performance enterprise level computing environments such as Oracle WebLogic and Exalogic environments.

In accordance with an embodiment the system comprises a traffic director having one or more traffic director instances which is configured to receive and communicate requests from clients to origin servers having one or more pools of servers. A health check subsystem periodically checks the health of its configured resource servers and also attempts to detect changes in the one or more pools by sending requests to any new server instances configured as origin servers within the pool receiving appropriate responses and updating the configuration accordingly.

As described above today s organizations rely increasingly on their computing resources being readily available from almost any location at all times with a high level of performance. The task of ensuring that such resources are allocated efficiently often requires the use of a load balancing device to distribute requests from clients to target resources in a fair manner according to its distribution policies.

Described herein are systems and methods for use with a load balancer or traffic director and administration thereof. In accordance with an embodiment the traffic director referred to herein in some embodiments as Oracle Traffic Director OTD is provided as a software based load balancer that can be used to deliver a fast reliable scalable and secure platform for load balancing Internet and other traffic to back end origin servers such as web servers application servers or other resource servers.

Embodiments of the traffic director are particularly useful in application server middleware machine and similar high performance enterprise level computing environments such as Oracle WebLogic and Exalogic environments.

In accordance with an embodiment the traffic director serves as an entry point for traffic such as hypertext transfer protocol HTTP and hypertext transfer protocol secure HTTPS requests which are received from clients or client devices for communication to a back end of resources or resource servers acting as origin servers. Each traffic director includes one or more traffic director instances defined by a configuration wherein the configuration provides information about various elements of that instance such as listeners origin servers failover groups and logs.

Examples of the types of clients that can be used with the system include computer servers laptop computers portable devices such as smartphones and other types of computing devices some of which may include e.g. a web browser application for accessing a web server.

Examples of the types of resources that can be used as origin servers include lightweight directory access protocol LDAP servers web servers multimedia servers application servers database servers and other types of resources.

In accordance with an embodiment the traffic director can perform tasks such as distributing requests to origin servers based on one or more load balancing methods routing requests based on specified rules caching frequently accessed data prioritize traffic and controlling the quality of service.

From a performance perspective in accordance with an embodiment the traffic director can include an architecture that enables it to handle large volumes of traffic with low latency. For example embodiments can be optimized for use within a high performance computing environment such as e.g. Oracle Exalogic Elastic Cloud or to communicate with origin servers at the back end using a high performance communication fabric such as e.g. InfiniBand. In accordance with an embodiment to support high availability the traffic director can recognize failover groups of traffic director instances that provide active passive or active active failover. As the volume of traffic to a network increases the traffic director environment can be scaled by reconfiguring the traffic director with additional back end servers to which it can route requests or by modifying the rate at which traffic is communicated.

From an administration perspective in accordance with an embodiment the traffic director is designed to be easy to install configure and use and can include a simple wizard driven graphical interface as well as a robust command line interface for use by an administrator in managing traffic director instances. For any particular organization depending on their business requirements such as the number of back end applications for which they want to use the traffic director to balance requests their internal requirements such as security and the traffic director features they wish to use the traffic director topology can be varied to address their needs. For example a simple traffic director topology might initially utilize a single traffic director instance running on a dedicated compute node and distributing client requests to a pool of servers at the back end. To avoid a single point of failure an administrator can configure two homogenous traffic director instances running on different nodes and forming an active passive failover pair. To improve resource utilization an administrator can configure the two traffic director instances in active active mode with two virtual IP addresses.

In accordance with an embodiment the following terms are used herein. It will be evident that in accordance with other embodiments additional and or different terms can be used.

For any particular organization depending on their business requirements such as the number of back end applications for which they want to use the traffic director to balance requests their internal requirements such as security and the traffic director features they wish to use the traffic director topology can be varied to address their needs. The back end can include one or more origin servers examples of which can include LDAP servers web servers multimedia servers application servers and database servers . In accordance with an embodiment the application server can be a WebLogic server WLS . Other types of origin servers and application servers can be used depending on the particular needs of the organization. Each of the origin servers can communicate with one another and with the traffic director via an internal network such as an Ethernet network.

In accordance with an embodiment the traffic director can receive requests from clients via an external network the Internet and in the case of many organizations a firewall . Examples of the types of clients that can be used with the system include computer servers laptop computers portable devices such as smartphones and other types of computing devices some of which may include e.g. a web browser application for accessing a web server.

In the example illustrated in the topology comprises two traffic director instances and forming an active passive failover group and including a single virtual IP address for receipt of client requests. When the active instance in this example instance receives a request it determines the server pool to which the request should be sent and forwards the request to one of the servers in that pool based on the load distribution method s that are specified for that pool.

Although the example shown in illustrates the use of two server pools at the back end an administrator can configure the traffic director to route requests to servers in multiple pools. In the active passive setup illustrated in one node in the failover group is redundant at any point in time. In accordance with an embodiment to improve resource utilization the administrator can configure the two traffic director instances in active active mode with two virtual IP addresses in this scenario each instance caters to requests received on one virtual IP address and backs up the other instance.

As shown in in accordance with an embodiment the traffic director can include one or more Netscape portable runtime NSPR and Network Security Services NSS layers. In accordance with an embodiment the traffic director can also include an HTTP engine having one or more access control logging HTTP compression I O filter error handling rate shaping intrusion detection or other components and a reverse proxy component having one or more http client response client health check routing policies load controls load balancer WLS support sticky routing or other components. In accordance with an embodiment the traffic director can also include an HTTP connection handler having one or more acceptor threads worker threads keep alive threads or other components. In accordance with an embodiment the traffic director can also include a TCP connection handler having one or more TCP threads load balancer or other components. In accordance with an embodiment the traffic director can also include one or more evens schedule dynamic configuration monitoring or other components.

It will be evident that in accordance with other embodiments additional and or different components can be used.

In accordance with an embodiment an administration environment includes an administration interface which in turn includes one or more of an administration console GUI and or a command line interface that enables an administrator to configure or otherwise administer the traffic director or its instances .

In accordance with an embodiment the traffic director makes it easy for an administrator to add origin servers to server pools by dynamically discovering origin servers and detecting their server type and or other properties.

For example in accordance with an embodiment when the administrator enables dynamic discovery the traffic director can dynamically discover supported recognized application servers within a server pool. From the perspective of the traffic server knowing whether it is acting as a proxy i.e. proxying to a generic application server type or alternatively a recognized server type such as a WebLogic server is useful in that it helps the traffic director to apply server type specific routing throttling and other optimizations. Such optimizations can be automatically applied by the system without a need for further manual configuration by the administrator.

From the perspective of a client making requests to back end origin servers although those requests are routed somewhat transparently by the traffic server to the origin servers the traffic director s ability to discover origin server types and apply server specific optimizations provides performance advantages whenever recognized server types are used.

In accordance with an embodiment if the administrator wants to create an origin server pool that represents a cluster of recognized managed server types e.g. WebLogic servers they do not need to specify each managed server in that cluster as an origin server. Instead it is sufficient to specify any one of the managed servers as an origin server in the pool. The traffic director can then dynamically discover the presence of other WebLogic server instances in the cluster and distribute client requests both to the managed server that is configured as an origin server and also to the dynamically discovered managed servers in the same cluster.

Similarly when dynamic discovery is enabled if any of the managed servers in the cluster is stopped added or removed the administrator need not update the definition of the origin server pool.

In accordance with an embodiment which uses WebLogic server each Weblogic server instance includes its own reverse proxy module or plug in which can proxy incoming HTTP traffic to the back end application server and can provide Weblogic specific response headers in response to a health check request. For example a x weblogic jvmid response header can indicate a JVMID of the current WebLogic server node a x weblogic cluster hash response header can provide a hash value of WebLogic cluster nodes and as such indicate whenever a cluster is modified and a x weblogic cluster list response header can return a lists of JVMIDs corresponding to those Weblogic servers in a cluster.

When dynamic discovery is enabled for an origin server pool in a WebLogic environment the traffic director can discover remaining WebLogic origin servers in the pool as follows 

First when a traffic director instance starts it checks whether the origin servers specified in the pool are WebLogic managed servers and whether the servers belong to a cluster by sending an HTTP health check request to each configured origin server. For any particular origin server pool the HTTP request type that the traffic director sends for dynamic discovery can be the health check request type that is currently configured for that pool. The origin server s response will indicate whether that server is a WebLogic managed server using response headers similar to those described above. If the origin server is a WebLogic managed server that belongs to a cluster then the response will also include a list of the managed servers in the cluster.

In accordance with an embodiment when the traffic director receives a response with x weblogic cluster hash and x weblogic cluster list response headers the traffic director will first use the hash value response header to determine whether the cluster has been modified and if so will parse the remaining response header e.g. 

Next the traffic director uses the information in the response from the origin server to update its configuration with regard to the discovered managed servers. In accordance with an embodiment the dynamically discovered origin servers inherit all of the properties e.g. weight or maximum connections that are specified for the configured origin server.

Subsequently at each periodic health check interval configured for the origin server pool the traffic director attempts to detect changes in the cluster by sending dynamic discovery health check requests to those WebLogic server instances that are configured as origin servers in the pool. If the response indicates a change in the cluster since the previous health check such as removal or addition of a managed server then the traffic director will update the configuration with the new set of dynamically discovered origin servers.

Although the above description uses WebLogic as an illustration in accordance with other embodiments a similar technique can be used to discover other types of supported recognized origin servers within a server pool. Dynamically discovered origin servers are not stored permanently in the origin server pool definition of the instance s configuration. As such when a traffic director instance is restarted the process of dynamic discovery by that instance starts afresh.

In accordance with an embodiment the dynamic discovery feature is not enabled by default. An administrator can enable dynamic discovery by using either the administration console or the command line interface CLI . When an origin server pool is modified this is in effect modifying a configuration so for any updated origin server pool settings to take effect the corresponding configuration should be redeployed.

In accordance with an embodiment the traffic director includes a health check subsystem and a configuration wherein the configuration provides information about various elements of the traffic director instances such as listeners origin servers failover groups and logs.

The configuration can be initially modified by the administrator to indicate that a particular origin server pool includes a particular resource server. At each periodic health check interval configured for that origin server pool the health check subsystem then checks the health of each of its configured resource servers for example by sending an HTTP health check request and receiving an appropriate response from resource server A.

In accordance with an embodiment when dynamic discovery is enabled at each periodic health check interval configured for the origin server pool the traffic director also attempts to detect changes in the pool such as resource server B by sending dynamic discovery health check requests to any new server instances configured as origin servers within the pool and receiving appropriate responses . Dynamically discovered servers are applied only with the server pool through which the node was discovered. The traffic director will then update its configuration with this new set of dynamically discovered origin servers .

In accordance with an embodiment which uses WebLogic server instances when dynamic discovery is enabled for an origin server pool the health check subsystem checks whether the origin servers specified in the pool are WebLogic managed servers and whether the servers belong to a cluster. As described above the origin server s response header can indicate whether that server is a WebLogic server managed server and if the origin server is a WebLogic managed server that belongs to a cluster then the response will also include a list of the managed servers in the cluster.

As further shown in the configuration can include properties for each configured origin server in the pool including in this example resource server A properties . In accordance with an embodiment the dynamically discovered origin servers inherit all of the properties e.g. weight or maximum connections that are specified for the configured origin server. For example the traffic director can configure dynamically discovered resource server B as an origin server such that its properties inherit are the same as those of configured resource server A.

Subsequently if the traffic director detects further changes in the pool such as new resource server C through subsequent health checks the traffic director can similarly configure resource server C as an origin server such that its properties also inherit are the same as those of configured resource server A.

In accordance with an embodiment examples of the types of server properties that can be associated with a configured or discovered resource server include 

In accordance with an embodiment which uses WebLogic if the origin server s response indicates that the server is a WebLogic managed server and belongs to a cluster then the response will also include a list of the managed servers in the cluster. The traffic director uses the information in the response from the origin server to update its configuration with the discovered managed servers. For example if a particular origin server pool has a configuration 

As shown in at step the traffic server starts and invokes the health check subsystem step to perform a health check on configured pools step .

At step if the health check has completed the system can proceed to either load an existing configuration steps load a new configuration steps or perform dynamic reconfiguration step .

At step if the origin server is a WebLogic server and is configured as a cluster step the process compares the cluster list step and updates the configuration with new nodes where appropriate steps . Otherwise the servers can be marked online and the process can proceed steps .

In accordance with an embodiment to dynamic discovery routing for use with the traffic director an element called dynamic server discovery can be specified for that server examples of which are provided in Table 1.

The present invention may be conveniently implemented using one or more conventional general purpose or specialized digital computer computing device machine or microprocessor including one or more processors memory and or computer readable storage media programmed according to the teachings of the present disclosure. Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure as will be apparent to those skilled in the software art.

In some embodiments the present invention includes a computer program product which is a non transitory storage medium or computer readable medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the present invention. The storage medium can include but is not limited to any type of disk including floppy disks optical discs DVD CD ROMs microdrive and magneto optical disks ROMs RAMs EPROMs EEPROMs DRAMs VRAMs flash memory devices magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data.

The foregoing description of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Although some of the described embodiments describe features in the context of an Oracle Traffic Director environment the described features can also be used in the context of other computing environments. Many modifications and variations will be apparent to the practitioner skilled in the art. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications that are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalence.

