---

title: Systems and methods to provide secure storage
abstract: Systems and method to provide secure storage are disclosed. An example method includes establishing a secure tunnel between a storage device and an agent, transferring first data from the storage device to the agent via the secure tunnel, the secure tunnel to prevent software executing in an operating system from modifying the data, and identifying a data modification by comparing the first data to second data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09135446&OS=09135446&RS=09135446
owner: INTEL CORPORATION
number: 09135446
owner_city: Santa Clara
owner_country: US
publication_date: 20120928
---
This disclosure relates generally to storage devices and more particularly to systems and methods to provide secure storage.

Today host side applications e.g. antivirus software use an operating system application programming interface API to read in data e.g. malware definition data from storage to detect malware. Additionally other storage specific commands can be used to read write and otherwise manage stored data. For example vendor specific commands SMART Command Transport SCT negative logical block addresses LBA etc. can be used to process stored data. These methods can be subverted by malware to give wrong information to a data requester. In addition there is no provision for configuring the methods to provide application specific protection. Furthermore data that is stored can be attacked by malware and may be copied or altered.

Sophisticated malware e.g. kernel rootkits and or virtual rootkits is capable of controlling virtually everything within a processing system except for the actual scheduling of processing time within the system. Malware can attack stored data and can subvert operating system calls to a storage system. Such malware can cause the return of any type of data in response to requests for data from applications e.g. modified versions of actual data . Advanced rootkits may be able to subvert verification procedures e.g. malware detection and or integrity check procedures by presenting unmodified copies of data e.g. files for inspection by such procedures by for example masking the presence and or contents of files.

Example methods apparatus and or articles of manufacture disclosed herein create a secure tunnel between an agent e.g. a software application and a secure storage system within a data storage device. In some examples the secure storage system hides the data storage by encrypting the data communicated to the secure storage system and storing data beyond the accessibility of an operating system. In some examples a data storage device provides a trusted view of raw e.g. unadulterated data that is physically committed to a non volatile medium in the data storage device via a trusted application programming interface API to an agent e.g. an application running on a host CPU a remote agent etc. . In some such examples firmware is used to manage the data storage device. Example firmware runs in a protected environment e.g. a closed isolated and or secure environment with a root of trust. Agents running on the host platform of the storage devices or remote agents communicate through a trusted tunnel to access the firmware and or software used to manage the data storage device subsystems. In some examples agents are permitted to operate e.g. read and or write on raw block level information e.g. at the file folder or disk level and or on metadata based on file system information.

Example agents disclosed herein can detect malware e.g. rootkits by accessing the raw unadulterated data committed to the storage media via the trusted tunnel e.g. trusted data and accessing the potentially modified information via normal channels e.g. visible data and comparing the trusted data to the visible data. Using the trusted tunnel agents can access unencrypted and encrypted information and or digital signatures e.g. hashes of the trusted data and or the visible data. By using the trusted tunnels the agents can be assured that the data obtained via the trusted tunnel has not been altered e.g. masked hidden by malware.

In some examples an agent compares the raw data obtained using the trusted tunnel to baselines of trusted data. In some examples an agent generates cryptographic hashes e.g. signatures of raw data obtained via the trusted tunnel to cryptographic hashes of white listed files or data.

In some examples an agent executing in the firmware or software executing on a secure processing element of a data storage device compares raw data to tainted data and or baseline data. In some examples the agent executing in the firmware or software executing on a secure processing element of a data storage device generates and compares cryptographic hashes of the raw data. In some examples the agent executing on the data storage device receives commands via a trusted tunnel from a second agent operating on a host or a remote agent. In examples in which the agent executing on the data storage device performs the comparison and or the generation the agent executes in a more protected environment than an agent executing on the host. For example firmware containing the agent can be provisioned and or activated at the time of assembly of the data storage device and prior to exposure of the data storage device to systems afflicted with malware and or undesired data modification.

Example methods apparatus and computer readable storage media disclosed herein enable security service providers to improve the robustness effectiveness and or scalability of data integrity tools and solutions.

As used herein a host refers to a host processing platform of which a storage medium or device constructed in accordance with the teachings of this disclosure is a part. A host may include any combinations of hardware software firmware and or interfaces to enable the host and the subject storage device to interface.

The operating system is an operating system such as Microsoft Windows Apple OS X etc. In the example of the operating system includes a private software developer s kit SDK a file system a driver stack and an application . The example file system is used to manage files that are stored in the data storage device . For example the file system may specify the manner in which the operating system is to organize data in the storage device using the driver stack . The example driver stack is a set of driver s used by the operating system and or the application to interact with data storage device e.g. read and write data . The driver stack may include multiple software layers in the form of drivers that take on different functional roles and act as an overall interface between an application or process and one or more storage devices.

Like the data integrity checking application the example application of is an application that runs in the operating system . One example of an application can be an e mail client a word processor an image management application a media management application anti virus software operating system functions and or any other type of application. Each application may interact with the storage system using the file system and the driver stack .

The example data storage device of includes data storage device firmware a system on a chip SOC memory and a storage area . The data storage device can be any type of storage device e.g. solid state drives SSD hard disks HD flash drives FD etc. . The example system on a chip is a chip that includes a processor and other circuits that are used to support the data storage device e.g. by executing the firmware . An example implementation of the SOC is further described below in below. The example memory is memory used to temporarily store data. The data storage device firmware is firmware that may be executed operate and manage the different functions of the data storage device .

The example storage area of includes a secure storage area . The secure storage is not visible to the operating system through the file system and or the driver stack . The example storage area further includes a visible e.g. OS visible storage which in contrast to the secure storage area is visible and accessible to the OS and or the application . The visible storage may be implemented using known storage devices.

The example data storage device firmware of includes a trusted application programming interface API and a trusted system firmware . The trusted API is used by processes executing in the operating system and or by trusted applications such as the data integrity check application to access the secure storage . The trusted system firmware is firmware that is executed to manage the secure storage . The example trusted API is accessed by local and or remote entities to create a secure tunnel between that entity and the secure storage. A tunnel is used to securely transmit information e.g. read and or write data between an entity and the secure storage . For example the data integrity check application may create a tunnel via trusted API and the trusted system firmware to the secure storage .

The secure storage stores data that is invisible to the operating system and therefore cannot be accessed by low level rootkits that do not have a root of trust. For example the secure storage of exists at storage addresses that are beyond the maximum addressable storage available to the operating system and or applications that are accessing the data storage device via the file system and driver stack . The example secure storage may be physically separate from the visible storage or may be a partition of the visible storage .

In the example of the secure storage stores important data such as data that may be used to identify malicious changes and or non malicious but undesired changes to data. For example the secure storage stores baseline data e.g. data files executables and or databases secure hashes of the baseline data and or non secure hashes of the baseline data . The example secure hashes and the non secure hashes are hashes or signatures performed by the example data integrity check application . The secure hashes are generated based on secure transmission of the baseline data from the secure storage to the data integrity check application and secure transmission of the secure hashes from the data integrity check application to the secure storage via the tunnel the trusted API and the trusted system firmware . In contrast the non secure hashes are generated based on data that is potentially subject to manipulation e.g. data such as files executables and or databases store in the visible storage .

As described above the data in the secure storage is not visible to an application except through the trusted API . In the example of the data integrity check application accesses the secure storage using the tunnel via the private SDK the trusted API and the trusted system firmware . The example data integrity check application is a trusted agent that is permitted to securely read data from and write data to the secure storage area . The data stored in the secure storage e.g. the baseline files the secure hashes and the non secure hashes is invisible to the OS and to application s executing in the operating system . Therefore neither the OS nor the application can view alter or delete the data stored in secure storage . Additionally malware executing at or above the OS level cannot view alter or delete the data stored in the secure storage . As a result the example data storage device provides a trusted view of baseline data e.g. files blocks and or other units of data and or hashes signatures of data for comparison to potentially tainted data or hashes of such data. An agent can then use this comparison to identify the presence of malicious modifications to data and or non malicious but undesired modifications to data e.g. by searching for signature changes to data indicative of such modifications .

The example trusted API may form the tunnel by for example 1 a mailboxing scheme in which logical block addresses are set aside for communication between the agent e.g. the data integrity check application and the data storage device e.g. the trusted API and or 2 trusted sends e.g. messages sending data from a host to a storage device according to a specified security protocol messages sending data from a host to a storage device according to Trusted Computing standards and or messages sending data from a host to a storage device using another method of verifying trust and trusted receives e.g. messages retrieving data from a storage device according to a specified security protocol and corresponding to a trusted send messages retrieving data from a storage device according to Trusted Computing standards and or messages retrieving data from a storage device using another method of verifying trust that are supported by the data storage device e.g. the trusted API and or the trusted system firmware .

In the example of the tunnel is formed between the trusted API and the agent running on the host e.g. the same computer or other platform that includes the data storage device . In some other examples a trusted tunnel may be formed between the data storage device e.g. via the trusted API and a remote agent e.g. a remote server that is coupled to the platform via a network . In some such examples the trusted system firmware via the trusted API creates a network connection that is used to communicate information with the remote agent . For example the trusted storage firmware may create the trusted tunnel such that the remote agent may read and or write data to the secure storage of the data storage device . By establishing the trusted tunnel to a remote agent a remote agent such as a network monitor may monitor malicious and or undesired changes to data on multiple data storage devices including the data storage device that are connected to the network .

The example data integrity check application of performs data integrity checks of the data stored on the data storage device . The example data integrity check application includes a hash generator a data integrity checker a report generator and trusted operations .

The example hash generator generates cryptographic hashes of the baseline data e.g. secure hashes and or cryptographic hashes of the visible data e.g. non secure hashes . The data integrity checker compares the secure hashes to the non secure hashes to determine whether any changes have occurred. Additionally or alternatively the data integrity checker compares the baseline data to the visible data to determine whether changes have occurred. The example hash generator and or the example data integrity checker may operate periodically aperiodically in response to an event on demand and or at any other time to identify changes to the data .

The example data integrity check application e.g. the hash generator and or the data integrity checker uses the example trusted operations to securely communicate with the secure storage e.g. via the tunnel the trusted API and or the trusted system firmware . Example trusted operations include a trusted read operation and a trusted write operation. In the example of a trusted read or trusted write means that the identity of the entity requesting the operation is known and trusted. Trust may be established by requiring the data integrity check application to sign trusted read requests and or trusted write requests using a trusted signature . Example methods to securely communicate data between the data integrity check application and the secure storage via the tunnel are described below.

The example hash generator may use the trusted operations to read the baseline data from the secure storage and or to write the secure hashes and or the non secure hashes to the secure storage . Additionally or alternatively the data integrity checker may use the trusted operations to read the baseline data the secure hashes and or the non secure hashes from the secure storage .

The example report generator of generates reports based on information from the data integrity checker . To generate the reports the report generator may apply rules to the differences identified by the data integrity checker between raw data and or cryptographic hashes. Example rules may include differences between data that match signature behaviors of known malware. The example report generator provides generated reports for system administrators and or managers to evaluate the differences in data and or to initiate corrective action.

The example data storage device of includes the example SOC the example memory and the example storage area of . The example storage area includes the example secure storage which stores the baseline data the secure hashes and the non secure hashes among other things and the OS visible storage of which stores visible data .

The example data storage device further includes data storage device firmware . The example data storage device firmware includes the trusted API and the trusted system firmware of . Unlike the data storage device firmware of the example data storage device firmware of further includes a hash generator a data integrity checker and embedded file awareness firmware .

The example hash generator of may be similar or identical to the example hash generator of . In particular the example hash generator obtains copies of data e.g. baseline data and or visible data and generates hashes or signatures of the data to generate secure hashes and or non secure hashes . The secure hashes and or non secure hashes may be securely stored in the secure storage e.g. via the trusted system firmware .

The example data integrity checker of may be similar or identical to the example data integrity checker of . In particular the example data integrity checker executes securely in the data storage device firmware and compares the secure hashes to the non secure hashes and or compares the baseline data to the visible data to determine whether changes have occurred.

The example embedding file awareness firmware translates raw information e.g. bits and bytes for use by the data storage device firmware . The example OS and the example data integrity check application include file awareness drivers . The file awareness drivers enable the OS and or the data integrity check application to communicate file structure information to the data storage device firmware to instruct the embedded file awareness firmware how to read and translate the types of files present in the secure storage and or the visible storage . As a result the data storage device firmware e.g. the hash generator the data integrity checker may perform operations on the data without transferring the data to the OS and or the data integrity check application for interpretation of the raw bits and bytes.

The example OS of further includes the private SDK the file system the driver stack and the application of . In addition to the file awareness drivers the example data integrity check application of includes a command generator and the report generator of .

The example command generator of generates and transmits commands to the data storage device firmware via a secure tunnel and the trusted API . By using the secure tunnel the example command generator may provide trusted commands to the example data storage device firmware including commands to read and or write data via the embedded file awareness firmware to generate hashes of particular data and or locations in the secure storage and or in the visible storage to provide definitions or signatures of changes to data to the data integrity checker and or to provide other secure commands and or instructions. Similarly the example command generator may receive data integrity check information from the data integrity checker via the secure tunnel and the trusted API .

In some examples the embedded file awareness firmware may receive commands and or file information from the remote agent via the secure tunnel the network and the network connection of .

The embedded file awareness firmware receives communications from an agent e.g. the application the data integrity check application via the trusted API to provide the awareness of the file system used by the OS to the data storage device firmware . The example embedded file awareness firmware includes a device file system to support a subset of services provided by the OS file system . The example embedded file awareness firmware enables the data storage device firmware to perform data integrity checks on data in the storage device e.g. a malware scan perform trusted operations in the storage device including a computation of hashes or a comparison of hash signatures access a backup of the host file system stored on the data storage device and or perform other file system operations.

To provide file awareness a set of synchronizing messages is sent between the OS and or the data integrity check application via the file awareness driver . The file awareness driver is authorized to communicate with the embedded file awareness firmware e.g. via the trusted API . In the example of a master copy of the file system is resident in the host e.g. the file system in the OS . The file awareness driver initiates the following set of messages to the data storage device firmware .

An Init filesystem file system message causes the embedded file awareness firmware to initialize a structure in the storage area that refers to the specified host file system. An example Init filesystem message includes Init filesystem UFS1 . 

A Set fileupdate file system filename properties message provides a file system a file name within the specified file system properties of the specified file and an ordered list of logical block addresses containing the data associated with the specified file. The Set fileupdate message results in updating the file system on the storage device with a file name to logical block address mapping for the specified file name. An example Set fileupdate message includes Set fileupdate UFS1 explorer.exe properties hrwx dr where the hrwx argument indicates that the host e.g. the OS the application has permissions include reading writing and executing the file. The dr argument indicates that the storage device has permissions including reading the file.

A Get fileupdate file system filename message provides a file system and a file name within the file system. The Get fileupdate file system filename message results in the data storage device returning the data associated with the specified file to the host e.g. the OS the application . The returned data includes changes to the specified file that are cached in the storage device e.g. in a cache . The size of the cache may be based on expected usages of the storage device aware files. An example Get fileupdate message includes Get fileupdate UFS1 results.out . The file system field of the Get fileupdate message provides a pointer to a file system that is referenced by the message to the embedded file awareness firmware e.g. to distinguish between multiple file systems that may be present on the data storage device .

The device file system organization is stored at the data storage device . The files in the example file system are organized as a searchable collection of file names. Each record e.g. file name in the collection of file names point to the metadata associated with the respective record. The collection of file names may be implemented as a flat data structure with a sequential search to find a desired file and or as an indexed data structure with binary search support to access and or update a file.

The example file awareness drivers communicate with the embedded file awareness firmware via the trusted API and the secure tunnel . Therefore the messages and responses are communicated between the file awareness drivers communicate with the embedded file awareness firmware in a trusted environment that cannot be accessed by malware. The example server may be used for provisioning keys into the storage device for authentication and encryption purposes setting and receiving data from the secure storage and setting and receiving trusted block level data when the ISV performs a remote scan.

In a client system such as a laptop computer or a tablet computer communication between the file awareness drivers and the embedded file awareness firmware may be implemented using trusted ATA commands over SATA and or using vendor unique commands over SATA. In client systems such as a smartphone the communications may be implemented using trusted ATA commands over embedded MultiMediaCard eMMC . Other communication implementations may additionally or alternatively be used.

As used herein using the trusted tunnels includes using appropriate ones of the trusted operations the trusted signature the trusted API the trusted system firmware and or private SDK and or any other intermediate pathways operations and or interfaces to securely communicate via the tunnels .

While an example manner of implementing the platforms have been illustrated in and one or more of the elements processes and or devices illustrated in and may be combined divided re arranged omitted eliminated and or implemented in any other way. Further any or all of the example data storage devices example operating systems example data integrity check applications example private SDK example file system example driver stack example application example data storage device firmware example system on a chip example memory example storage area example secure storage example visible storage example trusted API example trusted system firmware example secure tunnels example data example secure hashes example non secure hashes example remote agent example hash generators example data integrity checkers example report generator example trusted operations example trusted signature example embedded file awareness example file awareness drivers example command generator example cache example device file system example agents example secure storage devices example LBAs example file awareness message handler example device level file system example device file properties example device file tables example device file system interface example NAND management subsystem example device file system cache and or more generally the example platforms of and or may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any or all of example data storage devices example operating systems example data integrity check applications example private SDK example file system example driver stack example application example data storage device firmware example system on a chip example memory example storage area example secure storage example visible storage example trusted API example trusted system firmware example secure tunnels example data example secure hashes example non secure hashes example remote agent example hash generators example data integrity checkers example report generator example trusted operations example trusted signature example embedded file awareness example file awareness drivers example command generator example cache example device file system example agents example secure storage devices example LBAs example file awareness message handler example device level file system example device file properties example device file tables example device file system interface example NAND management subsystem example device file system cache and or more generally the example platforms could be implemented by one or more circuit s programmable processor s application specific integrated circuit s ASIC s programmable logic device s PLD s and or field programmable logic device s FPLD s etc. When any of the apparatus or system claims of this patent are read to cover a purely software and or firmware implementation at least one of the example data storage devices example operating systems example data integrity check applications example private SDK example file system example driver stack example application example data storage device firmware example system on a chip example memory example storage area example secure storage example visible storage example trusted API example trusted system firmware example secure tunnels example data example secure hashes example non secure hashes example remote agent example hash generators example data integrity checkers example report generator example trusted operations example trusted signature example embedded file awareness example file awareness drivers example command generator example cache example device file system example agents example secure storage devices example LBAs example file awareness message handler example device level file system example device file properties example device file tables example device file system interface example NAND management subsystem and or example device file system cache are hereby expressly defined to include a tangible computer readable storage medium such as a memory DVD CD Blu ray etc. storing the software and or firmware. Further still the example platforms of and or may include one or more elements processes and or devices in addition to or instead of those illustrated in and or and or may include more than one of any or all of the illustrated elements processes and devices.

Flowcharts representative of example machine readable instructions for implementing the platforms and or are shown in and . In these examples the machine readable instructions comprise programs for execution by a processor such as the processor shown in the example processing platform discussed below in connection with . The programs may be embodied in software stored on a tangible computer readable storage medium such as a CD ROM a floppy disk a hard drive a digital versatile disk DVD a Blu ray disk or a memory associated with the processor but the entire programs and or parts thereof could alternatively be executed by a device other than the processor and or embodied in firmware or dedicated hardware. Further although the example programs are described with reference to the flowcharts illustrated in and many other methods of implementing the example platforms may alternatively be used. For example the order of execution of the blocks may be changed and or some of the blocks described may be changed eliminated or combined.

As mentioned above the example processes of and may be implemented using coded instructions e.g. computer readable instructions stored on a tangible computer readable storage medium such as a hard disk drive a flash memory a read only memory ROM a compact disk CD a digital versatile disk DVD a cache a random access memory RAM and or any other storage device and or storage disk in which information is stored for any duration e.g. for extended time periods permanently brief instances for temporarily buffering and or for caching of the information . As used herein the term tangible computer readable storage medium is expressly defined to include any type of computer readable storage excluding propagating signals and waves. Additionally or alternatively the example processes of and may be implemented using coded instructions e.g. computer readable instructions stored on a non transitory computer readable storage medium such as a hard disk drive a flash memory a read only memory a compact disk a digital versatile disk a cache a random access memory and or any other storage device and or storage disk in which information is stored for any duration e.g. for extended time periods permanently brief instances for temporarily buffering and or for caching of the information . As used herein the term non transitory computer readable medium is expressly defined to include any type of computer readable medium excluding propagating signals and waves. As used herein when the phrase at least is used as the transition term in a preamble of a claim it is open ended in the same manner as the term comprising is open ended. Thus a claim using at least as the transition term in its preamble may include elements in addition to those expressly recited in the claim.

The example instructions begin by establishing a secure tunnel e.g. the secure tunnel of with the data storage device e.g. via the trusted operations the trusted signature and or the trusted API of block . The example secure tunnel enables the application to access the secure storage via the trusted system firmware .

The example hash generator determines whether to generate hashes e.g. hashes of data to be used for data integrity checks block . Generating hashes may be performed for example before and or after events such as updates to software or data e.g. files . If the hash generator is to generate hashes block the example hash generator requests baseline data e.g. baseline data of from the data storage device block . The example request may be made via the secure tunnel the trusted API and the trusted operations . The example hash generator receives the requested baseline data from the storage device via the secure tunnel block . By sending the request and receiving the baseline data via the secure tunnel the example application may trust the received baseline data e.g. rely on the baseline data being authentic and or not affected by malware .

The example hash generator generates a hash of the received baseline data block . The hash generator stores the generated hash in the secure storage via the secure tunnel e.g. as a secure hash block . As a result the secure hash is not accessible to malware operating at or above the kernel level and may be trusted for future operations such as data integrity checks.

After storing the hash in the secure storage block or if the application does not generate hashes block the example data integrity checker determines whether a data integrity check is to be performed block . If the example data integrity checker is to perform a data integrity check block the data integrity checker requests trusted data e.g. a secure hash from the storage device e.g. from the secure storage via the trusted operations the secure tunnel the trusted API and or the trusted firmware block . The example data integrity checker receives the trusted data via the secure tunnel block .

The example data integrity checker also receives data to be checked block . The data to be checked may be representative data such as a hash for data to be checked for malicious and or non malicious but undesired changes. The example data integrity checker compares the trusted data to the untrusted data block . For example the data integrity checker may compare a secure hash to a non secure hash . Additionally or alternatively the data integrity checker may compare baseline data to visible data e.g. in the visible storage of .

The example data integrity checker applies rule s to the result of the comparison block . Example rules may include malware definitions such as signatures that may be present when malware is on a system. Multiple comparisons may be necessary for some rules and or multiple rules may be necessary to detect malware. The example report generator of generates report s based on the application of the rule s to the comparison block . For example the report generator may generate and issue a report to a system administrator when malware or other undesired data changes are detected.

After generating the report s block or if a data integrity check is not performed block the example instructions may end. In some examples the blocks and or the blocks may be iterated to generate multiple hashes and or to perform data integrity checks on multiple units of data e.g. data files blocks of data etc. .

The example data storage device begins by establishing a secure tunnel e.g. the secure tunnel with an agent e.g. the data integrity check application block . The example secure tunnel may be established between the example command generator and the example trusted API of . The example data storage device e.g. via the embedded file awareness firmware obtains file system information e.g. file system information for the storage area the secure storage and or the visible storage block . The file system information informs the embedded file system awareness firmware how to interpret the files stored in the storage area .

The example trusted storage firmware of determines whether a command has been received block . Commands may be received from the command generator of via the secure tunnel . If a command has not been received block control loops to block to continue monitoring for a command.

When a command is received block the example hash generator determines whether the command is a command to generate a hash block . Commands to generate hashes may be received from the example application when for example a file or program has been updated and a new representative hash must be generated. In some examples the command specifies trusted data s e.g. in the secure storage for which a hash is to be generated. If a command to generate a hash is received block the example hash generator generates a hash of trusted data block . The example hash generator then stores the generated hash in the secure storage block .

After storing the hash block or if a command to generate a hash has not been received block the example data integrity checker of determines whether a command to perform a data integrity check has been received block . A command to perform a data integrity check may specify particular data to be checked and or may cause a data integrity check of a set or subset of data. If a data integrity check command has not been received block control returns to block to monitor for a received command.

If a command to perform a data integrity check is received block the example hash generator generates a hash of untrusted data e.g. data visible to the operating system block . The example data integrity checker compares the hash of the trusted data to the hash of the untrusted data block . The example data integrity checker applies rule s to the result of the comparison block . The rule s may identify changes indicating the presence of malware or other undesired changes to the trusted data. The example data integrity checker provides the result of the rule s and or the result of the comparison of the data to the agent via the secure tunnel block . The agent may for example generate a report based on the rule s .

To perform blocks and or the example hash generator and the example data integrity checker may use the embedded file system firmware to interpret the files in the storage area .

After providing the result block the example instructions may end. In some examples the data storage device of iterates the instructions to continue calculating hashes and or performing data integrity checks.

The example agent of can access the data and or write to the data from these LBAs by using a tunnel . The example action LBA is used to communicate action requests to the storage system . Example action requests include write read and or tunnel configuration commands and or other commands for accessing and or managing data in a storage system. The results of the commands are stored in the results LBA .

In an operational example the agent is to write data to the secure storage system . The example agent writes a write command to the action LBA and writes the data that the agent wishes to store to the results LBA . The secure storage system processes the command stored in the action LBA . Based on the command the secure storage system stores the subject data of the command to the location indicated in the action LBA by redirecting the subject data being written to results LBA . In another example the agent wishes to read data from secure storage system . The agent writes the read command into the action LBA . The example secure storage system processes the read command and redirects the data to be read as if the data were to be delivered from the result LBA . The example agent reads the data from result LBA to complete the read command. In some examples the mailboxing based tunnel can be built upon different storage protocols e.g. trusted send receive overloaded write read Common Storage Management Interface CSMI etc. .

The example command code B is a code that indicates what type of command is being written to the action LBA . For example the command code B can be a code that writes reads configures and or another command code used to indicate another type of action to access and or manage the data stored in the secure storage device . The example command sequence number C is a number that can be used to identify a specific command message. The example operators D are flags or bits that signal firmware in the secure storage device e.g. the data storage device firmware of and or to take some kind of specific action associated with a given command type. The example packet integrity field E is data that is used to ensure the integrity of the data written to the action field A. For example the data in the packet integrity field E may be a checksum or some other form of data that ensures that the data was correctly written to the action LBA .

The example instructions begin by setting up action and results LBAs block . The example instructions may configure the action LBA and the result LBA for communication with an agent that is authorized to communicate with the secure storage device . For example the secure storage device may configure the action LBA and the result LBA to be beyond the upper limit of addresses that an operating system can access. As a result the example agent is required to use an alternate channel of communication such as a tunnel to communicate information via the action LBA and or the results LBA .

The example secure storage device monitors the action LBA to determine if an action has been written to the action LBA block . For example the agent may write an action to perform a read write or other type of action with the secure storage device . The example secure storage device monitors the action LBA by scanning and analyzing incoming commands for specific bit patterns. The example secure storage device determines whether data is written to the action LBA block . If data has been written to the action LBA block the example secure storage device retrieves the command that was written to the action LBA block . The example data written to the action LBA has a data structure including example fields A E as described above with reference to . The example secure storage device processes the retrieved command block . After processing the command block or if data has not been written to the action LBA block control returns to block to continue monitoring the action LBA .

The example secure storage device decodes the command block . For example the secure storage device decodes the command by retrieving the authorization message e.g. the authorization message A of from the command. The secure storage device may further determine whether the command is authorized by analyzing the authorization message A.

If the secure storage device determines the command is a write command block . The example secure storage device may determine the type of command by reviewing the data in the command code field e.g. command code field C as described with reference to . If the command is a write command block the example secure storage device directs the data that is to be written in the results LBA to the storage location indicated in the command block .

If the command is not a write command block the example secure storage device determines if the command is a read command block . If the command is a read command block the example secure storage device redirects the read from the results LBA to a storage location specified in the command block .

If the command is not a read command block the example secure storage device determines if the command is a configure command block . If the command is a configure command the example secure storage device configures the tunnel according to the data in the command block . If the command is not a configure tunnel command block the example secure storage device takes an alternative action block . Example alternative actions could include ignoring the command storing an error code in the results LBA indicating the command is not understood and or any other action.

The example secure storage device establishes a tunnel with the example agent e.g. using the secure SATA trusted send facility block . The example agent may negotiate a session key with the secure storage device . In some examples the session key is unique to the agent and the secure storage device such that data can be securely communicated between the agent and the secure storage device using the session key. In some examples the session key is used to identify the agent to the secure storage device and to encrypt decrypt the data communicated using the tunnel .

The example secure storage device receives a message from the agent block . The example message includes authentication data that identifies the message as originating from the agent and includes authentication credentials such as the session key that can be used to decrypt the data in the message. The example message may include the authentication data such as the negotiated session key and the data that is encrypted using that key. In the example of receiving the message at block includes decrypting the data contained in the message so that the secure storage device can process the received message.

The example secure storage device determines if the received message is a write message block . If the message is a write message block the example secure storage device processes the write message block . For example the secure storage device may process the write message by determining which data is to be written and where the data is to be written to and writing that data using the location and data to be written from the message. In some examples the secure storage device returns a message to the agent via the tunnel indicating the results of the write e.g. success failure etc. .

If the received message is not a write message block the example secure storage device determines if the received message is a read message block . If the received message is a read message block the example secure storage device processes the read message block . For example the secure storage device may retrieve the location of the read and that the amount of data to be read from that location. The example secure storage device also sends a message back to the agent including the data that was read via the tunnel .

If the message was not a read message block the example secure storage device determines if that received message is a configure tunnel message block . If the received message is a configure tunnel message block the example secure storage device configures the tunnel according to configuration parameters in the message block . The example secure storage device may send a return message back to the agent via the tunnel indicating the success or failure of the command. If the received message is not a configure tunnel message block the example secure storage device takes an alternative action e.g. drops the received message sends a message back indicating the received message is not understood etc. .

While the example instructions of use the trusted send facility of secure SATA other storage protocols that include a trusted send facility may additionally or alternatively be used to set up a tunnel between the agent and the secure storage system .

Host to device communication can be used to accomplish trusted operations in the storage device such as computation of hashes or comparison of hash signatures. The example agent sends one or more set file update messages to the data storage device for files of which the embedded file awareness firmware in the storage device needs to be aware block . For example the set file update UFS1 source1.exe properties hrwx dr message causes the source1.exe file to be visible to the device file system to be read by the data storage device firmware and specifies that the file is resident at LBA range from 10 to 112. Similarly a set file update UFS1 src1hash.out properties hrwx drw message causes the src1hash.out file to be visible to the device file system to be read by the data storage device firmware and specifies that the file is resident at LBA range from 120 to 122.

The example agent sends one or more get file update messages to the storage device block . For example the agent may send get file update UFS1 src1hash.out message to make the data associated with the src1hash.out file visible to the agent . Any updates to this file since the last write to this file by the agent or the host reflect these changes.

The platform of the instant example includes a processor . For example the processor can be implemented by one or more microprocessors or controllers from any desired family or manufacturer.

The processor includes a local memory e.g. a cache and is in communication with a main memory including a volatile memory and a non volatile memory via a bus . The volatile memory may be implemented by Synchronous Dynamic Random Access Memory SDRAM Dynamic Random Access Memory DRAM RAMBUS Dynamic Random Access Memory RDRAM and or any other type of random access memory device. The non volatile memory may be implemented by flash memory and or any other desired type of memory device. Access to the main memory is controlled by a memory controller.

The platform also includes an interface circuit . The interface circuit may be implemented by any type of interface standard such as an Ethernet interface a universal serial bus USB and or a PCI express interface.

One or more input devices are connected to the interface circuit . The input device s permit a user to enter data and commands into the processor . The input device s can be implemented by for example a keyboard a mouse a touchscreen a track pad a trackball isopoint and or a voice recognition system.

One or more output devices are also connected to the interface circuit . The output devices can be implemented for example by display devices e.g. a liquid crystal display a cathode ray tube display CRT a printer and or speakers . The interface circuit thus typically includes a graphics driver card.

The interface circuit also includes a communication device e.g. communication device such as a modem or network interface card to facilitate exchange of data with external computers via a network e.g. an Ethernet connection a digital subscriber line DSL a telephone line coaxial cable a cellular telephone system etc. .

The platform also includes one or more mass storage devices for storing software and data. Examples of such mass storage devices include floppy disk drives hard drive disks solid state storage compact disk drives and digital versatile disk DVD drives. The mass storage device may implement the data storage devices .

The coded instructions of and may be stored in the mass storage device in the volatile memory in the non volatile memory and or on a removable storage medium such as a CD or DVD.

The memory hierarchy includes one or more levels of cache A . . . N within the cores A . . . N a set or one or more shared cache units . The set of shared cache units may include one or more mid level caches such as level 2 L2 level 3 L3 level 4 L4 or other levels of cache a last level cache LLC and or combinations thereof. In some examples coherency is maintained between one or more shared cache units and cores A . . . N.

In some embodiments one or more of the cores A . . . N are capable of multi threading. A system agent includes components to coordinate and operate the cores A . . . N. The system agent may include for example a power control unit PCU and a display unit. The PCU may be or include logic and components needed for regulating the power state of the cores A . . . N. The display unit is for driving one or more externally connected displays.

The cores A . . . N may be homogenous or heterogeneous in terms of architecture instruction set that is two or more of the cores A . . . N may be capable of execution the same instruction set while others may be capable of executing only a subset of that instruction set or a different instruction set.

An interconnect unit s is coupled to the application processor the system agent a bus controller unit an integrated memory controller unit s coprocessor s which may include integrated graphics logic an image processor an audio processor and a video processor static random access memory SRAM a direct memory access DMA unit and a display unit for coupling to one or more external displays. The example coprocessor s include a special purpose processor such as for example a network or communication processor compression engine GPGPU a high throughput MIC processor embedded processor or the like.

An example method disclosed above includes establishing a secure tunnel between a storage device and an agent transferring first data from the storage device to the agent via the secure tunnel the secure tunnel to prevent software executing in an operating system from modifying the data and identifying a data modification by comparing the first data to second data. In some examples the first data comprises a hash of trusted data. In some such examples the method further includes transferring third data from the storage device to the agent via the secure tunnel the third data comprising a hash of untrusted data. Some such example methods further include generating the third data at the agent and transferring the third data from the agent to the storage device via the secure tunnel.

Some example methods further include transferring third data from the storage device to the agent via the secure tunnel the third data comprising untrusted data. Some examples include identifying a presence of a software application on a platform based on the comparison.

Another example method disclosed above includes establishing a secure tunnel between a storage device and an agent providing a command from the agent to the storage device accessing first data at the storage device in response to the command and identifying a modification to data stored on the storage device by comparing the first data to second data using the storage device. In some examples comparing the first data to the second data comprises using at least one of a processor or a system on a chip in the storage device. In some examples the command comprises at least one of a file system identification a file name identification a command to generate a hash of a file stored on the storage device or a command to compare a first hash value to a second hash value.

Some example methods further include applying a rule to the comparison at the storage device to determine whether the comparison is representative of malware. Some examples include transferring a result of the comparison from the storage device to the agent via the secure tunnel.

An example system disclosed above includes a storage device comprising a secure storage area and a processor and an agent. The agent is to establish a secure tunnel to the storage device obtain a requested filefirst data via the secure tunnel the secure tunnel to prevent software executing in an operating system from modifying the data prior to the agent obtaining the first data and identify a data modification by compare the requested filefirst data to second data. In some examples the first data comprises a hash of trusted data stored in the storage device. In some example systems the storage device is to provide third data to the agent via the secure tunnel the third data comprising a hash of untrusted data. In some such examples the agent is to generate the third data and provide the third data to the storage device via the secure tunnel.

In some examples the storage device is to store the trusted data in the secure storage area. In some examples the agent is to access a trusted application programming interface exposed by the storage device to establish the secure tunnel. In some example systems the agent is to obtain the second data from the storage device. In some examples the agent comprises a file integrity checker to apply a rule to the comparison to determine whether the comparison is representative of malware.

Another example system disclosed above includes a storage device and an agent. The storage device comprises a secure storage area and a processor. The agent is to establish a secure tunnel to the storage device and send a command to the storage device via the secure tunnel where the processor is to identify a modification to data stored on the storage device by comparing first data stored in the secure storage area to second data in response to the command. In some examples wherein the first data comprises a hash of trusted datastored in the secure storage area.

In some example systems the second data comprises a hash of untrusted data. In some examples the processor is to compare a difference between the first data and the second data to a malware definition to determine whether malware is present on the system. In some examples the processor is to provide a difference between the first data and the second data to the agent the agent to generate a report based on the difference.

Example tangible computer readable media are disclosed comprising computer readable instructions which when executed cause a processor to establish a secure tunnel between a storage device and an agent transfer first data from the storage device to the agent via the secure tunnel the secure tunnel to prevent software executing in an operating system from modifying the data and identify a data modification by comparing the first data to second data. In some examples the instructions further cause the processor to apply a rule to the data modification to detect malware. In some examples identifying the data modification comprises identifying a modification to untrusted data stored on the storage device.

Example tangible computer readable media are disclosed comprising computer readable instructions which when executed cause a processor to establish a secure tunnel between a storage device and an agent provide a command from the agent to the storage device access first data at the storage device in response to the command and identify a modification to data stored on the storage device by comparing the first data to second data using the storage device. In some examples the agent executes on a host platform of the storage device or on a platform remote to the host platform. In some examples establishing the secure tunnel comprises exposing an application programming interface and receiving a request to the application programming interface from the agent the call comprising a trusted signature.

Although certain example methods apparatus and articles of manufacture have been described herein the scope of coverage of this patent is not limited thereto. On the contrary this patent covers all methods apparatus and articles of manufacture fairly falling within the scope of the claims of this patent.

