---

title: Enhancing test scripts
abstract: Example embodiments disclosed herein relate to enhancing test scripts with dynamic data. The disclosed embodiments include receiving production data that reflects real user interaction with an application process. Test scripts are generated based on the production data, where the test scripts simulate behavior relating to execution of the application process. The embodiments also include automatically enhancing the test scripts with dynamic data that includes at least one of correlation data and asynchronous data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09026853&OS=09026853&RS=09026853
owner: Hewlett-Packard Development Company, L.P.
number: 09026853
owner_city: Houston
owner_country: US
publication_date: 20120731
---
Users access application processes located on server computers using client computers. Such application processes include web applications. A user s experience depends on the performance of the application when deployed and accessed by the user. Thus performance testing of the application is important to determine how an application may function when deployed and to make necessary corrections to defects. Test scripts are used to implement testing of applications.

Various embodiments described below were developed to generate enhanced test scripts for application testing. The enhanced test scripts may be used to perform load testing functional testing or application programming interface API testing. The disclosed embodiments provide enhanced or augmented test scripts that accurately represent real user activity or interaction with an application.

There are numerous challenges to building test scripts for performance testing of applications. One of such challenges is building test scripts that accurately reflect real user activity. Typically information available for building test scripts include a list of hits and corresponding frequency that represent flows a user goes through when interacting with the application. However this information is not sufficient to create a realistic test script. User activity in an application comprises multiple paths taken through the application and recreating the different paths in a manner that enables effective testing may be complex. To illustrate the complexity and challenges involved consider an example application such as an online store web application. The online store may include a login page an item search page a view item details page a checkout page an add item page a log off page and many more pages. Users may traverse these pages in completely different manners and the manner in which pages are viewed or traversed may constitute completely different business processes. For example a customer user may login search for an item view item details proceed to checkout and then log off. Alternately or in addition some other customer users may complete a similar purchasing flow without logging off and others may complete the purchase without viewing item details. Further an administrator user may occur in parallel where the administrator user may login add a new item and then perform a search to verify that the new item shows up. Thus this example online store application may include a diverse range of users and flows. Moreover other application may include even more complex number of users and flows.

Basic test scripts may include a series of uniform resource locator URL requests that comprise these flows. However these URL sequences do not provide a working script as they lack script enhancements such as correlations and asynchronous data. Accordingly the disclosed embodiments describe automatically generating enhanced test script that include correlation data and asynchronous data for accurately testing applications where real user activity interaction with the application is accounted for. In addition the enhanced test scripts are further augmented with advanced pattern matching algorithms to identify parameterization rules pre defined correlation rules pre defined asynchronous rules and replacement and adaptation rules for adapting the enhanced test scripts to that of the testing environment. The automated enhanced test scripts when compared to basic test scripts provide robust testing of applications.

An example implementation includes receiving production data reflecting real user interaction with an application process and generating test scripts based on the production data where the generated test scripts simulate behavior relating to execution of the application process. The implementation also includes automatically enhancing the generated test scripts with dynamic data including at least one of correlation data and asynchronous data. The correlation data identifies communication between at least one client computer and a server computer and the asynchronous data includes asynchronous data of a plurality of execution instances of the application process.

The following description is broken into sections. The first labeled Environment describes an example of a network environment in which various embodiments may be implemented. The second section labeled Components describes examples of physical and logical components for implementing various embodiments. The third section labeled Operation describes steps taken to implement various embodiments.

In the example of production data includes data generated by at least one client device and transmitted to a server device or data transformed from user input e.g. via the at least one client computer . Production data may be communicated between one or more server devices and one or more client devices . The application may be running on the one or more server devices and provided to the one or more client devices . Server devices represent generally any computing devices configured to respond to network requests received from client devices e.g. request for an application process . A given server device may include a web server an application server a file server or database server. Client devices represent generally any computing device configured with browsers or other applications to communicate such requests and receive and process the corresponding responses. For example a user may access an online store application process at the client device . Client devices may include a notebook computer a desktop computer a laptop computer a handheld computing device a mobile phone or smartphone a slate or tablet computing device a portable reading device or any other processing device. Link represents generally one or more of a cable wireless fiber optic or remote connections via a telecommunication link an infrared link a radio frequency link or any other connectors or systems that provide electronic communication. Link may include at least in part an intranet Internet or a combination of both. Link may also include intermediate proxies routers switches load balancers and the like.

Production data extraction engine represents generally any combination of hardware and programming configured to extract production data. The production data reflects real user interaction with application . For example production data extraction engine may record real user activity with the application . The production data may include user input client device generated data server device generated data or any combination thereof. To illustrate production data extraction engine may monitor interaction and traffic between the user e.g. via client device and server device to extract network traffic data and network load user click streams user sessions and process flows i.e. streams of pages and a user navigates when interacting with application and combination of processes at different times. Thus production data extraction engine monitors interaction between the user and application to learn behavior or the user and corresponding responses and behavior of the application. The extracted production data may be analyzed to produce network load data performance statistics and metrics e.g. standard deviation maximum minimum etc think time e.g. application response times and other user and application related performance data. The extracted production data may be stored in data store . In one example production data may be retrieved or received from data store . In this example production data may include previously extracted and stored production data or historical production data for application or another application.

Test script generation engine represents generally any combination of hardware and programming configured to generate test scripts based on the production data where the test scripts simulate behavior relating to execution of the application process. Further the test scripts may simulate behavior relating to execution of a plurality of execution instances of the application process. For example the generated test scripts e.g. a transport script may simulate traffic behavior associated with traffic exchange between a client device or a plurality of client devices and the application process during execution of the application process. The generated test scripts also simulate user behavior to allow a determination of performance of the application process e.g. application process is running slowly downtime is experienced or some other fault or error is present .

Test script enhancement engine represents generally any combination of hardware and programming configured to automatically enhance the generated test scripts with dynamic data where the dynamic data includes at least one of correlation data and asynchronous data.

Correlation data includes data that is generated by server device and communicated to client device during interaction between the client device and the application process in the server device . Correlation data server generated data that is provided to the client device may include data that is useable by the server device to associate a particular communication with a given instance of the application process . For example correlation data may include a session identifier for identifying a particular session between the client device and the application process in the server device . In other examples other identifiers relating to communication flow may be used. Further correlation data may include authentication data that is generated by server device and communicated to client device to allow the client device to use the authentication data for subsequent communications with the application process . Thus the correlation data may include response based correlation e.g. responses from server device to requests by client device . Moreover static requests by client device may be substituted with parameters that are calculated and generated at runtime from the response data.

Test script enhancement engine may identify correlation data usable to enhance the test scripts. For example identification of correlation data may be based on correlation rules such as a set of patterns. Thus data matching the patterns in the set may identified as correlation data. Other examples of identifying correlation data include response based correlation technique where information that first arrived from the server device and was later returned to the server device by client device is identified. Moreover correlation data may be identified using a replay and scan technique where an execution instance of an application process is recorded once and the corresponding generated script is produced and replayed. When the replay of the script fails the replay and scan technique attempts to look for correlation data by comparing the recorded data to the replayed data until a failure point is identified. It should be noted that other correlation data identification techniques may be implemented by the test script enhancement engine .

Asynchronous data includes asynchronous data from a plurality of execution instances of the application process . For example application process may asynchronously provide data that is continually changing to client device e.g. updated information such as sport scores news stock prices election votes etc. . Test script enhancement engine may identify asynchronous data usable for enhancing the test script using one or more techniques. For example a rule based technique may be implemented to identify asynchronous data where predefined patterns can be defined and matched to recorded data for the purpose of identifying asynchronous data. As another example classification based technique may be implemented where the time and content of network traffic that was generated by the client device and the server device during an execution instance of the application process is measured. The measured time and content may then be classified to identify asynchronous data. Further test script enhancement engine may be configured to run asynchronous pattern recognition algorithms to accurately recreate asynchronous calls. For example recognizing poll and push patterns and replacing different separate requests with special API calls that result in the recreation of asynchronous patterns during script replay.

Test script enhancement engine may also be operable to augment the enhanced test scripts with pattern matching algorithms pre defined correlation rules pre defined asynchronous rules and testing environment replacement and adaption rules. Test script enhancement engine may include other enhancement and augmenting data and make necessary adjustments to adapt the enhanced test script to the testing environment and to insert the enhanced test script to the testing environment. For example the adaption and adjustments may be required to run the enhanced test script for a particular application a particular server device or any combination thereof. The testing environment may include functional testing API testing load testing some other type of testing or any combination thereof.

In foregoing discussion engines of were described as combinations of hardware and programming. Such components may be implemented in a number of fashions. Looking at the programming may be processor executable instructions stored on tangible non transitory computer readable storage medium and the hardware may include processor for executing those instructions. Processor for example can include one or multiple processors. Such multiple processors may be integrated in a single device or distributed across devices. Computer readable storage medium can be said to store program instructions that when executed by processor implement system of . Computer readable storage medium may be integrated in the same device as processor or it may be separate but accessible to that device and processor .

In one example the program instructions can be part of an installation package that when installed can be executed by processor to implement system . In this case computer readable storage medium may be a portable medium such as a CD DVD or flash drive or a memory maintained by a server from which the installation package can be downloaded and installed. In another example the program instructions can be part of an application or applications already installed. Here computer readable storage medium can include integrated memory such as hard drive solid state drive or the like.

In the executable program instructions stored on computer readable storage medium are represented as production data extracting instructions test script generating instructions and test script enhancing instructions that when executed by processor implement enhanced test script generation system of . Production data extracting instructions represent program instructions that when executed function as production data extraction engine . Test script generating instructions represent program instructions that when executed implement test script generation engine . Test script enhancing instructions represent program instructions that when executed implement test script enhancement engine .

In a flowchart of an embodiment of a method for enhanced test script generation is described. Method may start in step and proceed to step where production data reflecting real user interaction with an application process is received. Referring to production data extraction engine may monitor real user interaction and traffic between the user and application and extract production data from the monitored interaction. The production data may include user input client device generated data server device generated data or any combination thereof. The extracted production data may be stored in data store . Alternately or in addition the production data may be retrieved or received from data store .

Method also includes step where test scripts based on the production data are generated. The test scripts simulate behavior relating to execution of the application process. Referring to test script generation engine may be responsible for implementing step . For example the generated test scripts may simulate behavior relating to execution of a plurality of execution instances of the application process. The generated test scripts may include a transport script that simulates traffic behavior associated with traffic exchange between the client device and the application process during execution of the application process.

Method may proceed to step where the generated test scripts are automatically enhanced with dynamic data that includes at least one of correlation data and asynchronous data. Referring to test script enhancement engine may be responsible for implementing step . For example correlation data may include data that is generated by server device and communicated to client device during interaction between the client device and the application process in the server device . Asynchronous data may include asynchronous data from a plurality of execution instances of the application process . For example application process may asynchronously provide data that is continually changed to client device . Further test script enhancement engine may augment the generated test scripts with pattern matching algorithms pre defined correlation rules pre defined asynchronous rules and testing environment replacement and adaptation rules. Method may then proceed to step where the method stops.

Embodiments can be realized in any computer readable medium for use by or in connection with an instruction execution system such as a computer processor based system or an ASIC Application Specific Integrated Circuit or other system that can fetch or obtain the logic from computer readable medium and execute the instructions contained therein. Computer readable medium can be any individual medium or distinct media that can contain store or maintain a set of instructions and data for use by or in connection with the instructions execution system. A computer readable medium can comprise any one or more of many physical non transitory media such as for example electronic magnetic optical electromagnetic or semiconductor device. More specific examples of a computer readable medium include but are not limited to a portable magnetic computer diskette such as floppy diskettes hard drives solid state drives random access memory RAM read only memory ROM erasable programmable read only memory flash drives and portable compact discs.

Although the flow diagram of shows specific order of execution the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks or arrows may be scrambled relative to the order shown. Also two or more blocks shown in succession may be executed concurrently or with partial concurrence. All such variations are within the scope of the present invention.

The present invention has been shown and described with reference to the foregoing exemplary embodiments. It is to be understood however that other forms details and embodiments may be made without departing from the spirit and scope of the invention that is defined in the following claims.

