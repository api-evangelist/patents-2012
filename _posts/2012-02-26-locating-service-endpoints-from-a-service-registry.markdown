---

title: Locating service endpoints from a service registry
abstract: A method, operable by a service registry in a service orientated architecture system, for providing a service within the system. A service request is received from a service requester in the system. The status of the service is checked as registered in the service registry. In response to the service not having a registered service endpoint or a property of the service falling below a defined threshold, a request is sent to service providers or subsequent service registries to provide a new service and according to the defined threshold. In response to a service provider providing the new service according to the defined standard, the service registry is updated with the new service and responding to the service requester that the service is available. The embodiments allow both direct interaction between the requester and provider or indirect interaction via a service management layer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09459924&OS=09459924&RS=09459924
owner: International Business Machines Corporation
number: 09459924
owner_city: Armonk
owner_country: US
publication_date: 20120226
---
The present application is a continuation application of pending U.S. patent application Ser. No. 13 179 738 which was filed on Jul. 11 2011 which is assigned to the assignee of the present invention. The present application claims priority benefits to U.S. patent application Ser. No. 13 179 738 which claims priority under 35 U.S.C. 119 a from European Patent Application No. 10172929.1 filed on Aug. 16 2010 the contents of which are incorporated herein by reference.

The present invention relates to service based deployment within a system based on a service oriented architecture SOA and more specifically to locating service endpoints from a service registry.

Service oriented architecture SOA is a business driven IT architectural approach that supports integrating business processes as linked repeatable business tasks or services as defined in service documents. A service document is a basic building block of SOA that defines how a service can be used accessed and managed with other services. Service documents are used by analysts architects and developers during a development phase of the SOA life cycle to locate services to reuse and to evaluate the impact of changes to service configurations. Service documents are variously described as metadata objects descriptions entities and artifacts that store information about a service including a service description and a service endpoint. A service endpoint is a unique computer addressable location for the service. Service documents are stored in a service registry within an SOA system. Information in each service document including the service endpoints is indexed in a process known as shredding. Indexing service documents to maintain a list of all services and service endpoints is a part of maintaining on demand services. An example of a service registry is IBM WebSphere Service Registry Repository. The registry may highlight that there are several endpoints available to route the service request. When a request comes in the registry can use its knowledge of the available service architecture topology and note that the service requested is either not available or is performing below the agreed service level agreement.

Installed services having a registered service endpoint can be invoked whereas services without a registered endpoint cannot be invoked. Services are installed in a service provider with a fixed or readily available service endpoint defined in the service document and indexed by a service registry. However many service providers have fixed resources and have to prioritize high demand services over low demand services therefore not all services are available at the same time.

A low demand service may be uninstalled from a service provider and removed from the service provider s active services any service endpoint associated with the service will be removed by the registry and the service archived so that it requires re installation and setting up with a new service endpoint. It would be useful for a customer to request an uninstalled service and not experience any delay or difference in service. A low demand or uninstalled service many sometimes be referred to as legacy or an underused service.

The service provider may instead of uninstalling lower the processing priority of a low demand service or in some other way reduce processing bandwidth given to the low demand service. This could have the effect of reducing the quality of service experienced by the service requester to the point where the service was not what the service requester wanted. In some cases the reduction in quality would be contrary to the terms of the service contract. It would be useful for a service requester to receive a desired quality of service and not experience a delay or difference in quality of service even if the requested service had had its processing priority lowered and needed to be reconfigured.

In one embodiment of the present invention a method operable by a service registry in a service oriented environment for provisioning a service within the environment comprises receiving a request for a service from a service requester in the environment. The method further comprises checking details of the requested service as registered in the service registry. Furthermore the method comprises in response to the service requested not being registered sending the request to one or more service providers to provide a new service. In addition the method comprises in response to a service provider providing the new service updating by a processor the service registry with the new service and responding to the service requester that the service is available.

The foregoing has outlined rather generally the features and technical advantages of one or more embodiments of the present invention in order that the detailed description of the present invention that follows may be better understood. Additional features and advantages of the present invention will be described hereinafter which may form the subject of the claims of the present invention.

The present invention comprises a method system and computer program product operable by a service registry in a service orientated architecture system for providing a service within the system. A service request is received from a service requester in the system. The status of the service is checked as registered in the service registry. In response to the service not having a registered service endpoint or a property of the service falling below a defined threshold a request is sent to service providers or subsequent service registries to provide a new service and according to the defined threshold. In response to a service provider providing the new service according to the defined standard the service registry is updated with the new service and responding to the service requester that the service is available. The embodiments allow both direct interaction between the requester and provider or indirect interaction via a service management layer.

A service registry according to the embodiments of the present invention requests that a service or additional instances of the service be made available by a service provider and can be provided by cloud computing for instance by placing a virtual machine image containing the service onto available hardware. The new service endpoint is added to the registry and an enterprise service bus ESB is able to route to the new endpoint in addition to any existing endpoints . The service remains deployed until some time out or usage value is reached whereby the service is removed and the hardware is made available for other services. The service endpoint is removed from the registry if the registry discovers that the service endpoint has been removed from the service provider.

A registry is used by administrators who are provisioning the services directly or by using SOA administration applications. When services are started by an administrator endpoint information is automatically placed in the registry for use by administrators or SOA administration applications. The endpoint information contains other types of endpoints as well as service endpoints and the present invention recognizes that when a service endpoint is missing then it will be possible to acquire or provision a new service endpoint using the other types of endpoint information. Other types of endpoints are more abstract than service endpoints that are generally internet protocol addresses. The embodiments make available the other types of endpoint information to administrators and or administration applications.

Embodiments of the present invention are realized in a service registry. The registry offers a layer of indirection whereby the invoking application does not necessarily know the location of the service endpoint. The indirection is used by service applications on an enterprise service bus ESB to allow management of direction of service requests to different endpoints dependent on service characteristics such as quality of service or load balancing.

If there is no suitable service endpoint or the performance characteristics are too low then a request is made to provision a new instance of the service. An example of an existing endpoint that is not a service endpoint is a cloud tool that provisions virtual machine images when requested.

In the case of there being no service endpoint then the registry can wait until a new service endpoint instance has been provided. The service registry returns this new service endpoint to the requesting application and the request is routed to the new service endpoint. In the case where there are already available service endpoints the request can be routed to the existing service endpoints but when the new service endpoint becomes available future requests will have the new service endpoint available to them in addition to the existing service endpoints.

An advantage of the solution is that it allows more efficient management of low demand services from a service provider s available services as the solution can more efficiently uninstall and then reinstall a service. Deployed service instances can be monitored such that when the usage of the service drops below a set level or a timeout is reached then the service virtual machine image is removed from the cloud server.

The solution is particularly advantageous for a service provider that has limited numbers of servers and wants to offer many services to customers using cloud resources to expand services. Such a service provider might make available virtual endpoints that can host any one of a number of services. The service provider would simply provision a new service when a service request is received and then remove the service when the usage level has dropped. This would mean that the service provider will only have to pay for usage of the cloud when they are using it to host services therefore ensuring that their server costs are not fixed.

Referring to there is shown a component diagram of a computer system node according to an embodiment of the present invention. Computer system node comprises a computer system server which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with computer system server include but are not limited to personal computer systems server computer systems thin clients thick clients hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputer systems mainframe computer systems and distributed cloud computing environments that include any of the above systems or devices and the like.

Computer system server may be described in the general context of computer system executable instructions such as program modules being executed by a computer system. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types.

Computer system server may be embodied in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment program modules may be located in both local and remote computer system storage media including memory storage devices.

As shown in computer system server in computer system node is shown in the form of a general purpose computing device. The components of computer system server may include but are not limited to one or more processors or processing units a system memory and a bus that couples various system components including system memory to processor .

Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limiting such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnects PCI bus.

Computer system server typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system server and it includes both volatile and non volatile media removable and non removable media.

System memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory . Computer system server may further include other removable non removable volatile non volatile computer system storage media. By way of example storage system can be provided for reading from and writing to a non removable non volatile magnetic media not shown and typically called a hard drive . Although not shown a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more data media interfaces. As will be further depicted and described below memory may include at least one program product having a set for example at least one of program modules that are configured to carry out the functions of embodiments of the present invention.

Program utility having a set at least one of program modules may be stored in memory by way of example and not limiting as well as an operating system one or more application programs other program modules and program data. Each of the operating system one or more application programs other program modules and program data or some combination thereof may include an implementation of a networking environment. Program modules generally carry out the functions and or methodologies of embodiments of the present invention as described herein.

Computer system server may also communicate with one or more external devices such as a keyboard a pointing device a display etc. one or more devices that enable a user to interact with computer system server and or any devices e.g. network card modem etc. that enable computer system server to communicate with one or more other computing devices. Such communication can occur via I O interfaces . Still yet computer system server can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted network adapter communicates with the other components of computer system server via bus . It should be understood that although not shown other hardware and or software components could be used in conjunction with computer system server . Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or flash memory a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the present invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to product a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the function acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the function acts specified in the flowchart and or block diagram block or blocks.

Referring now to an illustrative cloud computing environment of an embodiment of the present invention is depicted. As shown cloud computing environment comprises one or more cloud computing nodes with which local computing devices used by cloud consumers such as for example personal digital assistant PDA or cellular telephone A desktop computer B laptop computer C and or automobile computer system N may communicate. Nodes may communicate with one another. They may be grouped not shown physically or virtually in one or more networks such as private community public or hybrid clouds or a combination thereof. This allows cloud computing environment to offer infrastructure platforms and or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices A N shown in are intended to be illustrative and that computing nodes and cloud computing environment can communicate with any type of computerized device over any type of network and or network addressable connection e.g. using a web browser .

Referring to there is shown a component diagram of a SOA system according to an embodiment of the present invention the SOA system comprises a user device A and at least two networks and . First network comprises at least one service provider and a registry typically first network is an enterprise network. Service provider comprises an exemplary mapping and navigation service . A second network comprises service providers A N. Registry includes service endpoint engine .

A known interaction between a client device A and a service provider or A N goes as follows. The client device A requests the use of a service from the registry for example the client device may request a map of its location. The registry searches for and locates the requested service for example the mapping and navigation service . The registry then selects one or more service endpoints associated with the located service. Each service endpoint comprises at least an Internet Protocol IP address and optionally a port number and service provider name to allow an IP service request to the service provider. The registry then sends the service endpoint back to the requesting client device A and the client device A requests the mapping service from the service provider or A N using the one or more of the supplied service endpoints. The registry may supply a service endpoint that is within the same domain or enterprise that is first network as the registry or it may supply one that is in another domain or enterprise. With the supplied service endpoint the client can independently request a service from a service provider.

A problem occurs when the registry cannot find a suitable service endpoint for a service request. All the embodiments provide a service endpoint engine as part of the registry to seek out a suitable service endpoint outside of the registry when none is found in the registry. All the embodiments seek out the service endpoint from service providers and also other service registries other service registries are not shown in . If a service endpoint does not exist in the registry then communication with other service entities allows the registry to establish whether the service is temporarily offline or no longer provided by any service provider. A temporarily offline service is a service that is missing a service endpoint or not installed. If the service is temporarily offline then the registry seeks to re establish at the service provider the service as available. Once a service provider or A N makes available a service endpoint for a particular service then the newly available service endpoint is registered at the service register for the first time or registered again by the registry and then provided back to the service requester A. In one embodiment the service requester A communicates directly with the service provider using the provided endpoint.

Referring to there is shown an SOA system providing full service management according to a service management embodiment of the present invention. The SOA system comprises user device A and at least two networks and . First network comprises at least one service provider registry and resource provider typically first network is an enterprise network. A second network comprises service providers A N. Registry includes service endpoint engine . Service provider comprises an exemplary mapping and navigation service .

In this embodiment full service management comprises a registry interacting with resource provider to provide a service for example a mapping service without a client needing to engage with a service provider. A client requests the service from the service registry and then the resource provider provides the service from the service provider. Once a newly discovered service endpoint is registered it is used by the resource provider to interact with the service provider or A N to control the service. The resource provider acts as a proxy to communicate between the service provider or A N and the service requester A. The resource provider allows the full service management of the service including charging for the service and management of service quality. In this embodiment the service requester A does not communicate with the service provider directly and the actual endpoint address of the service provider or A N is not known to the service requester A.

Referring to a component diagram of a service registry or is described according to an embodiment of the present invention. A service registry or stores a plurality of service documents and allows access to the documents and the corresponding services. The service documents are indexed and the indices are stored in a service registry to allow location of a specific service with a particular characteristic. The service registry is an index of a subset of information about a service for example the location and name of service document enabling the corresponding service document to be located and accessed in a repository or even the corresponding service located at the service provider . A tightly bonded service registry and repository allow a service operation to use both the indexed service information in the registry and the detailed service information in the repository. An example of an integrated service registry and repository is IBM WebSphere Registry and Repository WSRR .

Such an integrated service registry and repository has advantages of greater business agility and resilience through reuse than separate systems. Further advantages of looser coupling greater flexibility better interoperability and better governance arise from the integration. These advantages are addressed by separating service descriptions from their implementations and using the service descriptions across the life cycle of the service. Standards based service metadata artifacts such as Web Service Definition Language WSDL extensible mark up language XML schema policy or Service Component Architecture SCA documents capture the technical details of what a service can do how it can be invoked or what it expects other services to do. Semantic annotations and other metadata can be associated with these artifacts to offer insight to potential users of the service on how and when it can be used and what purposes it serves.

In one embodiment the service registry and repository for service documents is based on IBM WebSphere Service Registry and Repository. Such service documents include traditional Internet services that use a range of protocols and are implemented according to a variety of programming models. Although the embodiment discussed above is a standalone service registry embodiments may comprise other SOA components that have an integrated service registry for example a service provider might have an integrated service registry to enable registry functions as well as service provider functions.

The service registry or of one embodiment of the present invention is a Java Platform Enterprise Edition Java EE 6 application that runs on an IBM WebSphere Application Server 7 and uses an object database as a backing store to persist the service metadata. The service registry takes advantage of the role based access control so that role based views and access control can be turned on when the service registry and repository is deployed as an enterprise wide application. Referring to the service registry comprises registry engine repository governor classifier access controller administration interface user interface programming interface and service endpoint engine .

The registry engine offers both registry function and repository function for service metadata. The repository function allows users to store in repository manage and query service metadata artifacts holding service descriptions. Registry engine not only takes good care of the documents containing service metadata by reliable persistence of the data but it also provides a fine grained representation of the content of those documents for example ports and port types in some service documents. The registry engine makes provision for decorating registered service declarations and elements of the derived content models with user defined properties relationships and classifications. The registry provides a user interface that makes use of those declarations when a search is performed to find entities such as a service endpoint or service interface.

Documents stored in repository are monitored by registry engine for changes. Whenever a change to a service document is detected by registry engine it invokes validation and notification functions. Both kinds of function are considered extension mechanisms that can be used to customize how the registry engine reacts to changes. A validation function can be written such that the registry engine will execute when changes are made to the content. For example a validation function that checks for completeness of a service definition. The registry engine includes a notification plug in not shown with a subscription capability for a notification communicating a change in the content of the service registry and repository.

Through the governor the registry engine supports a rich set of extensible governance functions including the ability to model a service life cycle for a governed entity define valid transitions between service states write and plug in validators to guard the transitions between states and designate actions notification actions to be taken as result of the transition. The governor provides interfaces to analyze the impact of changes to content and provides auditing of such changes.

Classifier allows service descriptions and parts of service definitions to be annotated with corporate vocabulary and to capture the governance state. Service classification systems are captured in web ontology language OWL documents that are loaded into the service registry using the administrative interface . Service registry entities can be classified with values from these classification systems to allow classification based queries to be performed and to allow access restrictions based on classification.

Access controller supports a fine grained access control model that allows for the definition of which user roles can perform specific types of actions on corresponding artifacts. Visibility of services can be restricted by business area and user roles can be restricted from transitioning services to certain life cycle states. This is in addition to the role based access control provided by the service registry and repository.

Administration interface supports the import and export of repository content for exchange with other repositories and provide an application programming interface API for configuration and basic administration. These support interactions with the access controller and with the classifier .

User interface enables user interaction with the service registry and repository and supports all user roles offering lookup browse retrieve publish and annotation capabilities as well as governance activities such as import export and impact analysis. The user interface may be offered as a plug in for various third party tools to support interoperability.

Programming interface uses standard APIs to interact with registry engine for instance Java and a standard SOA protocol . The programming interface provides interfaces for basic operations such as create retrieve update and delete CRUD governance operations and a flexible query capability. The programming interface can communicate content using XML data structures or by using Service Data Objects SDOs . Documents can be created retrieved updated and deleted using either the user interface or the programming interface .

Service endpoint engine comprises processing logic for handling requests for service endpoints. The processing logic deals with the request when there is no service endpoint or when the quality of the service requested does not match the quality of the service provided by a service endpoint. The process steps performed by the service endpoint engine are described with reference to the embodiments of .

Referring to virtualization abstraction model layers provided by a cloud computing environment of an embodiment of the present invention are now described. The components layers and functions shown in are intended to be illustrative and embodiments of the present invention are not limited thereto. As depicted the following layers and corresponding functions are provided hardware and software layer virtualization layer management layer and workload layer .

Hardware and software layer includes hardware and software components. Examples of hardware components include mainframes in one example IBM zSeries systems RISC Reduced Instruction Set Computer architecture based servers in one example IBM pSeries systems IBM xSeries systems IBM BladeCenter systems storage devices networks and networking components. Examples of software components include network application server software in one example IBM WebSphere application server software and database software in one example IBM DB2 database software.

Virtualization layer provides an abstraction layer from which the following examples of virtual entities may be provided virtual servers virtual storage virtual networks including virtual private networks virtual applications and operating systems and virtual clients.

In one embodiment the service registry and the resource provisioning are part of management layer of a cloud system. Management layer further includes other functions such as metering and pricing user portals and service level management. Resource provisioning provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Service registry provides the directory for the computing and other resources used in the cloud system. Metering and pricing provide cost tracking as resources are utilized within the cloud computing environment and billing or invoicing for consumption of these resources. In one example these resources may comprise application software licenses. User portal provides access to the cloud computing environment for consumers and system administrators. Service level management provides cloud computing resource allocation and management such that required service levels are met.

Workloads layer provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include mapping and navigation software development and life cycle management virtual classroom education delivery data analytics processing transaction processing and mobile desktop. In a SOA system the workloads in the workload layer are implemented as services.

Referring to there follows a description of a process of an embodiment of the present invention performed by the processing logic of the service endpoint engine and related components in the SOA system or SOA system . This process can be adapted for at least the full service resource provisioning embodiment with suitable modifications. The process is described as process steps occurring with respect to the main components of the SOA system and in particular with respect to a service registry.

Referring to in conjunction with service requester A requests step a service provider for a service and directs the request at the service registry . For instance any one of the workload services see .

Service registry searches step the repository for a service endpoint associated with the service request but in line with the problem addressed by this embodiment the service registry does not find an associated service endpoint.

No exact service endpoint is located in the registry but service information associated with the requested service is used to locate step a service provider. If there is no associated service information then a default service provider is located. For instance a service provider name or generic management endpoint information may be stored in the repository and associated with the service request. In any case a service provider is located or provided step .

A service endpoint for the requested service is requested from the located or default service provider step .

The located or default service provider N receives step the service request and sets up step the service. Once set up the service provider associates the set up service with a service endpoint. The service might already be set up and have an existing service endpoint that the service registry was unaware of The service might have been set up without a service endpoint and therefore the service provider only sets up and associates a service endpoint. If the service has not been set up then service provider sets it up either at a known location or virtually at an unknown location. For virtual set up resource provisioning in management layer sets up a required virtualization layer configuration of servers storage networks applications and clients and workload .

The registry then associates step the service registered in the service registry with the received service endpoint.

In this embodiment in step the service requester A requests the service from the service provider N at the received service endpoint.

The service provider N receives the service request at the service endpoint and commences to provide step the service back to the service requester A.

For instance mobile phone service requester A requires a mapping service to log global positioning system GPS data as the service requester travels. A request is made to the service registry for such a GPS data logging service but the registry does not find a specific service endpoint associated with the service. However the registry does find a service name GPS Mapping Service and a service provider Telemaps Logger associated with the service. Service registry requests step a service endpoint from Telemaps Logger. Telemaps Logger receives the service endpoint request and sets up step or discovers a GPS Mapping Service at a service endpoint for example IP address 192.168.2.3 and port 1200 192.168.2.3 1200 . The Telemaps Logger service provider then sends back step the service endpoint to the service registry. Service registry associates 192.168.2.3 1200 with GPS Mapping service and sends the same service endpoint back to the mobile phone. The mobile phone is then free to request step the service from Telemaps Logger using the received service endpoint. Telemaps Logger provides back the GPS Mapping Service when it is requested on service endpoint 192.168.2.3 1200. For example the service sends map data showing the geographical location of the mobile phone and the map data is rendered on the mobile phone screen by the mobile phone.

Referring to there follows a description of a performance method of an embodiment of the present invention. As with method method can also be adapted for the full service resource provisioning embodiment with suitable modifications. The process is described as process steps occurring with respect to the main components of the SOA system and in particular to a service registry.

Referring to in conjunction with service requester A requests step a service provider for a service having a defined performance level and directs the request at the service registry .

Service registry searches step the repository for a service endpoint having the defined performance level and associated with the service request but in line with the problem addressed by this embodiment the service registry does not find such an associated service endpoint.

If one or more service endpoints are located that provide the service but not at the required performance level then these service providers are listed in a potential service provider list. If service providers without service endpoints and associated with the requested service are located then these service providers are also listed in the potential service provider list. A first service provider is selected step from those in the potential service provider list the selection is based on the closeness of the service performance to the required performance level. Optionally those service providers having service endpoints get higher selection priority over those without. If there is no associated service information then a default service provider is chosen.

The selected or default service provider N receives step the service request and if it can provide the required service performance it sets up step a service endpoint for the service with the defined service performance. If the service provider cannot provide the service performance then the request is declined and the service registry needs to select another service provider at step . If the service provider can provide the service then the service might already be set up with a service endpoint but requires additional configuring to get the right performance level. The service might be already set up at the correct service performance level but without a service endpoint the service provider only needs to set up an associated service endpoint and send it back step . If the service is not already set up then the service provider sets it up either at a known location or virtually at an unknown location.

The registry then associates step the registered service have the defined performance level with the received service endpoint.

In this embodiment the service requester A requests step the service from the service provider N at the received service endpoint. In this embodiment the service endpoint will be associated with a defined performance level so there is no need to request the defined performance level in the second request. In other embodiments it is conceivable that a service at a given service endpoint will have variable performance levels on request from the service requester.

The service provider receives the service request at the service endpoint and commences to provide step the service back to the service requester.

For instance mobile phone service requester A requires a mapping service to log global positioning system GPS data as the service requester travels and requires 1 second or shorter updates. In this example 1 second updates rules out our requester s default GPS service. A request is made to the service registry for such a GPS data logging service but the registry does not find a specific service endpoint associated with the service. However the registry does find a service named Euro GPS Mapping Service having a property that its precision is 0.8 sec updates and the registry understands that 0.8 sec is shorter than 1 second. Therefore a service provider Euro Map Logger is associated with the service. Service registry requests step a service endpoint from Euro Maps Logger. Euro Maps Logger receives the service endpoint request and sets up step or discovers a Euro GPS Mapping Service at a service endpoint for example IP address 214.168.2.3 and port 2400 214.168.2.3 2400 . The Euro Maps Logger service provider then sends back step the service endpoint to the service registry. Service registry associates 214.168.2.3 2400 with Euro GPS Mapping Service and sends the same service endpoint back to the mobile phone. The mobile phone is then free to request step the service from Telemaps Logger using the received service endpoint. Telemaps Logger provides back the GPS Mapping Service when it is requested on service endpoint 192.168.2.3 1200. For example the service sends map data showing the geographical location of the mobile phone and the map data is rendered on the mobile phone screen by the mobile phone.

Referring to there follows a description of a search method of a service registry proxy in accordance with an embodiment of the present invention. As with method and method can also be adapted for the full service resource provisioning embodiment with suitable modifications. The process is described as process steps occurring with respect to the main components of the SOA system and in particular to a service registry.

Referring to in conjunction with service requester A requests a service provider for a service from first service registry A.

First service registry A searches step the repository for a service endpoint associated with the service request but in line with the problem addressed by this embodiment first service registry A in step does not find an associated service endpoint.

If there is no associated service information then a default service provider may be located in accordance with previous embodiments. In this embodiment the service registry A decides whether to use default service providers or forward the request to subsequent service registries. The service registry uses a search algorithm that generates a relevance value for each of the located service providers if the relevance is below a threshold and there is a second or subsequent service registry to ask then service registry A requests step a service provider from a second or subsequent service registry B. The service information located by the first service registry is also sent to the second or subsequent service registry so that the second or subsequent registry can use consolidated service information when choosing a service provider.

The second or subsequent service registry B searches step the registry for a service endpoint associated with the service request. An exact match may be found in which case a service endpoint is sent back to the first service registry A and the process continues at step . Where no exact match is made then the second service registry chooses step a located service provider or a default service provider. The second service registry B could choose a subsequent service registry based on the relevance of the search but this is not shown.

The chosen service provider N receives the service request and sets up the service. Once set up the service provider associates the service with a service endpoint. The service endpoint is sent back to the second service registry B.

The second service registry B then associates step the registered service with the received service endpoint.

The second service registry B then sends step the received service endpoint to the first service registry A.

The first service registry A associates step the registered service with the received service endpoint.

The service requester A requests the service from the service provider N at the received service endpoint not shown . The service provider receives the service request at the service endpoint and commences to provide the service back to the service requester not shown .

In summary there is described a method system and computer program product for service based deployment within a system conforming to a service orientated architecture SOA . The method system and computer program product are operable by a service registry in a service orientated architecture system for providing a service within the system and comprising the steps of receiving a service request from a service requester in the system checking the status of the service as registered in the service registry characterized by in response to the service not having a registered service endpoint or a property of the service falling below a defined threshold sending a request to one or more service providers or subsequent service registries to provide a new service and in response to a service provider providing the new service updating the service registry with the new service and responding to the service requester that the service is available. The embodiments allow both direct interaction between the requester and provider or indirect interaction via a service management layer. The embodiments also allow the service provider to be provided as a virtual server and the service to be provided as a virtual application.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

