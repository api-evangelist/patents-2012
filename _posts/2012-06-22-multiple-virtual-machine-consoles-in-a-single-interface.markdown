---

title: Multiple virtual machine consoles in a single interface
abstract: Multiple virtual machine consoles run in a single user interlace as an integrated unit. Multiple virtual machines are grouped into a logical configuration, and console of each virtual machine in the configuration is displayed a single user interface, such as a browser window. Users are provided with integrated access through the single user interface to the available input/output functions and local resources for each displayed virtual machine console.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08929287&OS=08929287&RS=08929287
owner: VMware, Inc.
number: 08929287
owner_city: Palo Alto
owner_country: US
publication_date: 20120622
---
This patent application is a continuation of and claims the benefit of co pending U.S. patent application Ser. No. 11 742 464 entitled Multiple Virtual Machine Consoles in a Single Interface filed on Apr. 30 2007 and assigned to the assignee of the present application the entirety of which is hereby incorporated by reference which itself claims the benefit of Provisional Application Ser. No. 60 746 165 titled Multiple Virtual Machine Consoles in a Web Browser filed on May 1 2006 the entirety of which is hereby incorporated by reference.

This invention pertains generally to virtual computing and more specifically to providing multiple virtual machine consoles in a single interface.

Virtualization technologies such as VMware and Microsoft Virtual Server are becoming prevalent in the market place. These technologies provide a virtual hardware abstraction to guest operating systems and allow them to run as applications virtual machines in a functionally isolated environment on a host computer without being modified. Virtualization allows multiple virtual machines to run on a single physical server host computer simultaneously providing functional and performance isolation for processor memory storage etc. among the multiple instances of virtual machines.

Virtual Machines are virtual environments that simulate behavior of physical machines. Like physical machines a virtual machine provides a console for accessing its mouse keyboard and display. Typically the access to a console is provided via either a client application or via a web browser. VMware provides both a Windows and Linux application for accessing a virtual machine. Microsoft Virtual Server provides a browser based interface in which the console is embedded in a browser as an ActiveX control. With this approach end users do not need to install and maintain a client application on the underlying physical machine and users can access the console from anywhere with a browser.

Over the past few decades software has evolved from monolithic centralized applications to client server based applications and now to distributed applications. As software gets more complex the components of a software program often reside on different servers because of both the computational power required by complex applications and the distributed nature of much contemporary software. For example to setup a Microsoft Exchange Server system an administrator typically has to setup 1 an Active Directory Server for domain administration 2 a Backup Active Directory Server for redundancy 3 one or more Exchange Back end Servers to manage mail storage and 4 one or more Exchange Front end Servers to communicate with email clients.

These servers in the Exchange setup are closely related to each other and should be administered and managed together as a group. Note also that these multiple Exchange Servers could be configured as multiple virtual machines installed on one or more physical machines. Under these circumstances despite the fact that the virtual machines are related there is no ready way to indicate that one virtual machine is related to another virtual machine or the nature of the relationship.

Managing many virtual machines on the same desktop is challenging as virtual machines can overlap with each other in a confusing manner. Many virtual machines are related to each other in the functionality that they perform such as in the case of the Exchange servers described above. These relationships can lead to human error where operations thought to be performed on one virtual machine can actually be performed on a different one.

What is needed are methods computer readable media and computer systems for viewing and managing multiple virtual machines running on physical computers via a single interface.

Multiple virtual machine consoles run in a single user interface as an integrated unit. Multiple virtual machines are grouped into a logical configuration and console of each virtual machine in the configuration is displayed a single user interface such as a browser window. Users are provided with integrated access through the single user interface to the mouse keyboard screen and local resources for each displayed virtual machine console. The user can move the mouse cursor between consoles and access each virtual machine with the mouse and keyboard. In short the user can interact with each displayed virtual machine console as an integrated object of the single user interface. Cut and paste of text and drag and drop of files and folders is provided between the multiple virtual machines.

The features and advantages described in this summary and in the following detailed description are not all inclusive and particularly many additional features and advantages will be apparent to one of ordinary skill in the relevant art in view of the drawings specification and claims hereof. Moreover it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter resort to the claims being necessary to determine such inventive subject matter.

The Figures depict embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

Various embodiments of the present invention provide an approach for organizing related virtual machines into logical configurations and for viewing such a configuration in a single user interface . For example a single browser window can present a logical configuration of multiple virtual machines in a non overlapping and easy to access manner. depicts such an interface according to one embodiment of the present invention in which a configuration consisting of multiple virtual machines is presented in the same browser window . The configuration of consists of four virtual machines as an example. The number of virtual machines can be larger or smaller as desired.

Multiple virtual machines can be grouped into a logical configuration . A configuration simply refers to a set of logically related virtual machines . Because such a collection of virtual machines is related a user typically wants to view and operate the consoles of these virtual machines from within a single interface . A configuration functions as an encapsulation unit for these related virtual machines . A configuration can be named and associated with user defined semantics. A configuration can be operated on as a single unit where all virtual machines in the configuration can be powered on backed up shut down and or snapshot at the same time. An end user working on a configuration can switch between consoles of different virtual machines within the single interface e.g. the desktop or browser page .

As illustrated in users can operate the buttons beneath the virtual machine consoles to control the virtual machines by performing operations such as power on power off suspend reset snapshot and revert. Of course the illustrated buttons are only examples of virtual machine console user interface components. Typically users can interact with the virtual machines through all available input output functions with the added advantage that the multiple virtual machines are operating within a single user interface . For example users can place the mouse cursor over a desired virtual machine click into the virtual machine and start controlling the user interface components thereof. The screens of the consoles are updated in real time. Keystrokes are transmitted to the guest operating system running inside the virtual machine . Also the mouse can slide from one virtual machine to another virtual machine within a configuration . Different implementation techniques for achieving these features within the context of existing virtualization technology are discussed in detail below.

In order to embed virtual machine consoles in a single browser interface the three key console functions are addressed mouse keyboard and screen. It is also desirable to allow virtual machines to access devices local to the browser . For instance if a user wants to insert a CDROM into a virtual machine the user should be able to physically insert the CDROM into the local host machine on which the virtual machine is running and signal the virtual machine to use the CDROM. Other local devices in this category are e.g. USB and Firewire devices and serial port and parallel port devices. These console and local device access functionalities can be provided in a number of ways for example by ActiveX controls Java Applets browser plug ins and Flash.

According to some embodiments the present invention provides a VNC client in the form of an ActiveX control or alternative implementation such as an Applet browser plug in etc . Similar to the implementation case of Microsoft Virtual Server this ActiveX control can also be embedded multiple times in the same browser to allow the simultaneous viewing of multiple virtual machines in the same configuration . The ActiveX control can scale down its resolution such that the virtual machine console fits into a small browser window or scale it up to a full screen mode.

First the internal architecture of VMware workstation is used to extract and display the desired information. While a VNC server is not exposed publicly for VMware workstation an implementation of a VNC server does exist internally. The console of the VMware workstation client leverages the internal VNC server for display. VMware workstation s client has two components the VMware Graphical User Interface GUI Shell as well as the vmware vmx process . The vmware vmx portion of the client streams the display to the internal VNC server . In fact the console can be streamed to any VNC server. The GUI shell starts the vmware vmx process and communicates to the vmware vmx via an Inter process Communication IPC pipe . Messages in the pipe communicate the Internet Protocol IP address and port of the internal VNC server to the vwmare vmx process .

Given the internal mechanisms of VMware workstation an interception layer can be injected between the GUI client and the MKS so as to intercept and access all of the communication on the IPC channel . The interception layer interprets and modifies the messages sent to the vmware vmx so as to specify a different VNC server IP address port that is provided according to the present invention. The MKS console is routed to this VNC server .

To perform the interception the original binary for the VMware vmware vmx process is renamed e.g. to vmx mks old and the original binary is replaced with a new binary which comprises the interception layer . Thus when VMware GUI process starts the VMware vwmare vmx process the interception layer is launched instead of the vmware vmx process . The interception layer communicates to the VMware GUI process acting as if it is the real vmware vmx process . Thus the interception layer receives and processes commands from the GUI process . The interception layer start a VNC server instance and starts vmx mks old the real vmware vmx process . The interception layer relays the commands and messages to the vmx mks old process modifying the messages to use the newly created VNC server instead of the internal VNC server . It is to be understood that the underlying interception can be implemented in other ways as well for example by intercepting relevant calls.

Once a VNC server is running with the VMware workstation console in it the technique of is employed using an ActiveX control to connect to the console and display that in a browser . The same technique can be applied in other cases for example with remote console clients.

Turning now to more general techniques are discussed for accessing the display of an application window e.g. a virtual machine console and embedding that in a browser . Most operating systems have a graphics library for windows manipulation. Microsoft Windows is used as an example in conjunction with but it is to be understood that the same techniques can be applied in the context of other operating systems.

Microsoft provides an interface for windows manipulation called Graphics Device Interface GDI . Using Window s Application Programming Interface API it is possible to get a handle for the windows associated with an application e.g. a virtual machine as illustrated . An application has a tree of sub windows including menus dialogs buttons and other Windows components . By navigating through the windows tree recursively any specific window of interest associated with the application can be found. The desired window can be examined to access detailed information concerning the dimension and position of that particular sub window . The GDI can be used to extract pixels for that window and subscribe to events for screen updates.

With this level of access it is possible to route the desired display content of the application e.g. the virtual machine console to e.g. a VNC server and from there to an embeddable component such as an ActiveX control . More specifically cropping techniques can be employed to extract a particular sub window and the content thereof can be streamed to a target application such as a VNC server . The transmission protocol can but need not be a VNC based protocol. Once the content reaches the VNC server it can be routed to an embeddable component such as an ActiveX control and thus inserted into an interface such as a browser .

Thus the protocol for starting a virtual machine according to this embodiment is to 1 create a hidden Windows desktop 2 start the virtual machine on the hidden desktop 3 navigate the windows tree until the right sub window is found 4 use GDI to crop the window and subscribe to updates 5 expose that display content as a VNC server at a randomly chosen port 6 connect a component such as an ActiveX control to that VNC Server and 7 embed the ActiveX control in the browser .

This technique is more general than those described above in conjunction with . This technique is not limited to a virtual machine application per se but can be generalized to transmit any part of an application s window to another physical or virtual computer.

Various methods of embedding multiple virtual machines in a single interface are described above in conjunction with . Once multiple virtual machines are embedded in a single interface it is highly desirable to provide cut and paste of text and drag and drop of files and folders between these multiple virtual machines . There are two approaches for providing these functionalities leveraging the browser as a conduit and as illustrated in utilizing communication between the virtualization host operating system and the guest operating system .

The first approach runs automatically to the extent that it is supported and sufficient. Most VNC clients provide cut and paste support. When a cut or copy operation is performed on a VNC client the clipboard is automatically synchronized with the local machine on which the browser is installed. When a paste operation is performed the contents in the local machine s clipboard will be transmitted to the remote client. This allows a user to perform a cut operation from one virtual machine and paste the text into another virtual machine . This approach only works with a clipboard synchronizing client and only works with cut and paste of plain text or other serializable objects. For example cut and paste of complex .COM objects does not work well with this method.

The second approach as illustrated in uses the host operating system as the communication medium. First for each virtual machine a communication channel is enabled between the guest operating system and the host operating system . VMware has a utility called VMware Tools that enables this type of communication. For other virtualization technology that does not have this facility or for a VMware virtual machine without VMware Tools the host operating system and the guest operating system are configured to communicate another way e.g. via the serial port of the virtual machine that is mapped to a named pipe on the host. The host operating system also needs to establish communication with the browser of the end user. AJAX is an example of a mechanism that can provide communication between the browser and the host operating system .

An interception component is installed on the guest operating system to perform interception of cut and paste events that occur on the guest operating system . When a cut operation is performed the component writes the content of the cut operation to e.g. the serial port connected to the host operating system as a named pipe . An agent runs on the host operating system reads the incoming cut operation content from the pipe and relays the information to the browser . When a paste operation is launched the interception component requests the clipboard content from e.g. the serial port. The agent on the host operating system fetches the clipboard from the browser and sends it to the guest operating system .

The drag and drop operation is very similar in terms of its communication mechanism. Unlike cut and paste where only a block of text or binary data is transferred via the host operating system drag and drop operations copy files and or folders to the guest operating system and store them there. These files and folders can be subsequently transferred directly into a destination virtual machine provided that it is on the same host. If the destination virtual machine is on a different host the objects have to be transferred to that remote physical machine. Since files and folders are substantially larger than cut and paste text transferring the files directly to physical servers is more efficient than routing the contents through the browser .

Another desirable feature is the ability to move the mouse between virtual machine console windows. When the guest operating system is installed on a virtual machine the mouse cursor is typically trapped inside the virtual machine . This means that once a mouse cursor is inside a virtual machine it remains in the virtual machine unless an escape key is pressed. Thus switching between virtual machines in the same browser window requires the escape key to be pressed first. This is a highly undesirable behavior because end users cannot slide the mouse cursor directly from one virtual machine to another.

Both VMware and Microsoft Virtual Server provide VMware Tools or the equivalent which enables the mouse cursor to move in and out of virtual machines without being trapped. After the VMware Tools are installed inside the guest operating system the user s experience becomes much smoother. The VNC style ActiveX control does not trap mouse movement so it does not create any additional complications in this regard.

VMware s implementation of VNC server in GSX 3.2.x deviates from the standard RFP specification where relative mouse positions are used instead of absolute mouse positioning. When a standard VNC client is connected to this implementation of the VNC server the mouse cursor will always move to the upper right hand corner and become stuck there. The problem is alleviated by installing VMware Tools or by extending the VNC client to support VMware s modification.

As will be understood by those familiar with the art the invention may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. Likewise the particular naming and division of the portions modules agents managers components functions procedures actions layers features attributes methodologies and other aspects are not mandatory or significant and the mechanisms that implement the invention or its features may have different names divisions and or formats. Furthermore as will be apparent to one of ordinary skill in the relevant art the portions modules agents managers components functions procedures actions layers features attributes methodologies and other aspects of the invention can be implemented as software hardware firmware or any combination of the three. Of course wherever a component of the present invention is implemented as software the component can be implemented as a script as a standalone program as part of a larger program as a plurality of separate scripts and or programs as a statically or dynamically linked library as a kernel loadable module as a device driver and or in every and any other way known now or in the future to those of skill in the art of computer programming. Additionally the present invention is in no way limited to implementation in any specific programming language or for any specific operating system or environment. Furthermore it will be readily apparent to those of ordinary skill in the relevant art that where the present invention is implemented in whole or in part in software the software components thereof can be stored on a non transitory computer readable media as computer program products. Any form of computer readable medium can be used in this context such as magnetic or optical storage media. Accordingly the disclosure of the present invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the following claims.

