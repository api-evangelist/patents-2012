---

title: Search and context based creation in dynamic workspaces
abstract: The disclosure generally describes computer-implemented methods, software, and systems for search-, context-, and rule-based creation and runtime adaptation in dynamic workspaces. One computer-implemented method includes identifying a data artifact associated with each search result of at least one received search result, associating each identified data artifact with a module category of a plurality of module categories, injecting the identified artifacts into a content gallery, categorize, by operation of at least one computer, the injected identified artifacts within the content gallery, presenting at least a subset of the injected identified artifacts on an enterprise workspace page associated with an enterprise workspace, and constructing a context associated with at least one of the enterprise workspace or the enterprise workspace page.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09053152&OS=09053152&RS=09053152
owner: SAP Portals Israel Ltd
number: 09053152
owner_city: Ra'anana
owner_country: IL
publication_date: 20120806
---
An enterprise workspace provides a flexible intuitive environment for single users and or teams or groups of users to create integrate organize compose modify and delete through the use of content modules both structured and unstructured content on customizable personal or shared pages within the enterprise workspace. Pages may be assigned a permission role policy that determines what content each user may see and interact with on a page depending upon a permission role assigned to the user. The use of enterprise workspace pages may be resisted by organizations due to their static nature and administrative time necessary to perform updates to pages in light of multiple possible permissions roles that may apply to users. This lack of agility affects the organizations ability to quickly make changes to an enterprise workspace system and an overall agility to adapt to changing business or other conditions. As a result the organizations may seek alternative solutions to enterprise workspaces.

The present disclosure relates to computer implemented methods software and systems for search context and rule based creation and runtime adaptation in dynamic workspaces. One computer implemented method includes identifying a data artifact associated with each search result of at least one received search result associating each identified data artifact with a module category of a plurality of module categories injecting the identified artifacts into a content gallery categorize by operation of at least one computer the injected identified artifacts within the content gallery presenting at least a subset of the injected identified artifacts on an enterprise workspace page associated with an enterprise workspace and constructing a context associated with at least one of the enterprise workspace or the enterprise workspace page.

Other implementations of this aspect include corresponding computer systems apparatus and computer programs recorded on one or more computer storage devices each configured to perform the actions of the methods. A system of one or more computers can be configured to perform particular operations or actions by virtue of having software firmware hardware or a combination of software firmware or hardware installed on the system that in operation causes or causes the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

The foregoing and other implementations can each optionally include one or more of the following features alone or in combination 

A first aspect combinable with the general implementation further comprises prior to identifying the data artifact associated with each search result receiving at least one search result from a search system wherein the search system has access to internal and external data sources.

A second aspect combinable with any of the previous aspects further comprises identifying a ranking associated with each identified data artifact.

In a third aspect combinable with any of the previous aspects the subset of injected identified artifacts presented on the enterprise workspace page is selected based upon the identified ranking.

In a fourth aspect combinable with any of the previous aspects injected identified artifacts are categorized within the content gallery according to a type and a source.

In a fifth aspect combinable with any of the previous aspects the subset of the injected identified artifacts arranged on the enterprise workspace page according to a predefined enterprise workspace page layout.

A sixth aspect combinable with any of the previous aspects further comprising adding non presented injected artifacts from the content gallery to the enterprise workspace page.

The subject matter described in this specification can be implemented in particular implementations so as to realize one or more of the following advantages. First there is no need for static persistence of an enterprise workspace and or enterprise workspace pages. Second content on the enterprise workspace and or the enterprise workspace pages can be dynamically created and or changed. In some implementations the creation and or changing of the content may based on contextual search results and or defined rules. Other advantages will be apparent to those skilled in the art.

The details of one or more implementations of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

The disclosure generally describes computer implemented methods software and systems for search context and rule based creation and runtime adaptation in dynamic workspaces.

For the purposes of this disclosure an enterprise resource portal ERP also known as an enterprise information portal EIP or a corporate portal is a framework for integrating information people and processes across organizational boundaries. An ERP provides a secure unified access point often in the form of a web based user interface and is designed to aggregate and personalize information through application specific portals. The ERP is a de centralized content contribution and content management system which keeps the information always updated. With only a web browser enterprise portal users can begin work once they have been authenticated in the ERP which offers a single point of access to information enterprise applications and services both inside and outside an organization. ERPs may present information from diverse sources in a unified and structured way and provide additional services such as dashboards an internal search engine e mail news navigation tools and various other features. ERPs are often used by enterprises for providing their employees customers and possibly additional users with a consistent look and feel and access control and procedures for multiple applications which otherwise would have been separate entities altogether.

Enterprise Workspace EWS technology leverages existing ERP capabilities and acts as an add on to ERP technology. For example EWS user interface UI technology may run on top of existing ERP technology. EWS functionality provides a flexible intuitive environment for single EWS users and or teams or groups of EWS users to create integrate organize compose modify and delete through the use of modules both structured and unstructured content on EWS pages within an EWS. EWS technology allows EWS users to take advantage of a self service that is a decentralized approach in assembling content on EMS pages often without involvement by an enterprise s information technology group.

At a high level the EWS server is an electronic computing device operable to receive transmit process store or manage data and information associated with the example distributed computing system . The EWS server allows EWS users to compose modify delete and deploy EWS pages. Through a graphical user interface GUI an EWS server user for example using a client is provided with an efficient and user friendly presentation of data provided by or communicated within the example distributed computing system .

In general the EWS server is a server that stores a content provider manager a dynamic workspace generator a search engine and a rule engine where at least a portion of the content provider manager the dynamic workspace generator the search engine and or the rule engine is executed using requests responses sent from to a client within and communicably coupled to the illustrated example distributed computing system using network . In some implementations the EWS server may store a plurality of various content provider managers dynamic workspace generators search engines and or rule engines . In other implementations the EWS server may be a dedicated server meant to store and execute only a single content provider manager dynamic workspace generator search engine and or rule engine . In some implementations the EWS server may comprise a web server where content provider manager the dynamic workspace generator the search engine and or the rule engine represents one or more web based applications accessed and executed by the client using the network or directly at the EWS server to perform the programmed tasks or operations of the content provider manager the dynamic workspace generator the search engine and or the rule engine .

In some implementations any or all of the content provider manager the dynamic workspace generator the search engine and or the rule engine and or other components of the EWS server both hardware and or software may interface with each other and or the interface using an application programming interface API and or a service layer . The API may include specifications for routines data structures and object classes. The API may be either computer language independent or dependent and refer to a complete interface a single function or even a set of APIs. The service layer provides software services to the example distributed computing system . The functionality of the enterprise server may be accessible for all service consumers via this service layer. Software services such as provide reusable defined business functionalities through a defined interface. For example the interface may be software written in extensible markup language XML or other suitable language. While illustrated as an integrated component of the EWS server in the example distributed computing system alternative implementations may illustrate the service layer as a stand alone component in relation to other components of the example distributed computing system . Moreover any or all parts of the service layer may be implemented as child or sub modules of another software module enterprise application or hardware module without departing from the scope of this disclosure.

Specifically the EWS server is responsible for receiving application requests for example to view create or define rules to create for example dynamic workspaces pages and or search for content to include in the dynamic workspaces pages from one or more client applications associated with the client of the example distributed computing system . The EWS server is also responsible for responding to the received requests by processing said requests in the associated content provider manager dynamic workspace generator search engine and or rule engine obtaining content from the EWS server and or content provider and sending an appropriate response back to the requesting client application. In addition to requests from the client requests may also be sent from internal external. or third party users other automated applications as well as any other appropriate entities individuals systems or computers. According to one implementation EWS server may also include or be communicably coupled with an e mail server a web server a caching server a streaming data server and or other suitable server. In other implementations the EWS server and related functionality may be provided in a cloud computing environment.

As illustrated in the EWS server includes an interface . Although illustrated as a single interface in two or more interfaces may be used according to particular needs desires or particular implementations of the example distributed computing system . The interface is used by the EWS server for communicating with other systems in a distributed environment including within the example distributed computing system connected to the network for example the client as well as other systems communicably coupled to the network not illustrated . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated example distributed computing system .

As illustrated in the EWS server includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular implementations of the example distributed computing system . Generally the processor executes instructions and manipulates data to perform the operations of the EWS server . Specifically the processor executes the functionality required to receive and respond to requests from the client and or create integrate organize compose modify and delete EWS workspaces pages content and or other suitable data structures and or content associated with enterprise workspaces.

The EWS server also includes a memory that holds data for the EWS server . Although illustrated as a single memory in two or more memories may be used according to particular needs desires or particular implementations of the example distributed computing system . While memory is illustrated as an integral component of the EWS server in alternative implementations memory can be external to the EWS server and or the example distributed computing system .

In some implementations the memory includes an EWS an EWS page a module module content a module template a module gallery a rule and a user property . Although illustrated as single components in two or more EWSs EWS pages modules module content module templates module gallery rules and user properties may be used according to particular needs desires or particular implementations of the example distributed computing system .

The EWS is a central repository of knowledge. EWS generation may be performed either at design time or runtime and may be based upon for example EWS properties an EWS owner profile EWS viewer properties and or other suitable values. For example the EWS owner profile may include age address medical profile etc. The EWS viewer profile may include role relation to the EWS owner location etc. In some implementations the EWS is associated with a context. For example the EWS may be associated with a specific user for example a particular heart patient and a support group associated with the heart patient for example the patient s doctor friends and family etc. The EWS may be either personal or shared. The personal EWS is a private area where a single user can maintain personal content on a particular EWS page described below not accessible by other EWS users. A shared EWS is an area where multiple EMS users for example the support group or friends and family of the heart patient can access shared EWS pages . A shared EWS is assigned a role permission policy and each EWS user may be provided a role and associated permission in the shared EWS . Roles may be for example workspace owner workspace manager and or workspace member. Associated permissions may be for example the ability to create rename and or delete EWS pages and view update particular content associated with EWS pages and or specific modules described below associated with the EWS pages . In some implementations EWS users may have multiple permission levels roles. In some implementations users can also customize the EWS with different layouts branding and themes. In some implementations an EWS instance is created from a reusable EWS template not illustrated . An EWS template has the same or similar structure as an EWS and is an EWS associated with a template tag but not an actual EWS instance. If a new instance of an EWS is created based on an EWS template the EWS template is copied and used as the base for the EWS instance.

The EWS page is a container item defining a layout to structure the position of one or modules . In some implementations EWS users may create rename and or delete EWS pages as well as customize EWS pages with different layouts branding and themes. EWS users may define one or more EWS pages for each EWS . The EWS may contain for example static EWS pages EWS page templates and or dynamically generated EWS pages . Static pages are defined at design time and contain content that does not change while dynamic EWS pages are dynamically created modified and or deleted at runtime and contain changeable that is dynamic content. In some implementations an EWS page instance is created from a reusable EWS page template not illustrated similar to the above mentioned EWS template. An EWS page template has the same or similar structure as an EWS page and in an EWS page associated with a template tag but not an actual EWS page instance. If a new instance of an EWS page is created based on an EWS page template the EWS page template is copied and used as the base for the EWS page instance.

A module is a content item that runs in a personal or shared EWS page. Module content may include for example applications reports dashboards web content e.g. audio video images RSS feeds etc. and documents either from an enterprise or non enterprise system s . A module may have abilities to respond to workspace events and may have associated back end data and a property set. A module may also parameterized by the EWS user to allow changes to the back end data and property set of the module at runtime. In some implementations a module instance is created from a reusable module template . In these implementations an EWS user may use a GUI to drag and drop a module template from a module gallery a library of available modules templates to an EWS page to create a particular module instance. In other implementations methods and actions other than drag and drop may be used to add the module template to the EWS page . An EWS user may edit individual properties of the created module instance s property set for the purposes of the EWS page . Editing may include defining a module content source location properties user permissions roles that may view the module and or specific module content etc. The EWS user may also add edit and or delete back end data for the module . Backend data may include for example a description of the module creator identification date of creation or other suitable data. In some implementations EWS users may customize EWS pages with different layouts branding and themes. In some implementations the EWS user customizations of the EWS and or the EWS page may automatically affect and or supersede EWS user defined edited properties for a particular module instance. In some implementations generic pre defined modules are available that require little to no modification by an EWS user before use. In some implementations the EWS EWS and module may be implemented in HTML5 or other suitable computer language.

The rule may represent criteria conditions parameters variables algorithms instructions constraints references queries and any other appropriate information to define and enable the batch creation of EWSs and or EWS pages . A rule set can define few pages and the rules for each page s content. In some implementations the rules can add complete EWS templates EWS pages and or EWS page templates to an EWS. In some implementations rules can define what content that is modules and specific content associated with the modules is to be added to the EWS pages based on a specific context and or the workspace owner manager member s user properties described below . For example the context of a particular EWS page owned by a patient is medical heart condition so modules associated with this heart condition should be used to construct the particular EWS page. Also the particular EWS page is for EWS users with a role of workspace member here friends and family . In this example only content that should be viewable by the workspace members associated with the patient should be displayed on modules . In this example modules that are capable of receiving for example parameterized input or modules that are workspace aware are used to construct the EWS page . In some implementations the rule can be processed by the rule engine described below . In other implementations the rule can be processed by any other suitable component of the example distributed computing system for example the content provider manager . In some implementations the rule can be time based. For example an EWS could be dynamically established only during a specific week during a calendar year in which a conference takes place. In some implementations the rule can be stored remotely from and accessed by the EWS server using any suitable storage and or data access method consistent with this disclosure.

The user property is data associated with an EWS user. User property data may include for example name department position salary hire date a role system password contact information location locale and other suitable data. In some implementations location is a dynamic property that could be extracted from a location enabled device for example a mobile telephone computer etc. and could change while the location enabled device is traveling. In some implementations locale can be used to define a default language of a consuming device. In some implementations the system password of the consuming device cannot be used and or saved for security reasons. In some implementations the user property can be used by the dynamic workspace generator described below to determine content to filter display within modules on an EWS page within an EWS . In these implementations the user property can also be used to determine the ability of the EWS user to view create rename and or delete EWS pages and update particular viewable content associated with the EWS pages and or the modules .

The content provider manager is any type of application that allows the client to request and view content on the client after obtaining content from the EWS server and or content provider in response to a received request from the client . Content provider may be for example applications and data on the EWS server and or external services business applications business application servers databases RSS feeds document servers web servers streaming servers caching servers or other suitable content sources. In some implementations the content provider manager enabling the consumption content provider content by client . In some implementations the content provider manager allows connections to various content providers queries the content provider with regards to provided content and enables an EWS user to add the content to an EWS workspace EWS workspace page etc. either manually through a rule or using a search query.

In some implementations the content provider manager can use content provider manager data not illustrated or other above describe data stored in memory to perform tasks associated with the EWS server or other components of the example distributed computing system . Content provider manager data may include any type of data associated with and or used by the content provider manager including content provider locations addresses storage specifications content lists access requirements or other suitable data. For example for a database content provider the content provider manager data may include the server Internet Protocol IP address Uniform Resource Locator URL access permission requirements data download speed specifications etc. Once a particular content provider manager is launched a client may interactively process a task event or other information associated with EWS server . The content provider manager can also be any application program module process or other software that may execute change delete generate or otherwise manage information associated with a particular client and in some cases a business process not illustrated performing and executing business process related events on the EWS server and or the client . In particular business processes communicate with other clients applications systems and components to send and receive events. Additionally a particular content provider manager may operate in response to and in connection with at least one request received from other content provider managers including a content provider manager associated with another EWS server . In some implementations the content provider manager can be and or include a web browser. In some implementations each content provider manager can represent a network based application accessed and executed using the network e.g. through the Internet or using at least one cloud based service associated with the content provider manager . For example a portion of a particular content provider manager may be a Web service associated with the content provider manager that is remotely called while another portion of the content provider manager may be an interface object or agent bundled for processing at a remote client . Moreover any or all of a particular content provider manager may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further portions of the particular content provider manager may be executed or accessed by a user working directly at the EWS server as well as remotely at a corresponding client . In some implementations the EWS server can execute the content provider manager .

The dynamic workspace generator is a software and or hardware engine providing functionality to dynamically create modify and or delete EWSs EWS pages and or modules . Runtime EWS generation is performed by the dynamic workspace generator . At runtime an EWS structure that is EWS pages content layout and or modules may not be fully defined. EWS generation with an EWS containing dynamic content results in for example static EWS pages if applicable and EWS page templates not illustrated and or dynamically generated EWS pages . In some implementations the dynamic workspace generator can work in conjunction with the rule engine to perform its functionality for example in implementing examples presented below with respect to the rule engine . In some implementations the dynamic workspace generator can also take into account user properties to determine whether an EWS EWS page and or module is created modified and or deleted. In some implementations the dynamic workspace generator can also determine whether an EWS EWS page and or module is not visible that is filtered for a particular user based upon the user s user properties or other suitable value.

In some implementations the dynamic workspace generator is web based and runs in a client browser window. In some implementations the dynamic workspace generator may be partially or completely provided in a cloud computing environment. In some implementations a particular dynamic workspace generator can operate in response to and in connection with at least one request received from a content provider manager search engine and or rule engine . Additionally a dynamic workspace generator may operate in response to and in connection with at least one request received from another dynamic workspace generator content provider manager and or search engine including those associated with another EWS server . In some implementations each dynamic workspace generator can represent a web based application accessed and executed using the network e.g. through the Internet or using at least one cloud based service associated with the dynamic workspace generator . For example a portion of a particular dynamic workspace generator may be a web service associated with a dynamic workspace generator that is remotely called while another portion of the particular dynamic workspace generator may be an interface object or agent bundled for processing at a remote client . Moreover any or all of a particular dynamic workspace generator may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further portions of the particular dynamic workspace generator may be executed or accessed by an EWS user working directly at the EWS server as well as remotely at a corresponding client .

The search engine is any software and or hardware computing device operable to receive transmit process and store any appropriate data associated with the example distributed computing system of and to perform searching for data related to a search request received from or any component of the EWS server and or the client . The search engine may search data on the EWS server client other enterprise workspace servers other clients and or other data sources external to environment not illustrated . In some implementations each search engine can represent a web based application accessed and executed using the network e.g. through the Internet or using at least one cloud based service associated with the search engine . For example a portion of a particular search engine may be a web service associated with a search engine that is remotely called while another portion of the particular search engine may be an interface object or agent bundled for processing at a remote client . Moreover any or all of a particular search engine may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further portions of the particular search engine may be executed or accessed by an EWS user working directly at the EWS server as well as remotely at a corresponding client . Although illustrated as internal to the EWS server in some implementations the search engine can be external to and communicate with at least the EWS server and or the client using the network .

Turning now to is a block diagram illustrating dynamic workspace generator data connections. For example following a performed search using search engine the dynamic workspace generator using the search results would have access to data associated with the search results for example external data database data and or enterprise content management ECM data . The illustrated circular relationships between the external data database data and ECM data indicates that the dynamic workspace generator may create modify and or delete data associate with each appropriate component and vice versa. The dynamic workspace generator may use the accessible data to configure for example content for modules EWS pages and or an EWS . In some implementations the dynamic workspace generator can have access to a data dictionary not illustrated a central non redundant logical description definition of all data objects used within the example distributed computing system . Example data objects include database tables views types domains search helps and lock objects. In some implementations the dynamic workspace generator can have connections to any suitable data source. In some implementations the search engine can have fewer the same and or more data connections than the dynamic workspace generator . In some implementations the dynamic workspace generator can have fewer the same and or more data connections than the search engine .

Returning to the rule engine can be any application program module process or other software that may provide methods to evaluate and or execute at least one rule to define and enable the batch creation of EWSs EWS pages modules and or other suitable data structures content etc. associated with enterprise workspaces. In some implementations the owner of the EWS EWS pages and or module or other suitably designated user can define the rules .

The rule engine also connects existing items for example modules and EWS pages . In this example the rule engine may connect the modules with EWS pages and or EWS pages with an EWS . In some implementations the connection may be based upon for example a context subject and or user properties . In some implementations the rule engine can work in conjunction with the dynamic workspace generator to perform its functionality for example in implementing the following examples. For example taking the user properties of the owner of a particular EWS and the subject of the EWS here a patient with a medical heart condition the rule engine may execute one or more rules that on a first EWS page adds a link to a medical heart organization in a module inserts the top ten results from a search engine related to healthy heart activities into a module inserts confidential medical information into a module inserts emergency medical contact information for doctors in the patient s geographic area into another module and creates a module with articles related to his heart condition. On a second EWS page the rule engine may create modules with contact information for other patients willing to share their information in his geographic area with the same heart condition. The rule engine may also grant access to defined friends and family to his EWS pages and using the one or more rules dynamically filter and or modify what the friends and family may see on the EWS . For example the patient s designated spouse and children may be able to view all content on the EWS whereas a designated friend may not have access to the module with the inserted confidential medical information and the module would be removed from the associated EWS page as viewed by the friend. The rule engine might also include pictures of various friends and family on the EWS pages to allow friend and family to place a name to a face as well as modules supporting chat functionality to allow the patient and friends and family to communicate. In this example the patient s primary physician s contact information may also be added on the EWS home EWS page to allow friends and family to contact the physician if necessary. Another example would be implementing an online auction site using an EWS and rules . A buyer and seller could dynamically be presented different views of the EWS based upon their user properties and the rules .

In some implementations a particular rule engine can operate in response to and in connection with at least one request received from a content provider manager dynamic workspace generator and or search engine . Additionally a particular rule engine may operate in response to and in connection with at least one request received from another rule engine content provider manager dynamic workspace generator and or search engine including those associated with another EWS server . In some implementations each rule engine can represent a web based application accessed and executed using the network e.g. through the Internet or using at least one cloud based service associated with the rule engine . For example a portion of a particular rule engine may be a web service associated with a rule engine that is remotely called while another portion of the particular rule engine may be an interface object or agent bundled for processing at a remote client . Moreover any or all of a particular rule engine may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further portions of the particular rule engine may be executed or accessed by an EWS user working directly at the EWS server as well as remotely at a corresponding client .

The client may be any computing device operable to connect to or communicate with at least the EWS server using the network . In general the client comprises a computer operable to receive transmit process and store any appropriate data associated with the example distributed computing system . While illustrates representative clients collectively the client the client may take other forms without departing from the scope of this disclosure. For example client is intended to encompass any computing device such as a desktop computer laptop notebook computer wireless data port smart phone personal data assistant PDA tablet computing device one or more processors within these devices or any other suitable processing device. The client may include a computer that includes an input device such as a keypad touch screen or other device that can accept user information and an output device that conveys information associated with the operation of the EWS server managed system or the client itself including digital data visual information or a GUI as shown with respect to the client .

The client further includes a client application . The client application is any type of application that allows the client to request and view content on the client . In some implementations the client application can be and or include a web browser. In some implementations the client application can use parameters metadata and other information received at launch to access a particular set of data from the server . Once a particular client application is launched a user may interactively process a task event or other information associated with the business suite server . Further although illustrated as a single client application the client application may be implemented as multiple client applications in the client .

The illustrated client further includes an interface a processor and a memory . The interface is used by the client for communicating with other systems in a distributed environment including within the example distributed computing system connected to the network for example the EWS server as well as other systems communicably coupled to the network not illustrated . The interface may also be consistent with the above described interface of the EWS server or other interfaces within the example distributed computing system . The processor may be consistent with the above described processor of the EWS server or other processors within the example distributed computing system . Specifically the processor executes instructions and manipulates data to perform the operations of the client including the functionality required to send requests to the EWS server and to receive and process responses from the EWS server . The memory may be consistent with the above described memory of the EWS server or other memories within the example distributed computing system but storing objects and or data associated with the purposes of the client .

Further the representative client illustrates a GUI applicable to the remainder representative clients and the client in general. The GUI provides a visual interface with at least a portion of the example distributed computing system . Generally through the GUI an EWS server user is provided with an efficient and user friendly presentation of data provided by or communicated within the example distributed computing system . In particular the GUI may be used to view and navigate EWS pages served by EWS server as well as create integrate organize compose modify and delete both structured and unstructured content on EWS pages within personal and or shared workspaces.

There may be any number of clients associated with or external to the example distributed computing system . For example while the illustrated example distributed computing system includes one client communicably coupled to the EWS server using network alternative implementations of the example distributed computing system may include any number of clients suitable to the purposes of the example distributed computing system . Additionally there may also be one or more additional clients external to the illustrated portion of the example distributed computing system that are capable of interacting with the example distributed computing system using the network . Further the term client and user may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover while the client is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers.

Turning now to is a flow chart illustrating a method for search and context based creation in dynamic workspaces. For clarity of presentation the description that follows generally describes method in the context of . However it will be understood that method may be performed for example by any other suitable system environment software and hardware or a combination of systems environments software and hardware as appropriate. For example one or more of the EWS server the client or other computing device not illustrated can be used to execute method and obtain any data from the memory of the client the EWS server or the other computing device. In some implementations any of the following steps associated with method can be performed by a dynamic workspace generator and or a rule engine.

At results from a search performed by an EWS user using a search system e.g. the search engine are received. In some implementations the EWS user may search multiple data sources concurrently. For example the EWS user may perform a search of Internet sources e.g. a wiki user groups auction sites medical information etc. databases e.g. local conventional databases and or in memory databases ECM systems e.g. for documents reports etc. and or other suitable data sources. From method proceeds to .

At artifacts in the received results are identified. Artifacts may be for example reports documents applications data objects and or data artifacts such as datasets business intelligence BI cubes database views etc. From method proceeds to .

At a ranking associated with the identified artifacts is identified. For example the ranking of the artifacts may be based on an EWS user s role permissions or other suitable properties. If an EWS user has an owner role for an EWS with a context of a medical support group documents related to administration of a medical support group may be ranked higher than data objects related to a medical condition. For an EWS user with a role of member returned views of medical condition information may be ranked higher than the previously mentioned administrative documents. From method proceeds to .

At each identified data artifact is associated with a module category associated with a module further associated with a module gallery. A module gallery displays modules that may be associated with an EWS page. Modules may be for example a document module a data object module a data cube module or a view module or other suitable module. From method proceeds to .

At the identified artifacts are injected into a content gallery. The content gallery is a user interface element that presents available content associated with a module that may be selected and added to an EWS page. The content gallery extends what is presented in a module gallery to include any artifacts as discussed above at as well as other suitable artifacts. In some implementations a chosen artifact is associated with and consumed by an appropriate module and or modules. From method proceeds to .

At the categorized artifacts injected into the content gallery are categorized. For example if a number of documents were received in the search results and categorized as documents an entry e.g. an icon link etc. for one or more of the identified document artifacts would be presented in the content gallery associated with the module category for documents. The entry for each data artifact would present enough information to allow an EWS user to identify the document subject matter and to make a decision as to whether to select the document. For example the document title might be presented as a selectable link or item in the content gallery and shown as associated with a document module by indentation graphical connecting lines separators boxes or other suitable indicator to show association with a module category. In some implementations the artifacts may be categorized by more than one value for example as a type e.g. document and from a source e.g. a government archive as opposed to a wiki . From method proceeds to .

At the highest ranked categorized artifacts based upon the determined ranking are presented and or indicated to the EWS user. For example the top ranked artifacts may be highlighted bolded rearrange in a list or other suitable method to present indicate their higher ranking than other artifacts to a user. In some implementations the higher ranking artifacts can be presented in a separate user interface. In some implementations the other categorized artifacts of a low rank can remain as an icon in the content gallery or in some other form. In some implementations the top ranked artifacts can be materialized automatically into modules on one or more EWS page s within an EWS page layout s . In some implementations the EWS page layouts can be predefined for specific categories of artifacts associated modules that may be based upon specific EWS user roles permissions or other suitable value. The EWS user may also select other items from the content gallery to add to the EWS page s . From method proceeds to .

At a context is constructed for the EWS and or EWS page. The context is a set of one or more key value properties with an API to set get properties and an ability to listen to change events. The context enables the concept of global workspace page variables and inter module interactions. For example if the received search results were related to support options for patients with a specific medical heart condition in a particular city the context of the EWS and or EWS page may be constructed to support a social group supporting a patient with the specific medical heart condition in the particular city or geographic area. After method stops.

Turning now to is a flow chart illustrating a method for rule based creation in dynamic workspaces. For clarity of presentation the description that follows generally describes method in the context of . However it will be understood that method may be performed for example by any other suitable system environment software and hardware or a combination of systems environments software and hardware as appropriate. For example one or more of the EWS server the client or other computing device not illustrated can be used to execute method and obtain any data from the memory of the client the EWS server or the other computing device. In some implementations any of the following steps associated with method can be performed by a dynamic workspace generator and or a rule engine.

At a request to access an EWS is received from a requestor. For example for an EWS established to support a heart patient the requestor may be a registered user of the EWS requesting an EWS page. From method proceeds to .

At properties of the requestor are determined. For example the user profile and or other suitable may be accessed and analyzed to determine the identity context etc. of the requestor. In some instances the requestor may be a single individual or multiple individuals. For example for the heart patient s support EWS the requestor may be the heart patient s doctor spouse immediate family or friends. From method proceeds to .

At one or more rules that apply to the requestor are determined based on the determined properties of the requestor. The determined one or more rules for each requestor may be different. For example rules that determine what EWS content the doctor and the spouse of the heart patient may view may be different than the determined one or more rules for all other family members of the heart patient. From method proceeds to .

At a context of the requestor is determined. In some implementations the context can be determined from the determined properties of the requestor. The context could be a person project and or group of people. For example in the case of the EWS for the heart patient the determined context of the requestor may be determined to be doctor family spouse family non spouse or friend. From method proceeds to .

At the EWS is generated. In some implementations the generated EWS is not displayed to the requestor until after as described below. From method proceeds to .

At the determined one or more rules are executed in the determined context to determined appropriate content to display in the requested EWS. For example for a requestor with a family spouse context specific medial status information diagnosis doctor medical reports etc. may be added by the executed rules to an EWS page generated at with this information and subsequently displayed to the family spouse requestor. On the other hand for a requestor s with a context of friend the executed rules may remove specific content from the EWS page generated at due to privacy laws so that a requestor with a context of friend may not view the removed content without specific permission granted by the heart patient or other authorized individual. In some implementations the determined rules may include government laws regulations for example HIPPA custom rules and or other suitable rules to add and or filter content in an EWS. In this way the determined rules and or determined context applicable to the requestor requestors may be used to add and or filter content displayed in the EWS. In some implementations filtered added content can include for example an entire enterprise workspace one or more EWS pages specific content on one or more EWS pages and or other suitable data structures and or content consistent with this disclosure. From method proceeds to .

At the context of the EWS is determined. For example in the case of the EWS for the heart patient the determined EWS context could be Medical Support Multi user Medical Support or the like. After method stops.

Turning now to is a flow chart illustrating a method for runtime adaptation in dynamic workspaces. For clarity of presentation the description that follows generally describes method in the context of . However it will be understood that method may be performed for example by any other suitable system environment software and hardware or a combination of systems environments software and hardware as appropriate. For example one or more of the EWS server the client or other computing device not illustrated can be used to execute method and obtain any data from the memory of the client the EWS server or the other computing device. In some implementations any of the following steps associated with method can be performed by a dynamic workspace generator and or a rule engine.

At properties associated with the EWS user are determined. The properties of the EWS user may include the requestor s role personal preferences location or other suitable values. From method proceeds to .

At the EWS user s profile is determined based on the determined properties associated with the EWS user. From method proceeds to .

At appropriate content to display on the requested EWS page is determined based upon the determined properties and or the user profile associated with the EWS user. For example for a particular EWS user accessing the EWS page where the EWS user has a role of member and a user profile data value of a friend of the EWS owner e.g. a patient the EWS user friend may not be able to view certain medical information on the page related to the EWS owner patient . However the patient s physician or a particular EWS user designated with a user profile data value indicating a family relationship may be presumptively authorized to view the medical information. In this way determined properties and an EWS user s profile may be used to filter content displayed on the requested EWS page. In some implementations filtered content can include for example an entire enterprise workspace one or more EWS pages specific content on one or more EWS pages and or other suitable data structures and or content consistent with this disclosure. From method proceeds to .

At a determination is made whether any rules and or permissions apply to the EWS user. If at it is determined that rules and or permissions apply to the EWS user method proceeds to where the determined appropriate content to display on the requested EWS page is filtered according to applicable rules and or permissions. For example for the particular EWS user with an EWS role of member and user profile data value of friend attempting to access the EWS page associated rules may specify that unless the member is an authorized viewer under government laws regulations e.g. HIPPA the EWS user is not able to view certain medical information on the page related to the patient associated with the requested EWS page. However the patient s physician or the particular EWS user designated in a user profile as a member of the heart patient s family may be authorized to view the medical information only if they are a family spouse family guardian etc. As a result the determined appropriate content is filtered by rules and or permissions applicable to the EWS user to only allow appropriate content to be displayed to the EWS user. In some implementations filtered content can include for example an entire enterprise workspace one or more EWS pages specific content on one or more EWS pages and or other suitable data structures and or content consistent with this disclosure. If at however it is determined that that rules and or permissions do not apply to the EWS user method proceeds to .

Implementations of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry in tangibly embodied computer software or firmware in computer hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on a tangible non transitory computer storage medium for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage medium can be a machine readable storage device a machine readable storage substrate a random or serial access memory device or a combination of one or more of them.

The term data processing apparatus refers to data processing hardware and encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can also be or further include special purpose logic circuitry e.g. a central processing unit CPU a FPGA field programmable gate array or an ASIC application specific integrated circuit . In some implementations the data processing apparatus and or special purpose logic circuitry may be hardware based and or software based. The apparatus can optionally include code that creates an execution environment for computer programs e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them. The present disclosure contemplates the use of data processing apparatuses with or without conventional operating systems for example LINUX UNIX WINDOWS MAC OS ANDROID IOS or any other suitable conventional operating system.

A computer program which may also be referred to or described as a program software a software application a module a software module a script or code can be written in any form of programming language including compiled or interpreted languages or declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network. While portions of the programs illustrated in the various figures are shown as individual modules that implement the various features and functionality through various objects methods or other processes the programs may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. a CPU a FPGA or an ASIC.

Computers suitable for the execution of a computer program include by way of example can be based on general or special purpose microprocessors or both or any other kind of CPU. Generally a CPU will receive instructions and data from a read only memory ROM or a random access memory RAM or both. The essential elements of a computer are a CPU for performing or executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a global positioning system GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few.

Computer readable media transitory or non transitory as appropriate suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM DVD R DVD RAM and DVD ROM disks. The memory may store various objects or data including caches classes frameworks applications backup data jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto. Additionally the memory may include any other appropriate data such as logs policies security or access data reporting files as well as others. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user implementations of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube LCD liquid crystal display or plasma monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse trackball or trackpad by which the user can provide input to the computer. Input may also be provided to the computer using a touchscreen such as a tablet computer surface with pressure sensitivity a multi touch screen using capacitive or electric sensing or other type of touchscreen. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

The term graphical user interface or GUI may be used in the singular or the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Therefore a GUI may represent any graphical user interface including but not limited to a web browser a touch screen or a command line interface CLI that processes information and efficiently presents the information results to the user. In general a GUI may include a plurality of user interface UI elements some or all associated with a web browser such as interactive fields pull down lists and buttons operable by the business suite user. These and other UI elements may be related to or represent the functions of the web browser.

Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of wireline and or wireless digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN a radio access network RAN a metropolitan area network MAN a wide area network WAN Worldwide Interoperability for Microwave Access WIMAX a wireless local area network WLAN using for example 802.11a b g n and or 802.20 all or a portion of the Internet and or any other communication system or systems at one or more locations. The network may communicate with for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and or other suitable information between network addresses.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any invention or on the scope of what may be claimed but rather as descriptions of features that may be specific to particular implementations of particular inventions. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable sub combination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a sub combination or variation of a sub combination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system modules and components in the implementations described above should not be understood as requiring such separation in all implementations and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Particular implementations of the subject matter have been described. Other implementations alterations and permutations of the described implementations are within the scope of the following claims as will be apparent to those skilled in the art. For example the actions recited in the claims can be performed in a different order and still achieve desirable results.

Accordingly the above description of example implementations does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

