---

title: System and method for changing abilities of a process
abstract: A system and method wherein a set of privileges assigned to a process may be modified responsive to a request. The modification may apply to one or more abilities within the set of privileges and may be applied during execution of the process subsequent to the process creation time. Accordingly a process may be created with a default set of privileges and subsequently the privileges may be modified (e.g. to include a sub-set of the default privileges) thereby mitigating the risk of malicious exploitation of the process through attack.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09213571&OS=09213571&RS=09213571
owner: 2236008 Ontario Inc.
number: 09213571
owner_city: Waterloo, Ontario
owner_country: CA
publication_date: 20120606
---
The present disclosure relates to the field of computer executable processes and their associated abilities. In particular to a system and method for changing abilities of a process.

Computing platform operating systems may include mechanisms to enable or to restrict particular actions being taken by processes executing on a computing platform. These mechanisms may take the form of one or more abilities that can be assigned or denied to individual processes. The collection of abilities assigned to a process may be referred to as a set of privileges.

In multi user operating systems a set of privileges may be associated with each user a.k.a. user id . Each running process may be given the set of privileges that is associated with the owner e.g. user id of the process. When a user id is highly privileged processes owned by the user id may become targets for malicious exploitation in order to circumvent security measures on the computing platform.

On a computing platform a privilege is a permission to perform an action a.k.a. an ability . In multi user operating systems a set of privileges may be associated with each user identity user id on the system the set of privileges containing one or more abilities that are assigned to the user id. Alternatively or in addition a set of privileges may be associated with each of one or more group identities group id and in turn with each user id that is a member of each group id. Some systems may include one or more user ids that are designated as system administrator users a.k.a. root user root or sys admin that may be given all possible privileges.

Each process executing on the computing platform may be assigned a set of privileges. The set of privileges assigned to a process may be based on the set of privileges associated with the user id of the owner of the process. The process may be assigned the set of privileges associated with the owner of the process at the time the process is created.

Processes that execute the core functions a.k.a. kernel of the operating systems or that are created during the start up phase a.k.a. boot sequence of operation may be owned by a system administrator user id that in UNIX like UNIX is a registered trademark of The Open Group of San Francisco Calif. operating systems is referred to as root . Processes that are owned by root can be said to run as root. Processes that run as root may be omnipotent e.g. have all possible privileges . While using processes that are omnipotent facilitates the execution of the core operating system and start up functions it may also leave the system vulnerable to forms of attack that exploit the omnipotence of these processes.

Herein are described systems and methods wherein the set of privileges assigned to a process may be modified responsive to a request. The modification may apply to one or more abilities within the set of privileges and may be applied during execution of the process subsequent to the process creation time. Accordingly a process may be created with a default set of privileges and subsequently the privileges may be modified to include only a sub set of the default privileges thereby mitigating the risk of malicious exploitation of the process through attack.

The memory may comprise a device for storing and retrieving data or any combination thereof. The memory may include non volatile and or volatile memory such as a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or a flash memory. The memory may comprise a single device or multiple devices that may be disposed on one or more dedicated memory devices or on a processor or other similar device. Alternatively or in addition the memory may include an optical magnetic hard drive or any other form of data storage device.

The memory may store computer code such as the process manager the system interface and or any other application . The computer code may include instructions executable with the processor . The computer code may be written in any computer language such as C C assembly language channel program code and or any combination of computer languages. The memory may store information in data structures such as the process metadata repository and the user id metadata repository .

All of the disclosure regardless of the particular implementation described is exemplary in nature rather than limiting. The system may include more fewer or different components than illustrated in . Furthermore each one of the components of system may include more fewer or different elements than is illustrated in . Flags data databases tables entities and other data structures may be separately stored and managed may be incorporated into a single memory or database may be distributed or may be logically and physically organized in many different ways. The components may operate independently or be part of a same program or hardware. The components may be resident on separate hardware such as separate removable circuit boards or share common hardware such as a same memory and processor for implementing instructions from the memory. Programs may be parts of a single program separate programs or distributed across several memories and processors.

The functions acts or tasks illustrated in the figures or described may be executed in response to one or more sets of logic or instructions stored in or on computer readable media. The functions acts or tasks are independent of the particular type of instructions set storage media processor or processing strategy and may be performed by software hardware integrated circuits firmware micro code and the like operating alone or in combination. Likewise processing strategies may include multiprocessing multitasking parallel processing distributed processing and or any other type of processing. In one embodiment the instructions are stored on a removable media device for reading by local or remote systems. In other embodiments the logic or instructions are stored in a remote location for transfer through a computer network or over telephone lines. In yet other embodiments the logic or instructions may be stored within a given computer such as for example a central processing unit CPU .

A default set of privileges may be associated with each of one or more user ids and stored in a data structure such as for example user id metadata repository . The operating system may comprise a processor creator that is part of the kernel. The kernel may create one or more processes over time. Each created process may be owned by a user id and may be assigned a default set of privileges associated with the user id. The operating system may provided a means for receiving a request to modify the abilities of a process via for example a procedure call a.k.a. a system call that may be embodied in a linking library such as for example a C library. The procedure call may be invoke by a process with the object of the call being the process itself. Alternatively or in addition the procedure call invoked by a process other than the process that is the object of the call. The process that is the object of the request to modify may be identified by for example including in the request to modify a process identifier pid of the process. When the request to modify is received the kernel may modify the set of privileges assigned to the process. The process creator may further create one or more child processes on behalf of the process. Each child process may be assigned the set of privileges assigned to it s parent process at the time of the child process creation.

While various embodiments of the invention have been described it will be apparent to those of ordinary skill in the art that many more embodiments and implementations are possible within the scope of the present invention. Accordingly the invention is not to be restricted except in light of the attached claims and their equivalents.

