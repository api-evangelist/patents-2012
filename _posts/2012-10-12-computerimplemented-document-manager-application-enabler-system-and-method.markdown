---

title: Computer-implemented document manager application enabler system and method
abstract: Systems and methods are provided for providing document data. A host application is displayed on an interface of a computer system, where the host application includes an interface field that is linked to a document field of documents in a document management system. An enabler application captures a field value for the interface field and an operation identification from the host application. A context rule database contains a plurality of context rules that are accessed based upon the operation identification, where the context rule identifies a type of document that is relevant to the identified operation. A document management system is configured to be queried based on the field value and the relevant document type, where the document management system is configured to return document data based on said query, and where the interface of the computer system is configured to be updated based on the returned document data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09087053&OS=09087053&RS=09087053
owner: Hyland Software, Inc.
number: 09087053
owner_city: Westlake
owner_country: US
publication_date: 20121012
---
The present invention relates generally to computer implemented document management systems and more particularly to document image management systems.

Companies use document management systems to store and retrieve image documents. Difficulties arise when a company tries to integrate company software systems with a document management system. Programming extensions may be created to act as an interface between the company software systems and the document management system. However the programming may be complicated and time consuming as this requires detailed knowledge of the company software systems the document management system and the API s application programming interfaces that are needed for application integration. The difficulties further mount when the company s departments use different types of applications that are needed to access documents from the document management system.

In accordance with the teachings provided herein systems and methods are provided for a computer implemented system for providing document data from a document management system for display on an interface of a computer system through an enabler application that manages associations between fields of a host application and fields of documents in the document management system. A system includes a computer system and a host application displayed on an interface of the computer system where the host application includes an interface field that is linked to a document field of documents in a document management system. An enabler application is configured to capture a field value for the interface field and an operation identification from the host application. A context rule database contains a plurality of context rules where a context rule is accessed based upon the operation identification and where the context rule identifies a type of document that is relevant to the identified operation. A document management system is configured to be queried based on the field value and the relevant document type where the document management system is configured to return document data based on said query and where the interface of the computer system is configured to be updated based on the returned document data.

In the system a user may retrieve documents stored in the document management system by performing a keyboard or mouse event on a host application field that contains a keyword value. The keystroke or mouse event that triggers the document search is determined during configuration process . The configuration process also links data in host application form fields or text in a text screen to related information in the document management system database .

The application enabler system provides a generic configurable approach to retrieving documents from the document management system by connecting to the underlying Windows message loop through process . Process interrogates the Windows operating system OS for an application s contextual information and data values so that queries can be formed to retrieve documents. The application enabler system also uses process to assemble information about the input event and fire scrape events for use in formulating the document query. Within the application enabler system the firing of a scrape event means generating a message with the information scraped and forwarding it to another application.

After the input event has been processed and the scrape event fired various operations may be performed. For example process may retrieve document management system document s while in the host application based upon input event information. The documents found may be listed in a separate window. Selecting any document in the list displays it in its own viewer window. For example an accounting system could be configured to retrieve documents stored in the document management system. A field containing a P.O. number could be configured to retrieve and display corresponding invoices from the document management system thereby allowing a user to more easily verify correct billing. It is also noted that cross referenced files can be displayed in other windows by selecting the appropriate location in the open document.

The application enabler system s indexing process allows users to index the document management system documents directly from the host application thereby eliminating the need to re key the index information in the document management system . During the indexing process a user matches information currently displayed on the host application screen with the document management system document to be indexed. The operator selects a value on the host screen and confirms that the value s are correct. The index values are copied to the document management system such as FileNET Panagon IBM Content Manager and OnBase by Hyland Software Inc. . There is no limit to the number of keywords or screens that can be used to index a document into the document management system . Other applications in different document management systems are allowed to receive scrape events and to process them.

It should be understood that the application enabler system may be used with any type of document management system such as the OnBase software system from Hyland Software Inc. located in Westlake Ohio . OnBase system electronically captures stores and manages literally every document generated or received by a company including paper reports application files e mails and web content. The software handles everything a user needs to do with those documents retrieve revise annotate distribute or post to a website. It integrates seamlessly with ERP CRM and other e business applications to create a single point of online access to all relevant information. OnBase software combines the technologies of document imaging COLD ERM document management and workflow into a single enterprise class application.

The application enabler system may be used with different types of applications such as but not limited to Windows based applications and text based applications. illustrate configuration and retrieval of the application enabler system for an exemplary Windows based application. To configure a Windows based application a configuration process is performed that creates links between host application data fields and document management keyword types. A user creates links by first opening the application enabler system. The user is presented with a toolbar as shown in to help in the configuration process as well as with other enabling processes such as indexing and retrieval . The different functions of the toolbar are as follows button opens an existing configuration button saves the current configuration button toggles input capture event button indexes documents button configures screens and applications button allows enabled applications configuration to be viewed in a graphical fashion and button displays program information. It should be understood that many different ways are possible to supply an interface other than through a toolbar interface such as through a right mouse click pop up menu or other ways.

After a user has activated the configuration button the configuration screen of is displayed and lists any enabled line of business applications in region and any Windows based screens enabled for an application in region . In this example no applications are currently enabled as shown in region . This is how a user s configuration screen appears when it is accessed for the first time after installation and when the application enabler system is opened for an initial session.

The buttons on the configuration screen perform the following functions. The Configure button may be activated to change configuration information for previously defined configurations. The New Win Screen button may be activated to begin enabling a Windows based application. The New Text Screen button may be activated to begin enabling a text based application. The Delete button may be activated to delete a selected configuration screen. The Delete button may be activated to delete a selected enabled application. The Global Settings button may be activated to access the preferences displayed on .

With reference to preferences window contains preference option which is labeled Start server in capture mode . Preference option automatically enables the capture mode when a saved configuration is opened. Preference option labeled Show system tray icon displays the baseball icon in the system tray when the application enabler system service is running. Preference option labeled Remove app from task bar when minimized removes the application enabler system icon from the task bar when the application enabler system is minimized.

After the host application is open a user activates the New Win Screen button on the configuration screen shown in . After a user presses the button the application enabler system prepares to capture the first input screen that is to be enabled. A graphical user interface device such as a mouse is used to select the screen of in order for it to be captured. The screen selected by the user is highlighted by a selection box as shown in which encloses the area selected for capture.

The application enabler system interrogates the Windows OS in order to obtain the name of the host application screen. The obtained name is displayed in the settings screen as shown in . The user may alter the displayed name if desired.

The application enabler system uses mappings to identify screens edit fields and hot spots. In many cases including that of the example the default settings allow the application enabler system to accurately map fields. The default settings are used for the first configuration attempt. If the default settings do not successfully enable the screen a user may adjust the way the application enabler system identifies screens by clicking the Screen button to thereby allow changes to the following options 

The application enabler system also uses mappings to identify edit fields and hot spots. A user may also alter the rules used to perform field mappings. A user clicks the Keywords Hotspots button to adjust the way the application enabler system identifies edit fields. If the default settings do not successfully enable the edit fields the mapping rules options allow a user to alter the rules used to perform field mapping 

After the mapping rules are established a user selects via the interface of the document types to be searched when retrieving document management system documents from the host application. A user selects document types from the Available list and clicks the Add button to add them to the Selected list . To filter available documents by document type group a user selects a document type group from the Filter by document type group selection box and clicks the Next button to continue.

In this example the user wishes that Plot Surveys are to be retrieved based on loan number and check images are also to be retrieved based on Account Check Serial or Loan . Thus the user has selected for this example the document types as DDA Check Images and LN Plot Surveys in the Selected list .

The Keyword Type Selection dialog interface appears as displayed in . The keyword types available for selection are keyword types associated with the document types selected on the previous screen. A user selects each keyword type that is to be associated with the host application by clicking on the keyword type in the Available list and clicking the Add button to add the selected key word to the Selected list .

After each keyword is selected a user is allowed to move their mouse until a selection line encloses the host application field that is to be associated with a keyword value. In the example shown in the Account entry in the Selected list is selected. A user clicks on the desired field e.g. Account and a selection line encloses the field . The user is then returned to the Selected list screen . The selection process is repeated for each field to be mapped. As shown in the user clicks the Next button to continue or the Configure button to set the character stripping options described below.

If the Configure button is selected for a particular key word in the list then the interface of is displayed. The interface is used if a user wishes to retrieve documents based on a subset of characters within a value. The interface allows a user to configure the application enabler system to strip characters to exclude from the search. For example if a host application field contains a full phone number and a user wishes to retrieve document management system documents based on area code the user configures the interface so that the character stripping removes all but the area code from the host field.

Various stripping options may be provided such as the ones shown in . The Strip Spaces option removes all spaces from the host value regardless of the location of the spaces. For example if Strip Spaces is selected double clicking on a properly configured host field containing 221644 where   represents a space will return document management system documents with the keyword value 2221644. The Strip Characters option strips all occurrences of a specific character from the host value regardless of the location of the character within the value. A user enters the character the user wishes to strip in the edit field following the selection box. This option could be used to strip all dashes from a Social Security Number or Account Number. The Strip Character s from Beginning option strips a specific number of characters from the beginning of a value where represents the numeric value a user specifies . For example Strip 5 Characters from Beginning could be used to strip a 3 digit area code enclosed in parentheses from a telephone number. The Strip Character s from End option strips a specific number of characters from the end of a value. The sequence of the specified stripping operations may be of any order. In a top down stripping implementation the application enabler system may first strip spaces if checked then strip characters if checked and so on.

When a user completes the selection process the user clicks the OK button to return to the Keyword Type Selection screen of . The user clicks the Next button to continue to the hot spots Configuration screen. A user may wish to configure a host application with hot spots. A hot spot enables a host application edit field to return a subset of documents based on information specific to a single field. For example to enable the host application shown in to return documents based on a value in the Account Number field only a user may configure the Account Number field as a hot spot. If no hot spots have been configured on the host application document management system documents are retrieved if document keyword values match all enabled fields on the host application screen.

As an illustration if the screen on were not hot spot enabled only documents with keyword values matching a Loan of 12345 and Check of 5555 and an Account of 22222 are returned when a user clicks on the Account field. If a hot spot were enabled for Account Documents with an Account of 22222 are returned regardless of the Loan and Check .

The hot spots screen of is used to define a hot spot for application fields. With reference to a user selects an application field from the list of available fields which are identified by the keyword types currently mapped to the field and clicks the Add button . In the example of Account is selected as a hot spot. Recall that in the example Check Images are to be retrieved based on Account Check Serial and Amount. Therefore the document type DDA Check Images is specified as the hot spot document type.

Interface of is used to associate one or more keyword types with the hot spot. In the following example the application enabler system is enabled to retrieve all documents based on the Account when a user double clicks on the hot spot due to this field being added to the Selected list . A user clicks the OK button when the selection is complete. The application enabler system returns a user to the list of keywords. The hot Spot configuration steps are repeated for each hot spot to be configured.

After the configuration process has completed the enabled application and associated enabled screens are displayed respectively at and on . If a user wishes to enable a new screen for this application a user clicks the New Win Screen button and repeats the configuration steps described above. To delete a configuration for an entire application a user selects the application and clicks the Delete button . To delete a screen a user selects it and clicks the Delete button . A user clicks the Configure button on to define the mouse or keyboard events used to trigger document retrieval.

After the Configure button is activated the screen of is displayed to the user. With reference to a user selects at the mouse click event used to trigger a search Left Click Right Click etc. . A user can choose to use a combination of keystroke and click event by selecting the Ctrl Alt or Shift keys in addition to a click event.

To define a keyboard event for triggering a search a user places at their cursor in the keyboard event field and types the desired keystroke or keystroke combination. For example a user may press Ctrl and F5 simultaneously to define Ctrl F5 as a keystroke combination. A user clicks the OK button when the configuration is complete. It is noted that Mouse Keyboard events can be changed after configuration. A user may open an existing configuration and choose an alternate event and follow the steps described above. A user saves the configuration by clicking on the Save the current configuration button on the application enabler system toolbar or by choosing the right click option from the application enabler system shortcut residing in the system tray. A user may close the application enabler system so the new configuration file can be loaded into memory. The configuration file is opened using the Open an existing configuration button on the application enabler system toolbar. A user may enable the event capturing process in order to test the configuration for ensuring that it retrieves the desired documents.

To view a graphical representation of a completed configuration a user opens an existing configuration and clicks on the View Enabled Applications button. An expandable list displays a graphical view of the configuration like the example shown in . With reference to a hierarchical graphical view is displayed at for a sample application . Window based screens are located within collapsible entry . Any document types keyword types or hot spots are shown for the enabled screens. Note that if the sample application contained any text based screens those screens would be contained within the hierarchy .

The application enabler system may be used with applications other than Windows applications such as with text based applications. illustrate configuration and retrieval of the application enabler system for an exemplary text based application. With reference to a text based host application to be enabled is first opened. A user activates the New Text Screen button on the Configuration screen shown in . After this button is activated the application enabler system prepares to capture the first screen to be enabled. To identify the text screen that is to be enabled the user moves the mouse until the selection box encloses the entire host application screen and selects it. In the example shown in the selection box appears as a white line around the application.

A user chooses a unique text string as a screen identifier. The application enabler system distinguishes each screen by the value provided. The screen is identified by locating a unique text string. In the example shown in Loan Information is a unique text string located on line one column thirty six. This sample application identifies the current location of the cursor by line and column coordinates shown at the bottom of the screen . A user confirms the status line information at the bottom of the screen .

A user enters the Screen Name at as shown in . Identification strings for the screen are entered at region . For example the user enters the Line number Column number and characters contained in the String Loan Information . The user may add as many text strings as necessary to uniquely identify this screen.

After the text based screen is enabled the screen of is displayed in order to select document types to include when searching for documents related to the configured screen. The user adds to the Selected list the document types a user wishes to search when retrieving document management system documents from the host application. In this example check images are to be retrieved based on Account and Check . The document type in the example is DDA Check Images. To filter available documents by document type group the user selects a document type group from the Filter by document type group selection box . The user clicks the Next button to continue.

The screen in shows the enabled application Extra.exe and the list of enabled screens for that application. If a user wishes to enable a new screen for this application a user clicks the New Text Screen button and repeats the configuration steps described above. A user clicks the Configure button on to access the General tab and Copy to clipboard tab . The General tab defines the Mouse and or Keyboard Events used to trigger document retrieval.

The application enabler system identifies text based screens and screen data by the line and column location of characters on the text screen. In order to accurately map characters the application enabler system copies each configured text screen to the windows clipboard. The Copy to clipboard tab as shown in allows a user to define which keystrokes are used to select a screen and copy to the keyboard. In most cases text based applications will enable when the standard CTRL A select all and CTRL C copy all are used. Some applications may require alternate keystroke combinations. A user enters the desired keystroke combination in the text field below Select Screen and Copy to Clipboard and clicks the Add button.

Alternately some applications require the use of Auto select screen to copy text to the clipboard. In this case the user selects the Auto select screen check box. Some applications may require that a user right clicks to copy to the clipboard. In this case a user selects the Use Right Click to copy selection check box. A user clicks OK to save the selections.

The Index Documents dialog interface is shown in . A user selects the document type that contains the documents to be indexed from the Batch to index via the dropdown list . A user clicks the Start Indexing button . In the Current Document Document Type field a user enters the document type to which documents are transferred after indexing. Keyword types and values appear within region after they have been screen scraped.

After the Start Indexing button is activated the first document to be indexed is displayed in a separate viewer window. A user resizes or moves the window so that the viewer the Index Documents window and the host application are visible as shown in . A user navigates to the host screen that contains keyword information and enters index values into the host application. A user clicks the Get From Host button and activates the host application . The keyword types and values are copied to the Keywords list pane . The following are exemplary options available for the indexing operations 

Step two of the operational flow involves detecting mouse or keyboard events. Once the Application EnablerHook DLL receives a mouse event from the operating system as determined by decision blocks and the DLL verifies whether the mouse event needs to be processed. If it does not then the input event is discarded at process block . However if the mouse event needs to be processed then at process block the DLL gathers information about the target window using the window handle and hot spot location provided by the operating system. If hot spots are not configured documents are retrieved based on the value of all fields configured for the screen.

As an example of the type of processing involving hot spots a child window under a hot spot is gathered. The Child WindowFromPoint Windows API call determines which if any of the child windows belonging to the target window contains the specified point. This child window now becomes the target window. The DLL may gather if so configured hot spot location in coordinates relative to the target window. The ScreenToClient Windows API call converts the screen coordinates of the hot spot point on the screen to target window coordinates. The DLL also gathers command line information of the host application process. The GetCommandLine Windows API call retrieves the command line string for the host application process.

Step three of the operational flow involves whether the input involves a keyboard event. Once the Application EnablerHook DLL receives a keyboard event from the operating system it verifies whether the message needs to be processed as determined by decision blocks and . If it does not then the input event is discarded at process block . However if the keyboard event needs to be processed then at process block the DLL gathers information about the input focus window. The GetFocus Windows API call retrieves the handle to the window that has the keyboard focus if the window is attached to the calling thread s message queue. The caret position may be obtained through the GetCaretPos Windows API call which provides a copy of the caret s position. The keyboard state may also be obtained. The GetKeyState Windows API call is used to retrieve the status of the shift control and alt virtual keys. The status specifies whether the key is up down or toggled. Other information may include pressed key information and command line information. The operating system supplies the virtual key of the pressed key on the callback hook procedure. The GetCommandLine Windows API call retrieves the command line string for the host application process.

After the input event is processed step four of the operational flow is performed wherein the Application EnablerHook DLL posts at process block a message in the application enabler system message queue by using the Windows API call PostMessage. This message notifies the application enabler system that a new input message is ready to be retrieved.

Decision block examines whether the target application was found. If the target application was found then decision block examines whether the input event was a mouse event. If it is a mouse event then decision block examines whether the mouse event was expected by the target application and if it was then the screen values are processed. If the screen is a Windows based screen then process block would process the screen so as to among other things load keywords identified on the screen. If the screen is a text based screen then process block would process the screen so as to among other things load keywords identified on the screen. After the screens have been processed then decision block examines whether the screens were processed successfully. If they were then process block fires the scrape event via COM component object model connection points. After process block has completed execution then processing terminates at the end block .

With reference back to decision block if the input event was not a mouse event then decision block examines whether the input event was a keyboard event. If it was not then processing terminates at block . However if the input event was a keyboard event as determined by decision block then decision block examines whether the keyboard event was expected by the target application. If it was not expected then processing terminates at block . If the keyboard event was expected by the target application as determined by decision block then the screens are processed by process blocks or in the manner described above. It is noted that decision block would also have been executed if decision block had determined that a mouse event was not expected by the target application.

At process block the text screen is found that matches its identification screens through use of the contents of the clipboard. Decision block examines whether the target screen was located via process block . If it was then the screen is processed at process block whose operations are further described in . If the target screen was not located as determined by decision block then processing for this routine ends at end block .

If decision block determines that the screen is not a text based screen then process block finds the hot spot for the correct window. Decision block examines whether a hot spot was located. If it was not then processing for this routine terminates at end block . However if a hot spot was found at decision block then process block adds the document type associated with the hot spot to the scrape event. Process block loads the key words and process block adds the key words associated with the hot spot to the scrape event. Processing for this routine terminates at end block .

While examples have been used to disclose the invention including the best mode and also to enable any person skilled in the art to make and use the invention the patentable scope of the invention is defined by the claims and may include other examples that occur to those skilled in the art. As an example of the wide range and scope of the system and method the application enabler system and method allow users to access data across the departmental boundaries imposed by separate line of business applications. Since the document management system is used as a central document repository departments can share documents regardless of the system they are using. For example multiple systems can be enabled to access document management system documents from separate applications allowing for example the Accounting department to access documents from a frequently used accounting application and the Human Resources department to access the same documents through a different application.

The system and method provide a seamless integration between an organization s core applications and a document management system. The system and method improve employee efficiency by allowing users to retrieve supporting documents including images application files and text reports by clicking on a specified field within a program such as an ERP CRM or other line of business application. An additional benefit is that multiple departments can share information regardless of their respective core applications thus maximizing the organization s investment in these separate line of business applications. The integration between other applications and a document management system is done without the time and costs associated with custom programming traditionally required for interaction between applications. API s application programming interface are not required for integration and configuration is a point and click process. The system and method remove the need to learn new API s to determine compatibility and to do the programming. The system and method may also include security features such as using login user name and passwords to restrict or allow access to the data stored in the document management system.

As another example of the wide scope and range of the system and method the system and method may be practiced on document management systems that contain such document searching capability as shown in . To find a text or image document a user selects a Document Type Group within region and or Document Types s and clicks the Search button . A user can limit the search based by one or more of the following Document Type Groups Document Types Document Date Common Keywords Document Types.

Each document that is brought into the document management system is assigned to a Document Type. Document types group together documents with similar characteristics. For example a document type of AP PACKING SLIPS might be used to define image files of packing slips. Document types allow a user to work with groups of documents rather than individual documents. For example a user can limit document searches to only those documents of a certain document type.

Documents types can be further organized into Document Type Groups a unit that groups together similar document types. For example the document types Health Records and Insurance Documents can be grouped together under the document type group Patient Information.

A user can select one document type at a time from the Document Types list. The number of documents that are found is limited to those belonging to the document type that a user selects. When a document type is selected the keyword types for that document type will appear in the Keywords section.

In some cases a user can search over an entire document type group without limiting the search by document type. If the document type group has been configured as group search enabled the Search button is active when only a document type group is selected no document type is selected . The search will return documents from all document types within the document type group.

The user clicks the Search button to view the list of documents that are part of the document type group. The Dates section allows a user to define a specific date or range of dates to search for documents. The user specifies the desired months from the Date list. A user can select a date range by selecting the From date holding down the Shift key and selecting the To date. The dates are automatically filled into the From and To fields. The user clicks on the arrow next to the From and To date boxes to select the date from a popup calendar.

Once a user has selected a document type group or document type s the documents common keyword type fields appear in the Keywords section. For example if a user selects two document types one with keyword types of Customer Name and Account and the other with Customer Name and Address only the Customer Name keyword type field appears in the Keywords section below.

To further limit the search a user may enter specific keyword values for which to search. If a user does not enter keyword values the system returns documents regardless of the keyword values associated with the documents.

Advanced Keyword Features allow a user to narrow the document search from the Document Retrieval dialog box. Advanced Keyword Features include comparative operators logical operators and wild cards. Comparative operators allow a user to retrieve documents based on a range of keyword values as well as exact keyword value matches.

It is noted that image documents are graphic representations of information such as images of checks used by financial institutions or pictures of houses stored by real estate agents or loan officers. To open an image document a user performs a document search and selects the desired document in the Documents search results list. Image documents are displayed in an image viewing window like the one shown in . The image viewing window provides sizing and navigation options via the Image Viewer Control toolbar and the Thumbnail window. The Image Viewer Control toolbar is displayed at the top of the document and provides viewing options such as page navigation sizing and rotation options overlay viewing and printing.

A user can also modify the keywords associated with an image document by selecting Keywords to display the Add Modify keywords dialog box as illustrated in . A user changes the keyword values and or document date as desired and clicks Save to associate the new values with the document.

With reference to a user may also run the application enabler system with the V switch which enables the verbose mode. When running in verbose mode the application enabler system logs configuration information to a file. This configuration information can be helpful during troubleshooting. shows an example of the type of information found in a verbose log 

As yet another example of the many applications and extensions of the system the applications may use controls that are active such as ActiveX Edit controls that communicate to the windows API. Text based applications may use standard copy to clipboard functionality keyword values that are in the same position on the screen and Windows API.

As shown in the systems and methods may be used to generate barcodes or other identification labeling for physical documents . Application enabling retrieval functionality scrapes or retrieves values from a host application and provides the values so that a bar code printer can generate a bar code or a sheet of bar codes .

The generated bar codes can then be used to identify one or more physical documents . Via the generated bar codes the systems and methods may be configured to allow the input of these physical documents into the document management system to be automated without requiring any or a substantial amount of data entry because the data entry will be pre applied as bar codes.

As shown in the systems and methods may be used to index documents. Application enabling retrieval functionality scrapes or retrieves values from a host application and provides the values to a software application that can generate indexing records for use within a document management system . The indexing records can help automate the importation of documents into the document management system since the indexing records will have already been created prior to the documents being available for importation into the document management system .

The application enabling retrieval functionality can operate with a time delay that is the indexing records can be created at a later time and used as data entries in the document management system for when the documents actually arrive and are ready for processing by the document management system . Through pre indexing a placeholder is created in the database for which a document that is to be scanned or otherwise placed into the document management system will utilize.

As an illustration application enabling retrieval operations can scrape values from a hospital admission host application and store the values as a record in a relational data base in anticipation of a document being scanned and placed into the document management system. During the hospital patient registration process a user inputs patient admission data e.g. name address phone number employer insurance company etc. into the host application whose values are scraped and used to create a document indexing data record in the database. The document corresponding to the indexing record is made available at a later time and is then matched up with the already existing indexing record in the database. The matching can be done in many different ways. For example the document management system can show a hospital worker the data records that have already been created and for which a document needs to be associated. The hospital worker can select the data record at the time that they are going to scan or otherwise enter the document into the document management system. The available data records may be sorted by patient name or other record identification data. The hospital worker clicks on the patient s name and all the fields are automatically populated. The hospital worker then places the paper in the scanner and activates the scan button. Such an approach can remove the need for a workstation to have a keyboard since the hospital worker will be selecting from pre existing data records on a screen. As another example a hospital worker can bring up the appropriate pre existing data record for the document using a single unique value.

As illustrated in these examples application enabling retrieval operations can result in data records that precede the existence of the document thereby creating a cost effective way of doing scanning and indexing. Moreover because data records for documents are generated in this manner fresher more recent data can be used when storing documents instead of potentially stale data resulting from a static dump from a mainframe system.

As shown in application enabling retrieval operations may scrape or retrieve values from a host application . A software module creates one or more documents using the scraped values . The created document can be routed to one or more recipients as well as stored in the document management system .

For example scraped information from a pre surgery patient admission host application can generate a new document to be routed automatically either electronically or in a hardcopy format to a dietician. The routed document can contain a menu selection of meal items that the patient is going to eat when they are in the hospital.

In addition to the scraped information e.g. patient name etc. data other than what was obtained via the host application can be used in generating the document such as the dietician s e mail address and phone number. This data can be retrieved from a local or remote database. The scraped data and any other required data are then used to populate a document for the dietician that contains certain blanks for completion by the dietician. The blanks could contain places for entry of information about dietary restrictions that the patient may have.

As shown in the systems and methods may be used to queue up documents. Application enabling retrieval functionality scrapes or retrieves data from a host application and provides the values to a software application . The software application can use the scraped identifier s to retrieve a corresponding document from the document management system if the document is not already available to the software application . The software application places the identified documents into a location for later access by a user.

The location can be a temporary storage location such as a queue that can provide the queued documents upon request. A user can request that the queued documents be retrieved at a later point in time from the queue so that they can be reviewed. The reviewing user can be a different person than the person originally involved in interacting with the host application when the data was scraped. For example document identifiers scraped from a first person s interaction with a host application can be used to place the corresponding documents into a queue. A second person can then review the documents in the queue at a later point in time.

The queue can also be used for other purposes. As an illustration document identifiers scraped from a user s interaction with a host application can be used to place the corresponding documents into a queue. The documents in the queue can later be moved to a network location or to a removable computer medium e.g. CD so that the person can later review the documents such as at home.

As another example a first person is examining invoices through multiple invoice screens and observes that these invoices have high dollar items. Later on the first person wishes to have someone else review all of those items. Application enabling retrieval operations retrieve the document identifiers from the screens viewed by the first person. The software application queues all the corresponding documents so that they can be retrieved at a later point in time. As an illustration these documents could also be queued for use in tomorrow s work by either or both of the first and second persons.

In the example of a user interacts with a host application via a computer system . The host application is displayed on an interface of the computer system . The host application includes an interface field that is linked to a document field of documents in a document management system . An enabler application is responsive to the host application and is configured to extract certain data from the host application as described in detail herein above. For example the enabler application may be configured to extract a field value from the interface field of the host application as well as an identification of an operation that is currently being requested or performed via the host application.

The extracted field value and current operation are provided to a context engine . The context engine is configured to determine what types of documents are relevant to the current operation being performed on the host application . The context engine accesses a context rules database that identifies relevant types of documents for different operations. The context engine searches the context rules based on the current operation being performed at the host application and is provided with one or more relevant document types . The context engine searches the document management system to locate documents of the relevant type that match the field value extracted from the host application by the enabler application . The document management system provides document data to the context engine which is used to update the interface of the computer system .

Such context sensitive displays of document data can be useful in a variety of scenarios. For example if a user is interacting with the host application to perform a business operation such as entering a payment for an account the context engine can be utilized to automatically provide copies of documents that are relevant to the user entering the payment. For example when the user enters an account number in an interface field of the host application and requests an enter payment operation the enabler application captures the field value containing the account number and the payment entry current operation and provides the captured data to the context engine . The context engine accesses the context rules to determine what types of documents are relevant to a payment entry operation. In one example the context rules provide that a purchase order prior payment receipts and a billing agreement are relevant document types for a payment entry operation. The context engine accesses the document management system to request documents of the relevant type i.e. purchase orders prior payment receipts and a billing agreement that match the account number field value entered in the host application . Scanned copies of those documents are returned as document data and provided to the user for review in performing the payment entry operation.

The context rules storage can be structured in a variety of ways to provide the context engine with the relevant document type or types for a given operation. is a block diagram depicting a context rules database containing relevant documents for an operation joined in a linked list. A user interacts with a host application running on a computer system . An application enabler captures a field value from the host application as well as a current operation being requested or performed at the host application . A context engine searches a context rules data store to determine one or more types of documents that are relevant to the current operation being performed. In the example of the context engine searches the context rules data store to identify an operation record that matches the current operation detected by the enabler application . The operation record includes a pointer to a first document type record in a linked list of document type records that are associated with the operation record . The linked list is traversed to identify the relevant document types that are returned to the context engine . The context engine searches the document management system using the relevant document types to identify document data where the document data is used to update the interface of the computer system with which the user interacts.

In one example the system of can be utilized as part of a shipment status check operation. A user enters a purchase order number into an interface field of the host application and begins a shipping status check operation. The application enabler captures the purchase order number field value and an indication of the shipping status check operation and provides that data to the context engine . The context engine queries the context rules data store to identify relevant document types for the shipping status check operation. The context rules data store identifies a shipping status check operation record . A pointer in the operation record is followed to discover a first document type record that identifies a purchase order as a relevant document type . The remainder of the records of the linked list are traversed to discover additional relevant documents type that include a warehouse shipping request a bill of lading and a receipt acknowledgment form. The context engine requests the relevant document types associated with the purchase order field value from the document management system where relevant document data is returned for any such documents that are found in the document management system .

In addition to the current operation the context engine may use other data to identify relevant document types to access. is a block diagram depicting a system where a context engine uses a current operation and a user identity or type to identify relevant documents to access. A user interacts with a computer system to access a host application . When an operation is requested or being performed an enabler application accesses a field value and a current operation and provides that data to the context engine . The context engine further receives an identity of the user or an identification of the type of user as indicated at . The context engine queries the context rules data store to identify relevant document types based on the current operation and the user identity type .

Such an arrangement enables the context engine to provide different document data based on the identity or type of the user performing an operation. Thus when a staff user is performing an operation that staff user may be provided with certain document data while when a management user is performing an operation that management user may be provided with additional or different document data. For example when performing a human resources HR employee status query a staff HR user may be provided with a copy of a requested employee s contract. In contrast when a CEO performs an HR employee status query on the same requested employee the CEO may be provided with a copy of the employee s contract as well as copies of all performance reviews and disciplinary reports for the requested employee.

The context engine queries the context rules data store which filters document type records based on an operation field and a user identity type field . In the example of the document type records are stored in a relational database where the document type records are returned based on a query that specifies values for the operation field and the user identity or user type field . The returned document type records are provided to the context engine at where the relevant document types are used to search the document management system to provide relevant document data .

The document data used to update the interface of the computer system can take a variety of forms. is a block diagram depicting a system that returns representations of documents e.g. scanned images document files other reproductions that are displayed on the interface of a computer system. A context engine accesses a context rules data store to identify one or more relevant document types for a particular operation being performed using a host application . The context engine uses the identified relevant document types to search a document management system to access document data in the form of representations of the relevant documents. The representations of the relevant documents are used to update the interface of the computer system such as by displaying the representations in or with the host application so that those representations can be considered and used by the user in performing the current operation.

In addition to providing representations of relevant documents a context engine may be used to provide metadata about relevant documents present in a document management system. is a block diagram depicting a context engine providing a file completion report for a current operation. A context engine accesses a context rules data store to identify one or more relevant document types for a particular operation being performed using a host application . The context engine uses the identified relevant document types to search a document management system to determine whether documents of the relevant types are present in the document management system . The presence or absence of the relevant documents is reported by the context engine as a file completion report that is used to update an interface of the computer system running the host application .

Such a configuration can be used in a variety of circumstances. In one example a user accesses the host application to perform a loan write off operation related to a bankruptcy for a particular customer. The user enters a customer identifier e.g. a last name into the host application and requests the write off operation. An application enabler captures the customer identifier field value and an indication of the write off operation and provides that data to the context engine . The context engine queries the context rules data store to identify the relevant document types . In one example the relevant document types comprise a statement of bankruptcy a deposition transcript and a court order. The context engine queries the document management system for the relevant document types that have a matching associated customer identifier field value . The context engine receives indications of whether each of the relevant document types is present in the file for the customer of interest. The context engine generates a file completion report based on the indications received from the document management system .

The file completion report can be utilized in a variety of ways. For example the file completion report can be used to display a checklist on an interface of the computer display indicating additional documents that should be located and entered into the document management system . In another example the relevant documents may be required to perform the operation of interest. Thus when the file completion report indicates that certain documents that are relevant to the operation of interest are missing the operation cannot be completed. For example in the loan write off operation example a user may be prevented from completing the loan write off operation when one or more of the relevant documents such as the court order are missing from the document management system .

