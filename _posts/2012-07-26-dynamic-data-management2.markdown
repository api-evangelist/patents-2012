---

title: Dynamic data management
abstract: An interface for users to gain access and manipulate unstructured data is provided. In response to receiving a user query associated with a first database format, a system can request unstructured data associated with a second database format from a second database. The unstructured data can include a set of data groups where each data group has a set of values. Each value can be associated with a different tag. To generate a structured database, some embodiments can determine the number of data groups and the number of unique tags across the data groups and populate the table with data from the unstructured data. Subsequently, the system can apply the user query to the table to obtain a query result and transmit the query result to the user device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09569511&OS=09569511&RS=09569511
owner: salesforce.com, inc.
number: 09569511
owner_city: San Francisco
owner_country: US
publication_date: 20120726
---
This application is a non provisional application of U.S. provisional patent application No. 61 527 238 filed Aug. 25 2011 which is incorporated by reference herein in its entirety.

The present disclosure relates generally to among other things the accessing of data in an electronic environment and in particular to dynamically transforming unstructured data into structured data based on a user query.

As the number of computing users increase machine data generated by applications systems and information technology infrastructure that run a business increases. Specialized search engines e.g. Splunk can sort through vast amounts of unstructured and dynamic machine data also referred to as unstructured data such as event logs performance information file system information etc. and provide the compiled data to users. However the complexity of the unstructured data presented to users prevents many users from freely comprehending accessing and manipulating the data. Additionally unstructured data such as event logs is constantly generated by the bulk constantly changing and is fairly unpredictable. This adds to the difficulty in using such unstructured data. It is therefore desirable to provide new methods and system for accessing unstructured data.

Certain embodiments of the invention relate to transformation of data from an unstructured data format e.g. machine data stored in a distributed non relational semi structured database to a structured data format e.g. data in a relational database . After the transformation users can conveniently access and manipulate the structured data. In some embodiments a transformation module can receive a user query and retrieve and transform unstructured data in response to receiving the user query. The transformation module in some embodiments can perform one or more operations on the transformed data based on the user query. The transformation module can then present the query results to the user upon performing the one or more operations specified by the user query. Without having to dive into complex unstructured data and without having to learn unstructured data formats users can conveniently access and manipulate data transformed from unstructured data.

Certain aspects of the invention relate to systems and methods for accessing data. A computer system can receive a user query for unstructured data from a user device. The user query can be associated with a first database format. In response to receiving the user query the computer system can request the unstructured data from a second database that stores the unstructured data. The computer system can receive the unstructured data from the second database. The unstructured data can include a set of data groups where each data group has a set of one or more values each value of a respective data group being associated with a different tag. The unstructured data can be associated with a second database format. In some embodiments the computer system can determine a first number of data groups in the unstructured data. The computer system can then determine a second number of unique tags across the data groups of the unstructured data. The computer system can create a table in the first database format where the number of columns of the table is based on the second number of unique tags and where the number of rows of the table corresponds to the first number of data groups. The computer system can populate each row of the table with the unstructured data of a respective data group by adding each value to the column corresponding to the associated tag. The computer system can apply the user query to the table to obtain a query result and transmit the query result to the user device.

It is advantageous to secure a finite amount of unstructured data convert the secured unstructured data to a format compatible with a structured format and allow users to perform user queries on the converted data. The transformation of unstructured data into a format users are familiar with permits users to freely access analyze and manipulate the data in the desired format.

The following detailed description together with the accompanying drawings will provide a better understanding of the nature and advantages of the present invention.

In the following description numerous details examples and embodiments are set forth for purpose of explanation. However one of ordinary skill in the art will realize that the invention is not limited to the embodiments set forth and that the invention may be practiced without some of the specific details and examples discussed. In other instances well known structures and devices are shown in block diagram form in order not to obscure the description of the invention with unnecessary detail.

Certain embodiments of the invention provide a user interface that enables a user to specify using a structured data format a query to perform an operation on unstructured data associated with an unstructured data format. In some embodiments a server can transform unstructured data associated with an unstructured data format e.g. machine data stored in a distributed non relational semi structured database to structured data in a structured data format e.g. data in a relational database table . After the transformation users can conveniently access and manipulate the structured data using the structured data format.

In some embodiments a transformation module can receive a user query and retrieve and transform unstructured data in response to receiving the user query. The transformation module in some embodiments can perform one or more operations on the transformed data based on the user query. The transformation module can then present the query results to the user upon performing the one or more operations specified by the user query. Without having to dive into the complexities of unstructured data users can conveniently access and manipulate data transformed from unstructured data.

Unstructured and dynamic machine data collected at various data centers can provide a definitive record of transactions customer activity and or behavior security threats system health fraudulent activity etc. In some embodiments unstructured dynamic machine data can include data generated in real time from various applications servers network devices or security devices including logs e.g. app logs web access logs web proxy logs audit logs syslogs config files messages alerts scripts etc. Specialized search engines can capture and analyze real time and historical machine data in order to improve service identify trends mitigate risks improve operational visibility etc. In some embodiments the unstructured data can be time series based and thereby allow retrieval of unstructured data generated within a specified time interval. However as mentioned the complex format of the unstructured data prevents many users from freely accessing analyzing and manipulating the vast amounts of gathered data. Some embodiments can transform unstructured and dynamic machine data into structured data such that users can conveniently access and specify various operations to be performed on the transformed structured data.

Structured data in some embodiments can be compatible with a format or a programming language e.g. Structured Query Language SQL with which many users are familiar and that is extensively developed. Structured data can include data residing in relational databases which can often be characterized by tables of rows and columns. Data stored within relational databases can be easily located accessed and manipulated according to a user s needs. For example the data within relational databases can be analyzed using a variety of tools including Excel Crystal Reports etc. In order to make use of the properties of relational databases e.g. to be able to manipulate data easily row and column specifications need to be designed up front and the data to be inserted needs to fit into the specification for relational databases.

As search engines can collect index monitor and analyze vast amounts of unstructured data some embodiments can facilitate user manipulation of the data by transforming the unstructured data into a format with which users are more familiar and performing the user query on the transformed data. Transforming unstructured data into structured data can enable a wide variety of functions available in the format to be performed on the transformed data.

In some embodiments in order to process a user query involving unstructured data the user query is sent to the server side where much of the processing is done. For example computer system can retrieve unstructured data and perform the data transformation from unstructured to structured when a user query is received from user device . While computer system can perform much of the data transformation and processing on the server side in some embodiments user device can be part of computer system where the data transformation and processing performed on the client side.

In this example a user query can be received from user device at step where the user query is associated with a structured database format. In some embodiments computer system can send a request to a database that stores the unstructured data at step in response to receiving the use query. In various embodiments system can rearrange transform use only some of the fields of the user request or add additional fields to the user request received in step to create the request sent at step . The request to database can be associated with an unstructured database format. In some embodiments the requested unstructured data can be specified by a set of parameters. For instance the user query can indicate the set of parameters for the unstructured data such as an index or a bucket in which data is dumped a time interval etc. Computer system can receive the unstructured data from database based on the set of parameters at .

In some embodiments the unstructured data received from database can include a set of data groups where each data group includes a set of field values. Computer system can transform the unstructured data into structured data in a structured relational database at step . At step computer system can perform the transformation by determining the dimensions of the structured database creating a structured database with the dimensions and populating the structured database with unstructured data. In some embodiments computer system transforms the data by determining the number of rows and columns for a relational database table. The number of rows can correspond to the number of data groups in the unstructured data.

Each field value across the set of data groups can be associated with an identifier. In some embodiments one or more field values in a data group can have an overlapping identifier with one or more field values in a separate data group. The number of columns can be identified by determining a number of unique identifiers across the set of data groups. Thus computer system can create a table using the determined number of rows and columns or the determined transformation configuration. Computer system can populate each row with the unstructured data. The entries in the relational database can be populated by the appropriate unstructured data. As described in some embodiments unstructured data can be mapped to its corresponding entry based on its associated tag.

Computer system can apply the user query to the relational database table at step to obtain a query result. Computer system can then transmit the query result to user device at . While computer system on the server side can dynamically perform the data transformation and processing in response to receiving the user query from user device computer system in some embodiments periodically e.g. every 30 seconds every 5 minutes every 12 hours retrieves unstructured data from database performs a transformation and or additional operations on the unstructured data.

As mentioned above a transformation module in some embodiments can perform a user query on data transformed from unstructured data. In some embodiments the transformation module can determine a transformation configuration for unstructured data in response to a user query. The transformation module can then transform then unstructured data into structured data. In some embodiments the transformation module can perform a set of operations on the transformed structured data based on the user query. As such the user is able to access and manipulate data transformed from unstructured data by specifying one or more operations in a user query.

Process can request at unstructured data based on the user query. In some embodiments a transformation module can request a set of unstructured data from an unstructured database. The user query can identify a set of parameters including a basket an index a particular time interval etc. that the user may be interested in retrieving the unstructured data. In some embodiments the transformation module can receive an argument in an SQL module for a search for unstructured data. The argument can specify an index or basket of information that includes the desired unstructured data e.g. by using a search term . In some embodiments the argument can further specify other criteria such as a time interval. In response to receiving user specification of a set of arguments the transformation module specifies a search in unstructured data format and requests for the corresponding unstructured data. Process then receives at the unstructured data.

Process can determine at a transformation configuration for the unstructured data. In some embodiments the transformation configuration specifies a table with a set of table entries i.e. a number of rows and columns that can be populated with the unstructured data. Transforming the unstructured data into data compatible with the structured format enables users to perform various function calls and operations to manipulate the data using a format compatible with the structured data.

Process can transform at the unstructured data into structured data. The transformation module can convert the unstructured data into structured data using the transformation configuration. In some embodiments the transformation configuration specifies a table a list or any other data store that is compatible with a structured format. The transformation module can create a table in a structured database format based on a transformation configured determined at . The transformation module can populate the table with unstructured data corresponding to the entries in the table.

Process can apply at the user query to the transformed structured data. While a transformation module part of the server can apply the user query to the transformed structured data some embodiments enable a user device to receive the transformed structured data and apply the user query locally. Process can then provide at the query results to the user.

As mentioned above a transformation module in some embodiments can determine a transformation configuration in order to transform unstructured data into structured data. In some embodiments the transformation configuration defines the structure of a data store e.g. dimensions of a structured database or table . The transformation configuration can also specify a mapping of the unstructured data into the structured database. To transform unstructured data into structured data the transformation module can identify the structure create the structure and map data in the unstructured data to the corresponding table entries. With a relational database table compatible with a structured format the user can specify one or more operations in the structured format to be performed on the structured data.

Process can determine at a second number of unique tags across the data groups. In some embodiments the second number of unique tags across the data groups corresponds to the number of columns for the table to be created. As each field value is associated with a tag the transformation module can sweep through each field value across the data groups to identify the unique tags. That is as the transformation module encounters a field value associated with a tag that has not been encountered during the sweep a counter increases. The second number of unique tags can be identified by the total number of the counter after the transformation module sweeps through all the unstructured data across the data groups.

Process can create at a table in a structured format based on the first and second numbers. As the first and second numbers represent the number of rows and columns of a table the transformation module can create the table in a structured format using the first and second numbers. Process can then populate at each entry within the table with unstructured data. The transformation module can insert null values into table entries that do not have a value corresponding to any unstructured data. When each entry within the database table is populated the transformation is complete. The server can perform further operations on the populated table based upon the user query or further user requests.

Different embodiments may determine the transformation configuration for transforming the data differently. Instead of determining the number of columns in a table by identifying a number of unique identifiers in the unstructured data some embodiments may determine the number of columns by identifying a number of data types in the set of unstructured data.

In some embodiments a user can perform a direct search for unstructured data using a user query specifying a set of parameters. Upon receiving the user query a transformation module on the server side can retrieve a set of unstructured data and convert the unstructured data from an unstructured format into a structured format. For instance the transformation module can retrieve a set of group data and reorganize the data such that the data is presented within a structured database table.

As described a server may receive the user query and retrieve the corresponding unstructured data in response thereto. In some embodiments the server can transform the unstructured data from an unstructured database format into a structured data in a structured database format. The user can specify the type of structured database and or the structured database format into which the user would like the server to transform the unstructured data in some embodiments. As such the server can transform the data accordingly.

In some embodiments a user can use a single SQL statement to call the transformation function twice from the statement. After receiving the query results including two sets of structured data the two sets of structured data can be joined to form a single set of structured data in a structured database. Some embodiments may request two sets of unstructured data from two separate searches transform the data and join the structured data in a structured database.

In the user has specified two sets of parameters for two sets of unstructured data in the arguments and of the user query. Similar to the direct search in the search parameters for each search can include an index a time frame a source type etc. shows a join of two sets of data retrieved from the unstructured database. In some embodiments the joined data is the query result that can be presented to the user. The query results can return a single structured database that includes the unstructured data from the two separate searches combined. In some embodiments the same results may be achieved using multiple user queries two of which perform individual searches and transformations and one of which joins the two sets of structured data sets. The user may specify additional user queries to perform a set of operations on the joined data structure.

In some embodiments a user can join query data from two or more tables where at least one of the tables includes data transformed from unstructured data. illustrate an example of user query that retrieves and joins unstructured data with structured data in accordance with one embodiment. In the user has specified a set of parameters for a search for unstructured data in arguments of the user query. As described above a transformation module can transform the retrieved unstructured data into structured data.

The user can specify additional user queries that can perform additional operations on the transformed data such as a join operation as shown in this example. Upon specifying a join operation using structured data language data from the table that includes the transformed data and from another table can be joined to form another structured database table with the desired data. shows the joined data in a structured database table .

In some embodiments each piece of data in the table can be associated with a data type such as a character string a data and time a binary string a numeric etc. After unstructured data is transformed into structured data a security module can sweep through the structured data and identify the data type for each piece of data. As such the security module can determine whether the data types for entries in a column correspond to each other. In some embodiments when the security module determines that there are values in a column that have different data types the security module may flag the transformed data. A user can then verify whether the unstructured data was transformed into structured data appropriately. This ensures that the user queries performed on the transformed structured data would likely be accurate.

In certain embodiments the methods and systems are implemented in a multi tenant database system or service. As used herein the term multi tenant database system refers to those systems in which various elements of hardware and software of the database system may be shared by one or more customers. For example a given application server e g running an application process may simultaneously process requests for a great number of customers and a given database table may store rows for a potentially much greater number of customers. As used herein the terms query or query plan refer to a set of steps used to access information in a database system.

Environment is an environment in which an on demand database service exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which is system .

An on demand database service such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database services may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly on demand database service and system will be used interchangeably herein. A database image may include one or more database objects. A relational database management system RDBMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level profile type may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level also called authorization.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it may be understood that the networks that the present invention might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user systems and to store to and retrieve from a database system related data objects and webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it may be understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system which may include an Intel Pentium processor or the like and or multiple processor units. A computer program product embodiment includes a machine readable storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system to intercommunicate and to process webpages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for implementing embodiments of the present invention can be implemented in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to one embodiment each system is configured to provide webpages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It may also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system may be any combination of one or more processors. Memory system may be any combination of one or more memory devices short term and or long term memory. Input system may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface similar to network of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage area user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language embodiments is discussed in commonly owned U.S. Pat. No. 7 730 478 entitled METHOD AND SYSTEM FOR ALLOWING ACCESS TO DEVELOPED APPLICATIONS VIA A MULTI TENANT ON DEMAND DATABASE SERVICE issued Jun. 1 2010 to Craig Weissman and hereby incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes which manages retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server might be coupled via a direct network link and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS may have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects according to the present invention. It may be understood that table and object type may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category type defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead Opportunity data and other object types each containing predefined fields. It may be understood that the word entity may also be used interchangeably herein with object and table when entity or object is referring to a collection of objects or entities of a particular type.

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. U.S. Pat. No. 7 779 039 entitled CUSTOM ENTITIES AND FIELDS IN A MULTI TENANT DATABASE SYSTEM issued Aug. 17 2010 to Craig Weissman and hereby incorporated herein by reference includes discussion on systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain embodiments for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

While the invention has been described by way of example and in terms of the specific embodiments it is to be understood that the invention is not limited to the disclosed embodiments. To the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements.

