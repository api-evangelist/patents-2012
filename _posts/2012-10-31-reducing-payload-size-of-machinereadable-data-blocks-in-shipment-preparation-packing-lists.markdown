---

title: Reducing payload size of machine-readable data blocks in shipment preparation packing lists
abstract: Example embodiments provide a Shipment Preparation System (“SPS”), which facilitates the preparation of shipments, such as by producing shipping labels. In one embodiment, the SPS is configured to receive shipment preparation information from a bar code or other machine-readable data block in a packing list. The shipment preparation information identifies a uniform resource identifier (“URI”) that identifies a code module that is remote from the SPS. The SPS determines the URI based on the shipment preparation information, such as by performing a local lookup or requesting the URI from a URI shortening service. The SPS then uses the URI to communicate with the code module in order to obtain information for the preparation of the shipment (e.g., obtaining a destination shipping address) and/or for transmission of information about the preparation of the shipment (e.g., posting an indication that a shipment is ready for pick up).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08812409&OS=08812409&RS=08812409
owner: Z-Firm, LLC
number: 08812409
owner_city: Seattle
owner_country: US
publication_date: 20121031
---
The present disclosure relates to methods systems and techniques for smart packing lists and in particular to methods and systems for reducing the payload size of machine readable data blocks such as bar codes that are located in packing lists and that are configured to initiate or otherwise cause preparation of an item shipment.

A number of approaches exist for performing operations related to shipment preparation such as printing shipping labels using a computer. In one approach a shipping label is prepared and printed using a stand alone application executing on a shipper s computing system. Such client side applications may include document preparation applications such as word processors or special purpose shipping label applications. Using a word processor to prepare shipping labels may be an error prone process as relevant information e.g. each destination shipping address may need to be entered manually. In addition the word processor may not be configured or otherwise capable of preparing bar codes or other machine readable indicia required or preferred by some carrier services.

Special purpose shipping label applications also suffer from a number of drawbacks. In particular they are typically limited in their ability to communicate over a network to obtain information relevant to a shipping label e.g. a recipient address or to inform other computing systems about a shipping label that has been printed e.g. for tracking purposes . Furthermore even if a stand alone shipping label application has network capabilities information is exchanged in a potentially non uniform manner between shipping label applications and remote computing systems. In such cases the developers of shipping label applications may need to implement multiple diverse mechanisms for communicating with different remote computing systems such as those provided by different shipping carriers for tracking shipments. Further some remote computing systems may be unable or unwilling to grant or support access by a special purpose shipping label application e.g. based on security concerns technical considerations etc. resulting in reduced functionality for the special purpose shipping label application.

In other approaches Web based shipping label applications have been used. Such applications allow a user to utilize a Web browser to prepare and print shipping labels. Web based shipping label applications may not be able to readily or conveniently access information stored in locations other than those that are accessible to the Web server that provides the shipping label application e.g. the client machine computing systems operated by third parties etc. . For example because the shipping label application is a server side application it may not be able to interact with software e.g. database systems address books etc. and or hardware e.g. printers disks etc. resident on the client machine on the premises of the client machine or on Internet or intranet connected systems. Such restrictions may result in reduced functionality for the shipping label application such as poor integration low quality shipping label output etc.

Furthermore many shipping label applications and other shipping systems are tightly coupled to one or more other systems. For example some shipping label applications are tightly coupled to a particular carrier such that they can generate labels and perform other operations that are tailored for that particular carrier but not for other carriers. In other cases a shipping system may be tightly coupled to a particular e commerce platform such that the shipping system can be used to process orders received via that particular e commerce platform but not other sources.

Embodiments described herein provide enhanced computer and network based methods techniques and systems for preparing item shipments such as by producing shipping labels. Example embodiments provide a Shipment Management System SMS which may interact with one or more Shipment Preparation Systems SPS in order to enable users to efficiently prepare item shipments by producing shipping labels producing pick lists recording and or transmitting information about shipments or the like. An item shipment i.e. a shipment includes one or more activities related to the transport of an item from one location to another. Such activities may include obtaining and or providing information about a shipment e.g. a destination shipping address a parcel weight and or size a tracking number etc. outputting a shipping label for the shipment e.g. an address label postage indicia etc. delivery and or receipt of the shipment etc. Items may include any objects that may be transported by a shipping carrier network e.g. the U.S. Postal Service Federal Express a shipping agency etc. such as goods e.g. items purchased by customers packages communications e.g. letters documents magazines flyers etc. etc. Preparing an item shipment includes any item shipment tasks or activities that are performed prior to the dispatch of the shipment for example prior to tendering the shipment to a carrier. For example preparing an item shipment may include preparing a packing list preparing a pick list producing a shipping label selecting shipment items packaging items affixing one or more labels to a package and the like.

In some embodiments a packing list having a machine readable data block such as a bar code or barcode is used to facilitate preparation of item shipments i.e. shipment preparation . A packing list may be any document e.g. electronic hard copy etc. packing material e.g. box mailer envelop wrapper or other object that in some way identifies and or describes a particular item shipment such as by including or otherwise identifying source and destination address details items for the shipment shipment preferences or the like. In some embodiments the machine readable data block in the packing list contains shipment preparation information that is configured to cause an SPS to perform various actions related to shipment preparation such as label printing.

In some embodiments the machine readable data block identifies one or more uniform resource identifiers URIs or other network identifiers that are used by the SPS to communicate with one or more remote code modules such as the SMS to obtain information for the preparation of a shipment e.g. a destination shipping address to use for a label items in the shipment and or to transmit information about the shipment e.g. a parcel weight a tracking number . Note that the packing list need not identify itself with any particular name or title e.g. Packing List . Nor does the packing list need to contain any human readable information. In some cases the packing list may include only the machine readable data block.

Some embodiments employ one or more techniques to reduce the payload size of a machine readable data block included in a packing list. In one approach rather than incorporating URIs that directly identify a remote code module that cooperates in the preparation of the shipment e.g. by providing a shipping address a shortened identifier is instead included in the machine readable data block. The shortened identifier may be a name or key e.g. SHIPURL URL U1 that is used to look up a corresponding associated URI in a settings file or data structure that is resident on the SPS. In other embodiments the shortened identifier may itself be a URI or portion thereof that is used to access a directory service URI shortening translation indirection or redirection service or other module that is configured to provide the complete URI that is used to access the SMS or other remote code module that provides shipment information.

Reducing payload size will typically result in a smaller machine readable data block that encodes the payload. In the bar code context this means that bar codes imprinted or displayed on packing lists or other media e.g. a display device will typically consume less surface area of a printed page thereby leaving more space to display other information such as human readable text additional bar codes or the like. By consuming less surface area costs may be reduced through reduced paper and or printing costs. When the machine readable data block is stored in an RFID tag shipping costs may be reduced through the use of tags that have smaller memories.

The example SMS includes a packing list generation engine an address management engine and a shipment information data engine repository . The components of the SMS provide various functions and or services related to the management of shipments such as supporting e.g. facilitating the preparation of shipments by generating and providing packing lists that include bar codes or other machine readable data blocks that include shipment preparation information that can be used to produce shipping labels or perform other tasks associated with the preparation of shipments. In one embodiment the packing list generation engine manages the generation and provisioning e.g. transmitting forwarding sending etc. of packing lists that may be used to initiate cause invoke or otherwise perform shipments. The address management engine provides destination shipping addresses and or other information regarding shipments in response to requests received from the SPS and or other systems components. The shipment information data engine records e.g. stores tracks etc. information about shipments such as when a label was printed when a shipment was sent tracking number s and or other details related to a particular shipment. The shipment information data engine may provide additional services related to shipments such as providing tracking capabilities to third parties e.g. item recipients .

Note that although the packing list generation engine the address management engine and the shipment information data engine are illustrated as part of the shipment management system no restrictions are placed on the location and or control of components . In particular in one embodiment the shipment management system may be deployed as part of a single Web server having software modules e.g. CGI modules servlets server side code modules plug ins etc. corresponding to each of components . In another embodiment components may be operated under the control of different entities and or on different computing systems. For example the packing list generation engine may be part of a first Web site that provides an order management facility the address management engine may be an electronic address book situated on the client computing system and the shipment information data engine may be part of a second Web site that provides an interface to one or more shipping carrier services e.g. United Parcel Service U.S. Postal Service etc. . In some embodiments all or some of the SMS is operated by a shipping carrier whilst the SPS is operated by an entity e.g. a merchant that is not the shipping carrier and that utilizes the shipping carrier to transport shipments to their destinations. In some embodiments all or some of the SMS are operated by some third party such as an ecommerce platform e.g. eBay Amazon.com Volusion or the SMS is an ecommerce system operated by or on behalf of the user . In addition different and or additional components may be provided as part of an SMS .

In the illustrated example a user operates the client computing system to prepare one or more shipments. In particular the user receives a packing list that has been generated by the packing list generation engine . Receiving the packing list may include receiving a printed e.g. hard copy version of the packing list and or receiving an electronic version e.g. a PDF file Word document etc. of the packing list. The packing list includes a machine readable data block such as a bar code that contains includes shipment preparation information including a URI or other identifier that identifies a code module or other network resource e.g. a file that is remote and separate from the client computing system and the SPS . The user or an automated system e.g. a parcel conveyance system or conveyor belt operates the scanner to obtain the shipment preparation information including the URI by reading the bar code in the packing list . When the packing list has been obtained in electronic form the user may in some embodiments simply point the scanner at a display or device e.g. tablet computer smart phone etc. that is used to present or otherwise display the packing list . The URI is then obtained from the received shipment preparation information by the SPS .

Upon receiving the URI the SPS uses the URI to access the address management engine and obtain a destination shipping address associated with the URI. Then the SPS generates a shipping label that includes the destination shipping address and prints the shipping label via the printer . The SPS also uses the URI or another URI that is included in or identified by the shipment preparation information to post information about the preparation of the order to the shipment information data engine . For example upon printing or otherwise outputting the shipping label the SPS posts information about the printed label to the shipment information data engine repository . Posting information to the shipment information data engine repository may include providing sending transmitting forwarding information using any protocol or other communication mechanism such as HTTP HTTPS FTP SMTP SOAP etc. The posted information may include for example the fact that the label has been printed along with other details related to the shipment such as package weight tracking numbers s estimated transit time temperature or other environmental measurements at time of shipment etc. Other users e.g. shipment recipients of the shipment management system or via other permitted systems may then access information about the status of the shipment.

In the packing list has a bar code that identifies shipment preparation information. Identifying shipment preparation information may include identifying containing or including a URI or other identifier of a network resource that is capable of providing the shipment preparation information such as addresses or post back locations as discussed with respect to . However identifying shipment preparation information may also include containing the shipment preparation information directly such as by literally including indications of a destination shipping address order items or the like in a bar code or other machine readable data block. In the present example the bar code of the packing list includes all information that is needed by the SPS to generate and print a shipping label. Accordingly in the illustrated embodiment there is no need for an address management engine illustrated as part of the SMS because any shipping label generation information needed by the SPS can be obtained directly from the bar code in the packing list . Thus the SPS can output a shipping label that includes only information received from the bar code in the packing list and without communicating with a remote code module to obtain information for the shipping label.

In addition the bar code of the packing list further identifies a URI e.g. a post back URI or other identifier that can be used to transmit information about the preparation of the shipment as discussed with respect to . Identifying a URI may include incorporating the URI directly or identifying some other component e.g. file program module system that can provide the URI. Having obtained the URI the SPS uses the URI to transmit information about the preparation of the shipment such as a package weight tracking code or the like to the shipment information data engine .

In the packing list has a bar code that includes shipment information that identifies a URI that may be used by the SPS to communicate information with the SMS . URIs may be identified in various ways. As one example a URI may be identified literally and directly such as by including a fully qualified URI in the bar code. As noted such URIs may become lengthy and thus consume a considerable amount of the available space in the bar code. To reduce the payload size the URI may instead be identified indirectly as discussed below.

In the illustrated example of the bar code in the packing list may identify the URI by including a network identifier of a URI management engine . The network identifier of the URI management engine may itself be a URI or some portion thereof such as an address host name or the like. The SPS upon receiving the network identifier uses it to access the URI management engine to obtain the identified URI. The identified URI is then used to obtain information related to the preparation of the shipment e.g. a destination shipping address from the address management engine and or to provide post back information to the shipment information data engine . In some embodiments the SPS may request and receive multiple URIs from the URI management engine such as a first URI that identifies the address management engine and a second URI that identifies the shipment information data engine .

A URI may be identified in other or alternative ways. For example the bar code in the packing list may identify the URI by including a name or other identifier that is used by the SPS to access a key value store to obtain a fully qualified URI. The key value store or other representation of values of properties may be a program setting or preferences data structure that is based upon a local or network accessible file database data repository persistent or not persistent e.g. volatile data storage structure or other store. Approaches to URI identification are discussed further with respect to below.

In the URI management engine is shown as part of the SMS . However in other embodiments the URI management engine may be provided by some other possibly third party system. For example a publicly accessible third party URI shortening indirection service may be used such as tinyurl.com bit.ly or the like.

More specifically in block a packing list for an order is received the packing list including a machine readable data block that identifies a remote code module. An example packing list is described with reference to below. The machine readable data block may be implemented by in or as a one or two dimensional bar code e.g. 2D code matrix code an RFID Radio Frequency Identification tag or other machine readable data carrier. The remote code module may be identified in various ways including via a URI or portion thereof network address hostname or the like or some indirect identification thereof that is encoded upon or within the machine readable data block. The identified code module provides information for the preparation of the shipment and or receives information about the preparation of the shipment. Example techniques for identifying a remote code module are described with reference to below.

In block the SPS reads the machine readable data block from the packing list. Reading the machine readable data block may include scanning a bar code e.g. with an optical scanner interrogating an RFID tag e.g. with an RFID interrogator or the like. Data contained in the machine readable data block is then transmitted to and received by the SPS where it is utilized to facilitate preparation of the shipment as described next.

In block the SPS communicates with a remote code module e.g. the remote code module identified by the machine readable data block to obtain information for the preparation of the shipment of the order. The obtained information may include an indication of at least one of a destination shipping address an order number information about one or more items in the order including at least one of a quantity a part number a stock keeping unit a color a size a weight and or a price a preferred shipping method a package type a package size and or a shipping carrier. As will be described further below in some embodiments the SPS may obtain the information without reference to a remote code module such as when the machine readable data block includes all of the necessary shipment information.

In block the SPS initiates the shipment based on the obtained information such as by initiating output of a shipping label. An example shipping label is described with reference to below. Initiating output of a shipping label may include printing e.g. to a laser printer thermal printer label printer presenting e.g. displaying communicating e.g. sending transmitting etc. or otherwise forwarding transmitting the shipping label. Initiating output of the label may also include generating a shipping label such as by creating updating or otherwise managing data structures and or indicators of information about a particular shipment such as may be stored by a data repository such as a database or file system.

In some embodiments generating the shipping label may include determining a destination shipping address such as by direct reference to information contained within the machine readable data block e.g. when the machine readable data block encodes the address . In other embodiments the destination shipping address may be determined by interacting with an identified code module e.g. the address management engine of to obtain the destination shipping address or by any other technique for discovering an associated destination shipping address. For example the shipment preparation information may include a URI that identifies a Web server configured to provide a destination shipping address in response to an order number or other identifier. Or the shipment preparation information may reference a local or remote network accessible file e.g. on a file server or network share that includes the destination shipping address and or other information. Multiple levels of indirection are contemplated. For example the shipment preparation information may identify a code module that is configured to provide a URI that references a code module configured to provide a destination shipping address.

In other embodiments initiating the shipment may include other activities. For example preparing the shipment may include causing a person to prepare a package by generating and transmitting a pick list or other instructions to the person that specify one or more items of the order to be retrieved or otherwise selected for packaging. In other embodiments preparing the shipment may include providing an indication of packaging materials to be used.

In block the SPS communicates with a remote code module to transmit information about the preparation of the shipment of the order. The remote code module may be a shipment information data engine provided by a remote Web server as described with reference to . Note that the code module referenced by block could be different than the code module referenced by block . Communicating with the remote code module may include transmitting information about a produced shipping label such as by notifying the code module that the shipping label has or has not been successfully produced. For example when a printer communicatively coupled to the SPS successfully prints the shipping label the SPS may notify the code module of that fact. In general information about various aspects of the shipment preparation may be transmitted including for example a tracking number or other shipment identifier a shipping method a status of a label printing operation details about a label printing operation including at least one of a printer type a printer name a printer location a media type a data and or a time a shipping carrier parcel dimensions and or weight a packaging type a shipment status including an indication of at least one of an order is ready to be processed an order has been processed the shipment being ready for pickup by the shipping carrier the shipment not being ready for pickup by the shipping carrier the shipment has been tendered to a shipping carrier a vehicle type and or an amount of space needed in a vehicle or the like.

In some embodiments communicating with the remote code module e.g. in blocks and or may include determining or otherwise identifying the code module such as by direct reference to the shipment information data engine e.g. when the machine readable data block encodes the address . In other embodiments the remote code module may be determined by interacting with a code module file or data that is configured to provide the location identification of the code module e.g. the shipment information data engine of or by any other technique for discovering a code module. For example the machine readable data block may include a URI that identifies a Web server configured to provide a file that contains information that can be used to obtain the location of the remote code module. As another example the machine readable data block may include a URI that identifies a directory or indirection service that is configured to provide a URI or other identifier of the shipment information data engine or other communication partner. In other embodiments the machine readable data block includes a name key or other identifier that is used to determine an identifier of the code module based on a settings or preferences file or data structure managed and or accessed by the SPS.

After block the process ends or optionally returns to block such as when the SPS is operating in a batch mode where it processes multiple packing lists or multiple machine readable data blocks contained within one packing list.

In the illustrated example the order management application displays a table of recent orders that have been placed by various customers. The table is organized into rows that each represent one order. Each row includes fields that each contain information about one aspect of the associated order. In particular each order includes an order number an order status a recipient and one or more actions . The actions listed in field may be presented as user selectable controls e.g. links buttons etc. such that a user may invoke associated functionality to perform the action. Field indicates that in other embodiments orders may have a greater or lesser number of associated fields.

For example fields columns of order row indicate that the illustrated order has an order number of 00298 that the order has been purchased and is to be shipped to Mr. Buyer and that the order may be shipped by selecting e.g. clicking on a link named ship in field . In the illustrated example the user selects the link and in response the Web browser presents a packing list as described with respect to next.

The post back URI is used by the SPS to provide information about the shipment preparation to a code module such as the shipment information data engine here as www.def.com postinfo that is configured to track or otherwise record information about shipments that have been prepared by the SPS. In the illustrated example the URI includes the same order identifier 00298 described with respect to URI . The SPS may utilize the URI to provide for example via HTTP information about shipment preparation to the shipment information data engine. For example it may provide an indication that the shipment corresponding to order 00298 has been shipped an indication that a shipping label for the order has been produced and the like.

In the second example shipment preparation information block includes as shipment preparation information only a single URI that may be used by the SPS to obtain further shipment preparation information such as shipment information and or post back information. For example the SPS may access the code module identified by the URI to obtain a shipment information URI and a post back URI as described above. In another embodiment the SPS may access the code module identified by the URI to directly obtain shipment information e.g. order details addresses and or to transmit information about preparation of the shipment.

In some embodiments post back information may include indications such as string parameters of one or more data items that are to be provided by the SPS to the shipment information data engine. In the illustrated example of the post back URI includes an indication that the SPS is to provide a tracking number associated with the shipment and or shipping label. In this example data items that are to be provided by the SPS are specified as field names surrounded by characters e.g. TRACKING NUM . When the SPS processes the URI prior to interacting with the shipment information data engine the SPS replaces indicated fields with corresponding data items that are associated with the shipment. Additional data items that may be specified are described with reference to Table 3 below.

Given a settings file such as the above the SPS may use the names GURI and PURI to determine the corresponding URIs by performing a search lookup or similar operation. The SPS may then concatenate the determined URIs with arguments parameters or other data determined from the identifiers and or . In particular the SPS may concatenate the GURI http www.abc.com getshipinfo with the string order num 00298 to generate a complete fully qualified URI of http www.abc.com getshipinfo order num 00298. The fully qualified URI is then used to obtain shipment information such as a destination shipping address or the like. A similar technique may be employed to generate a complete fully qualified URI based on the PURI. Note that other embodiments may use other indicators to identify or otherwise distinguish local preferences settings names. For example rather than using the character to denote a settings names other embodiments may use   or similar.

In the fifth example shipment preparation information block includes a URI . The URI identifies a publicly accessible third party URI shortening service. A typical URI shortening service maps a first URI to a second generally shorter URI or other identifier . In this example a URI e.g. http verylongexampleuri.com getinfo order num 00298 that identifies the address management engine may be mapped by the bit.ly service to the identifier e.g. name or key PU0AM2 yielding the short URI of http bit.ly PU0AM2. The SPS may then make an HTTP request e.g. GET PU0AM2 to the bit.ly service which in turn will look up the original URI based on the identifier PU0AM2 and redirect the request to the address management engine or similar component. Redirection may be performed in various ways such as via an HTTP redirect in which the redirected URI is returned to the client e.g. SPS or user agent for further processing. In other embodiments the service identified by URI may instead operate as a proxy by forwarding a request to the address management engine and then receiving and returning the response if any to the SPS.

In some embodiments the Domain Name System DNS and or directory services e.g. LDAP implementations may be used to facilitate the shortening of network resource identifiers. In some cases a shipment information block in a bar code may include a machine name or network address that is mapped by a DNS server to a more complete identifier. For example the shipment information block may include the identifier 2233.acme.com. When the SPS makes a request using 2233.acme.com as a network address a local DNS server may convert that address into orderprocessing.acmeroofing.com orderprocessing.acmeroofing.com accesstoken abcd9876 zyxw 0987 or similar identifier that can be used by the SPS to obtain or post shipment information. Other types of directory services such as LDAP based systems e.g. ActiveDirectory Apache Directory Server Open Directory OpenLDAP may also or instead be employed in a similar manner to facilitate redirection and or indirection of network identifiers.

Other variations besides those illustrated in are contemplated. For example some shipment preparation information blocks may include information that is sufficient for the SPS to perform all of its functions without interacting with any remote code modules. In such an embodiment the SPS operates in local mode and does not communicate with a remote code module to obtain information for the preparation of the shipment or to transmit information about the preparation of the shipment. In another embodiment the information that is here described as being part of a single shipment preparation information block and or described as being contained in a single machine readable data block may be disaggregated over two or more blocks. For example a first bar code may include shipment information e.g. destination shipping address shipment information URI while a second bar code may include post back information e.g. an identifier of a post back URI . As another example a single packing list may include multiple bar codes that include shipment information for distinct orders and a single bar code that includes post back information that is to be used to transmit post back information for each of the distinct orders described by the multiple bar codes.

In some embodiments some or all of the information contained within shipment preparation information block or the machine readable data block generally may be encrypted. Because information included within or accessed via a shipment preparation information block may be private personal or otherwise sensitive the information may be encrypted to restrict access to authorized persons or systems such as an SPS that is affiliated the organization or entity that operates a corresponding SMS such as only the SPS computing systems in a shipping receiving warehouse of a mail order company. Various encryption techniques may be employed including symmetric e.g. a secret key is shared between the SMS and SPS and or asymmetric e.g. information is encrypted by the SMS using a public key of the SPS resulting in encrypted data that can only be decrypted using a corresponding private key of the SPS . In another embodiment shipment preparation information may be encrypted using a one time or limited time key such as a key that is unique to a particular shipment information preparation block unique to a particular packing list or the like.

The SPS includes user selectable controls e.g. text fields drop down menus checkboxes etc. for specifying various information related to a particular shipment such as sender information recipient information and package information . The SPS may automatically populate at least some of the controls based on shipment preparation information received from a bar code or other machine readable data block. In one example embodiment based on a shipment information URI e.g. URI received by the SPS as part of shipment preparation information e.g. shipment preparation information the SPS requests a destination shipping address from an address management engine. Upon receiving the destination shipping address the SPS then populates e.g. fills in one or more of the fields of the recipient information . The SPS may also automatically populate other fields such as those in the sender information such as based on previously recorded user preferences and or settings. In the illustrated embodiment the user of the SPS may provide additional information about the shipment such as parcel information e.g. shipping weight value etc. . In other embodiments the SPS has no user interface at all and runs automatically in response to the receipt of the shipment information.

The SPS also includes a ship control that may be selected by a user to initiate the output of a shipping label corresponding to the specified shipment. In some embodiments the output of the shipping label may be delayed until a later time such as the end of a workday so that multiple shipping labels may be output in a batch manner. After the user prints the label using the ship control the SPS may transmit information about the label or the shipment e.g. package weight tracking number s environmental aspects of the shipping area an indication that the shipment is ready for pickup to a remote code module based on shipment preparation information received from a machine readable data block in a packing list.

In the illustrated embodiment the order management application has been displayed in an updated state for example in response to a user request e.g. a page reload to a Web server that provides the order management application . However in other embodiments the Web server may automatically update or refresh the order management application for example in response to a posting of information about the shipment received from the SPS.

In other embodiments a flow that is different from the one described with respect to may be employed. For example in one embodiment at least some of the functions of the order management application of may be integrated with those of the shipment preparation system of . In particular when the user selects the link the Web browser may present both the packing list of and the shipping label of either as a single document page or as multiple distinct documents pages. The user can then print both the packing list and the shipping label possibly in a single operation without further interacting with an interactive user interface such as the one described with respect to . When the user scans the bar code of the packing list a post back or other action may automatically be performed by a client code module resident on the user s system. In particular the SPS may have no interface at all such that the SPS executes as a background task daemon driver service or other hidden system component that transparently performs post backs and other actions in response to shipment preparation information obtained from a scanner or other input device. In other embodiments the user may first be presented with the packing list of . Then when the user scans the bar code of the packing list the Web browser is automatically directed e.g. by an SPS operating as a daemon service background task or the like that receives the shipment preparation information from the scanner to obtain a Web page that includes the shipping label of to access a Web based application configured to prepare the shipping label of or the like.

Although certain terms are used primarily herein other terms could be used interchangeably to yield equivalent embodiments and examples. For example it is well known that equivalent terms in the shipping field and in other similar fields could be substituted for many of the terms used here. Specifically the term shipping label can be used interchangeably with ship label address label mailing label etc. Likewise the term label can be used interchangeably with indicia marker tag etc. Furthermore the term Uniform Resource Identifier can be used interchangeably with Uniform Resource Locator. In addition terms may have alternate spellings which may or may not be explicitly mentioned and all such variations of terms are intended to be included.

Example embodiments described herein provide applications tools data structures and other support to implement a shipment preparation system to be used for producing shipping labels and or performing other shipment preparation activities. Other embodiments of the described techniques may be used for other purposes. For example many applications could incorporate the technique of using a URI to cause a Web browser or other code module to initiate an action e.g. loading of a file output of a graphic transmission of a data item etc. and perform a corresponding post back of information about performance of the action. Some example applications and or uses include link tracking report generation address book management contact management etc. In general these techniques are applicable to any application that could benefit from performing a designated action followed by a post back of information about the performed action.

In the following description numerous specific details are set forth such as data formats and code sequences etc. in order to provide a thorough understanding of the described techniques. The embodiments described also can be practiced without some of the specific details described herein or with other specific details such as changes with respect to the ordering of the code flow different code flows etc. Thus the scope of the techniques and or functions described are not limited by the particular order selection or decomposition of steps blocks described with reference to any particular routine.

The computing system may comprise one or more server and or client computing systems and may span distributed locations. In addition each block shown may represent one or more such blocks as appropriate to a specific embodiment or may be combined with other blocks. Moreover the various blocks of the SPS may physically reside on one or more machines which use standard e.g. TCP IP or proprietary interprocess communication mechanisms to communicate with each other.

In the embodiment shown computer system comprises a computer memory memory a display one or more Central Processing Units CPU Input Output devices e.g. bar code scanner RFID interrogator keyboard mouse CRT or LCD display etc. other computer readable media and network connections . The SPS is shown residing in memory . In other embodiments some portion of the contents some of or all of the components of the SPS may be stored on or transmitted over the other computer readable media . The components of the SPS preferably execute on one or more CPUs and manage the production of shipping labels as described herein. Other code or programs e.g. a Web browser and potentially other data repositories such as data repository also reside in the memory and preferably execute on one or more CPUs . Of note one or more of the components in may not be present in any specific implementation. For example some embodiments embedded in other software many not provide means for user input or display.

In a typical embodiment the SPS includes a label generation engine a user interface engine a shipping preparation system application program interface SPS API and a shipping label production data repository . Other and or different modules may be implemented. In addition the SPS may interact via a network with a shipment management system commerce computing systems e.g. online marketplaces shipping carrier systems etc. and an accessible scanner . The scanner may communicate via the network e.g. wired or wireless or it may communicate directly to the client computing system e.g. wired or wireless . In other embodiments the scanner may instead by another type of input device e.g. RFID interrogator or module e.g. software data integrator consumer operable to read or otherwise consume shipment preparation information from a machine readable data block. Also the data repository may be provided external to the SPS as well for example via a Web server or other access provider not shown executing on one of the other computing systems accessible over the network . As noted in other embodiments the SPS may be a Web based application in which the user interface is displayed in a Web browser or similar rendering component while the components of the SPS are hosted on one or more computers at local or remote locations. In such an embodiment a user may scan or otherwise read a machine readable data block into a client computing system that then transmits the shipment preparation information to be processed by one or more a server side shipment preparation components e.g. a label generation component . In other embodiments the label generation engine may execute on the client computing system or on one or more servers. The label generation engine may be an application that has a user interface or it may be accessible via a non visual API made available via HTTP or some other protocol.

The label generation engine manages the generation of shipping labels. Generating shipping labels may include obtaining information about a particular shipment e.g. a destination shipping address and creating and or managing data structures or other information used to facilitate track or otherwise represent the shipment. Generating shipping labels may also include determining and or generating a representation of a shipping label e.g. a bit map a printer definition language file an image file etc. and providing such a representation to some output device e.g. a printer a network interface etc. . The label generation engine may further provide information about generated shipping labels to other modules such as the shipment management system .

The user interface engine provides a view and a controller that facilitates user interaction with the SPS . The user interface engine may for example provide an interactive graphical user interface such as the one described with reference to . In other embodiments such as when the SPS is deployed as a server based application the user interface engine may provide a Web interface that may be accessed by remote client computing systems executing Web browsers.

The SPS API provides programmatic access to one or more functions of the SPS . For example the SPS API may provide an interface that provides one or more functions that may be called by one of the other programs in order to produce a shipping label in an automated or semi automated manner.

In addition the API may be in at least some embodiments invoked or otherwise accessed via remote entities such as the shipment management system the commerce computing system and or the scanner to access various functions of the SPS . For example the scanner may transmit shipment preparation information to the SPS via the API . In addition the shipment management system may transmit a packing list to the SPS via the API . In general the API may enable local or remote computers and or modules to interact with the SPS using SOAP HTTP REST or some other protocol.

The data repository records information about shipments made via the SPS as well as information related to the operation of the SPS generally. Such information may include shipping records user preferences application settings e.g. shipper return address default carrier etc. account information e.g. shipper accounts with one or more carriers etc.

The SPS may include other components that facilitate the preparation of a shipment. For example the SPS may include a component that generates and prints pick lists that include a list of items that are to be selected by a person and placed in a particular package. Also the SPS may include fewer components than those illustrated. For example the SPS may be a background task daemon driver service or other hidden system component that responds to shipment preparation information received from the scanner by automatically performing various shipment preparation activities such as obtaining generating and or printing a shipping label obtaining generating and or printing a pick list communicating to obtain information for preparation of a shipment communicating to transmit information about preparation of a shipment and the like. In such an embodiment the SPS may not include all or some of one or more of the illustrated components such as the user interface engine e.g. when any user interface capabilities are presented via a Web browser the label generation engine e.g. when the label is generated by a remote server etc.

In an example embodiment components modules of the SPS are implemented using standard programming techniques. For example the SPS may be implemented as a native executable running on the CPU along with one or more static or dynamic libraries. In other embodiments the SPS may be implemented as instructions processed by virtual machine that executes as one of the other programs . In general a range of programming languages known in the art may be employed for implementing such example embodiments including representative implementations of various programming language paradigms including but not limited to object oriented e.g. Java C C Smalltalk etc. functional e.g. ML Lisp Scheme etc. procedural e.g. C Pascal Ada Modula etc. scripting e.g. Perl Ruby Python JavaScript VBScript etc. declarative e.g. SQL Prolog etc. etc.

The embodiments described above may also use well known or proprietary synchronous or asynchronous client sever computing techniques. However the various components may be implemented using more monolithic programming techniques as well for example as an executable running on a single CPU computer system or alternately decomposed using a variety of structuring techniques known in the art including but not limited to multiprogramming multithreading client server or peer to peer running on one or more computer systems each having one or more CPUs. Some embodiments are illustrated as executing concurrently and asynchronously and communicating using message passing techniques. Equivalent synchronous embodiments are also supported by an SPS implementation. Also other steps blocks could be implemented for each routine and in different orders and in different routines yet still achieve the functions of the SPS.

In addition programming interfaces to the data stored as part of the SPS e.g. in the data repository can be available by standard means such as through C C C and Java APIs libraries for accessing files databases or other data repositories through scripting languages such as XML or through Web servers FTP servers or other types of servers providing access to stored data. The data repository may be implemented as one or more database systems file systems or any other method known in the art for storing such information or any combination of the above including implementation using distributed computing techniques.

Also the example SPS may be implemented in a distributed environment comprising multiple even heterogeneous computer systems and networks. For example in one embodiment the label generation engine the user interface engine the API and the data repository are all located in physically different computer systems. In another embodiment various modules of the SPS are hosted each on a separate server machine and may be remotely located from the tables which are stored in the SPS data repository . Also one or more of the modules may themselves be distributed pooled or otherwise grouped such as for load balancing reliability or security reasons. Different configurations and locations of programs and data are contemplated for use with techniques of described herein. A variety of distributed computing techniques are appropriate for implementing the components of the illustrated embodiments in a distributed manner including but not limited to TCP IP sockets RPC RMI HTTP Web Services XML RPC JAX RPC SOAP etc. . Other variations are possible. Also other functionality could be provided by each component module or existing functionality could be distributed amongst the components modules in different ways yet still achieve the functions of an SPS.

Furthermore in some embodiments some or all of the components of the SPS may be implemented or provided in other manners such as at least partially in firmware and or hardware including but not limited to one or more application specific integrated circuits ASICs standard integrated circuits controllers e.g. by executing appropriate instructions and including microcontrollers and or embedded controllers field programmable gate arrays FPGAs complex programmable logic devices CPLDs etc. Some or all of the system components and or data structures may also be stored e.g. as software instructions or structured data on a computer readable medium such as a hard disk a memory a network or a portable media article to be read by an appropriate drive or via an appropriate connection. The system components and data structures may also be transmitted via generated data signals e.g. as part of a carrier wave or other analog or digital propagated signal on a variety of computer readable transmission mediums such as media including wireless based and wired cable based mediums and may take a variety of forms e.g. as part of a single or multiplexed analog signal or as multiple discrete digital packets or frames . Such computer program products may also take other forms in other embodiments. Accordingly embodiments of this disclosure may be practiced with other computer system configurations.

More specifically at block the routine receives shipment preparation information from a bar code. In one embodiment the routine may receive the shipment preparation information by reading a bar code in a packing list with a bar code scanner or other input device. In other embodiments the routine may receive shipment preparation information from other types of machine readable data blocks including RFID tags or the like by using a suitable input device. At this point the routine may decrypt and or decompress shipment preparation information that was stored in encrypted and or compressed format in the bar code or other machine readable data block.

In block the routine determines whether a shipment information URI is identified by the received shipment preparation information and if not proceeds to block else proceeds to block . The shipment information URI may be identified in various ways including by being embedded or contained in the shipment preparation information e.g. stored in a bar code received in block or more indirectly such as via an identifier of a local file that includes the shipment information URI via a URI that identifies a code module that provides the shipment information URI or the like. Thus block may also include determining or obtaining the shipment information URI as well as possibly one or more other URIs such as a post back URI see block below . Examples and techniques for determining the shipment information URI are discussed with reference to .

In block the routine obtains a destination shipping address from the shipment preparation information. For example the destination shipping address may be embedded directly in the shipment preparation information received in block as illustrated in .

In block the routine communicates with a code module identified by the shipment information URI to obtain a destination shipping address. The code module may be for example an address management engine as described with reference to . The code module may reside in various places and execute under control of various parties. For example the code module may execute on a remote computing system such as a remote Web server executing an electronic commerce application e.g. an online store an auction Web site etc. . In other embodiments the code module may execute on the same client system that executes the routine such as a local contact manager application.

Note that the operations described with respect to blocks and need not be exclusive of one another. For example in some embodiments the routine may obtain some shipment information e.g. indications of one or more order items directly from the shipment preparation information contained in a machine readable data block and other shipment information e.g. a destination address from a code module identified by a URI. In other embodiments the routine may obtain all shipment information directly from the shipment preparation information and then confirm or verify that information by reference to a code module identified by a URI.

In block the routine initiates output of a shipping label that includes the destination shipping address. Outputting the shipping label may include generating a digital representation of the shipping label e.g. a bit map an image file etc. printing the shipping label sending or transmitting the shipping label e.g. via email recording the shipping label e.g. in a data repository etc.

In block the routine determines whether a post back URI is identified by the received shipment preparation information and if not ends else proceeds to block . The post back URI may be identified in various ways including by being embedded or contained in the shipment preparation information received in block or more indirectly as discussed with reference to block above.

In block the routine posts information about the produced shipping label to a code module identified by the post back URI. As discussed above post back URI may identify a code module such as the shipment information data engine described with reference to . In some embodiments multiple post back URIs that are used for different purposes may be identified by the shipment preparation information. For example a first post back URI may be used to provide information to one code module when the shipping label has been successfully produced and a second post back URI may be used to provide information to another code module when an error condition occurs such as when the shipping label is not successfully produced e.g. a printer error a shipping account is invalid an address cannot be verified etc. when there is some problem fulfilling the shipment e.g. one or more items are not in stock or the like.

In addition the shipment preparation information and or the post back URI may include or otherwise specify one or more fields parameters or other identifiers of data items that are to be reported to the code module such as aspects of the shipment preparation process and or the produced shipping label e.g. a tracking number a date a shipping cost etc. .

Furthermore code modules may be identified in other ways. For example the shipment preparation information may not include a URI or other identifier of a code module. Instead the identity of a shipment information and or post back code module may be determined in other ways such as implicitly based on the identity of a server that provided some other portion of the shipment preparation information such as the shipment information URI. In other embodiments the identity of a shipment information and or post back code module may be recorded as a setting or preference of the SPS itself. Such a setting may be used as a default e.g. when the shipment information does not identify a shipment information data engine or an override e.g. a shipment information data engine to use regardless of any shipment information data engine identified by the shipment preparation information .

The computing system may comprise one or more server and or client computing systems and may span distributed locations. In addition each block shown may represent one or more such blocks as appropriate to a specific embodiment or may be combined with other blocks. Moreover the various blocks of the SMS may physically reside on one or more machines which use standard e.g. TCP IP or proprietary interprocess communication mechanisms to communicate with each other.

In the embodiment shown computer system comprises a computer memory memory a display one or more Central Processing Units CPU Input Output devices e.g. keyboard mouse CRT or LCD display etc. other computer readable media and network connections . The SMS is shown residing in memory . In other embodiments some portion of the contents some of or all of the components of the SMS may be stored on or transmitted over the other computer readable media . The components of the SMS preferably execute on one or more CPUs and manage the production of shipping labels as described herein. Other code or programs and potentially other data repositories such as data repository also reside in the memory and preferably execute on one or more CPUs . Of note one or more of the components in may not be present in any specific implementation. For example some embodiments embedded in other software many not provide means for user input or display.

In a typical embodiment the SMS includes a packing list generation engine an address management engine a shipment information data engine a URI management engine a shipment management system application program interface SMS API and a shipment management system data repository . Other and or different modules may be implemented.

In addition the SMS may interact via a network with a client computing system commerce computing systems and other computing systems . The client computing system may for example execute an SPS as described with reference to . The SMS may interact with an SPS on the client computing system via a Web server executing as one of the other programs . Also the SMS data repository may be provided external to the SMS as well for example via a Web server or other access provider not shown executing on one of the other computing systems accessible over the network .

The packing list generation engine the address management engine the shipment information data engine and the URI management engine respectively correspond to the packing list generation engine the address management engine the shipment information data engine and the URI management engine described with respect to .

The SMS API provides programmatic access to one or more functions of the SMS . For example the SMS API may provide an interface that provides one or more functions that may be called by one of the other programs e.g. a Web server in order to initiate generation and or transmission of a packing list. In this manner the API facilitates the development of third party software such as user interfaces plug ins adapters e.g. for integrating functions of the SMS into Web applications and the like. For example the API may facilitate the configuration of the SMS as a Web based shipment management system in which a user interface is displayed in a Web browser or similar rendering component while other components of the SMS are hosted on one or more computers at a local or remote location.

In addition the API may be in at least some embodiments invoked or otherwise accessed via remote entities such as the client computing system and or the commerce computing system to access various functions of the SMS . For example the client computing system executing a SPS may obtain from and or provide to the SMS information about a shipment via the API . In addition the commerce computing system may provide order information to the SMS via the API .

As discussed with reference to the SPS of the SMS may similarly be implemented in various ways and or using various known or proprietary techniques. In particular the SMS may be implemented in hardware software and or firmware. Software portions of the SMS may be implemented using one or more programming languages and associated tools e.g. compilers interpreters linkers etc. to generate code portions e.g. instruction sequences that may be processed by hardware components e.g. a CPU and or software components e.g. a virtual machine . In addition the SMS may be decomposed if at all using various techniques including client server architectures N tier architectures Web Services e.g. SOAP classes libraries archives etc.

More specifically at block the routine receives a request or information related to a shipment. The request or information may be received from for example a Web browser or an SPS. The shipment may be identified in various ways such as by an order identifier a recipient identifier an item identifier etc. In some embodiments the routine may execute one or more access control techniques at this point such as checking whether the received request or information was accompanied by one or more tokens e.g. cookie password passkey username etc. configured to enable access to the functionality provided by the routine.

In block the routine determines whether a request for a shipping URI was received and if so proceeds to block else proceeds to block . In block the routine generates and provides packing list for a shipment that corresponds to the request. Generating the packing list may include dynamically generating a packing list that includes shipment preparation information in a bar code or other machine readable data block the shipment preparation information based on various factors such as the identity of the party making the request the identity of the recipient of the item a shipment identifier the capabilities of a particular SPS etc. A generated packing list may be provided e.g. transmitted sent forwarded etc. to an SPS in order to cause the SPS to facilitate preparation of the shipment in accordance with shipment preparation information included in a bar code of the packing list. In some embodiments generated packing list may be provided to other components of the SMS such as a data repository such that the generated shipping URIs may be utilized at a later time. The routine then proceeds to block .

In block the routine determines whether a request for a destination shipping address was received and if so proceeds to block else proceeds to block . In block the routine provides a destination shipping address for the shipment that corresponds to the request. The destination shipping address may be obtained by the routine from for example the SMS data repository of based on an identifier e.g. an order identifier provided along with the request. In some embodiments the destination shipping address may be formatted in accordance with an address format specification e.g. an XML specification for mailing addresses . The routine then proceeds to block .

In block the routine determines whether information about a shipment was received and if so proceeds to block else proceeds to block . In block the routine records information about the shipment. Recording information about the shipment may include storing one or more data items e.g. a tracking number a status code an error message a parcel weight etc. in the SMS data repository of . The routine then proceeds to block .

In block the routine determines whether a request for a URI was received and if so proceeds to block else proceeds to block . In block the routine provides a URI. Providing a URI may include determining the URI by translating mapping or looking up a name or other identifier received as part of the request. For example the identifier may be used as a key to look up an associated URI in a table or other mapping between keys and URIs. The determined URI is then transmitted back to the SPS. The routine then proceeds to block .

In block the routine performs other indicated actions as appropriate. Other actions may include for example providing information about the status of a shipment e.g. whether and or when the shipment was shipped or received deleting information about one or more shipments etc.

The above described techniques can be used during other phases of a typical item shipment process as well. For example as noted with respect to a machine readable data block can be used as part of a receipt scan process performed by the recipient buyer consumer of a shipment. In such an embodiment a recipient scans a machine readable data block e.g. bar code of that is part of a received package such as by using a smart phone that includes bar code reader software. Information contained in the machine readable data block then causes various actions to occur on the recipient s smart phone. For example the smart phone may display a feedback form that can be used by the recipient to describe the condition of the received goods provide an image of a damaged shipment provide customer satisfaction information or the like. The smart phone may also transmit e.g. by sending an SMS making an HTTP request information with or without further interaction from the user informing a remote code module that the shipment has been received. Various further local and or remote actions can be taken in response to a recipient scan such as a transfer registration of ownership an initiation of a warranty return or exchange period an initiation of a refund exchange process e.g. generation of a return shipping label notification of a shipping carrier to pick up a returned item an initiation of a feedback process e.g. posting to a review feedback Web site an initiation of a social networking operation e.g. updating a social network page transmitting a status update or the like.

As described further below in some embodiments a syntax and semantics for shipping uniform resource identifiers is defined. A shipping uniform resource identifier URI may be generated by an SMS and embedded within a machine readable data block such as a bar code. The shipping URI can be used to specify actions that that are to be taken by the SPS to perform a particular item shipment. A shipping URI includes a scheme name that identifies a shipping protocol and that is configured to cause Web browsers or other applications to execute an SPS to perform activities such as to produce a shipping label. A shipping URI also includes scheme data that is provided by the SMS to the SPS and that specifies one or more aspects of a particular item shipment. The scheme data may include for example a destination shipping address that is to be included in a shipping label for a particular shipment or may include an identifier e.g. a URI or link that may be used to determine a destination shipping address or other shipping characteristics. The scheme data may also include an identifier e.g. another URI of a code module e.g. of a Web server that is configured to store information about shipments such that the SPS can provide information about the item shipment to the code module. Alternatively a single identifier may be used to obtain shipment label information such as an address associated with a particular shipment and to provide information about the item shipment. For example the SPS may provide information regarding the printing of a shipping label a tracking number associated with the shipment etc. By automatically providing information about the item shipment to the code module the information may then be made available to other systems and or users such as the intended recipient of the item shipment so the recipient can be notified or otherwise learn that the item has been shipped. In this manner a shipping URI facilitates the interoperation of disparate computing systems to efficiently perform item shipments. Techniques related to shipping URIs are described further in U.S. Pat. No. 7 409 353 issued Aug. 5 2008 entitled Methods and Systems for Producing Shipping Labels and U.S. Pat. No. 7 624 025 issued Nov. 24 2009 entitled Methods and Systems for Supporting the Production of Shipping Labels all of which are incorporated in their entireties herein by reference.

In one embodiment URI based shipping protocol is provided. A shipping protocol defines a syntax for well formed shipping URIs and the corresponding item shipment actions e.g. shipping label generation and or output taken by a compliant SPS in response to a well formed shipping URI. One example syntax for a shipping URI is 

In this example a shipping URI comprises the text string ship followed by the text string followed by a list of properties. In the illustrated example the text string ship identifies the described shipping protocol. In other embodiments other identifiers may be used such as shipto slpp Shipping Label Production Protocol etc. A list of properties is one or more properties separated by the character. Each property is a key value pair comprising a property name followed by the character followed by a property value. A property may specify an action to be taken by the SPS and or a property of a shipping label that is to be produced. Allowed property names in the example protocol include GETURI POSTURI ADDR TRANSFORM POST METHOD and POSTBACK FAIL. Other protocols may include a greater or lesser number of properties and or different property names. A property value is any URI encoded string.

Table 1 below describes the semantics and or purpose of each of the properties defined by an example shipping protocol.

Table 2 below provides examples for each of the properties defined by an example URI based shipping protocol. Note that for readability the examples of Table 2 have in some cases been broken across multiple lines. In typical embodiments the illustrated properties would not include newline characters or be broken over several lines as illustrated.

In the example shipping protocol property values may include one or more fields that each refer to aspects of an item shipment and or a produced shipping label. These fields are specified as text strings surrounded by the character. In other embodiments other delimiters may be utilized e.g. etc. Table 3 below describes various fields and their semantics. Other fields and or semantics can be similarly supported.

In a typical embodiment an SPS will replace each field in a given property value of a shipping URI i.e. substitute a given field with the appropriate data item from the corresponding item shipment and or shipping label. For example if a TrackingNum field occurs in a POSTURI the SPS will replace the string TrackingNum with an actual tracking number from the corresponding item shipment and or shipping label. This string replacement will typically occur prior to the use of the POSTURI in order to provide information to a code module identified by the POSTURI about the corresponding item shipment.

In one embodiment an XML based shipping protocol is provided. A shipping protocol defines a syntax for well formed XML shipment preparation information blocks and the corresponding item shipment actions e.g. shipping label generation and or output taken by a compliant SPS in response to a well formed shipping preparation information block. Example XML based shipping information blocks are illustrated in . Various details of the shipping protocol described with respect to Tables 1 3 above can be applied equally to an XML based shipping protocol. For example XML elements can be defined that have syntax and or semantics that are equivalent to the URI properties described with reference to Tables 1 and 2. In addition XML based shipment preparation information blocks may include the property value fields or similar constructs described with reference to Table 3 for purposes of field substitution or the like.

All of the above U.S. patents U.S. patent application publications U.S. patent applications foreign patents foreign patent applications and non patent publications referred to in this specification and or listed in the Application Data Sheet including but not limited to U.S. Pat. No. 7 409 353 issued Aug. 5 2008 entitled Methods and Systems for Producing Shipping Labels U.S. Pat. No. 7 624 025 issued Nov. 24 2009 entitled Methods and Systems for Supporting the Production of Shipping Labels U.S. Patent Application No. 61 019 208 filed Jan. 4 2008 entitled Methods and Systems for Supporting the Production of Shipping Labels U.S. patent application Ser. No. 12 169 509 filed Jul. 8 2008 entitled Methods and Systems for Producing Shipping Labels U.S. Pat. No. 8 126 821 issued Feb. 28 2012 entitled Methods and Systems for Supporting the Production of Shipping Labels U.S. Pat. No. 8 185 479 issued May 22 2012 entitled Shipment Preparation Using Network Resource Identifiers in Packing Lists and U.S. patent application Ser. No. 13 277 970 filed Oct. 20 2011 entitled Shipment Preparation Using Network Resource Identifiers in Packing Lists are incorporated herein by reference in their entireties.

From the foregoing it will be appreciated that although specific embodiments have been described herein for purposes of illustration various modifications may be made without deviating from the spirit and scope of the present disclosure. For example the methods and systems for facilitating shipment preparation discussed herein are applicable to other architectures other than an electronic commerce order management architecture. As noted the described techniques may be used for any carrier mail communication such as direct mail operations mail merges etc. Also the methods and systems discussed herein are applicable to differing shipping and or networking protocols communication media optical wireless cable etc. and devices such as wireless handsets electronic organizers personal digital assistants portable email machines game machines pagers navigation devices such as GPS receivers etc. .

