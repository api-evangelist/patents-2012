---

title: BDD variable reordering using multiple computing devices
abstract: In one embodiment, a first computing device selects k first variable orders for a Binary Decision Diagram (BDD) representing a function having n variables, where n≧4 and k≧2. The first computing device distributes the k first variable orders among a plurality of second computing devices. For each of the k first variable orders distributed to one of the second computing devices, the first computing device receives, from the one second computing device, a local best variable order among the first variable order and one or more second variable orders derived from the first variable order. The first computing device determines a global best variable order for the BDD among all local best variable orders received from the second computing devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08880443&OS=08880443&RS=08880443
owner: Fujitsu Limited
number: 08880443
owner_city: Kawasaki-shi
owner_country: JP
publication_date: 20120808
---
A Binary Decision Diagram BDD is a data structure that may be used to represent a Boolean function. A Reduced Ordered Binary Decision Diagram ROBDD is an optimized BDD that has no redundant nodes and isomorphic sub graphs and that the variables appear in the same order along each path from root to a terminal node. The size of a BDD is determined by both the Boolean function it represents and the order of the variables of the function. Consequently variable ordering exposes a critical optimization problem as the size of a BDD often varies greatly as its variable order changes.

In particular embodiments a first computing device selects k first variable orders for a Binary Decision Diagram BDD representing a function having n variables where n 4 and k 2. The first computing device distributes the k first variable orders among a plurality of second computing devices. For each of the k first variable orders distributed to one of the second computing devices the first computing device receives from the one second computing device a local best variable order among the first variable order and one or more second variable orders derived from the first variable order. The first computing device determines a global best variable order for the BDD among all local best variable orders received from the second computing devices. In particular embodiments the global best variable order is the variable order that yields the smallest size of the BDD among all local best variable orders.

In particular embodiments the k first variable orders for the BDD are selected by forming k groups respectively corresponding to the k first variable orders each group including 2 ordered sets and a first set including s of the n variables and a second set including s of the n variables where s s n and for each group combining the s variables in the first set and the s variables in the second set to form the corresponding first variable order the s variables in the first set being positioned before the s variables in the second set.

The object and advantages of the invention will be realized and attained at least by the elements features and combinations particularly pointed out in the claims. It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are not restrictive of the invention as claimed.

A Binary Decision Diagram BDD is a data structure that may be used to represent a Boolean function. Given a Boolean function with n variables x . . . x the BDD representing this Boolean function also has n variables corresponding to the n variables of the Boolean function. A BDD may be graphically represented as a rooted directed and acyclic graph having one or more internal decision nodes and two terminal nodes. The two terminal nodes are a FALSE or 0 terminal node and a TRUE or 1 terminal node. Each decision node i.e. non terminal node corresponds to and represents a specific variable of the Boolean function and has two edges a FALSE or 0 edge and a TRUE or 1 edge. Each edge may be connected to another decision node or to one of the terminal nodes.

Each path in the graph may by formed by one or more decision nodes and their associated edges and eventually leads to either the 0 terminal node or the 1 terminal node. The decision nodes that form a particular path each represent a different variable of the Boolean function. That is along a single path no two decision nodes represent the same variable of the Boolean function. A path that leads to the 0 terminal node indicates that the Boolean function evaluates to FALSE for the values assigned to the variables represented by the decision nodes on that path and a path that leads to the 1 terminal node indicates that the Boolean function evaluates to TRUE for the values assigned to the variables represented by the decision nodes on the path.

A BDD whose redundant decision nodes and isomorphic sub graphs have been removed and whose decision nodes appear in the same order from the root to the terminal nodes along all the paths in the BDD is referred to as a Reduced Ordered Binary Decision Diagram ROBDD . A ROBDD has two important properties. First the ROBDD is ordered. That is there is a fixed order 1 . . . n x . . . x such that for any non terminal node v index low v k with k index v and index high v q with q index v hold if low v and high v are also non terminal nodes. Second the ROBDD is reduced. That is there exists no non terminal node v V with low v high v and there are no two non terminal nodes V and v such that the sub BDDs rooted by v and v are isomorphic. Note that in a BDD a non terminal node is a decision node. The graph representing a ROBDD with n variables has n layers where each layer corresponds to a specific variable. The advantage of a ROBDD is that it is canonical for a particular function and variable order which makes it useful in various types of practical applications.

The size of a BDD is determined by both the Boolean function it represents and the chosen order of the variables of the function. The size of a BDD is the sum of the sizes of all of its individual layers. In particular embodiments the size of a BDD may be expressed in terms of the number of decision nodes in the BDD. Similarly the size of a layer of a BDD may be expressed in terms of the number of decision nodes at that layer.

Given a Boolean function x . . . x represented by a BDD depending upon the ordering of the variables x . . . x the number of decision nodes in the graph representing the BDD is linear in the best case and exponential in the worst case in terms of n. For example for Boolean function x . . . x xx xx . . . xx using the variable order x

Given a particular layer of a BDD representing a Boolean function when a first variable of the Boolean function e.g. x is positioned at that layer the layer may have one size. When a second variable of the Boolean function e.g. x is positioned at that same layer the layer may have another different size. In addition given a particular layer e.g. layer i of a BDD with a particular variable e.g. x positioned at that layer the size of the layer e.g. layer i in connection with the variable e.g. x depends on the specific variables positioned at layers above e.g. layers i 1 i 2 . . . and below e.g. layers i 1 i 2 . . . that particular layer e.g. layer i . Thus for example for a BDD with 4 variables respectively positioned at 4 layers if variable xis positioned at layer 3 when variables xand xare respectively positioned at layers 1 and 2 and variable xis positioned at layer 4 layer 3 in connection with variable xmay have one size. But when variables xand xare respectively positioned at layers 1 and 2 and variable xis positioned at layer 4 layer 3 in connection with variable xmay have another different size even though variable xremains at layer 3.

BDD variable ordering refers to the process of testing different variable orders of a BDD to determine the size of the BDD for each specific variable order. The goal of BDD variable ordering is in general to find an optimum or substantially optimal ordering of the function variables such that the number of decision nodes needed in a BDD is minimized thus reducing the size of the BDD representing the function. In general in order to find the optimum variable order of a BDD where the size of the BDD is minimum it may be necessary to test many if not all possible order permutations of the variables of the BDD so that the order permutation of the variables where the size of the BDD is the smallest may be found. This specific order permutation yields the optimum variable order for the BDD. Note that each specific order permutation of the variables indicates a different variable order of the BDD. In practice however finding all possible order permutations of the variables of a BDD and thus finding all possible variable orders of the BDD may be very expensive in terms of time and resources it requires since for a BDD that represents a Boolean function of n variables there are n n factorial where n 1 2 . . . n possible order permutations of the variables

In particular embodiments system may include a master computing device and x slave computing devices . . . x. Note that x may be any positive number.

In particular embodiments given a BDD with n variables which has n possible variable orders at master computing device may select from among the n possible variable orders k specific variable orders where 1 k n . For clarification purposes these k selected variable orders are referred to as worker variable orders.

More specifically in particular embodiments when n is an even number i.e. n is divisible by 2 and n 4 the k worker variable orders may be selected by forming k unique groups where each group includes 2 ordered sets and each set includes

In particular embodiments when n is an odd number and n 5 the k worker variable orders may be selected by forming k unique groups where each group includes 2 ordered sets. However in this case since n is not divisible by 2 there is an extra variable which may be included in either one of the 2 ordered sets for each group. Thus within each group one set includes

As these examples illustrate as the number of variables of a BDD i.e. n increases the number of worker variable orders i.e. k increases rapidly.

In particular embodiments at master computing device may distribute the k worker variable orders among slave computing devices to x such that each slave computing device i is assigned at least one of the k worker variable orders. At each slave computing device i may determine the best local variable order among all possible variable orders derived from the worker variable order assigned to that slave computing device i and reports that best local variable order back to master computing device . In particular embodiments the variable orders derived from a specific worker variable order may be a subset of variable orders of the BDD.

Using the case of a BDD with 4 variables and 6 worker variable orders i.e. n 4 and k 6 as an example slave computing device may be assigned worker variable order slave computing device may be assigned worker variable order and so on. If there are 6 slave computing devices i.e. x 6 then each salve computing device is assigned one worker variable order.

For slave computing device which has been assigned worker variable order from 2 ordered sets and it is responsible for determining the best permutation of the 4 variables i.e. the best variable order among and . These 4 variable orders are derived from worker variable order by swapping the variables within each of the 2 ordered sets i.e. and in the group corresponding to worker variable order . Each specific variable order results in a corresponding size of the BDD and the best variable order is the one that results in the smallest size of the BDD among the 4 sizes. Since this is the best variable order only among the 4 variable orders derived from worker variable order for clarification purposes it is referred to as a local best variable order. Slave computing device may report the local best variable order and the corresponding size of the BDD determined for worker variable order to master computing device .

For slave computing device which has been assigned worker variable order from 2 ordered sets and it is responsible for determining the local best variable order among and . Similarly these 4 variable orders are derived from worker variable order by swapping the variables within each of the 2 ordered sets i.e. and in the group corresponding to worker variable order . Again each specific variable order results in a corresponding size of the BDD and the local best variable order is the one that results in the smallest size of the BDD among the 4 sizes. Slave computing device may report the local best variable order and the corresponding size of the BDD determined for worker variable order to master computing device .

For slave computing device which has been assigned worker variable order from 2 ordered sets and it is responsible for determining the local best variable order among and . These 4 variable orders are derived from worker variable order by swapping the variables within each of the 2 ordered sets i.e. and in the group corresponding to worker variable order . Each specific variable order results in a corresponding size of the BDD and the local best variable order is the one that results in the smallest size of the BDD among the 4 sizes. Slave computing device may report the local best variable order and the corresponding size of the BDD determined for worker variable order to master computing device .

For slave computing device which has been assigned worker variable order from 2 ordered sets and it is responsible for determining the local best variable order among and . These 4 variable orders are derived from worker variable order by swapping the variables within each of the 2 ordered sets i.e. and in the group corresponding to worker variable order . Each specific variable order results in a corresponding size of the BDD and the local best variable order is the one that results in the smallest size of the BDD among the 4 sizes. Slave computing device may report the local best variable order and the corresponding size of the BDD determined for worker variable order to master computing device .

For slave computing device which has been assigned worker variable order from 2 ordered sets and it is responsible for determining the local best variable order among and . These 4 variable orders are derived from worker variable order by swapping the variables within each of the 2 ordered sets i.e. and in the group corresponding to worker variable order . Each specific variable order results in a corresponding size of the BDD and the local best variable order is the one that results in the smallest size of the BDD among the 4 sizes. Slave computing device may report the local best variable order and the corresponding size of the BDD determined for worker variable order to master computing device .

For slave computing device which has been assigned worker variable order from 2 ordered sets and it is responsible for determining the local best variable order among and . These 4 variable orders are derived from worker variable order by swapping the variables within each of the 2 ordered sets i.e. and in the group corresponding to worker variable order . Each specific variable order results in a corresponding size of the BDD and the local best variable order is the one that results in the smallest size of the BDD among the 4 sizes. Slave computing device may report the local best variable order and the corresponding size of the BDD determined for worker variable order to master computing device .

As this example illustrates each slave computing device i determines a local best variable order for a subset of variable orders of the BDD. However all possible variable orders of the BDD are eventually tested.

To generalize in particular embodiments for a BDD with n variables and k worker variable orders each worker variable order is assigned to a slave computing device i. Slave computing device i is responsible for determining a local best variable order among the variable orders derived from the worker variable order assigned to it including the worker variable order itself by swapping the variables within each of the 2 ordered sets of variables from the group corresponding to the worker variable order. For each of the 2 ordered sets of variables within a specific group corresponding to a worker variable order all possible variable orders are considered. However the order of the 2 sets within each group remains fixed. Slave computing device i reports the local best variable order and its corresponding size of the BDD which is determined for a worker variable order assigned to it to master computing device .

As another example for a BDD with 6 variables and 20 worker variable orders i.e. n 6 and k 20 each worker variable order corresponds to a group of 2 ordered sets where each set has 3 variables. One of these worker variable orders is which corresponds to the 2 ordered sets and . When this worker variable order is assigned to a slave computing device i slave computing device i is responsible for determining the local best variable order among the 36 variable orders derived from this worker variable order including the worker variable order itself. In this case to derive variable orders from a worker variable order all possible permutations of the 3 variables in the first set as well as all possible permutations of the 3 variables in the second set are considered. From the first set the permutations of the 3 variables include and . From the second set the permutations of the 3 variables include and . The variable orders derived from the worker variable order are obtained by forming combinations of the 3 variables from the first set and the 3 variables from the second set in various orders. Thus one combination may be and another combination may be and so on. The local best variable order among the 36 variable orders thus derived from the worker variable order and its corresponding size of the BDD are determined and reported to master computing device .

Again to generalize in particular embodiments for a BDD with n variables and k worker variable orders each worker variable order corresponds to a combination of 2 ordered sets. When n is even each set has

In particular embodiments a slave computing device i may determine the local best variable order and its corresponding size of the BDD among the variable orders derived from a worker variable order assigned to it using any applicable means.

Using the above case of the BDD with 4 variables and 6 worker variable orders i.e. n 4 and k 6 as an example one of the worker variable orders in this case is corresponding to the 2 ordered sets and . Slave computing device assigned to this worker variable order needs to determine the local best variable order among variable orders and . The size of a BDD may be expressed as the sum of the sizes of all the layers in the BDD. In addition swapping two neighboring i.e. consecutive layers does not affect the sizes of the layers above or below these two layers. Thus with some implementations slave computing device may receive the 4 variable BDD from master computing device record the sum of layers 1 and 2 and the sum of layers 3 and 4. Then slave computing device may swap layers 1 and 2 and swap layers 3 and 4 and record the sum of layers 2 and 1 and the sum of layers 4 and 3. To obtain the size of the BDD for variable order slave computing device may determine the sum of layers 1 and 2 and the sum of layers 3 and 4. To obtain the size of the BDD for variable order slave computing device may determine the sum of layers 2 and 1 and the sum of layers 3 and 4. To obtain the size of the BDD for variable order slave computing device may determine the sum of layers 1 and 2 and the sum of layers 4 and 3. To obtain the size of the BDD for variable order slave computing device may determine the sum of layers 2 and 1 and the sum of layers 4 and 3. The variable order that has the smallest size is the local best variable order. The other slave computing devices may perform similar operations with worker variable orders respectively assigned to them.

There are various optimization techniques for determining the sizes of a BDD with specific variable orders. With some implementations a slave computing device i may employ any applicable optimization techniques when determining the local best variable order and its corresponding size of the BDD among the variable orders derived from a worker variable order assigned to it. U.S. Patent Publication 2012 0089557 A1 entitled Determining Optimum Variable Orders for BDDs Using Pair Wise Variable Grouping describes various optimization techniques for reordering BDD variables which is hereby incorporated by reference in its entirety and for all purposes.

Again using the above case of the BDD with 4 variables and 6 worker variable orders i.e. n 4 and k 6 as an example there are a total of 4 variable orders derived from each worker variable order including the worker variable order itself so that there are a total of 24 possible variable orders for a 4 variable BDD. Each worker variable order is a combination of 2 ordered sets of 2 variables each e.g. . When selecting worker variable orders the order of the two sets matters. The variables from the first set are positioned before the variables from the second set. However within each set the order of the variables is irrelevant e.g. is considered the same as . Thus variable order is considered the same as variable order in the context of selecting worker variable orders and either one may be selected as a worker variable order i.e. they are interchangeable in the context of forming a worker variable order . On the other hand and are not considered the same in the context of selecting worker variable orders.

This optimization technique together with several other optimization techniques for BDD variable reordering are described in more detail in U.S. Patent Publication 2012 0089557 A1.

When master computing device distributes the k worker variable orders to slave computing devices to x in particular embodiments master computing device may take into consideration the current workload of each slave computing devices i. As an example master computing device may assign one worker variable order to one slave computing device i at a time. When a specific slave computing device i finishes determining the local best variable order among the variable orders derived from the worker variable order assigned to it and reports the result back to master computing device master computing device may assign another worker variable order to that slave computing device i. This process may be repeated until all k worker variable orders have been assigned. As another example master computing device may distribute the k worker variable orders somewhat evenly among the x slave computing devices to x e.g. each slave computing device i is assigned approximately

In particular embodiments at after collecting all the local best variable orders and their corresponding sizes of the BDD from slave computing devices to x master computing device may determine a global best variable order among the local best variable orders which is the variable order that yields the smallest size of the BDD among the sizes corresponding to the local best variable order.

Particular embodiments may repeat the operations of the method of where appropriate. Moreover although this disclosure describes and illustrates particular operations of the method of as occurring in a particular order this disclosure contemplates any suitable operations of the method of occurring in any suitable order. Furthermore although this disclosure describes and illustrates particular components devices or systems carrying out particular operations of the method of this disclosure contemplates any suitable combination of any suitable components devices or systems carrying out any suitable operations of the method of .

Although illustrates master computing device and slave computing devices as separate devices performing separate functions in particular embodiments a specific computing device may implement functions of both master and slave computing devices. In this case the computing device may assign one or more worker variable orders to itself in addition to assigning worker variable orders to other slave computing devices and determine the local best variable order for variable orders derived from each worker variable order assigned to itself. After receiving the results from other slave computing devices the computing device may select a global best variable order of the BDD among all the local best variable orders including those it has determined itself and those it has received from other slave computing devices.

This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system taking any suitable physical form. As example and not by way of limitation computer system may be an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server or a combination of two or more of these. Where appropriate computer system may include one or more computer systems be unitary or distributed span multiple locations span multiple machines or reside in a cloud which may include one or more cloud components in one or more networks. Where appropriate one or more computer systems may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation one or more computer systems may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein where appropriate.

In particular embodiments computer system includes a processor memory storage an input output I O interface a communication interface and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement this disclosure contemplates any suitable computer system having any suitable number of any suitable components in any suitable arrangement.

In particular embodiments processor includes hardware for executing instructions such as those making up a computer program. As an example and not by way of limitation to execute instructions processor may retrieve or fetch the instructions from an internal register an internal cache memory or storage decode and execute them and then write one or more results to an internal register an internal cache memory or storage . In particular embodiments processor may include one or more internal caches for data instructions or addresses. This disclosure contemplates processor including any suitable number of any suitable internal caches where appropriate. As an example and not by way of limitation processor may include one or more instruction caches one or more data caches and one or more translation lookaside buffers TLBs . Instructions in the instruction caches may be copies of instructions in memory or storage and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory or storage for instructions executing at processor to operate on the results of previous instructions executed at processor for access by subsequent instructions executing at processor or for writing to memory or storage or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual address translation for processor . In particular embodiments processor may include one or more internal registers for data instructions or addresses. This disclosure contemplates processor including any suitable number of any suitable internal registers where appropriate. Where appropriate processor may include one or more arithmetic logic units ALUs be a multi core processor or include one or more processors . Although this disclosure describes and illustrates a particular processor this disclosure contemplates any suitable processor.

In particular embodiments memory includes main memory for storing instructions for processor to execute or data for processor to operate on. As an example and not by way of limitation computer system may load instructions from storage or another source such as for example another computer system to memory . Processor may then load the instructions from memory to an internal register or internal cache. To execute the instructions processor may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions processor may write one or more results which may be intermediate or final results to the internal register or internal cache. Processor may then write one or more of those results to memory . In particular embodiments processor executes only instructions in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere and operates only on data in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere . One or more memory buses which may each include an address bus and a data bus may couple processor to memory . Bus may include one or more memory buses as described below. In particular embodiments one or more memory management units MMUs reside between processor and memory and facilitate accesses to memory requested by processor . In particular embodiments memory includes random access memory RAM . This RAM may be volatile memory where appropriate. Where appropriate this RAM may be dynamic RAM DRAM or static RAM SRAM . Moreover where appropriate this RAM may be single ported or multi ported RAM. This disclosure contemplates any suitable RAM. Memory may include one or more memories where appropriate. Although this disclosure describes and illustrates particular memory this disclosure contemplates any suitable memory.

In particular embodiments storage includes mass storage for data or instructions. As an example and not by way of limitation storage may include an HDD a floppy disk drive flash memory an optical disc a magneto optical disc magnetic tape or a Universal Serial Bus USB drive or a combination of two or more of these. Storage may include removable or non removable or fixed media where appropriate. Storage may be internal or external to computer system where appropriate. In particular embodiments storage is non volatile solid state memory. In particular embodiments storage includes read only memory ROM . Where appropriate this ROM may be mask programmed ROM programmable ROM PROM erasable PROM EPROM electrically erasable PROM EEPROM electrically alterable ROM EAROM or flash memory or a combination of two or more of these. This disclosure contemplates mass storage taking any suitable physical form. Storage may include one or more storage control units facilitating communication between processor and storage where appropriate. Where appropriate storage may include one or more storages . Although this disclosure describes and illustrates particular storage this disclosure contemplates any suitable storage.

In particular embodiments I O interface includes hardware software or both providing one or more interfaces for communication between computer system and one or more I O devices. Computer system may include one or more of these I O devices where appropriate. One or more of these I O devices may enable communication between a person and computer system . As an example and not by way of limitation an I O device may include a keyboard keypad microphone monitor mouse printer scanner speaker still camera stylus tablet touch screen trackball video camera another suitable I O device or a combination of two or more of these. An I O device may include one or more sensors. This disclosure contemplates any suitable I O devices and any suitable I O interfaces for them. Where appropriate I O interface may include one or more device or software drivers enabling processor to drive one or more of these I O devices. I O interface may include one or more I O interfaces where appropriate. Although this disclosure describes and illustrates a particular I O interface this disclosure contemplates any suitable I O interface.

In particular embodiments communication interface includes hardware software or both providing one or more interfaces for communication such as for example packet based communication between computer system and one or more other computer systems or one or more networks. As an example and not by way of limitation communication interface may include a network interface controller NIC or network adapter for communicating with an Ethernet or other wire based network or a wireless NIC WNIC or wireless adapter for communicating with a wireless network such as a WI FI network. This disclosure contemplates any suitable network and any suitable communication interface for it. As an example and not by way of limitation computer system may communicate with an ad hoc network a personal area network PAN a local area network LAN a wide area network WAN a metropolitan area network MAN or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example computer system may communicate with a wireless PAN WPAN such as for example a BLUETOOTH WPAN a WI FI network a WI MAX network a cellular telephone network such as for example a Global System for Mobile Communications GSM network or other suitable wireless network or a combination of two or more of these. Computer system may include any suitable communication interface for any of these networks where appropriate. Communication interface may include one or more communication interfaces where appropriate. Although this disclosure describes and illustrates a particular communication interface this disclosure contemplates any suitable communication interface.

In particular embodiments bus includes hardware software or both coupling components of computer system to each other. As an example and not by way of limitation bus may include an Accelerated Graphics Port AGP or other graphics bus an Enhanced Industry Standard Architecture EISA bus a front side bus FSB a HYPERTRANSPORT HT interconnect an Industry Standard Architecture ISA bus an INFINIBAND interconnect a low pin count LPC bus a memory bus a Micro Channel Architecture MCA bus a Peripheral Component Interconnect PCI bus a PCI Express PCIe bus a serial advanced technology attachment SATA bus a Video Electronics Standards Association local VLB bus or another suitable bus or a combination of two or more of these. Bus may include one or more buses where appropriate. Although this disclosure describes and illustrates a particular bus this disclosure contemplates any suitable bus or interconnect.

Herein reference to a computer readable non transitory storage medium may include a semiconductor based or other integrated circuit IC such as for example a field programmable gate array FPGA or an application specific IC ASIC a hard disk drive HDD a hybrid hard drive HHD an optical disc an optical disc drive ODD a magneto optical disc a magneto optical drive a floppy disk a floppy disk drive FDD magnetic tape a holographic storage medium a solid state drive SSD a RAM drive a SECURE DIGITAL card a SECURE DIGITAL drive or another suitable computer readable non transitory storage medium or a suitable combination of these where appropriate. This disclosure contemplates one or more computer readable storage media implementing any suitable storage. In particular embodiments a computer readable storage medium implements one or more portions of processor such as for example one or more internal registers or caches one or more portions of memory one or more portions of storage or a combination of these where appropriate. In particular embodiments a computer readable storage medium implements RAM or ROM. In particular embodiments a computer readable storage medium implements volatile or persistent memory. In particular embodiments one or more computer readable storage media embody software. Herein reference to software may encompass one or more applications bytecode one or more computer programs one or more executables one or more instructions logic machine code one or more scripts or source code and vice versa where appropriate. In particular embodiments software includes one or more application programming interfaces APIs . This disclosure contemplates any suitable software written or otherwise expressed in any suitable programming language or combination of programming languages. In particular embodiments software is expressed as source code or object code. In particular embodiments software is expressed in a higher level programming language such as for example C Perl or a suitable extension thereof. In particular embodiments software is expressed in a lower level programming language such as assembly language or machine code . In particular embodiments software is expressed in JAVA C or C . In particular embodiments software is expressed in Hyper Text Markup Language HTML Extensible Markup Language XML or other suitable markup language.

Herein a computer readable non transitory storage medium or media may include one or more semiconductor based or other integrated circuits ICs such as for example field programmable gate arrays FPGAs or application specific ICs ASICs hard disk drives HDDs hybrid hard drives HHDs optical discs optical disc drives ODDs magneto optical discs magneto optical drives floppy diskettes floppy disk drives FDDs magnetic tapes solid state drives SSDs RAM drives SECURE DIGITAL cards or drives any other suitable computer readable non transitory storage medium or media or any suitable combination of two or more of these where appropriate. A computer readable non transitory storage medium or media may be volatile non volatile or a combination of volatile and non volatile where appropriate.

Herein or is inclusive and not exclusive unless expressly indicated otherwise or indicated otherwise by context. Therefore herein A or B means A B or both unless expressly indicated otherwise or indicated otherwise by context. Moreover and is both joint and several unless expressly indicated otherwise or indicated otherwise by context. Therefore herein A and B means A and B jointly or severally unless expressly indicated otherwise or indicated otherwise by context.

This disclosure encompasses all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Moreover although this disclosure describes and illustrates respective embodiments herein as including particular components elements functions operations or steps any of these embodiments may include any combination or permutation of any of the components elements functions operations or steps described or illustrated anywhere herein that a person having ordinary skill in the art would comprehend. Furthermore reference in the appended claims to an apparatus or system or a component of an apparatus or system being adapted to arranged to capable of configured to enabled to operable to or operative to perform a particular function encompasses that apparatus system component whether or not it or that particular function is activated turned on or unlocked as long as that apparatus system or component is so adapted arranged capable configured enabled operable or operative.

All examples and conditional language recited herein are intended for pedagogical objects to aid the reader in understanding the invention and the concepts contributed by the inventor to furthering the art and are to be construed as being without limitation to such specifically recited examples and conditions. Although the embodiment s of the present inventions have been described in detail it should be understood that the various changes substitutions and alterations could be made hereto without departing from the spirit and scope of the invention.

