---

title: Overlay identification of data processing target structure
abstract: A method, system, and computer program product for identifying an overlay of a data processing target structure in a computing environment is provided. At least one of examining a mapping macro for the target structure with a set of valid ranges, comparing the set of valid ranges with the target structure to identify a string of at least one first invalid value and a last invalid value and locate invalid regions of the target structure, and examining executable code associated with the target structure, comparing at least one unchanged module against at least one additional module exhibiting an overlay characteristic to identify the string of the at least one first invalid value and the last invalid value and locate invalid regions of the target structure, is performed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09384118&OS=09384118&RS=09384118
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09384118
owner_city: Armonk
owner_country: US
publication_date: 20121029
---
This application is a Continuation of U.S. patent application Ser. No. 12 354 740 filed on Jan. 15 2009.

The present invention relates in general to computers and more particularly to a method system and computer program product for overlay identification of a data processing target structure in a computing environment.

Computers and computing environments are used in virtually every setting including at home work and school. Computer data storage provides one of the core functions of the modern computer that of information retention. It is one of the fundamental components of all modern computers and coupled with a central processing unit CPU implements the basic computer model used since the 1940s.

Computer software or simply software is a general term used to describe a collection of computer programs procedures and documentation that perform tasks in a computing environment. This includes application software such as word processors that perform productive tasks for users system software such as operating systems which interface with hardware to provide the necessary services for application software and middleware which controls and coordinates distributed systems.

Software generally uses computer data storage for a variety of purposes. For example the software itself is stored on a computer data storage system. Additionally software may use information such as a file as in the case of word processors. The information contained in the file may be stored in a data storage system.

In some cases software environments may cause data to be written to an existing portion of data storage. Such a scenario is referred to as an overlay. It is difficult for a user to diagnose overlays in data storage. The lack of identification and diagnosis of overlays may lead to data integrity problems and system outages. Due to the severity in the nature of these problems it is incumbent to diagnose and resolve overlays quickly. Unfortunately in today s environment there are often few clues as to who caused the overlay.

In light of the foregoing a need exists for a mechanism for improved diagnosis and identification of overlays in data processing data storage computing environments. Furthermore other desirable features and characteristics of the present invention will become apparent from the subsequent detailed description of the invention and the appended claims taken in conjunction with the accompanying drawings and this summary of the invention.

Accordingly in one embodiment by way of example only a method for identifying an overlay of a data processing target structure in a computing environment is provided. At least one of examining a mapping macro for the target structure with a set of valid ranges comparing the set of valid ranges with the target structure to identify a string of at least one first invalid value and a last invalid value and locate invalid regions of the target structure and examining executable code associated with the target structure comparing at least one unchanged module against at least one additional module exhibiting an overlay characteristic to identify the string of the at least one first invalid value and the last invalid value and locate invalid regions of the target structure is performed. Scanning through a dump to identify each instance of the string of the at least one first invalid value and the last invalid value is also performed. Searching backwards from an address of a program storage word PSW to identify an eye catcher and comparing the eye catcher to a library of original equipment manufacturer OEM eye catcher constants to identify the owner are also performed.

In an additional embodiment again by way of example only a system for identifying an overlay of a data processing target structure in a computing environment is provided. The system includes a processing module operational in the computing environment. The processing module is in communication with the data processing target structure. The processing module is adapted for performing at least one of examining a mapping macro for the target structure with a set of valid ranges comparing the set of valid ranges with the target structure to identify a string of at least one first invalid value and a last invalid value and locate invalid regions of the target structure and examining executable code associated with the target structure comparing at least one unchanged module against at least one additional module exhibiting an overlay characteristic to identify the string of the at least one first invalid value and the last invalid value and locate invalid regions of the target structure. The processor module is further configured for scanning through a dump to identify each instance of the string of the at least one first invalid value and the last invalid value searching backwards from an address of a program storage word PSW to identify an eye catcher and comparing the eye catcher to a library of original equipment manufacturer OEM eye catcher constants to identify the owner.

In still another embodiment again by way of example only a computer program product is provided for identifying an overlay of a data processing target structure in a computing environment. The computer program product comprises a computer readable storage medium having computer readable program code portions stored therein. The computer readable program code portions comprise a first executable portion for performing at least one of examining a mapping macro for the target structure with a set of valid ranges comparing the set of valid ranges with the target structure to identify a string of at least one first invalid value and a last invalid value and locate invalid regions of the target structure and examining executable code associated with the target structure comparing at least one unchanged module against at least one additional module exhibiting an overlay characteristic to identify the string of the at least one first invalid value and the last invalid value and locate invalid regions of the target structure. Computer code for scanning through a dump to identify each instance of the string of the at least one first invalid value and the last invalid value is also included. Computer code for searching backwards from an address of a program storage word PSW to identify an eye catcher and computer code for comparing the eye catcher to a library of original equipment manufacturer OEM eye catcher constants to identify the owner are also included.

The following description and claimed subject matter is directed to a set of related methodologies to be used to identify overlays in a data processing target structure. As background a typical organization of hardware and software components within a data processing system is described prior to describing the present invention in more detail.

With reference now to the figures depicts a typical data processing system in which the present invention may be implemented. Data processing system contains network which is the medium used to provide communications links between various devices and computers connected together within distributed data processing system . Network may include permanent connections such as wire or fiber optic cables or temporary connections made through telephone or wireless communications. In the depicted example server and server are connected to network along with storage unit . In addition clients also are connected to network . Clients may be a variety of computing devices such as personal computers personal digital assistants PDAs etc. Distributed data processing system may include additional servers clients and other devices not shown. In the depicted example distributed data processing system may include the Internet with network representing a worldwide collection of networks and gateways that use the TCP IP suite of protocols to communicate with one another. Of course distributed data processing system may also be configured to include a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN .

With reference now to a diagram depicts a typical computer architecture that may be used within a client or server such as those shown in in which the present invention may be implemented. Data processing system employs a variety of bus structures and protocols. Processor card contains processor and level two L2 cache that are connected to interprocessor bus . System may contain a plurality of processor cards processor card contains processor and L2 cache . Interprocessor bus supports system planar that contains bus bridge and memory controller that supports memory card . Memory card contains local memory consisting of a plurality of dual in line memory modules DIMMs and .

Interprocessor bridge connects to PCI bridges and via system bus . PCI bridges and are contained on native I O NIO planar which supports a variety of I O components and interfaces. PCI bridge provides connections for external data streams through network adapter and a number of card slots via PCI bus . PCI bridge connects a variety of I O devices via PCI bus . Hard disk may be connected to SCSI host adapter which is connected to PCI bus . Graphics adapter may also be connected to PCI bus as depicted either directly or indirectly.

ISA bridge connects to PCI bridge via PCI bus . ISA bridge provides interconnection capabilities through NIO controller via ISA bus such as serial connections and . Floppy drive connection provides removable storage. Keyboard connection and mouse connection allow data processing system to accept input data from a user.

Non volatile RAM NVRAM provides non volatile memory for preserving certain types of data from system disruptions or system failures such as power supply problems. System firmware is also connected to ISA bus and controls the initial BIOS. Service processor is connected to ISA bus and provides functionality for system diagnostics or system servicing.

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the system implementation. For example the system may have one or more processors and other peripheral devices may be used in addition to or in place of the hardware depicted in . The depicted examples are not meant to imply architectural limitations with respect to the present invention.

With reference now to an exemplary diagram shows software components within a computer system illustrating a logical relationship between the components as functional layers of software. The kernel Ring of the operating system provides a core set of functions that acts as an interface to the hardware. I O functions and drivers can be viewed as resident in Ring while memory management and memory related functions are resident in Ring . User applications and other programs Ring access the functions in the other layers to perform general data processing. Rings as a whole may be viewed as the operating system of a particular device. Assuming that the operating system is extensible software drivers may be added to the operating system to support various additional functions required by user applications such as device drivers for support of new devices added to the system.

In addition to being able to be implemented on a variety of hardware platforms the present invention may be implemented in a variety of software environments. A typical operating system OS may be used to control program execution within each data processing system. For example one device may run a Linux operating system while another device may run an AIX operating system.

With reference now to a simple block diagram depicts an exemplary relationship between software components in a data processing system that is being analyzed in some manner by an overlay identification mechanism. Overlay processor module is used to analyze application program in conjunction with a data processing target structure e.g. storage or elsewhere . Overlay processor may include or may be in communication with a trace program module configured to handle a subset of interrupts on the data processing system that is being analyzed. When an interrupt or trap occurs e.g. a single step trap or a taken branch trap for branch traces functionality within or associated with the overlay processor can perform various tracing functions profiling functions or debugging functions hereinafter the terms tracing profiling and debugging are used interchangeably. Overlay processor may adapted to examine various data processing modules such as mapping macros for the target structure as will be further explained. Overlay processor may additionally scan executable code of the application program again as will be described.

Both overlay processor and application program use kernel which comprises and or supports system level calls utilities and device drivers. Depending on the implementation overlay processor may have some modules that run at an application level priority and other modules that run at a trusted system level priority with various system level privileges.

In many cases an overlay is caused by a move character MVC or a move character long MVCL instruction. This instruction takes data from one location and moves it to another location. If the target address of the instruction is incorrect the instruction overlays the wrong storage. The following methodologies diagnose these types of problems determines where the overlaying data originated and finally determines an owner of the overlaid data. In most cases the owner of the overlaid data is generally responsible for the overlay. In identifying overlays the following mechanisms automatically determine the range of a block or code module that has been overlaid. A library of original equipment manufacturer OEM eye catchers and code sections are used or created to assist in identifying owners of the overlaid storage.

As a first step a determination is made as to how much of the target structure was overlaid. The following mechanisms may accomplish this determination in two ways. First a mapping macro for the overlaid target structure is used in view of a set of preexisting valid ranges. The valid ranges would be inserted into the mapping macro at time of declaration. A mapping macro is a set of declared variables that is used to describe an area of storage that has been obtained to contain variable data. In other words a program gets a block of storage to use for variables. The offset locations of each variable contained within that block are mapped to the block via a mapping macro. The mapping macro has the offset size and characteristic of each variable within the storage block. As implemented in the present invention the mapping macro also contains valid ranges for these fields e.g. all numeric all alphabetic numeric between 0 and 10 .

When a control block or data structure is located that is suspected to be overlaid the block or structure may be scanned and a determination may be made where the first invalid value occurs and the last invalid value occurs. This gives a beginning and an ending range for the overlaid portion of the data.

As an alternative the executable code for the application program data structure is examined. Since some diagnostic systems have access to code at a specific customer level the contents of unchanged modules may be compared against those modules exhibiting overlay characteristics to locate invalid areas of storage. Using one of the previous alternatives the string of data from the first invalid value to the last invalid value is used for succeeding analysis.

As a next step the dump may be scanned to find each instance where the invalid string described above exists. If the overlay is due to a MVC or MVCL instruction as previously described then the string existed in an additional location. When the string is found it is incumbent to identify who owns the string since generally the owner is most likely the cause of the overlay.

In identifying an owner of the bad string several methodologies may be brought to bear. A first methodology involves scanning through the system trace systrace and searching through entries such as through each GETMAIN a computer information control system application programming interface CISC API command request. It is beneficial to begin at the bottom of the systrace and work backwards since the most current entries are located at the bottom. The beginning offset of storage that was obtained through the length of storage obtained is examined to determine if the address of the bad string is contained within that block.

If the address of the bad string is contained within the block then the program status word PSW may be obtained from the systrace entry. The PSW address shows who called to get the storage. In some cases an IPCS WHERE command issued against the address will show the load module loadmod where a GETMAIN is issued and the program name will then be known. This is the simplest case.

In most cases however IPCS WHERE may not be effective. In these cases it is possible to go to the location of the address in the PSW and search backwards for an eye catcher. An eye catcher is a somewhat standardized convention that most applications use to identify themselves. Eye catchers generally have a maintenance level a module name and a company name with a copyright notice.

A library of OEM eye catcher constants may be maintained to compare with the identification of an eye catcher as described above. If an eye catcher is found a product name for the bad storage is identified. For those items without a standard copyright notice a search may be made of text readable extended binary code decimal interchange code EBCDIC characters reporting a list of those found back to a user. The user will then identify the characters. The characters may then be added to the OEM eye catcher library for future reference.

For those programs without eye catcher information a section of code where the initial branch into the application program is made may be identified as a constant string and used to identify that particular program in the future. As long as that portion of code does not change it remains reliable as an eye catcher. In general the beginning of most programs tend to change less than the middle and ending sections of the program since the invocation parameters are less likely to change during normal maintenance. The user would need to know based on the characteristics of that code what program it belongs to and flag the code accordingly in the OEM eye catcher library. As a result a database of known strings may be developed as eye catchers to identify storage owners. It will become easier over time to identify which application owns the storage with the bad string as the database grows.

A further improvement to the methodologies described above may be made by enhancing current virtual storage manager code to store the PSW of a GETMAIN request in a system storage mapping table. With this improvement the requirement of searching through systrace entries may be eliminated as the PSW may be obtained from the storage mapping table.

Turning to a diagram of an exemplary method for identifying an overlay of a data processing target structure in a computing environment is depicted. As one skilled in the art will appreciate various steps in the method may be implemented in differing ways to suit a particular application. In addition the described method may be implemented by various means such as hardware software firmware or a combination thereof operational on or otherwise associated with the blade server environment. For example the method may be implemented partially or wholly as a computer program product including a computer readable storage medium having computer readable program code portions stored therein. The computer readable storage medium may include disk drives flash memory digital versatile disks DVDs compact disks CDs and other types of storage mediums.

Method begins step with the performance of at least one of the following steps and or . In step a mapping macro for the target structure is examined in view of a set of valid ranges to identify the bad string as previously described. Here again the bad string consists of the first invalid value to the last invalid value identified. In step executable code associated with the target structure is examined comparing known modules against suspect modules to identify the bad string.

Following the performance of steps or the dump is scanned to identify each instance of the string step . Systrace entries are then scanned starting at a bottom entry to determine if the address of the bad string is contained within a particular block of data step . In one embodiment the scan of systrace entries involves searching through every GETMAIN request as previously described.

If the address of the bad string is contained within the block the PSW for the entry is obtained step . Again one of the following steps and may be performed to identify the storage owner. In step an IPCS WHERE command is issued against the address. In step a search is made backwards from the address in the PSW for an eye catcher. In one embodiment this search may involve a comparison between known OEM eye catchers in a database as previously described. Finally in step an eye catcher may be developed as previously described such as by designating a constant string as such. The eye catcher may be added to the database of known eye catchers for subsequent analysis. The method then ends step .

Reference throughout this specification to one embodiment an embodiment or similar language means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus appearances of the phrases in one embodiment in an embodiment and similar language throughout this specification may but do not necessarily all refer to the same embodiment.

Some of the functional units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may for instance comprise one or more physical or logical blocks of computer instructions which may for instance be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which when joined logically together comprise the module and achieve the stated purpose for the module.

Indeed a module of executable code may be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices and may exist at least partially merely as electronic signals on a system or network.

While one or more embodiments of the present invention have been illustrated in detail the skilled artisan will appreciate that modifications and adaptations to those embodiments may be made without departing from the scope of the present invention as set forth in the following claims.

