---

title: Fault tolerance and maintaining service response under unanticipated load conditions
abstract: A system and method is disclosed for allocating servers across a large number of applications and for providing a predictable and consistent service response under conditions where the use of the service and associated loads is driven by unknown factors. The invention provides fault tolerance within an application through multiple resources per application and fault tolerance across applications by limiting the overlap in resources between applications. The computational load on the service may include both individual processing time due to the complexity of a single request and the number of requests. Complexity may be unpredictable because the service is self-provisioned and may allow service users to create an arbitrary sequence of compound processing steps. The number of requests may vary due to a variety of events, including daily, seasonal, or holidays, or factors driven more directly by the user of the service, such as sales, advertising, or promotions. The invention throttles server loads to provide managed degradation of application processing. The system has application in personalization, behavioral targeting, Internet retailing, personalized search, email segmentation and ad targeting, to name but a few applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09094262&OS=09094262&RS=09094262
owner: CERTONA CORPORATION
number: 09094262
owner_city: San Diego
owner_country: US
publication_date: 20121230
---
The present invention relates to managing the infrastructure of web based services including web farms and virtualized servers. Particularly the invention relates to allocating network and computing resources and managing service response degradation to have the least impact on service users. The invention provides a means of non redundant server allocation and throttling service processing. The system has application in personalization behavioral targeting Internet retailing email segmentation and ad targeting to name but a few applications.

The present invention relates to the management of pooled resources to support multiple clients and applications. When there are multiple applications it is beneficial to have those applications share the same resources. This is because different applications may have different loads at different times or may have different memory configurations or may otherwise consume resources in a variable way that results in increased effective load capacity if the resources are shared. This reduces the inefficiency of providing dedicated resources to each application in anticipation of each application s individual peak load vs. the inefficiency of providing dedicated resources that will mostly be idle during non peak periods the so called assigned parking problem . While assigning multiple applications to the same resources levels the peaks of normal variable loads it does not handle the case where one application has an unexpected overload that cannot be handled by the resource pool.

This can occur for example when the consumers of the system self provision resource intensive requests whereby the complexity may be unpredictable because the service is self provisioned and may allow service users to create art arbitrary sequence of compound processing steps. The number of requests may also vary significantly due to a variety of events including daily seasonal or holidays or factors driven more directly by the user of the service such as sales advertising or promotions. In this case we desire some configuration that retains the benefits of load balancing shared resources while at the same time limiting the exposure of one application to another application s overload.

The present invention also relates to load balancing whereby the requests to the service are managed through a single IP address but then distributed internally to one of a group of servers or web farm. The web farm may be physical or virtual. Particularly as resources become virtualized it is possible to dynamically create large virtual web farms. As these web farms become larger it becomes both more difficult and more important to be able to maintain cost efficient configurations while still maintaining adequate resource headroom for peak loads. The present invention addresses the shortcomings of existing server management configurations to both minimize the exposure of one application to another through partial redundancy and to limit the consumption of resources within an application. This allows the web service to be scaled to large numbers of client applications with complex processing logic and dynamic and unexpected loads.

In accordance with the present invention a method and system is presented for distributing the load from separate applications across multiple shared resources whereby the resources allocated to one application are partially but not fully overlapping with other applications. This occurs for example with web based services which are sometimes described as software as a service or SaaS. In the event that one application has an unexpected and unsupportable load that might impact the experience of an end user this configuration allows the other applications to continue to function normally by directing their requests to non overlapping servers or other resources. The present invention also mitigates the degradation of the service by throttling the processing steps within the service to provide a good enough result that is returned in a predictable and acceptable period of time.

An object of the invention is to provide a web based service that can support multiple client applications within a common service infrastructure.

Another object of the invention is to optimally distribute the applications to resources in a way that maximizes the headroom available to each application while at the same time minimizing the exposure of one application to any other application in the event of an unexpected load on another application.

Another object of the invention is to autonomously provision additional resources such as virtual servers or cloud servers when the service load exceeds a critical threshold and conversely to un provision resources when they are no longer needed thereby reducing the cost of operating the service without affecting quality of service.

Another object of the invention is to support client applications that are self provisioned and that may contain a number of complex processing steps including lookup tables business rules predictive model processing and database retrieval.

Another object of the invention is to provide a predictable service response time regardless of the complexity of the self provisioned logic.

Another object of the invention is to automatically reduce the time spent on any one step in a complex logic chain in order to increase the likelihood that the response will be filled within the target response time.

The present invention is a system and method for allocating resources and managing logic processing. A key improvement of the invention over other systems is that the system can automatically allocate and manage resources based on measured resource consumption. This autonomy allows the system to support large numbers of client applications whereby each application may have complex self provisioned logic and may have unexpected loads.

A subject interacts with the user interface. The user interface makes a request to the recommendation system which returns personalized content based on the context of the request where the context of the request includes the identity of the subject the specific type of system such as desktop computer or mobile phone the physical location of the subject the specific page of the application being viewed or any other known attributes that may be relevant to determining the interest or intent of the subject. In addition to requesting and displaying recommended content the user interface submits information on the activity of the subject including whether the subject completes a desired or targeted outcome such as making a purchase booking a hotel completing a survey accepting an offer or any other conversion event for the site. The recommendation system stores all of the recommendation requests and subject outcomes which are used to build subject profiles in accordance with the present invention.

The predictive segmentation models content metadata and any additional business rules logic are also cached on the web servers for faster match generation during live operation. In order to process an arbitrarily large number of visitors the web servers are multiplexed using a load balancer which makes a collection of web servers appear to the Internet as a single server. Also when a web server becomes unavailable or out of service for any reason the load balancer automatically transfers traffic to another server. This provides a high level of fault tolerance for the system. In order to provide additional service availability the database and web servers can be replicated to other data centers through geographic load balancing. Note that in this embodiment the service has been distributed over multiple servers. In an alternative embodiment all of the functions of the service could be put onto a single or smaller set of servers without a substantive change in the overall functionality of the service. This embodiment also supports multiple Service Customers making simultaneous requests to the web services by allocating different requests to different subsets of servers in the server farm and by creating a separate database for each Service Customer.

This can be done on the browser itself using JavaScript or on the web server using web logging or packet sniffing or using other data transfer mechanisms as appropriate to the service customer. Regardless of how this is done the web analytics submits data via a web service call to the data collector. To display customized content the website requests information from the recommendation engine. The output of the recommendation engine is fed through the content management module to get the display attributes of the recommended content and then displayed on the website.

The content management module not only generates content for the website it also feeds content information metadata to the catalog management module which stores both information necessary to display content and descriptive attributes that may be applied to filter targeted content according to website defined business rules or objectives. When a request is made to the recommendation engine for targeted content the recommendation engine combines the subject profiles with the catalog metadata to find the optimal content subject to any business rules or other restrictions put on the results.

More generally consider that there is a pool of servers K which may be virtual or physical. Each server has a load capacity Fand a memory capacity G and other resource capacity H . Consider also a pool of applications N which each consume an average load Land memory M or other resource R . In order to service the load L the application needs to be distributed over a minimum number of servers S where S

The optimal ratio of servers per client to total number of servers is 0.5 times the total number of servers plus one added for an odd number of servers.

If the least impacted server is below a specified threshold for example 30 CPU utilization then the most impacted application is expanded to that server while observing the avoidance of redundant assignment of two applications to the same set of servers. If the least impacted server is above the threshold then a new server is introduced into the pool and the roost impacted application is expanded to that server.

The server pools can be contracted by applying the system in reverse. If the most impacted server falls below a given threshold such as 20 CPU utilization then the least impacted server would be removed from the pool and the resource rankings re calculated. Removal of unneeded servers is particularly critical with provisioned resources such as cloud computing where there is a cost associated with the use of a server that can be avoided by using the invention.

For the example above the allowed time effectively goes to zero at 80 CPU utilization. Although this means that the service will not return any results this may preferable to the case of unacceptable response time because the service may only provide a subset of the overall content of a larger service and receiving the content of the larger service in a timely fashion provides and better experience than receiving the full content with an unacceptably slow response. In this way the invention provides a managed graceful degradation of service response under conditions that would otherwise result in the service becoming non responsive due to overload.

The invention may be used on a single server or a collection of servers or server farm whereby the load of the service is shared by the servers according to their processing capacity and availability. Usually a network component called a load balancer is used to distribute the incoming requests to the various servers. When the invention is used in conjunction with a load balanced server farm the mechanism used for balancing the load becomes important to avoid instability of the service. For example a load balancer may use one of the following strategies 

The above application embodiments are for example only. The invention does not restrict the design and implementation of the application in any way as long as the interface to the recommendation engine matches the protocols defined by the interface guidelines. A key aspect of the invention is that unlike other methods it automatically allocates disparate application loads to a pool of servers web farm .

Another aspect of the invention is that it isolates and minimizes the exposure of one application to another in the event of a single application fault or abnormal load.

Another aspect of the invention is that it allows automatic expansion and contraction of resources which reduces the cost of operating the system.

Another aspect of the invention is that it is fault tolerant to inefficient or ineffective logic steps.

Another aspect of the invention is that it ensures that the system always responds under heavy loads and mis configured logic.

Another aspect of the invention is that provides a good enough result with acceptable response times.

The foregoing description of a preferred embodiment has been presented by way of example only and should not be read in a limiting sense. The scope of the present invention is defined only by the following claims.

In the claims reference characters used to designate claim steps are provided for convenience of description only and are not intended to imply a particular order for performing the steps.

