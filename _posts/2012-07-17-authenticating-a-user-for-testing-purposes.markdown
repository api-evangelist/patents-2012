---

title: Authenticating a user for testing purposes
abstract: Authenticating a user for testing purposes. A web server receives a request from a client that includes an authentication credential and that is formatted to be handled by a particular authentication module. The authentication module is configured to obtain authentication tokens based on authentication credentials included in requests, while refraining from generating any interactive authentication dialog. Based on the request, the web server passes at least a portion of the request, including the authentication credential, to the authentication module. The authentication module determines that the request is formatted in a manner that triggers the authentication module. The authentication module obtains an authentication token from an identity provider based on the authentication credential, while refraining from generating any interactive authentication dialog. The authentication module returns the authentication token to the web server. The web server returns the authentication token to the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08904510&OS=08904510&RS=08904510
owner: Microsoft Corporation
number: 08904510
owner_city: Redmond
owner_country: US
publication_date: 20120717
---
When developing software applications developers may employ automated testing tools that exercise functionality of software applications with minimal or no user input from a human during the testing cycle. Automated testing tools may employ Application Programming Interfaces APIs provided by applications and operating systems to send commands to the software application being tested in order to interact with the software application e.g. to select menu options to provide textual input to press buttons etc. . For example when developing a web based software application web application a developer may employ automated testing tools that utilize APIs of a web browser to interact with the web application. For example automated testing tools may utilize web browser APIs to select Hypertext Markup Language HTML links to interact with popup dialogue boxes to provide textual input to text fields etc.

Frequently web applications include authentication mechanisms. For example an e mail web application may request user authentication before granting access to the e mail web application. The request for user authentication may cause a web browser to display a popup authentication dialogue which includes fields for a user to provide user credentials e.g. username and password and one or more buttons e.g. for submitting the user credentials for dismissing the dialogue etc. . To authenticate a user would typically provide user credentials and select a button for submitting the credentials which would result in access to e mail web application if the user credentials are valid. Accordingly automated testing of web applications may involve dealing with authentication that involves use of popup authentication dialogues.

One way to perform authentication during automated testing involves providing a back door into the web application. For example a developer may include functionality for accessing the web application in a manner that bypasses user authentication. However since inclusion of back doors introduces a significant security risk developers may include the back door only in a testing version of the web application. This means that the developer must maintain at least two separate versions of the web application including the testing version and a live version. This also means that automated testing tools only test the testing version of the web application and not the live version that is actually deployed.

Another way to perform authentication during automated testing is to include functionality in the automated testing tools for automatically supplying user credentials in any authentication dialogues that are displayed by a web browser. For example an automated testing tool may be programmed to provide a particular username in a username field of an authentication dialogue to provide a particular password in a password field of the dialogue and to press an ok button of the dialogue. However different web browsers display authentication dialogues in different ways. For example an authentication dialogue from one web browser may include a username and a password field along with a submit and a cancel button while an authentication dialogue from another web browser may include an account name and a passphrase field along with an ok and a dismiss button. In addition different web browsers may provide different APIs for interacting with authentication dialogues. Each type of web browser may even change the way it presents authentication dialogues from version to version. As such programming automated testing tools to automate use of authentication dialogues can be difficult especially when supporting a broad range of web browsers and a large number of versions of the web browsers.

At least some embodiments described herein relate to authenticating a user for testing purposes. For example embodiments may include triggering a web server authentication module that obtains authentication tokens based on user credentials while refraining from generating any interactive authentication dialogue. As such some embodiments can facilitate automated authentication during testing of web application code that is intended for deployment while eliminating the need for authentication related back doors.

In some embodiments authenticating a user for testing purposes includes a web server receiving a request from a client. The request includes an authentication credential and is formatted in a particular manner for being handled by a particular authentication module that is registered with the web server. The authentication module is configured to obtain authentication tokens based on user credentials included in requests that are formatted in the particular manner while refraining from requesting any interactive authentication dialogue. Based on the request the web server consults a set of authentication modules that includes the authentication module. Consulting the set of authentication modules includes passing a portion of the request including the authentication credential to the authentication module. Based on consulting the set of authentication modules the web server obtains an authentication token from the authentication module. The web server returns the authentication token to the client.

In other embodiments authenticating a user for testing purposes includes an authentication module at a web server receiving a request to authenticate. The request is formatted in a particular manner that triggers the authentication module as opposed to other authentication modules at the web server. The authentication module determines that the request is formatted in the particular manner. Based on the determination the authentication module extracts an authentication credential from the request. Based on the extracted authentication credential the authentication module obtains an authentication token from an identity provider while refraining from generating any interactive authentication dialogue. The authentication module returns the authentication token.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

At least some embodiments described herein relate to authenticating a user for testing purposes. For example embodiments may include triggering a web server authentication module that obtains authentication tokens based on user credentials while refraining from generating any interactive authentication dialogue. As such some embodiments can facilitate automated authentication during testing of web application code that is intended for deployment while eliminating the need for authentication related back doors.

Computer architecture also includes identity provider that is operably coupled to server . Identity provider is configured to verify provided authentication credentials and to return authentication tokens when provided authentication credentials are valid. Identity provider may be a service e.g. a directory service a database an application a module etc. at server or identity provider may be a third party. Identity provider can generate authentication tokens that are based on the authentication credentials that were provided to identity provider . For example an authentication token may identify the authentication credential for which it was generated an authentication credential may be used as a seed for generating an authentication token etc.

Client includes web browser and automated testing tool which are operably coupled to one another as depicted by arrow . Web browser may provide or otherwise expose a set of APIs to automated testing tool . Automated testing tool may in turn use the APIs that are provided exposed by web browser to provide input to and otherwise control web browser . Automated testing tool may also use the APIs that are provided exposed by web browser to receive data from web browser .

Automated testing tool is configured to test functionality of web application at server by using web browser to access web application through one or more requests to web server . For example using APIs exposed by web browser automated testing tool can use web browser to initiate one or more requests to web server and by extension web application . In addition using APIs exposed by web browser automated testing tool can analyze one or more responses received by web browser from web server and by extension web application . For example using web browser automated testing tool can select links and other graphical elements of web application as presented by web browser and can provide input to data fields of web application as presented by web browser etc.

Server includes web server which interoperates with and provides access to web application . Server may comprise a singular physical server or a single virtual machine instance in which case web application and web server are embodied together at the singular physical server or the single virtual machine instance. Server may alternatively comprise a plurality of physical servers and or a plurality of virtual machine instances in which case web application and web server may each be embodied at different physical server s and or virtual machine instance s . In some embodiments web application and web server are logically separated e.g. web application may include one or more modules that execute separate from web server . In some embodiments web application and web server are at least partially integrated e.g. web application may include one or more modules that are loaded at and or execute within web server .

Generally web server is configured to serve documents and other data to web browsers at clients such as web browser at client . More particularly web server is configured to expose documents and other data of web application to the clients. For example web server may receive one or more requests from client . Based on the request s web server may respond to client with one or more documents or other data from web application . For example a request from client to web server may comprise a HyperText Transport Protocol HTTP request relating to web application and a response from web server to client may comprise a HTTP response containing documents or data relating to web application . The response may include one or more HyperText Markup Language HTML documents eXtensible Markup Language XML documents picture data video data and the like.

Web server includes authentication modules for performing authentication related to providing clients access to web application . For example web application may require that users clients be authenticated before granting the users clients access to all or part of the functionality of web application e.g. before granting access to one or more documents at web application . Authentication modules includes a set of one or more modules that each perform authentication in a different manner based on requests from clients to access restricted functionality of web application . Each authentication module in the set may perform authentication using a different type of authentication technology. For example authentication modules may include modules that perform authentication using Kerberos NT LAN Manager NTLM digest basic etc. In some embodiments web server includes a prioritized order of authentication modules. In these embodiments web server tries to authenticate a request using each module in turn according to the prioritized order until an authentication module is encountered that is able to perform authentication for the request. In some embodiments web server negotiates with a requesting web browser to identify one or more of the authentication modules that are supported by both web server and the requesting web browser.

Conventionally authentication modules used by a web server cause an authentication dialogue to be generated at a requesting client. For example in response to a request to access restricted functionality of a web application a conventional authentication module may cause a web server to send a response to the requesting client. The response is conventionally configured to cause the requesting client to present an interactive authentication dialogue which enables entry of an authentication credential at the client. After entry of the authentication credential at the authentication dialogue the requesting client browser sends the authentication credential to web server for validation. When the conventional authentication module receives the authentication credential that was provided in the authentication dialogue the conventional authentication module authenticates the credential using the particular technology implemented by the module. As such conventional authentication modules require some form of interactivity at client to authenticate to a web application.

While authentication modules may include one or more conventional authentication modules computer architecture enables automated authentication of a user for testing purposes by including a new type of authentication module that authenticates without causing an authentication dialogue to be generated. As depicted authentication modules includes authentication module which is registered at web server and which is configured to authenticate a user without causing any visual authentication dialogue to be presented at the client. Authentication module is configured to handle requests that are formatted in a particular manner and that include an authentication credential. For example a particularly formatted request may include a specially formatted Uniform Resource Locator URL e.g. a particular variable or a particular value in a query string particular data in a cookie particular data in a HTTP header etc. In some embodiments inclusion of an authentication credential causes the request to be formatted in the particular manner.

As such automated testing tool can be configured to leverage authentication module to authenticate to web application without encountering an authentication dialogue. For example automated testing tool may cause web browser to send a request to access restricted functionality of web application to web server . The request can be formatted in the particular manner so that the request is authenticated by authentication module as opposed to any other authentication module. For example the request may include a particular variable or value in a URL particular data in a cookie or particular data in a HTTP header. The request can include an authentication credential. When web server receives the request web server can validate the request using authentication module as opposed to any other authentication module. In some embodiments web server tries each authentication module in a prioritized order and authentication module is the first authentication module in the prioritized order. In this embodiment the request is handled by authentication module and any subsequent modules in the list are skipped. In some embodiments authentication module is tried after other authentication modules have been unable to authenticate the request because of the manner in which the request has been formatted.

As such automated testing tool can test web application without coding any back door into web application and while testing the actual code of web application that is being deployed. Doing so also simplifies automated testing tool since it does not have to adapt to varying APIs related to authentication dialogues. If desired authentication module can be registered at web server only when web application is being tested and or identity provider can authorize testing credentials only during a testing period.

Method comprises an act at client of requesting access to a web application. For example automated testing tool can cause web browser to send a request to web server to authenticate to web application . Because automated testing tool is authenticating for testing purposes automated testing tool can cause web browser to send a request that is formatted in a particular manner so that it is handled by authentication module which authenticates requests without causing an authentication dialogue to be presented at web browser . For example automated testing tool can cause web browser to send a request that includes a particular URL query string particular cookie data particular HTTP header data etc. Automated testing tool can cause web browser to send a request that includes an authentication credential such as a user credential.

Method also comprises an act at web server of receiving a request to access a web application. Act can include an act of the web server receiving a request from a client the request including a particular authentication credential and being formatted in a particular manner for being handled by a particular authentication module that is registered with the web server the particular authentication module being configured to obtain authentication tokens based on authentication credentials included in requests that are formatted in the particular manner while refraining from requesting any interactive authentication dialogue. For example web server can receive the request that was described above in connection with act . As such the request that is received can include a particular URL query string e.g. variable or value a particular cookie data a particular HTTP header data etc. that causes the request to be handled by authentication module that is registered with web server . The request can include an authentication credential provided by automated testing tool to web browser .

Method also comprises an act at web server of consulting a set of authentication modules. Act can include based on the request an act of the web server consulting a set of authentication modules that includes the particular authentication module consulting the set of authentication modules including passing at least a portion of the request including the particular authentication credential to the particular authentication module. For example web server can pass at least a portion of the request to authentication module including passing a particular URL query string particular cookie data particular HTTP header data etc. Web server can pass at least the authentication credential to authentication module . In some embodiments web server consults each authentication module in a priority order until an authentication module is able to successfully return an authentication token.

Method also comprises an act at authentication module of receiving a request to authenticate. Act can include an act of the particular authentication module at the web server receiving a request to authenticate the request being formatted in a particular manner that triggers the particular authentication module as opposed to one or more other authentication modules at the web server. For example authentication module can receive the portion of the request e.g. a particular URL query string particular cookie data or particular HTTP header data including the authentication credential from web server . Authentication module may receive the portion of the request prior to any other authentication module being consulted by web server e.g. because authentication module is first on a priority list or authentication module may receive the portion of the request of the request after one or more other authentication modules have been consulted by web server e.g. because the other authentication modules could not process the request .

Method also comprises an act at authentication module of determining that the request is formatted in a particular manner. Act can include an act of the particular authentication module determining that the request is formatted in the particular manner that triggers the particular authentication module. For example authentication module can identify that the portion of the request that was received from web server includes a particular URL query string particular cookie data particular HTTP header data etc. For example authentication module can identify that the portion of the request that was received from web server includes the authentication credential.

Method also comprises an act at authentication module of extracting an authentication credential. Act can include based on determining that the request is formatted in the particular manner that triggers the authentication module an act of the particular authentication module extracting a particular authentication credential from the request. For example authentication module can extract the authentication credential from a URL query string cookie data HTTP header data etc.

Method also comprises an act at authentication module of obtaining an authentication token while refraining from generating an authentication dialogue. Act can include based on the particular authentication credential that was extracted from the request an act of the particular authentication module obtaining a particular authentication token from an identity provider while refraining from generating any interactive authentication dialogue. For example authentication module can consult identity provider to verify the particular authentication credential and to obtain an authentication token if the particular authentication credential is valid. Consulting identity provider can include consulting a directory service comparing the authentication credential against a database etc.

If authentication module is unable to obtain an authentication token from identity provider authentication module can communicate such information to web server . For example authentication module may route an error message from identity provider to web server return a false result etc. When authentication module is unable to obtain an authentication token from identity provider web server may attempt to authenticate the request against a different authentication module.

Method also comprises an act at authentication module of returning the authentication token. Act can include an act of the particular authentication module returning the particular authentication token. For example authentication module can return to web server the authentication token that was obtained from identity provider .

Method also comprises an act at web server of obtaining an authentication token act . Act can include based on consulting the set of authentication modules an act of the web server obtaining a particular authentication token from the particular authentication module. For example web server can receive the particular authentication token that was returned by authentication module

Method also comprises an act at web server of returning the authentication token. Act can include an act of the web server returning the particular authentication token to the client. For example web server can generate a response that is sent to client . The response can include the particular authentication token.

Method also comprises an act at client of receiving the authentication token. For example client can receive the request that was sent by web server in act .

As such the embodiments described herein include triggering a web server authentication module that obtains authentication tokens based on user credentials while refraining from generating any interactive authentication dialogue. Some embodiments can facilitate automated authentication during testing of web application code that is intended for deployment while eliminating the need for authentication related back doors.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the described features or acts described above or the order of the acts described above. Rather the described features and acts are disclosed as example forms of implementing the claims.

Embodiments of the present invention may comprise or utilize a special purpose or general purpose computer system that includes computer hardware such as for example one or more processors and system memory as discussed in greater detail below. Embodiments within the scope of the present invention also include physical and other computer readable media for carrying or storing computer executable instructions and or data structures. Such computer readable media can be any available media that can be accessed by a general purpose or special purpose computer system. Computer readable media that store computer executable instructions and or data structures are computer storage media. Computer readable media that carry computer executable instructions and or data structures are transmission media. Thus by way of example and not limitation embodiments of the invention can comprise at least two distinctly different kinds of computer readable media computer storage media and transmission media.

Computer storage media are physical storage media that store computer executable instructions and or data structures. Physical storage media includes recordable type storage devices such as RAM ROM EEPROM solid state drives SSDs flash memory phase change memory PCM optical disk storage magnetic disk storage or other magnetic storage devices or any other physical medium which can be used to store program code in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer system.

Transmission media can include a network and or data links which can be used to carry program code in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer system. A network is defined as one or more data links that enable the transport of electronic data between computer systems and or modules and or other electronic devices. When information is transferred or provided over a network or another communications connection either hardwired wireless or a combination of hardwired or wireless to a computer system the computer system may view the connection as transmission media. Combinations of the above should also be included within the scope of computer readable media.

Further upon reaching various computer system components program code in the form of computer executable instructions or data structures can be transferred automatically from transmission media to computer storage media or vice versa . For example computer executable instructions or data structures received over a network or data link can be buffered in RAM within a network interface module e.g. a NIC and then eventually transferred to computer system RAM and or to less volatile computer storage media at a computer system. Thus it should be understood that computer storage media can be included in computer system components that also or even primarily utilize transmission media.

Computer executable instructions comprise for example instructions and data which when executed at one or more processors cause a general purpose computer system special purpose computer system or special purpose processing device to perform a certain function or group of functions. Computer executable instructions may be for example binaries intermediate format instructions such as assembly language or even source code.

Those skilled in the art will appreciate that the invention may be practiced in network computing environments with many types of computer system configurations including personal computers desktop computers laptop computers message processors hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers mobile telephones PDAs tablets pagers routers switches and the like. The invention may also be practiced in distributed system environments where local and remote computer systems which are linked either by hardwired data links wireless data links or by a combination of hardwired and wireless data links through a network both perform tasks. As such in a distributed system environment a computer system may include a plurality of constituent computer systems. In a distributed system environment program modules may be located in both local and remote memory storage devices.

Those skilled in the art will also appreciate that the invention may be practiced in a cloud computing environment. Cloud computing environments may be distributed although this is not required. When distributed cloud computing environments may be distributed internationally within an organization and or have components possessed across multiple organizations. In this description and the following claims cloud computing is defined as a model for enabling on demand network access to a shared pool of configurable computing resources e.g. networks servers storage applications and services . The definition of cloud computing is not limited to any of the other numerous advantages that can be obtained from such a model when properly deployed.

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

