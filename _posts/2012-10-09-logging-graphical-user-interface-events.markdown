---

title: Logging graphical user interface events
abstract: The disclosed subject matter relates to computer implemented methods for logging graphical user interface events. In one aspect, a method includes receiving from a server, an identifier for a user interface element of a graphical user interface. The method further includes detecting a user interface event associated with the user interface element. The user interface event associated with the user interface element can be an operation performed on the user interface element or an effect caused by the operation performed on the user interface element. The method further includes entering into a log, the identifier for the user interface element and the user interface event associated with the user interface element. The method further includes sending the log to the server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09317391&OS=09317391&RS=09317391
owner: Google Inc.
number: 09317391
owner_city: Mountain View
owner_country: US
publication_date: 20121009
---
A computer user typically interacts with a client server application via a graphical user interface GUI installed on a client computing device. In the course of this interaction the user can perform a variety of actions using input devices such as a mouse and a keyboard. Understanding the user s actions and the corresponding effects can assist in understanding how the user interacts with the application.

The disclosed subject matter relates to a computer implemented method for logging client side events of a graphical user interface for a client server application. The method includes displaying on a client device a graphical user interface for a client server application. The graphical user interface includes a plurality of user interface elements. Each of the plurality of user interface elements has an identifier. The identifiers are communicated to the client device by a server. The method further includes detecting a first user interface event including a user interaction with a first user interface element of the plurality of user interface elements. The method further includes generating a first log entry in a log stored on the client device. The first log entry includes the first user interface event and the respective identifier associated with the first user interface element. The method further includes updating at least one of the plurality of user interface elements in the displayed graphical user interface in response to the first user interface event. A second user interface event includes the updating of the at least one of the plurality of user interface elements in the displayed graphical user interface. The method further includes generating a second log entry in the log stored on the client device. The second log entry includes the second user interface event and the respective identifier for each of the at least one of the plurality of user interface elements updated in the second user interface event. The method further includes sending the log stored on the client device to the server.

The disclosed subject matter further relates to a computer implemented method for logging graphical user interface events. The method includes receiving from a server an identifier for a user interface element of a graphical user interface. The method further includes detecting a user interface event associated with the user interface element. The user interface event associated with the user interface element can be an operation performed on the user interface element or an effect caused by the operation performed on the user interface element. The method further includes entering into a log the identifier for the user interface element and the user interface event associated with the user interface element. The method further includes sending the log to the server.

The disclosed subject matter further relates to a computer implemented method for logging graphical user interface events. The method includes generating an identifier for a user interface element of a graphical user interface. The method further includes providing the identifier to a logging component on a client device. The logging component is configured to detect and enter into a log a user interface event associated with the user interface. The method further includes receiving the log from the logging component. The method further includes replaying based on the received log the user interface event associated with the user interface element.

It is understood that other configurations of the subject technology will become readily apparent to those skilled in the art from the following detailed description wherein various configurations of the subject technology are shown and described by way of illustration. As will be realized the subject technology is capable of other and different configurations and its several details are capable of modification in various other respects all without departing from the scope of the subject technology. Accordingly the drawings and detailed description are to be regarded as illustrative and not restrictive in nature.

The detailed description set forth below is intended as a description of various configurations of the subject technology and is not intended to represent the only configurations in which the subject technology can be practiced. The appended drawings are incorporated herein and constitute a part of the detailed description. The detailed description includes specific details for the purpose of providing a more thorough understanding of the subject technology. However it will be clear and apparent to those skilled in the art that the subject technology is not limited to the specific details set forth herein and may be practiced without these specific details. In some instances well known structures and components are shown in block diagram form in order to avoid obscuring the concepts of the subject technology.

Many applications have a client server implementation. In a client server implementation some of the software instructions can be executed on a server where the application may be hosted and some of the software instructions can be executed on a client device accessing the application.

The execution of some of the software instructions on the client computing device can occur without a data request being sent to the server. Thus a logging method implemented solely on the server server only implementation can not detect and log all the events that occur on the client device. Consequently the log s generated by the server only implementation can not be used to replay all the events that occurred on the client device.

The subject technology relates to logging graphical user interface events that occur on a client device accessing a client server application. One example of a client server application is a web based application which may also be referred to as a web application.

The subject technology involves displaying a graphical user interface for the client server application on a client device. The graphical user interface includes user interface elements. Each of the user interface elements have identifier.

The identifiers associated with the user interface elements are generated at a server. The identifiers are then communicated to the client device by the server. The client device accessing the client server application includes a logging component that can receive the identifiers communicated by the server.

The logging component detects user interface events associated with the user interface elements of the graphical user interface. A user interface event can include a user interaction with a user interface element. In response to that user interaction that same user interface element or a different user interface element may be updated based on the underlying software instructions of the graphical user interface. For example a user interface element may be updated to be displayed at a different location within the graphical user interface may no longer be visible within the graphical user interface and or may be made visible within the graphical user interface. That is an update can include a change in appearance visibility size and or location of one or more user interface elements.

The updating of the same user interface element or the different user interface element is also a user interface event which is detected by the logging component.

Either or both user interface events may occur in a manner that they are not directly communicated to the server. That is either one or both the user interface events may be purely client side user interface events.

For each detected user interface event the logging component generates a log entry which is stored in a log on the client device. Each log entry includes the user interface event and the respective identifier. Thus in a case where a user interaction with a first user interface element causes a change in a second user interface element two separate user interface events are generated by the logging component and stored in the log.

The logging component can be configured to detect and or generate into the log specific types of user interface events at specific frequencies.

The log is sent from the client device to the server. The log may be stored at the server. The log may be used to replay user interface events recorded therein. For example an administrator may use the log to replay one or more of the user interface events. Replaying the user interface events can provide insight into a user s interaction with the graphical user interface of the client server application. As an example the log may be used to determine how often a particular user interface element e.g. a menu item is used.

The client devices can be for example mobile computers tablet computers mobile devices e.g. a smartphone or PDA desktop computers set top boxes e.g. for a television video game consoles or any other devices having appropriate processing capabilities communications capabilities and memory. Each client device is configured to include an input device for accepting user input and an output device to display information to the user.

The client devices can be connected to the network . The network can include any one or more of a personal area network PAN a local area network LAN a campus area network CAN a metropolitan area network MAN a wide area network WAN a broadband network BBN the Internet and the like. Further the network can include but is not limited to any one or more of the following network topologies including a bus network a star network a ring network a mesh network a star bus network tree or hierarchical network and the like.

The servers can be for example stand alone servers shared servers dedicated servers cluster grid servers e.g. a server farm or cloud servers. Each of the servers may include one or more processors communications modules and memory. The servers may be configured to distribute workload e.g. for loadbalancing across multiple servers.

The client device includes an input device an output device a processor a communications module and memory . The input device can be a touchscreen a mouse a keyboard or any other device to enable a user to supply input to the client device . The output device can be a display screen. Input received via the input device can be processed locally on the client device and or the server .

The client device is connected to the network via a communications module . The communications module is configured to interface with the network to send and receive information such as data requests responses and commands to other devices on the network . The communications module can be for example a modem or Ethernet card.

The memory includes a graphical user interface for a client server application. The graphical user interface can include several user interface elements. The graphical user interface of the client server application may be downloaded from the server and or installed locally at the client device .

The memory includes a logging component . The logging component can be implemented using a variety of approaches. For example the logging component can be implemented as a standalone executable a plug in e.g. for a web browser or a background service. The logging component can be implemented as software instructions e.g. a JavaScript binary which are executed by the application e.g. a web browser accessing the client server application e.g. a web application . The software instructions may be embedded within the client server application and or loaded simultaneously with the client server application.

The logging component detects user interface events that occur within the graphical user interface . Upon detecting user interface events the logging component enters them into a log . A user interface event can be an operation performed by a user on a user interface element of the graphical user interface or an effect caused by that operation to the user interface element or to some other user interface element within the graphical user interface .

An operation performed by the user on the user interface element may be referred to as an explicit action. Different types of input devices can be used to perform different types of explicit actions. For example a computer mouse can be used to perform explicit actions such as click double click scroll hover drag and or drop operations. Similarly a keyboard can be used to perform explicit actions such as providing keystrokes corresponding to alphabet numeral arrow function and command keys.

The effect caused by an operation performed on a user interface element may be referred to as an implicit action. An implicit action is one which is not expressed directly by the user. As an example the user may click on a first user interface element thereby selecting it. Subsequently the user may click on a second user interface element thereby deselecting the first user interface element. That is by explicitly selecting the second user interface element the user implicitly deselects the first user interface element.

Changes in the visual appearance of the graphical user interface may be referred to as display changes. Display changes can be the result of explicit and or implicit actions.

The logging component may provide an application programming interface API to send and receive information. As an example of receiving information the logging component can receive parameterization commands via the API.

A parameterization command can be used to set a level of detail for the user interface events which are entered into the log . For example parameterization commands can be used to define the type of user interface events to be entered into the log .

Using parameterization commands the logging component can be configured to detect and enter into the log a subset of user interface events. Detecting and or entering a subset of events into the log may be referred to as sampling. The level of detail of sampling is referred to as a sample rate.

The logging component may sample user interface events at a default sample rate. However the default sample rate may be altered via a parameterization command. The sample rate e.g. the default sample rate may be altered in response to other conditions. For example the sample rate may be altered e.g. lowered or increased in response to network conditions e.g. connection speed and the total wished bandwidth.

As an example of sampling at a particular sample rate the logging component may be instructed to detect and or enter into the log events that occur anywhere in the entire graphical user interface . As another example the instruction may be directed to only a specific user interface element and or surface area of the graphical user interface . The instruction may be directed to a particular type of event or a subset thereof. For example the instruction may be directed to 100 of user interface events of a first type 50 of user interface events of a second type 5 of events of a third type and so on.

The logging component can also enter into the log temporal session related and or environmental information. As an example of temporal information the logging component can include in the log a timestamp for user interface events. The timestamp corresponds to the time at which the user interface event occurs on the client device .

As an example of session related information the logging component can include in the log an identifier associated with a particular session. The identifier associated with the session may be generated by the server at the outset of a user s interaction session with the graphical user interface . A session identifier may be associated with one or more user interface events.

As an example of environmental information the logging component may include information related to the software and or the hardware of the client device . For example the logging component can include a listing of the hardware specifications including but not limited to the resolution of the display the speed of the processor and the size of the memory . The information related to the software can include a listing of software including the firmware installed on the client device .

The logging component can increment counter values in response to occurrences of user interface events. For example the logging component may increment a counter value corresponding to an event entry number which is assigned to each user interface event entered into the log. Based on the event entry number the entries in the log may be arranged in a sequential order.

The logging component can also increment a counter value based on interaction with a particular user interface element. For example upon detecting an operation performed on a particular user interface element the logging component can increment a counter value associated with how often a user interacts with that user interface element.

The logging component can also increment counter values for particular types of events. For example upon detecting a click on a particular user interface element the logging component can increment the counter value associated with the total number of click operations performed in a session.

The log can be sent to the server . The log can be sent in response to a request received from the server in response to a condition at the client device or at specified intervals. The conditions and or intervals may be configured at the client device by the user. The conditions and or intervals may be configured based on instructions received from the server . The conditions and or intervals may be configured based on conditions e.g. network conditions detected by the logging component .

As an example of a condition the log can be sent to the server based on the user s activity. For example if the user ceases interaction with the client device starts or exits an application or initiates a shutdown the log can be sent to the server .

Intervals can be based on elapsed time the number of user interface events or the file size of the log . For example the log may be sent every hour every 100 events or when the file size reaches 1 megabyte. The intervals may be adjusted based on conditions e.g. network conditions detected by the logging component .

The logging component may process the log before sending it to the server . For example the logging component may compress and or encrypt the log before sending it to the server . As another example the logging component may truncate the log and or divide it into smaller files.

The processor of the client device is configured to execute instructions such as instructions physically coded into the processor instructions read from the memory or a combination of both. As an example based on the instructions read from the memory the processor can be configured to execute a method for logging graphical user interface events.

Once the instructions from the memory are loaded the processor is configured to receive from a server an identifier for a user interface element of a graphical user interface e.g. . The processor is further configured to detect a plurality of user interface events associated with the user interface element. The processor is further configured to enter into a log e.g. for each of the detected user interface events the identifier for the user interface element and the respective user interface event associated with the user interface element. The processor is further configured to send the log e.g. to the server e.g. .

The server includes a memory a processor and a communications module . The memory includes software instructions that can be read by the processor to implement a logging module . The logging module generates identifiers for user interface elements of the graphical user interface . The logging module provides the identifiers to a logging component on a client device . The logging module on the client is configured to detect user interface events associated with the user interface elements. The logging component on the client is further configured to enter into the log the user interface events and the corresponding identifiers for the user interface elements. The logging module receives the log from the logging component . Based on the received log the user interface events associated with the user interface element can be replayed.

The server is connected to the network via a communications module . The communications module is configured to interface with the network to send and receive information such as data requests responses and commands to other devices on the network . The communications module can be for example a modem or Ethernet card.

The processor of the server is configured to execute instructions such as instructions physically coded into the processor instructions read from the memory or a combination of both. As an example based on the instructions read from the memory the processor can be configured to execute a method for logging graphical user interface events.

Once the instructions from the memory are loaded the processor is configured to generate an identifier for a user interface element of a graphical user interface e.g. . The processor is further configured to provide the identifier to a logging component e.g. on a client device e.g. . The logging component e.g. is configured to detect on the client e.g. a user interface event associated with the user interface element and enter into a log e.g. the user interface event associated with the user interface element. The processor is configured to receive the log e.g. from the logging component e.g. on the client device e.g. . The processor is further configured to replay based on the received log e.g. the user interface event associated with the user interface element.

An example will now be described using the example of the process of . In this example illustrated in a desktop computer will be used as the client device and a user interface of a web based mapping application will be used as the graphical user interface . The desktop computer has installed on it as a web browser plug in the logging component .

The process begins when a user uses a web browser on the desktop computer to access the mapping application to perform a location based search for pizza. The user interface of the web based mapping application is displayed on the display of the desktop computer . The user interface is illustrated in .

In step the server generates identifiers corresponding to the various user interface elements of the mapping application . In this example the server generates an identifier for a navigation menu an identifier for a search box an identifier for an area for providing search results and an identifier for an area for displaying text images and other visual data related to the search results.

The server also generates identifiers for the various sub elements of the user interface elements. In this example three search results are displayed as sub elements of the user interface element . The server generates identifiers and for these sub elements. Similarly the server generates identifiers and for sub elements of user interface element .

Sub elements may further contain other sub elements. The server generates identifiers for these sub elements as well. For example interface sub element is displayed in greater detail in . As illustrated in the server generates identifiers and for the sub elements of sub element

Referring again to user interface element displays text images and other visual data related to the results of the search query. User interface element displays information in layers. The layers correspond to search results geographical information and other visual representations of information. Geographical information can include map tiles satellite images relief maps two dimensional maps or three dimensional maps. Other layers can visually represent information related to traffic and weather.

One of the layers in user interface element includes markers corresponding to the search results displayed in user interface element . In this example interface sub elements and are geographical markers that correspond to the locations of the three pizza restaurants listed in sub elements and respectively.

In steps A and B the identifiers are provided by the server and received by the desktop computer . In step the logging component detects user interface events.

The user is interested in learning more about Joe s Pizza which is provided in interface element . The user uses the mouse pointer to hover over user interface sub element . The logging component detects the movement of the mouse and the hover event associated with user interface element . The details of user interface element are provided in more detail in .

As illustrated in user interface sub element further includes a sub element which is a pointer to the geographical location of Joe s Pizza a sub element displaying the name Joe s Pizza a sub element providing a dropdown menu a sub element providing an image of Joe s Pizza a sub element providing an address for Joe s Pizza a sub element providing a phone number for Joe s Pizza sub element providing a restaurant rating for Joe s Pizza a sub element providing excerpts of reviews and sub element which provides a link to additional reviews of Joe s Pizza.

The user reads the excerpts of reviews provided in sub element . The user then clicks on the pointer to the geographical location of Joe s Pizza. The logging component detects the user s explicit action of clicking on sub element . As a result of the click the mapping application highlights the corresponding geographical marker

The highlighting of the corresponding geographical marker is an example of an implicit action. This implicit action is also detected by the logging component .

The user then clicks and drags to the left the map area displayed in user interface sub element . In doing so the user s explicit actions include the click and drag operations associated with user interface element . The user performs these operations to view pizza restaurants that may be located to the right of user interface sub element which is the geographical marker for Pizza Shack.

As the user clicks and drags the map area to the left sub element which is the geographical marker for Pizzeria Italia exits the visible area of user interface element . That is sub element is no longer displayed. As sub element disappears the corresponding search result provided in sub element also disappears.

In step the logging component enters into the log the identifiers for user interface elements and the user interface events associated with the user interface elements.

In entering the user interface events into the log the logging component can use identifiers to selectively describe the user interface elements sub elements and layers of the graphical user interface at various levels of abstraction or detail regardless of whether they are visible to the user. Consequently the log can be created at various levels of abstraction or detail. The logging component can also include an identifier for the type of application. In this example the letter M is used as an identifier for the mapping application.

Thus at one level of abstraction the initial state of the user interface of the mapping application can be described as M . Interface elements and may be similarly described as and . Thus at a more detailed level of abstraction the user interface of the mapping application may be described as M . At an even more detailed level the user interface may be described as M 

When the user hovers the mouse pointer over the search result for Joe s Pizza displayed in user interface sub element the logging component enters the detected hover event into the log .

An event associated with a user interface element may be expressed using a path to that user interface element. The path to a user interface element is expressed hierarchically. For example the path to user interface sub element may be expressed as M or M . Thus as an example the hover event may be entered into the log as hover M or hover M . 

An event associated with a user interface element may be expressed using a description of the user interface at a particular abstraction level. For example the hover event may be entered into the log as M Hover 

When the user clicks on the map area and drags it to the left the logging component adds entries for the click and drag operations to the log . As a consequence of the click and drag operations the graphical marker for Pizzeria Italia sub elements and the corresponding search result disappeared. These changes in visibility are also entered into the log .

The logging component expresses changes in visibility using plus and minus symbols. The logging component expresses an appearance using a plus symbol and a disappearance using a minus symbol. In this example the disappearance of interface sub elements and may be expressed in the log as and 

Similar to the hover event described above changes in visibility may also be expressed using paths or a description of the user interface at a particular abstraction level. For example using the path the disappearance of interface sub element can be expressed as M or M . Similarly the disappearance of interface sub element can be expressed as M or M .

Changes in visibility can be expressed using a description of the interface at a level of abstraction. For example the disappearance of interface sub elements and can be expressed as M 

The user decides to visit Joe s Pizza and closes the web browser. In step A and B the log is sent by the client device and received by the server . While in this example the log is sent at the end of the user s session the log may be sent at any time during the session as well.

In step the log is used to replay the user interface event. That is using the log the hover click and drag operations and the corresponding changes in visibility are replayed.

Computer system e.g. client device server includes a bus or other communication mechanism for communicating information and a processor e.g. processor processor coupled with bus for processing information. By way of example the computer system may be implemented with one or more processors . Processor may be a general purpose microprocessor a microcontroller a Digital Signal Processor DSP an Application Specific Integrated Circuit ASIC a Field Programmable Gate Array FPGA a Programmable Logic Device PLD a controller a state machine gated logic discrete hardware components or any other suitable entity that can perform calculations or other manipulations of information.

Computer system can include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them stored in an included memory e.g. memory memory such as a Random Access Memory RAM a flash memory a Read Only Memory ROM a Programmable Read Only Memory PROM an Erasable PROM EPROM registers a hard disk a removable disk a CD ROM a DVD or any other suitable storage device coupled to bus for storing information and instructions to be executed by processor . The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

The instructions may be stored in the memory and implemented in one or more computer program products i.e. one or more modules of computer program instructions encoded on a computer readable medium for execution by or to control the operation of the computer system and according to any method well known to those of skill in the art including but not limited to computer languages such as data oriented languages e.g. SQL dBase system languages e.g. C Objective C C Assembly architectural languages e.g. Java .NET and application languages e.g. PHP Ruby Perl Python . Instructions may also be implemented in computer languages such as array languages aspect oriented languages assembly languages authoring languages command line interface languages compiled languages concurrent languages curly bracket languages dataflow languages data structured languages declarative languages esoteric languages extension languages fourth generation languages functional languages interactive mode languages interpreted languages iterative languages list based languages little languages logic based languages machine languages macro languages metaprogramming languages multiparadigm languages numerical analysis non English based languages object oriented class based languages object oriented prototype based languages off side rule languages procedural languages reflective languages rule based languages scripting languages stack based languages synchronous languages syntax handling languages visual languages wirth languages embeddable languages and xml based languages. Memory may also be used for storing temporary variable or other intermediate information during execution of instructions to be executed by processor .

A computer program as discussed herein does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules subprograms or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network. The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output.

Computer system further includes a data storage device such as a magnetic disk or optical disk coupled to bus for storing information and instructions. Computer system may be coupled via input output module to various devices. The input output module can be any input output module. Examples of input output modules include data ports such as USB ports. The input output module is configured to connect to a communications module . Examples of communications modules e.g. communications module communications module include networking interface cards such as Ethernet cards and modems. In certain aspects the input output module is configured to connect to a plurality of devices such as an input device e.g. input device and or an output device e.g. output device . Examples of input devices include a keyboard and a pointing device e.g. a mouse or a trackball by which a user can provide input to the computer system . Other kinds of input devices can be used to provide for interaction with a user as well such as a tactile input device visual input device audio input device or brain computer interface device. For example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech tactile or brain wave input. Examples of output devices include display devices such as a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user.

According to one aspect of the present disclosure the client device can be implemented using a computer system in response to processor executing one or more sequences of one or more instructions contained in memory . Such instructions may be read into memory from another machine readable medium such as data storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. One or more processors in a multi processing arrangement may also be employed to execute the sequences of instructions contained in memory . In alternative aspects hard wired circuitry may be used in place of or in combination with software instructions to implement various aspects of the present disclosure. Thus aspects of the present disclosure are not limited to any specific combination of hardware circuitry and software.

Various aspects of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. The communication network e.g. network can include for example any one or more of a personal area network PAN a local area network LAN a campus area network CAN a metropolitan area network MAN a wide area network WAN a broadband network BBN the Internet and the like. Further the communication network can include but is not limited to for example any one or more of the following network topologies including a bus network a star network a ring network a mesh network a star bus network tree or hierarchical network or the like. The communications modules can be for example modems or Ethernet cards.

Computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other. Computer system can be for example and without limitation a desktop computer laptop computer or tablet computer. Computer system can also be embedded in another device for example and without limitation a mobile telephone a personal digital assistant PDA a mobile audio player a Global Positioning System GPS receiver a video game console and or a television set top box.

The term machine readable storage medium or computer readable medium as used herein refers to any medium or media that participates in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media include for example optical or magnetic disks such as data storage device . Volatile media include dynamic memory such as memory . Transmission media include coaxial cables copper wire and fiber optics including the wires that include bus . Common forms of machine readable media include for example floppy disk a flexible disk hard disk magnetic tape any other magnetic medium a CD ROM DVD any other optical medium punch cards paper tape any other physical medium with patterns of holes a RAM a PROM an EPROM a FLASH EPROM any other memory chip or cartridge or any other medium from which a computer can read. The machine readable storage medium can be a machine readable storage device a machine readable storage substrate a memory device a composition of matter effecting a machine readable propagated signal or a combination of one or more of them.

While this specification contains many specifics these should not be construed as limitations on the scope of what may be claimed but rather as descriptions of particular implementations of the subject matter. Certain features that are described in this specification in the context of separate implementations of the subject technology can also be implemented in combination in a single implementation. Conversely various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the aspects described above should not be understood as requiring such separation in all aspects and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

The subject matter of this specification has been described in terms of particular aspects but other aspects can be implemented and are within the scope of the following claims. For example the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous. Other variations are within the scope of the following claims.

