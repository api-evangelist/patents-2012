---

title: System and method for parsing, summarizing and reporting log data
abstract: A system and method is disclosed which enables network administrators and the like to quickly analyze the data produced by log-producing devices such as network firewalls and routers. Unlike systems of the prior art, the system disclosed herein automatically parses and summarizes log data before inserting it into one or more databases. This greatly reduces the volume of data stored in the database and permits database queries to be run and reports generated while many types of attempted breaches of network security are still in progress. Database maintenance may also be accomplished automatically by the system to delete or archive old log data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08903836&OS=08903836&RS=08903836
owner: TIBCO Software Inc.
number: 08903836
owner_city: Palo Alto
owner_country: US
publication_date: 20120730
---
This application is a continuation of U.S. patent application Ser. No. 10 992 230 filed Nov. 18 2004 now U.S. Pat. No. 8 234 256 entitled System and method for parsing summarizing and reporting log data which claims the benefit of U.S. Provisional Patent Application Ser. No. 60 525 401 filed Nov. 26 2003 entitled System and Method for Summarizing Log Data and U.S. Provisional Patent Application Ser. No. 60 525 465 filed Nov. 26 2003 entitled System and Method for Parsing Log Data. The disclosures of all applications including their appendices are hereby incorporated by reference in their entireties.

This invention relates generally to computer network security and more particularly to a system and method for parsing summarizing and reporting log data.

Security devices such as network firewalls and routers act as data checkpoints that examine and block messages that do not meet specified device policies and security criteria. Network firewalls are frequently used to prevent unauthorized Internet users from accessing private networks connected to the Internet. Typically all messages entering or leaving a private network such as an intranet network pass through a network firewall. The network firewall protects servers workstations personal computers databases storage devices and other intranet connected devices from virulent data SPAM and attempts to breech network security. Security schemes using network firewalls generally work well when network traffic is light to moderate. For example attacks can usually be stopped using intrusion detection software. Later security staff can manually review firewall log files to assure that proper remedies have been applied and to gauge the effectiveness of the remedies.

However as network performance increases and security attacks proliferate a fundamental problem with network firewalls becomes manifest. A firewall may produce over 10 million various messages i.e. log data per day. If this data were printed as quickly as it was created it would consume a ream of paper in less than 5 minutes. At high network speeds where multiple attacks can occur over a short period of time existing firewall technology may generate such a large volume of raw log data that human review of the data after a security attack is nearly impossible. The amount of log data generated by security devices and vendors consoles can quickly overwhelm a security staff which may cause them to actually disable alarms that generate high volumes of messages. In many cases the data is simply ignored or lost.

It would be desirable to provide a system and method to capture security log data analyze it and report attack information quickly so that proper security remedies may be applied in a timely manner.

Security Administrators need to be able to capture all security log data and have a means to summarize and report attack information quickly so that proper security remedies can be applied in a timely manner. The key to being able to pull useful information from firewall log data is to summarize that data as it is produced. Summarized log data produces smaller data sets which helps lower the storage requirements and allows security administrators to more quickly query and react to the information.

In one embodiment of the system illustrated in the security server is a LogAppliance rack mounted server manufactured and sold by LogLogic Inc. The security management station manages operation and control of the security server and may request and display security reports via a security Web browser. In one embodiment the security server is configured in hardware. However the scope of the present invention comprises the implementation of the security server in software or hardware. The security management station typically executes security server driver software and security Web browser software.

The data management engine manages databases generated by the message collection engine via optimization and data aging algorithms. For example the data management engine is configured to efficiently and quickly delete old data manage large volumes of data and optimize data compression and back up routines.

The data function engine may comprise platform components such as real time reporting policy validation trend and deviation analysis security analysis and application programming interfaces APIs . For example the data function engine may process requests for a real time log data report a report compiled for a specified date or time interval or a deviation analysis report based upon a comparison of log data to security policy procedures implemented by a given firewall.

In operation the log receiver in exemplary embodiments receives log data from network security devices not shown such as Cisco PIX firewalls routers and NetScreen firewalls on a standard UDP port 514. UDP is an abbreviation for User Datagram Protocol a commonly used protocol for information that requires no response such as streaming audio and video. In addition the log receiver may receive Checkpoint log data on a TCP port 18184. In alternative embodiments the log receiver may receive log data from any type of security device or vendor specific firewall via any type of communication protocol. The log receiver then processes the log data and copies the log data to a first ring buffer . The log receiver may also copy the data to a last unapproved 100 buffer i.e. stores last 100 unapproved log messages a last 100 buffer i.e. stores last 100 log messages or a real time viewer buffer based upon log data content and processes running in the security browser window.

The log receiver may also receive and store in memory not shown security policy information from the security devices. The log receiver then compares the security policy information to the received log data to determine operational effectiveness of the security devices and to initiate any changes to the security policy.

The exemplary parser parses the log data received from the first ring buffer to extract fields based upon log data message type and generates Structured Query Language SQL statements from the extracted fields. The parser then copies the SQL statements to a second ring buffer . Subsequently the DB inserter inserts the SQL statements into database tables in memory according to the message type. In addition the message collection engine summarizes the SQL statements stored in the database tables over various intervals of time and copies the summarized SQL statements to tables stored on disk not shown . The log receiver the parser and the DB inserter will be discussed in more detail further below in conjunction with .

Next in step the log receiver copies the log message to the first ring buffer . The first ring buffer is in one embodiment a first in first out FIFO ring buffer that reduces a risk of losing log messages due to processing delays in the message collection engine . Additionally the log receiver may optionally copy the approved log message to the real time viewer buffer . The real time viewer buffer stores log messages to be viewed in real time. For example a user of the security management station may open up a real time view process i.e. a window in a security browser to view log messages received by the log receiver in real time. The real time view process accesses the log messages stored in the real time viewer buffer for display via the security browser window.

Referring back to step if the log receiver determines that the data source is not on the list of acceptable devices or if the data source is enabled but not configured then the log receiver copies the log message to the last unapproved 100 buffer or the last 100 buffer . In one embodiment of the invention the last unapproved 100 buffer and the last 100 buffer are 100 entry ring buffers. The user of the security management station may further analyze the data stored in the 100 entry ring buffers for troubleshooting analysis purposes for example. Alternative embodiments of these buffers and may comprise other value entry ring buffers.

Next in step the parser reads a log message from the first ring buffer . In one embodiment of the invention the first ring buffer is a FIFO ring buffer. Then in step the parser extracts data fields from the log message and converts the extracted data fields to an SQL statement. For example in one embodiment of the present invention the parser searches the log message for predetermined keywords to identify message type. Once the message type is identified the parser utilizes a pre determined function associated with the message type to extract the data fields. That is the data fields are extracted by application of the pre determined function to the log message.

In step the parser copies the SQL statement to the second ring buffer . In one embodiment of the invention the second ring buffer is a FIFO ring buffer. Next in step a database DB inserter reads an SQL statement from the second ring buffer and examines the SQL statement to determine a corresponding database table . In step the DB inserter inserts the SQL statement into the corresponding database table . According to the present invention database tables may comprise an accept table a deny table a security table a system table a URL table and an FTP table . In alternative embodiments the present invention may comprise any combination of database tables or other categories of database tables.

The second ring buffer may advantageously receive database insert queries e.g. SQL statements from processes other than the parser . That is the second ring buffer is configured to receive database insert queries from multiple processes thus providing for a scalable parsing routine. Furthermore the second ring buffer may store the received database insert queries in a queue thus reducing a risk of losing data before the data is inserted into the appropriate database tables via the DB inserter . In addition the present invention utilizes a single database connection i.e. the DB inserter to execute insertion statements against the database tables thus providing a single controlled entry point to the database tables . Thus the DB inserter streamlines insertion of data from multiple sources into the database tables reducing I O conflicts and processing delays.

In exemplary embodiments the DB inserter copies approximately 99 of the SQL statements to the accept and the deny database tables and respectively. The SQL statement is sent to the deny database table when the SQL statement s corresponding log message received by the network security device e.g. firewall is denied based on the network security device s policy list. Conversely if a message received by the network security device is not denied then the message is accepted. If the accepted message is a system message related to the security device s activity e.g. number of connections passing through the security device then the corresponding SQL statement is copied to the system database table . However if the accepted message relates to a network user accessing a particular URL site then the corresponding SQL statement is copied to the URL database table . Further if the accepted message relates to a network user requesting a file transfer protocol FTP service then the corresponding SQL statement is copied to the FTP database table . According to one embodiment should the database inserter determine that the accepted message does not belong to system URL FTP or security database tables then the database inserter copies the SQL statement to the accept database table . The present invention may comprise any number of database tables.

Next in step the message collection engine reads the SQL statements from the accept and deny database tables and summarizes the statements over one or more predetermined time intervals and copies the summarized statements to tables on disk not shown . Step is described in more detail below.

The message collection engine may comprise other components that parse log messages received from external security devices to generate SQL statements that are stored in database tables.

The data management engine manages databases and data generated by the message collection engine via summarization aggregation optimization and data aging algorithms. For example the data management engine is configured to manage large volumes of data efficiently and quickly delete old data and optimize data compression and back up routines. The data management engine will be discussed in more detail in connection with .

In one embodiment of the invention the scheduler controls and manages operation of the summarizer the aggregator and the DB inserter . Furthermore the scheduler or another process of the security platform may continuously copy SQL statements from the accept database table to the HEAP table and SQL statements from the deny database table to the fine grained deny table . According to one embodiment the HEAP table buffers the accept SQL statements for 10 minutes. Alternative embodiments may use different time intervals. The scheduler also instructs the summarizer and the aggregator to summarize and aggregate respectively the SQL statements stored in the HEAP table and the fine grained deny table over various intervals of time. The data management engine then copies the summarized and aggregated SQL statements to tables and stored on the system disk. In alternative embodiments the data management engine copies the summarized and aggregated SQL statements to tables and stored on a distributed disk system not shown . The summarizer the aggregator the DB inserter and the scheduler will be discussed in more detail further below in conjunction with inclusive.

In step the data management engine creates the HEAP table in local memory of security management station or local memory of the security server . In one embodiment of the invention the HEAP table is a pre table created in random access memory RAM with a lifetime of n seconds. According to one embodiment of the present invention n is a pre determined variable with a range of 10 600 seconds. That is every n seconds the scheduler deletes the HEAP table and creates a new HEAP table not shown . Next in step the data management engine initiates a process that continuously copies SQL statements stored in the accept database table to the HEAP table .

Then in step the scheduler instructs the summarizer to summarize the SQL statements stored in the HEAP table over the n second interval to generate a fine gained accept data chunk. According to the present invention the summarizer determines those SQL statements that share a commonality of one or more predetermined fields and combines i.e. condenses those statements into a smaller number of statements or messages. For example a SQL statement may include the following fields a source IP a source port a destination IP and a destination port. Typically for every connection to the firewall the firewall generates a log messages that comprises a source port number that has no significant security meaning. Therefore if a user of network connects with a single Web server that initiates connections to the firewall for example then the firewall generates 50 log messages each perhaps with a different source port number. However each of the 50 messages has identical source IP destination IP and destination port numbers because the user is connected to the single Web server.

Accordingly in one embodiment of the present invention the summarizer determines which sets of SQL statements have identical source IP destination IP and destination port numbers irrespective of the source port numbers of the SQL statements. The summarizer then creates a new statement i.e. message generated from the 50 messages for example. The summarizer may repeat the above summarization process over the SQL statements stored in the HEAP table for other fields of commonality to create other new condensed statements. Thus in one embodiment of the invention the summarizer creates a fine grained accept data chunk comprising a condensation of the SQL statements stored in the HEAP table based upon predefined fields of commonality e.g. source IP destination IP and destination port numbers and one or more fields of uniqueness e.g. source port number .

In addition the summarizer may also summarize integer fields associated with the SQL statements stored in the HEAP table such as number of in bytes bytes flowing through the firewall from the Internet to the intranet FIG. number of out bytes bytes flowing through the firewall from the intranet to the Internet and number of messages passing through the firewall .

Next in step the data management engine copies the fine grained accept data chunk to a 1 hour accept table stored on the system disk not shown . In step the data management engine deletes the HEAP table and creates a new HEAP table in local memory. Next in step the data management engine determines if the 1 hour accept table is full. For example if n 600 s i.e. 10 minutes then the 1 hour accept table may comprise up to six fine grained accept data chunks since each fine grained accept data chunk comprises a ten minute summary of SQL statements. According to the present invention the 1 hour accept data table may comprise up to 3600 n fine grained accept data chunks.

If in step the data management engine determines that the 1 hour accept table is not full i.e. the 1 hour accept table comprises less than 3600 n fine grained accept data chunks then the method continues at step . However if the data management engine determines that the 1 hour accept table is full i.e. the 1 hour accept table comprises 3600 n fine gained accept data chunks then in step the scheduler instructs the aggregator to aggregate i.e. perform a second summarization on the fine grained accept data chunks stored in the 1 hour accept table to generate a coarse grained accept data chunk. According to the present embodiment the coarse grained accept data chunk comprises a one hour period of data. Alternative embodiments of the invention may comprise coarse grained data chunks with other time periods. Next in step the data management engine sends the coarse grained accept data chunk to the DB inserter and the DB inserter inserts the coarse grained accept data chunk into a 24 hour accept table stored on the system disk.

Next in step the data management engine creates another 1 hour accept table and in step determines if the 24 hour accept table comprises twenty four coarse grained accept data chunks i.e. if the 24 hour accept table is full . However if the 24 hour accept table is not full then the method continues at step . When the 24 hour accept table is full the data management engine determines whether a predetermined data storage threshold is exceeded. According to one embodiment of the present invention the data storage threshold is a maximum amount of disk storage space allotted for storage of 1 hour accept tables 24 hour accept tables 24 hour deny tables and fine grained deny tables . If in step the data management engine determines that the data storage threshold is not exceeded then in step the data management engine creates a new 24 hour accept table and the method continues at step . However if the data management engine determines that the data storage threshold is exceeded the data management engine executes database management procedures in step .

In exemplary embodiments of the invention the data management engine may execute database management procedures such as deletion of tables and with specific creation dates issuance of user notifications to initiate data backup procedures or initiation of data compression schemes to free up disk space. In one embodiment of the invention the data management engine uses the merge table feature in MySQL that allows data management processes to view tables and with identical schemas as a single parent table not shown . That is the parent table is a table of pointers that allows data management processes to efficiently manage large sets of tables comprising large amounts of data and to 1 delete old data quickly 2 allow for efficient compression of selected tables and 3 allow for efficient back up of selected tables to other storage devices.

Furthermore in steps and the scheduler instructs the aggregator to aggregate the 10 minute data chunks into a single 1 hour data chunk after every 1 hour interval of time. Then in optional steps and the scheduler may instruct the aggregator to aggregate the 1 hour data chunks into a single 24 hour data chunk after every 24 hour interval of time. In step the scheduler may then instruct the aggregator to aggregate the data chunks over larger intervals of time. In the embodiment of the invention the summarizer and aggregator are instructed to summarize and aggregate data chunks based upon elapsed intervals of time.

In step the data management engine initiates a process that continuously copies each SQL statement stored in the deny database table to a fine grained deny table stored on the system disk. Next in step the scheduler instructs the aggregator to aggregate i.e. summarize the SQL statements stored in the fine gained deny table over a one hour time interval to generate a coarse grained deny data chunk for the one hour time interval. Then in step the data management engine sends the coarse grained deny data chunk to the DB inserter and the DB inserter inserts the coarse grained deny data chunk into a 24 hour deny table stored on the system disk.

Next in step the data management engine determines if the 24 hour deny table comprises 24 coarse grained deny data chunks i.e. if the 24 hour deny table is full . However if the 24 hour deny table is not full then the method continues at step . When the 24 hour deny table is full then the data management engine determines whether the predetermined data storage threshold is exceeded in step . If the data management engine determines that the data storage threshold is not exceeded then in step the data management engine creates a new 24 hour deny table and the method continues at step . However if the data management engine determines that the data storage threshold is exceeded the data management engine initiates database management procedures in step and the method continues at step . Step is similar to step and is not discussed further.

Then in optional steps and the scheduler may instruct the aggregator to aggregate the 1 hour data chunks into a single 24 hour data chunk after every 24 hour interval of time. In step the scheduler may then instruct the aggregator to aggregate the data chunks over larger intervals of time. In the embodiment of the invention the aggregator is instructed to aggregate data chunks based upon elapsed intervals of time.

The data management engine of the present invention summarizes and aggregates large amounts of data comprising log messages and generates smaller amounts of data comprising summarized and aggregated deny and accept log messages stored in 24 hour accept and deny tables and 1 hour accept tables on a system disk. The data management engine of the present invention allows for efficient storage of data to disk and quick and efficient retrieval of disk data compression of disk data deletion of disk data and back up of disk data to other data storage devices. In addition the present invention allows a user to search the fine grained deny table for a more detailed description of an event stored in the 24 hour deny tables .

Firewall log files are traditionally text strings of messages describing all the firewall activities. These messages can be categorized into accepted messages denied messages security event messages and firewall system messages. Once categorized each message can subsequently be broken down or parsed into its essential information. A portion of a log file from a Cisco PIX firewall is reproduced in Table I.

A first step in organizing log data may be to parse the text strings into categories or fields that make up the message text. For example the first message in Table I can be parsed into the following fields 

Once the message is parsed into its fields it may be advantageous to store the data in compressed form for example compressed integer form in a database table for later queries. This process can reduce the storage requirements of each text message to less than 25 of its original size.

In one exemplary situation if a firewall is logging all messages without filtering of messages then the vast majority usually over 80 of the messages will likely be based on accepted TCP and UDP connections. To illustrate this point if a PC on the inside of a firewall opens up its browser to a typical web site and goes through a firewall that firewall may produce 40 TCP built messages and 40 TCP teardown messages for a total of 80 log messages based on that one web page. If the firewall is doing network address translation then that firewall will produce an additional 40 translate messages for that web page.

TCP build and teardown messages have similar formats that may include the following information message codes Source IP address Source port number Destination IP address Destination port number and number of bytes in the connection.

Referring again to Table 1 it can be seen that messages 1 2 6 and 7 share the same Source IP 192.168.1.100 Destination IP 207.69.188.185 and Destination port 53 . These messages indicate that the internal PC with an IP address of 192.168.1.100 is querying an external domain name server with an IP address of 207.69.168.185 for a host address.

Since all of the messages in Table I occurred in the same minute in most cases it would be a waste of storage space to save all four messages. Those four messages can be summarized into the following 

By using a combination of parsing and summarization techniques the dataset of the log files can typically be reduced to less than 5 of the original message text. The benefits of this reduction in the dataset are not limited to storage capacity reduction it also speeds up the backend processing for report generation. By working with a dataset less than 5 of its original size queries against that dataset will benefit by not having to search through extra data.

The present invention has been described above with reference to exemplary embodiments. Other embodiments will be apparent to those skilled in the art in light of this disclosure. Furthermore the present invention may readily be implemented using configurations other than those described in the exemplary embodiments above. Therefore these and other variations upon the exemplary embodiments are covered by the claims of the present invention.

