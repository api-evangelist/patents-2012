---

title: Dialect translator for a speech application environment extended for interactive text exchanges
abstract: The present solution includes a real-time automated communication method. In the method, a real-time communication session can be established between a text exchange client and a speech application. A translation table can be identified that includes multiple entries, each entry including a text exchange item and a corresponding conversational translation item. A text exchange message can be received that was entered into a text exchange client. Content in the text exchange message that matches a text exchange item in the translation table can be substituted with a corresponding conversational item. The translated text exchange message can be sent as input to a voice server. Output from the voice server can be used by the speech application, which performs an automatic programmatic action based upon the output.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08654940&OS=08654940&RS=08654940
owner: Nuance Communications, Inc.
number: 08654940
owner_city: Burlington
owner_country: US
publication_date: 20120308
---
This application is a continuation of and claims the benefit under 35 U.S.C. 120 of U.S. patent application Ser. No. 11 613 179 filed Dec. 19 2006 and entitled Dialect Translator for a Speech Application Environment Extended for Interactive Text Exchanges the entire contents of which is incorporated herein by reference.

The present invention relates to the field of automated speech systems and more particularly to a dialect translator for a speech application environment that is extended for interactive text exchanges where the dialect translator dynamically translates text based input including text exchange slang and emotes into a speech dialect consumable by a voice server.

Interactive Voice Response IVR systems are often used to provide automated customer service via a voice channel of a communication network. IVR systems permit routine customer requests to be quickly efficiently and automatically handled. When a request is non routine or when a caller has difficulty with the IVR system a transfer can be made from the IVR system to a customer service representative. Even when human interactions are needed the IVR system can obtain necessary preliminary information such as an account number and a reason for a call which can ensure callers are routed to an appropriate human agent and to ensure human to human interactive time is minimized. Successful use of IVR systems allows call centers to be minimally manned while customers are provided a high level of service with relatively low periods spent in waiting queues.

IVR systems especially robust ones having natural language understanding NLU capabilities and or large context free grammars represent a huge financial and technological investment. This investment includes costs for purchasing and maintaining IVR infrastructure hardware IVR infrastructure software and voice applications executing upon this infrastructure. An additional and significant reoccurring cost can relate to maintaining a sufficient number of voice quality channels to handle anticipated call volumes. Further each of these channels consumes an available port of a voice server which has a limited number of costly ports. Each channel also consumes a quantity of bandwidth needed for establishing a voice quality channel between a caller and the IVR system.

One innovative solution for extending an IVR infrastructure to permit text based interactive services is detailed in co pending patent application Ser. No. 11 612 996 entitled Using an Automated Speech Application Environment to Automatically Provide Text Based Interactive Services More specifically the co pending application teaches that a chat robot object referred to as a Chatbot can dynamically convert text received from a text exchange client to input consumable by a voice server and can dynamically convert output from the voice server to text appropriately formatted for the client. From a perspective of the voice server the text based interactions with the text exchange client are handled in the same manner and with the same hardware software that is used to handle voice based interactions.

Dynamic conversions between a text exchange client such as a chat client and an IVR infrastructure are complicated by an existence of a text exchange dialect. That is a text exchange dialect has evolved that is not easily converted into speech phrases comprehensible or by a standard speech recognition engine or consumable by a standard IVR infrastructure. For example slang such as cu l8r for see you later and brb for be right back is commonly utilized during text exchange communication sessions. Additionally special character sequences unique to text exchanges such as emoticons like and 0 need to be handled. No known software products exist that dynamically convert text exchange input into input able to be consumed by a voice server nor do solutions exist that dynamically handle dialect translations for the same purpose.

A dialect translator that functions as a pre and post processor for a speech application environment where the speech application environment has been extended for text based interactive services. The speech application environment can include a Chatbot server which manages chat robot objects or Chatbots. Chatbots can dynamically convert text received from a text exchange client to input consumable by a voice server and to dynamically convert voice markup to text appropriately formatted for the text exchange client. In this environment the dialect translator normalizes text from a text exchange dialect to standard textual phrases of an associated spoken language such as English. The dialect translator can also convert textual output derived from output of a voice server into a text exchange dialect expected by a text exchange user.

The present invention can be implemented in accordance with numerous aspects consistent with the material presented herein. For example one aspect of the present invention can include a real time automated communication method. In the method a real time communication session can be established between a text exchange client and a speech application. A translation table can be identified that includes multiple entries each entry including a text exchange item and a corresponding conversational translation item. A text exchange message can be received that was entered into a text exchange client. Content in the text exchange message that matches a text exchange item in the translation table can be substituted with a corresponding conversational item. The text exchange message can be dynamically converted to a voice message consumable by the speech application. The voice message can be conveyed to the speech application which performs an automatic programmatic action based upon the conveyed voice message.

Another aspect of the present invention can include a method for extending a voice server to add text exchange capabilities. The method can include the steps of establishing a real tune text exchange connection between a text exchange client and a Chatbot server and establishing a real time voice connection between the Chatbot server and a speech application. An interactive dialogue can be conducted over the text exchange connection and the voice connection between the text exchange client and the speech application. During the interactive dialogue text exchange interactions can be dynamically and automatically converted to voice interactions before being conveyed from the text exchange client to the speech application. Text exchange specific language in the text exchange interactions can be dynamically translated into conversational language that is included in the voice interactions.

Still another aspect of the present invention can include a system for providing text exchange services using a speech application environment. The system can include a text exchange client a speech application environment a Chatbot server and a dialect translator. The text exchange client can send and receive real time text exchanges over a text exchange channel. The speech application environment can execute an automated speech response application that permits users to interact in real time over a voice channel. The Chatbot server can establish a communication session involving the text exchange client and the automated speech response system. The Chatbot server can dynamically convert messages between a voice modality and a text exchange modality during the communication session in a manner transparent to the text exchange client and the automated speech response application. The dialect translator can dynamically detect text exchange specific language contained in message from the text exchange client. Detected language can be converted from the text exchange language into corresponding conversational language. The converted messages received by the automated speech response system can include the conversational content.

It should be noted that various aspects of the invention can be implemented as a program for controlling computing equipment to implement the functions described herein or a program for enabling computing equipment to perform processes corresponding to the steps disclosed herein. This program may be provided by storing the program in a magnetic disk an optical disk a semiconductor memory any other recording medium or can also be provided as a digitally encoded signal conveyed via a carrier wave. The described program can be a single program or can be implemented as multiple subprograms each of which interact within a single computing device or interact in a distributed fashion across a network space.

The method detailed herein can also be a method performed at least in part by a service agent and or a machine manipulated by a service agent in response to a service request.

The speech enabled application can be a VoiceXML application such as an application for an Interactive Voice Response System IVR often deployed at contact centers. The text exchange client interface can be an interface for any type of text exchange communications such as Instant Message IM communications chat communications text messaging using SAMETIME TRILLIAN YAHOO MESSENGER and the like.

The voice server like most voice servers can include a text mode interface which is typically used by developers system maintainers and or trainers of a speech recognition engine. For example a set of proprietary restricted or standardized e.g. MRCPv2 INTERPRET Application Program Interfaces APIs can be used for the interface . This set of APIs which are typically not available or accessible within a production environment can be enabled to create a text input channel that consumes considerably fewer computing resources that a voice channel which is typically established with the voice server operating in a production environment. In most cases the text mode interface is present but dormant within production voice servers . Interface can be enabled for text based interactions with Chatbot server.

Use of interface occurs in a manner transparent to the application server and therefore has no affect on application . That is application and application server remain unaware that the voice server is processing text input via interface as opposed to voice input. The output produced by voice server and sent to Chatbot server can be the same in either case. Further the output produced by the application server and sent to the Chatbot server is the same. Thus multiple communication sessions some being text based sessions that use interface and others being voice based sessions can be concurrently handled by application server . System can be implemented without infrastructure changes to application server and without changes to voice server assuming interface is present and without changing code of speed enabled applications . This is true even though the application may lack explicitly coded support for text exchange interactions and would be unable to support such interactions without the disclosed invention. Further the text exchange interface can be any off the shelf text exchange software which needs not be modified to operate as shown in system .

In system the Chatbot server can teach voice markup associated with a speech enabled application which it executes. The Chatbot server can also relay textual input from interface to send text consumable by voice server via interface . Before sending the text the translator in Chatbot server can check text for slang or shorthand which the voice server will have trouble with. Any entries found in table can be dynamically translated which results in text . The voice server can match the input against a recognition grammar and generate text output for the Chatbot server .

The Chatbot server can use this output when it executes the application. The application processes this output which can produce a responsive output typically in a form of a Voice markup segment such as VoiceXML which can further employ the use of the W3C Speech Synthesis Markup Language or SSML . When performing text exchange operations normal speech synthesis operations performed by the voice server can be bypassed. The Chatbot server can dynamically convert the responsive output from the markup into textual output which interface handles. For example textual content contained between markup tags can be extracted from the application markup i.e. the markup tags can be omitted and included within a text message. Before text is sent however the translator can convert automatically generated text to text exchange language i.e. slang shorthand emotes based upon table .

As noted above the Chatbot server is capable of handling dynamic translations between a text exchange dialect and speaking dialect using a translator . The translator can include the translation table that relates text exchange phrases with voice phrases. Table can include entries for emoticons special character sequences text exchange slang and the like. Table can permit users to add edit and delete entries. Additionally each table entry can be associated with a translation direction. Translation directions include bidirectional from text exchange to voice only and from voice to text exchange only.

For example table shows an entry of 404 associated with I haven t a clue that is to be translated unidirectionally from text exchange to voice only. Bidirectional entries in table include Ty associated with Thank You and Yw associated with You re welcome. 

In one arrangement entries in table are permitted to be overloaded where a correct entry for a situation or dialogue context is utilized. For example the text exchange input of can translate into voice phrases of yes thank you or I am satisfied. The first entry can be a default translation. Subsequent translations can be used in order when voice server fails to understand a translated response.

For example a voice server received response of Yes translated from may result in voice server generating an out of context response e.g. I do not understand please try again. Instead of sending this out of context response to interface a next translation if available can be automatically provided to the voice server . For example Thank you can be provided. If this is not understood then I am satisfied can be provided. Only after none of the translations are accepted by the voice server will an out of context response be sent to interface . Appreciably neither the chat server nor the interface need be aware of contextually permitted entries for a given dialogue context of application for this translation overloading capability to be utilized which can be significant in order for system to operate in a manner transparent to server .

The voice server can include a text input API which is typically used by developers system maintainers and or trainers of a speech recognition engine. This set of APIs which are typically not available or accessible within a production environment can be enabled to permit the voice server to directly consume text which requires considerably fewer computing resources than those needed to process voice input which server typically receives.

As shown client can send a request to Chatbot server to initialize a text modality channel. Chatbot server can send a channel initialization message to voice server to establish a session. Server can positively respond causing a channel to be established between servers and . Chatbot server can then establish the requested text channel with client . After step the Chatbot server can send a request to application server which causes a speech enabled application to be instantiated. That is application markup can be conveyed to Chatbot server for execution.

Application initiated prompt can occur when the ChatBot Server executes the speech enabled application . Server can convert markup provided by application into pure text represented by text prompt which is sent to client . For example prompt can be written in markup and can include 

The converting can extract the text context omitting the markup tags . The text content can be compared against a translation dictionary. Matching context can be dynamically translated. For example Thank You earl be translated into ty which can be conveyed in prompt to client .

Client can respond to the prompt via the text channel. Chatbot server can translate the response to a response which is sent to voice server . The translation only occurs when a text exchange phrase in a translation dictionary corresponds to a voice phase. For example l8r in text exchange dialect can be translated to later or exit program in a dialect understood by voice server . The voice server can match response against a speech grammar via programmatic action which results in text result . The voice server can convey text result to the Chatbot server . Chatbot server uses this output when it executes the application logic of executing Application which results in markup being generated. The Chatbot server can convert textual content contained within generated markup into a text result . The text result can include text exchange specific translations i.e. normal English words and or phrases can be translated into text exchange slang or emotes can be handled by the Chatbot server .

Interactions can continue in this fashion until client sends a request to end the communication session. Chatbot server can responsively close the channel between it and voice server . The Chatbot server can also close the text exchange channel between it and client at which point the communication session is terminated.

The system can include a network which communicatively links communication device Chatbot server voice server application server and enterprise server . Network can include any of a variety of components wired and or wireless that together permit digitally encoded information contained within carrier waves to be conveyed from any communicatively linked component to any other communicatively linked component.

The communication device can be any communication device linking a customer to network . Devices can include fir example mobile telephones line based phones computers notebooks computing tablets personal data assistants PDAs wearable computing devices entertainment systems interactive media devices and the like. Specific categories of devices include a text exchange device a voice communication device and a multi mode device .

A text exchange device is a computing device capable of real time interactive text exchanges. These text exchanges include online chatting instant messaging and text messaging. A communication device can be any device capable of real time voice communication over network . This includes VoIP based communications traditional circuit switched communications two way radio communications and the like. A multi mode device is a device capable of engaging in text exchanges and in voice communications. Some multi mode devices are restricted to one mode of communication at a time while others are able to communicate across multiple modes concurrently.

When performing text exchanges device can use an interlace . The interface can show a running textual dialogue and can include a section to enter new text. Interface can be an interface for an instant messaging client a chat client and or a text messaging client.

Chatbot server can be as VoiceXML server or equivalent device that dynamically converts text exchange messages from device to messages consumable by voice server . Use of a text input API which lets voice server accept text may permit text from device to be directly consumed by voice server . Chatbot server can also dynamically convert output from voice server to output consumable by the speech application and then making it presentable within interface .

For each managed communication session the Chatbot server can instantiate a Chatbot object . The Chatbot object can include a SIP servlet and one or more interpreters such as a Call Control Extensible Markup Language CCXML interpreter a Voice Extensible Markup Language VoiceXML interpreter an Extensible Hypertext Markup Language XML plus voice profiles X V interpreter a Speech Application Language Tags SALT interpreter a Media Resource Control Protocol MCRP interpreter a customized markup interpreter and the like. The SIP servlet coin map incoming SIP requests to appropriate interpreters.

A communication session handled by Chatbot object can involve multiple different communication channels such as channel and channel . Channel can be a communication channel established between Chatbot server and device . Channel can be a communication channel established between Chatbot server and voice server . Appreciably application server is not aware of a communication modality and channel type that a customer uses to communicate with server . A special text input API can be used to permit voice server to directly consume textual input provided by Chatbot server .

The conversion engine of server can perform any necessary conversions to adapt output mom text exchange device to input consumable by voice server . Typically no significant conversions are necessary for text consumed by the voice server which provides access to text mode interaction functions via API . Appreciably text mode interaction functions are typically used by developers during a testing and development stage but are being used here at runtime to permit the voice server to directly handle text. For example the Internet Engineering Task Force IETF standard Media Resource Control Protocol version 2 MRCPv2 contains a text mode interpretation function called INTERPRET for the Speech Recognizer Resource which would permit the voice server to directly handle text.

The translator of server can perform translations between a text exchange dialect and a voice dialect more easily understood by IVR application . For example phrases emotes and special characters and or their corresponding phrases can be automatically detected and substituted for one another during a communication session. For example text exchange expression entered in interface of ty can be converted by translator into thank you which is conveyed over channel in a voice format. Further the translator can detect an application generated phase of You are welcome can match this phrase to a corresponding text exchange phase of Yw which is conveyed over channel and presented in interface .

The application server will typically generate voice markup output such as VoiceXML output which a voice server converts to audio output. The conversion engine can extract text content from the voice markup and can convey the extracted text to communication device over channel .

Application server can be an application server that utilizes modular components of a standardized runtime platform. The application server can represent a middleware server of a multi tier environment. The runtime platform can provide functionality for developing distributed multi tier Web based applications. The runtime platform can also include a standard set of services application programming interfaces and protocols. That is the runtime platform can permit a developer to create an enterprise application that is extensible and portable between multiple platforms. The runtime platform can include a collection of related technology specifications that describe required application program interfaces APIs and policies for compliance.

In one embodiment the runtime platform can be a JAVA 2 PLATFORM ENTERPRISE EDITION J2EE software platform. Accordingly the application server can be a J2EE compliant application server such as a WEBSPHERE application server from International Business Machines Corporation of Armonk N.Y. a BEA WEBLOGIC application server from BEA Systems Inc. of San Jose Calif. a JBOSS application server from JBoss Inc. of Atlanta Ga. a JOnAS application server from the ObjectWeb Consortium and the like. The runtime platform is not to be construed as limited in this regard and other software platforms such as the .NET software platform are contemplated herein.

The IVR application can be an application that permits callers to interact and receive information from a database of an enterprise server . Access to the voiceXML server which has been extended for Chatbot can accept user input using touch tone signals voice input and text input. The IVR application can provide information to the user in the form of a single VoiceXML application that can be used by any modality including DTMF voice and chat. The voice markup can also be directly conveyed to conversion engine where it is converted to text presentable in interface .

The IVR application can present a series of prompts to a user and can receive and process prompt responses in accordance with previously established dialogue menus. Speech processing operations such as text to speech operations speech to text operations caller identification operations and voice authorization operations can be provided by a remotely located voice server . Without the intervention of Chatbot server IVR application would be unable to interact with a text exchange device since it lacks native coding for handling text exchange input output.

The present invention may be realized in hardware software or a combination of hardware and software. The present invention may be realized in a centralized fashion in one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software may be a general purpose computer system with a computer program that when being loaded and executed controls the computer system such that it carries out the methods described herein.

The present invention also may be embedded in a computer program product which comprises all the features enabling the implementation of the methods described herein and which when loaded in a computer system is able to carry out these methods. Computer program in the present context means any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation b reproduction in a different material form.

