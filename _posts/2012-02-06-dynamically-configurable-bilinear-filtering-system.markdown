---

title: Dynamically configurable bilinear filtering system
abstract: Apparatus and methods for a bilinear filter system comprising a pre-formatter module, a bilinear module, an accumulator module, and a format module. The pre-formatter module is configured to receive texel data and convert it to a normalized fixed point format. The bilinear module is dynamically reconfigurable to perform an interpolation or an extended precision interpolation on the normalized fixed point texel data from the pre-formatter module and generate re-normalized floating point texel data. The interpolator analyzes the exponent range of fixed point texel data from the pre-formatter module to determine if an extended precision calculation is appropriate. The accumulator module is configured to accumulate floating point texel data from the bilinear module to achieve the desired level of bilinear, trilinear, and anisotropic filtering. The format module is configured to convert texel data from the accumulator module into a standard floating point representation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08253758&OS=08253758&RS=08253758
owner: Advanced Micro Devices, Inc.
number: 08253758
owner_city: Sunnyvale
owner_country: US
publication_date: 20120206
---
This application is a divisional of U.S. application Ser. No. 12 124 751 filed May 21 2008 now allowed which is incorporated by reference herein in its entirety.

The present invention is generally directed to computing operations performed in computing systems and more particularly directed to graphics processing tasks performed in computing systems.

A graphics processing unit GPU is a complex integrated circuit that is specially designed to perform graphics processing tasks. A GPU may for example execute graphics processing tasks required by an end user application such as a video game application. In such an example there are several layers of software between the end user application and the GPU.

The end user application communicates with an application programming interface API . An API allows the end user application to output graphics data and commands in a standardized format rather than in a format that is dependent on the GPU. Several types of APIs are commercially available including DirectX developed by Microsoft Corp. and OpenGL developed by Silicon Graphics Inc. The API communicates with a driver. The driver translates standard code received from the API into a native format of instructions understood by the GPU. The driver is typically written by the manufacturer of the GPU. The GPU then executes the instructions from the driver.

Typically GPUs also support a concept known as texture filtering. Texture filtering is a method used to determine the texture color for a texture mapped pixel through the use of the colors of nearby pixels of the texture or texels. The process is also referred to as texture smoothing or texture interpolation. However high image quality texture filtering requires a high degree of computational complexity.

As an aid to reduce the amount of data needed during texture filtering a concept of mip mapping is used whereby multiple bitmap versions of the image are stored each version being encoded and stored at a reduced level of detail. In this manner as the view of the image is minimized such as moving away from the image the displayed image is a version with a reduced level of detail. Because of this reduction in detail texture filtering can be calculated on a version of the image with a reduced level of detail thereby not increasing the required level of computation as an image is minimized.

The simplest form of texture filtering is referred to as nearest neighbor interpolation which simply returns the color of the texel closest to the center of the requested pixel. While this method requires minimal computation it also results in a large amounts of blockiness during magnification as well as aliasing and shimmering during any type of minification. Nearest neighbor interpolation can also be used with mip mapping using the nearest mip map level according to the distance from the image. This approach aids in the reduction of aliasing and shimmering but does not solve blockiness.

In order to solve some of these problems a bilinear filtering concept is employed whereby instead of relying upon a single texel the four nearest texels to the pixel in question are sampled and the colors of each texel are combined by a weighted average according to distance. This technique results in a smoothing gradient of color change from one texel to the next instead of a sudden changer when a pixel center crosses a texel boundary.

However where the rendering of an image changes from one mip map level to another there tends to be a very noticeable change in the quality at the boundaries between the levels which is not solved using bilinear filtering. In this situation the concept of trilinear filtering is used which involves doing a texture lookup and bilinear filtering on the two closest mip map levels and then performing a linear interpolation of the results. This results in a smooth degradation of texture quality as distance from the viewer increases rather than a series of steps.

Anisotropic filtering is typically the highest quality filtering available in consumer based three dimensional graphics cards. Bilinear and trilinear filtering results are correct only when the viewer is looking at the texture perpendicularly. Under these techniques an object will appear blurry when the textured surface is at an oblique angle. Anisotropic filtering corrects this error by sampling in the correct trapezoid shape according to the viewing angle and then trilinearly filtering the results.

While the more sophisticated bilinear trilinear and anisotropic filtering techniques produce better results they require higher amounts of computation. In addition where the dynamic range of sampled texels is large the required computations typically are done using floating point arithmetic solutions in order to preserve data quality. Floating point calculations require the use of floating point arithmetic logic units within a GPU which increases the associated cost and area required in a circuit to implement.

When an interpolation such as a bilinear interpolation is generated using normalized fixed point texel data where the range of data i.e. the differences between the texel magnitudes is large there can be a loss of precision due to the limited number of bits of calculation provided in a single precision bilinear filtering unit. Such a limitation could be overcome by the use of extended precision filtering using multiple single precision bilinear filtering units which would by operating in parallel on texel data generate extended precision floating point texel data.

What are needed therefore are systems and or methods to alleviate the aforementioned deficiencies. Particularly what is needed is a system and method to dynamically determine when an interpolator should generate extended precision results and a bilinear filter system that could generate such results when desired.

Consistent with the principles of the present invention as embodied and broadly described herein the present invention includes a bilinear filter system comprising a pre formatter module a bilinear module an accumulator module and a format module. The pre formatter module is configured to receive texel data and convert it to a normalized fixed point format. A plurality of bilinear modules are dynamically reconfigurable to perform either multiple parallel single precision bilinear filtering operations or by acting on common texel data one multiple precision bilinear filtering operation. A single precision bilinear filtering operation is not restricted to a particular number of bits of data but rather may vary according to the floating point format being utilized. The pre formatter module analyzes the exponent range of floating point texel data to determine if an extended precision calculation is appropriate. If so the pre formatter module provides control signals to the set of bilinear filtering modules to cause them to operate in tandem on a single set of texel values in order to produce a single bilinearly filtered result. The accumulator module is configured to accumulate floating point texel data from the bilinear module to achieve the desired level of bilinear trilinear and anisotropic filtering. The format module is configured to convert texel data from the accumulator module into a standard floating point representation.

In another embodiment of the invention where pre formatter module analyzes the exponent range of fixed point texel data to determine if an extended precision calculation is appropriate and finds that an extended precision calculation is not appropriate the interpolator performs multiple standard precision calculations. In this embodiment filters that would have been used in an extended precision interpolation are instead used as additional standard precision parallel processing interpolators.

In yet another embodiment the interpolator will perform an extended precision bilinear filtering calculation when the exponent rage of the block of texel data being analyzed is greater than the difference between the number of bits of filtering precision in the bilinear module and the number of bits in a texel data mantissa of the block of texel data.

Further embodiments features and advantages of the invention as well as the structure and operation of the various embodiments of the invention are described in detail below with reference to accompanying drawings.

The present invention relates to a bilinear filtering system with the ability to receive floating point texel data in a signed or unsigned format. In embodiments of this invention the interpolator within the bilinear module is dynamically reconfigurable to perform an interpolation in either a standard precision or an extended precision mode on the normalized fixed point texel data from the pre formatter module. The re normalization module within the bilinear module accepts the fixed floating point texel data from the interpolator and generates re normalized floating point texel data.

While specific configurations arrangements and steps are discussed it should be understood that this is done for illustrative purposes only. A person skilled in the pertinent art s will recognize that other configurations arrangements and steps may be used without departing from the spirit and scope of the present invention. It will be apparent to a person skilled in the pertinent art s that this invention may also be employed in a variety of other applications.

It is noted that references in the specification to one embodiment an embodiment an example embodiment etc. indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it would be within the knowledge of one skilled in the art to incorporate such a feature structure or characteristic in connection with other embodiments whether or not explicitly described.

While the present invention is described herein with reference to illustrative embodiments for particular applications it should be understood that the invention is not limited thereto. Those skilled in the art with access to the teachings provided herein will recognize additional modifications applications and embodiments within the scope thereof and additional fields in which the invention would be of significant utility.

In one embodiment pre formatter module receives a block of texel data including floating point texel data representing four texels. In the case where pre formatter module receives a block of floating point texel data extractor module will extract the mantissas exponents and signs associated with each texel. The exponents of the floating point texels are received by maximum delta module . Maximum delta module provides two functions. First within the block of floating point texels received by pre formatter module the maximum delta module identifies the exponent of maximum value most positive . Secondly maximum delta module calculates the difference between this maximum exponent and the exponent for each floating point texel value. Then for each floating point texel mantissa mantissa shifter module normalizes the mantissa with respect to the exponent of maximum value. This normalization is accomplished by shifting the mantissa right by the number of bit positions equal to the respective for that texel exponent delta calculated by maximum delta module .

In addition if a floating point texel mantissa is negative then two s compliment module will convert the shifted negative floating point texel mantissa into an unsigned two s compliment value. In summary pre formatter module in the case of receiving a block of floating point texel data will generate a block of unsigned normalized mantissa values along with the corresponding maximum block exponent value .

Pre formatter module of also identifies when an invalid texel value is encountered including an infinity undefined and negative zero. In addition pre formatter module will merge a hidden 1 into the mantissa for normalized floating point texel data that does not explicitly represent the leading 1.

Since bilinear module receives texel data as normalized mantissas and maximum exponent value the precision of normalized mantissas has the possibility of being reduced through the interpolation process in certain circumstances. This situation occurs when the exponent range defined as the largest delta of the deltas calculated by maximum delta module in pre formatter module for a block of texel data is greater than the excess size of the bilinear filtering width.

In an example using a bilinear filter with a width of 10 bits i.e. M 10 where M the number of bits of bilinear filtering precision a pre formatter module receives a block of four texels each with a mantissa of eights bits i.e. N 8 where N the number of bits in a mantissa as follows in this example the value of the Exponent e is represented in base 10 but this is not to imply or restrict the representation of an exponent or any other value in a specific base representation 

Maximum delta module would identify the exponent with the maximum value as that of texel 3 with the value of 8. Next maximum delta module calculates the difference between the mantissa exponent and the maximum exponent 8 for each floating point texel. The result in this example is the exponent differences of 6 for texels 1 2 and 4. Maximum delta module then normalizes the value within the block of texel data by shifting right in the amount of the calculated delta. Since in this example the bilinear filter precision width M is 10 bits the following resulting normalized texel data would appear 

As shown in the above example the largest exponent delta has a value of 6 and therefore the exponent range is 6. However since the excess size of the bilinear filter defined as the difference is size between the bilinear filter precision width and the width of the mantissa is 2 M N bilinear filter width of 10 less the mantissa width of 8 while the exponent range is 6 there is a loss of precision of 4 bits the difference between the exponent range 6 and the excess size of the bilinear filter 2 .

This loss of precision is shown by the difference in the number of significant bits for each texel. Here texels 1 2 and 4 indicate 4 significant bits texel 1 1111 texel 2 2222 texel 4 4444 while texel 3 indicates 8 significant bits 3.3333333 a difference of 4 bits. The loss in the difference of significant bits can be overcome if bilinear interpolator had the ability to utilize additional bilinear filter precision when the exponent range of a block of texel data is greater than the difference between the number of bits of filtering precision in the bilinear module and the number of bits in the texel data mantissa Exponent Range M N .

In this standard precision mode bilinear interpolator A and bilinear interpolator B act independently. Bilinear interpolator A utilizes the horizontal and vertical weights wH and wV whereas bilinear interpolator B utilizes the horizontal and vertical weights wH and wV . Output control summation and multiplexer will keep the results of bilinear interpolator A and bilinear interpolator B separate and distinct outputting the bilinear filter results of bilinear interpolator A through path and bilinear interpolator B through path . In the standard precision mode bilinear interpolator produces two bilinear filtered results per cycle.

However when input control shifter and multiplexer inspects a incoming pair of normalized mantissas where the exponent range exceeds a certain threshold for example as in the example previously presented when the exponent range of a block of texel data is greater than the difference between the number of bits of filtering precision in the bilinear module and the number of bits in the texel data mantissa the input control shifter and multiplexer would allow just a single bilinear interpolator operation to occur whereby both bilinear interpolator A and bilinear interpolator B are used in an extended precision mode. In this manner the bilinear filter precision width is doubled to 2M where M is the number of bits of precision in a single bilinear interpolator.

Therefore in a double bilinear interpolator embodiment there is no loss of precision where the exponent range is less than twice the filter precision width of a single bilinear interpolator assuming the widths of the interpolators are equal less the width of the texel mantissa. This example of a double bilinear interpolator is not meant to limit the implementation of an extended precision bilinear interpolator as other embodiments could be implemented using any number of bilinear interpolators.

When the input control shifter and multiplex identifies an incoming pair of normalized mantissas where the exponent range exceeds a certain threshold it will multiplex the most significant bits of the mantissa into a bilinear interpolator for example into bilinear interpolator B and the least significant bits of the mantissa into the other bilinear interpolator for example into bilinear interpolator A . In an extended precision mode the horizontal weights applied to bilinear interpolator A and bilinear interpolator B must be equivalent as the same weighting factor must be applied to all of the mantissa bits representing a particular texel. In the same manner the vertical weights must also be equivalent. Therefore in this dual bilinear interpolator example horizontal weight wH is equal to wH and vertical weight wV is equal to wV .

Once bilinear interpolator A and bilinear interpolator B complete an interpolation cycle the results are presented to output control summation and multiplexer . In the situation where there has just been an extended precision interpolation performed output control summation and multiplexer will sum the results of bilinear interpolator A and bilinear interpolator B shifting the least significant bits left by the width of a single precision interpolator M thereby producing a single bilinear filtered result mantissa of double precision which is then output on either path or as desired.

In step the bilinear interpolator within the bilinear module determines if a bilinear interpolation result needs to be one of extended precision. In step the bilinear interpolator within the bilinear module determines if a plurality of bilinear interpolations are to be performed in parallel. In step the bilinear interpolators perform the determined bilinear interpolations in standard precision extended precision and in parallel on the normalized fixed point texel data. In step the bilinear module re normalizes the floating point texel data. Method completes at step .

The functions processes systems and methods outlined in and can be implemented in software firmware or hardware or using any combination thereof. If programmable logic is used such logic can execute on a commercially available processing platform or a special purpose device.

As would be apparent to one skilled in the relevant art based on the description herein embodiments of the present invention can be designed in software using a hardware description language HDL such as for example Verilog or VHDL. The HDL design can model the behavior of an electronic system where the design can be synthesized and ultimately fabricated into a hardware device. In addition the HDL design can be stored in a computer product and loaded into a computer system prior to hardware manufacture.

It is to be appreciated that the Detailed Description section and not the Summary and Abstract sections is intended to be used to interpret the claims. The Summary and Abstract sections may set forth one or more but not all exemplary embodiments of the present invention as contemplated by the inventor s and thus are not intended to limit the present invention and the appended claims in any way.

The present invention has been described above with the aid of functional building blocks illustrating the implementation of specified functions and relationships thereof. The boundaries of these functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternate boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed.

The foregoing description of the specific embodiments will so fully reveal the general nature of the invention that others can by applying knowledge within the skill of the art readily modify and or adapt for various applications such specific embodiments without undue experimentation without departing from the general concept of the present invention. Therefore such adaptations and modifications are intended to be within the meaning and range of equivalents of the disclosed embodiments based on the teaching and guidance presented herein. It is to be understood that the phraseology or terminology herein is for the purpose of description and not of limitation such that the terminology or phraseology of the present specification is to be interpreted by the skilled artisan in light of the teachings and guidance.

While various embodiments of the present invention have been described above it should be understood that they have been presented by way of example only and not limitation. It will be apparent to persons skilled in the relevant art that various changes in form and detail can be made therein without departing from the spirit and scope of the invention. Thus the breadth and scope of the present invention should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

