---

title: Federating computing resources across the web
abstract: Hardware and software are configured to select and provision computing resources from heterogeneous on-demand computing environments through the framework of a layered, federated on-demand computing ecology of computing resource providers, users, and federation servers. These pieces of hardware and software include a mechanism for defining and managing the life cycle of different resource types; a mechanism for extending document-centric protocols to support computing resources as first order objects; a mechanism for routing messages to computing resources; federation topologies; and a mechanism for federation servers to access and use computing resources from providers controlled by other federation servers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09489243&OS=09489243&RS=09489243
owner: ComputeNext Inc.
number: 09489243
owner_city: Bellevue
owner_country: US
publication_date: 20120424
---
The application claims the benefit of Provisional Application No. 61 591 216 filed Jan. 26 2012 which is incorporated herein by reference.

The present subject matter is generally related to software and more particularly it relates to cloud computing.

On demand computing environments like cloud computing are accessed by modern computing users to procure and use computing resources on demand. In these conventional environments different users tasks have different requirements that are satisfied by a variety of computing resource providers. However there is a lack of computing platforms that facilitate users ability to select cloud computing resources from a variety of marketplaces that are comprised of one or more computing resource providers. Especially glaring is the lack of opportunity for a computing resource provider to expose and enable users to procure and use their specific services in a way that is distinguishable from other providers. These different services are unfortunately exposed through esoteric custom interfaces with no mechanism for ease of access or use by users.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

A system form of the subject matter includes a system in which the first and second federation servers are each connected to a set of computing resource providers each of which in turn is connected to a set of computing resources. The first and second federation servers are recited in that each is configured to determine which computing resources are allocated and which are available to users who issue on demand computing requests. The system further comprises the first federation server having a computer readable federation catalog which lists the second federation server and the second federation server having a computer readable federation catalog which lists the first federation server to which the second federation server maintains communication to either request a computer readable catalog of computing resources of a computing resource provider connected to the first federation server or communicate an on demand computing request to the first federation server.

A method form of the subject matter recites a method which comprises receiving either a control or a data message by a member of a group consisting essentially of a user s agent a federation server a computing resource provider or a computing resource. The method further recites causing a stage transition in a life cycle of a computing resource if the message is a control message and causing a reading or a writing of data if the message is a data message.

A computer readable medium form of the subject matter recites a method which comprises receiving either a control or a data message by a member of a group consisting essentially of a user s agent a federation server a computing resource provider or a computing resource. The method further recites causing a stage transition in a life cycle of a computing resource if the message is a control message and causing a reading or a writing of data if the message is a data message.

These federations of computing marketplaces provide on demand computing resources i.e. cloud computing environments of different kinds in different sizes and for suitable amounts of time to perform different computational tasks. These federations can be accessed for different computing requirements that may be suitably satisfied by a variety of computing resource providers. These federations are platforms to enable computing resources users to dynamically select from a variety of computing resource marketplaces such as public private hybrid or community federations that appropriately match in some embodiments their current needs against past present and or projected future utilization procure provision computing resources with optional movement of data code in a few embodiments and utilize computing resources from one or more providers. These federations in other embodiments also can expose and enable users to procure and use service offerings that distinguish one provider from another. The different service offerings are exposed through custom interfaces at a low level closest to the computing resources while at a high level users use normalizing mechanisms to access these different service offerings as if they were offered by any computing resource providers hence unifying accesses across different platforms of different computing resource providers.

These marketplaces of various embodiments are where users workloads that need to be run can find appropriate computing resources provisioned from a single provider or multiple providers. These marketplaces also enable computing resource providers to publish their computing resources such as in a computer readable catalog so that they can be appropriately matched to users workloads as well as computing resources related to these workloads. Cloud computing brokers can find matching computing resources using cloud federations and fulfill the workloads. Alternate pull and push technologies including alerts or emails are included to enable the marketplaces for computing resources in a few embodiments. Several levels of resource provision can be enabled in various marketplaces ranging from a single computing resource to dynamically validating and recommending alternate sets of computing resources for new as well as ongoing workloads.

Returning to a user s agent as a software component may act on behalf of the users to forward the workload or other computational functions or tasks to federation servers via the Internet . The user s agent or the federation servers may interact with computing resource providers or computing resources indirectly or directly. Each computing resource has a life cycle in which various stages are controllable to transition the computing resource from one stage to the next. These stage transitions are caused by either the user or the user s agent . The user s agent helps to select procure and provision computing resources from heterogeneous on demand computing environments which are formed and operated as a web of computing resources through layers of computing resource federation servers . The federations of computing marketplaces extend conventional predefined protocols for access and use of document like resources to include computing resources of different types defined at different levels of computation abstraction such as Infrastructure as a Service IaaS Platform as a Service PaaS Software as a Service SaaS and Database as a Service DaaS .

Regarding the extension of conventional Internet protocols a number of embodiments of the present subject matter include a mechanism for extending a document centric view of documentary resources to support computing resources as first order objects with associated protocol methods. These methods are used to indicate the stage change requests to the computing resources from users of the computing resources. As an illustrative example a tag based protocol such as Hypertext Transfer Protocol and other internet protocols operates on the notion of documentary resources. Documents mostly have static content and their states are managed outside the scope of the access and utilization realized through various protocols. The number of embodiments of the present subject matter extend the tag based protocol using key words to recognize computing resources so as to allow the protocol methods to operate on the computing resources by causing them to transition to various stages of their life cycle.

In other words computing resources can be added as primitive objects in different protocols. Using the Hypertext Transfer Protocol mentioned above Internet Media Type IMT originally called Multipurpose Internet Media Extensions MIME types can be extended to capture and represent computing resources and their subtypes. The stages of the computing resource and associated actions are possible. For example compute type can be defined as a type of resource with different subtypes including a physical machine by textually invoking PhysicalMachine in a protocol expression a virtual machine by textually invoking VirtualMachine in a protocol expression and a storage medium by textually invoking Storage in a protocol expression . The taxonomy of subtypes under compute type is derived from the ontology of computing resources.

Various embodiments support computing resources at other application level protocols that use different transport level protocols like TCP and or UDP. The search for computing resources and subsequent selection of computing resources to use for a particular computational task is realized through a Dynamic Computing Selection Protocol DCSP that is a network configuration protocol for federation servers on federation networks. Federation servers that are connected to federation networks can suitably be configured before they can communicate with other federation servers. One piece of information for networking is an internet protocol address and a default route and routing prefix. DCSP also provides a central database of federation servers that are connected to the network and eliminates duplicate computing resource assignments. The DCSP protocol provides the ability to discover federation servers that can enable the search and discovery of computing resources as well as request configure use and release such resources for particular workloads. DCSP can support among other models a client server model with users agents behaving like clients that use DCSP protocol to search select provision and use computing resources.

The life cycle stages of computing resources are depicted pictorially by an arrow in a circular pattern that self references the computing resources . Computing resources comprise different types with different attributes and taxonomies of values. Various embodiments of the present subject matter curate such information as part of a computing resource repository and or knowledge base. Instances of these computing resource types are instantiated by computing resource providers and these computing resources transition through different stages of their lifecycle from creation to configuration to utilization and finally termination. For example a virtual machine is a computing resource that enables software packaged in images to run on the computing resource. The virtual machine computing resource has different attributes including CPU speed e.g. 1 GHz and memory e.g. 1 GB . Virtual machine computing resources are allocated on a physical machine and utilized by users . They are able to control the stage of the computing resource through particular stage change commands. Such commands are specifically defined by the on demand computing environment of the computing resource provider and such commands change from one provider to another. In various embodiments of the present subject matter such commands are low level details that are abstracted to higher level commands that can be used by any users to command any computing resources to transition through stages of their life cycle.

As discussed different types of computing resources support different methods to manage their stages. Various embodiments of the present subject matter define the taxonomy of resource stages and actions in the form of a workflow for stage changes that cover different types of computing resources via the higher level commands. The workflow stages are associated with methods to initiate the state changes. For the purpose of computing resource life cycle management in an on demand computing environment methods or actions on a computing resource can be broadly classified into control and data methods. Control methods are geared toward managing a computing resource and its life cycle. Data methods focus on utilizing the computing resource. For example the methods to allocate and start a virtual machine are control methods while the methods to access the web page hosted in the virtual machine are data methods. These higher level commands are discussed herein below.

Various embodiments of the present subject matter provide mechanisms to automatically find these computing resource providers and their special offerings dynamically select allocate and use computing resources across different computing resource providers to perform a workload or task and selectively de allocate utilized computing resources based on task performance and usage. By analyzing big data provided by the awareness of on demand computing resource providers of their existing customers and their needs at the level of the computing resources and the big data of the eco system of cloud management systems that are aware of the particular tasks and workloads that are being performed using these computing resources various embodiments of the present subject matter in some embodiments assist computing resource providers to better model their configurations and setup.

Regarding the special offerings of computing resource providers various embodiments provide a mechanism to pass through and make use of special features and capabilities as well as services of computing resources as exposed by the computing resource providers . Each computing resource provider and each computing resource may have special services that they provide to their users. The ability to find and provision computing resources in a heterogeneous environment captures the common capabilities and exposes them through the user s agents. Various embodiments discover and expose special services to the user through the user s agents. The user s agent which can be likened to a web browser provides common programming interfaces for users to access and use the web of computing resources as facilitated by the federation server . Common methods and messages are used to operate on computing resources independent of the computing provider and their platforms

For example a virtual machine computing resource from a computing resource provider A is accessed and managed through the same set of methods as computing resource provider B. A few embodiments enable the capability of the computing resource provider B to possess additional services and in terms of plug ins to the user s agent that support them expose and enable users to use those special services. In the same example a set of APIs are exposed by the user s agent. One approach to support such API extensions by the computing resource provider and computing resource is to include a generic interface to request special messages to be sent to the computing resource provider or the computing resource by packaging the message type and parameters in a standard tag based format such as XML . The call of an extension method to a computing resource is executed if the computing resource can interpret and respond. Otherwise the call is ignored.

Various embodiments of the present subject matter facilitate federated cloud ecology adopting in many embodiments an information architecture that encompasses different predefined or learned types of computing resources and their attributes compute resource providers and their attributes potential and existing computing resource users and their attributes and different layers of federation servers in some embodiments a mechanism for the federated cloud eco system to capture and discover metadata about computing resource providers and federation servers and in a few embodiments a mechanism to provision within and across computing resource federations.

Users of the federation register with the federation server to access and utilize computing resources from one or more computing resource providers registered with the same federation server . Users of the federation server define the computing resources they require as part of the workload . That may include both virtual machine and storage computing resources as well as the other computing resources required to access and use both the virtual machine and storage computing resources successfully which in various embodiments include key pairs security groups elastic IP addresses and so on. Definition of the workload includes dependencies among elements of the workload which defines which computing resource depends on which other computing resource which in turn determines an order in which those computing resources are provisioned started stopped and un provisioned. When the workload as a whole is provisioned the federation server determines the computing resource provider required for each computing resource and provisions each computing resource at each different computing resource provider that is connected to the federation server using the protocols supported by that computing resource provider . Determining which computing resource provider to use is directed by the user in a few embodiments or the federation server in other embodiments which uses its own mechanisms to determine which computing resource provider suitably meets the user s needs based on the definition of the user s requirements in the workload . The definition may include service level agreements or price or stated and historical performance of the computing resource provider as observed analytically and recorded by the federation server . Other networked federation servers have authentication mechanisms in place so that they can trust the observed and recorded information provided to them from their networked federation servers.

The two federation servers may not have knowledge of other federation servers but are connected in a network with only knowledge of their closest neighbors. The federation servers may be restricted to certain uses in some embodiments such as for specific companies or enterprises. The requests that are passed along from federation server to federation server take into account these restrictions and other criteria such as geographical location and service level agreements. The federation servers can be connected and networked in different configurations or topologies. A hierarchical organization would indicate local federation server support for a user s agents and computing resource providers in a given locality e.g. Los Angeles area . Different federation servers can be grouped and placed under a regional federation that can cover a wider area e.g. a Southwest federation including the Los Angeles and Phoenix federations . The hierarchy can go to the next level covering a country wide federation or perhaps a global or world federation. Alternate topologies can create cliques among regional federations that can help in procuring and provisioning resources across federations.

The two federations illustrate mechanisms for routing of messages to computing resources from users agents to computing resource federation servers and computing resource providers and . The users agents as software components have software ability to search for computing resources and dynamically select to provision computing resource on behalf of a user. The provisioned computing resources may be sourced from one or more computing resource providers and each computing resource may be managed and accessed through different sets of methods. These methods are realized as messages among the user s agent and the federation server and the computing resource provider or the computing resource itself. For example allocating a computing resource is a message that is directed toward a federation server or a computing resource provider reading or writing a blob of data is another message that is directed toward a federation server or a computing resource provider . Whereas the messages of allocation are controlling the life cycle of a computing resource the messages of reading or writing are toward using the data of the computing resource. These are respectively referred to as control messages and data messages. To federate computing resources the federation server suitably handles and or is aware of all messages. A group of embodiments dynamically characterize messages as control messages or data messages defining and enabling the flow of such messages across the federation network. Certain messages go through the federation server while others are addressed directly to the computing resource provider or the computing resource. The rules and models for routing the messages are dynamically provided to the user s agent.

In a set up where there are multiple heterogeneous computing resource providers for computing resources for a single user s agent the details of messages and flow models are provided to the user s agent. These models can be updated dynamically and each message based on its characterization adopts a particular flow from the source endpoint of the user s agent. In addition to adopting a different flow model the user s agent may need to transform messages that are in the formats that would be understood by the computing resource provider . Such transformation rules and models are encoded or dynamically updated by the federation server to enable the user s agent to communicate with multiple computing resource providers.

The federations provide a mechanism for publishing and search across federation servers for computing resources and computing resource providers and the mechanisms for federation servers to access and use computing resources from computing resource providers controlled by other federation servers . A hybrid model is also possible wherein the originating federation server accesses directly the computing resource providers but informs each connected federation server that it is doing so. This hybrid model also assumes that access to the computing resource providers can be delegated from the connected federation server which might not always be the case.

In some embodiments it is possible that co operating federation servers might be part of the same overall single federation or may be parts of multiple independent federations. The protocols used to communicate about behavior may be different in each case. In the case of a single federation it can be assumed that each federation server can share the computing resource provider s resources search results and catalogs with its neighboring federation servers. It may not have to charge for connected resources as billing is integrated across the federation and all consumers are known across the federation. For independent co operating federations each provisioned resource may incur a transaction and a charge between federations. It is assumed that the co operating independent federations have a prior business and billing relationship established before they can communicate and share resources search results and catalogs.

From the start block the method proceeds to a set of method steps defined between a continuation terminal terminal A and an exit terminal terminal B . The set of method steps describes the facilitation of search requests by the method for computing resources by routing messages among users agents federation servers computing resources and their providers. From terminal A the method proceeds to decision block where a test is performed to determine whether there is a new provider catalog. If the answer to the test at decision block is NO the method continues to another continuation terminal terminal A . If the answer to the test at decision block is YES then the method proceeds to block where the method receives a new provider catalog at a federation server via an industry standard format such as XML or JSON . Progressing to block the federation server broadcasts to connected federation servers that its provider catalogs have been updated. The term connected means the inclusion of networked as well as directly coupled federation servers. Progressing to decision block a test is performed to determine whether a hybrid model is activated. If the answer to the test at decision block is YES the method proceeds to another continuation terminal terminal A . Otherwise the answer to the test at decision block is NO and the method proceeds to another continuation terminal terminal A .

From terminal A the method proceeds to block where the connected federation servers via the method may request the new provider catalog from the broadcasting federation server. At block after the catalog is received the connected federation servers communicate either directly with the computing resource provider or indirectly via the broadcasting federation server. The method then continues to another continuation terminal terminal A. From terminal A the method proceeds to block where the connected federation servers via the method may request the new provider catalog from the broadcasting federation server. At block after the catalog is received the connected federation servers communicate directly with the computing resource provider. At block the connected federation servers apprise the broadcasting federation server of its direct communication with the computing resource provider for tracking purposes. The method then continues to terminal A.

From terminal A the method proceeds to decision block where a test is performed to determine whether there is a search request on demand computing query . If the answer to the test at decision block is NO the method skips back to decision block where the above identified processing steps are repeated. Otherwise if the answer to the test at decision block is YES the method proceeds to block where the method receives a new search request at a federation server broadcasting federation server . At block the broadcasting federation server accesses its federation catalog to review other federation servers to which it is networked. The method then continues to another continuation terminal terminal A . From terminal A the method proceeds to block where the broadcasting federation server accesses a provider catalog to thereby access computing resources of providers listed in the provider catalog. At block the broadcasting federation server determines which computing resources have been allocated and which remain available. At block the broadcasting federation server executes steps at terminal A to determine whether there are special features or capabilities of computing resources to be exposed. The method then continues to another continuation terminal terminal A .

From terminal A the method proceeds to decision block where a test is performed to determine whether there are found networked federation servers that meet search criteria. If the answer to the test at decision block is NO the method proceeds to another continuation terminal terminal A . Otherwise if the answer to the test at decision block is YES then the method proceeds to another continuation terminal terminal A . From terminal A the method proceeds to decision block where another test is performed to determine whether there is a found federation server willing to send its provider catalog. If the answer to the test at decision block is NO the method proceeds to another continuation terminal terminal A . Otherwise if the answer to the test at decision block is YES then the method proceeds to block where the broadcasting federation server communicates with the found federation server and requests its provider catalog. At block the broadcasting federation server executes steps between terminals A A to determine the availability of computing resources at the found federation server. The method then continues to another continuation terminal terminal A .

From terminal A the method proceeds to block where the found federation server such as one in a geographic area via the method receives the new search request from the broadcasting federation server. At block the found federation server controls a set of computing resource providers via its provider catalog each of which has its own catalog of computing resources that can be provisioned. At block the found federation server accesses a provider catalog that details the computing resources to which it has access. At block the found federation server determines which computing resources are available and communicates the search results to the broadcasting federation server. The method then continues to terminal A and proceeds further to decision block where a test is performed to determine whether the broadcasting federation server uses the search results. If the answer to the test at decision block is YES the method continues to another continuation terminal terminal A. Otherwise if the answer to the test at decision block is NO the method continues to another continuation terminal terminal A .

From terminal A the method proceeds to block where the broadcasting federation server stores the search results for use in similar searches when they are requested in the future. At block found federation servers store analytical information regarding the availability of computing resources. The method then continues to terminal A and skips back to decision block where the above identified processing steps are repeated.

From terminal A the method proceeds to block where the method packages available computing resources into one or more offers and presents them to the user or the user s agent. At decision block a test is performed to determine whether there is another found federation server. If the answer to the test at decision block is YES the method continues to terminal A and skips back to decision block where the above identified processing steps are repeated. Otherwise if the answer to the test at decision block is NO the method continues to terminal A and skips back to decision block where the above identified processing steps are repeated.

From terminal A the method proceeds to decision block where a test is performed to determine whether the search request requires a search for a special capability or capabilities as well as services. If the answer to the test at decision block is NO the method returns to the invoking step such as step of . If the answer to the test at decision block is YES the method proceeds to block where the method performs a search of the special capability or capabilities of the computing resources. The method then continues to another decision block where another test is performed to determine whether the search finds the special capability or capabilities. If the answer to the test at decision block is NO the method returns to the invoking step such as step of . Otherwise if the answer to the test at decision block is YES the method continues to block where the method causes a plug in to be added to the user s agent to allow the user to access the special capability or capabilities of the computing resource. The method then returns to the invoking step such as step .

From terminal B the method proceeds to a set of method steps defined between a continuation terminal terminal C and an exit terminal terminal D . The set of method steps provisions the discovered computing resources. From terminal C the method proceeds to decision block where a test is performed to determine whether the user or the user s agent desires to provision the resources. If the answer to the test at decision block is NO the method proceeds to terminal A and skips back to decision block where the above identified processing steps are repeated. Otherwise if the answer to the test at decision block is YES the method proceeds to another decision block where another test is performed to determine whether the search request is a workload request. If the answer to the test at decision block is YES the method continues to another continuation terminal terminal C . Otherwise if the answer to the test at decision block is NO the method proceeds to block where the method provisions the computing resources. The method then continues to exit terminal D.

From terminal C the method proceeds to block where the method parses the workload which defines all computing resources required by a user or his user s agent in a single transaction. At block the method being executed at a federation server determine at which computing resource provider the computing resources are located. At block the method prepares to request the located computing resource providers to provision their respective computing resources. At block the method determines the order in which the computing resources are provisioned based on dependencies among computing resources. At block the method determines the dependencies among computing resources which include implicit dependencies based on resource type or explicit dependencies defined by the user . At block if allowed the method prepares to cause a synchronous provisioning of computing resources. At block the method chains computing resource requests together in a tree data structure so that as one or more computing resources are provisioned the next dependent one is identified and provisioned. The method continues to another continuation terminal terminal C .

From terminal C the method proceeds to decision block where a test is performed to determine whether multiple federation servers are involved to service the workload. If the answer to the test at decision block is NO the method continues to another continuation terminal terminal C . Otherwise if the answer to the test at decision block is YES the method proceeds to block where the method being executed on the broadcasting federation server resolves the computing resources into a tree data structure. At block the tree data structure describes the dependency order which specifies where the computing resources should be provisioned at which provider and at which federation server. At block the method partitions the tree data structure and sections of it are sent to federation servers that control computing resources specified in those sections. The method then continues to another continuation terminal terminal C .

From terminal C the method proceeds to decision block where a test is performed to determine whether a section has been provisioned by a federation server. If the answer to the test at decision block is NO the method continues to terminal C. Otherwise if the answer to the test at decision block is YES the method proceeds to block where the method sends a request from that federation server to the broadcasting federation server so as to coordinate the provisioning of the remaining sections in a dependency order. The method then continues to another decision block where another test is performed to determine whether there is another federation server in the tree. If the answer to the test at decision block is NO the method continues to exit terminal D. Otherwise if the answer to the test at decision block is YES the method proceeds to block where the method selects the next federation server in the dependency order and commands it to provision its computing resources. See terminal E. The method then continues to terminal C.

From terminal C the method proceeds to decision block where a test is performed to determine whether the determination of which provider to use is provided by the user. If the answer to the test at decision block is NO the method proceeds to another continuation terminal terminal C . Otherwise if the answer to the test at decision block is YES the method proceeds to block where the method provisions the computing resource of the specified provider by the user using the provider s supported protocols. See terminal E. The method then continues to terminal C and skips back to decision block where the above identified processing steps are repeated.

From terminal C the method proceeds to block where the method determines which provider meets explicit users requirements as specified in the search request such as pricing and implicit ones such as historical performance among others such as clauses in a service level agreement. The method then continues to block where the method provisions the computing resource of the determined provider using the provider s supported protocols. See terminal E. The method then continues to terminal C and skips back to decision block where the above identified processing steps are repeated.

From terminal D the method proceeds to a set of method steps defined between a continuation terminal terminal E and an exit terminal terminal F . The set of method steps executes a life cycle stage transition of computing resources including their un provisioning. The different stages of computing resources are described herein below. The actions that are performed when a computing resource is assigned a particular stage depend on the computing resource s current stage the type of the computing resource and the values of one or more of the computing resource s attributes. The state and action that result in the computing resource attaining a particular stage are identified by the stage name. For example allocate is the action that leads the computing resource to attain the stage of allocate . Typical interpretations of the stage and possible actions that can be performed on the resources are identified below along with an example of a virtual machine type of computing resource.

From terminal E the method proceeds to decision block where a test is performed to determine whether a stage change has been initiated by a user or a user s agent. If the answer to the test at decision block is NO the method proceeds to another continuation terminal terminal E . It would be appreciated by one skilled in the art that stages identified for a particular computing resource are a combination of the stages of the computing resources it constitutes. Digressing to a virtual machine example an instance of a virtual machine includes the virtual machine along with an image of an operating system and pieces of software to be run on the instance. Each of these computing resources operating system and pieces of software have their own stages and actions with their own stage changes. The stages of the virtual machine operating system and pieces of software are included in the stage changes identified together.

Returning to decision block if the answer to the test at decision block is YES the method proceeds to another decision block where another test is performed to determine whether the request is a stage transition to free stage. If the answer to the test at decision block is NO the method continues to another continuation terminal terminal E . Otherwise if the answer to the test at decision block is YES the method proceeds to block where the method causes the computing resource to be unutilized. The computing resource may not have a physical realization. The method then continues to another continuation terminal terminal E. Digressing to the virtual machine example the free stage indicates that the virtual machine is available for use. A virtual machine is typically realized on top of a physical machine. In this free stage a virtual machine is not addressable as it is not understood to be materialized as an addressable machine in any physical device.

Returning from the digression from terminal E the method proceeds to decision block where a test is performed to determine whether the request is a stage transition to a reserve stage. If the answer to the test at decision block is NO the method continues to another continuation terminal terminal E . Otherwise if the answer to the test at decision block is YES the method proceeds to block where the method causes the computing resource to be reserved for use. The reserve stage and associated actions provide an opportunity to check and ensure that the computing resource can be assigned and utilized by a given user. The method then continues to terminal E. Digressing to the virtual machine example the virtual machine computing resource with appropriate attributes is reserved. This stage and associated actions can be used to check if a virtual machine with given specifications can be allocated to the user.

Returning from the digression from terminal E the method proceeds to decision block where a test is performed to determine whether the request is a stage transition to an allocate stage. If the answer to the test at decision block is NO the method continues to another continuation terminal terminal E . Otherwise if the answer to the test at decision block is YES the method proceeds to block where the method causes the computing resource to be allocated to a user or a user s agent. This stage usually marks the start time for utilizing the computing resource by the user. The method then continues to another continuation terminal terminal E. Digressing to the virtual machine example allocating a virtual machine corresponds to identifying a particular physical machine that would host the virtual machine. Such allocated computing resources are identified to be used by a particular user and cannot be accessed by others.

Returning from the digression from terminal E the method proceeds to decision block where a test is performed to determine whether the request is a stage transition to an initialize stage or a construct stage. If the answer to the test at decision block is NO the method proceeds to another continuation terminal terminal E . Otherwise if the answer to the test at decision block is YES the method proceeds to block where the method causes the computing resource to enter initialization which configures the computing resource for procurement and provisioning of other dependent computing resources. The method then continues to another continuation terminal terminal E. Digressing to the virtual machine example the operating system and or software images are typically initialized in this stage. Such computing resources go through their own life cycle in the initialize stage and a complementary finalize stage which is discussed herein below.

From terminal E the method continues to decision block where a test is performed to determine whether the request is a stage transition to a start stage. If the answer to the test at decision block is NO the method continues to another continuation terminal terminal E . Otherwise if the answer to the test at decision block is YES the method continues to block where the method causes the computing resource to be available for use by being receptive to CRUD operations such as create retrieve update and destroy operations. The method then continues to another continuation terminal terminal E. Digressing to the virtual machine example the virtual machine along with its image can be started using the start action. The virtual machine is operational once in this stage and can be accessed and utilized through interface and components hosted by the virtual machine.

Returning from the digression from terminal E the method proceeds to decision block where a test is performed to determine whether the request is a stage transition to a stop stage. If the answer to the test at decision block is NO the method continues to another continuation terminal terminal E . Otherwise if the answer to the test at decision block is YES the method proceeds to block where the method causes the computing resource to be unavailable for use by the user or the user s agent and all data methods are disregarded. The method then continues to another continuation terminal terminal E. Digressing to the virtual machine example a virtual machine in the stop stage cannot be used by its user. Subsequent data methods are disregarded.

Returning from the digression from terminal E the method progresses to decision block where a test is performed to determine whether the request is a stage transition to a finalize stage. If the answer to the test at decision block is NO the method proceeds to another continuation terminal terminal E . Otherwise if the answer to the test at decision block is YES the method proceeds to block where the method causes the computing resource to be finalized to enable persistence facilitating capturing of internal states of the computing resource and its dependencies before the transition to a deallocate stage which is discussed herein below. The method then continues to another continuation terminal terminal E. Digressing to the virtual machine example the virtual machine resource finalization can be used to persist the image of the virtual machine for later use.

Returning from the digression from terminal E the method proceeds to decision block where a test is performed to determine whether the request is a stage transition to deallocate stage. If the answer to the test at decision block is NO the method continues to terminal E. Otherwise if the answer to the test at decision block is YES the method causes the computing resource to be decoupled from usage by the user or the user s agent. See block . This typically marks the end time for the usage of the computing resource by the user. The method then continues to another continuation terminal terminal E . Digressing to the virtual machine example the virtual memory de allocation releases the appropriate computing resource to the physical machine for use by subsequent users. The deallocated computing resource automatically transitions to a free stage.

Returning from the digression from terminal E at block the method begins a monitoring process to improve reliability and availability of the monitored computing resource. A test is performed at decision block to determine whether a failure has been found. If the answer to the test at decision block is NO the method continues to terminal E and skips back to decision block where the above identified processing steps are repeated. Otherwise if the answer to the test at decision block is YES the method proceeds to block where the method switches to a standby computing resource and causes it to transition to the stage of a failed computing resource. The method then continues to terminal E and skips back to decision block where the above identified processing steps are repeated.

From terminal E the method proceeds to block where if the transaction is completed the method collects usage data to discover trends a profile of the computing resource duration of use and so on so as to build patterns and templates for ease of deployment in the future. The method then returns to the invoking step.

While illustrative embodiments have been illustrated and described it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention.

