---

title: Data compression profiler for configuration of compression
abstract: A method and apparatus for determining one or more compression parameters suitable to compress a class of signals, may include inputting a test data set, being representative of a data set to be compressed, characterizing the test data, selecting a compression algorithm, calculating a distortion level to be used in determining the compression ratio (or a compression ratio to be used in determining the distortion level), generating a computer implemented model for the test data, selecting a recommended operating point based on a computer implemented model, and determining compression parameters corresponding to the operating point. The compression parameters may subsequently be applied for configuration of compression applied to one or more production data sets that are similar to the test data. This abstract does not limit the scope of the invention as described in the claims.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09118345&OS=09118345&RS=09118345
owner: Altera Corporation
number: 09118345
owner_city: San Jose
owner_country: US
publication_date: 20121004
---
The present invention is directed to a data compression profiler for configuration of compression to be applied to a particular type of data set to achieve a desired compression ratio or distortion level.

Compression algorithms in common applications such as audio and video compression use compression parameters based on a priori knowledge of the data characteristics to produce compressed data having specified compression ratios. Examples include the widely used JPEG and MPEG for image video compression and MP3 and WAV for audio compression. In particular MPEG profiles set parameters for the video compressor that will provide desired output bit rates or compression ratios of the compressed video data.

In other applications users may not have a full understanding of how to select appropriate parameters for a compression processor that will result in compressed data having an acceptable distortion level or compression ratio for the particular signal characteristics. Applications referred to herein as high performance computing HPC applications including supercomputing high energy physics climate modeling weather forecasting finite element analysis thermal and fluid flow and oil exploration data generate immense data sets for a wide variety of signal types. As of 2012 datasets for such simulations typically contain hundreds of Gigabytes 10E9 Bytes and for some applications may contain Petabytes 10E15 of data. Such large datasets cause immense bandwidth and capacity bottlenecks in computing systems so compression of such datasets has significant economic value. Optimal configuration of the compression processing based on the signal characteristics can provide more efficient use of computing resources and data storage capacity. Therefore there is a need for a systematic process for determining appropriate compression parameters for a given signal or data set for use with or selection of a compression algorithm.

Commonly owned patents and applications describe a variety of compression techniques applicable to fixed point integer and floating point representations of numerical data signal samples or image samples. These include U.S. Pat. No. 5 839 100 the 100 patent entitled Lossless and loss limited Compression of Sampled Data Signals by Wegener issued Nov. 17 1998. The commonly owned U.S. Pat. No. 7 009 533 the 533 patent entitled Adaptive Compression and Decompression of Bandlimited Signals by Wegener issued Mar. 7 2006 incorporated herein by reference describes compression algorithms that are configurable based on the signal data characteristic and measurement of pertinent signal characteristics for compression. The commonly owned U.S. patent application Ser. No. 12 605 245 the 245 application entitled Block Floating Point Compression of Signal Data by Wegener publication number 2011 0099295 published Apr. 28 2011 incorporated herein by reference describes a block floating point encoder and decoder for integer samples. The commonly owned U.S. patent application Ser. No. 13 534 330 the 330 application filed Jun. 27 2012 entitled Computationally Efficient Compression of Floating Point Data by Wegener incorporated herein by reference describes algorithms for direct compression floating point data by processing the exponent values and the mantissa values of the floating point format. The commonly owned patent application Ser. No. 13 617 061 the 061 application filed Sep. 14 2012 entitled Conversion and Compression of Floating Point and Integer Data by Wegener incorporated herein by reference describes algorithms for converting floating point data to integer data and compression of the integer data. The profiler described in the present specification may determine parameters for these compression algorithms for application to particular data sets.

The commonly owned patent application Ser. No. 12 891 312 the 312 application entitled Enhanced Multi processor Waveform Data Exchange Using Compression and Decompression by Wegener publication number 2011 0078222 published Mar. 31 2011 incorporated herein by reference describes configurable compression and decompression for fixed point or floating point data types in computing systems having multi core processors. In a multi core processing environment input intermediate and output waveform data are often exchanged among cores and between cores and memory devices. The 312 application describes a configurable compressor decompressor at each core that can compress decompress integer or floating point waveform data. The 312 application describes configurable compression decompression at the memory controller to compress decompress integer or floating point waveform data for transfer to from off chip memory in compressed packets. The profiler described in the present specification may determine parameters or select compression algorithms for the configurable compressor and decompressor of the 312 application.

The commonly owned patent application Ser. No. 13 617 205 the 205 application filed Sep. 14 2012 entitled Data Compression for Direct Memory Access Transfers by Wegener incorporated herein by reference describes providing compression for direct memory access DMA transfers of data and parameters for compression via a DMA descriptor. Parameters for compression provided to the DMA descriptor may be determined by profiler described herein. The commonly owned patent application Ser. No. 13 616 898 the 898 application filed Sep. 14 2012 entitled Processing System and Method Including Data Compression API by Wegener incorporated herein by reference describes an application programming interface API including operations and parameters for the operations which provides for data compression and decompression in conjunction with processes for moving data between memory elements of a memory system. The profiler described herein may provide parameters for the compression operations of the API.

The application of compression to a particular type of data is enhanced by a data compression profiler to provide one or more parameters for the compression algorithm. The compression profiler may be implemented in a computer system having a data processor and memory accessible by the data processor. The data processor may execute functions that implement operations of the profiler. The profiler operations apply the compression algorithm to a test data set to generate a plurality of compressed test data sets using a range of compression parameters so that the compressed data sets will have a plurality of compression ratios and a plurality of distortion levels. The test data set is representative of the data set to be compressed. The profiler operations generate data characterizing correlation between changes in the parameters of the compression algorithm and distortion. The data can be used to form a model the correlations between parameter changes and loss of data by the compression procedure. In cases in which the compression parameter corresponds with compression rate and the loss of data corresponds with distortion the model can comprise a rate distortion curve for the data set. Using the model and an input value reflecting minimum loss or maximum distortion or another desired characteristic the parameters for the compression procedure can be automatically determined. For example an input can identify an operating point on a rate distortion curve wherein the operating point is associated with a selected compression ratio and a selected distortion level. The profiler determines one or more parameters for the compression algorithm based on the operating point. The parameters determined using the model may be stored in the memory for use to configure the compression algorithm to be applied the data set. The compression may be applied to the data set by compression logic in the data processor by external compression logic or by a different computer system. The parameters for the compression algorithm may be provided to the compression logic by a DMA descriptor or an API.

One of the characteristics of the test data set that may be measured by the profiler or otherwise included in the model is the noise floor. The profiler may select the operating point based on the noise floor. By setting the selected distortion level to a value below the noise floor the compression distortion will be in the noisy bits of the original samples of the test data set. Preferably the selected distortion level is at least 6 decibels dB below the noise floor.

To aid in the selection of a compression algorithm a plurality of compression algorithms may be applied to the test data set to generate models for each of the compression algorithms. The user may provide criteria for the selection of a compression algorithm based on performance parameters and the processor can utilize the models for the plurality of compression algorithms to select a best fit for the provided criteria.

The test data set may be a subset of the data set to be compressed. The profiler may be configured to provide dynamic profiling. Dynamic profiling provides updates to the parameters by measuring characteristics of different subsets of the data set selected at various intervals and producing updated parameters for the compression algorithm based on the previous model or updated models. Updated models can be used with the selected operating points to adjust parameters of the compression algorithm.

As mentioned above one model that can be used is a rate distortion curve. The rate distortion curve relates compression ratios and compression distortion levels. Several metrics may be used for the compression ratio. The typical metric for the compression ratio is the ratio of the number of bits in the original samples to the number of bits in the compressed samples. Other metrics of the compression ratio include the number of bits per compressed sample the percentage size reduction of the compressed test data set compared to the test data set and the percentage of an original size of the test data set. The distortion level may be calculated based on the error between the decompressed samples and the original samples. Other metrics for the distortion level include a percent uncertainty an effective number of bits ENOB and a number of significant digits.

The data compression configuration technology described herein is referred to as a profiler. The profiler provides a structured process for determining compression parameters. illustrates where the profiler operates with respect to compression and decompression of a data set. Production data is any data that a user may want to compress and store. The user may select a set of test data from the production data that is representative of the entire production data . Alternatively the test data may provide samples that are typical data or simulated data of the signal type in the production data . The selected test data and the data format information are entered into the profiler wherein the profiler may determine a compression ratio a decompressed signal quality setting and other compression parameters. Data format information may include a data type specifier indicating the data type of test data and production data selected from common numerical data types typically used in computer systems such as but not limited to int8 signed 8 bit integers uint8 unsigned 8 bit integers int16 signed 16 bit integers uint16 unsigned 16 bit integers int32 signed 32 bit integers uint32 unsigned 32 bit integers single 32 bit floating point numbers and double 64 bit floating point numbers . The compression ratio and other parameters may be stored in a direct memory access DMA descriptor associated with the production data which contains information for the configuration of the compressor . The compression ratio and parameters may also be provided to an applications program interface API for configuring compression logic. Alternatively the profiler output may be stored separately in text .txt format or binary format in a data storage device.

The data characterization block measures various parameters of the test data such as the spectral peak spectral noise floor time domain peak time domain mean variance and or standard deviation. The profiler then uses one or more of these parameters generated by data characterization to determine a distortion level or noise floor as described with respect to . Several methods for calculating the compression distortion as a function of the input signal x the decompressed signal y and an error signal e e x y are listed in . illustrates the spectrum of a portion of the test data and shows the relationship between the noise floor of the spectrum and various distortion levels and their associated compression ratios. When the distortion level of a decompressed signal y is below the noise floor of the spectrum of test data representing the original signal x subsequent calculations performed using the decompressed signal y in place of the original signal x should not substantially affect the results.

The algorithm selection block described with respect to may include a list of compression algorithms compression modes lossless fixed rate fixed quality etc. or compression performance parameters described below such as complexity metrics for achieving a desired compression ratio or desired decompressed signal quality. The algorithm selection may select a compression algorithm based on performance parameters chosen by the user. Alternatively the user may choose a default compression algorithm mode and or performance parameter which may be the one that the profiler recommends.

The compressor decompressor block applies the selected compression algorithm to the test data to produce compressed test data for the distortion measurements used to generate the rate distortion curve. The compressor decompressor may decompress the compressed test data to form decompressed test data for distortion measurements as described with respect to . Referring to the profiler may include logic for the compressor decompressor block applied to the test data . Alternatively the profiler may access the compressor used to compress the production data or an external compressor decompressor.

The rate distortion curve generation block measures the distortion levels resulting from the selected algorithm applied to the test data at different compression ratios. The rate distortion curve relates distortion levels to compression ratios. The distortion levels and compression ratios may be represented by various metrics as described below. The rate distortion curve information may be stored as a table in memory for use in calculating compression parameters. Interpolation or curve fitting of the measured compression ratio and distortion level points may be used to calculate intermediate points for the rate distortion curve. A graph of the rate distortion curve may also be displayed for the user. illustrates an example of a rate distortion curve as described below.

The compression parameter generation block may use the rate distortion curve data to recommend an operating point and associated compression parameters for the compression algorithm. The compression parameter generation may also receive parameters from user inputs . This allows the user to manually adjust the compression ratio or distortion level R D operating point to different values than the one recommended by the profiler. The profiler then determines the associated compression ratio for the specified distortion level.

The profiler output may provide the compression ratio and the compression parameters based on the user inputs . The profiler output may be stored in memory entered into a DMA descriptor described with respect to or stored in a file.

The data characterization block provides time domain and or spectral domain analysis of the signal in the test data . Some results of the data characterization block may be provided to the profiler output for display . In various embodiments the following may be calculated and displayed as appropriate for the signal type and application.

The profiler output for one dimensional signals may provide one or more of the following for the display 

The user may specify spectrum calculation parameters such as FFT size i.e. from 128 to 16384 1024 pt FFTs 50 overlap Hanning or Hamming window that determine the results shown in the spectra display pane for display .

The profiler output for two dimensional images may provide one or more of the following for the display 

As illustrated in metrics of compression distortion may be computed in the time domain or the frequency domain. In the following x represents the original signal image data i.e. of the test data y represents the decompressed signal image data after one pass of compression decompression processing and e represents a metric of the error signal difference between the original and decompressed signal image data .

2 Dynamic time domain metrics of x y and or e calculate the above metrics over N time windows either overlapping or non overlapping to generate multiple values per waveform x y and or e where x includes the samples of test data . Window lengths and overlaps may be set to values appropriate for the application. For example typical window lengths may be in the range from one thousand samples to one million samples with window overlaps of 0 no overlap 25 50 or 75 .

For image data distortion measurements include peak SNR PSNR and structural similarity metric SSIM . The most commonly used image quality metric is the peak signal to noise ratio PSNR . In the case of image compression the value to be quantified is the noise introduced by the compression decompression process. When the original image is available PSNR is calculated from the mean square error MSE of the pixel by pixel differences between the original image O and the processed image P and max Oi j is the largest pixel intensity 

Structural similarity combines three separate image quality features intensity contrast and structure to generate a quantitative metric of image quality. The SSIM metric is a value between 0.0 and 1.0 where larger SSIM values indicate a higher degree of similarity between images x and y. Structural similarity S x y between two images x and y is the product of three feature metrics where x and y represent the local sample means of images x and y and represent the local standard deviations of images x and y and represents the local cross correlation of images x and y after subtracting their means. The local mean local standard deviation and local cross correlation are calculated for the pixel values in local regions of the images. A local region is a block of pixels having dimensions such and 10 10 or any appropriate dimensions. The blocks of pixels may be overlapping or non overlapping.

The constants C1 C2 and C are small positive constants added to guarantee numerical stability in cases where the terms approach zero. The first term l x y referred to as a luminance term is a function of the local means of the images being compared. The contrast term c x y the second term in Equation 4 reflects the local contrast to noise ratio which is affected by the local spatial frequency. The third term s x y referred to as a structure term measures the structural similarity cross correlation between local regions. The SSIM metric may include the product of all three terms for S x y . Alternative forms of the SSIM metric may include a single one of the three terms luminance l x y contrast c x y or structure s x y or the product of any two of the three terms l x y s x y and c x y .

An example of algorithm complexity selection is further described with respect to where C MODE parameter allows users to select from a low complexity floating point data compression algorithm FP2 a medium complexity floating point data compression algorithm FP4 and a high quality higher complexity floating point data compression algorithm. The user inputs may provide performance parameters to the algorithm selection block . The algorithm selection block may include a table stored in memory that relates the performance parameters to compression algorithms supporting a compression algorithm selection based on the above performance parameters.

The rate distortion curve generation block may measure the compression results for a lossless mode fixed quality mode or fixed rate mode. In the lossless mode the distortion is zero so the rate distortion curve generation block measures the resulting compression ratio such as . For the fixed quality mode the distortion may be related to a compression control parameter such as an attenuator setting for the compressor and the resulting compression ratio is displayed on the rate distortion curve. For the fixed rate mode the compression ratio is fixed and the resulting distortion ratio is displayed on the rate distortion curve. The rate distortion curve generation block uses the measurement points to create the rate distortion curve . Any curve fitting scheme may be used including a simple straight line fit between the measurement points to generate the rate distortion curve . An important feature of the rate distortion curve is that there can be a large number theoretically an infinite number of rate distortion operating points along this curve so the user is not limited to a single or limited number of compression ratios. In fixed rate mode a compression ratio does not need to be an integer value but can be any value that meets the compression ratio selected by the user. In fixed quality mode a distortion level does not need to be an integer value but can be any value that meets the distortion level selected by the user.

In one embodiment the compression ratio CR is incremented from the lossless CR to generate seven measurement points for the rate distortion curve such as the following 

Preferably the selected compression ratios for the measurement points encompass the desired distortion level for the recommended operating point .

In a preferred embodiment the profiler may set a recommended operating point so that the resulting distortion is at least 6 dB below the noise floor . The value 6 dB corresponds to 1 bit of the data sample. As such the recommended operating point with a distortion of at least 6 dB below the noise floor corresponds to distortion loss in the noisy bits of the original sample. Thus the compression distortion of the decompressed samples is lower than the noise floor of the original signal samples. Returning to the example of the noise floor is 39.6 dB thus the distortion for the recommended operating point is 33.6 dB and the corresponding compression ratio determined from the rate distortion curve is 2.9 1. The points and any other point along the rate distortion curve that are less than the noise floor level correspond to compression distortion in the noisy bits of the original samples. The operating point and other operating points above the noise floor level correspond to compression distortion within the effective bits of the signal in the original samples. The relation between the effective bits and noisy bits in the original samples is further described with respect to .

Alternatively manual input of a distortion level to the compression parameter generation step is an option that allows the user to change the default distortion level or compression ratio recommended by the profiler. The profiler may then calculate the compression ratio corresponding to the input distortion level for the selected compression algorithm based on the algorithm s associated rate distortion curve in .

The distortion level in this example is given by the SDR. The rate distortion curve shows that the SDR decreases with increasing compression ratio. The operating point has the corresponding SDR of 112 dB and compression ratio of 4.63 1. Other metrics of distortion include but are not limited to the following 

The histogram of log base 2 values indicate the frequency of maximum bit locations occupied by the signal samples. The error histogram is calculated as follows 

The histogram of log base 2 values indicate the frequency of maximum bit locations occupied by the error samples. Comparison of the histograms and indicates that the compression error is located in bits that are below the signal range for this example.

The graph illustrates the bit registers for the mantissa of an integer representation of a sample. The effective bits of an original signal sample are the bits above the noise bits of the sample. The effective number of bits ENOB of the original sample is calculated by the SNR dB of the original samples divided by 6.02 dB per bit . For this example effective bits of the original samples would occupy a range indicated by the most significant bit MSB to the noise floor . The bits below the noise floor to the least significant bit LSB are noisy bits of the original sample. The recommended distortion level corresponds to 6 dB below the noise floor within the noisy bits illustrated in the graph . The ENOB of the decompressed samples is calculated by the SDR divided by 6.02 where the distortion is measured by the compression error e y x. The decompressed sample has effective bits that encompass some of the noisy bits of the original sample. For this example the compression conserves the effective bits of the original samples and the distortion bits of the decompressed samples are within the noisy bits of the original samples. This example illustrates that selecting an operating point below the noise floor of the original signal will preserve the effective bits of the original samples and confine compression distortion to the noisy bits.

Once an operating point on an R D curve has been chosen the corresponding compression control parameters are then determined including the compression algorithm selection compression mode fixed rate or fixed quality or lossless and compression setting in fixed quality mode the attenuator setting in fixed rate mode the target compression ratio .

The profiler output may provide parameters to the compressor to be applied to the production data . In various embodiments the parameters may be provided via a DMA descriptor or an API for configuration of compression operations to be applied by the compressor to the production data .

An API including a set of operations and parameters for the operations may provide for data compression and decompression. The set of operations can be implemented in the data processor using software implemented functions which can be hardware assisted configured to use the parameters and perform the operations of the API. Parameters of the API can include indicators of data type size of a sample set and compressed packet location destination for a compression operation source for a decompression operation uncompressed location destination for a decompression operation source for a compression operation and a selected compression mode such as lossless fixed rate or fixed quality modes. The profiler output may provide compression parameters to the API. Operations of the API include engines that move data between the compressed data location and the uncompressed data location in conjunction with which one of compression and decompression is performed as specified by parameters of the API. Data in an uncompressed location as the term uncompressed is used herein can refer to data which can be provided as input to a compression engine such as the production data or as data output from a decompression engine including never compressed data or previously compressed and then decompressed data. A set of different compression and decompression algorithms can be included in the operations of the API and compression parameters of the API can identify a selected one of the different algorithms to be applied for compression and decompression operations in a particular data move operation. The set of different algorithms can include algorithms specialized for data types identified in the parameters of the API including for example algorithms for compression of floating point numbers algorithms for compression of integers algorithms for compression of image data and so on. Also the set of different algorithms can include algorithms specialized for compression qualities as identified in the compression parameters of the API such as lossless compression lossy compression of different types compression to achieve specified compression ratios algorithms that maintain specified limits on compression quality in terms of loss of data and so on. The data processor can execute application programs that utilize the API for configuring the compressor . Users can develop user application programs that rely on the API without being burdened by the specific configuration of a hardware platform on which the user application is to be executed. Providing compression parameters via an API is further described in the 898 application.

User interface input devices may include a keyboard pointing devices such as a mouse trackball touchpad or graphics tablet a scanner a touch screen incorporated into the display audio input devices such as voice recognition systems microphones and other types of input devices. In general use of the term input device is intended to include all possible types of devices and ways to input information into computer system that may be suitable for providing user inputs to the profiler .

User interface output devices may include a display subsystem a printer a fax machine or non visual displays such as audio output devices. The display subsystem may include a cathode ray tube CRT a flat panel device such as a liquid crystal display LCD a projection device or some other mechanism for creating a visible image suitable for the display of the profiler output . The display subsystem may also provide non visual display such as via audio output devices. In general use of the term output device is intended to include all possible types of devices and ways to output information from computer system to the user or to another machine or computer system.

Storage subsystem stores the basic programming and data constructs that may provide some or all of the functions for the profiler compression and or decompression described herein. These software modules are generally executed by processor . The processor s may include one or more of a DSP microprocessor microcontroller central processing unit CPU or graphics processing unit GPU or a combination of these devices. The processor s may also include dedicated application specific integrated circuit ASIC or field programmable gate array FPGA logic implementing some or all of the floating point compression and or decompression functionality.

Memory subsystem typically includes a number of memories including a main random access memory RAM for storage of instructions and data during program execution and a read only memory ROM in which fixed instructions are stored. File storage subsystem provides persistent storage for program and data files and may include a hard disk drive a floppy disk drive along with associated removable media a CD ROM drive an optical drive or removable media cartridges including Universal Serial Bus USB thumb drives with USB interface and flash media storage. The databases and modules implementing the functionality of certain embodiments may be stored by file storage subsystem .

Bus subsystem provides a mechanism for letting the various components and subsystems of computer system communicate with each other as intended. Although bus subsystem is shown schematically as a single bus alternative embodiments of the bus subsystem may use multiple busses.

Computer readable medium can be a medium associated with file storage subsystem and or with communication interface subsystem . The computer readable medium can be a hard disk a floppy disk a CD ROM an optical medium removable media cartridge USB thumb drive flash media storage or electromagnetic wave. The computer readable medium is shown storing a compressed data file . The computer readable medium may also store programs implementing the functions of compression decompression and or the profiler .

Computer system itself can be of varying types including a personal computer a portable computer a workstation a computer terminal a network computer a mainframe a television a smart phone a tablet computer or any other data processing system or user device. Due to the ever changing nature of computers and networks the description of computer system depicted in is intended only as a specific example for purposes of illustrating the preferred embodiments. Many other configurations of computer system are possible having more or fewer components than the computer system depicted in .

For example when the user selects lossless floating point mode the floating point pre processor converts floating point samples to integer samples. Preferably both 32 bit single precision floats and 64 bit double precision floating point samples may be converted to 32 bit integer samples. The floating point pre processor is further described in the 061 application. The source selector selects the integer samples for compression by the redundancy remover based on control parameters received from the controller .

The direct floating point compressor provides direct compression of the floating point samples without first converting the floating point samples to integer samples. The direct floating point compressor produces lower latency and lower complexity than conversion followed by integer compression. Alternative compression modes for direct floating point compression that may be implemented by the direct floating point compressor . Two of these compression modes referred to herein as FP2 and FP4 apply thresholds to the exponents of the floating point samples to categorize the floating point samples. The FP2 mode applies one threshold to generate two classes or buckets . The FP4 mode applies three thresholds to generate 4 classes or buckets . Varying amounts of compression are applied to floating point samples based on their class. The profiler s algorithm selection block may provide performance parameters for used for selecting the compression mode. The selected compression mode may be indicated by the C MODE parameter in the DMA descriptor . The compression operations for the direct floating point compression are described in the 330 application.

The image pre processor IMPP processes various imaging data formats including Red Green Blue RGB Intensity Chroma YUV and image sensor pixels Bayer matrix . These imaging data formats are a special integer sub type. The image pre processor reformats the image samples to a one dimensional color component interleaved stream of integers. The source selector selects the image sample stream for compression by the redundancy remover based on control parameters received from the controller . The user input of data type information provides the D TYPE parameters to the DMA descriptor used to configure the image pre processor .

In this embodiment the redundancy remover RR uses a signed 32 bit integer internal data path generates two redundancy removed alternatives and then determines whether the samples themselves or one of the two redundancy removed alternatives would result in the best compression. The redundancy remover calculates the number of bits per compressed packet for each of the alternatives and selects the one having the fewest bits. The alternative selected for the next packet i 1 may be performed at the end of a current packet i . The selected alternative is stored in the packet header of next packet i 1 and will provide a control parameter for decompression operations. The redundancy remover produces compressed integer samples for the bit packer .

The profiler s data characterization block may include a center frequency estimator that for 1D signals to set RR internal control parameters STRIDE1 STRIDE2 ADD SUB and FIFO2 SEL based on the estimated center frequency value. For example a center frequency estimator may select one of six frequency bands DC f 8 f 6 f 4 f 3 and f 2 where fis the sample rate. These bands determine the control parameters STRIDE1 STRIDE2 FIFO2 SEL and ADD SUB values that control the redundancy remover RR and add subtract elements. The center frequency estimator operates over a programmable number of input samples typically 256 or 1024 . Aspects of the redundancy remover are described in the 533 patent. The redundancy remover is described in more detail below with respect to .

For input data that does not exhibit a center frequency such as image data the profiler s user inputs may select the parameters STRIDE1 STRIDE2 FIFO2 SEL and ADD SUB for the redundancy remover RR . The RR CONFIG parameters of the DMA descriptor may provide these parameters for the compressor for application to the production data .

The bit packer may apply block floating point encoding to the compressed integer samples output from the redundancy remover . The bit packer and the header generator may be applied by the compressor when the production data is being compressed to form compressed data packets. The header generator may include some of the RR CONFIG and MODE parameters that would be used for decompression operations. For the compressor applied by the profiler the bit packer may be applied to determine the number of bits of the compressed test data without actual formation of compressed packets. The block floating point encoding groups the compressed integer samples and encodes 1 or 2 block exponents with every group of 4 or 8 mantissas. The block exponents or more specifically exponent differences are encoded in pairs when possible and as absolute exponents when they cannot. The exponent tokens are preferably 4 or 8 bits long. The block floating point exponent encoding exploits correlation between the block exponents to minimize the number of bits required to encode them. The exponent tokens are followed by reduced mantissas corresponding to the encoded group. Each of the reduced mantissas in a group contain the same number of bits indicated by the block exponent for the group. The 245 application describes embodiments of the block floating point encoding that may be implemented for the bit packer .

The bit unpacker decodes each packet header to extract control parameter information for decompression operations. The bit unpacker applies block floating point decoding to each packet s compressed groups of exponent tokens and reduced mantissas. The exponent token for the block floating point encoding group indicates the number of bits for each mantissa in the group. The 245 application describes embodiments of the block floating point decoding that may be implemented for the bit unpacker .

The packet header parser accepts 48 bits from a parser component of the bit unpacker . After verifying a SYNC word the packet header parser retrieves the control parameters STRIDE1 ADD SUB DERIV and INT OR FLOAT fields and distributes them to the decompressor logic blocks that require these parameters. The packet header parser extracts the various control parameters such as ATTEN STRIDE1 ADD SUB and DERIV from each packet header and configures the signal regenerator accordingly. Alternatively the profiler s user inputs may provide the parameters for the signal regenerator . For compressed test data where packets may not have been formed the user inputs may provide the parameters for decompression and the packet header parser may be bypassed. The signal regenerator reverses the derivative and attenuator actions of the redundancy remover RR . The signal regenerator retrieves several of its control parameters from each packet header including STRIDE1 ADD SUB DERIV and ATTEN. Where the redundancy remover subtracted samples signal regenerator adds them. Where the redundancy remover added samples the signal regenerator subtracts them. Where the redundancy remover attenuated samples the signal regenerator amplifies them.

The direct floating point decompressor decompresses the compressed data such as from the FP2 and FP4 modes and reconstructs floating point data. The 981 application describes decompression to reconstruct the floating point data for several alternative compression modes that may be implemented by the direct floating point decompressor .

The floating point post processor which receives its input from the signal regenerator regenerates an approximation to the original floating point values that were input to the floating point pre processor .

The image post processor regenerates an exact or approximate representation of the color components that were input to the image pre processor . For example if the image pre processor performed chroma downsampling image post processor performs chroma upsampling. If the image pre processor performed color space conversion the image post processor performs color space re conversion. The decompression controller provides the control parameters to configure the operations of the image post processor .

The output selector selects an input from the direct floating point decompressor the floating point post processor or image post processor and provides the selected data to the number aligner .

The number aligner accepts 32 64 128 or 256 bit units from the output selector and separates demultiplexes them into sample wide units. The number aligner uses the control parameter D TYPE to properly separate the 32 bit input bits into 1 2 4 or sample values depending on the data type of the output samples and the width of the bus at the output of the number aligner . When the decompressor is applied to the compressed test data the decompressed test data provide the decompressed signal y used for calculating distortion for the rate distortion curve as described above.

The attenuation factor may be set to different values to generate levels of compression and distortion in the compressed data. Referring to the profiler may apply the compressor to the test data using multiple values of the attenuation factor and measure the resulting distortion levels and compression ratios to provide points for the rate distortion curve . The profiler creates a table of the attenuation factor values and the corresponding distortion and compression levels. To select an operating point the profiler may perform a binary search of attenuation factor values to meet the desired distortion level or compression ratio.

For the following description the variable x n represents the integer sample with or without attenuation. The FIFO buffer stores N previous samples x n 1 to x n N where the delay element provides x n 1 . The selector selects a sample x n m with the desired sample separation from the FIFO buffer . The add subtract element computes the sum or difference between the current integer sample x n and the selected sample x n m to form a first result x1 n . If add subtract element is set to subtract the result x1 n represents a first derivative. When the sample spacing index m 1 the result x1 n is the first derivative of adjacent samples. When the third selector is set to 1 the first result x1 n is delayed by a second delay element to form x1 n 1 and provided to a second FIFO buffer . The second FIFO buffer may store up to M samples of x1 from x1 n 1 to x1 n M . The second selector selects a sample x1 n p from the second FIFO buffer for input to the second adder subtractor . The third selector provides the other input to the adder subtractor . When the third selector is set to 1 the sample x1 n is input to the second adder subtractor . When the second adder subtractor is configured to subtract the result is the second derivative x2 n x1 n x1 n p . When the sample spacing indices m 1 and p 1 the resulting x2 n is the second derivative over adjacent samples. The fourth selector may select the alternative using the fewest bits for the previous packet and provide the respective sample x n x1 n or x2 n to the block floating point encoder . The FIFO buffers and store N and M samples respectively. The sizes N and M may be set to accommodate compression calculations for a range of data formats.

The block includes logic to determine which of alternatives x n x1 n or x2 n for the current packet would produce the least number of bits or most compression for a compressed packet. A selection parameter corresponding to the alternative with the most compression is provided to the fourth selector and stored in the packet header of the next packet. The selector applies the selection parameter to samples for the next packet. Determining the selection for the next packet based on the current packet data reduces the latency of compression processing. Alternatively the selection parameter may be based on the current packet data and stored in the current compressed packet if the latency to determine the minimum bits per packet is tolerable. Alternatively the selection of x n x1 n or x2 n may be made during a training period and fixed for subsequent packets. Alternatively the selector may use a manually set selection parameter received from the compression controller . When the compression processing uses the block floating point encoder the block logic may determine which of the alternatives x n x n and x n produces the most compression as follows 

While the above may not explicitly calculate the exact number of bits per compressed packet for each alternative the alternative producing the best compression is indicated by the lowest total. Alternatively the maximum magnitude sample max i in each block N GROUP samples for each alternative can be substituted for n exp i .

The adaptive compressor supports compression of multidimensional data structures or multiplexed data structures. Certain parameter settings for the components in are appropriate for compression for two dimensional 2D data such as image samples. For example let N equal the number of samples representing a row of a 2D data set or an image so that a sequence of the integer samples x n represents row ordered samples of two or more rows of the 2D data set where x 0 to x N 1 is the first row x N to x 2N 1 is the second row etc. When the first selector is set to select x N and the first adder subtractor is configured to subtract the resulting x n x n x n N is the difference between corresponding samples in adjacent rows. When the second selector is set to select 1 the third selector is set to select 0 and the second adder subtractor is configured to subtract the resulting x n x n x n 1 is the sample difference within the same row. The fourth selector would select the input sample x n the row difference sample x n or the sample difference x n for block floating point encoding. In the prior discussion with the DMA descriptor fields H DIM and V DIM represented the number of pixels per raster row and number of rasters rows per frame.

For multiplexed data a sequence of samples x n may represent multiple channels of data such as data from multiple sensors multiplexed together to form the sequence. For example N may represent the number of multiplexed channels where x n to x n N 1 represent one sample from each channel at a given time instant and x n N represents two temporally consecutive samples from the same channel. When the first selector is set to select x n N and the first adder subtractor is configured to subtract the resulting x n x n x n N is the difference between temporally consecutive samples from the same data channel. When the second selector selects samples from a second channel offset from the first channel and the second adder subtractor is configured to subtract the difference x n x n x n p is the difference between two different channels at a given time instant. The difference between channel data may provide compression when the different channels are correlated. The selector would select the input sample x n the intra channel difference x n or the inter channel difference x n for block floating point encoding.

The adaptive compressor supports compression of data having different center frequencies. As described in the 533 patent the sample separations and the addition or subtraction operations may be selected to optimally compress the samples based on their center frequency. Techniques for center frequency detection are described in the 533 patent. The center frequency is indicated as a fraction of the sample rate SR. The sample separation parameter may be used by selectors and . The selection parameter for the third selector is set to 1 for calculating second order derivatives. The add subtract configurations apply to both adder subtractors and . The selection of addition or subtraction is related to the positive or negative correlation of the samples separated by the sample separation parameter corresponding to the center frequency.

The fourth selector makes selections of x n or x n to initialize the data for the compressed packet. For initialization the fourth selector may select the sample x n for absolute encoding as the initial sample of the compressed packet. Thus when the first derivatives or differences x n are to be encoded for a particular compressed packet at least the initial sample for the packet will be the absolutely encoded x n . When the second derivatives x n are to be encoded for a particular compressed packet the fourth selector may select the sample x n for the initial sample and the first derivative x n for the second sample of the compressed packet. This initialization may be performed at least once per compressed packet.

The compression controller may provide the parameters for the components of the adaptive compressor architecture including an attenuation factor for the attenuator the sample separation parameter for the selectors and add subtract selection parameter for the adder subtractors and and selection parameter for the third selector . The compression controller may store configuration parameters corresponding to multiple data structures in memory. When a particular data structure is to be compressed the compression controller may retrieve the appropriate parameters and provide them to the corresponding components of the adaptive compressor. Data structure information may include for example on multidimensional data parameters multiplexed data parameters or image data parameters. The compression controller may receive information on center frequency for example from a center frequency detector of the data characterization block and select the corresponding parameters for the components of the adaptive compressor as described in the 533 patent.

Referring to the control parameter STRIDE1 refers to the sample separation used by the selector to select the sample x n m from the FIFO buffer . The control parameter STRIDE2 refers to the sample separation used by the second selector to selects a sample x n p from the second FIFO buffer . The control parameter ADD SUB indicates the operation performed by the adder subtractor elements and . The control parameter DERIV indicates the selection of x n x1 n or x2 n by the selector . The controller may provide these control parameters to the redundancy remover and the header generator . The DERIV parameter may be set by the user or determined during compression processing.

Components of the decompressor are described in the following. illustrates an adaptive decompressor architecture for the signal regenerator of as used in one example system for integer decompression. The decompression controller of may include the functionality of the decompression controller of . The bit unpacker applies block floating point BFP decoding to provide decoded samples to the adaptive decompressor. The adaptive decompressor performs sums or differences between decoded samples separated by selectable sample spacings to invert the compression operations performed by the adaptive compressor of . For the following description the variable s n represents a decoded sample output from the BFP decoder of the bit unpacker . The FIFO buffer stores N previous samples s n 1 to s n N where the delay element provides s n 1 . The selector selects a sample s n m with the desired sample separation from the FIFO buffer . The add subtract element computes the sum or difference between the current decoded sample s n and the selected sample s n m to form a first result s n . If add subtract element is configured to add the result s n represents a first integral s n s n s n m . When the sample spacing index m 1 the result s n is the first integral of adjacent decoded samples. When the third selector is set to 1 the first result s n is delayed by a second delay element to form s n 1 and provided to a second FIFO buffer . The second FIFO buffer may store up to M samples of sfrom s n 1 to s n M . The second selector selects a sample s n p from the second FIFO buffer for input to the second adder subtractor . The third selector provides the other input to the adder subtractor . When the third selector is set to 1 the sample s n is input to the second adder subtractor . When the second adder subtractor is configured to add the result is the second integral s n s n s n p . When the sample spacing indices m 1 and p 1 the resulting s n is the second integral over adjacent decoded samples. The fourth selector selects the sample s n s n or s n indicated by the corresponding decompression parameter and provides the selected sample to the multiplier . The multiplier multiplies the selected sample by a gain factor to invert the attenuation factor applied by attenuator . Since applying the attenuator produced lossy compression multiplication by the gain factor will produce an approximation of original sample value. If attenuation was not applied during compression the gain factor for multiplier is set to 1 or the multiplier is bypassed. The decompression controller may determine the gain factor based on attenuation information ATTEN extracted from the compressed packet header or provided by the profiler . The FIFO buffers and store N and M samples respectively to accommodate different data structures.

The adaptive decompressor architecture supports decompression of multidimensional data structures or multiplexed data structures using parameter settings described with respect to the adaptive compressor architecture of . For the 2D data set example where N equals the number of samples representing a row of a 2D data set or an image the first selector is set to select s N and the first adder subtractor is configured to add the resulting s n s n s n N sums the decoded samples to reverse the difference operation of adjacent rows performed for compression. When the second selector is set to select 1 the third selector is set to select 0 and the second adder subtractor is configured to add the resulting s n s n s n 1 sums decoded samples to reverse the difference operation of samples within the same row performed for compression. For the multiplexed data example described above N represents the number of multiplexed channels. When the first selector is set to select s n N and the first adder subtractor is configured to add the resulting s n s n s n N reverses the difference between temporally consecutive samples from the same data channel performed for compression. When the second selector selects samples from the second channel offset from the first channel and the second adder subtractor is configured to add the difference s n s n s n p reverses the difference between two different channels performed for compression. The fourth selector selects from s n s n or s n based on the compression parameter from the compressed packet header or provided by the profiler .

The adaptive decompressor architecture supports decompression of data having different center frequencies. The selectors and select sample spacing and the addition or subtraction operations to reverse the operations performed by the adaptive compressor the samples based on their center frequency. The selection parameter for the third selector is set to 1 for calculating second order integrals. The configurations of the adder subtractors and reverse the operations of the adder subtractors and .

The fourth selector makes selections of s n or s n corresponding to the initialized data of the compressed packet. When the first derivatives or differences x n were encoded for a particular compressed packet at least the initial sample for the packet will be absolutely encoded. For the initial decoded sample from the compressed packet the fourth selector may select s n as the initial sample. The fourth selector would select the first integral s n for the remaining decoded samples from the compressed packet. When the second derivatives x n were encoded for a particular compressed packet the fourth selector may select the sample s n for the initial sample and the first integral s n for the second sample and the second integral s n for the remaining decoded samples from the compressed packet. This initialization may be performed at least once for decoded samples from a compressed packet depending on the initialization performed during compression.

The decompression controller may provide the decompression parameters for the components of the adaptive decompressor including the gain factor for the multiplier the sample separation parameters for the selectors and add subtract configuration parameters for the adder subtractors and and selection parameters for the selectors and . The decompression controller may determine the decompression parameters based on the compression parameters extracted from the compressed packet header or provided by the profiler . For example the gain factor may be generated using a lookup table based on the control parameter ATTEN retrieved from the compressed packet header or provided by the profiler . The samples separation parameters STRIDE1 and STRIDE2 apply to the selectors and respectively. The ADD SUB parameter configures the adder subtractor elements and . The DERIV parameter determines the selection of s n s1 n or s2 n by the selector .

Referring to the floating point post processor may apply integer to float format conversion to the decompressed integer samples output from the signal regenerator to the reconstruct the floating point data.

Some of the control parameters for the compression modes described above are encoded in the compression DMA descriptor . For the compression DMA descriptor the parameters are related as follows 

RR MANUAL STRIDE1 corresponds to a manual setting for the sample separation parameter for the selector and the selector .

RR MANUAL ADD SUB corresponds to manual settings for the add subtract elements and and the add subtract elements and .

RR MANUAL DERIV corresponds to a manual setting of the selection parameter for the selector and selector .

RR AUTO MANUAL corresponds to providing automatic or manual settings for three parameters sample separation parameter STRIDE1 for the selector and the selector ADD SUB settings for the add subtract elements and and the add subtract elements and and DERIV selection parameter for the selector and selector .

The profiler may recommend an initial recommended operating point using test data which is representative of production data and apply parameters of the operating point to the entire set of production data . Alternatively the profiler may be configured to generate intermittent updates to the recommended operating point referred to as dynamic profiling. In the dynamic profiling mode the recommended operating point recommended distortion level or recommended compression ratio can change over time. For instance some data sets may contain periodic dynamic range or spectral fluctuations that would not be tracked if a single operating point were to be used for all instances of production data . In such instances it may be preferable to apply the profiler to the production data periodically or intermittently.

In the dynamic profiling mode the rate at which the profiler provides updates may be periodic i.e. profiler provides updates every P samples or at given time intervals . Alternatively the profiler may provide updates based on external changes to the system i.e. changing the operating mode of a process or changes to the production data itself i.e. the signal peak noise floor or other signal statistics have changed . For each update the profiler may process another subset of the production data to generate a new profiler output . The dynamic profiling mode may include a function that determines when and whether lossless or lossy compression should be applied to production data based on user preferences.

While preferred embodiments of the compressors and have been described the profiler may be used to determine parameters specific to other compression algorithms. The relationship between the compression algorithm s parameters and the distortion levels and or compression ratios can be determined for example by Monte Carlo simulations using test data sets or simulated data. Once the relationship has been determined a table of parameters versus distortion levels and or compression ratios can be stored in memory for use by the compression parameter generation block .

A preferred platform for implementation of the profiler is a computer system such as described with respect to where the data processor executes a program with functions that implement operations of the profiler as described with respect to . The profiler program may be stored in the computer readable medium . The profiler output parameters may be stored to the RAM the file storage subsystem or a computer readable medium . Display of the profiler output may be provided to the user interface output devices . User inputs may be provided via the user interface input devices . The test data set and or the production data may be provided via the communication interface . The compressed data output from the compressor may be stored in the storage subsystem or computer readable medium or the compressed data may be output via the communication interface . The data processor may execute the operations of the compressors and . Alternatively the data processor may include specialized logic for the operations of the compressor and compressor decompressor . Alternatively the data processor may execute the operations of the compressor decompressor and the compressor may be implemented in other specialized logic in the computer system. Alternatively the compressor may be implemented in a different computer system from the profiler or in external compression logic. For example the profiler as executed by the data processor may store the parameters profiler output to the computer readable medium for later processing of the production data by a different computer system or by external compression logic.

Specialized logic for compression and or decompression operations can be implemented in hardware software or a combination of both and incorporated in computing systems. The hardware implementations include ASIC FPGA or an intellectual property IP block. The compression and decompression operations can be implemented in software or firmware on a programmable processor such as a digital signal processor DSP microprocessor microcontroller multi core CPU or GPU as further described in the 061 application.

While the preferred embodiments of the invention have been illustrated and described it will be clear that the invention is not limited to these embodiments only. Numerous modifications changes variations substitutions and equivalents will be apparent to those skilled in the art without departing from the spirit and scope of the invention as described in the claims.

