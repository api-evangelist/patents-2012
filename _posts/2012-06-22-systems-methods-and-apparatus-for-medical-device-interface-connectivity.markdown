---

title: Systems, methods, and apparatus for medical device interface connectivity
abstract: Certain examples provide systems, apparatus, and methods for adaptive, dynamic medical device connectivity. In an example, a medical device interface system includes a device interface connecting a medical device to a client system and enabling exchange of data between the medical device and the client system, the device interface includes a plug and play detector detecting a connection of the medical device to the device interface and a serial agent gathering information from the medical device via a connection between the medical device and the device interface and selecting an appropriate device driver to operate and interact with the medical device connected to the device interface regardless of a presence or absence of an existing plug and play capability of the medical device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09471515&OS=09471515&RS=09471515
owner: General Electric Company
number: 09471515
owner_city: Schenectady
owner_country: US
publication_date: 20120622
---
The present application is a continuation of and claims priority to U.S. patent application Ser. No. 12 484 868 filed Jun. 15 2009 the disclosure of which is incorporated herein.

The present invention generally relates to medical device connectivity. In particular the present invention relates to systems apparatus and methods for adaptive dynamic medical device interface connectivity.

Clinical environments often involve a variety of medical devices. In a clinical setting such as an intensive care unit ICU devices are brought to the bedside when needed and manually set up and configured by clinicians who may have to frequently connect and disconnect the device during normal operation. Thus clinicians frequently fail to properly configure or set up such devices.

Certain examples provide systems apparatus and methods for adaptive dynamic medical device connectivity.

In an example a medical device interface system includes a device interface connecting a medical device to a client system and enabling exchange of data between the medical device and the client system the device interface includes a plug and play detector detecting a connection of the medical device to the device interface and a serial agent gathering information from the medical device via a connection between the medical device and the device interface and selecting an appropriate device driver to operate and interact with the medical device connected to the device interface regardless of a presence or absence of an existing plug and play capability of the medical device.

In an example a machine implemented method for interfacing between a medical device and a clinical information system. The method includes detecting using a device interface having a serial agent a presence of a medical device on a network including a clinical information system. The method additionally includes gathering information from the medical device connected to the device interface. The method further includes creating an object representing the medical device the object including identification and device driver information regarding the medical device. In addition the method includes searching a device driver repository at the device interface for an object and one or more associated device drivers to represent the medical device. The method includes registering the medical device with the system using the object. The method also includes interacting with the medical device using the one or more associated device drivers to communicate between the medical device and the clinical information system.

In an example an article of manufacture includes a computer readable storage medium and executable program instructions embodied in the computer readable storage medium that when executed by a programmable system cause the system to perform functions that implement a gaming system arranged to implement a probabilistic game. The functions include a device interface routine connecting a medical device to a client system and enabling exchange of data between the medical device and the client system. The device interface routine includes a plug and play detector detecting a connection of the medical device to the device interface and a serial agent gathering information from the medical device via a connection between the medical device and the device interface and selecting an appropriate device driver to operate and interact with the medical device connected to the device interface regardless of a presence or absence of an existing plug and play capability of the medical device.

The foregoing summary as well as the following detailed description of certain embodiments of the present invention will be better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention certain embodiments are shown in the drawings. It should be understood however that the present invention is not limited to the arrangements and instrumentality shown in the attached drawings.

Although the following discloses example methods systems articles of manufacture and apparatus including among other components software executed on hardware it should be noted that such methods and apparatus are merely illustrative and should not be considered as limiting. For example it is contemplated that any or all of these hardware and software components could be embodied exclusively in hardware exclusively in software exclusively in firmware or in any combination of hardware software and or firmware. Accordingly while the following describes example methods systems articles of manufacture and apparatus the examples provided are not the only way to implement such methods systems articles of manufacture and apparatus.

When any of the appended claims are read to cover a purely software and or firmware implementation at least one of the elements is hereby expressly defined to include a tangible medium such as a memory DVD CD etc. storing the software and or firmware.

For clinical information systems medical devices can be used to meet clinical care needs. In a clinical setting such as an intensive care unit ICU medical devices are brought to a patient bedside when needed and set up by clinicians who do not put an emphasis or focus on configuration or set up to start stop a particular device due to frequent connection and disconnection of medical devices.

In an example a serial agent is capable of executing a plurality of device drivers on a personal computer and or other computing system or device. A client system that connects to the serial agent can retrieve medical device data in a common format from a medical device with a corresponding device driver. For example the serial agent converts different device specific formats into one XML based format.

In operation for example a client connected to a serial agent service sends a starting and a stopping command for a specific medical device. The serial agent transforming the device specific communication protocol into a common format then gives the command information to the client system. The serial agent can run any kind of device driver that conforms to the defined interface. Medical devices supported by the serial agent utilize a communication protocol such as an RS 232 port based communication protocol a TCP IP communication protocol etc. For example a variety of medical devices such as analyzers monitors pumps ventilators etc. can be connected to a client system via the serial agent.

Example medical devices provided in a non restrictive list for purposes of illustration only include one or more of a 3M CDI 300 400 Blood Gas Analyzer Abbott Q Vue Q2 CCO Monitor ALARIS Asena ALARIS IVAC P6000 TIVA P7000 ALARIS IVAC TIVA TCI Baxter Sat 2 Baxter VIGILANCE BBraun INFUSOMAT BBraun INFUSOMAT FM BBraun PERFUSOR COMPACT S BBraun Perfusor FT B D Modular pump Bird 8400ST STi Ventilator Braun DIANET Datex Ohmeda AVANCE Datex Ohmeda CENTIVA Datex Ohmeda DELTATRAC Datex Ohmeda ELVIRA Datex Ohmeda ERICA Datex Ohmeda INOVENT Datex Ohmeda OSCAR Datex Ohmeda SATLITE Datex Ohmeda TONOCAP DONI DRV Dr ger Babylog 8000 8000 SC Dr eger EVITA XL ventilator Dr ger EVITA Dr ger EVITA 2 Dr ger EVITA 2 DURA Dr ger EVITA 4 Dr ger JULIAN Dr ger SAVINA F. Stephan Stephanie Fresenius Vial Base A GE Datex Ohmeda S 5 Patient Monitor GE Unity AWARE Gateway HL7 Hamilton Galileo GOLD Hamilton Galileo Ventilator Ivac 560 CIM Ivac P Series Kone 565 MCM 504 404 Volumetric Infusion Pump Newport E150 Breeze Ventilator Newport E200 Wave Ventilator Philips Information Center HL7 Philips IntelliVue MP40 50 60 70 90 Pulsion PICCO MONITOR Puritan Bennett 7200 Puritan Bennett 7200 VENTILATOR Liter version Puritan Bennett 840 VENTILATOR Puritan Bennett 7200 VENTILATOR ml version Puritan Bennett 840 VENTILATOR Siemens SC9000 Siemens SERVO 300 Siemens SERVO 900 Siemens SERVOI Siemens SIRECUST SLE 2000 High Frequency Ventilator Solar 8000i Solar 8000M Solar 9500 TBird AVS III TERUMO infusion pump TERUMO syringe pump TOP 3300 Infusion Pump etc.

Using a serial converter such as a universal serial bus USB serial converter to uniquely identify the device for serial agent clinical information system platform software. The serial agent platform transforms medical device data in a plug and play manner to enable use of the medical device by the clinical information system and or transfer of information between the medical device and the clinical information system for example. Plug and play functionality provides improved bedside medical care usage of connected medical device s . With an adaptively connected medical device a hospital clinician does not need to pay attention to manually configure a connected medical device but can instead simply plug in a device when it is needed. Furthermore a clinician can disconnect a device without paying additional attention to software configuration for the device and or for the clinical information system. In an example the same serial agent device driver can be used for a plurality of plug and play enabled devices as well as non plug and play devices such as connectable medical devices using the RS 232 data communication protocol without additional modification of existing device drivers and or additional hardware support such as a concentrator box traditionally used to ensure connectivity . For example using a pre configured USB RS 232 converter to uniquely identifying a medical device e.g. referred to as a device identifier the medical device can be initiated and used with common device driver that is used for both plug and play and non plug and play devices. Medical devices without plug and play support can be transformed into plug and play devices within the serial agent system for example.

As shown for example in a medical device connectivity system includes a clinical system a device interface a driver library and a medical device . In an example a device interface such as the CENTRICITY Device Interface sold by GE Healthcare provides a framework to execute device drivers that gather information from one or more connected medical devices . The framework includes a driver library including device drivers for a plurality of medical devices . From the library can be found a plurality of device drivers for different medical devices.

Using the device interface discovery of a connected device e.g. hardware firmware and or software is facilitated without manual device configuration or user intervention e.g. plug and play connectivity . Plug and play connectivity can be facilitated using universal serial bus USB FIREWIRE and or other hot plug hot swap connection for example. Thus device connectivity can be developed in the device interface to enable dynamic adaptive connectivity with the interface using a converter such as a Future Technology Devices International FTDI USB serial converter for example. Information can be gathered from and or transmitted to a medical device via an interface such as an interface including a USB connector converter to allow the device to communicate with one or more clinical systems such as a hospital information system HIS radiology information system RIS clinical information system CIS cardiovascular information system CVIS picture archiving and communication systems PACS library information system LIS electronic medical record EMR electronic health record EHR personal health record PHR and or imaging system for example. Using the interface and driver library the system detects the medical device such as a USB enabled medical device being connected or disconnected from the clinical system . Using the interface and driver library the system supports a plug and play communication mode such as a USB communication mode to gather data from the medical device .

Each layer performs its own set of related tasks. For example the Network Server communicates with a client system such as the clinical system over a data communication interface such as a TCP IP interface using data messages such as iXML interface eXtensible Markup Language messages which structures the data used by the device interface. The iXML Engine parses inbound messages and builds outbound iXML messages for example. The Driver Engine manages the device drivers and forms a pool of threads for device driver execution. The device drivers communicate with the one or more connected medical devices and translate data from medical device s into device interface internal format. Adapter s provide a communication channel e.g. serial or TCP IP to the medical device.

In an example a client system can develop one or more device drivers using an interface protocol adaptor. The driver s can be added to the driver library and used to configure driver information for the interface .

As shown for example in the data flow of a client requests medical data by sending an iXML start message to the network server . The network server receives the iXML start message and generates a message to be processed by the iXML engine . The message to be processed is used by the iXML engine to create a session to select a device driver to run the medical device.

As shown in a process message is received by the iXML engine . The process message is received by a data downstream module of the iXML engine . The data downstream module instructs the iXML processor via a parse message to which the iXML processor responds with an acknowledgement . After receiving an acknowledgement from the iXML processor the data downstream module generates a new session message which is sent to a session manager .

The session manager creates a new session and queries a cache manager to determine whether a driver for the connected medical device exists . If the driver is in the cache then that information is used to subscribe for data with the driver engine via the data upstream module . If the driver is not found in the cache then driver information is parsed to determine an appropriate driver for subscription at the driver engine . After a driver is identified and selected an acknowledgement is sent from the cache manager to the session manager to generate a new session . The new session is provided to the data downstream module .

After receiving the new session information the data downstream module generates a start message for the driver engine . The driver engine responds with an acknowledgement to the data downstream . A reply is generated okaying the start for an iXML generator . The iXML generator generates a reply iXML message which is provided by the data downstream as a reply to the network server .

In the data sequence to start a plug and play enabled device session is modified to initialize for example a USB mode and include additional threads to detect a USB device connection and perform a watchdog function for such a thread. Additionally a session identifier is created for internal interface use and a virtual communication port is created for the USB serial medical device. While is shown as a non plug and play program sequence and is shown as a plug and play program sequence both types of connectivity can co exist in the same system.

In response to the USB device information a create session message is generated from the data stream . The session manager receives the create session message and generates a start session message for the driver manager . The session manager can create a session identifier for internal use and reference. The driver manager responds with an acknowledgement . The session manager similarly responds with an acknowledgement to the data stream .

The driver manager generates a new driver message and transmits a message to the data stream . In response the data stream sends a request to generate an XML message to an XML generator . The XML generator generates a new message and acknowledges the generation of the new message to the data stream .

Using the data sequence of a processing thread for detecting USB device connection is created in the device interface . An event caused by a change in system registry information leads to the device interface to scan system device information and detect the USB and or other data connection. The USB detector is also responsible for checking the device information in memory such as an electronically erasable programmable read only memory EEPROM erasable programmable read only memory EPROM other programmable read only memory PROM random access memory RAM flash memory hard disk drive etc. The USB detector notifies the session manager to start stop a session when it detects a USB device connected disconnected to the interface . Additionally a watch dog thread running in the background on the driver engine can be used to launch the USB detector thread

In an example the device interface includes a USB serial converter having a memory such as an EEPROM and or other data storage such as the memory discussed above. The USB converter EEPROM is configured to adapt a medical device for use by a clinical system . Configuration information for the USB converter to accommodate one or more medical devices via the device interface can include a unique device identifier for each device instance a device vendor identifier a product identifier a device name a driver file name etc. If the device identifier from the EEPROM is in conflict with other device s connected in the system the device interface sends an iXML message to the client to specify that a second device having the same device identifier as a first device and the device interface is not able to communicate with the second device for example.

In an example a configuration tool can be provided for the USB converter. The configuration tool parses basic USB information and device information specific to the interface . USB basic information can include vendor identifier product identifier serial number enable USB serial number etc. Interface specific information can include device identifier device name and device file e.g. dynamic link library DLL name etc. The configuration tool can erase interface specific device information for example. The configuration tool can be used to upload interface device specific information to the USB EEPROM based on user input for example. For a USB device connected to the device interface the USB serial number is enabled. The configuration tool can provide a way to enable the USB serial number.

A USB device object is created to detect USB converter connection and or disconnection. To create the device object device information such as vendor identifier product identifier device serial number and virtual communication port number is retrieved from an operating system registry. An application programming interface can be used to obtain device identifier device and device driver file name from the serial converter. Using USB converter serial number the virtual communication port and device name can be associated.

As illustrated for example in a USB device object can be created via the device interface using information from a system registry and a converter EEPROM . Information such as product identifier vendor identifier serial number and communication port are transferred from the system registry to the device object . Information such as product identifier vendor identifier serial number device identifier device name and driver file name are transferred from the EEPROM to the device object . The device object stores information such as communication port device identifier device name driver name and connection status for use in communicating with the connected device for example.

In an example USB and or other connection detection can be handled using a plurality of e.g. four states in a state machine. Example states include invalid new connection no change and removed connection. For example when a USB device is connected but a virtual communication port is not found or device information read from an EEPROM has failed the device interface notifies the client by sending out an XML message when the USB connection is in the invalid state. When a USB converter is connected to the system the device interface initiates a new session in the new connection state. In the no change state the USB connection is maintained and the device session is working. The device driver is continuing to execute and collect data from the connected medical device in this state. When a USB converter is unplugged or otherwise disconnected a USB session is removed in the removed connection state for example.

At a list of connected device s is checked to determine whether the end of the list has been reached. If not the process loops back to review the registry at . If so the process passes to the USB detector to determine whether at the USB device exists in a USB device list for the system. If so at then nothing further is done. If not then at device interface state is examined to determine whether the state is set to invalid. If the state is not invalid then at the EEPROM is read. If the EEPROM is successfully read then at the USB device is added to the USB device list. The state is set to new connection and the EEPROM read for the UESB device information is noted. If the EEPROM was not successful read then at the USB device is added to the USB device list and the state is set to new connection. However the USB device information read EEPROM value is set to false and after XMS state is set to invalid. At if the state is invalid at the USB device information is added to the list and interface state is set to invalid.

At if the process has not reached the end of the device registration list the process loops back to reviewing the list at . If the process has reached the end of the registration list then at USB connectors are checked to determine whether a connector has been removed. If not then at nothing is done. If so then at USB device information for that device is set to a state of removed connection. At if USB device information read EEPROM has been set to false then the EEPROM is read at . If not then nothing is done at .

At the USB manager determines if the interface is in a new connection state. If yes then the read EEPROM okay value is compared to true. If the EEPROM was read okay then at existence of a device session is determined. If no device session exists then at a start driver is notified to start a device driver for the connected device. If a device session exists then at the device connection state is set to no change. At if the connection state is no change then at nothing is done. At if the state is set to invalid then at an error notification is generated.

In operation the start device module of the client system sends a message such as an iXML message from the client system to the serial agent kernel of the serial agent . In response to the message the kernel initiates an appropriate device driver to communicate with the medical device . The device responds to the device driver and to the serial agent kernel . The serial agent kernel in turn provides device data to the client system .

The plug and play detector of the serial agent kernel can interact with a medical device to obtain information from the device identifier for the medical device . Using the device identification information the plug and play detector can select an appropriate device driver for the device . The device communicates with the device driver and the serial agent kernel .

As illustrated for example in the client system is a Clinical Information System that connects to the serial agent with a TCP IP socket. The client system and serial agent communicate using an XML based protocol. The client system asks the serial agent to start a device driver s . Alternatively or in addition the serial agent can start and or stop a device without a command message from the client system e.g. for a plug and play device . After the driver has been started the driver collects data from the medical device at configured intervals and passes the data to the serial agent kernel . The kernel transforms the data into the XML based protocol and provides the data to the client system . The data flows between the serial agent and client system . The system runs the same device with same driver in a plug play manner by adding a device identifier in the system. The serial agent kernel builds in a plug and play device detector that collects device information from the device identifier . The serial agent kernel starts the device accordingly. The manual start stop a device and plug and play data flows can co exist in the same system simultaneously for example.

Thus a variety of plug and play and non plug and play devices can be adapted to function with a client clinical system using a device interface converter to help facilitate ease of device usage for medical care. A USB serial converter for example can be used to uniquely identify the device for a serial agent clinical information system platform via hardware software and or firmware. The serial agent platform is then enabled to transform device data in a plug and play manner.

In one or more devices communicate with a router box associated with a clinical information system client via serial connection in a first operating room . Similarly one or more devices communicate with a router box in a second operating room . The router boxes communicate with a clinical information system server having a device interface serial agent such that control is more centralized than distributed among multiple serial agents as in .

The processor of is coupled to a chipset which includes a memory controller and an input output I O controller . As is well known a chipset typically provides I O and memory management functions as well as a plurality of general purpose and or special purpose registers timers etc. that are accessible or used by one or more processors coupled to the chipset . The memory controller performs functions that enable the processor or processors if there are multiple processors to access a system memory and a mass storage memory .

The system memory may include any desired type of volatile and or non volatile memory such as for example static random access memory SRAM dynamic random access memory DRAM flash memory read only memory ROM etc. The mass storage memory may include any desired type of mass storage device including hard disk drives optical drives tape storage devices etc.

The I O controller performs functions that enable the processor to communicate with peripheral input output I O devices and and a network interface via an I O bus . The I O devices and may be any desired type of I O device such as for example a keyboard a video display or monitor a mouse etc. The network interface may be for example an Ethernet device an asynchronous transfer mode ATM device an 802.11 device a DSL modem a cable modem a cellular modem etc. that enables the processor system to communicate with another processor system.

While the memory controller and the I O controller are depicted in as separate blocks within the chipset the functions performed by these blocks may be integrated within a single semiconductor circuit or may be implemented using two or more separate integrated circuits.

Certain embodiments contemplate methods systems and computer program products on any machine readable media to implement functionality described above. Certain embodiments may be implemented using an existing computer processor or by a special purpose computer processor incorporated for this or another purpose or by a hardwired and or firmware system for example.

Some or all of the system apparatus and or article of manufacture components described above or parts thereof can be implemented using instructions code and or other software and or firmware etc. stored on a machine accessible or readable medium and executable by for example a processor system e.g. the example processor system of . When any of the appended claims are read to cover a purely software and or firmware implementation at least one of the components is hereby expressly defined to include a tangible medium such as a memory DVD CD etc. storing the software and or firmware.

One or more of the components of the systems and or steps of the methods described above may be implemented alone or in combination in hardware firmware and or as a set of instructions in software for example. Certain embodiments may be provided as a set of instructions residing on a computer readable medium such as a memory hard disk DVD or CD for execution on a general purpose computer or other processing device. Certain embodiments of the present invention may omit one or more of the method steps and or perform the steps in a different order than the order listed. For example some steps may not be performed in certain embodiments of the present invention. As a further example certain steps may be performed in a different temporal order including simultaneously than listed above.

Certain embodiments include computer readable media for carrying or having computer executable instructions or data structures stored thereon. Such computer readable media may be any available media that may be accessed by a general purpose or special purpose computer or other machine with a processor. By way of example such computer readable media may comprise RAM ROM PROM EPROM EEPROM Flash CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium which can be used to carry or store desired program code in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer or other machine with a processor. Combinations of the above are also included within the scope of computer readable media. Computer executable instructions comprise for example instructions and data which cause a general purpose computer special purpose computer or special purpose processing machines to perform a certain function or group of functions.

Generally computer executable instructions include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Computer executable instructions associated data structures and program modules represent examples of program code for executing steps of certain methods and systems disclosed herein. The particular sequence of such executable instructions or associated data structures represent examples of corresponding acts for implementing the functions described in such steps.

Embodiments of the present invention may be practiced in a networked environment using logical connections to one or more remote computers having processors. Logical connections may include a local area network LAN and a wide area network WAN that are presented here by way of example and not limitation. Such networking environments are commonplace in office wide or enterprise wide computer networks intranets and the Internet and may use a wide variety of different communication protocols. Those skilled in the art will appreciate that such network computing environments will typically encompass many types of computer system configurations including personal computers hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by local and remote processing devices that are linked either by hardwired links wireless links or by a combination of hardwired or wireless links through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

An exemplary system for implementing the overall system or portions of embodiments of the invention might include a general purpose computing device in the form of a computer including a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit. The system memory may include read only memory ROM and random access memory RAM . The computer may also include a magnetic hard disk drive for reading from and writing to a magnetic hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical media. The drives and their associated computer readable media provide nonvolatile storage of computer executable instructions data structures program modules and other data for the computer.

While the invention has been described with reference to certain embodiments it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted without departing from the scope of the invention. In addition many modifications may be made to adapt a particular situation or material to the teachings of the invention without departing from its scope. Therefore it is intended that the invention not be limited to the particular embodiment disclosed but that the invention will include all embodiments falling within the scope of the appended claims.

