---

title: Partitioning processes across clusters by process type to optimize use of cluster specific configurations
abstract: A system and method for virtualization and cloud security are disclosed. According to one embodiment, a system comprises a first multi-core processing cluster and a second multi-core processing cluster in communication with a network interface card and software instructions. When the software instructions are executed by the second multi-core processing cluster they cause the second multi-core processing cluster to receive a request for a service, create a new or invoke an existing virtual machine to service the request, and return a desired result indicative of successful completion of the service to the first multi-core processing cluster.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09477524&OS=09477524&RS=09477524
owner: NeoDana, Inc.
number: 09477524
owner_city: Palo Alto
owner_country: US
publication_date: 20121231
---
This application claims priority from co pending PCT Patent Application No. PCT US2011 042866 having an International Filing Date of Jul. 1 2011 entitled A SYSTEM AND METHOD FOR VIRTUALIZATION AND CLOUD SECURITY which claims the benefit of priority to U.S. Provisional Application Ser. No. 61 360 658 filed Jul. 1 2010 and entitled A SYSTEM AND METHOD FOR CLOUD SECURITY MANAGEMENT which are all hereby incorporated by reference as if set forth in full in this document for all purposes.

The present methods and system relate to computer systems and more particularly to process allocation among processor clusters.

Virtualization in computing is the creation of a virtual rather than actual version of something such as a hardware platform an operating system a storage device or network resources. Virtualization is part of an overall trend in enterprise IT that includes autonomic computing a scenario in which the IT environment will be able to manage itself based on perceived activity and utility computing in which computer processing power is seen as a utility that clients can pay for only as needed. The usual goal of virtualization is to centralize administrative tasks while improving scalability and workloads.

The aggregation of a large number of users using high speed personal computers smart phones tablet computers and intelligent mobile devices significantly increases required network packet processing performance in a non virtualized and virtualized server of data center environment. Processing on each complicated packet from various mobile devices is necessary to differentiate and secure services. Green computing is becoming essential to limit power consumption. Also shortened infrastructure deployment schedules can result in faster revenue generation.

Recent technology improvements can achieve the expected level of performance while providing a scalable solution with unrivalled performance in integration and power consumption ratio. Some of those included multi core CPUs and hardware industry standards such as the AMC standard the PCI Express standard the Advanced TCA standard and the Blade Center standard.

High performance software packet processing is typically required to efficiently implement the different protocols and ensure an adequate quality of service. Most advanced networks have adopted a class based quality of service concept so they require per packet processing for differentiating between packet services.

Traffic between a data center and remote users is often encrypted using IPSec and requires the assistance of hardware crypto engines. Multi core technology provides necessary processing capabilities and offers a high level of integration with lower power consumption required by advanced networks. However software design complexities persist making development and integration difficult. The result is a hindrance to deployment of multi core based solutions.

With virtualization and cloud computing gradually becoming more and more popular existing servers can be logically grouped into a single large pool of available resources. Aggregating the capacity of these devices into a single pool of available resources enables efficient utilization of servers which results in a related reduction in both capital and operational expenses. However virtualization leaves traditional network security measures inadequate to protect against the emerging security threats in the virtual environment. This is due to a lack of major protection in the data path between servers and storage subsystems. The lack of protection prevents enterprises from experiencing the full benefits of a major data center transformation.

While cloud computing is often seen as increasing security risks and introducing new threat vectors it also presents an exciting opportunity to improve security. Characteristics of clouds such as standardization automation and increased visibility into the infrastructure can dramatically boost security levels. Running computing services in isolated domains providing default encryption of data in motion and at rest and controlling data through virtual storage have all become activities that can improve accountability and reduce the loss of data. In addition automated provisioning and reclamation of hardened run time images can reduce the attack surface and improve forensics.

A system and method for virtualization and cloud security are disclosed. According to one embodiment a system comprises a first multitasking multi core processing cluster and a second real time based identical or non identical multi core processing cluster in communication with network interface cards or via a PCI e backplane and software instructions and interface mechanisms. When the software instructions are executed by the second multi core processing cluster they cause the second multi core processing cluster to receive a request for a service create a new or invoke an existing software function to service the request and return a desired result indicative of successful completion of the service to the first multi core processing cluster.

It should be noted that the figures are not necessarily drawn to scale and that elements of similar structures or functions are generally represented by like reference numerals for illustrative purposes throughout the figures. It also should be noted that the figures are only intended to facilitate the description of the various embodiments described herein. The figures do not describe every aspect of the teachings disclosed herein and do not limit the scope of the claims.

A system and method for virtualization and cloud security are disclosed. According to one embodiment illustrates a system comprising a first multi core processing cluster which is controlled by multi tasking OS in communication with a network interface cards or via PCI e backplane and software instructions to the system through interface. When the software instructions are executed by the second non identical or identical multi core processing cluster inside of system which is controlled by real time operating system RTOS inside of system they cause the second non identical or identical multi core processing cluster to receive a request for a service create a new or invoke an existing software functions to service the request and return a desired result through software instructions and interface or indicative of successful completion of the service to the first multi core processing cluster.

According to one embodiment the present system provides an efficient implementation of fast path packet processing in control data plane SW to take advantage of the performance benefits provided by multi core multiprocessing cluster . The present system includes a complete comprehensive and ready to use set of networking features including VLAN Link Aggregation GRE encapsulation GTP and IP over IP tunneling Layer 3 forwarding with virtual routing management routing and virtual routing Per Packet QoS Quality of Service and Filtering ACLs software functions in control data plane SW IPSec SVTI IKEv1 and IKEv2 for security functions in security SW . A more detailed description of SW and SW follows below.

According to one embodiment the present system is fully integrated with a control data plane SW of operating system RTOS for maximum reuse of software simplified integration and hiding of multi core design complexities. The present system runs on multi core platforms with unified high level APIs for interfacing with built in services and functions in software SW and hardware HW accelerators such as crypto engines or packet processing engines in multi core cluster and scales over different multi core architectures identical or non identical as multi core cluster including low cost high volume hardware form factor like PCI e or ATCA configurations for enterprises and network equipment in data centers. The present system provides an open architecture to ease integration.

According to one embodiment one aspect of the present system includes offloading network packet processing into control data plane software stack SW from application server in a data center. Yet another aspect of the present system includes offloading additional security software stacks SW to support security and other application functions from application server in data center. The third party UTM Unified Threat Management or Enterprise Security stacks can be integrated and being run on SW . The description of UTM and Enterprise security stacks are explained below.

According to one embodiment a security software stack UTM Unified Threat Management or Enterprise Security Stack is provided by third party vendors. In addition to security software stacks running on the system transparently there are security related functions that can be accelerated by a multi core processing cluster contained in a hardware blade described below.

According to one embodiment another aspect of the present system includes providing virtualization security. A virtualization security platform including combination of hardware multi core cluster and software platform built in on top of the hardware blades further described below is the foundation of cloud computing security platform and includes additional software virtual machines running in system to offload network packet processing and security virtual machines from a virtualized server of system into . The network packet processing and security functions are then instead handled by packet processing software virtual machines and security software virtual machines as part of the present system according to one embodiment.

Virtualization or non virtualization security software or packet processing software is downloaded from a remote server onto an existing user s system through secured links and remote call centers for existing customers. For new users it is preinstalled and delivered with accompanying hardware. Once the software is loaded upon initial power up the customers applications are downloaded on top of software on various hardware modules depending on the security applications.

The systems described herein might provide for integration of virtual and physical real time multi core clusters systems into physical server or server virtualization environment virtual machine awareness implementation of security policies on various virtual machine levels or non virtualized system levels visibility and control of virtual machines security and packet processing provided by a combination of virtualized software appliances and non virtualized security software and packet processing software end point data protection at level of standard computer server or host which is the source of data generation acceleration of network traffic and security functions open software framework for third party security software vendors elimination of host performance penalties and or data security.

The present system includes distributed real time computing capabilities integrated in a standard server platform. Distributed real time computing clusters expanded from vertically and horizontally according to one embodiment can be thought of as server farms which have heterogeneous multi core processing clusters and server farm resources can be increased on demand when workloads are increased. Server farm resources can be quickly activated de activated upgraded or deployed.

Performance scalability of the present system is two dimensional horizontal and vertical. The same or identical multi core cluster function can be expanded vertically by a homogeneous architecture and different or non identical multi core function can be expanded horizontal by heterogeneous architecture. Homogeneous and heterogeneous architectures are explained below in greater detail.

The present system provides for power consumption optimization. An application load driven approach provides the best power consumption utilization. Resources are enabled and disabled based on demand to follow a green energy policy.

A software programming model of the present system provides that all existing applications are not required to be rewritten and that all emerging new applications can be running transparently by using exiting APIs application programming interface call from existing operating systems or expanded APIs call from library supplied by third party software vendors

Hardware HW blade multi core cluster provides hardware for the development of an intelligent virtualization and cloud n and security system which includes hardware and software that supports the growing demand for intelligent network security acceleration and application offload for converged datacenter applications such as network storage security deep packet inspection DPI firewall WAN Optimization and application delivery ADC computing. HW multi core cluster comprises a multi core processor cluster e.g. Freescale P4080QorIQ DDR memory flash memory 10 Gb or 1 Gb network interfaces mini SD MMC card slot a USB port a serial console port and a battery backed RTC. Software configuring the hardware includes a real time OS i.e. real time Linux and driver under Linux to control the hardware blocks and functions.

The multi core cluster with security and network packet processing hardware acceleration unit in the multi core cluster in general can handle appropriate functions for implementation of DPI DDI deep packet inspection deep data inspection . In addition acceleration can handle protocol processing for example including Ethernet iSCSI FC FCoE HTTP SIP and SNMP content format includes XML HTML JavaScript and pattern match includes IPS pattern and virus patterns. A more detailed description of security software further follows below.

Other embodiments of the HW multi core cluster can include a different multi core cluster such as one from Cavium Networks Netlogic and Tilera for example to accelerate other emerging functions. For example the Cavium Networks Nitrox family aids in implementing other security measures and the Tilera GX family aids in implementing multimedia streaming and compression decompression applications. While the depicted embodiment includes the PCI e form factor ATCA and blade center and other form factors can be used without departing from the spirit of the present system.

A real time operating system RTOS is an operating system OS intended to serve real time application requests. A key characteristic of a RTOS is the level of its consistency concerning the amount of time it takes to accept and complete an application s task the variability is jitter. A hard real time operating system has less jitter than a soft real time operating system. The chief design goal is not high throughput but rather a guarantee of a soft or hard performance category. A RTOS that can usually or generally meet a deadline is a soft real time OS but if it can meet a deadline deterministically it is a hard real time OS.

A real time OS has an advanced algorithm for scheduling. Scheduler flexibility enables a wider computer system orchestration of process priorities but a real time OS is more frequently dedicated to a narrow set of applications. Key factors in a real time OS are minimal interrupt latency and minimal thread switching latency. However a real time OS is valued more for how quickly or how predictably it can respond than for the amount of work it can perform in a given period of time. Examples of commercial real time OS include VxWorks and Linux from Windriver Intel company or Linux from Enea.

According to one embodiment security software stack comprises various software functions with Table 1 illustrating examples. Table 1 provides descriptions for the modules.

Examples include stateful firewall with NAT network address translation IPSec VPN SSLVPN IDS intrusion detection system and IPS intrusion prevention system Application Traffic Throttling Anti Virus and Anti Spyware Application Firewall HTTP and SIP and packet processing functions in SW and network agents comprises L4 L7 load balancer traffic policing and shaping virtualization and cloud computing support and support for web services mobile devices and social networking.

There are many third party commercial security software for example like Check Point Software Technologies and Trend Micro can leverage not only the full security stack be accelerated by HW control data plane software security software stack and the rest of function blocks but also seamlessly are integrated into to protect the security measurements against any vulnerabilities and traffics in and out to system .

According to one embodiment hardware acceleration of the security has deep packet inspection deep data inspection DDP DDI . DDP DDI enables increased deployment of advanced security functionality in system with existing infrastructure without incurring new costs.

Application layer server agents serve the different applications which are sent by the application client agents and to the application server agents on behalf of application server to serve those requests. The application layer server agent is used by the system to perform new advanced security functions which will be emerged in the future. In addition the new real time intensive tasks functions or services can be served by system on the behalf of application server to serve those requests. Once the services are requested the application server system can activate and transfer through network interface or PCI e through control from middleware client agents and middleware sockets to application layer server agents to serve on behalf of application server under services from RCM application in RCM software infrastructure defined as follows. Once the new applications require services the new applications will be delivered to the app layer server agent via the interface based on the handshaking mechanism defined in between and and return a desired result through software instructions and interface or indicative of successful completion of the service to the first multi core processing cluster.

Application framework can interface to any rich content multimedia applications or software services SOA from various sources through APIs application programming interface . Applications can be expanded from one or more groups including network packet processing security security decryption encryption video compression decompression audio compression decompression imaging compression decompression defined as text audio or video and graphics with a combination of decode and encode for remote or local sources. Encode in this case is compression technology and decode is decompression technology. The content source can be from local devices run in the server PC or other mobile device. The content source can be remote through a LAN WAN run from servers web servers application servers data base servers in data center or any cloud computing applications through internet access.

Newer applications e.g. pattern recognition can be expanded from the basic text audio video and imaging to run local or remote with special algorithms to encode and decode. In other words the application framework can be expanded to support the pattern recognition applications with special algorithms to compress and decompress from local servers PCs or mobile devices or from remote cloud computing resources from internet remotely.

Inter processor communication occurs over multi core clusters operating systems system interconnects and hypervisors. Inter processor communication module resides on each multi core cluster can be used as messages communication among all different multi core clusters identical or non identical. Highlights of include communications IPC through distributed messaging passing OS platform and interconnect independent transparency to system scale and reconfigure without modifying codes multiple producers and consumers distributed inter processing communication technology messages based protocol or data centric distributed data services transparent application to application connection reliable delivery communication model operating system independent Windows Linux and Unix hardware platform independent RISC DSP or others .

An exemplary embodiment includes DDS as explained below for inter processor communication. Communication standard data distribution service DDS enables system scalability that can support a spectrum of communication requirements from peer to peer to vast swarms of fixed and mobile devices that have intermittent and highly variable communications profiles.

The DDS standard is particularly well suited to distributing real time data for logging as well as for general distributed application development and system integration. DDS specifies an API designed for enabling real time data distribution. It uses a publish subscribe communication model and supports both messaging and data object centric data models. DDS offers several enhanced capabilities with respect to content based filtering and transformation per dataflow connectivity monitoring redundancy replication delivery effort and ordering as well as spontaneous discovery. Furthermore DDS offers new capabilities with respect to data object lifecycle management best effort and predictable delivery delivery ordering resource management and status notifications.

RCM framework provides core services SOA service oriented architecture for communications among applications running on applications with enterprise SOA or spread across multiple real time based operating systems and processors SOA based applications running on the present system. RCM framework uses communications IPC through distributed messaging passing or data centric DDS based distributed messages communication to provide SOA services to different multi core clusters in system. It is OS platform and interconnect independent transparent to system scale and can reconfigure without modifying codes.

System framework includes local hardware multi core clusters and resource scheduler and management provisioning configuring relocation and remote access. The multiple real time OS configuration can support AMP asymmetric real time multi core multiprocessing i.e. heterogeneous processing wherein different operating systems control different hardware clusters SMP symmetric real time multi core multiprocessing i.e. homogeneous processing wherein the same type or identical hardware multi core clusters run under the same operating system controlling inter process communication between operating systems scheduling global resources and management of clusters handling global and local resource loading statistics and migration as well as providing a virtualization infrastructure interface and management of multi core clusters.

IP based network applications can be partitioned into three basic elements data plane control plane and management plane.

The data plane is a subsystem of a network node that receives and sends packets from an interface processes them in some way required by the applicable protocol and delivers drops or forwards them as appropriate. For routing functions it consists of a set of procedures algorithms that a router uses to make a forwarding decision on a packet. The algorithms define the information from a received packet to find a particular entry in its forwarding table as well as the exact procedures that the routing function uses for finding the entry. It offloads packet forwarding from higher level processors. For most or all of the packets it receives and that are not addressed for delivery to the node itself it performs all required processing. Similarly for IPSec functions a security gateway checks if a Security Association is valid for an incoming flow and if so the data plane locally finds information to apply Security Association to a packet.

The control plane maintains information that can be used to change data used by the data plane. Maintaining this information requires handling complex signaling protocols. Implementing these protocols in data plane would lead to poor forwarding performance. A common way to manage these protocols is to let the data plane detect incoming signaling packets and locally forward them to control plane. Control plane signaling protocols can update data plane information and inject outgoing signaling packets in data plane. This architecture works because signaling traffic is a very small part of the global traffic. For routing functions the control plane consists of one or more routing protocols that provide exchange of routing information between routers as well as the procedures algorithms that a router uses to convert this information into the forwarding table. As soon as the data plane detects a routing packet it forwards it to the control plane to let routing protocol compute new routes add or delete routes. Forwarding tables are updated with this new information. When a routing protocol has to send a packet it is injected in the data plane to be sent in the outgoing flow. For IPSec security functions signaling protocols for key exchange management such as IKE or IKEv2 are located in the control plane. Incoming IKE packets are locally forwarded to control plane. When keys are renewed Security Associations located in the data plane are updated by control plane. Outgoing IKE packets are injected in the data plane to be sent in the outgoing flow.

To provide a complete solution for next generation network applications network packet processing today is much more complex when compared to a simple TCP IP stack at the inception of the Internet. Refer to the description herein for the definition of control plane and data plane. High speed processing handles simple processing in a fast path or data plane. The software stack is running on the data plane which is done by multiple CPU cores to handle the data plane tasks. Complex processing is delegated to the slow path and control plane. The fast path typically is expected to integrate a large number of protocols and be designed so that adding a new protocol will not penalize the performance of the whole system.

A common network use case is made of VPN IPSec tunnels and that aggregates Gbps of HTTP video and audio streams. Since the L3 L7 protocols are encrypted a data plane design which is only made of flow affinities cannot assign a specific core to each of them. It is only possible once all the pre IPSec processing and decryption of the payloads are complete. At each level exceptions can happen if the packet cannot be handled at the fast path level. Implementing an additional protocol adds tests in the initial call flow and requires more instructions. The overall performance will be lower. However there are some software design rules that can lead to an excellent trade off between features and performance.

The management plane provides an administrative interface into the overall system. It contains processes that support operational administration management or configuration provisioning actions such as facilities for supporting statistics collection and aggregation support for the implementation of management protocols and also provides a command line interface CLI and or a graphical user configuration interface such as via a Web interface or traditional SNMP management software. More sophisticated solutions based on XML can also be implemented.

The present system supports rich content multimedia RCM applications. Because rich content multimedia applications consume and produce tremendous different type of data it is very important to have a distributed data framework to be able to process manipulate transmit receive and retrieve store all various data for example data voice audio and video today. The present system also supports other rich data types listed below and is not limited to imaging pattern recognition speech recognition and animation. The data type can be expanded from the basic type format and become a composition data type of multiple intrinsic data types. Where complex data type transmission and receiving requires data streams to be compressed into some certain industry standard or proprietary algorithms before transmission the receiving end point will decompress or reconstruct the data back into its original data types and that can be done using real time processes.

For example video data after being compressed with certain algorithms can become a different data type i.e. MPEG4 and H.264. The same applies for the audio data. Therefore certain types of data synchronization mechanisms are required to support data reconstruction at destination.

In some traditional multimedia systems the data types are limited by what can be efficiently processed. For example data types might be limited to audio video or graphics from a single local content source to a single content destination simple audio video synchronization a single content stream etc. Typically applications are mainly decoding do not operate in real time are not interactive don t have require synchronization at the data source don t have reconstruction at the data destination and don t have data type composition or data type protection. However using the present system it can be possible to handle rich content multimedia RCM such as text audio video graphics animation speech pattern recognition still or moving 2D 3D images AI vision processing handwriting recognition security processing etc. Data can be from multiple remote or local content sources and be for multiple remote or local content destinations. Content synchronization can be from various combinations of audio video data from multiple sources with multiple content streams. Applications can encode and decode and can run in real time interactively with synchronization at the data source reconstruction at the data destination and data type composition or data type protection.

Within a network centric computing model a daunting challenge is managing the distributed data and facilitating localized management of that data. An architectural approach that addresses these requirements is commonly referred to as the distributed database framework . The benefit of the distributed database model is that it guarantees continuous real time availability of all information critical to the enterprise and facilitates the design of location transparent software which directly impacts software module reuse.

Software applications gain reliable instant access across dynamic networks to information that changes in real time. The architecture uniquely integrates peer to peer Data Distribution Service networking and real time in memory database management systems DBMS into a complete solution that manages storage retrieval and distribution of fast changing data in dynamically configured network environments. It guarantees continuous availability in real time of all information that is critical to the enterprise. DDS technology is employed to enable a truly decentralized data structure for distributed database management while DBMS technology is used to provide persistence for real time DDS data.

According to one embodiment embedded applications do not need to know SQL or OBDC semantics and enterprise applications are not forced to know publish subscribe semantics. Thus the database becomes an aggregate of the data tables distributed throughout the system.

When a node updates a table by executing a SQL INSERT UPDATE or DELETE statement on the table the update is proactively pushed to other hosts that require local access to the same table via real time publish subscribe messaging. This architectural approach enables real time replication of any number of remote data tables.

To integrate the description of the exemplary hardware infrastructure we refer back to the hardware blade described above. Each hardware blade can include a cluster of for example FreescaleQorIQ 4080 has 8 CPUs inside one IC package or more clusters depending on the package density of hardware blade. In general one FreescaleQorIQ 4080 as an example cluster corresponds to one cluster of processing elements of hardware infrastructure in e.g. PE . . . PE .

If two hardware blades are installed and each blade has the same type of multi core cluster e.g. FreescaleQorIQ 4080 it is called homogeneous expansion. In another embodiment the hardware blade has the capacity to include more than one cluster in one blade.

If two hardware blades are installed and the first blade has FreescaleQorIQ 4080 and the second blade has Cavium Network cluster OCTEON II CN68XX the Freescale cluster corresponds to PE . . . PE and the Cavium cluster corresponds to PE . . . PE assuming the use of 16 cores . The two hardware blades have non identical multi core clusters and it is called heterogeneous expansion.

Host is a standard server representing an x86 based cluster. It can perform server applications. For example it can represent applications server web server or database server.

It can run all general purpose applications I O function and network function services and calls and other system related tasks for OS.

Hypervisor also referred to as a virtual machine manager VMM allows multiple operating systems termed guests to run concurrently on a host computer. It is so named because it is conceptually one level higher than a supervisory program. The hypervisor presents to the guest operating systems a virtual operating platform and manages the execution of the guest operating systems. Multiple instances of a variety of operating systems may share the virtualized hardware resources. Hypervisors are installed on server hardware whose task is to run guest operating systems. Non hypervisor virtualization systems are used for similar tasks on dedicated server hardware but also commonly on desktop portable and even handheld computers.

Embedded hypervisor is a real time based hypervisor. The embedded hypervisor is used in the real time embedded virtualization. It allows developers to leverage multiple real time operating systems in a single device so they can expand and enhance device functionality it facilitates the adoption of multi core clusters by increasing reliability and reducing risk and it provides the new software configuration options required to architect next generation embedded devices. Examples of embedded hypervisors on the hardware blade include products offered by Windriver and Green Hills Software.

Several security virtual machine functions SF SF . . . SFn and packet processing virtual machine functions PKT PKT . . . PKTn and all other real time based virtual machines are sharing the HW multi core cluster . Since they are in software instances form they can be stored in the local memory in HW multi core cluster during the idle state and activated by the embedded hypervisor . In addition the hypervisor running in the application server can activate the SF . . . SFn or PKT . . . PKTn virtual machines on behalf of the virtual machines running and or . When virtual machine or requires the functions of network access to and from NIC the middleware converts the service requests for the interface . After interface receives the requests it invokes the PKT . . . PKTn to service the network access request. Same situation applies to security virtual machines SF . . . SFn . If virtual machine or requires the services of security functions the middleware converts the request for the interface . Interface then reacts like a server to serve the security requests by invoking virtual machines SF or SF . . . SFn. Once services are completed the results are returned to virtual machine or through . An application server VCSS can be further expanded as by items and into multi core clusters according to one embodiment listed above. SF . . . SFn or PKT . . . PKTn virtual machines can be also further expanded to other real time virtual machines for RCM applications listed above.

According to one embodiment a cloud based architecture provides a model for cloud security consisting of a service oriented architecture SOA security layer that resides on top of a secure virtualized runtime layer. A cloud delivered services layer is a complex distributed SOA environment. Different services are spread across different clouds within an enterprise. The services can reside in different administrative or security domains that connect together to form a single cloud application. An SOA security model fully applies to the cloud. A web services WS protocol stack forms the basis for SOA security and therefore also for cloud security.

One aspect of an SOA is the ability to easily integrate different services from different providers. Cloud computing is pushing this model one step further than most enterprise SOA environments since a cloud sometimes supports a very large number of tenants services and standards. This support is provided in a highly dynamic and agile fashion and under very complex trust relationships. In particular a cloud SOA sometimes supports a large and open user population and it cannot assume an established relationship between a cloud provider and a subscriber.

It should be understood by one having ordinary skill in the art that the present system is not limited to an implementation having the presently disclosed multi core cluster configuration and that embodiments including any appropriate substitute achieve the present objective.

It should be understood by one having ordinary skill in the art that the present system is not limited to an implementation having security software applications and that embodiments including audio compression decompression video compression decompression imaging compression decompression speech compression decompression or any appropriate substitute of RCM rich content multimedia to achieve the present objective.

In the description above for purposes of explanation only specific nomenclature is set forth to provide a thorough understanding of the present disclosure. However it will be apparent to one skilled in the art that these specific details are not required to practice the teachings of the present disclosure.

Some portions of the detailed descriptions herein are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the below discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present disclosure also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems computer servers or personal computers may be used with programs in accordance with the teachings herein or it may prove convenient to construct a more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. It will be appreciated that a variety of programming languages may be used to implement the teachings of the disclosure as described herein.

Moreover the various features of the representative examples and the dependent claims may be combined in ways that are not specifically and explicitly enumerated in order to provide additional useful embodiments of the present teachings. It is also expressly noted that all value ranges or indications of groups of entities disclose every possible intermediate value or intermediate entity for the purpose of original disclosure as well as for the purpose of restricting the claimed subject matter. It is also expressly noted that the dimensions and the shapes of the components shown in the figures are designed to help to understand how the present teachings are practiced but not intended to limit the dimensions and the shapes shown in the examples.

A system and method for virtualization and cloud security are disclosed. Although various embodiments have been described with respect to specific examples and subsystems it will be apparent to those of ordinary skill in the art that the concepts disclosed herein are not limited to these specific examples or subsystems but extends to other embodiments as well. Included within the scope of these concepts are all of these other embodiments as specified in the claims that follow.

