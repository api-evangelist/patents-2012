---

title: System and method of intelligent log agents
abstract: A computing system. The system comprises enterprise computers, each enterprise computer executing at least one instance of an enterprise application and executing one logging agent associated with each instance of the enterprise application; logging computers each executing at least one instance of a logging distribution application that is configured to receive logs from the logging agent application instances; and a centralized log repository computer that executes a log file manager. Each of the logging agent applications analyze a processing load of the logging computers and transmit logs to a logging computer that the logging agent application adaptively selects based on the analysis by the logging agent application of the processing load of the logging computers, wherein each logging distribution application is configured to forward logs received from logging agent applications to the centralized log repository computer, and wherein the log file manager writes the logs into log files.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08892518&OS=08892518&RS=08892518
owner: Sprint Communications Company L.P.
number: 08892518
owner_city: Overland Park
owner_country: US
publication_date: 20120727
---
Logs may be created by executing computer programs software and or applications to promote measuring the effectiveness and or efficiency of the programs. Logs may also promote determining a source of an error and correcting an error in software. Logs may be created when signal or notable events occur in the processing of a computer program or application. Logs may be created every time a segment of code is executed for example in a branch path that may not execute during each iteration of the subject software.

In an embodiment a computing system is disclosed. The system comprises a plurality of enterprise application execution computers each enterprise application execution computer executing at least one instance of an enterprise application and executing one logging agent application associated with each instance of the enterprise application and a plurality of logging computers each logging computer executing at least one instance of a logging distribution application that is configured to receive logs from the logging agent application instances. The system further comprises a centralized log repository computer that executes a log file manager. Each of the logging agent applications is configured to analyze a processing load of the logging computers and to transmit logs generated by an instance of the enterprise application to a logging computer that the logging agent application adaptively selects based on the analysis by the logging agent application of the processing load of the logging computers and each logging distribution application is configured to broadcast an indication of the processing load of the logging computer on which the logging distribution application executes and to forward logs received from logging agent applications to the centralized log repository computer. The log file manager receives logs purges the received logs of credit card numbers and social security numbers and writes the purged logs into log files.

In an embodiment a method of centralized logging is disclosed. The method comprises receiving by a logging agent an indication of a processing load from each of a plurality of logging servers where the logging agent executes on a computer receiving by the logging agent a log generated by an instance of an enterprise application executing on a computer where the logging agent executes on the same computer and based on the processing load indications selecting by the logging agent to which one of the logging servers to transmit the log. The method further comprises transmitting by the logging agent the log to the selected logging server and transmitting the log by the selected logging server to a centralized log repository. The method further comprises searching the centralized log repository based on information recorded in a trouble ticket and deploying a change in an enterprise application based on searching the centralized log repository and based on the information in the trouble ticket.

In embodiment a method of centralized logging is disclosed. The method comprises sending logs from a plurality of logging agents through a plurality of distribution paths where each logging agent receives logs from an instance of an enterprise application wherein the logging agents execute on one or more computer. The method further comprises pushing the logs by the distribution paths to a server managing a centralized log repository. The method further comprises receiving the logs from the distribution paths by the server managing the centralized log repository and adding the logs to a plurality of log files in the centralized log repository where each log file is associated with an enterprise application transaction type and thread number.

These and other features will be more clearly understood from the following detailed description taken in conjunction with the accompanying drawings and claims.

It should be understood at the outset that although illustrative implementations of one or more embodiments are illustrated below the disclosed systems and methods may be implemented using any number of techniques whether currently known or not yet in existence. The disclosure should in no way be limited to the illustrative implementations drawings and techniques illustrated below but may be modified within the scope of the appended claims along with their full scope of equivalents.

A system and method for intelligent log agents is taught herein. In a typical computing environment logs may be generated and stored locally on each computer and or server. In large computing environments however it may be difficult to track a trouble report back to the subject host to find a log or logs that provide information for diagnosing the experienced problem. For example in a server farm operated by a major wireless service provider to track call activity of on the order of 50 million wireless service subscribers and processing on the order of 25 million transactions from subscribers per day there may be large numbers of servers executing the same applications in parallel.

The present disclosure contemplates centralizing logs to promote rapid convenient analysis of trouble reports. The system may comprise a plurality of intelligent log agents that execute on the application servers for example one intelligent log agent per application server instance or one intelligent log agent per executing application instance. It is understood that servers may be virtual servers such that four virtual servers may execute on a single hardware server where each virtual server may be executing an intelligent log agent. The application instances executing on the server send logs that they generate to the intelligent logging agent executing on the same server.

The intelligent log agents autonomously determine one or more log distribution paths through which to transmit their logs to the centralized log repository. The log distribution paths may be implemented by logging servers that periodically transmit their availability and or their current processing load to a multicast internet protocol address that the intelligent agents monitor. Each intelligent log agent analyzes the current loading information multicast by the logging servers to determine to which logging servers to distribute their logs. In an embodiment the intelligent log agents may change their log distribution by a maximum amount per load reporting period of the logging servers or during some other time period. In this way oscillation in loading of the logging servers may be reduced and or managed.

The logging servers manage the queuing of logs received from the intelligent logging agents and the delivery of the logs to the log repository so as to not overflow or overburden the centralized log repository. An application executing in the centralized log repository aggregates logs to different files based on log content for example based on an application server that generated the log a thread executing on the application server that generated the log a time of the log and or based on other characteristics of the log. For example the application executing in the centralized log repository may close an open log file after accumulating a specific number of logs after a specific time duration or based on some other criterion to manage the size of the log files. The application executing in the centralized log repository may further groom the logs by removing information that is not desired to be stored in the logs for example data that the payment card industry PCI standards prohibit from being stored in generic databases. The application executing in the centralized log repository may purge the logs of credit card numbers and or social security numbers.

The centralized log repository may be used in a variety of ways to support management and maintenance of the computing environment. For example when a problem is reported such as a specific transaction failure a technician may search in the centralized log repository based on the information about the transaction failure. The centralized log repository may be searched based on a time of the transaction failure based on an identity of a customer associated with the transaction failure and or based on other information provided with a trouble ticket report. When one or more logs are found the technician may analyze the subject logs to determine further information related to the transaction failure. For example one of the logs may indicate that a processing exception was raised due to an invalid data input and the transaction failed because of the processing exception. A different log may indicate that the data input was initially input as valid data. Thus the cause of failure may be determined to have been due to a bug in an intermediate software component that corrupted the data input before invoking the subject transaction processing. This trouble ticket investigation approach contrasts with the difficulty presented by finding the appropriate log for the failed transaction on an unknown one of the many servers when log files are maintained on the individual servers.

Turning now to a logging system is described. In an embodiment the system comprises a plurality of enterprise application servers each of which execute at least one application instance and an intelligent logging agent . The system further comprises a plurality of logging servers each executing at least one logging distribution application . The system further comprises a log repository that is mediated and or managed by a centralized log repository server that executes a log file manager application . The enterprise application servers the logging server and the centralized log repository server are communicatively coupled by a network that comprises one or more private networks one or more public networks or a combination thereof. In an embodiment the system may further comprise one or more trouble ticket resolution workstations communicatively coupled to the network . The centralized log repository server may access the log repository via a data store server not shown that manages access to the log repository and presents a data store application programming interface API for use of the centralized log repository server and or the log file manager . The servers and the trouble ticket resolution workstation may be implemented as computers or computer systems. Computers and computer systems are described further hereinafter.

It is understood that the system may comprise any number of enterprise application servers . In an embodiment there may be hundreds or thousands of enterprise application servers . It is also understood that the system may comprise any number of logging servers . The enterprise application servers may comprise virtual servers where two or more enterprise application servers may execute as virtual servers on a single physical server computer.

The application instances may be instances of front end applications back end applications or other kinds of applications. The application instances may provide billing functionality subscriber account management functionality and other functionality. The application instances may execute substantially continuously 24 hours per day and 7 days per week. The application instances may experience loading cycles where the processing load may be very high at one time and moderate or low at another time.

As the application instances execute they generate logs that they send to the intelligent logging agent . The logs may comprise an identification of the enterprise application server on which the application instance executes a thread associated with the execution that generated the log a time and date stamp and the information that the specific log is configured to contain. Logs may be designed or configured by software developers who wrote the code implementing the application software. Different logs generated at different points in the application software may comprise different data. Some logs may comprise error indications for example when the application executes error handling routines. Other logs may comprise indications of what path a given transaction has followed. Some logs may be generated by the operating system software and or virtual management software that provide an execution environment for the enterprise application server .

It is understood that logs are distinct from the outputs produced by the application instances in providing their expected functionality. For example logs are different from call detail records CDRs produced by a billing system logs are different from reports about enterprise business activities conducted by the application instances . By contrast logs contain information about the execution and workings of the software that implements the application instances and the enterprise application servers .

The intelligent logging agent may be referred to in some contexts as a logging agent . The logging agent autonomously chooses a distribution path by which to transmit the logs it receives to the centralized log repository server . The plurality of logging distribution servers and or logging distribution applications comprise different distribution paths. The logging agent periodically receives information from the logging servers indicating the processing loads and or depth of log queues present on the logging servers . Based on the processing loads and or depth of log queues of the logging servers the logging agent chooses one or more of the logging servers to which to send logs for transmitting to the centralized log repository server . In an embodiment if no logging servers are available to receive logs from the logging agent the logging agent will store the logs locally on the enterprise application server . Later when one or more logging servers are brought back into service the logging agent resumes sending newly created logs to the one or more logging servers as well as sending the locally stored logs to the one or more logging servers .

The logging agent may execute a distribution routine to determine how to distribute the logs that it receives. This distribution routine may be said to dynamically adapt the log distribution based in part on the information about processing loads and or log queues associated with the logging servers . The distribution routine may also adapt the log distribution based in part on a rate at which it is receiving new logs. For example in one circumstance the logging agent may be distributing about 60 of its logs to a first logging server and about 40 of its logs to a second logging server and both the first and second logging servers may be substantially fully loaded. If the rate at which the logging agent receives logs increases by 10 the logging agent may decide to dynamically adapt the distribution of its logs to send 50 of its logs to the first logging server 30 of its logs to the second logging server and 20 of its logs to a third logging server that is not fully loaded. In an embodiment the distribution routine may limit the amount of log distribution change permitted from one period of information transmission by the logging servers to the next period as a strategy to avoid the loads on the logging servers oscillating.

The logging distribution application determines the processor loading and or the log queue depth e.g. the number of logs that are enqueued waiting to be transmitted to the centralized log repository server . Periodically the logging distribution application sends its current processor loading and or log queue depth information to a multicast internet protocol address on a channel dedicated to that logging server . Along with the current status the logging distribution application sends its individual internet protocol address and logging agents send logs to that logging server by addressing the transmission of logs to that internet protocol address. Logging servers may periodically check with other logging servers to confirm that the other logging servers are still active for example by periodically pinging one or more of the other logging servers . When a logging server determines that another logging server that previously announced its availability to process logs is not responsive the logging server may multicast a message indicating the subject logging server is out of service. For example the logging distribution application may send a ping message to one or more other logging servers . If the subject logging distribution application does not receive a reply to a ping message the subject logging distribution application may determine that the unresponsive logging server is crashed or is otherwise out of service. The subject logging distribution application may multicast a message for example to the logging agents and or the other logging servers indicating that the unresponsive logging server is out of service. The subject logging distribution application may shut down a channel of the multi cast internet protocol address associated with the logging server that is crashed or out of service. In this way logging agents do not continue to send logs to the out of service logging server .

The log file manager processes logs that are received by the centralized log repository server . In an embodiment the centralized log repository server may execute a plurality of instances of the log file manager . Alternatively in an embodiment the centralized log repository server may comprise a plurality of virtual servers and or a plurality of physical servers. The log file manager may analyze the incoming logs to groom them of undesired information. For example the log file manager may remove information such as credit card numbers social security numbers and other confidential information that the payment card industry PCI standards prohibit from being stored in generic databases for example in the log repository . After grooming the incoming logs the log file manager writes the groomed logs to the log repository . In an embodiment the log file manager may write the groomed logs to the log repository via the intermediary of a data store server or data base application programming interface API .

When an error occurs in the processing of application instances enterprise employees responsible for troubleshooting the applications may use the trouble ticket resolution workstation to search the logs stored in the log repository . The workstation may access the log repository via the centralized log repository server and or through accessing a data store server that manages the log repository . The user of the workstation may execute a variety of tools for searching the log repository to find logs germane to a trouble ticket. For example the user of the workstation may execute SQL commands or UNIX commands such as grep to locate logs of interest. The user of the workstation need not know in advance what enterprise application server may have generated the logs of interest because the logs are collected together.

When the user of the workstation determines the root cause of the problem reported in the trouble ticket the user may define a corrective action to be taken and or implement the corrective action. In some cases the corrective action may involve design changes and or software changes to the application instances or the enterprise application servers and this corrective action may need to be implemented according to a change process. The further response to the root cause of the problem may involve estimating a level of effort to design the change securing budget to accomplish the change scheduling the design effort designing the change testing the change in an off line environment coordinating and or scheduling the deployment of the change to the system validating the trouble reported in the trouble ticket cannot be duplicated and then closing the subject trouble ticket. It will be appreciated by one skilled in the art that this response scenario is one of many different response scenarios that may address and or fix the trouble ticket.

Turning now to a method is described. At block receive by a logging agent an indication of a processing load from each of a plurality of logging servers where the logging agent executes on a computer. The indication of the processing load of the logging servers may be received by the logging agent at different times where the times are not coordinated with each other. For example each of the logging servers may send processing load and or log queue depth information periodically but each logging server may transmit periodically without coordinating timing with the other logging servers. At block receive by the logging agent a log generated by an instance of an enterprise application executing on a computer where the logging agent executes on the same computer. Alternatively the logging agent may receive a log generated by an operating system or virtual management application that provides an execution environment for the application instance .

At block based on the processing load indications select by the logging agent to which one of the logging servers to transmit the log. The logging agent may determine to send all of its logs to a logging server that it has selected based on the loading and or log queue depth information received from the logging servers. Alternatively the logging agent may determine to distribute its logs to a plurality of logging servers for example sending a dynamically determined percentage of its logs to each of the several logging servers selected. The logging agent may analyze the processing load indications on a periodic basis and refresh its determination of which logging server or logging servers to distribute its logs to and or what percentage of logs to distribute to selected logging servers. The logging agent may be configured to change its distribution of logs among logging servers by a maximum amount per adaptation cycle whereby to reduce the chances of inducing oscillations in the loading on the logging servers. The redetermination by the logging agent of its distribution of logs to the logging servers may be referred to as dynamic adaptation. It is understood that in an embodiment each log agent determines the distribution of its logs to the logging servers independently of other log agents and without being commanded how to distribute its logs from an external source. At block transmit by the logging agent the log to the selected logging server. At block transmit the log by the selected logging server to a centralized log repository.

In an embodiment the method may further comprise steps of a technician searching the logs for logs related to a trouble ticket identifying an execution problem a transaction failure or some other operating event of the system . At block search the centralized log repository based on information recorded in a trouble ticket. For example the technician or another searches the centralized log repository without having to know the specific application server that may have experienced a problem or transaction failure. The technician may use creative thinking and intuition to generate a number of possible explanations for the problem. The technician may search for other logs to further substantiate a possible explanation or to eliminate a possible explanation.

At block deploy a change in an enterprise application based on searching the centralized log repository and based on the information in the trouble ticket. When the technician settles on an explanation a problem solution may be analyzed and deployed. For example the technician may define a corrective action to be taken and or implement the corrective action. In some cases the corrective action may involve design changes and or software changes to the application instances or the enterprise application servers and this corrective action may need to be implemented according to a change process. The further response to the root cause of the problem may involve estimating a level of effort to design the change securing budget to accomplish the change scheduling the design effort designing the change testing the change in an off line environment coordinating and or scheduling the deployment of the change to the system validating the trouble reported in the trouble ticket cannot be duplicated and then closing the subject trouble ticket. It will be appreciated by one skilled in the art that this response scenario is one of many different response scenarios that may address and or fix the trouble ticket.

Turning now to a method is described. At block send logs from a plurality of logging agents through a plurality of distribution paths where each logging agent receives logs from an instance of an enterprise application from the operating system or from an application providing an execution environment wherein the logging agents execute on one or more computer. The plurality of distribution paths may be provided by the logging servers . At block push the logs by the distribution paths to a server managing a centralized log repository. At block receive the logs from the distribution paths by the server managing the centralized log repository. In an embodiment the server managing the centralized log repository grooms the logs by removing confidential information such as credit card numbers and social security numbers from the logs. At block add the logs to a plurality of log files in the centralized log repository where each log file is associated with an enterprise application transaction type and thread number. In an embodiment the groomed logs are added to or written to the log files in the centralized log repository.

It is understood that by programming and or loading executable instructions onto the computer system at least one of the CPU the RAM and the ROM are changed transforming the computer system in part into a particular machine or apparatus having the novel functionality taught by the present disclosure. It is fundamental to the electrical engineering and software engineering arts that functionality that can be implemented by loading executable software into a computer can be converted to a hardware implementation by well known design rules. Decisions between implementing a concept in software versus hardware typically hinge on considerations of stability of the design and numbers of units to be produced rather than any issues involved in translating from the software domain to the hardware domain. Generally a design that is still subject to frequent change may be preferred to be implemented in software because re spinning a hardware implementation is more expensive than re spinning a software design. Generally a design that is stable that will be produced in large volume may be preferred to be implemented in hardware for example in an application specific integrated circuit ASIC because for large production runs the hardware implementation may be less expensive than the software implementation. Often a design may be developed and tested in a software form and later transformed by well known design rules to an equivalent hardware implementation in an application specific integrated circuit that hardwires the instructions of the software. In the same manner as a machine controlled by a new ASIC is a particular machine or apparatus likewise a computer that has been programmed and or loaded with executable instructions may be viewed as a particular machine or apparatus.

The secondary storage is typically comprised of one or more disk drives or tape drives and is used for non volatile storage of data and as an over flow data storage device if RAM is not large enough to hold all working data. Secondary storage may be used to store programs which are loaded into RAM when such programs are selected for execution. The ROM is used to store instructions and perhaps data which are read during program execution. ROM is a non volatile memory device which typically has a small memory capacity relative to the larger memory capacity of secondary storage . The RAM is used to store volatile data and perhaps to store instructions. Access to both ROM and RAM is typically faster than to secondary storage . The secondary storage the RAM and or the ROM may be referred to in some contexts as computer readable storage media and or non transitory computer readable media.

I O devices may include printers video monitors liquid crystal displays LCDs touch screen displays keyboards keypads switches dials mice track balls voice recognizers card readers paper tape readers or other well known input devices.

The network connectivity devices may take the form of modems modem banks Ethernet cards universal serial bus USB interface cards serial interfaces token ring cards fiber distributed data interface FDDI cards wireless local area network WLAN cards radio transceiver cards such as code division multiple access CDMA global system for mobile communications GSM long term evolution LTE worldwide interoperability for microwave access WiMAX and or other air interface protocol radio transceiver cards and other well known network devices. These network connectivity devices may enable the processor to communicate with the Internet or one or more intranets. With such a network connection it is contemplated that the processor might receive information from the network or might output information to the network in the course of performing the above described method steps. Such information which is often represented as a sequence of instructions to be executed using processor may be received from and outputted to the network for example in the form of a computer data signal embodied in a carrier wave.

Such information which may include data or instructions to be executed using processor for example may be received from and outputted to the network for example in the form of a computer data baseband signal or signal embodied in a carrier wave. The baseband signal or signal embedded in the carrier wave or other types of signals currently used or hereafter developed may be generated according to several methods well known to one skilled in the art. The baseband signal and or signal embedded in the carrier wave may be referred to in some contexts as a transitory signal.

The processor executes instructions codes computer programs scripts which it accesses from hard disk floppy disk optical disk these various disk based systems may all be considered secondary storage ROM RAM or the network connectivity devices . While only one processor is shown multiple processors may be present. Thus while instructions may be discussed as executed by a processor the instructions may be executed simultaneously serially or otherwise executed by one or multiple processors. Instructions codes computer programs scripts and or data that may be accessed from the secondary storage for example hard drives floppy disks optical disks and or other device the ROM and or the RAM may be referred to in some contexts as non transitory instructions and or non transitory information.

In an embodiment the computer system may comprise two or more computers in communication with each other that collaborate to perform a task. For example but not by way of limitation an application may be partitioned in such a way as to permit concurrent and or parallel processing of the instructions of the application. Alternatively the data processed by the application may be partitioned in such a way as to permit concurrent and or parallel processing of different portions of a data set by the two or more computers. In an embodiment virtualization software may be employed by the computer system to provide the functionality of a number of servers that is not directly bound to the number of computers in the computer system . For example virtualization software may provide twenty virtual servers on four physical computers. In an embodiment the functionality disclosed above may be provided by executing the application and or applications in a cloud computing environment. Cloud computing may comprise providing computing services via a network connection using dynamically scalable computing resources. Cloud computing may be supported at least in part by virtualization software. A cloud computing environment may be established by an enterprise and or may be hired on an as needed basis from a third party provider. Some cloud computing environments may comprise cloud computing resources owned and operated by the enterprise as well as cloud computing resources hired and or leased from a third party provider.

In an embodiment some or all of the functionality disclosed above may be provided as a computer program product. The computer program product may comprise one or more computer readable storage medium having computer usable program code embodied therein to implement the functionality disclosed above. The computer program product may comprise data structures executable instructions and other computer usable program code. The computer program product may be embodied in removable computer storage media and or non removable computer storage media. The removable computer readable storage medium may comprise without limitation a paper tape a magnetic tape magnetic disk an optical disk a solid state memory chip for example analog magnetic tape compact disk read only memory CD ROM disks floppy disks jump drives digital cards multimedia cards and others. The computer program product may be suitable for loading by the computer system at least portions of the contents of the computer program product to the secondary storage to the ROM to the RAM and or to other non volatile memory and volatile memory of the computer system . The processor may process the executable instructions and or data structures in part by directly accessing the computer program product for example by reading from a CD ROM disk inserted into a disk drive peripheral of the computer system . Alternatively the processor may process the executable instructions and or data structures by remotely accessing the computer program product for example by downloading the executable instructions and or data structures from a remote server through the network connectivity devices . The computer program product may comprise instructions that promote the loading and or copying of data data structures files and or executable instructions to the secondary storage to the ROM to the RAM and or to other non volatile memory and volatile memory of the computer system .

In some contexts the secondary storage the ROM and the RAM may be referred to as a non transitory computer readable medium or a computer readable storage media. A dynamic RAM embodiment of the RAM likewise may be referred to as a non transitory computer readable medium in that while the dynamic RAM receives electrical power and is operated in accordance with its design for example during a period of time during which the computer is turned on and operational the dynamic RAM stores information that is written to it. Similarly the processor may comprise an internal RAM an internal ROM a cache memory and or other internal non transitory storage blocks sections or components that may be referred to in some contexts as non transitory computer readable media or computer readable storage media.

While several embodiments have been provided in the present disclosure it should be understood that the disclosed systems and methods may be embodied in many other specific forms without departing from the spirit or scope of the present disclosure. The present examples are to be considered as illustrative and not restrictive and the intention is not to be limited to the details given herein. For example the various elements or components may be combined or integrated in another system or certain features may be omitted or not implemented.

Also techniques systems subsystems and methods described and illustrated in the various embodiments as discrete or separate may be combined or integrated with other systems modules techniques or methods without departing from the scope of the present disclosure. Other items shown or discussed as directly coupled or communicating with each other may be indirectly coupled or communicating through some interface device or intermediate component whether electrically mechanically or otherwise. Other examples of changes substitutions and alterations are ascertainable by one skilled in the art and could be made without departing from the spirit and scope disclosed herein.

