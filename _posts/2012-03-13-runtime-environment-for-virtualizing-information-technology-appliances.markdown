---

title: Runtime environment for virtualizing information technology appliances
abstract: A system for virtualizing information technology (IT) appliances can include an IT appliance hosting facilities software. The IT appliance hosting facilities software can be implemented at a layer of abstraction above a virtual machine host, which is implemented in a layer of abstraction above a hardware layer of a computing system. The IT appliance hosting facilities software can include programmatic code functioning as virtualized hardware upon which a set of IT appliance software modules are able to concurrently run. The IT appliance hosting facilities software can provide caching, application level security, and a standardized framework for running the IT appliance software modules, which are configured in conformance with the standardized framework.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08392919&OS=08392919&RS=08392919
owner: International Business Machines Corporation
number: 08392919
owner_city: Armonk
owner_country: US
publication_date: 20120313
---
This application is a continuation of U.S. patent application Ser. No. 12 369 495 filed Feb. 11 2009 pending which is incorporated herein in its entirety.

The present invention relates to the field of software virtualization and more particularly to a runtime environment for virtualizing information technology IT appliance servers.

The total cost of ownership TCO of traditional information technology infrastructure has been continuously increasing. This is due to the complexity of the underlying software stacks and consequently their demand for computing power as well as operational requirements. IT appliances are often proposed as a solution to solve a part of this problem by providing specialized hardware which handles infrastructure tasks. For instance a network appliance can provide file sharing between two or more virtual private networks.

Maintaining these appliances however remains a challenge in terms of hardware upgrades and or failures. Upgrades failures can usually result in costly appliance replacement and or significant downtime. These drawbacks can considerably increase the TCO of the entire infrastructure. Further each conventional appliance serves a specific set of functions. That is each appliance is optimized hardware and software for a discrete set of functions as opposed to a generalized computing device that by design is able to perform different functions depending upon loaded software. It is often unfeasible or impossible to repurpose an IT appliance when infrastructure changes render that IT appliance unnecessary. Accordingly while IT appliances provide many advantages several shortcomings can adversely affect the TCO of IT appliances.

The present invention discloses a solution for a runtime environment for virtualizing information technology IT appliance. In one embodiment for example the framework can implement IT appliances over z VM using special purpose operation systems. In the solution a runtime environment can be used to host appliances within a computing platform. Utilizing existing hosting facilities the runtime environment can communicate with the computing platform hardware. The environment can provide a framework for enabling appliance virtualization while allowing common functionality to be performed. The framework can include an application programming interface API software development tools and the like. Abstracted host facilities can enable deployed appliances to communicate with generic components including but not limited to communications components resource managers security mechanisms and the like. The virtualization of the appliance can be transparent to users administrators and or other computing environment components with which a virtualized IT appliance interacts.

The disclosed solution is believed to be superior to existing techniques in numerous ways. Depending upon implementation specifics of a particular embodiment of the disclosed solutions that embodiment can 

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured for instance via optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc.

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The present invention is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

In one embodiment shown by system the system that virtualizes IT applications can execute a set of hosting facilities within SYSTEM Z hardware . The hosting facilities can operate cooperatively within a z VM host . Existing platform support can communicate with runtime enabling IT appliance to be virtualized. In another embodiment the hardware can be any platform having a hypervisor virtual machine host which has been extended by the hosting facilities to support virtualized IT appliances . Further the facilities can be standardized across multiple platforms so that a virtualized IT appliance can execute on different hardware and or using different virtual machine hosts .

As used herein appliances can be one or more set of programmatic instructions specialized to perform a set of tasks and or functions. Operating systems associated with appliances can be platforms with dedicated functionality specific to the appliance. Functionality can be restricted to minimal core operations including but not limited to communication functionality application hosting storage procedures and the like. In one embodiment appliances can lack a generalized operating system platform which can be supplemented using facilities . In one embodiment the virtualized appliances can be from an external perspective identical to an equivalent IT appliance that has not been virtualized.

In system operating systems can be instanced into logical partitions within a virtual hosting layer . Logical partitions can communicate in real time or near real time through facilities provided by hosting layer . Similarly appliance can be deployed onto system utilizing hosting facilities . Host facilities can provide caching application level security and a common system management framework which can be extended by IT appliance vendors. The facilities can enable the common management framework to present a consistent user experience across deployed appliances.

In system hosting facilities can provide virtualization for a set of IT appliances . Appliances can execute concurrently with other virtualized operating systems . Communication between operating systems and appliances can occur in real time or near real time enabling appliances to behave identical to non virtualized appliances. Hosting facilities can be implemented as a single layer providing a runtime environment and a platform support layer.

Facilities can enable virtualized appliances to scale with enterprise requirements. Facilities can allow appliances to be configured for clustering pooling configurations failover support and the like. For instance appliance can be grouped into a pool of non virtualized appliances serving as a resource pool. Further facilities can permit failover support for virtualized appliances through shared services available to all virtualized appliances.

System can represent a specific implementation of system comprising of SYSTEM Z hardware and z VM virtual host environment. In system hosting facilities can be optionally separate cooperating layers. Environment can be a virtualization layer executing simultaneously with platform support . Platform support layer can be a z VM host provided layer. Existing components and or services within host layer can be provided to environment as platform support enabling IT appliance virtualization. In one embodiment facilities can be integrated into IBM WEBSPHERE APPLICATION SERVER WEBSPHERE PORTAL and the like.

Appliance runtime can enable appliances to execute as virtualized appliances within a SYSTEM Z platform. Appliances can function identical to non virtualized appliances performing appliance specific tasks through native communication mechanisms. For instance clients being served by appliance can be unaware of the appliance virtualization.

Platform support can provides services to be invoked by the Appliance Runtime components. While appliance runtime components can use existing services provided by the z VM host which can simplify implementation requirements and assist in backward compatibility with existing operational customer environments. That is depending on the evolution of the appliance runtime components the platform support can require additions to z VM host layer. Platform support layer can be grouped together which can be used as a software prerequisite for appliance virtualization. Platform support can be used to identify versions of z VM which can support appliance hosting and versions which cannot.

Separation of appliance runtime and platform support appliance host facilities can be portable across different host operating systems. That is different implementations of the appliance runtime can provide the same interfaces to appliances with different underlying platforms. For instance platform separation can allow for compatibility across different versions. Portability affords appliance vendors to rigorously test appliances before deployment.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. Appliances can communicate with virtual host components which can be separate from platform support .

IT appliance can correlate to an application program entity executing within the application layer of the model . Appliance can include a virtualized appliance an appliance instance and the like. As used herein appliance runtime A and platform support B can be referred to collectively as hosting facilities . Runtime A can include but are not limited to one or more interfaces system and user defined macros resource managers operational managers and the like. Platform support B can include but is not limited to resource access control facilities RACF connectivity services e.g. TCP IP virtual machine components services and the like.

The appliance runtime A can abstract host system operational details and permit consuming appliances to interact with the host system through an interface. The appliance runtime A can lack ownership of resources which can be accessed through a host operating system. The interfaces can include but are not limited to an administrative interface a debugging and profiling interface an appliance interface an operational interface and the like.

The administrative interface can give administrative access to one or more appliance host facility components. The interface can provide access to system management which can include a console enabling system configuration. The console can be a command line interface graphical user interface multi modal interface and the like. Interface can enable appliances to be deployed undeployed activated deactivated instantiated and the like.

The debugging and profiling interface can allow appliance developers to debug executable code during runtime. Profiling activities such as resource management can be performed during the runtime execution. The interface can be cooperatively utilized and or integrated with development tools enabling a uniform development process. For example resource usage reports can be presented within an integrated development environment IDE when an appliance is being debugged.

The appliance interface can allow appliance instances to access system resources during runtime. Resources can include but are not limited to memory processor time peripherals storage and the like. Appliance interface can enable deployed appliance instances to interact with underlying system and or virtual hosting layers e.g. z VM .

Operational interface can permit appliances to perform operational tasks provided through the operational manager component . Tasks can include backup services diagnostic report submission and the like. For instance automated backup services can be executed through interface .

Marcos can be a simple set of instructions invoked by one or more interfaces to perform specific functions. Macros can be provided to appliances enabling rapid execution of determined instruction sets. Macros can include system appliance level macros allowing basic functionality to be provided and user defined macros permitting custom functionality. For instance macros can be utilized to enable appliances to reading a file from a storage medium. User defined macros can enable developers to establish complex instruction sets which can be deployed through administrative interface .

Appliance instance manager can control the life cycle of appliance instances during runtime. Manager can read configuration parameters which have been set through the administrative interface and allocate resources using host resources manager . Manger can provide appliance clustering capabilities where appliances are not able to implement clustering at an application level. For example WEBSPHERE APPLICATION SERVER clustering can rely on the clustering capabilities provided by host facilities instead of the native implementation.

Security manager can handle which appliances and or appliance instances can access system components B . Manager can collaborate with instance manager to permit each instance acquire an appropriate amount of system resources. Security permission carried out by manager can be configured through administrative interface and can be validated with each invocation through the appliance interface . In one embodiment security manager can lack rely on the host operating system to track security policies and principles.

The inter appliance communication area can be a virtual memory area allowing appliances to share data and communicate. The area can be a virtualized memory space which can exist physically on the host machine . Similar to resources used from the host the area memory allocation can be performed by host resources manager .

Host resources manager can manage resources used from the host system . Manager can provide access and manage the use of memory storage processing time peripherals and the like. Unlike other system A components manager can be highly dependent on the host system .

Operational manager can provide operational services to the host facilities and hosted appliances . Services can include but are not limited to backup services first failure data capture diagnostic report submission automated system updates and the like. The services can utilize connectivity infrastructure of the host operating system. Operational manager can be an optional component which can be excluded from development environments.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. Implementation details of hosting facilities can vary based on system requirements and or capabilities. Platform support B can be a SYSTEM Z specific implementation of hosting facilities and components can differ from executed embodiments.

In step a developer can engineer an IT appliance which can be executed within a virtualized environment. The appliance can be deployed within a virtualized environment with minimal configuration changes. Optionally the environment can be configured to permit execution of the appliance. In step the engineered appliance can be tested within an emulator environment. The virtualized environment can be emulated within a development environment such as an Integrated Development Environment IDE . In step the appliance can be deployed on a runtime environment which can be identical to the emulated environment. Deployment can be facilitated by one or more hosting facility interfaces such as an appliance interface. In step debugging and profiling can be performed on the appliance through the development environment. In step the runtime environment can be optionally configured for the appliance. In step a user request can be communicated to the deployed appliance. In step the request can be processed and an appropriate response can conveyed. In step the appliance can be optionally un deployed. As such un deployment configurations can include the ability for the appliance can be deactivated or removed.

Development environment can enable rapid appliance development and testing through modular development tools. Environment can include components which can operate cooperatively to assist appliance developers. Component can be an optional component of environment . In one embodiment WEBSPHERE developer for SYSTEM Z can interact with plug in and emulator to enable appliance development. Component can permit component to communicate with existing host facilities interfaces.

Appliance host facilities emulator can be an executing environment able to replicate runtime environment . During development and testing appliance can be executed within emulator . Emulator can permit appliance to behave identically to execution within framework enabling development to be performed without deployment on environment . Emulator can be a constituent of component . In one embodiment emulator can be a module associated with WEBSPHERE DEVELOPER WORKBENCH plug in .

Plug in can be a development tool able to provide environment with host facility functionality. Plug in can include a software development kit SDK export tools deployment tools and the like. The plug in can utilize exposed host facility functionality to interact with debugging interface. Plug in can employ local testing environments such as emulator without incurring the overhead cost of a host operating system. In one embodiment plug in can be a WEBSPHERE module available to a development workbench.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. System can illustrate an embodiment using WEBSPHERE but can be expanded and or modified to include other development platforms environments. Although presented as a plug in architecture components can be non modular portions of a development tool.

The flowchart and block diagrams in the illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

