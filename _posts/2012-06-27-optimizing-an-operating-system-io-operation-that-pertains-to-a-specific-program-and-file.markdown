---

title: Optimizing an operating system I/O operation that pertains to a specific program and file
abstract: An embodiment of the invention pertains to a method that includes an operating system, program components running on the operating system, and a file system associated with one or more files. Responsive to a write request sent from a specified program component to the operating system, in order to write specified data content to a given file, the method determines whether the write request meets a criterion, which is derived from the identity of at least one of the specified program component, and the given file. If the criterion is met, a message is immediately sent to release the specified program component from a wait state. Data portions of the specified data content are then selectively written to a storage buffer, and subsequently written from the buffer to the given file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08843676&OS=08843676&RS=08843676
owner: International Business Machines Corporation
number: 08843676
owner_city: Armonk
owner_country: US
publication_date: 20120627
---
The invention disclosed and claimed herein pertains to a method and apparatus for optimizing an input output I O operation of an operating system. More particularly the invention pertains to a method and apparatus of the above type wherein optimization is achieved by using the identities of a specific file and program or program component which are related to or associated with the I O operation.

Application programs running on a computing platform often need to do many file I O operations such as writing data to a related file system in a disk storage or the like and reading data from the file system. Whether or not data is read from the file system nearly all application programs must write data to a file of the file system at some time. For example applications generally need to log respective events to a file on the disk. This typically involves APIs of the file system.

While file system APIs are not the same in all program languages it is generally true that all APIs hand over read and write requests to the underlying operating system. The operating system then carries out I O operations that are respectively associated with or specified by the requests. More particularly if an application program calls or sends an I O request such as a write request to a given API the API will deliver the write request to the operating system. However a problem in such arrangements is that after the call the API may block further processing activity of the caller application. The given API will return control to the caller only after data content pertaining to the write request has been written to the disk. This problem can affect both synchronous and asynchronous I O operations.

In synchronous file I O an application thread starts an I O operation and then immediately enters a wait state until the I O request has completed and the thread is notified of the completion. In asynchronous file I O an application thread calls an I O request and then continues processing another job until the operating system kernel signals to the thread that the called I O operation is complete. The thread then interrupts its current job and processes data pertaining to the I O operation as necessary. Thus application programs that write data to disk files generally are interrupted for a time which is directly proportional to the amount of data that must be written to the disk. This occurs because calls to start write operations by using the file system APIs are in turn implemented by the underlying operating system. The operating system blocks the calling application until the write operation is completed.

In embodiments of the invention a layer of an operating system intercepts I O operations such as a write to a file which is sent from an application or other program. Data content of an I O operation that is to be written is delivered to a buffer before being written to the file so that the time the program is interrupted by the I O operation may be significantly reduced. It may also be determined that it is not necessary to write some or all of the data content to the file.

Embodiments of the invention can include a method an apparatus and a computer program product. One embodiment pertains to a method in a data processing system that includes an operating system one or more program components running on the operating system and a file system associated with one or more files. In response to a given write request sent from a specified program component to the operating system in order to write specified data content to a given file the method determines whether the given write request meets a criterion wherein the criterion is derived from the identity of at least one of the specified program component and the given file. Responsive to determining that the given write request meets the criterion a message is immediately sent to release the specified program component from a wait state. The method further includes selectively writing data portions of the specified data content to a storage buffer and subsequently writing each data portion from the storage buffer to the given file.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Referring to there is shown a computer or data processing system that comprises an operating system wherein operating system has a file system layer and an API layer . System further comprises a number of software programs or program components such as application programs. These are shown in as program components and also referenced as components and N respectively where N is any reasonable number greater than 1. As used herein the term program component means or refers to any software program or portion thereof including without limitation application programs application services such as operating system service programs software programs in the form of script language code compiled code and interpreted code code implemented in hardware such as by a hardware component and also any process or instance of any of the above.

System further includes a storage disk such as a hard disk drive or other hardware for storing data. Data is stored in disk in close association with file system .

Referring further to there is shown a write request sent from one of the program components such as program to operating system . The write request is initially directed to write API and is then sent by I O manager to I O router . Upon receipt I O router makes one or more decisions in regard to the write request and the data content associated with the write request as described hereinafter. One of the decisions may be that the requested write operation should be treated as though it was then completed. In this event a control return message is immediately sent back to the application or other program that sent the write request such as message sent to program . Upon receiving this message the caller program is no longer blocked by the operating system and may exit from a wait state.

In operating system of file system layer is configured to add functionality to each of the layers and in order to enable each layer to carry out its respective tasks. Functionality is added by implementing program components to use in each of these layers.

Referring to there are shown steps for an algorithm or other procedure for implementing an embodiment of the invention. The algorithm may be implemented by I O router of when a write request is received by I O router . However the invention is not limited thereto. In the embodiment of the algorithm starts when a write request is received by the I O router or other implementing component. It is understood that a write request will be sent from a particular program or program component such as application program and will indicate that specified data content is to be written to a particular file of disk .

In accordance with embodiments of the invention it has been recognized that the program source of a write request the file to which the data content of a write request is directed or both the program source and the file can be very significant in determining how successive write requests are to be handled. In view of this step requires identifying or defining both the program component and the file associated with a received write request. Usefully the identity of the file is included with the write request and can be acquired therefrom. The program component may usefully be identified from the command that was used to start the program component. Alternatively other file and program identifiers may be derived from the write request.

Step of the algorithm of requires determining whether the program component and or the file of a received write request matches a pattern or meets a criterion which is provided or specified by a set of rules. shows a set of rules which is furnished to step for use thereby. Illustrative examples of rules which could be included in a set of rules are set forth hereinafter as Rule Examples 1 4.

Both Text Matching and Regular Expressions can be used in implementing rules for evaluating write requests. With Text Matching a rule can be created which intercepts a write request and thus selects it for further processing in accordance with the algorithm of if the name of the file exactly matches a text provided by a user. An example of this is as follows 

The above two examples match the file that is being written to as indicated by the write request. As another option a rule can be based on the program or program component that is writing to a file and thus provides the write request. In an operating system a program is typically defined or identified by a command that was issued to start it or by a. It would generally be more useful to use the command to identify the program component as stated above since the process id can change each time the program runs. An example of a rule which identifies the program that is writing to a file would be as follows 

The above rule will intercept any file writing that is done by the program root WebServer bin startWebServer.sh . However for some situations it may not be a good idea to intercept every write request from this program. Accordingly a rule may be used that includes both the identities of the program and the file being written to. An example of this rule is as follows 

The above exemplary rules could generally be in any language based on a given implementation. By creating a set of such rules a set of detailed conditions or criteria are provided which are used by I O router to decide whether it needs to intercept a given write request or hand it back to the operating system. Thus referring further to if it is determined at step that neither the program component or the file associated with a write request matches a criterion or pattern of a set of rules as described above the write request is not intercepted by I O router . Instead the write request is redirected back to the regular flow or process of operating system and the algorithm of ends.

Conversely if the program component and or file of the write request does match a pattern or criterion of a set of rules the write request is intercepted and the algorithm proceeds to step . At this step one or more policies of a set of polices are applied to the write request and to data content associated with the request. Also as shown at step a message is sent to return control to the write request caller such as the application program or other program component that called the write request. Such caller is thereby released from any wait state it may have been in and can immediately return to processing activity while the write request is being handled further.

After a write request has been intercepted a wide range of actions can be taken at step as determined by respective policies . The terms Condition Action and Content are associated with examples of policies which are set forth below. These terms are defined as follows 

In a policy the conditions could be significantly more complex than for rules . A policy could decide to take an Action based on the Content of the write request or mathematical functions or even on the current time of day by way of example. An example of a policy is as follows 

A user could choose to ignore or modify the Content being written. In an example a program is trying to write the following lines to a file which could typically appear in a WebServer log file 

Applying the above policy to the data content of a write request assists in ensuring that disk space is not used up by data that is not needed.

It is required to notify a System Administrator when a WebServer logs a very specific error message ERROR Server has crashed . During working hours the administrator must be sent an email and at other times an SMS message must be sent to his mobile phone. Also a rule has already been run to check that the filename and the command match C Program Files WebServer logs activity.log and root WebServer bin startWebServer.sh and it has been determined that a notification as required above must be made to the System Administrator. A policy to accomplish this could be as follows 

Referring further to after any pertinent policies have been applied to a write request and its associated data content step determines whether any portions of the data content are to be written to the file specified by the write request. It is anticipated that application of some policies in fact will require that none of the data content is to be written to the file. In this case the algorithm of will end.

If it is determined at step that some or all portions of the data content are to be written to the file each of such data portions is written to a storage buffer in accordance with step . The buffer could for example be a cache associated with the memory of system .

At step each data portion written to the storage buffer is subsequently written to the file specified by the write request such as a file on disk . This action is taken in accordance with any policies that apply. For example a policy may require that data in the buffer is to be written to the disk when the buffer size exceeds 20 kb or data is to be written to the disk at regular intervals of 5 minutes or the like.

At step it is necessary to determine whether or not any further action is required. If not the algorithm ends. Otherwise the algorithm proceeds to step to take the necessary action. One example of such further action would be the need to send an email or an SMS message to the system administrator as required by Policy Example 2 described above.

By means of the algorithm of the set of rules can be used to quickly decide if a given write request should be intercepted or not. If the write request is intercepted a wide range of actions can then be taken in regard to the write request and its content.

Referring to there is shown an embodiment of the invention wherein an I O manager of an operating system is similar or identical to I O manager of . Various I O requests come to I O manager such as a write request shown as an input thereto. I O manager issues I O Request Packets IRPs and fast I O requests to a File System Driver FSD which may comprise one or more filter driver components. In the embodiment of a filter driver which is configured to carry out respective functions of I O router as described above is positioned between I O manager and filter driver components and of the FSD.

Filter driver performs a filtering process on received write requests as described above in connection with . Some of the data content of write requests is routed to a buffer by filter driver . This is carried out in the embodiment of by directing the write requests to a cache manager . Filter driver may also determine that some or all of the data content of a write request should not be written to disk file. Filter driver may determine further that a received write request should simply flow through to filter driver components and of the FSD for processing thereby.

Component pertains to replication. Component is directed to generic filter drivers associated with different functions including quotas and encryption but is not limited thereto. The FSD of can deliver data to disk of a File Allocation Table FAT to a disk of a New Technology File System NTFS or to a secure communication network such as an RDR network.

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices . A storage device is any piece of hardware that is capable of storing information such as for example without limitation data program code in functional form and or other suitable information either on a temporary basis and or a permanent basis. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communication with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for the input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard a mouse and or some other suitable input device. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system applications and or programs may be located in storage devices which are in communication with processor unit through communications fabric . In these illustrative examples the instructions are in a functional form on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory .

These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or computer readable storage media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product . In one example computer readable media may be computer readable storage media or computer readable signal media . Computer readable storage media may include for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . Computer readable storage media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . In some instances computer readable storage media may not be removable from data processing system .

Alternatively program code may be transferred to data processing system using computer readable signal media . Computer readable signal media may be for example a propagated data signal containing program code . For example computer readable signal media may be an electromagnetic signal an optical signal and or any other suitable type of signal. These signals may be transmitted over communications links such as wireless communication links an optical fiber cable a coaxial cable a wire and or any other suitable type of communications link. In other words the communications link and or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non tangible media such as communications links or wireless transmissions containing the program code.

In some illustrative embodiments program code may be downloaded over a network to persistent storage from another device or data processing system through computer readable signal media for use within data processing system . For instance program code stored in a computer readable storage media in a server data processing system may be downloaded over a network from the server to data processing system . The data processing system providing program code may be a server computer a client computer or some other device capable of storing and transmitting program code .

The different components illustrated for data processing system are not meant to provide physical or architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to and or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown. The different embodiments may be implemented using any hardware device or system capable of executing program code. As one example data processing system may include organic components integrated with inorganic components and or may be comprised entirely of organic components excluding a human being. For example a storage device may be comprised of an organic semiconductor.

As another example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiment. The terminology used herein was chosen to best explain the principles of the embodiment the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed here.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

