---

title: Method and system for improving security and reliability in a networked application environment
abstract: A security application manages security and reliability of networked applications executing collection of interacting computing elements within a distributed computing architecture. The security application monitors various classes of resources utilized by the collection of nodes within the distributed computing architecture and determine whether utilization of a class of resources is approaching a pre-determined maximum limit. The security application performs a vulnerability scan of a networked application to determine whether the networked application is prone to a risk of intentional or inadvertent breach by an external application. The security application scans a distributed computing architecture for the existence of access control lists (ACLs), and stores ACL configurations and configuration changes in a database. The security application scans a distributed computing architecture for the existence of security certificates, places newly discovered security certificates in a database, and deletes outdated security certificates. Advantageously, security and reliability are improved in a distributed computing architecture.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09027141&OS=09027141&RS=09027141
owner: Netflix, Inc.
number: 09027141
owner_city: Los Gatos
owner_country: US
publication_date: 20120412
---
Embodiments of the present invention generally relate to distributed computing systems and methods and more specifically to improving security and reliability in a networked application environment.

A broad variety of computing applications have been made available to users over computer networks. Frequently a networked application may be provided using multiple interacting computing nodes within a distributed computing architecture. For example a web site may be provided using a web server running on one node within the distributed computing architecture configured to receive requests from users for web pages. The requests can be passed to an application server running on another node within the distributed computing architecture which in turn processes the requests and generate responses passed back to the web server and ultimately to the users.

Another example of a networked application includes a content distribution system used to provide access to media titles over a network. Typically a content distribution system may include various servers such as access servers and content servers. Clients may connect to the servers using a content player such as a gaming console computing system computing tablet mobile telephone or network aware DVD player. The content server stores files or streams available for download from the content server to the content player. Each stream may provide a digital version of various forms of video or other content such as a movie a television program a sporting event user generated content or a staged or live event captured by recorded video. Users access the service by connecting to a web server where a list of content is available. Once a request for a particular title is received the title may be streamed to the client system over a connection to an available content server.

In systems such as these various conditions may result in a reduction in security or reliability. In one example certain maximum limits may be placed on various types of resources. Exceeding the limit for a given resource may result in reduced access to the networked application up to and including complete loss of service. In another example one or more portions of a networked application may be vulnerable to attack from external applications seeking to breach the security of the distributed computing architecture. In at least some cases the vulnerabilities may not be easily detectable until the portions of the networked application are deployed within the distributed computing architecture. In yet another example one or more access control lists ACLs such as security groups may be established within the distributed computing architecture in order to specify which sources can communicate to which destinations over which communication ports. However the distributed computing architecture may not provide a means to determine the configuration of the various ACLs or to monitor changes to ACL configurations over time. In yet another example security certificates may be utilized to authenticate receivers of encrypted messages over networks to ensure that exchange of confidential information such as passwords remain secure. Such security certificates may expire at a specific time determined by the web application that created the certificate. In such a case the security certificate must be replaced by a corresponding certificate with a later expiration date. Failure to replace a security certificate prior to the expiration date may result in rejection of further encrypted communications with the networked application and a corresponding loss of service. As the foregoing illustrates what is needed is a more automated way to manage security and reliability within a networked application environment.

One embodiment of the invention disclosed herein provides a computer implemented method for managing a distributed computing architecture. The method includes discovering a resource within the distributed computing architecture determining a classification for the resource based on one or more classification criteria determining whether the classification corresponds to a record within a database and if the classification corresponds to a record within the database then incrementing a counter associated with the record or if the classification does not correspond to a record within the database then initializing another record within the database that corresponds to the classification and initializing another counter associated with other record.

Another embodiment of the invention disclosed herein provides a computer implemented method for managing a distributed computing architecture. The method includes scanning a networked application within the distributed computing architecture for a security vulnerability in response detecting a first security vulnerability comparing the first security vulnerability against a database that includes a listing of previously discovered security vulnerabilities and if the first security vulnerability is not listed within the database then initializing a record within the database that corresponds to the first security vulnerability or if the first security vulnerability is listed within the database then updating the record within the database that corresponds to the first security vulnerability to indicate that the first security vulnerability was detected.

Another embodiment of the invention disclosed herein provides a computer implemented method for managing a distributed computing architecture. The method includes discovering an ACL within the distributed computing architecture determining whether the ACL corresponds to a first record within a database and if the ACL corresponds to a record within the database then determining that a configuration of the ACL differs from a configuration of the record and initializing another record within the database that corresponds to the record and has the configuration of the ACL or if the ACL does not correspond to a first record within the database then initializing another record within the database that corresponds to the ACL and has the configuration of the ACL.

Another embodiment of the invention disclosed herein provides a computer implemented method for managing a distributed computing architecture. The method includes discovering a first security certificate within the distributed computing architecture that includes a first identifying label and an expiration date comparing the first security certificate with a plurality of security certificates that resides within a storage repository determining that the first security certificate corresponds to a second security certificate that resides within the storage repository deleting the second security certificate from the storage repository and storing the first security certificate within the storage repository.

Other embodiments include without limitation a computer readable medium that includes instructions that enable a processing unit to implement one or more aspects of the disclosed methods as well as a system configured to implement one or more aspects of the disclosed methods.

In the following description numerous specific details are set forth to provide a more thorough understanding of the present invention. However it will be apparent to one of skill in the art that the present invention may be practiced without one or more of these specific details. In other instances well known features have not been described in order to avoid obscuring the present invention. Further particular embodiments of the invention are described using an example of a networked application used to stream movies music television programming user generated content etc. over a data communications network to end user client devices. However it should be understood that embodiments of the invention may be adapted to discover and manage security and reliability for a broad variety of networked applications or services. Accordingly references to a streaming media service are merely illustrative and not limiting.

The distributed computing architecture includes a plurality of compute nodes referred to herein as nodes . Each of the nodes may include a processor CPU a memory a network interface controller NIC and one or more non volatile storage devices such as a hard disk drive a magnetic tape drive optical disk drives a drive array e.g. RAID or the like. Each node includes an operating system as well as one or more applications stored in memory and executing on the CPU. Some of the applications may provide a software framework for various cloud service architectures such as a distributed database management system or a distributed application system. Such applications may execute on a single node . Applications may also execute on multiple nodes where portions of the application run on different nodes . Alternatively multiple instances of the application where the instances execute on various nodes within distributed computing system . The distributed computing architecture provides one or more virtual computing services via standard messaging protocols such as representational state transfer REST . Examples of virtual computing services may include processing capacity storage and relational databases among many other types of services. The virtual computing services may include networked applications where various active application components of the networked application execute on a plurality of nodes in communication with each other. For example node may execute one active application component of a networked application. Node may communicate with node where node may execute a second active application component of the same networked application. Node may communicate with nodes N 1 where each of these nodes may execute an instance of a third active application component of the same networked application. The nodes interconnect to each other through any technically feasible means. As described below the distributed computing architecture connect to external devices and other computing systems via network and communication channel .

The network connects the distributed computing architecture to external devices such as client device . The network may include any technically feasible networking system such as a LAN Local Area Network a WAN Wide Area Network or the Internet.

The client device is configured to access one or more applications executing within the distributed computing architecture . For example the client device may access a content distribution system executing within the distributed computing architecture to access media titles over network . In one embodiment client computer is maintained by a data analyst to analyze the distributed computing architecture . The client device includes a processor CPU a memory a NIC and one or more non volatile storage devices not shown . Similar to nodes client device also includes an operating system as well as one or more applications such as client application stored in memory and running on the CPU. The client device communicates with one or more of the nodes via network thereby allowing the client application to access to or more networked applications executing on the distributed computing architecture .

The communication channel connects one or more nodes within the distributed computing architecture to a computing system utilized for configuring maintaining and testing the distributed computing architecture such as the administration server . The network may include any technically feasible communication channel including a point to point connection or a networking system such as a LAN Local Area Network a WAN Wide Area Network or the Internet.

The administration server performs administrative tasks for the distributed computing architecture autonomously or in response to one or more commands issued by a system administrator. The administration server may be any type of computing device such as a personal computer minicomputer or server. As shown the administration server may include one or more software applications that allow a system administrator to perform various functions including without limitation configuring monitoring and testing the distributed computing architecture .

In one embodiment the administration server includes a security application that manages security and reliability within a networked application environment. As described in greater detail herein the security application manages resource limits performs vulnerability scans records configurations of ACLs and discovers security certificates within a distributed computing architecture . The administration server communicates to one or more of the nodes via communication link .

The CPU is included to be representative of a single CPU multiple CPUs a single CPU having multiple processing cores and the like. The CPU retrieves and executes programming instructions related to various application programs residing on the administration server . The CPU is connected to other components within the administration server via the interconnect . The interconnect is a communications channel such as a computer bus to provide a means of communication among the various components within the administration server . The interconnect facilitates transmission of programming instructions and application data between the CPU network interface memory storage and I O devices interface . The network interface provides a communication path between the administration server and the distributed computing infrastructure . The memory includes programming and instructions and application data for the administration server . Accordingly the CPU retrieves and executes programming instructions stored in the memory . Similarly the CPU stores and retrieves application data residing in the memory . The memory is generally included to be representative of a random access memory. The storage may be any device for long term storage of data such as a disk drive storage device. Although shown as a single unit the storage may be a combination of fixed and or removable storage devices such as fixed disc drives floppy disc drives tape drives removable memory cards optical storage network attached storage NAS or a storage area network SAN . The I O device interface connects I O devices e.g. keyboard display and mouse devices to the administration server .

As shown the memory includes a security application and storage includes a database . The security application includes a security component a certificate monitor and a publication subscription pub sub system . As noted above the security application is configured to manage security and reliability within a networked application environment.

The security component executes instructions to perform the security and reliability functions described herein. The certificate monitor discovers security certificates in the distributed computing architecture and stores newly discovered certificates in the database . The pub sub system provides a platform to notify a system administrator and other authorized users of certain conditions as determined by security component . Typically the security component publishes a message to the pub sub system . The system administrator and other authorized users who subscribe to the pub sub system receive notification of any messages published to the pub sub system . In some embodiments users choose to receive all messages published to the pub sub system or a subset of the messages based on one or more message classifications. Alternatively the pub sub system may be implemented via other notification techniques including without limitation generating automated emails to one or more users. The database is a organized collection of the data utilized by the security application . It should be recognized that the database may be implement via any technically feasible technique including without limitation a relational database or a collection of data files.

In one embodiment the security component is configured to monitor various classes of resources utilized by the collection of nodes within the distributed computing architecture and determine whether utilization of a class of resources is approaching a pre determined maximum limit. The security component scans the distributed computing architecture to discover new system resources being utilized by one or more nodes . The security component determines a classification for the newly discovered resource based on one or more classification criteria. For example the newly discovered resource may be classified as an instance of a software program executing on the distributed computing architecture . The security component searches the database to determine whether a record exists for the classification. If a record exists for the classification then the security component increments a quantity corresponding to the record for that classification. If a record does not exist for the classification then the security component initializes a new record in the database corresponding to the new classification and increments a quantity corresponding to the record for the new classification. In this way the security component tracks for each resource classification the quantity of resources utilized within the distributed computing architecture . Because records for new classifications may be created as they are discovered the security component need not have an exhaustive list of classification types before scanning the distributed computing architecture for resources.

The database also stores a maximum limit and one or more notification thresholds for each classification type. A system administrator or other authorized user may set these thresholds. In one embodiment if the quantity of resources associated with a given classification exceeds the maximum limit then one or more networked applications may cease to function or refuse further transaction. In order to prevent such an occurrence one or more notification thresholds may be determined where each notification threshold is typically less than the maximum value. The notification threshold may be based on a specific quantity or on a percentage of the maximum limit. Multiple notification thresholds may be useful where a system administrator wishes to be notified when utilization of a classification of resources reaches 75 of the maximum limit and again when utilization reaches 90 of the maximum limit. The maximum limits notification thresholds and current utilization levels are stored within the database for each classification. In one embodiment after incrementing a quantity corresponding to the record for a particular classification as described above the security component compares the quantity utilized with the one or more notification thresholds. If the quantity utilized meets or exceeds a notification threshold then the security component publishes a notification to the pub sub system . System administrators subscribing to such notifications then receive a message that the notification threshold has been reached for the resource classification. In one embodiment the security component publishes a notice to the pub sub system when a new resource classification is discovered that has no corresponding record in the database . In response the system administrator may set a maximum limit and one or more notification thresholds associated with the new classification.

In another embodiment the security component performs a vulnerability scan of a networked application such as an application implementing a website to determine whether the networked application is prone to a risk of intentional or inadvertent breach by an external application. As a result of the vulnerability scan the security component could discover one or more security vulnerabilities. The security component compares each discovered vulnerability with a list of vulnerabilities within the database . If the security vulnerability is not within the database then the security component initializes a record in the database for the new vulnerability and stores information in the database related to the vulnerability including without limitation the date and time the vulnerability was discovered the nature of the vulnerability and the network application component exhibiting the vulnerability. If the security vulnerability is within the database then the security component updates the record in the database associated with the vulnerability to reflect that the vulnerability was detected. In some embodiments the database is associated with an issue tracking system not shown configured to track whether one or more security vulnerabilities have been resolved. The system administrator utilizes the database and the associated issue tracking system to manage the resolution of such discovered vulnerabilities. In one embodiment the security component publishes a message to the pub sub system when a new record is initialized in the database corresponding to a newly discovered vulnerability. In another embodiment the security component publishes a message to the pub sub system when a vulnerability is marked in the database as having been resolved but is discovered during a subsequent vulnerability scan. In yet another embodiment the security component publishes a message to the pub sub system when the distributed computing architecture is currently being scanned for vulnerabilities.

In yet another embodiment the security component scans a distributed computing architecture for the existence of access control lists ACLs . An ACL specifies which users or system processes are granted access to objects as well as what operations are allowed on given objects. One example of an ACL is a security group configured to specify which source objects can communicate to which destination objects over which communication ports within the distributed computing architecture . Source objects and destination objects may be identified as belonging to a particular ACL by various methods including without limitation by an internet protocol IP address associated with the source or destination or by an indicator associated with the source or destination identifying membership within a particular ACL. When an ACL is discovered the security component checks the database to determine whether the database contains a record corresponding to the ACL. If the database does not have a record corresponding to the ACL then the security component initializes a record in the database corresponding to the newly discovered ACL and stores the ACL s configuration information in the record. The configuration information includes without limitation the sources destinations and communication ports associated with the ACL and the time and date when the ACL was discovered. If the database does have a record corresponding to the ACL then the security component determines whether the current configuration differs from the most recent configuration corresponding to the ACL as stored in the database . If the current configuration of the ACL differs from the most recently stored configuration then the security component stores the new configuration data in the record in the database corresponding to the ACL. In some embodiments. The security component computes a quantity of instances of one or more software applications that execute within the ACL. In at least one embodiment the security component computes an exposure metric based on the quantity of source objects the quantity of communication ports and the quantity of destination objects and stores the metric in the record in the database corresponding to the ACL.

In at least some embodiments a system administrator or other authorized user determines one or more rules in order to discover potential system anomalies and security vulnerabilities. The rules are incorporated into the security application in such a manner so as to configure the security application to examine the characteristics of an ACL for conformance to the one or more rules. For example a rule may specify that an ACL may not have a permission setting allowing source objects within the ACL to use an internet protocol IP address of 0.0.0.0 0 where an IP address of 0.0.0.0 0 grants access permission to all routable addresses on the Internet. In another example a rule may not allow a user to share buckets or objects with a user account that is not a member of the ACL where a bucket is a collection of objects such as computer files. The rule may specify that the ACLs are examined for the presence of unknown or unauthorized accounts within the ACL where the unknown or unauthorized accounts have access to one or more buckets or objects associated with the ACL. In another example a rule may prohibit certain permissive access rights within the ACL. An ACL may include an identity and access management system IAM enabling secure and controlled access to various services and resources available to objects associated with the ACL. The rule may prohibit certain access rights within the ACM for the purpose of preventing unauthorized access or use of the services and resources associated with the ACL. For example the rule may prohibit access to certain buckets and objects associated with the ACL without a verified security credential that has been issued by a node within the distributed computing architecture .

In yet another embodiment the security component causes a certificate monitor to scan a distributed computing architecture for the existence of security certificates such as security certificates that conform to the secure sockets layer SSL cryptographic protocol. A security certificate is utilized to authenticate receivers of encrypted messages over networks to ensure that exchange of confidential information such as passwords remain secure. Such security certificates may expire at a specific time determined by the web application that created the certificate. Once a security certificate expires further encrypted messages may not be received until an updated security certificate is acquired. The certificate monitor discovers the security certificates by scanning by various methods. For example the certificate monitor scans a file folder associated with a source code control system where the file folder may include security certificates associated with one or more versions of a software application. In another example the certificate monitor accesses network addresses on a port utilizing hypertext transfer protocol secure HTTPS . The certificate monitor may then receive one or more security certificates issued by a server corresponding to the accessed network addresses. The accessed network addresses may be associated with an elastic load balancing system configured to distribute network traffic related to a software application across multiple instances of the software application. In another example the certificate monitor scans the contents of one or more web pages where the server providing the content for the web pages issues a corresponding security certificate. It should be recognized that the examples above are not limiting and that other sources of security certificates may be monitored or scanned within the scope of the present invention.

Security certificates discovered by the certificate monitor are typically associated with an identifying label and an expiration date. When the certificate monitor discovers a security certificate the certificate monitor determines whether there is a corresponding security certificate in the database . For example the certificate monitor compares the identifying label of the newly discovered security certificate against the identifying labels of other security certificates recorded in the database . If the newly discovered certificate corresponds to a security certificate that resides in the database then the certificate monitor deletes the security certificate in the database . The certificate monitor then stores the newly discovered security certificate in the database . In one embodiment the certificate monitor scans the security certificates recorded in the database and publishes a message to the pub sub system identifying security certificates with an expiration date on or before a threshold date. In another embodiment the certificate monitor monitors the security certificates in the database and deletes security certificates that have not been updated within a predetermined amount of time.

The certificate monitor stores new security certificates in the database as the new certificates are found. The security component also finds updated security certificates and replaces the corresponding expiring security certificates with updated certificates.

As shown a method begins at step where the security application discovers a system resource that has not previously been recorded. At step the security application determines a classification for the resource based on one or more classification criteria. For example the security application may determine that a newly discovered resource is a as an instance of a software program executing on the distributed computing architecture . At step the security application searches the database for the classification. At step the security application determines whether the classification corresponds to a record stored in the database .

If the classification does not correspond to a record stored in the database then the method proceeds to step where the security application initializes a record within the database corresponding to the new classification. At step the security application increments a counter associated with the record. At step the security application determines whether a notification threshold associated with the classification has been reached.

If no notification threshold has been reached then the method terminates. However if in step a notification threshold has been reached then the method proceeds to step where the security application notifies the system administrator that the notification threshold for the associated classification has been reached. The method then terminates.

Returning now to step if in step the classification corresponds to a record stored in the database then the method proceeds to step as described above.

As shown a method begins at step where the security application scans a networked application such as an application implementing a website for security vulnerabilities. At step the security application collects data on the found vulnerability such as the web page address exhibiting the vulnerability. At step the security application selects a security vulnerability from the list of vulnerabilities collected during the vulnerability scan. At step the security application compares the selected security vulnerability against the database to search for a record corresponding to the selected vulnerability. At step the security application determines whether the selected vulnerability is listed in the database .

If the vulnerability is not listed within the database then the method proceeds to step where the security application initializes a record in the database corresponding to the selected vulnerability. At step the security application determines whether there are additional vulnerabilities to process from the vulnerability scan. If there are additional vulnerabilities to process then the method returns to step as described above. If there are no additional vulnerabilities to process then the method terminates.

Returning now to step if in step the vulnerability is not listed within the database then the method proceeds to step as described above.

As shown a method begins at step where the security application discovers an access control list ACL such as a security group. At step the security application searches the database for the ACL. At step the security application determines whether the ACL is corresponds to a record within the database .

If the ACL does not correspond to a record within the database then the method proceeds to step where the security application initializes an entry in the database corresponding to the newly discovered ACL. At step the security application initializes a record in the database to store the configuration of the ACL. The method then terminates.

Returning now to step if in step the ACL corresponds to a record within the database then the method proceeds to step where the security application compares the current configuration of the ACL with the most recent configuration stored in the database for the ACL. At step the security application determines whether the current configuration differs from the most recently stored configuration. If the configuration does not differ from the most recently stored configuration then the method terminates.

However if at step the configuration differs from the most recently stored configuration then the method proceeds to step where the security application initializes a record in the database to store the configuration of the ACL. The method then terminates.

As shown a method begins at step where the security application discovers a new security certificate within the distributed computing architecture . The new security certificate typically includes an identifying label and an expiration date. At step the security application searches the database or other storage repository for a corresponding security certificate with an earlier expiration date. At step the security application determines whether the existing certificate resides within the database . If the certificate does not reside within the database then the method proceeds to step where the security application stores the new certificate in the database . The method then terminates.

However if in step the certificate resides within the database then the method proceeds to step where the security application deletes the existing security certificate. At step the security application stores the new certificate in the database . The method then terminates.

In sum a security application is configured to manage security related issues and reliability issues within a distributed computing architecture. In one aspect the security application is configured to monitor various classes of resources utilized by the collection of nodes within the distributed computing architecture and determine whether utilization of a class of resources is approaching a pre determined maximum limit. The security application notifies a system administrator or other user if utilization of a class of resources meets or exceeds a notification threshold. In another aspect the security application is configured to perform a vulnerability scan of a networked application such as an application implementing a website to determine whether the networked application is prone to a risk of intentional or inadvertent breach by an external application. The security application stores in a database data related to discovered vulnerabilities. In another aspect the security application is configured to scan a distributed computing architecture for the existence of access control lists ACLs and store ACL configurations and configuration changes in a database. In yet another aspect the security application is further configured to scan a distributed computing architecture for the existence of security certificates place newly discovered security certificates in a database and delete outdated security certificates.

One advantage of the disclosed techniques is that they improve the overall security and reliability within a distributed computing architecture. For example the distributed computing architecture is regularly monitored for resource utilization levels security vulnerabilities and updated security certificates. The system administrator is notified when resource utilization levels reach a threshold value a security vulnerability is discovered or a security certificates is about to expire. Such notification allows the system administrator to take early corrective action. Another advantage is that the distributed computing architecture is regularly monitored for changes to access control lists ACLs such as security groups. Changes to ACL configurations are stored for subsequent review and analysis by a system administrator.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof. For example aspects of the present invention may be implemented in hardware or software or in a combination of hardware and software. One embodiment of the invention may be implemented as a program product for use with a computer system. The program s of the program product define functions of the embodiments including the methods described herein and can be contained on a variety of computer readable storage media. Illustrative computer readable storage media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive flash memory ROM chips or any type of solid state non volatile semiconductor memory on which information is permanently stored and ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive or any type of solid state random access semiconductor memory on which alterable information is stored. Such computer readable storage media when carrying computer readable instructions that direct the functions of the present invention are embodiments of the present invention.

