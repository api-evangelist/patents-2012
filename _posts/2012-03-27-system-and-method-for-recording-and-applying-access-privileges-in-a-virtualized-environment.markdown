---

title: System and method for recording and applying access privileges in a virtualized environment
abstract: A technique for determining which permissions are required to perform certain administrative tasks efficiently records the required permissions between record and stop signals. An administrator presses a record button on a graphical user interface (GUI) and subsequently enters commands to perform the administrative tasks. After the last command is entered, the administrator presses a stop button on the GUI. Commands need not actually execute between the record and stop signals, but rather permissions for each command need to be recorded by an administration application, which is able to organize sets of permissions as roles. When a given user is associated with a particular role, the user is assigned all permissions for the role. Using this technique, the administrator may delegate administrative tasks to the user without the inefficiencies of conventional trial and error methods.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09135457&OS=09135457&RS=09135457
owner: VMware, Inc.
number: 09135457
owner_city: Palo Alto
owner_country: US
publication_date: 20120327
---
Enterprise computing environments employ increasing numbers of computer systems network systems and storage systems to satisfy growing computational and storage capacity requirements. A given computing environment typically hosts multiple applications each requiring customization and certain types of isolation from other applications. To accommodate this customization and isolation the systems implement a permissions regime that requires each user to be granted a specific permission to perform a specific corresponding action. For example a computer system may require a user to have permission to execute programs and a storage system may require a user to have permission to access a specific storage volume or a certain portion of the storage volume such as a user directory. The storage system may also specifically require read write and execute permission for related operations within the storage volume.

As typical computing environments grow to comprise thousands of systems managing detailed permissions associated with each system within the computing environment grows increasingly complex and challenging. Administrators are faced with a growing inventory of systems and increasing complexity required to manage each system. A staff of multiple users is typically employed to manage this growing complexity. One or more of the users may be associated with a predefined role that defines specific permissions that enable a user to perform related actions. Being associated with the predefined role has the effect of granting a user permission to perform their assigned administrative tasks within the computing environment.

Virtualized computing environments provide tremendous efficiency and flexibility to systems operators by enabling the computing storage and networking resources within the computing environment to be deployed as needed to accommodate specific applications or specific capacity requirements. For example multiple virtual machines VMs may be created and operated on physical computer systems based on demand for new computation resources. Similarly virtual storage may be allocated and assigned to specified applications as needed. Corresponding permissions for each virtualization management task are conventionally required. For example permission is typically required to create a new VM turn on or off a VM allocate virtual storage associate storage with a VM and so forth. While virtualized computing and storage increases efficiency virtualization also increases administrative complexity by introducing yet more different permissions.

One significant administrative challenge in enterprise computing environments is managing a large and growing collection of different permissions required to perform a growing set of administrative tasks. To properly grant a sufficient set of permissions to a particular role an administrator typically adds incremental permissions to the role using an iterative ad hoc process. This process involves the user testing the role to determine whether all necessary permissions have been granted for each administrative task and asking the administrator for additional permissions when errors are encountered. Because no additional permissions should be granted to a role beyond those absolutely necessary to perform specific administrative tasks this process typically involves incrementally finding and adding permissions to the role until a user is able to perform all administrative tasks using the role. This process is time consuming and inefficient. Therefore what is needed in the art is a more efficient technique for determining which permissions should be associated with a given role in a computation environment.

One or more embodiments of the present invention provide techniques for setting permissions that are required to perform administrative tasks in a computing system having a plurality of managed objects. The managed objects may be virtual machines instantiated in the computing system and the administrative tasks may include powering on virtual machines powering off virtual machines migrating virtual machines cloning virtual machines and creating virtual machine snapshots. With these techniques an administrator can delegate specific administrative tasks to designated users without conventional trial and error inefficiencies associated with determining a complete set of permissions required to perform the administrative tasks

In one embodiment the method includes the steps of receiving a command corresponding to an administrative task targeting at least one managed object within the computing system programmatically determining a set of permissions required to perform the command in response to receiving the command saving the set of required permissions to a role that can be associated with any user to enable the user to perform the administrative task at a later time and associating the saved set of required permissions with the role. In another embodiment the method includes the steps of receiving a start signal for initiating a recording of the permissions required to perform an administrative task targeting at least one managed object within the computing system programmatically determining a set of permissions required to perform the administrative task receiving a stop signal for stopping the recording saving the set of required permissions that have been programmatically determined between initiation and stopping of the recording and associating the saved set of required permissions with a user to enable the user to perform the administrative task at a later time.

Further embodiments of the present invention include without limitation a non transitory computer readable storage medium that includes instructions that enable a computer system to implement one or more aspects of the above methods as well as a computer system configured to implement one or more aspects of the above methods.

Each storage system may comprise one or more underlying storage media devices such as magnetic hard disk drives solid state drives or any suitable mass storage media devices. A given storage system may be configured to present a block based unit of storage exposed as a logical storage unit within a given storage unit such as a logical unit number LUN . Each logical storage unit is generated from underlying physical storage such as magnetic or solid state storage media. In certain configurations a networked file system may be mounted to one or more of the VMs . Network system couples host server systems and storage systems together enabling each system to communicate with other systems. Network system may implement Ethernet Fibre Channel or any other technically feasible data networking technology. Network system may implement switching routing or any combination thereof and may comprise one or more physically distinct devices.

Each computer system network system and storage system may be represented as an object having a specific set of available actions. A given action may be executed in response to a request from a particular user provided the user has been granted an appropriate permission for the action. A permissions database is configured to store permissions information for each object within computing system . Permissions database may be configured to store at least one role which comprises a list of permissions for an arbitrary collection of objects within computing system . Exemplary distinct permissions may include without limitation permission to create a VM within a specific host server system permission to turn on or off a specific VM permission to turn on or off any VM within a specific host server system permission to create a logical storage unit within a specific storage system permission to associate a logical storage unit with a specified VM and so forth.

An administration application is a special application that executes with all available permissions for each object within computing system . Administration application therefore has permission to add one or more permissions to role and edit a user authentication database which maintains a list of user accounts that are given various forms of access to computing system . Each user account is defined by a user entry which includes information about the user and a list of certain permissions granted to the user. Each user entry may be associated with a certain role which may define additional permissions for user entry . An administrator is an individual with access to execute administration application thereby gaining full access to each available action for each object within computing system . In certain scenarios administrator may delegate to a specified user certain administrative tasks such as creating configuring and operating a VM . In such a scenario administrator may use administration application to configure a certain role to include all necessary permissions to perform the administrative tasks and associate the role with the user account by associating the role with a corresponding user entry . Administration application may execute on any appropriate computing resource within computing system .

In certain scenarios a particular administrative task may involve a long complex and interrelated sequence of commands having a complex set of required permissions to complete. For example a user may need to create a VM mount an installation image for a guest OS onto a host from a remote storage system for installation on the VM and connect the VM to a remote logical storage unit onto which installation data for the guest OS is stored. Such an administrative task involves a number of different objects within computing system and each object may require one or more permissions to complete the administrative task. A particular user should not be given more permissions than necessary to perform their delegated tasks. For example while the user is given permission to create the VM and perform related actions to configure the VM within the computing system the same user may not necessarily need permission to migrate the VM to a different host within the computing system . In one usage model VMware s vCenter Orchestrator VCO is used to establish a workflow comprising commands for accomplishing the administrative task.

It should be recognized that commands may require a single or plural permissions to properly execute. For example the conventional block attach command for attaching a logical storage unit to a VM may require permission to execute the command on the host and separately permission to access the logical storage unit which may be specified as an input parameter to the command. In general a given command requires at least execute permission and objects upon which the command operates typically require an additional permission or permissions. Certain objects may require a finer level of permission detail than simply whether access is permitted. For example the logical storage unit typically requires separate permissions for reading and writing data. A read only logical storage unit may be used as an installation image that should never be written by a user while a read write logical storage unit may be used for storing user data that is generated and written by the user.

Once a user is associated with a role that includes an appropriate list of permissions the user may perform any action allowed by the list of permissions. Permissions may be added explicitly or implicitly based on the method defined below in . A permissions system implemented by objects within the computing system is required to honor all permissions granted to a user when the user is associated with a role. Any technically feasible permissions system may be implemented without departing the scope and spirit of the present invention. The permissions system may comprise one or more permissions subsystems such as certain features of VMware s Service Console product a pluggable authentication module PAM within Service Console and Active Directory.

In an exemplary usage model administration application performs a given command by transmitting one or more action requests each tagged with S ID to host server systems for execution. Each of the action requests may require an associated user to have permission such as a specific execution or access privilege to execute a corresponding action on a specified host server system. A given action may involve calling an application programming interface API within a software subsystem executing on host server system . The instructions of such API transmits a permission query to permissions database to determine whether the associated user has permission P to perform the action. In one embodiment permission query includes a reference to the associated user S ID and a specific permission P associated with a proposed action to be performed. For example host server system receives action request with an associated user and S ID to perform an action which requires permission P associated with object . To determine whether the associated user has permission to perform the action host server system transmits permission query comprising the associated user S ID and an identifier for permission e.g. P to permissions database . Permissions database records that a query was posted to permission P for S ID and returns any appropriate query results to host server system . It should recognized that after administration application has completed requesting all actions for a given recording session permissions database then has an accumulated record of all dynamically generated permission queries associated with S ID . This accumulated record is transmitted from permissions database to administrative application as accumulated permission data .

This usage model for recording permission contemplates certain dynamic relationships between overall system state and actions. For example if an action requests that host server systems stop all VMs with high memory usage administration application may call an API such as StopAllVMsWithHighMemoryUsage usage to test each active VM for memory usage before determining whether the VM needs to be stopped. In the process of executing the StopAllVMsWithHighMemoryUsage usage API call a plurality of actions may be performed according to the prevailing system state. Each such action that requires a permission results in a permission query being generated by a corresponding host server system. The permission query is tagged with an appropriate S ID which is recorded by permissions database against a target permission being queried. The set of permissions having a specific S ID recorded comprise the accumulated permission data which is transmitted to administration application . Because each S ID is unique to a particular user session and all permissions data is accumulated in association with a specific S ID multiple users may simultaneously record sessions without interfering with one another.

Method begins in step where administration application receives a start signal. The start signal may be generated in response to administrator pressing a record button on a graphical user interface GUI presented by administration application . Administration application may generate the GUI locally or as a web page viewed by administrator via a web browser on a remote computer. In step administration application initializes a permissions set to include a null list of permissions. The permissions set may be represented using any data structure capable of storing a list of arbitrary permissions. In step administration application receives a command from administrator . In one usage model the command is associated with a target object such as a specific VM and an action to be performed by the target object in connection with an administrative task. For example the administrative task may be to turn on the VM and the command represents a means for a user to specify the task to administration application . The command may be conveyed to administration application via a command line a configuration file a web API the GUI or any other technically feasible technique. When recording a command administration application may determine which permissions are necessary to execute the command without necessarily executing the command.

In step administration application determines a set of required permissions to execute the command which directly specifies an action that can be performed by the target object. In one embodiment each object e.g. the target object maintains and exposes to administration application a specific static set of permissions for each possible action that can be performed. Administration application queries the target object to determine the set of required permissions for the action associated with the command. No actions are actually performed but instead the set of required permissions is returned. In an alternative embodiment a specific static set of permissions for each possible action to be performed by an object is maintained in a central database. When an object is added to computing system the central database is updated to include a set of permissions for the object. Administration application determines the set of required permissions for the command by querying the central database. In another alternative embodiment each object is configured to execute the command in a query mode whereby the set of required permissions is dynamically determined at the time each command is performed. In certain scenarios such as where execution paths need to be computed dynamically in conjunction with command execution the set of required permissions may need to be determined dynamically. A software development kit SDK may be configured to provide a standard mechanism for exposing permissions via a static query mechanism a dynamic query mechanism or any combination thereof.

In step administration application adds the set of required permissions to the permissions set. In one embodiment each unique required permission that is not yet represented in the permissions set is added to the permissions set. The permissions set may include without limitation a list of targeted objects actions requiring permission specific permissions and so forth. If in step a stop signal is received then method proceeds to step . The stop signal may be generated in response to administrator pressing a stop button on the GUI. Between pressing the record button and the stop button on the GUI administrator is able to enter the command and additional commands as required by specific administrative tasks to be performed on objects in computing system . In one embodiment administrator is able to save a current snapshot of the permissions set prior to entering a stop signal. For example if administrator is configuring two roles with a first role having fewer permissions than a second role then a current snapshot may be taken for the first role prior to completing a recording session for the second role.

In step administration application may display a summary of permissions added to the permissions set between the start signal and the stop signal. The summary of permissions corresponds to the permissions set. The summary of permissions may also list which objects were targeted by commands recorded between the start signal and the stop signal. In step administration application saves the permissions set. In a scenario where no superfluous commands are recorded beyond those needed to perform a given administrative task the permissions set represents a minimal permissions set for a corresponding administrative task or tasks. In one embodiment administration application saves the permissions set to permissions database as a specific role which may comprise a newly defined role having a newly created role identifier. The role may be represented as a role entry . In another embodiment the permissions set is saved by adding the permissions set to at least one role identifier such as a role name associated with a corresponding role entry stored in permissions database according to method described below. In yet another embodiment the permissions set is saved by adding the permissions set to a proxy task object which may be later executed using the permissions set.

Method terminates in step where administration application associates the permissions set with a user. In one embodiment the permissions set is associated with the user by associating the user with a role corresponding to the permissions set. One implementation of this embodiment is illustrated in greater detail in . In another embodiment the permissions set is associated with the user by granting each permission within the permissions set to the user. In yet another embodiment the permission set is associated with the user indirectly by granting the user permission to execute a proxy task object having previously been assigned the permissions set.

During operation administrator may press the record button on the GUI and then enter a set of commands corresponding to one or more administrative tasks to be delegated to a user. After entering the last command in the set of commands administrator presses the stop button on the GUI. At this point the permissions set includes all necessary permissions for the user to be able to perform the one or more delegated administrative tasks. The permissions set may be saved as a specified role and subsequently associated with the user thereby enabling the user to be able to properly execute the set of commands.

Method begins in step where administration application receives a role identifier from administrator . The role identifier specifies a role of . In one embodiment the role identifier is received via the GUI. The GUI may be configured to reference existing roles or generate new roles based on instructions from administrator . In step administration application adds the permissions set determined in method to the specified role and saves the resulting list of permissions for the specified role to database . If in step the specified role is not the last role to be specified by administrator then method proceeds back to step . Otherwise method terminates in step .

Method begins in step where administration application receives a role identifier and a user identifier ID from administrator . In one embodiment the role identifier specifies a role of . The user identifier specifies a user entry in user authentication database . The role identifier and the user identifier may be received via the GUI. The GUI may be configured to reference existing roles or generate new roles and to reference existing user entries or generate new user entries based on instructions from administrator . In step administration application associates the user entry specified by the user identifier with the role specified by the role identifier and saves a resulting user entry to user authentication database . If in step the specified user entry is not the last user entry then method proceeds back to step . Otherwise method terminates in step .

Method begins in step where administration application receives a start signal to indicate recording should start for a session comprising administrative actions. The start signal may be received via a GUI presented by administration application a command line presented by administration application or a file read into administration application . In step administration application generates a new session identifier S ID such as S ID which is unique to a particular user and session. In step administration application transmits a record signal tagged with the S ID to a host server system. If in step the host server system is determined to be the last host server system needed for a recording session associated with S ID then the method proceeds to step . Otherwise administration application repeats steps and for another host server system.

In step administration application receives an action to be performed by a host server system. The action may be received via a GUI presented by administration application a command line presented by administration application or a file read into administration application . The action comprises at least one task such as an administrative task to be recorded as part of the recording session. In step administration application transmits the action tagged with S ID to each host server system needed for execution of the action. Steps and continue to be executed for all actions performed on the host server systems until a stop signal is received by administration application in step .

If in step administration application receives a stop signal indicating that the recording sessions should be halted then the method proceeds to step . The stop signal may be received via a GUI presented by administration application a command line presented by administration application or a file read into administration application . In step administration application retrieves from permissions database accumulated permission data associated with S ID such as accumulated permission data of . In step the administration application saves the accumulated permission data. It should be recognized that accumulated permission data saved in this manner may be associated with one or more users or one or more roles.

In certain alternative embodiments step is performed only after an action is received in step and only host server systems required by the action are notified with the new generated S ID. In certain other alternative embodiments administration application is configured to interact with a top hierarchical rank of host sever systems . In such embodiments each host server system may have one or more levels of host server systems organized in an underlying hierarchy. Each host server system may act as a delegated administration application to other host server systems within the underlying hierarchy. Multiple layers of host server systems may be configured to act in an administrative capacity to underlying host server systems. Consolidated results of administrative actions are reported back up each hierarchy to a top level host server system which may report the results back to administration application . Hierarchical permissions may be enforced via a software design kit API set associated with each host server system .

In sum a technique for determining which permissions are required for executing management tasks within a computing system is disclosed. An administrator starts recording a sequence of commands that define one or more administrative tasks and stops recording after entering the last such command. In certain scenarios the commands need not be executed for the purpose of recording permissions. Each command has an associated set of permissions needed to actually execute the command. Each set of permissions is added to a permissions set which is applied to a role. When the role is associated with a user the user is granted all necessary permissions to properly execute the commands.

One advantage of the present invention is that an administrator is able to delegate specified administrative tasks to a user without conventional trial and error inefficiencies associated with determining a complete set of permissions required to perform the administrative tasks.

The various embodiments described herein may employ various computer implemented operations involving data stored in computer systems. For example these operations may require physical manipulation of physical quantities usually though not necessarily these quantities may take the form of electrical or magnetic signals where they or representations of them are capable of being stored transferred combined compared or otherwise manipulated. Further such manipulations are often referred to in terms such as producing identifying determining or comparing. Any operations described herein that form part of one or more embodiments of the invention may be useful machine operations. In addition one or more embodiments of the invention also relate to a device or an apparatus for performing these operations. The apparatus may be specially constructed for specific required purposes or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines may be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations.

The various embodiments described herein may be practiced with other computer system configurations including hand held devices microprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

One or more embodiments of the present invention may be implemented as one or more computer programs or as one or more computer program modules embodied in one or more computer readable media. The term computer readable medium refers to any data storage device that can store data which can thereafter be input to a computer system. Computer readable media may be based on any existing or subsequently developed technology for embodying computer programs in a manner that enables them to be read by a computer. Examples of a computer readable medium include a hard drive network attached storage NAS read only memory random access memory e.g. a flash memory device a CD Compact Discs CD ROM a CD R or a CD RW a DVD Digital Versatile Disc a magnetic tape and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.

Although one or more embodiments of the present invention have been described in some detail for clarity of understanding it will be apparent that certain changes and modifications may be made within the scope of the claims. Accordingly the described embodiments are to be considered as illustrative and not restrictive and the scope of the claims is not to be limited to details given herein but may be modified within the scope and equivalents of the claims. In the claims elements and or steps do not imply any particular order of operation unless explicitly stated in the claims.

In addition while described virtualization methods have generally assumed that virtual machines present interfaces consistent with a particular hardware system persons of ordinary skill in the art will recognize that the methods described may be used in conjunction with virtualizations that do not correspond directly to any particular hardware system. Virtualization systems in accordance with the various embodiments implemented as hosted embodiments non hosted embodiments or as embodiments that tend to blur distinctions between the two are all envisioned. Furthermore various virtualization operations may be wholly or partially implemented in hardware. For example a hardware implementation may employ a look up table for modification of storage access requests to secure non disk data.

Many variations modifications additions and improvements are possible regardless of the degree of virtualization. The virtualization software can therefore include components of a host console or guest operating system that performs virtualization functions. Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the invention s . In general structures and functionality presented as separate components in exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements may fall within the scope of the appended claims s .

