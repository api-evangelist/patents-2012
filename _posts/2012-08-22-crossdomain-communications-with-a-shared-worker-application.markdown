---

title: Cross-domain communications with a shared worker application
abstract: Techniques are described herein that provide for inter-domain communications with one or more shared worker applications. A parent web application associated with a first domain may create a child web application associated with a second domain different than the first domain. The child web application may determine whether a shared worker associated with the second domain is operating. The shared worker acquires information associated with the second domain in response to one or more requests, and stores acquired information associated with the second domain in a memory of the local computing device. The parent web application may request, via the child web application, information associated with the second domain from the shared worker. In response to the request, the parent web application may receive, from the shared worker, information associated with the second domain stored in the memory of the local computing device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09047393&OS=09047393&RS=09047393
owner: Google Inc.
number: 09047393
owner_city: Mountain View
owner_country: US
publication_date: 20120822
---
This application is a continuation of U.S. application Ser. No. 13 250 129 filed Sep. 30 2011 which is a continuation of U.S. application Ser. No. 12 795 559 filed Jun. 7 2010 the entire content of which are incorporated herein by reference.

This disclosure relates to network communications. More specifically this disclosure relates to web applications configured to operate in a web browser on a communications device coupled to a network.

A web browser is an application computer program that operates on a computing device e.g. a personal computer laptop personal digital assistant PDA cellphone smartphone or the like to enable information available over a network e.g. the Internet to be accessed. A web browser may be configured to access information available over a network by utilizing uniform resource identifiers URIs which indicate a location by which information may be accessed. A typical web browser may be configured to present network accessible and or other information to a user in one or more browser windows or browser tabs within the browser. A web browser may enable a user to open a plurality of web browser windows or tabs within a web browser window simultaneously.

A web application is a software application that is accessible via a web browser as discussed above. For example a web application may be a document such as a hyper text markup language HTML document. A document web application may be configured to present information available over a network visually to a user. A document web application may present to a user one or more links e.g. to a URI to available information. A user may be provided an ability to select one or more links which may result in presentation of a new web document including information accessible via a URI associated with the link. User selection of one or more links of a web document may instead or in addition execute one or more non document web applications to perform a desired function within a browser.

Many web browsers also allow non document web applications to operate within the confines of the browser for various purposes. For example a web application may run within the confines of a browser to facilitate communications between different document web applications running within the browser. In another example a web application may be a digital video or music player with a representation of controls embedded within a document web application to enable a user to playback audio or video accessible via the network or local to a user s computing device. Other web applications may provide a user via a web browser access to email chat voice over Internet Protocol VoIP or other communications functions. Many other types of web applications may also operate within a browser. A web application may or may not be visible to a user operating the browser. In some examples web applications are written in the Javascript language which is a software language specifically utilized for development of web applications.

In a typical browser implementation web applications and information accessible via a network may be associated with one or more domains. In order to provide security for users many web browsers limit communications between web applications associated with different domains operating within the browser. For example a first web application associated with the domain www.google.com may be prevented from communicating directly with a second web application associated with the domain www.espn.com. In another example a first web application associated with the domain www.maps.google.com may be prevented from communicating directly with a second web application associated with the domain www.mail.google.com. In order to facilitate inter domain communications some web applications are configured to take additional steps to authenticate a web application associated with a different domain to enable inter domain communications between the web applications.

This disclosure contemplates improved techniques for the acquisition of network accessible information via a web browser application incorporating one or more shared worker applications. In one example a method is described herein. The method includes creating by a parent web application associated with a first domain a child web application. The method further includes associating the child web application with a second domain different than the first domain. The method further includes determining by the child web application whether a shared worker associated with the second domain is operating on a local computing device wherein the shared worker acquires information associated with the second domain in response to one or more requests and stores acquired information associated with the second domain in a memory of the local computing device. The method further includes requesting by the parent web application associated with the first domain information associated with the second domain from the shared worker via the child web application. The method further includes responsive to requesting receiving by the parent web application associated with the first domain the requested information associated with the second domain stored in the memory of the local computing device from the shared worker via the child web application.

In another example a computer readable storage medium is described herein. The computer readable storage medium includes instructions to cause a computing device to create by a parent web application associated with a first domain a child web application. The computer readable storage medium further includes instructions to cause the computing device to associate the child web application with a second domain different than the first domain. The computer readable storage medium further includes instructions to cause the computing device to determine by the child web application whether a shared worker associated with the second domain is operating on a local computing device wherein the shared worker acquires information associated with the second domain in response to one or more requests and stores acquired information associated with the second domain in a memory of the local computing device. The computer readable storage medium further includes instructions to cause the computing device to request by the parent web application associated with the first domain via the child web application information associated with the second domain from the shared worker. The computer readable storage medium further includes instructions to cause the computing device to receive by the parent web application associated with the first domain from the shared worker information associated with the second domain stored in the memory of the local computing device in response to the requesting.

In another example a computer system is described herein. The computer system includes a processor configured to execute computer program instructions. The computer system further includes a parent web application associated with a first domain and executable by the processor to create a child web application that is associated with a second domain different than the first domain. The computer system further includes means for determining whether a shared worker associated with the second domain is currently being executed by the processor. The shared worker acquires information associated with the second domain in response to one or more requests and stores acquired information associated with the second domain in the memory. The child web application receives a request from the parent web application for information associated with the second domain and in response to the request provides the requested information stored in the memory to the parent web application.

The details of one or more embodiments of the disclosure are set forth in the accompanying drawings and the description below. Other features objects and advantages of the disclosure will be apparent from the description and drawings and from the claims.

As depicted in computing device is coupled to a plurality of network server computing devices A E via network . In order to access information accessible from network servers A E one or more browser applications browsers may run on local computing device . Browser may be configured to run within a local operating system of computing device . Non limiting examples of known browser applications include Microsoft Explorer Apple Safari Mozilla Firefox and Google Chrome browser. Non limiting examples of known operating systems for desktop and or laptop computers may include Microsoft Vista Apple Snow Leopard or Linux. Examples of known operating systems for mobile devices e.g. smartphones netbooks etc. include Microsoft Windows Mobile Apple Iphone OS and Google Android mobile technology platform.

Browser may be configured to enable a user to manipulate access to information accessible via network . For example browser may provide a user with an ability to enter one or more uniform resource indicators URIs e.g. www.google.com in order to access a web application such as for example a hypertext markup language HTML document. A web application and or information used by a web application may be stored on one or more network servers A E. Browser may be configured to access web applications and or other information stored on network servers A E for presentation to a user of computing device among other uses.

Known browsers are typically configured such that each time a web application requests access to information available via network the web application must access the information from one or more network servers A E regardless of whether another web application has already accessed the same information. To reduce redundancy a particular web application may store accessed information e.g. an HTML document in a cache for use by the web application. However known browsers are only configured to use information stored in a cache for a single web application and a single instance of that web application e.g. a browser window or tab displaying a particular HTML document . If another web application or another instance of the same web application desires to access the same information already acquired the other web application must again access the information via one or more network servers A E.

Known browsers may further include limited capacity to share information between two web applications operating in the browser associated with the same domain via cookies. Cookies are typically stored in long term storage e.g. hard disc storage and are configured to only allow the sharing of limited information. A cookie is typically a text file that includes a series of name value pairs containing small bits of information. The access of cookie information may be time resource consuming and or difficult because to determine a desired cookie a web application must typically review all the cookies currently associated with the browser to access the desired information. Further cookie information cannot be requested by a web application and sent back to the web application in response to the request. Cookie information can only be accessed by the web browser searching through all available cookie information.

As an example of known browser access of network accessible information if a user opens a browser window to point to the URI www.google.com then the browser will access via network one or more network servers associated with www.google.com. The browser may acquire any information needed to display a page e.g. HTML page associated with www.google.com. That information may be stored in a cache and used again if a user navigates e.g. clicks on a link enters a search term within the www.google.com page. However if a user opens a new instantiation window or tab within browser of the URI associated with www.google.com or a different page also associated with the www.google.com domain e.g. www.google.com contacts the new instantiation does not have access to the cache in which the information previously acquired was stored and must re access the information from the one or more network servers A E.

The re accessing of information over a network may reduce a speed of browser web application performance. The requirement that already accessed information be re accessed may also limit a user s ability to perform tasks offline for example when computing device is experiencing a network outage or a slow connection. Thus this disclosure contemplates improvements in web browser implementation techniques that allow for the sharing of previously accessed network information among a plurality of web applications and or instantiations of web applications operating within a browser . More specifically this disclosure is directed to a shared worker web application A B that operates within a browser to satisfy requests for information for one or more other web applications operating within browser .

System includes a processor a memory a storage device and an input output component . Each of components and may be interconnected via a system bus for inter component communications. Processor may be configured to process instructions for execution within system . Processor may be a single threaded processor or may instead be a multi threaded processor configured to process various instructions in parallel simultaneously. Processor may be capable of processing instructions stored in memory or instructions stored on storage device . In one example processor may be configured to process instructions to cause a browser to operate on system consistent with techniques of this disclosure.

System further includes peripheral devices . Peripheral devices may include for example a monitor or other display device for presentation of visual information to a user of system . Peripheral devices may further include one or more input devices to enable a user to input data to system e.g. a keyboard mouse touchpad trackpad etc. Peripheral devices may further include printers or other devices to output information. In one example processor may be configured to process instructions to cause a visual depiction of a browser e.g. browser of to be displayed to a user via a display of peripheral devices . Browser may include a shared worker application as described herein. Browser may operate on a processor of any of devices A D depicted in .

Memory may be configured to store information within system during operation. Memory may be described as a computer readable storage medium. In some examples memory is a temporary memory meaning that a primary purpose of memory is not long term storage. Memory may also be described as a volatile memory meaning that memory does not maintain stored contents when the computer is turned off. Examples of volatile memories include random access memories RAM dynamic random access memories DRAM static random access memories SRAM and other forms of volatile memories known in the art.

In some examples memory may be used to store program instructions for execution by processor . In other examples memory may be used by software or applications running on system to temporarily store information during program execution.

Storage device may also be described as a computer readable storage medium. In contrast to memory storage device may be configured to store larger amounts of information than memory . Storage device may further be configured for long term storage of information. In some examples storage device is a non volatile memory component. In contrast with a volatile memory component a non volatile memory may store data whether or not power is supplied to storage device . Examples of non volatile storage devices include magnetic hard discs optical discs floppy discs Flash memories and other forms of electrically programmable memories EPROM or electrically eraseable and programmable EEPROM memories.

The techniques described herein may be implemented according to a computing system as described with respect to in any combination of digital electronic circuitry computer hardware firmware software or any combination of digital electronic circuitry computer hardware firmware software. For example any of the techniques described herein may be implemented via executable program instructions stored in a computer readable storage medium e.g. storage device memory that are readable by processor to cause processor to perform the techniques of this disclosure. In other examples some or all of the techniques of this disclosure may instead or in addition be implemented via dedicated hardware configured for a specific purpose e.g. a field programmable gate array FPGA application specific integrated circuit ASIC digital signal processor DSP or like device.

Browser further includes shared worker application . As discussed above according to known browser implementations each of web applications A and B are configured to individually communicate with one or more network servers A C to access information stored on network servers A C. For example web application A may be tab or window of a browser that displays a web document e.g. an HTML page associated with domain A. Likewise web application B may be a tab or window of a browser that displays a second web document also associated with domain A. Although depicts web application A operating within the same browser as web application B instead of operating in separate windows or tabs of browser web application A may execute in a first browser while web application B executes in a second browser. In one example the first browser may be first browser type e.g. Microsoft Explorer while the second browser is a second browser type e.g. Google Chrome . In a related example the first and second browser may be of the same type e.g. both Google Chrome browsers executing on the same computing device .

According to known browser implementations to access information available on network servers A C of domain A web application A must individually communicate with one or more of network servers A C regardless of whether web application B has already accessed the information. Such redundant information acquisition may result in a limitation to browser speed because computing resources e.g. processor memory as depicted in used to re access information cannot be used for other purposes.

Accordingly browser includes a shared worker application consistent with this disclosure. Shared worker application may be configured to operate as an information acquisition interface for web applications running on browser . Shared worker application may operate intra domain meaning that shared worker application may acquire and enable direct access to acquired information by web applications associated with the domain of shared worker application .

Shared worker may incorporate a top level application programming interface API . The API may be a defined set of commands used by one or more web applications A B to interface with shared worker for purposes of information acquisition and retrieval. For example the API may define top level commands to acquire information from one or more network servers A C. In one example where shared worker is implemented using the HTML specification for web communications a top level system call may be a post message system call specifying a URI of information that a web application desires access to. The post message call may direct shared worker to access information at the specified URI. The post message may also direct shared worker to return acquired information to the web application. The API may also define commands directing shared worker where to send acquired information. For example web application A may provide shared worker with a command to access information. The command or a separate command may direct the shared worker to supply the requested information to a different web application B.

Web applications A B may be configured to select among a number of options for requests to shared worker . In one example Web applications A B may communicate a request for information only if the information is located in a local memory . According to this example shared worker may return an error message if information is not stored in local memory . In another example web applications A B may be configured to communicate a request to shared worker to update all information currently stored in local memory . In another example web applications A B may be configured to communicate a message indicating that shared worker should access information via one or more network servers even if the information is currently stored in local memory .

Shared worker may be configured to receive a request for network accessible information from a first web application e.g. web application A . Shared worker may receive the request via a top level system call of shared worker . Shared worker may communicate with one or more network servers A C associated with the domain of the shared worker to access the requested information. If the requested information is found shared worker may return the requested information to the first web application A. If the requested information is not located shared worker may return an indication to the first web application A that the information cannot be found.

If the information is found the shared worker may also store at least a portion of the information accessed in response to the request for the first information in a local memory of a local computing device that browser is operating on. The local memory may be as described above with respect to a volatile memory of the local computing device . Local memory may typically be used for storage of program instructions or other data used by applications or software operating on the local computing device .

Shared worker may further maintain access to the information stored in local memory in response to the request from first web application A. For example shared worker may maintain a pointer e.g. one or more memory addresses indicating a location in memory where the information was stored.

Shared worker may receive from second web application B another request for information. Before accessing one or more of network servers A C in an attempt to access the information shared worker may be configured to review the contents of information stored in local memory to determine whether the stored information will satisfy the request from second web application B. If the request from second web application B can be satisfied based on information stored in local memory shared worker may provide stored information in response to the request. If the request cannot be satisfied based on information stored in local memory shared worker may acquire the requested information from one or more network servers A C return the acquired information to second web application B and store the acquired information in local memory for later use.

Shared worker may be configured as a long running application. For example shared worker may be configured to continue operating so long as web browser is operating on local computing device . Shared worker may further be considered long running in the sense that although shared worker is operative to access information for first web application A shared worker may be configured to continue running even after first web application A has been shut down for example by a user closing a browser window or tab in which first web application A was displayed to a user of browser . Thus unlike a web application cache as discussed above shared worker is configured to share information spanning a plurality of web applications and or multiple instantiations of a single web application.

Implementing a shared worker in a browser as depicted in may be advantageous for a number of reasons. For example shared worker may improve the speed and or efficiency of accessing network accessible information because particular information need only be acquired once via network . Such a configuration may be beneficial because access of information via a network is typically much slower than direct access to local memory . Shared worker as depicted in may also be advantageous because even if a web application A B for which information was originally accessed is shut down the information remains accessible the next time a web application desires access to at least a portion of already acquired information. As such a browser incorporating a shared worker may enable a user to perform at least some operations of web application A B when computing device is experiencing a slow network connection or no connection at all.

Shared worker may be particularly beneficial in the case of mobile web applications because mobile networks are typically inefficient at accessing information via a network. In addition because shared worker operates as common source for acquiring network accessible information shared worker may enable the simplification of requests for information which may further improve browser speeds when web applications A B attempt to handle error cases e.g. retrying to access information via network or when web application A B attempt to pre fetch data.

Shared worker application further includes server communications module . Server communications module hereinafter server module may be configured to communicate with one or more network servers A C via a network e.g. network in in order to access and or communicate information. For example web app module may upon receipt of a request for information from one or more of web applications A B communicate a message to server module to communicate with network servers A C to access the information. Once the information has been retrieved by server module server module may operate to provide the information to web app module . Web app module may then provide the acquired information to one or more of web applications A C.

As shown in shared worker application may further include a memory access module . As described above when server module has received information from one or more network servers A C in response to a request for information server module may forward received information to memory access module in addition to sending the information to web app module . Memory access module may be configured to store the received information for potential later use. Memory access module may store a pointer or other indication of stored information such that the information may be retrieved without further steps to locate the information in local memory .

As described above when web app module receives a request for information from one or more of web applications A C before providing a request message for the information to server module web app module may send an information verification request to memory access module . Memory access module may in response to the request verify whether some or all of the requested information is stored in local memory .

If at least some of the requested information is stored in local memory memory access module may return the stored information to web app module . If the request from one or more web applications A C may be satisfied by the information web app module may then return the stored information to one or more of web applications A C. If the request is only partially satisfied by the stored information web app module may or may not immediately return the partially satisfying information to one or more of web applications A C. In one example web app module may determine what information is not satisfied by the stored information and communicate to server communications module a request for less information than was initially requested by the one or more of web applications A C.

Upon receipt of the requested information if the information received from memory access module was not already returned to one or more of web applications A B web app module may combine the stored information with information received in response to the request to server module and return the combined information to one or more of web applications A C to satisfy the original request. Although the above description of the shared worker describes web app module initiating communications with memory access module to determine whether requested information is already stored in temporary memory server module may instead initiate such communications in response to receipt of a request for information from web app module .

As also depicted in memory access module of shared worker may in addition to local memory be coupled to local data storage of a computing device on which browser is operating. Memory access module may be configured to access local data storage in order to read or write data to local data storage . In one example upon shutdown of browser e.g. user initiated quitting of browser application program computing device shutdown or the like memory access module of shared worker may be configured to write information previously accessed from one or more network servers A C stored in local memory to one or more locations in local data storage . When browser is again initiated by a user or otherwise shared worker may begin running or may be initiated by another web application and shared worker may be configured to determine where in local data storage the previously acquired information is stored and load that information into local memory for use in response to requests for information from one or more web applications A C. This configuration may be beneficial because shared worker may be configured to better reduce information acquisition inefficiencies by sharing information not only across different web applications while browser is operating but by also sharing information between browser sessions such as when browser is shut down entirely.

As depicted in parent web application may include a child application generation module . Child application generation module may be configured to initiate communications with a shared worker application associated with domain B. Child application generation module may be configured to create a child web application e.g. child application in the example of . In some examples child web application may be an inline frame iframe application as is well known in the art. In other examples child web application may be a frame application or an xframe application as are also well known in the art. Other examples of child web applications are also contemplated and consistent with this disclosure. Child web application may or may not be visible to a user via browser .

As shown in parent web application may cause a generated child web application to be associated with a second domain different than a domain parent web application is associated with. In one example child application generation module of parent web application may generate child web application associated with domain A and execute commands within browser to cause child web application to be associated with the second domain domain B. Instead parent web application may directly generate child web application associated with domain B.

Once child web application has been generated and associated with domain B child web application may be operable to communicate with one or more web applications operating in browser . However due to security requirements of browser child web application may be prevented from communicating information associated with domain B to parent web application associated with domain A.

Child web application may include a shared worker verification module . Shared worker verification module may be operable to upon generation of child web application attempt to verify a shared worker of domain B. For example shared worker verification module may attempt to determine whether or not a shared worker is currently operating in browser associated with domain B. If shared worker is currently operating associated with domain B shared worker may establish a communications link with shared worker and remain active for further communications. If a shared worker is not currently operating associated with domain B shared worker verification module may be configured to instantiate or generate a shared worker associated with domain B. In one example child web application may generate a shared worker based on execution of one or more programs of browser in order to generate shared worker . In one non limiting example according to the HTML5 specification a shared worker may be instantiated by execution of a var worker new SharedWorker URI system call.

As depicted in in one example parent web application may have access to a cross domain XML library associated with domain A. As also shown in child web application may have access to a cross domain XML library associated with domain B. In various examples techniques of this disclosure related to cross domain communication as described herein may be implemented via operations defined by cross domain XML libraries and . For example either of cross domain XML libraries and may include executable program instructions that may be executed by a processor of a local computing device in order to for example generate child web application and or verify a shared worker operating associated with domain B as described above.

Once a shared worker and or a communications link to shared worker has been established by shared worker verification module as mentioned above due to browser security restrictions parent web application may be prevented from communicating with web applications associated with domain B including shared worker application e.g. to send shared worker a request to access information from one or more network servers D F associated with domain B. However web browser may be configured to allow specific types of cross domain communications in this configuration. For example communications between parent web application and child web application to establish secure cross domain communications may be allowed. In one example child web application may be configured to ignore all messages from parent web application not related to secure authentication of parent web application until parent web application has been authenticated.

Parent web application includes cross domain security module . Cross domain security module security module may be configured to communicate with an associated cross domain security module security module of child web application to securely authenticate communications between parent web application domain A and web applications associated with domain B including shared worker application . In various examples discussed below security module may be configured to receive information from security module and communicate that information to one or more network servers D F to determine whether or not parent web application should be allowed to securely communicate with one or more web applications e.g. shared worker application associated with domain B.

In one example security module may be configured to communicate to security module one or more identifications of parent web application and or domain A. Security module may communicate the received one or more identifications to a network server associated with domain B e.g. one or more of network servers D F network server D in the example of . In some examples network server D F may be a network server associated with domain B that is dedicated to authentication of secure communication requests. One or more of network servers D F may include a list of domains and or web applications for which secure communications should be authorized e.g. a whitelist . According to this example network server D F may be configured to compare the one or more identifications received from security module to the list of authorized domains and or web applications. If the one or more identifications are included in the list network server D may return an indication of authentication to security module .

In another example security module may itself include a list of a list of domains and or web applications for which secure communications should be authorized whitelist . According to this example security module may receive the one or more identifications of domain A and or parent web application and security module itself may perform a comparison to determine whether or not to enable cross domain communications with parent web application .

In one example the indication of authentication may indicate that any web application associated with domain A should be allowed to securely communicate with any web application associated with domain B. In other examples the indication of authentication indicates that parent web application should be allowed to securely communicate with any web application associated with domain B. In still another example the indication of authentication indicates that parent web application or any web application associated with domain A should be allowed to securely communicate specifically with shared worker associated with domain B.

In an example instead of authenticating cross domain communications as described above secure cross domain communications may be established based on security tokens. According to this example security module of parent web application may be configured to request from one or more network servers A C associated with domain A a security token for communicating with domain B. The one or more network servers A C associated with domain A may then communicate with one or more network servers D F associated with domain B to acquire the requested security token. One or more of network servers D F may then return to one or more network servers A C a secure token which is then sent to parent web application . Parent web application via cross domain security module send the received token to cross domain security module . Cross domain security module may then communicate the received token to the one or more network servers D F associated with domain A and network servers D F may determine whether the token is the same as the one it generated and sent to parent web application via one or more network servers A C as described above. If the security token matches the one that was originally sent the one or more network servers D F may return an indication of authentication that cross domain communications should be authorized. This indication may be returned to one or more of security modules and and may be used by security modules and to enable communications between parent web application and child web application . In one example the indication of authentication may indicate that any web application associated with domain A should be allowed to securely communicate with any web application associated with domain B. In other examples the indication of authentication indicates that parent web application should be allowed to securely communicate with any web application associated with domain B. In still another example the indication of authentication indicates that parent web application or any web application associated with domain A should be allowed to securely communicate specifically with shared worker associated with domain B.

In one example parent web application may include the security token as a query parameter for the uniform resource locator URL of the child web application. Communications may only be allowed between child web application and parent web application while the token is valid.

If security module receives an indication of authentication according to either authentication method described above that parent web application should be allowed to securely communicate with web applications associated with domain B parent web application and child web application may establish respective cross domain communications modules and . Cross domain communications modules and may be configured to establish a communications link between parent web application and child web application to exchange information.

In one example a communications link between communication modules and may remain established while browser is operating. In other examples the communications link may only remain established while at least one web application associated with domain A and or at least one web application associated with domain B is operating in browser .

Once a communications link between parent web application and shared worker has been established as discussed above parent web application associated with domain A may freely communicate with shared worker associated with domain B via child application . For example parent web application may communicate requests for information from network servers of domain B which are received by communications module of child web application and passed to shared worker . Shared worker may then acquire information from one or more network servers D F associated with domain B in response to the request store acquired information in local memory and return the acquired information to parent web application via child web application .

In another example parent web application may request information from one or more network locations associated with domain A acquire the information and communicate acquired information to shared worker application via child web application . Shared worker application may be configured to store the received information from domain A and provide the stored information to one or more web applications associated with either of domain A or domain B upon receiving a request for the information. If web applications in addition to parent web application operating in browser associated with domain A are also configured to securely communicate with shared worker shared worker application may provide stored information originally received from domain A and provide that information to other web applications associated with domain A.

The examples of cross domain shared worker communication described above with respect to may be advantageous for a number of reasons. For example by enabling web applications associated with domains other than a domain associated with a particular shared worker application to communicate with the shared worker application redundant data retrieval may be even further reduced or eliminated. As such browser efficiency to access network accessible information may be improved.

The example depicted in shows cross domain communications between a primary web application associated with a first domain domain A and a shared worker associated with a second domain domain B. In other examples not depicted in shared worker may be operable to enable cross domain communication between the primary web application associated with domain A and a second primary web application not shown associated with the domain that shared worker is associated with e.g. domain B . According to these examples shared worker may be operable to via child web application enable cross domain communication between primary web applications associated with different domains. In one such example a primary web application may be a calendaring web application e.g. www.google.com calendar associated with domain A. The calendaring web application may receive from a user an indication to send a calendar invitation email. An email web application e.g. www.gmail.com associated with a different domain e.g. domain B may via shared worker associated with domain B through child web application receive at least one indication of the calendar invitation email. Accordingly the primary web applications calendaring domain A email domain B may communicate status updates e.g. a calendar invitation email local to the device upon which is operating without accessing network to convey status updates.

In a second window or tab of browser browser window the user operates a second web application e.g. an HTML page with the URI www.google.com contacts associated with the domain www.google.com. Second web application may be configured to present a user with a list of the user s contacts which are stored on a network server associated with the www.google.com contacts domain. The user s contacts may include email instant messaging telephone numbers social networking identifiers or any other form of contacts for associates of a user. Second web application may enable a user to for example add a new contact name and contact addresses to a user s contact data stored on one or more network servers associated with the www.google.com domain. For purposes of this example assume a user has used second web application to enter an email address for a contact named John Smith. Once the user has created the new contact via second web application the new contact information may be provided to one or more network servers associated with www.google.com and stored for later use.

First web application may desire information available at one or more network servers associated with the www.google.com contacts domain. For example a user may desire to send an email to an associate for whom an email address is stored on one or more network servers associated with www.google.com. For purposes of this example assume that a user desires to send an email to the contact named John Smith. Since the user just entered the contact named John Smith using the second web application associated with www.google.com first web application does not currently have direct access to the updated information. A user may initiate the updating of information associated with www.google.com by selecting a button visually presented to a user via first web application titled update contacts list for example.

According to traditional browser implementations in order to acquire the information associated with the contact John Smith first web application would be required to send a request for the information to one or more network servers associated with the domain mail.google.com. In response to the request the one or more network servers associated with the domain mail.google.com may communicate with one or more network servers associated with the domain www.google.com gain secure access request the information receive the information and return the information to the first web application . Thus according to traditional browser implementations the first web application must access via the network information already accessed due to the previous operating of the second web application by the user . This approach may be inefficient as it results in network access of identical information a user s www.google.com contacts contact list repetitively.

However network information access may be improved according to techniques of this disclosure implementing a browser configured to run one or more shared worker applications . According to such techniques when the user first accessed www.google.com contacts instead of second web application directly accessing information associated with www.google.com from one or more network servers associated with www.google.com the second web application instead may send a request to shared worker . Shared worker may acquire the requested information from the one or more servers associated with www.google.com and store the information in a local memory of the user s computing device operating browser . Accordingly this information is now available for later use by other web applications associated with www.google.com e.g. a third browser window viewing the www.google.com HTML document or by other web applications not associated with www.google.com e.g. first web application associated with mail.google.com via the shared worker.

As discussed above first web application may desire to access information available via one or more network servers associated with domain www.google.com e.g. to update a contacts list for mail.google.com such that the user may email the contact named John Smith . According to techniques of this disclosure first web application may cause a child web application to be generated and associated with the domain www.google.com contacts. The child web application may then attempt to verify whether a shared worker is operating in browser associated with the domain www.google.com contacts. If it is which is the case here because as discussed above the user visited www.google.com contacts to update the user s contacts list then the child web application may create a communications link with the shared worker . If a shared worker is not operating in browser associated with the domain www.google.com child web application may generate or instantiate shared worker associated with the domain www.google.com.

The child web application may then attempt to authenticate first web application for secure communications. For example child web application may communicate an identification of first web application to one or more network servers associated with www.google.com contacts for comparison to a list white list of previously determined domains and or web application with which secure communications are allowed for web applications associated with www.google.com contacts. In another example child web application may authenticate secure communications via secure token exchange as described above with respect to .

Once secure communications have been established between first web application and the domain www.google.com contacts first web application may via child web application request information associated with www.google.com from shared worker associated with www.google.com. If shared worker has previously stored information that would satisfy the request shared worker may return the requested information to first web application via child web application which is the case here as a user recently visited www.google.com and via shared worker the information was acquired and stored in a local memory of the user s computing device . If however shared worker has not already previously stored information that would satisfy the request shared worker may access the information from one or more network servers associated with www.google.com return that information to first web application and store the acquired information in local memory for later use in response to requests for information associated with the domain www.google.com.

Thus according to the techniques of this disclosure information already accessed from one or more network locations in response to a request from one or more web applications may be re used by one or more other web applications. Browser speed may be improved based on the techniques described herein because the need for redundant network access to acquire information may be reduced or eliminated.

Although the examples discussed herein with respect to are directed to cross domain communications with a shared worker involving only two domains the concepts discussed herein are also applicable to any number of web applications and shared workers operating on different domains. By providing secure cross domain communication with a shared worker a plurality of web applications that previously would have needed to individually access via one or more network servers information may now access that information locally if a shared worker associated with that domain has already accessed the information and stored it in a local memory of the user s computing device. For example according to the example of if a third web application operating on a third domain e.g. www.maps.google.com desires access to a user s contacts e.g. to provide a user with an HTML page including a map showing home addresses of a user s contacts the third web application may also be configured to establish a communications link with a shared worker associated with the www.google.com domain and access that information without accessing or more network locations. Thus the more web applications sharing information via one or more shared workers the more information acquisition inefficiencies that can be reduced or eliminated.

If the shared worker application associated with the second domain is not operating in the browser the child web application may instantiate the shared worker application associated with the second domain . Once the shared worker application is instantiated or determined to be operating at the parent web application communicates with the shared worker application via the child web application . Communication between the parent web application and the shared worker may include the parent web application requesting information associated with the second domain from the shared worker. The shared worker may provide information to satisfy the request. If information is stored in a memory of the local computing device the shared worker may provide the information from the memory. If the information is not stored in the memory of the local computing device the shared worker may access the information from one or more network servers associated with the second domain and provide acquired information to satisfy the request.

Child web application may communicate with parent web application to verify parent web application for cross domain communications. Parent web application may send to child web application an authentication message. Child web application may grant cross domain communication access to parent web application if parent web application is authenticated. In one example parent web application may be authenticated according to a whitelist comparison as described above. In another example parent web application may be authenticated according to exchange of secure tokens as described above.

Once parent web application has been authenticated parent web application may be allowed to send messages to child web application. For example parent web application may send a Message A to child web application requesting information associated with the second domain. Child web application may receive Message A and forward Message A to shared worker . Shared worker may reply with a Response A which may be information acquired in response to the request of Message A e.g. network accessible information associated with the second domain. Child web application may receive Response A and forward response A to parent web application . Parent web application may then utilize received information of Response A.

In the example depicted in child web application may desire to establish a direct communication link to a shared worker running in browser and associated with domain A. In one example child web application may be configured to enable a communication link directly to shared worker application via a communication link already established between parent web application and child web application . However in another example child web application may be configured to generate one or more grandchild web applications . Like child web application grandchild web application may be generated and associated with domain A. Grandchild web application may be configured to verify whether or not a shared worker is currently running in browser associated with domain A. If shared worker is not currently running grandchild web application may be configured to generate instantiate shared worker application .

In one example grandchild web application may be configured to authenticate a secure communications link between child web application grandchild web application and shared worker application . Grandchild web application may be configured to establish the secure communications link via exchange of secure authentication tokens or by whitelist comparison as described above with respect to child web application in . In other examples grandchild web application may be configured to inherit authentication for secure inter domain communications between domain A and domain B previously established between parent web application and child web application .

As also shown in each of shared workers may be configured to store acquired data in a local memory of a computing device upon which browser is operating. In one such example as depicted in each shared worker operating on a computing device may allocate at least a portion of local memory for storage of acquired information. In the example of shared worker has allocated a portion A of local memory for storage and shared worker has allocated a portion B of local memory for storage.

The example techniques described with respect to may be advantageous for a number of reasons. For example by enabling direct cross domain communication between shared workers and themselves as opposed to cross domain communication between a shared worker application and a non shared worker web application e.g. parent web application more information can be potentially acquired stored locally and provided in response to cross domain requests between the shared workers.

In one example each time a shared worker is instantiated associated with a particular domain the shared worker may cause a child web application to be generated and associated with each domain for which web applications are currently operating in the browser. According to such a configuration each time any shared worker operating in browser acquires information in response to a request that information may be provided to other shared workers associated with different domains. Thus should any shared worker receive a request for information that has already been accessed by any shared worker associated with any domain the shared worker that received the request would already have the information available and stored in local memory. Thus these techniques may improve browser speed because the more network accessible data acquisition redundancy eliminated the more efficient a browser may be able to operate.

Also since more information is available to all of the shared workers should a user experience a network outage or slowdown at least some information would be available to allow the user to continue working. As an example according to the example illustrated in a user attempting to draft an email to John Smith would still be able to access the information acquired by www.google.com contacts in order to provide an address to the email because the information previously acquired from www.google.com contacts is stored in a local memory of the user s computing device. Thus the user may create the email save the email and send the email at a later time when the user has access to a functioning network connection.

The techniques described in this disclosure may be implemented at least in part in hardware software firmware or any combination thereof. For example various aspects of the described techniques may be implemented within one or more processors including one or more microprocessors digital signal processors DSPs application specific integrated circuits ASICs field programmable gate arrays FPGAs or any other equivalent integrated or discrete logic circuitry as well as any combinations of such components. The term processor or processing circuitry may generally refer to any of the foregoing logic circuitry alone or in combination with other logic circuitry or any other equivalent circuitry. A control unit including hardware may also perform one or more of the techniques of this disclosure.

Such hardware software and firmware may be implemented within the same device or within separate devices to support the various operations and functions described in this disclosure. In addition any of the described units modules or components may be implemented together or separately as discrete but interoperable logic devices. Depiction of different features as modules or units is intended to highlight different functional aspects and does not necessarily imply that such modules or units must be realized by separate hardware or software components. Rather functionality associated with one or more modules or units may be performed by separate hardware or software components or integrated within common or separate hardware or software components.

The techniques described in this disclosure may also be embodied or encoded in a computer readable medium such as a computer readable storage medium containing instructions. Instructions embedded or encoded in a computer readable medium may cause a programmable processor or other processor to perform the method e.g. when the instructions are executed. Computer readable storage media may include random access memory RAM read only memory ROM programmable read only memory PROM erasable programmable read only memory EPROM electronically erasable programmable read only memory EEPROM flash memory a hard disk a CD ROM a floppy disk a cassette magnetic media optical media or other computer readable media.

Various embodiments of the disclosure have been described. These and other embodiments are within the scope of the following claims.

