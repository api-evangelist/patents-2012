---

title: Messaging infrastructure integration
abstract: Techniques for integrating a messaging infrastructure with an existing application computing system include integrating an enterprise service bus (ESB) with an existing application computing system, the application computing system including one or more processing modules providing one or more functionalities; receiving, by the integrated ESB, one or more messages from one or more client computing devices communicatively coupled with the application computing system; managing, by the integrated ESB, the application computing system such that the application computing system communicates with the one or more client computing devices; and transferring, by the integrated ESB, the one or more received messages between the application computing system to one or more of the one or more client computing devices by utilizing the one or more processing modules and the one or more functionalities of the application computing system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09411665&OS=09411665&RS=09411665
owner: SAP SE
number: 09411665
owner_city: Walldorf
owner_country: DE
publication_date: 20120905
---
This disclosure relates to messaging infrastructure integration and more particularly integrating a messaging infrastructure with an existing application computing system.

Messaging infrastructures exchange messages between computing systems in a computing network via protocols like Simple Object Access Protocol SOAP JAVA Message Service JMS and Request for Comments RFC . Such message infrastructures typically are implemented as a separate system from the remaining computing system of a computing network thus increasing the total cost of ownership TCO to the customer.

The present disclosure relates to computer implemented methods software and systems for integrating a messaging infrastructure with an existing application computing system. In some embodiments an enterprise service bus ESB is integrated with an existing application computing system. In some examples the application computing system includes processing modules that provide one or more functionalities. The integrated ESB receives messages from client computing devices that are communicatively coupled with the application computing system. Furthermore the integrated ESB manages the application computing system such that the application computing system communicates with the client computing devices. The integrated ESB transfers the messages between the application computing system to the client computing devices by utilizing the processing modules and the functionalities of the application computing system.

A general embodiment of the subject matter described in this disclosure can be implemented in methods that include integrating an enterprise service bus ESB with an existing application computing system the application computing system including one or more processing modules providing one or more functionalities receiving by the integrated ESB one or more messages from one or more client computing devices communicatively coupled with the application computing system managing by the integrated ESB the application computing system such that the application computing system communicates with the one or more client computing devices and transferring by the integrated ESB the one or more received messages between the application computing system to one or more of the one or more client computing devices by utilizing the one or more processing modules and the one or more functionalities of the application computing system.

Other general embodiments include corresponding computer systems apparatus and computer programs recorded on one or more computer storage devices each configured to perform the actions of the methods. A system of one or more computers can be configured to perform operations to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

A first aspect combinable with any of the general embodiments includes integrating the ESB as a runtime system with the application computing system.

A second aspect combinable with any of the previous aspects includes the application computing system differing from an implementation of at least one of the one or more client computing devices.

A third aspect combinable with any of the previous aspects includes selecting one of the one or more client computing devices as the application computing system.

A fourth aspect combinable with any of the previous aspects includes the one or more processing modules including a persistency service module a secure store module an user management module a configuration management service module an operations module and a development repository module.

A fifth aspect combinable with any of the previous aspects further includes one or more functionalities of the development repository module includes communicating with an activation proxy of the ESB such that content to be executed by the ESB is transferred to the ESB.

A sixth aspect combinable with any of the previous aspects further includes one or more functionalities of the persistency service module includes communicating with a persistency proxy of the ESB to provide persistency of data.

A seventh aspect combinable with any of the previous aspects further includes one or more functionalities of the secure store module includes communicating with a secure store proxy of the ESB to provide encryption of data.

An eight aspect combinable with any of the previous aspects further includes one or more functionalities of the user management module service module includes communicating with an user management proxy of the ESB to provide management of user login information.

A ninth aspect combinable with any of the previous aspects further includes the one or more processing modules further including an on boarding infrastructure.

Various embodiments of a computing system according to the present disclosure may have one or more of the following features. For example the system facilitates minimizing the TCO of a computing system environment including a messaging infrastructure reducing a footprint of the computing system environment by reusing existing computing modules by the messaging infrastructure simplification of maintenance of the computing system environment that includes the messaging infrastructure reduction in redundant implementations of computing modules of the computing system e.g. by reusing existing computing modules minimizing of development of the computing system environment including the messaging infrastructure and reducing total cost of development TCD of the computing system environment including the messaging infrastructure.

The details of one or more embodiments of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

This disclosure generally describes computer implemented methods software and systems for integrating a messaging infrastructure with an existing application computing system. In some embodiments an enterprise service bus ESB is integrated with an existing application computing system. In some examples the application computing system includes processing modules that provide one or more functionalities. The integrated ESB receives messages from client computing devices that are communicatively coupled with the application computing system. Furthermore the integrated ESB manages the application computing system such that the application computing system communicates with the client computing devices. The integrated ESB transfers the messages between the application computing system to the client computing devices by utilizing the processing modules and the functionalities of the application computing system.

The application computing system is responsible for receiving application requests e.g. messages from one or more client applications associated with the client of the example distributed computing system and responding to the received requests by processing the requests by among other appropriate computing modules the ESB or modules under the control of the ESB and sending an appropriate response from the ESB back to the requesting client application. In addition to requests from the client requests associated with the ESB may also be sent from internal users external or third party customers other automated applications as well as any other appropriate entities individuals systems or computers. According to some implementations the application computing system may also include or be communicably coupled with an e mail server a web server a caching server a streaming data server and or other appropriate server. In some implementations the application computing system and related functionality may be provided in a cloud computing environment.

Specifically the ESB is integrated e.g. coupled with the existing application computing system such that the ESB can utilize e.g. leverage the functionality e.g. processing modules of the application computing system . The ESB manages the application computing system such that the application management system communicates with the clients . The ESB receives the messages from the clients and transfers the messages between the application computing system and the clients e.g. a client other than the client that transmitted the message utilizing the functionalities of the application computing system and or processing modules of the application computing system .

The application computing system includes an interface . Although illustrated as a single interface in two or more interfaces may be used according to particular needs desires or particular implementations of the example distributed computing system . The interface is used by the application computing system for communicating with other systems in a distributed environment including within the example distributed computing system connected to the network for example the client as well as other systems not illustrated communicably coupled to the network . Generally the interface comprises logic encoded in software and or hardware in an appropriate combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated example distributed computing system .

The application computing system includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular implementations of the example distributed computing system . Generally the processor executes instructions and manipulates data to perform the operations of the application computing system . Specifically the processor executes the functionality required to receive and respond to requests from the client .

The application computing system also includes a memory that holds data for the application computing system . Although illustrated as a single memory in two or more memories may be used according to particular needs desires or particular implementations of the example distributed computing system . While memory is illustrated as an integral component of the application computing system in some implementations the memory can be external to the application computing system and or the example distributed computing system .

The application computing system further includes a service layer . The service layer provides software services to the example distributed computing system . The functionality of the application computing system may be accessible for all service consumers using this service layer. For example in some implementations the client can utilize the service layer to communicate with the ESB . Software services provide reusable defined business functionalities through a defined interface. While illustrated as an integrated component of the application computing system in the example distributed computing system alternative implementations may illustrate the service layer as a stand alone component in relation to other components of the example distributed computing system . Moreover any or all parts of the service layer may be implemented as child or sub modules of another software module enterprise application or hardware module without departing from the scope of this disclosure.

The application computing system further includes an application programming interface API . In some implementations the API can be used to interface between the ESB and or one or more components of the application computing system or other components of the example distributed computing system both hardware and software. For example in some implementation the ESB can utilize the API to communicate with the client . The API may include specifications for routines data structures and object classes. The API may be either computer language independent or dependent and refer to a complete interface a single function or even a set of APIs. While illustrated as an integrated component of the application computing system in the example distributed computing system alternative implementations may illustrate the API as a stand alone component in relation to other components of the example distributed computing system . Moreover any or all parts of the API may be implemented as child or sub modules of another software module enterprise application or hardware module without departing from the scope of this disclosure.

The client may be any computing device operable to connect to or communicate with at least the application computing system and or the ESB using the network . In general the client comprises a computer operable to receive transmit process and store any appropriate data associated with the example distributed computing system . The illustrated client further includes a client application . The client application is any type of application that allows the client to request and view content on the client . In some implementations the client application can be and or include a web browser. In some implementations the client application can use parameters metadata and other information received at launch to access a particular set of data from the application computing system . Once a particular client application is launched a user may interactively process a task event or other information associated with the application computing system . Further although illustrated as a single client application the client application may be implemented as multiple client applications in the client .

The illustrated client further includes an interface a processor and a memory . The interface is used by the client for communicating with other systems in a distributed environment including within the example distributed computing system connected to the network for example the application computing system as well as other systems communicably coupled to the network not illustrated . The interface may also be consistent with the above described interface of the application computing system or other interfaces within the example distributed computing system . The processor may be consistent with the above described processor of the application computing system or other processors within the example distributed computing system . Specifically the processor executes instructions and manipulates data to perform the operations of the client including the functionality required to send requests to the application computing system and to receive and process responses from the application computing system . The memory may be consistent with the above described memory of the application computing system or other memories within the example distributed computing system but storing objects and or data associated with the purposes of the client .

Further the illustrated client includes a GUI . The GUI interfaces with at least a portion of the example distributed computing system for any suitable purpose including generating a visual representation of a web browser. In particular the GUI may be used to view and navigate various web pages located both internally and externally to the application computing system . Generally through the GUI a user of the application computing system is provided with an efficient and user friendly presentation of data provided by or communicated within the example distributed computing system .

There may be any number of clients associated with or external to the example distributed computing system . For example while the illustrated example distributed computing system includes one client communicably coupled to the application computing system using network alternative implementations of the example distributed computing system may include any number of clients suitable to the purposes of the example distributed computing system . Additionally there may also be one or more additional clients external to the illustrated portion of the example distributed computing system that are capable of interacting with the example distributed computing system using the network . Further the term client and user may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover while the client is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers.

The illustrated client is intended to encompass any computing device such as a desktop computer laptop notebook computer wireless data port smart phone personal data assistant PDA tablet computing device one or more processors within these devices or any other appropriate processing device. For example the client may comprise a computer that includes an input device such as a keypad touch screen or other device that can accept user information and an output device that conveys information associated with the operation of the application computing system or the client itself including digital data visual information or a GUI as shown with respect to the client . In some implementations the client includes an application server or an enterprise server.

The application computing system includes a master system that includes an operations module a services module and a development repository module . The services module further includes a configuration management module a user management module a secure store module and a persistency service module . Each of the modules includes or is associated with a respective proxy . Furthermore each of the modules is associated with or includes one or more functionalities described further below.

The application computing system further includes on boarding functionality not shown . Specifically in some embodiments each application that is executed by the application computing system requires on boarding functionality to assign rights e.g. privileges to each user and establish properties that are defined by the user.

The application computing system further includes the ESB . The ESB includes a runtime module an operation module and proxies . Specifically the ESB includes a configuration proxy a user management proxy a secure store proxy a persistency service proxy and an activation proxy . The proxies are in communication with the modules such that the ESB utilizes e.g. leverages the functionalities associated with the modules described further below. To that end the configuration proxy is in communication with the proxy of the configuration management module the user management proxy is in communication with the proxy of the user management module the secure store proxy is in communication with the proxy of the secure store module the persistency service proxy is in communication with the proxy of the persistency service module and the activation proxy is in communication with repository proxy . Furthermore the proxies are in communication with the runtime module . Additionally the operations module is in communication with the operations proxy of the operations module such that the ESB can also utilize the functionalities associated with the operations module of the application computing system . In some examples one or more of the communications between the master system i.e. the modules proxies of the master system and the ESB i.e. the modules proxies of the ESB can be one way communication e.g. asymmetric and or can be two way communication e.g. symmetric .

The operations system includes an operation module . The operations module provides configuration settings property settings system status etc. for maintaining execution of the application computing system .

The development environment system includes a resource development infrastructure and a designtime module . The designtime module further includes a repository proxy . The repository proxy is in communication with the resource development infrastructure .

Moreover the application computing system is in communication with the operations system and the development environment system . Specifically the operations module is in communication with the operations system and the ESB is in communication with the operations module . Furthermore the development repository is in communication with the resource development infrastructure and the ESB is in communication with the designtime . In some examples one or more of the communications between the application computing system and the operations system and between the application computing system and the development environment system can be one way communication e.g. asymmetric and or can be two way communication e.g. symmetric .

To that end in some examples a messaging infrastructure is integrated with an existing application computing system. Specifically the ESB is integrated with the application computing system . The application computing system includes processing modules such as modules . The modules provide one or more functionalities. The ESB receives one or more messages from one or more of the clients that are communicatively coupled with the application computing system . The ESB manages the application computing system such that the application computing system communicates with the client devices . The ESB transfers the messages between the application computing system to the clients utilizing the modules and the functionalities of the modules and the application computing system .

Specifically in some embodiments the ESB is integrated with the application computing system . Integrating the ESB with the application computing system can include embedding the ESB within the framework infrastructure of the application computing system such that the ESB utilizes reuses the services by the application computing system and plugs into the functionalities provided by the application computing system . In some examples integration of the ESB within the application computing system can occur at multiple levels such as repository integration hosting infrastructure on boarding process support and on premise on demand connectivity described further below. In some examples the ESB can be integrated within the application computing system via proxies or embedding. Specifically with respect to the proxies the ESB provides one or more proxies e.g. proxies that are specific to the application computing system and or the master system . Additionally with respect to embedding the ESB is embedded into the application computing system and or the master system . In some examples the application computing system includes or provides the processing modules that provide one or more functionalities.

To that end by integrating the ESB with the application computing system the total cost of ownership TCO and a total cost of development TCD of the environment e.g. the application computing system and the ESB and or the distributed computing system is minimized.

In some further embodiments integrating the ESB with the application computing system can further include integrating the ESB as a runtime system with the application computing system . In some examples the ESB can be implemented as a runtime system such that the ESB is represented as a software component to support execution of a computer program associated with the ESB by the application computing system i.e. utilizing the components e.g. the processor of the application computing system . In some examples integrating the ESB as a runtime system can include the ESB including the runtime module that is in communication with the proxies of the ESB . To that end by integrating the ESB as a runtime system with the application computing system services such as persistency of the runtime data e.g. the messages and or other data associated with the ESB secure store of the data and user management can be provided. In some examples the ESB can be executed e.g. run on a virtualized infrastructure e.g. a virtual machine of the application computing system .

In some embodiments the ESB receives one or more messages from one or more of the clients that are communicatively coupled with the application computing system . Specifically a particular client or two or more particular clients transmits a message or two or more messages to the ESB via the network . The message can include any representation of data such as text XML or binary. Additionally the message can be provided e.g. implemented in a first processing architecture language e.g. JAVA C . However in some embodiments one or more of the ESB and the application computing system can be implemented in a second processing architecture e.g. JAVA C that differs than the first processing architecture of the message.

In some further embodiments the application computing system or a module and or proxy of the application computing system receives the one or more message from the one or more clients . In some examples the application computing system transfers the received messages to the ESB .

In some further embodiments upon integration of the ESB with the application computing system the ESB provides an access point to initiate an instance of the ESB . The access point depends on among other things the use of the instance of the ESB . Specifically for on demand an application programming interface API is provided to initiate the instance of the ESB automatically and the information to access the instance of the ESB is returned and stored by the application computing system . Furthermore for on premise a script can be employed for the instance of the ESB and the information to employ the instance of the ESB is stored by the application computing system .

In some embodiments the ESB manages the application computing system such that the application computing system communicates with the clients . Specifically the ESB manages one or more of the processing modules of the application computing system via one or more of the proxies the operations modules and the runtime module . Based upon the received message from the particular client or two or more particular clients e.g. based on the specific processing architecture language associated with the received message the runtime module of the ESB communicates with one or more of the proxies . Based on the communication from the runtime module one or more of the proxies can communicate with the corresponding one or more of the proxies of the modules respectively.

The communication can include among other things instructions regarding processing of the message. To that end based on the communication from one or more of the proxies one or more of the modules can manage and or process the message accordingly e.g. based on the contents of the message and or based on the processing architecture associated with the message . Similarly the operations module can provide instructions to the operations module via the proxy regarding processing of the message. In some examples managing and or processing the message can include appropriately transferring the message described further below. To that end in some examples the ESB appropriately manages at least a portion of the application computing system e.g. the messaging infrastructure of the application computing system the such that the application computing communicates with the clients per the ESB and or instructions provided by the runtime module .

In some examples the processing architecture e.g. implementation of the application computing system differs from a processing architecture e.g. implementation of one or more of the clients . Thus in correlation to that mentioned above the message provided by on one or more of the clients is associated with the processing architecture e.g. the implementation of the client or clients providing the message while the application computing system is associated with a differing processing architecture e.g. implementation .

In some embodiments the ESB transfers the received message from the particular client or clients between the application computing system to one or more of the clients by utilizing the processing modules and the functionalities of the application computing system e.g. the functionalities of the modules . Specifically in some examples the ESB receives the message or messages from one or more particular clients as mentioned above and transfers the received message utilizing the application computing system and one or more modules and the associated functionalities described below of the modules to one or more other clients e.g. one or more clients other than the particular client s that provided e.g. initiated the message . In some examples the message includes or is associated with data that identifies or other ways associated with another client for which the message is intended for e.g. for transferring to . For example the identifying data associated with the message is based on the type of the message e.g. the programming architecture language . In some examples metadata of the message includes the identifying data.

In some examples as mentioned above the managing and or processing of the message by one or more of the modules can include transferring the message to the appropriate client e.g. the client that is the intended recipient of the message .

In some further embodiments the functionalities of the modules can facilitate transferring the message between the application computing system to the clients . Specifically the ESB can utilize e.g. leverage the modules and the associated functionalities of the modules to facilitate the aforementioned transferring. In some examples the ESB utilizes the functionalities of the persistency service module by communicating e.g. providing instructions with the proxy of the persistency service module via the persistency service proxy of the ESB . The persistency service module provides persistency directly or indirectly of data e.g. data associated with the message and or data associated with the ESB . By utilizing the persistency service module of the application computing system the ESB minimizes if not prevents potential inconsistencies of the data.

In some examples the ESB utilizes the functionalities of the secure store module by communicating e.g. providing instructions with the proxy of the secure store module via the secure store proxy of the ESB . The secure store module provides encryption of data e.g. data associated with the message and or data associated with the ESB . By utilizing the secure store module of the application computing system the ESB minimizes if not prevents potential security leaks associated with the data e.g. data associated with the message and or data associated with the ESB .

In some examples the ESB utilizes the functionalities of the user management module by communicating e.g. providing instructions with the proxy of the user management module via the user management proxy of the ESB . The user management module provides management of user log in information e.g. information username and or password associated with a user utilizing the application computing system and or one or more of the clients . Specifically by the ESB utilizing the log in information provided by the user management module a central place to handle the log in information is provided. Furthermore by the ESB utilizing the log in information provided by the user management a user provides log in information only once during execution of an application on one of the clients .

In some examples the ESB utilizes the functionalities of the configuration module by communicating e.g. providing instructions with the proxy of the configuration management module via the configuration proxy of the ESB . The configuration module provides means to obtain the configuration information from the application computing system . In some examples the configuration module is included by the secure store module or otherwise under the control of the secure store module .

Additionally in some examples the ESB can utilize the functionalities of the operations module by communicating e.g. providing instructions with the operations proxy of the operations module via the operation module . The operations module provides configuration settings property settings system status etc. for maintaining execution of the application computing system .

Additionally in some examples the ESB can utilize the functionalities of the development repository module by communicating e.g. providing instructions with the repository proxy via the activation proxy . The development repository facilitates transfer of content e.g. data that is executed e.g. processed by the ESB e.g. by utilizing one or more modules of the application computing system . Furthermore the content e.g. the data can be stored by the development repository .

In some further embodiments the ESB utilizes the functionalities of the on boarding functionality and on boarding metadata of the application computing system . In some examples the on boarding functionalities include or are associated with tenant information e.g. information associated with the clients . By providing such tenant information the ESB facilitates tenant aware isolation.

In some further embodiments the ESB further integrates with data associated with the application computing system by utilizing the functionalities provided by the application computing system e.g. the modules . Specifically the ESB utilizes the functionalities of a cloud connector infrastructure not shown . The cloud connector infrastructure is a component in the on premise landscape that establishes secure communication between on demand and on premise systems.

In some further embodiments one of the clients is selected as the application computing system . For example one of the clients is implemented as the application computing system . Thus the ESB is integrated with one of the clients . In some examples the ESB is integrated with two or more of the clients .

With respect to a portion of the application computing system and the ESB is shown. Specifically the master system of the application computing system is shown including a master platform service module e.g. an interface of the master system and the ESB includes a proxy e.g. one of the proxies in communication with a component e.g. a module . The proxy communicates with the master platform service module such that data is provided by the master system . The master platform service module is stable and mature to be utilized by the ESB . Additionally the consume pattern integration platform as illustrated by provides the aforementioned persistency secure store and the user management.

With respect to a portion of the application computing system and the ESB is shown. Specifically the master system of the application computing system is shown including a master system component in communication with a master platform proxy and the ESB includes a service module . The master system component proxy is communicatively coupled with the service module to integrate the ESB with the application computing system such that data is provided by the master system . The master platform utilizes the native interface e.g. the proxy that is utilizing non remote interfaces.

Turning now to is a flow chart for integrating a messaging infrastructure with an existing application computing system. For clarity of presentation the description that follows generally describes method in the context of . However it will be understood that method may be performed for example by any other suitable system environment software and hardware or a combination of systems environments software and hardware as appropriate. For example one or more of the application computing system the ESB the client or other computing device not illustrated can be used to execute method and obtain any data from the memory of the application computing system the ESB the client or the other computing device not illustrated .

In step an enterprise service bus ESB is integrated with an existing application computing system. For example the ESB is integrated with the application computing system . Integrating the ESB within the application computing system can include embedding the ESB within the framework infrastructure of the application computing system such that the ESB utilizes reuses the services provided by the application computing system and plugs into the functionalities provided by the application computing system . In some examples the ESB can be integrated within the application computing system via proxies or embedding. In some examples the application computing system includes or provides the processing modules that provide functionalities.

In some further embodiments integrating the ESB with the application computing system can further include integrating the ESB as a runtime system with the application computing system .

In step the integrated ESB receives one or more messages from one or more client computing devices communicatively coupled with the application computing system. For example the ESB receives one or more messages from one or more of the clients that are communicatively coupled with the application computing system . The message can include any representation of data such as text XML or binary.

In step the integrated ESB manages the application computing system such that the application computing system communicates with the one or more client computing devices. For example the ESB manages the application computing system such that the application computing system communicates with the clients . Specifically the ESB manages one or more of the processing modules of the application computing system via one or more of the proxies and the runtime module .

In step the integrated ESB transfers the one or more received messages between the application computing system to one or more of the one or more client computing devices by utilizing the one or more processing modules and the one or more functionalities of the application computing system. For example the ESB transfers the received message from the particular client or clients between the application computing system to one or more of the clients by utilizing the processing modules and the functionalities of the application computing system . Specifically in some examples the ESB receives the message or messages from one or more particular clients as mentioned above and transfers the received message utilizing the application computing system and one or more modules and the associated functionalities of the modules to one or more other clients e.g. one or more clients other than the particular client s that provided e.g. initiated the message .

In step one of the one or more client computing devices is selected as the application computing system. Specifically one of the clients is implemented as the application computing system . Thus the ESB is integrated with one of the clients .

Implementations of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry in tangibly embodied computer software or firmware in computer hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on a tangible non transitory program carrier for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage medium can be a machine readable storage device a machine readable storage substrate a random or serial access memory device or a combination of one or more of them.

The term data processing apparatus refers to data processing hardware and encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can also be or further include special purpose logic circuitry e.g. a central processing unit CPU a FPGA field programmable gate array or an ASIC application specific integrated circuit . In some implementations the data processing apparatus and or special purpose logic circuitry may be hardware based and or software based. The apparatus can optionally include code that creates an execution environment for computer programs e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them. The present disclosure contemplates the use of data processing apparatuses with or without conventional operating systems for example LINUX WINDOWS MAC OS ANDRIOD iOS or any other suitable conventional operating system.

A computer program which may also be referred to or described as a program software a software application a module a software module a script or code can be written in any form of programming language including compiled or interpreted languages or declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network. While portions of the programs illustrated in the various figures are shown as individual modules that implement the various features and functionality through various objects methods or other processes the programs may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. a central processing unit CPU a FPGA field programmable gate array or an ASIC application specific integrated circuit .

Computers suitable for the execution of a computer program include by way of example can be based on general or special purpose microprocessors or both or any other kind of central processing unit. Generally a central processing unit will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few.

Computer readable media transitory or non transitory as appropriate suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The memory may store various objects or data including caches classes frameworks applications backup data jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto. Additionally the memory may include any other appropriate data such as logs policies security or access data reporting files as well as others. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user implementations of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube LCD liquid crystal display or plasma monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

The term graphical user interface or GUI may be used in the singular or the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Therefore a GUI may represent any graphical user interface including but not limited to a web browser a touch screen or a command line interface CLI that processes information and efficiently presents the information results to the user. In general a GUI may include a plurality of user interface UI elements some or all associated with a web browser such as interactive fields pull down lists and buttons operable by the business suite user. These and other UI elements may be related to or represent the functions of the web browser.

Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN a wide area network WAN e.g. the Internet and a wireless local area network WLAN .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any invention or on the scope of what may be claimed but rather as descriptions of features that may be specific to particular implementations of particular inventions. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable sub combination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a sub combination or variation of a sub combination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system modules and components in the implementations described above should not be understood as requiring such separation in all implementations and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Particular implementations of the subject matter have been described. Other implementations alterations and permutations of the described implementations are within the scope of the following claims as will be apparent to those skilled in the art. For example the actions recited in the claims can be performed in a different order and still achieve desirable results.

Accordingly the above description of example implementations does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

