---

title: Distributed speaker adaptation
abstract: Automatic speech recognition (ASR) may be performed on received utterances. The ASR may be performed by an ASR module of a computing device (e.g., a client device). The ASR may include: generating feature vectors based on the utterances, updating the feature vectors based on feature-space speaker adaptation parameters, transcribing the utterances to text strings, and updating the feature-space speaker adaptation parameters based on the feature vectors. The transcriptions may be based, at least in part, on an acoustic model and the updated feature vectors. Updated speaker adaptation parameters may be received from another computing device and incorporated into the ASR module.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08805684&OS=08805684&RS=08805684
owner: Google Inc.
number: 08805684
owner_city: Mountain View
owner_country: US
publication_date: 20121017
---
This application is entitled to the benefit of provisional U.S. patent application Ser. No. 61 653 691 which is hereby incorporated by reference in its entirety.

Automatic speech recognition ASR technology can be used to map audio utterances to textual representations of those utterances. In some systems ASR involves comparing characteristics of the audio utterances to an acoustic model of human voice. However different speakers may exhibit different speech characteristics e.g. pitch accent tempo etc. . Consequently the acoustic model may not perform well for all speakers.

In a first example embodiment automatic speech recognition ASR may be performed by an ASR module. The ASR may be performed on received utterances where the ASR possibly includes generating feature vectors based on the utterances updating the feature vectors based on feature space speaker adaptation parameters transcribing the utterances to text strings and updating the feature space speaker adaptation parameters based on the feature vectors. The transcriptions may be based at least in part on an acoustic model and the updated feature vectors. Updated speaker adaptation parameters may be received and incorporated into the ASR module.

A second example embodiment may include a non transitory computer readable storage medium having stored thereon program instructions that upon execution by a computing device cause the computing device to perform operations in accordance with the first example embodiment.

A third example embodiment may include a computing device comprising at least an ASR module and a communication module that operate in accordance with the first example embodiment.

A fourth example embodiment may include a user device and a computing device. The user device may contain an ASR module wherein the ASR involves generating feature vectors based on the utterances updating the feature vectors based on feature space speaker adaptation parameters transcribing the utterances to text strings and updating the feature space speaker adaptation parameters based on the feature vectors. The transcriptions may be based at least in part on an acoustic model and the updated feature vectors. The computing device may receive representations of one or more of the utterances transcribed by the user device and transmit updated speaker adaptation parameters based on the representations to the user device. The user device may incorporate the updated speaker adaptation parameters into the ASR module.

These as well as other aspects advantages and alternatives will become apparent to those of ordinary skill in the art by reading the following detailed description with reference where appropriate to the accompanying drawings. Further it should be understood that the description provided in this summary section and elsewhere in this document is intended to illustrate the claimed subject matter by way of example and not by way of limitation.

ASR systems may include an acoustic model. The acoustic model may be speaker independent in that it can represent the temporal and or spectral characteristics of various sub word sounds e.g. phonemes of a hypothetical average speaker. However utterances from different speakers can have different qualities e.g. different frequencies tempos accents etc. . Thus an acoustic model may perform reasonably well for most speakers but may perform poorly when processing the utterances of some speakers. Particularly speakers whose voices exhibit temporal and or spectral characteristics that have not been appropriately represented in the acoustic model.

Speaker dependent acoustic models can also be developed. These acoustic models are tuned to the speech characteristics of a particular speaker. However developing a speaker dependent acoustic model may involve collecting a great deal of accurately transcribed utterances of this particular speaker. Thus despite the error rates of speaker dependent acoustic models being two to three times lower than those of speaker independent acoustic models speaker dependent acoustic models may not always be possible or practical to develop.

Speaker adaptation can also be used with acoustic models. At a high level speaker adaptation may involve the ASR system determining i the temporal and or spectral characteristics of a particular speaker s voice ii the difference between these characteristics and associated characteristics of the acoustic model and iii developing a transform that maps the temporal and or spectral characteristics of the particular speaker s voice to a representation that is closer to that of the acoustic model. This transform may then be applied to subsequent utterances received from the speaker and the acoustic model may be applied to the result. Developing the transform and applying it to map the speaker s vocal characteristics to an acoustic model can be referred to as feature space speaker adaptation.

Additionally or alternatively speaker adaptation may involve adjusting the acoustic model itself based on the characteristics of the particular speaker s voice. For instance once the ASR system has processed a sufficiently large set of samples of the speaker s utterances using an initial acoustic model a new acoustic model can be derived from these utterances. The new acoustic model may be used in place of the initial acoustic model. This approach can be referred to as model space speaker adaptation. Typically more samples of the speaker s utterances and more computing resources are used to perform model space speaker adaptation than are used to perform feature space speaker adaptation.

ASR systems can be deployed in various environments. Some ASR systems are employed in a user device e.g. a personal computer tablet or wireless communication device . A user speaks utterances into the device and the ASR system in the device transcribes the utterances into one or more text strings. Other ASR systems are server based. A user speaks an utterance into a client device and the client device transmits the utterance e.g. in an encoded form to a server device. Then the server device performs ASR on the utterance and transmits one or more text string mappings to the client device.

As the computing resources available to client devices continue to increase aspects of ASR systems may be distributed in various ways between client and server devices. Since most users of ASR systems expect ASR to occur in real time or near real time this distribution may occur in ways that leverage the computing resources available to each type of device.

For example a disadvantage of using server based ASR is that it uses communication between the client component and the server component. Thus for example when a cell phone operating as an ASR client function loses network connectivity the ASR function may be unavailable. Client based ASR can be usable even when the client device is unable to communicate with other devices. However client devices e.g. user devices often have limited computing resources which can affect the accuracy of the ASR. On the other hand server based ASR can leverage the computing resources available to server devices to perform ASR with higher accuracy e.g. a lower word error rate .

The embodiments described herein may be distributed in various ways between client and server devices. These embodiments can be deployed using client based ASR systems or server based ASR systems. Alternatively aspects of these embodiments can be distributed in various ways between client and server devices to leverage the advantages of each.

For example some variations of feature space speaker adaptation can be used without reliance on extensive computing resources. Thus in some embodiments feature space speaker adaptation may take place on client devices. Conversely other variations of feature space speaker adaptation may use more computing resources and therefore may take place on server devices. Similarly variations of model space speaker adaptation may use extensive computing resources and therefore may also take place on server devices.

Further some possible embodiments involve a client device performing feature space speaker adaptation locally to derive a set of feature space speaker adaptation parameters. But from time to time the client device may receive new feature space speaker adaptation parameters from a server device. Thus the client device may use its computing resources to perform feature space speaker adaptation while the server device uses its potentially more extensive computing resources to perform feature space speaker adaptation with greater accuracy. Therefore in order to potentially improve the quality of speaker adaptation the client device may replace its locally derived feature space speaker adaptation parameters with those from the server.

Likewise from time to time the client device may receive new model space speaker adaptation parameters e.g. a new acoustic model from a server device. The new acoustic model may be adapted to the speaker using the client device. The client device may replace its acoustic model with the new speaker dependent acoustic model. Then the client device may use the new acoustic model for ASR but may continue performing local feature space speaker adaptation.

The above processes and example embodiments thereof will be described in detail in Sections 5 and 6. However in order to further embody ASR system implementations the next three sections describe respectively example computing systems and devices that may support ASR systems an overview of ASR system components and functions and an overview of ASR system operation.

The methods devices and systems described herein can be implemented using client devices and or so called cloud based server devices. Under various aspects of this paradigm client devices such as mobile phones tablet computers and or desktop computers may offload some processing and storage responsibilities to remote server devices. At least some of the time these client services are able to communicate via a network such as the Internet with the server devices. As a result applications that operate on the client devices may also have a persistent server based component. Nonetheless it should be noted that at least some of the methods processes and techniques disclosed herein may be able to operate entirely on a client device or a server device.

Furthermore the server devices described herein may not necessarily be associated with a client server architecture and therefore may also be referred to as computing devices. Similarly the client devices described herein also may not necessarily be associated with a client server architecture and therefore may be interchangeably referred to as user devices. In some contexts client devices may also be referred to as computing devices. 

This section describes general system and device architectures for such client devices and server devices. However the methods devices and systems presented in the subsequent sections may operate under different paradigms as well. Thus the embodiments of this section are merely examples of how these methods devices and systems can be enabled.

Network may be for example the Internet or some other form of public or private Internet Protocol IP network. Thus client devices and may communicate using packet switching technologies. Nonetheless network may also incorporate at least some circuit switching technologies and client devices and may communicate via circuit switching alternatively or in addition to packet switching.

A server device may also communicate via network . Particularly server device may communicate with client devices and according to one or more network protocols and or application level protocols to facilitate the use of network based or cloud based computing on these client devices. Server device may include integrated data storage e.g. memory disk drives etc. and may also be able to access a separate server data storage . Communication between server device and server data storage may be direct via network or both direct and via network as illustrated in . Server data storage may store application data that is used to facilitate the operations of applications performed by client devices and and server device .

Although only three client devices one server device and one server data storage are shown in communication system may include any number of each of these components. For instance communication system may comprise millions of client devices thousands of server devices and or thousands of server data storages. Furthermore client devices may take on forms other than those in .

User interface may comprise user input devices such as a keyboard a keypad a touch screen a computer mouse a track ball a joystick and or other similar devices now known or later developed. User interface may also comprise user display devices such as one or more cathode ray tubes CRT liquid crystal displays LCD light emitting diodes LEDs displays using digital light processing DLP technology printers light bulbs and or other similar devices now known or later developed. Additionally user interface may be configured to generate audible output s via a speaker speaker jack audio output port audio output device earphones and or other similar devices now known or later developed. In some embodiments user interface may include software circuitry or another form of logic that can transmit data to and or receive data from external user input output devices.

Communication interface may include one or more wireless interfaces and or wireline interfaces that are configurable to communicate via a network such as network shown in . The wireless interfaces if present may include one or more wireless transceivers such as a BLUETOOTH transceiver a Wifi transceiver perhaps operating in accordance with an IEEE 802.11 standard e.g. 802.11b 802.11g 802.11n a WiMAX transceiver perhaps operating in accordance with an IEEE 802.16 standard a Long Term Evolution LTE transceiver perhaps operating in accordance with a 3rd Generation Partnership Project 3GPP standard and or other types of wireless transceivers configurable to communicate via local area or wide area wireless networks. The wireline interfaces if present may include one or more wireline transceivers such as an Ethernet transceiver a Universal Serial Bus USB transceiver or similar transceiver configurable to communicate via a twisted pair wire a coaxial cable a fiber optic link or other physical connection to a wireline device or network.

Processor may include one or more general purpose processors e.g. microprocessors and or one or more special purpose processors e.g. digital signal processors DSPs graphical processing units GPUs floating point processing units FPUs network processors or application specific integrated circuits ASICs . Processor may be configured to execute computer readable program instructions that are contained in data storage and or other instructions to carry out various functions described herein.

Thus data storage may include one or more non transitory computer readable storage media that can be read or accessed by processor . The one or more computer readable storage media may include volatile and or non volatile storage components such as optical magnetic organic or other memory or disc storage which can be integrated in whole or in part with processor . In some embodiments data storage may be implemented using a single physical device e.g. one optical magnetic organic or other memory or disc storage unit while in other embodiments data storage may be implemented using two or more physical devices.

Data storage may also include program data that can be used by processor to carry out functions described herein. In some embodiments data storage may include or have access to additional data storage components or devices e.g. cluster data storages described below .

Server device and server data storage device may store applications and application data at one or more places accessible via network . These places may be data centers containing numerous servers and storage devices. The exact physical location connectivity and configuration of server device and server data storage device may be unknown and or unimportant to client devices. Accordingly server device and server data storage device may be referred to as cloud based devices that are housed at various remote locations. One possible advantage of such cloud based computing is to offload processing and data storage from client devices thereby simplifying the design and requirements of these client devices.

In some embodiments server device and server data storage device may be a single computing device residing in a single data center. In other embodiments server device and server data storage device may include multiple computing devices in a data center or even multiple computing devices in multiple data centers where the data centers are located in diverse geographic locations. For example depicts each of server device and server data storage device potentially residing in a different physical location.

In some embodiments each of the server clusters A B and C may have an equal number of server devices an equal number of cluster data storages and an equal number of cluster routers. In other embodiments however some or all of the server clusters A B and C may have different numbers of server devices different numbers of cluster data storages and or different numbers of cluster routers. The number of server devices cluster data storages and cluster routers in each server cluster may depend on the computing task s and or applications assigned to each server cluster.

In the server cluster A for example server devices A can be configured to perform various computing tasks of server device . In one embodiment these computing tasks can be distributed among one or more of server devices A. Server devices B and C in server clusters B and C may be configured the same or similarly to server devices A in server cluster A. On the other hand in some embodiments server devices A B and C each may be configured to perform different functions. For example server devices A may be configured to perform one or more functions of server device and server devices B and server device C may be configured to perform functions of one or more other server devices. Similarly the functions of server data storage device can be dedicated to a single server cluster or spread across multiple server clusters.

Cluster data storages A B and C of the server clusters A B and C respectively may be data storage arrays that include disk array controllers configured to manage read and write access to groups of hard disk drives. The disk array controllers alone or in conjunction with their respective server devices may also be configured to manage backup or redundant copies of the data stored in cluster data storages to protect against disk drive failures or other types of failures that prevent one or more server devices from accessing one or more cluster data storages.

Similar to the manner in which the functions of server device and server data storage device can be distributed across server clusters A B and C various active portions and or backup redundant portions of these components can be distributed across cluster data storages A B and C. For example some cluster data storages A B and C may be configured to store backup versions of data stored in other cluster data storages A B and C.

Cluster routers A B and C in server clusters A B and C respectively may include networking equipment configured to provide internal and external communications for the server clusters. For example cluster routers A in server cluster A may include one or more packet switching and or routing devices configured to provide i network communications between server devices A and cluster data storage A via cluster network A and or ii network communications between the server cluster A and other devices via communication link A to network . Cluster routers B and C may include network equipment similar to cluster routers A and cluster routers B and C may perform networking functions for server clusters B and C that cluster routers A perform for server cluster A.

Additionally the configuration of cluster routers A B and C can be based at least in part on the data communication requirements of the server devices and cluster storage arrays the data communications capabilities of the network equipment in the cluster routers A B and C the latency and throughput of the local cluster networks A B C the latency throughput and cost of the wide area network connections A B and C and or other factors that may contribute to the cost speed fault tolerance resiliency efficiency and or other design goals of the system architecture.

As shown in client device may include a communication interface a user interface a processor and data storage all of which may be communicatively linked together by a system bus network or other connection mechanism .

Communication interface functions to allow client device to communicate using analog or digital modulation with other devices access networks and or transport networks. Thus communication interface may facilitate circuit switched and or packet switched communication such as POTS communication and or IP or other packetized communication. For instance communication interface may include a chipset and antenna arranged for wireless communication with a radio access network or an access point. Also communication interface may take the form of a wireline interface such as an Ethernet Token Ring or USB port. Communication interface may also take the form of a wireless interface such as a Wifi BLUETOOTH global positioning system GPS or wide area wireless interface e.g. WiMAX or LTE . However other forms of physical layer interfaces and other types of standard or proprietary communication protocols may be used over communication interface . Furthermore communication interface may comprise multiple physical communication interfaces e.g. a Wifi interface a BLUETOOTH interface and a wide area wireless interface .

User interface may function to allow client device to interact with a human or non human user such as to receive input from a user and to provide output to the user. Thus user interface may include input components such as a keypad keyboard touch sensitive or presence sensitive panel computer mouse trackball joystick microphone still camera and or video camera. User interface may also include one or more output components such as a display screen which for example may be combined with a presence sensitive panel CRT LCD LED a display using DLP technology printer light bulb and or other similar devices now known or later developed. User interface may also be configured to generate audible output s via a speaker speaker jack audio output port audio output device earphones and or other similar devices now known or later developed. In some embodiments user interface may include software circuitry or another form of logic that can transmit data to and or receive data from external user input output devices. Additionally or alternatively client device may support remote access from another device via communication interface or via another physical interface not shown .

Processor may comprise one or more general purpose processors e.g. microprocessors and or one or more special purpose processors e.g. DSPs GPUs FPUs network processors or ASICs . Data storage may include one or more volatile and or non volatile storage components such as magnetic optical flash or organic storage and may be integrated in whole or in part with processor . Data storage may include removable and or non removable components.

Processor may be capable of executing program instructions e.g. compiled or non compiled program logic and or machine code stored in data storage to carry out the various functions described herein. Therefore data storage may include a non transitory computer readable storage medium having stored thereon program instructions that upon execution by client device cause client device to carry out any of the methods processes or functions disclosed in this specification and or the accompanying drawings. The execution of program instructions by processor may result in processor using data .

By way of example program instructions may include an operating system e.g. an operating system kernel device driver s and or other modules and one or more application programs e.g. address book email web browsing social networking and or gaming applications installed on client device . Similarly data may include operating system data and application data . Operating system data may be accessible primarily to operating system and application data may be accessible primarily to one or more of application programs . Application data may be arranged in a file system that is visible to or hidden from a user of client device .

Application programs may communicate with operating system through one or more application programming interfaces APIs . These APIs may facilitate for instance application programs reading and or writing application data transmitting or receiving information via communication interface receiving or displaying information on user interface and so on.

In some vernaculars application programs may be referred to as apps for short. Additionally application programs may be downloadable to client device through one or more online application stores or application markets. However application programs can also be installed on client device in other ways such as via a web browser or through a physical interface e.g. a USB port on client device .

Before describing speaker adaptation in detail it may be beneficial to understand overall ASR system operation. Thus this section describes ASR systems in general including how the components of an ASR system may interact with one another in order to facilitate speech recognition and how some of these components may be trained.

It should be noted that the discussion in this section and the accompanying figures are presented for purposes of example. Other ASR system arrangements including different components different relationships between the components and or different processing may be possible.

Feature analysis module may receive utterance . This utterance may include an analog or digital representation of human speech and may possibly contain background noise as well. Feature analysis module may convert utterance to a sequence of one or more feature vectors . Each of feature vectors may include temporal and or spectral representations of the acoustic features of at least a portion of utterance . For instance a feature vector may include mel frequency cepstrum coefficients of such a portion.

The mel frequency cepstrum coefficients may represent the short term power spectrum of a portion of utterance . They may be based on for example a linear cosine transform of a log power spectrum on a nonlinear mel scale of frequency. A mel scale may be a scale of pitches subjectively perceived by listeners to be about equally distant from one another even though the actual frequencies of these pitches are not equally distant from one another. 

To derive these coefficients feature analysis module may sample and quantize utterance divide it into overlapping or non overlapping frames of s milliseconds and perform spectral analysis on the frames to derive the spectral components of each frame. Feature analysis module may further perform noise removal and convert the standard spectral coefficients to mel frequency cepstrum coefficients and then calculate first order and second order cepstral derivatives of the mel frequency cepstrum coefficients.

The first order cepstral coefficient derivatives may be calculated based on the slopes of linear regressions performed over windows of two or more consecutive frames. The second order cepstral coefficient derivatives may be calculated based on the slopes of linear regressions performed over windows of two or more consecutive sets of first order cepstral coefficient derivatives. However there may be other ways of calculating the first order and second order cepstral coefficient derivatives.

In some embodiments one or more frames of utterance may be represented by a feature vector of mel frequency cepstrum coefficients first order cepstral coefficient derivatives and second order cepstral coefficient derivatives. For example the feature vector may contain 13 coefficients 13 first order derivatives and 13 second order derivatives therefore having a length of 39. However feature vectors may use different combinations of features in other possible embodiments.

Pattern classification module may receive a sequence of feature vectors from feature analysis module and produce as output one or more text string transcriptions of utterance . Each transcription may be accompanied by a respective confidence level indicating an estimated likelihood that the transcription is correct e.g. 80 confidence 90 confidence etc. .

To produce this output pattern classification module may include or incorporate aspects of acoustic model dictionary and or language model . In some embodiments pattern classification module may also use a search graph that represents sequences of word or sub word acoustic features that appear in spoken utterances. The behavior of pattern classification module will be described below in the context of these modules.

Acoustic model may determine probabilities that a particular sequence of feature vectors were derived from particular sequence of spoken words and or sub word sounds. This may involve mapping sequences of feature vectors to one or more phonemes and then mapping sequences of phonemes to one or more words.

A phoneme may be considered to be the smallest segment of an utterance that encompasses a meaningful contrast with other segments of utterances. Thus a word typically includes one or more phonemes. For purposes of simplicity phonemes may be thought of as utterances of letters but this is not a perfect analogy as some phonemes may present multiple letters. An example phonemic spelling for the American English pronunciation of the word cat is k ae t consisting of the phonemes k ae and t . Another example phonemic spelling for the word dog is d aw g consisting of the phonemes d aw and g .

Different phonemic alphabets exist and these alphabets may have different textual representations for the various phonemes therein. For example the letter a may be represented by the phoneme ae for the sound in cat by the phoneme ey for the sound in ate and by the phoneme ah for the sound in beta. Other phonemic representations are possible.

Common phonemic alphabets for American English contain about 40 distinct phonemes. Each of these phonemes may be associated with a different distribution of feature vector values. Thus acoustic model may be able to estimate the phoneme s in a feature vector by comparing the feature vector to the distributions for each of the 40 phonemes and finding one or more phonemes that are most likely represented by the feature vector.

One way of doing so is through use of a hidden Markov model HMM . An HMM may model a system as a Markov process with unobserved i.e. hidden states. Each HMM state may be represented as a multivariate Gaussian distribution that characterizes the statistical behavior of the state. Additionally each state may also be associated with one or more state transitions that specify the probability of making a transition from the current state to another state.

When applied to an ASR system the combination of the multivariate Gaussian distribution and the state transitions for each state may define a time sequence of feature vectors over the duration of one or more phonemes. Alternatively or additionally the HMM may model the sequences of phonemes that define words. Thus some HMM based acoustic models may also consider phoneme context when a mapping a sequence of feature vectors to one or more words.

Acoustic model may represent a word by concatenating the respective 3 state HMMs for each phoneme in the word together with appropriate transitions. These concatenations may be performed based on information in dictionary as discussed below. In some implementations more or fewer states per phoneme may be used in an acoustic model.

An acoustic model may be trained using recordings of each phoneme in numerous contexts e.g. various words and sentences so that a representation for each of the phoneme s states can be obtained. These representations may encompass the multivariate Gaussian distributions discussed above.

In order to train the acoustic model a possibly large number of utterances containing spoken phonemes may each be associated with transcriptions. These utterances may be words sentences and so on and may be obtained from recordings of everyday speech or some other source. The transcriptions may be high accuracy automatic or manual human made text strings of the utterances.

The utterances may be segmented according to their respective transcriptions. For instance training of the acoustic models may involve segmenting the spoken strings into units e.g. using either a Baum Welch and or Viterbi alignment method and then using the segmented utterances to build distributions for each phoneme state.

Consequently as more data utterances and their associated transcriptions are used for training a more accurate acoustic model is expected to be produced. However even a well trained acoustic model may have limited accuracy when used for ASR in a domain for which it was not trained. For instance if an acoustic model is trained by utterances from a number of speakers of American English this acoustic model may perform well when used for ASR of American English but may be less accurate when used for ASR of e.g. British English.

Also if an acoustic model is trained using utterances from a number of speakers it will likely end up representing each phoneme as a statistical average of the pronunciation of this phoneme across all of the speakers. Thus an acoustic model trained in this fashion may represent the pronunciation and usage of a hypothetical average speaker rather than any particular speaker.

For purposes of simplicity throughout this specification and the accompanying drawings it is assumed that acoustic models represent phonemes as context dependent phonemic sounds. However acoustic models that use other types of representations are within the scope of the embodiments herein.

As noted above dictionary may define a pre established mapping between phonemes and words. This mapping may include a list of tens or hundreds of thousands of phoneme pattern to word mappings. Thus in some embodiments dictionary may include a lookup table such as Table 1. Table 1 illustrates how dictionary may list the phonemic sequences that pattern classification module uses for the words that the ASR system is attempting to recognize. Therefore dictionary may be used when developing the phonemic state representations of words that are illustrated by acoustic model .

Language model may assign probabilities to sequences of phonemes or words based on the likelihood of that sequence of phonemes or words occurring in an input utterance to the ASR system. Thus for example language model may define the conditional probability of w the nth word in a phrase transcribed from an utterance given the values of the pattern of n 1 previous words in the phrase. More formally language model may define 

In general a language model may operate on n grams which for example may be sequences of n phonemes or words that are represented in pattern classification module . In practice language models with values of n greater than 5 are rarely used because of their computational complexity and also because smaller n grams e.g. 3 grams which are also referred to as tri grams tend to yield acceptable results. In the example described below tri grams are used for purposes of illustration. Nonetheless any value of n may be may be used with the embodiments herein.

Language models may be trained through analysis of a corpus of text strings. This corpus may contain a large number of words e.g. hundreds thousands millions or more. These words may be derived from utterances spoken by users of an ASR system and or from written documents. For instance a language model can be based on the word patterns occurring in human speech written text e.g. emails web pages reports academic papers word processing documents etc. and so on.

From such a corpus tri gram probabilities can be estimated based on their respective number of appearances in the training corpus. In other words if C w w w is the number of occurrences of the word pattern w w win the corpus then

Thus a language model may be represented as a table of conditional probabilities. Table 2 illustrates a simple example of such a table that could form the basis of language model . Particularly Table 2 contains tri gram conditional probabilities.

For the 2 gram prefix cat and Table 2 indicates that based on the observed occurrences in the corpus 50 of the time the next 1 gram is dog. Likewise 35 of the time the next 1 gram is mouse 14 of the time the next 1 gram is bird and 1 of the time the next 1 gram is fiddle. Clearly in a fully trained ASR system the language model would contain many more entries and these entries would include more than just one 2 gram prefix.

Nonetheless using the observed frequencies of word patterns from a corpus of speech and or from other sources is not perfect as some acceptable tri grams may not appear in the corpus and may therefore be assigned a probability of zero. Consequently when given a zero probability tri gram at run time the language model may instead attempt to map this tri gram to a different tri gram associated with a non zero probability.

In order to reduce this likelihood the language model may be smoothed so that zero probability tri grams have small non zero probabilities and the probabilities of the tri grams in the corpus are reduced accordingly. In this way tri grams not found in the corpus can still be recognized by the language model.

Once acoustic model and language model are appropriately trained feature analysis model and pattern classification module may be used to perform ASR. Provided with an input utterance the ASR system can search the space of valid word sequences from the language model to find the word sequence with the maximum likelihood of having been spoken in the utterance. A challenge with doing so is that the size of the search space can be quite large and therefore performing this search may take an excessive amount computing resources e.g. processing time and memory utilization . Nonetheless there are some heuristic techniques that can be used to reduce the complexity of the search potentially by orders of magnitude.

For instance a finite state transducer FST can be used to compactly represent multiple phoneme patterns that map to a single word. Some words such as data either tomato and potato have multiple pronunciations. The phoneme sequences for these pronunciations can be represented in a single FST per word.

This process of creating efficient phoneme level FSTs can be carried out for each word in dictionary and the resulting word FSTs can be combined into sentence FSTs using the language model . Ultimately a very large network of states for phonemes words and sequences of words can be developed and represented in a compact search graph.

Each circle in search graph may represent a state associated with the processing of an input utterance that has been mapped to phonemes. For purposes of simplicity each phoneme in search graph is represented with a single state rather than multiple states. Also self transitions are omitted from search graph in order to streamline .

The states in search graph are named based on the current phoneme context of the input utterance using the format x y z to indicate that the current phoneme being considered y has a left context of the phoneme x and a right context of the phoneme z. In other words the state x y z indicates a point in processing an utterance in which the current phoneme being considered is y the previously phoneme in the utterance is x and the next phoneme in the utterance is z. The beginning of an utterance and the end of an utterance are represented by the character and also may be referred to as null phonemes.

Terminal states may be represented by a recognized word or phrase in quotes. Search graph includes five terminal states representing recognition of the words or phrases catapult cat and mouse cat and dog cat and cap. 

Transitions from one state to another may represent an observed ordering of phonemes in the corpus. For instance the state k ae represents the recognition of a k phoneme with a left context of a null phoneme and a right context of an ae phoneme. There are two transitions from the state k ae one for which the next phoneme the phoneme after the ae is a t and another for which the next phoneme is a p. 

Based on acoustic model dictionary and language model costs may be assigned to one or more of the states and or transitions. For example if a particular phoneme pattern is rare a transition to a state representing that phoneme pattern may have a higher cost than a transition to a state representing a more common phoneme pattern. Similarly the conditional probabilities from the language model see Table 2 for examples may also be used to assign costs to states and or transitions. For instance in Table 2 given a phrase with the words cat and the conditional probability of the next word in the phrase being dog is 0.5 while the conditional probability of the next word in the phrase being mouse is 0.35. Therefore the transition from state ae n d to state n d m may have a higher cost than the transition from state ae n d to state n d d. 

Search graph including any states transitions between states and associated costs therein may be used to estimate text string transcriptions for new input utterances. For example pattern classification module may determine a sequence of one or more words that match an input utterance based on search graph . Formally pattern classification module may attempt to find argmax where a is a stream of feature vectors derived from the input utterance P a w represents the probability of those feature vectors being produced by a word sequence w and P w is the probability assigned to w by language model . For example P w may be based on n gram conditional probabilities as discussed above as well as other factors. The function argmaxmay return the value of w that maximizes P a w P w .

To find text strings that may match utterance pattern classification module may attempt to find paths from an initial state in search graph to a terminal state in search graph based on feature vectors . This process may involve pattern classification module performing a breadth first search depth first search beam search or some other type of search on search graph . Pattern classification module may assign a total cost to one or more paths through search graph based on costs associated with the states and or transitions of associated with each path. Some of these costs may reflect for instance a confidence level that a particular segment of the utterance maps to a particular sequence of phonemes in the path.

As an example suppose that utterance is the phrase cat and dog. In a possible scenario pattern classification module would step through search graph phoneme by phoneme to find the path beginning with initial state k ae and ending with terminal state cat and dog. Pattern classification module may also find one or more additional paths through search graph . For example pattern classification module may also associate utterance with the path with initial state k ae and ending with terminal state cat and mouse and with the path with initial state k ae and ending with terminal state catapult. Nonetheless pattern classification module may assign a lower cost to the path with terminal state cat and dog than to other paths. Consequently the path with terminal state cat and dog may be selected as the best transcription for the input utterance.

It should be understood that ASR systems can operated in many different ways. The embodiments described above are presented for purposes of illustration and may not be the only way in which an ASR system operates.

As noted above acoustic models are typically trained with utterances from multiple speakers in multiple environments. As a result a given acoustic model may represent a hypothetical average speaker and might not perform well when applied to utterances from a speaker whose vocal characteristics differ from those of the hypothetical average speaker. Therefore ASR systems may attempt to compensate for these differences through speaker adaptation.

Speaker adaptation functions may be distributed in a variety of ways between client devices and server devices. depicts an example embodiment in which feature space speaker adaptation is performed in client devices and model space speaker adaptation is performed in server devices.

The client device in includes feature analysis module feature space speaker adaptation module and pattern classification module . Although depicted as a separate component feature space speaker adaptation module may be part of feature analysis module . Feature analysis model and pattern classification module may perform as described in the previous sections but may also include any additional functions described below. While depicts pattern classification model as part of the client device pattern classification module may be part of the server device instead.

The server device may include model space speaker adaptation module . The server device may also include other ASR system components such as but not limited to pattern classification module . If the server device includes pattern classification module the server device may include more extensive versions of the acoustic model dictionary and or language model than the versions of these ASR components located on the client device.

Although not shown in the server device may also include profiles e.g. information settings and or configurations for a number of individual speakers and or client devices. Each profile may include speaker adaptation parameters associated with an individual speaker and or client device.

Regardless at step feature analysis module may receive an utterance and produce one or more feature vectors based on the utterance. As noted above each of the feature vectors may be of a particular length e.g. n entries and may include representations of the temporal and or spectral acoustic features of at least a portion of the utterance.

At step feature space speaker adaptation module may the receive the feature vector s . At step feature space speaker adaptation module may update its feature space speaker adaptation parameters based on the received feature vector s .

In some embodiments the feature space speaker adaptation parameters may take the form of a matrix for instance an n n matrix. In order to perform speaker adaptation feature space speaker adaptation module may multiply each feature vector it receives by the matrix resulting in updated feature vectors. These updated feature vectors may be transmitted to pattern classification module .

Thus the acoustic model used by pattern classification module may be speaker independent and feature space speaker adaptation module may use the matrix to adapt speaker dependent feature vectors so that they are more likely to be properly recognized by the acoustic model. In some cases the matrix may be a diagonal matrix i.e. for each entry i j in the matrix the entry takes on a non zero value if i is equal to j but takes on a value of zero if i is not equal to j . Since at least half of the entries in a 2 2 or greater diagonal matrix contain zeroes less computation is required to multiply a feature vector by a diagonal matrix than a non diagonal matrix. Herein a non diagonal matrix refers to a matrix in which at least one entry for which i is not equal to j contains a non zero value. Thus the client device s possibly limited computational resources are conserved.

The feature space speaker adaptation parameters may be updated in a number of ways and though the use of a number of techniques. As one example a feature space maximum likelihood linear regression fMLLR technique may be used. Suppose that where O t is the feature vector at time t t is the adapted e.g. transformed feature vector at time t A is a matrix and b is a bias factor. This equation can be re written as where E t is the extended feature vector 1 O t and W b A . Thus W is a matrix that may represent the feature space speaker adaptation parameters and therefore W may be applied to feature vectors received from feature analysis module .

In order to update W any appropriate MLLR technique or another type of machine learning technique may be used. Particularly W may be estimated iteratively based on the k previously received feature vectors. Once W is determined it may be used with subsequent feature vectors. In some embodiments W may be updated once for each feature vector received. In other embodiments W may be updated after a group of one or more feature vectors is received.

At step the adapted feature vectors may be received at pattern classification module . At step pattern classification module may transcribe the adapted feature vectors to produce one or more possible text string transcriptions of the utterance. At least some of these text strings may be presented to a user of the client device as possible transcriptions of the utterance.

At step feature analysis module or some other module of the client device may transmit a set of recent utterances and or feature vectors derived from these utterances to model space speaker adaptation module . At step model space speaker adaptation module may update the acoustic model that it uses for the client device.

In some embodiments step may involve the server device updating a speaker dependent acoustic model that it has adapted for the client device. On the other hand possibly if the server device has not yet adapted an acoustic model for the client device step may involve the server device deriving a new acoustic model for the client device. Regardless of how it is generated the acoustic model for the client device may be a speaker dependent acoustic model that is adapted to the characteristics of a speaker that has used the client device for ASR.

At step the server device may transmit the new acoustic model to the client device. At step the client device may incorporate the new acoustic model into pattern classification module . In some implementations incorporating the new acoustic model may involve the client device replacing its existing acoustic model with the new acoustic model.

Alternatively or in addition to a server device deriving and transmitting updated model space feature adaptation parameters to a client device a server device may derive and transmit updated feature space speaker adaptation parameters to a client device. Given that server devices typically have more processing power than client devices feature space speaker adaptation performed by a server device may result in better speaker adaptation parameters than when feature space speaker adaptation is performed only on the client device.

At step feature analysis module may receive an utterance and produce one or more feature vectors based on the utterance. At step feature space speaker adaptation module may receive feature vector s .

At step feature space speaker adaptation module may update its feature space speaker adaptation parameters based on the received feature vector s . As was the case for the embodiment illustrated by the feature space speaker adaptation parameters may include a diagonal or non diagonal matrix that is used to adapt subsequent feature vector s .

At step feature space speaker adaptation module may transmit the adapted feature vector s to pattern classification module . Based on one or more sets of feature vectors that were derived from the utterance at step pattern classification module may transcribe these feature vectors to produce one or more possible text string transcriptions of the utterance. At least some of these text strings may be presented to a user of the client device as possible transcriptions of the utterance.

At step feature analysis module or some other module of the client device may transmit a set of recent utterances and or feature vectors derived from these utterances to feature space speaker adaptation module on the server device. At step feature space speaker adaptation module may update the server device s feature space speaker adaptation parameters for the client device.

These updated feature space speaker adaptation parameters may include a more extensive and or complicated set of feature space speaker adaptation parameters than those derived by the client device. For example the updated feature space speaker adaptation parameters derived by the server device may include an n n non diagonal matrix whereas those derived by the client device may include an n n diagonal matrix.

At step the server device may transmit updated feature space speaker adaptation parameters to the client device. At step the client device may incorporate the updated feature space speaker adaptation parameters into its feature space speaker adaptation module. In some implementations incorporating the updated feature space speaker adaptation parameters may involve the client device replacing its existing feature space speaker adaptation parameters with the updated feature space speaker adaptation parameters.

It should be understood that the embodiments illustrated in are for purposes of example. Other embodiments may be possible including variations that change the order and or content of the steps of . In some embodiments more or fewer steps may be employed. Further these embodiments may be combined in part or in whole. For instance a server device may adapt both acoustic models and feature space speaker adaptation parameters on behalf of client devices and transmit these updated model space and feature space speaker adaptation parameters to client devices.

At step an ASR module of a user device e.g. a client device may perform ASR on received utterances. The ASR module may include one or more of a feature analysis module a feature space speaker adaptation module and a pattern classification module. The ASR may include generating feature vectors based on the utterances updating the feature vectors based on feature space speaker adaptation parameters transcribing the utterances to text strings and updating the feature space speaker adaptation parameters based on the feature vectors. The transcriptions may be based at least in part on an acoustic model and the updated feature vectors.

At step the user device may receive updated speaker adaptation parameters from a computing device e.g. a server device . The updated speaker adaptation parameters received from the computing device may be based on a representation of at least some of utterances that the user device transmitted to the computing device. The representation of at least some of the utterances may include or consist of at least some of the feature vectors.

At step the user device may incorporate the updated speaker adaptation parameters into the ASR module.

In some implementations the feature space speaker adaptation parameters may be updated more frequently than the updated speaker adaptation parameters are incorporated into the ASR module. For instance the user device may be able to continuously or from time to time update the feature space speaker adaptation parameters without input from the computing device. However the computing device may transmit the updated speaker adaptation parameters e.g. a new acoustic model to the user device for incorporation into the ASR module less regularly. Particularly the computing device may transmit a new acoustic model to the user device once the computing device has received and processed a sufficient number of feature vectors from the user device to form the new acoustic model. The updated speaker adaptation parameters may include an updated acoustic model and incorporating the updated speaker adaptation parameters into the ASR module may involve replacing the acoustic model with the updated acoustic model. Alternatively or additionally the updated speaker adaptation parameters may include new feature space speaker adaptation parameters and incorporating the updated speaker adaptation parameters into the ASR module may involve replacing the updated feature space speaker adaptation parameters with the new feature space speaker adaptation parameters.

In some embodiments the feature space speaker adaptation parameters may include a first diagonal matrix and updating the feature vectors based on the feature space speaker adaptation parameters may involve applying the first diagonal matrix to the feature vectors. For instance the feature vectors may be multiplied by the first diagonal matrix. Further the updated feature space speaker adaptation parameters may include a second diagonal matrix and the second diagonal matrix may be applied to a first subsequently received feature vector. For instance the first subsequently received feature vector may be multiplied by the second diagonal matrix.

Also the new feature space speaker adaptation parameters may include a first non diagonal matrix and replacing the updated feature space speaker adaptation parameters with the new feature space speaker adaptation parameters may involve replacing the second diagonal matrix with the first non diagonal matrix. Then after replacing the second diagonal matrix with the first non diagonal matrix the non diagonal matrix may be applied to a second subsequently received feature vector and the non diagonal matrix may be updated based on the second subsequently received feature vector.

The above detailed description describes various features and functions of the disclosed systems devices and methods with reference to the accompanying figures. In the figures similar symbols typically identify similar components unless context indicates otherwise. The illustrative embodiments described in the detailed description figures and claims are not meant to be limiting. Other embodiments can be utilized and other changes can be made without departing from the spirit or scope of the subject matter presented herein. It will be readily understood that the aspects of the present disclosure as generally described herein and illustrated in the figures can be arranged substituted combined separated and designed in a wide variety of different configurations all of which are explicitly contemplated herein.

In situations in which the systems discussed here collect personal information about users or may make use of personal information the users may be provided with an opportunity to control whether programs or features collect user information e.g. information about a user s social network social actions or activities profession a user s preferences or a user s current location or to control whether and or how to receive content from the system that may be more relevant to the user. In addition certain data may be treated in one or more ways before it is stored or used so that personally identifiable information is removed. For example a user s identity may be treated so that no personally identifiable information can be determined for the user or a user s geographic location may be generalized where location information is obtained such as to a city ZIP code or state level so that a particular location of a user cannot be determined. Thus the user may have control over how information is collected about the user and used by the system.

With respect to any or all of the message flow diagrams scenarios and flow charts in the figures and as discussed herein each step block and or communication may represent a processing of information and or a transmission of information in accordance with example embodiments. Alternative embodiments are included within the scope of these example embodiments. In these alternative embodiments for example functions described as steps blocks transmissions communications requests responses and or messages may be executed out of order from that shown or discussed including in substantially concurrent or in reverse order depending on the functionality involved. Further more or fewer steps blocks and or functions may be used with any of the message flow diagrams scenarios and flow charts discussed herein and these message flow diagrams scenarios and flow charts may be combined with one another in part or in whole.

A step or block that represents a processing of information may correspond to circuitry that can be configured to perform the specific logical functions of a herein described method or technique. Alternatively or additionally a step or block that represents a processing of information may correspond to a module a segment or a portion of program code including related data . The program code may include one or more instructions executable by a processor for implementing specific logical functions or actions in the method or technique. The program code and or related data may be stored on any type of computer readable medium such as a storage device including a disk drive a hard drive or other storage media.

The computer readable medium may also include non transitory computer readable storage media such as computer readable media that stores data for short periods of time like register memory processor cache and or random access memory RAM . The computer readable media may also include non transitory computer readable storage media that stores program code and or data for longer periods of time such as secondary or persistent long term storage like read only memory ROM optical or magnetic disks and or compact disc read only memory CD ROM for example. The computer readable media may also be any other volatile or non volatile storage systems. A computer readable medium may be considered a computer readable storage medium for example or a tangible storage device.

Moreover a step or block that represents one or more information transmissions may correspond to information transmissions between software and or hardware modules in the same physical device. However other information transmissions may be between software modules and or hardware modules in different physical devices.

While various aspects and embodiments have been disclosed herein other aspects and embodiments will be apparent to those skilled in the art. The various aspects and embodiments disclosed herein are for purposes of illustration and are not intended to be limiting with the true scope and spirit being indicated by the following claims.

