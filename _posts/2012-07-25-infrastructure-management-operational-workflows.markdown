---

title: Infrastructure management operational workflows
abstract: Provided are techniques for the orchestration of workflows such as, but not limited to, computer system server, storage, virtualization and cloud infrastructure management operations and tasks. The disclosed orchestration techniques support non-scripted native representations of the workflows and the addition of new object types or operation sets or services. The disclosed orchestration techniques support atomicity and transactional semantics of workflows and include the ability to configure parameters for execution of workflow, which influences, for example, error, temporal and automation semantics.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08880674&OS=08880674&RS=08880674
owner: International Business Machines Corporation
number: 08880674
owner_city: Armonk
owner_country: US
publication_date: 20120725
---
The present application is a continuation and claims the benefit of the filing date of an application entitled Infrastructure Management Operational Workflows Ser. No. 13 168 998 filed Jun. 26 2011 assigned to the assignee of the present application and herein incorporated by reference.

The claimed subject matter relates generally to Information Technology IT infrastructure management and more specifically to orchestration of workflows such as computer system server storage network virtualization and cloud infrastructure resource management operations and tasks.

Provided are techniques for the orchestration of workflows such as but not limited to computer system server storage network virtualization and cloud infrastructure management operations and tasks. Today many system and enterprise management software applications support some form of orchestration which simply stated involves an execution of a sequence of simple or complex but typically arbitrary management operations which is termed as workflow. However most forms of orchestration do not support either non scripted native representations of the workflows or the addition of new object types or operation sets or services. Workflows in existing orchestration software are also typically hard coded and support invocation of arbitrary scripts or JAVA operations that are typically opaque to an orchestration engine. As a result existing orchestration cannot support either atomicity or transactional semantics of workflows. In addition existing orchestration software lacks the ability to configure parameters for execution of workflow which influences for example error temporal and automation semantics.

Relational database servers have implemented workflows using relational operations that are orchestrated and automated at runtime. Arbitrary declarative workflow specifications are supported by most relational database servers via structured query language SQL . For example new relational tables may be added at any time without requiring the fundamental model to be re coded. The procedural operational model for SQL is called Relational Algebra which is a set of well defined set of relational database operations that support composition of such operations.

Provided are techniques for but not limited to normalizing a set of infrastructure resource states to create a plurality of normalized infrastructure resource states normalizing a set of infrastructure resources to create a plurality of normalized infrastructure resources each normalized infrastructure resource corresponding to one of the normalized infrastructure resource states of the plurality of normalized infrastructure resource states normalizing a set of operations for acting on the normalized set of infrastructure resources to create a plurality of normalized operations wherein an input and an output corresponding to each normalized operation of the plurality of normalized operations has a defined type of a plurality of types composing the normalized operations into an operational sequence such that the output of each normalized operation becomes the input of another normalized operation wherein a defined type corresponding to each particular input matches a defined type corresponding to the corresponding output generating a workflow plan as a named composition of normalized operations with well defined operational semantics corresponding to the normalized infrastructure resource states normalized infrastructure resources and normalized operations and executing the workflow plan by evaluating and applying the well defined semantics to the operational sequence.

This summary is not intended as a comprehensive description of the claimed subject matter but rather is intended to provide a brief overview of some of the functionality associated therewith. Other systems methods functionality features and advantages of the claimed subject matter will be or will become apparent to one with skill in the art upon examination of the following figures and detailed description.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational actions to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Turning now to the figures is a block diagram of an example of a resource and infrastructure management architecture that may implement the claimed subject matter. A management server includes a central processing unit CPU or processor coupled to a monitor a keyboard and a pointing device or mouse which together facilitate human interaction with computing system and management server . Also included in management server and attached to management server is a computer readable storage medium CRSM which may either be incorporated into computing system i.e. an internal device or attached externally to management server by means of various commonly available connection devices such as but not limited to a universal serial bus USB port not shown . CRSM is illustrated storing an operating system and a Resource and Infrastructure Orchestration system RIOS that may implement the claimed subject matter.

It should be noted that a management server would typically include more elements than the illustrated components but for the sake of simplicity only the illustrated components are shown. RIOS is described in more detail below in conjunction with .

Management server is connected to a management network which may be among other options a local area network LAN or the Internet. A data server coupled to a CRSM and a CRSM is also communicatively coupled to a physical managed network . Management network provides connectivity between management server and logical and virtual resource and physical resources . Examples of devices that may be included in logical and virtual resources include but are not limited to a hypervisor HYVSR a virtual memory VM a storage volume SV a virtual disk VD a virtual LAN VLAN a virtual communication Ethernet or FC port or port a virtual managed network a virtual switch not shown or a virtual Ethernet bridge not shown . Examples of devices that may be included in physical resources include but are not limited to an application server managed network data server with attached CRSMs and a CRSM and a network adaptor NA . Physical systems and resources may be connected to each other via physical managed network such as but not limited to a LAN SAN or converged FCoE LAN.

Although in this example management server logical and virtual resources and physical resources are communicatively coupled via management network they could also be coupled through any number of communication mediums such as but not limited to a wide area network WAN not shown and direct wire not shown . Further it should be noted there are many possible resource and infrastructure management system configurations of which resource and infrastructure management architecture is only one simple example.

Resources and represent a pool of virtual or logical resource elements of physical devices or simply a pool. In the following examples the devices of pool are used as examples of computing resources or objects that may be orchestrated by means of the claimed technology. Collections of similar objects such as CRSM and are referred to as groups. Relationships among different objects including groups such as the relationships among server and CRSM and are referred to as infrastructures or fabrics. A dotted line indicates that logical and virtual resources represent various configurations of physical resources .

In addition in the following example the disclosed techniques are implemented by RIOS executing on management server . It should be understood that many types of resources both hardware and software and systems may benefit form the claimed subject matter but for the sake simplicity the examples are limited to the types and numbers of components described above.

As the Inventors herein have realized a Resource and Infrastructure Management operational workflow can be written as a composition resource management operations with well defined operational semantics and flexible enough to support any hardware and or software infrastructure resource including for example servers storage networks virtualization elements and combinations thereof including cloud elements.

Throughout the Specification a resource may be an individual atomic or composite objects physical logical or virtual computing objects networking storage or virtualization objects. Typically a resource may exist independently and or may be provisioned independently. Examples of physical resources include server systems storage systems network switches disk drives adapters and so on. Examples of logical and virtual resources include virtual machines storage volumes files virtual disks and so on. An atomic resource is one that cannot be divided. In a hierarchical definition a resource may be a composite unit comprising other sub resources. One examples of a composite resource type is a BladeCenter chassis. A group may be any collection of homogeneous or heterogeneous resources. Examples of groups include server pool multi pathing group HA redundant pair of network adapters virtual machine collection and so on. A fabric is defined herein as an aggregate of typically logical connections between resources or groups of resources. Examples of fabrics include VLANs FC SAN zones and so on.

In order to compose resource management operations the resource and infrastructure operational model supports the following 

RIOS also includes an orchestration engine that stores executable logic for the implementation of aspects of the claimed subject matter including the definition of workflows. A Resource Operation Execution Logic ROEL stores executable logic that implements a defined workflow. A runtime stores executable logic for the implementation of aspects of RIOS not handled by orchestration engine and ROEL .

A management database is a computer readable storage medium that stores workflow templates infrastructure objects and modeled infrastructure objects . Workflow templates Infrastructure object and infrastructure objects may store parameters such as but not limited to definitions of runtime semantics and definitions of normalized resources resource states and operations. Such definitions may be composed into libraries that are extendable by the addition of additional definitions of runtime semantics and definitions of normalized resources resource states and operations. Infrastructure objects represents potential resources that may be discovered by discovery execution logic at remote locations such as over the Internet. Functionality associated with components and are explained in more detail below in conjunction with .

The three states include a Static Object Universe SOU  a Static Infrastructure Universe SIU  and a Dynamic Infrastructure Universe DIU  . Static Object Universe SOU  is the universe of undeployed manageable resource and system objects known to a particular embodiment of the claimed subject matter. SOU  illustrates objects in an undeployed state i.e. with no defined relationships. Objects in this universe are static and in a restful state. Static Infrastructure Universe SIU is the universe of all Deployed connected resources and composite resources known to a particular embodiment of the claimed subject matter. In this universe the relationships and connections between resources are explicit. In this example SIU  illustrates objects in a deployed state and some relationships among objects . In general objects and the corresponding relationships define an infrastructure such as SIU  . However infrastructure resources in this universe are still static and not performing any useful function Dynamic Infrastructure Universe DIU  is the universe of Activated infrastructure resources that are deployed to perform some useful function in an interconnected way and known to a running computer program embodiment of this invention. DIU  illustrates objects in an activated state with some relationships . Because DIU  defines both objects and relationships. DIU  represents a dynamic infrastructure.

A core set of infrastructure resources may be broadly classified into physical resources see e.g. systems or platforms disk drives etc. logical resources see e.g. virtual machines storage volumes virtual disks ports etc. groups e.g. disk drive arrays server system pools multi pathing group etc. and fabrics e.g. VLANs FC SAN etc . The rest of the types are composite objects on these basic resource types and in turn represent higher order resources groups and or fabrics. In this example infrastructure resource states are reduced to the 3 key states Undeployed Deployed and Activated. Undeployed implies not usable or exploitable. Deployed implies usable or exploitable. Activated implies being used or exploited at any point in time. For example a server in a reserve pool is undeployed a storage volume attached to as server is deployed and a virtual memory VM that has been started up is in activated state. In some cases the move from deployed to activated may be a no operation or nop but this normalized view across all resources facilitates the definition of an operational workflow. In addition resources may have other states and status in which an administrator is interested they maybe handled as before and are not critical to the operational workflow model.

Infrastructure management operations are strongly typed in that they have well defined Inputs Outputs and Operation Semantics. Inputs are well defined resource or group or fabric types. Some examples include but are not limited to 

Operations are strongly typed as follows. One embodiment of the signatures for the operations in this calculus are described below using a procedural programming language flavor such as C C or JAVA. Unary operations of the calculus have the following signature 

The exact implementation of the application programming interface above depends on the implementation. In general regardless of whether an object is carried around as a reference type and returned as a reference type is up to the implementation. Implementations may vary depending on the language used for implementation. Other embodiments are possible within procedural languages functional languages such as Scheme or logical calculus languages which are beyond the scope of this invention . With the resource state typing and infrastructure management operations being normalized the calculus comprises an enumerated normalized set of operations otherwise termed as a library of operations . In general a core subset of the enumerated set is expected to apply to all resources groups and fabrics. For example Create Delete Deploy Undeploy Activate and De activate are expected to be applicable to all logical resources regardless of whether they are server storage or network resources. It is possible for as subset of the calculus to be applicable to only a subset of the resources. For example Backup and Archive may apply only to storage resource objects. The calculus of operations is not a static and fixed set additional operations discovered subsequently can be added to the set as long as it follows the constraints posed by this model.

Create creates a static database object and possibly a memory object that represents a manageable and provisionable resource using the attributes defined ports objects and constraints presented in a best practices template for the resource object. Create is generally used for static creation of a logical resource object. For example a cluster is a composite resource object that may be statically created. See Reform which is a dynamic re formation of a cluster and applies only to clusters. There may be other add create discover delete or remove operations where end point instances or group instances are added or created within the database or runtime. These operations do not have any defined input end point or group. Any end point group specification is performed as part of the constraints for the operation see below . The output of these operations is an end point or a group.

Delete deletes an in memory and or database object. Delete takes an end point or group as input and return NULL as output. With respect to Get filter criteria may be specified in a SemanticsObject and if the filter when applied turns out to be TRUE then for resources platforms fabrics or groups the corresponding objects are returned. Set performs configuration state changing etc operations on the object. Copy typically applies to logical resources and causes a clone with a new object ID to be created. In this example object has been copied to create a new object .

Update is a typically a nop for all but for physical Platform objects also typically termed as systems or devices . If an object represents an updatable software or hardware platform that requires a systems software or firmware update then Update is applicable. Transform is typically used to transform the type of an object. In this example object has been transformed to a new object .

A Deploy typically refers to the deployment of an atomic or composite resource object. An Undeploy typically refers to the removal of a resource object from the infrastructure. An Activate typically refers to activating a resource object to become useful in the environment if applicable otherwise Activate serves as a nop. A De activate refers to de activating a resource object if applicable otherwise De activate serves as a nop.

Add Member adds an object or a sub component to a group or composite object. For a composite object the semantics may provide additional constraints on where to add the member. Drop Member drops or removes a member from a group or composite object. Get Member applies filter criteria in the SemanticsObject and if the filter when applied turns out to be TRUE then if a singular object satisfies the filter the member object is returned else NULL or NULL GROUP is returned. NULL GROUP implies more than one object was returned. Set Member involves if applicable modifying the state of a particular member that matches a filter e.g. an identifier in the group or composite object. A Transfer moves an object from one universe to another. In this example Transfer is illustrated moving both a dynamic object and a deployed object between Universe  and Universe  .

In addition there may be a GetSubGroup not shown that applies to sub groupings or sub composite objects within composite objects respectively. Those member objects that result in a filter being TRUE are returned as a group of the same type as the original group If the original object was a heterogeneous group and the filter retained only homogeneous objects the returned group is still a heterogeneous group of the same type as the original group. There may also be a SetSubGroup not shown used to set the states of all members in the group that satisfy a filter criteria. A FormGroup not shown is used when a grouping or composite object supports a dynamic ability to form the group example clusters supports dynamic reformation of the group . A BreakGroup not shown is used to decompose the group object e.g. to break a cluster apart.

In a similar fashion outputs corresponding to Operation . and an Optional Operation . provide inputs to an Operation . outputs corresponding to Operation . and an Optional Operation . provide inputs to an Operation . and outputs corresponding to Operation . and an Optional Operation . provide inputs to an Operation . . Finally outputs corresponding to Operation . and an Optional Operation . provide inputs to a Root Operation . . A sequence of named workflow operations such as workflow and additional operational workflows not shown may be applied with the inputs and outputs of the operations as defined above in what is referred to an ordered composition.

Examples of operations that may support validation with respect to error semantics include ValidateSemantics and ValidateWorkflow . Operations that support blocking semantics include 

Process starts in a Begin Setup RIOS block and proceeds immediately to a Normalize States block . During processing associated with block a user or administrator defines a set of normalized infrastructure resource states see . As explained above in conjunction with normalizing the states of infrastructure resources whether basic resource objects or groupings or composite objects involving higher level objects helps to reduce the total set of states adjectives e.g. Undeployed Deployed etc and also to classify the resource management operation space. This applies to all infrastructure resource elements such as but not limited to servers networks and virtualization resources.

During a Normalize Resources block a user or administrator of RIOS classifies the resources in resource and infrastructure management architecture according to the normalized infrastructure resource states defined during processing associated with block . As explained above normalizing the infrastructure resource space into a few basic types e.g. resource group fabric etc helps reduce the total number of nouns involved which in effect helps normalize the infrastructure management operations. In addition resource objects may be defined as atomic objects i.e. indivisible e.g. disk drive storage volume virtual machine adaptor or composite objects e.g. BladeCenter chassis comprising multiple modules chassis blades PSU etc. .

During processing associated with a Normalize operations block a user or administrator defines operations that may be executed with respect to the normalized set of resources generated during processing associated with block . As explained above infrastructure management operations need to be strongly typed that is their operation schema needs to be very well defined e.g. inputs outputs error semantics . The operations need to be normalized via reduction of the total number of verbs in the vocabulary as well as normalizing the signature of the operation itself. Each operation is typically either a unary single input or binary operation dual input although occasionally more inputs may be employed. Typically the same rules that apply to binary inputs apply to operations with three or more inputs.

During a Store Normalized States Resources and Operations block the information generated during processing associated with blocks and is stored in management DB for use during execution of RIOS see process . It should be understood information generated and stored during processing associated with process may be updated augmented extended etc. based upon but not limited to such conditions as new information regarding architecture or best practices that emerge during execution of RIOS . Finally control proceeds to an End Setup RIOS block in which process is complete.

Processing associated with process starts in a Begin Implement Workflow block and proceeds immediately to a Retrieve Normalized States Resources and Operations block . During processing associated with block data defining normalized states see resources see and operations see are retrieved from DB . During processing associated with a Compose Operation block an administrator defines a particular operation in terms of states resources and operations retrieved during processing associated with block . During processing associated with an Add Operation to Sequence block the operation composed during block is inserted in a workflow such as workflow .

During processing associated with a More Operations block the administrator determines whether or not the workflow being assembled is complete. If not control returns to Compose Operation block and processing continues as describe above with the administrator composing any additional operations. If a determination is made that the workflow being assembled is complete control proceeds to a Generate Workflow block see . During block the workflow is indicated as ready for execution and during processing associated with an Execute Workflow block the workflow composed and assembled during processing associated with blocks and is executed.

It should be noted that there is no requirement that a defined workflow generated in accordance with the disclosed technology be executed immediately once the composition and assembly is complete. Rather the defined workflow may be stored in a CRSM and executed at multiple times in the future. In addition a defined workflow may be incorporated modified or incorporated into another workflow. Finally process processed to an End Implement Workflow block during which process is complete.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

