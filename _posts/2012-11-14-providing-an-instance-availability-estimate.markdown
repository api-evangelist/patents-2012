---

title: Providing an instance availability estimate
abstract: Data defining the actual time to availability for various configurations of instances of computing resources is collected. The collected data can be utilized to provide an estimate of the expected time to availability for a specific configuration of an instance of a computing resource in response to receiving a request to create a new instance of the computing resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09256452&OS=09256452&RS=09256452
owner: Amazon Technologies, Inc.
number: 09256452
owner_city: Seattle
owner_country: US
publication_date: 20121114
---
Network based services exist that allow customers to purchase and utilize instances of computing resources instances such as virtual machine instances on a permanent or as needed basis. When a customer requests to instantiate a new instance of a computing resource there is typically a delay between the time when the customer submits the request and the time that the instance actually becomes available for use by the customer. During the delay time the customer is typically presented with an indication only that their instance will be ready for use soon. This type of non specific indication regarding the availability of an instance can however be frustrating for a customer.

The following detailed description is directed to technologies for providing an instance availability estimate. Utilizing the technologies described herein an estimate of the time to availability for an instance of a computing resource can be provided. For example a customer of a distributed execution environment might request to launch a new virtual machine instance. Utilizing the mechanisms provided herein an estimate of the time to availability for the new virtual machine instance could be presented to the customer while the customer waits for the new virtual machine instance to become available. Estimates of the time to availability for instances of other types of computing resources might also be provided in a similar manner.

According to one aspect presented herein a computer implemented mechanism is disclosed for providing an instance availability estimate. In one implementation the mechanism operates in conjunction with a network based distributed execution environment in which customers can purchase and utilize instances of computing resources such as virtual machine instances on a permanent or as needed basis. This service may offer instances of computing resources for purchase in various configurations. For example the service might offer virtual machine instances available for purchase and use that have many different configurations of processor capabilities main memory disk storage and operating system.

In order to provide the functionality disclosed herein a data collection service is executed within the distributed execution environment in some implementations. The data collection service is configured to monitor the instantiation of new instances of computing resources and to collect data regarding the actual time to availability of various configurations of the instances. For example in the case of virtual machine instances the data collection service might collect data regarding the actual time taken to boot virtual machine instances having various processor memory disk and operating system configurations. The data collection service might also collect data defining the actual amount of time for instances of other types of computing resources to become available for use. The data collection service stores the collected data in a historical boot times data store in one embodiment. Other types of data stores might also be utilized.

In one implementation the data collection service is configured to collect data regarding the actual time to availability of instances of computing resources instantiated by customers or other users of the distributed execution environment. In other implementations however a test harness service is executed in the distributed execution environment to launch instances of configurations of computing resources for which insufficient data exists to generate an estimate of the time to availability for the instance types. For example if certain configurations of virtual machine instances are rarely launched by customers or other users of the distributed execution environment the test harness service might launch instances of the rarely used configurations so that the data collection service can collect data regarding the actual time to launch the instances. The test harness service might also launch instances of other types of computing resources in order to enable the data collection service to collect data regarding the actual time to availability of the instances.

When a request is received from a customer of the distributed execution environment to instantiate an instance of a computing resource the data collected and stored by the data collection service is utilized to provide an estimate of the time to availability for the requested instance. As an example a customer of the distributed execution environment might request to launch a virtual machine instance having a specific configuration and in a certain location e.g. data center or geographical region . In response thereto an estimate of the time to availability of the specific configuration of the virtual machine instance might be provided to the customer while the customer awaits availability of the new virtual machine instance.

In order to provide the estimate of the time to availability a statistics computation service is executed in the distributed execution environment in one implementation. The statistics computation service retrieves the data stored in the historical boot times data store by the data collection service and generates statistics for unique configurations of instances of computing resources. For example the statistics computation service might generate statistics for virtual machine instances having particular configurations of processor memory disk and operating system. The statistics computation service might also generate statistics for other types of instances of computing resources having other types of configurations and other attributes e.g. data center or geographic region .

In one implementation the statistics computation service is configured to generate a mean boot time and a standard deviation for the time to availability of various configurations of instances of computing resources. For example the statistics computation service might compute a mean and standard deviation of the recorded actual boot times for each unique configuration of processor memory disk and operating system for virtual machine instances. The statistics computation service might also compute the mean and standard deviation of the recorded actual time to availability for various configurations of other types of instances of computing resources. The statistics computation service might also compute a 95 confidence estimate of the time to availability for each configuration of instances of a computing resource. Other confidence levels might also be computed for the time to availability. The statistics computation service stores the computed statistics in the historical boot times data store in one embodiment.

When a request is received to instantiate a new instance of a computing resource the data stored in the historical boot times data store is utilized to generate an estimate of the time to availability for the requested instance the estimate of the time to availability might be referred to herein as an instance availability estimate . For example in the case of a request to launch a virtual machine instance the 95 confidence estimate of the time to availability for the requested configuration of the virtual machine instance might be retrieved and provided to the customer or other user requesting the launch of the new instance. In other embodiments other estimates such as the mean of the actual recorded launch times for similar configurations might be provided to the customer.

In some implementations there may be a delay between the time a request is received to instantiate a new instance of a computing resource and the time at which instantiation of the computing resource begins. This delay might be caused for instance by the time required for various Web service application programming interfaces APIs to be called to begin instantiation of the new instance of the computing resource. As an example it might be necessary for various APIs to be called in order to begin booting a new virtual machine instance in a distributed execution environment. In order to account for this time the estimate of the time to availability for a requested instance provided to a customer might include an estimate of the time between when a request to instantiate the instance is received and when instantiation of the instance actually begins. In this way the estimate of the time to availability may describe the total estimated time from when a request to instantiate a new instance of a computing resource is received and the time at which the new instance will become available for customer use.

In some implementations the instance availability estimates computed in the manner described above might be made available for consumption and use by other components or systems. For example in one implementation an API is provided through which callers can obtain an instance availability estimate for a particular instance or instance type. Such an API might be utilized for example by an autoscaling component when determining the time at which new instances of computing resources should be launched. Other mechanisms might also be utilized to expose the instance availability information to interested parties such as a management console. Additional details regarding the various components and processes described above for providing an instance availability estimate will be presented below with regard to .

It should be appreciated that the subject matter presented herein may be implemented as a computer process a computer controlled apparatus a computing system or an article of manufacture such as a computer readable storage medium. While the subject matter described herein is presented in the general context of program modules that execute on one or more computing devices those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

Those skilled in the art will also appreciate that aspects of the subject matter described herein may be practiced on or in conjunction with other computer system configurations beyond those described herein including multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers handheld computers personal digital assistants e readers cellular telephone devices special purposed hardware devices network appliances and the like. The embodiments described herein may be practiced in distributed execution environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed execution environment program modules may be located in both local and remote memory storage devices.

In the following detailed description references are made to the accompanying drawings that form a part hereof and that show by way of illustration specific embodiments or examples. The drawings herein are not drawn to scale. Like numerals represent like elements throughout the several figures which may be referred to herein as a FIG. or FIGS. .

In order to utilize a new instance a customer of the distributed execution environment might utilize a customer computing system to transmit an instance launch request to the distributed execution environment . The customer computing system may be a server computer a desktop or laptop personal computer a tablet computer a smartphone a PDA an e reader a game console a set top box or any other computing device capable of accessing the distributed execution environment . The customer computing system might access the distributed execution environment over a suitable data communications network such as a wide area network WAN .

The instance launch request specifies the type and configuration for a new instance of a computing resource to be instantiated in the distributed execution environment . For example in the case where a customer is requesting to instantiate a new virtual machine instance the instance launch request might specify a hardware configuration for the new virtual machine instance such as the amount of processing capability memory capacity and disk storage. The instance launch request might also specify an operating system that should be utilized by the new virtual machine instance . The instance launch request might also specify other types of information such as the geographic region and or data center in which the new instance should be created. The instance launch request might specify other types of configuration data when the customer is requesting to instantiate instances of other types of computing resources such as the amount of storage requested in the case of instances of storage resources.

An instance launch manager receives the instance launch request in one implementation. In response to receiving the instance launch request the instance launch manager causes an instance availability estimate to be transmitted to the customer computing system . The instance availability estimate provides an estimate of the time to availability for the new instance requested by the customer. For example as shown in the instance availability estimate might indicate that the new instance will be available for use by the customer in a certain number of hours minutes and seconds. This number might be counted down until the time to availability is zero. In other implementations the instance availability estimate indicates the time at which the new instance will become available. In even other implementations the instance availability estimate might be presented as a percentage and updated periodically as the time to availability decreases. The instance availability estimate might also be displayed through a management console or other types of user interfaces. The instance availability estimate might also be updated during the display of the instance availability estimate in order to provide a user with an up to date estimate. It should be appreciated that these examples are merely illustrative and that other types of data defining the amount of time until or the time at which an instance will become available for use by a customer or other user of the distributed execution environment might be presented.

In order to generate the instance availability estimate a data collection service is executed within the distributed execution environment in some implementations. As discussed briefly above the data collection service is configured to monitor the instantiation of new instances of computing resources and to collect data regarding the actual time to availability of various configurations of the instances. For example in the case virtual machine instances the data collection service might collect data regarding the actual time taken to boot virtual machine instances having various processor memory disk and operating system configurations. The data collection service might also collect data defining the actual amount of time for instances of other types of computing resources to become available for use by a customer or other users of the distributed execution environment . The data collection service stores the collected data defining instance boot times in a historical boot times data store in one embodiment. Other types of data stores might also be utilized to store data defining the actual times required for instances of computing resources to become available for use.

In one implementation the data collection service is configured to collect data regarding the actual time to availability of instances of computing resources instantiated by customers or other users of the distributed execution environment . In other implementations however a test harness service not shown in is executed in the distributed execution environment to launch instances of various configurations of computing resources for which insufficient data exists to generate an accurate instance availability estimate . For example if certain configurations of virtual machine instances are rarely launched by customers or other users of the distributed execution environment the test harness service might launch instances of the rarely used configurations so that the data collection service can collect instance boot times for the instances. The test harness service might also launch instances of other types of computing resources in order to enable the data collection service to collect data regarding the actual time to availability of the instances.

When an instance launch request is received from a customer or other user of the distributed execution environment to instantiate an instance of a computing resource the data collected and stored by the data collection service is utilized to provide the instance availability estimate for the requested instance. As an example a customer of the distributed execution environment might request to launch a virtual machine instance having a specific configuration. In response thereto an instance availability estimate indicating the estimated time to availability for the new instance might be provided to the customer by way of the customer computing system while the customer awaits availability of the new virtual machine instance.

In order to provide the instance availability estimate a statistics computation service is also executed in the distributed execution environment in one implementation. The statistics computation service retrieves the instance boot times stored in the historical boot times data store by the data collection service and generates instance boot time statistics for unique configurations of instances of computing resources. For example the statistics computation service might generate instance boot time statistics relating to the boot times for virtual machine instances having particular configurations of processor memory disk and operating system. The statistics computation service might also segment the generated statistics by geographic region data center or other attribute. In this manner more accurate statistics for the time to availability for instances created in certain regions and or data centers might be provided. The statistics computation service might also generate instance boot time statistics for other types of instances of computing resources having other types of configurations.

In one implementation the statistics computation service is configured to generate a mean boot time and a standard deviation for the time to availability of various configurations of instances of computing resources. For example the statistics computation service might compute a mean and standard deviation of the recorded actual boot times for each unique configuration of processor memory disk and operating system for virtual machine instances . The statistics computation service might also compute the mean and standard deviation of the recorded actual time to availability for various configurations of other types of instances of computing resources. The statistics computation service might also compute a 95 confidence estimate of the time to availability for each configuration of instances of a computing resource. Other confidence levels might also be computed for the time to availability. The statistics computation service stores the computed statistics in the historical boot times data store in one embodiment. Additional details regarding the statistics generated by the statistics computation service and the structure and format of the historical boot times data store in one implementation will be provided below with regard to .

When an instance launch request is received to instantiate a new instance of a computing resource such as a virtual machine instance the instance boot time statistics stored in the historical boot times data store is utilized to generate the instance availability estimate for the newly requested instance. For example in the case of a request to launch a virtual machine instance the 95 confidence estimate of the time to availability for the requested configuration and or location of the virtual machine instance might be retrieved from the historical boot times data store and provided to the customer or other user requesting the launch of the new instance as the instance availability estimate . In other embodiments other estimates such as the mean of the actual recorded launch times for similar configurations might be provided to the customer.

As described briefly above there may be a delay between the time a request is received to instantiate a new instance of a computing resource and the time at which instantiation of the computing resource begins. This delay might be caused for instance by the time required for various Web service APIs to be called within the distributed execution environment to begin instantiation of the new instance of the computing resource. As an example it might be necessary for various APIs to be called in order to begin booting a new virtual machine instance in the distributed execution environment .

In order to account for the delay from when a request is received and the time at which instantiation of a new instance begins the instance availability estimate provided to a customer might include an estimate of the time between when a request to instantiate a new instance is received and when instantiation of the instance actually begins within the distributed execution environment . In this way the estimate of the time to availability may describe the total estimated time from when a request to instantiate a new instance of a computing resource is received and the time at which the new instance will become available for customer use.

As mentioned above an instance availability estimate computed in the manner described above might be made available for consumption and use by other components or systems. For example in one implementation the instance launch manager or another component is configured to expose an API through which callers can obtain an instance availability estimate for a particular instance or instance type. Such an API might be utilized for example by an autoscaling component when determining the time at which new instances of computing resources should be launched. Other mechanisms might also be utilized to expose the instance availability information to interested parties such as a management console. Additional details regarding the various components and processes described above for providing an instance availability estimate will be presented below with regard to .

As discussed briefly above the distributed execution environment can provide instances of computing resources on a permanent or an as needed basis. The instances of computing resources provided by the distributed execution environment may include various types of resources such as data processing resources data storage resources data communication resources and the like. Each type of computing resource may be general purpose or may be available in a number of specific configurations. For example and as will be described in greater detail below instances of data processing resources may be available as virtual machine instances in a number of different configurations. The virtual machine instances may be configured to execute applications including Web servers application servers media servers database servers and other types of applications. Instances of data storage resources may include file storage devices block storage devices and the like. Instances of remote desktop sessions might also be utilized in various embodiments presented herein. A remote desktop session may be established utilizing the remote desktop protocol RDP or another similar protocol for viewing and interacting with a graphical user interface provided by another computer.

Each type or configuration of an instance of a computing resource may be available in different sizes such as large resources consisting of many processors large amounts of memory and or large storage capacity and small resources consisting of fewer processors smaller amounts of memory and or smaller storage capacity. Additional details regarding the various types of resources offered by the distributed execution environment will be provided below with regard to .

The instances of computing resources provided by the distributed execution environment are enabled in one implementation by one or more data centers A N which may be referred herein singularly as a data center or in the plural as the data centers . The data centers are facilities utilized to house and operate computer systems and associated components. The data centers typically include redundant and backup power communications cooling and security systems. The data centers might also be located in geographically disparate locations. One illustrative configuration for a data center that implements the concepts and technologies disclosed herein for providing an instance availability estimate will be described below with regard to .

The customers and other consumers of the distributed execution environment may access the computing resources provided by the data centers over a WAN . Although a WAN is illustrated in it should be appreciated that a local area network LAN the Internet or any other networking topology known in the art that connects the data centers to remote customers and other users may be utilized. It should also be appreciated that combinations of such networks might also be utilized.

In one embodiment the instances A N which may be referred herein singularly as an instance or in the plural as the instances are virtual machine instances. As known in the art a virtual machine instance is an instance of a software implementation of a machine i.e. a computer that executes programs like a physical machine. Each of the servers may be configured to execute an instance manager capable of instantiating and managing instances of computing resources. In the case of virtual machine instances for example the instance manager might be a hypervisor or another type of program configured to enable the execution of multiple virtual machine instances on a single server for example.

It should be appreciated that although the embodiments disclosed herein are described primarily in the context of virtual machine instances other types of instances of computing resources can be utilized with the concepts and technologies disclosed herein. For instance the technologies disclosed herein might be utilized with instances of hardware resources instances of storage resources instances of data communications resources and with other types of resources. In this manner the technologies disclosed herein can provide an estimate of the time until availability of any type of computing resource made available through the distributed execution environment .

The data center shown in also includes a server computer F reserved for executing software components for managing the operation of the data center the server computers and the instances . In particular the server computer F might execute the instance launch manager the data collection service the statistics computing service and the test harness service . Additional details regarding the operation of the data collection service will be provided below with regard to . Additional details regarding the operation of the statistics computation service will be provided below with regard to . Additional details regarding the operation of the instance launch manager will be provided below with regard to . Additional details regarding the operation of the test harness service will be provided below with regard to . The server computer F might also store the historical boot times data store . Additional details regarding the historical boot times data store will be provided below with regard to .

In the example data center shown in an appropriate LAN is utilized to interconnect the server computers A E and the server computer F. The LAN is also connected to the WAN illustrated in . It should be appreciated that the network topology illustrated in has been greatly simplified and that many more networks and networking devices may be utilized to interconnect the various computing systems disclosed herein. Appropriate load balancing devices or software modules might also be utilized for balancing a load between each of the data centers A N between each of the server computers A F in each data center and between instances of computing resources purchased by each customer of the distributed execution environment .

It should be appreciated that the data center described in is merely illustrative and that other implementations might be utilized. In particular functionality described herein as being performed by the instance launch manager the data collection service the statistics computing service and the test harness service might be performed by one another might be performed by other components or might be performed by a combination of these or other components. Additionally it should be appreciated that the functionality provided by these components might be implemented in software hardware or a combination of software and hardware. Other implementations should be apparent to those skilled in the art.

Standard instances are instances that are configured with generally proportional amounts of CPU and memory. Standard instances may be suitable for common computing applications. Standard instances may be made available in various sizes in some embodiments. For example small medium large and extra large instances may be made available with each of these instances having greater amounts of CPU and memory while maintaining approximately similar ratios of CPU to memory.

Micro instances are instances that provide a small amount of consistent CPU resources and allow CPU capacity to be increased in short bursts when additional cycles are available. Micro instances may be suited for lower throughput applications and Web sites that require additional compute cycles periodically.

High memory instances are instances that have proportionally more random access memory RAM resources than CPU resources. High memory resources are suitable for high throughput applications including database and memory caching applications. For example various types of high memory instances might offer between 17.1 and 68.4 GB of RAM in embodiments disclosed herein. Larger main memory sizes might also be made available to customers of the distributed execution environment . In contrast high CPU virtual machine instances have proportionally more CPU resources than RAM memory resources and are well suited for compute intensive applications.

Cluster compute instances are instances that offer proportionally high CPU resources with increased network performance. Cluster compute instances are well suited for High Performance Compute HPC applications and other demanding network bound applications. Cluster GPU instances are virtual machine instances that provide general purpose GPUs with proportionally high CPU and increased network performance for applications benefitting from highly parallelized processing including HPC rendering and media processing applications. While cluster compute instances provide the ability to create clusters of instances connected by a low latency high throughput network cluster GPU instances provide an additional option for applications that can benefit from the efficiency gains of the parallel computing power of GPUs over what can be achieved with traditional processors.

High I O instances are instances that provide very high disk I O performance and are ideally suited for many high performance database workloads. High I O instances may utilize solid state drive SSD based local instance storage for high I O throughput. High I O instances might also provide high levels of CPU memory and network performance.

It should be appreciated that the various virtual machine instance types described above are merely illustrative. Other virtual machine instance types not described herein might be utilized with the various concepts and technologies described herein. Additionally in some embodiments virtual machine instances may be made available in various sizes having continuous ratios of CPU to memory. Additionally as discussed above the embodiments disclosed herein might also be utilized with other types of instances of computing resources.

It should also be appreciated that the various instance types described above might be utilized with various operating systems. For example a customer of the distributed execution environment might request to execute a high CPU virtual machine instance executing the LINUX operating system. Similarly a customer or other user of the of the distributed execution environment might request to use a cluster compute instance executing the MICROSOFT WINDOWS SERVER operating system. Other operating systems might also be utilized.

In this regard it should also be appreciated that the various instance types described above might take different times to boot and become available for use by a customer of the distributed execution environment. The amount of time required for an instance to become available for use might depend upon the type and configuration of the instance the operating system utilized by the instance the hardware upon which the instance is executing the other tasks that are executing on the same hardware as the instance the data center and or geographic region in which the instance is executing and potentially one or more other factors. The embodiments disclosed herein might consider some or all of these factors when computing an instance availability estimate in the manner presented herein.

As also shown in the various virtual machine instance types described above might be priced according to various instance purchasing models . For instance in the example shown in instances of computing resources may be priced according to an on demand model a reserved model a spot model or a standby model . Aspects of each of these instance purchasing models are described in greater detail below.

Instances of computing resources priced according to the on demand model which may be referred to herein as regular instances are instances that are paid for and in active use by a customer. The on demand model allows customers of the distributed execution environment to pay for capacity per unit of time such as an instance hour without requiring a long term commitment. This may free the customer from the costs and complexities of planning purchasing and maintaining hardware and transforms what are commonly large fixed costs into much smaller variable costs.

Instances of computing resources priced according to the reserved model which might be referred to herein as reserved instances are instances of a computing resource that are reserved for a customer in exchange for a payment. The reserved model provides a customer the option to make a one time payment for each instance they want to reserve. In turn the customer may receive a significant discount on the hourly usage charge for reserved instances as compared to on demand instances. After the customer makes a one time payment for reserved instances the reserved instances are reserved for the customer and the customer has no further obligation. The customer may choose to run the reserved instances for the discounted usage rate for the duration of a chosen term. If the customer does not use the reserved instances the customer will not pay usage charges on these instances.

The spot model allows customers to bid on unused capacity in the distributed execution environment . The customer can run the instances priced according to the spot model which may be referred to herein as spot instances for as long as their bid exceeds a current market price called the spot instance market price. The spot instance market price may fluctuate based upon the supply of instances and the customer demand for the instances. Spot instances may be terminated if a customer s maximum bid no longer exceeds the current spot instance market price.

In order to obtain spot instances a customer places a request for spot instances that specifies the desired number of spot instances and the maximum price the customer is willing to pay per instance hour. If the customer s maximum price bid exceeds the current spot instance market price for the spot instances the customer s request will be fulfilled and the customer s spot instances will run until either the customer chooses to terminate them or the market price increases above the customer s maximum price whichever is sooner . Various components operating within the distributed execution environment may manage the market for the spot instances including setting the current spot instance market price for the spot instances.

Instances of computing resources purchased according to the standby model which might be referred to as standby instances are spot instances that have been acquired on behalf of a customer and that are made ready for near immediate use by the customer in the manner described herein. The price charged for standby instances is typically less than the price charged for on demand instances since the standby instances may be terminated in the same manner as spot instances. In one embodiment standby instances are priced higher than spot instances and reserved instances but lower than on demand instances. Standby instances might also be available for use faster than other instance types. As a result the embodiments disclosed herein might utilize the pricing model for a particular instance when computing the instance availability estimate .

It should be appreciated that the various instance purchasing models described above for on demand instances reserved instances spot instances and standby instances are merely illustrative and that other mechanisms may be utilized to set the pricing for the various instance types. It should also be appreciated that the embodiments disclosed herein may be utilized with any of the instance types and purchasing models shown in and other configurations of instances and purchasing models not shown in . Additionally it should be appreciated that instances of other types of computing resources might also be priced according to the instance purchasing models shown in or others.

The routine begins at operation where the data collection service retrieves the actual boot times for one or more instances that were launched in a previous period of time such as the last five minutes or other period of time. The actual boot times represent the amount of time from when an instance starts booting until the time at which the instance is available for use by a customer or other user of the distributed execution environment . The data collection service might collect the actual boot times in real time in other embodiments. The data collection service might also collect the actual boot times from the instances themselves from the instance manager or from another component within the distributed execution environment that has access to the boot times.

From operation the routine proceeds to operation where the data collection service stores the collected boot times in the historical boot times data store . For example as shown in the historical boot times data store includes an instance boot times table in one implementation. In this embodiment the instance boot times table includes fields A and B that identify the particular configuration of instance type and operating system respectively. The instance boot times table also includes a field C for storing the actual collected boot time of the corresponding instance type and operating system.

In some embodiments the data collection service also stores other data in the instance boot times table associated with each collected boot time which might include but is not limited to the type of instance the operating system executing on the instance the type of hardware upon which the instance was executed the other tasks executing on the hardware the rack data center and or region in which the instance was booted the time day of week and or month of year when the instance was launched the pricing model associated with the instance and potentially other information. Additional fields might be included in the instance boot times table in embodiments where this additional information is collected. As will be described in greater detail below this information might also be utilized to provide an estimate of the time to availability for an instance having similar characteristics at a future time.

From operation the routine proceeds to operation where the data collection service waits for a predetermined period of time prior to collecting any new actual boot times. For example the data collection service might wait five minutes or another period of time before collecting any new data. In some embodiments the data collection service might not wait before collecting additional data. For example in an embodiment where the data collection service collects data in real time the data collection service might not wait before collecting new data.

From operation the routine proceeds to operation where the data collection service removes boot times from the historical boot times data store that are older than a predetermined period of time. For example the data collection service might remove boot times stored in the historical boot times data store that are more than five minutes old. By aging out older data in this way the estimate regarding the availability of a new instance may be based upon only recent data. In some embodiments the boot times are not aged in this manner and estimates may be computed based upon a larger sampling of actual boot times. From operation the routine proceeds back to operation where the data collection service continues to collect store and potentially age out data regarding the actual boot times of instances of computing resources in the manner described above.

The routine begins at operation where the statistics computation service generates a mean time to availability for each combination of instance type and operating system. For example the statistics computation service might compute the mean boot time for large virtual machine instances executing the LINUX operating system. Similarly the statistics computation service might compute the mean boot time for High CPU virtual machine instances executing the MICROSOFT WINDOWS SERVER operating system. The statistics computation service might compute the mean boot time for instances having other characteristics in other embodiments.

From operation the routine proceeds to operation where the statistics computation service computes a standard deviation for the time to availability of various configurations of instances of computing resources. For example the statistics computation service might compute a standard deviation of the recorded actual boot times for each unique configuration of processor memory disk and operating system for virtual machine instances . The statistics computation service might also compute the standard deviation of the recorded actual time to availability for various configurations of other types of instances of computing resources.

From operation the routine proceeds to operation where the statistics computation service computes a 95 confidence estimate of the time to availability for each configuration of instances of a computing resource. Other confidence levels might also be computed for the time to availability. In this regard it should be appreciated that the statistics described above are merely illustrative and that the statistics computation service might compute other types of statistical data describing the actual recorded time to availability of various configurations of instances of computing resources. This information might then be utilized in the manner described herein to provide an estimate of the time to availability for an instance of a computing resource having a particular configuration or characteristics.

From operation the routine proceeds from operation to operation where the statistics computation service stores the statistics computed at operations and in the historical boot times data store in one embodiment. For example as shown in the historical boot times data store might include an instance boot statistics table containing fields D and E for identifying the configuration of instance type and operating system respectively. The instance boot statistics table might also include a field F for storing the computed mean for an instance configuration a field G for storing the computed standard deviation and a field H for storing the computed 95 confidence level.

It should be appreciated that the configuration of the historical boot times data store shown in is merely illustrative and that the statistics generated by the statistics computation service might be stored in other types of data stores having other configurations in other embodiments. The statistics might also be generated at the time a request is received to launch a new instance. In this way the statistics need not be generated and stored prior to receiving a request . From operation the routine proceeds back to operation described above where the statistics computation service might continue to compute and store statistics describing the time to availability for various combinations of instances of computing resources.

From operation the routine proceeds to operation where the instance launch manager retrieves the statistics stored in the historical boot times data store for the particular configuration of instance requested in the instance launch request . For example in the case of a virtual machine instance the instance launch manager retrieves the 95 confidence estimate for the particular instance type and operating system requested in the instance launch request . In other embodiments other statistics might also be utilized. For example the mean boot time for the particular instance type and operating system requested in the instance launch request might also be retrieved.

From operation the routine proceeds to operation where the instance launch manager computes the instance availability estimate . In one embodiment the statistics retrieved from the historical boot times data store are utilized directly as the instance availability estimate . For example the 95 confidence estimate corresponding to the requested instance type and operating system configuration might be utilized as the time to availability for a new instance having the same type and operating system and or other characteristics. Similarly the mean boot time for a particular instance type and operating system configuration might be utilized as the time to availability for a new instance of the same type and operating system. Other statistics might be utilized in other embodiments.

As described briefly above there may be a delay in some implementations between the time a request is received to instantiate a new instance of a computing resource and the time at which instantiation of the computing resource begins. This delay might be caused for instance by the time required for various Web service APIs to be called within the distributed execution environment to begin instantiation of the new instance of the computing resource. As an example it might be necessary for various Web service APIs to be called in order to begin booting a new virtual machine instance in the distributed execution environment .

In order to account for the delay from when a request is received and the time at which instantiation of a new instance begins the instance launch manager might compute the instance availability estimate in some embodiments to include an estimate of the time between when a request to instantiate an instance is received and when instantiation of the instance actually begins within the distributed execution environment . In this way the estimate of the time to availability may describe the total estimated time from when a request to instantiate a new instance of a computing resource is received and the time at which the new instance will become available for customer use. The instance availability estimate might also include other offsets to account for other types of delays in other embodiments.

From operation the routine proceeds to operation where the instance launch manager transmits the instance availability estimate to the customer computing system that transmitted the instance launch request . The customer computing system then displays the instance availability estimate to a user of the customer computing system . For example the customer computing system might render a Web page that indicates that the newly requested instance will be available for use by the customer in a certain number of hours minutes and seconds. This number might also be counted down until the time to availability is zero. In other implementations the instance availability estimate might be presented to indicate the time at which the new instance will become available. Other types of displays might also be provided.

From operation the routine proceeds to operation where the new instance is instantiated in the distributed execution environment . For example in the case of a virtual machine instance a server in the distributed execution environment might begin booting the new instance. When the new instance has become available for use i.e. finished booting in the case of a virtual machine instance the routine proceeds from operation to operation .

At operation the instance launch manager might transmit a notification to the customer computing system that the new instance is now available for use. This notification might replace the display of the instance availability estimate presented by the customer computing system . Other types of information might also be displayed. Additionally other types of workflows might also be triggered once a new instance has become available for use. From operation the routine proceeds to operation where it ends.

The routine begins at operation where the test harness service identifies one or more instance types and configurations for which an insufficient number of launches have been made to provide a statistically accurate instance availability estimate . For example customers or other users of the distributed execution environment might rarely launch cluster GPU instances using the LINUX operating system.

From operation the routine proceeds to operation where the test harness service causes instances of the infrequently utilized instance types and configurations to be launched. For example the test harness service might transmit an instance launch request to the instance launch manager instructing the instance launch manager to launch one or more instances of the infrequently used instance types and configurations. In response thereto the instance launch manager might cause the specified instances to be generated in the distributed execution environment .

From operation the routine proceeds to operation where the data collection service collects and stores data regarding the time to availability for the newly launched instances as described above with . Additionally the statistics computation service might generate statistics in the manner presented above with regard to for the newly launched instances. In this way data can be generated and made available for computing an instance availability estimate for the rarely used instance types.

From operation the routine proceeds to operation where it ends. In other embodiments the routine might be continually repeated so that data can be continually generated and made available for computing an instance availability estimate for infrequently utilized instance types and configurations.

The computer includes a baseboard or motherboard which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication paths. In one illustrative embodiment one or more central processing units CPUs operate in conjunction with a chipset . The CPUs may be standard programmable processors that perform arithmetic and logical operations necessary for the operation of the computer .

The CPUs perform operations by transitioning from one discrete physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states such as flip flops and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements such as logic gates. These basic switching elements may be combined to create more complex logic circuits including registers adders subtractors arithmetic logic units floating point units and the like.

The chipset provides an interface between the CPUs and the remainder of the components and devices on the baseboard . The chipset may provide an interface to a random access memory RAM used as the main memory in the computer . The chipset may further provide an interface to a computer readable storage medium such as a read only memory ROM or non volatile RAM NVRAM for storing basic routines that help to startup the computer and to transfer information between the various components and devices. The ROM or NVRAM may also store other software components necessary for the operation of the computer in accordance with the embodiments described herein.

The computer may operate in a networked environment using logical connections to remote computing devices and computer systems through a network such as the local area network . The chipset may include functionality for providing network connectivity through a NIC such as a gigabit Ethernet adapter. The NIC is capable of connecting the computer to other computing devices over the network . It should be appreciated that multiple NICs may be present in the computer connecting the computer to other types of networks and remote computer systems.

The computer may be connected to a mass storage device that provides non volatile storage for the computer. The mass storage device may store system programs application programs other program modules and data which have been described in greater detail herein. The mass storage device may be connected to the computer through a storage controller connected to the chipset . The mass storage device may consist of one or more physical storage units. The storage controller may interface with the physical storage units through a serial attached SCSI SAS interface a serial advanced technology attachment SATA interface a fiber channel FC interface or other type of interface for physically connecting and transferring data between computers and physical storage units.

The computer may store data on the mass storage device by transforming the physical state of the physical storage units to reflect the information being stored. The specific transformation of physical state may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the physical storage units whether the mass storage device is characterized as primary or secondary storage and the like.

For example the computer may store information to the mass storage device by issuing instructions through the storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive unit the reflective or refractive characteristics of a particular location in an optical storage unit or the electrical characteristics of a particular capacitor transistor or other discrete component in a solid state storage unit. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this description. The computer may further read information from the mass storage device by detecting the physical states or characteristics of one or more particular locations within the physical storage units.

In addition to the mass storage device described above the computer may have access to other computer readable storage media to store and retrieve information such as program modules data structures or other data. It should be appreciated by those skilled in the art that computer readable storage media can be any available media that provides for the storage of non transitory data and that may be accessed by the computer .

By way of example and not limitation computer readable storage media may include volatile and non volatile removable and non removable media implemented in any method or technology. Computer readable storage media includes but is not limited to RAM ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory or other solid state memory technology compact disc ROM CD ROM digital versatile disk DVD high definition DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information in a non transitory fashion.

The mass storage device may store an operating system utilized to control the operation of the computer . According to one embodiment the operating system comprises the LINUX operating system. According to another embodiment the operating system comprises the WINDOWS SERVER operating system from MICROSOFT Corporation. According to further embodiments the operating system may comprise the UNIX or SOLARIS operating systems. It should be appreciated that other operating systems may also be utilized. The mass storage device may store other system or application programs and data utilized by the computer such as the instance launch manager the data collection service the statistics computation service and or any the other software components and data described above. The mass storage device might also store other programs and data not specifically identified herein.

In one embodiment the mass storage device or other computer readable storage media is encoded with computer executable instructions which when loaded into the computer transforms the computer from a general purpose computing system into a special purpose computer capable of implementing the embodiments described herein. These computer executable instructions transform the computer by specifying how the CPUs transition between states as described above. According to one embodiment the computer has access to computer readable storage media storing computer executable instructions which when executed by the computer perform the various routines described above with regard to and .

The computer may also include one or more input output controllers for receiving and processing input from a number of input devices such as a keyboard a mouse a touchpad a touch screen an electronic stylus or other type of input device. Similarly the input output controller may provide output to a display such as a computer monitor a flat panel display a digital projector a printer a plotter or other type of output device. It will be appreciated that the computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

Based on the foregoing it should be appreciated that technologies for providing an instance availability estimate have been presented herein. Although the disclosure presented herein has been primarily made with reference to the selection and deployment of virtual machine instances it should be appreciated that the embodiments disclosed herein might also be utilized to provide an availability estimate for instances of other types of computing resources. Moreover although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

