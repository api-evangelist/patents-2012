---

title: System and method for improved SAP communications
abstract: Improved SAP communications are provided by a terminator node that acts as termination on one end of the communication channel and links to the SAP server on the other end. A server device is also provided that optionally implements this terminator node and monitors communications between the SAP server and a client. The server device optionally condenses SAP application screens. The server device also simulates certain required responses to the SAP server to allow for a persistent session between a client and the SAP server when the actual connection may be intermittent. The server device also records required records for a transaction and provides them to a client for offline processing and then synchronizes stored offline transaction data from the client with the SAP server. The system may include a client device that optionally implements the terminator node to communicate with the server device or the SAP server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08478815&OS=08478815&RS=08478815
owner: Synactive, Inc.
number: 08478815
owner_city: Foster City
owner_country: US
publication_date: 20120320
---
This application is a continuation of U.S. patent application Ser. No. 12 623 156 filed Nov. 20 2009 and entitled System and Method for Improved SAP Communications and scheduled to issue as U.S. Pat. No. 8 140 617 on Mar. 20 2012 which in turn claims priority to U.S. Provisional Patent Application No. 61 116 573 filed 20 Nov. 2008 which is incorporated herein in its entirety by reference.

The present invention is generally related to client server communications and is more specifically related to simplifying user interaction with a SAP server and extending SAP functionality to mobile and intermittently connected devices.

Conventional SAP software products focus on enterprise resource planning ERP . These products are delivered by way of an SAP environment which employs a SAP R3 server as the primary server to deliver these software products. SAP provides five major enterprise applications including ERP customer relationship management CRM product lifecycle management PLM supply chain management SCM and supplier relationship management SRM .

As illustrated in a conventional SAP system includes a SAP R3 server that has a data storage area . The R3 server is connected to a plurality only one is shown of SAP GUI clients that allow users to interact with the various applications provided by the application server module and data managed by the data base module on the SAP R3 server . The R3 nomenclature is generally understood to reflect the 3 tier architecture of a SAP system that includes the database the application server and the client SAP GUI client . In the SAP system the SAP GUI client is connected to the R3 server via a wired or wireless network that allows the R3 server and client to maintain a persistent connection across the network .

Often customers that use the SAP R3 system desire to make changes to certain user interfaces. Making such changes is cumbersome at least and can often require expensive custom programming in the Java language or the Advanced Business Application Programming ABAP language.

Additionally users of the SAP R3 server are unable to interact with the various applications and or data to accomplish their work unless they are sitting in front of a computer running the Microsoft Windows operating system and also running the SAP GUI client . One significant drawback of the SAP R3 system is that the SAP GUI client only runs on the Windows operating system which therefore precludes use of the SAP system for a very significant number of potential user input devices.

Some attempts at providing the ability for a mobile device to communicate with the SAP system have been undertaken. These solutions have problems such as being limited to only those devices that support web based applications. Web based applications also face challenges due to the cumbersome and difficult to use interface. Other attempts at a mobile solution include custom applications that communicate with the SAP server using the limited SAP business application programming interface BAPI that are implemented using remote function calls RFCs .

Furthermore these limitations of the SAP R3 system require that employees in the field conduct business transactions manually. For example a sales person brings paperwork containing information regarding the potential customer price lists discount schedules etc. to a sales call. The sales person must manually create a quote to deliver to the potential customer during the sales call or make verbal commitments to the customer. After providing the potential customer with a manually created quote or a verbal commitment the sales person continues with sales calls throughout the day. When the sales person returns to the office the manually created quote and or verbal commitment information is entered into the SAP R3 server ERP system which then can generate the official quotes that can be delivered to the customer. A similar process must be followed for orders from the customer e.g. received orders must be subsequently entered into the SAP R3 server to make them official.

Therefore what is needed is a system and method that provides improved communications with a SAP system to overcome the significant limitations and problems found in the conventional SAP systems described above.

Accordingly described herein are systems and methods for improved SAP communications that allow user devices to serve as the client device and communicate with a SAP server via a wired or wireless network and using a persistent or intermittent connection. A GUIXT server runs on the SAP R3 server or on its own server hardware and interfaces with a GUIXT client on the client device that provides the user with an improved user interface for SAP applications. The GUIXT server and client combination allows for improved communications in a SAP environment where the GUIXT client may run on a mobile device and be in communication with the SAP R3 server via a wireless communication network. The client may also run on a remote device and process transactions offline while only periodically connecting to the SAP R3 server.

In one embodiment the GUIXT server provides an intermediary application that talks to the SAP R3 server over the wired network or via the SAP R3 server itself and mimics the SAP R3 functionality to client devices running the GUIXT client application. The GUIXT server also enables the deployment of simplified user interfaces for the various SAP applications in a centralized fashion and extends the SAP functionality to mobile and periodically connected offline devices.

To enable communications between a mobile device and the SAP R3 server the GUIXT server operates as the termination node and responds to network communications from the SAP server e.g. remote function call traffic and completes these specific types of transactions so that the SAP server will continue to maintain the connection with the client and will continue to send traffic data. The responses to these network communications from the SAP server advantageously complete the transaction without actually performing any of the necessary operations requested by the SAP Server. Accordingly the SAP functionality can be extended to a wide variety of additional user input devices such as 10 key devices barcode readers laser scan guns personal digital assistants PDAs data collection terminals and any other type of mobile device from which it is desirable to input data to or receive data from the SAP R3 server.

Additionally the system allows for use of applications that run on the client device and are designed to capture and save business transaction data e.g. in the field while the client device is communicatively disconnected from the backend SAP R3 server system i.e. in an offline state . These client device applications can then synchronize the saved offline business transaction data with the SAP R3 server system when they are later communicatively connected to the SAP server.

Other features and advantages of the present invention will become more readily apparent to those of ordinary skill in the art after reviewing the following detailed description and accompanying drawings.

Certain embodiments as disclosed herein provide systems and methods for improved SAP communications. After reading this description it will become apparent to one skilled in the art how to implement the invention in various alternative embodiments and alternative applications. However although various embodiments of the present invention will be described herein it is understood that these embodiments are presented by way of example only and not limitation. As such this detailed description of various alternative embodiments should not be construed to limit the scope or breadth of the present invention as set forth in the appended claims.

The illustrated system also includes a GUIXT server device B that is communicatively coupled with the SAP R3 server via a wired or wireless network . One or more GUIXT clients SAP GUI GUIXT clients and SAP GUI clients may also be communicatively coupled with the SAP R3 server via a wired or wireless network . The network may also be communicatively coupled with one or more additional networks that may be wired or wireless networks such as network . Additional GUIXT clients SAP GUI GUIXT clients and SAP GUI clients may be communicatively coupled with the SAP R3 server via a combination of networks including networks and .

In alternative embodiments the system can be operated with one or both of the GUIXT server module A and the GUIXT server device . Advantageously multiple GUIXT servers A or B can be employed at the same time to provide load balancing amongst the GUIXT servers A or B . In such an embodiment one of the multiple GUIXT servers is identified as a message server to which clients e.g. SAP GUI client SAP CONSOLE not shown and GUIXT clients and will connect and the multiple GUIXT servers A and B communicate amongst themselves to select the GUIXT server with the least load to process the next connection.

The GUIXT server module A or device B provides a communication channel between one or more GUIXT client devices and the application server on the SAP R3 server . This communication channel can advantageously be configured on the GUIXT server module A or device B for example by establishing a target server variable that identifies a particular application server to which the GUIXT server A or B will connect. Because there may be multiple redundant SAP R3 servers to provide load balancing the target server variable on the GUIXT server A or B may identify a SAP R3 messaging server not shown that is responsible for load balancing across the multiple SAP R3 servers. Also the GUIXT server A or B can select the SAP R3 server with the least load to connect and communicate with. The GUIXT server A or B may communicate with the SAP R3 server using a variety of methods including remote function calls intermediate documents IDOCS and many other standard ways to communication with the SAP R3 server.

For example the target server variable can be set to the name of the SAP R3 server e.g. Juneau the name of the SAP R3 server in combination with a logical port number e.g. Juneau 3200 or Juneau.sap.com 3600 or the host port combination using SAP notation e.g. H Juneau S sapdp00 . When setting the target server variable to a messaging server for load balancing the target server variable can also the SAP notation e.g. M Juneau.sap.com S sapmsPRD G SAP Prod Sys . In a messaging server embodiment the M notation identifies the messaging server the S identifies the service logical port to connect to and the G notation identifies the logon group to connect to. Advantageously the M and G notations will employ a default value if not included in the value to which the target server variable is set.

In one embodiment the GUIXT server A or B can also be configured as a SAP router in order to communicate directly with the SAP GUI client . For example an initialization file can be edited to instruct the GUIXT server A or B to act as a SAP router by setting a TargetServer variable to saprouter and also setting a TargetServerPort variable to saprouter. In such an embodiment the SAP GUI client identifies the internet protocol address of the GUIXT server A or B in its SAP router variable e.g. 192.161.15.7 

In the illustrated embodiment there are three GUIXT client devices and that provide a user with an interface for interacting with the various applications that are provided by the application sever module on the SAP R3 server . The first two devices are GUIXT client devices and and the third device is SAP GUI client device that is running a locally activated version of the GUIXT client.

GUIXT client is communicatively coupled with the SAP R3 server and the GUIXT server via the wired or wireless network . A first user session with the SAP R3 server from GUIXT client may be established via the GUIXT server module A that is resident on the SAP R3 server . The GUIXT server module A in turn communicates with the Application server module on the SAP R3 server . A second user session with the SAP R3 server from the GUIXT client may separately be established via the GUIXT server device B that is communicatively coupled with the GUIXT client and the SAP R3 server via the wired or wireless network . The GUIXT server device B in turn communicates with the Application server module on the SAP R3 server to allow the GUIXT client to interact with the various applications and data provided via the application server .

GUIXT client is communicatively coupled with the SAP R3 server via the wired or wireless network and one or more only one is shown wired or wireless networks in between. For example the one or more wired or wireless networks in between may include the Internet. A third user session with the SAP R3 server from the GUIXT client may be established via the GUIXT server B that is communicatively coupled with the SAP R3 server via the wired or wireless network . The GUIXT server B in turn communicates with the Application server module on the SAP R3 server .

GUIXT client is locally activated on a SAP GUI device and communicatively coupled with the SAP R3 server via the wired network . A fourth user session with the SAP R3 server from GUIXT client may be established directly with the Application server module that is resident on the SAP R3 server using the SAP GUI client that is also resident on client device .

In one embodiment GUIXT client includes and or implements a termination node module for high fidelity and complete communication with the SAP R3 server . Failure to implement the termination node module may result in low fidelity communications between GUIXT client and the SAP R3 server that would impede the proper functioning of GUIXT client for example due to the intermittent nature of wireless communications. The third user session with the SAP R3 server from GUIXT client is established via the GUIXT server device B that is in communication with GUIXT client via the one or more wired or wireless networks. Advantageously the connection between GUIXT client and the GUIXT server device B can be persistent or intermittent. GUIXT client may also be actively processing transactions while disconnected from the GUIXT server device B i.e. offline and then later synchronize those transactions with the SAP R3 server after coming online via a connection to the SAP R3 server through the GUIXT server device B.

In an alternative embodiment the GUIXT client implements a termination node module and connects directly to the application server via one or more networks for example wired or wireless networks and which is illustrated as session . The termination node module advantageously allows the GUIXT client to communicated directly with the application server on the SAP R3 server without the need for the intermediate connection via the GUIXT server A or B.

The function of the GUIXT server module A or device B is to simulate the SAP R3 server on one end of the connection and simulate SAP GUI on the other end of the connection to facilitate the completion of transactions between any client and the SAP R3 server . The GUIXT server module A or device B resides in the communication path of the SAP R3 multi tier architecture and processes SAP client and server traffic to accomplish this function.

The GUIXT server module A or device B provides the ability to control communication between the SAP R3 server and a client to support client devices that run any variety of operating systems and or special control software e.g. laser scanners and the like and to also support client devices that are mobile wireless or intermittently connected e.g. field devices that are offline during data collection for certain transactions . In one embodiment the GUIXT server module A or device B may optionally provide scripting capability that allows a user to implement custom functionality custom access controls and to otherwise refine and simplify processes. The GUIXT server module A or device B preserves the connection to the SAP R3 server when communicating with a mobile client device that may e.g. be connected to the SAP environment via a wireless communication network or otherwise have an intermittent network connection. The GUIXT server module A or device B advantageously allows a mobile client device to seamlessly reconnect with the SAP R3 server and continue with in progress transactions or start new transactions even when the network connectivity between the mobile device and the SAP R3 server is intermittent.

Furthermore the GUIXT server module A or device B provides downloadable transaction data and forms that can be used by a remote device in an offline setting to process transaction data. When the remote device comes online the GUIXT server module A or device B receives the transaction data that was processed offline and converts that data and sends it to the SAP R3 server as if the transaction was taking place in real time. In this way the GUIXT server module A or device B provides an offline transaction processing and synchronization functionality in a SAP environment that has never before existed.

The offline module facilitates the creation and propagation of offline transaction forms and user interfaces that can be used by devices in an offline environment to process transaction data. The offline module works in concert with the sync module to update the SAP R3 server with the offline transaction data in a way that the SAP R3 server accepts and records the offline transaction as if the transaction were being processed in real time. A user may employ the scripting module to provide additional access control business rules and or to create offline transaction forms that can be used.

The termination node module monitors traffic between the SAP R3 server and a GUIXT client and timely responds to SAP R3 Remote Function Call RFC communications that require a response in order to satisfy the SAP R3 communication protocol. The termination node module responses preserve the session between the SAP R3 server and the client e.g. a GUIXT client whether or not the client is currently online and communicating with the GUIXT server without affecting the fidelity of the underlying data in the transaction. Advantageously preservation of the session by the termination node module allows the GUIXT server to access and obtain the full range of available data and transactions from the SAP R3 server which would otherwise be limited or altogether unavailable. In one embodiment the termination node module is configured to detect a disconnect with the client and in response put the connection with the SAP R3 server in a suspended state until the client reconnects.

In one embodiment the termination node module receives communications from the SAP R3 server and translates those communications into another form such as hypertext markup language HTML or java script object notation JSON . Other formats may also be used. Advantageously the translated HTML or JSON communications are more easily processed and handled by a GUIXT client.

The mobile module works in concert with the termination node module to facilitate communications between a mobile device client and the SAP R3 server. Additionally the mobile module may work with the UI condenser module to provide an alternative user interface to a user of the mobile device client that is tailored to maximizing productivity of the various SAP applications through the small screen size of the mobile device client. The UI condenser module also provides condensed SAP application screens to a GUIXT client interface that can reduce the number of screens required to complete a single transaction. In one embodiment significant efficiencies can be realized using the UI condenser module . For example a transaction requiring twenty five 25 native screens can be condensed to four 4 screens. In one embodiment the GUIXT server collects the data from the client using four screens and then provides it to the SAP R3 server using the twenty five screens expected by the SAP R3 server.

The script module works in concert with many of the other modules to allow a user to customize many aspects of the GUIXT server functionality and to allow the user to streamline data collection screens or implement streamlined data collection screens developed by a third party. The SAP router module is configured to operate as a SAP router to allow native SAP GUI clients to communicate with the SAP R3 server via the GUIXT server.

The GUIXT server also has access to a data storage area for persistent and volatile storage of transaction data scripts programs and other useful data. Data storage area can be implemented as data memory or secondary memory as later described with respect to . The GUIXT server is also configured to implement load balancing by connecting to the least busy SAP server.

The offline interface module interacts with a user to present offline transaction forms that can be used to input transaction data. The offline interface module also allows the user to manipulate offline data for example by performing subsequent offline transactions related to or directly involving previously collected offline data. The offline interface module also interacts with the GUIXT server to send the transaction data to the SAP R3 server.

In one embodiment the GUIXT client provides client functionality that operates without the need for direct interaction with the SAP R3 server backend application to which it will ultimately provide its transaction data. For example the offline interface module may download a set of records that collectively comprise a transaction such as an invoice. These records can be stored in the data storage area . In practice an offline GUIXT client allows a field agent to interact with the transaction records via the offline interface module to capture necessary transaction data in real time. Up to date transaction records are downloaded onto the offline GUIXT client device and stored in data storage area prior to carrying out the transaction. Records for any type of transaction can be created. The offline user can perform multiple transactions while offline using the transaction records. The results of these multiple transactions are stored in the data storage area . Subsequent transactions can even use stored data that was collected during a prior offline transaction and stored in the data storage area on the offline GUIXT client . When the user returns to a place where the offline GUIXT client device goes online the offline interface module synchronizes the transaction data with the SAP R3 server via the GUIXT server.

In one embodiment the transaction records that are provided to the GUIXT client can be created e.g. by the GUIXT sever using a shadow transaction. For example when a GUIXT client is connected to the SAP R3 server the GUIXT server records a transaction. The GUIXT server begins recording and stores the various data fields required for the transaction and stops the recording when the transaction is done. Advantageously the GUIXT server offline module converts the entire recorded sequence into the set of transaction records needed to fully carry out that transaction while offline. Advantageously the set of transaction records may be condensed before being provided to the GUIXT client to improve efficiency of data collection during the offline transaction.

In an alternative embodiment transaction records can have expiration tags added to each record or each field in each record such that all or certain data in the offline transaction records is associated with an expiration tag. Thus while the GUIXT client is still offline the transaction data collected via the offline interface module can be retrieved from data storage and processed to determine what data if any may be expired or near expiration. For example collected transaction data can be tagged e.g. using color in a visual interface according to the margin of error possible based on the validity expired or not of the collected transaction data.

For example a base unit price for a widget has an expiration date in the transaction records that were downloaded from the SAP R3 server and stored in data storage area on the GUIXT client . The discount logic for widget sales also has an expiration date. In this example because the offline GUIXT client device has not recently synchronized with the SAP R3 server the discount logic for widget sales has expired although the base unit price has not expired. Finally a transaction was just entered and the transaction itself is still valid i.e. not expired .

Given this scenario the offline interface module is configured to process the data for this particular widget sales transaction and for example color the base price green because the number of widgets from the transaction multiplied by the base unit price is still valid unexpired information. However the discount amount which is calculated is colored red because the discount logic has expired. Other scenarios for entering transaction data and calculating potential results can also be implemented to allow e.g. a sales person to walk through a variety of scenarios with a customer or potential customer. In this fashion e.g. a sales person can still work and apply factors when presenting the information in the field while being notified with easily recognizable correction factors and prompted to provide appropriate disclaimers for example.

Advantageously when the GUIXT client device is later online and synchronized with the SAP R3 server the expired information from the offline transaction records stored on the GUIXT client device is updated and provided to the SAP R3 server so that the correct parameters of the transaction are entered into the system.

In one embodiment the offline interface module is configured to implement certain smart attributes for example during data collection on a mobile GUIXT client device with limited user interface capabilities. In one embodiment smart attributes can include 1 pattern matching 2 validation 3 auto tab and 4 auto submit. Pattern matching allows certain entry fields of a transaction requiring data input to be associated with a predetermined pattern. When a user enters data conforming to the predetermined pattern the offline interface module populates that field with the conforming data. Advantageously the field is populated whether the field is currently the active data entry field or if the field appears somewhere else in the form. For example a transaction form has three fields with the following predetermined pattern matching characteristics 

then the offline interface module populates field1 with 100 populates field2 with bin34789897 and populates field3 with am2 400. In this example the key indicates that the user is done entering data for a field. Advantageously transaction forms can have a plurality of fields with predetermined pattern matching characteristics assigned and other fields without assigned predetermined pattern matching characteristics. The pattern matching capabilities of the offline interface module only attempt to populate those with having assigned predetermined pattern matching characteristics with entered data that matches.

The validation capabilities of the offline interface module allow data entered into a particular field whether by pattern matching or not to be validated against predetermined characteristics of valid input for the field. For example a field may be valid only if numerical data is entered or only if 10 numerical digits are entered e.g. a phone number field . Various combinations can be employed as the predetermined characteristics of valid input for a field. Advantageously this allows data to be validated at the time of entry such that it does not have to be re entered upon validation if any by the SAP R3 server.

The auto tab capabilities of the offline interface module allow data to be entered without having to enter the character between field. Auto tab can be employed during field data input into a form but may most advantageously be employed during barcode scanner or other types of automated input from a GUIXT client device . For example the offline interface module may determine whether a user is manually entering data or if the data is being provided by a barcode reader or scanner by determining the elapsed time between the first character of data input and the second character of data input. If the elapsed time exceeds a certain predetermined threshold then the offline interface module determines that the data entry is manual. In one embodiment a threshold of 40 milliseconds can be used such that if the time between the first and second characters is less than 40 milliseconds then the offline interface module determines that the data input means is by some automated device such as a barcode reader scanner or other such device. Advantageously if the entry means is determined to be other than manual data entry the offline interface module implements the auto tab more quickly than if the data is being entered manually by the user.

In one embodiment the auto tab function is implemented after a certain period of elapsed time with no data input. For example during field data input a user may type in a certain amount of data and then pause for a few seconds. When a predetermined threshold of time has passed the offline interface module automatically proceeds to the next data entry field or automatically determines that the next entered data is for a separate field e.g. when pattern matching is also being employed . The predetermined threshold of time is advantageously reset whenever data is entered prior to the passing of the predetermined threshold amount of time. In an alternative embodiment a plurality of predetermined time thresholds can be established with different actions associated with each. For example a short pause may cause an auto tab to the next field while a long pause may indicate that the user is done entering text but no auto tab is employed. Additionally offline interface module may distinguish between different types of input such that if the input is made via a scanning device then the auto tab is performed after each scan regardless of any predetermined threshold of time value that has been set.

The auto submit capabilities of the offline interface module allow data to be automatically submitted e.g. either offline to data storage or online to the SAP R3 server when all expected data has been entered. This feature may be employed during manual data entry and may also be advantageously employed during automated data entry using a GUIXT client device such as a barcode reader scan gun or other such device. In one embodiment an auto submit will be performed only after pattern matching and validation have been performed.

The mobile interface module interacts with the mobile module on the GUIXT server to maintain the session between the GUIXT client and the SAP R3 server on a mobile device that may have a network connection that is spotty or intermittent.

The server communication module is configured to facilitate communications between the GUIXT client and the GUIXT server . The server communication module may work in conjunction with the mobile and offline interfaces to facilitate communications with the GUIXT server . For example the server communication module allows a user to configure a connection to a SAP R3 server by providing the name of the application server module or providing a SAP router string e.g. an IP address of a GUIXT server . User validation information such as a user name and password can also be stored in a user profile by the server communication module to facilitate rapid connections with automatic login when desired. The user profile may also designate which smart attributes are to be used and allow the user to set the predetermined time thresholds for data entry means detection auto tab and or auto submit. Other access control and user restrictions and permissions may also be stored into the user profile.

Advantageously the server communication module is also configured to allow the GUIXT client device to maintain multiple sessions at the same time with the GUIXT server SAP R3 server.

The termination node module monitors traffic between the GUIXT client device and the SAP R3 server and timely responds to SAP R3 Remote Function Call RFC communications that require a response in order to satisfy the SAP R3 communication protocol. The responses to SAP R3 requests from the termination node module preserve the session between the SAP R3 server and the GUIXT client device whether or not the user of the GUIXT client is currently active and communicating with the GUIXT server . The responsive communications from the termination node module to the SAP R3 server advantageously do not adversely affect the fidelity of the underlying data in a current or perhaps suspended transaction between the GUIXT client and the SAP R3 server. Advantageously preservation of the session by the termination node module allows the GUIXT client device to access and obtain the full range of available data and transactions from the SAP R3 server which would otherwise be limited or altogether unavailable. In one embodiment the termination node module receives communications from the SAP R3 server and translates those communications into another form such as hypertext markup language HTML or java script object notation JSON . Other formats may also be used. Advantageously the translated HTML or JSON communications are more easily processed and handled by the GUIXT client .

During an offline transaction in step the transaction data is recorded and stored locally in the offline GUIXT client device in step . During the offline transaction pattern matching validation auto tab and auto submit smart attributes can be employed. Advantageously the stored transaction data can be processed offline for a variety of uses including subsequent transactions or to see calculations and the effect of expired data. At some later time the GUIXT client device is brought online and a connection is established with a GUIXT server and a session is created with a SAP server as shown in step . The transaction data is uploaded to the SAP server in step through the GUIXT server which can reformat and convert the transaction data from the GUIXT client device as needed for delivery to the SAP server in a format recognized by the SAP server. For example the condensed offline transaction data may be populated back into the plurality of screens that are expected by the SAP server for that particular transaction. If any portion of the data to be provided to the SAP server is expired as determined by examination of expiration tags associated with the data in step the GUIXT server can update the expired data in step before sending it to the SAP server in step . Data from multiple transactions can be provided to the SAP server using this process.

However if the request is an RFC request as determined in step then the GUIXT server determines if the RFC request is the type of RFC request that requires a response to maintain the session between the GUIXT client and the SAP server as shown in step . If the request does not require a response to maintain the session or for any other reason then the GUIXT server makes no response to the SAP server as shown in step . If the RFC request does require a response however then in step the GUIXT server e.g. using the previously described termination node module generates a simulated response with sufficient information to maintain the session between the GUIXT client and the SAP server and sends the simulated response to the SAP server on behalf of the GUIXT client for which the RFC request was originally destined. Advantageously by simulating the required RFC response the GUIXT server is able to maintain the session between the SAP server and the GUIXT client.

Additionally in step the low priority actions that do not require a response are ignored and the GUIXT server or client sends no response to the SAP server. For each of the other actions that need to be responded to in order to maintain effective communications with the SAP server e.g. to maintain the session but are not necessarily required in the context of the current workflow in step the GUIXT server e.g. the previously described termination node module generates a simulated response to the SAP server and sends the simulated responses to the SAP server. Accordingly the GUIXT server or client selectively responds to the actions that require a response and ignores those actions that do not require a response to maintain the session with the SAP server without loss of data fidelity.

For example a particular action may require an associated handle to an object. In one embodiment a handle is a numerical identifier. Accordingly the handle is fabricated by the GUIXT server e.g. by the previously described termination node module and then sent back to the SAP server to simulate a response to that particular action effectively completing the communication loop with the SAP server. In one embodiment the handle may be fabricated by generating a random number for use as the handle or by using a timestamp or some other technique as will be understood by those skilled in the art. Advantageously the system improves SAP communications by sending the simulated responses to the SAP server that indicate that an action has been carried out prior to the action actually being carried out. The GUIXT server then manages the actual carrying out of the action in a manner that is most efficient for the GUIXT server and GUIXT client while the SAP server can also move along with its own most efficient SAP communications processing.

Additionally the system improves SAP communications by dividing a SAP server request into a plurality of separate actions and then prioritizing each of the individual actions. In this fashion the GUIXT server can attend to the highest priority actions and provide timely responses to the SAP server and the GUIXT sever can ignore the lowest priority actions to which the SAP server does not require a response. A significant advantage in improved SAP communications is also realized by having the GUIXT server e.g. the previously described termination node module simulate responses to the SAP server for those actions that require a response to the SAP server but are not required in the context of the current workflow to be immediately attended to. Thus the GUIXT server e.g. the previously described termination node module responds to the SAP server prior to the completion of the task and in many cases prior to the task even beginning to be carried out by the GUIXT client or GUIXT server whichever has been assigned the particular task.

In the illustrated embodiment wireless communication device comprises an antenna system a radio system a baseband system a speaker a microphone a central processing unit CPU a data storage area and a hardware interface . In the wireless communication device radio frequency RF signals are transmitted and received over the air by the antenna system under the management of the radio system to provide a network communication interface that provides connectivity to a wireless communication network that can transmit voice or data communications.

In one embodiment the antenna system may comprise one or more antennae and one or more multiplexors not shown that perform a switching function to provide the antenna system with transmit and receive signal paths. In the receive path received RF signals can be coupled from a multiplexor to a low noise amplifier not shown that amplifies the received RF signal and sends the amplified signal to the radio system .

In alternative embodiments the radio system may comprise one or more radios that are configured to communication over various frequencies. In one embodiment the radio system may combine a demodulator not shown and modulator not shown in one integrated circuit IC . The demodulator and modulator can also be separate components. In the incoming path the demodulator strips away the RF carrier signal leaving a baseband receive audio signal which is sent from the radio system to the baseband system .

If the received signal contains audio information then baseband system decodes the signal and converts it to an analog signal. Then the signal is amplified and sent to the speaker . The baseband system also receives analog audio signals from the microphone . These analog audio signals are converted to digital signals and encoded by the baseband system . The baseband system also codes the digital signals for transmission and generates a baseband transmit audio signal that is routed to the modulator portion of the radio system . The modulator mixes the baseband transmit audio signal with an RF carrier signal generating an RF transmit signal that is routed to the antenna system and may pass through a power amplifier not shown . The power amplifier amplifies the RF transmit signal and routes it to the antenna system where the signal is switched to the antenna port for transmission.

The baseband system is also communicatively coupled with the central processing unit . The central processing unit has access to a data storage area . The central processing unit is preferably configured to execute instructions i.e. computer programs or software that can be stored in the data storage area . Computer programs can also be received from the baseband processor and stored in the data storage area or executed upon receipt. Such computer programs when executed enable the wireless communication device to perform the various functions of the present invention as previously described. For example data storage area may include various software modules not shown that were previously described with respect to and are executable by processor .

In this description the term computer readable medium is used to refer to any media used to provide executable instructions e.g. software and computer programs to the wireless communication device for execution by the central processing unit . Examples of these media include the data storage area microphone via the baseband system antenna system also via the baseband system and hardware interface . These computer readable mediums are means for providing executable code programming instructions and software to the wireless communication device . The executable code programming instructions and software when executed by the central processing unit preferably cause the central processing unit to perform the inventive features and functions previously described herein.

The central processing unit is also preferably configured to receive notifications from the hardware interface when new devices are detected by the hardware interface. Hardware interface can be a combination electromechanical detector with controlling software that communicates with the CPU and interacts with new devices. The hardware interface may be a firewire port a USB port a Bluetooth infrared laser or RF wireless unit or any of a variety of wired or wireless access mechanisms. Examples of hardware that may be linked with the device include barcode readers laser scanners data storage devices computing devices headphones microphones and the like.

Hardware interface may also be linked with device specific input mechanisms such as a laser gun barcode reader or RF reader. In one embodiment the hardware interface connects a barcode reader for use in a warehouse. In an alternative embodiment the hardware interface connects a scanning device for use in reading barcodes meters or other data producing indicia.

The computer system preferably includes one or more processors such as processor . Additional processors may be provided such as an auxiliary processor to manage input output an auxiliary processor to perform floating point mathematical operations a special purpose microprocessor having an architecture suitable for fast execution of signal processing algorithms e.g. digital signal processor a slave processor subordinate to the main processing system e.g. back end processor an additional microprocessor or controller for dual or multiple processor systems or a coprocessor. Such auxiliary processors may be discrete processors or may be integrated with the processor .

The processor is preferably connected to a communication bus . The communication bus may include a data channel for facilitating information transfer between storage and other peripheral components of the computer system . The communication bus further may provide a set of signals used for communication with the processor including a data bus address bus and control bus not shown . The communication bus may comprise any standard or non standard bus architecture such as for example bus architectures compliant with industry standard architecture ISA extended industry standard architecture EISA Micro Channel Architecture MCA peripheral component interconnect PCI local bus PCI Express PCI E Accelerated Graphics Port AGP or standards promulgated by the Institute of Electrical and Electronics Engineers IEEE including IEEE 488 general purpose interface bus GPIB IEEE 696 S 100 and the like.

Computer system preferably includes a main memory and may also include a secondary memory . The main memory provides storage of instructions and data for programs executing on the processor . The main memory is typically semiconductor based memory such as dynamic random access memory DRAM and or static random access memory SRAM . Other semiconductor based memory types include for example synchronous dynamic random access memory SDRAM double data rate synchronous dynamic random access memory DDR DDR 2 DDR 3 Rambus dynamic random access memory RDRAM ferroelectric random access memory FRAM and the like including read only memory ROM .

The secondary memory may optionally include a hard disk drive and or a removable storage drive for example a floppy disk drive a magnetic tape drive a compact disc CD drive a digital versatile disc DVD drive etc. The removable storage drive reads from and or writes to a removable storage medium in a well known manner. Removable storage medium may be for example a floppy disk magnetic tape CD DVD etc.

The removable storage medium is preferably a computer readable medium having stored thereon computer executable code i.e. software and or data. The computer software or data stored on the removable storage medium is read into the computer system as electrical communication signals .

In alternative embodiments secondary memory may include other similar means for allowing computer programs or other data or instructions to be loaded into the computer system . Such means may include for example an external storage medium and an interface . Examples of external storage medium may include an external hard disk drive or an external optical drive or and external magneto optical drive.

Other examples of secondary memory may include semiconductor based memory such as programmable read only memory PROM erasable programmable read only memory EPROM electrically erasable read only memory EEPROM or flash memory block oriented memory similar to EEPROM . Also included are any other removable storage units and interfaces which allow software and data to be transferred from the removable storage unit to the computer system . In one embodiment main memory and secondary memory may include various software modules not shown that were previously described with respect to and are executable by processor .

Computer system may also include a communication interface . The communication interface allows software and data to be transferred between computer system and external devices e.g. printers networks or information sources. For example computer software or executable code may be transferred to computer system from a network server via communication interface . Examples of communication interface include a modem a network interface card NIC a communications port a PCMCIA slot and card an infrared interface an RF interface and an IEEE 1394 fire wire just to name a few. Examples of hardware that may be linked with the device via the communication interface include barcode readers laser scanners data storage devices computing devices headphones microphones and the like.

Communication interface may also be linked with device specific input mechanisms such as a laser gun barcode reader RF reader or keyboard and or pointer device designed to collect user input. In one embodiment the communication interface connects a barcode reader for use in a warehouse. In an alternative embodiment the communication interface connects a scanning device for use in reading barcodes meters or other data producing indicia. In yet another alternative embodiment the communication interface connects a data collection terminal in a warehouse.

Communication interface preferably implements industry promulgated protocol standards such as Ethernet IEEE 802 standards Fiber Channel digital subscriber line DSL asynchronous digital subscriber line ADSL frame relay asynchronous transfer mode ATM integrated digital services network ISDN personal communications services PCS transmission control protocol Internet protocol TCP IP serial line Internet protocol point to point protocol SLIP PPP Point to Point Protocol over Ethernet PPPoE and so on but may also implement customized or non standard interface protocols as well.

Software and data transferred via communication interface are generally in the form of electrical communication signals . These signals are preferably provided to communication interface via a communication channel . Communication channel carries signals and can be implemented using a variety of wired or wireless communication means including wire or cable fiber optics conventional phone line cellular phone link wireless data communication link radio frequency RF link or infrared link just to name a few.

Computer executable code i.e. computer programs or software is stored in the main memory and or the secondary memory . Computer programs can also be received via communication interface and stored in the main memory and or the secondary memory . Such computer programs or modules when executed enable the computer system to perform the various functions of the present invention as previously described.

In this description the term computer readable medium is used to refer to any media used to provide computer executable code e.g. software and computer programs to the computer system . Examples of these media include main memory secondary memory including hard disk drive removable storage medium and external storage medium and any peripheral device communicatively coupled with communication interface including a network information server or other network device . These computer readable mediums are means for providing executable code programming instructions and software to the computer system .

In an embodiment that is implemented using software the software may be stored on a computer readable medium and loaded into computer system by way of removable storage drive interface or communication interface . In such an embodiment the software is loaded into the computer system in the form of electrical communication signals . The software when executed by the processor preferably causes the processor to perform the features and functions previously described herein.

Various embodiments may also be implemented primarily in hardware using for example components such as application specific integrated circuits ASICs or field programmable gate arrays FPGAs . Implementation of a hardware state machine capable of performing the functions described herein will also be apparent to those skilled in the relevant art. Various embodiments may also be implemented using a combination of both hardware and software.

Furthermore those of skill in the art will appreciate that the various illustrative logical blocks modules circuits and method steps described in connection with the above described figures and the embodiments disclosed herein can often be implemented as electronic hardware computer software or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules circuits and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled persons can implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the invention. In addition the grouping of functions within a module block circuit or step is for ease of description. Specific functions or steps can be moved from one module block or circuit to another without departing from the invention.

Moreover the various illustrative logical blocks modules and methods described in connection with the embodiments disclosed herein can be implemented or performed with a general purpose processor a digital signal processor DSP an ASIC FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor can be a microprocessor but in the alternative the processor can be any processor controller microcontroller or state machine. A processor can also be implemented as a combination of computing devices for example a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

Additionally the steps of a method or algorithm described in connection with the embodiments disclosed herein can be embodied directly in hardware in a software module executed by a processor or in a combination of the two. A software module can reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of storage medium including a network storage medium. An exemplary storage medium can be coupled to the processor such the processor can read information from and write information to the storage medium. In the alternative the storage medium can be integral to the processor. The processor and the storage medium can also reside in an ASIC.

The above description of the disclosed embodiments is provided to enable any person skilled in the art to make or use the invention. Various modifications to these embodiments will be readily apparent to those skilled in the art and the generic principles described herein can be applied to other embodiments without departing from the spirit or scope of the invention. Thus it is to be understood that the description and drawings presented herein represent a presently preferred embodiment of the invention and are therefore representative of the subject matter which is broadly contemplated by the present invention. It is further understood that the scope of the present invention fully encompasses other embodiments that may become obvious to those skilled in the art and that the scope of the present invention is accordingly not limited.

