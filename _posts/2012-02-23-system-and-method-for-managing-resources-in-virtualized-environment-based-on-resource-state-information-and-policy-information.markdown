---

title: System and method for managing resources in virtualized environment based on resource state information and policy information
abstract: The present invention discloses a system of managing resources in virtualized environment, including OSS and its associated NMS and EMS, service delivery platform, master, slave, network switches and shared storage devices. Virtual machines run on the slave. Service delivery platform is connected to the OSS, and sends a request to master for resources. Master is connected to network switch and slaves, and controls slaves and virtual machines running on slave. Slave is connected to network switch, shared storage device and TMN. Shared storage device is connected to network switch, slave and master. The disclosed invention can efficiently and reliably manage physical device resources (including servers, storage, network equipment, etc.) and virtual device resources (including virtual machines, virtual storage, virtual switches, etc.) centrally, and implements transaction-level management of all kinds of resources in virtualized environment through a distributed transaction processing method.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09430264&OS=09430264&RS=09430264
owner: Transoft (Shanghai), Inc.
number: 09430264
owner_city: Shanghai
owner_country: CN
publication_date: 20120223
---
The present invention relates to computer virtualization technology and applications and in particular to a system and method for managing resources centrally in virtualized environment.

At present the popular virtualization technology VMM Virtual machine monitor provides a virtual abstraction layer between hardware and operating system. VMM is also known as the host operating system. A virtual machine VM running on VMM is also called a guest operating system. These VMs can be regarded as isolated guest operating system which can share hardware resources. VMM allows multiple isolated virtual machines running on a single host thus improves server utilization reduces the cost of buying a server and improves the availability of hardware and applications. Therefore it becomes pretty hot recently in the IT industry. With the VMM technologies matured and widely used how to manage a large number of virtual machines in a pool centrally to deliver virtual resource service on demand for users is increasingly becoming the focus of attention.

Enterprises or organizations use a variety of methods to manage different types of resources in distributed computing environment including software resource hardware resource or a combination of both. Generally companies employ many administrators who are responsible for managing different types of resources. For example some administrators are responsible for the server host installation and management as well as a variety of software installation on the server resources such as operating systems applications and further update and maintenance the software. Thus for a large company they need to hire a large number of different system administrators to manage hundreds of computing systems in the organization. Enterprises enable administrators to efficiently fulfill their duties through allocating keys and access policies to individual administrator. In addition to the System Administrator role above the organization may arrange a group of system administrators only to manage a particular storage device. Among these administrators companies may further assign some administrators to manage storage servers geographically distributed in different network and so on. Similarly company may arrange some administrators to manage network access only. The group may still assign administrators duties in certain geographic location by specific user name and password.

Thus in a traditional network environment users getting access to specific resources in a system not only need to obtain a variety of permissions potentially from different levels of multiple administrators but also need to interact with higher level managers. In each instance request each system administrator may audit whether a user s request can be authorized. If not the request is passed to a higher level system administrator. This increases the burden of administrator. Although the burden can be solved by increasing the administrator levels the solution brings more administrative overhead.

This is especially true with the rapid increase in hardware performance The VMM can now make good use of these hardware capabilities to host a large number of virtual machines on a server. Each virtual machine is logically independent. It can be assigned a certain portion of the host memory and processing capabilities and can be easily separated from other virtual machines. It can even be isolated from host server on which the virtual machine run. For users on the network the virtual machine itself is a separate addressable computer system. Virtual machine can have a variety of functions as another server on the network for software or hardware testing and as a major computer system for thin client and so on. There are other advantages for the virtual machine such as easily hand created and hand deleted by administrators. Due to such flexible and powerful capabilities virtual machines are widely installed on a server numbered from ten to even hundreds thus expanding the computer systems in an organization tenfold or even a hundredfold. Hence the traditional layered management of administrators no longer afford to manage so many virtual machines. Further traditional management methods can not adequately manage the additional requests for virtual machine the licensing controls within each virtual machine and the operation of each virtual machine. This requires a centralized automated method for managing virtual machine.

Aiming at virtual machine management issues many large foreign companies and research institutions have launched their own solutions. VMWare s Virtual Center is virtual management software built on top of virtual platform which enables centralized management and resource coordination for distributed servers and virtual machines. It also includes dynamic resource allocation disaster recovery and so on. Oracle has also developed its own VM Manager virtual machine manager which can manage many virtual desktop pools and virtual machines in the pool. VM Manager provides web based access interface also uses a Master Slave system. For Xen virtual machine some management software is also developed e.g. virtual machine migration mechanism based on Xen is implemented by University of Cambridge of England. Denali project presided by University of Washington focused on providing virtual machine required for network services capable of running a large number of lightweight virtual machines in a separate physical server. Global PlanetLab an internet project platform used the Linux VServer Linux Virtual Server technology to provide global service nodes for users with each user owning a globally distributed node to run their own applications.

Many organizations research on applications of virtual machines used in a distributed environment. A large number of virtual machines can be managed in Xen based Parallax Project presided by Cambridge University including eliminating write share increasing the client s cache using the template images to build the entire system. Ventana system uses centralized storage to ensure multiple versions isolation and mobility of virtual services Researchers in American University of Florida firstly proposed virtual machine to be used in the traditional grid and other distributed environments and proposed grid service architecture based on virtual machines. Currently distributed computing based on virtual machine has become a hot research topic.

On the other hand the purpose of centralized management of virtual resources is to respond to user application requests quickly and efficiently especially for large number of concurrent requests. A transaction is a basic element used to build a reliable application and to ensure that all involved parties have been able to reach an agreement with output result. Traditionally a transaction has four fundamental properties known as ACID properties. Atomicity All changes to data are performed as if they are a single operation. That is all the changes are performed or none are done Consistency Data is in a consistent state when a transaction starts and when it ends Isolation results of all operations can t be shared outside until the transaction is committed Durability After a transaction successfully completes changes to data persist and are not undone even in the event of a system failure. When the application covers a plurality of distributed subsystems or the application is composed of a plurality of separate components the transactions can help the application handle failures in each separate blocks clearly.

The traditional transaction processing technology is mainly used for database system. However with the development of computer science and technology transaction processing concept has been introduced more widely into distributed network computing environment. Thus the field of distributed transaction processing emerges. The distributed Transaction means a transaction may involve multiple data storages each data storage is based on the blocks a lun logical unit number or a group of luns files local or remote file system or relational database operations. It is a distributed sequence of operations the data operated being distributed on different websites in the network in order to access data storage of the respective website. When an application has a unique function to access or update data in multiple transactional resources it should take advantage of distributed transaction where the application moves data from one database to another requiring a distributed transaction. The X Open organization defines the reference model of Distributed Transaction Processing DTP including Application Program AP Resource Manager RM Transaction Manager TM Communications Resource Manager CRM and communication protocols.

Virtual machine is a special resource unlike the general data resources. Each virtual machine has its own life cycle when the virtual machine powers off off it is stored on disk as a file when the virtual machine is in running state it is a computer system running separately assigned memory and processor power. A VM virtual machine instance may also require VM Virtual Machine LUN logical unit number Raid Redundant Array of Independent Disks vswitch virtual switch Nic NIC and other resources which in turn involves a variety of resource management. In order to ensure access to a variety of bottom layer resources especially the block level storage resources it is necessary to provide transaction level guarantees. Therefore distributed transaction management are introduced here.

The purpose of the disclosed invention is to overcome the deficiencies in the prior art to provide a system and method for managing resources in virtualized environment. The system can efficiently and reliably manage physical device resources including servers storage network equipment etc. and virtual device resources including virtual machines virtual storage virtual switches etc. centrally which provide infrastructure level services for external environments. The present invention implements transaction level management of all kinds of resources in virtualized environment through a distributed transaction processing method to ensure performance and security of resource access.

A system for managing resources in virtualized environment comprising OSS and its associated NMS and EMS service delivery platform master slave network switch and shared storage devices. At least one virtual machine runs on said slave wherein 

The said service delivery platform is connected with said OSS and makes a resource request to the master 

Said master is connected with said slave and network switch receives the service delivery platform requests which controls the slave and virtual machine running on a slave 

There is at least one said slave which is connected to network switch shared storage device and TMN and interacts with said master 

Said system for managing resources in virtualized environment wherein the said TMN includes EMS and NMS said NMS is connected with OSS said EMS is connected with said slave and the devices managed by said EMS include physical devices and virtual devices.

Said system for managing resources in virtualized environment above wherein each said slave comprises several virtual machines a VMM connected to the virtual machines and hardware devices connected to VMM. The VMM is connected to virtual machines in said slave and also connected to virtual machines in other slaves.

Said system for managing resources in virtualized environment wherein said VMM contains a vSwitch said hardware includes nic and said Nic is connected to vSwitch and network switches respectively. VM image and user file information are stored in said shared storage device.

Said system for managing resources in virtualized environment wherein master includes JSDL agent module Application Program resource manager and the transaction manager further comprising 

Said JSDL agent module parses user defined request in JSDL file and policy information decomposes application request into transactions and solves the resources required for each transaction execution and sends transaction requests to said application Program. JSDL file is transmitted to JSDL agent module from the service delivery platform using JSDL 

Said Application Program receives request from JSDL agent module defines transactions within transaction boundaries and access resources and specifies a series of resource operations 

Said Application Program receives request from JSDL agent module defines transactions within transaction boundaries and access resources and specifies a series of resource operations 

Said transaction manager controls the life cycle of transaction including transaction begin and transaction end and determines transaction scheduling and transaction routing based on transaction scheduling and information in resource manager.

Said system for managing resources in virtualized environment wherein said transaction manager includes a transaction monitor transaction monitor monitors the transaction unifies the transaction time through virtual time mechanism and puts transaction into the waiting queue.

Said system for managing resources in virtualized environment wherein said transaction manager further comprises a transaction scheduler determines the priority level of transaction and marks the transaction that has higher priority level 

determining whether the transaction can be performed and which slave the transaction can be performed on.

Said system for managing resources in virtualized environment wherein said transaction manager further comprises a transaction router which determines the transaction route 

Said system for managing resources in virtualized environment wherein said resource manager comprises a resource state machine which stores resource state information required by transaction performing.

Said system for managing resources in virtualized environment wherein the resource state information stored in said state machine includes virtual machine state the host state the memory state and network state.

Said system for managing resources in virtualized environment wherein said resource state machine comprises a state machine controller detector controller comparators clock registrar and virtual machines state machine table said detector controller and comparators check and compare states and its transition said state machine controller obtain required functions by configuring registrar.

Said system for managing resources in virtualized environment wherein the lifecycle of a virtual machine includes four main states Running Off Paused and Sleeping which are stored in said virtual machine state machine table wherein running state further includes user defined programmable states.

Said system for managing resources in virtualized environment wherein said resource manager comprises a resource reference model which represents mapping relationship between resource unified identifier and real resource address using a metadata of tree structure and creates resource reference relationship.

Said system for managing resources in virtualized environment wherein said resource reference model comprises resource reference table and resource information table wherein 

said resource reference table includes the resource identity resource description and resource metadata. Each resource is assigned a unique identifier so that it can be located by resource name and global resources can be integrated into a logical entity. Said metadata information includes logical address information of resource where the resource is referred layer by layer through a distributed hash table until the real location of the resource is found 

said resource information table stores various resources description information including network resources storage resources server resources and so on.

Said system for managing resources in virtualized environment wherein said resource manager further comprises a resource management module which is used to manage resource access and configuration.

Said system for managing resources in virtualized environment wherein said resource management module includes resource access authentication access control and resource configuration information.

A resource manager agent module connected with said resource manager reports resource state information to master using TCP protocol 

A transaction implementation module connected with said transaction manager is responsible for transaction commit 

A Libvirt module connected with said transaction implementation module provides a common API for common functions implemented by VMM.

Said system for managing resources in virtualized environment further comprises host agent DFS API and network API connected to master wherein 

Host agent reports virtual state information in slave to master and updates master as resource state changes 

Said system for managing resources in virtualized environment wherein said master and several slaves are in a group several groups are in a data center and the order of resource reference is from the data center to a group from a group to the slave and then to the virtual machine and finally to the virtual machine hardware or from the data center to a group from a group to a slave and finally to the physical hardware on slave 

A method for implementing system for managing resources in virtualized environment uses distributed transaction process to manage resource in a virtualized environment comprising 

Running transaction in a virtual machine. The execution of the transaction needs supportive virtual machine resources server resources network resources and storage resources 

Transaction Monitors Monitor transaction request then starts transaction scheduler to look up resource state information in resource state machine of resource manager 

The system determines whether the transaction can be implemented according to the state of resources and strategy.

Said method for implementing system for managing resources said determining transaction can be executed by resource state and strategy further comprises 

After determining resources are available transaction scheduler determines which slave a transaction should be executed on based on policy 

Back up files to ensure atomicity of transaction lock files to support transaction isolation thus ensuring two phase commit in file environments.

Said method for implementing system for managing resources further comprising After a transaction is committed the resource state information resource routing information and resource allocation information are changed. Resource manager agent module updates the master.

Set timing mechanism so that when the transaction runs beyond the set time execution of the transaction will be completely terminated.

User defines policies comprising multiple users multiplex the same app The word multiplex means share an expensive resource in software industry. This word originates from telegraphy and telephony industry. an app corresponds to a domain several components are under one domain multiple components multiplex a virtual machine a virtual machine uses multiple physical resources through the external Monitor to monitor the physical state of the resource 

The benefits of the invention The disclosed invention uses master slave architecture to manage virtual machines there are a master and several slaves in a group master runs on a host separating from slave and virtual machine don t run on this host. When the slave has adequate performance master can also run on the slave. There are a number of virtual machines running on a slave master can manage slave and virtual machines CENTRALLY in a group. User sends requests for the virtual machine and the system can complete a variety of user requests for the virtual machine.

Distributed Transaction Processing DTP architecture is introduced to the management core module master to handle large scale and parallel transaction requests. The transaction manager is responsible for transaction monitoring scheduling routing communicating and submitting. Resource Management module is responsible for resource authentication access control and security. Virtual machine state machine can guarantee concurrent operations implementation and compromise resource conflicts effectively. Resource reference model stores the resource state information resource usage information and resource location information. Resource managers provide API for the transaction monitor. Agent in slave reports a variety of resource information to master and information on the master is updated in real time. The system can efficiently and reliably manage virtual machine resources virtual storage resource and virtual network resources centrally thus provide infrastructure level services to external environments.

Refer to a general view of the disclosed invention reflecting the relationship between management module and resources.

Resources here refer to the physical device resources and corresponding virtual device resources which can be built through virtualization technology.

Physical device resources include computing resources such as servers storage resources such as memory and network resources such as switches I O etc. . One or more particular preferred embodiments of the invention will be described in detail.

A system of managing resources in virtualized environment includes OSS and its associated NMS service delivery platform master slave network switches and shared storage devices . There is at least one virtual machine running on slave service delivery platform is connected to the OSS and sends a request to master for resources Master is connected to network switch and slave and controls slave and virtual machines running on slave There is at least one slave . Slave is connected to network switch shared storage device and TMN and interacts with master . Each slave includes several virtual machines VMM Virtual Machine Monitor program connected to a number of virtual machines and hardware devices connected to VMM . VMM is connected to virtual machines in slave and also connected to virtual machines in other slaves. Shared storage device is connected to network switch slave and master TMN comprises NMS Network Management System and EMS Element Management System NMS is connected with OSS EMS is connected with slave wherein NMS controls the relationship among network elements for the entire network and is responsible for interoperability among network elements EMS manages a group of network element including physical and virtual devices. There is a vSwitch virtual switch in VMM hardware includes CPU Memory RAM Nic NIC and HBAs host bus adapter Nic is connected to vSwitch and network switches respectively HBAs is connected to the shared storage device VM image virtual machine images and user file information are stored in shared storage device wherein virtual machine is controlled by the VMM and share hardware resources through the VMM . vSwitch is a software implementing logic switch with multiple ports. Multiple virtual machines on different slaves can be connected with vSwitch and the vSwitch is also connected with Nic.

In the disclosed invention OSS can be combined to manage resources which is widely used in telecommunications. OSS is a computer system used by telecommunications service provider and it refers to network system operating telecommunications network. OSS can support some processes such as network inventory maintenance service provision network element configuration and error management. Operations can be managed by OSS to smooth the operational privileging. Telecommunications Management Network TMN as a reference model of operating support systems OSS used by telecommunications service provider is proposed by M.3000 under the recommendation of ITU T. The bottom layer of TMN is EMS and NMS is the upper layer of EMS . NMS controls the relationship among network elements in entire network level and is responsible for connection interaction and interoperability among network elements. EMS is responsible for the management of individual network elements such as setting getting NE attributes and sending commands to the network element. EMS is a equipment management subsystem that manages a group of devices from the hardware viewpoint wherein the devices include not only physical devices but also virtual devices such as VM Virtual Machine . However EMS does not care about service related VM operations such as cloning. It only concerns several aspects fault configuration performance and security. The hardware is programmable which makes the partitioning of hardware resources changeable and can be partitioned by NMS EMS etc. OSS manages multiple NMS while NMS manages multiple EMS . In an embodiment of the disclosed invention OSS NMS EMS as additional external components provide resource management support for the main body of the disclosed invention. OSS is connected with the service delivery platform . Service delivery platform is used to integrate the capabilities of communication technology and information technology as well as the creation of services far beyond the boundaries of technology and network. Service Delivery Platform generally refers to service delivery in a particular technology or network domain such as web IMS IP Multimedia Subsystem IPTV IP TV mobile TV and so on. Service delivery platform may typically provide service control environment service creation environment service orchestration and execution environment as well as media control addressing and even other low level communications capabilities abstraction. In the disclosed embodiment of the invention the service delivery platform is an additional external component while the main body of disclosed invention can accept all requests from service delivery platform . A small amount of interaction requests from Service Delivery Platform is sent to EMS including the following queries which server master is and who the backup server for master is. Master is a program that runs on a separate server or shares a server with virtual machines as long as the server s performance is adequate. Virtual machines can not run in master . In a group there is only one master . Master can manage multiple slaves in a group and multiple virtual machines on each slave and all the virtual machines . Transactions either a read or write transaction go through master . The various operational functions to virtual machine are accomplished through master such as starting the virtual machine shutting down the virtual machine increasing the virtual machine deleting the virtual machine displaying the information of virtual machine and so on. Master is also responsible for managing the various image information of virtual machines configuration information identity information of VM etc. Master works in the scope of VM instance. Because running VM instance requires server storage or virtual storage network or virtual network resources VM image also requires storage device. Master manages these network and storage resources including resources reference as well as error messages reporting to master. Master is connected with slave and the request passes through master to the slave next. Slave is also called server host or node . Application and operating system in virtual machine are running on vCPU virtual CPU vStorage virtual memory and virtual I O virtual input output devices facilities and are assigned with a certain percentage of CPU processing power storage capacity I O traffic of the low level hardware through VMM . vSwitch is software implementing logic switch with multiple ports equivalent to a physical network switch. vSwitch is connected with multiple virtual machines in different slaves and connected with real Nic . Nic is connected to the real network switch and network switch is connected to multiple hosts. In one or more embodiments of the disclosed invention in general a back up network switch is set up for failover of single network switch . Virtual Disk VD is used as the standard file system in the virtual machine which provides block level interface as well as physical disks. The advantages of VD are compatibility versioning isolation encapsulation etc. These can also be achieved through the network file system. Disk storage in the virtual machine may be mapped to certain files in the shared storage device via HBAS and can also be mapped to files in storage devices in accessible hardware or storage devices in accessible hardware directly. LUN is scsi command execution unit in shared storage. For example network storage devices may include NAS Network Attached Storage and SAN Storage Area Network devices or Raid Redundant Array of Independent Disks .

Refer to which shows a schematic diagram of one of the disclosed invention taking the master and slave as an example. Master includes JSDL Job Submission Description Language agent module Application Program resource manager and the transaction manager wherein JSDL agent module parses user defined request in JSDL file and policy information decomposes application requests into transactions and computes the resources needed for each transaction execution. JSDL agent module sends transaction requests to said application Program . JSDL file is transmitted to JSDL agent module from the service delivery platform using JSDL. Application Program receives request from JSDL agent module defines transactions within transaction boundaries and accessible resources and specifies a series of resource operations. Resource manager manages computer resources centrally including host resources virtual machine resources storage and network resources and is responsible for unified resource location and safety 

Transaction manager controls the life cycle of transaction including transaction begin and transaction end and determines transaction scheduling and transaction routing based on transaction scheduling and information in resource manager and eventually commit transaction. The transaction manager includes transaction monitor the transaction scheduler and transaction routers wherein transaction monitor monitors the transaction unifies the transaction time through virtual time mechanism and puts transaction into the waiting queue. Transaction scheduler calculates needed resources for the transaction determines the priority level of transaction and marks the transactions of higher priority. Transaction scheduler determines transactions that may operate concurrently marks them and plans the sequence of operations using algorithms and strategies. Algorithms and strategies are common for transaction scheduler in general. Some public algorithms are used in the disclosed invention such as the fixed priority first FPF scheduling algorithm and the highest priority preemptive scheduling algorithm Transaction scheduler determines whether the transaction can be performed and which slave the transaction can be performed on. Transaction Router determines the transaction routing when a slave is unavailable the transaction will be routed to another available slave by router . Resource manager includes a resource state machine the resource management module and the resource reference model wherein Resource state machine stores resource state information required by transaction processing. The resource state information stored in state machine includes virtual machine state the host state the memory state and network state 

Resource management module manages physical and virtual resources uniformly. Resources managed by resource management module include resource access authentication access control and resource configuration information Resource Reference Model uses metadata table with a tree structure to represent mapping relationship between resource unified identifier and real location and creates a resource reference relationship. Resource manager proxy module which is connected with Resource manager reports resource state information to master through TCP Transport control protocol protocol and resource location information to master through CEPH ext Transaction implementation module which is connected with the transaction manager is responsible for the transaction commit Libvirt modules which are connected with the transaction implementation module provide a common API for common functions implemented by VMM.

The layer concerns only commercial logic and knows nothing about the specific resources beneath it in the diagram. Application Program then transmits the global transaction to transaction manager which comprises Distributed Transaction Monitor the transaction scheduler and the transaction router . Application Program communicates with transaction manager via an API application programming interface . Distributed transaction monitor in transaction manager monitors the transaction request puts the transaction into the waiting queue and initiates transaction scheduler scheduling transaction. Transaction Monitor is responsible for assigning a unique tag to the transaction and recording the lifecycle from transaction begin to transaction commit. When the transaction commits the transaction monitor eliminates collection of read and write from the transaction record defines blocked transaction needed to wake up gathers collection of addresses eliminates defined transaction from the transaction index and address index and retries the transaction blocked. Transaction scheduler is responsible for transaction level scheduling. First it determines the priority level of transaction according to a certain scheduling algorithm and schedules transaction in the queue. Then Transaction scheduler communicates with the resource manager looks up resource state information in resource state machine through API provided by resource manager including virtual machine state information host state information store state information and network state information. These state machines are stored in memory using a distributed hash table DHT format. Resource state machine is used to implement concurrency operation and to transform the distributed management to centralized management. Resource reference model stores resources routing information metadata information and resource identity information. Resource management module stores a variety of resource management including resource allocation information. Distributed transaction scheduler determines whether the transaction can be performed based on the resource state machine information and resources required for

executing the transaction. If transaction can not be executed the transaction is rejected. Otherwise transaction execution is continued. Since running a VM instance requires virtual machine resources host resources storage resources and network resources at the same time the information of these resources determines the performance of the VM instance. Such information is stored in resource state machine described in detail below. After transaction is rejected the rejection message is returned to the client the transaction execution terminates failed transaction . If transaction is able to continue the distributed transaction scheduler determines which VM in slave the transaction is routed to in accordance with resource routing information in resource reference model and certain strategies. Transaction Router transmits transaction to the running slave using routing protocol. Transaction is implemented in slave . Libvirt module is called to operate virtual machine . Transaction is executed in a virtual machine in slave and execution of the transaction consumes server storage and network resources. After transaction execution is completed data stored in resource manager is modified. Afterwards transaction is submitted. In the first phase the transaction manager notifies all relevant data store agent in resource manager . The transaction manager then submits or pre submits their transaction branch and confirms whether all relevant data store can submit their transaction branch. When data storage receives pre submit notice if its own transaction branch can be submitted the data storage records operation information of transaction branch and responds to transaction manager with an agree to submit message during which time data storage can t do any more operation to the transaction branch. However the transaction hasn t been submitted yet and operation to release the shared resource has not yet been performed by the data storage the shared resource is in a locked state. If data store can t submit their own transaction branch it rolls back all operations releases a lock on the shared resource and returns a failure reply to the resource manager . Here we need to write two phase commit support function on the transactional store namely to support the ACID. If it s a read transaction there is only one phase commit because the read transaction does not change the state of data resources and the resource need not be locked to wait for the second phase of commit. In the second phase the transaction manager reviews all pre submission results returned by data storage. If all data storages are pre submittable transaction manager demands all data storages to make a formal submit so that the global transaction is committed. If any data storage fails to pre submit transaction transaction manager demands all other data storages to roll back their operations so that the global transaction is rolled back releasing all resources with entries in virtual resource state table resource management forms and resource references form in resource manager .

Transaction Manager TM manages distributed transaction is responsible for managing the lifecycle and operations of the distributed transaction object spans multiple resource managers manages the two phase commit and decides whether to commit or roll back distributed transaction through negotiation. Transaction Manager TM comprises Distributed Transaction Monitor the transaction scheduler and transaction router wherein Transaction Monitor is composed of service interface monitor controller . Monitor Controller monitors the transaction request mainly determines whether the request can be executed and decides how to provide services in a distributed system. Service interface is an interface between Application Program and transaction manager . When a transaction arrives the service interface creates a connection to the transaction manager for the transaction when the transaction ends the service interface closes the connection. In the disclosed invention there are three results the transaction is rejected the transaction is committed or the transaction is rolled back. In one or more embodiments of the disclosed invention there are two categories of requested transactions namely virtual devices transactions and virtual storage transactions. The virtual device transaction refers to operation to virtual devices including virtual machine virtual storage device and virtual network device. Virtual storage transaction refers to operation to store files. Monitor Controller is responsible for measuring transaction performance tallying the statistics of transaction arrivals successes and failures and putting transactions in the wait queue. Transaction Monitor is primarily responsible for managing transaction operations transaction identity transaction life cycle and two phase commit. Transaction operations refer to the operations actions within a transaction and the data sources these operations will act on. Transaction Identity Management is responsible for assigning a unique identifier to each transaction which can be implemented by tables in order to distinguish transactions and to facilitate the transaction management. Transaction identity management module is responsible for transaction management in the disclosed invention. Transaction Lifecycle Management module is responsible for the whole lifecycle of transaction from transaction arrival transaction refuse transaction execution to transaction commit or transaction roll back. Transaction two phase commit management is responsible for managing the two phase commit of transaction. Since the disclosed invention uses a resource state machine to determine whether the transaction can be executed the probability to roll back a transaction is very low. Since data sources in the disclosed invention are a data table or file system both of which do not support two phase commit the disclosed invention uses a method of file lock and backup to ensure transaction atomicity and isolation thus supports two phase commit. Transaction scheduler schedules transaction. It first determines the priority level of transaction through contract algorithm. The resource consumption differs for different transactions. Transaction scheduler determines the priority level of transaction according to the resources a transaction may consume. This is implemented by contract algorithm in the disclosed invention. Transaction scheduler determines whether the transaction can be executed based on the resource state information in resource manager as well as the location of VM i.e. which VM in which slave the transaction can be performed. Transaction router transmits transaction to running slave using routing protocol. If there are two virtual machines running on the same host shared memory can be used to upload information. Transaction Router is connected to the transaction implementation module in slave .

Refer to which shows the details of resource manager of the disclosed invention. Resource manager is responsible for managing resources required for running virtual machine instance including virtual machine VM host storage and network resources. Resource manager provides data management service for running virtual machine instance and to ensure data integrity and consistency. Resource manager provides API XA Resource to transaction manager XA Resource in order to control resource start and stop. Transaction manager implements the two phase commit protocol via the interface. In one or more embodiments of the disclosed invention the data resources are stored in a table the table is stored in memory. Wherein State machine can go through all states by comparator or external events. Resource state machine includes virtual machine state machine not shown in the figure the master state machine not shown in the figure the storage state machine not shown in the figure and network state machine not shown in the figure . Resource state machine acts as a resource controller to determine whether the transaction is performed. If not the transaction is stopped in the first round if executed continues the following actions. Resource state machine can also transform distributed management to centralized management and enable implementation of concurrent transactions to protect core resources. Resource state machine comprises a state machine controller and detector controller comparators clock registrar virtual machines state machine table . Detector controller and comparators check and compare states and its transition. Resource state machine can change states based on the internal clock function or external asynchronous events. The state machine controller can obtain more functions by configure registrar which can configure the resource state machine better. The lifecycle of a virtual machine includes four main states Running Off Paused and Sleeping which are stored in virtual machine state machine table wherein running state further includes user defined programmable states.

Resource reference Model includes resource reference table and resource information table wherein Resource reference table includes the resource identity resource description and resource metadata . These items provide an abstraction layer to time slice memory resources directly find the resources below and play a role of routing. Resource reference table assigns a unique identity to each resource which can be implemented by global identity system. Wherever resources are moved to they can be located by resource name. Thus global resources form a logical entity as a whole. Resource information can be stored by table but not database because database is a high level and structured storage which is not suitable for distributed storage. Metadata information includes logical address information of resources where resource is referred layer by layer through a distributed hash table until the real location of the resource is found. Host Agent Dfs API Distributed File System API and network API application programming interface are also included in the wherein Host Agent reports state information of virtual machines running on slave to master and also reports state transition information to master Dfs API is the interface between storage resource and master Network API is the interface between network resource and master . Resource Information table stores various resources description information. These resources are needed to run the virtual machine instances including network resources storage resources server resources and so on. Server resources mainly include CPU resource memory resource and other device resources . The information of these resources is notified by host agent to resource manager in master . Host agent will inform updated information to resource manager as resource state changes. Storage resources include disk resource Raid resources Lun logical unit number resources etc. The information of these resources is notified by Dfs API to resource manager in master . Storage resource information in resource manager is updated when storage resource changes. Network resources include switch Resource vSwitch resource and Nic resource which is provided by the following network API in network . Updated information is reported to resource manager as network resource state transmits or an error occurs. Resource management module stores mainly a variety of resource management information including access to the resource identity authentication resource access control configuration information and so on. Resource configuration is used to describe how many virtual machines run on a host etc. Updated state information is reported to resource configuration as host state and virtual machine state change.

In the disclosed invention master and certain slave are in one group several groups are arranged in a data center not shown in the figure the resource references are ordered from a group to slave from slave virtual machine from virtual machine to hardware or from the data center to a group from one group to a slave from slave to the physical hardware finally such as CPU Memory I O and so on. Each resource is assigned an unique identifier Resource can be referred by means of pseudo random number.

A method for managing resources in virtualized environment in the disclosed invention which uses distributed transaction processing to implement resource management in virtualized environment includes 

Running transaction in a virtual machine the execution of the transaction not only need virtual machine resources but also need server resources network resources and storage resources to support transaction execution 

Transaction execution changes the state of various said resources for example by executing transactions such as power off the virtual machine the virtual machine state changes at that moment.

When the transaction monitor monitors transaction requests transaction scheduler is started to look up resource state information in resource state machine in resource manager 

Determine whether the transaction can be executed according to the state of resources and strategies namely 

If there is no available resource the transaction is refused to execute if the transaction is rejected the transaction is put to the wait queue for the next execution 

If resources are available the transaction will proceed. After the transaction is committed the resource state information resource routing information and resource configuration information will change resource manager agent module reports updated information to the master .

Determine what resources are available the transaction scheduler determines on which slave a transaction should be executed based on policy 

Backup files to ensure support atomicity of transactions. Lock files to ensure two phase commit of transaction in file environment.

Also included is Set the timing mechanism when the transaction reaches beyond the set time execution of the transaction will be completely terminated.

Client defines policies strategies multiple users use the same app application an app corresponds to a domain there are several components are under one domain multiple components multiplex a virtual machine a virtual machine uses multiple physical resources through the external Monitor not shown in the figure to monitor the physical state of the resource 

See which is the entire flow from the user request to the execution results as a second part of the disclosed invention and the whole process of transaction execution is illustrated. Service Delivery Platform SDP submits the user s request and the request is sent to JSDL agent module in master using JSDL protocol. Application Program transmits the global transaction to transaction manager transaction monitor in the transaction manager monitors the transaction request assigns a unique identifier to the transaction records the life cycle of the transaction and puts the transaction into the waiting queue. Meanwhile transaction scheduler is initiated to schedule transaction. Transaction scheduler determines transaction priority different transactions can have different priority levels. For example some heavy duty transactions may consume more resources hence these transactions can be executed after other lightweight transactions are executed. After determining the priority level of transaction the transaction scheduler views the state of the virtual machine in resource state machine as well as host storage and network resource state information in the resource reference model to determine whether the transaction can be performed. If the transaction can be executed transaction routing is determined in accordance with metadata information for routing. Then the transaction is submitted using routing protocols.

Step JSDL.doc translates requests into multiple transactions and calculates the resources required for each transaction execution.

Step trigger scheduler determines the sequence of transaction execution using algorithms wherein the algorithm refers to general algorithms mentioned above.

Step determines whether the transaction can be executed if the transaction can be executed then go to step otherwise go to step .

Step determine which slave the transaction is routed to in accordance with resource routing information in resource reference model and certain scheduling strategies.

Step determine whether the transaction is a read transaction if it is go to step otherwise go to step 

Step RM Agent reports updated resource information to master and information in the resource reference tables RRT and resource state table RST in RM Resource Manager is updated in real time 

See . shows the flowchart of the master . PublicReceiver in master receives a transaction request then sends the transaction request to TransaHandler. It determines if there is read request information from the user in Result Queue and if so it views the results and returns results to the client. If it is a write transaction then PublicReceiver puts transaction into the Waiting Queue filters the transaction by TransFilter and puts the transaction into transmit queue after filtering. Then the transaction is sent to the slave. There are categories of data in the system as follows 1 Never changing Data such as Host uuid Universally Unique Identifier never change since it is generated. 2 Rarely changing Data such as cpu of VM memory of VM virtual machine and other attributes may change but do not regularly change. 3 Frequently changing Data such as the state of VM change often. For different data different strategies are adopted to deal with them. For the first and second category of data they may be kept persistent in the system and synchronized to local using a simple synchronization strategy. For the third category of data don t keep them persistent locally but adopt caching strategies to reduce the number of visits to the back system. An optimal solution is maintaining a number of socket objects forming a socket pool getting a socket object from the socket pool every time you need to send commands and returning to the pool after use. Thus by maintaining a small amount of sockets the performance is improved. Detailed steps are as follows 

Step determine whether the transaction is successfully filtered if yes go to step otherwise the transaction back to 

Step Slave handles the transaction and returns the transaction execution results to Private Receiver 

Step determines whether the virtual machine information required is found and if so go to step otherwise the change to step 

Steps return the result to the client through the Result Sender. The client means that service delivery platform SDP in the disclosed invention.

Master transmits transaction to slave slave call libvirt to operate the virtual machine and the implementation results is returned to the master.

Slave shows the flowchart of the operation of the read transaction. Execution process steps of write transaction are as follows 

Step determine whether what is needed to read is Cached VM cached virtual machine state information if yes turn to step otherwise go to step 

Transaction Monitor is primarily responsible for controlling the life cycle of transaction from transaction arrival to transaction commit or rollback. When the transaction arrives record the transaction as arriving state when the transaction is determined by the resource that it can not be submitted by the state machine record the state of transaction as failure state and clear up transaction records When the transaction is executed transaction state can be set to success or failure state and clear the transaction log. Specific process is as follows 

Step determine whether or not the transaction is rollbacked and if so turn to step otherwise go to step 

It is helpful to divide multiple requests into several categories each category with a different priority e.g. some lightweight requests take up little resources and time hence can be set to execute first. If a different priority is assigned to each request then since the algorithm itself is consuming CPU cycle time this is not an optimal compromise. Following metrics are considered the process thread level the consumption of CPU Memory and hard disk resources.

Step determine whether the transaction can potentially be executed concurrently. If so turn to step otherwise go to step 

Step determine whether the transaction is a circular wait transaction and if so turn to step otherwise go to step 

A state transition diagram of the virtual machine is implemented in a form of network logic. Finite state machine is a very abstract software design patterns and an modeling tool for object and behavior. Its main function is to describe the state sequence of objects in its life cycle and how to respond to messages and events from outside world. Different from common design model if a programmer wants to add a finite state machine in software they need to write extra code as a logic control portion. There are two kinds of finite state machines deterministic finite state machines and non deterministic finite state machine. FSM finite state machine are often used to model reactive systems. Reactive systems respond to external messages and internal events as driver systems. In the deterministic reactive systems the sequence and value of input messages and events determines the response order of the system. Analyze each state to see if it should be decomposed. Through a state hierarchy structure a large state is decomposed into a large number of sub states with the layers of decomposition based on complexity of the system then gradually refine until all the states are inseparable and state transition relationships are solid. Here the state machine is used to add a layer of resource controller in the architecture which can handle concurrent transactions and transform distributed processing to centralized processing. In one or more embodiments of the disclosed invention state machine includes the following states Running Off Sleeping Paused state and there are transition mechanisms and lifecycle among these states. Running state means the virtual machine is running. Off state means virtual machine is shut down. For Sleeping state image all machines stop and leds flash only occasionally which does not need a shutdown state. For a real machine Sleeping state is different from state Off but for VM since no resource is occupied the virtual machine needs to be shutdown. Paused state is a suspended state it may still consume some resources so virtual machine need to be shut down. A sub state of running state is a programmable state defined by user such as an interrupt etc and related to specific needs. The reason that this programmable state is added in our invention is when virtual machine is running the user can define a variety of strategies each of these strategies such as interrupts etc is programmable.

State machine transition route algorithm decides which state the virtual machine transits to. When the action occurs some actions causes the virtual machine transits to another state while other actions does not make the virtual machine state transit. State transition table shows the state transition relationship through the table. When the virtual machine is at state running the state can be transited to state Paused by Suspend operation and virtual machine state can be transited to state Off by power off operation. This also means state Running can be transited to other three states by different operation. When Virtual machine is at state Running it can also be migrated to other hosts and keep the same state still. When a virtual machine is at state Paused it can be transited to state Running by Resume operation and be transited to state Off by power off operation. When a virtual machine is at state Sleeping it can be transited to state Running by wakeup operation and be transited to state Off by power off operation. When a virtual machine is at state Off it can be transited to state Running by start operation. In the disclosed invention the transition between states can be completed by looking up the table. When new state and control logic need to be added to state machine it only need to modify information in the state table or the table can even be dynamically modified. For simple state machine this is very desirable but the modifying overhead may affect the speed. Migration table is a data table describing VM migration. Traversing such a table consumes time and requires a lot of code to support. A timing engine is able to explain created migration table. This timing engine is also responsible for finding and matching migration calling the response to the action and changing the state. The benefit of such implementation is the logic of state machine is controlled in one place centrally and the action and usage are separated allowing change to the state machine logic dynamically. 

Reference can be implemented by a distributed hash table DHT. In a large scale resource indexing and lookup DHT is much faster than relational databases. In order to achieve the resource reference the uniform resource identification system is used here with each resource required for reference having a unique identifier. Identity system is used at all resource tables in the disclosed invention and entire system is unified through the identity system together. Reference model and metadata are closely related the two are directly connected. Reference model is achieved by dfs distributed file system in which management information for all nodes are stored.

The logical route is implemented by the ID system in which the name and IP are separated and network save can be achieved. Each component marks an IP address equivalent to a layer of overlay in which logic diagram and logical approach are created by the ID system. In one embodiment of the disclosed invention the two sets of lamp and two sets of instance are configured where one set is for user and another set is for developers to use.

The disclosed invention uses a virtual machine state machine to simplify the standard DTP when the transaction request arrives first determine whether the transaction can be executed by the state machine. If the transaction can not be executed the transaction is rejected so as to ensure the probability of rollback is almost 0 after transaction execution. However inevitably the exception will occur during the transaction execution resulting in part of transaction branches failing. Here again a simulation approach to file system is used to support two phase transaction commit. The traditional transaction processing technology is mainly used in database system. The file system does not support transaction processing which makes the multiple data storage transaction processing extremely complicated. Therefore a simulation approach of file system is used to support two phase transaction commit.

Step determine whether transaction can perform based on the resource state of the state machine. If so the operation proceeds to step otherwise the process proceeds to step 

Step refuse to execute the transaction thus transaction will not proceed to the commit stage. In this case the transaction is rejected in advance 

Step transactions execute in a virtual machine. The execution process will consume host resources network resources and storage resources 

Step the transaction manager determines whether the transaction execution end and if so proceeds to step otherwise proceeds to step 

Step determine whether all the data storage can be submitted. If so proceeds to step otherwise the process proceeds to step 

The figure describes the logic relationship and level of executing user s request wherein resources are involved from the user application transaction domain the virtual machine instance and physical infrastructure. Their positions can be uniformly defined. User ID refers to the user number assigned to user after user log in. APP refers to application the user request. Domain refers to a logical network for example in a company different departments use different virtual network namely domain. Component refers VM instance.

As can be seen from the figure user defines the policies. An user can request multiple applications simultaneously UserID sends requests to applications App and App multiple users can multiplex an app UserID and UserID multiplex an application App an app corresponds to a domain App corresponds to Domain Multiple components are under one domain Component and Component are under Domain a virtual machine instance runs on a component component refers to the VM beneath it. A component can refer to a VM a VM can be referenced by multiple components Component refers to VM and both component and Component refer to VM thus a VM can be used simultaneously by multiple domain. From the user s perspective a VM can only be used in a Domain VM don t cross domain to ensure logical isolation among domains. VM runs on physical resource and Monitor is used to monitor the state of the physical resource. Users can reference the physical resources beneath them through ID system.

Meanwhile the bottom up reference can be achieved If an error occurs to certain physical resource the error need be reported to the user which can be achieved by layered resource strategy.

As shown the architecture is divided into IaaS PaaS and SaaS layer. IaaS layer is infrastructure resource layer PaaS is the platform layer and SaaS is the application service layer. Virtual machines and physical resources resides at the bottom layer namely IaaS as they are media on which user application can run. This is achieved by creating logic hierarchical relationship between virtual machines and their physical resources to run on. The Domain and Component in the middle of the architecture reside at PaaS layer. Domain refers to a virtual network such as the financing department and marketing department of a company using different virtual networks. Component refers to the VM instance where multiple virtual machines can run in Domain so that logical correspondence between virtual machine instance and Domain can be built. The medium of virtual machine instance is virtual machine hence logic relationship between VM and domain can be built. A VM can be used by multiple components so that component can belong to a single domain or to multiple different domains . Therefore a virtual machine can be used by multiple domains but from the user s viewpoint a domain is separated from each other without any connection. SaaS is positioned as the top layer including the user ID and the application. A user is an initiator of the application who defines a variety of strategies of usage. A user can use multiple applications and an application can be used by multiple users. This is the multiplexing of application also known as multi tenant.

In summary the present invention discloses a method for managing virtual machines virtual networks and virtual storage resources centrally to respond to large scale concurrent transaction requests and to provide virtual infrastructure resource service on demand for user.

Specifically the user sends the application request on a web browser. The request reaches the core management module. The management core module analyzes the user s request calculates resources required for executing the request and submits the request to the virtual resources beneath it to be executed and returns the result to the client after the execution complete.

Large scale application requests can be executed concurrently. Distributed transaction processing system is used to avoid the resource use conflicts. The virtual machine state machine can be used to execute concurrent transactions. A resource location system is required to locate logically the virtual machine and the storage unit and for further security purposes.

The above embodiments are provided to those familiar with the art to implement or use the invention utility model. The person skilled in the art may make various modifications or changes based on the above described embodiment in the case of not departing from the idea of the invention utility model and thus protection for the present invention utility are not to be limited to the above embodiments but should be extended to maximum range of innovative features consistent with the claims mentioned.

