---

title: System and method for providing an indication of randomness quality of random number data generated by a random data service
abstract: A system and method for providing an indication of randomness quality of random number data generated by a random data service. The random data service may provide random number data to one or more applications adapted to generate key pairs used in code signing applications, for example. In one aspect, the method comprises the steps of: retrieving random number data from the random data service; applying one or more randomness tests to the retrieved random number data to compute at least one indicator of the randomness quality of the random number data; associating the at least one indicator with at least one state represented by a color; and displaying the color associated with the at least one indicator to a user. The color may be displayed in a traffic light icon, for example.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09077524&OS=09077524&RS=09077524
owner: BlackBerry Limited
number: 09077524
owner_city: Waterloo, Ontario
owner_country: CA
publication_date: 20121120
---
This application is a continuation of prior U.S. patent application Ser. No. 11 237 723 filed on Sep. 29 2005. U.S. patent application Ser. No. 11 237 723 issued to patent as U.S. Pat. No. 8 340 289. The entire contents of U.S. patent application Ser. No. 11 237 723 are hereby incorporated by reference.

Embodiments of the systems and methods described herein relate generally to the field of security protocols for software applications and more specifically in one embodiment to a system and method for providing code signing services to individuals or entities that wish to have software applications digitally signed in order that the applications may be executed on a computing device e.g. a mobile device .

Security protocols involving software code signing schemes are typically used to ensure the reliability of software applications that are downloaded from the Internet or other sources for execution on a computing device. The computing device may be for example a mobile device.

A code signing system may be implemented on a computing device to control access to certain resources on the computing device by a software application. In one example system there is provided on the computing device an application platform one or more application programming interfaces APIs and a virtual machine. The APIs are configured to link software applications with the application platform and more specifically to allow software applications to make function calls to or otherwise interact with resources made generally accessible to software applications on the computing device.

However some of the APIs may be classified as sensitive by entities that wish to restrict access to those APIs or to the particular resources associated with those APIs. In the example system the virtual machine is adapted to verify the authenticity of a digital signature appended to an application requiring access to a sensitive API before access to the sensitive API is granted. Accordingly in order for an application to be granted access to the sensitive API an appropriate signing authority must first digitally sign the application.

Software application developers who create applications that would require access to sensitive APIs on a computing device may need to have their applications digitally signed by an appropriate signing authority so that the applications will properly execute on the computing device. An entity that wishes to restrict access to certain sensitive APIs and associated resources such as proprietary APIs that the entity itself may have authored for example may wish to act as a signing authority in respect of those APIs and provide code signing services to the software application developers requiring access to those APIs. Through the provision of code signing services an entity can control who should and should not be granted access to specific APIs that it has authored and or classified as sensitive track who has requested such access and charge for providing such access if desired for example.

At least one embodiment described herein relates generally to a system and method for providing code signing services to software application developers or to other individuals or entities that wish to have applications digitally signed. Signing of the applications may be required in order to enable the applications to access sensitive APIs and associated resources of a computing device when the applications are executed on the computing device.

In one embodiment keys are created and used to sign applications. For example a signing authority may create a public key and a private key. The private key may be used by the signing authority to digitally sign applications. The strength of the signing process implemented by the signing authority depends on the quality of the key pair created. In particular the more random the key the stronger the key is. If the key contains less random data it may be easier for an attacker to figure out what the key is.

When random number data is being generated by a random data service such as that which may be employed when generating key pairs for use in code signing a means for representing the quality of the randomness to a user in an intuitive way can be desirable.

In one broad aspect there is provided a method for providing an indication of randomness quality of random number data generated by a random data service the method comprising the steps of retrieving random number data from the random data service applying one or more randomness tests to the retrieved random number data to compute at least one indicator of the randomness quality of the random number data associating the at least one indicator with at least one state represented by a color and displaying the color associated with the at least one indicator to a user.

In accordance with another broad aspect the displaying step comprises displaying the color associated with the at least one indicator in a traffic light icon.

In another broad aspect the random data service provides random number data to one or more applications adapted to generate key pairs each key pair comprising a public and private key which may be used in code signing applications for example.

By way of example these and other related aspects will be described with reference to systems and methods for providing code signing services. However it would be understood by persons skilled in the art that the features of these aspects may be employed in different applications in variant embodiments.

The computing device upon which signed applications are executed may be a mobile station for example. However it will be understood by persons skilled in the art that at least some of the embodiments described herein may be implemented in respect of applications that are to be executed on computing devices other than mobile stations.

A mobile station is a two way communication device with advanced data communication capabilities having the capability to communicate with other computer systems and is also referred to herein generally as a mobile device. A mobile device may also include the capability for voice communications. Depending on the functionality provided by a mobile device it may be referred to as a data messaging device a two way pager a cellular telephone with data messaging capabilities a wireless Internet appliance or a data communication device with or without telephony capabilities . A mobile device communicates with other devices through a network of transceiver stations. To aid the reader in understanding the structure of a mobile device and how it communicates with other devices reference is made first to .

Referring to a block diagram of a mobile device in one example implementation is shown generally as . Mobile device comprises a number of components the controlling component being microprocessor . Microprocessor controls the overall operation of mobile device . Communication functions including data and voice communications are performed through communication subsystem . Communication subsystem receives messages from and sends messages to a wireless network . In this example implementation of mobile device communication subsystem is configured in accordance with the Global System for Mobile Communication GSM and General Packet Radio Services GPRS standards. The GSM GPRS wireless network is used worldwide and it is expected that these standards will be superseded eventually by Enhanced Data GSM Environment EDGE and Universal Mobile Telecommunications Service UMTS . New standards are still being defined but it is believed that they will have similarities to the network behavior described herein and it will also be understood by persons skilled in the art that other suitable standards that are developed in the future may be used. The wireless link connecting communication subsystem with network represents one or more different Radio Frequency RF channels operating according to defined protocols specified for GSM GPRS communications. With newer network protocols these channels are capable of supporting both circuit switched voice communications and packet switched data communications.

Although the wireless network associated with mobile device is a GSM GPRS wireless network in one example implementation of mobile device other wireless networks may also be associated with mobile device in variant implementations. Different types of wireless networks that may be employed include for example data centric wireless networks voice centric wireless networks and dual mode networks that can support both voice and data communications over the same physical base stations. Combined dual mode networks include but are not limited to Code Division Multiple Access CDMA or CDMA2000 networks GSM GPRS networks as mentioned above and future third generation 3G networks like EDGE and UMTS. Some older examples of data centric networks include the Mobitex Radio Network and the DataTAC Radio Network. Examples of older voice centric data networks include Personal Communication Systems PCS networks like GSM and Time Division Multiple Access TDMA systems.

Microprocessor also interacts with additional subsystems such as a Random Access Memory RAM flash memory display auxiliary input output I O subsystem serial port keyboard speaker microphone short range communications subsystem and other devices .

Some of the subsystems of mobile device perform communication related functions whereas other subsystems may provide resident or on device functions. By way of example display and keyboard may be used for both communication related functions such as entering a text message for transmission over network and device resident functions such as a calculator or task list. Operating system software used by microprocessor is typically stored in a persistent store such as flash memory which may alternatively be a read only memory ROM or similar storage element not shown . Those skilled in the art will appreciate that the operating system specific device applications or parts thereof may be temporarily loaded into a volatile store such as RAM .

Mobile device may send and receive communication signals over network after required network registration or activation procedures have been completed. Network access is associated with a subscriber or operator of a mobile device . To identify a subscriber mobile device requires a Subscriber Identity Module or SIM card to be inserted in a SIM interface in order to communicate with a network. SIM is one type of a conventional smart card used to identify a subscriber of mobile device and to personalize the mobile device among other things. Without SIM mobile device is not fully operational for communication with network . By inserting SIM into SIM interface a subscriber can access all subscribed services. Services could include web browsing and messaging such as e mail voice mail Short Message Service SMS and Multimedia Messaging Services MMS . More advanced services may include point of sale field service and sales force automation. SIM includes a processor and memory for storing information. Once SIM is inserted in SIM interface it is coupled to microprocessor . In order to identify the subscriber SIM contains some parameters such as an International Mobile Subscriber Identity IMSI . An advantage of using SIM is that a subscriber is not necessarily bound by any single physical mobile device. SIM may store additional subscriber information for a mobile device as well including date book or calendar information and recent call information.

Mobile device is a battery powered device and includes a battery interface for receiving one or more rechargeable batteries . Battery interface is coupled to a regulator not shown which assists battery in providing power V to mobile device . Although current technology makes use of a battery future technologies such as micro fuel cells may provide the power to mobile device .

Microprocessor in addition to its operating system functions enables execution of software applications on mobile device . A set of applications that control basic device operations including data and voice communication applications will normally be installed on mobile device during its manufacture. Another application that may be loaded onto mobile device would be a personal information manager PIM . A PIM has functionality to organize and manage data items of interest to a subscriber such as but not limited to e mail calendar events voice mails appointments and task items. A PIM application has the ability to send and receive data items via wireless network . PIM data items may be seamlessly integrated synchronized and updated via wireless network with the mobile device subscriber s corresponding data items stored and or associated with a host computer system. This functionality creates a mirrored host computer on mobile device with respect to such items. This can be particularly advantageous where the host computer system is the mobile device subscriber s office computer system.

Additional applications may also be loaded onto mobile device through network auxiliary I O subsystem serial port short range communications subsystem or any other suitable subsystem . This flexibility in application installation increases the functionality of mobile device and may provide enhanced on device functions communication related functions or both. For example secure communication applications may enable electronic commerce functions and other such financial transactions to be performed using mobile device .

Serial port enables a subscriber to set preferences through an external device or software application and extends the capabilities of mobile device by providing for information or software downloads to mobile device other than through a wireless communication network. The alternate download path may for example be used to load an encryption key onto mobile device through a direct and thus reliable and trusted connection to provide secure device communication.

Short range communications subsystem provides for communication between mobile device and different systems or devices without the use of network . For example subsystem may include an infrared device and associated circuits and components for short range communication. Examples of short range communication would include standards developed by the Infrared Data Association IrDA Bluetooth and the 802.11 family of standards developed by IEEE.

In use a received signal such as a text message an e mail message or web page download will be processed by communication subsystem and input to microprocessor . Microprocessor will then process the received signal for output to display or alternatively to auxiliary I O subsystem . A subscriber may also compose data items such as e mail messages for example using keyboard in conjunction with display and possibly auxiliary I O subsystem . Auxiliary subsystem may include devices such as a touch screen mouse track ball infrared fingerprint detector or a roller wheel with dynamic button pressing capability. Keyboard is an alphanumeric keyboard and or telephone type keypad. A composed item may be transmitted over network through communication subsystem .

For voice communications the overall operation of mobile device is substantially similar except that the received signals would be output to speaker and signals for transmission would be generated by microphone . Alternative voice or audio I O subsystems such as a voice message recording subsystem may also be implemented on mobile device . Although voice or audio signal output is accomplished primarily through speaker display may also be used to provide additional information such as the identity of a calling party duration of a voice call or other voice call related information.

Referring now to a block diagram of the communication subsystem component of is shown. Communication subsystem comprises a receiver a transmitter one or more embedded or internal antenna elements Local Oscillators LOs and a processing module such as a Digital Signal Processor DSP .

The particular design of communication subsystem is dependent upon the network in which mobile device is intended to operate thus it should be understood that the design illustrated in serves only as one example. Signals received by antenna through network are input to receiver which may perform such common receiver functions as signal amplification frequency down conversion filtering channel selection and analog to digital A D conversion. A D conversion of a received signal allows more complex communication functions such as demodulation and decoding to be performed in DSP . In a similar manner signals to be transmitted are processed including modulation and encoding by DSP . These DSP processed signals are input to transmitter for digital to analog D A conversion frequency up conversion filtering amplification and transmission over network via antenna . DSP not only processes communication signals but also provides for receiver and transmitter control. For example the gains applied to communication signals in receiver and transmitter may be adaptively controlled through automatic gain control algorithms implemented in DSP .

The wireless link between mobile device and a network may contain one or more different channels typically different RF channels and associated protocols used between mobile device and network . A RF channel is a limited resource that must be conserved typically due to limits in overall bandwidth and limited battery power of mobile device .

When mobile device is fully operational transmitter is typically keyed or turned on only when it is sending to network and is otherwise turned off to conserve resources. Similarly receiver is periodically turned off to conserve power until it is needed to receive signals or information if at all during designated time periods.

Referring now to a block diagram of a node of a wireless network is shown as . In practice network comprises one or more nodes . Mobile device communicates with a node within wireless network . In the example implementation of node is configured in accordance with General Packet Radio Service GPRS and Global Systems for Mobile GSM technologies. Node includes a base station controller BSC with an associated tower station a Packet Control Unit PCU added for GPRS support in GSM a Mobile Switching Center MSC a Home Location Register HLR a Visitor Location Registry VLR a Serving GPRS Support Node SGSN a Gateway GPRS Support Node GGSN and a Dynamic Host Configuration Protocol DHCP . This list of components is not meant to be an exhaustive list of the components of every node within a GSM GPRS network but rather a list of components that are commonly used in communications through network .

In a GSM network MSC is coupled to BSC and to a landline network such as a Public Switched Telephone Network PSTN to satisfy circuit switched requirements. The connection through PCU SGSN and GGSN to the public or private network Internet also referred to herein generally as a shared network infrastructure represents the data path for GPRS capable mobile devices. In a GSM network extended with GPRS capabilities BSC also contains a Packet Control Unit PCU that connects to SGSN to control segmentation radio channel allocation and to satisfy packet switched requirements. To track mobile device location and availability for both circuit switched and packet switched management HLR is shared between MSC and SGSN . Access to VLR is controlled by MSC .

Station is a fixed transceiver station. Station and BSC together form the fixed transceiver equipment. The fixed transceiver equipment provides wireless network coverage for a particular coverage area commonly referred to as a cell . The fixed transceiver equipment transmits communication signals to and receives communication signals from mobile devices within its cell via station . The fixed transceiver equipment normally performs such functions as modulation and possibly encoding and or encryption of signals to be transmitted to the mobile device in accordance with particular usually predetermined communication protocols and parameters under control of its controller. The fixed transceiver equipment similarly demodulates and possibly decodes and decrypts if necessary any communication signals received from mobile device within its cell. Communication protocols and parameters may vary between different nodes. For example one node may employ a different modulation scheme and operate at different frequencies than other nodes.

For all mobile devices registered with a specific network permanent configuration data such as an operator profile is stored in HLR . HLR also contains location information for each registered mobile device and can be queried to determine the current location of a mobile device. MSC is responsible for a group of location areas and stores the data of the mobile devices currently in its area of responsibility in VLR . Further VLR also contains information on mobile devices that are visiting other networks. The information in VLR includes part of the permanent mobile device data transmitted from HLR to VLR for faster access. By moving additional information from a remote HLR node to VLR the amount of traffic between these nodes can be reduced so that voice and data services can be provided with faster response times and at the same time requiring less use of computing resources.

SGSN and GGSN are elements added for GPRS support namely packet switched data support within GSM. SGSN and MSC have similar responsibilities within wireless network by keeping track of the location of each mobile device . SGSN also performs security functions and access control for data traffic on network . GGSN provides internetworking connections with external packet switched networks and connects to one or more SGSN s via an Internet Protocol IP backbone network operated within the network . During normal operations a given mobile device must perform a GPRS Attach to acquire an IP address and to access data services. This requirement is not present in circuit switched voice channels as Integrated Services Digital Network ISDN addresses are used for routing incoming and outgoing calls. Currently all GPRS capable networks use private dynamically assigned IP addresses thus requiring a DHCP server connected to the GGSN . There are many mechanisms for dynamic IP assignment including using a combination of a Remote Authentication Dial In User Service RADIUS server and DHCP server. Once the GPRS Attach is complete a logical connection is established from a mobile device through PCU and SGSN to an Access Point Node APN within GGSN . The APN represents a logical end of an IP tunnel that can either access direct Internet compatible services or private network connections. The APN also represents a security mechanism for network insofar as each mobile device must be assigned to one or more APNs and mobile devices cannot exchange data without first performing a GPRS Attach to an APN that it has been authorized to use. The APN may be considered to be similar to an Internet domain name such as myconnection.wireless.com .

Once the GPRS Attach is complete a tunnel is created and all traffic is exchanged within standard IP packets using any protocol that can be supported in IP packets. This includes tunneling methods such as IP over IP as in the case with some IPSecurity IPsec connections used with Virtual Private Networks VPN . These tunnels are also referred to as Packet Data Protocol PDP Contexts and there are a limited number of these available in the network . To maximize use of the PDP Contexts network will run an idle timer for each PDP Context to determine if there is a lack of activity. When a mobile device is not using its PDP Context the PDP Context can be deallocated and the IP address returned to the IP address pool managed by DHCP server .

In order to better understand the various embodiments of the systems and methods described in this specification relating to the provision of code signing services an example code signing protocol and features of an example code signing system from the perspective of a mobile device will first be discussed with reference to . As noted earlier while many of the following examples are described generally with reference to mobile devices embodiments described herein may be applicable to devices other than mobile devices.

Referring to a diagram illustrating an example code signing protocol in which a code signing authority provides code signing services to a software application developer is shown generally as .

A software application developer creates a software application for mobile device that requires access to one or more sensitive APIs on mobile device . It will be understood that software applications comprise software code that may ultimately be executed on a mobile device or other computing device. Consequently the terms code signing and application signing may be used interchangeably herein.

Software application may for example be a Java application that operates on a Java virtual machine JVM installed on mobile device . An API enables software applications to interface with an application platform on a mobile device or other computing device. The application platform may include for example resources such as the device hardware operating system and core software and data models. Accordingly in order to make function calls to or otherwise interact with such device resources software application will typically need to access one or more APIs on mobile device . The APIs effectively bridge software application and device resources.

In this description and the appended claims references to API access should be interpreted to include access of an API in such a way as to allow a software application to interact with one or more corresponding device resources. Therefore providing access to any API allows a software application to interact with associated device resources whereas denying access to an API prevents the software application from interacting with the associated resources. For example a database API may communicate with a device file or data storage system and access to the database API would provide for interaction between a software application and the file or data storage system. A user interface UI API would communicate with controllers and or control software for such device components as a screen a keyboard and any other device components that provide output to an operator or accept input from an operator of the mobile device. In a mobile device a radio API may also be provided as an interface to wireless communication resources such as a transmitter and receiver for example. A cryptographic API may be provided to interact with a cryptographic module which implements cryptographic algorithms on a device. These are merely illustrative examples of APIs that may be provided on a mobile device and potentially on other computing devices. Any of such devices may include some or all of these example APIs or different APIs instead of or in addition to those described above.

In general any given API may be classified as sensitive by a mobile device manufacturer or possibly by an API author a wireless network operator a device owner or operator or some other entity that for example might be affected by a virus or malicious code in a software application for the device. For instance a mobile device manufacturer may classify as sensitive those APIs that interface with cryptographic routines wireless communication functions or proprietary data models such as address book or calendar entries. To protect against unauthorized access to these sensitive APIs software application developer is required to obtain one or more digital signatures from the mobile device manufacturer or other entity that classified the APIs as sensitive or from a code signing authority acting on behalf of the manufacturer or other entity with an interest in protecting access to sensitive device APIs and append the signature s to software application as described in further detail below.

A digital signature may be obtained for each sensitive API or library that includes a sensitive API to which software application requires access. In certain implementations multiple signatures are desirable. This would allow a service provider company or network operator to restrict some or all software applications loaded or updated onto a particular set of mobile devices for example. In one multiple signature scenario all APIs on a device are restricted and locked until a global signature is verified for a software application. For example a company may wish to prevent its employees from executing any software applications onto their devices until permission is first obtained from a corporate information technology IT or computer services department. All such corporate mobile devices may then be configured to require verification of at least a global signature before a software application can be executed. Access to sensitive device APIs and libraries if any could then be further restricted to be dependent upon verification of respective corresponding digital signatures.

The binary executable representation of software application may be independent of the particular type of mobile device or model of a mobile device. Software application may for example be in a write once run anywhere binary format such as is typically the case with Java software applications. However it may be desirable to have a digital signature for each mobile device type or model or alternatively for each mobile device platform or manufacturer for example. Therefore software application may need to be submitted to several code signing authorities if software application targets several types or models of mobile devices.

In the example shown in when software application developer requires software application to be signed software application is sent from application developer to code signing authority . Code signing authority may represent the mobile device manufacturer the authors of any sensitive APIs or possibly others that have knowledge of the operation of the sensitive APIs to which software application needs access.

While not explicitly shown in in certain situations it will be understood that a software application may be submitted to more than one code signing authority. Each code signing authority may for example be responsible for signing software applications for particular sensitive APIs or APIs on a particular model of mobile device or set of mobile devices that supports the sensitive APIs required by the software application. A manufacturer mobile communication network operator service provider or corporate client for example may thereby have signing authority over the use of sensitive APIs for their particular mobile device model s or for mobile devices operating on a particular network subscribing to one or more particular services or distributed to corporate employees. A signed software application may then include a software application and at least one appended digital signature from each of the signing authorities. Although these signing authorities would be generating a digital signature for the same software application in this example different signing and signature verification schemes may be associated with different signing authorities.

From the perspective of code signing authority code signing authority will receive software application and may at its discretion sign software application to allow access to one or more sensitive APIs on the mobile device. Before code signing authority signs software application code signing authority may consider the identity of application developer in determining whether or not software application should be signed. Code signing authority may also review software application before signing alternatively code signing authority may choose not to perform such a review relying on its ability to identify the identity of software application developer for recourse in the event that software application is found to be virus infected or to contain destructive code for example.

If code signing authority determines that software application may access the sensitive API s and therefore should be signed then a digital signature not explicitly shown is generated by code signing authority and appended to software application to produce a signed software application that is returned to software application developer . On the other hand if code signing authority refuses to sign software application an appropriate response not shown may be returned to software application developer .

The digital signature is typically a tag that is generated using a private signature key maintained solely by code signing authority . For example according to one signature scheme a hash of software application may be generated by code signing authority using a hashing algorithm such as the Secure Hash Algorithm SHA1 for example and then encoded with private signature key to create the digital signature. While private signature key is used to encode a hash of information to be signed in this example such as may be derived from software application in variant schemes private signature key may be used in other ways to generate a digital signature from the information to be signed or a transformed version of the information.

Signed software application may then be sent to mobile device over a wireless network for example or otherwise loaded onto mobile device . For instance signed software application may be downloaded to a personal computer via a computer network and loaded to mobile device through a serial link or may be acquired from software application developer in another manner and loaded onto mobile device . Once signed software application is loaded on mobile device at least one digital signature of signed software application will then typically be verified with a public signature key before software application is granted access to a sensitive API.

Although signed software application is loaded onto mobile device it should be appreciated by persons skilled in the art that the software application that may eventually be executed on mobile device is software application . As described above signed software application typically comprises software application and one or more appended digital signatures not shown . When the appropriate digital signatures are successfully verified e.g. by a virtual machine at mobile device software application can be executed on mobile device and is permitted access to any APIs for which the corresponding signatures have been verified.

Security protocols involving software code signing schemes typically rely on public and private encryption keys to provide authorization to access sensitive APIs and to guarantee the integrity of signed applications. In accordance with known public key cryptographic techniques data encrypted using a private key of a private key public key pair can only be decrypted using the corresponding public key of the pair and vice versa.

In this example a code signing authority signs a software application by generating a digital signature. The digital signature is a digest e.g. a hash of the software application or possibly of some data derived from the software application which is encoded using the code signing authority s private key. The digital signature can then be appended to the software application.

To verify the digital signature at a mobile device or other computing device the digest is obtained in a similar manner e.g. using the same standard hash algorithm from the software application to which the digital signature is appended that is received at the device. The code signing authority s public key typically stored with the sensitive APIs is used to decode the appended digital signature in order to obtain what should be a matching digest for the received software application. If the digests do not match this suggests that either the software application received at the device is not the same application that was signed by the code signing authority or that the software application was not signed using the correct private key or by the proper code signing authority. The digital signature algorithms are designed in such a way that only someone with knowledge of the code signing authority s private key should be able to encode a digital signature that can be decoded correctly e.g. by a virtual machine at the device using the code signing authority s public key that is associated with one or more sensitive APIs. Therefore by verifying a digital signature in this way authorization and access control to sensitive APIs and the integrity of signed applications can be maintained.

Accordingly public signature key corresponds to private signature key maintained by code signing authority and is typically installed on mobile device along with one or more sensitive APIs. Alternatively public signature key may instead be obtained from a public key repository not shown using mobile device or possibly a personal computer system and installed on mobile device as needed. Mobile device computes a hash of software application in the signed software application using the same hashing algorithm as code signing authority and uses the digital signature and public signature key to recover the hash originally encoded by code signing authority . The resultant locally calculated hash and the hash recovered from the digital signature are then compared and if the hashes are the same the signature is verified. If software application was signed multiple times each digital signature may be verified in a similar manner. Software application can then execute on mobile device and access any sensitive APIs for which the corresponding signature s have been verified. This example signature scheme is provided by way of example only and other signature schemes including other public key signature schemes may also be employed in variant implementations.

Referring to a diagram illustrating components of an example code signing system on a mobile device is shown generally as .

In respect of mobile device example code signing system comprises a virtual machine e.g. a JVM a plurality of software applications a plurality of API libraries and an application platform . Application platform generally includes all of the resources on mobile device that may be accessed by the software applications . Application platform may include for example device hardware the mobile device s operating system and core software and data models . Each API library comprises one or more APIs that interface with a resource available in application platform . For instance one API library might include all of the APIs that interface with a calendar program and calendar entry data models. Another API library might include all of the APIs that interface with the transmission circuitry and functions of mobile device . Yet another API library might include all of the APIs capable of interfacing with lower level services performed by the mobile device s operating system .

Some API libraries may expose a sensitive API e.g. such as an interface to a cryptographic function or module while other libraries may be accessed without exposing sensitive APIs e.g. . Similarly some software applications may be signed software applications e.g. that require access to one or more sensitive APIs while other software applications may not be signed e.g. . Virtual machine may be an object oriented run time environment such as Sun Microsystems J2ME Java 2 Platform Micro Edition for example which manages the execution of software applications operating on mobile device and links the software applications to the various API libraries 

Software application labeled as Application Y in is an example of a signed software application e.g. signed application of . In this example signed software application includes a software application e.g. application of comprising for example software code that can be executed on application platform one or more signature identifiers and one or more digital signatures associated with the signature identifiers . Software application and other signed software applications will typically comprise similar components. However the components of signed software applications will be described in greater detail below with reference to software application by way of example.

Each digital signature and associated signature identifier in signed software application may correspond to an API library that exposes at least one sensitive API to which software application requires access. In certain implementations signed software application may include a digital signature for each sensitive API within a particular API library . The signature identifiers may be unique integers or some other identifier capable of allowing a particular digital signature to be associated with a specific API library API application platform or model of mobile device .

API library labeled as API Library A in is an example of an API library that exposes a sensitive API. In this example API library includes a description string a public signature key and a signature identifier . API library and other API libraries that expose one or more sensitive APIs will typically comprise similar components. However the components of such API libraries will be described in greater detail below with reference to API library by way of example.

Signature identifier of API library may correspond to a signature identifier e.g. in a signed software application e.g. . These signature identifiers enables virtual machine to quickly match a digital signature e.g. with an API library e.g. . Public signature key corresponds to the private signature key e.g. of maintained by the code signing authority and is used to verify the authenticity of the digital signature appended to the signed application . Description string may for example be a textual message that is displayed on mobile device when the signed software application is loaded or attempts to access a sensitive API of API library

Operationally when a signed software application that requires access to a particular sensitive API e.g. in an API library is loaded onto mobile device virtual machine searches the signed software application for an appended digital signature associated with that API. In this example this would involve matching the specific signature identifier associated with a digital signature with the signature identifier e.g. for the corresponding API library. If the signed software application includes the appropriate digital signature then virtual machine will verify its authenticity using the public signature key associated with that API library. Access to the sensitive API may then be granted to the software application that was signed upon successful verification of the digital signature. If the signed software application does not include the appropriate digital signature then access to the sensitive API may be denied.

Optionally even when the appropriate digital signature is successfully verified a mobile device operator may be prompted to provide confirmation that the sensitive API can be accessed by the software application. In that case a message based on description string may be displayed on a display of mobile device before the software application is executed and accesses the sensitive API. For instance a message stating Application Y is attempting to access API Library A may be displayed and the mobile device operator may be given the control to ultimately grant or deny access to the sensitive API.

It will be understood by persons skilled in the art that any given signed software application may have multiple device specific library specific or API specific signatures or some combination of such signatures appended thereto. Similarly different signature verification requirements may be configured for different devices. For example a digital signature may be provided with a signed software application that permits access to a given sensitive API on one mobile device model but not to the same sensitive API on a different mobile device model. This may result in the signed software application being permitted access to the sensitive API on one type of mobile device but not on another. As a further example one mobile device may require verification of both a global signature as well as additional signatures for any sensitive APIs to which a software application requires access in order for the software application to be executed. A different mobile device may require verification of only a global signature and yet another different mobile device may require verification of signatures only for its sensitive APIs.

It will also be understood by persons skilled in the art that in variant implementations certain devices capable of receiving software applications to which digital signatures are appended including devices in which digital signature verification is not implemented or where digital signature verification is optional for example may be adapted to permit software applications to be executed without any signature verification.

Referring to a flowchart illustrating steps in an example method of processing signed software applications performed on the mobile device depicted in is shown generally as .

At step a software application e.g. application of is loaded onto a mobile device e.g. mobile device of . Once the software application is loaded the device using a virtual machine e.g. virtual machine of for example determines whether or not the software application requires access to any API libraries that expose a sensitive API at step . If the software application does require access to the sensitive API then the virtual machine verifies that the software application includes a valid digital signature associated with the sensitive API or associated API library to which access is required as described below with reference to steps through . If not then the software application is linked with all of its required API libraries and executed at step .

In this example at step the virtual machine retrieves the public signature key e.g. public key of and the signature identifier e.g. signature identifier of for the corresponding API library. At step the signature identifier for the API library is then used by the virtual machine to determine whether or not the software application has an appended digital signature e.g. digital signature of with a corresponding signature identifier e.g. signature identifier of . If not then the software application has not been approved for access to the sensitive API by the appropriate code signing authority and the software application may be prevented from being executed at step or alternatively not explicitly shown in the software application may be purged from the mobile device or executed to the extent possible without accessing the sensitive API. A user may be prompted for input before any of these alternative actions where made available are taken to provide user control over the specific action to be performed not shown .

If a digital signature corresponding to the sensitive API has been appended to the software application and is located by the virtual machine then the virtual machine uses the public signature key to verify the authenticity of the digital signature at step . This step may be performed for example by using the signature verification scheme described with reference to or other alternative signature schemes. If the digital signature does not successfully verify then the software application is either not executed purged or restricted from accessing the sensitive API as described above with reference to step . If the digital signature is successfully verified however then optionally a message based on a description string associated with the sensitive API or corresponding API library e.g. description string of is displayed to a mobile device operator at step warning that the software application requires access to a sensitive API and at step optionally prompting the operator for authorization to execute the software application. If execution is authorized then the software application may be executed and linked to the sensitive API at step otherwise the software application is either not executed purged or restricted from accessing the sensitive API as described above with reference to step .

When more than one digital signature needs to be verified for a given software application then steps through may be repeated for each digital signature prior to execution of the application.

Embodiments described herein relate generally to a system and method for providing code signing services. As noted earlier code signing services may be provided by a code signing authority e.g. code signing authority of to software application developers e.g. application developer of or other individuals or entities that wish to have software applications digitally signed so that the applications may access sensitive APIs when they are executed on a computing device e.g. mobile device of . Examples of entities that might act as code signing authorities may include mobile device manufacturers API authors wireless network operators device owners or operators any other entities that might be affected by a virus or destructive code in software applications for the computing device or that might otherwise wish to control access to sensitive APIs and representatives of any of the above entities.

From the perspective of the code signing authority any given software application developer or other individual or entity that wishes to have its applications signed is initially an untrusted client. Until a trust relationship is established between the software application developer and the code signing authority the code signing authority will usually refuse to sign software applications received from the software application developer that may access sensitive APIs. Only after establishing trust relationships with software application developers might a code signing authority be willing to sign software applications as the code signing authority can then track which APIs it has granted access to and to which software application developers such access has been granted.

Accordingly in one embodiment a method of providing code signing services will comprise at least some steps relating to registering the entities that seek access to sensitive APIs as controlled by the code signing authority. These steps are performed in order to establish trust relationships with those entities. The method of providing code signing services may comprise additional steps relating to receiving and processing code signing requests from such entities.

With respect to the registration of entities by the code signing authority should any destructive or otherwise problematic code be either found in a software application or suspected because of behavior exhibited when the software application is executed on the computing device the registration privileges of the corresponding software application developer or other registered individual or entity with the code signing authority may be suspended or revoked. This is made possible since the digital signature that is appended to applications by the code signing authority provides an audit trail through which the developer of a problematic software application may be identified.

Computing devices may be informed of such registration revocations by being configured to periodically download revocation lists for example. If software applications for which the corresponding digital signatures have been revoked are running on a particular computing device that device may then halt execution of any such software application and possibly purge the software application from its local storage. Devices may also be configured to re execute digital signature verifications either periodically or when a new revocation list is downloaded for example.

In certain embodiments the code signing authorities may not provide revocations lists or the like. A code signing authority may track which software application developers or other registered individuals or entities may or may not have their applications signed at any given time and rescind signing privileges of developers at its discretion. In one example implementation once an application has been signed by the code signing authority that application will remain valid even if the associated developer s signing privileges are later rescinded. However subsequent requests to sign applications made by that developer after its signing privileges have been rescinded would be denied.

Referring to a flowchart illustrating steps in a method of providing code signing services is shown generally as .

While this embodiment is described generally with reference to mobile devices by way of example variant embodiments may be applicable to other computing devices. Moreover while this embodiment is described generally with reference to the exchange of information between a code signing authority and software application developers the described embodiment can also be applicable in respect of cases where such information is exchanged between the code signing authority and individuals or entities other than software application developers.

References to steps of method as being performed by the code signing authority are in typical implementations performed by a software application which has been programmed to perform the steps of method unless otherwise noted. In this description and in the appended claims this software application programmed to perform the steps of method is referred to as a code signing authority application.

The code signing authority application is one component of a system for providing code signing services that executes on a computing device maintained by the code signing authority e.g. code signing authority of . The system for providing code signing services in one embodiment is shown in an example network configuration of . In this example the code signing authority application executes on a computing device which in example network is a web server. Code signing authority application can interact with clients in the network through a web interface accessible via the Internet for example.

The clients with which code signing authority application may interact can include for example signature tool applications and API authoring tool applications executing on remote computing devices. A signature tool application can be used to communicate data and applications to code signing authority application by a software application developer e.g. software application developer of that needs to have applications signed by the code signing authority. An API authoring tool application can be used by an author of sensitive APIs who needs to obtain one or more public signature keys from the code signing authority to protect the APIs.

It will be understood that in some embodiments an author of sensitive APIs may also act as the code signing authority.

Code signing authority application will also have access to at least one client information database and at least one private signature key store . Data in client information database and private signature key store may be housed on the same storage device or distributed across multiple storage devices which need not necessarily reside physically on computing device .

It will be understood by persons skilled in the art that the components shown in are provided by way of example only and that computing device will generally comprise other components in addition to those shown in and may comprise different components in variant implementations.

Referring again to prior to receiving code signing registration requests and code signing requests from software application developers as will be discussed in greater detail with reference to further steps of method a private key public key pair needs to first be generated so that the public key can be attached to the APIs e.g. classes that are to be protected by classifying them as sensitive. The private key can be stored locally e.g. in private key store of by the code signing authority for later use. Accordingly at step which is performed prior to any steps involving code signing a code signing authority application creates a private key public key pair for the APIs that the code signing authority wishes to control access to. A key pair may be generated for each individual sensitive API to be protected or the same key pair may be applied to multiple APIs for example. As further examples different key pairs may be generated for APIs on different devices or for APIs on different models of the same type of device. Step is described in greater detail with respect to example embodiments with reference to .

Referring to in one embodiment there is provided a means for determining and displaying the randomness quality of random numbers generated by a random data service on a computing device. It is understood that when a public key cryptosystem is used to generate key pairs for example one needs a good source of random numbers for key generation. Generally the more random the number the stronger the generated key will be. A good source of random numbers produces numbers that are unknown and unpredictable by potential adversaries. In principle random numbers derived from a physical process may be best since many physical processes appear truly random.

In this embodiment a random data service is provided that is made accessible to the code signing authority application for generating public key private key pairs. The random data service may gather random data derived from a few different sources including serial ports windows cryptographic APIs keyboard and mouse events and hardware tokens for example. The random data service is adapted to provide three primary functions to gather random data to provide random data to applications that request it and to provide a measure of the randomness quality of the random data it has gathered.

At step the randomness quality of the data provided by the random data service is determined. In this embodiment random data that can be provided upon request is continuously gathered by the random data service. For example while the random data service executes random data may be generated in predefined sized blocks e.g. 20 000 byte blocks continuously. At this step the generated random data is considered e.g. continually by polling the random data service at some interval such as once every 0.5 s and statistical randomness tests can be applied to the sequence of random data blocks. Various randomness tests e.g. a Federal Information Processing Standard FIPS test FIPS 140 2 are known and one or more of such tests may be applied to facilitate a determination of the quality of the generated random data.

Depending on the randomness test used and the manner in which results are provided by that randomness test it may be possible to map each result onto one of a number of pre defined qualitative measures of randomness quality. For example the random data service may apply a predefined mapping in order to indicate the randomness quality at any given time as satisfying one of the following states unknown unacceptable poor acceptable good excellent error. At step this indication of randomness quality may be displayed to a user of the code signing authority application e.g. an administrator of the code signing authority .

While an indication of randomness quality may be displayed using the names of one of the above mentioned states different identifiers may also be used. These states may also be further mapped into a fewer number of collective states each identified by a descriptive identifier in variant embodiments.

For example in one embodiment the randomness quality is represented as a color in a traffic light icon which can be displayed in a user interface at step . This manner of representing randomness quality is intuitive and easy for a user to understand. Most users will be familiar with the traffic light icon and this image can be used to portray the current quality of randomness of the numbers that will be used to create key pairs for code signing applications.

The traffic light icon is used to illustrate the current level of randomness quality and can display one of three colors e.g. red yellow green based on the current level. Red represents a state in which keys should not be created because the randomness quality is very poor or because the randomness quality cannot otherwise be verified as being good. Yellow represents a state in which the quality is poor and one where it would not be recommended that keys be generated in a security conscious application. Green represents a good quality of randomness and users are advised that it is relatively safe to create keys.

One possible mapping of the seven initial states noted above into a color for the traffic light icon may be as follows 

It will be understood by persons skilled in the art that other initial state sets and further mapped state sets may be defined in variant embodiments and how they are predefined may depend on the specific randomness test s employed.

An example dialog box of a user interface in which the traffic light icon is displayed is shown in . A descriptive identifier e.g. based on one of the seven initial steps or a different identifier corresponding to the color of the light being displayed may also be displayed with the traffic light icon as shown. The color of the traffic light icon may be presented to a user in other ways. For example the traffic light icon displaying a color or only a colored circle may be displayed in miniature on a toolbar.

After an indication of the randomness quality is displayed at step a user of the code signing authority application may direct the application to create a key pair for signing e.g. by clicking the Create Key Pair button of the dialog box shown in . In that case an instruction is received from the user to create a key pair. In one embodiment the user may choose to create a key pair regardless of the state depicted by the traffic light icon. However in variant embodiments the option to create keys that is displayed to the user may be disabled when a Red light and or a Yellow light is shown. Moreover users may be asked to confirm their selections if an instruction to create a key pair is received while a Red and or Yellow light is shown in variant embodiments.

At step a private key and a corresponding public key are created in known manner e.g. using an RSA algorithm . At step the private key is stored for future use by the code signing authority e.g. in private key store of and the public key is deployed. The public key can be attached to sensitive API s that the code signing authority wishes to protect or it may store the public key in a repository which is made available to code signing system components executing on computing devices when signature verification is required. In an example dialog box is shown where users of the code signing authority application can send a created public key to API authors e.g. via API authoring tool of to embed in their APIs in order to protect those APIs.

It will be understood by persons skilled in the art that the features referred to in the description of including the displayable traffic light icon for example may be implemented in other applications adapted to use random numbers for generating objects other than key pairs for code signing. For instance these features may be employed in applications where personal identification numbers PINs are generated or in applications where session keys e.g. used to encrypt data in accordance with a symmetric encryption algorithm are generated.

Referring again to after one or more public keys have been created at step for association with sensitive APIs subsequent steps of method are performed when a software application developer develops an application that needs to access the APIs that have been classified as sensitive. At step a registration request is received by the code signing authority application from a software application developer that wishes to access a sensitive API. This registration request is then processed and a determination as to whether the registration request should accepted. Step is described in greater detail with respect to example embodiments with reference to .

In there is provided a method of registering an entity for code signing services in accordance with one embodiment. In the example described with reference to and that entity is a software application developer although it may be some other individual or entity. Directions to software application developers on how to register with the code signing authority may be made available to software application developers using known means e.g. through an Internet website .

At step a registration request is received by the code signing authority application from the software application developer API client . The registration request includes information that may be used by the code signing authority to validate the identity of the software application developer. This information may include typical identification information e.g. contact information and may also include credit card information that can be verified by the code signing authority. This information may for example be received through any of a number of different bands of communication. For example data may be exchanged via Secure Socket Layer SSL web forms for example.

Information received from the software application developer is verified at step . For example a credit card company may be contacted e.g. electronically or otherwise to validate the credit card information received.

If the verification is not successful an error message is returned step . On the other hand if the information is successfully verified e.g. if the credit card information supplied is successfully validated at step a unique client ID and PIN is generated by the code signing authority application. An account record for saving the client ID PIN and other information associated with the specific software application developer may be created for storage in a client information database e.g. client information database of maintained by the code signing authority and accessible to the code signing authority application.

In a variant embodiment the PIN and or client ID may be generated by the software application developer instead of the code signing authority and shared with the code signing authority for storage at step .

Upon creation of the account record associated with the software application developer the account record may also be populated with other information that may be used to manage the software application developer s account to keep track of account activity and to provide indications to specified parties when account activity occurs for example. In one embodiment when an account record is created for a given software developer the user of the code signing authority application e.g. an administrator of the code signing authority may be provided with a form e.g. via a user interface as shown in that allows various details or restrictions to be associated with that software application developer s account. An example form illustrating details that may be updated in an account record by a user of the code signing authority application is shown in . Some of the details of the account record may be populated automatically with pre determined default values.

Details that may be saved in an account record associated with a software application developer may include for example data needed to send e mail notifications to specified e mail addresses e.g. a To address a cc address a bcc address etc. . Flags may also be set to send an e mail notification to the specified address es whenever a registration attempt occurs whenever a code signing request is made whenever an error occurs in processing a registration attempt or a code signing request and or whenever any irregular behavior as may be defined in the code signing authority application is detected to have occurred. Flags may also be set to send an e mail notification whenever some other predefined event occurs. E mail notifications allow software application developers administrators or other parties to monitor an account e.g. their own account or another account and in particular to observe whether unauthorized code signing requests or registration attempts are being made under the account.

Other details that may be saved in an account record may include the setting for a flag that indicates that an expiry date is to be associated with the account and the associated expiry date. These may be set by an administrator of the code signing authority for example.

Other details that may be saved in an account record may include the setting for a flag that indicates that the account is to be granted only a specified number of allowable code signing requests and the associated number of allowable code signing requests. These may also be set by an administrator of the code signing authority for example. This may facilitate the provision of pay per use code signing services by the code signing authority. Accordingly in one example implementation a software application developer can have an application signed only so long as his account has not expired and there are allowable code signing requests e.g. credits remaining.

At step the client ID and PIN and potentially other registration data are transmitted to the software application developer. While information in the registration request is received at step over a first band of communication e.g. an SSL connection and the client ID and the other registration data except the PIN may be transmitted back to the software application developer over the same band of communication at step in one embodiment the PIN is instead communicated to the software application developer using an out of band communication means e.g. by telephone by fax etc. . This out of band communication means is different from the band of communication used to transmit the client ID and the other registration data to the software application developer at step .

In the variant embodiment mentioned earlier in which the PIN and or client ID is generated by the software application developer instead of the code signing authority use of this externally generated PIN and or client ID may then be confirmed or denied at step . If use of the particular PIN and or client ID is denied an error message may be returned to the software application developer flow to step not shown .

At step a registration file is received by the code signing authority application from the software application developer which constitutes an actual registration attempt by the software application developer. The registration file includes the client ID and PIN that was transmitted to the software application developer at step a public key that corresponds to a private key that only the software application developer is expected to possess and possibly other data. In one embodiment the registration file is received via an SSL connection.

For greater clarity the public key private key pair referred to at step is unrelated to the private key public key pair that is generated to sign and verify software applications as described with reference to . Instead the public key received from the software application developer at step is one part of a private key public key pair e.g. that may have been issued by a certification authority used to exchange encoded messages between the software application developer and third parties to facilitate secure communications. In this context the public key for secure communications can be subsequently used by the code signing authority application to verify messages such as code signing requests which are received from the software application developer. In fact the registration file received at step may itself be digitally signed using the software application developer s private key of secure communications.

The registration file received at step contains not only the client ID transmitted to the software application developer at step through a first communication band but also the PIN that was communicated to the software application developer through a second out of band communication means in accordance with an example embodiment. By using different communication channels to transmit registration details to the software application developer there is a lower risk that third parties may come to know both the client ID and the correct PIN associated with that client ID.

When the client ID and correct PIN associated with that client ID are received at step and successfully verified at step by the code signing authority i.e. the client ID and PIN in the registration file match the client ID and associated PIN for the software application developer as stored in the appropriate account record of the client information database then it can be more safely assumed that the public key for secure communications which accompanies the received registration file does in fact correspond with a private key for secure communications held by the software application developer. The public key can be subsequently used by the code signing authority to verify messages that are purported to originate from the software application developer and thus the use of public key cryptography to encode such messages provides enhanced security in communications. In particular there would be a lower risk that a third party would be able to complete a false registration by using an intercepted client ID and PIN and its own public key.

In variant embodiments different information other than the PIN may be transmitted to the software application developer over the second preferably out of band communication means. However in these variant embodiments the information verified by the code signing authority should nevertheless comprise some details that were transmitted to the software application developer through one communication means and some other details that were transmitted to the software application developer through some other communication means so that at least some of the advantages noted above may be realized.

As a further security measure in one embodiment the code signing authority application is adapted to keep track of the number of registration attempts made against any given software application developer s account. After a predefined number of unsuccessful registration attempts are made against an account that account may be disabled. This is to prevent a brute force attack on the PIN that is shared e.g. at step between the code signing authority application and the software application developer.

As noted earlier verification of the registration file is attempted by the code signing authority at step e.g. by matching the client ID and PIN received with those in saved in the corresponding account record and a determination is made if the verification is successful. If so then the account record associated with the software application developer is updated to reflect a successful registration at step if not an error message may be returned to the software application developer at step . Specifically at step the account record may be updated with the public key received at step for example. This public key is stored in the account record of the software application developer in the client information database and may be used in the future to verify communications including code signing requests which may be received from the software application developer by the code signing authority application.

Referring again to after a software application developer is successfully registered at step software applications will typically then be submitted for signing to the code signing authority by the software application developer.

At step a code signing request is received from a requestor which is a software application developer in this example. The code signing request may include for example the client ID associated with the account of the software application developer as well as the application to be signed. In one embodiment a digital signature of the software application developer accompanies the code signing request wherein the code signing request has been signed using the software application developer s private key. This facilitates authentication of the identity of the software application developer.

At step the code signing authority application verifies that the code signing request received at step is a valid request made from a registered software application developer. This step may comprise for example obtaining the public key associated with the received client ID and verifying the digital signature appended to the code signing request confirming that the account identified by the client ID has not expired and confirming that there are a sufficient number of credits indicating allowable code signing requests remaining for that account.

If it is determined that a valid request is being made then at step the account record associated with the account identified by the client ID is updated. This may comprise decrementing the number of allowable code signing requests remaining for example. In some embodiments information relating to the request may also be saved in a log which may be stored in the client information database e.g. of or on some other storage device.

At step notification e mails may be sent to addresses identified in the account record in accordance with the settings in the account record.

At step the application is signed by the code signing authority using the private signature key created for code signing e.g. as created at step and stored in the private key database of . The digital signature is also returned to the software application developer at step so that the digital signature may be appended to the application that has been programmed to access sensitive APIs that are protected with the corresponding public signature key. The code signing authority application may also be configured to forward the file containing the digital signature to other parties at this step.

In embodiments where the code signing authority may control access to different APIs protected by different public signature keys indication of the digital signatures that need to be generated may be included in a code signing request and the appropriate private signature key can be used accordingly to sign the application at step .

If it determined at step that a valid request has not been made then an error message is returned at step . A notification e mail may be sent at this step depending on the account settings.

It will be understood that any actions taken by a user of the code signing authority application e.g. an administrator including the modification of account records or the initiation of a code signing key pair creation for example may be conditional upon successful verification of a user password or upon the provision of some other access control mechanism.

It will be understood that steps through may be repeated where multiple code signing requests are received from the same software application developer and that steps through may be repeated where code signing services are provided to multiple software application developers.

While a digital signature generated by the code signing authority is dependent upon authentication of the software application developer and confirmation that the software application developer has been properly registered in at least some of the embodiments described herein it will be understood that the digital signature is generated from a hash or otherwise transformed version of the software application and is therefore application specific. This is in contrast to some known code signing schemes in which API access is granted to all software applications received from trusted software application developers or authors without regard to the specific application being signed. In the embodiments of the systems and methods described herein API access is granted on an application by application basis and thus can be more strictly controlled or regulated.

In at least some example embodiments described herein the code signing authority receives a software application from a software application developer for signing with a code signing request. That application is then signed by the code signing authority once the identity of the code signing requestor is authenticated and certain account information of the requestor has been verified. Signing of the application typically involves the generation of a hash or otherwise transformed version of the software application by the code signing authority and the subsequent encoding of the hash with the appropriate private signature key.

However in another embodiment the application to be signed by the code signing authority is not received as part of the code signing request. Instead a hash or otherwise transformed version of the software application is received with the code signing request where the hash has been generated by an individual or entity other than the code signing authority such as the software application developer himself for example using the same hashing algorithm that the code signing authority would have otherwise used had the actual application been received by the code signing authority for signing. The hash can then subject to account verification be encoded using the appropriate private key by the code signing authority. Since the original application is never received by the code signing authority in this embodiment software application developers need not fear disclosing confidential algorithms or data. Furthermore the code signing authority may benefit since any risks associated with the applications may be left to remain with the software application developers. The code signing authority would then typically be under no obligation to check or verify code integrity or to ensure that privacy policies are adhered to for example since it never receives the actual applications that it would sign. This technique also reduces the amount of data that the code signing authority application needs to handle when processing code signing requests.

The steps of one or more of the methods described herein may be provided as executable software instructions stored on computer readable media which may include transmission type media.

The invention has been described with regard to a number of embodiments. However it will be understood by persons skilled in the art that other variants and modifications may be made without departing from the scope of the invention as defined in the claims appended hereto.

