---

title: Multi-programming-language service data optimization
abstract: A sending process maintains a sending process language-specific object in memory in a format that is dictated by a programming language utilized to implement the sending process. The sending process is also configured to cause the sending process language-specific object to be translated to a receiving process language-specific object. The receiving process language-specific object is in a format that is dictated by a programming language utilized to implement a receiving process. The sending process might also expose an application programming interface or another mechanism through which the receiving process can provide data indicating the programming language with which the receiving process has been programmed. The receiving process language-specific object is then transmitted to the receiving process. The receiving process can utilize the receiving process language-specific object directly without deserializing the received object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08661451&OS=08661451&RS=08661451
owner: Amazon Technologies, Inc.
number: 08661451
owner_city: Reno
owner_country: US
publication_date: 20120907
---
Distributed services are typically architected to return data to calling clients in a manner that is neutral to the programming languages that may be utilized to implement the calling clients. Configuring distributed services in this way enables the developers of the distributed services to concentrate on how the returned data is produced rather than focusing on how the calling clients will consume the returned data.

In order for a service to return data that is neutral to the programming languages that might be utilized to implement calling clients returned data is typically neutralized using an exchange format such as the Extensible Markup Language XML and JAVASCRIPT Object Notation JSON . The format conversion is an overhead often implemented in frameworks utilized to manage remote communication between clients and services. These frameworks may assist with the serialization and deserialization of data returned from a service to a client and vice versa.

The serialization of data into a neutral format typically involves serializing data objects into a neutral format so that the objects are implementation neutral. Deserialization typically involves converting the objects from the neutral format to a client native format. Serialization and de serialization might also involve capturing and carrying associated metadata for conversion and casting so that the returned data can be rendered in a client native form for consumption by a calling client. These processes can however be very computationally expensive especially when large amounts of data are serialized and deserialized.

The following detailed description is directed to technologies for multi programming language service data optimization for remote clients. Through an implementation of the concepts and technologies disclosed herein a distributed service can be configured to transmit objects to clients in a manner that does not require the clients to deserialize the objects prior to use. Clients might also be similarly configured to transmit objects to services in a manner that does not require the services to deserialize the objects prior to use.

According to aspects presented herein a sending process such as a distributed service is configured to receive data from a receiving process such as a client of the distributed service which identifies the programming language that was used to program the receiving process. For instance the sending process might expose an application programming interface API through which a receiving process can indicate the programming language utilized to implement the receiving process.

The sending process may utilize the data identifying the programming language utilized to program the receiving process to translate objects for use by the receiving process without deserialization. For example the sending process might utilize the data to select a library configured for translating objects maintained by the sending process in a format that is specific to the language utilized to program the sending process referred to herein as sending process language specific objects to objects in a format that is specific to the programming language utilized to program the receiving process referred to herein as receiving process language specific objects . Because receiving process language specific objects are in the format utilized by the programming language utilized to implement the receiving process these objects do not need to be deserialized prior to use.

More particularly a sending process might maintain sending process language specific objects in memory according to a memory map defined by a programming language utilized to program the sending process. A receiving process might similarly maintain receiving process language specific objects in memory according to a different memory map that is defined by the programming language utilized to program the receiving process. The libraries described above might be configured to translate sending process language specific objects constructed according to a memory map used by one programming language i.e. the programming language used to implement the sending process to receiving process language specific objects constructed according to memory maps used by other programming languages i.e. the programming languages utilized to implement receiving processes .

Once a sending process language specific object has been translated to a receiving process language specific object the receiving process language specific object may be transmitted to the receiving process for use without deserializing the object. For instance a binary large object BLOB form of the receiving process language specific object might be streamed to the receiving process. The receiving process can then place the receiving process language specific object in memory and utilize the object without deserializing the object. As will be described below other mechanisms might also be utilized to transmit a receiving process language specific object from a sending process to a receiving process.

According to another aspect a sending process might be configured to maintain and or utilize a cache containing receiving process language specific objects for storing receiving process language specific objects configured for use with various programming languages. More particularly for a particular sending process language specific object a sending process might maintain and or utilize a cache containing a multitude of receiving process language specific objects. Each of the receiving process language specific objects might be formatted according to a memory map defined by a different programming language utilized to program a receiving process. Based upon the programming language utilized to program a particular receiving process the sending process can identify and retrieve the appropriate receiving process language specific object for the receiving process. The receiving process language specific object retrieved from the cache can then be transmitted to the receiving client in the manner described above.

According to another aspect receiving process language specific objects might be transmitted to receiving processes in a one way communications mechanism that utilizes queues. For instance a sending process might store receiving process language specific objects on language specific queues associated with programming languages utilized to program receiving processes. In turn the receiving processes can retrieve a receiving process language specific object by dequeing the object from the queue corresponding to the programming language utilized to program the receiving process. The receiving processes can then utilize the dequeued receiving process language specific objects without deserialization in the manner described above.

It should be appreciated that the embodiments disclosed herein might be utilized with any type of computer computing system device application program operating system or other type of system or component. Accordingly although the embodiments disclosed herein are primarily presented in the context of a distributed service that embodies the concepts disclosed herein for multi programming language service data optimization for remote clients the disclosure presented herein is not limited to such an implementation. Moreover although the embodiments disclosed herein are primarily presented in the context of service to client data transmission the technologies disclosed herein might also be applied to client to service data transmission.

It should be also appreciated that the subject matter presented herein may be implemented as a computer process a computer controlled apparatus a computing system or an article of manufacture as a computer readable storage medium or in other ways. These and various other features will become apparent from a reading of the following disclosure and a review of the associated drawings.

While the subject matter described herein is presented in the general context of program modules that execute on one or more computing devices those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

Those skilled in the art will appreciate that the subject matter described herein may be practiced on or in conjunction with other computer system configurations beyond those described below including multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers handheld computers personal digital assistants tablet computers electronic book readers wireless telephone devices special purposed hardware devices network appliances or the like. The embodiments described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

In the following detailed description references are made to the accompanying drawings that form a part hereof and that show by way of illustration specific embodiments or examples. The drawings herein are not drawn to scale. Like numerals represent like elements throughout the several FIGS.

A receiving device executing a receiving process is also utilized in embodiments disclosed herein. The receiving device is a server computer in one embodiment but might be virtually any type of computing device as described below with regard to . The receiving process executes on the receiving device . The receiving process also receives data transmitted from the sending device in the manner disclosed herein. The receiving process might be a client of the distributed service provided by the sending process . The receiving process might also be another type of executable process that receives data from a sending process executing on a sending device . In this regard it should be appreciated that the various embodiments disclosed herein are merely illustrative and that the technologies utilized herein might be utilized to optimize communication between other types of sending and receiving processes than those disclosed herein.

As also shown in the sending device and the receiving device may be interconnected by one or more networks . The network might be a local area network LAN a wide area network WAN the Internet or any other networking topology known in the art that connects the sending device and the receiving device . Multiple such networks might also be utilized. In this regard it should be appreciated that the network and the configuration of both the sending device and the receiving device have been simplified in for discussion purposes. These elements might utilize many more components than shown in .

According to various embodiments disclosed herein the sending process is configured to maintain one or more sending process language specific objects which might be referred to herein as objects . The sending process language specific object is a collection of data and potentially one or more routines for operating on the data. The sending process language specific object is maintained in memory in a format that is dictated by the programming language utilized to program the sending process .

For example if the C programming language is utilized to program the sending process a memory map having certain characteristics defined by the C programming language may be utilized to store the sending process language specific object in memory. If the JAVA programming language is utilized to program the sending process a memory map having different characteristics defined by the JAVA programming language may be utilized to store the sending process language specific object in memory. Other programming languages might also result in other memory maps being utilized to store the sending process language specific object in a memory of the sending device .

In order to transmit the sending process language specific object to the receiving process the sending process is configured in one embodiment to cause the sending process language specific object to be translated to a receiving process language specific object which might be referred to herein as objects . The sending process might perform the translation directly or in other embodiments one or more appropriate libraries are utilized to perform the translation. Other mechanisms might also be utilized to perform the translation.

It should be appreciated that the sending process and the receiving process might be programmed using different programming languages or the same programming language. In the case where the sending process and the receiving process are programmed using the same programming language a cast operation might be utilized to translate a sending process language specific object to a receiving process language specific object . Where the sending process and the receiving process are programmed using different programming languages more complex translation operations might be performed.

The receiving process language specific object is a language specific data type equivalent of a corresponding sending process language specific object . More particularly the receiving process language specific object contains the data and or methods of the sending process language specific object but is formatted according to a memory map defined by the programming language utilized to program the receiving process . For instance the receiving process language specific object might be formatted according to a memory map defined by the programming language utilized to program the receiving process . In order to perform this translation various mechanisms might be provided through which the receiving process can indicate the language with which it has been programmed to the sending process .

Once the sending process has caused the sending process language specific object to be translated to the receiving process language specific object the receiving process language specific object might be transmitted to the receiving process for use. For instance the receiving process might invoke one or more of the methods defined in the receiving process language specific object . Because the receiving process language specific object has already been formatted according to the programming language utilized to program the receiving process the receiving process language specific object can be placed into memory and utilized without deserialization. Additional details regarding these and other aspects of the technologies disclosed herein for multi programming language service data optimization will be provided below with regard to .

As shown in the service is configured to expose an API through which the client can provide a client language description . The client language description includes data that describes the programming language utilized to program the client . The client language description might also provide other information regarding the programming language utilized to program the client such as a compiler identifier a compiler version number and potentially other information. The client language description might be provided to the service as part of a request . For instance the request might be a request for the receiving process language specific object . The request might also include information other than the client language description such as an identifier of the receiving process language specific object .

As will be described in greater detail below the data contained in the client language description may be utilized to translate a sending process language specific object to a receiving process language specific object . It should be appreciated that other mechanisms separate from or in addition to the API might be provided through which a client can provide the information described above as being contained in the client language description .

As also shown in the service might utilize one or more receiving process language specific conversion libraries A C. The receiving process language specific conversion libraries A C are libraries configured to convert a sending process language specific object to a receiving process language specific object . Each of the libraries A C might be configured to convert objects configured for use with programs generated with one programming language to objects configured for use with another programming language. For example the receiving process language specific conversion library B might be configured to translate a sending process language specific object formatted according to a C memory map to a receiving process language specific object formatted according to a JAVA memory map. The libraries might also provide functionality for performing other types of conversions.

In one embodiment only a single library is utilized. In this embodiment the library is configured to convert between a base programming language and other programming languages based upon the based programming language. For instance the library might be constructed to convert objects for use with the C programming languages and other programming languages that are based upon the C programming language such as the JAVA C PERL and PHP programming languages. Such a configuration might assist in quick deployment and utilization of the library .

Once the client has indicated the programming language utilized to program itself through the API or in another manner the service may utilize the data identifying the programming language utilized to program the client to select an appropriate library configured for translating an object maintained by the service in a format that is specific to the language utilized to program the service to an object in a format that is specific to the programming language utilized to program the client . The selected library might then be utilized to translate the sending process language specific object constructed according to a memory map used by one programming language i.e. the programming language used to implement the sending process to a receiving process language specific object constructed according to a memory map used by the programming language utilized to program the client .

Once the sending process language specific object has been translated to the receiving process language specific object the receiving process language specific object may be transmitted to the client for use without deserializing the object . For instance and as mentioned above a BLOB form of the receiving process language specific object might be streamed to the client from the service or another component. The client can then place the receiving process language specific object in memory and utilize the object without deserializing the object. Other mechanisms might also be utilized to transmit a receiving process language specific object to a client . One such mechanism will be described below with regard to A and B.

Turning now to additional details will be provided regarding the embodiments described herein for multi programming language service data optimization. In particular are flow diagrams showing several routines and respectively that show aspects of one illustrative mechanism for multi programming language service data optimization in one embodiment disclosed herein. illustrates aspects of the operation of a receiving process such as the client and illustrates aspects of the operation of a sending process such as the service . The routines and will be described together below.

It should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein with reference to and the other various figures are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in parallel or in a different order than those described herein.

The routine begins at operation where a receiving process such as the client transmits the client language description to an API exposed by a sending process such as the service . As discussed above the client language description might be provided as a part of a request or in another manner. As also mentioned above the client language description includes data identifying the programming language utilized to program the receiving process . As also mentioned above other mechanisms might also be utilized to notify a sending process of the programming language utilized to program a receiving process .

The sending process receives the client language description at operation of the routine . From operation the routine proceeds to operation where the sending process utilizes the data in the client language description to identify an appropriate library for translating the sending process language specific object to a receiving process language specific object compatible with the receiving process .

Once an appropriate library has been selected the routine proceeds from operation to operation where the sending process calls the selected library to translate the sending process language specific object to the receiving process language specific object . In turn the selected library performs the conversion and or translation and returns the receiving process language specific object to the service .

The routine then proceeds to operation where the service or another component transmits the receiving process language specific object to the receiving process . As mentioned above a BLOB form of the receiving process language specific object may be streamed to the receiving process . Other transmission mechanisms might also be utilized. From operation the routine proceeds to operation where it ends.

From operation the routine proceeds to operation where the receiving process allocates memory for the receiving process language specific object . The routine then proceeds to operation where the receiving process receives the receiving process language specific object from the service .

From operation the routine proceeds to operation where the receiving process stores the receiving process language specific object in the memory allocated at operation . The receiving process can then utilize the receiving process language specific object without deserialization of the object . The routine then proceeds from operation to operation where it ends.

As shown in the service might utilize a cache in one embodiment to store a multitude of receiving process language specific objects A C. The receiving process language specific objects A B are language specific versions of the service language specific object . For example if the service is programmed using C the receiving process language specific object A might be generated for use by clients programmed using JAVA the receiving process language specific object B might be generated for use by clients programmed using PERL and the receiving process language specific object C might be generated for use by clients programmed using PHP.

Other receiving process language specific objects might also be stored in the cache for use by clients programmed using other programming languages. The receiving process language specific objects stored in the cache might also be generated and stored in the cache prior to the time that a request is received for the objects . By pre storing the objects in the cache latency in responding to requests from clients for the objects might be reduced. The objects stored in the cache might be generated directly by the service using the libraries described above or in another manner.

As in the examples described above a client may provide a client language description to the service by way of an API or another mechanism. The client language description might be provided as a part of a request as described above. Utilizing the data contained in the client language description the service can identify a receiving process language specific object stored in the cache that is appropriate for use by the client . For instance if the client has been programmed using the JAVA programming language the service may select a receiving process language specific object from the cache that has been formatted according to a JAVA compatible memory map. In the example shown in the service has selected the receiving process language specific object C.

Once the service has selected an appropriate receiving process language specific object for the client the service causes the selected object to be transmitted to the client . For instance in the example shown in the receiving process language specific object C has been transmitted to the client . As mentioned above a BLOB form of the object C may be streamed to the client . Other mechanisms might also be utilized to stream the object C to the client . As also discussed above the client can utilize the object C without deserialization. Additional details regarding the mechanism shown in will be described in greater detail below with regard to .

The routine begins at operation where a sending process such as the service maintains a cache containing a multitude of receiving process language specific objects configured for receiving processes such as the clients that have been programmed using different programming languages. In this regard the sending process might periodically generate the objects for one or more service language specific objects and store the objects in the cache . As mentioned above pre generating the objects in advance of the time they are transmitted to receiving processes might reduce latency.

The routine begins at operation where a receiving process such as the client transmits the client language description to an API exposed by a sending process such as the service . The client language description might be transmitted for instance as a part of a request for a receiving process language specific object . As also mentioned above the client language description includes data identifying the programming language utilized to program the receiving process . As also mentioned above other mechanisms might also be utilized to notify a sending process of the programming language utilized to program a receiving process .

The sending process receives the client language description at operation of the routine . From operation the routine proceeds to operation where the sending process utilizes the data in the client language description to identify an appropriate receiving process language specific object that is compatible with the receiving process that has been previously stored in the cache .

Once an appropriate receiving process language specific object has been selected from the cache the routine proceeds from operation to operation where the sending process or another component transmits the identified receiving process language specific object to the receiving process . As mentioned above a BLOB form of the receiving process language specific object may be streamed to the receiving process . Other transmission mechanisms might also be utilized. From operation the routine proceeds to operation where it ends.

From operation the routine proceeds to operation where the receiving process allocates memory for the receiving process language specific object . The routine then proceeds to operation where the receiving process receives the receiving process language specific object from the service .

From operation the routine proceeds to operation where the receiving process stores the receiving process language specific object in the memory allocated at operation . The receiving process can then utilize the receiving process language specific object without deserialization of the object . The routine then proceeds from operation to operation where it ends.

As shown in a sending process such as the service might maintain one or more messaging queues A C. The queues A C are language specific and are configured to store receiving process language specific objects configured for use by receiving processes such as the clients that have been programmed with the corresponding programming language. For example the queue A might be configured for storing receiving process language specific objects A that have been formatted for use by receiving processes that have been programmed using the C programming language. Similarly the queue B might be configured for storing receiving process language specific objects B that have been formatted for use by receiving processes that have been programmed using the JAVA programming language.

In order to transmit receiving process language specific objects to receiving processes such as the clients A C the service generates receiving process language specific objects A for receiving processes programmed in a multitude of languages in the manner described above. The objects might be generated directly by the service using the libraries described above or in another manner. The service then causes the generated receiving process language specific objects A C to be placed into the appropriate queue A C.

In the embodiment shown in the clients A C are configured to dequeue a receiving process language specific object from an appropriate queue. As mentioned above for instance if the client A has been programmed using the C programming language the client A will be configured to dequeue objects from a queue that stores objects that have been formatted for use by clients programmed using the C programming language. Multiple receiving processes might dequeue objects from the same queue.

Once the clients A C have dequeued objects from an appropriate queue the objects may be utilized directly without deserialization. Additional details regarding this process are provided below with regard to .

The routine begins at operation where a sending process such as the service causes a sending process language specific object to be translated to a multitude of receiving process language specific objects . As mentioned above the receiving process language specific objects might be formatted for use by receiving processes that have been programmed using different programming languages.

From operation the routine proceeds to operation where the sending process causes the objects generated at operation to be stored in an appropriate language specific queue . For example objects configured for use by receiving processes programmed using the C programming language will be stored in a queue configured for storing such objects . Objects configured for use by receiving processes programmed using other programming languages may be stored in other queues .

From operation the routine proceeds to operation where the sending process permits receiving processes such as the clients A C to dequeue objects from the queues . For instance the service might unlock the queues thereby permitting the clients A C to dequeue the objects contained therein. The routine then proceeds back to operation where the sending process might update the objects stored in the queues .

The routine begins at operation where a receiving process such as one of the clients A C allocates memory for a receiving process language specific object . The routine then continues to operation where the receiving process dequeues a receiving process language specific object from the appropriate queue . As discussed above for instance a client A that has been programmed using the JAVA programming language will dequeue an object from a queue that has been configured to store objects formatted for use by clients that have been programmed using the JAVA programming language.

From operation the routine proceeds to operation where the receiving process stores the dequeued object in the memory allocated at operation of the routine . The receiving process can then utilize the stored object without deserialization of the object . From operation the routine proceeds to operation where it ends.

The computer includes a baseboard or motherboard which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication paths. In one illustrative embodiment one or more central processing units CPUs operate in conjunction with a chipset . The CPUs are standard programmable processors that perform arithmetic and logical operations necessary for the operation of the computer .

The CPUs perform operations by transitioning from one discrete physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states such as flip flops and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements such as logic gates. These basic switching elements may be combined to create more complex logic circuits including registers adders subtractors arithmetic logic units floating point units or the like.

The chipset provides an interface between the CPUs and the remainder of the components and devices on the baseboard. The chipset may provide an interface to a random access memory RAM used as the main memory in the computer . The chipset may further provide an interface to a computer readable storage medium such as a read only memory ROM or non volatile RAM NVRAM for storing basic routines that help to startup the computer and to transfer information between the various components and devices. The ROM or NVRAM may also store other software components necessary for the operation of the computer in accordance with the embodiments described herein.

According to various embodiments the computer may operate in a networked environment using logical connections to remote computing devices and computer systems through a network such as a LAN a WAN the Internet or any other networking topology known in the art that connects the computer to remote computers. The chipset includes functionality for providing network connectivity through a network interface controller NIC such as a gigabit Ethernet adapter. Multiple NICs may be present in the computer connecting the computer to other types of networks and remote computer systems.

The computer may be connected to a mass storage device that provides non volatile storage for the computer. The mass storage device may store system programs application programs other program modules and data which have been described in greater detail herein. The mass storage device may be connected to the computer through a storage controller connected to the chipset . The mass storage device may consist of one or more physical storage units. The storage controller may interface with the physical storage units through a serial attached SCSI SAS interface a serial advanced technology attachment SATA interface a FIBRE CHANNEL FC interface or other standard interface for physically connecting and transferring data between computers and physical storage devices.

The computer may store data on the mass storage device by transforming the physical state of the physical storage units to reflect the information being stored. The specific transformation of physical state may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the physical storage units whether the mass storage device is characterized as primary or secondary storage or the like.

For example the computer may store information to the mass storage device by issuing instructions through the storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive unit the reflective or refractive characteristics of a particular location in an optical storage unit or the electrical characteristics of a particular capacitor transistor or other discrete component in a solid state storage unit. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this description. The computer may further read information from the mass storage device by detecting the physical states or characteristics of one or more particular locations within the physical storage units.

In addition to the mass storage device described above the computer might have access to other computer readable media to store and retrieve information such as program modules data structures or other data. It should be appreciated by those skilled in the art that computer readable media can be any available media that may be accessed by the computer including computer readable storage media and communications media. Communications media includes transitory signals.

Computer readable storage media includes volatile and non volatile removable and non removable storage media implemented in any method or technology. For example computer readable storage media includes but is not limited to RAM ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory or other solid state memory technology compact disc ROM CD ROM digital versatile disk DVD high definition DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information. Computer readable storage media does not include transitory signals.

The mass storage device may store an operating system utilized to control the operation of the computer . According to one embodiment the operating system comprises the LINUX operating system. According to another embodiment the operating system comprises the WINDOWS SERVER operating system from MICROSOFT Corporation of Redmond Wash. According to further embodiments the operating system may comprise the UNIX or SOLARIS operating systems. It should be appreciated that other operating systems may also be utilized. The mass storage device may store other system or application programs and data utilized by the computer . For instance the mass storage device might store the sending process and the client language specific conversion library A both of which were described above.

In one embodiment the mass storage device or other computer readable storage media may be encoded with computer executable instructions that when loaded into the computer transform the computer from a general purpose computing system into a special purpose computer capable of implementing the embodiments described herein. These computer executable instructions transform the computer by specifying how the CPUs transition between states as described above. According to one embodiment the computer has access to computer readable storage media storing computer executable instructions that when executed by the computer perform the various routines and operations described herein.

The computer may also include an input output controller for receiving and processing input from a number of input devices such as a keyboard a mouse a touchpad a touch screen an electronic stylus or other type of input device. Similarly the input output controller may provide output to a display device such as a computer monitor a flat panel display a digital projector a printer a plotter or other type of output device. It will be appreciated that the computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

Based on the foregoing it should be appreciated that technologies for multi programming language service data optimization for remote clients have been presented herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

