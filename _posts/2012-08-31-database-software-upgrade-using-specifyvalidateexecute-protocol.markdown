---

title: Database software upgrade using specify-validate-execute protocol
abstract: A method, system, and computer program product for upgrading high-availability database systems. The method commences by specifying a subject database configuration state (e.g., an initial state) as well as an upgraded database configuration state (e.g., an upgraded state). Then, the method performs operations for compiling the specifications and validating the upgraded database configuration state with respect to the specified subject database configuration state. Compile errors are reported and a user can change the specifications. Once the compiler determines that the upgraded configuration state can be reached from the subject database configuration state, then the method generates an upgrade plan. The upgrade plan is executed by a computer-implemented controller. During execution of the plan, the controller pauses for accepting user intervention at key execution points. The controller monitors state changes to establish checkpoints. In the event of execution errors detected during execution of the plan, corrective action reports are output.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09513894&OS=09513894&RS=09513894
owner: Oracle International Corporation
number: 09513894
owner_city: Redwood Shores
owner_country: US
publication_date: 20120831
---
A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The disclosure relates to the field of high availability database systems and more particularly to techniques for database software upgrades using a specify validate execute protocol.

Some embodiments of the present disclosure are directed to an improved approach for implementing database software upgrades using a specify validate execute protocol.

Databases comprise the actual storage on a physical storage device e.g. a disk drive which works in combination with corresponding software. In exemplary scenarios a database comprises tables and records that are laid out in an ordered sequence of bytes. A software application that accesses the physical data on the storage device has a template of the layout and can retrieve information from certain portions or fields in the data.

In some situations for example as time passes the layout of the data needs to be modified. An example of such a situation was the occurrence of the millennium when the formerly accepted way of storing a date code was to use just two digits i.e. referring to the number of year after 1900 . As we approached the turn of the millennium to the year 2000 it became apparent that data stored in the two digit or equivalent format would become ambiguous. That is would the two digits 01 refer to 1901 or would it refer to 2001 . The storage of the year data needed to change as did the software e.g. application software that accessed the stored data.

A simple approach to upgrading this sort of configuration required following a procedure to take the primary database down then upgrade the software then rebuild the primary database then bring the primary database back online . There are many limitations to this approach for example 

A better way is needed. The aforementioned technologies do not have the capabilities to perform database software upgrades while minimizing or eliminating downtime and mitigating the effects of errors that might occur in the transitions to the upgraded database format and database software. Therefore there is a need for an improved approach.

The present disclosure provides an improved method system and computer program product suited to address the aforementioned issues with legacy approaches. More specifically the present disclosure provides a detailed description of techniques used in methods systems and computer program products for database software upgrades using a specify validate execute protocol in a configuration having a primary database and at least one standby database.

The disclosure resolves aforementioned problems associated with the legacy techniques. As is disclosed in the accompanying figures an upgrade of a high availability database can be accomplished concurrently with an upgrade of the database software in an orchestrated manner minimizing or eliminating the possibility of user errors and eliminating down time and loss of data.

A method system and computer program product are disclosed. The method commences by specifying a subject database configuration state e.g. an initial state as well as an upgraded database configuration state e.g. an upgraded state . Then the method performs operations for compiling the specifications and validating the upgraded database configuration state with respect to the specified subject database configuration state. Compile errors if any are reported and a user can change the specifications to correct errors in specification or address compiler warnings. Once the compiler determines that the upgraded configuration state can be reached from the subject database configuration state then the method generates an upgrade plan. The upgrade plan is executed by a computer implemented controller. During execution of the plan the controller pauses for accepting user intervention at key execution points. Further during execution of the plan the controller monitors state changes to establish checkpoints. In the event of execution errors detected during the execution of the plan corrective action reports are output. Some upgrade specifications include both changes to the layout of data in the constituent records as well as specifications of one or more upgraded versions of software binary images.

Further details of aspects objectives and advantages of the disclosure are described below in the detailed description drawings and claims. Both the foregoing general description of the background and the following detailed description are exemplary and explanatory and are not intended to be limiting as to the scope of the claims.

Some embodiments of the present disclosure are directed to an improved approach for implementing database software upgrades using a specify validate execute protocol. More particularly disclosed herein are environments methods and systems for implementing database software upgrades using a specify validate execute protocol in a configuration having a primary database and at least one standby database.

In addition to the aforementioned deficiencies of legacy techniques there are still further issues that need to be addressed.

With the above list of issues to be addressed it becomes apparent that techniques for upgrade are inadequate. The existing method of a rolling upgrade consists of a sequence of instructions consisting of various queries which are coordinated by a user with the intent to yield an upgraded database.

The improved approaches address several major problems with legacy approaches First the improved approach reduces the granularity of the instructions. Second the improved approach reduces the number of parallel or redundant instructions pertaining to each standby database. And third the improved approach reduces the extent of manual intervention.

As previously mentioned legacy approaches call for users to execute queries at specific sites before and after specific instructions. Troubleshooting while using legacy approaches can be tedious since users are left to peruse alert logs and trace to identify the source of any problems. Moreover even upon identification of a given problem users are left to derive how to resume the upgrade procedure. For example while using legacy approaches users that may wish to abandon the upgrade and rollback their configuration are left to handle each database individually based on the then current state of the configuration.

The herein disclosed techniques for improving the legacy techniques operate under an improved regime the regime including 

As shown the operation chart depicts three phases namely a specify phase a compile validate phase and an execution phase . The regime commences at a specify validate execute entry point and proceeds to the specify phase in which phase a user can specify the current database configuration see operation as well as specify the desired upgrade configuration see operation . For example the user might specify a subject database in a directive such as upgrade the Engineering Department production server database . And the user might specify a particular upgrade end state in a directive such as upgrade to apply the patches listed in the file located at Drive path upgrade.txt . Execution of the steps of operation results in directives comprising a subject database specification . Similarly execution of the steps of operation results in the codification of an upgraded database specification .

As can be seen the operation chart proceeds to the compile validate phase and the specifications e.g. the subject database specification and the upgraded database specification are read in order to check for specification errors and inconsistencies see operation . If and or when errors are found see decision such errors are reported to the user see operation and the user can return to the specify phase and revise the specifications so as to attempt to remove the compile error. If no errors are discovered in the compile validate phase then the specifications are deem to be error free and consistent at least to the extent that processing proceeds to the execution phase . In some embodiments application of a set of validation rules can detect databases that are incorrectly configured. Or application of a set of validation rules can detect parameter settings which may present future problems due to values being specified outside of best practice guidelines.

In the execution phase the computer aided tool generates an upgrade plan see operation and proceeds to perform the upgrade in accordance with the upgrade plan see operation . It is possible that run time errors can occur during the performance of the upgrade. Such errors can occur for a multitude of reasons including occurrence of disasters during the performance of the upgrade. Such errors are mitigated and or corrected using techniques that apply to specific situations which are now briefly discussed 

As shown a high availability configuration A may comprise a primary database and any number of standby databases e.g. standby database standby database standby database etc. . A reader farm e.g. reader farm reader farm reader farm reader farm reader farm etc. is comprised of multiple of standby databases e.g. standby database standby database standby database etc. . A reader farm is used for many purposes including providing access to read only data for an application e.g. report generators cloners etc. and such read only access can be provided while the primary database is in operation. Another feature of a reader farm in the configuration as shown in the high availability configuration A is to provide a redo capability. For example if a particular standby database were to fail or merely go offline for a duration the redo transport multiple redo transports are shown as bold arrows can be employed to redo transactions from an earlier point in time thus allowing the failed or temporarily offline standby database to be rebuilt. The standby databases can be used to provide read only access to the production data or for application offloading or for any other read only purposes.

The high availability configuration B extends the capabilities of the high availability configuration A. Specifically the physical standby database receives the primary database s data as is forwarded to them via the redo transport as shown. This environment provides a high degree of redundancy as well as the ability to configure a logical standby database from a physical standby database .

The techniques disclosed herein uses physical standby databases to provide backup protection. More specifically a physical standby database may be designated to protect the logical standby database during the course of the upgrade. In the event of a failure or outage or other unexpected event the physical standby database can be configured to recover the online redo of a transient instance of a logical standby database rather than from the original primary database. This technique serves to insulate the original primary database from any integrity compromising event that might occur during an upgrade.

In somewhat more detail uses of a physical standby database that has been designated to protect the transient logical standby database during the course of the upgrade provides many desirable features for example 

Examples of the above and other features are shown and described in the figures and corresponding text herein.

The time sequence begins at time t Tand proceeds through the shown phases to time t T. At time t T the database to be upgraded is in normal operation and in the example given for this particular time sequence the database is already configured as a high availability configuration or becomes so configured by time t T. In this example the high availability configuration comprises a primary database P and multiple standby databases e.g. standby database S standby database S standby database S etc. . Once configured the planning phase commences. This phase consists of activities related to preparing plan parameters and building of the upgrade plan. In some embodiments any all of the steps given in the operation chart are performed and at least some of the aspects of the specify validate execute protocol are commenced. One result of the planning phase is the aforementioned upgrade plan and the upgrade plan guides progression of the upgrade through to the restart phase .

More specifically a startup phase marks the start of the upgrade. This startup phase comprises activities related to setup such as taking restore points instantiation of a transient logical standby database and configuration of standby databases. As shown one of the high availability standby databases see standby database S is selected to become a logical standby database see logical standby database LS . Once selected standby database Sbecomes the subject of a convert operation see convert which results in a configured instance of a logical standby database see logical standby database LS . The other standby databases e.g. standby database S standby database S etc. continue in their role as standby databases and their state changes in accordance with the intended operation of a standby database. The time variant state is shown as standby database Sthrough standby database S.

Once the startup phase activities are deemed to have been completed or at least the startup phase activities are deemed ready for transition to the upgrade activities the upgrade phase begins. This phase consists primarily of activities related to the upgrade of the database software. In some cases users control the specific application of the software upgrades. In other cases the specific application of the software upgrades is computer aided and users are only minimally tasked to perform specific application of the software upgrades. Activities to perform specific application of the software upgrades include the upgrade of the database kernel software upgrade of database application software application of patches and automatic or manual startup of the transient logical standby database and automatic or manual startup of the multiple standby databases e.g. standby database S standby database S etc. on the higher version e.g. upgraded binary.

This switchover phase consists of activities related to the switchover of the transient logical standby into the new primary database. As shown the logical standby database LSbecomes the subject of a switchover operation see switch which results in a configured instance of a new primary database see primary database P . The other standby databases have been upgraded during the just prior upgrade phase and persist as standby databases e.g. standby database SUstandby database SU etc. which continue in their role as standby databases in this high availability configuration.

This restart phase consists of activities related to the setup of the former primary Pand any standbys onto the higher version binary. In addition this group of databases if flashed back via a FLASHBACK DATABASE DDL operation to a point in time just before the creation of logical standby database LS. The redo logs produced by the LSare then automatically registered and processed thereby converting Pand its associated physical standbys into physical standbys of LS.

The finishing phase not shown in consists of activities related to cleanup of all state from the database necessary to manage this method of rolling upgrade.

In progressing through the phases of Table 1 there are at least three databases that undergo transitions. Those three databases and their respective phase transitions are depicted in .

As shown in the upgrade scenario of the database A is the original primary database database B is the future primary database and database C is a standby database of the primary database A that is converted into a logical standby database. The activities shown for database C are synchronized with activities of database B and activities shown for database B are synchronized with activities of database A.

Reading the chart beginning from top left database A is initially in a primary phase . A database B is shown as initially in a physical phase and a database C is shown as initially in a physical phase . At some point a restore point is taken for each of the three databases. The database B which is intended to become a future primary database is converted into a logical database and enters its transient logical phase . During this phase the upgrade software is applied and the database B is built up through an earlier captured recovery point. The version e.g. version number filename specification etc. of an upgraded software binary image can be specified see specify validate phase and corresponding rebuilding is performed based on the upgraded software and database layout. The database A is still the primary at this point at least until a switchover of the primary to the database B at which point the database B can catch up to the primary e.g. through a rebuild using redo logs and once caught up the database B can assume the role of primary which is depicted as the transition of database B into its primary phase .

Once the database B has assumed the role of primary database then the former primary database can enter its logical phase during which phase the former primary database A can be subjected to a switchover to logical database and subjected to a flashback operation converted to physical database to enter physical phase and upgraded via redo.

During any of the aforementioned phases as shown in the database C serves as a physical standby of database B. In the event of certain integrity compromising events database C can serve as a physical copy of the database B and can be used to restore any portion of database B. Database C persists through several phases such as as shown a physical phase where a restore point is captures and through a physical phase where Database C is restarted based on the upgraded layout and or based on upgraded software image s . The Database C persist through yet another phase namely the physical phase which phase commences when the redo logs of the upgraded primary have been completed and acknowledged by Database C.

As shown the messaging protocol is executed in an environment comprising a primary database a standby database . Other components in this environment include a database application e.g. an enterprise software application a specify validate module and an execution module .

In one exemplary embodiment the messaging protocol commences when a user interacts with a specify validate module to specify a configuration see operation and to specify a desired state see operation . The user will then initiate compile validate steps see operation . The output of the compile validate steps might include error reports see operation chart in which case the operation and operation might be repeated with remediation. Assuming the compile validate steps pass then the specify validate module serves to produce a plan see operation which plan is sent to an execution module see message .

Meanwhile and as shown the primary database is performing in normal operation. For example a database application sends a transaction see transaction request message which transaction is processed by the primary database see operation . In the case that the primary database has a standby database then the primary database sends a transaction to the standby database see send transaction message .

Now even while the primary database is in normal operation the execution module can advise the primary database of impending upgrade activity see message . If the primary database has a sufficient standby database as shown then the primary database sends a message to a standby database to advise of the impending upgrade activity see message . Such advice such as embodied in message informs the standby database to convert into a logical standby see operation at which point the execution module might send details of the upgrade format see message . Given the contents of the foregoing message and possibly other information the standby database can apply the upgrade see operation . In some cases not only the database formats but also the database software e.g. any one or more enterprise software databases can be upgraded. In one embodiment a software enterprise application or database application receives advise to upgrade see message and the software enterprise application or database application might suspend see operation before applying the upgrade see operation and then resuming see operation . The software enterprise application or database application might advise the standby database of the act of resumption for example via connecting to the database see message . At some point before the standby database switches over see operation to become a new upgraded primary database the standby database catches up to the primary see operation . Once caught up the standby database can assume its intended role as a new upgraded primary database and the former primary database ceases to be the primary see message . The former primary database can then itself become upgraded see restart with upgrade operation and be brought up to date with the new upgraded primary database by using redo logs see operation .

According to one embodiment of the disclosure computer system performs specific operations by processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another computer readable usable medium such as ROM or storage device . In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the disclosure. Thus embodiments of the disclosure are not limited to any specific combination of hardware circuitry and or software. In one embodiment the term logic shall mean any combination of software or hardware that is used to implement all or part of the disclosure.

The term computer readable medium or computer usable medium as used herein refers to any medium that participates in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media and volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory .

Common forms of computer readable media includes for example floppy disk flexible disk hard disk magnetic tape or any other magnetic medium CD ROM or any other optical medium punch cards paper tape or any other physical medium with patterns of holes RAM PROM EPROM FLASH EPROM or any other memory chip or cartridge or any other non transitory medium from which a computer can read data.

In an embodiment of the disclosure execution of the sequences of instructions to practice the disclosure is performed by a single instance of the computer system . According to certain embodiments of the disclosure two or more computer systems coupled by a communications link e.g. LAN PTSN or wireless network may perform the sequence of instructions required to practice the disclosure in coordination with one another.

Computer system may transmit and receive messages data and instructions including programs e.g. application code through communications link and communication interface . Received program code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution. Computer system may communicate through a data interface to a database on an external data repository . A module as used herein can be implemented using any mix of any portions of the main memory and any extent of hard wired circuitry including hard wired circuitry embodied as a processor .

In the foregoing specification the disclosure has been described with reference to specific embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the disclosure. For example the above described process flows are described with reference to a particular ordering of process actions. However the ordering of many of the described process actions may be changed without affecting the scope or operation of the disclosure. The specification and drawings are accordingly to be regarded in an illustrative sense rather than restrictive sense.

