---

title: Processing requests
abstract: Requests are processed at a computer server by receiving a request for service from a user terminal, the request including distress information representing a degree of failure to process at least one prior similar request from the user terminal for the service. The distress information is received from the request and the request is processed in accordance with the distress information. A user terminal provides distress information in a request, based on responses received from the server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09602594&OS=09602594&RS=09602594
owner: Microsoft Technology Licensing, LLC
number: 09602594
owner_city: Redmond
owner_country: US
publication_date: 20120731
---
The present invention relates to processing requests particularly in the context of a cloud based stateless server architecture.

In such an architectures multiple servers are provided for processing requests from multiple clients. The servers can be located in the same physical location or in different physical locations but as far as any particular client is concerned they are not aware of the location of the server. The servers are located behind a load balancing mechanism which manages requests to the servers from the client terminals in accordance with a variety of load balancing techniques. The clients are in communication with the load balancing mechanism and thus the servers via any suitable network which can be wired or wireless.

It will be appreciated that at any particular time a very large number of requests could be issued by clients globally to be received at the cloud and managed by the load balancing mechanism . The servers are agnostic in the sense that they do not know anything about earlier requests that may have been received from the same client terminal and issued to other servers in the cloud . Each particular server manages the processing of the requests which it serves based on a queue of incoming requests to that server managed by the load balancing mechanism .

An example of such an architecture is in a search engine where a search request is received from the client terminal and directed to a server. The server processes the request by implementing the search and returning a search result to the user of the client terminal that issued the request.

This summary is provided to introduce the selection of concepts in a simplified form that are further described below in the detailed description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

A method of issuing requests from a user terminal is described herein. A first request for a service is issued to a server. A response to the first request is monitored to determine if it is received at the user terminal in a predetermined time. If a response has not been received in the predetermined time a second similar request is issued including distress information representing a degree of failure to process the first request the distress information evaluated based on the monitoring step.

A user terminal is described for accessing a service from a server to which it is connected via a communication network. The user terminal has a transmit function operable to issue a first request to a server for the service. The user terminal also has a monitoring function which monitors whether a response to the first request is received at the terminal in a predetermined time. The transmit function issues a second similar request for the same service if a response has not been received in a predetermined time. An insert function at the user terminal inserts in the second request distress information representing a degree of failure to process the first request wherein the distress information is evaluated by the monitoring function.

A computer program product is described which has computer readable instructions on a computer readable medium which when executed by a computer provides a communication client for establishing communication events. The product also issues a first request to a server for a service required by the communication client monitors whether a response to the first request is received at the user terminal in a predetermined time and if a response has not been received in the predetermined time issues a second similar request and includes in the second request distress information representing a degree of failure to process the first request the distress information evaluated based on the monitoring step.

The various embodiments can be applied in a wide variety of contexts. It can be used for browser applications web clients and other clients. According to one example a communication client which is operable to set up packet based communications can benefit from the inventive concept.

For a better understanding of the various embodiments and to show how the same may be carried into effect reference will now be made by way of example to the accompanying drawings.

Various embodiments can improve the efficiency of processing requests particularly but not exclusively in a stateless server based cloud architecture.

Various embodiments enable a client side application to signal distress or failure to receive services to a server side on consecutive requests. This enables the server side to prioritise requests and or to fall back to provide a lower complexity or quality of service. This allows for a configurable quality time to serve trade off which is important for near real time applications. The principle can be applied to communication systems which enable web service API Application Programming Interface calls to be established. Stateless servers may maintain a list of alternative processes for Web service API calls. In one embodiment the alternative processes may be prioritised based on computational requirements. In one embodiment if the server load is high lower computational requirement processes may be executed in response to a client call.

The server configuration may be a mapping of a call to alternate calls. Configurations can be set by the app developer. Configurations are synchronised to all other stateless servers in the group. Alternatively the developer may set different configurations at each server.

When a client application makes a service request towards the cloud it appends information about the last failed request. A stateless cloud server behind load balancing would normally know nothing about the failure of previous requests but due to the distress information provided in the request it can prioritise the request in the queue and also consider serving the request with a different for example computationally cheaper algorithm.

Referring to each client terminal comprises a processor which is connected to a memory and a display . The processor can execute code stored in memory . In particular it can execute a client for accessing services via the Internet. The following description describes the case where the client is a browser application or web client. However the various embodiments are not only intended for such contexts. According to another example a communications client which is operable to set up packet based communications over the Internet can benefit from the inventive concept. An example of such a communications client is that offered by Skype. The processor is connected to a port from which requests to the cloud can be issued and responses to those requests can be received. As is well known in the field the browser application can cause a user interface to be presented to the user on the display by means of which the user can enter an Internet address to access the service required by the user. For example it could be seeking content from a database.

The request to the cloud issued by the client can be issued responsive to the user request or without the user being specifically aware that a request has been issued. All the user knows is that he has asked for a particular service.

In accordance with embodiments of the present invention the browser application web client is modified to append distress information about the last previous failed request s when the client makes a service request towards a cloud. This could either be the number of failed requests that have been submitted previously or the time in seconds since the first request thus providing a gradient towards a perceived worsening of quality of service.

A stateless cloud server behind a load balancing mechanism as in normally knows nothing about the failure of previous requests but with the modified client application described herein distress information provided in the requests can allow the requests to be prioritised at the server. Additionally or alternatively the server can consider serving the request with a different e.g. computationally cheaper algorithm when the distress information indicates that there has been a worsening quality of service. This mechanism can be used to reduce disruption in service to the client terminals by reducing the load on the server and by lowering the quality of services when the system is under stress.

For the purposes of explanation a schematic functional diagram of the modified client is shown in in accordance with one or more embodiments. A transmit function transmits requests to the cloud . A receive function receives responses to that request. For example this could be in the context of a web page serving user content from databases with the client using AJAX to request content. As is well known AJAX Asynchronous Java Script and XML Extended Markup Language provides a request object which can be used to retrieve data from a server. AJAX allows data to be exchanged between a user terminal and a server asynchronously without interfering with the web page currently presented to the user. The receive function monitors the time for receiving a response. If the response did not come in a designated time a similar subsequent request is generated effectively the request is repeated along with a modification to include distress information about the delay in receiving the service. The distress information is processed in the distress function and inserted into the request by the insert function . The distress information is designated by reference numeral in the request and can take the form of a distress gradient.

It is possible to do an exponentially increasing wait on client side to help reduce the load on overloaded servers that is to increase the time period before receiving a subsequent response and deciding that distress information is to be included in the next request. This could allow time for busy servers to respond based on the first distress information.

The association of responses with requests can be done in a variety of ways using known mechanisms. In one embodiment a request is transmitted with a request identifier which can be included in the returned response so the client terminal can identify whether a response has been provided to a particular request.

Where the client is a communications client the distress information can be used for responding to for example media relay requests by the client that the user knows nothing about. The only visible gradient to the user in that context is just a long call setup time if relay requests fail. This can be improved by the client sending multiple requests with distress information.

The functionality at the server will now be described. Each server can be implemented as a separate server or a server instance. One of the server instances picks up requests from the server queue that are no older than a certain timeout period after which the requests get dropped. Requests indicating a higher distress gradient denoted by the value of the distress information in the request get picked up before the rest and the request is treated based on the distress gradient. That is a particular algorithm or back end process or database access can be selected based on the distress gradient.

For example a user could normally be presented with a webpage with high quality results stemming from running a number of queries that together present a very informed picture about the user s expectations and how to best serve him or her. In the case of a request showing a high distress gradient for example above a particular threshold this could be replaced with a simple query that displays the latest results without modifying search terms to maximise personalisation.

In the context where the client is a communications client and the requests are sent with distress information the server responds by providing a less optimised selection of candidates for media relaying to set up a communication path. This allows a communication event such as for example a voice over IP call to be set up more quickly even though possibly with a slightly lower call quality.

The distress information can be provided in any appropriate way depending on the transport protocol and is read at the application layer.

The described embodiments of the invention enable client side applications to signal distress or failure to receive services from the server side for consecutive requests thereby enabling the server side to prioritise requests and or to fall back to provide lower complexity or lower quality services. This allows a configurable quality to time to serve trade off to be implemented which can be important for near real time applications.

According to one embodiment of the present invention there is provided a method of processing requests at a computer server comprising receiving a request for service from a user terminal the request including distress information representing a degree of failure to process at least one prior similar request from the user terminal for the service receiving the distress information from the request and processing the request in accordance with the distress information.

In one or more embodiments the step of processing the request comprises treating the request among a plurality of requests received at the server in an order based on the distress information.

In one or more embodiments the step of processing the request comprises selecting from a set of alternative functions a function for handling the request based on the distress information.

In one or more embodiments the selected function has a reduced complexity or cost compared with other functions in the set of alternative functions when the distress information is above a threshold level indicating a high degree of failure to process previous similar requests.

In one embodiment a plurality of requests to be processed by the server are placed in a queue and wherein the server retrieves a request for processing from the queue based on the distress information in the request.

In one or more embodiments requests which have been in the queue for a period exceeding a timeout period are discarded.

According to another embodiment of the present invention there is provided a server operable to process requests received at an input thereof the server including a receive component operable to receive a request identifying a user terminal the request including distress information representing a degree of failure to process at least one other request from the user terminal and to read the distress information from the request and a processing component operable to process the request in accordance with the distress information.

In one embodiment the server comprises a set of alternate functions for handling the request the server comprising a select function for selecting one of a set of functions for handling the request based on the distress information in the request.

In another embodiment the receive component of the server is operable to retrieve a request from a queue of requests and select the request for retrieval based on the distress information in the requests of the queue.

According to another embodiment of the present invention there is provided a method of issuing requests from a user terminal comprising issuing a first request to a server for a service monitoring whether a response to the first request is received at the user terminal in a predetermined time if a response has not been received in the predetermined time issuing a second similar request and including in the second request distress information representing a degree of failure to process the first request the distress information evaluated based on the monitoring step.

In one embodiment the method comprises monitoring if a response to the second or any subsequent request is received in the predetermined time and if a response has not been received in the predetermined time issuing a subsequent or further subsequent request including distress information representing the degree of failure to process the first and second and any previous subsequent request.

In another embodiment the distress information comprises a number of prior requests issued for the same service from the user terminal to which no response has been received.

In a further embodiment the distress information comprises the time elapsed since issuing of the first request.

According to another embodiment of the present invention there is provided a user terminal for accessing a service from a server to which it is connected via a communication network the user terminal comprising a transmit function operable to issue a first request to a server for the service a monitoring function operable to monitor whether a response to the first request is received at the terminal in a predetermined time wherein the transmit function is configured to issue a second similar request for the same service if a response has not been received in a predetermined time and an insert function operable to include in the second request distress information representing a degree of failure to process the first request wherein the distress information is evaluated by the monitoring function.

According to another embodiment of the present invention there is provided a computer program product comprising computer readable instructions on a computer readable medium which when executed by a computer issues a first request to a server of a service monitors whether a response to the first request is received at the user terminal in a predetermined time and if a response has not been received in the predetermined time issues a second similar request and includes in the second request distress information representing a degree of failure to process the first request the distress information evaluated based on the monitoring step.

According to another embodiment of the present invention there is provided a computer program product comprising computer readable instructions on a computer readable medium which when executed by a computer receives a request for service from a user terminal the request including distress information representing a degree of failure to process at least one prior similar request from the user terminal for the service receives the distress information from the request and processes the request in accordance with the distress information.

Generally any of the functions described herein can be implemented using software firmware hardware e.g. fixed logic circuitry or a combination of these implementations. The terms module functionality component and logic as used herein generally represent software firmware hardware or a combination thereof. In the case of a software implementation the module functionality or logic represents program code that performs specified tasks when executed on a processor e.g. CPU or CPUs . The program code can be stored in one or more computer readable memory devices. The features of the techniques described below are platform independent meaning that the techniques may be implemented on a variety of commercial computing platforms having a variety of processors.

For example the user terminals may also include an entity e.g. software that causes hardware of the user terminals to perform operations e.g. processors functional blocks and so on. For example the user terminals may include a computer readable medium that may be configured to maintain instructions that cause the user terminals and more particularly the operating system and associated hardware of the user terminals to perform operations. Thus the instructions function to configure the operating system and associated hardware to perform the operations and in this way result in transformation of the operating system and associated hardware to perform functions. The instructions may be provided by the computer readable medium to the user terminals through a variety of different configurations.

One such configuration of a computer readable medium is signal bearing medium and thus is configured to transmit the instructions e.g. as a carrier wave to the computing device such as via a network. The computer readable medium may also be configured as a computer readable storage medium and thus is not a signal bearing medium. Examples of a computer readable storage medium include a random access memory RAM read only memory ROM an optical disc flash memory hard disk memory and other memory devices that may us magnetic optical and other techniques to store instructions and other data.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

