---

title: Double sand-boxing for flash library
abstract: A Flash advertisement is provided, and access to sensitive data associated with the Flash advertisement is restricted. First library code is stored at a first security domain, the first library code to control playback of the Flash advertisement; and second library code is stored at a second security domain, the second library code to access the sensitive data. An application at a third security domain is permitted to access the first library code, and only code residing at the first security domain is permitted to access the second library code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08844052&OS=08844052&RS=08844052
owner: Google Inc.
number: 08844052
owner_city: Mountain View
owner_country: US
publication_date: 20120706
---
This application is a continuation application of U.S. application Ser. No. 12 193 412 filed Aug. 18 2008 now U.S. Pat. No. 8 220 062 which claims priority to U.S. Provisional Application No. 60 956 247 filed Aug. 16 2007 the contents of which are incorporated by reference.

On line advertisements or ads allow advertisers to reach a wide range of viewers through the Internet. Ads can be played as part of video programs. The video program and the ad can be for example Flash videos that comply with Flash video standards promoted by Adobe Corporation San Jose Calif. Code for playing the video program and the ad can be in the format of SWF files that can be executed by a Flash player such as Adobe Flash Player.

The Flash Player has security features based on sandboxes which are logical security groupings that are used to contain resources. The security sandboxes define the range of data and operations that each Flash application may access. The Flash Player assigns SWF files to sandboxes based on their origin and sandbox boundaries are determined by Internet domains or for local SWF files on the class of the local SWF file. The Flash Player runs SWF files from the Internet in separate sandboxes that correspond to their origin domains. Two SWF files that run in the same sandbox for example two SWF files downloaded from the same network domain may interact with each other. SWF files may also interact with SWF files from other sandboxes in accordance with specific security rules and configuration settings.

This document describes a system for allowing ad servers to provide Flash ads without exposing sensitive data. In general in one aspect a Flash advertisement is provided and access to sensitive data associated with the Flash advertisement is restricted. First library code is stored at a first security domain the first library code to control playback of the Flash advertisement and second library code is stored at a second security domain the second library code to access the sensitive data. An application at a third security domain is permitted to access the first library code and only code residing at the first security domain is permitted to access the second library code.

Implementations may include one or more of the following features. A first set of application programming interfaces APIs for calling the first library code is provided and applications at the third security domain are permitted to use the first set of APIs. A second set of APIs for calling the second library code is provided and only applications at the first security domain are permitted to use the second set of APIs to call the second library code. Permitting only applications at the first security domain to use the second set of APIs includes using a Security.allowDomain method to permit only applications belonging the first security domain to use the second set of APIs. The second library code includes code for reporting performance statistics of the advertisement. Providing the Flash advertisement includes streaming a video advertisement.

In general in another aspect a first Flash file for playing a Flash advertisement is provided the first Flash file including a first set of application programming interfaces APIs for calling first library code belonging to a first security domain the first Flash file allowing applications in a plurality of domains to use the first set of APIs to call the first library code. A second Flash file for accessing data related to the Flash advertisement is provided the second Flash file including a second set of APIs for calling second library code belonging to a second security domain the second Flash file allowing only code belonging to the first security domain to use the second set of APIs to call the second library code.

Implementations may include one or more of the following features. The first Flash file includes an API for at least one of playing pausing or stopping the advertisement or resizing a display area for showing the advertisement. The second Flash file includes an API for accessing performance statistics of the advertisement and or an API for accessing an URL of the advertisement. The advertisement includes at least one of video or animation. Providing the first and second Flash files includes providing SWF files. A third Flash file is provided for showing a video program or animation program in which the third Flash file includes code for playing the advertisement.

In general in another aspect at a client location a first Flash file that is transmitted over a network is received the first Flash file originally residing at a first domain the client location being outside of the first domain. An application at the client location is permitted to access a first set of application programming interfaces APIs related to playback of an advertisement. A second Flash file is received the second Flash file only permitting code at the first domain to use a second set of APIs related to access of information about the advertisement. The advertisement is played by using the first set of APIs.

In general in another aspect an advertisement is allowed to be played while access to sensitive data related to the advertisement is limited. A first Flash file residing at a first domain is provided the first Flash file including a first set of application programming interfaces APIs for controlling playback of the advertisement. A second Flash file residing at a second domain is provided the second Flash file including a second set of APIs for accessing the sensitive data related to the advertisement the second Flash file permitting only code at the first domain to use the second set of APIs.

In general in another aspect a Flash player loads a first Flash file that includes code for loading a second Flash file and a third Flash file the second Flash file residing at a location belonging to a trusted domain. Code in the second Flash file is executed to permit the Flash player to use a first set of application programming interfaces APIs specified in the second Flash file code in the third Flash file is executed to permit only code in the trusted domain to use a second set of APIs specified in the third Flash file and code in the first Flash file is executed to play a program. The first set of APIs is used to play an advertisement and code in the second Flash file is executed to cause code in the trusted domain to use the second set of APIs to access data related to the advertisement.

In general in another aspect a manufacture has encoded thereon a first Flash file for playing a Flash advertisement the first Flash file including a first set of application programming interfaces APIs for calling first library code belonging to a first security domain the first Flash file allowing applications belonging to a third domain to gain access to the first set of APIs. A manufacture has encoded thereon a second Flash file for accessing data related to the Flash advertisement the second Flash file including a second set of APIs for calling second library code belonging to a second security domain the second Flash file allowing only code belonging to the first security domain to use the second set of APIs to access the data.

In general in another aspect a first server is provided to host first library code for controlling playback of a Flash advertisement the first server belonging to a first domain the first library code being accessible using a first set of application programming interfaces APIs . A second server is provided to host second library code for accessing sensitive data associated with the advertisement the second server belonging to a second domain the second library code being accessible using a second set of APIs the second library code permitting only code belonging to the first domain to use the second set of APIs to call the second library code.

Implementations may include one or more of the following features. The first set of APIs includes an API for at least one of playing pausing or stopping the Flash advertisement. The first set of APIs includes an API for resizing a display area for showing the Flash advertisement. The second set of APIs includes an API for accessing performance statistics of the Flash advertisement. The second set of APIs includes an API for accessing a count value representing a number of times that the advertisement has been viewed. The first Flash file includes code for causing code in the first library code to call the second set of APIs to access data related to the Flash advertisement. The Flash advertisement includes at least one of a video or an animation. The first and second Flash files include SWF files. In some examples the first server and the second server reside in a single machine. In some examples the first server and the second server reside in different machines.

In general in another aspect a first server provides a first Flash file including a first set of application programming interfaces APIs for controlling playback of a Flash advertisement the first server belonging to a first domain. A second server provides a second Flash file including a second set of APIs for accessing data related to the Flash advertisement the second Flash file permitting only code at the first domain to gain access to the second set of APIs.

In general in another aspect a computer readable medium is provided having instructions encoded thereon the instructions when executed causes a computer system to provide a first Flash file residing at a location belonging to a first domain the first Flash file including a first set of application programming interfaces APIs for controlling playback of the Flash advertisement and provide a second Flash file including a second set of APIs for accessing the data related to the Flash advertisement the second Flash file permitting only applications at the first domain to use the second set of APIs.

In general in another aspect a system includes means for providing a first Flash file residing at a location belonging to a first domain the first Flash file including a first set of application programming interfaces APIs for controlling playback of a Flash advertisement and means for providing a second Flash file including a second set of APIs for accessing the data related to the Flash advertisement the second Flash file permitting only applications at the first domain to use the second set of APIs.

These and other aspects and features and combinations of them may be expressed as methods apparatus systems means for performing functions program products and in other ways.

Advantages of the aspects and features include one or more of the following advantages. Flash content e.g. advertisements can be embedded in Flash programs provided by third parties and statistics associated with the Flash content can be collected without exposing sensitive data associated with the Flash content to the third parties. APIs for controlling playback of the Flash content can be exposed to third parties while restricting access to APIs used for reporting sensitive data e.g. URL of content and statistics about impressions of content associated with the Flash content. Pre existing library code intended for Flash files that use the Security.allowDomain method can be used for playing the Flash content without exposing sensitive data to third parties.

The details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features objects and advantages of the invention will be apparent from the description and drawings and from the claims.

In the examples below the Flash content includes a Flash advertisement or Flash ad though other types of Flash content can also be used. The Flash files and Flash players are assumed to comply with Adobe Flash specification.

In some implementations a first Flash file A.SWF belonging to a first security domain simply referred to as a first domain shown in dashed lines provides a first set of APIs for controlling playback of the Flash ad . A second Flash file B.SWF belonging to a second security domain simply referred to as a second domain shown in dashed lines provides a second set of APIs for accessing sensitive data associated with the Flash ad . The first Flash file A.SWF permits applications from all domains to use the first set of APIs whereas the second Flash file B.SWF permits only applications from the first domain to use the second set of APIs . The first security domain is a trusted domain to the second set of APIs . This allows the publisher to use a third Flash file e.g. C.SWF to call the first set of APIs to control playback of the Flash ad but prevents the publisher from using the second set of APIs to access the sensitive data associated with the Flash ad .

In some examples the publisher has a web site that includes the Flash file C.SWF having code for enabling playback of a Flash program which incorporates the Flash ad . For example the Flash file C.SWF includes code that loads the Flash program and the Flash file A.SWF . The Flash file C.SWF also includes code that uses the first set of APIs to call a first set of library code for controlling playback of the Flash ad .

The first Flash file A.SWF defines the first set of APIs and includes code that loads the second Flash file B.SWF . The Flash file A.SWF also includes code that uses the second set of APIs defined in B.SWF to call a second set of library code for accessing sensitive data associated with the Flash ad . The second Flash file B.SWF defines the second set of APIs and limits access of the second set of APIs to the first domain allowing A.SWF to access the second set of APIs but preventing C.SWF from accessing the second set of APIs .

In some examples the consumer uses a web browser on a personal computer to access a web page hosted on a server of the publisher . The web page includes the Flash file C.SWF . The web page browser may load a Flash player plug in to play the Flash file C.SWF . The consumer may also launch a Flash player directly without using a web browser. The Flash player has built in security features based on sandboxes that separate resources according security domains or simply referred to as domains such that applications in a first security domain normally cannot access resources in a second security domain unless the resources in the second security domain grant permission.

The example below assumes that a first publisher publishes content on a web site www.publisher123.com a second publisher publishes content on a web site www.publisher456.com the Flash file A.SWF resides at a first ad server associated with a web domain www.adserver1.com and the Flash file B.SWF resides at a second ad sever associated with a web domain www.adserver2.com.

When the Flash player retrieves SWF files from the Internet the SWF files are assigned security domains based on their origin. For example SWF files from www.adserver1.com may be assigned to a first security domain and SWF files from www.adserver2.com may be assigned to a second security domain SWF files from www.publisher123.com may be assigned to a third security domain SWF files from www.publisher456.com may be assigned to a fourth security domain etc. When the Flash player retrieves A.SWF B.SWF and C.SWF the Flash player recognizes that the SWF files and belong to different domains and places each of the SWF files and in a separate sandbox.

A resource from one security domain can grant permission to applications in another security domain by using e.g. an API Security.allowDomain method according to the Adobe Flash specification. The SWF files associated with the Flash ad are written such that the first set of APIs used to control playback of the Flash ad are exposed to third parties e.g. 104 while the second set of APIs used to access e.g. report or modify sensitive data associated with the Flash ad are not exposed to the third parties.

A first layer of protection is provided to the second set of APIs for accessing sensitive data because B.SWF controls the domain that can access the second set of APIs . A second layer of protection is provided because A.SWF controls which APIs are exposed to third parties. This protection scheme can be viewed as double sandboxing in which A.SWF is placed in a first sandbox and B.SWF is placed in a second sandbox within the first sandbox.

The first set of APIs that are used to control playback of the Flash ad may include e.g. APIs for loading playing pausing and ending the Flash ad an API for obtaining the current playing position and an API for obtaining the total length of the Flash ad etc. The second set of APIs that are used to access sensitive data may include e.g. an API for obtaining the URL of the Flash ad an API for obtaining the URL for reporting statistics about impressions of the Flash ad and an API for obtaining the clickstring used for reporting the statistics.

In some examples the Flash file A.SWF defines APIs that are used to control playback of the Flash ad . The Flash file A.SWF includes a script

to permit applications from all security domains to use the APIs defined in A.SWF . The B.SWF file defines APIs that are used to access the sensitive data associated with the Flash ad . The Flash file B.SWF includes a script

to permit only applications from the domain www.adserver1.com to use the APIs defined in B.SWF . The scripts can be written as e.g. ActionScript a scripting language used for the development of websites and software using the Adobe Flash Player platform.

Table 1 is a listing of example pseudocode for the Flash file A.SWF that includes definitions for the first set of APIs for controlling playback of the Flash ad .

Table 2 is a listing of an example interface for the Flash file C.SWF that uses the APIs in A.SWF for loading the Flash ad and controlling playback of the Flash ad . In this example callbackObj is a Flash object returned by the system .

Table 3 below is a listing of example pseudocode for the Flash file B.SWF that defines APIs for accessing sensitive data associated with the Flash ad .

The separation of APIs for playing Flash content and APIs for accessing sensitive data related to the Flash content is not limited to processing of Flash advertisements. For example A.SWF can be used to play a public announcement such as a video explaining a new health care bill or emergency evacuation procedure and B.SWF can be used to determine the number of people who have viewed the announcement and evaluate the effectiveness of the announcement. For example if the announcement was 10 minutes long but the majority of the viewers stopped the Flash content after 30 seconds or skipped important segments of the announcement it would indicate that the public announcement video was not very effective.

As another example A.SWF can be used to play a feature movie or a television episode and B.SWF can be used to collect information about viewing patterns such as which segments of the movie or TV episode were fast forwarded or skipped over which segments were viewed by the majority of viewers at normal speed and which segments were viewed repeatedly by the same viewers etc.

It is important to respect privacy concerns. For example the Flash files when executed do not collect and or transmit personally identifiable information without consent of the users.

The first server second server personal computer and publisher server in the example of are connected to each other by a network . The network can for example be a local area network LAN a wide area network WAN the Internet any other type of network or any combination of types of networks.

The web browser loads the Flash player . The Flash player executes code in C.SWF and sends a request to the first ad server to request the Flash file A.SWF . The ad server sends A.SWF to the Flash player . The flash file A.SWF includes code that loads the Flash file B.SWF . The Flash player executes code in A.SWF and sends a request to the second ad server to request B.SWF . The second ad server sends the Flash file B.SWF to the Flash player .

The Flash player executes code in C.SWF and requests the Flash video program from the publisher . The publisher streams the Flash video program to the Flash player . The Flash file C.SWF includes APIs for controlling playback of the flash video program . The Flash player controls playback of the Flash video program using the APIs defined in C.SWF . The Flash player uses the first set of APIs defined in A.SWF to request the Flash ad from the first ad server . The first ad server streams the Flash ad to the Flash player . The Flash player uses the first set of APIs to control playback of the Flash advertisement .

The Flash file A.SWF includes code that uses the second set of APIs to report sensitive data associated with the Flash ad . The Flash player executes code in A.SWF to use the second set of APIs to report performance data associated with the Flash ad to an advertisement statistics processing engine not shown at the second ad server . The Flash player may use the second set of APIs to perform sensitive operations such as adding a count indicating that the Flash ad has been viewed. The performance data can be used by the sponsor of the Flash ad and the operator of an ad network that hosts the Flash ad to improve the ad campaign associated with the Flash ad or improve future ads.

There may be existing library code that can be called by APIs defined in Flash files that use the Security.allowDomain method to determine which domains have access to the APIs. The library code may include code for controlling playback of Flash advertisements and code for accessing sensitive data associated with the Flash advertisements. When a single Flash file is used to define APIs for controlling playback of Flash advertisements and APIs for accessing sensitive data associated with the Flash advertisements using the Security.allowDomain method would cause all of the APIs to be exposed to third parties. This is because the Security.allowDomain method is an all or nothing switch and are not used to open up just a portion of a SWF file to another domain. Since third parties meaning anyone connected to the Internet need access to the APIs for controlling playback of the Flash ads all of the APIs contained in the Flash file are exposed to the third parties. This allows rouge third parties to manipulate or distort the sensitive data or otherwise use the sensitive data in inappropriate ways.

The Adobe Flash Player platform provides a LocalConnection.allowDomain method that can be used to provide LocalConnection objects that allow limited functionality to clients. Flash files can be written using the LocalConnection.allowDomain method to limit access to sensitive data. However using the LocalConnection.allowDomain method may require re writing the existing library code previously written for Flash files that use the Security.allowDomain method. By separating APIs for accessing sensitive data from the APIs needed by third parties for controlling playback of a Flash advertisement and limiting access to the APIs for accessing the sensitive data an advertising network can prevent third parties from accessing the sensitive data without re writing pre existing library code intended for Flash files that use the Security.allowDomain method.

The process provides a second Flash file for accessing data related to the Flash advertisement in which the second Flash file includes a second set of APIs for calling a second set of library code belonging to a second security domain . The second Flash file allows only code belonging to the first security domain to use the second set of APIs to call the second set of library code. The process provides the Flash advertisement to be played by a Flash player . For example the second Flash file can be the Flash file B.SWF the second set of APIs can be the APIs and the second security domain can be the domain . For example the second set of APIs can be used for accessing performance statistics of the advertisement and obtaining an URL of the advertisement. For example the first and second Flash files can use the Security.allowDomain method to determine which domains can access the APIs defined in the Flash files. The first and second Flash files can be SWF files.

In some implementations the library code for accessing sensitive data are placed in a security domain different from that of the library code used to control playback of a Flash advertisement. A first set of library code for controlling playback of the Flash advertisement is placed at a first security domain and a second set of library code for accessing sensitive data associated with the Flash advertisement is placed at a second security domain. The second set of library code grants access only to the first security domain. This prevents applications outside of the first and second security domains to access the second set of library code.

The process provides a first set of APIs for calling the first set of library code . For example the first set of APIs can be the APIs . The Flash file C.SWF can use the first set of APIs . The process provides a second set of APIs for calling the second set of library code . For example the second set of APIs can be the APIs . The Flash file A.SWF can access the second set of APIs but C.SWF cannot access the second set of APIs. The process provides the Flash advertisement to be played by a Flash player .

The process permits an application at the client location to access a first set of APIs related to playback of the Flash advertisement . For example the application can be C.SWF and the first set of APIs can be the APIs . The process receives a second Flash file that permits only code at the first domain to use a second set of APIs used for accessing information about the advertisement . For example the second Flash file can be B.SWF . The process plays the advertisement by using the first set of APIs . For example C.SWF uses the first set of APIs to play the Flash advertisement but cannot use the second set of APIs to access information about the ad.

Computing device includes a processor memory a storage device a high speed interface connecting to memory and high speed expansion ports and a low speed interface connecting to low speed bus and storage device . Each of the components and are interconnected using various buses and may be mounted on a common motherboard or in other manners as appropriate. The processor can process instructions for execution within the computing device including instructions stored in the memory or on the storage device to display graphical information for a GUI on an external input output device such as display coupled to high speed interface . In other implementations multiple processors and or multiple buses may be used as appropriate along with multiple memories and types of memory. Also multiple computing devices may be connected with each device providing portions of the necessary operations e.g. as a server bank a group of blade servers or a multi processor system .

The memory stores information within the computing device . In one implementation the memory is a volatile memory unit or units. In another implementation the memory is a non volatile memory unit or units. The memory may also be another form of computer readable medium such as a magnetic or optical disk.

The storage device is capable of providing mass storage for the computing device . In one implementation the storage device may be or contain a computer readable medium such as a floppy disk device a hard disk device an optical disk device or a tape device a flash memory or other similar solid state memory device or an array of devices including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory the storage device memory on processor or a propagated signal.

The high speed controller manages bandwidth intensive operations for the computing device while the low speed controller manages lower bandwidth intensive operations. Such allocation of functions is exemplary only. In one implementation the high speed controller is coupled to memory display e.g. through a graphics processor or accelerator and to high speed expansion ports which may accept various expansion cards not shown . In the implementation low speed controller is coupled to storage device and low speed expansion port . The low speed expansion port which may include various communication ports e.g. USB Bluetooth Ethernet wireless Ethernet may be coupled to one or more input output devices such as a keyboard a pointing device a scanner or a networking device such as a switch or router e.g. through a network adapter.

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a standard server or multiple times in a group of such servers. It may also be implemented as part of a rack server system . In addition it may be implemented in a personal computer such as a laptop computer . Each of such devices e.g. standard server rack server system personal computer laptop computer may contain one or more of computing device and an entire system may be made up of multiple computing devices communicating with each other.

Various implementations of the systems and techniques described here can be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium computer readable medium refers to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described here can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse trackball touch sensitive screen or iDrive like component by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The systems and techniques described here can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN and the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

A number of embodiments of the invention have been described. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of the invention. For example various forms of the flows shown above may be used with steps re ordered added or removed. Also although several applications and methods have been described it should be recognized that numerous other applications are contemplated.

Different types of user interfaces can be used. The server and server can reside within a single machine that have multiple network interfaces each network interface corresponding to a separate domain.

In addition the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. Other steps may be provided or steps may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other implementations are within the scope of the following claims.

