---

title: Integration of client side applications into a fantasy open platform environment
abstract: Techniques to integrate client side applications into a fantasy open platform environment include a server processor component operating within the fantasy open platform environment and operative to provide application programming interface (API) data of the client side application code to the fantasy open platform environment. The client side application may be independent from the fantasy open platform environment. Hooks may be created to allow embedding of the client side application code on the fantasy open platform environment web pages wherein the client side application code identifies on which of the fantasy open platform environment web pages the client side application code runs. A client side application executing on a client browser may be allowed to access resources of the fantasy open platform environment over a network connection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09495226&OS=09495226&RS=09495226
owner: CBS Interactive Inc.
number: 09495226
owner_city: New York
owner_country: US
publication_date: 20121130
---
This application is a continuation in part of pending application Ser. No. 13 332 633 entitled Fantasy Open Platform Environment filed on Dec. 21 2011 and issued on May 20 2014 as U.S. Pat. No. 8 732 278.

A fantasy game is one where participants act as an owner to build a team that competes against other fantasy owners based on statistics generated by real individual players of a game. Fantasy sport is a class of fantasy games. For instance a fantasy owner might draft a fantasy football team to compete with other fantasy football teams based on statistics generated by real football players from the National Football League NFL . A common variant uses a computer model to convert statistical performance into points that are compiled and totaled according to a roster selected by a manager of a fantasy team. As with a real team a fantasy owner is given various online tools to sign trade and cut fantasy players just like a real team owner.

As popularity of fantasy games increase a plethora of specialized fantasy applications are developing to support various aspects of a fantasy game. Fantasy games are difficult to learn and win and therefore fantasy gamers are always looking for an edge over the competition. For instance before a game season begins fantasy owners may gather to draft real players for their fantasy teams. The draft typically involves a complex weighing of multiple factors to make a draft decision within a limited period of time. A number of specialized fantasy applications are available that are specifically designed to assist a fantasy owner in drafting players. A fantasy owner may utilize other specialized fantasy applications as well such as applications designed to customize starting lineups for a game project player performance automatically negotiate trades and so forth.

One problem associated with the proliferation of specialized fantasy software applications however is that it creates a disjointed program environment for a fantasy owner. Specialized fantasy applications are not designed to interoperate with each other and often use completely different sets of fantasy data. As such each specialized fantasy application is designed with a unique user interface that is presented in a separate portion of a display such as a user interface frame. It is not uncommon for a fantasy gamer to have multiple applications running simultaneously on a computer with each application having its own user interface frame and constantly switching focus between each frame to gather information needed to play one or more fantasy games. Furthermore some specialized fantasy applications may be native applications installed and executing on a client device while others are web applications executing on a server device. To engage in a game session a fantasy gamer may need to search and select the native programs through a program manager to execute the native applications and launch a web browser and select a uniform resource locator URL to execute the web applications each of which may have separate accounts payment methods security credentials subscription managers authentication procedures resource requirements and so forth. Layer on the fact that many fantasy gamers are frequently playing multiple teams on multiple sites and this segmented program environment becomes even more disjointed. It is with respect to these and other considerations that the present improvements have been needed.

Various embodiments are generally directed to fantasy games. Some embodiments are particularly directed to a fantasy open platform environment arranged to aggregate heterogeneous fantasy applications fantasy content and fantasy data for fantasy games into a unified fantasy framework with a homogeneous user interface.

In general a game is a system in which players engage in an artificial conflict defined by rules and a scoring system resulting in a quantifiable outcome. A fantasy game is a game based on a quantifiable outcome of another game. More particularly a fantasy game uses a scoring system that is based at least in part on a quantifiable outcome of another game in order to obtain a quantifiable outcome for the fantasy game. For instance a fantasy sport game may comprise a fantasy team selected from human players of a real sport. The fantasy sport game may convert statistical information of human player performance in real sporting competitions e.g. a football game a baseball game etc. into points that are compiled and totaled according to a roster of a fantasy team. Fantasy players of the fantasy sport game then compete based on the totaled points.

Fantasy games may be based on any type or genre of games. Some examples of games may include without limitation sports board games video games games of chance lawn games tabletop games party games dexterity games coordination games card games dice games domino and tile games guessing games video games electronic games electronic video games online games role playing games business games simulation games television games reality television games artificial reality games and so forth. A fantasy game may be based on any of these or other types of games. A particularly large segment of fantasy games focus on sports such as football basketball baseball soccer hockey racing and so forth. Recently emerging fantasy game genres have branched out to include non sports related games focused on politics celebrity gossip movies and reality television. For instance fantasy congress is a fantasy game where players called citizens could draft members of the United States House and Senate and keep track of their participation within the U.S. Congress. Actions especially within the process of making and amending pieces of legislation of a player s drafted congresspersons were recorded and rated as a cumulative total amount of points against other players. The embodiments are not limited in this context.

Fantasy games may have many fantasy game genres. For example fantasy sport is a class of fantasy games. A fantasy owner might draft a fantasy football team to compete with other fantasy football teams based on statistics generated by real football players from the National Football League NFL . Fantasy reality TV is another class of fantasy games. For instance a fantasy owner might draft a fantasy reality team to compete with other fantasy reality teams based on statistics generated by reality show contestants such as contestants for such reality shows as Big Brother Survivor American Idol Dancing With The Stars The Apprentice Fear Factor The Amazing Race and so forth. Fantasy board is another class of fantasy games. For instance a fantasy owner might draft a fantasy board game team to compete with other fantasy board game teams based on statistics generated by board game contestants such as chess players poker players checker players monopoly players or other board games. Fantasy electronic is another class of fantasy games. For instance a fantasy owner might draft a fantasy electronic game team to compete with other fantasy electronic game teams based on statistics generated by electronic game contestants such as electronic video game players electronic gambling game players and other electronic games. The embodiments are not limited in this context.

As previously described one problem associated with proliferation of specialized fantasy software applications to support fantasy games is that it creates a disjointed gaming environment for a fantasy player. Embodiments provide a fantasy open platform environment arranged to aggregate heterogeneous fantasy applications fantasy content and fantasy data into a unified fantasy framework with a homogeneous user interface. The unified fantasy framework provides several advantages to fantasy gamers fantasy application developers and fantasy advertisers.

A fantasy gamer may use the unified fantasy framework to access and use multiple types of fantasy applications developed or provided by different software vendors within a single user interface view. As such a fantasy gamer does not have to leave a fantasy gaming context in order to access services and features offered by different software vendors or engage in the separate access requirements typically associate with different software products. Further the different types of fantasy applications may operate on a shared set of fantasy data or different sets of fantasy data stored by a single fantasy database managed by the unified fantasy framework. In this manner a fantasy gamer may view and in some cases change a same set of fantasy data surfaced by different fantasy applications even when some fantasy applications are hosted by third party servers. In addition a fantasy user may access fantasy content such as fantasy news and commentary from various content providers through the single user interface view. In this manner a fantasy gamer may access heterogeneous fantasy applications and content from different sources through a single user interface view without having to switch between different viewing contexts. As a result a fantasy gamer will be more competitive entertained and have a richer gaming experience.

A fantasy application developer may use the unified fantasy framework to develop and market fantasy applications to a wider range of fantasy gamers. Rather than attempting to market and monetize a specialized fantasy application through its own e commerce web servers to a smaller market fantasy application developers may advertise and target fantasy gamers attracted by the robustness and convenience of the unified fantasy framework. Furthermore rather than offering stand alone applications that need to be purchased installed and executed by a user as native applications fantasy application developers may focus on developing web applications sold and access through the unified fantasy framework thereby enhancing subscription services advertising revenue software updates and distribution mechanisms. In addition a fantasy application developer may potentially participate in advertisement revenue sharing splits negotiated between a provider of the unified fantasy framework and various advertisers.

A fantasy advertiser may use the unified fantasy framework for targeted advertising campaigns to a wide range of fantasy gamers attracted by the robustness and convenience of the unified fantasy framework and also the multiplicity of specialized fantasy applications. Further the fantasy advertiser may have more information as to browsing and purchasing patterns of fantasy gamers across a wide array of fantasy applications and fantasy content. This information may be used to provide more finely targeted advertisements to select segments of fantasy gamers.

These and other advantages may be realized through a fantasy server application arranged to manage the unified fantasy framework. The fantasy server application may generate a dynamic resource document such as an information resource or web page having various discrete portions allocated to different fantasy applications. Each discrete portion may present a different resource document from a different fantasy application. The different fantasy applications may be native to the unified fantasy framework or external to the unified fantasy framework such as third party software vendors. The different resource documents may include fantasy content from a single fantasy content database. This may occur even when the different fantasy applications are developed and owned by different entities. As a result the embodiments can improve affordability scalability modularity extendibility or interoperability for an operator device or network.

With general reference to notations and nomenclature used herein the detailed descriptions which follow may be presented in terms of program procedures executed on a computer or network of computers. These procedural descriptions and representations are used by those skilled in the art to most effectively convey the substance of their work to others skilled in the art.

A procedure is here and generally conceived to be a self consistent sequence of operations leading to a desired result. These operations are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical magnetic or optical signals capable of being stored transferred combined compared and otherwise manipulated. It proves convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like. It should be noted however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to those quantities.

Further the manipulations performed are often referred to in terms such as adding or comparing which are commonly associated with mental operations performed by a human operator. No such capability of a human operator is necessary or desirable in most cases in any of the operations described herein which form part of one or more embodiments. Rather the operations are machine operations. Useful machines for performing operations of various embodiments include general purpose digital computers or similar devices.

Various embodiments also relate to apparatus or systems for performing these operations. This apparatus may be specially constructed for the required purpose or it may comprise a general purpose computer as selectively activated or reconfigured by a computer program stored in the computer. The procedures presented herein are not inherently related to a particular computer or other apparatus. Various general purpose machines may be used with programs written in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these machines will appear from the description given.

Reference is now made to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding thereof. It may be evident however that the novel embodiments can be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate a description thereof. The intention is to cover all modifications equivalents and alternatives consistent with the claimed subject matter.

In one embodiment the fantasy open platform apparatus may comprise a computer implemented apparatus having a fantasy server application comprising one or more components . Although the fantasy open platform apparatus shown in has a limited number of elements in a certain topology it may be appreciated that the fantasy open platform apparatus may include more or less elements in alternate topologies as desired for a given implementation.

It is worthy to note that a and b and c and similar designators as used herein are intended to be variables representing any positive integer. Thus for example if an implementation sets a value for a 7 then a complete set of components for the fantasy server application may include components and . The embodiments are not limited in this context.

The fantasy open platform apparatus may comprise the fantasy server application . In the illustrated embodiment shown in the fantasy server application may comprise a fantasy game component a platform generator component a host manager component and a guest manager component among other components 

The fantasy server application may be generally arranged to receive as input a resource document request and generate as output a dynamic resource document with fantasy content from a fantasy content database for a fantasy game. The resource document request may be received from a client device such as from a web browser implemented by the client device.

Fantasy content may generally refer to any content associate with or suitable for one or more fantasy games. Examples of fantasy content may include without limitation fantasy game data fantasy play data user data for a fantasy game multimedia content for fantasy games e.g. video files audio files images pictures news articles etc. game management data subscription information user profiles player data team rosters league rosters fantasy game results historical data statistical data price data win rates loss rates and any other data associated with a fantasy game. The embodiments are not limited in this context.

A dynamic resource document is a document or information resource that is suitable for presentation on a display. In one embodiment for example a dynamic resource document is an information resource that is suitable for the world wide web WWW and can be accessed through a web browser such as a web page. A web page is a document coded in a markup language and may provide navigation to other web pages via hypertext links. A web page may comprise a static web page having files of static text and other content stored within a file system for a web server. A web page may comprise a dynamic web page constructed by server side software when they are requested. A web page may subsume other resources such as style sheets scripts and images into their final presentation. For instance a web page may utilize client side scripting to make the web page more responsive to user input once on a client browser. In one embodiment a dynamic resource document may be implemented as a dynamic web page.

A markup language is a modern system for annotating a text in a way that is syntactically distinguishable from that text. Some markup languages like hypertext markup language HTML have presentation semantics meaning their specification prescribes how the structured data is to be presented but other markup languages like extensible markup language XML have no predefined semantics. In either case markup tags used by the markup language are typically omitted from the version of the text which is displayed for end user consumption. Examples of markup languages suitable for a dynamic resource document may include without limitation a generalized markup language GML standard generalized markup language SGML HTML XML extensible HTML XHTML or variants of each. For instance there are numerous variants of XML that have been customized for different applications or protocols. The embodiments are not limited in this context.

The fantasy server application may comprise a fantasy game component . The fantasy game component may be generally arranged to provide manage or coordinate one or more fantasy games for the fantasy server application . A fantasy game may comprise or be implemented as any type of fantasy game from any type of fantasy game genre as previously described. The embodiments are not limited in this context.

The fantasy server application may comprise a platform generator component . The platform generator component may be generally arranged to generate a dynamic resource document . The platform generator component may retrieve information from various applications databases and servers of the unified fantasy framework and organize the retrieved information into a dynamic resource document in a way that is easily consumed by a user of a client device.

The fantasy server application may comprise a host manager component . The host manager component may be generally arranged to manage information suitable for a dynamic resource document that is sourced from fantasy applications that are native to the unified fantasy framework. The host manager component may automatically retrieve and format this information for inclusion in a dynamic resource document .

The fantasy server application may comprise a guest manager component . The guest manager component may be generally arranged to manage information suitable for a dynamic resource document that is sourced from fantasy applications that are not native to the unified fantasy framework. In one embodiment the guest manager component may automatically retrieve and format this information for inclusion in a dynamic resource document . In one embodiment the guest manager component may automatically generate a reference to this information and not the actual information for inclusion in a dynamic resource document .

Once the fantasy server application generates a dynamic resource document the fantasy server application may send the dynamic resource document to a requesting entity that originally sent a resource document request such as a web browser of a client device. The web browser may then render the dynamic resource document for presentation to a user.

As shown in the platform generator component may be arranged to receive a page request . The fantasy server application may generate a page request in response to a resource document request from a client device. The platform generator component may generate a platform resource document . The platform resource document may be a general surface or template that can be populated with different types of information from various sources.

A platform resource document may have multiple segments of different segment types to accommodate the different types of information. A segment may generally comprise a discrete portion of a platform resource document such as a frame or group box. In the context of graphical user interface GUI a frame surrounds a collection of GUI elements. In the context of a web page a frame may also surround a collection of GUI elements. In addition a web page frame allows a user interface of a visual browser window to be split into discrete portions each of which can show a different document or portion of a document . This can lower bandwidth use as repeating parts of a layout can be used in one frame while variable content is display in another frame.

When using web browsers the terms frame or frameset or framing generally refer to the display of two or more web pages or media elements displayed within a same visual browser window. The two or more web pages may be positioned adjacent to each other or one web page may be embedded within another web page. The web pages or media elements may come from the same web site or from multiple different web sites. In one sense a frame allows a web page to be presented within a larger web page. A framed web page may have dedicated user interface controls to allow manipulation of the framed web page such as a scroll bar to individually scroll the framed web page without moving a framing web page presenting the framed web page. Implementation of a frame may vary according to a given markup language used to construct a platform resource document and or a dynamic resource document .

In one embodiment a segment may comprise a frame for a HTML document. A HTML document may have a general frame for a HTML document and an inline frame for another HTML document within the general frame. In HTML the inline frame may be defined by an iframe element which controls attributes of an inline frame such as attributes used to define an inline frame layout e.g. rows and cols attributes . An inline frame can be a target frame for links or references defined by other elements and can be selected by a user as a focus for viewing a HTML document in the inline frame printing copying and so forth. Although some embodiments may refer to an inline frame as an example of a segment for a platform resource document it may be appreciated that other framing elements defined by other markup languages may be used as well. For instance a platform resource document generated in an XML format may utilize XFrames for combining and organizing web based documents together in a single webpage through the use of frames. In other examples segments may be constructed using cascading style sheets CSS server side scripting languages e.g. server side includes SSI hypertext preprocessor PHP and other scripting languages and other techniques. The embodiments are not limited in this context.

A platform resource document may include a first segment type referred to as a host segment . A host segment is generally arranged to present a host resource document from a host server program. Examples for a host resource document and a host server program may be described with reference to .

A platform resource document may include a second segment type referred to as a guest segment . A guest segment is generally arranged to present a guest resource document from a guest server program. Examples for a guest resource document and a guest server program may be described with reference to .

The host manager component may be arranged to send a request to a host server program to generate a host resource document with fantasy content from the fantasy content database . The host manager component may receive a response with the host resource document from the host server program and add the host resource document to a corresponding host segment of the platform resource document .

As shown in the host server programs may include host server programs . The host server program may generate one or more host resource documents . The host server program may generate one or more host resource documents . One example for host resource documents may comprise a web page for a web browser. The host server programs may generate one or more host resource documents respectively using fantasy content from the fantasy content database managed by the fantasy server application .

A host server program such as the host server programs may comprise a set of one or more software components designed to add or extend specific capabilities to a larger software application similar to a plug in add in add on snap in or extension. In this case the larger software application is the fantasy server application . A host server program customizes functionally provided by the fantasy server application . The term host is used to identify a server program that is developed by a same application developer as the fantasy server application . For instance assume the fantasy server application is designed developed or maintained by an entity such as CBSSports.com owned by CBS Interactive. A host server program may comprise a server program designed developed or maintained by CBSSports.com. In other words a host server program is a native application of CBSSports.com thereby insuring a high level of integration and compatibility with the fantasy server application .

Examples of some entities that develop both a fantasy server application and host server programs may include without limitation CBSSports.com Citizen Sports Yahoo FanDuel.com FaGames.net FantasyPlanet.com Fantasy911.com FantasySP.com Fantazzle.com Kabam formerly Watercooler MaximumFantasySports.com MyFantasyLeague.com MyFFPC.com Fantasy Football Players Championship OnRoto.com RapidDraft.com RTSports.com RotoHog.com RotoPicks.com Sports Technologies U Sports.com WCOFS.com World Championships of Fantasy Football WhatIfSports.com among others. The embodiments are not limited in this context.

As shown in the host manager component may comprise a platform server interface and a host service interface . The platform server interface may generally comprise a standardized set of application program interfaces APIs to allow a host server program to access services provided by the fantasy server application such as registering with the fantasy server application providing a protocol for exchanging data with the fantasy server application a data schema for data exchanged with the fantasy server application and so forth. The host server interface may generally comprise a standardized set of APIs to allow the fantasy server application to access services provided by a host server program 

The fantasy server application and the host server program may utilize the platform server interface or the host service interface to integrate services features and functionality provided by both. This extension architecture allows the fantasy server application to provide a compact baseline application that can be extended to customize or personalize the fantasy server application to a particular fantasy user.

As shown in the platform resource document may include host segments and . The host server programs may include host programs . The host program may generate a host resource document . The host program may generate host resource documents . The host manager component may receive the host resource document from the host server program and add the host resource document to the host segment of the platform resource document . The host manager component may also receive the host resource documents from the host server program and add the host resource documents to the host segments respectively of the platform resource document .

As shown in the guest server programs may include guest server programs . The guest server program may generate one or more guest resource documents . The guest server program may generate one or more guest resource documents . One example for guest resource documents may comprise a web page for a web browser. The guest server programs may generate one or more guest resource documents respectively using fantasy content from the fantasy content database managed by the fantasy server application .

A guest server program such as the guest server programs may be similar to the host server programs in that each may comprise a set of one or more software components designed to add or extend specific capabilities to a larger software application similar to a plug in add in add on snap in or extension. In this case the larger software application is the fantasy server application . A guest server program customizes functionally provided by the fantasy server application . The term guest is used to identify a server program that is developed by a different application developer from the one that developed the fantasy server application sometimes referred to as a third party developer. For instance assume the fantasy server application is designed developed or maintained by an entity such as CBSSports.com owned by CBS Interactive. A guest server program may comprise a server program designed developed or maintained by a different entity such as developers of fantasy tools useful for managing and playing fantasy games. In other words a guest server program is not a native application of CBSSports.com thereby providing a lower level of integration and compatibility with the fantasy server application relative to a host server program 

Examples of entities of guest server programs may include without limitation developers such as Accuscore Advanced Sports Logic Bignoggins Productions LLC FantasyMonsterApp.com BloombergSports.com DraftDynamix.com DraftDude.com FantasyDraftboard.com Fansoft Media FantasyFanatics.com FantasyFootballCalculator.com FantasyJudgement.com FantasyNation.com FantasySportslnsurance.com Fantistics.com LeagueSafe.com MockDraftCentral.com PickemFirst.com RotoChamp.com Rotolab.com ScoutProFF.com Competitive Sports Analysis LLC Tableau Ziguana.com among others.

As shown in the guest manager component may comprise a platform server interface and a guest service interface . The platform server interface and the guest service interface may generally comprise a standardized set of application program interfaces APIs to allow a guest server program to interact with the fantasy server application in a manner similar to the platform server interface and the host service interface respectively as described with reference to .

The fantasy server application and the guest server program may utilize the platform server interface or the guest service interface to integrate services features and functionality provided by both. This extension architecture allows the fantasy server application to provide a compact baseline application that can be extended to customize or personalize the fantasy server application to a particular fantasy user.

In operation the guest manager component may be arranged to generate a guest reference for use by a client device. The guest reference may be arranged to refer the client device to a guest server program arranged to generate a guest resource document respectively with fantasy content from the fantasy content database . The guest manager component may add the guest reference to the guest server program to a guest segment of the platform resource document .

A guest reference may generally comprise a reference link or pointer used to navigate a web browser to a guest server program and or a guest resource document of a guest server program . A guest reference may comprise a reference or pointer to a guest server program and or a guest resource document of a guest server program that a user can directly follow or that is followed automatically by a program such as a web browser. References are data types that refer to a referent elsewhere in memory of a device e.g. a server and are used to access the referent. Generally a reference is a value that enables a program to directly access the referent. The referent may be stored on a same device as the reference or a different device as the reference. Most programming languages support some form of reference. Examples for the guest reference may include without limitation hypertext and hyperlinks such as those used by the World Wide Web WWW . Hypertext is text with hyperlinks. A hyperlink typically comprises an anchor which is a location within a message from which the hyperlink can be followed. The target of a hyperlink is a guest server program and or a guest resource document of a guest server program to which the hyperlink leads. The user can follow the link when its anchor is shown by activating it in some way such as by touching it e.g. with a touch screen display or clicking on it with a pointing device e.g. a mouse . When a guest reference is activated its target is displayed via the web browser or an application program.

In one embodiment for example a guest reference may be implemented as a hyperlink. The hyperlink may point to a guest server program and or a guest resource document of a guest server program . For instance the hyperlink may point to a uniform resource locator or universal resource locator URL a uniform resource identifier URI an internationalized resource identifier IRI identifiers based on resource description framework RDF and other unique network identifiers for a guest server program and or a guest resource document of a guest server program . A guest reference may be implemented using other types of references as well. The embodiments are not limited in this context.

In the example shown in the platform resource document may include a host segment and guest segments and . As previously described the host manager component may add the host resource document generated by the host server program to the host segment of the platform resource document . In addition the guest server programs may include guest programs . The guest program may generate a guest resource document . The guest program may generate guest resource documents .

The guest manager component may identify the guest resource document of the guest server program generate a guest reference to the guest resource document and or the guest server program and add the guest reference of the resource document to the guest segment . Similarly the guest manager component may identify the guest resource documents from the guest server program generate guest references for the respective guest resource documents and or the guest server program and add the guest references of the resource documents to the guest segments respectively.

As shown in when the platform resource document is sent as a dynamic resource document to a web browser of a client device the web browser may render the dynamic resource document . During rendering operations the web browser may automatically follow the guest references and to populate the guest segments and with the guest resource documents and respectively as generated by the guest resource programs for viewing by a user.

As shown in the fantasy server application may receive as input a resource document request from a web browser of a client device. Once the fantasy server application generates a dynamic resource document as previously described the page server component may send the dynamic resource document with fantasy content from the fantasy content database to the web browser of the client device. The dynamic resource document may comprise for example a platform resource document with a host resource document in a host segment and a guest reference to a guest server program in a guest segment . The web browser may then render the dynamic resource document for presentation to a user as described with reference to .

Once a dynamic resource document is rendered by the web browser a user may view fantasy content presented by the host resource document and the guest resource documents and in a single web browser window. In this manner a user does not have to switch between web browser windows or web browsers to access and view native applications generated by the host server program and third party applications generated by the guest server programs . Furthermore a user may manipulate fantasy content presented by the host resource document and the guest resource documents and in a similar manner since they all present fantasy content from a single fantasy content database .

The server device may comprise any electronic device configured with server side applications capable of receiving processing and sending information for the fantasy open platform apparatus . Examples of an electronic device may include without limitation an ultra mobile device a mobile device a personal digital assistant PDA a mobile computing device a smart phone a telephone a digital telephone a cellular telephone ebook readers a handset a one way pager a two way pager a messaging device a computer a personal computer PC a desktop computer a laptop computer a notebook computer a netbook computer a handheld computer a tablet computer a server a server array or server farm a web server a network server an Internet server a work station a mini computer a main frame computer a supercomputer a network appliance a web appliance a distributed computing system multiprocessor systems processor based systems consumer electronics programmable consumer electronics game devices television digital television set top box wireless access point base station subscriber station mobile subscriber center radio network controller router hub gateway bridge switch machine or combination thereof. The embodiments are not limited in this context.

The server device may execute processing operations or logic for the fantasy open platform apparatus using a processing component . The processing component may comprise various hardware elements software elements or a combination of both. Examples of hardware elements may include devices logic devices components processors microprocessors circuits processor circuits circuit elements e.g. transistors resistors capacitors inductors and so forth integrated circuits application specific integrated circuits ASIC programmable logic devices PLD digital signal processors DSP field programmable gate array FPGA memory units logic gates registers semiconductor device chips microchips chip sets and so forth. Examples of software elements may include software components programs applications computer programs application programs system programs software development programs machine programs operating system software middleware firmware software modules routines subroutines functions methods procedures software interfaces application program interfaces API instruction sets computing code computer code code segments computer code segments words values symbols or any combination thereof. Determining whether an embodiment is implemented using hardware elements and or software elements may vary in accordance with any number of factors such as desired computational rate power levels heat tolerances processing cycle budget input data rates output data rates memory resources data bus speeds and other design or performance constraints as desired for a given implementation.

The server device may execute communications operations or logic for the fantasy open platform apparatus using communications component . The communications component may implement any well known communications techniques and protocols such as techniques suitable for use with packet switched networks e.g. public networks such as the Internet private networks such as an enterprise intranet and so forth circuit switched networks e.g. the public switched telephone network or a combination of packet switched networks and circuit switched networks with suitable gateways and translators . The communications component may include various types of standard communication elements such as one or more communications interfaces network interfaces network interface cards NIC radios wireless transmitters receivers transceivers wired and or wireless communication media physical connectors and so forth. By way of example and not limitation communication media and may be implemented as wired communications media wireless communications media or a combination of both. Examples of wired communications media may include a wire cable metal leads printed circuit boards PCB backplanes switch fabrics semiconductor material twisted pair wire co axial cable fiber optics a propagated signal and so forth. Examples of wireless communications media may include acoustic radio frequency RF spectrum infrared and other wireless media. Other examples for communications component are given with reference to .

The server device may communicate with a client device and a server device over a communications media respectively using communications signals respectively via the communications component . Similarly the client device and the server device may communicate with each other over a communications media using communications signals via communications components similar to the communications component . The client device and or the server device may be internal or external to the server device as desired for a given implementation.

With respect to wired communications for example communications components may comprise a network interface designed to communicate information over a packet switched network such as the Internet. The communications components may be arranged to provide data communications functionally in accordance with different types of wired network systems or protocols. Examples of suitable wired network systems offering data communication services may include the Internet Engineering Task Force IETF Internet protocol suite and the International Organization for Standardization ISO or International Telecommunication Union ITU Telecommunication Standardization Sector ITU T Open Systems Interconnection OSI protocol suite. Examples of the IETF Internet protocol suite may include networking protocols organized into four hierarchical abstraction layers including a link layer an internet layer a transport layer and an application layer. Examples of the ISO ITU T OSI protocol suite may include networking protocols organized into seven hierarchical abstraction layers including a physical layer a data link layer a network layer a transport layer a session layer a presentation layer and an application layer.

In one embodiment the communications component may utilize networking protocols from the Internet protocol suite. For instance the communications component may implement a link layer protocol such as defined by the Institute of Electrical and Electronics Engineering IEEE 802 specifications. The communications component may implement an internet layer protocol such as the IETF Internet Protocol IP . The communications component may implement a transport layer protocol such as the IETF Transmission Control Protocol TCP the User Datagram Protocol UDP the UDP Lite protocol the Datagram Congestion Control Protocol DCCP the Stream Control Transmission Protocol SCTP and so forth. The communications component may implement an application layer protocol such as the IETF Hypertext Transfer Protocol HTTP Real Time Transport Protocol RTP RTP Control Protocol RTCP and so forth. It may be appreciated that these are merely a few representative examples and other wired communications techniques may be implemented as well. The embodiments are not limited in this context.

As shown in the fantasy system may comprise the client device and the server device . In general the client device may be the same or similar to the server device as described with reference to . For instance the client system may comprise a processing component and a communications component which are the same or similar to the processing component and the communications component respectively as described with reference to . The client device and the server device may communicate over the communications media using communications signals via the communications components respectively.

A user may utilize the web browser to access applications and services provided by the server devices as described in more detail with reference to . For instance the web browser may be used to access a dynamic resource document and its constituent parts stored in the server devices . The web browser may also be used to access cloud based applications and services such as online fantasy applications services and tools.

The client device may communicate with the server devices to access different aspects of the fantasy open platform apparatus . For instance the web browser of the client device may generate a send a resource document request to the server device . The fantasy open platform apparatus of the server device may receive the resource document request from the client device and return a dynamic resource document . The web browser of the client device may render and present the dynamic resource document on an output device for the client device such as a display.

As shown in the fantasy system may comprise the client device and the server device . In general the server device may be the same or similar to the server device as described with reference to . For instance the server device may comprise a processing component and a communications component which are the same or similar to the processing component and the communications component respectively as described with reference to . The client device and the server device may communicate over the communications media using communications signals via the communications components respectively.

As shown in the server device may implement a guest server program . The guest server program may include among other components a platform service interface and a guest service interface matching those implemented by the guest manager component as described with reference to . In addition the guest server program may include a guest document generator . The guest document generator may generate guest resource documents such as the guest resource documents 

Continuing with our previous example during rendering operations the web browser of the client device may request one or more guest resource documents or from one or more guest server programs implemented by the server device . The guest server program of the server device may request fantasy content from the fantasy content database through the server device . The server device may check policies and permissions for the guest server program and return the fantasy content to the server device . The guest document generator of the guest server program may generate a guest resource document or with the fantasy content and send the guest resource document to the client device . A similar process may be performed when a user desires to modify the fantasy content where the web browser of the client device sends a request to modify fantasy content to the guest server program and the guest server program in turn sends a request to the fantasy open platform apparatus of the server device to write the modifications to the fantasy content database .

As shown in the fantasy system may comprise the server device and the server device . The server devices may communicate with each other over the communications media using communications signals via the communications components respectively.

The server device may implement the fantasy open platform apparatus including the fantasy server application . In addition to the various components of the fantasy server application as previously described the fantasy server application may implement a resource manager component . The resource manager component may be arranged to manage access to fantasy content of the fantasy content database in response to a message request from the guest server program of the server device such as a message request to read fantasy content from the fantasy content database write fantasy content to the fantasy content database or a combination of both. The resource manager component may be described in more detail with reference to .

In the illustrated embodiment shown in a set of client devices may comprise client devices and . The client devices may comprise representative examples of the client device . As shown in each client device may representing a different electronic device a user can utilize to access a web services and web applications provided by a fantasy web server . For instance the client device may comprise a desktop computer the client device may comprise a notebook computer and the client device may comprise a smart phone. It may be appreciated that these are merely a few examples of client devices and any of the electronic devices as described with reference to may be implemented as a client device . The embodiments are not limited in this context.

A user may utilize a client device to access various web services and web applications provided by the fantasy web server . The fantasy web server may be a representative example of the server device . More particularly the fantasy web server may comprise the server device implemented as a web server using various web technologies. The fantasy web server may comprise a stand alone server or an array of servers in a modular server architecture or server farm.

The fantasy web server may comprise hardware and software designed to deliver content that can be accessed through a network such as a network implementing one or more communications protocols from a suite of Internet protocols as defined by the Internet Engineering Task Force IETF commonly referred to as the Internet. The fantasy web server may host various web sites which are collections of web pages. The fantasy web server may deliver web pages on requests from the client devices made through a web browser such as the web browser . For example the fantasy web server may deliver static or dynamic web pages generated by the fantasy open platform apparatus .

To generate a web page the fantasy web server may retrieve fantasy content from the fantasy content database implemented by the database server . The database server may implement various database technologies arranged to store update retrieve and or manage various types of fantasy content from the fantasy content database such as a database management system DBMS comprising database management software and network storage units. For instance the fantasy content database may be implemented as multiple network storage units operating as a storage area network SAN .

A user may also utilize a client device to access various web services and web applications provided by the guest web server . The guest web server may be a representative example of the server device . More particularly the guest web server may comprise the server device implemented as a web server using various web technologies. The guest web server may comprise a stand alone server or an array of servers in a modular server architecture or server farm.

Similar to the fantasy web server the guest web server may comprise hardware and software designed to deliver content that can be accessed through a network such as a network implementing one or more communications protocols from a suite of Internet protocols as defined by the Internet Engineering Task Force IETF commonly referred to as the Internet. The guest web server may host various web sites which are collections of web pages. The guest web server may deliver web pages on requests from the client devices made through a web browser such as the web browser . For example the guest web server may deliver static or dynamic web pages generated by the guest server programs 

The fantasy web server may also communicate with one or more advertisement servers . The advertisement servers may be arranged for serving advertisements on behalf of one or more advertisers. An advertiser may be any entity that generates advertising material to advertise product or services to be sold by a vendor. The advertisement servers may be owned by a vendor such as an internal marketing department for a business or enterprise.

The fantasy web server may further communicate with one or more application development servers . The application development servers may be used for application development of one or more guest server programs as implemented by the guest web server . Application developers such as computer programmers or software engineers may utilize various developer devices to access the application development server to access application development software providing an application development framework or architecture suitable for design a given type of guest server application such as a web application for example. In one embodiment for example the application development server may provide access to a software developer kit SDK for the fantasy open platform apparatus .

A SDK is typically a set of software development tools that allows for the creation of applications for a certain software package software framework hardware platform computer system operating system or similar platform. The SDK may comprise an application programming interface API in the form of some files to interface to a particular programming language or include sophisticated hardware to communicate with a certain embedded system. Common tools include debugging aids and other utilities often presented in an integrated development environment IDE . SDKs also frequently include sample code and supporting technical notes or other supporting documentation to help clarify points from the primary reference material.

The fantasy network is an exemplary implementation of a unified fantasy framework that provides a complete fantasy eco system for integrating native fantasy applications third party fantasy applications fantasy advertisements and tools for fantasy development.

A fantasy gamer may use the fantasy network to access and use multiple types of fantasy applications developed or provided by different software vendors within a single user interface view presented by the web browser . As such a fantasy gamer does not have to leave a fantasy gaming context in order to access services and features offered by different software vendors or engage in the separate access requirements typically associate with different software products. Further the different types of fantasy applications may operate on a shared set of fantasy data or different sets of fantasy data stored by a single fantasy database managed by the fantasy network . In this manner a fantasy gamer may view and in some cases change a same set of fantasy data surfaced by different fantasy applications even when some fantasy applications are hosted by third party servers such as the guest web server . In this manner a fantasy gamer may access heterogeneous fantasy applications and content from different sources through a single user interface view without having to switch between different viewing contexts. As a result a fantasy gamer will be more competitive entertained and have a richer gaming experience.

A fantasy application developer may use the application development server and the developer devices of the fantasy network to develop and market fantasy applications to a wider range of fantasy gamers. Rather than attempting to market and monetize a specialized fantasy application through its own e commerce web servers to a smaller market fantasy application developers may advertise and target fantasy gamers attracted by the robustness and convenience of the fantasy network particularly the fantasy web server . Furthermore rather than offering stand alone applications that need to be purchased installed and executed by a user as native applications fantasy application developers may focus on developing web applications sold and access through the fantasy network thereby enhancing subscription services advertising revenue software updates and distribution mechanisms. In addition a fantasy application developer may potentially participate in advertisement revenue sharing splits negotiated between a provider of the fantasy network and various advertisers operating the advertisement server .

A fantasy advertiser may use the fantasy network for targeted advertising campaigns to a wide range of fantasy gamers attracted by the robustness and convenience of the fantasy network and also the multiplicity of specialized fantasy applications accessible via the fantasy web server and the guest web server . Further the fantasy advertiser may have more information as to browsing and purchasing patterns of fantasy gamers across a wide array of fantasy applications and fantasy content. This information may be used to provide more finely targeted advertisements to select segments of fantasy gamers by inserting targeted advertisements from the advertisement server into a dynamic resource document .

As shown in the dynamic resource document comprises a host segment and a guest segment . The host segment may comprise a frame containing a host resource document . The guest segment may comprise a frame containing a guest resource document . The host resource document and the guest resource document may both contain fantasy content from the fantasy content database . In some cases the fantasy content may be homogeneous fantasy content such as the same text Cano Robinson. In other cases the fantasy content may be heterogeneous fantasy content such as Crawford Carl as presented in the guest resource document and not the host resource document . In either case the fantasy content is presented by two separate and distinct fantasy server programs one comprising the host server program and the other comprising the guest server program which is made possible through the fantasy unified fantasy framework.

It is worthy to note that the host resource document and the guest resource document are presented within a single browser window in a seamless manner. This allows a user to view both documents simultaneously without having to switch between fantasy program contexts such as different browser windows or user interface windows as with conventional fantasy programs. Further the user may manipulate the fantasy content in either document from either document using separate user controls implemented for each frame including retrieving new fantasy content or modifying existing fantasy content from either document and reading writing the fantasy content to the same fantasy content database . This allows the user to have full access and control to the native features and services offered by the host server program and the guest server program using native set of user interface controls and user interface elements offered by each of the host server program and the guest server program .

The dynamic resource document may further present a set of external content controls . The external content controls may be used to access and manipulate heterogeneous fantasy content through the fantasy server application . The heterogeneous fantasy content may have been previously retrieved from various heterogeneous fantasy content providers and hosted within the fantasy unified fantasy framework for central access by fantasy users from within the browser window . The external content controls may be presented as part of the host segment a separate host segment not shown or another segment type provided for the platform resource document and or the dynamic resource document .

As shown in the resource manager component may comprise a policy enforcer module a set of policy rules and a fantasy resource access module . The resource manager component may receive a message request from a host server program or a guest server program and manage access to fantasy content of the fantasy content database in response to the message request utilizing the policy enforcer module the set of policy rules and the fantasy resource access module . Using the resource manager component to manage access to the fantasy content database for both host server programs and guest server programs reduces access management overhead and ensures uniform access policies for heterogeneous fantasy applications.

A host server program and or a guest server program may send a message request using any number of known communications protocols and techniques. For example the message request may be sent utilizing the communications components operating in accordance with the Internet protocol suite such as HTTP TCP IP and UDP among other known protocols.

In one embodiment for example the fantasy network may utilize a representational state transfer REST architecture. REST is a software architecture style for distributed hypermedia systems such as the WWW. In a REST architecture clients initiate requests to servers and servers process and return appropriate responses. Requests and responses are built around a transfer of representations of resources. A resource is a primitive in a web architecture and is used in the definition of its fundamental elements. Client server communications may include REST information identifying a current or intended state of a resource. Since a REST architecture is a stateless architecture no client context is stored in a server between requests. Rather each request from any client contains all of the information necessary to service the request and any session state is held in the client. The server however can be stateful as long as a server side state is addressable by a URL as a resource.

When the fantasy network is implemented with a REST architecture the client devices and the various server devices may communicate messages with REST information. For instance a client device may send a message request requesting access to fantasy content of the fantasy content database . The message request may REST information conveying a current state or an intended state for the client device .

A message request may contain REST information communicated using an application layer protocol and a transport layer of an Internet protocol suite such as defined by one or more IETF standards. In one embodiment for example a message request may contain REST information communicated using HTTP and TCP. In one embodiment for example a message request may contain REST information communicated using HTTP and UDP.

The resource manager component may comprise a policy enforcer module . The policy enforcer module may control access to fantasy content of the fantasy content database . Since multiple fantasy applications are accessing the fantasy content of the fantasy content database there is always a security threat that rouge applications will attempt to improperly access fantasy content . Even in those cases where legitimate applications are attempting to access fantasy content these applications may need to be limited to isolated sets of fantasy content for privacy reasons. Further legitimate applications may intentionally or unintentionally attempt to access fantasy content in a manner that is inconsistent with rules of a particular fantasy game such as trying to acquire a player already committed to another team. This problem is exacerbated by the open architecture provided by the fantasy unified fantasy framework.

To further illustrate this problem a host server program such as a host server program is typically developed by a same entity that developed the fantasy server application . In the past the developer would tightly integrate the host server program and the fantasy server application to ensure the host server program operates consistently with the fantasy server application . For instance the host server program can be developed to conform to any security policies privacy policies or fantasy game rule policies implemented by the fantasy server application .

This tight integration between programs however comes with several disadvantages. For example changes in policy need to be made in both the host server program and the fantasy server application . In another example a new host server program needs to be developed in a very similar or identical manner as the host server program such as using a same set of APIs used by the host server program . However the programming techniques used for the host server program may not be suitable or desirable for the host server program . In yet another example this tight integration creates a closed system which may be hostile to third party software such as a guest server program for example. Essentially a developer for the fantasy server application and a developer of the guest server program would need to collaborate and replicate a custom set of APIs similar to those used by the host server program to obtain the same high level of integration between the guest server program and the fantasy server application as with the host server program and the fantasy server application .

To solve these and other problems the host server programs and guest server programs may utilize a standardized set of APIs to control interaction with the fantasy server application . A couple of examples for standardized APIs include a fantasy read resource and a fantasy write resource shown with a fantasy resource access module among others as described below. The standardized APIs provide seamless and uniform integration between the host server programs and the fantasy server application as well as the guest server programs and the fantasy server application . It basically creates an open system. As such an additional layer of enforcement is needed to protect integrity of the fantasy content stored by the fantasy content database .

The policy enforcer module is designed to prevent these and other attempts to improperly access fantasy content . The policy enforcer module may control access to fantasy content of the fantasy content database based on a set of policy rules . The policy rules are a set of rules designed to control behavior of both host server programs and guest server programs in a uniform manner.

In one embodiment the policy rules may represent a set of security policies. A security policy defines a set of constraints to control whether an entity may interact with a resource such as the fantasy content database . For instance a security policy may define security credentials e.g. security certificates authentication procedures authorization procedures encryption schemes and so forth.

In one embodiment the policy rules may represent a set of privacy policies. A privacy policy defines a set of constraints to control which specific resources within the fantasy content database an entity may access. For instance a privacy policy may define levels of permissions to certain files stored by the fantasy content database read authority for protected files e.g. user data dissemination of information in protected files protections need for dissemination of information in protected files e.g. encryption and so forth.

In one embodiment the policy rules may represent a set of fantasy game policies. A fantasy game typically has set of fantasy game rules. For instance fantasy football has different rules controlling different aspects of gameplay of fantasy football such as fantasy football league rules fantasy football team rules fantasy player rules fantasy manager rules fantasy team owner rules fantasy league owner rules player selection rules player trade rules player roster rules starting lineup rules substitution rules point system rules scoring system rules and so forth. Often the fantasy game rules are complex and detailed to ensure a high level of fair competition. Furthermore fantasy game rules typically change sometimes significantly between different fantasy games. For instance fantasy football rules are completely different from fantasy baseball rules.

The policy enforcer module may control access to fantasy content of the fantasy content database by a host server program and or a guest server program using the different security policies privacy policies and fantasy game policies defined for the unified fantasy framework. By way of example assume a user is viewing different aspects of a starting lineup for players in a fantasy baseball league presented by a host resource document and a guest resource document generated by the host server program and the guest server program respectively. Further assume a viewer attempts to add a fourth outfielder to her starting lineup by manipulating the guest resource document e.g. selecting a GUI button . A client device may send a message request to the fantasy web server . The resource manager component of the fantasy server application implemented by the fantasy web server may route the message request to the policy enforcer module . The policy enforcer module may retrieve the selection information from the message request including a fantasy baseball game identifier and a fantasy baseball league identifier. The policy enforcer module may retrieve a set of fantasy baseball game rules and a set of fantasy baseball league rules based on the respective identifiers. Some fantasy baseball league rules allow three outfielders while other fantasy baseball league rules allow four outfielders. Assume the fantasy baseball league identifier indicates a league rule that only allows three outfielders. In this case the policy enforcer module may send an error message to the web browser of the client device which surfaces a GUI message indicating the error.

The resource manager component may comprise a fantasy resource access module . The fantasy resource access module may provide access to the fantasy content of the fantasy content database . Once the policy enforcer module checks information in a message request to ensure that the requested access to the fantasy content of the fantasy content database is valid the policy enforcer module may pass the information to the fantasy resource access module to actually access the fantasy content .

The fantasy resource access module may access fantasy content of the fantasy content database in response to a message request from a host server program or a guest server program . The fantasy resource access module may contain a set of standardized APIs controlling access to the fantasy content of the fantasy content database such as read and write operations for the fantasy content . For instance the fantasy resource access module may retrieve REST information from a message request and access fantasy content of the fantasy content database using the REST information.

The fantasy resource access module may comprise a fantasy read resource arranged to read one or more fantasy content sets of the fantasy content from the fantasy content database . In one embodiment for example the fantasy read resource may be implemented as an API suitable for use with HTTP among other protocols. The fantasy read resource may be an atomic API by itself or may be implemented as part of another API directed to a specific task that includes reading fantasy content from the fantasy content database .

A sample URL for a fantasy read resource designed to read a resource comprising a draft order for a league using an HTTP GET method may be shown as follows 

The fantasy resource access module may comprise a fantasy write resource arranged to write change one or more fantasy content sets of the fantasy content to the fantasy content database . In one embodiment for example the fantasy write resource may be implemented as an API suitable for use with HTTP among other protocols. The fantasy write resource may be an atomic API by itself or may be implemented as part of another API directed to a specific task that includes writing fantasy content to the fantasy content database .

A sample URL for a fantasy write resource designed to write a resource comprising changes to a lineup for a fantasy team using an HTTP PUT method is shown as follows 

Continuing with a specific example for the sample URL for the fantasy write resource designed to write a resource comprising changes to a lineup for a fantasy team using an HTTP PUT method assume a user desires to activate or bench certain players. In this case a sample does the following 1 activate player with player ID 584808 and put him at third base 3B in the lineup 2 activate player with player ID 22234 and put him at catcher C in the lineup 3 bench player with player ID 390828 and remove him from 3B in the lineup 4 bench player with player ID 293103 and remove him from C in the lineup and 5 make moves effective 20110418. Sample PUT data to perform these lineup changes is shown as follows 

It may be appreciated that the fantasy read resource and the fantasy write resource are not limited to the previous examples. The fantasy read resource and the fantasy write resource may be implemented using other APIs as desired for a given implementation. The embodiments are not limited in this context.

It may also be appreciated that the fantasy read resource or the fantasy write resource can read from or write to a same fantasy content set in response to requests from the host server program the guest server program or both the host server program and the guest server program . For instance this may occur when the host resource document and the guest resource document both present the fantasy content set in the browser window at a same time. Alternatively the fantasy read resource or the fantasy write resource can read from or write to different fantasy content sets in response to requests from the host server program the guest server program or both the host server program and the guest server program . For instance this may occur when the host resource document and the guest resource document each present the fantasy content set respectively in the browser window at a same time. The embodiments are not limited in this context.

In order to access and use the standardized APIs offered by the fantasy resource access module a message request needs to communicate two items. The first is an access token. The second is at least one or more identifiers designed to identify a fantasy game a fantasy league and a fantasy user or a combination of all three.

For instance when a web browser of a client device receives a dynamic resource document with guest reference for a guest resource document and or a guest server program via an iframe element an access token is passed from the fantasy server application e.g. fantasy resource access module to the iframe URL of the guest resource document . The guest server program may get the access token for a user through a request for JSON such as 

The guest server program may parse the JSON or XML response to retrieve the access token and make API calls on the fantasy access resource module using the access token passed as an access token query parameter. Examples of JSON and XML calls are shown as follows 

A content web server is a web server that provides access to fantasy content associated with one or more fantasy games. A content provider provides different types of content related to fantasy games such as news commentary statistics rankings fantasy player data real player data fantasy game updates real game updates and so forth. Some examples of content providers is shown in Table 1 as follows 

A fantasy player may utilize one or more client devices to access fantasy content sourced by the different content web servers . For instance a fantasy player may use a client device to check on a latest set of player rankings for his team provided by a content web server . However as with third party applications not part of the fantasy network the fantasy player would need to shift focus from a browser window and open a new browser window to access fantasy content from the web server . Again this shift in focus removes the fantasy player from a unified fantasy game context thereby increasing complexity and reducing fantasy gameplay experience. The unified fantasy framework solves these and other problems by having the fantasy web server host content from the content web servers and provides a user access to the hosted content through the browser window via a dynamic resource document thereby allowing the user to remain within the fantasy gameplay context provided by the unified fantasy framework.

As shown in content web servers may comprise external content databases respectively each managing various content files . The fantasy server application may receive or retrieve the content files from the content web servers using a push model or a pull model respectively. The push model or pull model may push or pull on a periodic aperiodic continuous or on demand basis. The content files may be stored and or delivered in a defined data schema or data format compatible to a parser component of the fantasy server application such as a comma separated values CSV document or XML document for example.

The parser component may be arranged to receive content files and parse the files for conversion into a data schema or data format suitable for storage by the database server . A data format suitable for the database server may be a data format for a given database management system DBMS used by the database server such as a relational data model used by a relational database management system RDBMS in which data is stored in tables and the relationships among the data are also stored in tables. The data can be accessed or reassembled in many different ways without having to change table forms. Converting the content files from a data schema such as XML into a relational data model facilitates access search and retrieval of the underlying content stored in the content files 

The content files can be delivered to the fantasy web server using either a web interface or programmatically using HTTP. The former technique is more suitable for smaller amounts of content while the latter technique is more suitable for larger amounts of content. To deliver content files using a web interface the content web server may use an application to submit content files using a content delivery application appropriate for a given content type sourced by the content web server . To deliver content files using a HTTP interface the content web server may use an application to submit content files using the HTTP POST method. The POST method is supported by most programming and scripting languages either natively or through a library.

A content file may have a different data format depending on a type of content stored by the content file . For instance a content file with projections could have a CSV format while a content file with rankings outlooks or updates could have a XML format. Other data formats may be used as well. The embodiments are not limited in this context.

Along with a content file the content web server should deliver such information as a player identifier a sport identifier a position identifier and statistical categories enumerated using standard codes provided by the fantasy server application . A given set of standard codes can be accessed using an access token and standardized API as previously described.

In one embodiment for example a sample content file with projections may have the following fields for each projection record as shown in Table 2 as follows 

When a sample content file using the fields as shown in Table 2 is submitted using an HTTP interface the sample content file may be formatted using a CSV format. An sample CSV file is shown as follows 

In one embodiment for example a sample content file with rankings may have the following fields for each ranking record as shown in Table 3 as follows 

When a sample content file using the fields as shown in Table 3 is submitted using an HTTP interface the sample content file may be formatted using a XML format. A sample XML file is shown as follows 

Once the parser component parses received content files the parser component may store the parsed content files as hosted content in a hosted content database managed by the database server . To separate different content files from other hosted content the hosted content may be stored in different hosted content containers . For instance the hosted content from external content database may be stored in a hosted content container while hosted content from external content database may be stored in a hosted content container . Different permissions and access rights may be assigned to each of the hosted content containers to implement a given level of separation and security. Once content files are stored as hosted content a user may access the hosted content from within the unified fantasy framework such as via a dynamic resource document served by the fantasy server application as implemented by the fantasy web server .

As shown in the resource manager component may receive a message request from a web browser of a user device to access hosted content of the hosted content database implemented by the database server . The policy enforcer module may receive the message request retrieve information e.g. an access token subscription information etc. from the message request and determine whether a user of the web browser has access to the requested hosted content . If the user is denied access the policy enforcer module may send a message response with an error message to the web browser . If the user is granted access the policy enforcer module may pass the message request to a hosted resource access module .

The resource manager component may comprise a hosted resource access module arranged to access hosted content from a hosted content database . The hosted resource access module may comprise one or more standardized APIs to access the hosted content database such as a hosted read resource and a hosted write resource . The hosted resource access module the hosted read resource and the hosted write resource may operate similar to the fantasy resource access module the fantasy read resource and the fantasy write resource respectively as described with reference to . In some cases the hosted write resource may be enabled or disabled for certain hosted content based on write privileges granted or denied respectively by a web content server 

The resource manager component may comprise a hosted resource access module arranged to access hosted content from a hosted content database from a hosted content container . The hosted resource access module may retrieve information from a message request identifying a hosted content and or a hosted content container 

The web browser may generate a message request in response to activation of one or more external content controls provided by a dynamic resource document such as the external content controls . In some cases the external content controls may be in a special segment type of the dynamic resource document . In such cases when a user activates an external content control a message request is generated and sent directly to the fantasy web server .

In some cases the external content controls may be provided in a host resource document or a guest resource document . When a user activates an external content control a message request is generated and sent indirectly to the fantasy web server through a host server program or a guest server program . In such cases the hosted resource access module may access hosted content from a hosted content database from a hosted content container in response to a message request from a host server program or a guest server program 

As with the fantasy resource access module the hosted resource access module may retrieve REST information from a message request . The REST information may comprise information needed by the policy enforcer module and or the hosted resource access module in a REST format e.g. stateless format . The hosted resource access module may comprise a hosted read resource . The host read resource may read hosted content from the hosted content database using the REST information. The hosted resource access module may comprise a hosted write resource . The hosted write resource may write hosted content to the hosted content database using the REST information.

Included herein is a set of flow charts representative of exemplary methodologies for performing novel aspects of the disclosed architecture. While for purposes of simplicity of explanation the one or more methodologies shown herein for example in the form of a flow chart or flow diagram are shown and described as a series of acts it is to be understood and appreciated that the methodologies are not limited by the order of acts as some acts may in accordance therewith occur in a different order and or concurrently with other acts from that shown and described herein. For example those skilled in the art will understand and appreciate that a methodology could alternatively be represented as a series of interrelated states or events such as in a state diagram. Moreover not all acts illustrated in a methodology may be required for a novel implementation.

In the illustrated embodiment shown in the logic flow may receive a resource document request from a client device at block . For example the fantasy server application may receive a resource document request from a client device 

The logic flow may generate a platform resource document with a host segment arranged to present a host resource document from a host server program and a guest segment arranged to present a guest resource document from a guest server program at block . For example the platform generator component of the fantasy server application may generate a platform resource document with a host segment arranged to present a host resource document from a host server program and a guest segment arranged to present a guest resource document from a guest server program .

The logic flow may retrieve the host resource document from the host server program the host resource document having fantasy content from a fantasy content database at block . For example the host manager component of the fantasy server application may retrieve the host resource document from the host server program the host resource document having fantasy content from the fantasy content database .

The logic flow may generate a guest reference to the guest server program arranged to generate the guest resource document with fantasy content from the fantasy content database at block . For example the guest manager component of the fantasy server application may generate a guest reference to the guest server program arranged to generate the guest resource document with fantasy content from the fantasy content database .

The logic flow may add the host resource document to the host segment and the guest reference to the guest segment to form a dynamic resource document at block . For example the guest manager component may add the host resource document to the host segment and the guest reference to the guest segment to form a dynamic resource document .

The logic flow may send a resource document response to the client device the resource document response including the dynamic resource document at block . For example the fantasy server application may send a resource document response to the client device the resource document response including the dynamic resource document .

As shown in a client device may initiate retrieve resource operations by sending a resource document request via a resource document request RDQ message to the fantasy web server . The fantasy web server may initiate retrieve fantasy content operations by sending a database request DBQ message requesting fantasy content to the database server and receiving a database response DBS message with the fantasy content . The fantasy web server may generate a dynamic resource document using the fantasy content and send the dynamic resource document via a RDQ message to the client device .

The web browser of the client device may initiate rendering resource operations to render the dynamic resource document and send a RDQ message requesting a guest resource document from the guest web server . The guest web server may initiate retrieve fantasy content operations by sending a DBQ message requesting fantasy content to the fantasy web server which performs policy checks and forwards the request by sending a DBQ message to the database server . The database server initiates retrieve fantasy content operations to retrieve the fantasy content and returns the fantasy content via a DBS message to the fantasy web server . The fantasy web server forwards the fantasy content from the database server to the guest web server via a DBS message .

The guest web server initiates generate guest resource document operations and utilizes the fantasy content to generate the guest resource document . The guest web server then sends the guest resource document to the client device in a RDS message to complete the rendering resource operations . The web browser then renders the dynamic resource document with a host segment arranged to present a host resource document from a host server program implemented by the fantasy web server and a guest segment arranged to present the guest resource document from the guest server program implemented by the guest web server .

As shown in the fantasy web server may initiate retrieve external content operations by sending a resource content request RCQ message to a content web server to retrieve a content file from the external content database and receiving a resource content response RCS message with the content file . The fantasy web server may convert the content file to hosted content and send the hosted content to the database server using a database content store request DCSR message where it is persisted in the hosted content database . Similarly the fantasy web server may send a RCQ message to a content web server to retrieve a content file from the external content database and receive a RCS message with the content file . The fantasy web server may convert the content file to hosted content and send the hosted content to the database server using a DCSR message where it is persisted in the hosted content database .

The client device may initiate retrieve external content operations by sending a content request CQ message to the fantasy web server requesting hosted content . The fantasy web server may perform check policy operations and if passed send a database content request DCQ message to the database server requesting the hosted content . The database server may retrieve the hosted content and send a database content response DCS message with the hosted content to the fantasy web server . The fantasy web server may return the hosted content in a content response CS message . The web browser of the client device may render the hosted content in a special segment type such as a new frame of the dynamic resource document .

One embodiment described herein may present techniques to integrate client side applications into a fantasy open platform environment. A client side application may be referred to as an application that runs on a browser of a user client machine to create a dynamic experience for the user. Client side applications are applications written by third parties e.g. developers that may change how the fantasy open platform environment may render the pages or elements within the pages. These techniques may provide several advantages for the fantasy open platform environment. For example there may be benefits to external content suppliers external application developers advertisers end users and supply chain providers.

One idea of an integrated fantasy open platform environment is to build fantasy products such that independent third party developers can build and market client side applications that interface with native products to create a better overall experience. These third party client side applications may leverage the fantasy audience and data to create these better experiences. A common situation right now is that fantasy players must visit a variety of sites to get all the information they need. In an ideal world these users would be able to access all this information from the comfort of their own fantasy league site within the fantasy open platform environment.

The fantasy core may be a component of the fantasy open platform environment responsible for implementing the basic or core fantasy functionality. The fantasy core may comprise a set of processes routines tools and other source code that implements the basics for the fantasy open platform environment. The fantasy core may implement the concepts that are universal to all fantasy leagues. These concepts may be represented by objects that have specific properties and may be stored in the fantasy data store . The fantasy core provides the access to the fantasy data store . A partial list of these objects may include league team owner game standings schedule roster transaction categories positions pro statistics and fantasy statistics. The league object organizes a collection of teams that play under one set of rules. The team object represents a team which is a member of the league. Leagues must have at least two teams. Teams play in leagues to determine a winner. The owner object represents a human individual controlling a team. A team may include one or more owners. The game object represents a matchup of two teams. The standings object may be an ordered list of teams in a league following the rules and based on the results of the games played. The schedule object may be a list of games already played or to be played. The roster object may be a collection of players on a team. The transaction object may be a roster move that can be a player being added or dropped from a team or traded between teams. The categories object may be a list of scoring statistics to be tracked in a particular league e.g. touchdowns receptions home runs free throw percentage etc. . The positions object may be a list of player positions eligible to participate in the game e.g. quarterbacks short stops power forwards etc. . The pro statistics object may be indicative of statistics accumulated by a player in the real world. The fantasy statistics object may be indicative of real world statistics accumulated by the players converted to the fantasy team according to the league rules.

The fantasy core may manage objects for the fantasy league that are static or unchangeable. For example a user can set up a league where a touchdown scored is worth six points or he can choose to assign five points for a touchdown. That logic may not be part of the fantasy core because it is changeable. However the fantasy core does not support a system that is not based on leagues and teams or a system in which teams play two opponents at once. These may be characterized as static or unchangeable objects.

Fantasy games may be comprised of fantasy game code. The fantasy game code may be the code that supports the existing fantasy products. The fantasy game code augments the fantasy core by providing any customization required by each product. The fantasy game code may introduce differences among fantasy products. Some differences among fantasy products are data driven and handled at the fantasy core level. For example the difference between baseball and football is in the set of real life objects used. Baseball depends on MLB teams players games stats categories positions etc. While football depends on NFL teams players games stats categories positions etc. These differences can be for the most part handled exclusively via the data made available to the fantasy core .

However other differences are handled by the fantasy game component. For example baseball hockey and basketball support periods of any length although the large majority of all leagues use a Monday to Sunday week period while football has periods fixed at one week that last from Wednesday to Tuesday. In baseball basketball hockey example the pro teams play several times per period and the stats collected during all those games are summed up or averaged and that comprises the fantasy stats for the player. In football on the other hand teams play once per period and that accounts for the totality of the stats accumulated for a given period. Other differences handled at fantasy game level may include things like games that use a salary cap and thus allows the same player to be a on multiple teams versus those that use a draft or auction to ensure that a player only appears on one team at a time.

To interact with the fantasy core the fantasy game code as well as the installed applications both native and third party applications that use the fantasy API layer. The fantasy API layer provides the mechanism permitting applications to use the fantasy core logic and have access to the fantasy data .

Neither the fantasy games nor the installed applications may have direct access to the fantasy data . The fantasy games and installed applications may have to access the fantasy data through the fantasy core which enforces the basic rules. This is a key aspect of the system that may prevent rogue applications from being able to cheat the system. If an application could interact directly with the fantasy data it could bypass the rules and do whatever it wanted breaking the integrity of the game.

An API may be comprised of a large number of function calls that return different data or perform specific actions. In particular all fantasy core objects should have access methods to retrieve and update them. The fantasy open platform environment may expose a number of these to the third party developers but not necessarily all.

The Fantasy APIs may be built using REST Representational State Transfer a common protocol used throughout the World Wide Web because of its simplicity. Moreover the APIs may incorporate security and authentication via Open Authentication OAuth an open standard for validating access between servers and clients.

JavaScript may be used as the language for developers to use to mitigate the security this risk as much as possible. JavaScript may be used for two major reasons. First and most importantly JavaScript has some limitations in its ability to access system resources. JavaScript may only access whatever data that may be converted to a JavaScript readable format. Second JavaScript is a fairly common language as it is heavily used to manipulate web page content.

One of the core tenants in the fantasy open platform environment is that the fantasy core objects are available via APIs in a format that is relatively easily accessible by Perl JavaScript and XML. Accessing fantasy core objects without using an API should be discouraged or prevented and all updates should be done via the API . Modifying object fields or saving such objects to disk should go through an API . In addition APIs should be accessible as native internal Perl calls AJAX calls from JavaScript or RESTful interface server to server .

Another principal of the fantasy open platform environment may be that styles used within the fantasy product application area e.g. below the league navigation portion of the web page should be maintained separate from the rest in its own cascading style sheets CSS file to allow developers to override those but yet not affect the overall fantasy open platform environment look and feel. Moreover all functionality handled via JavaScript call should be able to be overridden by an external developer in JavaScript.

The sports layer is the lowest layer i.e. layer 0 and is tasked with defining objects that exist outside of the fantasy context the real life objects. Examples of these objects may include sports leagues conferences divisions teams players and statistics. The contents of the sports layer may be considered to be the facts. This is content that does not change and does not need to be overridden in any way.

The fantasy core layer is the second lowest layer i.e. layer 1 of the fantasy open platform environment architecture . The fantasy core layer may contain a set of fantasy core objects and operations that serve as a foundation for most fantasy products. These objects may be characterized as the atomic structures that are usually required by all fantasy products.

The league object may include fields such as a league abbreviation field a league name field a league logo field a teams field a rules field a history field and an awards field. The teams field may be a pointer to the team object data structure. The rules field may include sub fields for type player pool roster limits scoring system schedule type playoff settings draft settings and transaction rules. The history field may include sub fields for standings schedule rosters transactions and draft results.

The team object may include fields such as a team name field an owners field a logo field and a rosters field. The owners field may be a pointer to the owners object data structure. The roster field may be a pointer to a rosters object data structure.

The owners object may include fields such as a user ID field an owner name field a commissioner flag field and a preferences options field. The standings object may include fields such as an overall field a breakdown field and a power field. The schedule object may include fields such as a scoring periods field and a games field. The games field may be a pointer to the game object data structure.

The game object may include fields such as a status field a teams field a score field and a players field. The teams field may be a pointer to the team object data structure. The player field may include sub fields for statistics and points.

The draft object may include fields such as an order field and a results field. The results field may include sub fields for round pick team and player. The team sub field may be a pointer to the team object data structure.

The transactions object may include fields such as a team field a type field a players field and a date field. The team field may be a pointer to the team object data structure. The player field may be a pointer to the players object data structure.

The pending transactions object may include fields such as a trades field and a waivers field. The trades field may include sub fields for teams players and draft picks. The waivers field may include sub fields for teams and players. The teams sub field may be a pointer to the team object data structure. The player sub field may be a pointer to the players object data structure.

The players object may include fields such as player name an eligibility field a service time field a wild cards field a statistics field a projections field an updates field and a roster trends field. The columns object may include fields such as an author field a headline field a synopsis field a photo field and a content field. The messages object may include fields such as an author field a To field and a content field. The league news object may include fields such as an author field a headline field a photo field and a content field.

The signup payment operation may include functions such as a product signup function a create league function a pay for league function and an activate deactivate application function. The activate deactivate application function for the signup payment operation may be league based.

The league setup operation may include functions such as a setup league function an invite team members function a load rosters function a set schedule matchups function a create award function and an update scores function.

The team owner operation may include functions such as a join league function a create league function an activate deactivate application function a select team function and an update preferences function. The activate deactivate application function for the team owner operation may be user based.

The draft operation may include functions such as a start draft function a pause draft function and a select player function.

The statistics operation may include functions such as a load statistics function a convert player statistics to points function a convert team totals to win loss function an add player statistics to team totals function a convert team total rankings to points function a view player statistics function a create and save reports function a view live scoring function a view standings function and a view schedule function. The convert player statistics to points function may be applied to points based leagues. The convert team totals to win loss function may be applied to head to head leagues. The add player statistics to team totals function may be applied to roto leagues. The convert team total rankings to points function may be applied to ranked leagues.

The transactions operation may include functions such as a view transactions function an add drop function a propose trade function an evaluate trade function an accept reject counter trade function a lineup move function a process waiver claims function and an approve transactions function.

The content operation may include functions such as a load update player projections function a calculate player projections function a receive player updates function and a receive new column function.

The alerts operation may include functions such as a view message board function a post message function a send private message function a read league news function a post league news function a send alert function and a send e report function.

Referring back to the product layer is layer 2 of the fantasy open platform environment architecture and defines the objects and operations that are specific to each fantasy product. This may include pointers to sport specific elements files e.g. football.pm baseball.pm etc. and product specific elements files e.g. singleleague.pm challengeleague.pm etc. . For example the product layer may contain the logic necessary to handle a commissioner league differently than a single league and a baseball league differently than a football league.

The configuration layer is layer 3 of the fantasy open platform environment architecture and defines the functionality that is specific to a given user or league.

The component layer is layer 4 of the fantasy open platform environment architecture . The component layer may include a set of objects created for the sake of convenience and to facilitate operations at the application layer. These components may provide an additional level of abstraction over the fantasy core objects in some cases combining them into more complex objects or creating specific views of those objects or data. The purpose of component layer objects may be to facilitate the application code to reuse common objects in familiar ways without having to duplicate the same code and provide language independence.

The component layer objects may be generally characterized as data objects and convenience objects. Data objects may offer a view into a data set. The views may be represented in various forms separate from the content itself. Such data objects may be represented in XML JavaScript Object Notation JSON or some TBL variant depending on the situation. Some examples include but are not limited to standings schedules player statistics and team roster. JSON is a text based open standard designed for human readable data interchange. It is derived from the JavaScript scripting language for representing simple data structures and associative arrays called objects. Despite its relationship to JavaScript it is language independent with parsers available for many languages.

Read only objects may refer to commonly used fantasy core objects such as league team or players. Such objects are already well defined Perl objects easily accessible from anywhere in the Perl code base and are stored as such using Storable . However making them available to application code could be problematic. For example we don t want application code modifying individual fields in the league object see requirement on enforcing commissioner access and so forth . A complex object may create a copy of these objects so that the application code can play with them and have ease of access to the various fields but are essentially read only. If application code needs to change a field it would have to call an appropriate function to do so. The objects may be synced after an update.

Convenience objects may be characterized as objects that are likely to be created for convenience of use on specific cases. Convenience objects may not be as usable across a wide number of applications as the data and read only objects but it may still make sense to create them in specific circumstances. The point is to assist the application developer. There may not be a precise rule to what is and what is not a convenience object as they will be created when a need arises. Some examples are presented.

In a first example the fantasy core level 1 data set includes separate objects for league news and columns called fantasy news within the products . This is because these objects while sharing some common elements like headline content author etc. also have significant differences. For instance the column object includes an author field and the league news object also includes an author field at a different level. For use at the application layer it is sometimes useful to combine these two into a single object. A convenience object can then be created as the union of these two objects.

In another example the data required to build a player profile blurb that appears at the top of each player page profile game log situational stats latest news eligibility service time etc. is a combination of level 0 player data and level 1 roster and statistics data. This data may be pulled from multiple places. A convenience object may be created that collects all the data and makes it available to the application code in a neat little package.

In yet another example a list of valid period options to display to the user on a given report may be created. For instance many reports in the fantasy products allow the user to look at the report for a previous week by selecting a particular week from a list that appears across the top of the report. Creating these lists is a common process that may be abstracted as a convenience object.

The interface layer is layer 5 of the fantasy open platform environment architecture . The interface layer may include contain the processes that are responsible for the user interface. Currently the user interface is handled by a combination of code spread among library pm files application pm files and client technologies such as the hyper text markup language HTML JavaScript and CSS. The interface layer may include four parallel types of elements a functional interface objects element a dynamic interface element a style look and feel element and a markup element.

The functional interface objects element may be comprised of objects and components to be included in a page. When looking at a page it should be possible to deconstruct the page and break it into individual components e.g. functional interface objects . For example a standings page could be said to have the following functional interface elements 

Functional interface elements may use component layer objects from lower layers to build pages of the desired complexity.

The dynamic interface element may refer to JavaScript code used to display objects on the fly or to create interactive experiences by acquiring data via JSON or other methods and displaying them in place. A current example may be how data flows into the live scoring product. The intent of the dynamic interface is to make this layer very powerful to facilitate the types of pages that can be created with just client code accessing component objects. This utilizes a powerful JavaScript library to handle the user interface as well as handling the multiple screen sizes and device independence of the client s machine browser.

The style look and feel element may refer to what defines how objects look e.g. fonts colors sizes etc. . Essentially this refers to what can be controlled with CSS.

The markup element where HTML code lies and allows an application to embed HTML code to handle specific problems. It is analogous to the insertion of HTML code in template files.

The application layer is layer 6 of the fantasy open platform environment architecture . The application layer may refer to application code for specific operations to carry out a particular fantasy operation or page . The application layer may contain code that is specific for a particular purpose and is code that does not exist in any of the previous layers. It is not code that needs to be reused because if it were it would be moved down to a lower layer.

In one embodiment client side applications are integrated into the fantasy open platform environment architecture . In general a client side application is an application that runs on the user s client machine browser to create a dynamic experience for the user. Client side applications may be written in JavaScript. The main advantage that JavaScript provides is its limited access to a user client computer . Browsers are generally good at preventing JavaScript code from disrupting operations. JavaScript however provides no defense against a program using up too many computer resources. Some modern browsers recognize when this is happening and offer the user an opportunity to kill the offending process. Fortunately a misbehaved client side application may be limited in its effects to one user at a time since it is running on that user s browser.

In the illustrated embodiment shown in the logic flow may create a client side application at block . For example a developer may create an application using JavaScript that supplements the user experience of fantasy product s executing on the fantasy open platform environment . The application may then be made available to users via the application marketplace upon its approval. Approval may include verification that the client side application meets the guidelines and requirements of the fantasy open platform environment to ensure compatibility and mitigate any risk of disruption to the fantasy open platform environment . The embodiments are not limited to these examples.

In the illustrated embodiment shown in the logic flow may provide API data for a client side application via JSON at block . For example to obtain approval for the client side application to run within the fantasy open platform environment the developer may need to adhere to certain requirements. One requirement may be that the client side application provide API data via JSON since the client side application may need access to data and or resources of the fantasy open platform environment . JSON access may be used because it is a text based open standard designed for human readable data interchange. The API data may be needed to allow a client side application to interact with the fantasy open platform environment when necessary via the user s browser. The embodiments are not limited to these examples.

In the illustrated embodiment shown in the logic flow may build documents using an HTML document tree at block . For example client side application code may build web pages having a very well designed HTML document tree where all the elements are properly identified. HTML is the main markup language for displaying web pages and other information that can be displayed in a web browser. HTML is written in the form of HTML elements comprised of tags enclosed in brackets like within the web page content. An HTML element is an individual component of an HTML document. HTML documents are composed of a tree of HTML elements and other nodes such as text nodes. Each element can have attributes specified. Elements can also have content including other elements and text. HTML elements represent semantics or meaning. For example the title element represents the title of the document. HTML tags most commonly come in pairs like and although some tags known as empty elements are unpaired for example . The first tag in a pair is the start tag the second tag is the end tag they are also called opening tags and closing tags . In between these tags web designers can add text tags comments and other types of text based content. The purpose of a web browser is to read HTML documents and translate them into visible or audible web pages. The browser does not display the HTML tags but uses the tags to interpret the content of the page. HTML elements form the building blocks of all websites. HTML allows images and objects to be embedded and can be used to create interactive forms. It provides a means to create structured documents by denoting structural semantics for text such as headings paragraphs lists links quotes and other items. It can embed scripts in languages such as JavaScript which affect the behavior of HTML webpages. Web browsers can also refer to cascading style sheets CSS to define the appearance and layout of text and other material. Such a document tree would allow client side application code to clearly locate the place on a web page where particular content should be placed and replace it or add to it . This may be done using tags and clear element identifiers. The embodiments are not limited to these examples.

In the illustrated embodiment shown in the logic flow may create hooks on host pages to allow embedding of client side application code at block . For example hooks may be created on the fantasy open platform environment web pages to allow embedding of developer client side application code depending on the application requirements. This may include predetermining which hooks to create to balance performance and security issues with the degree of openness available to client side applications. Links to sports and fantasy objects on a page should have hooks. This may include team names player names and owner names. In addition main user interface elements on a page should have hooks. This may include tables dialogs charts team logos alerts content boxes etc. Common page actions on a page should have hooks. This may be a reaction to hitting a submit button but may also apply to changing tabs. The embodiments are not limited to these examples.

In the illustrated embodiment shown in the logic flow may create a site map identifying each page at block . For example a clear site map where each page is clearly identified to allow client side application developers to specify on which pages to run. This may also include creating a system of wild cards or other flags that developers can use to select actions such as any page where a player name may appear . The embodiments are not limited to these examples.

In the illustrated embodiment shown in the logic flow may indicate on which pages a client side application will run at block . For example when a user web browser includes a client side application it should include an indication on which pages the application code on the needs to run with respect to the fantasy open platform environment . The client side application code may use the hooks to attach itself to certain events e.g. run when a user hits the submit button when some content on the page updates or simply when page loading is complete . The embodiments are not limited to these examples.

In the illustrated embodiment shown in the logic flow may document the hooks and the document tree at block . For example documenting the hooks and the document tree may provide a mechanism for tracing and or understanding client side application behavior and capabilities. The embodiments are not limited to these examples.

Client side applications may be constructed such that they can automatically do what a user may do manually. For example this may include automatically starting players with the best point totals for an upcoming game rather than having the user manually set or change a previous or default lineup. Consider a football fantasy game. The user may have acquired an optimal lineup client side application from the application marketplace . The purpose of the optimal lineup client side application is to review the current roster of players of the user s fantasy football team and determine which players have accumulated the most points to date for a season. The optimal lineup client side application may then insert players with the most points into starting positions for the week of upcoming games. This lineup may be used as the default lineup but still be manually edited by the user should the user wish to play a hunch and substitute a player with a lesser point total in a particular starting position.

The sophistication of the optimal lineup client side application may be even more complex in that it may access and process data of players against the teams they will be facing that week to obtain historical performance or weight the strength of the defense a player will face when determining which player to start. Consider a fantasy team that includes the running back that has tallied the most points of all running backs to date this season. The fantasy team may also include a running back with the 5highest total season to date. The obvious choice may be to start the running back with the most points. However suppose the best running back is playing against the team with the best run defense while the 5best running back is playing against the team with the worst run defense. The player projections for the upcoming week may actually indicate that the 5best running back is projected to total more points this particular week. In such a case the optimal lineup client side application may start the 5best running back over the best running back by using player projections as its key indicator rather than season point totals to date. Moreover the same application or another application may have a different formula for calculating player projections. Thus client side applications may be directed to providing the most accurate player projections. Player projection applications in combination with starting lineup application may work in concert to provide the optimal starting lineup for a fantasy team on a week to week basis.

As used in this application the terms system and component are intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution examples of which are provided by the exemplary computing architecture . For example a component can be but is not limited to being a process running on a processor a processor a hard disk drive multiple storage drives of optical and or magnetic storage medium an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and or thread of execution and a component can be localized on one computer and or distributed between two or more computers. Further components may be communicatively coupled to each other by various types of communications media to coordinate operations. The coordination may involve the uni directional or bi directional exchange of information. For instance the components may communicate information in the form of signals communicated over the communications media. The information can be implemented as signals allocated to various signal lines. In such allocations each message is a signal. Further embodiments however may alternatively employ data messages. Such data messages may be sent across various connections. Exemplary connections include parallel interfaces serial interfaces and bus interfaces.

The computing architecture includes various common computing elements such as one or more processors multi core processors co processors memory units chipsets controllers peripherals interfaces oscillators timing devices video cards audio cards multimedia input output I O components power supplies and so forth. The embodiments however are not limited to implementation by the computing architecture .

As shown in the computing architecture comprises a processing unit a system memory and a system bus . The processing unit may comprise any of various commercially available processors including without limitation an AMD Athlon Duron and Opteron processors ARM application embedded and secure processors IBM and Motorola DragonBall and PowerPC processors IBM and Sony Cell processors Intel Celeron Core 2 Duo Core 2 Quad Core i3 Core i5 Core i7 Atom Itanium Pentium Xeon and XScale processors and similar processors. Dual microprocessors multi core processors and other multi processor architectures may also be employed as the processing unit .

The system bus provides an interface for system components including but not limited to the system memory to the processing unit . The system bus can be any of several types of bus structure that may further interconnect to a memory bus with or without a memory controller a peripheral bus and a local bus using any of a variety of commercially available bus architectures. Interface adapters may connect to the system bus via a slot architecture. Example slot architectures may include without limitation Accelerated Graphics Port AGP Card Bus Extended Industry Standard Architecture E ISA Micro Channel Architecture MCA NuBus Peripheral Component Interconnect Extended PCI X PCI Express Personal Computer Memory Card International Association PCMCIA and the like.

The computing architecture may comprise or implement various articles of manufacture. An article of manufacture may comprise a computer readable storage medium to store logic. Examples of a computer readable storage medium may include any tangible media capable of storing electronic data including volatile memory or non volatile memory removable or non removable memory erasable or non erasable memory writeable or re writeable memory and so forth. Examples of logic may include executable computer program instructions implemented using any suitable type of code such as source code compiled code interpreted code executable code static code dynamic code object oriented code visual code and the like. Embodiments may also be at least partly implemented as instructions contained in or on a non transitory computer readable medium which may be read and executed by one or more processors to enable performance of the operations described herein.

The system memory may include various types of computer readable storage media in the form of one or more higher speed memory units such as read only memory ROM random access memory RAM dynamic RAM DRAM Double Data Rate DRAM DDRAM synchronous DRAM SDRAM static RAM SRAM programmable ROM PROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory polymer memory such as ferroelectric polymer memory ovonic memory phase change or ferroelectric memory silicon oxide nitride oxide silicon SONOS memory magnetic or optical cards an array of devices such as Redundant Array of Independent Disks RAID drives solid state memory devices e.g. USB memory solid state drives SSD and any other type of storage media suitable for storing information. In the illustrated embodiment shown in the system memory can include non volatile memory and or volatile memory . A basic input output system BIOS can be stored in the non volatile memory .

The computer may include various types of computer readable storage media in the form of one or more lower speed memory units including an internal or external hard disk drive HDD a magnetic floppy disk drive FDD to read from or write to a removable magnetic disk and an optical disk drive to read from or write to a removable optical disk e.g. a CD ROM or DVD . The HDD FDD and optical disk drive can be connected to the system bus by a HDD interface an FDD interface and an optical drive interface respectively. The HDD interface for external drive implementations can include at least one or both of Universal Serial Bus USB and IEEE 1394 interface technologies.

The drives and associated computer readable media provide volatile and or nonvolatile storage of data data structures computer executable instructions and so forth. For example a number of program modules can be stored in the drives and memory units including an operating system one or more application programs other program modules and program data . In one embodiment the one or more application programs other program modules and program data can include for example the various applications and or components of the fantasy open platform apparatus .

A user can enter commands and information into the computer through one or more wire wireless input devices for example a keyboard and a pointing device such as a mouse . Other input devices may include microphones infra red IR remote controls radio frequency RF remote controls game pads stylus pens card readers dongles finger print readers gloves graphics tablets joysticks keyboards retina readers touch screens e.g. capacitive resistive etc. trackballs trackpads sensors styluses and the like. These and other input devices are often connected to the processing unit through an input device interface that is coupled to the system bus but can be connected by other interfaces such as a parallel port IEEE 1394 serial port a game port a USB port an IR interface and so forth.

A monitor or other type of display device is also connected to the system bus via an interface such as a video adaptor . The monitor may be internal or external to the computer . In addition to the monitor a computer typically includes other peripheral output devices such as speakers printers and so forth.

The computer may operate in a networked environment using logical connections via wire and or wireless communications to one or more remote computers such as a remote computer . The remote computer can be a workstation a server computer a router a personal computer portable computer microprocessor based entertainment appliance a peer device or other common network node and typically includes many or all of the elements described relative to the computer although for purposes of brevity only a memory storage device is illustrated. The logical connections depicted include wire wireless connectivity to a local area network LAN and or larger networks for example a wide area network WAN . Such LAN and WAN networking environments are commonplace in offices and companies and facilitate enterprise wide computer networks such as intranets all of which may connect to a global communications network for example the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a wire and or wireless communication network interface or adaptor . The adaptor can facilitate wire and or wireless communications to the LAN which may also include a wireless access point disposed thereon for communicating with the wireless functionality of the adaptor .

When used in a WAN networking environment the computer can include a modem or is connected to a communications server on the WAN or has other means for establishing communications over the WAN such as by way of the Internet. The modem which can be internal or external and a wire and or wireless device connects to the system bus via the input device interface . In a networked environment program modules depicted relative to the computer or portions thereof can be stored in the remote memory storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used.

The computer is operable to communicate with wire and wireless devices or entities using the IEEE 802 family of standards such as wireless devices operatively disposed in wireless communication e.g. IEEE 802.11 over the air modulation techniques . This includes at least Wi Fi or Wireless Fidelity WiMax and Bluetooth wireless technologies among others. Thus the communication can be a predefined structure as with a conventional network or simply an ad hoc communication between at least two devices. Wi Fi networks use radio technologies called IEEE 802.11x a b g n etc. to provide secure reliable fast wireless connectivity. A Wi Fi network can be used to connect computers to each other to the Internet and to wire networks which use IEEE 802.3 related media and functions .

As shown in the communications architecture comprises includes one or more clients and servers . The clients may implement the client device . The servers may implement the server device . The clients and the servers are operatively connected to one or more respective client data stores and server data stores that can be employed to store information local to the respective clients and servers such as cookies and or associated contextual information.

The clients and the servers may communicate information between each other using a communication framework . The communications framework may implement any well known communications techniques and protocols. The communications framework may be implemented as a packet switched network e.g. public networks such as the Internet private networks such as an enterprise intranet and so forth a circuit switched network e.g. the public switched telephone network or a combination of a packet switched network and a circuit switched network with suitable gateways and translators .

The communications framework may implement various network interfaces arranged to accept communicate and connect to a communications network. A network interface may be regarded as a specialized form of an input output interface. Network interfaces may employ connection protocols including without limitation direct connect Ethernet e.g. thick thin twisted pair 10 100 1000 Base T and the like token ring wireless network interfaces cellular network interfaces IEEE 802.11a x network interfaces IEEE 802.16 network interfaces IEEE 802.20 network interfaces and the like. Further multiple network interfaces may be used to engage with various communications network types. For example multiple network interfaces may be employed to allow for the communication over broadcast multicast and unicast networks. Should processing requirements dictate a greater amount speed and capacity distributed network controller architectures may similarly be employed to pool load balance and otherwise increase the communicative bandwidth required by clients and the servers . A communications network may be any one and the combination of wired and or wireless networks including without limitation a direct interconnection a secured custom connection a private network e.g. an enterprise intranet a public network e.g. the Internet a Personal Area Network PAN a Local Area Network LAN a Metropolitan Area Network MAN an Operating Missions as Nodes on the Internet OMNI a Wide Area Network WAN a wireless network a cellular network and other communications networks.

Some embodiments may be described using the expression one embodiment or an embodiment along with their derivatives. These terms mean that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment. Further some embodiments may be described using the expression coupled and connected along with their derivatives. These terms are not necessarily intended as synonyms for each other. For example some embodiments may be described using the terms connected and or coupled to indicate that two or more elements are in direct physical or electrical contact with each other. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other.

It is emphasized that the Abstract of the Disclosure is provided to allow a reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate embodiment. In the appended claims the terms including and in which are used as the plain English equivalents of the respective terms comprising and wherein respectively. Moreover the terms first second third and so forth are used merely as labels and are not intended to impose numerical requirements on their objects.

What has been described above includes examples of the disclosed architecture. It is of course not possible to describe every conceivable combination of components and or methodologies but one of ordinary skill in the art may recognize that many further combinations and permutations are possible. Accordingly the novel architecture is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims.

