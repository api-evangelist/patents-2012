---

title: Asynchronous message passing
abstract: This specification describes technologies relating to software execution. A computing device includes a processor. An operating system includes an execution environment in which applications can execute computer-specific commands. A web-browser application includes a scripting environment for interpreting scripted modules. The web-browser application further includes a native environment in which native modules can execute computer-specific commands. The web-browser application further includes an interface between the scripting environment and the native environment. The interface includes functions to asynchronously pass data objects by value, from one of the scripting environment and the native environment, to the other of the scripting environment and the native environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09128702&OS=09128702&RS=09128702
owner: Google Inc.
number: 09128702
owner_city: Mountain View
owner_country: US
publication_date: 20120323
---
A browser plugin is a separate software module that modifies the browser interface and the browser behavior. Conventional browsers are configured to provide a plugin interface for runtime support of plugins. A browser can expose a subset of its capabilities to be used directly at runtime by its supported plugins. Netscape Plugin Application Programming Interface NPAPI is an example of a conventional browser plugin interface used by many web browsers.

A web browser or other application can interpret scripted modules and execute native modules in a managed environment. To facilitate communication between the scripted modules and the native modules an interface of the web browser can pass data objects between the modules.

The interface can pass the data objects by value so that sending the data object creates a copy. As a result the sending and receiving modules will both have independent copies of the data object. The interface can also pass the data objects asynchronously. As a result the sending and receiving modules may be timed independently and the sending module does not need to wait for the receiving module to accept the data object before continuing operation.

In general one aspect of the subject matter described in this specification can be embodied in a system that includes a computing device that includes a processor. The system further includes an operating system that includes an execution environment in which applications can execute computer specific commands. The system further includes a web browser application. The web browser application includes a scripting environment for interpreting scripted modules. The web browser application further includes a native environment in which native modules can execute computer specific commands. The web browser application further includes an interface between the scripting environment and the native environment. The interface includes functions to asynchronously pass data objects by value from one of the scripting environment and the native environment to the other of the scripting environment and the native environment.

Implementations can include any all or none of the following features. The web browser application further includes a scripted module interpreted in the scripting environment. The scripted module is configured to asynchronously send a first data object through the interface to the native module by value without halting interpretation of the scripted module until the first data object is received by the native module. The scripted module is configured to asynchronously receive a second data object through the interface from the native module by value. A native module in the native environment is configured to asynchronously receive the first data object through the interface from the native module by value. The native module is configured to asynchronously send the second data object through the interface to the native module by value without halting execution of the native module until the second data object is received by the scripted module. The scripted module is written in a scripting language and the first data object and the second data objects are of types specified by the scripting language. The first data object and the second data object are of dictionary type. The scripted module is interpreted in a first process and the native module is executed in a second process. The data object is a serialized string. Web browser application further includes a dictionary of values. The dictionary is available to the scripting environment and to the native environment. The data object is an index of a value of the dictionary. The functions to asynchronously pass data objects by value include functions to receive from one of the scripting environment and the native environment a reference to a memory location containing a data object create a copy of the data object in a second memory location and provide to the other of the scripting environment and the native environment a reference to the second memory location. The functions to asynchronously pass data objects by value include functions to receive from one of the scripting environment and the native environment a data object store the data object until the data objects are requested and provide to the other of the scripting environment and the native environment the data object responsive to a request for the data object from the other of the scripting environment and the native environment. The computer specific commands are processor specific commands.

In general one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of executing on a processor an application s computer specific commands in an operating system s execution environment interpreting a scripted module in a web browser s scripting environment executing on the processor a native module s computer specific commands in the web browser s native environment and asynchronously passing from one of the scripting environment and the native environment a data object by value from the other of the scripting environment and the native environment from one of the scripting environment and the native environment to the other of the scripting environment and the native environment.

The foregoing and other embodiments can each optionally include one or more of the following features alone or in combination. The scripted module is written in a scripting language and the data object is of a type specified by the scripting language. The first data object and the second data object are of a dictionary type. The scripted module is interpreted in a first process and the native module is executed in a second process. The data object is a serialized string. Asynchronously passing the data object includes receiving from one of the scripting environment and the native environment the data object storing the data object in a library in association with an index and providing to the other of the scripting environment and the native environment the index. Asynchronously passing a data object by value includes receiving from one of the scripting environment and the native environment a reference to a memory location containing a data object creating a copy of the data object in a second memory location and providing to the other of the scripting environment and the native environment a reference to the second memory location. Asynchronously passing a data object by value includes receiving from one of the scripting environment and the native environment a data object storing the data object until the data object is requested and providing to the other of the scripting environment and the native environment the data object responsive to a request for the data object from the other of the scripting environment and the native environment. The computer specific commands are processor specific commands.

In general one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of executing on a processor an application s computer specific commands in an operating system s execution environment interpreting a scripted module in a web browser s scripting environment executing on the processor a native module s computer specific commands in the web browser s native environment receiving from one of the scripting environment and the native environment a reference to a memory location containing a data object creating a copy of the data object in a second memory location and providing to the other of the scripting environment and the native environment the copy of the data object responsive to a request for the data object from the other of the scripting environment and the native environment.

Various implementations of the subject matter described here may provide one or more of the following advantages. For example a browser may allow a native code portion of a web page to be executed in a managed environment. As such up to date software may be dynamically delivered through web browsing. A web browser that asynchronously passes data object by value between scripted modules and native modules can permit more flexible and efficient design of both the scripted modules and native modules. For example by passing a data object by value an entire copy of a composite data structure may be passed. As such each individual element of the composite data structure do not necessarily need to be passed in individual messages. Module developers may know that code in a module will not be reentered while blocked waiting for a result. As such module developers are supported to write modules that are easier to design correctly. A native module can be prevented from causing a web page to hang during operations that take a long time to complete. For example an interface passing a data object asynchronously can prevent a scripted module from hanging while a native module handles a very large incoming data object.

The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features objects and advantages of the invention will be apparent from the description and drawings and from the claims.

To load the game the user uses a web browser on a computer to request a webpage from a web server over the network . In this example the computer is a personal computer such as a desktop or laptop. However it will be understood that any type of computer suitable to execute an application may be used in other example. These other computers include but are not limited to tablet computers phones televisions game consoles game cabinets and kiosk machines.

At the user s direction the web browser can request the webpage from the web server . The request is passed over the network which may include any suitable wired or wireless network such as a local area network LAN a wide area network WAN and the Internet. The web server can respond to the request by sending a copy of the webpage back to the web browser over the network .

The webpage in this example is a hypertext markup language HTML document that includes at least a scripted module and a native module . The HTML portions of the webpage define many portions of the webpage for example the layout of elements in the webpage when it is displayed by a web browser. One such element of the webpage is a game created by the scripted module . The scripted module in this example is a JavaScript program although any appropriate scripting language that is interpreted by a web browser may be used. The scripted module can handle many of the functions of the game that are not computationally complex such as user log in input handling and an in game chat with other players.

More complex or time sensitive processes like rendering a 3D world and collision detection can be handled by a game engine created using the native module . In this example the native module is written in c although any appropriate programming language that is executed by the web browser may be used. The native module may be or may include off the shelf game engines and graphics libraries e.g. id Tech 3 or Panda30 and OpenGL or Direct3D respectively.

When the web browser receives the webpage the web browser displays the web page . Displaying the web page can include one or more of rendering the HTML interpreting the scripted module or executing the native module . The web browser has a number of mechanisms to protect the computer from any potential malicious or erroneous functionally of the web page . For the HTML rendering user options may be set to restrict behavior that the user may not want such as storing cookies. For the script interpreting the scripting language or interpreter may not support potentially dangerous functionality like reading or writing to a hard drive. For the native code execution the web browser may execute the native module in a sandbox. A sandbox is a managed environment in which a subset of the computer s resources are available. For example the sandbox may have access to only one directory of disk memory a pre allocated memory buffer and a subset of operating system or processor application programming interfaces APIs .

The native module and any other untrusted native code may execute in the sandbox at or near the speed of native code executed outside of the sandbox. By executing the native module in the sandbox the browser can protect the rest of the computer from untrusted native code without significantly diminishing the performance of the native module . As such the developers of the game are able to embed games and other resources into webpages for display on a browser and a user is able access the game without worrying that it will affect the user s computer.

Although a video game was used in this example the system can also be used for distributing other types of applications. Another example includes text to speech in which a scripted module sends page text to a native module and the native module generates a sound emulating a voice speaking the text an embedded interpreter in which an arbitrary scripting language is used to create the scripted module and the native module is an interpreter for the arbitrary scripting language. Other uses include but are not limited to media players that are able to use hardware acceleration remote desktop and virtualization services computer aided drafting programs and teleconferencing applications.

The computer system includes hardware components including but not limited to a processor . The processor can be configured to carry out instructions of computer programs and to perform arithmetic logical and input output operations of the computer system . Other hardware components that may be included in the computer system include but are not limited to main memory disk memory input output hardware and network connections not shown for clarity . The hardware of the computer system runs an operating system that manages computer hardware resources and provides common services for application software. The operating system may be a general purpose operating system that is compatible across a variety of hardware configurations or the operating system may be system specific. Some of the tasks that the operating system may be responsible for include but are not limited to user authentication windowing and managing network traffic.

The operating system can create an execution environment for executing one or more applications. The execution environment can represent the conditions policies and tools that the operating system provides to applications executing in the operating system . Although one execution environment is shown some computer systems can create multiple execution environments . For example a computer system may have many users and the computer system can create an execution environment for each user. The execution environments may not all be the same. For example an execution environment for an administrative user may have more permissions enabled than an execution environment for a non administrative user.

Applications that can execute in the execution environment can include user facing applications for example an email application a text editor and a browser . Other types of application that are not user facing e.g. utilities daemons may also execute in the execution environment . The applications in the execution environment can execute computer specific commands. Computer specific commands include any function library API or other command that is compatible with the computer system but that may not be compatible with other computer systems.

One type of computer specific command is a processor specific command. Processor specific commands are commands that are associated with one or more processors. Often the processor specific commands are part of an instruction set associated with a processor architecture though not always. One group of processor specific instructions is the x86 family of instruction sets. Example processor specific instruction in the x86 family of instruction sets include AND for a logical and CBW for converting a byte to a word STI for setting an interrupt flag and SUB for subtraction. Other example processor instruction sets include the ARM instruction set and the PowerPC instruction set.

Another type of computer specific command is an operating system specific command. Operating system specific commands are commands that are associated with one or more operating systems. Operating system specific commands are often organized into APIs related to a particular concept or task. For example some Unix based operating systems include an API for sockets and another API for shared memory management. Other operating system specific commands include files and features often or always found in an operating system. For example the dev random file in some Unix based operating systems servers as a pseudorandom number generator.

Other types of computer specific commands can exist. For example a hardware device connected to the computer system may have associated commands. The complete set of all computer specific commands available in the execution environment can include processor specific commands operating system specific commands and other commands. The number and type of processor specific commands may depend on the configuration of the computer system as well as other factors.

A shown in the browser executes in the execution environment and may access some or all of the computer specific commands of the execution environment . The browser can load and display documents e.g. files or other data to a user. In doing so the browser may need to render interpret and or execute portions of the documents. Examples of the browser include but are not limited to file browsers document editors and web browsers.

The browser can create a scripting environment for interpreting received scripted modules . The scripted modules may come from a variety of sources. For example scripted module may be a component of a document being loaded and displayed by the browser and scripted module may be a plugin of the browser The scripted modules are written in a scripting language e.g. JavaScript or Perl and may contain either the source code of the scripted modules or bytecode created from the source code.

The browser can interpret the scripted modules by reading each command of source code or bytecode and performing the associated action or actions within the execution environment . In some implementations the scripting language limits the types of commands that are possible. The browser can enforce security policies that prevent interpretation of commands that may be malicious or unwanted. In some implementations interpreting the scripted modules is significantly slower than executing applications in the execution environment . Additionally some of the commands that are not available in a scripting language may be desirable for a particular task.

The browser can also create a native environment for executing received native modules . The native modules may come from a variety of sources. For example native module may be component of a document being loaded and displayed by the browser and native module may be a plugin of the browser . Native modules as the term is used here refers to modules that can be configured to execute computer specific commands. The native modules are written in a computer specific programming language such as c or c and may contain binary data created by compiling the source code into computer specific commands.

The native environment can include a sandbox for executing the native modules . The sandbox may be an environment that is similar to an execution environment that limits the types of computer specific commands that are permitted. For example the native environment may intercept the commands and messages and of the native modules and prevent some of the commands and messages. In some implementations a white list of permitted commands and messages is established for a native environment and only those commands and messages are permitted. In some implementations a black list of restricted commands and messages is established for the native environment and those commands are denied. Other configurations of the native environment are possible. For example the native environment may prevent cross process messaging and may isolate software faults.

In some implementations executing the native modules in the native environment may be as fast or nearly as fast as executing applications in the execution environment . This execution may be faster than interpreting scripted modules in the scripting environment . Additionally the computer specific programming languages used to write native modules often do not have the same limitations on the types of commands available in a scripting language.

Scripted modules can be associated with one or more native modules to gain access to computer specific commands that are not available in the scripting environment and or to increase the speed of computation for a task. For example a scripted module can send data to a native module . The native module can process the data and return the processed data to the scripted module .

To facilitate the passage of data between the scripting environment and the native environment the browser can create an interface . The interface can expose functions to the scripting environment and the native environment for sending and receiving data objects. In some implementations the interface may pass data by value. That is the interface may create a copy of the data as part of passing the data. By way of comparison passing data by reference involves creating a copy of a reference to the data and passing the copy of the reference. In a pass by reference scheme the data is not copied as part of passing the data.

Additionally the interface may pass the data asynchronously. That is the receiving module may not need to prepare to receive data from the sending module before the sending module is able to send the data. One possible configuration of the interface for asynchronously sending data by value is described with respect to below.

A scripted module and a native module that are passing data objects may be interpreted and executed respectively in separate processes. The browser may be executing in the execution environment in two or more processes. Some of these processes are used to maintain the scripting environment and the native environment . In some cases each module and may have their own process and or each document loaded in the browser may have a process. As such the interface may be configured to pass data objects between modules in different process.

In this example configuration of the interface the scripting environment a scripted module the native environment and a native module of is shown. However other configurations of these and or other components can be used to facilitate asynchronous data passing by value.

The scripting environment and the native environment can be assigned a scripting memory buffer and a native memory buffer respectively. The scripting memory buffer and native memory buffer are portions of the main memory of the computer system that have are allocated and managed by the operating system and the browser . These memory buffers and may be the only portions of main memory to which the scripted module and the native module can read and write data to for example to segregate the scripted modules and the native module from the rest of the execution environment .

The memory buffers and can store data objects e.g. files data structures or any other data stored in main memory by the scripted module and the native module . The data objects can be identified in the scripted module and the native module by references. The references can include for example variable names pointers or other appropriate identifiers.

To send a data object to a module in the other environment the scripted module or the native module can provide the interface with a reference to the data object to be sent. The interface can create a copy of the referenced data object and add the copy to a queue between the two environments. In some implementations the interface has two queues one for scripting environment to native environment data object passing and one for native environment to scripting environment data object passing. In this case every module in an environment that receives data objects from the other environment can subscribe to the same queue and pull a data object intended for that module. In some other implementations the interface has a queue for each module and any module configured to send a data object to another module can push it to the associated queue. In still some other implementations a module may have any number of associated queues in the interface . In some of these cases a module can have different queues for different purposes such as different types of data object data objects from different modules or data objects intended for different uses within the module. The number and types of queues may be determined either the interface or the script module and the native module .

Once a data object is in a queue of a module the module can pull the data object according to one or more schemes. In one scheme the interface can send an alert to the module that notifies the module that there are data objects waiting to be pulled. In another scheme the module can poll the interface to determine the state of the queue either empty or containing data objects. The interface can serve the data objects to the module in the order that they are received by the interface or according to some other criteria. For example the sending module may be permitted to give each data object a weight and the data objects may be ordered and dequeued in order of this weight. This may permit for example real time or high priority data objects to be passed faster than non real time or low priority data objects.

Other configurations for passing data objects by the interface are possible and it will be understood that any one of these options or any combination thereof can be used. For example the interface can place references to data objects in the queues and not create the copies of the data objects until the receiving module pulls the data object from the queue. In this configuration for example a more up to date data object can be passed by the interface . This may be desirable for example if a data object contains constantly updating or aggregate data such as an input stream.

Another configuration involves the use of a library . Modules may store a data object in the library and the library can return a library index to the module. This library index may be a unique identifier of the data object that can be used by any module to access a copy of the data object stored in the library . This library index may be sent from one module to another module in the other environment using any suitable interface mechanism including the queues described above.

In some implementations modules can or must serialize data objects to be passed by the interface . Serializing here refers to a reversible process of modifying a data object for transmission. Some serializing techniques involve transforming data objects into an ordered bitstream a string or another common data format. This data format may be the format of some data as it is used by the modules. For example the modules may use string type data objects to store text and serializing any object must involve changing it to a string type data object.

Additionally or alternatively the interface may pass data objects in a format that is native to one or more scripting languages or native module languages. For example a scripting language may define an ArrayBuffer data type to represent a generic fixed length binary data buffer. ArrayBufferView objects may be used to represent the buffer with a specific format and to facilitate reading and writing to the buffer. The interface may be configured to pass ArrayBuffers ArrayBufferViews and other data objects while preserving their typing.

As another example the interface may pass data objects in the format of a dictionary. The dictionary format includes a composite data structure sometimes a hash map but other configurations are possible that indexes each element by a string value key. By way of comparison many other composite data structures such as arrays usually index each element by an ordinal value. In some implementations the native module lacks some of the functionally to use the dictionary for example to iterate over a dictionary data object to look up a value by key or to discover the key strings. In some of these cases the interface may include a dictionary API to provide these and or other functions to the native module .

By passing data objects asynchronously and by value the interface allows the developers of the script module and the native module more flexibility in design than if the data objects were only passed synchronously and by reference. For example in the game webpage of the native module may be able to pass an entire copy of a pixel buffer to the scripted module . If the pixel buffer were to be passed by reference the scripted module may need to request the value of each pixel in separate requests. Further the native module would not have to wait for the scripting module to receive the pixel buffer before beginning the process of rendering the next frame of the game.

The system executes on a processor an application s computer specific commands in an operating system s execution environment . For example a computer e.g. computer system can execute an application e.g. email application text editor or browser in an execution environment e.g. execution environment . The application may include commands that are specific to the hardware of the computer e.g. processor and or the software of the computer e.g. operating system . In some implementations the applications have been written in a programming language compiled by a computer specific compiler into a series of binary machine instructions and executed.

The system interprets a scripted module in a scripting environment of a browser . For example a web browser e.g. browser can create one or more environments e.g. scripting environment for interpreting scripted modules e.g. scripted modules . The web browser can interpret scripted modules by parsing the commands of the scripted modules and performing the actions called for by the commands. In some implementations the scripted modules have been written in a scripting language that is not computer specific. That is the scripted modules may be interpreted by any system that provides a scripting environment that meets the requirements of the scripting language. As such the same scripting module may be used across a wide variety of systems to provide the same functionality.

The system executes on the processor a native module s computer specific commands in the web browser s native environment . For example a web browser can create one or more environments e.g. native environment for executing native modules e.g. native modules . The native module may include commands that are specific to the hardware of the computer e.g. processor and or the software of the computer e.g. operating system . In some implementations the applications have been written in a programming language compiled by a computer specific compiler into a series of binary machine instructions and executed.

Compared to the applications executing in the execution environment the native modules in the native environment may only be permitted to access a subset of the computer specific commands of the system. The web browser and or the native environment may have one or more security policies or other mechanism in place to limit the impact of the native module on the operating system or the system as a whole. These limits may be tied to the permitted and expected functionality of the native modules. For example the designers of the native environment may determine that no reasonable use of a native module includes accessing a hard drive. In this case the native environment would prevent any attempts by a native module to access a hard drive. In some cases the limited functionalities are those that could affect the computer system outside of the native environment. For example computer specific commands to perform calculations on the processor may always be permitted by the native module.

The system asynchronously passes from one of the scripting environment and the native environment a data object by value from the other of the scripting environment and the native environment . For example the web browser e.g. interface may receive data objects from a module e.g. scripted module native module in one environment e.g. scripting environment native environment and may pass the data object to a module in the other environment.

The web browser may pass these data objects by value. That is when a module sends a data object the web browser creates copy of the data object and passes the copy to the receiving module. As such two independent copies of the data object will exist. Each module may edit or delete their copy without affecting the copy held by the other module.

The web browser passes these data objects asynchronously. That is the sending module may not need to wait for the receiving module to accept the data object before beginning on another task. One scheme for asynchronously passing the data objects includes temporarily storing the data object while in transit. The web browser may create a data storage structure to temporarily hold the data object until the receiving module is prepared to accept it. In this case it is the web browser s data storage structure or a process thereof that must wait for the receiving module to accept the data object before beginning on another task.

Some configurations for asynchronously passing by value include the system receiving from one of the scripting environment and the native environment the data object. The system then stores the data object in a library e.g. library in association with an index. This library may take the form of any suitable data repository such as a hash table or array. The format of the library index may depend on the format of the library. For example for a hash table library the library index may take the form of the hash of the data object. For an array library the library index may take the form of an array index.

The system provides to the other of the scripting environment and the native environment the index. The system may provide this index directly to the receiving module. For example when the sending module sends the data object to the library the sending module may specify one or more modules to receive the library index. In this case the web browser may pass the library index to those specified modules. In another example the web browser may return the library index to the sending module. The sending module may then send the library index to any other module and the other modules may retrieve the data object from the library with the library index.

Some configurations for asynchronously passing by value include the system receiving from one of the scripting environment and the native environment a reference to a memory location containing a data object. The system then creates a copy of the data object in a second memory location. The system then provides to the other of the scripting environment and the native environment a reference to the second memory location. For example the web browser may create the copy of the data object in a memory buffer of the environment of the receiving module and may provide a reference of the data object to the receiving module. In another example the web browser may create the copy of the data object in a memory location that is not available to the receiving module. When the receiving module is ready to receive the data object the web browser can move the data object to the receiving environment s memory buffer and pass a reference to the new location to the receiving module.

Some configurations for asynchronously passing by value include the system receiving from one of the scripting environment and the native environment a data object. The system stores the data object until the data object is requested and then the system provides to the other of the scripting environment and the native environment the data object responsive to a request for the data object from the other of the scripting environment and the native environment. For example the web browser may create the copy of the data object in a memory location that is not available to the receiving module. When the receiving module is ready to receive the data object the web browser can provide the data object to the module. The module may then store the data object in a memory buffer or perform any other appropriate operation on the data object.

Some features described can be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. The apparatus can be implemented in a computer program product tangibly embodied in an information carrier e.g. in a machine readable storage device for execution by a programmable processor and method steps can be performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output. The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. A computer program is a set of instructions that can be used directly or indirectly in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment.

Suitable processors for the execution of a program of instructions include by way of example both general and special purpose microprocessors and the sole processor or one of multiple processors of any kind of computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally a computer will also include or be operatively coupled to communicate with one or more mass storage devices for storing data files such devices include magnetic disks such as internal hard disks and removable disks magneto optical disks and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices such as EPROM erasable programmable read only memory EEPROM electrically erasable programmable read only memory and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM compact disc read only memory and DVD ROM digital versatile disc read only memory disks. The processor and the memory can be supplemented by or incorporated in ASICs application specific integrated circuits .

To provide for interaction with a user some features can be implemented on a computer having a display device such as a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.

Some features can be implemented in a computer system that includes a back end component such as a data server or that includes a middleware component such as an application server or an Internet server or that includes a front end component such as a client computer having a graphical user interface or an Internet browser or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include e.g. a LAN local area network a WAN wide area network and the computers and networks forming the Internet.

The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network such as the described one. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

