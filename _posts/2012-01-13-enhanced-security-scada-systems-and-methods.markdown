---

title: Enhanced security SCADA systems and methods
abstract: A system and method for a secure supervisory control and data acquisition (SCADA) system. Secure SCADA elements (SSEs) have individual system security monitoring and enforcement of policies throughout the SCADA system. And isolation core ensures that a system security monitor monitors and takes appropriate action with respect to untrusted applications that may impact an SSE. The system security server provides policy enforcement on all of the SSEs that exist on the system. New security policies are created that are populated to individual SSEs in the system. Biomorphing algorithms allow for system uniqueness to be derived over time further enhancing security of SSEs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09298917&OS=09298917&RS=09298917
owner: Redwall Technologies, LLC
number: 09298917
owner_city: Beavercreek
owner_country: US
publication_date: 20120113
---
This application claims the benefit of priority to U.S. Provisional Application No. 61 539 801 filed Sep. 27 2011 the entire contents of which is incorporated herein by reference.

This invention relates generally to a secure SCADA Supervisory Control And Data Acquisition system. In particular the invention relates to a system and method for resisting malicious code from tampering with or otherwise exploiting a SCADA system.

SCADA Supervisory Control and Data Acquisition generally refers to industrial control systems. SCADA systems monitor and control industrial infrastructure processes and equipment such as those involved in refining water treatment manufacturing production and power generation. Because SCADA systems often control Critical National Infrastructure CNI elements ranging from nuclear power plants to flood gates they are seen as prime cyber terrorism targets. While in the past various components of SCADA systems were connected only over short serial connections as both the components of SCADA systems and the protocols they use to communicate have become standardized they have also become increasingly connected over shared and disparate networks including the internet. This increased connectivity has given adversaries new attack vectors against these critical systems.

SCADA systems typically include one or more of the following elements 1 a supervisory computer system gathering data on the process and sending commands to control to the process 2 Programmable Logic Controllers PLCs which are essentially small computers used to control electromechanical processes e.g. to switch something on or off to control a valve etc. 3 Remote Terminal Units RTUs which convert sensor signals to digital data and send digital data to the supervisory system and 4 a Human Machine Interface HMI which presents process data to a human operator and allows the operator to issue commands.

These SCADA elements communicate with each other over wired and or wireless networks including IP based networks over various transports. SCADA elements may communicate over shared or disparate networks and may utilize Web protocols for communication and display of data.

Embodiments include a method of operating a SCADA element in a first security mode defined by a first security policy that comprises monitoring applications processes and tasks that access a processor of the SCADA element determining one or more violations of the first security policy by an application process or task and taking a graduated action pursuant to the first security policy in response to the detection of one or more violations. The SCADA element may be for example a supervisory computer system a programmable logic controller a remote terminal unit and a human machine interface.

Further embodiments include a method of managing the security posture of a plurality of SCADA elements over a communication network that comprises storing a plurality of security policies in a security policy library and transmitting all or a portion of at least one security policy to at least one SCADA element over the communication network.

Further embodiments include a secure SCADA system that comprises a system security server coupled to a communications network and a SCADA element configured to communicate with the system security server over the communications network wherein the SCADA element comprises a memory and a processor coupled to the memory and configured with processor executable instructions to perform operations including monitoring applications processes and tasks that access the processor determining one or more violations of a first security policy stored on the SCADA element by an application process or task and taking a graduated action pursuant to the first security policy in response to the detection of one or more violations. In embodiments the system security server may comprise a memory a processor coupled to the memory and configured with processor executable instructions to perform operations including storing a plurality of security policies in a security policy library and transmitting all or a portion of at least one security policy to at least one SCADA element over the communication network.

The various embodiments will be described in detail with reference to the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts. References made to particular examples and implementations are for illustrative purposes and are not intended to limit the scope of the invention or the claims.

Various embodiments relate to systems and methods for resisting malicious code from tampering with or otherwise exploiting a SCADA Supervisory Control and Data Acquisition system. According to various embodiments secure SCADA element s SSE may operate in a manner that assures the user that it has not been tampered with by malicious code of various types. At the same time the various embodiments allow for the SSE to operate on existing hardware using existing firmware. Various embodiments provide an enhanced security SSE having the ability to for example internally monitor activities of any function of the SSE report on suspicious activity on the SSE by any function or program to a central server apply a series of protective measures that reside internally on the SSE when suspicious activity is detected and take advantage of threat libraries and policies residing on a security system server that update individual SSEs as needed.

In the various embodiments illustrated herein the SSE does not require special user interaction in order to have the SSE operate in a secure fashion.

Referring to a secure SCADA system according to one embodiment is illustrated. illustrates the architecture of an exemplary secure SCADA element which typically includes a processor coupled to a memory and may be a Supervisory Control System SCS a Programmable Logic Controller PLC a Remote Terminal Unit RTU and or a Human Machine Interface HMI as described above. The secure SCADA element may include a complete SCADA system.

In embodiments a secure SCADA system may be an comprised of one or more PLCs RTUs and HMIs under the control of a Supervisory Control System . In some embodiments the various SCADA elements may be combined in an integrated system that may communicate over the communication network with a system security server . In other embodiments the SCADA system may be a distributed system with various SCADA elements communicating with each other and with the system security server over the communication network .

The system security server which typically includes a processor coupled to a memory and may also include a number of connector ports coupled to the processor for establishing data connections the network may in accordance with various aspects of the invention store policies commands cryptographic data such as key data as well as other data for a plurality of SCADA elements as is described in further detail below.

Each SSE may store in memory a set of policies and or data which may or may not be distinct from the policies and or data stored on other SSEs or in other SCADA systems. Each SSE may also be configured to continuously interpret and process commands received from the system security server which may include commands to update one or more policies.

The precise manner in which the respective SSEs and the at least one system security server are connected via communication network is not critical to the various embodiments. In some embodiments it may not be required for the SSE and the system security server to communicate at all after an initial provisioning process and the initial provisioning process can be performed through a proxy or physical transfer.

Typical SSEs for use with the various embodiments will have in common the components illustrated in . For example the exemplary SSE may include a processor coupled to internal memory . The processor may be any programmable microprocessor microcomputer or multiple processor chip or chips that can be configured by software instructions applications to perform a variety of functions including the functions of the various embodiments described herein. Typically software applications may be stored in the internal memory before they are accessed and loaded into the processor .

The SSE may further include an operating system OS which as is known in the art may manage various resources of the device and provide a software platform upon which other programs e.g. applications may run. The OS may include a kernel and may be a security enhanced OS having an OS security monitor as is described in further detail below.

In various embodiments the SSE includes a protection core which may be implemented in software and which conceptually constitutes a small efficient separation layer that resides between the security enhanced OS and the processor . The protection core may operate to control access to resources and schedule execution of trusted elements. There may be one or more protection cores with one for each processor or processor core.

The protection core may include a system security monitor that monitors all applications processes and tasks that access the processor . The system security monitor may comprise a series of rules and policies implemented on a processor that are initially loaded in the system security monitor when the SSE is first provisioned. Thereafter the system security monitor may receive additional policies and rules from the network or a local authenticated source such as an SD card or direct entry. Thereafter the system security monitor may monitor all applications processes and tasks that are running in accordance with any new policies or rules.

In the event of a violation of security rules or detection of a suspicious application process or task behavior is found the system security monitor may notify the protection core to take appropriate graduated action according to rules implemented by a processor depending on the violation of security policy. Such graduated action may comprise disabling a particular SSE a part of a SSE or shutting down the entire secure SCADA system.

When an application process or task is loaded in a SSE the application process or task may be treated as untrusted and monitored closely by the system security monitor for application process or task activity and what parts of the SSE are accessed by what parts of the application process or task and what is done with any data information that is accessed.

Based upon scripts rules associated with security rules and policies in the system security monitor the system security monitor may observe the operations of the application process or task for any activity that violates any of the security rules in the monitor. The system security monitor may be upgraded from time to time with new security rules and policies as new threats emerge. These rules and policies allow designation of application process or task activity that is a potential violation of SSE security.

When a violation of a security rule occurs the system security monitor contains instructions for notifying the protection core of any violation. The protection core may include a series of instructions for taking protective actions in a layered fashion that reflects the threat detected. For example the protection core may direct that the application process or task be shut down as one limit and or the entire secure SCADA system be shut down as another limit. Other actions may be for the SSE to send an alert to the system security server see notifying of the violation and providing details of the violation including the application process or task that triggered the violation what actions were being attempted and what security countermeasures were triggered.

In embodiments when a security rule violation is detected by the system security monitor the system security monitor may transmit information on the rule violation to a system security server so that further analysis can take place. This transmission information may be for example only the name of the application process or task identifying information on the application process or task including manufacturer what actions the application process or task is taking on the SSE in question and other information. Thereafter the system security server may analyze the information and communicate to the SSE what if any action should be taken.

Various embodiments may also include the transmission of information on any newly loaded applications processes and tasks to the system security server . The system security server has a library of trusted and untrusted applications processes and tasks for the SSE. If the application process or task installed is a trusted one then monitoring is minimal by the system security monitor and the application process or task can run quickly. If the application process or task is unknown the SSE system security monitor may automatically designate the application as untrusted and monitor the application process or task very closely e.g. at a higher level of scrutiny than the monitoring of a trusted application process or task . In addition if the system security server notifies the SSE that the application process or task is not secure then the system security monitor may vigorously monitor the non secure application process or task for any illegal activity. While this close monitoring may impact the performance of the non secure application process or task the monitoring will result in early detection and reporting of any security rule violations. Further such close monitoring with no suspicious activity over a period of time can lead to the application process or task becoming trusted. 

The architecture of the various embodiments of the SSE is illustrated in . In the embodiments illustrated herein an untrusted application process or task which may be secure or non secure is one that has not been vetted against the secure SCADA system requirements or processes or is simply untrusted due to the policy in place e.g. it may be unsigned or signed by an untrusted entity .

A trusted application process or task is one that according to the current policy stored in the secure SCADA system has a higher assurance level than an untrusted application process or task and may be granted additional privileges or functions over an untrusted application process or task. The higher assurance level may be generated by prior testing of the trusted application process or task at the system security server prior to deployment of the application process or task on the SSE . Also in embodiments an application may become trusted when it has operated in an untrusted state for a particular period of time on the SSE without exhibiting any suspicious behavior. Trusted applications processes and tasks generally receive the greatest amount of access to SSE capabilities.

The operating system of the SSE may comprise any suitable OS for example Linux Windows a Real time Operating System RTOS or a simple execution loop. The operating system may be augmented with context switch hooks and other Application Programming Interface API components to access the secure SCADA features and functions. This provides an enhanced security capability on which other functionalities of the SSE may be built. However this is not meant as a limitation. Other operating systems that will become available that provide enhanced security may also be the subject of additional embodiments is noted herein.

The SSE takes advantage of the capabilities of the OS security monitor . The OS security monitor enforces policies in the OS kernel takes directives from the system security monitor and reports back to the system security monitor . In embodiments the OS security monitor may enforce policies at the low and medium robustness level within the SSE. In embodiments the OS security monitor resides inside the secure but untrusted operating system .

The actions and data of the OS security monitor which may reside in a secure but untrusted operating system may form a first line of defense as part of a secure SCADA software defense in depth strategy. Additional security may be provided by the system security monitor which may enforce policies at a high robustness level within the SSE. The system security monitor may operate in accordance with security policies that are installed when the SSE is initially configured or which may be changed and downloaded from the SSE security server from time to time as new threats emerge and are identified.

The protection core is a small efficient intermediate separation layer which controls access to resources and schedules execution of trusted elements. The operation of the protection core is controlled by the application processor . There may be more than one isolation core for example and without limitation one for each application processor.

The SSE comprises one or more application processors . In most cases the application processor functions in a normal fashion. The application processor interprets and executes the application process or task including but not limited to loaded applications processes tasks and threads trusted and untrusted the SSE operating system including the kernel device drivers etc. subject to the various policies that are enforced by the system security monitor . While a single processor is illustrated this is not meant as a limitation. Multiple application processors may also be present and are considered within the scope of the various embodiments disclosed herein.

As with any SSE various embodiments of the SSE also have associated I O interfaces for connecting devices and networks to the SSE. The devices could be any peripherals or physical interfaces such as network interfaces alarms sensors actuators microphones speakers or the associated chipsets to communicate to these devices.

The various embodiments of the SSE also comprise memory . Memory could be RAM or Flash memory storage or any other permanent or temporary storage.

In addition to a plurality of application processors the SSE may also comprise one or more specialized Ancillary Subsystems such as digital signal processors DSP field programmable gate arrays FPGA etc. These specialized subsystems may be too simple to accept the security monitors or other modifications. However it is anticipated as within the scope of the various embodiments noted herein that these specialized ancillary systems may well comprise their own security monitors with their own policies and applications.

In an embodiment the SSE also comprises a separate protection core associated with the Ancillary Subsystem . The Ancillary Protection Core serves the same functions as the Protection Core but may run on a different processor the Ancillary Processor in order to assure separate monitoring and operations of the Ancillary Isolation Core.

The SSE also comprises an Ancillary Processor as noted above. The Ancillary Processor interprets and executes code for the Ancillary Protection Core . The Ancillary Processor could be a separate physical processor an FPGA DSP or a logical separation of processors residing on the application processor.

Updating the system security monitors in all SSEs associated with a system with information about new security threats by adding new rules and policies to the system security monitor via automatic downloading 

Automatic reporting to a system security server of any suspicious activity detected by the system security monitor s of the overall SCADA system 

A system security server that interacts with the SSEs concerning characteristics of non secure and trusted applications processes or tasks and

Analysis of the properties of applications processes and or tasks that are loaded onto the SSE by the system security server .

As described above the SSE is a device that performs some function in a manufacturing infrastructure or similar process. In an embodiment the SSE interacts over a wired or wireless network with the System Security Server . The System Security Server comprises either physically or logically a series of servers and data files that support the secure operation of the SSE.

For example one component of the System Security Server may be a policy server . The policy server may send commands to a SSE and the SSE may also query the policy server at any time to see what behaviors might be allowed under what circumstances. Policy server may also serve as the primary management console for controlling SSEs. For example the policy server may be configured to reboot sterilize and or send other management commands to the SSEs. In embodiments the policy server may also enforce certain rules within its policies by acting as a data proxy or source to the SSEs. The administration provided by the policy server may be time driven i.e. regular updates to policies pushed to SSEs and or event driven i.e. an immediate threat is detected elsewhere in a network and information and new policies may be immediately populated to SSEs that are associated with the policy server .

The system security server may also include a policy library . In embodiments the policy library contains a list of what functions each SSE is allowed to perform. Policies may include actions and capabilities controls for different modes of every feature and function of the SSE. For example a policy may say that no application process or task without a certain cryptographic signature may be installed or that once in secure mode no outside commands are allowed except from a list of trusted SSEs.

The system security server may also include a threat library . The threat library contains a list of known threats and a link to an appropriate policy or policies in the policy library . Threats may be known rogue servers applications processes or tasks known to have vulnerabilities or SSEs known to have been compromised. The policy server uses the library to both create an interpret policies.

The system security server may also store and transmit cryptographic data such as cryptographic keys that pertain to the various SSEs served by the server . In embodiments the system security server may include a key that sends cryptographic keys to and responds to queries for keys key material and encipher decipher messages from the SSEs and the policy server. The system security server may include a key storage which may be a database or memory device that contains public and private key pairs including public key storage of SSEs cryptographic one time pads and their ancillary data related to the generation and use of cryptography within the system. The system security server may also include a key policy library that contains policies related to key storage usage and revocation.

It should be noted that the SSE may be part of a more complex network including firewalls routers and switches as illustrated in . Thus one or more SSEs may be used in a normal fashion with other existing networks as illustrated in .

In an embodiment SSEs may operate on desktop operating systems such as Linux or Windows . In another embodiment SSEs may operate on Real time Operating Systems RTOSs .

The various embodiments of the SSE illustrated herein may apply biomorphic algorithms and adaptations. In the context of the various embodiments of the SSE illustrated herein biomorphics refers to the adaptation of each individual SSE over time such that each individual SSE or component becomes probabilistically unique over time to create ideal diversity as a defensive or survival technique against security threats that would otherwise jeopardize a network of devices all of which would be the same. Plus over a period of time each individual SSE may begin to deviate from the initial deployed configuration and the associated initial condition of the SSE the longer the individual SSE is running or the more input the individual SSE receives. This has the effect of making each individual SSE unique so that an attack on one SSE only can compromise that one device and even then only for a short window of time. The SSEs of the various embodiments illustrated herein apply this concept in some novel ways. Biomorphic algorithms and adaptations may be applied in several ways ranging from data storage to address mapping as more fully set forth below.

The SSEs of the various embodiments illustrated herein may store data with an encryption key. However on command or at intervals determined by biomorphic algorithms which may be stored in the SSE the SSE may read the data re encrypt and re store all with a new key. In this fashion the cryptographic key may be constantly changing. Not even an authorized user has knowledge of the key at any given time. Policies on the SSE determine if the SSE can export the key. Thus with the interaction of the system security monitors the SSE can self trigger re keys and re stores based on policy violations such as attempts to access certain files from inappropriate domains.

In embodiments the SSEs may allow configurable mapping between physical and virtual memory within the Isolation Core. While Memory Management Units MMUs in processors can fulfill this function the SSE embodiments herein add an extra layer of mapping as illustrated in .

In one embodiment the protection core may reprogram the MMU from the initial state illustrated in and then remap the memory upon a command policy violation random interval or any directive to the state shown in . When remapping occurs the original memory can be left intact allowing multiple processes to appear to share memory or the SSE can randomize zeroize or encrypt the memory for later decryption when the memory is remapped.

With respect to data manipulation and detection the various SSE embodiments illustrated herein may also transform data to or from a device using keys unique to the individual SSE and insert that data using steganography i.e. writing hidden messages in such a way that no one apart from the sender and intended recipient suspects the existence of the message into various data streams. For example an authenticated user may request that data or commands be uploaded to an authorized SSE or group of SSEs. Encryption may be too processor intensive for small devices however with servers and SSEs all running constantly changing biomorphic algorithms they can scramble data in a way unique to each SSE in such a way as to add a layer of covertness to the data in addition to the protection afforded by cryptography.

As discussed above the system security monitor may provide intrusion prevention through mandatory access control and policy enforcement and detection though attestation and scanning. The security monitor may provide these features through implementation of one or more security monitor policies. As illustrated in an SSE may include a plurality of security monitor policies which may be tiered and may be stored on the SSE in a storage media which may be a database.

Each SSE may have an identifier that is unique from all other SSEs in the system. This ID is distinct from other system or manufacturer s IDs e.g. processor serial numbers etc. .

The SSEs operate in one or more modes which define their current operational policy sets. For example if the user is a firefighter during every day use the mode may be Normal and policies may allow typical personal use of the SSE just if it were any SSE. The SSE may then receive an authenticated command to place it in Emergency mode and a new set of policies would be in effect. These policies may either be stored on the SSE or downloaded as needed. These emergency polices may allow the SSE to only make secure transfers of data to other known SSEs or otherwise limit or restrict the capabilities of the SSE for example.

Each security policy may have a unique ID so that policies may be stored in an efficient manner and shared across modes or linked and referenced in other ways. Data transmissions may also include the policy ID so that nodes in a system of SSEs or other devices know what policy all nodes in the system are operating under.

Each security policy may include policy definitions which are detailed descriptions of which processes applications and resources can access other processes applications and resources. For example it may define what applications processes and tasks can be loaded with which signatures. The definition may specify for instance that data transmission is disabled for an application process or task not signed with a particular key or that virtual address 0x80004000 0x80002000 should map randomly to physical addresses 0x00004000 0x80002000 and 0x00002000 0x00000000 and be zeroized when remapped.

The security policies may also include violation definitions . Each violation definition may include an ID and type of violation which defines the exception types to the policy. For example these may map to the POSIX or C Standard Library errors such as 00234a EFAULT to define an attempt to access a bad address.

Actions definitions define what to do upon levels of violations in the policy. For example the actions may require that after the first violation the event is reported to the policy server and after the second violation the event is reported and the offending application process or task is disabled for five minutes.

The SSE storage media could be flash or other non volatile storage on the device or on a removable media such as a SIM or an SD card.

The policy server may include classes which are sets of policies and the associated data. For example the class may be the operational level normal emergency etc. deployment type field test deployed etc. time of day or some combination of these or other criteria.

The policy server may store SSE IDs and link them to current policies and status such as any known violations. As illustrated differing groups of SSE IDs may have differing policies applied to the individual groups and all SSEs in that particular group. This is not meant as a limitation. For example as group may have a single SSE in that group with a unique set of policies assigned to it.

As previously noted the policy server may also enforce certain rules within these policies by acting as a data proxy or source to the SSEs or to other equipment in the network. For example illustrates a policy based proxy. In this embodiment two SSEs make a request for the same data . The policy server may access the policy records of the uniquely identified SSEs . SSE has no violations of policy and the policy server allows the SSE to access the data in an unaltered form . SSE makes the same request but the policy server after review of the policy records for the SSE determines that SSE is a potential security risk because for example it has failed to report in as specified by its applicable security policy or has reported multiple policy violations recently without inspection by an administrator etc. The policy server therefore may deliver a modified version of the data that is appropriate to the current server side policy associated with the SSE. The various polices may be held in the Policy Library .

In various embodiments the security policies limit the capabilities of SSEs by defining what features functions and resources a SSE can access. Policies are not limited in their definition but in general each entry in a policy may be grouped into the following areas 

Control IO These policy entries may define what devices the SSE can communicate with. For example if a SSE consists of a battery which powers a processor that controls a motor based on sensor data the control IO policy entries can block or allow the processor access to the motor and sensor and define boundaries and low level technical limits for such communication such as address ranges in the hardware and it may contain minimum battery firmware or voltage requirements. Essentially these policy entries are internal to the SSE or SSE operation.

Management IO These entries may define how SSEs communicate to each other and to the management components of a secure SCADA system. For example they may define VPN or other networking settings as well as attestation or encryption requirements to ensure SSEs only communicate to other authorized SSEs.

Limits and definitions These entries may set limits for the SSEs devices such as maximum voltage applied or maximum time between switches of a relay. Such limits may not be built into the firmware of the SSEs but may be important considerations later and may change depending on the situation or environmental factors.

Transitions These entries may define how and under what conditions a security policy becomes active on the SSE. For example a policy may not surrender control to a different policy unless the SSE attempts to apply a newer or higher priority policy or may accept a command to change policy only from a certain policy server etc.

In embodiments only one security policy is active at any one time on a SSE. As previously indicated SSEs obtain policies from a policy server but they can also obtain them virally from other SSEs. Many SSEs are small devices that have no direct communication with the policy server but are instead part of a mesh or ad hoc network. The policy server may still reach these SSEs by updating a global policy and then any SSE that communicates with an updated SSE may receive and apply the update. In embodiments commands to change which policy is in effect can come from anywhere and can be spread through the same viral mechanism as the policies themselves.

The protection core may provide and enforce strong separation between trusted and untrusted elements and may provide an execution framework for high robustness elements of the secure SCADA system architecture on the SSE. In embodiments the protection core works by securely isolating elements into individual isolation contexts. The protection core may have complete and sole control of the underlying hardware and may be the only software running in privileged mode in the OS kernel. Each context partitions and multiplexes this hardware between any other software on the SSE system as required from high level OSs down to individual applications and drivers. Benefits of this architecture include 

A very small trusted computing base in the intermediate isolation cores functions to ease certification and limit opportunities for malicious code exploitation 

Unmodified deployment of existing off the shelf open OSs and software stacks in their own isolated contexts 

Defense against malware and security among contexts through isolation and use of restricted inter context communications IPC APIs 

To the extent that software patches need to be installed they may originate from a system security server. Upon download to the SSE they may be signed and authenticated by the SSE and subsequently approved and validated by the system security.

A SSE may also be capable of receiving media using different protocols for example the The Secure Real time Transport Protocol or SRTP .

Each communicating system entity i.e. applications processes or remote systems may be identified by an entity identifier that is unique within the domain of the SSE or the secure SCADA network to which the system entity is connected. For example applications processes and tasks must each have unique IDs but high side subsystems may also each have unique IDs within the SSE if they communicate to other subsystems on the SSE or within the entire system if they communicate outside the SSE. Identities may be formed from combinations of other identities in a hierarchical fashion as long as uniqueness is not compromised.

In embodiments the secure SCADA system supports Advanced Encryption Standard AES per FIPS PUB 197 with keys sizes of 128 192 and 256 bits. However this is not meant as a limitation. Other encryption capabilities may also be supported if needed.

The secure SCADA system may also employ the Ephemeral Unified Model and the One Pass Diffie Hellman referred to as ECDH NIST Special Publication 800 56A using the curves with 256 and 384 bit prime moduli for cryptographic key exchange. For digital signatures the SSE may support Elliptic Curve Digital Signature Algorithm ECDSA per FIPS PUB 186 3 using the curves with 256 and 384 bit prime moduli . Further the SSE may implement Secure Hash Algorithm SHA per FIPS PUB 180 3 using SHA 256 and SHA 384 . Additionally the secure SCADA system may be configured to generate key pairs emit public key components and store or derive previously used key pairs securely.

Embodiment methods and systems for providing a secure SCADA system may utilize any of the features disclosed in commonly owned U.S. patent application Ser. No. 13 323 340 filed Dec. 12 2011 by ner et al. entitled Systems and Methods for Enhanced Security in Wireless Communication the entire contents of which is incorporated herein by reference. Furthermore various components of the secure SCADA system including secure SCADA elements SSEs may utilize a secure operating system kernel as disclosed in commonly owned U.S. patent application Ser. No. 13 315 531 filed Dec. 9 20011 by ner et al. entitled Systems and Methods for Providing a Computing Device Having a Secure Operating System Kernel the entire contents of which is incorporated herein by reference.

A system and method for establishing a secure SCADA system has now been illustrated. It will be apparent to those of ordinary skill in the art that other embodiments and architectures may be implemented without departing from the scope of the inventions as illustrated.

The foregoing method descriptions and diagrams are provided merely as illustrative examples and are not intended to require or imply that the steps of the various embodiments must be performed in the order presented. As will be appreciated by one of skill in the art the order of steps in the foregoing embodiments may be performed in any order. Words such as thereafter then next etc. are not intended to limit the order of the steps these words are simply used to guide the reader through the description of the methods. Further any reference to claim elements in the singular for example using the articles a an or the is not to be construed as limiting the element to the singular.

The various illustrative logical blocks modules circuits and algorithm steps described in connection with the embodiments disclosed herein may be implemented as electronic hardware computer software or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules circuits and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention.

The hardware used to implement the various illustrative logics logical blocks modules and circuits described in connection with the aspects disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration. Alternatively some steps or methods may be performed by circuitry that is specific to a given function.

In one or more exemplary aspects the functions described may be implemented in hardware software firmware or any combination thereof. If implemented in software the functions may be stored on or transmitted over as one or more instructions or code on a computer readable medium. The steps of a method or algorithm disclosed herein may be embodied in a processor executable software module executed which may reside on a computer readable medium. Computer readable media includes both computer storage media and communication media including any medium that facilitates transfer of a computer program from one place to another. A storage media may be any available media that may be accessed by a computer. By way of example and not limitation such computer readable media may comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium that may be used to carry or store desired program code in the form of instructions or data structures and that may be accessed by a computer. Also any connection is properly termed a computer readable medium. For example if the software is transmitted from a website server or other remote source using a coaxial cable fiber optic cable twisted pair digital subscriber line DSL or wireless technologies such as infrared radio and microwave then the coaxial cable fiber optic cable twisted pair DSL or wireless technologies such as infrared radio and microwave are included in the definition of medium. Disk and disc as used herein includes compact disc CD laser disc optical disc digital versatile disc DVD floppy disk and blu ray disc where disks usually reproduce data magnetically while discs reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer readable media. Additionally the operations of a method or algorithm may reside as one or any combination or set of codes and or instructions on a machine readable medium and or computer readable medium which may be incorporated into a computer program product.

The preceding description of the disclosed embodiments is provided to enable any person skilled in the art to make or use the present invention. Various modifications to these embodiments will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other embodiments without departing from the spirit or scope of the invention. Thus the present invention is not intended to be limited to the embodiments shown herein but is to be accorded the widest scope consistent with the following claims and the principles and novel features disclosed herein.

