---

title: Render-assisted compression for remote graphics
abstract: A technique for efficiently compressing rendered three-dimensional images in a remote rendering system adds a novel render-assisted prediction function to an existing video compression framework, such as the standard H.264/5 framework. Auxiliary rendering information is separated from rendering information used to describe a reference image by a server system. A client system may alter the auxiliary data and generate a new image based on the reference image and rendered scene information from the auxiliary data without creating additional network bandwidth or server workload.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09576340&OS=09576340&RS=09576340
owner: NVIDIA Corporation
number: 09576340
owner_city: Santa Clara
owner_country: US
publication_date: 20121226
---
This application claims benefit of U.S. provisional patent application Ser. No. 61 667 430 filed Jul. 30 2012 which is hereby incorporated herein by reference.

The present invention generally relates to computer graphics and more specifically to render assisted compression for remote graphics.

Remote rendering is a technique for rendering graphics images on a server and transmitting the images to a client device via an intervening data network. Multiple servers may operate from a controlled machine room environment to provide highly reliable service to many different client devices. Each server may be a relatively high end computing platform with high performance CPUs and GPUs fast access to large arrays of on line storage and high speed local networking to other servers that may be for example participants in a distributed application. Each server is typically configured to provide significantly more processing storage and internetworking capacity than a typical client device while each client device is configured to provide networking connectivity certain graphics functions and a display system. A client device may be portable or mobile and provide a highly convenient user experience.

In one conventional remote rendering technique a server renders both a high quality image and a low quality image for each frame and transmits a difference image for the frame. A client device renders just the low quality image and uses the difference image to reconstruct a high quality image. In certain scenarios and for certain specific frames this technique requires less network bandwidth than simply transmitting a conventionally compressed high quality image. In some scenarios the client device requires more power to perform image reconstruction on a certain frame than conventional image decompression requires for the same frame. One significant disadvantage of this technique is that little advantage is gained if any relative to conventionally compressing and transmitting each frame.

Other techniques involve image warping and spatial and temporal up sampling of transmitted data. However these techniques conventionally require explicit application level control of processing limiting general applicability.

As the foregoing illustrates what is needed in the art is an efficient technique for remote rendering.

One embodiment of the present invention sets forth a method for transmitting rendered images to a remote client device the method comprising rendering one or more server rendering elements to generate a reference image rendering one or more client rendering elements to generate a client auxiliary image compressing the reference image and the client auxiliary image or the reference image and auxiliary data to generate compressed client data and transmitting the compressed client data to the remote client device for display.

Other embodiments of the present invention include without limitation a computer readable storage medium including instructions that when executed by a processing unit cause the processing unit to perform the techniques described herein as well as a computing device that includes a processing unit configured to perform the techniques described herein.

One advantage of the disclosed technique is that it improves compression rates in a remote rendering system. A second advantage is that the technique may be implemented to be backwards compatible with existing video compression techniques. A third advantage is that client side rendering of certain frames or certain portions of frames reduces server workloads and enables greater server scalability.

In the following description numerous specific details are set forth to provide a more thorough understanding of the present invention. However it will be apparent to one of skill in the art that the present invention may be practiced without one or more of these specific details.

A switch provides connections between I O bridge and other components such as a network adapter and various add in cards and . Other components not explicitly shown including universal serial bus USB or other port connections compact disc CD drives digital versatile disc DVD drives film recording devices and the like may also be connected to I O bridge . The various communication paths shown in including the specifically named communication paths and may be implemented using any suitable protocols such as PCI Express AGP Accelerated Graphics Port HyperTransport or any other bus or point to point communication protocol s and connections between different devices may use different protocols as is known in the art.

In one embodiment the parallel processing subsystem incorporates circuitry optimized for graphics and video processing including for example video output circuitry and constitutes a graphics processing unit GPU . In another embodiment the parallel processing subsystem incorporates circuitry optimized for general purpose processing while preserving the underlying computational architecture described in greater detail herein. In yet another embodiment the parallel processing subsystem may be integrated with one or more other system elements in a single subsystem such as joining the memory bridge CPU and I O bridge to form a system on chip SoC .

It will be appreciated that the system shown herein is illustrative and that variations and modifications are possible. The connection topology including the number and arrangement of bridges the number of CPUs and the number of parallel processing subsystems may be modified as desired. For instance in some embodiments system memory is connected to CPU directly rather than through a bridge and other devices communicate with system memory via memory bridge and CPU . In other alternative topologies parallel processing subsystem is connected to I O bridge or directly to CPU rather than to memory bridge . In still other embodiments I O bridge and memory bridge might be integrated into a single chip instead of existing as one or more discrete devices. Large embodiments may include two or more CPUs and two or more parallel processing subsystems . The particular components shown herein are optional for instance any number of add in cards or peripheral devices might be supported. In some embodiments switch is eliminated and network adapter and add in cards connect directly to I O bridge .

Referring again to as well as in some embodiments some or all of PPUs in parallel processing subsystem are graphics processors with rendering pipelines that can be configured to perform various operations related to generating pixel data from graphics data supplied by CPU and or system memory via memory bridge and the second communication path interacting with local parallel processing memory which can be used as graphics memory including e.g. a conventional frame buffer to store and update pixel data delivering pixel data to display device and the like. In some embodiments parallel processing subsystem may include one or more PPUs that operate as graphics processors and one or more other PPUs that are used for general purpose computations. The PPUs may be identical or different and each PPU may have one or more dedicated parallel processing memory device s or no dedicated parallel processing memory device s . One or more PPUs in parallel processing subsystem may output data to display device or each PPU in parallel processing subsystem may output data to one or more display devices .

In operation CPU is the master processor of computer system controlling and coordinating operations of other system components. In particular CPU issues commands that control the operation of PPUs . In some embodiments CPU writes a stream of commands for each PPU to a data structure not explicitly shown in either or that may be located in system memory parallel processing memory or another storage location accessible to both CPU and PPU . A pointer to each data structure is written to a pushbuffer to initiate processing of the stream of commands in the data structure. The PPU reads command streams from one or more pushbuffers and then executes commands asynchronously relative to the operation of CPU . Execution priorities may be specified for each pushbuffer by an application program via the device driver to control scheduling of the different pushbuffers.

Referring back now to as well as each PPU includes an I O input output unit that communicates with the rest of computer system via communication path which connects to memory bridge or in one alternative embodiment directly to CPU . The connection of PPU to the rest of computer system may also be varied. In some embodiments parallel processing subsystem is implemented as an add in card that can be inserted into an expansion slot of computer system . In other embodiments a PPU can be integrated on a single chip with a bus bridge such as memory bridge or I O bridge . In still other embodiments some or all elements of PPU may be integrated on a single chip with CPU .

In one embodiment communication path is a PCI Express link in which dedicated lanes are allocated to each PPU as is known in the art. Other communication paths may also be used. An I O unit generates packets or other signals for transmission on communication path and also receives all incoming packets or other signals from communication path directing the incoming packets to appropriate components of PPU . For example commands related to processing tasks may be directed to a host interface while commands related to memory operations e.g. reading from or writing to parallel processing memory may be directed to a memory crossbar unit . Host interface reads each pushbuffer and outputs the command stream stored in the pushbuffer to a front end .

Each PPU advantageously implements a highly parallel processing architecture. As shown in detail PPU includes a processing cluster array that includes a number C of general processing clusters GPCs where C 1. Each GPC is capable of executing a large number e.g. hundreds or thousands of threads concurrently where each thread is an instance of a program. In various applications different GPCs may be allocated for processing different types of programs or for performing different types of computations. The allocation of GPCs may vary dependent on the workload arising for each type of program or computation.

GPCs receive processing tasks to be executed from a work distribution unit within a task work unit . The work distribution unit receives pointers to processing tasks that are encoded as task metadata TMD and stored in memory. The pointers to TMDs are included in the command stream that is stored as a pushbuffer and received by the front end unit from the host interface . Processing tasks that may be encoded as TMDs include indices of data to be processed as well as state parameters and commands defining how the data is to be processed e.g. what program is to be executed . The task work unit receives tasks from the front end and ensures that GPCs are configured to a valid state before the processing specified by each one of the TMDs is initiated. A priority may be specified for each TMD that is used to schedule execution of the processing task. Processing tasks can also be received from the processing cluster array . Optionally the TMD can include a parameter that controls whether the TMD is added to the head or the tail for a list of processing tasks or list of pointers to the processing tasks thereby providing another level of control over priority.

Memory interface includes a number D of partition units that are each directly coupled to a portion of parallel processing memory where D . As shown the number of partition units generally equals the number of dynamic random access memory DRAM . In other embodiments the number of partition units may not equal the number of memory devices. Persons of ordinary skill in the art will appreciate that DRAM may be replaced with other suitable storage devices and can be of generally conventional design. A detailed description is therefore omitted. Render targets such as frame buffers or texture maps may be stored across DRAMs allowing partition units to write portions of each render target in parallel to efficiently use the available bandwidth of parallel processing memory .

Any one of GPCs may process data to be written to any of the DRAMs within parallel processing memory . Crossbar unit is configured to route the output of each GPC to the input of any partition unit or to another GPC for further processing. GPCs communicate with memory interface through crossbar unit to read from or write to various external memory devices. In one embodiment crossbar unit has a connection to memory interface to communicate with I O unit as well as a connection to local parallel processing memory thereby enabling the processing cores within the different GPCs to communicate with system memory or other memory that is not local to PPU . In the embodiment shown in crossbar unit is directly connected with I O unit . Crossbar unit may use virtual channels to separate traffic streams between the GPCs and partition units .

Again GPCs can be programmed to execute processing tasks relating to a wide variety of applications including but not limited to linear and nonlinear data transforms filtering of video and or audio data modeling operations e.g. applying laws of physics to determine position velocity and other attributes of objects image rendering operations e.g. tessellation shader vertex shader geometry shader and or pixel shader programs and so on. PPUs may transfer data from system memory and or local parallel processing memories into internal on chip memory process the data and write result data back to system memory and or local parallel processing memories where such data can be accessed by other system components including CPU or another parallel processing subsystem .

A PPU may be provided with any amount of local parallel processing memory including no local memory and may use local memory and system memory in any combination. For instance a PPU can be a graphics processor in a unified memory architecture UMA embodiment. In such embodiments little or no dedicated graphics parallel processing memory would be provided and PPU would use system memory exclusively or almost exclusively. In UMA embodiments a PPU may be integrated into a bridge chip or processor chip or provided as a discrete chip with a high speed link e.g. PCI Express connecting the PPU to system memory via a bridge chip or other communication means.

As noted above any number of PPUs can be included in a parallel processing subsystem . For instance multiple PPUs can be provided on a single add in card or multiple add in cards can be connected to communication path or one or more of PPUs can be integrated into a bridge chip. PPUs in a multi PPU system may be identical to or different from one another. For instance different PPUs might have different numbers of processing cores different amounts of local parallel processing memory and so on. Where multiple PPUs are present those PPUs may be operated in parallel to process data at a higher throughput than is possible with a single PPU . Systems incorporating one or more PPUs may be implemented in a variety of configurations and form factors including desktop laptop or handheld personal computers servers workstations game consoles embedded systems and the like.

Multiple processing tasks may be executed concurrently on the GPCs and a processing task may generate one or more child processing tasks during execution. The task work unit receives the tasks and dynamically schedules the processing tasks and child processing tasks for execution by the GPCs .

Operation of GPC is advantageously controlled via a pipeline manager not shown that distributes processing tasks to one or more streaming multiprocessors SMs where each SM configured to process one or more thread groups. Each SM includes an instruction L1 cache that is configured to receive instructions and constants from memory via an L1.5 cache not shown within the GPC . A warp scheduler and instruction unit receives instructions and constants from the instruction L1 cache and controls local register file and SM functional units according to the instructions and constants. The SM functional units include N exec execution or processing units and P load store units LSU . The SM functional units may be pipelined allowing a new instruction to be issued before a previous instruction has finished as is known in the art. Any combination of functional execution units may be provided. In one embodiment the functional units support a variety of operations including integer and floating point arithmetic e.g. addition and multiplication comparison operations Boolean operations AND OR XOR bit shifting and computation of various algebraic functions e.g. planar interpolation trigonometric exponential and logarithmic functions etc. and the same functional unit hardware can be leveraged to perform different operations.

The series of instructions transmitted to a particular GPC constitutes a thread as previously defined herein and the collection of a certain number of concurrently executing threads across the parallel processing engines not shown within an SM is referred to herein as a warp or thread group. As used herein a thread group refers to a group of threads concurrently executing the same program on different input data with one thread of the group being assigned to a different processing engine within an SM . A thread group may include fewer threads than the number of processing engines within the SM in which case some processing engines will be idle during cycles when that thread group is being processed. A thread group may also include more threads than the number of processing engines within the SM in which case processing will take place over consecutive clock cycles. Since each SM can support up to G thread groups concurrently it follows that a system that in a GPC that includes M streaming multiprocessors up to G M thread groups can be executing in GPC at any given time.

Additionally a plurality of related thread groups may be active in different phases of execution at the same time within an SM . This collection of thread groups is referred to herein as a cooperative thread array CTA or thread array. The size of a particular CTA is equal to m k where k is the number of concurrently executing threads in a thread group and is typically an integer multiple of the number of parallel processing engines within the SM and m is the number of thread groups simultaneously active within the SM . The size of a CTA is generally determined by the programmer and the amount of hardware resources such as memory or registers available to the CTA.

In embodiments of the present invention it is desirable to use PPU or other processor s of a computing system to execute general purpose computations using thread arrays. Each thread in the thread array is assigned a unique thread identifier thread ID that is accessible to the thread during the thread s execution. The thread ID which can be defined as a one dimensional or multi dimensional numerical value controls various aspects of the thread s processing behavior. For instance a thread ID may be used to determine which portion of the input data set a thread is to process and or to determine which portion of an output data set a thread is to produce or write.

A sequence of per thread instructions may include at least one instruction that defines a cooperative behavior between the representative thread and one or more other threads of the thread array. For example the sequence of per thread instructions might include an instruction to suspend execution of operations for the representative thread at a particular point in the sequence until such time as one or more of the other threads reach that particular point an instruction for the representative thread to store data in a shared memory to which one or more of the other threads have access an instruction for the representative thread to atomically read and update data stored in a shared memory to which one or more of the other threads have access based on their thread IDs or the like. The CTA program can also include an instruction to compute an address in the shared memory from which data is to be read with the address being a function of thread ID. By defining suitable functions and providing synchronization techniques data can be written to a given location in shared memory by one thread of a CTA and read from that location by a different thread of the same CTA in a predictable manner. Consequently any desired pattern of data sharing among threads can be supported and any thread in a CTA can share data with any other thread in the same CTA. The extent if any of data sharing among threads of a CTA is determined by the CTA program thus it is to be understood that in a particular application that uses CTAs the threads of a CTA might or might not actually share data with each other depending on the CTA program and the terms CTA and thread array are used synonymously herein.

SM provides on chip internal data storage with different levels of accessibility. Special registers not shown are readable but not writeable by LSU and are used to store parameters defining each thread s position. In one embodiment special registers include one register per thread or per exec unit within SM that stores a thread ID each thread ID register is accessible only by a respective one of the exec unit . Special registers may also include additional registers readable by all threads that execute the same processing task represented by a TMD or by all LSUs that store a CTA identifier the CTA dimensions the dimensions of a grid to which the CTA belongs or queue position if the TMD encodes a queue task instead of a grid task and an identifier of the TMD to which the CTA is assigned.

If the TMD is a grid TMD execution of the TMD causes a fixed number of CTAs to be launched and executed to process the fixed amount of data stored in the queue . The number of CTAs is specified as the product of the grid width height and depth. The fixed amount of data may be stored in the TMD or the TMD may store a pointer to the data that will be processed by the CTAs. The TMD also stores a starting address of the program that is executed by the CTAs.

If the TMD is a queue TMD then a queue feature of the TMD is used meaning that the amount of data to be processed is not necessarily fixed. Queue entries store data for processing by the CTAs assigned to the TMD . The queue entries may also represent a child task that is generated by another TMD during execution of a thread thereby providing nested parallelism. Typically execution of the thread or CTA that includes the thread is suspended until execution of the child task completes. The queue may be stored in the TMD or separately from the TMD in which case the TMD stores a queue pointer to the queue. Advantageously data generated by the child task may be written to the queue while the TMD representing the child task is executing. The queue may be implemented as a circular queue so that the total amount of data is not limited to the size of the queue.

CTAs that belong to a grid have implicit grid width height and depth parameters indicating the position of the respective CTA within the grid. Special registers are written during initialization in response to commands received via front end from device driver and do not change during execution of a processing task. The front end schedules each processing task for execution. Each CTA is associated with a specific TMD for concurrent execution of one or more tasks. Additionally a single GPC may execute multiple tasks concurrently.

A parameter memory not shown stores runtime parameters constants that can be read but not written by any thread within the same CTA or any LSU . In one embodiment device driver provides parameters to the parameter memory before directing SM to begin execution of a task that uses these parameters. Any thread within any CTA or any exec unit within SM can access global memory through a memory interface . Portions of global memory may be stored in the L1 cache .

Local register file is used by each thread as scratch space each register is allocated for the exclusive use of one thread and data in any of local register file is accessible only to the thread to which the register is allocated. Local register file can be implemented as a register file that is physically or logically divided into P lanes each having some number of entries where each entry might store e.g. a 32 bit word . One lane is assigned to each of the N exec units and P load store units LSU and corresponding entries in different lanes can be populated with data for different threads executing the same program to facilitate SIMD execution. Different portions of the lanes can be allocated to different ones of the G concurrent thread groups so that a given entry in the local register file is accessible only to a particular thread. In one embodiment certain entries within the local register file are reserved for storing thread identifiers implementing one of the special registers. Additionally a uniform L1 cache stores uniform or constant values for each lane of the N exec units and P load store units LSU .

Shared memory is accessible to threads within a single CTA in other words any location in shared memory is accessible to any thread within the same CTA or to any processing engine within SM . Shared memory can be implemented as a shared register file or shared on chip cache memory with an interconnect that allows any processing engine to read from or write to any location in the shared memory. In other embodiments shared state space might map onto a per CTA region of off chip memory and be cached in L1 cache . The parameter memory can be implemented as a designated section within the same shared register file or shared cache memory that implements shared memory or as a separate shared register file or on chip cache memory to which the LSUs have read only access. In one embodiment the area that implements the parameter memory is also used to store the CTA ID and task ID as well as CTA and grid dimensions or queue position implementing portions of the special registers. Each LSU in SM is coupled to a unified address mapping unit that converts an address provided for load and store instructions that are specified in a unified memory space into an address in each distinct memory space. Consequently an instruction may be used to access any of the local shared or global memory spaces by specifying an address in the unified memory space.

The L1 cache in each SM can be used to cache private per thread local data and also per application global data. In some embodiments the per CTA shared data may be cached in the L1 cache . The LSUs are coupled to the shared memory and the L1 cache via a memory and cache interconnect .

It will be appreciated that the core architecture described herein is illustrative and that variations and modifications are possible. Any number of processing units e.g. SMs may be included within a GPC . Further as shown in a PPU may include any number of GPCs that are advantageously functionally similar to one another so that execution behavior does not depend on which GPC receives a particular processing task. Further each GPC advantageously operates independently of other GPCs using separate and distinct processing units L1 caches to execute tasks for one or more application programs.

Persons of ordinary skill in the art will understand that the architecture described in in no way limits the scope of the present invention and that the techniques taught herein may be implemented on any properly configured processing unit including without limitation one or more CPUs one or more multi core CPUs one or more PPUs one or more GPCs one or more graphics or special purpose processing units or the like without departing the scope of the present invention.

Data assembler processing unit collects vertex data for high order surfaces primitives and the like and outputs the vertex data including the vertex attributes to vertex processing unit . Vertex processing unit is a programmable execution unit that is configured to execute vertex shader programs lighting and transforming vertex data as specified by the vertex shader programs. For example vertex processing unit may be programmed to transform the vertex data from an object based coordinate representation object space to an alternatively based coordinate system such as world space or normalized device coordinates NDC space. Vertex processing unit may read data that is stored in L1 cache parallel processing memory or system memory by data assembler for use in processing the vertex data.

Primitive assembler receives vertex attributes from vertex processing unit reading stored vertex attributes as needed and constructs graphics primitives for processing by geometry processing unit . Graphics primitives include triangles line segments points and the like. Geometry processing unit is a programmable execution unit that is configured to execute geometry shader programs transforming graphics primitives received from primitive assembler as specified by the geometry shader programs. For example geometry processing unit may be programmed to subdivide the graphics primitives into one or more new graphics primitives and calculate parameters such as plane equation coefficients that are used to rasterize the new graphics primitives.

In some embodiments geometry processing unit may also add or delete elements in the geometry stream. Geometry processing unit outputs the parameters and vertices specifying new graphics primitives to a viewport scale cull and clip unit . Geometry processing unit may read data that is stored in parallel processing memory or system memory for use in processing the geometry data. Viewport scale cull and clip unit performs clipping culling and viewport scaling and outputs processed graphics primitives to a rasterizer .

Rasterizer scan converts the new graphics primitives and outputs fragments and coverage data to fragment processing unit . Additionally rasterizer may be configured to perform z culling and other z based optimizations.

Fragment processing unit is a programmable execution unit that is configured to execute fragment shader programs transforming fragments received from rasterizer as specified by the fragment shader programs. For example fragment processing unit may be programmed to perform operations such as perspective correction texture mapping shading blending and the like to produce shaded fragments that are output to CROP unit . Fragment processing unit may read data that is stored in parallel processing memory or system memory for use in processing the fragment data. Fragments may be shaded at pixel sample or other granularity depending on the programmed sampling rate.

CROP unit is a processing unit that performs raster operations such as stencil z test blending and the like and outputs pixel data as processed graphics data for storage in graphics memory. The processed graphics data may be stored in graphics memory e.g. parallel processing memory and or system memory for display on display device or for further processing by CPU or parallel processing subsystem . In certain embodiments each pixel comprises multiple color samples. In such embodiments CROP unit is configured to compress z sample data color sample data or any combination thereof that is written to memory and decompress z sample data and color sample data that is read from memory. The goal of this compression technique is not to reduce the size of an image in memory but rather to reduce processing associated with the image by representing all samples for a given pixel by one set of sample values that require processing. In a typical scene a majority of pixels comprise color samples of equal value and this compression technique enables improved processing performance. Multiple color samples are combined to generate an anti aliased pixel within a resulting image for display or further processing. When all color samples associated with a particular pixel are equal in value one color sample is stored for the pixel and status information for the pixel is set to indicate that the samples are compressed. In one embodiment samples associated with a pixel will have equal color when a corresponding fragment fully covers the pixel. Color samples for each pixel within the image may be combined to generate an anti aliased pixel for display.

Server application renders graphics scenes for display by client as output images . Server application maintains a set of geometric objects that represent scene objects as well as related scene information such as textures programmable shaders and the like which may be transmitted to high quality HQ render module via application programming interface API . HQ render module may store certain rendering information such as depth overlay objects such as lens flare effects and the like as auxiliary data in a set of auxiliary buffers . Compression module performs compression operations on auxiliary data to generate compressed auxiliary data . Auxiliary data includes depth information and other information required to complete a final image rendering. Compression module performs compression operations on reference image data and auxiliary data to generate compressed image data . In one embodiment compression module determines which one of potentially several compression techniques provide a highest compression rate on an incremental basis such as on a frame or a macroblock basis. In one embodiment compression module may determine that transmitting a given fully rendered macroblock comprising both reference image data and rendered auxiliary data is more efficient than transmitting the macroblock comprising only reference image data with client providing any remaining rendering passes. In such a case compression module may transmit the macroblock as a fully rendered macroblock. In other embodiments client always provides the remaining rendering passes.

Decompression module operates on compressed auxiliary data to generate auxiliary data for storage within auxiliary buffer . Decompression module operates on compressed image data and auxiliary buffer data to generate local rendering information . In one embodiment auxiliary data comprises an ordered stream of auxiliary data while auxiliary buffer data may be accessed from auxiliary buffer in arbitrary order. Local rendering information is transmitted to HQ render module for final rendering into one or more output images for display. In one embodiment HQ render module is implemented within a graphics processing unit such as graphics processing pipeline of . Similarly HQ render module is implemented in a potentially different graphics processing unit comprising a different implementation of graphics processing pipeline . In one embodiment client application transmits client auxiliary data via API . Client auxiliary data may be used to modify portions or presentation attributes of an output image.

In one embodiment compressed image data conforms semantically to a conventional video encoding framework such as MPEG H.264 5 with an addition of novel prediction modes for macroblock coding disclosed herein. In contrast to conventional prediction modes which work only in image space the disclosed predictor is aware of three dimensional 3D rendered content and performs prediction and rendering based on 3D attributes. Examples of 3D prediction attributes include without limitation scene geometry texture images rendering pass information shader functionality depth buffer information and camera position. Each of these exemplary 3D attributes may be compressed efficiently and streamed in real time. Extraction and transmission of related intermediate rendering data to client may be performed in API for transparent operation with respect to server application . By operating within an H.264 5 framework compressed image data may be generated to be advantageously backwards compatible with conventional decompression modules enabling deployment of diverse client devices coupled to server .

In one embodiment image compression subsystem operates on an input image organized as macroblocks. A particular macroblock comprises a coding unit that includes macroblock pixel data MRGB represented in red green blue color space. Color space conversion unit converts the macroblock pixel data into an intensity chroma YUV space representation MYCbCr . A temporal prediction function spatial prediction function and render assisted prediction function each generated respective prediction data candidates Pt Ps P3D . Residual macroblock data R represents difference information between a current macroblock and a subsequent macroblock. Frequency domain transform module generates a frequency domain representation R of macroblock data R. Quantization module generates a quantized frequency domain representation Rq of the frequency domain representation R based on bandwidth and model controls. The quantized frequency domain representation is transmitted to a frame reconstruction function for generating a local reference frames used for subsequent compression steps. The quantized frequency domain representation is also transmitted to entropy coding module for generating a compressed bit stream included in compressed image data .

In one embodiment optimal residual data selected among the prediction data candidates is performed and P3D data is transmitted to entropy coding module as Pdata for inclusion in compressed bit stream . Persons skilled in the art will recognize that certain 3D graphics data such as geometric information and shader program code are not appropriately compressed via transformation to frequency domain and quantization and therefore require a bypass path to entropy coding module .

In normal operation HQ render module generates a high quality rendering of the frame to generate reference image data which may be compressed by compression module . In the process macroblocks comprising the scene are rendered. Furthermore auxiliary data related to additional rendering passes for a given frame or an alternative representation of the frame may be transmitted to auxiliary buffer . The auxiliary data may apply to all or a subset of the macroblocks. Rendering operations performed by client are directed by the auxiliary data. The auxiliary data may be used by client to perform without limitation depth based image warping spatial temporal spatio temporal up sampling simplified scene rendering. Depth based warping may be performed based on a predictor function that processes previous frame depth buffer information previous frame color buffer information current and previous camera transformation matrices and current frame depth buffer information. Spatial temporal spatio temporal up sampling may be performed using a predictor function that processes a low resolution color buffer ad a high resolution depth buffer or a current low resolution color buffer current high resolution depth buffer a motion buffer and current and previous camera transformation matrices. Simplified scene rendering may be performed based on a predictor function that processes full or simplified scene geometry full or simplified textures and simplified shading passes.

In certain common operating scenarios data packets within network may be delayed corrupted or lost altogether. Such transmission errors may be detected by client . While a packet re try strategy may work for certain types of data this type of strategy is poorly suited to latency sensitive applications such as real time interactive rendering. To gracefully conceal certain common transmission errors that would otherwise degrade image quality client may render one or more frames for display based on scene data that is locally available. In one example depth information transmitted from server to a local auxiliary buffer within client may be used to perform forward warping operations to render one or more sequential frames for display. In doing so frames that would otherwise be impacted by certain transmission errors may be rendered to a high degree of quality based on information that is local to client . In another example geometry information within a local auxiliary buffer may be used to render the one or more sequential frames for display by client . In one embodiment a wireless data network couples client to server . In such an embodiment data corruption and loss is a common occurrence and client should employ concealment strategies such as forward warping.

In one embodiment API intercepts and repurposes API rendering commands transparently with respect to the operation of server application . Because render assisted prediction function operates within the framework of image compression subsystem compression granularity is at the macroblock level. As such only data related to selected macroblocks that need to be updated for a given frame needs to be transmitted to client . And client need only render content or portions of content related to the selected macroblocks.

As shown a method begins in step where a rendering subsystem within the server receives scene data from a new scene via an API such as API . The scene data represents a complete description of a given frame of image data. In one embodiment the rendering subsystem comprises driver and parallel processing subsystem of . The scene data may include without limitation geometric data texture information shader information and information related to different rendering passes. In step the rendering subsystem organizes the scene data to differentiation scene data related to server rendering elements and scene data related to client rendering elements. Each rendering element may comprise an arbitrary element of the scene data. This step is performed transparently within API .

In step the rendering subsystem renders server rendering elements to generate reference image data . In step the rendering subsystem renders client rendering elements such as auxiliary data to generate a client auxiliary image. The client auxiliary image when added to the reference image comprises a complete rendered frame of a given scene. Client may modify auxiliary data and render a new frame for the scene based on a locally rendered client auxiliary image and the reference image. Furthermore Client may modify the reference image via warping operations modify a client auxiliary image regenerate a client auxiliary image based on warping operations or any combination thereof. In this way client may generate one or more additional frames for display without requiring additional network bandwidth or server workload.

In step the rendering subsystem compresses the reference image data and the client auxiliary image or the reference image data and auxiliary data to generate compressed image data and compressed auxiliary data which collectively comprise compressed client data. In one embodiment compressed bit stream of comprises the compressed client data. A given macroblock associated with reference image data may correspond to a coding unit . In step the rendering subsystem causes server to transmit the compressed client data to a client device such as client . The method terminates in step .

Persons skilled in the art will recognize that the above steps may be performed within a plurality of different context on a single server to provide rendering services to a set of corresponding client devices.

As shown a method begins in step where a rendering subsystem within the client device receives compressed client data comprising compressed image data and compressed auxiliary data from a server such as server . In step the rendering subsystem decompresses the compressed client data to generate reference image data and auxiliary data or reference image data and client auxiliary image data. In one embodiment local rendering information comprises decompressed reference image data and local auxiliary data. The local auxiliary data may include an arbitrary combination of auxiliary data and client auxiliary data. In step the rendering subsystem renders a high quality image frame for display as an output image based on the decompressed reference image data the auxiliary data and client auxiliary data . The method terminates in step .

Application may be configured to generate client auxiliary data to provide temporal up sampling such as to generate intervening frames between fully rendered frames generated by server . For example server may be configured to fully render only every other frame of output images with client application generating auxiliary data such as image warping to accommodate camera transforms related to alternate frames which can be rendered locally based on a previous frame of decompressed reference image data. In another example lens flare may be rendered locally on client as a semi transparent overlay on top decompressed reference image data.

In sum a technique is disclosed for efficiently compressing frames of rendered 3D images in a remote rendering system. Scene data that defines a complete 3D image is separated at an API boundary into reference image data and auxiliary data. The reference image data is rendered independently from the auxiliary data. The rendered image data and auxiliary data are compressed within a modified image compression framework such as H.264 5. The modification to a conventional compression framework comprises a render assisted prediction function responsive to 3D information. Auxiliary data is compressed by an entropy coding function to be semantically consistent with compressed reference image data. A client device decompresses reference image data and auxiliary data to render a high quality image. The client device may modify the auxiliary data and re render a different high quality image based in part on the reference image data. The different high quality image may comprise a subsequent frame in a video sequence.

One advantage of the disclosed technique is that it improves compression rates in a remote rendering system. A second advantage is that the technique maybe implemented to be backwards compatible with existing video compression techniques. A third advantage is that client side rendering of certain frames or certain portions of frames reduces server workloads and enables greater server scalability.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof. For example aspects of the present invention may be implemented in hardware or software or in a combination of hardware and software. One embodiment of the invention may be implemented as a program product for use with a computer system. The program s of the program product define functions of the embodiments including the methods described herein and can be contained on a variety of computer readable storage media. Illustrative computer readable storage media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive flash memory ROM chips or any type of solid state non volatile semiconductor memory on which information is permanently stored and ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive or any type of solid state random access semiconductor memory on which alterable information is stored.

The invention has been described above with reference to specific embodiments. Persons of ordinary skill in the art however will understand that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The foregoing description and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

