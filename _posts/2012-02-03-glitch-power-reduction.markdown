---

title: Glitch power reduction
abstract: A method comprises reducing power consumption of an electronic circuit, wherein the electronic circuit comprises at least one logic cone with at least one gate having a single output net, wherein representations of the at least one gate are instances of elements from a standard cell library. Reducing of the power consumption comprises determining an upper bound for dynamic power consumption by calculating transition metrics and power metrics for each gate. Reducing of the power consumption comprises selecting gates with an upper bound for power consumption greater than a predetermined threshold value. For each selected gate, performing operations comprising: testing multiple configurations from the standard cell library for the selected gate by calculating respective upper bound for power consumption for each of the multiple configurations; selecting gate configuration with minimum upper bound for power consumption; and modifying the gate-level design representation according to the selected gate configuration.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08407654&OS=08407654&RS=08407654
owner: International Business Machines Corporation
number: 08407654
owner_city: Armonk
owner_country: US
publication_date: 20120203
---
This application claims priority under 35 U.S.C. 119 from European Patent Application No. EP11155643 filed Feb. 23 2011 the entire contents of which are incorporated herein by reference.

Embodiments relate in general to the field of developing integrated electrical circuits and in particular to a method for reducing power consumption of an electronic circuit and a system for reducing power consumption of an electronic circuit. Still more particularly embodiments relate to a data processing program and a computer program product for reducing power consumption of an electronic circuit.

In CMOS technology glitch power dissipated in combinational circuits owns an important portion of the total dynamic power consumption. Conventional methods for power estimation include called Monte Carlo Simulation MCS . For this technique a digital simulator and information about gate and interconnect delays are necessary. The runtime of MCS is high.

Statistical Methods SM e.g. IMS PE CREST TPS are also extensively investigated techniques. SMs are like one period simulation using a special gate model which requires signal probabilities instead of multi valued logic. It s faster than Monte Carlo simulation. The nature of SM is like a one period digital simulation. Therefore its runtime is still not low enough. In the lack of consideration of correlations the accuracy is also limited. Test cases have shown that especially the estimated power on the nets near the POs may show up to 400 error.

In VLSI design great attention is paid to the power consumption of circuits. Research covers power estimation and power optimization from system to electrical level. The challenge of lower level power estimation is to find a reasonable trade off between computational effort and accuracy of power estimation. For instance the tools based on SMs can estimate the dynamic power of combinational circuits very efficiently. However they all suffer more or less from a poor accuracy. Especially if the dynamic power per net is considered a satisfying accuracy cannot be reached.

In CMOS circuits power is dissipated due to the static leakage current and the dynamic current caused by signal transition. During the signal transition a dynamic current flows through the transistor and charges or discharges the parasitic capacitances. The appropriate power is called dynamic power. It can be modeled according to equation 1 

Wherein V f C and are supply voltage clock frequency net capacitance and signal transition rate respectively. It is obvious that besides scaling down supply voltage and clock frequency one can also reduce the product of transition rate and net capacitance or either of them to reduce dynamic power.

In combinational circuits signals are expected to change at most once in one clock period. However there are almost always unnecessary signal transitions which are called glitches. If the timing conditions such as setup time and hold time of the registers are satisfied the circuit can still work. However the signal transition rate an is increased due to the glitches and therefore more power is consumed by the unnecessary signal transitions. If glitches can be eliminated dynamic power is reduced. Glitches are caused by different arrival times of signals at the inputs of the gate.

Algorithms were proposed to optimize dynamic power consumption. For full custom design power optimization algorithms can result in a glitch free design. A conventional technique is called path balancing. Besides hazard filtering is another technique proposed which can be considered as an extension of path balancing. It shows that it is not necessary to balance the signal path exactly to eliminate the glitches. This technique indicates that the gate inertia can stop not only the generation but also the propagation of glitches. According to hazard filtering a glitch free design needs to satisfy the requirement that the differences of signal arrival times at the inputs of all gates in the circuit must be less than their inertial delays.

Conventional techniques apply a zero delay model in the simulation to reduce the number of events per period since if normal delay model non zero delay model is applied in the simulation lots of events could probably be generated in every clock period to model the circuit behavior. In applying the zero delay model the whole simulation must be shorter obviously because the number of events per period is no more than the number of the gates in the circuit. However the accuracy would be destroyed if no further method would be employed to take care of the glitches.

Some example embodiments include a method for reducing power consumption of an electronic circuit using a gate level design representation wherein the electronic circuit comprises at least one logic cone with at least one gate having a single output net wherein representations of the at least one gate are instances of elements from a standard cell library. The reducing of the power consumption of the electronic circuit comprises determining an upper bound for dynamic power consumption by calculating transition metrics and power metrics for each gate in the electronic circuit. The reducing of the power consumption of the electronic circuit comprises selecting gates with an upper bound for power consumption greater than a predetermined threshold value. For each selected gate performing the following operations. A first operation includes testing multiple configurations from the standard cell library for the selected gate by calculating respective upper bound for power consumption for each of the multiple configurations. A second operation includes selecting gate configuration of the multiple configurations with minimum upper bound for power consumption. A third operation includes modifying the gate level design representation according to the selected gate configuration.

The description that follows includes exemplary systems methods techniques instruction sequences and computer program products that embody techniques of the present inventive subject matter. However it is understood that the described embodiments may be practiced without these specific details. In other instances well known instruction instances protocols structures and techniques have not been shown in detail in order not to obfuscate the description.

Referring to the shown embodiment employs a system for reducing power consumption of an electronic circuit using a gate level design description. Embodiments of such an electronic circuit to evaluate are shown in or and comprise at least one cone with at least one gate X X X X X X having a single output net N N N N N only wherein representations of the at least one gate X X X X X X are instances of elements from a standard cell library.

The shown system for reducing power consumption of an electronic circuit is represented by a computing environment and comprises a user interface for managing I O functions of the system a data storage for storing computer usable program code the standard cell library the gate level design of the electronic circuit synthesized net list parasitic information and data etc. and a data processing engine in electronic communication with the user interface and the data storage . According to some example embodiments the data processing engine determines an upper bound for dynamic power consumption by calculating transition metrics and power metrics for each gate X X X X X X in the electronic circuit and selects gates X with an upper bound for power consumption greater than a predetermined threshold value. For each selected gate X the data processing engine performs following steps Testing all configurations from the standard cell library for the gate X under consideration by calculating respective upper bound for power consumption for each gate configuration selecting gate configuration with minimum upper bound for power consumption and modifying the gate level design representation according to the selected gate configuration.

During the optimization process the data processing engine writes the selected gates here the gate X to a gates to resize list .

Referring to the shown embodiment employs a method for reducing power consumption of an electronic circuit using a gate level design description wherein embodiments of such an electronic circuit to evaluate are shown exemplary in or and comprise at least one cone with at least one gate X X X X X X having a single output net N N N N N only wherein representations of said at least one gate X X X X X X are instances of elements from a standard cell library.

According to some example embodiments in step S the electronic circuit to evaluate is levelized by sorting the gates X X X X X X in the electronic circuit in different levels according to their logic depth and in step S a freezing list is initialized. In step S an upper bound for dynamic power consumption is determined by calculating transition metrics and power metrics for each gate X X X X X X in the electronic circuit. In step S gates here gate X with an upper bound for power consumption greater than a predetermined threshold value are selected and assigned to the gates to resize list . Query S checks if the gates to resize list is empty. If the gates to resize list is empty the method is finished. If the gates to resize list is not empty the first gate X of the gates to resize list is popped in step S. In step S all configurations from the standard cell library for the gate X under consideration is tested by calculating respective upper bound for power consumption for each gate configuration. In step S gate configuration with minimum upper bound for power consumption is selected and the gate level design representation is modified according to the selected gate configuration in step S. In step S the gate X under consideration is added to the freezing list after testing. Query S checks if the gates to resize list is empty. If the gates to resize list is not empty the optimizing process returns to step S. If the gates to resize list is empty a perturbance function is performed in step S. The perturbance function is implemented to prevent the solution from a local optimum and to release randomly some gates frozen in the freezing list after all selected gates are resized. The gates newly pushed into the freezing list are much more likely to be released than the gates that stay in the freezing list for a long time. With the increase of optimization steps the number of gates that are allowed to be released from the freezing list decreases as well. After such a stochastic decision the method returns to step S and a new gates to resize list is determined. The optimization procedure runs until the gates to resize list is empty. If no gates are written to the new gates to resize list because the upper bound for power consumption of all gates X X X X X of the electronic circuit is smaller than the predetermined threshold value an empty gates to resize list is generated and the optimization procedure is finished.

Referring to the exemplary logic AND gate X comprises two input nets A B and only one output net C and has an inertial delay G. Referring to V denotes a voltage waveform at input net A and V denotes a voltage waveform at input net B wherein Vdenotes a supply voltage of the logic AND gate X. I denotes an interval between signal transitions at input net A and input net B. Unnecessary signal transition so called glitches occur when difference of input signal delay I is bigger than the inertial delay G of the corresponding logic gate X. shows the case where the input signal delay I is bigger than the inertial delay G of the corresponding logic gate X and a glitch V occurs at the output net C. shows the case where the input signal delay I is smaller than the inertial delay G of the corresponding logic gate X and no glitch V occurs at the output net C. Occurring Glitches V may propagate through subsequent logic and the problem is aggravating especially for deep logic cones.

Referring to as stated before glitches are caused by the difference of the signal arrival times EAT LAT at the inputs of a gate X. A glitch window T T Tis defined as a region in which glitches can appear. So the glitch window T T Tis the time interval bounded by the earliest and the latest signal arrival time EAT LAT at a net N N N. A first waveform diagram shows a first glitch window Tat the first primary input net N a second waveform diagram shows a second glitch window Tat the second primary input net N and a third waveform diagram shows a third glitch window Tat the output net N.

The margins of the glitch windows T T Tcan be determined by using static timing analysis. However the glitch windows T T T Tdetermined by using delays from static timing analysis can be very pessimistic because the calculation of early mode and late mode of static timing analysis picks only the minimal and maximal delays and corresponding transition times which do not represent most practical cases. In the following a method to calculate the delays in the combinational circuits is proposed which is similar to the static timing analysis.

In static timing analysis the gate delay is modeled by a Look Up Table LUT and the delay calculator uses this LUT and calculates all path delays summing up the delays and arrival times from inputs to outputs. The minimal and maximal arrival times are selected respectively and the corresponding delays and transition times are recorded and passed to the fan out gate simultaneously. In this way the glitch window is always of maximal width and cannot represent most practical cases. Instead of selecting the minimum and maximum from all path delays the delays on the same path are averaged. Then from the averaged path delays the minimal and maximal delays and the corresponding averaged transition times are determined and passed to the fan out gates.

Referring to a first waveform diagram shows a first glitch window Tat the first primary input net N. A second waveform diagram shows a second glitch window Tat the second primary input net N and a third waveform diagram shows a third glitch window Tat the output net N. The first glitch window Tstarts at 0.5 and ends at 1.8 the second glitch window Talso starts at 0.5 and ends at 1.8 and the third glitch window Tstarts at 1 and ends at 2.3 due to the inertial delay G of 0.5 of the logic gate X. The accurate number of signal transitions I II III IV depends on the input patterns the slews of the input signals and the characterization of the logic gates here the logic gate X in the logic cone . To estimate the accurate number of signal transitions is too expensive to afford by the optimization procedure. Therefore the calculation is limited to calculation of the transition metric inside of the corresponding glitch window T T T.

The glitch window T T Tdescribes the difference of arrival times of the input signals at the corresponding gate X wherein a number Nk of signal transitions at the output N of the gate X cannot exceed an upper bound calculated according to equation 2 

Wherein Ni is the number of signal transitions which might occur at input i Tis the glitch window and d is the inertial delay of the gate X. This upper bound consists of two terms. The first term indicates that the number of signal transitions at the output N cannot exceed the sum of signal transitions occurring at all inputs N N. It is determined by summing the previously calculated bounds at the outputs of fan in gates. The second term takes the inertial delay of the gate X in consideration. The minimum of the second margin is one because the nodes in the combinational circuit are supposed to change at least once in one clock period. In the shown embodiment of the logic cone the upper bound of the number of signal transitions is 3 calculated according to equation 2 wherein at the first input net N a first signal transitions occurs at 1.3 and a second signal transition occurs at 1.6 and at the second input net N a first signal transitions occurs at 0.5 and a second signal transition occurs at 1.7. So at each input net N N two signal transitions occur. The third glitch window starts at 1 and ends at 2.3 and the inertial delay of gate X is 0.5.

However inertial delays of the gates are typically not defined in a standard cell library. Instead an averaged path delay is used to approximate the inertial delay. In equation 2 the calculated bound is an integer because the first term is naturally an integer and the fractional part of the second term is truncated. If such a bound is used directly in the optimization it could occur that the glitch window shrinks but the value of this bound stays the same. No difference can be told among different gate sizes. Therefore the truncation operator is omitted and a new quantity is defined. Due to the uncertainty introduced by the averaged path delays a transition metric TM at the output of a gate is defined according to equation 3 

Wherein TM is the transition metric at input i Tis the glitch window and dis the averaged path delay of the corresponding gate. This transition metric represents a modified upper bound of the number of signal transitions at a net.

According to equation 1 dynamic power consumption depends on supply voltage clock frequency net capacitance and transition rate. The supply voltage and clock frequency are regarded as constants in this application. Embodiments of the present invention propose a power metric to denote the dynamic power. The power metric PM at net n is defined by equation 4 PM TM 4 

Combinational circuit can be described as a directed acyclic graph DAG G V E where V is the set of nodes describing gates primary inputs PIs and primary outputs POs and E describes the set of interconnects between gates primary inputs PIs and primary outputs POs . Since the total dynamic power of an electrical circuit should be reduced instead of only glitch power the objective function is defined as the sum of dynamic power in the circuit or dynamic power metric according to formula 5 

Wherein P Ni is the dynamic power or a dynamic power metric of net Ni and n is the total number of nets in the electrical circuit. This objective function can be extended according to formula 6 if leakage power needs to be taken into account by an additional term 

In a semi custom electric circuit design logic gates in a standard cell library are used instead of scaling gates freely. In standard cell libraries the gate size is mapped to a discrete quantity called drive strength. This feature is formulated as a constraint according to formula 7 size PIs POs 7 

Wherein  A  B  C are different drive strengths of the gate Vi. Additionally or alternatively instead of mapping the drive strength as discrete quantity to the gate size a threshold voltage can also be mapped to the gate size as discrete quantity.

Besides the constraint on the gate size timing requirements must also be satisfied i.e. the slacks at primary outputs have to be checked according to formula 8 slack POs slack 8 

Wherein the left hand side of the inequality is the calculated slack and the right hand side is the required slack which must be at least greater than zero.

The optimization problem by using gate sizing is a discrete gate sizing problem. Embodiments of the present invention propose a novel heuristic algorithm based on gate sizing using the power metric defined above. Dynamic power of a net N N N is dependent on the product of the net capacitance and the transition rate. Embodiments of the present invention select gates with high transition metrics at output nets in the electrical circuit investigate all possible sizes of this gate available in the standard cell library and pick the configuration with the lowest total power metric.

An investigation function returns all proper sizes in the standard cell library according to the logic function of the corresponding gate. The returned cell configurations are satisfying the constraints that the maximal load capacitance it can drive must be greater than the required load capacitance. Embodiments of the present invention search for a gate configuration satisfying the timing requirements and dissipating the minimum dynamic power.

Referring to the electrical circuit to evaluate comprises a logic cone with two primary input nets N N one output net N a first logic gate X implemented as AND gate having an inertial delay of 1 a second logic gate X implemented as AND gate having an inertial delay of 1 a third logic gate X implemented as inverter having an inertial delay of 1 a fourth logic gate X implemented as inverter having an inertial delay of 0.5 and a fifth logic gate X implemented as AND gate having an inertial delay of 2. A first primary input net N is also a first input net of the first logic gate X and a first input net of the second logic gate X. A second primary input net N is also a second input net of the first logic gate X and the only output net of the first logic gate X is denoted as N and is also a second input net of the second logic gate X and an input net of the third logic gate X. An only output net of the second logic gate X is denoted with N and is also a first input net of the fifth logic gate X. An only output net of the third logic gate X is denoted with N and is also an input net of the fourth logic gate X. An only output net of the fourth logic gate X is denoted with N and is also a second input net of the fifth logic gate X. The output net N of the logic cone is also the output net of the fifth logic gate X because the fifth logic gate X is also the end of the logic cone .

Referring to and the full circuit calculation is explained. As shown in the logic cone of the electrical circuit is levelized in four levels . The leveling process of the electronic circuit is performed by sorting the logic gates X X X X X X in the electronic circuit in the different levels according to their logic depth. Still referring to the first logic gate X is assigned to a first level the second and third logic gates X X are assigned to a second level the fourth logic gate X is assigned to a third level and the fifth logic gate X is assigned to a fourth level .

Further a static timing analysis tool is used to determine inertial delay of the logic gates X X X X X the earliest and the latest signal arrival times EAT LAT at nets N N N N N N and the capacitance of the nets N N N N N N of the logic gates X X X X X of the logic cone to be evaluated wherein an averaged gate delay is used to approximate the inertial delay of the logic gates X X X X X.

In case of full circuit calculation during a first calculation step a priority queue is initialized with all logic gates of the first level here with the first logic gate X connected with primary input nets N N of the logic cone only as shown by . Further a number of signal transitions at the primary input nets N N are defined as 1. That means that the transition metrics TMN TMN at the primary input nets N N are also defined as 1. The power metrics PMN PMN at the primary input nets N N are calculated by using equation 4 .

During a second calculation step transition metric TMat the output net N of the first logic gate X of the first level is calculated according to equation 3 based on the transition metrics TM TMat the primary input nets N N. Based on the transition metric TMat the output net N of the first logic gate X the power metric PMat the output net N is calculated according to equation 4 . Since the first logic gate X is not the end of the logic cone the fan out gates X X are pushed to the priority queue during the second calculation step.

During a third calculation step transition metric TMat the output net N of the second logic gate X of the second level and transition metric TMat the output net N of the third logic gate X of the second level are calculated according to equation 3 based on transition metric TMat the primary input net N and transition metric TMat the input net N of the second logic gate X and the third logic gate X. Based on the transition metric TMat the output net N of the second logic gate X the power metric PMN at the output net N is calculated according to equation 4 . Based on the transition metric TMat the output net N of the third logic gate X the power metric PMat the output net N is calculated according to equation 4 . Since the second and third logic gates X X are not the end of the logic cone the fan out gates X X are pushed to the priority queue during the third calculation step.

During a fourth calculation step transition metric TMat the output net N of the fourth logic gate X of the third level is calculated according to equation 3 based on the transition metric TMat the input net N of the fourth logic gate X. Based on the transition metric TMat the output net N of the fourth logic gate X the power metric PMat the output net N is calculated according to equation 4 . Since the fourth logic gate X is not the end of the logic cone the fan out gate X is pushed to the priority queue during the fourth calculation step S. Since the fan out gate X is already in the priority queue the former input is overwritten.

During a fifth calculation step transition metric TMN at the output net N of the fifth logic gate X of the fourth level is calculated according to equation 3 based on the transition metrics TM TMat the input nets N N of the fifth logic gate X. Based on the transition metric TMN at the output net N of the fifth logic gate X the power metric PMat the output net N is calculated according to equation 4 . Since the fifth logic gate X is the end of the logic cone no fan out gates are pushed to the priority queue during the fifth calculation step S and the priority queue is empty and the full circuit calculation is finished. The full circuit calculation results may be written to the data storage .

During optimization of the power consumption of the electrical circuit logic gates X X X X X of the electrical circuit shown in may be resized.

Some example embodiments use a corresponding search function to find a set of gates which need to be resized according to the corresponding transition metric. The logic gates owning high transition metrics at output nets are chosen as candidates to resize and written to a gates to resize list because the glitch probability at those nets is high. If a gate near the primary input is resized the impact on other gates is higher than resizing a gate near the primary output. Therefore the optimization starts from the gates with lowest logic depth.

Referring to the fourth logic gate X has dynamic power consumption greater than a predetermined threshold value. So the fourth logic gate X is written to the gates to resize list and an investigation function is used to investigate all available sizes of the candidate gate X one by one in a corresponding loop and each gate in the gates to resize list will be investigated one by one. The influence of the new cell is evaluated by computing the sum of power metrics according to formula 4 or 5 . To calculate the sum of power metric of the logic cone with the resized gate X the increment circuit calculation is performed.

In case of increment circuit calculation during a first calculation step the priority queue is initialized with at least one logic gate here the third logic gate X which fan out gate is directly connected to a fan in gate of the resized gate here the fourth logic gate X . Further transition metrics TM TM TM TMat the nets N N N N not influenced by the resized logic gates here the fourth logic gate X are taken from the results of the full circuit calculation during the first calculation step. Also the corresponding power metrics PM PM PM PMare taken from the results of the full circuit calculation during the first calculation step.

During a second calculation step transition metric TMat the output net N of the third logic gate X of the second level is recalculated according to equation 3 based on transition metric TMat the input net N of the third logic gate X. Based on the transition metric TMat the output net N of the third logic gate X the power metric PMat the output net N is recalculated according to equation 4 . Since the third logic gate X is not the end of the logic cone the fan out gate X is pushed to the priority queue during the second calculation step.

During a third calculation step transition metric TMat the output net N of the resized fourth logic gate X of the third level is recalculated according to equation 3 based on the transition metric TMat the input net N of the resized fourth logic gate X . Based on the transition metric TMat the output net N of the resized fourth logic gate X the power metric PMat the output net N is recalculated according to equation 4 . Since the resized fourth logic gate X is not the end of the logic cone the fan out gate X is pushed to the priority queue during the third calculation step.

During a fourth calculation step transition metric TMat the output net N of the fifth logic gate X of the fourth level is recalculated according to equation 3 based on the transition metrics TM TMat the input nets N N of the fifth logic gate X. Based on the transition metric TMat the output net N of the fifth logic gate X the power metric PMat the output net N is recalculated according to equation 4 . Since the fifth logic gate X is the end of the logic cone no fan out gates are pushed to the priority queue during the fourth calculation step S and the priority queue is empty and the incremented circuit calculation is finished. The incremented circuit calculation results may also be written to the data storage .

If the actual evaluated sum of power metrics is less than an already saved optimum power metric the corresponding gate size and sum of power metrics are recorded as optimum cell and optimum sum of power metrics respectively. The loop continues until all available sizes are tried. After all equivalent cells are investigated the best cell X saved as optimum cell is used and substitutes the current cell X. The resized gate X is pushed into the freezing list by using a freeze function. In the optimization procedure the configuration with the smallest total power metric is chosen and the gate X resized before it is frozen or recorded in the freezing list .

To prevent the solution from a local optimum a perturbance function is introduced which releases some gates frozen in the freezing list randomly after all candidate gates in the gates to resize list are resized. The gates newly pushed into the freezing list are much more likely to be released than the gates that stay in the freezing list for a long time. With the increase of optimization steps the number of gates that are allowed to be released from the freezing list decreases as well. After such a stochastic decision a new gates to resize list is determined. The optimization procedure runs until the gates to resize list is empty.

Referring to the electrical circuit to evaluate comprises a logic cone with two primary input nets N N one output net N and five logic gates X X X X X. The main difference between the logic cone and the logic cone is the resized fourth logic gate X . Because of the resized fourth logic gate X the timing and power behavior of the logic cone is different to the logic cone especially the load capacitance of the third logic gate X and an input slew of the fifth logic gate X are influenced. Still referring to the first logic gate X implemented as AND gate having an inertial delay of 1 and a second logic gate X implemented as AND gate having an inertial delay of 1 are both unchanged due to the resized logic gate X . The inertial delay of the third logic gate X implemented as inverter is changed to 0.5 the inertial delay of the fourth logic gate X implemented as inverter is changed to 1.0 and the inertial delay of the fifth logic gate X implemented as AND gate is changed to 3.0 due to the resized fourth logic gate X .

Example embodiments of reducing power consumption of an electronic circuit can be implemented as an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the present invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

As will be appreciated by one skilled in the art aspects of the present inventive subject matter may be embodied as a system method or computer program product. Accordingly aspects of the present inventive subject matter may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present inventive subject matter may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present inventive subject matter may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present inventive subject matter are described with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the inventive subject matter. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

While the embodiments are described with reference to various implementations and exploitations it will be understood that these embodiments are illustrative and that the scope of the inventive subject matter is not limited to them. In general techniques for movement reduction as described herein may be implemented with facilities consistent with any hardware system or hardware systems. Many variations modifications additions and improvements are possible.

Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the inventive subject matter. In general structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements may fall within the scope of the inventive subject matter.

