---

title: Identification and execution of subsets of a plurality of instructions in a more secure execution environment
abstract: Embodiments of apparatus, computer-implemented methods, systems, devices, and computer-readable media are described herein for identifying and encrypting a subset of a plurality of instructions, for execution in a more secure execution environment. In various embodiments, the subset may include a single entry point and a single exit point. In various embodiments, one or more instructions of the plurality of instructions that precede or follow the subset may be executed in a first execution environment with a first security level. In various embodiments, the subset may be executed in a second execution environment with a second security level that is more secure than the first security level.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09465946&OS=09465946&RS=09465946
owner: Intel Corporation
number: 09465946
owner_city: Santa Clara
owner_country: US
publication_date: 20120601
---
The present application is a national phase entry under 35 U.S.C. 371 of International Application No. PCT US2012 040597 filed Jun. 1 2012 entitled IDENTIFICATION AND EXECUTION OF SUBSETS OF A PLURALITY OF INSTRUCTIONS IN A MORE SECURE EXECUTION ENVIRONMENT which designated among the various States the United States of America. The Specification of the PCT US2012 040597 Application is hereby incorporated by reference.

Embodiments of the present invention relate generally to the technical field of data processing and more particularly to identification and execution of subsets of instructions in a more secure execution environment.

The background description provided herein is for the purpose of generally presenting the context of the disclosure. Work of the presently named inventors to the extent it is described in this background section as well as aspects of the description that may not otherwise qualify as prior art at the time of filing are neither expressly nor impliedly admitted as prior art against the present disclosure. Unless otherwise indicated herein the approaches described in this section are not prior art to the claims in the present disclosure and are not admitted to be prior art by inclusion in this section.

Software piracy and or tampering such as virus or malware are widespread. Conventional anti piracy tampering measures such as code obfuscation encryption and anti debugging techniques have failed to adequately address the problem particularly against the most determined software pirates hackers. More robust anti piracy tampering measures such as hardware keys e.g. one time passwords on key ring dongles while more effective may be inconvenient expensive and or inflexible.

In the following detailed description reference is made to the accompanying drawings which form a part hereof wherein like numerals designate like parts throughout and in which is shown by way of illustration embodiments that may be practiced. It is to be understood that other embodiments may be utilized and structural or logical changes may be made without departing from the scope of the present disclosure. Therefore the following detailed description is not to be taken in a limiting sense and the scope of embodiments is defined by the appended claims and their equivalents.

Various operations may be described as multiple discrete actions or operations in turn in a manner that is most helpful in understanding the claimed subject matter. However the order of description should not be construed as to imply that these operations are necessarily order dependent. In particular these operations may not be performed in the order of presentation. Operations described may be performed in a different order than the described embodiment. Various additional operations may be performed and or described operations may be omitted in additional embodiments.

For the purposes of the present disclosure the phrase A and or B means A B or A and B . For the purposes of the present disclosure the phrase A B and or C means A B C A and B A and C B and C or A B and C .

The description may use the phrases in an embodiment or in embodiments which may each refer to one or more of the same or different embodiments. Furthermore the terms comprising including having and the like as used with respect to embodiments of the present disclosure are synonymous.

As used herein the term module may refer to be part of or include an Application Specific Integrated Circuit ASIC an electronic circuit a processor shared dedicated or group and or memory shared dedicated or group that execute one or more software or firmware programs a combinational logic circuit and or other suitable components that provide the described functionality.

As used herein the term software may include but is not limited to one or more instructions stored on a transitory or non transitory medium that when executed by a computing device enables the computing device to perform various actions. Non limiting examples of software include word processors spreadsheets image manipulation applications games media players email clients web browsers operating systems drivers servers e.g. a web server and so forth.

Referring now to a software developer computing device may be one or more computing devices used by a person or group of persons e.g. a software development firm company independent software vender ISV and so forth to develop software in the form of a plurality of instructions . In various embodiments plurality of instructions may include source code binary instructions assembly code scripting language and or any other type of instructions that may be executed immediately or after some form of preprocessing such as compilation assembly interpretation and so forth.

As shown by the arrow in in various embodiments software developer computing device may provide plurality of instructions to a software distributor computing device . In various embodiments software developer computing device may provide plurality of instructions to software distributor computing device over one or more wired and or wireless communication networks by mailing or otherwise physically transferring a computer readable medium storing plurality of instructions and so forth.

In various embodiments software distributor computing device may host an online application store or other service that distributes software via any medium such as over one or more wired and or wireless communication networks or physically by mailing or otherwise physically transferring computer readable media. In some embodiments software developer computing device and software distributor computing device may be the same computing device or a plurality of computing devices operating in cooperation.

Plurality of instructions may by itself not include sufficient safeguards against software piracy and or tampering. A user may be able to view plurality of instructions either before or during execution. This may allow the user to copy or modify plurality of instructions in an undesirable manner. For instance a user could edit plurality of instructions to remove copyright protection mechanisms. Even if plurality of instructions is in a form not readily readable by humans e.g. object code a determined software pirate may have reverse engineering capabilities. As a further example a hacker may tamper with the instructions.

Accordingly in various embodiments plurality of instructions may be converted e.g. by a software converter to a package with characteristics that prevent reduce the likelihood of and or generally discourage software piracy tampering. In particular groups or subsets of plurality of instructions may be identified extracted and or encrypted and may be stored separately from remaining instructions in plurality of instructions . These subsets of instructions may be configured to be executed in a separate more secure environment that prevents users from accessing the subsets of instructions.

Software converter may be any combination of software and or hardware. In it is shown operating on software distributor computing device . However this is not meant to be limiting and software converter may operate on other computing devices such as software developer computing device . In one embodiment software converter may be a combination of multiple logics each with a separate purpose as will be described below. After conversion by software converter package may include a modified plurality of instructions one or more encrypted subsets and or a dispatcher routine .

Referring to converted package may be distributed to one or more end users for execution on an end user computing device . As will be discussed in more detail below end user computing device may be configured to execute instructions in modified plurality of instructions that preceded or followed a subset in original plurality of instructions in a first execution environment with a first security level. End user computing device may be configured to execute dispatcher routine and subsets in a second execution environment with a second security level that is more secure than the first security level. In various embodiments in second execution environment instructions and the nature of their execution may be hidden from the user. For example instructions executed in second execution environment may be stored in secure memory. Execution of subsets in second execution environment may make it more difficult for a user to copy or reverse engineer these subsets .

Referring back to to convert plurality of instructions to package for distribution software converter may identify extract as indicated by the dashed boxes and corresponding dashed arrows and or encrypt one or more subsets of plurality of instructions that are suitable for execution in second execution environment . Subsets of instructions suitable for execution in second execution environment may be identified based on various criteria. In various embodiments groups of instructions with a single entry point and a single exit point may be suitable for execution in second execution environment . In various embodiments a suitable subset may be a super basic block SBB which may include integer instructions that when executed operate on general purpose registers GPRs such as RAX R15 and parts thereof. In various embodiments subsets may include other types of instructions such as direct jumps. In various embodiments where subsets are relocated to separate e.g. secure memory on end user computing devices e.g. instructions within subsets may reference memory outside of the secure memory in accordance with parameters of the secure environment.

Not all groups of instructions in plurality of instructions may be suitable for execution in second execution environment . For example a group of instructions that will operate on non GPRs such as the reference instruction pointer RIP or the reference stack pointer RSP such as PUSH or POP instructions may not be suitable for execution in the secure environment. Another group of instructions that may not be suitable for execution in a more secure execution environment may be a group of instructions that includes one or more CALL instructions since CALL instructions may require exception handling support and otherwise may increase complexity. In various embodiments groups of instructions suitable for execution in second execution environment may be identified using tools such as PIN tool for dynamic instrumentation of programs provided by the Intel Corporation of Santa Clara Calif.

Various instructions may be added to plurality of instructions to create modified plurality of instructions and or to subset to facilitate redirection between different execution environments. For example one or more instructions to initialize second execution environment may be added to plurality of instructions prior to any subset . An example of this is seen in where an INIT SECURE ENVIRONMENT instruction has been added to modified plurality of instructions near the beginning. In various embodiments such initialization instructions may be inserted before an entry point of modified plurality of instructions .

Additionally instructions may be inserted into plurality of instructions to redirect execution from first execution environment to second execution environment . For instance a group of instructions extracted from plurality of instructions as a subset may be replaced with one or more instructions which may be referred to as trampoline code to redirect execution to second execution environment . An example of this is seen in where each subset has been replaced in modified plurality of instructions with TRAMPOLINE code.

In various embodiments subsets to be executed in second execution environment may be stored separately from modified plurality of instructions . In for instance subsets are packaged with dispatcher routine . As will be described in more detail below TRAMPOLINE instructions may invoke dispatcher routine which in turn may invoke execution of subsets . In some embodiments instructions may be added to subsets to return execution from the subset back to dispatcher routine . For example in a RETURN instruction is inserted at the end of each subset . This may cause execution to return to dispatcher routine after a subset has executed.

If plurality of instructions were executed without first being modified by disclosed methods instructions contained therein would execute within a single execution context. As used herein the term execution context may refer to the context in which instructions are executed and may include various values stored in the GPRs and or FLAGS registers e.g. EFLAGS RFLAGS during execution of the program. Although values stored in these registers may be altered during execution they may be altered in a manner that is presumably controlled by and accounted for by the computer program being executed.

However package may include multiple sets of instructions e.g. modified plurality of instructions and subsets that may be executed in different execution environments. Redirecting execution between different execution environments may alter an execution context in a manner that may not be anticipated by or accounted for in plurality of instructions . This may lead to unpredictable and or erroneous results. Accordingly in various embodiments the execution context may be preserved prior to transitions between execution environments and restored after the transitions.

In various embodiments one or more instructions to preserve the execution context referred to herein as PRESERVE EC may be added e.g. by software converter at various points of package to preserve an execution context prior to redirection of execution from one execution environment to another. In various embodiments a PRESERVE EC instruction may cause a snapshot of the values stored in the GPRs and or FLAGS register to be stored in memory. In a PRESERVE EC instruction has been added to modified plurality of instructions prior to each instance of trampoline code.

PRESERVE EC instructions may also be incorporated into dispatcher routine to preserve an execution context when redirecting execution from second execution environment back to first execution environment . For instance in a PRESERVE EC instruction has been incorporated into dispatcher routine after an instruction to invoke a subset .

After redirection from one execution environment to another the execution context may be restored from the snapshot. In various embodiments RESTORE EC instructions may be inserted into plurality of instructions and or included in dispatcher routine . For instance in a RESTORE EC instruction has been added to modified plurality of instructions following each instance of trampoline code. Similarly a RESTORE EC instruction is included in dispatcher routine just prior to instructions to locate and invoke a particular subset.

In various embodiments the encrypted subsets may be concatenated e.g. by software converter to form concatenated subsets . In various embodiments software converter may generate an index of the concatenated subsets. In various embodiments the index may include an offset associated with at least one of the subsets. In various embodiments this offset may be passed as a parameter to trampoline code that causes redirection to second execution environment . In various embodiments the index may also include a size associated with at least one of the subsets which also may be passed as a parameter to trampoline code. In various embodiments the index may additionally or alternatively include a relative virtual address RVA associated with at least one of the subsets . In various embodiments the RVA may be an address of the subset in original plurality of instructions prior to extraction.

An example of how package may be executed will now be described with reference to . Execution may initiate within first execution environment starting at the beginning of modified plurality of instructions . For instance the INIT SECURE ENVIRONMENT instruction which as noted above may be very near or even before an entry point of modified plurality of instructions may be executed to initiate second execution environment .

Modified plurality of instructions may be executed until a PRESERVE EC instruction is reached. At that point an execution context may be preserved e.g. by taking a snapshot of GPR FLAGS values and storing the values in memory. Following the PRESERVE EC instruction TRAMPOLINE code may redirect execution to second execution environment as shown by arrow A. One or more functions contained in the TRAMPOLINE code such as InvokeSE may receive the preserved execution context as a parameter e.g. as a pointer to memory storing the GPRs FLAGS snapshot . InvokeSE may receive other parameters as well such as an RVA offset and or size of the subset to be invoked.

Execution may then proceed in second execution environment . A RESTORE EC instruction may cause the preserved state of the GPRs FLAGS to be restored from the snapshot. Next the subset to be invoked may be located within concatenated subsets . In various embodiments a LOCATE SUBSET function may receive as input an offset or RVA associated with the subset which may enable dispatcher routine to locate the appropriate subset within concatenated subsets . Once located an INVOKE SUBSET instruction may jump to execution of the instructions contained in the appropriate subset as indicated by arrow B.

As noted above a RETURN instruction may have been inserted at the end of each subset . Once execution of subset reaches this instruction execution may return to dispatcher routine as indicated by arrow C. Next a PRESERVE EC instruction of dispatcher routine may be executed to preserve the execution context. An EXIT SECURE ENVIRONMENT instruction may redirect execution back to first execution environment as indicated by arrow D. After redirection back to first execution environment a RESTORE EC instruction may be executed to restore the state of the GPRs FLAGS that was preserved by dispatcher routine .

The embodiment describe above and shown in has been thus far described in general terms. Specific aspects may be implemented in various ways. For instance in one example embodiment software converter may convert plurality of instructions to package as follows. Logic associated with software converter which may be referred to herein as a snippet finder may search plurality of instructions for subsets suitable for execution in a more secure execution environment. The snippet finder may output a first header file containing a concatenation of all identified subsets with a RETURN instruction inserted in between each subset. The snippet finder may output a second file that includes an index of tuples for each subset. Each tuple may include an RVA and size e.g. in bytes of a subset within the header file containing the concatenated subsets. The snippet finder may output a third file which also may be a header file containing an array of subset descriptors sorted by their RVAs in the original plurality of instructions .

The second file that contains the index may be used as input along with original plurality of instructions by another logic associated with software converter to create modified plurality of instructions . The first and third files containing the concatenated subsets and the array of subset descriptors respectively may be used as input to the same or yet another logic associated with software converter to generate instructions that will be executed within second execution environment including dispatcher routine and the one or more encrypted subsets .

In addition to dispatcher routine and subsets instructions to be executed in second execution environment may also include an initializer routine that performs various operations relating to initialization of second execution environment . For example initializer routine may include one or more instructions to obtain a decryption key e.g. from a user . Initializer routine may also include one or more instructions to decrypt subsets within the more secure execution environment e.g. using a decryption key obtained from a user. In various embodiments initializer routine may be invoked upon initialization of second execution environment .

An example method that may be implemented by software converter is depicted in . It shall be assumed that an end user computing device such as end user computing device has at least a first execution environment e.g. a default execution environment. It should be understood that while the operations of method are shown in a particular order this is not meant to be limiting and the operations may be performed in any other order. Additionally or alternatively one or more of the operations may be added or omitted.

After receiving plurality of instructions as input at block one or more instructions to initialize second execution environment may be added e.g. by software converter to plurality of instructions . At block a group of plurality of instructions may be identified and extracted as a subset . For example groups of instructions with single entry and exit points may be identified and extracted e.g. by being removed from plurality of instructions and stored separately. At block one or more instructions to redirect execution from first execution environment to second execution environment may be added e.g. by software converter to plurality of instructions in place of subset that was extracted at block .

At block one or more instructions to preserve an execution context may be added e.g. by software converter to plurality of instructions e.g. just before the instruction to redirect execution from the first execution environment to the second execution environment. As noted above this may permit execution of the subset of instructions in the second execution environment with the same GPRs FLAGS values available as were available in the first execution environment.

At block one or more instructions to redirect execution from the second execution environment back to the first execution environment may be added e.g. by software converter to dispatcher routine . At block one or more instructions to restore the execution context after transition from the first execution environment to the second execution environment may be added e.g. by software converter to dispatcher routine .

Method continues in . At block one or more instructions to preserve an execution context may be added e.g. by software converter to dispatcher routine e.g. just before an instruction to redirect execution back to the first execution environment. At block one or more instructions to restore an execution context may be added e.g. by software converter to plurality of instructions . This may permit execution of plurality of instructions to resume in the first execution environment with the same GPR FLAGS values available as were available in the second execution environment.

At block the identified and extracted subset may be encrypted. In various embodiments the subset may remain encrypted until executed at an end user computing device. In various embodiments upon execution the subset may be decrypted in secure memory e.g. associated with second execution environment so that the decrypted instructions are not viewable by a user.

More than one subset may be identified extracted and encrypted. For instance for a given computer program e.g. plurality of instructions there may be any number of groups of instructions that may be suitable for execution in a second more secure environment.

An example of this is seen in . Assume that the subset mentioned in relation to blocks is a first subset. At block a second subset may be identified extracted and encrypted in the same way as the first subset was identified extracted and encrypted. In various embodiments at block multiple encrypted subsets such as the first and second subsets may be concatenated. In this manner they may be stored in a single memory block that in some embodiments may be separate from a memory block storing plurality of instructions .

In various embodiments at block an index may be generated e.g. by software converter . As noted above the index may include various information about concatenated subsets such as an RVA and or a size offset associated with at least one of the concatenated subsets.

Depending on its applications computing device may include other components that may or may not be physically and electrically coupled to the PCB . These other components include but are not limited to volatile memory e.g. dynamic random access memory also referred to as DRAM non volatile memory e.g. read only memory also referred to as ROM flash memory a graphics processor a software converter which is shown in as software in DRAM but may also be hardware a digital signal processor not shown a crypto processor not shown an input output I O controller an antenna a display not shown a touch screen display a touch screen controller a battery an audio codec not shown a video codec not shown a global positioning system GPS device a compass an accelerometer not shown a gyroscope not shown a speaker a camera and a mass storage device such as hard disk drive a solid state drive compact disk CD digital versatile disk DVD not shown and so forth. In various embodiments the processor may be integrated on the same die with other components to form a System on Chip SoC .

In various embodiments volatile memory e.g. DRAM non volatile memory e.g. ROM flash memory and the mass storage device may include programming instructions configured to enable computing device in response to execution by processor s to practice all or selected aspects of method e.g. by operating software converter . For example one or more of the memory components such as volatile memory e.g. DRAM non volatile memory e.g. ROM flash memory and the mass storage device may include temporal and or persistent copies of instructions configured to enable computing device to practice disclosed techniques such as all or selected aspects of method .

The communication chip may enable wired and or wireless communications for the transfer of data to and from the computing device . The term wireless and its derivatives may be used to describe circuits devices systems methods techniques communications channels etc. that may communicate data through the use of modulated electromagnetic radiation through a non solid medium. The term does not imply that the associated devices do not contain any wires although in some embodiments they might not. The communication chip may implement any of a number of wireless standards or protocols including but not limited to Wi Fi IEEE 802.11 family WiMAX IEEE 802.16 family IEEE 802.20 Long Term evolution LTE Ev DO HSPA HSDPA HSUPA EDGE GSM. GPRS CDMA. TDMA DECT Bluetooth derivatives thereof as well as any other wireless protocols that are designated as 3G 4G 5G and beyond. The computing device may include a plurality of communication chips . For instance a first communication chip may be dedicated to shorter range wireless communications such as Wi Fi and Bluetooth and a second communication chip may be dedicated to longer range wireless communications such as GPS EDGE GPRS CDMA WiMAX LTE Ev DO and others.

In various embodiments processor or one of its processor cores may be packaged together with software converter . For one embodiment processor or one of its processor cores may be packaged together with software converter to form a System in Package SiP . For one embodiment processor or one of its processor cores may be packaged together with software converter and may be integrated on the same dic. For one embodiment processor or one of its processor cores may be packaged together with software converter to form a System on Chip SoC .

In various implementations the computing device may be a laptop a netbook a notebook an ultrabook a smart phone a computing tablet a personal digital assistant PDA an ultra mobile PC a mobile phone a desktop computer a server a printer a scanner a monitor a set top box an entertainment control unit e.g. a gaming console a digital camera a portable music player or a digital video recorder. In further implementations the computing device may be any other electronic device that processes data.

Embodiments of apparatus computer implemented methods systems devices and computer readable media transitory and non transitory are described herein for identifying and encrypting a subset of a plurality of instructions. In various embodiments the subset may include a single entry point and a single exit point. In various embodiments one or more instructions of the plurality of instructions that precede or follow the subset may be executed in a first execution environment with a first security level. In various embodiments the subset may be executed in a second execution environment with a second security level that is more secure than the first security level.

In various embodiments one or more instructions to return execution from the second execution environment to the first execution environment may be associated with the subset. In various embodiments one or more instructions to initialize the second execution environment may be added to the plurality of instructions before the subset. In various embodiments one or more instructions to preserve an execution context prior to redirection of execution from the first execution environment to the second execution environment may be added to the plurality of instructions. In various embodiments one or more instructions to restore the execution context after execution returns to the first execution environment from the second execution environment may be added.

In various embodiments the subset may be a first subset. In various embodiments a second subset may be identified and encrypted. In various embodiments the first and second subsets may be concatenated. In various embodiments an index of the concatenated first and second subsets may be generated. In various embodiments the index may include a relative virtual address offset and or size associated with at least one of the first and second subsets.

In various embodiments a dispatcher routine may be generated to be invoked upon redirection of execution into the second execution environment. In various embodiments the dispatcher routine may itself invoke the subset and redirect execution back to the first execution environment after execution of the subset. In various embodiments one or more instructions to restore an execution context prior to invocation of the subset and to preserve the execution context after execution of the subset may be added to the dispatcher routine.

In various embodiments at least one computer readable medium may have computer readable code embodied therein. The computer readable code may include a first set of instructions to be executed in a first execution environment of a computing device with a first security level and a second set of instructions that includes a single entry point and a single exit point to be executed in a second execution environment of the computing device with a second security level that is more secure than the first security level. In various embodiments the first set of instructions may include at least one instruction to redirect execution to the second execution environment and at least one instruction to preserve an execution context prior to redirection of execution to the second execution environment. In various embodiments the second set of instructions may include at least one instruction to restore the execution context.

In various embodiments the first set of instructions may include prior to the at least one instruction to redirect execution to the second execution environment one or more instructions to initialize the second execution environment. In various embodiments a third set of instructions that includes a single entry point and a single exit point may be configured to be executed in the second execution environment.

In various embodiments the second and third sets of instructions may be encrypted and concatenated. In various embodiments an index of the concatenated second and third sets of instructions may include a relative virtual address associated with at least one of the first and second sets. In various embodiments the index may include a size and offset associated with at least one of the second and third sets.

In various embodiments one or more instructions may form a dispatcher routine. In various embodiments the dispatcher routine may be invoked upon redirection of execution into the second execution environment. In various embodiments the dispatcher routine may invoke the second set of instructions and redirect execution back to the first execution environment after execution of the second set of instructions.

In various embodiments the second set of instructions may be encrypted. In various embodiments the medium may include one or more instructions that form an initializer routine to be executed in the second execution environment the initializer routine to decrypt the second set of instructions.

Although certain embodiments have been illustrated and described herein for purposes of description this application is intended to cover any adaptations or variations of the embodiments discussed herein. Therefore it is manifestly intended that embodiments described herein be limited only by the claims.

Where the disclosure recites a or a first element or the equivalent thereof such disclosure includes one or more such elements neither requiring nor excluding two or more such elements. Further ordinal indicators e.g. first second or third for identified elements are used to distinguish between the elements and do not indicate or imply a required or limited number of such elements nor do they indicate a particular position or order of such elements unless otherwise specifically stated.

