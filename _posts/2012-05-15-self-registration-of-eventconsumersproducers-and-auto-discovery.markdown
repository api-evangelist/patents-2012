---

title: Self registration of eventâ€”consumers/producers and auto discovery
abstract: Systems, methods, and other embodiments associated with automatic registration and discovery of services in a network using a platform independent interface are described. In one embodiment, a method includes receiving a request from an event producer on the network to add an entry to a registration table. The example method may also include broadcasting a message to devices on the network to announce the presence of the event producer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09323589&OS=09323589&RS=09323589
owner: ORACLE INTERNATIONAL CORPORATION
number: 09323589
owner_city: Redwood Shores
owner_country: US
publication_date: 20120515
---
Devices in a computer network interact in many ways. Internet services remote access e mail and distributed computing are all examples of services where devices use a network to interact. Many of these technologies are based on client server architectures. That is an environment where a client sends a request to a server for the server to perform some processing or provide information. However these technologies suffer from difficulties with cross platform compatibility.

For the client and server to interact they both need to speak the same language yet different programming languages are often used to implement the client and the server leading to difficulties when attempting to communicate.

Additionally for the client to send a request to a server the client first needs to know the location of the server and services it provides. However difficulties with discovering devices e.g. servers that are capable of handling requests also hinder client server architectures.

Systems methods and other embodiments are described herein that provide techniques for self registration of event consumers producers with a local DNS and auto discovery by event producers. Interactions between clients and servers in a network are improved with automatic discovery of event producers and event consumers using platform independent interfaces. For example consider a domain name system DNS server in a network. A DNS server provides name resolution and registration services in the network so that a device in the network can discover and communicate with other devices by using services of the DNS server. When a device is connected to a network for the first time the DNS server registers a name and address for the device in a registry. From this registration information other devices in the network can contact the DNS server to determine an address for the new device when attempting to communicate with the device.

Typically the DNS server is not aware of general attributes of the newly connected device such as services running on the device and so on. However by modifying the initial registration with the DNS server to include additional information about the device discovery of services in the network can be simplified. Accordingly the additional information provided during the initial registration includes for example services running on the device whether the device is capable of servicing events from other devices and so on. In this way the DNS server can provide information about services used by the device to other devices in the network facilitating discovery of services associated with the device by other devices on the network.

Consider a device that is newly connected to a network. When the DNS server receives a request to add the device to the registry the DNS server also registers information about services associated with the device. The additional information about services associated with the new device is included with the request from the device. In other examples the DNS server may probe the new device for the additional information if it is not included with the request. However in either case the DNS server now maintains more information about the device and services used by or available on the device.

With this additional information the DNS server can facilitate discovery by other devices in the network in several ways. One example of this is for the DNS server to broadcast a message to devices in the network about the presence and services of the new device. This broadcast can be a directed message that is sent to only devices associated with the same services as the new device or a true broadcast message to all devices on the network. As a result of broadcasting the message to devices in the network those devices are made aware of the new device and devices associated with services of the new device are thereby induced to begin communicating with the new device.

In addition to automatically registering services for devices on the network the server uses a platform independent interface to provide the registration and discovery services. For example a network can include devices of different types. The different types of devices not only differ in physical aspects but may also differ in the languages with which they are programmed and communicate. Thus a platform independent interface allows heterogeneous devices to seamlessly use the registration services of the same DNS server without providing specific compatibility interfaces for each different device.

In one embodiment the DNS server uses the platform independent application programming interface API to provide access to the registry for the devices on the network. To provide compatibility among the different devices the registry is for example an XML data structure. Thus the requests to the DNS server and messages provided by the DNS server also include data in an XML format in order to promote platform independence.

With reference to one embodiment of a server that includes a registration controller is illustrated. The registration controller is configured to provide automatic discovery of event consumers and or event producers in a network . The network may be a transmission control protocol Internet protocol TCP IP or other network that includes for example wireless and or wired communication channels. The communication channels connect a collection of devices that share resources and information. For example the network provides for client server communications distributed computing event driven computing and so on. Thus the network permits devices to interact and share resources.

In the server a first remote device and a second remote device are examples of devices that communicate using the network . Of course other devices may be connected to the network . In one embodiment the server is a lightweight directory access protocol LDAP server. In other embodiments the server is a DNS server or a DNS server that is integrated with an LDAP server. The first and second remote devices and are examples of devices that participate in distributed computing across the network and that use the server to discover devices on the network. Event producer and event consumer are examples of executable services running on the respective remote devices and .

In one embodiment an event producer is an executing application that produces software events messages . An event listener consumer is an application service running in a remote machine that has registered itself with the event producer and which listens and responds to the events generated by the event producer. Thus in order for the event consumer to process events produced by the event producer a connection between the devices is first established. To establish the connection either the event producer or the event consumer initiates communication.

By way of example consider that the first remote device and its event consumer are registered with the server which is functioning as a DNS server that includes lightweight directory access protocol LDAP services. The registration table includes entries for the first remote device and the event consumer . The entries describe the location of the first remote device and provide information about the event consumer . Further consider that the event consumer is for example a network layer security service in the network. In another embodiment the event consumer is for example a web service that provides services related to a web based application and so on. At some point after the first remote device has been connected to the network the second remote device is connected to the network . On the occurrence of this connection the second remote device transmits a registration request to the server .

Upon receiving the request the registration logic in the registration controller of the server adds an entry for the second remote device to the registration table . The entry includes information for the event producer which is operating on the second remote device . The information for the event producer describes characteristics of the event producer that include for example a version number of an application associated with the event producer configuration information and so on. The information for the event producer may also include configuration information for the second remote device that describes a processing capability of the second remote device and other relevant operating characteristics.

In addition to being configured to handle requests to add entries into the registration table the registration logic automatically informs event consumers e.g. event consumer on the network about the registration of the event producer . In one embodiment the registration logic analyzes the new entry for the event producer after it has been added to the registration table . By analyzing the new entry the registration logic can determine if there are any event consumers such as event consumer which can handle requests from the event producer e.g. based on matching or common characteristics functions . The registration logic is configured to account for characteristics of the event producer when analyzing the new entry to determine associated event consumers. For example the characteristics include an application version number processing requirements for produced events and so on. Analyzing the new entry can include the registration logic using the registration table and the characteristics of the event producer to search for associated event consumers.

In one example the registration table is a database that is configured with relational elements and is stored in a non transitory computer readable medium. The relational elements link event producers to associated event consumers in the registration table . Thus the registration logic can use the relational elements to lookup event consumers for the event producer. Suppose that in this example event consumer is the only event consumer capable of processing events of the type that are generated from event producer as determined from the relational elements in the table . The registration logic generates a message to send to the event consumer that describes the event producer . If multiple event consumers are available the registration logic may select a subset of event consumers or a message can be generated and sent to all available event consumers. Additionally in still other embodiments the registration logic can send a message to all devices on the network without determining whether there is a particular event consumer for the event producer .

Continuing with the present example the event consumer in the first remote device receives the message sent by the registration logic in the server . The message is an alert to the event consumer that indicates the presence of the newly registered event producer . In one embodiment the message includes only an identifier for the event producer while in other embodiments the message may include additional information that provides more details to the event consumer about the event producer .

After receiving the message the event consumer responds by transmitting a reply to the server with a request for additional information about the newly registered second device . In response to the reply the registration logic is configured to provide the information about the event producer from the registration table back to the event consumer . After receiving the information the event consumer initiates communications with the event producer . Communications between the event producer and the event consumer inform the event producer that the event consumer is available and capable of processing its events. The communications may also include an exchange of security information and or other parameters used when processing events for the event producer . Thereafter the event producer directs events to event consumer for processing. The event producer provides the events to the event consumer in the form of for example remote procedure calls RPC HTTP requests and so on.

The components by which the server the first remote device and the second remote device communicate are discussed in greater detail with reference to . illustrates elements similar to those of . For example shows a server with a registration controller a first remote device and a second remote device . However in the registration controller includes an interface logic in addition to the registration logic and the registration table illustrated in . Additionally the event consumer and the event producer include respective interface logics and .

In one embodiment the interface logics are application programming interfaces API that provide platform independent communication channels between the server and devices connected to the network e.g. first remote device second remote device . For example the interface logic provides a path for communications received from the network to the registration logic in the registration controller . In this way communications between the server and devices on the network e.g. first remote device second remote device are independent of a programming language or operating platform that is native to the server . Accordingly the functionality of the registration logic and data in the registration table is accessible and exposed directly to devices on the network without intervention from for example an operating system in the server . In one embodiment the interface logic is an API that interacts directly with the application layer in the network communication stack to direct communications to and from the registration controller .

The network communication stack is a stack of protocols used by for example the server to communicate via a network interface card NIC over the network . The network stack is for example compatible with the seven layer OSI model in which the application layer is a top layer e.g. layer 7 above the presentation layer e.g. layer 6 . In other embodiments the network stack is compatible with the four layer TCP IP model in which the application layer is the top layer e.g. layer 4 above the transport layer e.g. layer 3 .

Furthermore the interface logic is configured to expose portions of the registration table to the network devices e.g. so that the devices can query and access data in the registration table as well as add information to the registration table . The data in the registration table is for example XML data in XML templates for each entry. Accordingly each entry in the registration table includes an XML template with data about a device in the network . For example when the second remote device sends a request to server to be added to the registration table the request includes XML data that is used to fill in an XML template for the second remote device in the registration table . The XML template for the second remote device includes information about the event producer . The registration controller uses the data in the XML template to generate messages to broadcast to the network and to fulfill inquiries by devices in the network .

By exposing the XML template through the interface logic to devices on the network the remote devices can access the XML template in the registration table without taking additional steps to account for a native language or specific protocol of the server . In this way communicating with the server to register and discover devices in the network is platform independent that is communications are not bound to a programming language of any specific device.

Additionally the interface logics and in the remote devices and respectively are configured to provide the ability to communicate independently of a native language of the first remote device and the second remote device with the server . Thus when communicating with the server the first remote device is configured to use the interface logic to mediate translate the communications transmitted between the devices. Accordingly in the remote device messages received from the server and messages transmitted to the server are communicated using the interface logic . The interface logics and provide for example translational services between the format of the communications and the local device e.g. first remote device .

Further details of automatic registration and discovery of event producers consumers in a network will be discussed in conjunction with . illustrates one embodiment of a method associated with automatic registration and discovery of event producers consumers in a network. is discussed from the perspective that the method is implemented and performed by for example the server of .

At a request is received to add a device to the registration table. The request is sent by a device that has been newly connected to the network. The device sends the request for example in response to being initially plugged into the network. In this way the device can establish a connection with the server to provide registration information to the server in order to quickly register and begin interacting with other event consumers producers on the network.

In one embodiment the request is a domain name system DNS registration request that includes additional information. The additional information with the request is information that is not required for DNS registration purposes but is instead information about an event consumer or event producer that resides on the device that provided the request. By including the event consumer producer information in the request the server can facilitate automatic discovery of the new device by other devices on the network.

In one embodiment the request is provided in a format that for example complies with general standards for a DNS registration request but also includes the additional information in a form that is compatible across different types of computing systems. The additional information may be in an XML format so that an XML template in the registration table for the new entry can be filled in.

At identifiers and information for the device are added to the registration table. In one embodiment adding the information about the device to the table includes an interface in the server processing the information into an XML template in the registration table. The interface is for example an application programming interface API that is triggered upon the receipt of the request. Since the request includes information for DNS registration and the additional information about an event consumer producer in the device the interface parses the request for the event consumer producer information and inserts it into an XML template in the registration table. In this way the request serves a dual purpose of registering the device for DNS purposes and also registering the event consumer producer to facilitate discovery of the event consumer producer in the network.

At a message is generated that is to be sent to one or more devices on the network to announce the presence of the newly registered device and the new event producer consumer. The message includes for example a portion of the information from the XML template. The entirety of the information from the XML template is not included since all of the devices that receive the message may not need all of the information. Thus in one embodiment including all of the information in the message would be inefficient. Accordingly the message includes sufficient information for the receiving device to identify whether the new device is a device with which interactions are desired. This determination may be based on whether a processing load of the device that receives the message is beyond an acceptable limit or whether a version of an event consumer producer is compatible with the new device.

At the message that was generated at is broadcast to the network. By providing the message to devices on the network the devices are made aware of the presence of the new device and can begin interacting with the device. As mentioned at however the message can be directed to a subset of the devices on the network depending on for example characteristics about the new device and available devices on the network.

Further details of automatically discovering event producers consumers in a network will be discussed in conjunction with . illustrates one embodiment of a method associated with automatically discovering event producers in a network. is discussed from the perspective that the method is implemented and performed by for example a server or other computing device in a network. Additionally will be discussed in conjunction with which illustrates a sequence of communications between a server an event producer and an event consumer in a network.

The sequence of communications begins when the event consumer EC provides a request to the server to register at . As discussed above with reference to blocks and of method the server adds an entry to the registration table for the event consumer. In this example the server does not generate and broadcast a message announcing the registration of the event consumer because for example the server determines that there are no event producers registered with the server yet that produce events compatible with the services of the event consumer. In other embodiments the server may be configured to broadcast messages for newly registered event producers and not event consumers depending on preferences of a system administrator.

Continuing with at some point in time the event producer provides a request to register to the server at . The communication at of sequence corresponds to of method . At the request is received by the server. At of method similar to of method the event producer is registered by adding the information from the request about the event producer to the registration table in the server. Additionally at similar to of method method includes generating a message with information about the event producer to send to device s on the network.

At a subset of devices from available event consumers on the network that are registered with the server are selected. In one embodiment the server may have a plurality of event consumers registered. Of the registered event consumers some may be unavailable due to a current processing load or because of a discrepancy in program versions with the event producer. In either case the server can select a subset of the event consumers to send the message to at in order to use network resources more efficiently by avoiding duplicity of the message .

Accordingly the message is transmitted to the subset of event consumers at . In the present example there is a single event consumer and the communication at of illustrates the transmission of the message generated at to the event consumer. In response to the message of sequence at of method the event consumer sends an inquiry to the server for a complete profile of information for the event producer at . Since the information in the communication at does not include a complete description of the new event producer but rather a basic indicator of the new event producer the event consumer requests the complete set of information before initiating communication with the event producer. Alternatively the event consumer can decide to not inquire about the new event producer if for example a current processing load of the event consumer exceeds a maximum amount or if another event consumer has priority over event consumer .

Continuing with method at the XML template with the complete set of information about the new event producer is sent to the event consumer in a communication . Receiving the communication with the complete XML templates causes the event consumer to initiate communications with the event producer by sending a query to the event producer. The event producer receives the query and sends a reply to the event consumer to confirm that events generated by the event producer will be sent to the event consumer for processing. Thus the event producer discovers the event consumer after sending a single registration request to the server.

The server effectively directs a discovery process for the event producer in which the network was polled for event consumers. The event producer s attributes where provided to interested event consumers and the event consumer finally contacts the event producer without any provocation form the event producer itself. Accordingly the discovery process is automated and removes efforts from the event producer while using platform independent interfaces between the devices.

In addition to establishing communications with the event consumer as described the event producer can periodically query the registration table in the server to discover any newly registered event consumer that has been added to the network that is better suited for handling events of the type generated by the event producer. While in one embodiment the server is configured to initiate communications between new event consumers and event producers that are already present on the network in other embodiments the server does not initiate communications between an event producer and a new event consumer if the event producer is already communicating with an event consumer. Accordingly in such a circumstance the event producer can based on a local configuration of the event producer inquire to the server for an updated list of event consumers.

In one embodiment controller is a means e.g. hardware non transitory computer readable medium firmware configured to provide the disclosed functions for platform independent automatic registration and discovery of event producers consumers in a network. The means may be implemented for example as an ASIC programmed to register new devices and notify registered devices on the network. The means may also be implemented as stored computer executable instructions that are presented to computer that are temporarily stored in memory and then executed by processor .

Controller may also provide means e.g. hardware non transitory computer readable medium that stores executable instructions firmware for manipulating XML data in XML templates. Generally describing an example configuration of the computer the processor may be a variety of various processors including dual microprocessor and other multi processor architectures. A memory may include volatile memory and or non volatile memory. Non volatile memory may include for example ROM PROM and so on. Volatile memory may include for example RAM SRAM DRAM and so on.

A disk may be operably connected to the computer via for example an input output interface e.g. card device and an input output port . The disk may be for example a magnetic disk drive a solid state disk drive a floppy disk drive a tape drive a Zip drive a flash memory card a memory stick and so on. Furthermore the disk may be a CD ROM drive a CD R drive a CD RW drive a DVD ROM and so on. The memory can store a process and or a data for example. The disk and or the memory can store an operating system that controls and allocates resources of the computer .

The bus may be a single internal bus interconnect architecture and or other bus or mesh architectures. While a single bus is illustrated it is to be appreciated that the computer may communicate with various devices logics and peripherals using other busses e.g. PCIE 1394 USB Ethernet . The bus can be types including for example a memory bus a memory controller a peripheral bus an external bus a crossbar switch and or a local bus.

The computer may interact with input output devices via the i o interfaces and the input output ports . Input output devices may be for example a keyboard a microphone a pointing and selection device cameras video cards displays the disk the network devices and so on. The input output ports may include for example serial ports parallel ports and USB ports.

The computer can operate in a network environment and thus may be connected to the network devices via the i o interfaces and or the i o ports . Through the network devices the computer may interact with a network. Through the network the computer may be logically connected to remote computers. Networks with which the computer may interact include but are not limited to a LAN a WAN and other networks.

In another embodiment the described methods and or their equivalents may be implemented with computer executable instructions. Thus in one embodiment a non transitory computer readable medium is configured with stored computer executable instructions that when executed by a machine e.g. processor computer and so on cause the machine and or associated components to perform the method.

While for purposes of simplicity of explanation the illustrated methodologies in the figures are shown and described as a series of blocks it is to be appreciated that the methodologies are not limited by the order of the blocks as some blocks can occur in different orders and or concurrently with other blocks from that shown and described. Moreover less than all the illustrated blocks may be used to implement an example methodology. Blocks may be combined or separated into multiple components. Furthermore additional and or alternative methodologies can employ additional blocks that are not illustrated.

The following includes definitions of selected terms employed herein. The definitions include various examples and or forms of components that fall within the scope of a term and that may be used for implementation. The examples are not intended to be limiting. Both singular and plural forms of terms may be within the definitions.

References to one embodiment an embodiment one example an example and so on indicate that the embodiment s or example s so described may include a particular feature structure characteristic property element or limitation but that not every embodiment or example necessarily includes that particular feature structure characteristic property element or limitation. Furthermore repeated use of the phrase in one embodiment does not necessarily refer to the same embodiment though it may.

XML refers to extensible markup language. XML is a document format a meta markup language for text documents. XML documents are trees that start at a root. XML documents include elements. An element can be defined generically and have a particular instance s . An instance of an element has content e.g. a value s . XML elements can have attributes. An attribute is a name value pair attached to the element start tag. XML Schemas describe allowed content of XML documents conforming to a particular XML vocabulary.

 Computer readable medium as used herein refers to a non transitory medium that stores instructions and or data. A computer readable medium may take forms including but not limited to non volatile media and volatile media. Non volatile media may include for example optical disks magnetic disks and so on. Volatile media may include for example semiconductor memories dynamic memory and so on. Common forms of a computer readable medium may include but are not limited to a floppy disk a flexible disk a hard disk a magnetic tape other magnetic medium an ASIC a CD other optical medium a RAM a ROM a memory chip or card a memory stick and other media from which a computer a processor or other electronic device can read.

 Logic as used herein includes but is not limited to hardware firmware a non transitory computer readable medium that stores instructions instructions in execution on a machine and or combinations of each to perform a function s or an action s and or to cause a function or action from another logic method and or system. Logic may include a microprocessor a discrete logic e.g. ASIC an analog circuit a digital circuit a programmed logic device a memory device containing instructions and so on. Logic may include one or more gates combinations of gates or other circuit components. Where multiple logics are described it may be possible to incorporate the multiple logics into one physical logic. Similarly where a single logic is described it may be possible to distribute that single logic between multiple physical logics.

An operable connection or a connection by which entities are operably connected is one in which signals physical communications and or logical communications may be sent and or received. An operable connection may include a physical interface an electrical interface and or a data interface. An operable connection may include differing combinations of interfaces and or connections sufficient to allow operable control. For example two entities can be operably connected to communicate signals to each other directly or through one or more intermediate entities e.g. processor operating system logic non transitory computer readable medium . Logical and or physical communication channels can be used to create an operable connection.

 User as used herein includes but is not limited to one or more persons computers or other devices or combinations of these.

While example systems methods and so on have been illustrated by describing examples and while the examples have been described in considerable detail it is not the intention of the applicants to restrict or in any way limit the scope of the appended claims to such detail. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the systems methods and so on described herein. Therefore the disclosure is not limited to the specific details the representative apparatus and illustrative examples shown and described. Thus this application is intended to embrace alterations modifications and variations that fall within the scope of the appended claims.

To the extent that the term includes or including is employed in the detailed description or the claims it is intended to be inclusive in a manner similar to the term comprising as that term is interpreted when employed as a transitional word in a claim.

To the extent that the term or is used in the detailed description or claims e.g. A or B it is intended to mean A or B or both . When the applicants intend to indicate only A or B but not both then the phrase only A or B but not both will be used. Thus use of the term or herein is the inclusive and not the exclusive use. See Bryan A. Garner A Dictionary of Modern Legal Usage 624 2d. Ed. 1995 .

To the extent that the phrase one or more of A B and C is used herein e.g. a data store configured to store one or more of A B and C it is intended to convey the set of possibilities A B C AB AC BC and or ABC e.g. the data store may store only A only B only C A B A C B C and or A B C . It is not intended to require one of A one of B and one of C. When the applicants intend to indicate at least one of A at least one of B and at least one of C then the phrasing at least one of A at least one of B and at least one of C will be used.

