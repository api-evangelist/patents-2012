---

title: Methods for exchanging network management messages using UDP over HTTP protocol
abstract: A network access device (NAD) receives a UDP packet from a client to be transmitted to a management server over Internet, the UDP packet including a management message. The NAD is one of NADs managed by the management server. The NAD determines whether the management server is reachable using a UDP protocol. The NAD transmits the UDP packet to the management server using the UDP protocol over the Internet if it is determined that the management server is reachable using the UDP protocol. Otherwise, the NAD extracts a UDP payload from the UDP packet, encapsulates the UDP payload within an HTTP POST request, and transmits the HTTP POST request having the UDP payload encapsulated therein to the management server using a HTTP protocol over the Internet.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09215131&OS=09215131&RS=09215131
owner: CISCO TECHNOLOGY, INC.
number: 09215131
owner_city: San Jose
owner_country: US
publication_date: 20120629
---
Embodiments of the present invention relate generally to networking. More particularly embodiments of the invention relate to communications of management messages of a cloud managed network using a hypertext transfer protocol HTTP .

Hypertext transfer protocol HTTP is an application level protocol for retrieving interlinked resources such as Web pages on the World Wide Web. HTTP specifies the standard for requests and responses between a client and a server. Examples of HTTP clients include Web browsers Web crawlers and other end user software tools that make requests on behalf of users in accordance with the HTTP standard. Examples of HTTP servers include Web servers hosting Web pages and servers of other internet resources that respond to HTTP requests.

Typically when an HTTP client initiates an HTTP request it first establishes a transmission control protocol TCP connection to a dedicated port on an HTTP server. TCP connection establishment uses a three way handshake. First the client initiates the connection establishment by sending a connection request to the server. In response the server replies with an acknowledgement of the connection request. Finally the client sends an acknowledgement back to the server for the receipt of the server s acknowledgement. At this point the TCP connection between the client and the server is established and the client and server can begin data transfer to each other through the established TCP connection.

In contrast to TCP user datagram protocol UDP is a message based connectionless protocol that does not require hand shaking dialogues for guaranteeing reliability ordering or data integrity. With UDP applications can send messages in this case referred to as datagrams to other hosts on an Internet protocol IP network without requiring prior communications to set up special transmission channels or data paths. However certain network configurations prevent the use of UDP to the Internet. In addition some network configurations prevent direct TCP connections to the Internet as well. Some network configurations may only allow HTTP communication to the Internet if the HTTP communication is done through a HTTP Proxy. These network configurations are often implemented using a firewall. In such a situation there has been a lack of efficient mechanisms for exchanging UDP packets between two endpoints.

Various embodiments and aspects of the inventions will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

A system for exchanging network management messages between network access devices NADs of local area networks LANs and a management server using a UDP over HTTP UDP HTTP connection is described herein. According to some embodiments each of the network access devices maintains a persistent connection with the management server using either a UDP over Internet protocol UDP IP connection or a UDP HTTP connection to transmit and receive network management messages with the management server or servers over a wide area network WAN such as the Internet. When a network access device attempts to send a network management message to the management server if the management server is reachable via UDP IP the network management message is transmitted to the management server over an UDP IP connection. However if the management server is not reachable via the IP UDP connection the network access device encapsulates a UDP payload representing the network management message within a HTTP packet and transmits the HTTP packet to the management server over a UDP HTTP connection. The network access device and the management server coordinate with each other to maintain the UDP HTTP connection alive or open such that the management server can send any management message back to the network access device at any time.

According to one embodiment a network access device may present a gateway device interfacing a LAN to WAN and performs network address translation NAT for its clients which may be client devices or other network access devices. A network access device may be configured behind another network access device. For example an uplink of an access point may be coupled to a downlink of a gateway device. Alternatively a network switch may be coupled to a downlink of a gateway device or an access point etc. A network access device may be an integrated device integrating two or more of these functionalities e.g. router gateway access point and or network switch wired and or wireless.

Referring back to in this example it is assumed that network access devices are owned by the same organization and administrated by a network administrator associated with the organization. Also note that for the purpose of illustration although network access device is not shown with details therein network access device has the same or similar architecture as network access device . For the purpose of illustration only two network access devices are shown. However it is not so limited additional network access devices may be coupled to network and managed by management server . In one embodiment management server works for both single and multi tenant installations meaning that multiple organizations with different network administrators may have network access devices managed by the same management server and network configuration or management can be performed using the same management server but that are firewalled off from each other and do not have access to each other s network configurations.

According to one embodiment management server includes a configuration and management CM module which may be implemented as part of processing software to configure network access devices and to generate management server MS configuration information for each of network access devices . In one embodiment management server provides a user interface such as a Web interface to allow network administrator to create and log into an account associated with the organization to which the network access devices belong.

The management server further includes NAD information database not shown including information regarding the network access devices . In one embodiment the NAD information database includes a serial number and a mechanism to authenticate the network access device s identity e.g. the public key of a private public key pair the private key of which was embedded or stored in the network access device during the manufacturing . This NAD information database may be populated different ways in different embodiments e.g. populated by the seller of the network access devices populated by the network administrator . In embodiments in which this information is populated by the seller different ones of these embodiments may associate the information regarding network access devices in the router information database with the user account in different ways for example the network administrator may provide an order number or invoice number associated with a purchase of network access devices .

According to one embodiment when a network access device in this example network access device is powered up and attempts entering network network access device attempts to contact management server . In one embodiment certain device information such as an IP address or domain name service DNS name of management server is stored in network access device when it is manufactured. In one embodiment when network access device is powered up the network access device performs any self configuration processes including obtaining an IP address for itself from a dynamic host configuration protocol DHCP facility which address may be a public IP address or may be a private IP address if there is a device performing NAT between the router and the WAN that is to say the network access device is behind a device performing NAT . The network access device then accesses management server based on the server s IP address and authenticates itself e.g. signing a message e.g. including the serial number of the network access device using a private key associated and or stored with the network access device such that management server can authenticate network access device using the associated public key stored in the NAD information database maintained by management server .

In one embodiment each of network access devices creates one or more secure communication channels e.g. a control tunnel with server using the keys downloaded from management server to exchange control traffic such as management messages or notification operating statues of the network access device etc. In one embodiment once network access device has been successfully authenticated by server network access device downloads MS configuration information and stores it in a storage device within the network access device not shown . This download may take place over a secure session layer SSL encrypted session and or the management server may encrypt the data using the public key corresponding to the private key. This secure channel may also be used to receive subsequent configuration updates from the management server.

According to one embodiment subsequently when there is a change in the configuration such as adding or removing a network access device changing of subnet settings for example by administrator via a Web interface of management server management server is configured to generate updated configuration information and communicate the updates to network access devices via their corresponding control tunnels such communication can be done with different mechanisms depending on the embodiment of type of information including a push mechanism a pull mechanism etc. .

As described above each of network access devices maintains a persistent connection with management server to exchange network management messages e.g. network configuration or notifications from the management server status reports from a network access device etc. . In one embodiment the network management messages may be exchanged via UDP packets exchanged using a UDP IP protocol.

UDP is one of the core members of the Internet Protocol Suite the set of network protocols used for the Internet. With UDP computer applications can send messages in this case referred to as datagrams to other hosts on an IP protocol network without requiring prior communications to set up special transmission channels or data paths. UDP uses a simple transmission model without handshaking dialogues for providing reliability ordering or data integrity. Thus UDP provides an unreliable service and datagrams may arrive out of order appear duplicated or go missing without notice. UDP assumes that error checking and correction is either not necessary or performed in the application avoiding the overhead of such processing at the network interface level. Time sensitive applications often use UDP because dropping packets is preferable to waiting for delayed packets which may not be an option in a real time system. If error correction facilities are needed at the network interface level an application may use the Transmission Control Protocol TCP which is designed for this purpose. UDP applications use datagram sockets to establish host to host communications. An application binds a UDP socket to its endpoint of data transmission which is a combination of an IP address and a UDP port.

Referring back to management server includes UDP IP module which communicates with UDP IP module of network access device to exchange UDP packets that contain management messages between management server and network access device . UDP IP module may be part of a UDP IP layer of a network stack of management server and similarly UPD IP module may be part of a UDP IP layer of a network stack of network access device . When processing software sends a management message e.g. query configuration notification or installation to network access device processing software sends the message to UDP IP module . UDP IP module generates a UDP packet encapsulating the management message as a payload therein. UDP IP module then transmits the UDP packet to network access device using the corresponding UDP IP protocol. When the UDP packet arrives at network access device UDP IP module is configured to process the UDP packet according to the standard UDP IP protocol to obtain the management message embedded therein and to pass the management message to processing software to process the management message accordingly. Similarly when processing software attempts to send a management message e.g. operating status report to management server processing software invokes UDP IP module to send the management message as a UDP packet to management server which is handled by UDP IP module in a similar manner.

However under certain circumstances management server may not be reachable using the UDP IP protocol from network access devices or vice versa. For example network access devices may be located behind HTTP proxies e.g. firewalls respectively. In some situations an HTTP proxy may not allow traffic destined to a specific UDP port which may be configured by disabling certain ports through a firewall. However most of the firewalls allow HTTP traffic going through.

HTTP is an application protocol for distributed collaborative hypermedia information systems. HTTP is the foundation of data communication for the World Wide Web. Hypertext is a multi linear set of objects building a network by using logical links the so called hyperlinks between the nodes e.g. text or words . HTTP is the protocol to exchange or transfer hypertext. HTTP functions as a request response protocol in the client server computing model. A client submits an HTTP request message to a server. The server which provides resources such as hypertext markup language HTML files and other content or performs other functions on behalf of the client returns a response message to the client. The response contains completion status information about the request and may also contain requested content in its message body. HTTP is an application layer protocol designed within the framework of the Internet protocol suite. Its definition presumes an underlying and reliable transport layer protocol and TCP predominates for this purpose. HTTP resources are identified and located on the network by Uniform Resource Identifiers URIs or more specifically Uniform Resource Locators URLs using the HTTP or secure HTTP HTTPS URI schemes.

Referring back to according to one embodiment network access device includes a UDP monitor to monitor a UDP connection with management server to determine whether management server is reachable using a UDP IP protocol. When UDP IP module is to send a UDP packet to management server if UDP monitor determines that management server is unreachable via the UDP IP protocol UDP IP module invokes a UDP HTTP module to encapsulate at least the UDP payload of the UDP packet within a HTTP packet. UDP HTTP module then transmits the HTTP packet having at least the UDP payload embedded therein to management server .

According to one embodiment the UDP HTTP packet is handled by UDP HTTP module of management server . In response to the UDP HTTP packet UDP HTTP module is configured to extract at least the UDP payload from the HTTP packet and process the UDP payload accordingly. Alternatively UDP HTTP module may hand the UDP payload to UDP IP module for normal UDP processing based on the standard UDP protocol. In addition management server further maintains a UDP HTTP mapping table to maintain mapping information between a UDP socket and an HTTP request received from a network access device. UDP HTTP module may store an entry in UDP HTTP mapping table to indicate that the UDP packet or UDP payload is received via an HTTP connection instead of a UDP IP connection. As a result when UDP IP module processes a UDP packet containing a management message received from processing software UDP IP module passes the UDP packet to UDP HTTP module . UDP HTTP module may look up UDP HTTP mapping table to determine whether the corresponding network access device is reachable using the UDP IP protocol.

In one embodiment if there is an entry corresponding to the UDP socket of the UDP packet UDP HTTP module is to encapsulate the UDP packet or the UDP payload within an HTTP packet e.g. a HTTP response to an outstanding HTTP request and to transmit the HTTP packet to network access device using an HTTP protocol. Processing software may represent any client applications or system processes running at server such as configuration software for configuring network access devices a Web interface or application programming interface API to allow administrator to access server . In one embodiment the UDP payload includes an IP packet encapsulated therein and processing software is software that encapsulates and decapsulates such packets inside UDP datagrams. Note that some or all of the modules as shown in can be implemented in software hardware or a combination of both. Note that throughout this application network access devices are utilized as devices managed by management server using a UDP HTTP communications mechanism. However the techniques described herein can also be applied to any device that can be assigned an IP address such as client devices .

As described above UDP monitor is configured to monitor UDP traffic exchanged between network access device and management server to determine whether management server is reachable using the UDP IP protocol. In one embodiment UDP monitor periodically e.g. every 30 seconds sends a PING or HELLO message to management server using the standard UDP IP protocol. If a response is received from management server within a reasonable period of time management server is considered reachable via UDP IP otherwise it is considered unreachable. Such a waiting period can be user configurable such as for example by administrator . In one embodiment such a waiting period is configured ranging approximately from 2 to 15 minutes. Typically this situation occurs when network access device is located behind a firewall that does not allow UDP traffic.

In some configurations such firewall settings typically do not change often. According to one embodiment during the initialization of network access device e.g. booting UDP monitor is configured to detect whether management server is reachable via UDP IP by sending one or more UDP IP packets to management server . If no response is received from management server within a predetermined period of time it means that the management server is unreachable via UDP IP. UDP monitor then stores such an indication as part of UDP states . Subsequently when UDP IP module queries about the UDP state of management server UDP monitor can inform UDP IP module based on UDP state whether management server is reachable via UDP IP. According to a further embodiment when network access device reboots it checks a timestamp associated with UDP state to determine when the last time UDP state was updated. If UDP state was updated within a predetermined period of time UDP monitor may not need to ping management server again because UDP state is still considered valid.

If it is determined that management server is reachable via UDP IP according to one embodiment UDP IP module transmits the UDP IP packet to management server . UDP IP module processes the received UDP IP packet according to the UDP IP protocol to obtain the management message carried therein for example removing the UDP IP headers to reveal the management message as part of the payload. UDP IP module then forwards the management message to processing software for network management purpose.

If it is determined that management server is unreachable via UDP IP according to one embodiment UDP IP module passes the UDP IP packet or only the UDP payload of the UDP IP packet to UDP HTTP module . UDP HTTP module encapsulates the UDP IP packet or UDP payload within an HTTP packet for example in a form of an HTTP request. The HTTP packet is then passed to TCP IP module where TCP IP module may be implemented as part of a TCP IP stack or layer of a typical network stack. TCP IP module constructs a TCP IP packet having the UDP HTTP packet as a payload and transmits the TCP IP packet to management server . An example of such a TCP IP packet is shown in according to one embodiment. In this example the TCP destination port may be specified as port 80 for HTTP or port 443 for HTTPS.

The TCP IP packet having the UDP HTTP packet embedded therein is received and processed by corresponding TCP IP module . TCP IP module processes the received TCP IP packet according to the standard TCP IP protocol to obtain the UDP HTTP packet as a payload. The UDP HTTP packet is passed onto UDP HTTP module to extract the UDP packet or UDP payload embedded therein. The UDP packet or payload may further be handled by UDP IP module for standard UDP processing to obtain the network management message embedded therein. The network management message is then passed to processing software as a client. In addition UDP HTTP module may update the UDP HTTP mapping information in UDP HTTP mapping table indicating that the current UDP session or connection is being handled via a UDP HTTP tunnel. An example of such a UDP HTTP mapping table is shown in according to one embodiment.

According to one embodiment a UDP HTTP module e.g. UDP HTTP modules and may be implemented as part of an HTTP application layer of a network stack or a separate module e.g. plug in communicatively coupled to either an application layer UDP IP layer or TCP IP layer of a network stack. In one embodiment the UDP payload a.k.a. the management message being encapsulated either in UDP IP or UDP HTTP TCP IP is an IP packet. In this situation the job of processing software is to take IP packets sent to certain IP addresses namely those in the internal management IP address space and encapsulate them in UDP datagrams and then send them to the UDP IP module to either be sent directly or alternatively to be HTTP encapsulated in UDP HTTP module .

As described above HTTP functions as a request response protocol in the client server computing model. In such a client server model a client submits an HTTP request message to a server. The server which provides resources such as HTML files and other content or performs other functions on behalf of the client returns a response message to the client. The response contains completion status information about the request and may also contain requested content in its message body. Thus once a response has been returned from a server the HTTP connection is typically terminated unless both ends support the keep alive features which may not always be supported.

According to one embodiment in order to maintain an open HTTP connection without requiring the CONNECT feature to be supported network access device operating as a client transmits a first HTTP request e.g. initial HTTP request to server to establish a HTTP connection. When server receives such an HTTP request according one embodiment server may retain the HTTP request without immediately returning a response. When server has data to be sent to network access device the data is then encapsulated within an HTTP response and the HTTP response is then transmitted back to network access device. That is if there is no data to be sent to network access device at the time an HTTP request was received server would retain the HTTP request without responding to keep the HTTP connection or session alive. The initial HTTP request may be transmitted from network access device when the network access device initially boots up and contact management server . The HTTP request includes a server URL identifying server and client ID identifying network access device .

When there is new data e.g. network management message or messages to be sent from network access device to server according to one embodiment the network access device transmits a second HTTP request having the data embedded therein e.g. UDP packet to server . The second HTTP request may be sent even though network access device has not received a response to the first HTTP request from server .

According to one embodiment one or more UDP packets or UDP payloads having one or more management messages may be embedded within an HTTP packet. In one embodiment an HTTP request may be an HTTP POST request. An HTTP POST request is defined to submit data to be processed e.g. from an HTML form to the identified resource. The data is included in the body of the request.

According to one embodiment prior to sending a network management message via a UDP HTTP tunnel a network access device first registers itself with the server. This allows the server to authenticate the network access device if necessary and also provide an opportunity to the server to deny or accept such communications e.g. due to the processing bandwidth of the server . In one embodiment a network access device can register by sending the following HTTP request to the server 

Referring back to when server receives the second HTTP request according to one embodiment UDP HTTP module is configured to extract the UDP payload from the HTTP packet and perform normal UDP processing which may be handled by UDP IP module . For example UDP HTTP module may recreate a UDP packet and hand the UDP packet to UDP IP module . As a result the normal UDP IP layer of a typical network stack can be utilized. Note that the UDP payload may include an IP over UDP packet where the UDP packet includes another IP packet for management purposes between the management server and a network access device. The IP packet embedded within the UDP packet may include specific internal IP addresses e.g. source and destination IP addresses that are used only between a network access device and the management server for exchanging network management messages. That is a network access device may use another IP address to communicate with client devices that are associated with the network access device. The management server and the network access devices of an organization as an owner form a logical management network using the internal IP addresses solely for exchanging network management messages. Such internal IP addresses are only recognized by the management server and network access devices for tunneling management messages.

In addition server checks whether there is a previous HTTP request pending for response in this example the first HTTP request. In one embodiment UDP HTTP module is configured to look up UDP HTTP mapping table to determine whether there is an outstanding HTTP request that is still pending e.g. no reply has been returned yet . If there is an HTTP request e.g. the first HTTP request currently pending a reply to the previously received pending HTTP request is turned back to the network access device while withholding the second HTTP request without a reply. For example the second HTTP request is populated in an entry in UDP HTTP mapping table .

Referring to when UDP HTTP module looks up at UDP HTTP mapping table it searches and locates an entry that has a client ID of field matching a client ID of the HTTP request such as CLIENT IDENTIFIER in the above HTTP request example. If such an entry exists it indicates that there is an outstanding HTTP request which is stored in field . In this embodiment a reply corresponding to the outstanding HTTP request is returned to network access device and the corresponding entry is updated with the second HTTP request for example by replacing the first HTTP request with the second HTTP request in field . Alternatively the existing entry corresponding to the first HTTP request is deleted from the mapping table and a new entry is allocated to represent the second HTTP request.

According to one embodiment instead of immediately returning a reply of the first HTTP request to network access device server may delay with an additional period of time e.g. 10 50 milliseconds . In this way if the data received via the second HTTP request causes new data to be sent from server to network access device the new data can be encapsulated within the reply to the first HTTP request. A single HTTP request or response can encode multiple UDP packets or payloads where each payload can be preceded by the length of that payload as shown in . This can minimize the overhead of the TCP connection if HTTP keep alive option cannot be used and HTTP headers. HTTP keep alive is the idea of using the same TCP connection to send and receive multiple HTTP requests responses as opposed to opening a new connection for every single request response pair. Dependent upon the specific circumstances such an HTTP keep alive option may or may not be supported by a device. If both ends support such an option it is preferable to use the HTTP keep alive option for example by specifying a proper header field in an HTTP header.

According to one embodiment when network access device receives a response from server UDP HTTP module strips off the HTTP header to recover the UDP packet or payload therein and hands it over to UDP IP module for UDP processing. In addition UDP HTTP module determines whether there is an outstanding HTTP request that has not received a response from server . In this embodiment network access device may maintain a data structure to store information whether an outstanding HTTP request is still pending. If there is no outstanding HTTP request UDP HTTP module may send another HTTP request e.g. an empty HTTP request to server to keep the HTTP connection open. According to one embodiment network access device may delay a short period of time e.g. 10 50 milliseconds instead of immediately sending the new HTTP request to server . In this way if the previously response causes new data to be sent to server the new data can be encoded within the new HTTP request sent to server .

When processing software of server generates data to be sent to network access device the data is passed to UDP IP module to generate a UDP packet as part of normal UDP processing. According to one embodiment UDP IP module determines whether the UDP packet should be sent to network access device via path using the UDP protocol or alternatively it should be sent to UDP HTTP module which encapsulates the UDP packet within an HTTP packet to be sent to network access device via path . In one embodiment UDP IP module decides how to send a message to a given client in this example network access device based on how it last received messages from that client device. In either case UDP IP module will have received a UDP message from a UDP socket which is either associated with UDP IP module of network access device or UDP HTTP module of management server . In the direct UDP case the other end of that UDP socket is connected to UDP IP module in network access device . If network access device is instead communicating using HTTP then UDP IP module will have received the last UDP message directly from UDP HTTP module so the UDP socket s other end will be UDP HTTP module . That is UDP HTTP mapping table is not used to determine whether to send a reply via HTTP or UDP it is only used for keeping track of the connection for clients that are known to be using UDP HTTP module .

In one embodiment UDP HTTP module looks up in UDP HTTP mapping table to determine whether the network access device is reachable via UDP IP. If UDP HTTP mapping table contains an entry having a UDP socket number e.g. field of matching the one with the UDP socket corresponding to processing software it means that network access device is unreachable via UDP IP and the UDP traffic must be carried over via HTTP. Thus if network access device is reachable via UDP IP the UDP packet is sent by UDP IP module to network access device . Otherwise the UDP packet is passed to UDP HTTP module . The UDP HTTP module encapsulates at least the UDP payload in an HTTP response e.g. HTTP POST response and TCP IP module transmits the HTTP response within a TCP IP packet to network access device .

According to another embodiment management server maintains at least two components 1 a process that encapsulates and decapsulates IP packets inside UDP datagrams also referred to as an mTunnel process which may be performed by UDP IP module and 2 a process that encapsulates and decapsulates UDP encapsulated IP packets e.g. as from the first process inside HTTP request responses also referred to as an mTunnel http server process which may be performed by UDP HTTP module . If management server wants to send an IP packet to a network access device it will first go to the mTunnel process which will encapsulate the IP packet into a UDP encapsulated IP packet e.g. an IP UDP packet and send it to the mTunnel http server process. The mTunnel http server process receives the IP UDP packet on a specific UDP socket. It then looks in UDP HTTP mapping table as shown in at the row corresponding to that UDP socket e.g. field of . It will then either send the encapsulated packet as a response to the HTTP request in that row or it will add the encapsulated packet to the buffered data in that row to be sent in response to the next HTTP request that is received.

According to one embodiment a network access device may represent a gateway device interfacing a LAN to WAN and performs network address translation NAT for its clients which may be client devices or other network access devices. A network access device may be configured behind another network access device. For example an uplink of an access point may be coupled to a downlink of a gateway device. Alternatively an uplink of a network switch may be coupled to a downlink of a gateway device or an access point etc. A network access device may be an integrated device integrating two or more of these functionalities e.g. router gateway access point and or network switch wired and or wireless.

Referring back to in one embodiment management server works for both single and multi tenant installations meaning that multiple organizations with different network administrators may have network access devices managed by the same management server and network configuration or management can be performed using the same management server but that are firewalled off from each other and do not have access to each other s network configurations. In this example network access devices and network access devices may be associated with or owned by the different organizations and administrated by different network administrators A and B associated with the organizations. Some of network access devices may communicate with each other to form a local mesh network while some of network access devices may communicate with each other to form another local mesh network.

According to one embodiment management server includes a management module and a configuration module to manage and to configure network access devices and to generate management server configuration information for each of network access devices which may be stored in configuration information database . In one embodiment management server provides a user interface such as a Web interface to allow a network administrator such as administrators A and B to create and log into an account associated with an organization to which the network access devices or network access devices belong.

The management server further includes a NAD information database including information regarding the network access devices . In one embodiment the NAD information database includes a serial number and a mechanism to authenticate the network access device s identity e.g. the public key of a private public key pair the private key of which was embedded or stored in the network access device during the manufacturing . NAD information database may be populated different ways in different embodiments e.g. populated by the seller of the network access devices populated by the network administrator . In embodiments in which this information is populated by the seller different ones of these embodiments may associate the information regarding network access devices in the router information database with the user account in different ways example network administrators A and B may provide an order number or invoice number associated with a purchase of network access devices or .

According to one embodiment when a network access device is powered up and attempts entering network the network access device attempts to contact management server . In one embodiment certain device information such as an IP address or domain name service DNS name of management server is stored in the network access device when it is manufactured. In one embodiment when the network access device is powered up the network access device performs any self configuration processes including obtaining an IP address for itself from a dynamic host configuration protocol DHCP facility which address may be a public IP address or may be a private IP address if there is a device performing NAT between the router and the WAN that is to say the network access device is behind a device performing NAT . The network access device then accesses management server based on the server s IP address and authenticates itself e.g. signing a message e.g. including the serial number of the network access device using a private key associated and or stored with the network access device such that management server can authenticate the network access device using the associated public key stored in NAD information database maintained by management server .

In one embodiment each of network access devices creates one or more secure communication channels e.g. a control tunnel with server using the keys downloaded from management server to exchange control traffic such as management messages or notification operating statuses of the network access device etc. Such a tunnel for network management purposes is referred to herein as an mTunnel. In this example network access devices maintain at least one mTunnel with management server and network access devices maintain at least one mTunnel with management server . In one embodiment each of network access devices may maintain a persistent mTunnel with management server . Alternatively only the network access device operating as a gateway device maintains an mTunnel with management server while other network access devices behind the gateway device communicate with the gateway device to share the same mTunnel. Typically a network access device operating as a gateway performs network address translation NAT for its clients which may be a network client device or another network access device.

In one embodiment once a network access device has been successfully authenticated by server the network access device downloads configuration information and stores it in a storage device within the network access device. This download may take place over a secure session layer SSL encrypted session and or the management server may encrypt the data using the public key corresponding to the private key. This secure channel may also be used to receive subsequent configuration updates from management server . According to one embodiment subsequently when there is a change in the configuration such as adding or removing a network access device changing of subnet settings for example by an administrator such as administrators A and B via a Web interface of management server management server is to generate updated configuration information and communicate the updates to the network access devices via their corresponding mTunnels such communication can be done with different mechanisms depending on the embodiment of type of information including a push mechanism a pull mechanism etc. .

A variety of tunneling protocols can be utilized over an mTunnel between a network access device and management server such as for example Internet protocol IP over user datagram protocol UDP IP UDP encapsulation. For example a network management message may be carried as an IP packet and the IP packet may be encapsulated within a UDP packet exchanged between a network access device and management server over a respective mTunnel. In one embodiment an IP packet having one or more network management messages embedded therein may be wrapped with a predetermined mTunnel header and is transmitted within a UDP packet between management server and a network access device even if the network access device is behind a NAT device.

In some configurations if a network access device is behind a firewall that does not allow any UDP packet going through a UDP packet carrying a network management message may be encapsulated within a hypertext transport protocol HTTP referred to herein as UDP over HTTP UDP HTTP . Since most of the firewalls allow Internet traffic using HTTP protocol with a transport control protocol TCP port of 80 it is likely a UDP packet embedded within an HTTP packet having a destination TCP port of 80 can reach management server . In such a configuration when management server receives the HTTP packet it may remove any HTTP header to reveal a UDP packet encapsulated therein. Thereafter an IP packet encapsulated within the UDP packet may be extracted and the network management message within the IP packet can be obtained.

According to one embodiment management server and network access devices associated with an organization such as network access devices may utilize a private or internal set of IP addresses to exchange network management messages via the respective mTunnel or mTunnels. That is the private IP addresses used by management server and network access devices via the respective mTunnel or mTunnels may be in a separate IP address space e.g. 6.x.x.x that is different from an IP address space used between network access devices and their network client devices over LAN s e.g. 10.x.x.x . That is the private IP addresses described herein are only used between management server and network access devices to exchange network management messages over the respective mTunnel s . In this example management server and network access devices using private IP addresses to exchange network management messages over mTunnel s forms a logical network e.g. a logical management network .

Similarly management server and network access devices of another organization in this example may utilize a different set of private or internal IP addresses to exchange network management messages through the respective mTunnel or mTunnels where the private IP addresses may be in a different IP address space than the one of IP addresses used between network access devices and their client devices . Similarly in this example management server and network access devices using private IP addresses to exchange network management messages over mTunnel s forms a logical network e.g. a logical management network . The private IP addresses referred to herein as a first set of private IP addresses used between management server and network access devices may be different than the private IP addresses referred to herein as a second set of private IP addresses between network access devices and management server . The first and second sets of private IP addresses may be in different IP address spaces or in the same IP address space dependent upon the specific configuration.

According to one embodiment when a network access device is powered up and initialized the network access device performs certain self configuration operations to determine whether the network access device should operate as a gateway or as an access point behind a gateway. In one embodiment when a network access device boots up it initializes its Ethernet interface and attempts to request an IP address e.g. a publicly accessible IP address over the Internet also referred to as an uplink IP address by broadcasting its media access control MAC address within a dynamic host configuration protocol DHCP request via its Ethernet interface. If the Ethernet interface of this network access device is connected to the Internet a DHCP server which may be a separate server or part of management server will respond with a valid IP address assignment and the network access device will operates as a gateway device. If there is no DHCP response received within a predetermined period of time the network access device assumes that it is operating behind another gateway device that performs NAT and the network access device then joins an existing network and operates as an access point.

According to one embodiment when operating behind a gateway each of the network access devices derives its own IP address and assigns IP addresses to its client devices using a predetermined method in a consistent manner. In one embodiment a network access device performs a hash operation on at least a portion of its hardware identifier such as a MAC address to generate an IP address. In a particular embodiment a network access device hashes its 6 byte MAC address using a predetermined hash function e.g. CRC 32 hash function to generate lower three bytes of its IP address. Note that each of the network access devices may generate two IP addresses for itself 1 an IP address in a first IP address space e.g. 6.x.x.x solely for communicating network management messages with management server via an mTunnel and 2 an IP address in a second IP address space e.g. 10.x.x.x for normal network traffic with its client devices.

Similarly when a network client device such as client devices requests an IP address the associated network access device hashes a MAC address of the client device to derive an IP address for the client device. Since each of the network access devices performs the same hash operation using the same hash function on a MAC address of a client device the client device can consistently obtain the same IP address from different network access devices. As result the client device can roam across different network access devices without having to change its IP address or to perform any address resolution protocol ARP related operations.

Referring back to as described above network access devices and network access devices are associated with different organizations and managed by management servers . In other configurations network access devices and network access devices may be associated with the same organization as shown as system B in . Referring to in this configurations network access devices and network access devices may be deployed and located at different sites or geographical locations of the organization. According to one embodiment at least one virtual private network VPN tunnel is maintained between at least one of network access devices and at least one of network access devices also referred to as a site to site VPN. Some or all of the network access devices can be configured via configuration interface to participate in the site to site VPN.

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as those set forth in the claims below refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The techniques shown in the figures can be implemented using code and data stored and executed on one or more electronic devices. Such electronic devices store and communicate internally and or with other electronic devices over a network code and data using computer readable media such as non transitory computer readable storage media e.g. magnetic disks optical disks random access memory read only memory flash memory devices phase change memory and transitory computer readable transmission media e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals digital signals .

The processes or methods depicted in the preceding figures may be performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. firmware software e.g. embodied on a non transitory computer readable medium or a combination of both. Although the processes or methods are described above in terms of some sequential operations it should be appreciated that some of the operations described may be performed in a different order. Moreover some operations may be performed in parallel rather than sequentially.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

