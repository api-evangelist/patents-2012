---

title: Presenting visualizations of business intelligence data
abstract: A system and method for managing business intelligence data is described. In some example embodiments, the system extracts data and metadata from a business intelligence file, generates a data bundle of the data and metadata, generates an application bundle based on the date bundle, and generates an interactive document using the data bundle and application bundle.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09536096&OS=09536096&RS=09536096
owner: Business Objects Software Ltd.
number: 09536096
owner_city: Dublin
owner_country: IE
publication_date: 20121217
---
The subject matter disclosed herein generally relates to the processing of data and more specifically to managing and or presenting visualizations of business intelligence data.

Business intelligence BI involves the collecting maintaining and organizing of information for an enterprise such as for a company. An enterprise produces vast amounts of information and uses a BI system to analyze the data produce documents using the data and so on. For example a typical BI system may communicate with a data store of BI data in order to generate documents using BI data such as charts graphs and so on.

The document could be a BI document a report a dashboard and so on. The term report may refer to a document including information automatically retrieved i.e. in response to computer executable instructions from a data source e.g. a database a data warehouse semi structured file and so on where the information is structured in accordance with a report schema or specification that specifies the form in which the information should be aggregated filtered presented and so on. A dashboard is similar to a report and often is a single page showing a graphical presentation of current and past values of key measures of an enterprise among other things.

A system and method for managing business intelligence data are described. In some example embodiments the system extracts data and metadata from a business intelligence file generates a data bundle of the data and metadata generates an application bundle based on the data bundle and generates an interactive document using the data bundle and application bundle.

To extract data from a business intelligence file such as an SAP Visual Intelligence Document file SVID file the system in some example embodiments identifies data components and metadata components contained within the file extracts and converts the metadata into a format that may be consumed by a document preparation component extracts and converts the data into a format that may be consumed by the document preparation component and generates a data bundle that includes the converted metadata and the converted data.

To create rendering instructions to be utilized by the document preparation component the system in some example embodiments receives the extracted and converted data and metadata selects a charting library in which to provide rendering instructions based on the received data and metadata generates the rendering instructions using the selected charting library and generates an application bundle that includes the generated rendering instructions that are based on the received data and metadata.

To generate an interactive document such as a business intelligence or visual intelligence document e.g. interactive chart or graph the system in some example embodiments receives the application bundle and the data bundle encodes the received bundles based on a document viewer used to present generated documents combines the data bundle with the application bundle and generates an interactive document that is displayable by the document viewer e.g. a browser or application running on a computing device such as a laptop or tablet computer .

Thus the system in some example embodiments creates a data bundle and application bundle that is based on the type of data or metadata associated with a business intelligence document which facilitates any document viewer either in online or offline mode displaying single page documents capable of being interacted with by a user of the documents among other benefits.

In the following description for purposes of explanation numerous specific details are set forth to provide a thorough understanding of example embodiments. It will be evident to one skilled in the art however that the present subject matter may be practiced without these specific details.

Any of the machines databases or devices shown in may be implemented in a general purpose computer modified e.g. configured or programmed by software to be a special purpose computer to perform the functions described herein for that machine database or device. For example a computer system able to implement any one or more of the methodologies described herein is discussed below with respect to . As used herein a database is a data storage resource and may store data structured as a text file a table a spreadsheet a relational database e.g. an object relational database a triple store a hierarchical data store or any suitable combination thereof. Moreover any two or more of the machines databases or devices illustrated in may be combined into a single machine and the functions described herein for any single machine database or device may be subdivided among multiple machines databases or devices.

The network may be any network that enables communication between or among machines databases and devices. Accordingly the network may be a wired network a wireless network e.g. a mobile or cellular network a storage area network SAN or any suitable combination thereof. The network may include one or more portions of a private network a public network e.g. the Internet or any suitable combination thereof.

In some example embodiments the data stores contain files of data and metadata in various formats applicable to business intelligence data such as the SAP Visual Intelligence Document SVID format. The data stores may also include various other types of file formats such as spreadsheet based data formats e.g. XLS files visualized data presentations e.g. charts graphs and so on structured data formats semi structured data formats unstructured data formats and so on.

In some example embodiments the metadata includes information on the data that describes the data how the business intelligence file makes use of the data how the business intelligence file is formatted and so on. In some example embodiments the metadata is stored in Extensible Markup Language XML format.

In some example embodiments the document viewers are components configured to display or otherwise present documents pages or other visual content. The document viewers may also facilitate navigation and other interactions with displayed documents. Example document viewers may include web browsers e.g. Firefox Safari Internet Explorer Chrome and so on mobile browsers microbrowsers mobile HTML encoders and so on stand alone viewing applications and other components capable of displaying content using data and instructions on how to render the data.

The document preparation system includes various engines and or components configured to manage business intelligence data for an enterprise such as an extraction engine that extracts data and metadata from business intelligence files stored by the data stores an application engine that generates rendering instructions based on the extracted data and metadata and a presentation engine that creates or otherwise generates interactive documents based on the extracted data and metadata and the generated rendering instructions which are displayed to users via the document viewers . The document preparation system may be included in a server or service in a BI system such as the SAP BusinessObjects BI Platform.

Therefore in some example embodiments the document preparation system includes components configured to extract data and metadata from various different formats of data files and generate interactive documents presentable by various different types of document viewers among other things.

For example is a block diagram illustrating the flow of information in a document preparation system in some example embodiments. The extraction engine extracts data and metadata from a business intelligence data file such as an SVID file. The extraction engine converts the extracted data into a format suitable for consumption by the presentation engine and creates a data bundle that includes the convened data files. The application engine receives the data and metadata or information identifying the format of the data and metadata and creates an application bundle that includes rendering instructions associated with the data and metadata. The presentation engine receives the two bundles and creates an encoded bundle including the data bundle the application bundle and associated rendering instructions. The encoded bundle is embedded into the document viewer which displays an interactive document using the embedded bundle of data and rendering instructions.

As described herein in some example embodiments the systems and methods described herein may extract data from a business intelligence file such as an SAP Visual Intelligence Document file SVID file and convert compress and or package the data into a data bundle that includes a data file format and a metadata file format that is supported by a document viewer. is a block diagram illustrating components of an extraction engine in some example embodiments.

The extraction engine may include an identification module configured and or programmed to identity data and metadata within the business intelligence file. For example the identification module may search or scan within files of a data store such as files having an unknown format for data files and or metadata files and based on the content of the files or the format of the files identify one or more files as data files e.g. data streams or metadata files.

The extraction engine may include a file access module that is configured and or programmed to accesses a file of business intelligence data. For example the file access module may uncompress a BI data file such as a VID file e.g. SVID file in order to gain access to the contents of the BI data file such as data files data stream files spreadsheet files and so on and or metadata files e.g. files in an Extensible Markup Language XML format .

The extraction engine may include a extraction module configured and or programmed to extract data and metadata from the business intelligence files such as data or metadata from files identified by the identification module . The extraction module may include libraries or Application Programming Interfaces APIs configured to uncompress any compressed files e.g. binary SVID files and extract metadata by parsing Extensible Markup Language XML documents or other similar documents and extract data by copying a data stream from the business intelligence files. Thus the extraction module may include or access various extraction tools such as XML parsers e.g. the Streaming API for XML StAX parser a Document Object Model DOM parser and data transfer components among other things. For example the StAX parser is a hybrid event and the DOM parser may be suitable for data sets of various sizes such as smaller data sets.

The extraction engine may include a transformation module configured and or programmed to convex or otherwise transform the extracted data and metadata into a format associated with certain specifications or formats supported by other components within the system such as document viewers the presentation engine and so on. For example the transformation module may convert the extracted metadata into a JavaScript Object Notation JSON or other data interchange format that may be based on a certain business intelligence specification or format and convert the copied data stream into a comma separated values CSV format or other plain text format that may be based on a certain business intelligence specification or format.

The extinction engine may also include a compression module configured and or programmed to compress the files of converted data and metadata into a data bundle and an encryption module configured and or programmed to encrypt the compressed data bundle. For example the encryption module may encrypt the data bundle with a password attributed to and or associated with a user that is creating the interactive document.

Thus before or after compression and encryption the extraction engine may generate a data bundle such as a data bundle binary archive in a lightweight format that may be password protected and consumable by various different components or applications e.g. browsers and other document viewers that support business intelligence document specifications among other things. is a flow diagram illustrating a method for generating a data bundle in some example embodiments. The method may be performed by the extraction engine and accordingly is described herein merely by way of reference thereto. It will be appreciated that the method may be performed on any suitable hardware.

In operation the extraction engine accesses a file of business intelligence data. For example the file access module may uncompress a BI data file such as an SVID file in order to gain access to the contents of the BI data file.

In operation the extraction engine identifies data files and metadata files within the accessed file. For example the identification module identifies various data files such as files that include data tables and identifies various metadata files such as XML documents.

In operation the extraction engine extracts the metadata from the identified metadata files. For example the extraction module extracts the metadata using a parser such as an XML parser. In operation the extraction engine transforms and or converts the extracted metadata into a format associated with a business intelligence specification such as a specification associated with BI documents and components configured to display interactive documents. For example the transformation module converts the extracted metadata from a first specific format e.g. XML into another format e.g. JSON consumable by document viewers and other components.

In operation the extraction engine extracts the data from the identified data files. For example the extraction module extracts the data by copying the data from a data stream file. In operation the extraction engine transforms and or converts the extracted data into a format associated with a business intelligence specification such as a specification associated with BI documents and components configured to display interactive documents. For example the transformation module converts the extracted data into a CSV format or other consumable format.

In operation the extraction engine compresses the transformed data and the transformed metadata into a data bundle. For example the compression module creates a compressed data bundle e.g. data.bundle binary data file and so on of the metadata in the JSON format and the data in the CSV format.

In operation the extraction engine encrypts the data bundle. For example the encryption module encrypts the compressed data bundle using a password or other security measure such as a password attributed to and or supplied by a user that is associated with the file of business intelligence data and or that is creating the data bundle. In some example embodiments the encryption is a symmetric encryption scheme such as the Advanced Encryption Standard.

Thus in some example embodiments the system extracts data and metadata from BI documents such as SAP Visual Intelligence Documents and creates consumable data bundles with the extracted data and metadata. For example the system may provide a web based application that leverages various APIs and or libraries in order to extract the data and metadata such as an application that includes a user interface configured to receive documents and files e.g. a user drags and drops files into the UI and convert the documents and files into the compressed encrypted consumable data bundles described herein.

As described herein in some example embodiments the systems and methods described herein may generate rendering instructions to be utilized in presenting interactive BI documents and create an application bundle that is based on an associated data bundle among other things. is a block diagram illustrating components of the application engine in some example embodiments.

The application engine may include a library module that is configured and or programmed to identify determine and or select a data library in which to generate rendering instructions. For example the library module may automatically select one or mare charting libraries e.g. D3.js Rapha l jqPlot ProtoVis or another JavaScript library may provide a user interface that enables a user to select a charting library and so on.

The application engine may include a rendering module that is configured and or programmed to generate rendering files using the selected library and based on the extracted metadata. For example the rendering module may generate an HTML markup file a CSS stylesheet and JavaScript code using a selected library and based on receiving information identifying the format of the converted metadata within the data bundle is a JSON format.

The application engine may include an application bundle module that is configured and or programmed to create an application bundle with contents that include the files generated by the rendering module . For example the application bundle module may compress the generated HTML markup file the CSS stylesheet and the JavaScript code into a compressed binary bundle such as an app.bundle archive.

In operation the application engine receives information associated with the data and metadata within a generated data bundle. For example the system receives information identifying the format of the metadata and or the format of the data within the data bundle.

In operation the application engine selects a charting library. For example the library module selects a charting library to be used in generating rendering instructions. In operation the application engine generates rendering instructions. For example the rendering module file uses the selected library and the information identifying the format of the metadata to generate rendering instructions e.g. HTML markup files CSS stylesheets JavaScript code and so on .

In operation the application engine creates a bundle of rendering instructions. For example the application bundle module compresses the different files of the rendering instructions into a binary app.bundle file which includes files that match the format of the metadata within the data bundle.

Thus by creating application bundles along with the data bundles described herein the system in some example embodiments provides bundles of data and rendering instructions for visual interactive documents which enables the packaging and sharing of these interactive documents in various use scenarios such as when a user is offline and presenting the interactive documents among other benefits.

As described herein in some example embodiments the systems and methods described herein may generate an interactive document such as a BI or visual intelligence document e.g. interactive chart or graph using BI data packages such as the data bundles and the application bundles described herein. is a block diagram illustrating components of a presentation engine in some example embodiments.

The presentation engine may include a bundle encode module configured and or programmed to encode a data bundle and or application bundle. For example the bundle encode module may apply Base64 encoding to convert the bundles which may be in a binary format into textual representations. The system may encode the bundles in various cases for example when a document viewer protocol is configured to display certain formats e.g. an email application that displays ASCII printable characters .

The presentation engine may include a presentation module that is configured and or programmed to embed the encoded data bundle and encoded application bundle into a document viewer for presentation of an interactive document via the document viewer .

As described herein the document viewer may include a variety of different components e.g. browsers transcoders and so on capable of displaying interactive documents such as displaying interactive documents as single page web based applications. Thus in some example embodiments the system may generate data bundles and or application bundles based on specifications and or formats supported by a target document viewer .

However in some example embodiments the document viewer may include various components configured to display interactive documents derived from data bundles and application bundles. To that end the presentation endue and its components e.g. the bundle encode module and or the presentation module may be contained in or be part of a stand alone document viewer among other things.

For example the system may provide a generic document viewer e.g. HTML5 based that is configured to receive data bundles and application bundles in a variety of different formats combine the data bundle with the application bundle optionally caching any combined data and present BI data as single page interactive documents among other things.

The presentation engine may include various modules configured to enable a document viewer to display BI documents from data and application bundles such as modules that enable the document viewer to provide interactive documents while offline modules that enable the document viewer to update and or retrieve additional data not located within the data bundles and so on.

The presentation engine may include a mode module configured and or programmed to switch a document viewer from an online mode to an offline module and vice versa. For example the mode module may switch the document viewer into an online mode which allows the viewer to retrieve data from various sources e.g. cloud data stores over a network such as data sources that are identified in the metadata of the data bundle. The document viewer therefore may operate in offline mode when the data contained within the data bundle is utilized in presenting visualized BI data and operate in online mode when additional data not contained within the data bundle is requested such as when updated data is requested during presentation of visual information.

The presentation engine may include an aggregation module configured and or programmed to perform aggregation queries within various data sets enabling the document viewer to receive user queries into the data of a data bundle and provide results of the queries. The aggregation module may include an in viewer column oriented database engine such as a JavaScript implemented database engine to support such aggregation queries. Example database engines or libraries include Datavore CrossFilter and others.

The document viewer may provide other modules and or functions. For example the viewer may provide functionality that enables a user to save or store a presented document in a certain state such as via an API that enables the viewer to access a persistence layer from the application bundle and later load the presented document in the previous state if requested.

Thus the system may utilize a stand alone bundle specific document viewer that includes some or all modules of the presentation engine or interact with a browser or other document viewer via the presentation engine among other things. is a flow diagram illustrating a method for generating an interactive document in some example embodiments. The method may be performed by the presentation engine and accordingly is described herein merely by way of reference thereto. It will be appreciated that the method may be performed on any suitable hardware.

In operation the presentation engine accesses a data bundle and an application bundle. For example a stand alone document viewer accesses a data bundle and an application bundle. In operation the presentation engine encodes the bundles. For example the bundle encode module applies Base64 encoding to convert the data bundle and the metadata bundle from a binary format to a textual format.

In operation the presentation engine combines the data bundle and the application bundle. For example the presentation module combines or otherwise embeds the data and metadata from the data bundle with the rendering instructions. In operation the presentation engine embeds the rendering instructions into the document viewer in order to generate an interactive document to be displayed by the document viewer. For example the presentation module embeds the rendering instructions into the document viewer which may then display the interactive document based on the embedded rendering instructions and data combined with the rendering instructions.

As described herein in some example embodiments the system protects the business intelligence data by encrypting the data bundle with a password such as a user supplied password. When generating documents the system may partially render a document using the rendering instructions provided by the application bundle and fully render the document using data from the data bundle after a password is provided by a user. is a flow diagram illustrating a method for generating an interactive document based on a partially rendered document in some example embodiments. The method may be performed by the presentation engine and accordingly is described herein merely by way of reference thereto. It will be appreciated that the method may be performed on any suitable hardware.

In operation the viewer receives an encoded data bundle and application bundle with associated rendering instructions. In operation the viewer partially renders an interactive document using rendering instructions provided by the application bundle. In parallel the viewer in operation requests and receives credentials from a user such as the password used to encrypt the data bundle. In response to receiving the password the viewer in operation decrypts and provides the data bundle.

In operation the viewer combines the decrypted data bundle with the application bundle and in operation generates an interactive document to be displaced via a document viewer. Thus in order to display a document immediately or soon after receiving a password that secures a document the system partially renders the document using the rendering instructions before or while a password is being requested and or received and combines data with the partially rendered document in response to receiving a password that authorizes a user to display the document.

The machine includes a processor e.g. a central processing unit CPU a graphics processing unit GPU a digital signal processor DSP an application specific integrated circuit ASIC a radio frequency integrated circuit RFIC or any suitable combination thereof a main memory and a static memory which are configured to communicate with each other via a bus . The machine may further include a graphics display e.g. a plasma display panel PDP a light emitting diode LED display a liquid crystal display LCD a projector or a cathode ray tube CRT . The machine may also include an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse a touchpad a trackball a joystick a motion sensor or other pointing instrument a storage unit a signal generation device e.g. a speaker and a network interface device .

The storage unit includes a machine readable medium on which is stored the instructions embodying any one or more of the methodologies or functions described herein. The instructions may also reside completely or at least partially within the main memory within the processor e.g. within the processor s cache memory or both during execution thereof by the machine . Accordingly the main memory and the processor may be considered as machine readable media. The instructions may be transmitted or received over a network e.g. network via the network interface device .

As used herein the term memory refers to a machine readable medium able to store data temporarily or permanently and may be taken to include but not be limited to random access memory RAM read only memory ROM buffer memory flash memory and cache memory. While the machine readable medium or computer readable medium is shown in an example embodiment to be a single medium the term machine readable medium or computer readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database or associated caches and servers able to store instructions. The term machine readable medium or computer readable medium shall also be taken to include any medium or combination of multiple media that is capable of storing instructions for execution by a machine or computer e.g. machine such that the instructions when executed by one or more processors of the machine or computer e.g. processor cause the machine or computer to perform any one or more of the methodologies described herein. Accordingly a machine readable medium refers to a single storage apparatus or device as well as cloud based storage systems or storage networks that include multiple storage apparatuses or devices. The term machine readable medium shall accordingly be taken to include but not be limited to one or more data repositories in the form of a solid state memory an optical medium a magnetic medium or any suitable combination thereof.

Throughout this specification plural instances may implement components operations or structures described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations one or more of the individual operations may be performed concurrently and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in example configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the subject matter herein.

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable medium or in a transmission signal or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain physical manner. In various example embodiments one or more computer systems e.g. a standalone computer system a client computer system or a server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In some example embodiments a hardware module may be implemented mechanically electronically or any suitable combination thereof. For example a hardware module may include dedicated circuitry or logic that is permanently configured to perform certain operations. For example a hardware module may be a special purpose processor such as a field programmable gate array FPGA or an ASIC. A hardware module may also include programmable logic or circuitry that is temporarily configured by software to perform certain operations. For example a hardware module may include software encompassed within a general purpose processor or other programmable processor. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the phrase hardware module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner or to perform certain operations described herein. As used herein hardware implemented module refers to a hardware module. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where a hardware module comprises a general purpose processor configured by software to become a special purpose processor the general purpose processor may be configured as respectively different special purpose processors e.g. comprising different hardware modules at different times. Software may accordingly configure a processor for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Hardware modules can provide information to and receive information from other hardware modules. Accordingly the described hardware modules may be regarded as being communicatively coupled. Where multiple hardware modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses between or among two or more of the hardware modules. In embodiments in which multiple hardware modules are configured or instantiated at different times communications between such hardware modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple hardware modules have access. For example one hardware module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware module may then at a later time access the memory device to retrieve and process the stored output. Hardware modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions described herein. As used herein processor implemented module refers to a hardware module implemented using one or more processors.

Similarly the methods described herein may be at least partially processor implemented with a processor being an example of hardware. For example at least some of the operations of a method may be performed by one or more processors or processor implemented modules. Moreover the one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as a software as a service SaaS . For example at least some of the operations may be performed by a group of computers as examples of machines including processors with these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. an API .

The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the one or more processors or processor implemented modules may be located in a single geographic location e.g. within a home environment an office environment or a server farm . In other example embodiments the one or more processors or processor implemented modules may be distributed across a number of geographic locations.

Some portions of the subject matter discussed herein may be presented in terms of algorithms or symbolic representations of operations on data stored as bits or binary digital signals within a machine memory e.g. a computer memory . Such algorithms or symbolic representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. As used herein an algorithm is a self consistent sequence of operations or similar processing leading to a desired result. In this context algorithms and operations involve physical manipulation of physical quantities. Typically but not necessarily such quantities may take the form of electrical magnetic or optical signals capable of being stored accessed transferred combined compared or otherwise manipulated by a machine. It is convenient at times principally for reasons of common usage to refer to such signals using words such as data content bits values elements symbols characters terms numbers numerals or the like. These words however are merely convenient labels and are to be associated with appropriate physical quantities.

Unless specifically stated otherwise discussions herein using words such as processing computing calculating determining presenting displaying or the like may refer to actions or processes of a machine e.g. a computer that manipulates or transforms data represented as physical e.g. electronic magnetic or optical quantities within one or more memories e.g. volatile memory non volatile memory or any suitable combination thereof registers or other machine components that receive store transmit or display information. Furthermore unless specifically stated otherwise the terms a or an are herein used as is common in patent documents to include one or more than one instance. Finally as used herein the conjunction or refers to a non exclusive or unless specifically stated otherwise.

