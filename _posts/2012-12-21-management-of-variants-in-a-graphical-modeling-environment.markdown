---

title: Management of variants in a graphical modeling environment
abstract: A device receives variants associated with a model generated in a graphical modeling environment, and determines a hierarchy of the variants based on a hierarchy of the model. The device receives mode information for the variants, where the mode information includes a subset of a number of variant permutations. For each mode, the device receives control variables for the variants and optional constraints for the variants in the mode. The control variables define which variants are active, and the optional constraints ensure modeling correctness by enabling identification of conflicts between the variants. The device generates a variant manager tool based on the hierarchy of the variants, the mode information, the control variables, and the optional constraints, and outputs or stores variant information via the variant manager tool.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09378562&OS=09378562&RS=09378562
owner: The MathWorks, Inc.
number: 09378562
owner_city: Natick
owner_country: US
publication_date: 20121221
---
The accompanying drawings which are incorporated in and constitute a part of this specification illustrate one or more implementations and together with the description explain these implementations. In the drawings 

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

A technical computing environment TCE may provide a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that requires the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In one example a TCE may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations.

The TCE may provide a graphical programming or modeling environment e.g. a block diagram environment that includes variants. The variants may enable an individual portion e.g. a block an element a component a module etc. of a graphical model to have multiple implementations that may be swapped in and out by a user of the TCE. Within the modeling environment a block e.g. a subsystem a model reference etc. may have multiple variants that are programmatically controlled. For a large scale model a number of variants may become extremely large. Thus a number of possible variant permutations for the model may be high and the model may be difficult to manage. This may adversely affect how quickly the model is developed as well as the model s integrity.

Systems and or methods described herein may provide for management of variants in a graphical modeling environment. In one example the systems and or methods may manage the variants by providing defined modes that are subsets of variant permutations and by enabling the modes to be displayed and or navigated. The systems and or methods may enable constraints to be defined for the variants to ensure that incompatible variant selections are identified.

The variant manager component may determine a hierarchy of the variants included in the TCE model and may determine modes for the variants included in the TCE model. The hierarchy of the variants may include a listing of the variants provided in an order according to the hierarchy of elements of the TCE model with which the variants are associated. A mode or configuration of the variant manager may include a subset of a number of variant permutations. The variant manager component may determine control variables for the variants and may determine constraints for the variants. The control variables may include variables used to control which variants are active in the TCE model. The constraints may ensure that incompatible variant selections are identified. The variant manager component may generate a variant manager tool based on the hierarchy of the variants the modes for the variants the control variables for the variants and or the constraints for the variants.

The variant manager component may output e.g. display and or store the variant manager tool. In one example as shown in the variant manager tool may include a variant hierarchy section e.g. a window for displaying the hierarchy of the variants and a modes section for displaying the modes for the variants. Alternatively or additionally the variant manager tool may include a control variables section that displays the control variables for the variants and a constraints section that displays the constraints for the variants.

The terms code and program code as used herein are to be used interchangeably and are to be broadly interpreted to include text based code that may not require further processing to execute e.g. C code Hardware Description Language HDL code very high speed integrated circuits VHSIC HDL VHDL code Verilog Java and or other types of hardware or software based code that may be compiled and or synthesized binary code that may be executed e.g. executable files that may directly be executed by an operating system bitstream files that can be used to configure a field programmable gate array FPGA Java byte code object files combined together with linker directives source code makefiles etc. text files that may be executed in conjunction with other executables e.g. Python text files a collection of dynamic link library DLL files with text based combining configuration information that connects pre compiled modules an extensible markup language XML file describing module linkage etc. etc. In one example code may include different combinations of the above identified classes e.g. text based code binary code text files etc. . Alternatively or additionally code may include code generated using a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations. Alternatively or additionally code may be of any type such as function script object etc. and a portion of code may include one or more characters lines etc. of the code.

Client device may include one or more devices that are capable of communicating with server device via network . For example client device may include a laptop computer a personal computer a tablet computer a desktop computer a workstation computer a smart phone a personal digital assistant PDA and or other computation and communication devices.

Server device may include one or more server devices or other types of computation and communication devices that gather process and or provide information in a manner described herein. Server device may include a device that is capable of communicating with client device e.g. via network . In one example server device may include one or more laptop computers personal computers workstation computers servers central processing units CPUs graphical processing units GPUs application specific integrated circuits ASICs field programmable gate arrays FPGAs etc. and or software e.g. a simulator executing on the aforementioned devices. In one example server device may include TCE and may perform some or all of the functionality described herein for client device . Alternatively server device may be omitted and client device may perform all of the functionality described herein for client device .

Network may include a network such as a local area network LAN a wide area network WAN a metropolitan area network MAN a telephone network such as the Public Switched Telephone Network PSTN an intranet the Internet or a combination of networks.

TCE may be provided within a computer readable medium of client device . Alternatively or additionally TCE may be provided in another device e.g. server device that is accessible by client device . TCE may include hardware or a combination of hardware and software that provides a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that required the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In one implementation TCE may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations.

For example TCE may use an array as a basic element where the array may not require dimensioning. These arrays may be used to support array based programming where an operation may apply to an entire set of values included in the arrays. Array based programming may allow array based operations to be treated as high level programming that may allow for example operations to be performed on entire aggregations of data without having to resort to explicit loops of individual non array operations. In addition TCE may be adapted to perform matrix and or vector formulations that can be used for data analysis data visualization application development simulation modeling algorithm development etc. These matrix and or vector formulations may be used in many areas such as statistics image processing signal processing control design life sciences modeling discrete event analysis and or design state based analysis and or design etc.

TCE may further provide mathematical functions and or graphical tools e.g. for creating plots surfaces images volumetric representations etc. . In one implementation TCE may provide these functions and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . Alternatively or additionally TCE may provide these functions as block sets or in another way such as via a library etc.

TCE may be implemented as a text based environment e.g. MATLAB software Octave Python Comsol Script MATRIXx from National Instruments Mathematica from Wolfram Research Inc. Mathcad from Mathsoft Engineering Education Inc. Maple from Maplesoft Extend from Imagine That Inc. Scilab from The French Institution for Research in Computer Science and Control INRIA Virtuoso from Cadence Modelica or Dymola from Dynasim etc. a graphically based environment e.g. Simulink software Stateflow software SimEvents software Simscape software etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments Dymola by Dynasim SoftWIRE by Measurement Computing WiT by DALSA Coreco VEE Pro or SystemVue by Agilent Vision Program Manager from PPT Vision Khoros from Khoral Research Gedae by Gedae Inc. Scicos from INRIA Virtuoso from Cadence Rational Rose from IBM Rhopsody or Tau from Telelogic Ptolemy from the University of California at Berkeley aspects of a Unified Modeling Language UML or SysML environment etc. or another type of environment such as a hybrid environment that includes one or more of the above referenced text based environments and one or more of the above referenced graphically based environments.

TCE may include a programming language e.g. the MATLAB language that may be used to express problems and or solutions in mathematical notations. The programming language may be dynamically typed and or array based. In a dynamically typed array based computing language data may be contained in arrays and data types of the data may be determined e.g. assigned at program execution time.

For example suppose a program written in a dynamically typed array based computing language includes the following statements 

Now suppose the program is executed for example in a TCE such as TCE . During run time when the statement A hello is executed the data type of variable A may be a string data type. Later when the statement A int32 1 2 is executed the data type of variable A may be a 1 by 2 array containing elements whose data type are 32 bit integers. Later when the statement A 1.1 2.2 3.3 is executed since the language is dynamically typed the data type of variable A may be changed from the above 1 by 2 array to a 1 by 3 array containing elements whose data types are floating point. As can be seen by this example data in a program written in a dynamically typed array based computing language may be contained in an array. Moreover the data type of the data may be determined during execution of the program. Thus in a dynamically type array based computing language data may be represented by arrays and data types of data may be determined at run time.

TCE may provide mathematical routines and a high level programming language suitable for non professional programmers and may provide graphical tools that may be used for creating plots surfaces images volumetric representations or other representations. TCE may provide these routines and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . TCE may also provide these routines in other ways such as for example via a library local or remote database e.g. a database operating in a computing cloud remote procedure calls RPCs and or an application programming interface API . TCE may be configured to improve runtime performance when performing computing operations. For example TCE may include a just in time JIT compiler.

Although shows example components of environment in other implementations environment may include fewer components different components differently arranged components and or additional components than those depicted in . Alternatively or additionally one or more components of environment may perform one or more other tasks described as being performed by one or more other components of environment .

Processing unit may include one or more processors microprocessors or other types of processing units that may interpret and execute instructions. Main memory may include one or more random access memories RAMs or other types of dynamic storage devices that may store information and or instructions for execution by processing unit . ROM may include one or more ROM devices or other types of static storage devices that may store static information and or instructions for use by processing unit . Storage device may include a magnetic and or optical recording medium and its corresponding drive.

Input device may include a mechanism that permits a user to input information to device such as a keyboard a camera an accelerometer a gyroscope a mouse a pen a microphone voice recognition and or biometric mechanisms a remote control a touch screen a neural interface etc. Output device may include a mechanism that outputs information to the user including a display a printer a speaker etc. Communication interface may include any transceiver like mechanism that enables device to communicate with other devices networks and or systems. For example communication interface may include mechanisms for communicating with another device or system via a network.

As described herein device may perform certain operations in response to processing unit executing software instructions contained in a computer readable medium such as main memory . A computer readable medium may be defined as a non transitory memory device. A memory device may include space within a single physical memory device or spread across multiple physical memory devices. The software instructions may be read into main memory from another computer readable medium such as storage device or from another device via communication interface . The software instructions contained in main memory may cause processing unit to perform processes described herein. Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

Although shows example components of device in other implementations device may include fewer components different components differently arranged components and or additional components than depicted in . Alternatively or additionally one or more components of device may perform one or more other tasks described as being performed by one or more other components of device .

Block diagram editor may include hardware or a combination of hardware and software that may be used to graphically specify models of dynamic systems. In one implementation block diagram editor may permit a user to perform actions such as construct edit display annotate save and or print a graphical model e.g. a block diagram that visually and or pictorially represents a dynamic system . In another implementation block diagram editor may permit a user to create and or store data relating to graphical entities .

A textual interface may be provided to permit interaction with block diagram editor . A user may write scripts that perform automatic editing operations on a model using the textual interface. For example the textual interface may provide a set of windows that may act as a canvas for the model and may permit user interaction with the model. A model may include one or more windows depending on whether the model is partitioned into multiple hierarchical levels.

Graphical entities may include hardware or a combination of hardware and software that may provide entities e.g. signal lines buses etc. that represent how data may be communicated between functional and or non functional units and blocks of a model. Blocks may include fundamental mathematical elements of a block diagram model.

Execution engine may include hardware or a combination of hardware and software that may process a graphical model to produce simulation results may convert the graphical model into executable code and or may perform other analyses and or related tasks. In one implementation for a block diagram graphical model execution engine may translate the block diagram into executable entities e.g. units of execution following the layout of the block diagram. The executable entities may be compiled and or executed on a device e.g. client device to implement the functionality specified by the model.

Graphical models may include entities with relationships between the entities and the relationships and or the entities may have attributes associated with them. The entities may include model elements such as blocks and ports. The relationships may include model elements such as lines e.g. connector lines and references. The attributes may include model elements such as value information and meta information for the model element associated with the attributes. Graphical models may be associated with configuration information. The configuration information may include information for the graphical model such as model execution information e.g. numerical integration schemes fundamental execution period etc. model diagnostic information e.g. whether an algebraic loop should be considered an error or result in a warning model optimization information e.g. whether model elements should share memory during execution model processing information e.g. whether common functionality should be shared in code that is generated for a model etc.

Additionally or alternatively a graphical model may have executable semantics and or may be executable. An executable graphical model may be a time based block diagram. A time based block diagram may consist for example of blocks e.g. blocks connected by lines e.g. connector lines . The blocks may consist of elemental dynamic systems such as a differential equation system e.g. to specify continuous time behavior a difference equation system e.g. to specify discrete time behavior an algebraic equation system e.g. to specify constraints a state transition system e.g. to specify finite state machine behavior an event based system e.g. to specify discrete event behavior etc. The lines may represent signals e.g. to specify input output relations between blocks or to specify execution dependencies between blocks variables e.g. to specify information shared between blocks physical connections e.g. to specify electrical wires pipes with volume flow rigid mechanical connections etc. etc. The attributes may consist of meta information such as sample times dimensions complexity whether there is an imaginary component to a value data type etc. associated with the model elements.

In a time based block diagram ports may be associated with blocks e.g. blocks . A relationship between two ports may be created by connecting a line e.g. a connector line between the two ports. Lines may also or alternatively be connected to other lines for example by creating branch points. For instance three or more ports can be connected by connecting a line to each of the ports and by connecting each of the lines to a common branch point for all of the lines. A common branch point for the lines that represent physical connections may be a dynamic system e.g. by summing all variables of a certain type to 0 or by equating all variables of a certain type . A port may be an input port an output port an enable port a trigger port a function call port a publish port a subscribe port an exception port an error port a physics port an entity flow port a data flow port a control flow port etc.

Relationships between blocks e.g. blocks may be causal and or non causal. For example a model may include a block that represents a continuous time integration block that may be causally related to a data logging block by using a line e.g. a connector line to connect an output port of the continuous time integration block to an input port of the data logging block. Further during execution of the model the value stored by the continuous time integrator may change as the current time of the execution progresses. The value of the state of the continuous time integrator may be available on the output port and the connection with the input port of the data logging block may make this value available to the data logging block.

A sample time may be associated with the elements of a graphical model. For example a graphical model may include a block e.g. block with a continuous sample time such as a continuous time integration block that may integrate an input value as time of execution progresses. This integration may be specified by a differential equation. During execution the continuous time behavior may be approximated by a numerical integration scheme that is part of a numerical solver. The numerical solver may take discrete steps to advance the execution time and these discrete steps may be constant during an execution e.g. fixed step integration or may be variable during an execution e.g. variable step integration .

Alternatively or additionally a graphical model may include a block e.g. block with a discrete sample time such as a unit delay block that may output values of a corresponding input after a specific delay. This delay may be a time interval and this interval may determine a sample time of the block. During execution the unit delay block may be evaluated each time the execution time has reached a point in time where an output of the unit delay block may change. These points in time may be statically determined based on a scheduling analysis of the graphical model before starting execution.

Alternatively or additionally a graphical model may include a block e.g. block with an asynchronous sample time such as a function call generator block that may schedule a connected block to be evaluated at a non periodic time. During execution a function call generator block may evaluate an input and when the input attains a specific value when the execution time has reached a point in time the function call generator block may schedule a connected block to be evaluated at this point in time and before advancing execution time.

Further the values of attributes of a graphical model may be inferred from other elements of the graphical model or attributes of the graphical model. For example the graphical model may include a block e.g. block such as a unit delay block that may have an attribute that specifies a sample time of the block. When a graphical model has an execution attribute that specifies a fundamental execution period the sample time of the unit delay block may be inferred from this fundamental execution period.

As another example the graphical model may include two unit delay blocks e.g. blocks where the output of the first of the two unit delay blocks is connected to the input of the second of the two unit delay block. The sample time of the first unit delay block may be inferred from the sample time of the second unit delay block. This inference may be performed by propagation of model element attributes such that after evaluating the sample time attribute of the second unit delay block a graph search proceeds by evaluating the sample time attribute of the first unit delay block since it is directly connected to the second unit delay block.

The values of attributes of a graphical model may be set to characteristics settings such as one or more inherited settings one or more default settings etc. For example the data type of a variable that is associated with a block e.g. block may be set to a default such as a double. Because of the default setting an alternate data type e.g. a single an integer a fixed point etc. may be inferred based on attributes of elements that the graphical model comprises e.g. the data type of a variable associated with a connected block and or attributes of the graphical model. As another example the sample time of a block may be set to be inherited. In case of an inherited sample time a specific sample time may be inferred based on attributes of elements that the graphical model comprises and or attributes of the graphical model e.g. a fundamental execution period .

Although shows example functional components of TCE in other implementations TCE may include fewer functional components different functional components differently arranged functional components and or additional functional components than depicted in . Alternatively or additionally one or more functional components of TCE may perform one or more other tasks described as being performed by one or more other functional components of TCE .

As further shown in variant manager component may receive a model generated by TCE . TCE model may include a block diagram model with one or more model elements e.g. blocks one or more inputs and one or more outputs. Each of the model elements may include a representation e.g. a block of a hardware device a system a subsystem etc. of a system being modeled by TCE . In one example TCE model may include multiple variants that enable an individual portion of TCE model to have multiple implementations that may be swapped in and out by a user of TCE .

In one example implementation variant manager component may determine a hierarchy of variants included in TCE model and may receive or determine modes for variants included in TCE model . The hierarchy of variants may include a listing of variants provided in an order according to a hierarchy of elements of TCE model with which variants are associated. A mode of a variant may include a subset of a number of variant permutations. The modes for variants may simplify creation of large scale models by defining a finite set in which TCE model may operate. Each mode may include values of all control variables used by variants in TCE model . A user of TCE may create a new mode and may select variants to be active within the new mode. The modes for variants may permit explicit overriding of particular variants so that other variants may be activated. Each mode may also be associated with a set of variant constraints.

Variant manager component may receive or determine control variables for variants and may receive or determine constraints for variants . The control variables may include variables used to control which variants are active in TCE model . The constraints may ensure that conflicting variant conditions are identified and prevented e.g. a U.S. emissions system cannot be combined with a drive train for a California car since U.S. emissions standards do not meet California emissions standards . Variant manager component may generate a variant manager tool based on the hierarchy of variants the modes for variants the control variables for variants and or the constraints for variants . In one example variant manager tool may be hierarchical and may be associated with one or more TCE models .

Variant manager component may output e.g. display and or store variant manager tool . In one example as shown in variant manager tool may include a variant hierarchy section e.g. a window for displaying the hierarchy of variants and a modes section for displaying the modes for variants . The hierarchy of variants may be displayed and navigable via a tree view a two dimensional graph a three dimensional graph etc. Alternatively or additionally variant manager tool may include a control variables section that displays the control variables for variants and a constraints section that displays the constraints for variants . Further details of variant manager tool are provided below in connection with for example one or more of .

Although shows example operations capable of being performed by TCE in other implementations TCE may perform fewer operations different operations and or additional operations than depicted in . Alternatively or additionally one or more components of may perform one or more other tasks described as being performed by one or more other components of .

Hierarchy component may receive TCE code and variants and may determine a hierarchy for variants . Hierarchy may include a listing of variants provided in an order according to the hierarchy of elements of TCE model with which variants are associated. For example hierarchy component may examine a block hierarchy of TCE model may determine which blocks are associated with variants and may determine hierarchy based on the block hierarchy of TCE model and the determined blocks. As further shown in hierarchy component may provide hierarchy to variant manager creator component .

Mode component may receive TCE code and variants and may determine mode information for variants . Mode information may include information describing a subset of a number of variant permutations e.g. a number of different options associated with a variant information defining a finite set in which TCE model may operate values of all control variables used by variants in TCE model etc. As further shown in mode component may provide mode information to variant manager creator component .

Control variables component may receive TCE code and variants and may determine control variables for variants . Control variables may include variables used to control which variants are active in TCE model . As further shown in control variables component may provide control variables to variant manager creator component .

Constraints component may receive TCE code and variants and may determine constraints for variants . Constraints may include information that ensures that conflicting variant conditions are identified and prevented. For example if TCE model relates to a vehicle manufacturing facility constraints may prevent an engine for a truck from being provided in an automobile. As further shown in constraints component may provide constraints to variant manager creator component .

Validate component may receive TCE code and variants and may determine validation information for variants . In one example validate component may receive e.g. from a user of TCE a request to validate variants in TCE model and may determine whether there are any variant violation s based on the request. A variant violation may occur when constraints are violated by variants when control variables set incorrect variants to an active state etc. Validate component may display any variant violation s e.g. validation information to the user of TCE . As further shown in validate component may provide validation information to variant manager creator component .

Variant manager creator component may receive hierarchy of variants mode information control variables constraints and validation information . Variant manager creator component may generate variant manager tool based on hierarchy of variants mode information control variables constraints and or validation information . Variant manager creator component may output e.g. display and or store variant manager tool .

Although shows example functional components of variant manager component in other implementations variant manager component may include fewer functional components different functional components differently arranged functional components and or additional functional components than depicted in . Alternatively or additionally one or more functional components of variant manager component may perform one or more other tasks described as being performed by one or more other functional components of variant manager component .

As shown in user interface may include a variety of information associated with TCE model . For example user interface may include a model with variant subsystems and variant model blocks. For example TCE model may include a set point block a controller block and a plant block .

Set point block may include a block that generates a reference signal and provides the reference signal to controller block . Controller block may include a subsystem block that receives the reference signal from set point block and receives left and right signals from plant block . Controller block may control plant block based on the received signals. Plant block may include a block that includes a left sensor for generating the left signal and a right sensor for generating the right signal.

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

If a user of TCE model selects controller block user interface may be displayed to the user. As shown in user interface may include a variety of information associated with controller block . For example controller block may include a left controller model block a right controller model block a combiner block and other blocks . Controller block may be considered a subsystem block since it includes a dynamic system created from other blocks.

Left controller model block may reference another model where the referenced model may provide implementations for the block. Furthermore block may include variant information that enables a user to programmatically control which model is referenced. The variant information may be set up as described below in connection with . Right controller model block may include variant information. Combiner block may include a variant subsystem block that includes the features described below in connection with . Other blocks may include other blocks associated with controller block such as for example a variant start block a saturation block a variant end block etc.

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

A user of TCE model may set up left controller model block with user interface . In one example a user may access user interface by selecting a menu option by right clicking left controller model block and selecting an option etc. As shown in user interface may include a variety of information associated with left controller model block . For example user interface may include a section to select variant choices for left controller model block a section to specify model parameters for selected variants and a section to specify a simulation mode for left controller model block .

Section may enable left controller model block to reference either a linear control model e.g. linear ctrl or a nonlinear control model e.g. nonlinear ctrl . As shown in left controller model block may reference e.g. use the linear control model when a LINEAR variant is true e.g. when left ctrl mode 1 . Left controller model block may reference the nonlinear control model when a NONLINEAR variant is true e.g. when left ctrl mode 2 . A variant may be programmatically selected by an expression e.g. left ctrl mode 1 . The expression may be a simple equality a complex set of Boolean algebra e.g. X Y left ctrl mode 1 speed FAST which is an expression of variants X and Y scalars e.g. left ctrl mode enumeration types and any general purpose expression e.g. a condition that results in a Boolean true or false.

Alternatively or additionally the expression may be identified by a name e.g. LINEAR may be used to describe the left ctrl mode 1 expression that may be an object. For example variant objects may be created such as LINEAR Model.Variant left ctrl mode 1 . Independent variables within the expression may be referred to as variant control variables because changing their values changes the active variant. For example setting the left control mode to one e.g. left ctrl mode 1 may cause the LINEAR variant to be active. The variant choices in section may enable a user to programmatically swap out different implementations by for example changing the value of a variable e.g. left ctrl mode that is external to TCE model .

Section may enable a user to specify model parameters e.g. a model name model arguments model argument values etc. for variants selected in section . Section may enable a user to specify a simulation mode e.g. normal accelerated etc. for variants selected in section .

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

If a user of TCE model selects combiner block user interface may be displayed to the user. As shown in user interface may include a variety of information associated with combiner block . For example combiner block may include a low fidelity combiner block and a high fidelity combiner block .

Low fidelity combiner block may include an input for a left control signal an input for a right control signal and an output for an output signal. High fidelity combiner block may include an input for the left control signal an input for the right control signal and an output for the output signal. Low fidelity combiner block and high fidelity combiner block may include variant blocks that may be set up as described below in connection with .

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

A user of TCE model may set up low fidelity combiner block or high fidelity combiner block with user interface . In one example a user may access user interface by selecting a menu option by right clicking low fidelity combiner block or high fidelity combiner block and selecting an option etc. As shown in user interface may include a variety of information associated with low fidelity combiner block or high fidelity combiner block . For example user interface may include a section to select variant choices for low fidelity combiner block or high fidelity combiner block .

Section may enable a user to specify conditions under which combiner block selects low fidelity combiner block or high fidelity combiner block to be active in TCE model . As shown in combiner block may select e.g. make active high fidelity combiner block when a variable e.g. combiner satisfies a condition e.g. when combiner 1 as indicated by reference number . Combiner block may select e.g. make active low fidelity combiner block when the variable e.g. combiner satisfies another condition e.g. when combiner 2 as indicated by reference number . As shown in input blocks e.g. left and right control blocks and an output block are not connected to low fidelity combiner block or high fidelity combiner block . When combiner block selects low fidelity combiner block TCE model may programmatically connect low fidelity combiner block to the input blocks and the output block. When combiner block selects high fidelity combiner block TCE model may programmatically connect high fidelity combiner block to the input blocks and the output block.

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

If a user of TCE model selects low fidelity combiner block user interface may be displayed to the user. As shown in user interface may include a variety of information associated with low fidelity combiner block . For example low fidelity combiner block may include a precombiner block a final shaper block and a recorder block .

Precombiner block may include a subsystem block that receives a left control signal from a left control block and receives a right control signal from a right control block. Precombiner block may apply transformations to the left and right control signals to ensure that the left and right control signals are ready to be shaped for a final control input. Precombiner block may bundle the left and right control signals into a vector signal e.g. a prefiltered signal . The prefiltered signal of precombiner block may be passed to final shaper block .

Final shaper block may produce a final control value signal based on the prefiltered signal. The final control value signal may be an output e.g. Out1 signal of combiner block . The recorder block may receive the left and right control signals the prefiltered signal and the final control value signal and may record the received signals.

The final control value signal may be provided to the variant start block associated with reference number . The variant start block and the variant end block associated with reference number may graphically inline variant selections. In one example a first variant may pass the final control value signal to the saturation block associated with reference number . A second variant may not perform an operation on the final control value signal. The active variant may be programmatically determined using a control variable. For example the first variant may be active when the control variable is on e.g. final saturate 1 and the second variant may be active when the control variable is off e.g. final saturate 0 .

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

A user of TCE model may further set up left controller model block with user interface . In one example a user may access user interface by selecting a menu option by right clicking left controller model block and selecting an option etc. As shown in user interface may include a variety of information associated with left controller model block . For example user interface may include a section to select variant choices for left controller model block .

Section may enable left controller model block to reference either a linear control model e.g. linear ctrl or a nonlinear control model e.g. nonlinear ctrl . As shown in left controller model block may reference e.g. use the linear control model when a LINEAR variant is true e.g. when left ctrl mode 1 . Left controller model block may reference the nonlinear control model when a NONLINEAR variant is true e.g. when left ctrl mode 2 . In addition to programmatically controlling the active variants the user may instruct TCE model to ignore control variables and use a specified variant. For example as shown in the user may force the left controller model block to use the nonlinear control model by selecting a checkbox e.g. Override variant conditions and use the following variant and by selecting the NONLINEAR variant from a menu of variants.

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

User interfaces depict a simple example of a small TCE model containing a few variants . However in a graphical modeling environment a user may create a large TCE model that includes thousands of blocks containing thousands of different variants . Managing a large number of variants may be cumbersome for the user. When a TCE model includes thousands or even hundreds of different variants a number of permutations of active variant configurations may be extremely high. Furthermore some of the different permutations may be invalid. Invalid variant configurations may occur when constraints exist between variants and the constraints are violated. Another variant configuration management problem may include ensuring that a user knows when variants are in the override mode as described above in connection with .

The block hierarchy may include a block name e.g. Controller and block type in parenthesis e.g. Subsystem . A symbol e.g. may indicate that a hierarchical node e.g. a model block or a subsystem block is expanded and another symbol e.g. may indicate that a hierarchical node is collapsed.

The example TCE model e.g. vss ex1 may include several different variant configurations. For example one variant configuration may include the following block hierarchy e.g. where the active variants are marked as active 

Alternatively or additionally a variant configuration may include an activated high order filter instead of an activated second order filter. The example TCE model may include many different variant configurations and not all of the variant configurations may be valid. For example the example TCE model may require that a first variant of a variant start block be active when a low fidelity combiner block is active because a signal may need to be saturated. However the example TCE model may be missing this variant management information.

Variant manager tool may address the aforementioned difficulties associated with variant management especially for large models containing thousands of hierarchical blocks. Variant manager tool may enable a user to visualize a hierarchal nature of TCE model as well as a variant structure of TCE model and to create a predefined set of modes for TCE model . Each mode of the set of modes may configure active variants . Variant manager tool may enable a user to define constraints between variants and to control variant overriding. Variant manager tool may also validate the variant structure of TCE model .

As shown in user interface may include a variety of information associated with variant manager tool . For example user interface may include a modes section a control variables section a constraints section and a variant hierarchy section .

Modes section may include information enabling a user to create modes delete modes copy modes set a default mode etc. Modes section may include information describing a selected mode e.g. a description of mode2 . A mode that is currently selected e.g. mode2 may be considered an active mode.

For an active mode selected in modes section control variables section may provide control variables e.g. a combiner a left ctrl mode a right strategy a shape method a final saturate etc. and their values. A user may select one of the control variables to set properties for the selected control variable. Selection of the control variable may cause variant manager tool to display a dialog that may be used to configure the selected control variable for code generation.

For each mode in modes section a user may utilize constraints section to optionally define constraints e.g. for a mode and that apply across variants that must be satisfied. Each mode may include a set of variant control variables that configure the variants and optionally a set of constraints. If a constraint is satisfied by a variant the variant may pass the constraint. If a constraint is not satisfied by a mode the mode may violate the constraint and produce an error. As shown in an active mode e.g. mode2 may include the following constraint 

Variant hierarchy section may provide a hierarchy of TCE model with variant information. In one example variant hierarchy section may display a textual tree view of the hierarchy of TCE model with the variant information. Alternatively or additionally variant hierarchy section may display the hierarchy of TCE model in other configurations such as the configurations described below in connection with .

As further shown in user interface may include a validate button or other types of selection mechanisms that when selected may cause variant manager tool to evaluate variants and display results of the evaluation e.g. variant violation error messages . User interface may include other buttons or other types of selection mechanisms that enable a user to manipulate information provided in user interface retrieve help information etc.

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

As shown in user interface may include a variety of information associated with variant manager tool . For example user interface may include modes section control variables section constraints section and variant hierarchy section . Modes section control variables section constraints section and variant hierarchy section may include the features described above in connection with for example .

As further shown in variant hierarchy section may provide a textual hierarchy of variants e.g. rather than a hierarchy of TCE model as indicated by reference number . When viewing the hierarchy of variants blocks of TCE model that do not include variants may not be illustrated. For example blocks for inputs outputs regular subsystems etc. may not be shown in variant hierarchy section . Variant hierarchy section may include other information such as a block type e.g. the controller block may be displayed as Controller Subsystem .

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

As shown in user interface may include a variety of information associated with variant manager tool . For example user interface may include modes section control variables section constraints section and variant hierarchy section . Modes section control variables section constraints section and variant hierarchy section may include the features described above in connection with for example one or more of .

As further shown in when a user selects validate button variant manager tool may evaluate variants for violations and may display results of the evaluation e.g. variant violation error messages . Alternatively or additionally variant manager tool may automatically perform variant validation as variant information is being edited by a user. For example if during editing variant information cannot be evaluated due to syntax errors variant manager tool may provide a message e.g. indicating syntax errors in a status window and may underline and or alter the color of the syntax errors as indicated by reference number . As shown in the status window may indicate that two errors have been found and variant hierarchy section may indicate e.g. in red and underline that conditions for the variant start block variant end block pair cannot be evaluated because a final saturate is not defined. Because the final saturate is not defined the constraints may fail to evaluate the block pair and variant manager tool may produce a message indicating that the final saturate variable is not defined.

Alternatively or additionally variants that are in an override mode may be annotated such as with italicized text colored text strike though etc. If a variant control has been overridden variant manager tool may display information indicating that the override is in effect and may report such information when validating variants . This may occur because an override is generally an exceptional condition. Alternatively or additionally active variants may be emphasized such as for example with bolded text as indicated by reference number .

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

As shown in user interface may include a variety of information associated with variant manager tool . For example user interface may include modes section control variables section constraints section and variant hierarchy section . Modes section control variables section constraints section and variant hierarchy section may include the features described above in connection with for example one or more of .

As further shown in variant hierarchy section may provide a two dimensional graphical view of the hierarchy of variants e.g. rather than a textual view of the hierarchy of variants as indicated by reference number . In this view a two dimensional graph may display only the hierarchy of variants . Non displayed blocks of TCE model may be collapsed and shown with a designation e.g. . . . . Desired aspects of the hierarchy of variants such as an active variant may be shown in the displayed blocks. A user may select aspects of the hierarchy of variants to display. Additional information e.g. help information associated with possible variations may be displayed when the user hovers a cursor over a displayed block.

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

As shown in user interface may include a variety of information associated with variant manager tool . For example user interface may include modes section control variables section constraints section and variant hierarchy section . Modes section control variables section constraints section and variant hierarchy section may include the features described above in connection with for example one or more of .

As further shown in variant hierarchy section may provide a three dimensional graphical view of the hierarchy of TCE model e.g. rather than a textual view of the hierarchy of TCE model as indicated by reference number . In this view the hierarchy of TCE model may be shown using either a three dimensional mapping onto a two dimensional surface or a three dimensional virtualization. For example as shown in the hierarchy of TCE model may be three dimensionally mapped onto a two dimensional surface. A user may zoom in and out of the hierarchy hide or show blocks of the hierarchy select one or more variant blocks etc. For example if the user selects the left controller block variant manager tool may display a window that enables the user to select either a LINEAR variant or a NONLINEAR variant via an override.

For graphical modeling environments that permit nesting of models when a model is referenced a specification of a mode for the referenced model may be provided. If the specified mode is not provided a default mode may be used. When a user utilizes variant manager tool to navigate to the referenced model either a new instance of variant manager tool may be provided for the referenced model or the contents of variant manager tool may be replaced for the referenced model.

In one example implementation a user of variant manager tool may select a block listed in variant hierarchy section and variant manager tool may display TCE model . For example if the user selects the left controller block in variant hierarchy section variant manager tool may display an appropriate view in TCE model . Alternatively or additionally when utilizing TCE model if the user selects a variant block a context menu may be displayed that permits the user to open variant manager tool with a corresponding block in variant hierarchy section .

Although user interface depicts a variety of information in other implementations user interface may depict less information different information differently arranged information and or additional information than depicted in .

As shown in process may include receiving variants associated with a model block determining a hierarchy of the variants block and determining mode information for the variants block . For example in an implementation described above in connection with variant manager component may receive model generated by TCE . TCE model may include a block diagram model with one or more model elements e.g. blocks one or more inputs and one or more outputs. TCE model may include multiple variants that enable an individual portion of TCE model to have multiple implementations that may be swapped in and out by a user of the TCE. Variant manager component may determine a hierarchy of variants included in TCE model and may determine modes for variants included in TCE model . The hierarchy of variants may include a listing of variants provided in an order according to the hierarchy of elements of TCE model with which variants are associated. A mode of a variant may include a subset of a number of variant permutations. The modes for variants may permit explicit overriding of particular variants so that the other variants may be activated.

As further shown in process may include determining control variables for the variants block and determining constraints for the variants block . For example in an implementation described above in connection with variant manager component may determine control variables for variants and may determine constraints for variants . The control variables may include variables used to control which variants are active in TCE model . The constraints may ensure that conflicting variant conditions are identified and prevented e.g. a U.S. emissions system cannot be combined with a drive train for a California car since U.S. emissions standards do not meet California emissions standards .

Returning to process may include generating a variant manager tool based on the hierarchy of the variants the mode information the control variables and the constraints block and outputting and or storing the variant manager tool block . For example in an implementation described above in connection with variant manager component may generate variant manager tool based on the hierarchy of variants the modes for variants the control variables for variants and or the constraints for variants . In one example variant manager tool may be hierarchical and may be associated with one or more TCE models . Variant manager component may output e.g. display and or store variant manager tool .

Process block may include the process blocks depicted in . As shown in process block may include displaying the hierarchy of the variants in a first section of the variant manager tool block displaying the mode information in a second section of the variant manager tool block displaying the control variables in a third section of the variant manager tool block and displaying the constraints in a fourth section of the variant manager tool block . For example in an implementation described above in connection with variant manager tool may include a variant hierarchy section e.g. a window for displaying the hierarchy of variants and a modes section for displaying the modes for variants . The hierarchy of variants may be displayed and navigable via a tree view a two dimensional graph a three dimensional graph etc. Alternatively or additionally variant manager tool may include a control variables section that displays the control variables for variants and a constraints section that displays the constraints for variants .

Alternatively or additionally process block may include the process blocks depicted in . As shown in process block may include receiving a request to validate the variants block determining whether there are variant violation s based on the request block and displaying any variant violation s block . For example in an implementation described above in connection with validate component may receive e.g. from a user of TCE a request to validate variants in TCE model and may determine whether there are any variant violation s based on the request. A variant violation may occur when constraints are violated by variants when control variables set incorrect variants to an active state etc. Validate component may display any variant violation s e.g. validation information to the user of TCE .

Systems and or methods described herein may provide for management of variants in a graphical modeling environment. In one example the systems and or methods may manage the variants by providing defined modes that are subsets of variant permutations and by enabling the modes to be displayed and or navigated. The systems and or methods may enable constraints to be defined for the variants to ensure that incompatible variant selections are identified.

The foregoing description of implementations provides illustration and description but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the implementations.

For example while series of blocks have been described with regard to the blocks and or the order of the blocks may be modified in other implementations. Further non dependent blocks may be performed in parallel.

It will be apparent that example aspects as described above may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement these aspects should not be construed as limiting. Thus the operation and behavior of the aspects were described without reference to the specific software code it being understood that software and control hardware could be designed to implement the aspects based on the description herein.

Further certain portions of the implementations may be implemented as a component that performs one or more functions. This component may include hardware such as a processor an application specific integrated circuit ASIC or a field programmable gate array FPGA or a combination of hardware and software.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the disclosure of the specification. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification. Although each dependent claim listed below may directly depend on only one other claim the disclosure of the specification includes each dependent claim in combination with every other claim in the claim set.

No element act or instruction used in the present application should be construed as critical or essential unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

