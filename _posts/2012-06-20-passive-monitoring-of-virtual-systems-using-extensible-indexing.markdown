---

title: Passive monitoring of virtual systems using extensible indexing
abstract: Aspects of the present invention provide a solution for passively monitoring a computer system. In an embodiment, an indexing agent operates on a physical server having a plurality of virtual servers. The indexing agent has a framework having a plurality of indexing layers. Each of these indexing layers is adapted to index a virtual server along a different abstraction level to extract abstraction level features indicative of changes in the virtual server. Further, each of the indexing layers has an application programming interface, which is adapted to receive one or more external indexing modules to be plugged into the framework. Each indexing module is adapted to provide instructions to the indexing agent while the indexing layer to which it is plugged is indexing the associated abstraction level of the virtual machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09229758&OS=09229758&RS=09229758
owner: International Business Machines Corporation
number: 09229758
owner_city: Armonk
owner_country: US
publication_date: 20120620
---
This patent application claims the benefit of U.S. Provisional Application No. 61 552 797 filed on Oct. 28 2011 which is hereby incorporated herein by reference.

This patent application is related to patent application filed concurrently herewith on Jun. 20 2012 Ser. No. 13 527 948 entitled PASSIVE MONITORING OF VIRTUAL SYSTEMS USING EXTENSIBLE INDEXING.

The subject matter of this invention relates generally to computer systems management. More specifically aspects of the present invention provide a solution for improved passive monitoring in a complex virtual environment.

In the electronic environment of today computer systems undergo constant changes. In order to keep up with these changes it is important that users of these systems be able to monitor the systems. Monitoring can be classified into several different types including active monitoring and passive monitoring. Passive monitoring includes any observation that does not modify a computer system. To this extent passive monitoring can include scanning a file system to perform a compliance check scanning a registry to determine which applications are currently installed on the system security scanning file system inspection license usage monitoring and the like. In contrast activities such as patching applying a security update etc. that involve modification of the computer system are referred to as active monitoring.

Standardization can be an asset in effective systems management. Standardization of a data center helps customers control maintenance costs by limiting the number of different variations of systems running in the data center. This allows costs to grow in proportion to the number of different software configurations rather than in proportion to the number of different instances of those configurations.

To realize some of the benefits of standardization providers of a computer system can insure that all deployed instances begin their lifecycle from one or more standard images or pre configured software stacks. In order to conserve resources each particular type of deployed instance is often tailored to a type of task that the user of the instance wishes to perform. This can be done by including functions that are useful for performing the particular type of task while leaving out those that are not. In addition efficiencies can be added by using specific operating systems middleware and or applications that perform the particular type of task efficiently at the expense of those that do not. This can result in the need for several different types of deployed instances generated from different pre configured software stacks having different combinations of operating systems middleware applications etc. executing on the same computer.

This can become a challenge when it comes to performing passive monitoring operations that need to be performed on a significant number of the deployed instances. One example of this type of operation is drift detection. Once a deployed instance begins execution it can deviate from the standardized state due to changes within the instance. These changes can be accidental intentional but without harmful intent or malicious in nature. In any case these con compliant deviations can cause the particular instance not to function correctly and or can affect the efficiency of the instance within the overall computer system possibly impacting other instances and or the overall efficiency of the computer system. However as the number of types of instances increases with the increasing numbers of operating systems middleware and applications it can be increasingly difficult to provide a single tool for passively monitoring that can be used for all types. Further any attempt to update or customize the tool could cause the tool to require increasingly more resources or to become unstable.

In general aspects of the present invention provide a solution for passively monitoring a computer system. In an embodiment an indexing agent operates on a physical server having a plurality of virtual servers. The indexing agent has a framework having a plurality of indexing layers. Each of these indexing layers is adapted to index a virtual server along a different abstraction level to extract abstraction level features indicative of changes in the virtual server. Further each of the indexing layers has an application programming interface which is adapted to receive one or more external indexing modules to be plugged into the framework. Each indexing module is adapted to provide instructions to the indexing agent while the indexing layer to which it is plugged is indexing the associated abstraction level of the virtual machine.

A first aspect of the invention provides a method for passively monitoring a computer system comprising accessing a virtual server by an indexing agent the indexing agent comprising an indexing framework having a plurality of indexing layers each of the plurality of indexing layers having an application programming interface API and a first indexing module plugged into a first indexing layer of the plurality of indexing layers using an API of the first layer retrieving a virtual image of the virtual server by the indexing agent indexing for each of the plurality of indexing levels one of a plurality of unique abstraction levels of the virtual image by the indexing agent to extract abstraction level features indicative of changes in the virtual server the indexing including the first indexing module providing instructions to the indexing agent while the first indexing layer is indexing a first abstraction level of the virtual system indexed by the first indexing layer and analyzing at least one of the abstraction level features to perform passive monitoring of the virtual server.

A second aspect of the invention provides a system for passively monitoring a computer system comprising a physical server having a plurality of virtual system instances operating thereon and an indexing agent operating on the physical server the indexing agent comprising an indexing framework having a plurality of indexing layers each of plurality of indexing layers adapted to index a virtual system instance along a unique abstraction level to extract abstraction level features indicative of changes in the virtual server and having an application programming interface API and an indexing module the indexing module being adapted to plug into a first layer of the plurality of indexing layers using an API of the first layer and adapted to provide instructions to the indexing agent while the first indexing layer is indexing an abstraction level of the virtual system indexed by the first indexing layer.

A third aspect of the invention provides a computer program product embodied in a computer readable medium for implementing a method for passively monitoring a computer system the method comprising accessing a virtual server by an indexing agent the indexing agent comprising an indexing framework having a plurality of indexing layers each of the plurality of indexing layers having an application programming interface API and a first indexing module plugged into a first indexing layer of the plurality of indexing layers using an API of the first layer retrieving a virtual image of the virtual server by the indexing agent indexing for each of the plurality of indexing levels one of a plurality of unique abstraction levels of the virtual image by the indexing agent to extract abstraction level features indicative of changes in the virtual server the indexing including the first indexing module providing instructions to the indexing agent while the first indexing layer is indexing a first abstraction level of the virtual system indexed by the first indexing layer and analyzing at least one of the abstraction level features to perform passive monitoring of the virtual server.

A fourth aspect of the present invention provides a method for deploying an application for passively monitoring a computer system comprising providing a computer infrastructure being operable to access a virtual server by an indexing agent the indexing agent comprising an indexing framework having a plurality of indexing layers each of the plurality of indexing layers having an application programming interface API and a first indexing module plugged into a first indexing layer of the plurality of indexing layers using an API of the first layer retrieve a virtual image of the virtual server by the indexing agent index for each of the plurality of indexing levels one of a plurality of unique abstraction levels of the virtual image by the indexing agent to extract abstraction level features indicative of changes in the virtual server the indexing including the first indexing module providing instructions to the indexing agent while the first indexing layer is indexing a first abstraction level of the virtual system indexed by the first indexing layer and analyze at least one of the abstraction level features to perform passive monitoring of the virtual server.

Still yet any of the components of the present invention could be deployed managed serviced etc. by a service provider who offers to implement passive monitoring in a computer system.

The drawings are not necessarily to scale. The drawings are merely schematic representations not intended to portray specific parameters of the invention. The drawings are intended to depict only typical embodiments of the invention and therefore should not be considered as limiting the scope of the invention. In the drawings like numbering represents like elements.

As indicated above aspects of the present invention provide a solution for passively monitoring a computer system. An indexing agent operates on a physical server having a plurality of virtual servers. The indexing agent has a framework having a plurality of indexing layers. Each of these indexing layers is adapted to index the virtual server along a different abstraction level to extract abstraction level features indicative of changes in the virtual server. Further each of the indexing layers has an application programming interface which is adapted to receive one or more external indexing modules to be plugged into the framework. Each indexing module is adapted to provide instructions to the indexing agent as the indexing layer to which it is plugged is indexing the associated abstraction level of the virtual machine.

Turning to the drawings shows an illustrative environment for passively monitoring a computer system. To this extent environment includes a computer system that can perform a process described herein in order to passively monitor a computer system. In particular computer system is shown including a computing device that includes a passive monitoring program which makes computing device operable to passively monitor a computer system by performing a process described herein.

Computing device is shown including a processing component e.g. one or more processors a memory a storage system e.g. a storage hierarchy an input output I O interface component e.g. one or more I O interfaces and or devices and a communications pathway . In general processing component executes program code such as passive monitoring program which is at least partially fixed in memory . To this extent processing component may comprise a single processing unit or be distributed across one or more processing units in one or more locations.

Memory also can include local memory employed during actual execution of the program code bulk storage storage and or cache memories not shown which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. As such memory may comprise any known type of temporary or permanent data storage media including magnetic media optical media random access memory RAM read only memory ROM a data cache a data object etc. Moreover similar to processing unit memory may reside at a single physical location comprising one or more types of data storage or be distributed across a plurality of physical systems in various forms.

While executing program code processing component can process data which can result in reading and or writing transformed data from to memory and or I O component for further processing. Pathway provides a direct or indirect communications link between each of the components in computer system . I O interface component can comprise one or more human I O devices which enable a human user to interact with computer system and or one or more communications devices to enable a system user to communicate with computer system using any type of communications link.

To this extent passive monitoring program can manage a set of interfaces e.g. graphical user interface s application program interface and or the like that enable human and or system users to interact with passive monitoring program . Users could include system administrators and or clients utilizing resources in a virtual data center environment among others. Further passive monitoring program can manage e.g. store retrieve create manipulate organize present etc. the data in storage system including but not limited to an indexing framework and or indexing modules using any solution.

In any event computer system can comprise one or more computing devices e.g. general purpose computing articles of manufacture capable of executing program code such as passive monitoring program installed thereon. As used herein it is understood that program code means any collection of instructions in any language code or notation that cause a computing device having an information processing capability to perform a particular action either directly or after any combination of the following a conversion to another language code or notation b reproduction in a different material form and or c decompression. To this extent passive monitoring program can be embodied as any combination of system software and or application software. In any event the technical effect of computer system is to provide processing instructions to computing device in order to passively monitor in a computer system.

Further passive monitoring program can be implemented using a set of modules . In this case a module can enable computer system to perform a set of tasks used by passive monitoring program and can be separately developed and or implemented apart from other portions of passive monitoring program . As used herein the term component means any configuration of hardware with or without software which implements the functionality described in conjunction therewith using any solution while the term module means program code that enables a computer system to implement the actions described in conjunction therewith using any solution. When fixed in a memory of a computer system that includes a processing component a module is a substantial portion of a component that implements the actions. Regardless it is understood that two or more components modules and or systems may share some all of their respective hardware and or software. Further it is understood that some of the functionality discussed herein may not be implemented or additional functionality may be included as part of computer system .

When computer system comprises multiple computing devices each computing device can have only a portion of passive monitoring program fixed thereon e.g. one or more modules . However it is understood that computer system and passive monitoring program are only representative of various possible equivalent computer systems that can perform a process described herein. To this extent in other embodiments the functionality provided by computer system and passive monitoring program can be at least partially implemented by one or more computing devices that include any combination of general and or specific purpose hardware with or without program code. In each embodiment the hardware and program code if included can be created using standard engineering and programming techniques respectively.

Regardless when computer system includes multiple computing devices the computing devices can communicate over any type of communications link. Further while performing a process described herein computer system can communicate with one or more other computer systems using any type of communications link. In either case the communications link can comprise any combination of various types of wired and or wireless links comprise any combination of one or more types of networks and or utilize any combination of various types of transmission techniques and protocols.

As discussed herein passive monitoring program enables computer system to passively monitor in a computer system. To this extent passive monitoring program is shown including a virtual server accessor module a virtual image retriever module a virtual image indexing module and a virtual image analyzer module .

Computer system when executing virtual server accessor module accesses a virtual server through an indexing agent that can be contained in an indexing appliance.

Referring now to a virtualized datacenter environment according to embodiments of the invention is shown. As shown virtual datacenter environment has a physical server that can be used to perform all or a portion of the functions of passive monitoring program . To this extent physical server can be a server from any manufacturer that runs any platform that is adapted to run multiple instances of a virtual server . As illustrated in virtualized datacenter environment can also contain any number of related physical servers . Related physical servers can be connected with physical server for communication purposes via a network . Network can allow physical server to communicate with related physical servers and or physical servers to communicate with one another using any communications solution or solutions now known or later developed. In some embodiments network can operate on a cloud computing scale providing e.g. computation software data access and other services that do not require end user knowledge of the physical location and configuration of the network that delivers the services.

In any case as stated above each instance of virtual server on physical server can operate simultaneously with other systems instances while maintaining independence. This means that each of the instances of virtual server operates independently of other instances of virtual server and does not share information with other instances of virtual server even though the instances of virtual server operate on the same physical server . Owing to the characteristics of these instances of virtual server a single physical server can execute a very large number of instances of virtual server concurrently. The independent operation of these instances of virtual server ensures that the number of concurrent instances of virtual server is only limited by the hardware constraints of physical server .

Turning now to an example virtual server according to embodiments of the invention is shown. It should be understood that virtual server is different from a process virtual machine. A process virtual machine is a platform dependent engine such as a Java Virtual Machine that executes platform independent code written in a high level programming language such as Java for performing a specific task Java and Java Virtual Machine are a trademark of Sun Microsystems in the United States and or elsewhere . In contrast the virtual server of the current invention is a virtual system that simulates an entire computing environment. To this extent rather than performing only a single task the virtual server of the current invention is an environment within which a variety of tasks functions operations etc. can be carried out by a user . As such virtual server can be made to simulate a stand alone computer system in the eyes of a user .

To this extent virtual server includes a virtualization hypervisor at the lowest level. Specifically virtualization hypervisor provides a platform that allows multiple guest systems to run concurrently on the physical server . To this extent virtualization hypervisor provides an abstraction level between the hardware level of physical server and the higher level software functions of the virtual server . In order to provide these software functions virtual server includes a software stack which can also be referred to as an image. Software stack contains everything that is necessary to simulate a guest instance of virtual server on physical server via virtualization hypervisor .

Data within software stack can be viewed from a variety of different viewpoints called abstraction levels A N. At the lowest level of granularity may be an individual disk block level N e.g. a disk block at offset 5.032 from the beginning of software stack . A higher level of abstraction may be a disk partitions level F that provides access to the disk partitions of software stack e.g. the swap partition the boot partition each file system partition etc. . Going up more abstraction levels A N a file structure level D and a file contents level E can provide access to the structure and contents of the file system software stack . In addition such abstraction levels A N as an applications level C a middleware level B and an operating systems level A can also be included in software stack . It should be understood that the particular abstraction levels A N listed herein should not be taken as exhaustive. Rather it should be understood that other abstraction levels A N could be included and or specific abstraction levels A N referenced on may not be used. In addition the order in which abstraction levels A N are listed in the illustration should not be construed as limiting. Further in operation the abstraction levels A N shown herein could be combined split into other levels or be arranged into functional categories that differ from those illustrated. Still further in some embodiments some or all of abstraction levels A N could be dependent upon other abstraction levels A N such that one or more abstraction levels A N are subsumed within a particular abstraction level A N.

As stated above standardization at this level can significantly decrease maintenance costs by limiting the number of different variations of systems running in virtualized datacenter environment . To achieve this a specific software stack can be generated from one of a limited number of preconfigured stacks. These pre configured stacks can be optimized for their particular function by providers of virtualized datacenter environment . For example if a user wants to utilize database functionality one or more virtual servers having the same software stack based on the same preconfigured stack can be generated specifically for this user . These software stacks could for example contain an operating system of a type that is appropriate for performing database functions middleware that contains a database management system and applications that are configured to run against the database management system. Similarly if a user wants to utilize web server functionality one or more virtual servers having the same software stack based on a different preconfigured stack from the preconfigured stack used for the database management system can be generated specifically for that user . These software stacks could for example contain an operating system of a type that is appropriate for web server functions middleware that contains a web server management system and applications that are configured to run against the web server management system. It should be understood that software stacks that are adapted to perform various other functions within virtualized datacenter environment could be generated as well. To this extent the operating system can include any operating system now known or later developed. Further the middleware and applications can include any solutions that can be envisioned for providing the desired functionality for a particular virtual server .

The inventors of the current invention have discovered that current passive monitoring systems fail to fully take advantage of the abstraction level A N structure of software stack . Further current passive monitoring systems offer no way for users to extend the capabilities of tools used to perform passive monitoring in such a way that the tools themselves can collect special purpose information that may be pertinent to that user s environment. For example say a customer uses a software component that keeps its configuration metadata in a file opt myapp config. The internal format of opt myapp config is unknown to off standard detection tools so all a passive monitoring tool of this sort can do is access it on a higher abstraction level A N such as to compute its hash on a file structure level D. Thus current passive monitoring tools can tell if opt myapp config changed from one scan to the next but they cannot tell exactly what changed inside it. This is true even if user knows the structure of the configuration metadata and only wants an alert if a specific entry in that file has changed but wants to treat any other changes as benign and to ignore them.

Turning now to an indexing agent according to embodiments of the invention is shown. As illustrated indexing agent provides an improved tool for passively monitoring that takes advantage of virtual servers that have multiple abstraction levels A N such as those shown in . To do so indexing agent employs a layered approach having an indexing framework that has multiple indexing layers A N. Described in conjunction with each indexing layer A N is adapted to index software stack of virtual server along a particular abstraction layer A N. For example indexing layer A could be adapted to index operating system level A while indexing layer N could be adapted to index individual disk block level N. To perform this task any or all of indexing layers A N can contain imbedded modules not shown that allow indexing layers A N to perform default indexing of abstraction levels A N. Each indexing layer A N can also include an application programming interface which provides extensibility to indexing agent at an indexing layer A N level described herein.

As also illustrated in indexing agent can include one or more indexing modules A E. Each indexing module A E is adapted to plug into a particular indexing layer A N using API A N included in indexing layer A N. For example in the case that user desires to perform additional indexing at the operating system level A of software stack of virtual server one or more indexing modules A can be plugged into an indexing layer A that is designated for indexing operating system level A using API A. Similarly in the case that user desires to perform additional indexing at the file contents level E of software stack of virtual server e.g. to scan the metadata contents of opt myapp config in the above example one or more indexing modules E can be plugged into an indexing layer E that is designated for indexing file contents level E using API E.

In any case each indexing module A E can contain instructions A E. These instructions A E can be provided by the indexing module A E to the indexing layer A E to which it is plugged while the indexing layer A E is indexing its associated abstraction level A E. The ability to plug indexing modules A E into indexing agent allows user to plug in their own custom logic to extend the capabilities of indexing agent through API A N. As alluded to above with respect to the example given previously this structure allows user to add indexing module A E at API A N that will be invoked every time indexing agent visits the file while indexing software stack . User s logic in instructions A E simply checks if this file is opt myapp config and if it is indexing agent opens the file and reads the specific entry that user cares about. This gives user a much lower level of control over the process of passive monitoring.

In addition indexing module A E can include a time period A E which can indicate conditions that must be fulfilled before indexing module A E can be executed. For example one indexing module E could have a time period E that specifies that indexing module E is to be executed subsequent to another indexing module A. Then when indexing agent is run indexing module E will wait for indexing module A to execute and then in response to completion of the indexing by indexing module A indexing module E will perform its functions.

Turning now to an environment that includes an example physical server having an indexing appliance according to embodiments of the invention is shown. As illustrated in some embodiments indexing appliance is separate from virtual servers on physical server in virtualized datacenter environment and can itself be a virtual server . In these environments indexing appliance contains indexing agent that can perform passive monitoring services for the entire physical server . Indexing agent has the framework and the multiple indexing layers A N illustrated in . In this configuration indexing agent can access any instance of virtual server via virtualization hypervisor to perform all of the functions that are necessary for passive monitoring. One result of this is that passive monitoring agents can be removed entirely from all instances of virtual server . Thus the overall amount of resources dedicated to passive monitoring can be significantly reduced even when the amount of resources that are dedicated to the indexing appliance are taken into account.

Turning now to and concurrently virtual image retriever module as executed by computer system can retrieve a virtual image of a particular instance of virtual server for which passive monitoring is desired using indexing agent . This retrieving can be in response to a request sent to indexing appliance from a central detection server that instructs indexing appliance to perform passive monitoring on a particular instance of virtual server and provides an address at which the virtual server instance is located. In some embodiments indexing agent can then instruct virtualization hypervisor of virtual server to perform a checkpoint operation in virtual server . In these embodiments the checkpoint operation can be a function within virtualization hypervisor that takes a snapshot virtual image of the software stack of the virtual server that includes some or all of abstraction levels A N. Virtual image can include data corresponding to both the file system and running state as well as any other information in software stack at the time of the snapshot .

In other embodiments the instruction to checkpoint virtual server can originate from places other than indexing appliance . For example checkpoint operations can automatically occur periodically such as part of a backup and or recovery operation. However the present invention does not depend on the manner in which virtual image was produced but rather any solution for producing a virtual image of a software stack of a virtual server now known or later developed is envisioned. In any event upon creation virtual image can be retrieved directly by indexing agent . In the alternative virtual image can be stored in a storage system for later retrieval by indexing agent . It should be understood that storage system can be included within and or can be external to physical server and can utilize any storage solution.

Referring still to and concurrently virtual image indexing module as executed by computer system can index virtual image of a virtual server retrieved by virtual image retriever module . In some embodiments this indexing can be performed by indexing agent within indexing appliance . As such the indexing can be performed outside of virtual server itself and can be performed without utilizing agents executing within virtual server .

Referring now to operation of an indexing level A N in indexing agent according to embodiments of the invention is shown. As shown each indexing level A N in indexing agent corresponds to a different abstraction layer A N in virtual image adapted to index one specific abstraction layer A N. The indexing process can use each indexing layer A N to scan its corresponding abstraction level A N of software stack contained within virtual image to extract extraction level features of interest. It should be understood that not all abstraction levels A N need be indexed in every scan. Rather it could be specified that a single abstraction level E or in the alternative a subset of the entirety of abstraction levels A N be indexed. In any case for each abstraction level A N to be indexed the corresponding indexing layer A N will utilize the imbedded modules not shown and any plugged in indexing modules A E to perform the indexing. As indicated indexing modules A E having instructions A E configured by user and indicating which elements in abstraction levels A N of virtual image should be included in extraction level features can be included for flexibility. For example in the case that abstraction level E is to be indexed indexing layer E would scan abstraction level E using its imbedded modules and instructions E found in module E. Results of the indexing would be included in extraction level features for the abstraction level E. These extraction level features can include information such as metadata about the files in software stack e.g. their path names file sizes last modified date a checksum of the contents of the files and or any other information from software stack that can be used to detect whether changes e.g. due to drift malware or the like have occurred in virtual server . In some embodiments the contents of every file are not examined. Instead only extracted features that have been designated as being sensitive components of virtual server need be extracted for use in the analysis. Further extracted features could vary based on the type of passive monitoring is to be performed. For example if the passive monitoring includes scanning for malware executable files or other files in which malware is likely to be found can be included. In the alternative control files of other such data files pertaining to conformance of virtual server with an original template can be included in a drift detection type of passive monitoring.

Referring now to concurrently abstraction level features collected by indexing layer E can then be appended to extraction level features resulting from indexing of other extraction levels A N performed by indexing agent . Then if analysis is to be performed on central detection server data corresponding to some or all extraction level features can be forwarded to central detection server . In contrast data corresponding to extraction level features resulting from indexing of single abstraction levels A N could be forwarded for analysis in isolation. Further it should be understood that analysis could also be performed on site at physical server .

Referring still to and concurrently virtual image analyzer module as executed by computer system can analyze extracted features to perform passive monitoring of virtual server . This analysis can differ based on the type of passive monitoring is being performed. For example in a drift detection analysis virtual image analyzer module can compare one or more elements of extracted features with at least a portion of a corresponding pre configured software stack . By comparing these two virtual image analyzer module can compute the difference between the file system structure contents state etc. of each. This difference can consist of three parts data that has been added data that have been deleted and data that has been modified all relative to pre configured software stack . In contrast in a malware type analysis extracted features can be compared with signatures of known malware agents.

Referring now to example comparison analyses according to embodiments of the invention are shown. As illustrated three sets of index results data are being analyzed. These three sets of index results data are being compared with two pre configured stacks . As shown extracted features A and B are from virtual servers that were created from the same pre configured stack and as such are being compared with the same set of stack data A. In contrast extracted features C has been taken from a virtual server of a different type created from a different pre configured stack and is being compared with stack data B. Extracted features A is illustrated as having only acceptable changes and as such the comparison with stack data A will yield only relatively small differences. In contrast extracted features B and C both have non compliant changes so both of these comparisons will yield large differences when compared with their respective stack data A B.

Referring back to and concurrently Once these differences have been ascertained passive monitoring can be performed by applying rules that define what changes are non compliant. Passive monitoring can include one or more of such activities as scanning a file system to perform a compliance check scanning a registry to determine which applications are currently installed on the system security scanning file system inspection license usage monitoring drift detection and or the like. The rules used to perform passive monitoring can be configured by an administrator a user or anyone else who needs to evaluate virtual server for non compliant changes e.g. drift malware etc. . Rules can also be inferred statistically by analyzing differences that occur across many virtual servers in virtualized datacenter environment within a tolerance can be inferred by automatically classifying files as unvarying for example executables rarely changing configuration files or constantly changing log files and or can be inferred from external sources of information such as a description of a cluster s configuration based on an evaluation performed by an evaluation tool. Similar rule based invariants can be used to detect anomalies or malicious behavior on memory state. Examples of these include but are not limited to detecting unknown processes suspicious network connections and modifications of code segments.

While shown and described herein as a method and system for passively monitoring a computer system it is understood that aspects of the invention further provide various alternative embodiments. For example in one embodiment the invention provides a computer program fixed in at least one computer readable medium which when executed enables a computer system to passively monitor in a computer system. To this extent the computer readable medium includes program code such as passive monitoring program which implements some or all of a process described herein. It is understood that the term computer readable medium comprises one or more of any type of tangible medium of expression now known or later developed from which a copy of the program code can be perceived reproduced or otherwise communicated by a computing device. For example the computer readable medium can comprise one or more portable storage articles of manufacture one or more memory storage components of a computing device and or the like.

In another embodiment the invention provides a method of providing a copy of program code such as passive monitoring program which implements some or all of a process described herein. In this case a computer system can process a copy of program code that implements some or all of a process described herein to generate and transmit for reception at a second distinct location a set of data signals that has one or more of its characteristics set and or changed in such a manner as to encode a copy of the program code in the set of data signals. Similarly an embodiment of the invention provides a method of acquiring a copy of program code that implements some or all of a process described herein which includes a computer system receiving the set of data signals described herein and translating the set of data signals into a copy of the computer program fixed in at least one computer readable medium. In either case the set of data signals can be transmitted received using any type of communications link.

In still another embodiment the invention provides a method of generating a system for passively monitoring a computer system. In this case a computer system such as computer system can be obtained e.g. created maintained made available etc. and one or more components for performing a process described herein can be obtained e.g. created purchased used modified etc. and deployed to the computer system. To this extent the deployment can comprise one or more of 1 installing program code on a computing device 2 adding one or more computing and or I O devices to the computer system 3 incorporating and or modifying the computer system to enable it to perform a process described herein and or the like.

The terms first second and the like if and where used herein do not denote any order quantity or importance but rather are used to distinguish one element from another and the terms a and an herein do not denote a limitation of quantity but rather denote the presence of at least one of the referenced item. The modifier approximately where used in connection with a quantity is inclusive of the stated value and has the meaning dictated by the context e.g. includes the degree of error associated with measurement of the particular quantity . The suffix s as used herein is intended to include both the singular and the plural of the term that it modifies thereby including one or more of that term e.g. the metal s includes one or more metals . Ranges disclosed herein are inclusive and independently combinable e.g. ranges of up to approximately 25 wt or more specifically approximately 5 wt to approximately 20 wt is inclusive of the endpoints and all intermediate values of the ranges of approximately 5 wt to approximately 25 wt etc .

The foregoing description of various aspects of the invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed and obviously many modifications and variations are possible. Such modifications and variations that may be apparent to an individual in the art are included within the scope of the invention as defined by the accompanying claims.

