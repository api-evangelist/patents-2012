---

title: Method for determining access of queries
abstract: A query analysis tool determines whether a list of columns within a database is accessed by a query without running the query against the database. Instead of using the database, the query is sent to a query analysis tool that uses a list of columns of interest to resolve ambiguity in the query and then determine if the query potentially accesses the list of columns of interest. If the ambiguity cannot be resolved, then the ambiguous part of the query is determined to not access any of the columns from the list of columns.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09037609&OS=09037609&RS=09037609
owner: Amazon Technologies, Inc.
number: 09037609
owner_city: Reno
owner_country: US
publication_date: 20121029
---
Many companies and other organizations operate databases that store information to use for various purposes. For example databases are commonly used as part of a web application. The database is used to hold data required by the application and often accessed through the use of Structured Query Language SQL or other tools for submitting database queries. Many databases are structured in a hierarchical manner. For example many relational databases use the one to many structure of a database containing many tables with each table containing many columns. Each schema table and column may be individually identified. For example a fully qualified column in a relational database may use a schema identifier table identifier and column identifier together to identify the location of the fully qualified column.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Techniques described and suggested herein relate to maintaining the integrity of data in a database and generally relate to techniques for performing checks on database queries without requiring execution of the queries against the database. In some embodiments the techniques described and suggested herein include determining whether a list of columns within a database is accessed by a query without running the query against the database. A query is sent to a query analysis tool that uses the list of columns to resolve ambiguity in the query and then determine if the query potentially accesses the list of columns. If the ambiguity cannot be resolved then the ambiguous part of the query is determined to not access any of the columns from the list of columns. For example a customer that is worried that a query might access privileged information such as social security numbers may send the query to the query analysis tool to determine whether the privileged information is accessed without impacting the database. This provides the advantage of determining whether privileged information is accessed with complex and or ambiguous queries that are normally resolved upon database access without taxing the database itself. In another example the query analysis tool may determine if all accesses to the database by a query are on a list of columns served by a database server. If so the query may be directly routed to and processed by the server.

In one embodiment a list of restricted columns from a database containing restricted customer data is given to the query analysis tool. The query analysis tool may then process one or more queries to determine if the queries access sensitive data. To process a query the query may be broken down into tokens that identify individual parts of the query. Aliases may be resolved such that an alias results in an identifier that may or may not be ambiguous. For example a table alias may be resolved to a table identifier. The tokens may include database access tokens that identify database access to columns in the database. These database access tokens may include schema identifiers table identifiers and column identifiers. For example a fully qualified column for a relational database may include a schema identifier table identifier and column identifier. A fully qualified column can define the location of a column in the database. If the column is missing one of the previous identifiers the query may be known as unqualified or ambiguous. In some cases the missing identifier is implied by the context of the query instead of the query itself. By combining the related database access tokens information about access to a column may be determined to form a fully qualified column. In this embodiment a fully qualified column may contain a schema identifier table identifier and column identifier. The fully qualified columns identified in the tokens may then be checked to see if they exist in the list of restricted columns. The query access tool may then return the result of whether the fully qualified columns exist in the list of restricted columns.

In some cases the query may reference unqualified columns where one or more of the identifiers may be implied by the query implicit to the query or retrieved from the database at runtime. The unqualified columns may be made into fully qualified columns by matching information about the column with information in the list of restricted columns. For each match in the list of restricted columns one or more potential combinations may be made with the existing identifiers for the unqualified column to form a set of potential fully qualified columns. The potential fully qualified columns may then be compared against the list of restricted columns and the result returned by the query access tool. In this embodiment all actual query accesses to the restricted columns would be captured.

By using the query analysis tool query analysis and query performance may be separated such that a production database may not be impacted by query analysis. This separation allows for audits development and other database procedures to occur without accessing the database and potentially harming performance. Such procedures may include periodic security audits of query access testing new queries and routing of new queries.

In another embodiment a list of columns hosted by a server is used to determine whether a client may directly route a query to the server. By analyzing the query and constructing potential fully qualified columns from unqualified columns a query analysis tool can determine if all of the columns accessed exist on the server. If all of the columns exist on the server the query may be allowed to route to the server.

Turning now to an illustrative example of a system to evaluate the access of queries in accordance with at least one embodiment is shown. Information about identifiers for restricted data from a database is sent to a query analysis tool to determine if a query such as an ambiguous query accesses restricted data in the database . More specifically in a database is constructed with schema tables and column identifiers. Using these identifiers columns having restricted data are identified and stored as fully qualified column identifiers in list although other data structures may be used . This list may be constructed in various ways including accessing the database during a low period retrieval from a matching testing database retrieval from a matching development database or even constructing the list without accessing the database such as hand coding the list.

A client may submit an ambiguous query to be analyzed by a query analysis tool to determine if the query accesses the restricted data . To process the ambiguous query the ambiguous query may be broken down into tokens that identify individual parts of the ambiguous query . The tokens may include database access tokens that identify database access to columns in the database. These database access tokens may include schema identifiers table identifiers and column identifiers. In this embodiment a fully qualified column may contain a schema identifier table identifier and column identifier. The ambiguous query may access multiple columns. By combining the related database access tokens information about access to a column may be determined to form as much of a fully qualified column as possible. However the ambiguous query may reference unqualified columns where one or more of the identifiers may be implied by the ambiguous query implicit to the ambiguous query or retrieved from the database at runtime. The unqualified columns may be made into fully qualified columns by matching information about the column with information in the list of restricted columns . For each match in the list of restricted columns one or more potential combinations may be made with the existing identifiers for the unqualified column to form a set of potential fully qualified columns. The potential fully qualified columns may then be compared against the list of restricted columns . The query access tool may then return the return value indicating whether the fully qualified columns exist in the list of restricted columns . Depending on the embodiment the return value may be a true false value a number indicating the amount of columns accessed a list of columns accessed a list of restricted columns accessed and or a hybrid data structure combining multiple values.

The restricted data may include private data or data restricted to a particular configuration. For example private restricted data may include customer information. This customer information may be private due to its nature or due to inclusion with other information. For example a customer name may not be private alone but becomes private information when combined with a customer address. Data restricted to a particular configuration may also be restricted data. For example portions of a database may exist in different geographical areas. A query from a local machine is intended to be routed to a local database server. The restricted data is data limited to the local server. If the query only accesses locally restricted data the query may be routed to the local database server.

Turning now to an illustrative example of a system to evaluate query access and enforce query restrictions in accordance with at least one embodiment is shown. A distributed production database continues operations with application servers without slowdown due to query analysis because a policy enforcement system uses a query analysis tool that does not need access to the database to determine if a proposed query satisfies policy rules. More specifically application servers send queries to a distributed database and receive data back from the distributed database during operation. The database may include restricted data that is noted in a list of fully qualified columns that include that restricted data .

A client may submit a proposed query to a policy enforcement system such that the query may be approved for use with the application servers and database . The policy enforcement system may review the proposed query which may include submitting the proposed query to a query analysis tool to determine if the proposed query accesses restricted data . As described before the query analysis tool may break down the query to qualify accessed columns accessed as much as possible. If needed the query analysis tool may match identifiers associated with the columns such as schema table and column identifiers to fully qualified columns in the list to identify potential combinations of fully qualified columns that may be accessed. The query analysis tool may then determine whether restricted data was potentially accessed in the proposed query and return a value indicating the access to the policy enforcement system . If the proposed query meets the policies enforced by the policy enforcement system which may include policies regarding access to restricted data the proposed query may be included in a query whitelist that allows the query to be performed on the database . If the proposed query does not meet the policies the proposed query may be flagged for human review.

Depending on the embodiment the whitelist may be used in a strict or permissive manner. In one embodiment a query sent to a database may be first checked by the policy enforcement system to determine if the query is an exact match of a query on the whitelist and if the account performing the query has permission to perform the query. If either check fails the query may be denied before it is performed. In another embodiment a query sent to a database is matched against a whitelist by a policy enforcement system . If the query is similarly formed to a whitelisted query the query may be allowed to proceed. In another embodiment the whitelist may be used to approve code containing one or more queries. For example a code analysis may be performed for queries sent to a database. If the code analysis turns up queries that are not whitelisted the code may not be approved. If the code analysis turns up only whitelisted queries the code may be approved for execution.

The accuracy of the query analysis tool may be determined by the information contained in the list of fully qualified columns. For example in some embodiments the database structure is reflected in the list of fully qualified columns with the restricted data marked as restricted. By having the database structure ambiguous queries may be more accurately resolved such that false positives may be reduced or in some cases eliminated. In some embodiments it may not be practical to store the database structure. However important columns such as frequently queried columns or columns that could form a combination that makes an ambiguous query appear to access restricted data may be included in the list to reduce false positives and or speed up processing.

Turning now to an illustrative example of an environment for query access evaluation in accordance with at least one embodiment is shown. A data center may house the database query analysis tool and servers to which clients may have restricted access through the Internet and a gateway . More specifically a data center may service computing resources in the data center such as a program execution service that provisions servers databases network infrastructure query analysis tools and other infrastructure platforms tools etc. Management of the computing resources may be performed by a control plane which may receive instructions over an external network such as the Internet . Clients such as desktops laptops and mobile devices may interact with the computing resources through the gateway or manage computing resources through the control plane .

In one embodiment the servers query the database while a client requests the query analysis tool to determine whether a proposed query accesses restricted data . Because a list of fully qualified columns is used rather than database access the query analysis tool may determine the potential access of restricted data without a request to the database . The result may either be reported back to the client or to the control plane depending on the embodiment.

Turning now to an illustrative example summary of a process that may be used to evaluate query access in accordance with at least one embodiment is shown. The process may be accomplished by computing resources seen in such as by the query analysis tool and policy enforcement system . A query analysis tool receives a list of fully qualified columns of interest. The columns of interest may represent columns within a database that should be noted if a query accesses those columns. The query analysis tool parses the query to identify database accesses such as columns accessed. This parsing may include the tokenizing of the query to identify schemas tables and columns to qualify the database accesses into fully qualified query columns as much as possible. Ambiguous database accesses may be qualified by matching unqualified columns discovered by the parsing operation with fully qualified columns in the list of fully qualified columns of interest. Possible combinations may be created using the unqualified columns with the fully qualified columns to fill in the ambiguous identifiers to form a set of potential fully qualified query columns. The list of fully qualified columns of interest may then be compared with the fully qualified database accesses to determine whether columns from the set of query columns exist in the list of fully qualified columns of interest. The result of this determining can then be returned back from the query analysis tool.

For example many different queries may be used to retrieve information from a billing database. The queries may have various purposes including generating an invoice processing a reoccurring payment generating a list of delinquent accounts and determining in which states sales were made. Since the billing database contains both private and non private information a client may want to determine and or enforce the access of queries to the database. A query that accesses credit card information may be treated differently than a query that only accesses state information. Using the operations of process a query analysis tool may determine which private columns from the database are accessed using a private column list without touching the database.

Some or all of the process or any other processes described herein or variations and or combinations thereof may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code e.g. executable instructions one or more computer programs or one or more applications executing collectively on one or more processors by hardware or combinations thereof. The code may be stored on a computer readable storage medium for example in the form of a computer program comprising a plurality of instructions executable by one or more processors. The computer readable storage medium may be non transitory.

Turning now to an illustrative example of a process that may be used to evaluate query access in accordance with at least one embodiment is shown. The process may be accomplished by computing resources seen in such as by the query analysis tool and policy enforcement system . A query analysis tool receives a list of fully qualified columns of interest. The list may be formatted in various ways such as XML comma separated variable binary or other data structure or file format. The query analysis tool may receive a query and parse the query to identify database accesses. The query may be in one of many formats including SQL UnQL Object Query Language Java Persistence Query Language or other formats used to access a database. The query may include data definition language data manipulation language and or data control language. In one embodiment the query is tokenized such that schema table and columns tokens may be identified and correlated. A first database access may be identified and selected to process. Ambiguities in the database access may be determined such that missing identifications may be inferred which may include missing schema table or column identifiers. Non ambiguous identifiers in the access may be matched with identifiers in the list of fully qualified columns of interest. Potential fully qualified combinations of the ambiguous access may be created using the matched identifiers from the fully qualified columns of interest. The fully qualified potential combinations may then be added to a query list identifying potential fully qualified accesses to the database. If there are more accesses the operations of to may be repeated for each access identified. If there are no more accesses the query list may be compared against the list of fully qualified columns of interest. Accesses in the query list that exist in the list of fully qualified columns of interest may then be compiled. A return value indicating the result of whether and or how many of the accesses in the query list exist in the list of fully qualified columns of interest may be returned. In some embodiments the return value may actually reflect how many of the accesses in the query list do not exist in the list of fully qualified columns of interest such as in the embodiments related to query routing.

Turning now to an illustrative chart of ambiguous query resolving in accordance with at least one embodiment is shown. The data shown may be received processed and or returned by a query analysis tool as seen in . The query analysis tool may be given a list of restricted columns . In the restrictive columns shown there are two schemas two similarly identified tables per schema and two identified columns per schema with similar names. Examples and show the resulting query lists and when provided an example SQL pseudo code request.

In example a fully qualified column shown as Schema1.table1.col1 is requested. Therefore there is no ambiguity to resolve and the fully qualified column is added to the query list. As the query list contains a column in the list of restricted columns the return value from the query analysis tool should reflect that at least one column is contained in the list of restricted columns . In this example a return value of true and or one may be returned.

In example a partially qualified column shown as table1.col1 is requested from table1. Using the list of restricted columns it is noted that there exists a Schema1.table1.col1 and Schema1.table1.col1 combination that matches both the table1.col1 and table1 to form the combination. This combination is then added to the query list . No other combinations are viewed as possible. As the query list contains a column in the list of restricted columns the return value from the query analysis tool should reflect that at least two columns are contained in the list of restricted columns . In this example a return value of true and or one may be returned.

In example a partially qualified column shown as col1 is requested from Schema1.table1 or Schema1.table2. While this query may be correctly interpreted in the proper context the query is ambiguous because the columns appear to come from two tables. Using the list of restricted columns it is noted that Schema.table1.col1 and Schema.table2.col1 are possible columns. These possible columns are added as possible combinations into the query list . As the query list contains a column in the list of restricted columns the return value from the query analysis tool should reflect that at least one column is contained in the list of restricted columns . A return value in this example may be true and or two.

In example a partially qualified column shown as col1 is requested from table1 or table2. In the normal context of the query this access may not be ambiguous and could be resolved. However without the context of the query the query may be resolved through potential combinations using the list of restricted columns . Matches for col1 may be found in both Schema1 and Schema2. Both Schema1 and Schema2 have a table1 and table2. Combinations of these identifiers are then inserted into query list . Therefore the potential combinations may include the columns shown in query list including Schema1.table1.col1 Schema1.table2.col1 Schema2.table1.col1 and Schema2.table2.col1. The query list may be compared against the list of restricted columns . A return value from the query analysis tool may be based on how many fully qualified columns from the query list exist in the list of restricted columns . In this case a return value of true and or four may be returned.

In total there may be at least eight examples of ambiguous queries with only a subset shown here. There may be queries that have ambiguities in schema schema and table schema and column schema and table and column table table and column column and no ambiguity. The ambiguities may be resolved as above where unambiguous information from the list of restricted columns may be matched and used to make potential combinations For example a star selector represented by a may be used in place of a column to make an ambiguous column. A query analysis tool may use the unambiguous identifiers in the query such as the schema and or table identifier to match with identifiers in the list of restricted columns and create possible combinations in a query list. The query list may then be compared against the list of restricted columns . A return value from the query analysis tool may be based on how many fully qualified columns from the query list exist in the list of restricted columns .

Turning now to an illustrative example of a process that may be used to resolve query ambiguity by ambiguity type in accordance with at least one embodiment is shown. The process shown may be accomplished by a query analysis tool processing a proposed query using a list of fully qualified columns from database as seen in FIG. . Using an identified database access in a query the query analysis tool may select an ambiguity type to resolve. In this example the ambiguity types may include no ambiguity ambiguous schema ambiguous schema and table and ambiguous schema and column. However other ambiguities may also be possible as the process shown is merely an example. For example there may be queries that have ambiguities in schema schema and table schema and column schema and table and column table table and column column and no ambiguity.

In a first ambiguity path a path of no ambiguity is selected because the schema table and column are identified. Then the identified data may be used as a combination. The combination may then be checked to see if it exists within the fully qualified columns list and the result returned .

In a second ambiguity path a path of ambiguous schema is selected because only the table and column is identified. The identified table and column information may then be matched to the fully qualified columns in a list of fully qualified columns in a manner as seen in . The matched fully qualified columns in the list may then be used to eliminate the ambiguity by selecting potential combinations. The combinations may then be checked to see if they exist within the fully qualified columns list and the result returned .

In a third ambiguity path a path of ambiguous schema and table are selected because only the column is identified. The identified column information may then be matched to the fully qualified columns in a list of fully qualified columns in a manner as seen in . The matched fully qualified columns in the list may then be used to eliminate the ambiguity by selecting potential combinations. The combinations may then be checked to see if they exist within the fully qualified columns list and the result returned .

In a fourth ambiguity path a path of ambiguous schema and column are selected because only the table is identified. The identified table information may then be matched to the fully qualified columns in a list of fully qualified columns in a manner as seen in . The matched fully qualified columns in the list may then be used to eliminate the ambiguity by selecting potential combinations. The combinations may then be checked to see if they exist within the fully qualified columns list and the result returned . In other embodiments the operations and may be postponed until all database accesses have been reviewed and all potential combinations are stored in the query list.

Turning now to an illustrative example of a process that may be used to determine whether to restrict a query based on column access in accordance with at least one embodiment is shown. The process shown may be accomplished by a query analysis tool processing a proposed query using a list of fully qualified columns from database as seen in . A list of fully qualified columns of interest may be received that identify columns having restricted information. The query may then be parsed to identify database accesses to columns within the query. Ambiguous information from the query may be rendered from a match with non ambiguous identifiers in the query that match the list of fully qualified columns of interest. These matching columns may be used to create a query list of potential resolutions to the ambiguous database accesses from the query. The query list may then be compared against the list of fully qualified columns of interest to determine if any exist in the query list and the list of fully qualified columns of interest. If so the query may be flagged as restricted and or for a human to review later. If not the query may be whitelisted for use with the database.

In some embodiments incomplete information may lead to false positive reports of queries accessing restricted information. For example if only restricted columns are listed in the fully qualified columns of interest ambiguities in an unqualified column may be resolved to include the available restricted column information. However a normal operation of the query against the database would provide context that would resolve the query to a column that is not restricted. Therefore in some embodiments it may be advisable to first flag a query for human review before denying the query. A human may be able to determine that the query is actually a false positive due to incomplete context or if the query accesses information for which it does not have permission.

This process may be repeated not only upon an initial creation of the query but also other situations. This query analysis may be triggered based on policy changes policy audits or even a periodic audit. For example a company may periodically verify that all of its queries that access restricted information have received prior approval. Every month the query analysis tool may receive a list of columns of interest a set of queries to process and a list of queries that are expected to access restricted information. Each query may then be analyzed to determine if the query potentially accesses restricted information. The result of the access may then be compared against the list of queries to access restricted information. Queries that are not on the list but should be or queries that are on the list but should not be can be flagged for further review.

Turning now to an illustrative example of a process that may be used to determine whether an efficient query routing may be performed in accordance with at least one embodiment is shown. The process shown may be accomplished by a query analysis tool processing a proposed query using a list of fully qualified columns from database as seen in . For example a list of fully qualified columns of interest may be received that identify columns having information residing on a single server. The query analysis tool may then be used to determine if a query can route to the single server. The query may then be parsed to identify database accesses to columns within the query. Ambiguous information from the query may be rendered from a match with non ambiguous identifiers in the query that match the list of fully qualified columns of interest. These matching columns may be used to create a query list of potential resolutions to the ambiguous database accesses from the query. The query list may then be compared against the list of fully qualified columns of interest to determine if all exist in the query list and the list of fully qualified columns of interest. If so the query may be whitelisted for direct routing. If not the query may be required to go through a different routing and refused a direct query. Queries that are directly routed may be reviewed by a policy enforcement system such as seen and explained in .

Turning now to an illustrative example of a web management interface screen in accordance with at least one embodiment is shown. In some embodiments it may be desirable to provide feedback to users of a query analysis system. For example a developer may desire that all queries in a program be tested for access to restricted information. If this information were to be checked against a production database a user experience of the database might be degraded by all of the tests. However a query analysis tool may allow the developer to run the tests without impacting the database. The developer may use application programming interfaces to perform the tests and a web browser to view the results. In the embodiment shown a web management screen may be shown through a browser interface such as a web browser. A result of a failed test is displayed. The title provides information related to the test. Query analysis tool information may also be displayed such as a current test value a list of columns of interest used during the test and the database name against which the query analysis tool was applied. The result in this case a set of failures may be shown as well as a button or link to show more information about why the query failed such as which columns were contained in the query list and the list of columns of interest. Using this information and information from subsequent screens a developer may determine that the query access should be narrowed the query permissions should be enlarged or that all restricted information accesses should provide a visible failure even if appropriate.

The illustrative environment includes at least one application server and a data store . It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks such as obtaining data from an appropriate data store. As used herein the term data store refers to any device or combination of devices capable of storing accessing and retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed or clustered environment. The application server can include any appropriate hardware and software for integrating with the data store as needed to execute aspects of one or more applications for the client device handling a majority of the data access and business logic for an application. The application server provides access control services in cooperation with the data store and is able to generate content such as text graphics audio and or video to be transferred to the user which may be served to the user by the Web server in the form of HTML XML or another appropriate structured language in this example. The handling of all requests and responses as well as the delivery of content between the client device and the application server can be handled by the Web server. It should be understood that the Web and application servers are not required and are merely example components as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein.

The data store can include several separate data tables databases or other data storage mechanisms and media for storing data relating to a particular aspect. For example the data store illustrated includes mechanisms for storing production data and user information which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data which can be used for reporting analysis or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store such as for page image information and to access right information which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store . The data store is operable through logic associated therewith to receive instructions from the application server and obtain update or otherwise process data in response thereto. In one example a user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a Web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable storage medium e.g. a hard disk random access memory read only memory etc. storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop or laptop computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network.

Most embodiments utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as TCP IP OSI FTP UPnP NFS CIFS and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network and any combination thereof.

In embodiments utilizing a Web server the Web server can run any of a variety of server or mid tier applications including HTTP servers FTP servers CGI servers data servers Java servers and business application servers. The server s also may be capable of executing programs or scripts in response requests from user devices such as by executing one or more Web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM .

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or Web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the a system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. All methods described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments of the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Preferred embodiments of this disclosure are described herein including the best mode known to the inventors for carrying out the invention. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for the invention to be practiced otherwise than as specifically described herein. Accordingly this invention includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the invention unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

